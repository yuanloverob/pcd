{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95866af326ad06f6162fc7448100e0162ea2e2e6",
      "candidate_info": {
        "commit_hash": "95866af326ad06f6162fc7448100e0162ea2e2e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95866af326ad06f6162fc7448100e0162ea2e2e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Abort the OP_Savepoint opcode early if a virtual table xSync method fails, perhaps due to an interrupt.\n\nFossilOrigin-Name: 672e749aef7351de3c69b365c1f80c756fda4e261b5d2ac1faa01d3a7d5a4c49",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a89b38605661e36d192df1d074383b704b34a959fcbc169837c0d4f6848f3208",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3293:           db->mDbFlags |= DBFLAG_SchemaChange;",
          "3294:         }",
          "3295:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3296:       if( rc ) goto abort_due_to_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39593e4f0932dd09dca6820888fc725d12262272",
      "candidate_info": {
        "commit_hash": "39593e4f0932dd09dca6820888fc725d12262272",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39593e4f0932dd09dca6820888fc725d12262272",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "The check-in [b7810062ec2489e1] was not quite right in that it allowed an oversized shift operation (which is UB in C) on some obscure inputs.  OSSFuzz found the problem for us overnight.\n\nFossilOrigin-Name: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32772dfd50b602c049d8c30bc28cde60a18b7495a997d728081f689ff417c956",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3203:       if( iTerm>mxTerm ) mxTerm = iTerm;",
          "3204:       testcase( iTerm==15 );",
          "3205:       testcase( iTerm==16 );",
          "3208:           testcase( i!=iTerm );",
          "3209:           pNew->u.vtab.omitMask |= 1<<iTerm;",
          "3210:         }else{",
          "",
          "[Removed Lines]",
          "3206:       if( iTerm<16 && pUsage[i].omit ){",
          "3207:         if( ((1<<i)&mNoOmit)==0 ){",
          "",
          "[Added Lines]",
          "3206:       if( pUsage[i].omit ){",
          "3207:         if( i<16 && ((1<<i)&mNoOmit)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c70f71e12bfaf07d851d1263ff872eb46bc8501",
      "candidate_info": {
        "commit_hash": "1c70f71e12bfaf07d851d1263ff872eb46bc8501",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c70f71e12bfaf07d851d1263ff872eb46bc8501",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid redefining types u32 and u16 when fossildelta.c is compiled as part of the amalgamation.\n\nFossilOrigin-Name: d8e88248e3204b5f2b95b9b8921ee7ee2f7574ae81e6abd5b4f2ddf187f7d71b",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"sqlite3ext.h\"",
          "37: SQLITE_EXTENSION_INIT1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #ifndef SQLITE_AMALGAMATION",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f60a83069168899dcfd706b4d0901084c7ce92d85277950317e962a8a98ec668",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0f820a7e61a22197d9fed275973c3e425aa7927",
      "candidate_info": {
        "commit_hash": "d0f820a7e61a22197d9fed275973c3e425aa7927",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0f820a7e61a22197d9fed275973c3e425aa7927",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c",
          "test/vacuum-into.test"
        ],
        "message": "Enhance the VACUUM INTO command so that it works on read-only databases.\n\nFossilOrigin-Name: 55be6d0a9fa8a64b9c9c5ed51a2b9144304f7f0870a13b92d5864ac4d54491b6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5acf3af65f9608d4096b9b78289d84b21cd1ea463457f858ffeb20d5bd5d123",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     sqlite3SetString(pzErrMsg, db,\"cannot VACUUM - SQL statements in progress\");",
          "169:     return SQLITE_ERROR;",
          "170:   }",
          "171:   if( pOut ){",
          "172:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "173:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "174:       return SQLITE_ERROR;",
          "175:     }",
          "176:     zOut = (const char*)sqlite3_value_text(pOut);",
          "177:   }else{",
          "178:     zOut = \"\";",
          "179:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   saved_openFlags = db->openFlags;",
          "179:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "180:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:   nDb = db->nDb;",
          "214:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut);",
          "215:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "216:   assert( (db->nDb-1)==nDb );",
          "217:   pDb = &db->aDb[nDb];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:   db->openFlags = saved_openFlags;",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   VACUUM INTO target2()",
          "87: } {1 {no such function: target2}}",
          "90: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # The ability to VACUUM INTO a read-only database",
          "90: db close",
          "91: sqlite3 db test.db -readonly 1",
          "92: forcedelete test.db2",
          "93: do_execsql_test vacuum-into-500 {",
          "94:   VACUUM INTO 'test.db2';",
          "95: }",
          "96: sqlite3 db2 test.db2",
          "97: do_test vacuum-into-510 {",
          "98:   db2 eval {SELECT name FROM sqlite_master ORDER BY 1}",
          "99: } {t1 t1b t2}",
          "100: db2 close",
          "101: db close",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e11892db8919592352b20228b9c9c36f31bf1a8",
      "candidate_info": {
        "commit_hash": "6e11892db8919592352b20228b9c9c36f31bf1a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e11892db8919592352b20228b9c9c36f31bf1a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/where.c",
          "src/window.c",
          "test/nulls1.test",
          "tool/mkkeywordhash.c"
        ],
        "message": "Experimental implementation of NULLS FIRST/LAST. This branch still has problems - the most significant of which is that ORDER BY clauses with a non-default NULLS FIRST/LAST qualifier can never use an index.\n\nFossilOrigin-Name: 07babb0f897fc8c9cb5b30481899c32fdd743f3f3ca508d8d957826252107dd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "test/nulls1.test||test/nulls1.test",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1443:     pTab->keyConf = (u8)onError;",
          "1444:     assert( autoInc==0 || autoInc==1 );",
          "1445:     pTab->tabFlags |= autoInc*TF_Autoincrement;",
          "1447:   }else if( autoInc ){",
          "1448: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "1449:     sqlite3ErrorMsg(pParse, \"AUTOINCREMENT is only allowed on an \"",
          "",
          "[Removed Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortOrder;",
          "",
          "[Added Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1894:     if( IN_RENAME_OBJECT ){",
          "1895:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1896:     }",
          "1898:     assert( pParse->pNewTable==pTab );",
          "1899:     pTab->iPKey = -1;",
          "1900:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "",
          "[Removed Lines]",
          "1897:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "",
          "[Added Lines]",
          "1897:     pList->a[0].sortFlags = pParse->iPkSortOrder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3368:               sqlite3ExprAlloc(db, TK_ID, &prevCol, 0));",
          "3369:     if( pList==0 ) goto exit_create_index;",
          "3370:     assert( pList->nExpr==1 );",
          "3372:   }else{",
          "3373:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3374:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "[Removed Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "",
          "[Added Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3486:       goto exit_create_index;",
          "3487:     }",
          "3488:     pIndex->azColl[i] = zColl;",
          "3490:     pIndex->aSortOrder[i] = (u8)requestedSortOrder;",
          "3491:   }",
          "",
          "[Removed Lines]",
          "3489:     requestedSortOrder = pListItem->sortOrder & sortOrderMask;",
          "",
          "[Added Lines]",
          "3489:     requestedSortOrder = pListItem->sortFlags & sortOrderMask;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4704:       const char *zColl = pIdx->azColl[i];",
          "4705:       pKey->aColl[i] = zColl==sqlite3StrBINARY ? 0 :",
          "4706:                         sqlite3LocateCollSeq(pParse, zColl);",
          "4708:     }",
          "4709:     if( pParse->nErr ){",
          "4710:       assert( pParse->rc==SQLITE_ERROR_MISSING_COLLSEQ );",
          "",
          "[Removed Lines]",
          "4707:       pKey->aSortOrder[i] = pIdx->aSortOrder[i];",
          "",
          "[Added Lines]",
          "4707:       pKey->aSortFlags[i] = pIdx->aSortOrder[i];",
          "4708:       assert( 0==(pKey->aSortFlags[i] & KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:     }",
          "1405:     pItem->zName = sqlite3DbStrDup(db, pOldItem->zName);",
          "1406:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1408:     pItem->done = 0;",
          "1409:     pItem->bSpanIsTab = pOldItem->bSpanIsTab;",
          "1410:     pItem->bSorterRef = pOldItem->bSorterRef;",
          "",
          "[Removed Lines]",
          "1407:     pItem->sortOrder = pOldItem->sortOrder;",
          "",
          "[Added Lines]",
          "1407:     pItem->sortFlags = pOldItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1661:   if( p==0 ) return;",
          "1663:   assert( p->nExpr>0 );",
          "1667:   }",
          "1669: }",
          "",
          "[Removed Lines]",
          "1660: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){",
          "1662:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC>=0 && SQLITE_SO_DESC>0 );",
          "1664:   if( iSortOrder<0 ){",
          "1665:     assert( p->a[p->nExpr-1].sortOrder==SQLITE_SO_ASC );",
          "1666:     return;",
          "1668:   p->a[p->nExpr-1].sortOrder = (u8)iSortOrder;",
          "",
          "[Added Lines]",
          "1660: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1664:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC==0 && SQLITE_SO_DESC>0 );",
          "1665:   assert( iSortOrder==SQLITE_SO_UNDEFINED",
          "1666:        || iSortOrder==SQLITE_SO_ASC",
          "1667:        || iSortOrder==SQLITE_SO_DESC",
          "1668:   );",
          "1669:   assert( eNulls==SQLITE_SO_UNDEFINED",
          "1670:        || eNulls==SQLITE_SO_ASC",
          "1671:        || eNulls==SQLITE_SO_DESC",
          "1672:   );",
          "1674:   if( iSortOrder==SQLITE_SO_UNDEFINED ) iSortOrder = SQLITE_SO_ASC;",
          "1675:   p->a[p->nExpr-1].sortFlags = (u8)iSortOrder;",
          "1676:   if( eNulls!=SQLITE_SO_UNDEFINED && iSortOrder!=eNulls ){",
          "1677:     p->a[p->nExpr-1].sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4909:   for(i=0; i<pA->nExpr; i++){",
          "4910:     Expr *pExprA = pA->a[i].pExpr;",
          "4911:     Expr *pExprB = pB->a[i].pExpr;",
          "4913:     if( sqlite3ExprCompare(0, pExprA, pExprB, iTab) ) return 1;",
          "4914:   }",
          "4915:   return 0;",
          "",
          "[Removed Lines]",
          "4912:     if( pA->a[i].sortOrder!=pB->a[i].sortOrder ) return 1;",
          "",
          "[Added Lines]",
          "4922:     if( pA->a[i].sortFlags!=pB->a[i].sortFlags ) return 1;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   IGNORE IMMEDIATE INITIALLY INSTEAD LIKE_KW MATCH NO PLAN",
          "212:   QUERY KEY OF OFFSET PRAGMA RAISE RECURSIVE RELEASE REPLACE RESTRICT ROW ROWS",
          "213:   ROLLBACK SAVEPOINT TEMP TRIGGER VACUUM VIEW VIRTUAL WITH WITHOUT",
          "214: %ifdef SQLITE_OMIT_COMPOUND_SELECT",
          "215:   EXCEPT INTERSECT UNION",
          "216: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   NULLS FIRST LAST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782: orderby_opt(A) ::= .                          {A = 0;}",
          "783: orderby_opt(A) ::= ORDER BY sortlist(X).      {A = X;}",
          "785:   A = sqlite3ExprListAppend(pParse,A,Y);",
          "787: }",
          "791: }",
          "793: %type sortorder {int}",
          "",
          "[Removed Lines]",
          "784: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z). {",
          "786:   sqlite3ExprListSetSortOrder(A,Z);",
          "788: sortlist(A) ::= expr(Y) sortorder(Z). {",
          "790:   sqlite3ExprListSetSortOrder(A,Z);",
          "",
          "[Added Lines]",
          "785: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z) nulls(X). {",
          "787:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "789: sortlist(A) ::= expr(Y) sortorder(Z) nulls(X). {",
          "791:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: sortorder(A) ::= DESC.          {A = SQLITE_SO_DESC;}",
          "797: sortorder(A) ::= .              {A = SQLITE_SO_UNDEFINED;}",
          "799: %type groupby_opt {ExprList*}",
          "800: %destructor groupby_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "801: groupby_opt(A) ::= .                      {A = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800: %type nulls {int}",
          "801: nulls(A) ::= NULLS FIRST.       {A = SQLITE_SO_ASC;}",
          "802: nulls(A) ::= NULLS LAST.        {A = SQLITE_SO_DESC;}",
          "803: nulls(A) ::= .                  {A = SQLITE_SO_UNDEFINED;}",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1275:   int nExtra = (N+X)*(sizeof(CollSeq*)+1) - sizeof(CollSeq*);",
          "1276:   KeyInfo *p = sqlite3DbMallocRawNN(db, sizeof(KeyInfo) + nExtra);",
          "1277:   if( p ){",
          "1279:     p->nKeyField = (u16)N;",
          "1280:     p->nAllField = (u16)(N+X);",
          "1281:     p->enc = ENC(db);",
          "",
          "[Removed Lines]",
          "1278:     p->aSortOrder = (u8*)&p->aColl[N+X];",
          "",
          "[Added Lines]",
          "1278:     p->aSortFlags = (u8*)&p->aColl[N+X];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:     assert( sqlite3KeyInfoIsWriteable(pInfo) );",
          "1353:     for(i=iStart, pItem=pList->a+iStart; i<nExpr; i++, pItem++){",
          "1354:       pInfo->aColl[i-iStart] = sqlite3ExprNNCollSeq(pParse, pItem->pExpr);",
          "1356:     }",
          "1357:   }",
          "1358:   return pInfo;",
          "",
          "[Removed Lines]",
          "1355:       pInfo->aSortOrder[i-iStart] = pItem->sortOrder;",
          "",
          "[Added Lines]",
          "1355:       pInfo->aSortFlags[i-iStart] = pItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2253:       }",
          "2254:       assert( sqlite3KeyInfoIsWriteable(pRet) );",
          "2255:       pRet->aColl[i] = pColl;",
          "2257:     }",
          "2258:   }",
          "",
          "[Removed Lines]",
          "2256:       pRet->aSortOrder[i] = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "2256:       pRet->aSortFlags[i] = pOrderBy->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3228:       assert( sqlite3KeyInfoIsWriteable(pKeyDup) );",
          "3229:       for(i=0; i<nExpr; i++){",
          "3230:         pKeyDup->aColl[i] = multiSelectCollSeq(pParse, p, i);",
          "3232:       }",
          "3233:     }",
          "3234:   }",
          "",
          "[Removed Lines]",
          "3231:         pKeyDup->aSortOrder[i] = 0;",
          "",
          "[Added Lines]",
          "3231:         pKeyDup->aSortFlags[i] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4425:   }",
          "4427:   assert( pOrderBy!=0 || db->mallocFailed );",
          "4429:   return eRet;",
          "4430: }",
          "",
          "[Removed Lines]",
          "4428:   if( pOrderBy ) pOrderBy->a[0].sortOrder = sortOrder;",
          "",
          "[Added Lines]",
          "4428:   if( pOrderBy ) pOrderBy->a[0].sortFlags = sortOrder;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2141: #define KEYINFO_ORDER_DESC    0x01",
          "2142: #define KEYINFO_ORDER_BIGNULL 0x02",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3881: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "3882: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3883: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3885: void sqlite3ExprListSetName(Parse*,ExprList*,Token*,int);",
          "3886: void sqlite3ExprListSetSpan(Parse*,ExprList*,const char*,const char*);",
          "3887: void sqlite3ExprListDelete(sqlite3*, ExprList*);",
          "",
          "[Removed Lines]",
          "3884: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Added Lines]",
          "3887: void sqlite3ExprListSetSortOrder(ExprList*,int,int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:     REGISTER_TRACE(p2+idx, &aMem[p2+idx]);",
          "2228:     assert( i<pKeyInfo->nKeyField );",
          "2229:     pColl = pKeyInfo->aColl[i];",
          "2231:     iCompare = sqlite3MemCompare(&aMem[p1+idx], &aMem[p2+idx], pColl);",
          "2232:     if( iCompare ){",
          "2233:       if( bRev ) iCompare = -iCompare;",
          "2234:       break;",
          "2235:     }",
          "",
          "[Removed Lines]",
          "2230:     bRev = pKeyInfo->aSortOrder[i];",
          "",
          "[Added Lines]",
          "2230:     bRev = (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC);",
          "2233:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "2234:        && ((aMem[p1+idx].flags & MEM_Null) || (aMem[p2+idx].flags & MEM_Null))",
          "2235:       ){",
          "2236:         iCompare = -iCompare;",
          "2237:       }",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:     case P4_KEYINFO: {",
          "1494:       int j;",
          "1495:       KeyInfo *pKeyInfo = pOp->p4.pKeyInfo;",
          "1497:       sqlite3_str_appendf(&x, \"k(%d\", pKeyInfo->nKeyField);",
          "1498:       for(j=0; j<pKeyInfo->nKeyField; j++){",
          "1499:         CollSeq *pColl = pKeyInfo->aColl[j];",
          "1500:         const char *zColl = pColl ? pColl->zName : \"\";",
          "1501:         if( strcmp(zColl, \"BINARY\")==0 ) zColl = \"B\";",
          "1504:       }",
          "1505:       sqlite3_str_append(&x, \")\", 1);",
          "1506:       break;",
          "",
          "[Removed Lines]",
          "1496:       assert( pKeyInfo->aSortOrder!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s\",",
          "1503:                pKeyInfo->aSortOrder[j] ? \"-\" : \"\", zColl);",
          "",
          "[Added Lines]",
          "1496:       assert( pKeyInfo->aSortFlags!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s%s\",",
          "1503:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_DESC) ? \"-\" : \"\",",
          "1504:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_BIGNULL)? \"N.\" : \"\",",
          "1505:                zColl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3813:   p = (UnpackedRecord *)sqlite3DbMallocRaw(pKeyInfo->db, nByte);",
          "3814:   if( !p ) return 0;",
          "3815:   p->aMem = (Mem*)&((char*)p)[ROUND8(sizeof(UnpackedRecord))];",
          "3817:   p->pKeyInfo = pKeyInfo;",
          "3818:   p->nField = pKeyInfo->nKeyField + 1;",
          "3819:   return p;",
          "",
          "[Removed Lines]",
          "3816:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3818:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3912:   if( szHdr1>98307 ) return SQLITE_CORRUPT;",
          "3913:   d1 = szHdr1;",
          "3914:   assert( pKeyInfo->nAllField>=pPKey2->nField || CORRUPT_DB );",
          "3916:   assert( pKeyInfo->nKeyField>0 );",
          "3917:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "3918:   do{",
          "",
          "[Removed Lines]",
          "3915:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3917:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3943:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "3944:     if( rc!=0 ){",
          "3948:       }",
          "3949:       goto debugCompareEnd;",
          "",
          "[Removed Lines]",
          "3946:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Added Lines]",
          "3948:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "3949:        && ((mem1.flags & MEM_Null) || (pPKey2->aMem[i].flags & MEM_Null))",
          "3950:       ){",
          "3951:         rc = -rc;",
          "3952:       }",
          "3953:       if( pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4320:   assert( pPKey2->pKeyInfo->nAllField>=pPKey2->nField",
          "4321:        || CORRUPT_DB );",
          "4323:   assert( pPKey2->pKeyInfo->nKeyField>0 );",
          "4324:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "4325:   do{",
          "",
          "[Removed Lines]",
          "4322:   assert( pPKey2->pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "4329:   assert( pPKey2->pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4442:     }",
          "4444:     if( rc!=0 ){",
          "4447:       }",
          "4448:       assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) );",
          "",
          "[Removed Lines]",
          "4445:       if( pPKey2->pKeyInfo->aSortOrder[i] ){",
          "4446:         rc = -rc;",
          "",
          "[Added Lines]",
          "4452:       int sortFlags = pPKey2->pKeyInfo->aSortFlags[i];",
          "4453:       if( sortFlags ){",
          "4454:         if( (sortFlags & KEYINFO_ORDER_BIGNULL)==0",
          "4455:          || ((sortFlags & KEYINFO_ORDER_DESC)",
          "4456:            !=(serial_type==0 || (pRhs->flags&MEM_Null)))",
          "4457:         ){",
          "4458:           rc = -rc;",
          "4459:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4661:   if( p->pKeyInfo->nAllField<=13 ){",
          "4662:     int flags = p->aMem[0].flags;",
          "4664:       p->r1 = 1;",
          "4665:       p->r2 = -1;",
          "4666:     }else{",
          "",
          "[Removed Lines]",
          "4663:     if( p->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "4676:     if( p->pKeyInfo->aSortFlags[0] ){",
          "4677:       if( p->pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL ){",
          "4678:         return sqlite3VdbeRecordCompare;",
          "4679:       }",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:       );",
          "830:     }",
          "831:   }else{",
          "833:       res = res * -1;",
          "834:     }",
          "835:   }",
          "",
          "[Removed Lines]",
          "832:     if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "832:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "833:     if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:           pTask, pbKey2Cached, pKey1, nKey1, pKey2, nKey2",
          "898:       );",
          "899:     }",
          "901:     res = res * -1;",
          "902:   }",
          "",
          "[Removed Lines]",
          "900:   }else if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "901:   }else if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "902:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     if( pKeyInfo->nAllField<13",
          "1014:      && (pKeyInfo->aColl[0]==0 || pKeyInfo->aColl[0]==db->pDfltColl)",
          "1015:     ){",
          "1016:       pSorter->typeMask = SORTER_TYPE_INTEGER | SORTER_TYPE_TEXT;",
          "1017:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1017:      && (pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL)==0",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:   for(i=0; i<nOrderBy; i++){",
          "1032:     Expr *pExpr = pOrderBy->a[i].pExpr;",
          "1033:     pIdxOrderBy[i].iColumn = pExpr->iColumn;",
          "1035:   }",
          "",
          "[Removed Lines]",
          "1034:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "1034:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3836:               continue;",
          "3837:             }",
          "3838:           }",
          "3839:           if( iColumn!=XN_ROWID ){",
          "3840:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3841:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3839:           if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3849:         if( isMatch && (wctrlFlags & WHERE_GROUPBY)==0 ){",
          "3852:           if( revSet ){",
          "3854:           }else{",
          "3856:             if( rev ) *pRevMask |= MASKBIT(iLoop);",
          "3857:             revSet = 1;",
          "3858:           }",
          "",
          "[Removed Lines]",
          "3853:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortOrder ) isMatch = 0;",
          "3855:             rev = revIdx ^ pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "3853:           assert( (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL)==0 );",
          "3855:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortFlags ) isMatch = 0;",
          "3857:             rev = revIdx ^ pOrderBy->a[i].sortFlags;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "889:       }",
          "890:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "892:     }",
          "893:   }",
          "894:   return pList;",
          "",
          "[Removed Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortOrder = pAppend->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:       pWin->regApp = pParse->nMem+1;",
          "1297:       pParse->nMem += 3;",
          "1298:       if( pKeyInfo && pWin->pFunc->zName[1]=='i' ){",
          "1301:       }",
          "1302:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pWin->csrApp, 2);",
          "1303:       sqlite3VdbeAppendP4(v, pKeyInfo, P4_KEYINFO);",
          "",
          "[Removed Lines]",
          "1299:         assert( pKeyInfo->aSortOrder[0]==0 );",
          "1300:         pKeyInfo->aSortOrder[0] = 1;",
          "",
          "[Added Lines]",
          "1299:         assert( pKeyInfo->aSortFlags[0]==0 );",
          "1300:         pKeyInfo->aSortFlags[0] = KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1861:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1862:   assert( p->pMWin->pOrderBy && p->pMWin->pOrderBy->nExpr==1 );",
          "1864:     switch( op ){",
          "1865:       case OP_Ge: op = OP_Le; break;",
          "1866:       case OP_Gt: op = OP_Lt; break;",
          "",
          "[Removed Lines]",
          "1863:   if( p->pMWin->pOrderBy->a[0].sortOrder ){",
          "",
          "[Added Lines]",
          "1863:   if( p->pMWin->pOrderBy->a[0].sortFlags & KEYINFO_ORDER_DESC ){",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 August 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix nulls1",
          "22: do_execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t3;",
          "24:   CREATE TABLE t3(a INTEGER);",
          "25:   INSERT INTO t3 VALUES(NULL), (10), (30), (20), (NULL);",
          "26: } {}",
          "28: for {set a 0} {$a < 2} {incr a} {",
          "29:   foreach {tn limit} {",
          "30:     1 \"\"",
          "31:     2 \"LIMIT 10\"",
          "32:   } {",
          "33:     do_execsql_test 1.$a.$tn.1 \"",
          "34:       SELECT a FROM t3 ORDER BY a nULLS FIRST $limit",
          "35:     \" {{}   {}   10   20   30}",
          "37:     do_execsql_test 1.$a.$tn.2 \"",
          "38:       SELECT a FROM t3 ORDER BY a nULLS LAST $limit",
          "39:     \" {10   20   30   {}   {}}",
          "41:     do_execsql_test 1.$a.$tn.3 \"",
          "42:       SELECT a FROM t3 ORDER BY a DESC nULLS FIRST $limit",
          "43:     \" {{}   {}   30   20   10}",
          "45:     do_execsql_test 1.$a.$tn.4 \"",
          "46:       SELECT a FROM t3 ORDER BY a DESC nULLS LAST $limit",
          "47:     \" {30   20   10   {}   {}}",
          "48:   }",
          "50:   catchsql { CREATE INDEX i1 ON t3(a) }",
          "51: }",
          "53: finish_test",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "211:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "212:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "213:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "214:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "215:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "236:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "237:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "238:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "239:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "240:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "246:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "247:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "248:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "249:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "250:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    }
  ]
}