{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8531046a86afcff6c93591fb88e2a22ec2c7e0a0",
      "candidate_info": {
        "commit_hash": "8531046a86afcff6c93591fb88e2a22ec2c7e0a0",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8531046a86afcff6c93591fb88e2a22ec2c7e0a0",
        "files": [
          "src/queue.h"
        ],
        "message": "windows: omit stdint.h, fix msvc 2008 build error\n\nDon't include <stdint.h>, it's not available when compiling with MSVC\n2008 and we don't need it in the first place - just cast the argument\nto `char *` rather than `uintptr_t`.\n\nFixes #893.",
        "before_after_code_files": [
          "src/queue.h||src/queue.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/queue.h||src/queue.h": [
          "File: src/queue.h -> src/queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef QUEUE_H_",
          "17: #define QUEUE_H_",
          "21: typedef void *QUEUE[2];",
          "",
          "[Removed Lines]",
          "19: #include <stdint.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #define QUEUE_DATA(ptr, type, field)                                          \\",
          "33: #define QUEUE_FOREACH(q, h)                                                   \\",
          "34:   for ((q) = (QUEUE *) (*(h))[0]; (q) != (h); (q) = (QUEUE *) (*(q))[0])",
          "",
          "[Removed Lines]",
          "31:   ((type *) ((char *) (ptr) - ((uintptr_t) &((type *) 0)->field)))",
          "",
          "[Added Lines]",
          "29:   ((type *) ((char *) (ptr) - ((char *) &((type *) 0)->field)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5260462db80ab0deab6b9e6a8991dd8f5a9a2f8",
      "candidate_info": {
        "commit_hash": "a5260462db80ab0deab6b9e6a8991dd8f5a9a2f8",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a5260462db80ab0deab6b9e6a8991dd8f5a9a2f8",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.08.22, Version 0.11.8 (Unstable)\n\nChanges since version 0.11.7:\n\n* unix: fix missing return value warning in stream.c (Ben Noordhuis)\n\n* build: serial-tests was added in automake v1.12 (Ben Noordhuis)\n\n* windows: fix uninitialized local variable warning (Ben Noordhuis)\n\n* windows: fix missing return value warning (Ben Noordhuis)\n\n* build: fix string comparisons in autogen.sh (Ben Noordhuis)\n\n* windows: move INLINE macro, remove UNUSED (Ben Noordhuis)\n\n* unix: clean up __attribute__((quux)) usage (Ben Noordhuis)\n\n* sunos: remove futimes() macro (Ben Noordhuis)\n\n* unix: fix uv__signal_unlock() prototype (Ben Noordhuis)\n\n* unix, windows: allow NULL async callback (Ben Noordhuis)\n\n* build: apply dtrace -G to all object files (Timothy J. Fontaine)\n\n* darwin: fix indentation in uv__hrtime() (Ben Noordhuis)\n\n* darwin: create fsevents thread on demand (Ben Noordhuis)\n\n* darwin: reduce fsevents thread stack size (Ben Noordhuis)\n\n* darwin: call pthread_setname_np() if available (Ben Noordhuis)\n\n* build: fix automake serial-tests check again (Ben Noordhuis)\n\n* unix: retry waitpid() on EINTR (Ben Noordhuis)\n\n* darwin: fix ios build error (Ben Noordhuis)\n\n* darwin: fix ios compiler warning (Ben Noordhuis)\n\n* test: simplify test-ip6-addr.c (Ben Noordhuis)\n\n* unix, windows: fix ipv6 link-local address parsing (Ben Noordhuis)\n\n* fsevents: FSEvents is most likely not thread-safe (Fedor Indutny)\n\n* windows: omit stdint.h, fix msvc 2008 build error (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 8",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a8767e35eb7901ecb2a8ec2bde5c4dba69a0e7a",
      "candidate_info": {
        "commit_hash": "3a8767e35eb7901ecb2a8ec2bde5c4dba69a0e7a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3a8767e35eb7901ecb2a8ec2bde5c4dba69a0e7a",
        "files": [
          "src/unix/fs.c",
          "test/test-fs.c",
          "test/test-list.h"
        ],
        "message": "unix: fix uv_fs_write when using an empty buffer",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598: # endif",
          "599:       written = 0;",
          "600:       index = 0;",
          "602:       do {",
          "603:         if (req->bufs[index].len > 0) {",
          "604:           r = pwrite(req->file,",
          "",
          "[Removed Lines]",
          "601:       r = 1;",
          "",
          "[Added Lines]",
          "601:       r = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:             written += r;",
          "610:         }",
          "611:         index++;",
          "613:       if (written > 0)",
          "614:         r = written;",
          "615:     }",
          "",
          "[Removed Lines]",
          "612:       } while (index < req->nbufs && r > 0);",
          "",
          "[Added Lines]",
          "612:       } while (index < req->nbufs && r >= 0);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: }",
          "738: TEST_IMPL(fs_async_dir) {",
          "739:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738: TEST_IMPL(fs_file_write_null_buffer) {",
          "739:   int r;",
          "742:   unlink(\"test_file\");",
          "744:   loop = uv_default_loop();",
          "746:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "747:       S_IWUSR | S_IRUSR, NULL);",
          "748:   ASSERT(r >= 0);",
          "749:   ASSERT(open_req1.result >= 0);",
          "750:   uv_fs_req_cleanup(&open_req1);",
          "752:   iov = uv_buf_init(NULL, 0);",
          "753:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "754:   ASSERT(r == 0);",
          "755:   ASSERT(write_req.result == 0);",
          "756:   uv_fs_req_cleanup(&write_req);",
          "758:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "759:   ASSERT(r == 0);",
          "760:   ASSERT(close_req.result == 0);",
          "761:   uv_fs_req_cleanup(&close_req);",
          "763:   unlink(\"test_file\");",
          "765:   MAKE_VALGRIND_HAPPY();",
          "766:   return 0;",
          "767: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: TEST_DECLARE   (fs_file_loop)",
          "184: TEST_DECLARE   (fs_file_async)",
          "185: TEST_DECLARE   (fs_file_sync)",
          "186: TEST_DECLARE   (fs_async_dir)",
          "187: TEST_DECLARE   (fs_async_sendfile)",
          "188: TEST_DECLARE   (fs_fstat)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: TEST_DECLARE   (fs_file_write_null_buffer)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:   TEST_ENTRY  (fs_file_loop)",
          "507:   TEST_ENTRY  (fs_file_async)",
          "508:   TEST_ENTRY  (fs_file_sync)",
          "509:   TEST_ENTRY  (fs_async_dir)",
          "510:   TEST_ENTRY  (fs_async_sendfile)",
          "511:   TEST_ENTRY  (fs_fstat)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   TEST_ENTRY  (fs_file_write_null_buffer)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c5ab1a73e69c4cec0b1536f9de471843c11f827",
      "candidate_info": {
        "commit_hash": "7c5ab1a73e69c4cec0b1536f9de471843c11f827",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7c5ab1a73e69c4cec0b1536f9de471843c11f827",
        "files": [
          "Makefile.am",
          "src/unix/udp.c",
          "src/win/udp.c",
          "test/test-list.h",
          "test/test-udp-multicast-join6.c",
          "uv.gyp"
        ],
        "message": "unix, windows: add IPv6 support to uv_udp_set_membership\n\nReworked from initial version by @snoj",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/udp.c||src/win/udp.c",
          "test/test-list.h||test/test-list.h",
          "test/test-udp-multicast-join6.c||test/test-udp-multicast-join6.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:                          test/test-udp-ipv6.c \\",
          "205:                          test/test-udp-multicast-interface.c \\",
          "206:                          test/test-udp-multicast-join.c \\",
          "207:                          test/test-udp-multicast-ttl.c \\",
          "208:                          test/test-udp-open.c \\",
          "209:                          test/test-udp-options.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:                          test/test-udp-multicast-join6.c \\",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <stdlib.h>",
          "29: #include <unistd.h>",
          "32: static void uv__udp_run_completed(uv_udp_t* handle);",
          "33: static void uv__udp_run_pending(uv_udp_t* handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #if defined(IPV6_JOIN_GROUP) && !defined(IPV6_ADD_MEMBERSHIP)",
          "32: # define IPV6_ADD_MEMBERSHIP IPV6_JOIN_GROUP",
          "33: #endif",
          "35: #if defined(IPV6_LEAVE_GROUP) && !defined(IPV6_DROP_MEMBERSHIP)",
          "36: # define IPV6_DROP_MEMBERSHIP IPV6_LEAVE_GROUP",
          "37: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422: }",
          "448:   return 0;",
          "449: }",
          "457:   int optname;",
          "459:   memset(&mreq, 0, sizeof mreq);",
          "461:   if (interface_addr) {",
          "463:   } else {",
          "465:   }",
          "469:   switch (membership) {",
          "470:   case UV_JOIN_GROUP:",
          "472:     break;",
          "473:   case UV_LEAVE_GROUP:",
          "475:     break;",
          "476:   default:",
          "477:     return -EINVAL;",
          "478:   }",
          "480:   if (setsockopt(handle->io_watcher.fd,",
          "482:                  optname,",
          "483:                  &mreq,",
          "484:                  sizeof(mreq))) {",
          "",
          "[Removed Lines]",
          "425: int uv_udp_init(uv_loop_t* loop, uv_udp_t* handle) {",
          "426:   uv__handle_init(loop, (uv_handle_t*)handle, UV_UDP);",
          "427:   handle->alloc_cb = NULL;",
          "428:   handle->recv_cb = NULL;",
          "429:   uv__io_init(&handle->io_watcher, uv__udp_io, -1);",
          "430:   QUEUE_INIT(&handle->write_queue);",
          "431:   QUEUE_INIT(&handle->write_completed_queue);",
          "432:   return 0;",
          "433: }",
          "436: int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock) {",
          "437:   int err;",
          "440:   if (handle->io_watcher.fd != -1)",
          "443:   err = uv__set_reuse(sock);",
          "444:   if (err)",
          "445:     return err;",
          "447:   handle->io_watcher.fd = sock;",
          "452: int uv_udp_set_membership(uv_udp_t* handle,",
          "453:                           const char* multicast_addr,",
          "454:                           const char* interface_addr,",
          "455:                           uv_membership membership) {",
          "456:   struct ip_mreq mreq;",
          "462:     mreq.imr_interface.s_addr = inet_addr(interface_addr);",
          "464:     mreq.imr_interface.s_addr = htonl(INADDR_ANY);",
          "467:   mreq.imr_multiaddr.s_addr = inet_addr(multicast_addr);",
          "471:     optname = IP_ADD_MEMBERSHIP;",
          "474:     optname = IP_DROP_MEMBERSHIP;",
          "481:                  IPPROTO_IP,",
          "",
          "[Added Lines]",
          "433: static int uv__udp_set_membership4(uv_udp_t* handle,",
          "434:                                    const struct sockaddr_in* multicast_addr,",
          "435:                                    const char* interface_addr,",
          "436:                                    uv_membership membership) {",
          "437:   struct ip_mreq mreq;",
          "438:   int optname;",
          "439:   int err;",
          "441:   memset(&mreq, 0, sizeof mreq);",
          "443:   if (interface_addr) {",
          "444:     err = uv_inet_pton(AF_INET, interface_addr, &mreq.imr_interface.s_addr);",
          "445:     if (err)",
          "446:       return err;",
          "447:   } else {",
          "448:     mreq.imr_interface.s_addr = htonl(INADDR_ANY);",
          "449:   }",
          "451:   mreq.imr_multiaddr.s_addr = multicast_addr->sin_addr.s_addr;",
          "453:   switch (membership) {",
          "454:   case UV_JOIN_GROUP:",
          "455:     optname = IP_ADD_MEMBERSHIP;",
          "456:     break;",
          "457:   case UV_LEAVE_GROUP:",
          "458:     optname = IP_DROP_MEMBERSHIP;",
          "459:     break;",
          "460:   default:",
          "461:     return -EINVAL;",
          "462:   }",
          "464:   if (setsockopt(handle->io_watcher.fd,",
          "465:                  IPPROTO_IP,",
          "466:                  optname,",
          "467:                  &mreq,",
          "468:                  sizeof(mreq))) {",
          "469:     return -errno;",
          "470:   }",
          "476: static int uv__udp_set_membership6(uv_udp_t* handle,",
          "477:                                    const struct sockaddr_in6* multicast_addr,",
          "478:                                    const char* interface_addr,",
          "479:                                    uv_membership membership) {",
          "481:   struct ipv6_mreq mreq;",
          "482:   struct sockaddr_in6 addr6;",
          "487:     if (uv_ip6_addr(interface_addr, 0, &addr6))",
          "488:       return -EINVAL;",
          "489:     mreq.ipv6mr_interface = addr6.sin6_scope_id;",
          "491:     mreq.ipv6mr_interface = 0;",
          "494:   mreq.ipv6mr_multiaddr = multicast_addr->sin6_addr;",
          "498:     optname = IPV6_ADD_MEMBERSHIP;",
          "501:     optname = IPV6_DROP_MEMBERSHIP;",
          "508:                  IPPROTO_IPV6,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489: }",
          "492: static int uv__setsockopt_maybe_char(uv_udp_t* handle, int option, int val) {",
          "493: #if defined(__sun)",
          "494:   char arg = val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: int uv_udp_init(uv_loop_t* loop, uv_udp_t* handle) {",
          "520:   uv__handle_init(loop, (uv_handle_t*)handle, UV_UDP);",
          "521:   handle->alloc_cb = NULL;",
          "522:   handle->recv_cb = NULL;",
          "523:   uv__io_init(&handle->io_watcher, uv__udp_io, -1);",
          "524:   QUEUE_INIT(&handle->write_queue);",
          "525:   QUEUE_INIT(&handle->write_completed_queue);",
          "526:   return 0;",
          "527: }",
          "530: int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock) {",
          "531:   int err;",
          "534:   if (handle->io_watcher.fd != -1)",
          "537:   err = uv__set_reuse(sock);",
          "538:   if (err)",
          "539:     return err;",
          "541:   handle->io_watcher.fd = sock;",
          "542:   return 0;",
          "543: }",
          "546: int uv_udp_set_membership(uv_udp_t* handle,",
          "547:                           const char* multicast_addr,",
          "548:                           const char* interface_addr,",
          "549:                           uv_membership membership) {",
          "550:   struct sockaddr_in addr4;",
          "551:   struct sockaddr_in6 addr6;",
          "553:   if (uv_ip4_addr(multicast_addr, 0, &addr4) == 0)",
          "554:     return uv__udp_set_membership4(handle, &addr4, interface_addr, membership);",
          "555:   else if (uv_ip6_addr(multicast_addr, 0, &addr6) == 0)",
          "556:     return uv__udp_set_membership6(handle, &addr6, interface_addr, membership);",
          "557:   else",
          "558:     return -EINVAL;",
          "559: }",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532: }",
          "537:   int err;",
          "538:   int optname;",
          "539:   struct ip_mreq mreq;",
          "542:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "543:     err = uv_udp_try_bind(handle,",
          "",
          "[Removed Lines]",
          "535: int uv_udp_set_membership(uv_udp_t* handle, const char* multicast_addr,",
          "536:     const char* interface_addr, uv_membership membership) {",
          "",
          "[Added Lines]",
          "535: static int uv__udp_set_membership4(uv_udp_t* handle,",
          "536:                                    const struct sockaddr_in* multicast_addr,",
          "537:                                    const char* interface_addr,",
          "538:                                    uv_membership membership) {",
          "543:   if (handle->flags & UV_HANDLE_IPV6)",
          "544:     return UV_EINVAL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:       return uv_translate_sys_error(err);",
          "549:   }",
          "555:   memset(&mreq, 0, sizeof mreq);",
          "557:   if (interface_addr) {",
          "",
          "[Removed Lines]",
          "551:   if (handle->flags & UV_HANDLE_IPV6) {",
          "552:     return UV_ENOSYS;",
          "553:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "560:     mreq.imr_interface.s_addr = htonl(INADDR_ANY);",
          "561:   }",
          "565:   switch (membership) {",
          "566:     case UV_JOIN_GROUP:",
          "",
          "[Removed Lines]",
          "563:   mreq.imr_multiaddr.s_addr = inet_addr(multicast_addr);",
          "",
          "[Added Lines]",
          "564:   mreq.imr_multiaddr.s_addr = multicast_addr->sin_addr.s_addr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585: }",
          "588: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "589:   struct in_addr addr;",
          "590:   int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: int uv__udp_set_membership6(uv_udp_t* handle,",
          "590:                             const struct sockaddr_in6* multicast_addr,",
          "591:                             const char* interface_addr,",
          "592:                             uv_membership membership) {",
          "593:   int optname;",
          "594:   int err;",
          "595:   struct ipv6_mreq mreq;",
          "596:   struct sockaddr_in6 addr6;",
          "598:   if ((handle->flags & UV_HANDLE_BOUND) && !(handle->flags & UV_HANDLE_IPV6))",
          "599:     return UV_EINVAL;",
          "601:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "602:     err = uv_udp_try_bind(handle,",
          "603:                           (const struct sockaddr*) &uv_addr_ip6_any_,",
          "604:                           sizeof(uv_addr_ip6_any_),",
          "605:                           0);",
          "607:     if (err)",
          "608:       return uv_translate_sys_error(err);",
          "609:   }",
          "611:   memset(&mreq, 0, sizeof(mreq));",
          "613:   if (interface_addr) {",
          "614:     if (uv_ip6_addr(interface_addr, 0, &addr6))",
          "615:       return UV_EINVAL;",
          "616:     mreq.ipv6mr_interface = addr6.sin6_scope_id;",
          "617:   } else {",
          "618:     mreq.ipv6mr_interface = 0;",
          "619:   }",
          "621:   mreq.ipv6mr_multiaddr = multicast_addr->sin6_addr;",
          "623:   switch (membership) {",
          "624:   case UV_JOIN_GROUP:",
          "625:     optname = IPV6_ADD_MEMBERSHIP;",
          "626:     break;",
          "627:   case UV_LEAVE_GROUP:",
          "628:     optname = IPV6_DROP_MEMBERSHIP;",
          "629:     break;",
          "630:   default:",
          "631:     return UV_EINVAL;",
          "632:   }",
          "634:   if (setsockopt(handle->socket,",
          "635:                  IPPROTO_IPV6,",
          "636:                  optname,",
          "637:                  (char*) &mreq,",
          "638:                  sizeof mreq) == SOCKET_ERROR) {",
          "639:     return uv_translate_sys_error(WSAGetLastError());",
          "640:   }",
          "642:   return 0;",
          "643: }",
          "646: int uv_udp_set_membership(uv_udp_t* handle,",
          "647:                           const char* multicast_addr,",
          "648:                           const char* interface_addr,",
          "649:                           uv_membership membership) {",
          "650:   struct sockaddr_in addr4;",
          "651:   struct sockaddr_in6 addr6;",
          "653:   if (uv_ip4_addr(multicast_addr, 0, &addr4) == 0)",
          "654:     return uv__udp_set_membership4(handle, &addr4, interface_addr, membership);",
          "655:   else if (uv_ip6_addr(multicast_addr, 0, &addr6) == 0)",
          "656:     return uv__udp_set_membership6(handle, &addr6, interface_addr, membership);",
          "657:   else",
          "658:     return UV_EINVAL;",
          "659: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: TEST_DECLARE   (tcp_bind6_localhost_ok)",
          "82: TEST_DECLARE   (udp_send_and_recv)",
          "83: TEST_DECLARE   (udp_multicast_join)",
          "84: TEST_DECLARE   (udp_multicast_ttl)",
          "85: TEST_DECLARE   (udp_multicast_interface)",
          "86: TEST_DECLARE   (udp_dgram_too_big)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: TEST_DECLARE   (udp_multicast_join6)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:   TEST_ENTRY  (udp_ipv6_only)",
          "353:   TEST_ENTRY  (udp_options)",
          "354:   TEST_ENTRY  (udp_multicast_join)",
          "355:   TEST_ENTRY  (udp_multicast_ttl)",
          "357:   TEST_ENTRY  (udp_open)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   TEST_ENTRY  (udp_multicast_join6)",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-join6.c||test/test-udp-multicast-join6.c": [
          "File: test/test-udp-multicast-join6.c -> test/test-udp-multicast-join6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "30: #define CHECK_HANDLE(handle) \\",
          "31:   ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)",
          "33: static uv_udp_t server;",
          "34: static uv_udp_t client;",
          "36: static int cl_recv_cb_called;",
          "38: static int sv_send_cb_called;",
          "40: static int close_cb_called;",
          "42: static void alloc_cb(uv_handle_t* handle,",
          "43:                      size_t suggested_size,",
          "44:                      uv_buf_t* buf) {",
          "45:   static char slab[65536];",
          "46:   CHECK_HANDLE(handle);",
          "47:   ASSERT(suggested_size <= sizeof(slab));",
          "48:   buf->base = slab;",
          "49:   buf->len = sizeof(slab);",
          "50: }",
          "53: static void close_cb(uv_handle_t* handle) {",
          "54:   CHECK_HANDLE(handle);",
          "55:   close_cb_called++;",
          "56: }",
          "59: static void sv_send_cb(uv_udp_send_t* req, int status) {",
          "60:   ASSERT(req != NULL);",
          "61:   ASSERT(status == 0);",
          "62:   CHECK_HANDLE(req->handle);",
          "64:   sv_send_cb_called++;",
          "66:   uv_close((uv_handle_t*) req->handle, close_cb);",
          "67: }",
          "70: static void cl_recv_cb(uv_udp_t* handle,",
          "71:                        ssize_t nread,",
          "72:                        const uv_buf_t* buf,",
          "73:                        const struct sockaddr* addr,",
          "74:                        unsigned flags) {",
          "75:   CHECK_HANDLE(handle);",
          "76:   ASSERT(flags == 0);",
          "78:   cl_recv_cb_called++;",
          "80:   if (nread < 0) {",
          "81:     ASSERT(0 && \"unexpected error\");",
          "82:   }",
          "84:   if (nread == 0) {",
          "87:     ASSERT(addr == NULL);",
          "88:     return;",
          "89:   }",
          "91:   ASSERT(addr != NULL);",
          "92:   ASSERT(nread == 4);",
          "93:   ASSERT(!memcmp(\"PING\", buf->base, nread));",
          "96:   uv_close((uv_handle_t*) &client, close_cb);",
          "97: }",
          "100: TEST_IMPL(udp_multicast_join6) {",
          "101:   int r;",
          "102:   uv_udp_send_t req;",
          "103:   uv_buf_t buf;",
          "104:   struct sockaddr_in6 addr;",
          "106:   ASSERT(0 == uv_ip6_addr(\"::1\", TEST_PORT, &addr));",
          "108:   r = uv_udp_init(uv_default_loop(), &server);",
          "109:   ASSERT(r == 0);",
          "111:   r = uv_udp_init(uv_default_loop(), &client);",
          "112:   ASSERT(r == 0);",
          "115:   r = uv_udp_bind(&client, (const struct sockaddr*) &addr, 0);",
          "116:   ASSERT(r == 0);",
          "119:   r = uv_udp_set_membership(&client, \"ff02::1\", NULL, UV_JOIN_GROUP);",
          "120:   ASSERT(r == 0);",
          "122:   r = uv_udp_recv_start(&client, alloc_cb, cl_recv_cb);",
          "123:   ASSERT(r == 0);",
          "125:   buf = uv_buf_init(\"PING\", 4);",
          "128:   r = uv_udp_send(&req,",
          "129:                   &server,",
          "130:                   &buf,",
          "131:                   1,",
          "132:                   (const struct sockaddr*) &addr,",
          "133:                   sv_send_cb);",
          "134:   ASSERT(r == 0);",
          "136:   ASSERT(close_cb_called == 0);",
          "137:   ASSERT(cl_recv_cb_called == 0);",
          "138:   ASSERT(sv_send_cb_called == 0);",
          "141:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "143:   ASSERT(cl_recv_cb_called == 1);",
          "144:   ASSERT(sv_send_cb_called == 1);",
          "145:   ASSERT(close_cb_called == 2);",
          "147:   MAKE_VALGRIND_HAPPY();",
          "148:   return 0;",
          "149: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:         'test/test-udp-options.c',",
          "390:         'test/test-udp-send-and-recv.c',",
          "391:         'test/test-udp-multicast-join.c',",
          "392:         'test/test-dlerror.c',",
          "393:         'test/test-udp-multicast-ttl.c',",
          "394:         'test/test-ip4-addr.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:         'test/test-udp-multicast-join6.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd723666af03e72e7edda9471b435ad41c886fe2",
      "candidate_info": {
        "commit_hash": "fd723666af03e72e7edda9471b435ad41c886fe2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fd723666af03e72e7edda9471b435ad41c886fe2",
        "files": [
          "Makefile.am"
        ],
        "message": "build: add test/test-watcher-cross-stop.c to list\n\nOverlooked in the last v0.10 -> master merge.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:                          test/test-udp-open.c \\",
          "194:                          test/test-udp-options.c \\",
          "195:                          test/test-udp-send-and-recv.c \\",
          "197: test_run_tests_LDADD = libuv.la",
          "199: if WINNT",
          "",
          "[Removed Lines]",
          "196:                          test/test-walk-handles.c",
          "",
          "[Added Lines]",
          "196:                          test/test-walk-handles.c \\",
          "197:                          test/test-watcher-cross-stop.c",
          "",
          "---------------"
        ]
      }
    }
  ]
}