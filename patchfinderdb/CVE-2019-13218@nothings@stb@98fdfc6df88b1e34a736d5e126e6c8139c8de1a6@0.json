{
  "cve_id": "CVE-2019-13218",
  "cve_desc": "Division by zero in the predict_point function in stb_vorbis through 2019-03-04 allows an attacker to cause a denial of service by opening a crafted Ogg Vorbis file.",
  "repo": "nothings/stb",
  "patch_hash": "98fdfc6df88b1e34a736d5e126e6c8139c8de1a6",
  "patch_info": {
    "commit_hash": "98fdfc6df88b1e34a736d5e126e6c8139c8de1a6",
    "repo": "nothings/stb",
    "commit_url": "https://github.com/nothings/stb/commit/98fdfc6df88b1e34a736d5e126e6c8139c8de1a6",
    "files": [
      "stb_vorbis.c"
    ],
    "message": "Fix seven bugs discovered and fixed by ForAllSecure:\n\nCVE-2019-13217: heap buffer overflow in start_decoder()\nCVE-2019-13218: stack buffer overflow in compute_codewords()\nCVE-2019-13219: uninitialized memory in vorbis_decode_packet_rest()\nCVE-2019-13220: out-of-range read in draw_line()\nCVE-2019-13221: issue with large 1D codebooks in lookup1_values()\nCVE-2019-13222: unchecked NULL returned by get_window()\nCVE-2019-13223: division by zero in predict_point()",
    "before_after_code_files": [
      "stb_vorbis.c||stb_vorbis.c"
    ]
  },
  "patch_diff": {
    "stb_vorbis.c||stb_vorbis.c": [
      "File: stb_vorbis.c -> stb_vorbis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1202:    int r = (int) floor(exp((float) log((float) entries) / dim));",
      "1203:    if ((int) floor(pow((float) r+1, dim)) <= entries)   // (int) cast for MinGW warning;",
      "1204:       ++r;                                              // floor() to avoid _ftol() when non-CRT",
      "1207:    return r;",
      "1208: }",
      "",
      "[Removed Lines]",
      "1205:    assert(pow((float) r+1, dim) > entries);",
      "1206:    assert((int) floor(pow((float) r, dim)) <= entries); // (int),floor() as above",
      "",
      "[Added Lines]",
      "1206:    if (pow((float) r+1, dim) <= entries)",
      "1207:       return -1;",
      "1208:    if ((int) floor(pow((float) r, dim)) > entries)",
      "1209:       return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2013:    ady -= abs(base) * adx;",
      "2014:    if (x1 > n) x1 = n;",
      "2015:    if (x < x1) {",
      "2017:       for (++x; x < x1; ++x) {",
      "2018:          err += ady;",
      "2019:          if (err >= adx) {",
      "",
      "[Removed Lines]",
      "2016:       LINE_OP(output[x], inverse_db_table[y]);",
      "",
      "[Added Lines]",
      "2019:       LINE_OP(output[x], inverse_db_table[y&255]);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2021:             y += sy;",
      "2022:          } else",
      "2023:             y += base;",
      "2025:       }",
      "2026:    }",
      "2027: }",
      "",
      "[Removed Lines]",
      "2024:          LINE_OP(output[x], inverse_db_table[y]);",
      "",
      "[Added Lines]",
      "2027:          LINE_OP(output[x], inverse_db_table[y&255]);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3048:    len <<= 1;",
      "3049:    if (len == f->blocksize_0) return f->window[0];",
      "3050:    if (len == f->blocksize_1) return f->window[1];",
      "3052:    return NULL;",
      "3053: }",
      "",
      "[Removed Lines]",
      "3051:    assert(0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3454:    if (f->previous_length) {",
      "3455:       int i,j, n = f->previous_length;",
      "3456:       float *w = get_window(f, n);",
      "3457:       for (i=0; i < f->channels; ++i) {",
      "3458:          for (j=0; j < n; ++j)",
      "3459:             f->channel_buffers[i][left+j] =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3459:       if (w == NULL) return 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3695:          while (current_entry < c->entries) {",
      "3696:             int limit = c->entries - current_entry;",
      "3697:             int n = get_bits(f, ilog(limit));",
      "3698:             if (current_entry + n > (int) c->entries) { return error(f, VORBIS_invalid_setup); }",
      "3699:             memset(lengths + current_entry, current_length, n);",
      "3700:             current_entry += n;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3701:             if (current_length >= 32) return error(f, VORBIS_invalid_setup);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3798:          c->value_bits = get_bits(f, 4)+1;",
      "3799:          c->sequence_p = get_bits(f,1);",
      "3800:          if (c->lookup_type == 1) {",
      "3802:          } else {",
      "3803:             c->lookup_values = c->entries * c->dimensions;",
      "3804:          }",
      "",
      "[Removed Lines]",
      "3801:             c->lookup_values = lookup1_values(c->entries, c->dimensions);",
      "",
      "[Added Lines]",
      "3805:             int values = lookup1_values(c->entries, c->dimensions);",
      "3806:             if (values < 0) return error(f, VORBIS_invalid_setup);",
      "3807:             c->lookup_values = (uint32) values;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3934:             p[j].id = j;",
      "3935:          }",
      "3936:          qsort(p, g->values, sizeof(p[0]), point_compare);",
      "3937:          for (j=0; j < g->values; ++j)",
      "3938:             g->sorted_order[j] = (uint8) p[j].id;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3943:          for (j=0; j < g->values-1; ++j)",
      "3944:             if (p[j].x == p[j+1].x)",
      "3945:                return error(f, VORBIS_invalid_setup);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4020:          max_submaps = m->submaps;",
      "4021:       if (get_bits(f,1)) {",
      "4022:          m->coupling_steps = get_bits(f,8)+1;",
      "4023:          for (k=0; k < m->coupling_steps; ++k) {",
      "4024:             m->chan[k].magnitude = get_bits(f, ilog(f->channels-1));",
      "4025:             m->chan[k].angle = get_bits(f, ilog(f->channels-1));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4032:          if (m->coupling_steps > f->channels) return error(f, VORBIS_invalid_setup);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5386: #endif // STB_VORBIS_NO_PULLDATA_API",
      "5389:     1.12    - 2017-11-21 - limit residue begin/end to blocksize/2 to avoid large temp allocs in bad/corrupt files",
      "5390:     1.11    - 2017-07-23 - fix MinGW compilation",
      "5391:     1.10    - 2017-03-03 - more robust seeking; fix negative ilog(); clear error in open_memory",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5399:     1.17    - 2019-07-08 - fix CVE-2019-13217, -13218, -13219, -13220, -13221, -13223, -13223",
      "5400:                            found with Mayhem by ForAllSecure",
      "5401:     1.16    - 2019-03-04 - fix warnings",
      "5402:     1.15    - 2019-02-07 - explicit failure if Ogg Skeleton data is found",
      "5403:     1.14    - 2018-02-11 - delete bogus dealloca usage",
      "5404:     1.13    - 2018-01-29 - fix truncation of last frame (hopefully)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c98e6564ba74d5a6e97004dd8730a69e9e7b6e6",
      "candidate_info": {
        "commit_hash": "5c98e6564ba74d5a6e97004dd8730a69e9e7b6e6",
        "repo": "nothings/stb",
        "commit_url": "https://github.com/nothings/stb/commit/5c98e6564ba74d5a6e97004dd8730a69e9e7b6e6",
        "files": [
          "stb_vorbis.c"
        ],
        "message": "stb_vorbis: fix typo in CVE number in docs",
        "before_after_code_files": [
          "stb_vorbis.c||stb_vorbis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "stb_vorbis.c||stb_vorbis.c"
          ],
          "candidate": [
            "stb_vorbis.c||stb_vorbis.c"
          ]
        }
      },
      "candidate_diff": {
        "stb_vorbis.c||stb_vorbis.c": [
          "File: stb_vorbis.c -> stb_vorbis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5396: #endif // STB_VORBIS_NO_PULLDATA_API",
          "5400:                            found with Mayhem by ForAllSecure",
          "5401:     1.16    - 2019-03-04 - fix warnings",
          "5402:     1.15    - 2019-02-07 - explicit failure if Ogg Skeleton data is found",
          "",
          "[Removed Lines]",
          "5399:     1.17    - 2019-07-08 - fix CVE-2019-13217, -13218, -13219, -13220, -13221, -13223, -13223",
          "",
          "[Added Lines]",
          "5399:     1.17    - 2019-07-08 - fix CVE-2019-13217, -13218, -13219, -13220, -13221, -13222, -13223",
          "",
          "---------------"
        ]
      }
    }
  ]
}