{
  "cve_id": "CVE-2016-5355",
  "cve_desc": "wiretap/toshiba.c in the Toshiba file parser in Wireshark 1.12.x before 1.12.12 and 2.x before 2.0.4 mishandles sscanf unsigned-integer processing, which allows remote attackers to cause a denial of service (application crash) via a crafted file.",
  "repo": "wireshark/wireshark",
  "patch_hash": "3270dfac43da861c714df76513456b46765ff47f",
  "patch_info": {
    "commit_hash": "3270dfac43da861c714df76513456b46765ff47f",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/3270dfac43da861c714df76513456b46765ff47f",
    "files": [
      "wiretap/toshiba.c"
    ],
    "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12394\nChange-Id: I4b19b95f2e1ffc96dac5c91bff6698c246f52007\nReviewed-on: https://code.wireshark.org/review/15230\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "wiretap/toshiba.c||wiretap/toshiba.c"
    ]
  },
  "patch_diff": {
    "wiretap/toshiba.c||wiretap/toshiba.c": [
      "File: wiretap/toshiba.c -> wiretap/toshiba.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
      "249:  char line[TOSHIBA_LINE_LENGTH];",
      "250:  int num_items_scanned;",
      "253:  char channel[10], direction[10];",
      "254:  int i, hex_lines;",
      "255:  guint8 *pd;",
      "",
      "[Removed Lines]",
      "251:  guint pkt_len;",
      "252:  int pktnum, hr, min, sec, csec;",
      "",
      "[Added Lines]",
      "251:  int pkt_len, pktnum, hr, min, sec, csec;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "302:  } while (strcmp(line, \"OFFSET 0001-0203\") != 0);",
      "305:  if (num_items_scanned != 1) {",
      "308:   return FALSE;",
      "309:  }",
      "310:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
      "",
      "[Removed Lines]",
      "304:  num_items_scanned = sscanf(line+64, \"LEN=%9u\", &pkt_len);",
      "",
      "[Added Lines]",
      "303:  num_items_scanned = sscanf(line+64, \"LEN=%9d\", &pkt_len);",
      "309:  if (pkt_len < 0) {",
      "312:   return FALSE;",
      "313:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5788a9fc9b9a43c2815f2d72f0a04830a92d496f",
      "candidate_info": {
        "commit_hash": "5788a9fc9b9a43c2815f2d72f0a04830a92d496f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5788a9fc9b9a43c2815f2d72f0a04830a92d496f",
        "files": [
          "wiretap/toshiba.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12394\nChange-Id: I4b19b95f2e1ffc96dac5c91bff6698c246f52007\nReviewed-on: https://code.wireshark.org/review/15230\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 3270dfac43da861c714df76513456b46765ff47f)\nReviewed-on: https://code.wireshark.org/review/15232\n(cherry picked from commit edbed5a120e878725ed3ba31484045ee7e817e58)\nReviewed-on: https://code.wireshark.org/review/16112\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/toshiba.c||wiretap/toshiba.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/toshiba.c||wiretap/toshiba.c"
          ],
          "candidate": [
            "wiretap/toshiba.c||wiretap/toshiba.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/toshiba.c||wiretap/toshiba.c": [
          "File: wiretap/toshiba.c -> wiretap/toshiba.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "251:  char line[TOSHIBA_LINE_LENGTH];",
          "252:  int num_items_scanned;",
          "255:  char channel[10], direction[10];",
          "256:  int i, hex_lines;",
          "257:  guint8 *pd;",
          "",
          "[Removed Lines]",
          "253:  guint pkt_len;",
          "254:  int pktnum, hr, min, sec, csec;",
          "",
          "[Added Lines]",
          "253:  int pkt_len, pktnum, hr, min, sec, csec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:  } while (strcmp(line, \"OFFSET 0001-0203\") != 0);",
          "307:  if (num_items_scanned != 1) {",
          "310:   return FALSE;",
          "311:  }",
          "312:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "306:  num_items_scanned = sscanf(line+64, \"LEN=%9u\", &pkt_len);",
          "",
          "[Added Lines]",
          "305:  num_items_scanned = sscanf(line+64, \"LEN=%9d\", &pkt_len);",
          "311:  if (pkt_len < 0) {",
          "314:   return FALSE;",
          "315:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5efb45231671baa2db2011d8f67f9d6e72bc455b",
      "candidate_info": {
        "commit_hash": "5efb45231671baa2db2011d8f67f9d6e72bc455b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5efb45231671baa2db2011d8f67f9d6e72bc455b",
        "files": [
          "wiretap/toshiba.c"
        ],
        "message": "Fix packet length handling.\n\nTreat the packet length as unsigned - it shouldn't be negative in the\nfile.  If it is, that'll probably cause the sscanf to fail, so we'll\nreport the file as bad.\n\nCheck it against WTAP_MAX_PACKET_SIZE to make sure we don't try to\nallocate a huge amount of memory, just as we do in other file readers.\n\nUse the now-validated packet size as the length in\nws_buffer_assure_space(), so we are certain to have enough space, and\ndon't allocate too much space.\n\nBug: 12394\nChange-Id: Ifa023ce70f7a2697bf151009b035a6e6cf8d5d90\nReviewed-on: https://code.wireshark.org/review/15169\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/toshiba.c||wiretap/toshiba.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/toshiba.c||wiretap/toshiba.c"
          ],
          "candidate": [
            "wiretap/toshiba.c||wiretap/toshiba.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/toshiba.c||wiretap/toshiba.c": [
          "File: wiretap/toshiba.c -> wiretap/toshiba.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: static const char toshiba_rec_magic[]  = { '[', 'N', 'o', '.' };",
          "99: #define TOSHIBA_REC_MAGIC_SIZE  (sizeof toshiba_rec_magic  / sizeof toshiba_rec_magic[0])",
          "106: static gboolean toshiba_read(wtap *wth, int *err, gchar **err_info,",
          "107:  gint64 *data_offset);",
          "108: static gboolean toshiba_seek_read(wtap *wth, gint64 seek_off,",
          "",
          "[Removed Lines]",
          "104: #define TOSHIBA_MAX_PACKET_LEN 16384",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "254:  char line[TOSHIBA_LINE_LENGTH];",
          "255:  int num_items_scanned;",
          "257:  char channel[10], direction[10];",
          "258:  int i, hex_lines;",
          "259:  guint8 *pd;",
          "",
          "[Removed Lines]",
          "256:  int pkt_len, pktnum, hr, min, sec, csec;",
          "",
          "[Added Lines]",
          "251:  guint pkt_len;",
          "252:  int pktnum, hr, min, sec, csec;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:  } while (strcmp(line, \"OFFSET 0001-0203\") != 0);",
          "309:  if (num_items_scanned != 1) {",
          "312:   return FALSE;",
          "313:  }",
          "315:  phdr->rec_type = REC_TYPE_PACKET;",
          "316:  phdr->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN;",
          "",
          "[Removed Lines]",
          "308:  num_items_scanned = sscanf(line+64, \"LEN=%9d\", &pkt_len);",
          "",
          "[Added Lines]",
          "304:  num_items_scanned = sscanf(line+64, \"LEN=%9u\", &pkt_len);",
          "310:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "317:       pkt_len, WTAP_MAX_PACKET_SIZE);",
          "318:   return FALSE;",
          "319:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:  }",
          "345:  pd = ws_buffer_start_ptr(buf);",
          "",
          "[Removed Lines]",
          "344:  ws_buffer_assure_space(buf, TOSHIBA_MAX_PACKET_LEN);",
          "",
          "[Added Lines]",
          "350:  ws_buffer_assure_space(buf, pkt_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1635420a4a024ac500f650bee338e389279d0704",
      "candidate_info": {
        "commit_hash": "1635420a4a024ac500f650bee338e389279d0704",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1635420a4a024ac500f650bee338e389279d0704",
        "files": [
          "wiretap/cosine.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12395\nChange-Id: I43b458a73b0934e9a5c2c89d34eac5a8f21a7455\nReviewed-on: https://code.wireshark.org/review/15223\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit a66628e425db725df1ac52a3c573a03357060ddd)\nReviewed-on: https://code.wireshark.org/review/15225",
        "before_after_code_files": [
          "wiretap/cosine.c||wiretap/cosine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/cosine.c||wiretap/cosine.c": [
          "File: wiretap/cosine.c -> wiretap/cosine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: {",
          "333:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "334:  int num_items_scanned;",
          "337:  int pro, off, pri, rm, error;",
          "338:  guint code1, code2;",
          "339:  char if_name[COSINE_MAX_IF_NAME_LEN] = \"\", direction[6] = \"\";",
          "",
          "[Removed Lines]",
          "335:  int yy, mm, dd, hr, min, sec, csec;",
          "336:  guint pkt_len;",
          "",
          "[Added Lines]",
          "335:  int yy, mm, dd, hr, min, sec, csec, pkt_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:      &yy, &mm, &dd, &hr, &min, &sec, &csec) == 7) {",
          "347:   num_items_scanned = sscanf(line,",
          "349:    &yy, &mm, &dd, &hr, &min, &sec, &csec,",
          "350:        direction, if_name, &pkt_len,",
          "351:        &pro, &off, &pri, &rm, &error,",
          "",
          "[Removed Lines]",
          "348:      \"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "[Added Lines]",
          "347:      \"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:  } else {",
          "361:   num_items_scanned = sscanf(line,",
          "363:        direction, if_name, &pkt_len,",
          "364:        &pro, &off, &pri, &rm, &error,",
          "365:        &code1, &code2);",
          "",
          "[Removed Lines]",
          "362:      \"%5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "[Added Lines]",
          "361:      \"%5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "371:   }",
          "372:   yy = mm = dd = hr = min = sec = csec = 0;",
          "373:  }",
          "374:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  if (pkt_len < 0) {",
          "376:   return FALSE;",
          "377:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db941b25c44cad1738a405f4c5f7fc6ddef49545",
      "candidate_info": {
        "commit_hash": "db941b25c44cad1738a405f4c5f7fc6ddef49545",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/db941b25c44cad1738a405f4c5f7fc6ddef49545",
        "files": [
          "wiretap/netscreen.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12396\nChange-Id: I54fe8f61f42c32b5ef33da633ece51bbcda8c95f\nReviewed-on: https://code.wireshark.org/review/15220\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 11edc83b98a61e890d7bb01855389d40e984ea82)\nReviewed-on: https://code.wireshark.org/review/15222\n(cherry picked from commit 4f4e1cb1b4ffb0c2a7c5ba84a13b412643ea0252)\nReviewed-on: https://code.wireshark.org/review/16116\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/netscreen.c||wiretap/netscreen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/netscreen.c||wiretap/netscreen.c": [
          "File: wiretap/netscreen.c -> wiretap/netscreen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: parse_netscreen_packet(FILE_T fh, struct wtap_pkthdr *phdr, Buffer* buf,",
          "267:     char *line, int *err, gchar **err_info)",
          "268: {",
          "269:  int  sec;",
          "270:  int  dsec;",
          "271:  char  cap_int[NETSCREEN_MAX_INT_NAME_LENGTH];",
          "272:  char  direction[2];",
          "274:  char  cap_src[13];",
          "275:  char  cap_dst[13];",
          "276:  guint8  *pd;",
          "277:  gchar  *p;",
          "278:  int  n, i = 0;",
          "280:  gchar  dststr[13];",
          "282:  phdr->rec_type = REC_TYPE_PACKET;",
          "283:  phdr->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN;",
          "286:      &sec, &dsec, cap_int, direction, &pkt_len, cap_src, cap_dst) < 5) {",
          "289:   return -1;",
          "290:  }",
          "291:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "273:  guint  pkt_len;",
          "279:  guint  offset = 0;",
          "285:  if (sscanf(line, \"%9d.%9d: %15[a-z0-9/:.-](%1[io]) len=%9u:%12s->%12s/\",",
          "",
          "[Added Lines]",
          "269:  int  pkt_len;",
          "279:  int  offset = 0;",
          "285:  if (sscanf(line, \"%9d.%9d: %15[a-z0-9/:.-](%1[io]) len=%9d:%12s->%12s/\",",
          "291:  if (pkt_len < 0) {",
          "294:   return FALSE;",
          "295:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e499daadd34ae8c8598b99b8718a41ea47a3fa1e",
      "candidate_info": {
        "commit_hash": "e499daadd34ae8c8598b99b8718a41ea47a3fa1e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e499daadd34ae8c8598b99b8718a41ea47a3fa1e",
        "files": [
          "wiretap/dbs-etherwatch.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nChange-Id: I6450d468504e942df72342176a0e145e5ac3db5f\nReviewed-on: https://code.wireshark.org/review/15216\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 29c78db2a80a93653f32e4fd2f00b9b550432c43)\nReviewed-on: https://code.wireshark.org/review/15217",
        "before_after_code_files": [
          "wiretap/dbs-etherwatch.c||wiretap/dbs-etherwatch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/dbs-etherwatch.c||wiretap/dbs-etherwatch.c": [
          "File: wiretap/dbs-etherwatch.c -> wiretap/dbs-etherwatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     guint8 *pd;",
          "274:     char    line[DBS_ETHERWATCH_LINE_LENGTH];",
          "275:     int num_items_scanned;",
          "278:     int length_pos, length_from, length;",
          "279:     struct tm tm;",
          "280:     char mon[4] = \"xxx\";",
          "281:     gchar *p;",
          "282:     static const gchar months[] = \"JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC\";",
          "286:     ws_buffer_assure_space(buf, DBS_ETHERWATCH_MAX_ETHERNET_PACKET_LEN);",
          "",
          "[Removed Lines]",
          "276:     int eth_hdr_len, csec;",
          "277:     guint pkt_len;",
          "283:     guint count, line_count;",
          "",
          "[Added Lines]",
          "276:     int eth_hdr_len, pkt_len, csec;",
          "282:     int count, line_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:     }",
          "353:     num_items_scanned = sscanf(line + LENGTH_POS,",
          "355:                 &pkt_len,",
          "356:                 &tm.tm_mday, mon,",
          "357:                 &tm.tm_year, &tm.tm_hour, &tm.tm_min,",
          "",
          "[Removed Lines]",
          "354:                 \"%9u byte buffer at %2d-%3s-%4d %2d:%2d:%2d.%9d\",",
          "",
          "[Added Lines]",
          "353:                 \"%9d byte buffer at %2d-%3s-%4d %2d:%2d:%2d.%9d\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:         return FALSE;",
          "364:     }",
          "367:     if(strncmp(&line[ETH_II_CHECK_POS], ETH_II_CHECK_STR,",
          "368:         strlen(ETH_II_CHECK_STR)) == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     if (pkt_len < 0) {",
          "368:         return FALSE;",
          "369:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}