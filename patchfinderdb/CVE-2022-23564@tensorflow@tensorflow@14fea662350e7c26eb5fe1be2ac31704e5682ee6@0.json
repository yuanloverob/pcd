{
  "cve_id": "CVE-2022-23564",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "14fea662350e7c26eb5fe1be2ac31704e5682ee6",
  "patch_info": {
    "commit_hash": "14fea662350e7c26eb5fe1be2ac31704e5682ee6",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6",
    "files": [
      "tensorflow/core/framework/BUILD",
      "tensorflow/core/framework/resource_handle.cc",
      "tensorflow/core/framework/resource_handle.h",
      "tensorflow/core/framework/tensor.cc"
    ],
    "message": "Prevent `CHECK`-fail when decoding resource handles from proto\n\nIn certain scenarios, the proto might contain tensors that have too many elements (overflow). This is a `CHECK`-fail in general, but we should prevent this, given how many CVEs caused by that we have received this year (a large fraction of 200).\n\nPiperOrigin-RevId: 408049766\nChange-Id: I2ac20b247aa8ed9110846fbdb7a0a9401f2c168c",
    "before_after_code_files": [
      "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
      "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
      "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc": [
      "File: tensorflow/core/framework/resource_handle.cc -> tensorflow/core/framework/resource_handle.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"absl/strings/str_format.h\"",
      "19: #include \"tensorflow/core/framework/resource_handle.pb.h\"",
      "20: #include \"tensorflow/core/lib/core/errors.h\"",
      "21: #include \"tensorflow/core/lib/strings/strcat.h\"",
      "23: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "23: #include \"tensorflow/core/platform/errors.h\"",
      "24: #include \"tensorflow/core/platform/macros.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: ResourceHandle::ResourceHandle() {}",
      "30: ResourceHandle::ResourceHandle(const ResourceHandleProto& proto) {",
      "32: }",
      "34: ResourceHandle::~ResourceHandle() {}",
      "",
      "[Removed Lines]",
      "31:   FromProto(proto);",
      "",
      "[Added Lines]",
      "34:   TF_CHECK_OK(FromProto(proto));",
      "35: }",
      "37: Status ResourceHandle::BuildResourceHandle(const ResourceHandleProto& proto,",
      "38:                                            ResourceHandle* out) {",
      "39:   if (out == nullptr)",
      "40:     return errors::Internal(",
      "41:         \"BuildResourceHandle() was called with nullptr for the output\");",
      "42:   return out->FromProto(proto);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "46:   }",
      "47: }",
      "50:   set_device(proto.device());",
      "51:   set_container(proto.container());",
      "52:   set_name(proto.name());",
      "",
      "[Removed Lines]",
      "49: void ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
      "",
      "[Added Lines]",
      "60: Status ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "55:   std::vector<DtypeAndPartialTensorShape> dtypes_and_shapes;",
      "56:   for (const auto& dtype_and_shape : proto.dtypes_and_shapes()) {",
      "57:     DataType dtype = dtype_and_shape.dtype();",
      "59:     dtypes_and_shapes.push_back(DtypeAndPartialTensorShape{dtype, shape});",
      "60:   }",
      "61:   dtypes_and_shapes_ = std::move(dtypes_and_shapes);",
      "62: }",
      "64: string ResourceHandle::SerializeAsString() const {",
      "",
      "[Removed Lines]",
      "58:     PartialTensorShape shape(dtype_and_shape.shape());",
      "",
      "[Added Lines]",
      "69:     PartialTensorShape shape;",
      "70:     Status s = PartialTensorShape::BuildPartialTensorShape(",
      "71:         dtype_and_shape.shape(), &shape);",
      "72:     if (!s.ok()) {",
      "73:       return s;",
      "74:     }",
      "78:   return Status::OK();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "70: bool ResourceHandle::ParseFromString(const string& s) {",
      "71:   ResourceHandleProto proto;",
      "75: }",
      "77: string ResourceHandle::DebugString() const {",
      "",
      "[Removed Lines]",
      "72:   const bool status = proto.ParseFromString(s);",
      "73:   if (status) FromProto(proto);",
      "74:   return status;",
      "",
      "[Added Lines]",
      "89:   return proto.ParseFromString(s) && FromProto(proto).ok();",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "140:     if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {",
      "141:       return false;",
      "142:     }",
      "144:   }",
      "145:   return true;",
      "146: }",
      "",
      "[Removed Lines]",
      "143:     ps[i].FromProto(proto);",
      "",
      "[Added Lines]",
      "158:     if (!ps[i].FromProto(proto).ok()) {",
      "159:       return false;",
      "160:     }",
      "",
      "---------------"
    ],
    "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h": [
      "File: tensorflow/core/framework/resource_handle.h -> tensorflow/core/framework/resource_handle.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   ResourceHandle(const ResourceHandleProto& proto);",
      "47:   ~ResourceHandle();",
      "50:   const std::string& device() const { return device_; }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:   static Status BuildResourceHandle(const ResourceHandleProto& proto,",
      "52:                                     ResourceHandle* out);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:   void AsProto(ResourceHandleProto* proto) const;",
      "97:   std::string SerializeAsString() const;",
      "",
      "[Removed Lines]",
      "94:   void FromProto(const ResourceHandleProto& proto);",
      "",
      "[Added Lines]",
      "99:   Status FromProto(const ResourceHandleProto& proto);",
      "",
      "---------------"
    ],
    "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
      "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "537:   return buf;",
      "538: }",
      "540: template <>",
      "541: TensorBuffer* FromProtoField<Variant>(Allocator* a, const TensorProto& in,",
      "542:                                       int64_t n) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "543: template <>",
      "544: TensorBuffer* FromProtoField<ResourceHandle>(Allocator* a,",
      "545:                                              const TensorProto& in, int64_t n) {",
      "546:   CHECK_GT(n, 0);",
      "547:   Buffer<ResourceHandle>* buf = new Buffer<ResourceHandle>(a, n);",
      "548:   ResourceHandle* data = buf->template base<ResourceHandle>();",
      "549:   if (data == nullptr) {",
      "550:     buf->Unref();",
      "551:     return nullptr;",
      "552:   }",
      "553:   const int64_t in_n = ProtoHelper<ResourceHandle>::NumElements(in);",
      "554:   if (in_n <= 0) {",
      "555:     std::fill_n(data, n, ResourceHandle());",
      "556:   } else {",
      "561:     const int64_t real_n = n < in_n ? n : in_n;",
      "562:     for (int64_t i = 0; i < real_n; ++i) {",
      "563:       Status s = ResourceHandle::BuildResourceHandle(in.resource_handle_val(i),",
      "564:                                                      &data[i]);",
      "565:       if (!s.ok()) {",
      "566:         LOG(ERROR) << \"Could not decode resource handle from proto \\\"\"",
      "567:                    << in.resource_handle_val(i).ShortDebugString()",
      "568:                    << \"\\\", returned status: \" << s.ToString();",
      "569:         buf->Unref();",
      "570:         return nullptr;",
      "571:       }",
      "572:     }",
      "573:     for (int64_t i = in_n; i < n; ++i) {",
      "574:       data[i] = ResourceHandle();",
      "575:     }",
      "576:   }",
      "577:   return buf;",
      "578: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b0d50b0515143502aa3c1cf4031f74b0365bc99",
      "candidate_info": {
        "commit_hash": "1b0d50b0515143502aa3c1cf4031f74b0365bc99",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1b0d50b0515143502aa3c1cf4031f74b0365bc99",
        "files": [
          "tensorflow/compiler/jit/xla_launch_util.cc",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/resource_mgr.cc",
          "tensorflow/core/framework/resource_mgr.h",
          "tensorflow/core/kernels/resource_variable_ops.cc",
          "tensorflow/core/platform/BUILD",
          "tensorflow/core/platform/stack_frame.h",
          "tensorflow/core/platform/status.h",
          "tensorflow/core/util/BUILD",
          "tensorflow/core/util/managed_stack_trace.h",
          "tensorflow/python/eager/def_function_xla_jit_test.py",
          "tensorflow/python/util/BUILD",
          "tensorflow/python/util/stack_trace.h"
        ],
        "message": "Propagate the frame where the resource var was created to resource var handles\n\nAllows showing informative error messages, indicating where the resource var\nwas created.\n\nPiperOrigin-RevId: 353729467\nChange-Id: I90c19bfecc2d2df19523b28a0caeea2abe331fae",
        "before_after_code_files": [
          "tensorflow/compiler/jit/xla_launch_util.cc||tensorflow/compiler/jit/xla_launch_util.cc",
          "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/resource_mgr.cc||tensorflow/core/framework/resource_mgr.cc",
          "tensorflow/core/framework/resource_mgr.h||tensorflow/core/framework/resource_mgr.h",
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc",
          "tensorflow/core/platform/stack_frame.h||tensorflow/core/platform/stack_frame.h",
          "tensorflow/core/platform/status.h||tensorflow/core/platform/status.h",
          "tensorflow/core/util/managed_stack_trace.h||tensorflow/core/util/managed_stack_trace.h",
          "tensorflow/python/eager/def_function_xla_jit_test.py||tensorflow/python/eager/def_function_xla_jit_test.py",
          "tensorflow/python/util/stack_trace.h||tensorflow/python/util/stack_trace.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h"
          ],
          "candidate": [
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/jit/xla_launch_util.cc||tensorflow/compiler/jit/xla_launch_util.cc": [
          "File: tensorflow/compiler/jit/xla_launch_util.cc -> tensorflow/compiler/jit/xla_launch_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     Var* variable = nullptr;",
          "90:     ResourceHandle handle = inputs[var_idx]->flat<ResourceHandle>()(0);",
          "91:     if (handle.device() != dev->attributes().name()) {",
          "95:     }",
          "96:     TF_RETURN_IF_ERROR(rm->LookupOrCreate<Var>(",
          "97:         handle.container(), handle.name(), &variable, [](Var** ptr) {",
          "",
          "[Removed Lines]",
          "92:       return errors::InvalidArgument(",
          "93:           \"Trying to access resource \", handle.name(), \" located in device \",",
          "94:           handle.device(), \" from device \", dev->attributes().name());",
          "",
          "[Added Lines]",
          "92:       std::string definition_location = [&]() -> std::string {",
          "93:         if (handle.definition_stack_trace()) {",
          "94:           std::vector<StackFrame> stack_frames =",
          "95:               handle.definition_stack_trace()->ToStackFrames(",
          "96:                   {}, IsInternalFrameForFilename,",
          "99:           if (!stack_frames.empty()) {",
          "100:             const StackFrame& last_frame = stack_frames[0];",
          "101:             return absl::StrCat(\" (defined @ \", last_frame.file_name, \":\",",
          "102:                                 last_frame.line_number, \")\");",
          "103:           }",
          "104:         }",
          "105:         return \"\";",
          "106:       }();",
          "107:       return errors::InvalidArgument(\"Trying to access resource \",",
          "108:                                      handle.name(), definition_location,",
          "109:                                      \" located in device \", handle.device(),",
          "110:                                      \" from device \", dev->attributes().name());",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h": [
          "File: tensorflow/core/framework/resource_handle.h -> tensorflow/core/framework/resource_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/core/framework/types.pb.h\"",
          "21: #include \"tensorflow/core/platform/tensor_coding.h\"",
          "22: #include \"tensorflow/core/platform/types.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/util/managed_stack_trace.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     dtypes_and_shapes_ = dtypes_and_shapes;",
          "72:   }",
          "75:   void AsProto(ResourceHandleProto* proto) const;",
          "76:   void FromProto(const ResourceHandleProto& proto);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   void set_definition_stack_trace(",
          "76:       const absl::optional<ManagedStackTrace>& definition_stack_trace) {",
          "77:     definition_stack_trace_ = definition_stack_trace;",
          "78:   }",
          "80:   const absl::optional<ManagedStackTrace>& definition_stack_trace() const {",
          "81:     return definition_stack_trace_;",
          "82:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:   uint64 hash_code_ = 0;",
          "94:   std::string maybe_type_name_;",
          "95:   std::vector<DtypeAndPartialTensorShape> dtypes_and_shapes_;",
          "96: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   absl::optional<ManagedStackTrace> definition_stack_trace_;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/resource_mgr.cc||tensorflow/core/framework/resource_mgr.cc": [
          "File: tensorflow/core/framework/resource_mgr.cc -> tensorflow/core/framework/resource_mgr.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: ResourceHandle MakeResourceHandle(",
          "37:     const string& container, const string& name, const DeviceBase& device,",
          "38:     const TypeIndex& type_index,",
          "40:   ResourceHandle result;",
          "41:   result.set_device(device.name());",
          "42:   result.set_container(container);",
          "43:   if (name == ResourceHandle::ANONYMOUS_NAME) {",
          "44:     result.set_name(strings::StrCat(\"_AnonymousVar\", current_id_.fetch_add(1)));",
          "45:   } else {",
          "",
          "[Removed Lines]",
          "39:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes) {",
          "",
          "[Added Lines]",
          "39:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes,",
          "40:     const absl::optional<ManagedStackTrace>& definition_stack_trace) {",
          "44:   result.set_definition_stack_trace(definition_stack_trace);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/resource_mgr.h||tensorflow/core/framework/resource_mgr.h": [
          "File: tensorflow/core/framework/resource_mgr.h -> tensorflow/core/framework/resource_mgr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "296: ResourceHandle MakeResourceHandle(",
          "297:     const std::string& container, const std::string& name,",
          "298:     const DeviceBase& device, const TypeIndex& type_index,",
          "300:     TF_MUST_USE_RESULT;",
          "302: template <typename T>",
          "303: ResourceHandle MakeResourceHandle(",
          "304:     OpKernelContext* ctx, const std::string& container, const std::string& name,",
          "310: }",
          "312: template <typename T>",
          "313: ResourceHandle MakeResourceHandle(",
          "314:     OpKernelConstruction* ctx, const std::string& container,",
          "315:     const std::string& name,",
          "321: }",
          "323: Status MakeResourceHandleToOutput(OpKernelContext* context, int output_index,",
          "",
          "[Removed Lines]",
          "299:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes = {})",
          "305:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes = {}) {",
          "306:   return MakeResourceHandle(",
          "307:       container.empty() ? ctx->resource_manager()->default_container()",
          "308:                         : container,",
          "309:       name, *ctx->device(), TypeIndex::Make<T>(), dtypes_and_shapes);",
          "316:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes = {}) {",
          "317:   return MakeResourceHandle(",
          "318:       container.empty() ? ctx->resource_manager()->default_container()",
          "319:                         : container,",
          "320:       name, *ctx->device(), TypeIndex::Make<T>(), dtypes_and_shapes);",
          "",
          "[Added Lines]",
          "299:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes = {},",
          "300:     const absl::optional<ManagedStackTrace>& definition_stack_trace = {})",
          "306:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes = {},",
          "307:     const absl::optional<ManagedStackTrace>& definition_stack_trace = {}) {",
          "308:   return MakeResourceHandle(container.empty()",
          "309:                                 ? ctx->resource_manager()->default_container()",
          "310:                                 : container,",
          "311:                             name, *ctx->device(), TypeIndex::Make<T>(),",
          "312:                             dtypes_and_shapes, definition_stack_trace);",
          "319:     const std::vector<DtypeAndPartialTensorShape>& dtypes_and_shapes = {},",
          "320:     const absl::optional<ManagedStackTrace>& definition_stack_trace = {}) {",
          "321:   return MakeResourceHandle(container.empty()",
          "322:                                 ? ctx->resource_manager()->default_container()",
          "323:                                 : container,",
          "324:                             name, *ctx->device(), TypeIndex::Make<T>(),",
          "325:                             dtypes_and_shapes, definition_stack_trace);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:         ctx, ctx->allocate_temp(DT_RESOURCE, TensorShape({}), &handle, attr));",
          "246:     handle.scalar<ResourceHandle>()() = MakeResourceHandle<Var>(",
          "247:         ctx, container_, name_,",
          "249:     ctx->set_output(0, handle);",
          "250:   } else {",
          "251:     ctx->set_output(0, resource_);",
          "",
          "[Removed Lines]",
          "248:         std::vector<DtypeAndPartialTensorShape>{dtype_and_shape_});",
          "",
          "[Added Lines]",
          "248:         std::vector<DtypeAndPartialTensorShape>{dtype_and_shape_},",
          "249:         ctx->stack_trace());",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/stack_frame.h||tensorflow/core/platform/stack_frame.h": [
          "File: tensorflow/core/platform/stack_frame.h -> tensorflow/core/platform/stack_frame.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_CORE_PLATFORM_STACK_TRACE_H_",
          "17: #define TENSORFLOW_CORE_PLATFORM_STACK_TRACE_H_",
          "19: #include <string>",
          "21: namespace tensorflow {",
          "24: struct StackFrame {",
          "25:   std::string file_name;",
          "26:   int line_number;",
          "27:   std::string function_name;",
          "29:   bool operator==(const StackFrame& other) const {",
          "30:     return line_number == other.line_number &&",
          "31:            function_name == other.function_name && file_name == other.file_name;",
          "32:   }",
          "34:   bool operator!=(const StackFrame& other) const { return !(*this == other); }",
          "35: };",
          "37: }  // namespace tensorflow",
          "39: #endif  // TENSORFLOW_CORE_PLATFORM_STACK_TRACE_H_",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/status.h||tensorflow/core/platform/status.h": [
          "File: tensorflow/core/platform/status.h -> tensorflow/core/platform/status.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"tensorflow/core/platform/logging.h\"",
          "26: #include \"tensorflow/core/platform/macros.h\"",
          "27: #include \"tensorflow/core/platform/stringpiece.h\"",
          "28: #include \"tensorflow/core/platform/types.h\"",
          "29: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "31: namespace tensorflow {",
          "47: #if defined(__clang__)",
          "49: class TF_MUST_USE_RESULT Status;",
          "",
          "[Removed Lines]",
          "34: struct StackFrame {",
          "35:   std::string file_name;",
          "36:   int line_number;",
          "37:   std::string function_name;",
          "39:   bool operator==(const StackFrame& other) const {",
          "40:     return line_number == other.line_number &&",
          "41:            function_name == other.function_name && file_name == other.file_name;",
          "42:   }",
          "44:   bool operator!=(const StackFrame& other) const { return !(*this == other); }",
          "45: };",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/stack_frame.h\"",
          "",
          "---------------"
        ],
        "tensorflow/core/util/managed_stack_trace.h||tensorflow/core/util/managed_stack_trace.h": [
          "File: tensorflow/core/util/managed_stack_trace.h -> tensorflow/core/util/managed_stack_trace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define TENSORFLOW_CORE_UTIL_ABSTRACT_STACK_TRACE_H_",
          "19: #include <string>",
          "21: #include \"absl/strings/match.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/platform/status.h\"",
          "",
          "[Added Lines]",
          "20: #include <vector>",
          "23: #include \"absl/types/optional.h\"",
          "24: #include \"tensorflow/core/platform/stack_frame.h\"",
          "",
          "---------------"
        ],
        "tensorflow/python/eager/def_function_xla_jit_test.py||tensorflow/python/eager/def_function_xla_jit_test.py": [
          "File: tensorflow/python/eager/def_function_xla_jit_test.py -> tensorflow/python/eager/def_function_xla_jit_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:       self.assertEqual(cell_nojit.value(), orig_nojit + 2)",
          "945:       self.assertEqual(cell_jit.value(), orig_jit + 3)",
          "948: if __name__ == '__main__':",
          "949:   ops.enable_eager_execution()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "947:   @test_util.disable_mlir_bridge('TODO(b/162272821): MLIR bridge returns '",
          "948:                                  ' wrong status type')",
          "949:   def testResourceWrongDevice(self):",
          "950:     if 'gpu' not in self.device.lower():",
          "951:       self.skipTest('Need a GPU to have non-trivial device placement')",
          "953:     with ops.device('device:CPU:0'):",
          "954:       v = variables.Variable([3.1, 3.2])",
          "956:     with ops.device('device:{}:0'.format(self.device)):",
          "958:       @def_function.function(experimental_compile=True)",
          "959:       def update_var(a):",
          "960:         v.assign_add(a)",
          "962:       arg = random_ops.random_normal([2])",
          "963:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "964:                                   'def_function_xla_jit_test.py'):",
          "965:         update_var(arg)",
          "",
          "---------------"
        ],
        "tensorflow/python/util/stack_trace.h||tensorflow/python/util/stack_trace.h": [
          "File: tensorflow/python/util/stack_trace.h -> tensorflow/python/util/stack_trace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"absl/container/flat_hash_set.h\"",
          "31: #include \"absl/container/inlined_vector.h\"",
          "32: #include \"absl/types/optional.h\"",
          "33: #include \"tensorflow/core/util/managed_stack_trace.h\"",
          "35: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/platform/status.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cdef6092d6199d55c4466d1f4a372081e3b9378",
      "candidate_info": {
        "commit_hash": "5cdef6092d6199d55c4466d1f4a372081e3b9378",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5cdef6092d6199d55c4466d1f4a372081e3b9378",
        "files": [
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/resource_handle.cc",
          "tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Prevent `CHECK`-fail when decoding resource handles from proto\n\nIn certain scenarios, the proto might contain tensors that have too many elements (overflow). This is a `CHECK`-fail in general, but we should prevent this, given how many CVEs caused by that we have received this year (a large fraction of 200).\n\nPiperOrigin-RevId: 408049766\nChange-Id: I2ac20b247aa8ed9110846fbdb7a0a9401f2c168c",
        "before_after_code_files": [
          "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
          "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc": [
          "File: tensorflow/core/framework/resource_handle.cc -> tensorflow/core/framework/resource_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/resource_handle.h\"",
          "18: #include \"tensorflow/core/framework/resource_handle.pb.h\"",
          "19: #include \"tensorflow/core/lib/core/errors.h\"",
          "20: #include \"tensorflow/core/lib/strings/strcat.h\"",
          "22: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "22: #include \"tensorflow/core/platform/errors.h\"",
          "23: #include \"tensorflow/core/platform/macros.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: ResourceHandle::ResourceHandle() {}",
          "29: ResourceHandle::ResourceHandle(const ResourceHandleProto& proto) {",
          "31: }",
          "33: ResourceHandle::~ResourceHandle() {}",
          "",
          "[Removed Lines]",
          "30:   FromProto(proto);",
          "",
          "[Added Lines]",
          "33:   TF_CHECK_OK(FromProto(proto));",
          "34: }",
          "36: Status ResourceHandle::BuildResourceHandle(const ResourceHandleProto& proto,",
          "37:                                            ResourceHandle* out) {",
          "38:   if (out == nullptr)",
          "39:     return errors::Internal(",
          "40:         \"BuildResourceHandle() was called with nullptr for the output\");",
          "41:   return out->FromProto(proto);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   }",
          "53: }",
          "56:   set_device(proto.device());",
          "57:   set_container(proto.container());",
          "58:   set_name(proto.name());",
          "",
          "[Removed Lines]",
          "55: void ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
          "",
          "[Added Lines]",
          "66: Status ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:   std::vector<DtypeAndPartialTensorShape> dtypes_and_shapes;",
          "62:   for (const auto& dtype_and_shape : proto.dtypes_and_shapes()) {",
          "63:     DataType dtype = dtype_and_shape.dtype();",
          "65:     dtypes_and_shapes.push_back(DtypeAndPartialTensorShape{dtype, shape});",
          "66:   }",
          "67:   dtypes_and_shapes_ = std::move(dtypes_and_shapes);",
          "68: }",
          "70: string ResourceHandle::SerializeAsString() const {",
          "",
          "[Removed Lines]",
          "64:     PartialTensorShape shape(dtype_and_shape.shape());",
          "",
          "[Added Lines]",
          "75:     PartialTensorShape shape;",
          "76:     Status s = PartialTensorShape::BuildPartialTensorShape(",
          "77:         dtype_and_shape.shape(), &shape);",
          "78:     if (!s.ok()) {",
          "79:       return s;",
          "80:     }",
          "84:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "76: bool ResourceHandle::ParseFromString(const string& s) {",
          "77:   ResourceHandleProto proto;",
          "81: }",
          "83: string ResourceHandle::DebugString() const {",
          "",
          "[Removed Lines]",
          "78:   const bool status = proto.ParseFromString(s);",
          "79:   if (status) FromProto(proto);",
          "80:   return status;",
          "",
          "[Added Lines]",
          "95:   return proto.ParseFromString(s) && FromProto(proto).ok();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:     if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {",
          "145:       return false;",
          "146:     }",
          "148:   }",
          "149:   return true;",
          "150: }",
          "",
          "[Removed Lines]",
          "147:     ps[i].FromProto(proto);",
          "",
          "[Added Lines]",
          "162:     if (!ps[i].FromProto(proto).ok()) {",
          "163:       return false;",
          "164:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h": [
          "File: tensorflow/core/framework/resource_handle.h -> tensorflow/core/framework/resource_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   ResourceHandle(const ResourceHandleProto& proto);",
          "47:   ~ResourceHandle();",
          "50:   const std::string& device() const { return device_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   static Status BuildResourceHandle(const ResourceHandleProto& proto,",
          "52:                                     ResourceHandle* out);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:   void AsProto(ResourceHandleProto* proto) const;",
          "97:   std::string SerializeAsString() const;",
          "",
          "[Removed Lines]",
          "94:   void FromProto(const ResourceHandleProto& proto);",
          "",
          "[Added Lines]",
          "99:   Status FromProto(const ResourceHandleProto& proto);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:   return buf;",
          "538: }",
          "540: template <>",
          "541: TensorBuffer* FromProtoField<Variant>(Allocator* a, const TensorProto& in,",
          "542:                                       int64_t n) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543: template <>",
          "544: TensorBuffer* FromProtoField<ResourceHandle>(Allocator* a,",
          "545:                                              const TensorProto& in, int64_t n) {",
          "546:   CHECK_GT(n, 0);",
          "547:   Buffer<ResourceHandle>* buf = new Buffer<ResourceHandle>(a, n);",
          "548:   ResourceHandle* data = buf->template base<ResourceHandle>();",
          "549:   if (data == nullptr) {",
          "550:     buf->Unref();",
          "551:     return nullptr;",
          "552:   }",
          "553:   const int64_t in_n = ProtoHelper<ResourceHandle>::NumElements(in);",
          "554:   if (in_n <= 0) {",
          "555:     std::fill_n(data, n, ResourceHandle());",
          "556:   } else {",
          "561:     const int64_t real_n = n < in_n ? n : in_n;",
          "562:     for (int64_t i = 0; i < real_n; ++i) {",
          "563:       Status s = ResourceHandle::BuildResourceHandle(in.resource_handle_val(i),",
          "564:                                                      &data[i]);",
          "565:       if (!s.ok()) {",
          "566:         LOG(ERROR) << \"Could not decode resource handle from proto \\\"\"",
          "567:                    << in.resource_handle_val(i).ShortDebugString()",
          "568:                    << \"\\\", returned status: \" << s.ToString();",
          "569:         buf->Unref();",
          "570:         return nullptr;",
          "571:       }",
          "572:     }",
          "573:     for (int64_t i = in_n; i < n; ++i) {",
          "574:       data[i] = ResourceHandle();",
          "575:     }",
          "576:   }",
          "577:   return buf;",
          "578: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fa0fd9b30db41f2ec432ccf98cf05de784852a5",
      "candidate_info": {
        "commit_hash": "8fa0fd9b30db41f2ec432ccf98cf05de784852a5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8fa0fd9b30db41f2ec432ccf98cf05de784852a5",
        "files": [
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/resource_handle.cc",
          "tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Prevent `CHECK`-fail when decoding resource handles from proto\n\nIn certain scenarios, the proto might contain tensors that have too many elements (overflow). This is a `CHECK`-fail in general, but we should prevent this, given how many CVEs caused by that we have received this year (a large fraction of 200).\n\nPiperOrigin-RevId: 408049766\nChange-Id: I2ac20b247aa8ed9110846fbdb7a0a9401f2c168c",
        "before_after_code_files": [
          "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
          "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc": [
          "File: tensorflow/core/framework/resource_handle.cc -> tensorflow/core/framework/resource_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/resource_handle.h\"",
          "17: #include \"tensorflow/core/framework/resource_handle.pb.h\"",
          "18: #include \"tensorflow/core/lib/strings/strcat.h\"",
          "20: namespace tensorflow {",
          "22: ResourceHandle::ResourceHandle() {}",
          "24: ResourceHandle::ResourceHandle(const ResourceHandleProto& proto) {",
          "26: }",
          "28: ResourceHandle::~ResourceHandle() {}",
          "",
          "[Removed Lines]",
          "25:   FromProto(proto);",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "20: #include \"tensorflow/core/platform/errors.h\"",
          "21: #include \"tensorflow/core/platform/macros.h\"",
          "28:   TF_CHECK_OK(FromProto(proto));",
          "29: }",
          "31: Status ResourceHandle::BuildResourceHandle(const ResourceHandleProto& proto,",
          "32:                                            ResourceHandle* out) {",
          "33:   if (out == nullptr)",
          "34:     return errors::Internal(",
          "35:         \"BuildResourceHandle() was called with nullptr for the output\");",
          "36:   return out->FromProto(proto);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   }",
          "41: }",
          "44:   set_device(proto.device());",
          "45:   set_container(proto.container());",
          "46:   set_name(proto.name());",
          "",
          "[Removed Lines]",
          "43: void ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
          "",
          "[Added Lines]",
          "54: Status ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   std::vector<DtypeAndPartialTensorShape> dtypes_and_shapes;",
          "50:   for (const auto& dtype_and_shape : proto.dtypes_and_shapes()) {",
          "51:     DataType dtype = dtype_and_shape.dtype();",
          "53:     dtypes_and_shapes.push_back(DtypeAndPartialTensorShape{dtype, shape});",
          "54:   }",
          "55:   dtypes_and_shapes_ = std::move(dtypes_and_shapes);",
          "56: }",
          "58: string ResourceHandle::SerializeAsString() const {",
          "",
          "[Removed Lines]",
          "52:     PartialTensorShape shape(dtype_and_shape.shape());",
          "",
          "[Added Lines]",
          "63:     PartialTensorShape shape;",
          "64:     Status s = PartialTensorShape::BuildPartialTensorShape(",
          "65:         dtype_and_shape.shape(), &shape);",
          "66:     if (!s.ok()) {",
          "67:       return s;",
          "68:     }",
          "72:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: bool ResourceHandle::ParseFromString(const string& s) {",
          "65:   ResourceHandleProto proto;",
          "69: }",
          "71: string ResourceHandle::DebugString() const {",
          "",
          "[Removed Lines]",
          "66:   const bool status = proto.ParseFromString(s);",
          "67:   if (status) FromProto(proto);",
          "68:   return status;",
          "",
          "[Added Lines]",
          "83:   return proto.ParseFromString(s) && FromProto(proto).ok();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:     if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {",
          "99:       return false;",
          "100:     }",
          "102:   }",
          "103:   return true;",
          "104: }",
          "",
          "[Removed Lines]",
          "101:     ps[i].FromProto(proto);",
          "",
          "[Added Lines]",
          "116:     if (!ps[i].FromProto(proto).ok()) {",
          "117:       return false;",
          "118:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h": [
          "File: tensorflow/core/framework/resource_handle.h -> tensorflow/core/framework/resource_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   ResourceHandle(const ResourceHandleProto& proto);",
          "39:   ~ResourceHandle();",
          "42:   const std::string& device() const { return device_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   static Status BuildResourceHandle(const ResourceHandleProto& proto,",
          "44:                                     ResourceHandle* out);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   void AsProto(ResourceHandleProto* proto) const;",
          "89:   std::string SerializeAsString() const;",
          "",
          "[Removed Lines]",
          "86:   void FromProto(const ResourceHandleProto& proto);",
          "",
          "[Added Lines]",
          "91:   Status FromProto(const ResourceHandleProto& proto);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:   return buf;",
          "534: }",
          "536: template <>",
          "537: TensorBuffer* FromProtoField<Variant>(Allocator* a, const TensorProto& in,",
          "538:                                       int64 n) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539: template <>",
          "540: TensorBuffer* FromProtoField<ResourceHandle>(Allocator* a,",
          "541:                                              const TensorProto& in, int64_t n) {",
          "542:   CHECK_GT(n, 0);",
          "543:   Buffer<ResourceHandle>* buf = new Buffer<ResourceHandle>(a, n);",
          "544:   ResourceHandle* data = buf->template base<ResourceHandle>();",
          "545:   if (data == nullptr) {",
          "546:     buf->Unref();",
          "547:     return nullptr;",
          "548:   }",
          "549:   const int64_t in_n = ProtoHelper<ResourceHandle>::NumElements(in);",
          "550:   if (in_n <= 0) {",
          "551:     std::fill_n(data, n, ResourceHandle());",
          "552:   } else {",
          "557:     const int64_t real_n = n < in_n ? n : in_n;",
          "558:     for (int64_t i = 0; i < real_n; ++i) {",
          "559:       Status s = ResourceHandle::BuildResourceHandle(in.resource_handle_val(i),",
          "560:                                                      &data[i]);",
          "561:       if (!s.ok()) {",
          "562:         LOG(ERROR) << \"Could not decode resource handle from proto \\\"\"",
          "563:                    << in.resource_handle_val(i).ShortDebugString()",
          "564:                    << \"\\\", returned status: \" << s.ToString();",
          "565:         buf->Unref();",
          "566:         return nullptr;",
          "567:       }",
          "568:     }",
          "569:     for (int64_t i = in_n; i < n; ++i) {",
          "570:       data[i] = ResourceHandle();",
          "571:     }",
          "572:   }",
          "573:   return buf;",
          "574: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18c1769002022f5ad34c1208e92fc26d32c15d67",
      "candidate_info": {
        "commit_hash": "18c1769002022f5ad34c1208e92fc26d32c15d67",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/18c1769002022f5ad34c1208e92fc26d32c15d67",
        "files": [
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/resource_handle.cc",
          "tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Prevent `CHECK`-fail when decoding resource handles from proto\n\nIn certain scenarios, the proto might contain tensors that have too many elements (overflow). This is a `CHECK`-fail in general, but we should prevent this, given how many CVEs caused by that we have received this year (a large fraction of 200).\n\nPiperOrigin-RevId: 408049766\nChange-Id: I2ac20b247aa8ed9110846fbdb7a0a9401f2c168c",
        "before_after_code_files": [
          "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
          "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc",
            "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h",
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/resource_handle.cc||tensorflow/core/framework/resource_handle.cc": [
          "File: tensorflow/core/framework/resource_handle.cc -> tensorflow/core/framework/resource_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/resource_handle.h\"",
          "17: #include \"tensorflow/core/framework/resource_handle.pb.h\"",
          "18: #include \"tensorflow/core/lib/strings/strcat.h\"",
          "20: namespace tensorflow {",
          "22: ResourceHandle::ResourceHandle() {}",
          "24: ResourceHandle::ResourceHandle(const ResourceHandleProto& proto) {",
          "26: }",
          "28: ResourceHandle::~ResourceHandle() {}",
          "",
          "[Removed Lines]",
          "25:   FromProto(proto);",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "20: #include \"tensorflow/core/platform/errors.h\"",
          "21: #include \"tensorflow/core/platform/macros.h\"",
          "28:   TF_CHECK_OK(FromProto(proto));",
          "29: }",
          "31: Status ResourceHandle::BuildResourceHandle(const ResourceHandleProto& proto,",
          "32:                                            ResourceHandle* out) {",
          "33:   if (out == nullptr)",
          "34:     return errors::Internal(",
          "35:         \"BuildResourceHandle() was called with nullptr for the output\");",
          "36:   return out->FromProto(proto);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   }",
          "41: }",
          "44:   set_device(proto.device());",
          "45:   set_container(proto.container());",
          "46:   set_name(proto.name());",
          "",
          "[Removed Lines]",
          "43: void ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
          "",
          "[Added Lines]",
          "54: Status ResourceHandle::FromProto(const ResourceHandleProto& proto) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   std::vector<DtypeAndPartialTensorShape> dtypes_and_shapes;",
          "50:   for (const auto& dtype_and_shape : proto.dtypes_and_shapes()) {",
          "51:     DataType dtype = dtype_and_shape.dtype();",
          "53:     dtypes_and_shapes.push_back(DtypeAndPartialTensorShape{dtype, shape});",
          "54:   }",
          "55:   dtypes_and_shapes_ = std::move(dtypes_and_shapes);",
          "56: }",
          "58: string ResourceHandle::SerializeAsString() const {",
          "",
          "[Removed Lines]",
          "52:     PartialTensorShape shape(dtype_and_shape.shape());",
          "",
          "[Added Lines]",
          "63:     PartialTensorShape shape;",
          "64:     Status s = PartialTensorShape::BuildPartialTensorShape(",
          "65:         dtype_and_shape.shape(), &shape);",
          "66:     if (!s.ok()) {",
          "67:       return s;",
          "68:     }",
          "72:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: bool ResourceHandle::ParseFromString(const string& s) {",
          "65:   ResourceHandleProto proto;",
          "69: }",
          "71: string ResourceHandle::DebugString() const {",
          "",
          "[Removed Lines]",
          "66:   const bool status = proto.ParseFromString(s);",
          "67:   if (status) FromProto(proto);",
          "68:   return status;",
          "",
          "[Added Lines]",
          "83:   return proto.ParseFromString(s) && FromProto(proto).ok();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:     if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {",
          "99:       return false;",
          "100:     }",
          "102:   }",
          "103:   return true;",
          "104: }",
          "",
          "[Removed Lines]",
          "101:     ps[i].FromProto(proto);",
          "",
          "[Added Lines]",
          "116:     if (!ps[i].FromProto(proto).ok()) {",
          "117:       return false;",
          "118:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/resource_handle.h||tensorflow/core/framework/resource_handle.h": [
          "File: tensorflow/core/framework/resource_handle.h -> tensorflow/core/framework/resource_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   ResourceHandle(const ResourceHandleProto& proto);",
          "39:   ~ResourceHandle();",
          "42:   const std::string& device() const { return device_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   static Status BuildResourceHandle(const ResourceHandleProto& proto,",
          "44:                                     ResourceHandle* out);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   void AsProto(ResourceHandleProto* proto) const;",
          "89:   std::string SerializeAsString() const;",
          "",
          "[Removed Lines]",
          "86:   void FromProto(const ResourceHandleProto& proto);",
          "",
          "[Added Lines]",
          "91:   Status FromProto(const ResourceHandleProto& proto);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   return buf;",
          "532: }",
          "534: template <>",
          "535: TensorBuffer* FromProtoField<Variant>(Allocator* a, const TensorProto& in,",
          "536:                                       int64 n) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537: template <>",
          "538: TensorBuffer* FromProtoField<ResourceHandle>(Allocator* a,",
          "539:                                              const TensorProto& in, int64_t n) {",
          "540:   CHECK_GT(n, 0);",
          "541:   Buffer<ResourceHandle>* buf = new Buffer<ResourceHandle>(a, n);",
          "542:   ResourceHandle* data = buf->template base<ResourceHandle>();",
          "543:   if (data == nullptr) {",
          "544:     buf->Unref();",
          "545:     return nullptr;",
          "546:   }",
          "547:   const int64_t in_n = ProtoHelper<ResourceHandle>::NumElements(in);",
          "548:   if (in_n <= 0) {",
          "549:     std::fill_n(data, n, ResourceHandle());",
          "550:   } else {",
          "555:     const int64_t real_n = n < in_n ? n : in_n;",
          "556:     for (int64_t i = 0; i < real_n; ++i) {",
          "557:       Status s = ResourceHandle::BuildResourceHandle(in.resource_handle_val(i),",
          "558:                                                      &data[i]);",
          "559:       if (!s.ok()) {",
          "560:         LOG(ERROR) << \"Could not decode resource handle from proto \\\"\"",
          "561:                    << in.resource_handle_val(i).ShortDebugString()",
          "562:                    << \"\\\", returned status: \" << s.ToString();",
          "563:         buf->Unref();",
          "564:         return nullptr;",
          "565:       }",
          "566:     }",
          "567:     for (int64_t i = in_n; i < n; ++i) {",
          "568:       data[i] = ResourceHandle();",
          "569:     }",
          "570:   }",
          "571:   return buf;",
          "572: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}