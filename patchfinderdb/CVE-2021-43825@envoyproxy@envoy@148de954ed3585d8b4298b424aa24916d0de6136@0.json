{
  "cve_id": "CVE-2021-43825",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. Sending a locally generated response must stop further processing of request or response data. Envoy tracks the amount of buffered request and response data and aborts the request if the amount of buffered data is over the limit by sending 413 or 500 responses. However when the buffer overflows while response is processed by the filter chain the operation may not be aborted correctly and result in accessing a freed memory block. If this happens Envoy will crash resulting in a denial of service.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "148de954ed3585d8b4298b424aa24916d0de6136",
  "patch_info": {
    "commit_hash": "148de954ed3585d8b4298b424aa24916d0de6136",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/148de954ed3585d8b4298b424aa24916d0de6136",
    "files": [
      "source/common/http/conn_manager_impl.cc",
      "source/common/http/filter_manager.cc",
      "source/common/http/filter_manager.h",
      "test/integration/BUILD",
      "test/integration/filters/BUILD",
      "test/integration/filters/buffer_continue_filter.cc",
      "test/integration/protocol_integration_test.cc"
    ],
    "message": "CVE-2021-43825\n\nResponse filter manager crash\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
      "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
      "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
      "test/integration/filters/buffer_continue_filter.cc||test/integration/filters/buffer_continue_filter.cc",
      "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
      "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:     ENVOY_STREAM_LOG(debug, \"doEndStream() resetting stream\", stream);",
      "",
      "[Removed Lines]",
      "208:   if (stream.response_encoder_ != nullptr &&",
      "209:       (!stream.filter_manager_.remoteComplete() || !stream.state_.codec_saw_local_complete_)) {",
      "",
      "[Added Lines]",
      "208:   if (stream.response_encoder_ != nullptr && (!stream.filter_manager_.remoteDecodeComplete() ||",
      "209:                                               !stream.state_.codec_saw_local_complete_)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "251:   bool connection_close = stream.state_.saw_connection_close_;",
      "254:   checkForDeferredClose(connection_close && (request_complete || http_10_sans_cl));",
      "255: }",
      "",
      "[Removed Lines]",
      "252:   bool request_complete = stream.filter_manager_.remoteComplete();",
      "",
      "[Added Lines]",
      "252:   bool request_complete = stream.filter_manager_.remoteDecodeComplete();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1436:     if (connection_manager_.codec_->protocol() < Protocol::Http2) {",
      "1437:       connection_manager_.drain_state_ = DrainState::Closing;",
      "1438:     }",
      "",
      "[Removed Lines]",
      "1435:   if (!filter_manager_.remoteComplete()) {",
      "",
      "[Added Lines]",
      "1435:   if (!filter_manager_.remoteDecodeComplete()) {",
      "",
      "---------------"
    ],
    "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
      "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:   return !parent_.state_.local_complete_;",
      "304: }",
      "306: Buffer::InstancePtr ActiveStreamDecoderFilter::createBuffer() {",
      "307:   auto buffer = dispatcher().getWatermarkFactory().createBuffer(",
      "308:       [this]() -> void { this->requestDataDrained(); },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: bool ActiveStreamEncoderFilter::canContinue() {",
      "309:   return !parent_.state_.remote_encode_complete_;",
      "310: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "316:   return parent_.buffered_request_data_;",
      "317: }",
      "321: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
      "322:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
      "",
      "[Removed Lines]",
      "319: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_complete_; }",
      "",
      "[Added Lines]",
      "325: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "832: }",
      "834: void FilterManager::maybeEndDecode(bool end_stream) {",
      "837:   if (end_stream) {",
      "838:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
      "839:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
      "",
      "[Removed Lines]",
      "835:   ASSERT(!state_.remote_complete_);",
      "836:   state_.remote_complete_ = end_stream;",
      "",
      "[Added Lines]",
      "841:   ASSERT(!state_.remote_decode_complete_);",
      "842:   state_.remote_decode_complete_ = end_stream;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1357: void FilterManager::maybeEndEncode(bool end_stream) {",
      "1358:   if (end_stream) {",
      "1359:     filter_manager_callbacks_.endStream();",
      "1360:   }",
      "1361: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1365:     ASSERT(!state_.remote_encode_complete_);",
      "1366:     state_.remote_encode_complete_ = true;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1646: }",
      "1648: void ActiveStreamEncoderFilter::responseDataTooLarge() {",
      "1649:   if (parent_.state_.encoder_filters_streaming_) {",
      "1650:     onEncoderFilterAboveWriteBufferHighWatermark();",
      "1651:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1657:   ENVOY_STREAM_LOG(debug, \"response data too large watermark exceeded\", parent_);",
      "",
      "---------------"
    ],
    "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
      "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "317:       : ActiveStreamFilterBase(parent, dual_filter, std::move(match_state)), handle_(filter) {}",
      "321:   Buffer::InstancePtr createBuffer() override;",
      "322:   Buffer::InstancePtr& bufferedData() override;",
      "323:   bool complete() override;",
      "",
      "[Removed Lines]",
      "320:   bool canContinue() override { return true; }",
      "",
      "[Added Lines]",
      "320:   bool canContinue() override;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "910:   bool remoteComplete() const { return state_.remote_complete_; }",
      "",
      "[Added Lines]",
      "910:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1059:   struct State {",
      "1060:     State()",
      "1067:     uint32_t filter_call_state_{0};",
      "1070:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
      "",
      "[Removed Lines]",
      "1061:         : remote_complete_(false), local_complete_(false), has_1xx_headers_(false),",
      "1062:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
      "1063:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
      "1064:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
      "1065:           saw_downstream_reset_(false) {}",
      "1069:     bool remote_complete_ : 1;",
      "",
      "[Added Lines]",
      "1061:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
      "1062:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
      "1063:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
      "1064:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
      "1065:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
      "1068:     bool remote_encode_complete_ : 1;",
      "1069:     bool remote_decode_complete_ : 1;",
      "",
      "---------------"
    ],
    "test/integration/filters/buffer_continue_filter.cc||test/integration/filters/buffer_continue_filter.cc": [
      "File: test/integration/filters/buffer_continue_filter.cc -> test/integration/filters/buffer_continue_filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #include <string>",
      "3: #include \"envoy/http/filter.h\"",
      "4: #include \"envoy/registry/registry.h\"",
      "5: #include \"envoy/server/filter_config.h\"",
      "7: #include \"source/extensions/filters/http/common/pass_through_filter.h\"",
      "9: #include \"test/extensions/filters/http/common/empty_http_filter_config.h\"",
      "11: namespace Envoy {",
      "14: class BufferContinueStreamFilter : public Http::PassThroughFilter {",
      "15: public:",
      "16:   Http::FilterHeadersStatus decodeHeaders(Http::RequestHeaderMap&, bool end_stream) override {",
      "17:     return end_stream ? Http::FilterHeadersStatus::Continue",
      "18:                       : Http::FilterHeadersStatus::StopIteration;",
      "19:   }",
      "21:   Http::FilterDataStatus decodeData(Buffer::Instance&, bool end_stream) override {",
      "22:     return end_stream ? Http::FilterDataStatus::Continue",
      "23:                       : Http::FilterDataStatus::StopIterationAndBuffer;",
      "24:   }",
      "26:   Http::FilterHeadersStatus encodeHeaders(Http::ResponseHeaderMap& headers, bool) override {",
      "27:     response_headers_ = &headers;",
      "28:     return Http::FilterHeadersStatus::StopIteration;",
      "29:   }",
      "31:   Http::FilterDataStatus encodeData(Buffer::Instance& data, bool end_stream) override {",
      "32:     data_total_ += data.length();",
      "34:     const auto limit = encoder_callbacks_->encoderBufferLimit();",
      "35:     const auto header_size = response_headers_->byteSize();",
      "37:     if (limit && header_size + data_total_ > limit) {",
      "40:       return Http::FilterDataStatus::Continue;",
      "41:     }",
      "43:     encoder_callbacks_->addEncodedData(data, false);",
      "45:     if (!end_stream) {",
      "46:       return Http::FilterDataStatus::StopIterationAndBuffer;",
      "47:     }",
      "49:     return Http::FilterDataStatus::Continue;",
      "50:   }",
      "52: private:",
      "53:   Http::ResponseHeaderMap* response_headers_;",
      "54:   uint64_t data_total_{0};",
      "55: };",
      "57: class BufferContinueFilterConfig : public Extensions::HttpFilters::Common::EmptyHttpFilterConfig {",
      "58: public:",
      "59:   BufferContinueFilterConfig() : EmptyHttpFilterConfig(\"buffer-continue-filter\") {}",
      "61:   Http::FilterFactoryCb createFilter(const std::string&,",
      "62:                                      Server::Configuration::FactoryContext&) override {",
      "63:     return [](Http::FilterChainFactoryCallbacks& callbacks) -> void {",
      "64:       callbacks.addStreamFilter(std::make_shared<::Envoy::BufferContinueStreamFilter>());",
      "65:     };",
      "66:   }",
      "67: };",
      "70: static Registry::RegisterFactory<BufferContinueFilterConfig,",
      "71:                                  Server::Configuration::NamedHttpFilterConfigFactory>",
      "72:     register_;",
      "74: } // namespace Envoy",
      "",
      "---------------"
    ],
    "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
      "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "3450:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
      "3451: }",
      "3453: TEST_P(DownstreamProtocolIntegrationTest, ContentLengthSmallerThanPayload) {",
      "3454:   initialize();",
      "3455:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3454: TEST_P(ProtocolIntegrationTest, BufferContinue) {",
      "3456:   if (upstreamProtocol() != Http::CodecType::HTTP2) {",
      "3457:     return;",
      "3458:   }",
      "3459:   config_helper_.addConfigModifier(",
      "3460:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "3461:               hcm) -> void {",
      "3462:         auto* route_config = hcm.mutable_route_config();",
      "3463:         auto* virtual_host = route_config->mutable_virtual_hosts(0);",
      "3464:         auto* header = virtual_host->mutable_response_headers_to_add()->Add()->mutable_header();",
      "3465:         header->set_key(\"foo\");",
      "3466:         header->set_value(\"bar\");",
      "3467:       });",
      "3469:   useAccessLog();",
      "3470:   config_helper_.addFilter(\"{ name: buffer-continue-filter, typed_config: { \\\"@type\\\": \"",
      "3471:                            \"type.googleapis.com/google.protobuf.Empty } }\");",
      "3472:   config_helper_.setBufferLimits(1024, 1024);",
      "3473:   initialize();",
      "3476:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "3477:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
      "3478:   auto downstream_request = &encoder_decoder.first;",
      "3479:   auto response = std::move(encoder_decoder.second);",
      "3480:   Buffer::OwnedImpl data(\"HTTP body content goes here\");",
      "3481:   codec_client_->sendData(*downstream_request, data, true);",
      "3482:   waitForNextUpstreamRequest();",
      "3485:   upstream_request_->encodeHeaders(default_response_headers_, false);",
      "3489:   upstream_request_->encodeData(512, false);",
      "3490:   upstream_request_->encodeData(1024 * 100, false);",
      "3492:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
      "3493:     ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
      "3494:   } else {",
      "3495:     ASSERT_TRUE(upstream_request_->waitForReset());",
      "3496:     ASSERT_TRUE(fake_upstream_connection_->close());",
      "3497:     ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
      "3498:   }",
      "3500:   ASSERT_TRUE(response->waitForEndStream());",
      "3501:   EXPECT_TRUE(response->complete());",
      "3502:   EXPECT_EQ(\"500\", response->headers().getStatusValue());",
      "3503: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11469dc9660d97b51af78bf964b2b869e324302d",
      "candidate_info": {
        "commit_hash": "11469dc9660d97b51af78bf964b2b869e324302d",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/11469dc9660d97b51af78bf964b2b869e324302d",
        "files": [
          "envoy/stream_info/stream_info.h",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/stream_info/stream_info_impl.h",
          "test/common/http/filter_manager_test.cc",
          "test/mocks/http/mocks.h",
          "test/mocks/stream_info/mocks.h"
        ],
        "message": "filter:manager change metadata and downstream APIs. (#22387)\n\nThis PR does two things.\n\nit moves the translation of metadata map types to the HCM, so we consistently use MetadataMapPtr&& everywhere in between the upstream codec and the downstream codec and\nstart moving downstream-only code out of the generic FM base class into a downstream-specific base class. Specifically I'm claiming (and documenting) that if an upstream filter sends a local reply, as the response is not generated by the cluster so should only traverse the downstream filter chain, so UpstreamFM sendLocal Reply will just forward sendLocalReply to the DownstreamFM and HCM.\nRisk Level: low (minor refactors)\nTesting: n/a\nDocs Changes: n/a\nRelease Notes: n/a\nPart of #10455\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "envoy/stream_info/stream_info.h||envoy/stream_info/stream_info.h",
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
          "test/common/http/filter_manager_test.cc||test/common/http/filter_manager_test.cc",
          "test/mocks/http/mocks.h||test/mocks/http/mocks.h",
          "test/mocks/stream_info/mocks.h||test/mocks/stream_info/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h"
          ]
        }
      },
      "candidate_diff": {
        "envoy/stream_info/stream_info.h||envoy/stream_info/stream_info.h": [
          "File: envoy/stream_info/stream_info.h -> envoy/stream_info/stream_info.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "728:     downstream_info.setUpstreamBytesMeter(upstream_info.getUpstreamBytesMeter());",
          "729:     upstream_info.setDownstreamBytesMeter(downstream_info.getDownstreamBytesMeter());",
          "730:   }",
          "731: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:   virtual void dumpState(std::ostream& os, int indent_level = 0) const PURE;",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1559:   response_encoder_->encodeTrailers(trailers);",
          "1560: }",
          "1565: }",
          "1567: void ConnectionManagerImpl::ActiveStream::onDecoderFilterBelowWriteBufferLowWatermark() {",
          "",
          "[Removed Lines]",
          "1562: void ConnectionManagerImpl::ActiveStream::encodeMetadata(MetadataMapVector& metadata) {",
          "1563:   ENVOY_STREAM_LOG(debug, \"encoding metadata via codec:\\n{}\", *this, metadata);",
          "1564:   response_encoder_->encodeMetadata(metadata);",
          "",
          "[Added Lines]",
          "1562: void ConnectionManagerImpl::ActiveStream::encodeMetadata(MetadataMapPtr&& metadata) {",
          "1563:   MetadataMapVector metadata_map_vector;",
          "1564:   metadata_map_vector.emplace_back(std::move(metadata));",
          "1565:   ENVOY_STREAM_LOG(debug, \"encoding metadata via codec:\\n{}\", *this, metadata_map_vector);",
          "1566:   response_encoder_->encodeMetadata(metadata_map_vector);",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h": [
          "File: source/common/http/conn_manager_impl.h -> source/common/http/conn_manager_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     void encode1xxHeaders(ResponseHeaderMap& response_headers) override;",
          "221:     void encodeData(Buffer::Instance& data, bool end_stream) override;",
          "222:     void encodeTrailers(ResponseTrailerMap& trailers) override;",
          "224:     void setRequestTrailers(Http::RequestTrailerMapPtr&& request_trailers) override {",
          "225:       ASSERT(!request_trailers_);",
          "226:       request_trailers_ = std::move(request_trailers);",
          "",
          "[Removed Lines]",
          "223:     void encodeMetadata(MetadataMapVector& metadata) override;",
          "",
          "[Added Lines]",
          "223:     void encodeMetadata(MetadataMapPtr&& metadata) override;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     Router::ConfigConstSharedPtr snapped_route_config_;",
          "376:     Router::ScopedConfigConstSharedPtr snapped_scoped_routes_config_;",
          "",
          "[Removed Lines]",
          "373:     FilterManager filter_manager_;",
          "",
          "[Added Lines]",
          "373:     DownstreamFilterManager filter_manager_;",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: Event::Dispatcher& ActiveStreamFilterBase::dispatcher() { return parent_.dispatcher_; }",
          "241: Tracing::Span& ActiveStreamFilterBase::activeSpan() {",
          "242:   return parent_.filter_manager_callbacks_.activeSpan();",
          "",
          "[Removed Lines]",
          "239: StreamInfo::StreamInfo& ActiveStreamFilterBase::streamInfo() { return parent_.stream_info_; }",
          "",
          "[Added Lines]",
          "239: StreamInfo::StreamInfo& ActiveStreamFilterBase::streamInfo() { return parent_.streamInfo(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438: void ActiveStreamDecoderFilter::encodeHeaders(ResponseHeaderMapPtr&& headers, bool end_stream,",
          "439:                                               absl::string_view details) {",
          "441:   parent_.filter_manager_callbacks_.setResponseHeaders(std::move(headers));",
          "442:   parent_.encodeHeaders(nullptr, *parent_.filter_manager_callbacks_.responseHeaders(), end_stream);",
          "443: }",
          "",
          "[Removed Lines]",
          "440:   parent_.stream_info_.setResponseCodeDetails(details);",
          "",
          "[Added Lines]",
          "440:   parent_.streamInfo().setResponseCodeDetails(details);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "820:   return std::next(filter->entry());",
          "821: }",
          "824:   state_.under_on_local_reply_ = true;",
          "825:   filter_manager_callbacks_.onLocalReply(data.code_);",
          "",
          "[Removed Lines]",
          "823: void FilterManager::onLocalReply(StreamFilterBase::LocalReplyData& data) {",
          "",
          "[Added Lines]",
          "823: void DownstreamFilterManager::onLocalReply(StreamFilterBase::LocalReplyData& data) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "832:   state_.under_on_local_reply_ = false;",
          "833: }",
          "836:     Code code, absl::string_view body,",
          "837:     const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "838:     const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details) {",
          "",
          "[Removed Lines]",
          "835: void FilterManager::sendLocalReply(",
          "",
          "[Added Lines]",
          "835: void DownstreamFilterManager::sendLocalReply(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "851:     state_.encoder_filter_chain_aborted_ = true;",
          "852:   }",
          "855:   StreamFilterBase::LocalReplyData data{code, details, false};",
          "857:   if (data.reset_imminent_) {",
          "858:     ENVOY_STREAM_LOG(debug, \"Resetting stream due to {}. onLocalReply requested reset.\", *this,",
          "859:                      details);",
          "",
          "[Removed Lines]",
          "854:   stream_info_.setResponseCodeDetails(details);",
          "856:   FilterManager::onLocalReply(data);",
          "",
          "[Added Lines]",
          "854:   streamInfo().setResponseCodeDetails(details);",
          "856:   onLocalReply(data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "886:   }",
          "887: }",
          "890:     bool is_grpc_request, Code code, absl::string_view body,",
          "891:     const std::function<void(ResponseHeaderMap& headers)>& modify_headers, bool is_head_request,",
          "892:     const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details) {",
          "",
          "[Removed Lines]",
          "889: void FilterManager::sendLocalReplyViaFilterChain(",
          "",
          "[Added Lines]",
          "889: void DownstreamFilterManager::sendLocalReplyViaFilterChain(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "915:             local_reply_.rewrite(filter_manager_callbacks_.requestHeaders().ptr(), response_headers,",
          "917:           },",
          "918:           [this, modify_headers](ResponseHeaderMapPtr&& headers, bool end_stream) -> void {",
          "919:             filter_manager_callbacks_.setResponseHeaders(std::move(headers));",
          "",
          "[Removed Lines]",
          "916:                                  stream_info_, code, body, content_type);",
          "",
          "[Added Lines]",
          "916:                                  streamInfo(), code, body, content_type);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "930:       Utility::LocalReplyData{is_grpc_request, code, body, grpc_status, is_head_request});",
          "931: }",
          "934:     Code code, absl::string_view body,",
          "935:     const std::function<void(ResponseHeaderMap&)>& modify_headers, bool is_head_request,",
          "936:     const absl::optional<Grpc::Status::GrpcStatus> grpc_status) {",
          "",
          "[Removed Lines]",
          "933: void FilterManager::sendDirectLocalReply(",
          "",
          "[Added Lines]",
          "933: void DownstreamFilterManager::sendDirectLocalReply(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "950:           [&](ResponseHeaderMap& response_headers, Code& code, std::string& body,",
          "951:               absl::string_view& content_type) -> void {",
          "952:             local_reply_.rewrite(filter_manager_callbacks_.requestHeaders().ptr(), response_headers,",
          "954:           },",
          "955:           [&](ResponseHeaderMapPtr&& response_headers, bool end_stream) -> void {",
          "",
          "[Removed Lines]",
          "953:                                  stream_info_, code, body, content_type);",
          "",
          "[Added Lines]",
          "953:                                  streamInfo(), code, body, content_type);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1130:   if (!metadata_map_ptr->empty()) {",
          "1134:   }",
          "1135: }",
          "",
          "[Removed Lines]",
          "1131:     MetadataMapVector metadata_map_vector;",
          "1132:     metadata_map_vector.emplace_back(std::move(metadata_map_ptr));",
          "1133:     filter_manager_callbacks_.encodeMetadata(metadata_map_vector);",
          "",
          "[Added Lines]",
          "1131:     filter_manager_callbacks_.encodeMetadata(std::move(metadata_map_ptr));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1412:     return false;",
          "1413:   }",
          "1416:       StreamInfo::ResponseCodeDetails::get().InternalRedirect);",
          "1418:   if (headers != nullptr) {",
          "",
          "[Removed Lines]",
          "1415:   parent_.stream_info_.setResponseCodeDetails(",
          "",
          "[Added Lines]",
          "1413:   parent_.streamInfo().setResponseCodeDetails(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1427:     parent_.filter_manager_callbacks_.chargeStats(*headers);",
          "1428:   }",
          "1432:   return true;",
          "1433: }",
          "",
          "[Removed Lines]",
          "1430:   parent_.filter_manager_callbacks_.recreateStream(parent_.stream_info_.filter_state_);",
          "",
          "[Added Lines]",
          "1428:   parent_.filter_manager_callbacks_.recreateStream(parent_.streamInfo().filterState());",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: namespace Http {",
          "32: class FilterManager;",
          "34: struct ActiveStreamFilterBase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: class DownstreamFilterManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "357:   virtual void encodeMetadata(MetadataMapVector& metadata) PURE;",
          "",
          "[Added Lines]",
          "358:   virtual void encodeMetadata(MetadataMapPtr&& metadata) PURE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:   FilterManager(FilterManagerCallbacks& filter_manager_callbacks, Event::Dispatcher& dispatcher,",
          "613:                 const Network::Connection& connection, uint64_t stream_id,",
          "614:                 Buffer::BufferMemoryAccountSharedPtr account, bool proxy_100_continue,",
          "619:       : filter_manager_callbacks_(filter_manager_callbacks), dispatcher_(dispatcher),",
          "620:         connection_(connection), stream_id_(stream_id), account_(std::move(account)),",
          "621:         proxy_100_continue_(proxy_100_continue), buffer_limit_(buffer_limit),",
          "625:   ~FilterManager() override {",
          "626:     ASSERT(state_.destroyed_);",
          "627:     ASSERT(state_.filter_call_state_ == 0);",
          "",
          "[Removed Lines]",
          "615:                 uint32_t buffer_limit, FilterChainFactory& filter_chain_factory,",
          "616:                 const LocalReply::LocalReply& local_reply, Http::Protocol protocol,",
          "617:                 TimeSource& time_source, StreamInfo::FilterStateSharedPtr parent_filter_state,",
          "618:                 StreamInfo::FilterState::LifeSpan filter_state_life_span)",
          "622:         filter_chain_factory_(filter_chain_factory), local_reply_(local_reply),",
          "623:         stream_info_(protocol, time_source, connection.connectionInfoProviderSharedPtr(),",
          "624:                      parent_filter_state, filter_state_life_span) {}",
          "",
          "[Added Lines]",
          "616:                 uint32_t buffer_limit, FilterChainFactory& filter_chain_factory)",
          "620:         filter_chain_factory_(filter_chain_factory) {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "636:     DUMP_DETAILS(filter_manager_callbacks_.requestTrailers());",
          "637:     DUMP_DETAILS(filter_manager_callbacks_.responseHeaders());",
          "638:     DUMP_DETAILS(filter_manager_callbacks_.responseTrailers());",
          "640:   }",
          "642:   void addAccessLogHandler(AccessLog::InstanceSharedPtr handler) {",
          "",
          "[Removed Lines]",
          "639:     DUMP_DETAILS(&stream_info_);",
          "",
          "[Added Lines]",
          "635:     DUMP_DETAILS(&streamInfo());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "684:     }",
          "686:     for (const auto& log_handler : access_log_handlers_) {",
          "688:     }",
          "689:   }",
          "",
          "[Removed Lines]",
          "687:       log_handler->log(request_headers, response_headers, response_trailers, stream_info_);",
          "",
          "[Added Lines]",
          "683:       log_handler->log(request_headers, response_headers, response_trailers, streamInfo());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "755:   void maybeEndEncode(bool end_stream);",
          "786:   void setBufferLimit(uint32_t limit);",
          "",
          "[Removed Lines]",
          "761:   void onLocalReply(StreamFilterBase::LocalReplyData& data);",
          "763:   void sendLocalReply(Code code, absl::string_view body,",
          "764:                       const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "765:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "766:                       absl::string_view details);",
          "771:   void sendLocalReplyViaFilterChain(",
          "772:       bool is_grpc_request, Code code, absl::string_view body,",
          "773:       const std::function<void(ResponseHeaderMap& headers)>& modify_headers, bool is_head_request,",
          "774:       const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details);",
          "780:   void sendDirectLocalReply(Code code, absl::string_view body,",
          "781:                             const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "782:                             bool is_head_request,",
          "783:                             const absl::optional<Grpc::Status::GrpcStatus> grpc_status);",
          "",
          "[Added Lines]",
          "753:   virtual void sendLocalReply(Code code, absl::string_view body,",
          "754:                               const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "755:                               const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "756:                               absl::string_view details) PURE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "820:   bool remoteDecodeComplete() const {",
          "823:   }",
          "",
          "[Removed Lines]",
          "821:     return stream_info_.downstreamTiming() &&",
          "822:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "",
          "[Added Lines]",
          "794:     return streamInfo().downstreamTiming() &&",
          "795:            streamInfo().downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "831:     state_.created_filter_chain_ = true;",
          "832:   }",
          "843:   bool createFilterChain();",
          "",
          "[Removed Lines]",
          "835:   StreamInfo::StreamInfoImpl& streamInfo() { return stream_info_; }",
          "836:   const StreamInfo::StreamInfoImpl& streamInfo() const { return stream_info_; }",
          "837:   void setDownstreamRemoteAddress(",
          "838:       const Network::Address::InstanceConstSharedPtr& downstream_remote_address) {",
          "839:     stream_info_.setDownstreamRemoteAddress(downstream_remote_address);",
          "840:   }",
          "",
          "[Added Lines]",
          "807:   virtual StreamInfo::StreamInfo& streamInfo() PURE;",
          "808:   virtual const StreamInfo::StreamInfo& streamInfo() const PURE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "854:   void onDownstreamReset() { state_.saw_downstream_reset_ = true; }",
          "856: private:",
          "857:   class FilterChainFactoryCallbacksImpl : public Http::FilterChainFactoryCallbacks {",
          "858:   public:",
          "859:     FilterChainFactoryCallbacksImpl(FilterManager& manager, const Http::FilterContext& context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825:   friend class DownstreamFilterManager;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "977:   absl::optional<absl::string_view> upstream_override_host_;",
          "979:   FilterChainFactory& filter_chain_factory_;",
          "984:   friend ActiveStreamFilterBase;",
          "",
          "[Removed Lines]",
          "980:   const LocalReply::LocalReply& local_reply_;",
          "981:   OverridableRemoteConnectionInfoSetterStreamInfo stream_info_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1052:   State state_;",
          "1053: };",
          "1055: } // namespace Http",
          "1056: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025: class DownstreamFilterManager : public FilterManager {",
          "1026: public:",
          "1027:   DownstreamFilterManager(FilterManagerCallbacks& filter_manager_callbacks,",
          "1028:                           Event::Dispatcher& dispatcher, const Network::Connection& connection,",
          "1029:                           uint64_t stream_id, Buffer::BufferMemoryAccountSharedPtr account,",
          "1030:                           bool proxy_100_continue, uint32_t buffer_limit,",
          "1031:                           FilterChainFactory& filter_chain_factory,",
          "1032:                           const LocalReply::LocalReply& local_reply, Http::Protocol protocol,",
          "1033:                           TimeSource& time_source,",
          "1034:                           StreamInfo::FilterStateSharedPtr parent_filter_state,",
          "1035:                           StreamInfo::FilterState::LifeSpan filter_state_life_span)",
          "1036:       : FilterManager(filter_manager_callbacks, dispatcher, connection, stream_id, account,",
          "1037:                       proxy_100_continue, buffer_limit, filter_chain_factory),",
          "1038:         stream_info_(protocol, time_source, connection.connectionInfoProviderSharedPtr(),",
          "1039:                      parent_filter_state, filter_state_life_span),",
          "1040:         local_reply_(local_reply) {}",
          "1043:   StreamInfo::StreamInfoImpl& streamInfo() override { return stream_info_; }",
          "1044:   const StreamInfo::StreamInfoImpl& streamInfo() const override { return stream_info_; }",
          "1046:   void setDownstreamRemoteAddress(",
          "1047:       const Network::Address::InstanceConstSharedPtr& downstream_remote_address) {",
          "1048:     stream_info_.setDownstreamRemoteAddress(downstream_remote_address);",
          "1049:   }",
          "1055:   void onLocalReply(StreamFilterBase::LocalReplyData& data);",
          "1057:   void sendLocalReply(Code code, absl::string_view body,",
          "1058:                       const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "1059:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "1060:                       absl::string_view details) override;",
          "1065:   void sendLocalReplyViaFilterChain(",
          "1066:       bool is_grpc_request, Code code, absl::string_view body,",
          "1067:       const std::function<void(ResponseHeaderMap& headers)>& modify_headers, bool is_head_request,",
          "1068:       const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details);",
          "1074:   void sendDirectLocalReply(Code code, absl::string_view body,",
          "1075:                             const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "1076:                             bool is_head_request,",
          "1077:                             const absl::optional<Grpc::Status::GrpcStatus> grpc_status);",
          "1079: private:",
          "1080:   OverridableRemoteConnectionInfoSetterStreamInfo stream_info_;",
          "1081:   const LocalReply::LocalReply& local_reply_;",
          "1082: };",
          "",
          "---------------"
        ],
        "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
          "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:   void setTraceReason(Tracing::Reason reason) override { trace_reason_ = reason; }",
          "261:   Tracing::Reason traceReason() const override { return trace_reason_; }",
          "264:     const char* spaces = spacesForLevel(indent_level);",
          "265:     os << spaces << \"StreamInfoImpl \" << this << DUMP_OPTIONAL_MEMBER(protocol_)",
          "266:        << DUMP_OPTIONAL_MEMBER(response_code_) << DUMP_OPTIONAL_MEMBER(response_code_details_)",
          "",
          "[Removed Lines]",
          "263:   void dumpState(std::ostream& os, int indent_level = 0) const {",
          "",
          "[Added Lines]",
          "263:   void dumpState(std::ostream& os, int indent_level = 0) const override {",
          "",
          "---------------"
        ],
        "test/common/http/filter_manager_test.cc||test/common/http/filter_manager_test.cc": [
          "File: test/common/http/filter_manager_test.cc -> test/common/http/filter_manager_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: class FilterManagerTest : public testing::Test {",
          "28: public:",
          "29:   void initialize() {",
          "31:         filter_manager_callbacks_, dispatcher_, connection_, 0, nullptr, true, 10000,",
          "32:         filter_factory_, local_reply_, protocol_, time_source_, filter_state_,",
          "33:         StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "[Removed Lines]",
          "30:     filter_manager_ = std::make_unique<FilterManager>(",
          "",
          "[Added Lines]",
          "30:     filter_manager_ = std::make_unique<DownstreamFilterManager>(",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.h||test/mocks/http/mocks.h": [
          "File: test/mocks/http/mocks.h -> test/mocks/http/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   MOCK_METHOD(void, encode1xxHeaders, (ResponseHeaderMap&));",
          "63:   MOCK_METHOD(void, encodeData, (Buffer::Instance&, bool));",
          "64:   MOCK_METHOD(void, encodeTrailers, (ResponseTrailerMap&));",
          "66:   MOCK_METHOD(void, chargeStats, (const ResponseHeaderMap&));",
          "67:   MOCK_METHOD(void, setRequestTrailers, (RequestTrailerMapPtr &&));",
          "68:   MOCK_METHOD(void, setInformationalHeaders_, (ResponseHeaderMap&));",
          "",
          "[Removed Lines]",
          "65:   MOCK_METHOD(void, encodeMetadata, (MetadataMapVector&));",
          "",
          "[Added Lines]",
          "65:   MOCK_METHOD(void, encodeMetadata, (MetadataMapPtr &&));",
          "",
          "---------------"
        ],
        "test/mocks/stream_info/mocks.h||test/mocks/stream_info/mocks.h": [
          "File: test/mocks/stream_info/mocks.h -> test/mocks/stream_info/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   MOCK_METHOD(const BytesMeterSharedPtr&, getDownstreamBytesMeter, (), (const));",
          "131:   MOCK_METHOD(void, setUpstreamBytesMeter, (const BytesMeterSharedPtr&));",
          "132:   MOCK_METHOD(void, setDownstreamBytesMeter, (const BytesMeterSharedPtr&));",
          "133:   Envoy::Event::SimulatedTimeSystem ts_;",
          "134:   SystemTime start_time_;",
          "135:   MonotonicTime start_time_monotonic_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:   MOCK_METHOD(void, dumpState, (std::ostream & os, int indent_level), (const));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b361fb673c55d7622b666445365948abbe233a33",
      "candidate_info": {
        "commit_hash": "b361fb673c55d7622b666445365948abbe233a33",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/b361fb673c55d7622b666445365948abbe233a33",
        "files": [
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "test/common/http/filter_manager_test.cc",
          "test/integration/BUILD",
          "test/integration/filters/BUILD",
          "test/integration/filters/add_body_filter.cc",
          "test/integration/filters/add_body_filter.proto",
          "test/integration/filters/crash_filter.cc",
          "test/integration/filters/crash_filter.proto",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "Abort filter chain iteration on local reply\n\nFixes CVE-2021-32781\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>\nSigned-off-by: Lizan Zhou <lizan@tetrate.io>",
        "before_after_code_files": [
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "test/common/http/filter_manager_test.cc||test/common/http/filter_manager_test.cc",
          "test/integration/filters/add_body_filter.cc||test/integration/filters/add_body_filter.cc",
          "test/integration/filters/add_body_filter.proto||test/integration/filters/add_body_filter.proto",
          "test/integration/filters/crash_filter.cc||test/integration/filters/crash_filter.cc",
          "test/integration/filters/crash_filter.proto||test/integration/filters/crash_filter.proto",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     state_.filter_call_state_ |= FilterCallState::DecodeHeaders;",
          "532:     (*entry)->end_stream_ = (end_stream && continue_data_entry == decoder_filters_.end());",
          "533:     FilterHeadersStatus status = (*entry)->decodeHeaders(headers, (*entry)->end_stream_);",
          "535:     ASSERT(!(status == FilterHeadersStatus::ContinueAndDontEndStream && !(*entry)->end_stream_),",
          "536:            \"Filters should not return FilterHeadersStatus::ContinueAndDontEndStream from \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:     if (state_.decoder_filter_chain_aborted_) {",
          "535:       ENVOY_STREAM_LOG(trace,",
          "536:                        \"decodeHeaders filter iteration aborted due to local reply: filter={}\",",
          "538:       status = FilterHeadersStatus::StopIteration;",
          "539:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "674:     }",
          "675:     ENVOY_STREAM_LOG(trace, \"decode data called: filter={} status={}\", *this,",
          "676:                      static_cast<const void*>((*entry).get()), static_cast<uint64_t>(status));",
          "678:     processNewlyAddedMetadata();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:     if (state_.decoder_filter_chain_aborted_) {",
          "684:       ENVOY_STREAM_LOG(trace, \"decodeData filter iteration aborted due to local reply: filter={}\",",
          "686:       return;",
          "687:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:     state_.filter_call_state_ &= ~FilterCallState::DecodeTrailers;",
          "765:     ENVOY_STREAM_LOG(trace, \"decode trailers called: filter={} status={}\", *this,",
          "766:                      static_cast<const void*>((*entry).get()), static_cast<uint64_t>(status));",
          "768:     processNewlyAddedMetadata();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:     if (state_.decoder_filter_chain_aborted_) {",
          "779:       ENVOY_STREAM_LOG(trace,",
          "780:                        \"decodeTrailers filter iteration aborted due to local reply: filter={}\",",
          "782:       status = FilterTrailersStatus::StopIteration;",
          "783:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "866:   const bool is_head_request = state_.is_head_request_;",
          "867:   const bool is_grpc_request = state_.is_grpc_request_;",
          "869:   stream_info_.setResponseCodeDetails(details);",
          "871:   StreamFilterBase::LocalReplyData data{code, details, false};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:   if (state_.filter_call_state_ & (FilterCallState::DecodeHeaders | FilterCallState::DecodeData |",
          "889:                                    FilterCallState::DecodeTrailers)) {",
          "890:     state_.decoder_filter_chain_aborted_ = true;",
          "891:   } else if (state_.filter_call_state_ &",
          "892:              (FilterCallState::EncodeHeaders | FilterCallState::EncodeData |",
          "893:               FilterCallState::EncodeTrailers)) {",
          "894:     state_.encoder_filter_chain_aborted_ = true;",
          "895:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1058:     state_.filter_call_state_ |= FilterCallState::EncodeHeaders;",
          "1059:     (*entry)->end_stream_ = (end_stream && continue_data_entry == encoder_filters_.end());",
          "1060:     FilterHeadersStatus status = (*entry)->handle_->encodeHeaders(headers, (*entry)->end_stream_);",
          "1062:     ASSERT(!(status == FilterHeadersStatus::ContinueAndDontEndStream && !(*entry)->end_stream_),",
          "1063:            \"Filters should not return FilterHeadersStatus::ContinueAndDontEndStream from \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1089:     if (state_.encoder_filter_chain_aborted_) {",
          "1090:       ENVOY_STREAM_LOG(trace,",
          "1091:                        \"encodeHeaders filter iteration aborted due to local reply: filter={}\",",
          "1093:       status = FilterHeadersStatus::StopIteration;",
          "1094:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221:     (*entry)->end_stream_ = end_stream && !filter_manager_callbacks_.responseTrailers();",
          "1222:     FilterDataStatus status = (*entry)->handle_->encodeData(data, (*entry)->end_stream_);",
          "1223:     if ((*entry)->end_stream_) {",
          "1224:       (*entry)->handle_->encodeComplete();",
          "1225:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1257:     if (state_.encoder_filter_chain_aborted_) {",
          "1258:       ENVOY_STREAM_LOG(trace, \"encodeData filter iteration aborted due to local reply: filter={}\",",
          "1260:       status = FilterDataStatus::StopIterationNoBuffer;",
          "1261:     }",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1060:     State()",
          "1061:         : remote_complete_(false), local_complete_(false), has_continue_headers_(false),",
          "1062:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1065:     uint32_t filter_call_state_{0};",
          "",
          "[Removed Lines]",
          "1063:           non_100_response_headers_encoded_(false), under_on_local_reply_(false) {}",
          "",
          "[Added Lines]",
          "1063:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "1064:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     bool non_100_response_headers_encoded_ : 1;",
          "1082:     bool under_on_local_reply_ : 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:     bool decoder_filter_chain_aborted_ : 1;",
          "1086:     bool encoder_filter_chain_aborted_ : 1;",
          "",
          "---------------"
        ],
        "test/common/http/filter_manager_test.cc||test/common/http/filter_manager_test.cc": [
          "File: test/common/http/filter_manager_test.cc -> test/common/http/filter_manager_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     EXPECT_CALL(*decoder_filter, onLocalReply(_));",
          "537:     EXPECT_CALL(*stream_filter, onLocalReply(_));",
          "538:     EXPECT_CALL(*encoder_filter, onLocalReply(_));",
          "541:     decoder_filter->callbacks_->sendLocalReply(Code::InternalServerError, \"body\", nullptr,",
          "542:                                                absl::nullopt, \"details\");",
          "",
          "[Removed Lines]",
          "539:     EXPECT_CALL(dispatcher_, trackedObjectStackIsEmpty());",
          "",
          "[Added Lines]",
          "541:     EXPECT_CALL(dispatcher_, trackedObjectStackIsEmpty()).Times(0);",
          "",
          "---------------"
        ],
        "test/integration/filters/add_body_filter.cc||test/integration/filters/add_body_filter.cc": [
          "File: test/integration/filters/add_body_filter.cc -> test/integration/filters/add_body_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"envoy/server/filter_config.h\"",
          "7: #include \"source/common/buffer/buffer_impl.h\"",
          "8: #include \"source/extensions/filters/http/common/pass_through_filter.h\"",
          "11: #include \"test/integration/filters/common.h\"",
          "13: namespace Envoy {",
          "16: class AddBodyStreamFilter : public Http::PassThroughFilter {",
          "17: public:",
          "20:   Http::FilterHeadersStatus decodeHeaders(Http::RequestHeaderMap& headers,",
          "21:                                           bool end_stream) override {",
          "24:       headers.setContentLength(body.length());",
          "25:       decoder_callbacks_->addDecodedData(body, false);",
          "28:     }",
          "30:     return Http::FilterHeadersStatus::Continue;",
          "",
          "[Removed Lines]",
          "10: #include \"test/extensions/filters/http/common/empty_http_filter_config.h\"",
          "18:   constexpr static char name[] = \"add-body-filter\";",
          "22:     if (end_stream) {",
          "23:       Buffer::OwnedImpl body(\"body\");",
          "26:     } else {",
          "27:       headers.removeContentLength();",
          "",
          "[Added Lines]",
          "8: #include \"source/extensions/filters/http/common/factory_base.h\"",
          "11: #include \"test/integration/filters/add_body_filter.pb.h\"",
          "12: #include \"test/integration/filters/add_body_filter.pb.validate.h\"",
          "17: class AddBodyFilterConfig {",
          "18: public:",
          "19:   AddBodyFilterConfig(",
          "20:       test::integration::filters::AddBodyFilterConfig::FilterCallback where_to_add_body,",
          "21:       uint32_t body_size,",
          "22:       test::integration::filters::AddBodyFilterConfig::FilterCallback where_to_stop_and_buffer)",
          "23:       : where_to_add_body_(where_to_add_body), body_size_(body_size),",
          "24:         where_to_stop_and_buffer_(where_to_stop_and_buffer) {}",
          "26:   const test::integration::filters::AddBodyFilterConfig::FilterCallback where_to_add_body_;",
          "27:   const uint32_t body_size_;",
          "28:   const test::integration::filters::AddBodyFilterConfig::FilterCallback where_to_stop_and_buffer_;",
          "29: };",
          "34:   AddBodyStreamFilter(std::shared_ptr<AddBodyFilterConfig> config) : config_(config) {}",
          "38:     if (config_->where_to_add_body_ == test::integration::filters::AddBodyFilterConfig::DEFAULT) {",
          "39:       if (end_stream) {",
          "40:         Buffer::OwnedImpl body(\"body\");",
          "41:         headers.setContentLength(body.length());",
          "42:         decoder_callbacks_->addDecodedData(body, false);",
          "43:       } else {",
          "44:         headers.removeContentLength();",
          "45:       }",
          "46:     } else if (config_->where_to_add_body_ ==",
          "47:                test::integration::filters::AddBodyFilterConfig::DECODE_HEADERS) {",
          "48:       Buffer::OwnedImpl body(std::string(config_->body_size_, 'a'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     }",
          "42:   }",
          "44:   Http::FilterDataStatus encodeData(Buffer::Instance& data, bool end_stream) override {",
          "51:   }",
          "53:   Http::FilterHeadersStatus encodeHeaders(Http::ResponseHeaderMap& headers,",
          "54:                                           bool end_stream) override {",
          "57:       headers.setContentLength(body.length());",
          "58:       encoder_callbacks_->addEncodedData(body, false);",
          "59:     }",
          "61:     return Http::FilterHeadersStatus::Continue;",
          "62:   }",
          "63: };",
          "70: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "37:     if (end_stream && decoder_callbacks_->connection()->streamInfo().protocol() &&",
          "38:         data.length() == 0u) {",
          "39:       data.add(\"body\");",
          "41:     return Http::FilterDataStatus::Continue;",
          "48:     ASSERT(!end_stream || decoder_callbacks_->connection()->streamInfo().protocol());",
          "49:     data.add(\"body\");",
          "50:     return Http::FilterDataStatus::Continue;",
          "55:     if (end_stream) {",
          "56:       Buffer::OwnedImpl body(\"body\");",
          "65: constexpr char AddBodyStreamFilter::name[];",
          "67: static Registry::RegisterFactory<SimpleFilterConfig<AddBodyStreamFilter>,",
          "68:                                  Server::Configuration::NamedHttpFilterConfigFactory>",
          "69:     encoder_register_;",
          "",
          "[Added Lines]",
          "60:     if (config_->where_to_add_body_ == test::integration::filters::AddBodyFilterConfig::DEFAULT) {",
          "61:       if (end_stream && decoder_callbacks_->connection()->streamInfo().protocol() &&",
          "62:           data.length() == 0u) {",
          "63:         data.add(\"body\");",
          "64:       }",
          "65:     } else if (config_->where_to_add_body_ ==",
          "66:                test::integration::filters::AddBodyFilterConfig::DECODE_DATA) {",
          "67:       data.add(std::string(config_->body_size_, 'a'));",
          "68:     }",
          "70:     return config_->where_to_stop_and_buffer_ ==",
          "71:                    test::integration::filters::AddBodyFilterConfig::DECODE_DATA",
          "72:                ? Http::FilterDataStatus::StopIterationAndBuffer",
          "73:                : Http::FilterDataStatus::Continue;",
          "74:   }",
          "76:   Http::FilterTrailersStatus decodeTrailers(Http::RequestTrailerMap&) override {",
          "77:     if (config_->where_to_add_body_ ==",
          "78:         test::integration::filters::AddBodyFilterConfig::DECODE_TRAILERS) {",
          "79:       Buffer::OwnedImpl body(std::string(config_->body_size_, 'a'));",
          "80:       decoder_callbacks_->addDecodedData(body, false);",
          "82:     return Http::FilterTrailersStatus::Continue;",
          "89:     if (config_->where_to_add_body_ == test::integration::filters::AddBodyFilterConfig::DEFAULT) {",
          "90:       if (end_stream && decoder_callbacks_->connection()->streamInfo().protocol() &&",
          "91:           data.length() == 0) {",
          "92:         data.add(\"body\");",
          "93:       }",
          "94:     } else if (config_->where_to_add_body_ ==",
          "95:                test::integration::filters::AddBodyFilterConfig::ENCODE_DATA) {",
          "96:       data.add(std::string(config_->body_size_, 'a'));",
          "97:     }",
          "99:     return config_->where_to_stop_and_buffer_ ==",
          "100:                    test::integration::filters::AddBodyFilterConfig::ENCODE_DATA",
          "101:                ? Http::FilterDataStatus::StopIterationAndBuffer",
          "102:                : Http::FilterDataStatus::Continue;",
          "107:     if (config_->where_to_add_body_ == test::integration::filters::AddBodyFilterConfig::DEFAULT) {",
          "108:       if (end_stream) {",
          "109:         Buffer::OwnedImpl body(\"body\");",
          "110:         headers.setContentLength(body.length());",
          "111:         encoder_callbacks_->addEncodedData(body, false);",
          "112:       }",
          "113:     } else if (config_->where_to_add_body_ ==",
          "114:                test::integration::filters::AddBodyFilterConfig::ENCODE_HEADERS) {",
          "115:       Buffer::OwnedImpl body(std::string(config_->body_size_, 'a'));",
          "123: private:",
          "124:   const std::shared_ptr<AddBodyFilterConfig> config_;",
          "127: class AddBodyFilterFactory : public Extensions::HttpFilters::Common::FactoryBase<",
          "128:                                  test::integration::filters::AddBodyFilterConfig> {",
          "129: public:",
          "130:   AddBodyFilterFactory() : FactoryBase(\"add-body-filter\") {}",
          "132: private:",
          "133:   Http::FilterFactoryCb createFilterFactoryFromProtoTyped(",
          "134:       const test::integration::filters::AddBodyFilterConfig& proto_config, const std::string&,",
          "135:       Server::Configuration::FactoryContext&) override {",
          "136:     auto filter_config = std::make_shared<AddBodyFilterConfig>(",
          "137:         proto_config.where_to_add_body(), proto_config.body_size(),",
          "138:         proto_config.where_to_stop_and_buffer());",
          "139:     return [filter_config](Http::FilterChainFactoryCallbacks& callbacks) -> void {",
          "140:       callbacks.addStreamFilter(std::make_shared<AddBodyStreamFilter>(filter_config));",
          "141:     };",
          "142:   }",
          "143: };",
          "145: REGISTER_FACTORY(AddBodyFilterFactory, Server::Configuration::NamedHttpFilterConfigFactory);",
          "",
          "---------------"
        ],
        "test/integration/filters/add_body_filter.proto||test/integration/filters/add_body_filter.proto": [
          "File: test/integration/filters/add_body_filter.proto -> test/integration/filters/add_body_filter.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: syntax = \"proto3\";",
          "3: package test.integration.filters;",
          "5: import \"validate/validate.proto\";",
          "7: message AddBodyFilterConfig {",
          "8:   enum FilterCallback {",
          "9:     DEFAULT = 0;",
          "10:     DECODE_HEADERS = 1;",
          "11:     DECODE_DATA = 2;",
          "12:     DECODE_TRAILERS = 3;",
          "13:     ENCODE_HEADERS = 4;",
          "14:     ENCODE_DATA = 5;",
          "15:   }",
          "17:   FilterCallback where_to_add_body = 1;",
          "18:   uint32 body_size = 2;",
          "19:   FilterCallback where_to_stop_and_buffer = 3;",
          "20: }",
          "",
          "---------------"
        ],
        "test/integration/filters/crash_filter.cc||test/integration/filters/crash_filter.cc": [
          "File: test/integration/filters/crash_filter.cc -> test/integration/filters/crash_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <string>",
          "3: #include \"envoy/http/filter.h\"",
          "4: #include \"envoy/registry/registry.h\"",
          "5: #include \"envoy/server/filter_config.h\"",
          "7: #include \"source/common/buffer/buffer_impl.h\"",
          "8: #include \"source/extensions/filters/http/common/factory_base.h\"",
          "9: #include \"source/extensions/filters/http/common/pass_through_filter.h\"",
          "11: #include \"test/integration/filters/common.h\"",
          "12: #include \"test/integration/filters/crash_filter.pb.h\"",
          "13: #include \"test/integration/filters/crash_filter.pb.validate.h\"",
          "15: namespace Envoy {",
          "17: class CrashFilterConfig {",
          "18: public:",
          "19:   CrashFilterConfig(bool crash_in_encode_headers, bool crash_in_encode_data,",
          "20:                     bool crash_in_decode_headers, bool crash_in_decode_data,",
          "21:                     bool crash_in_decode_trailers)",
          "22:       : crash_in_encode_headers_(crash_in_encode_headers),",
          "23:         crash_in_encode_data_(crash_in_encode_data),",
          "24:         crash_in_decode_headers_(crash_in_decode_headers),",
          "25:         crash_in_decode_data_(crash_in_decode_data),",
          "26:         crash_in_decode_trailers_(crash_in_decode_trailers) {}",
          "28:   const bool crash_in_encode_headers_;",
          "29:   const bool crash_in_encode_data_;",
          "31:   const bool crash_in_decode_headers_;",
          "32:   const bool crash_in_decode_data_;",
          "33:   const bool crash_in_decode_trailers_;",
          "34: };",
          "37: class CrashFilter : public Http::PassThroughFilter {",
          "38: public:",
          "39:   CrashFilter(std::shared_ptr<CrashFilterConfig> config) : config_(config) {}",
          "41:   Http::FilterHeadersStatus decodeHeaders(Http::RequestHeaderMap&, bool) override {",
          "42:     RELEASE_ASSERT(!config_->crash_in_decode_headers_, \"Crash in decodeTrailers\");",
          "43:     return Http::FilterHeadersStatus::Continue;",
          "44:   }",
          "46:   Http::FilterDataStatus decodeData(Buffer::Instance&, bool) override {",
          "47:     RELEASE_ASSERT(!config_->crash_in_decode_data_, \"Crash in decodeData\");",
          "48:     return Http::FilterDataStatus::Continue;",
          "49:   }",
          "51:   Http::FilterTrailersStatus decodeTrailers(Http::RequestTrailerMap&) override {",
          "52:     RELEASE_ASSERT(!config_->crash_in_decode_trailers_, \"Crash in decodeTrailers\");",
          "53:     return Http::FilterTrailersStatus::Continue;",
          "54:   }",
          "56:   Http::FilterDataStatus encodeData(Buffer::Instance&, bool) override {",
          "57:     RELEASE_ASSERT(!config_->crash_in_encode_data_, \"Crash in encodeData\");",
          "58:     return Http::FilterDataStatus::Continue;",
          "59:   }",
          "61:   Http::FilterHeadersStatus encodeHeaders(Http::ResponseHeaderMap&, bool) override {",
          "62:     RELEASE_ASSERT(!config_->crash_in_encode_headers_, \"Crash in encodeHeaders\");",
          "63:     return Http::FilterHeadersStatus::Continue;",
          "64:   }",
          "66: private:",
          "67:   const std::shared_ptr<CrashFilterConfig> config_;",
          "68: };",
          "70: class CrashFilterFactory : public Extensions::HttpFilters::Common::FactoryBase<",
          "71:                                test::integration::filters::CrashFilterConfig> {",
          "72: public:",
          "73:   CrashFilterFactory() : FactoryBase(\"crash-filter\") {}",
          "75: private:",
          "76:   Http::FilterFactoryCb createFilterFactoryFromProtoTyped(",
          "77:       const test::integration::filters::CrashFilterConfig& proto_config, const std::string&,",
          "78:       Server::Configuration::FactoryContext&) override {",
          "79:     auto filter_config = std::make_shared<CrashFilterConfig>(",
          "80:         proto_config.crash_in_encode_headers(), proto_config.crash_in_encode_data(),",
          "81:         proto_config.crash_in_decode_headers(), proto_config.crash_in_decode_data(),",
          "82:         proto_config.crash_in_decode_trailers());",
          "83:     return [filter_config](Http::FilterChainFactoryCallbacks& callbacks) -> void {",
          "84:       callbacks.addStreamFilter(std::make_shared<CrashFilter>(filter_config));",
          "85:     };",
          "86:   }",
          "87: };",
          "89: REGISTER_FACTORY(CrashFilterFactory, Server::Configuration::NamedHttpFilterConfigFactory);",
          "90: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/integration/filters/crash_filter.proto||test/integration/filters/crash_filter.proto": [
          "File: test/integration/filters/crash_filter.proto -> test/integration/filters/crash_filter.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: syntax = \"proto3\";",
          "3: package test.integration.filters;",
          "5: import \"validate/validate.proto\";",
          "7: message CrashFilterConfig {",
          "8:   bool crash_in_encode_headers = 1;",
          "9:   bool crash_in_encode_data = 2;",
          "11:   bool crash_in_decode_headers = 3;",
          "12:   bool crash_in_decode_data = 4;",
          "13:   bool crash_in_decode_trailers = 5;",
          "14: }",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:   EXPECT_EQ(response->body(), \"body\");",
          "288: }",
          "315: TEST_P(ProtocolIntegrationTest, AddEncodedTrailers) {",
          "316:   config_helper_.addFilter(R\"EOF(",
          "317: name: add-trailers-filter",
          "",
          "[Removed Lines]",
          "292: TEST_P(DownstreamProtocolIntegrationTest, ContinueAfterLocalReply) {",
          "293:   config_helper_.addFilter(R\"EOF(",
          "294:   name: continue-after-local-reply-filter",
          "295:   typed_config:",
          "296:     \"@type\": type.googleapis.com/google.protobuf.Empty",
          "297:   )EOF\");",
          "298:   initialize();",
          "300:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "303:   IntegrationStreamDecoderPtr response;",
          "304:   EXPECT_ENVOY_BUG(",
          "305:       {",
          "306:         response = codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "307:         ASSERT_TRUE(response->waitForEndStream());",
          "308:         EXPECT_TRUE(response->complete());",
          "309:         EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "310:       },",
          "311:       \"envoy bug failure: !continue_iteration || !state_.local_complete_. \"",
          "312:       \"Details: Filter did not return StopAll or StopIteration after sending a local reply.\");",
          "313: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2752:   test_server_->waitUntilHistogramHasSamples(\"cluster.cluster_0.upstream_rs_headers_size\");",
          "2753: }",
          "2755: TEST_P(ProtocolIntegrationTest, ResetLargeResponseUponReceivingHeaders) {",
          "2756:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "2757:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2732: TEST_P(ProtocolIntegrationTest, OverflowEncoderBufferFromEncodeHeaders) {",
          "2733:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2734:   config_helper_.addFilter(R\"EOF(",
          "2735:   name: add-body-filter",
          "2736:   typed_config:",
          "2737:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "2738:       where_to_add_body: ENCODE_HEADERS",
          "2739:       body_size: 70000",
          "2740:   )EOF\");",
          "2741:   config_helper_.addFilter(R\"EOF(",
          "2742:   name: crash-filter",
          "2743:   typed_config:",
          "2744:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2745:       crash_in_encode_headers: false",
          "2746:       crash_in_encode_data: false",
          "2747:   )EOF\");",
          "2748:   initialize();",
          "2749:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2751:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "2752:   auto response = sendRequestAndWaitForResponse(default_request_headers_, 0, response_headers, 10,",
          "2753:                                                 0, TestUtility::DefaultTimeout);",
          "2754:   ASSERT_TRUE(response->waitForEndStream());",
          "2755:   EXPECT_TRUE(response->complete());",
          "2756:   EXPECT_EQ(\"500\", response->headers().getStatusValue());",
          "2757: }",
          "2762: TEST_P(ProtocolIntegrationTest, OverflowEncoderBufferFromEncodeDataWithResponseHeadersUnsent) {",
          "2763:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2766:   config_helper_.addFilter(R\"EOF(",
          "2767:   name: encoder-decoder-buffer-filter",
          "2768:   )EOF\");",
          "2769:   config_helper_.addFilter(R\"EOF(",
          "2770:   name: crash-filter",
          "2771:   typed_config:",
          "2772:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2773:       crash_in_encode_headers: true",
          "2774:       crash_in_encode_data: true",
          "2775:   )EOF\");",
          "2776:   initialize();",
          "2777:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2779:   IntegrationStreamDecoderPtr response =",
          "2780:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "2781:   waitForNextUpstreamRequest(0);",
          "2782:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "2783:   upstream_request_->encodeHeaders(response_headers, false);",
          "2785:   upstream_request_->encodeData(16 * 1024, false);",
          "2786:   upstream_request_->encodeData(64 * 1024, false);",
          "2787:   ASSERT_TRUE(response->waitForEndStream());",
          "2788:   EXPECT_TRUE(response->complete());",
          "2789:   EXPECT_EQ(\"500\", response->headers().getStatusValue());",
          "2790: }",
          "2795: TEST_P(ProtocolIntegrationTest, OverflowEncoderBufferFromEncodeData) {",
          "2796:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2798:   config_helper_.addFilter(R\"EOF(",
          "2799:   name: add-body-filter",
          "2800:   typed_config:",
          "2801:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "2802:       where_to_add_body: ENCODE_DATA",
          "2803:       where_to_stop_and_buffer: ENCODE_DATA",
          "2804:       body_size: 16384",
          "2805:   )EOF\");",
          "2806:   config_helper_.addFilter(R\"EOF(",
          "2807:   name: crash-filter",
          "2808:   typed_config:",
          "2809:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2810:       crash_in_encode_headers: false",
          "2811:       crash_in_encode_data: true",
          "2812:   )EOF\");",
          "2813:   initialize();",
          "2814:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2816:   IntegrationStreamDecoderPtr response =",
          "2817:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "2818:   waitForNextUpstreamRequest(0);",
          "2819:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "2820:   upstream_request_->encodeHeaders(response_headers, false);",
          "2822:   upstream_request_->encodeData(16 * 1024, false);",
          "2823:   upstream_request_->encodeData(64 * 1024, false);",
          "2824:   ASSERT_TRUE(response->waitForReset());",
          "2825:   EXPECT_FALSE(response->complete());",
          "2826:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "2827: }",
          "2831: TEST_P(DownstreamProtocolIntegrationTest, OverflowDecoderBufferFromDecodeHeaders) {",
          "2832:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2833:   config_helper_.addFilter(R\"EOF(",
          "2834:   name: crash-filter",
          "2835:   typed_config:",
          "2836:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2837:       crash_in_decode_headers: true",
          "2838:   )EOF\");",
          "2839:   config_helper_.addFilter(R\"EOF(",
          "2840:   name: add-body-filter",
          "2841:   typed_config:",
          "2842:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "2843:       where_to_add_body: DECODE_HEADERS",
          "2844:       body_size: 70000",
          "2845:   )EOF\");",
          "2846:   initialize();",
          "2847:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2849:   auto response = codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "2850:   ASSERT_TRUE(response->waitForEndStream());",
          "2851:   EXPECT_TRUE(response->complete());",
          "2852:   EXPECT_EQ(\"413\", response->headers().getStatusValue());",
          "2853: }",
          "2857: TEST_P(DownstreamProtocolIntegrationTest, OverflowDecoderBufferFromDecodeData) {",
          "2858:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2859:   config_helper_.addFilter(R\"EOF(",
          "2860:   name: crash-filter",
          "2861:   typed_config:",
          "2862:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2863:       crash_in_decode_headers: true",
          "2864:       crash_in_decode_data: true",
          "2865:   )EOF\");",
          "2867:   config_helper_.addFilter(R\"EOF(",
          "2868:   name: encoder-decoder-buffer-filter",
          "2869:   )EOF\");",
          "2870:   initialize();",
          "2871:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2872:   auto encoder_decoder =",
          "2873:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "2874:                                                                  {\":scheme\", \"http\"},",
          "2875:                                                                  {\":path\", \"/test/long/url\"},",
          "2876:                                                                  {\":authority\", \"host\"}});",
          "2877:   auto request_encoder = &encoder_decoder.first;",
          "2878:   auto response = std::move(encoder_decoder.second);",
          "2881:   codec_client_->sendData(*request_encoder, 16 * 1024, false);",
          "2882:   codec_client_->sendData(*request_encoder, 64 * 1024, false);",
          "2884:   ASSERT_TRUE(response->waitForEndStream());",
          "2885:   EXPECT_TRUE(response->complete());",
          "2886:   EXPECT_EQ(\"413\", response->headers().getStatusValue());",
          "2887: }",
          "2893: TEST_P(DownstreamProtocolIntegrationTest, OverflowDecoderBufferFromDecodeDataContinueIteration) {",
          "2894:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2895:   config_helper_.addFilter(R\"EOF(",
          "2896:   name: crash-filter",
          "2897:   typed_config:",
          "2898:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2899:       crash_in_decode_headers: false",
          "2900:       crash_in_decode_data: true",
          "2901:   )EOF\");",
          "2902:   config_helper_.addFilter(R\"EOF(",
          "2903:   name: add-body-filter",
          "2904:   typed_config:",
          "2905:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "2906:       where_to_add_body: DECODE_DATA",
          "2907:       body_size: 70000",
          "2908:   )EOF\");",
          "2909:   config_helper_.addFilter(R\"EOF(",
          "2910:   name: encoder-decoder-buffer-filter",
          "2911:   )EOF\");",
          "2912:   initialize();",
          "2913:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2914:   auto encoder_decoder =",
          "2915:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "2916:                                                                  {\":scheme\", \"http\"},",
          "2917:                                                                  {\":path\", \"/test/long/url\"},",
          "2918:                                                                  {\":authority\", \"host\"}});",
          "2919:   auto request_encoder = &encoder_decoder.first;",
          "2920:   auto response = std::move(encoder_decoder.second);",
          "2923:   codec_client_->sendData(*request_encoder, 16 * 1024, false);",
          "2926:   codec_client_->sendData(*request_encoder, 16 * 1024, true);",
          "2928:   ASSERT_TRUE(response->waitForEndStream());",
          "2929:   EXPECT_TRUE(response->complete());",
          "2930:   EXPECT_EQ(\"413\", response->headers().getStatusValue());",
          "2931: }",
          "2935: TEST_P(DownstreamProtocolIntegrationTest,",
          "2936:        OverflowDecoderBufferFromDecodeTrailersWithContinuedIteration) {",
          "2937:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "2938:     return;",
          "2939:   }",
          "2940:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2941:   config_helper_.addFilter(R\"EOF(",
          "2942:   name: add-body-filter",
          "2943:   typed_config:",
          "2944:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "2945:       where_to_add_body: DECODE_TRAILERS",
          "2946:       body_size: 70000",
          "2947:   )EOF\");",
          "2948:   initialize();",
          "2949:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2950:   auto encoder_decoder =",
          "2951:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "2952:                                                                  {\":scheme\", \"http\"},",
          "2953:                                                                  {\":path\", \"/test/long/url\"},",
          "2954:                                                                  {\":authority\", \"host\"}});",
          "2955:   auto request_encoder = &encoder_decoder.first;",
          "2956:   auto response = std::move(encoder_decoder.second);",
          "2958:   codec_client_->sendData(*request_encoder, 1024, false);",
          "2959:   codec_client_->sendData(*request_encoder, 1024, false);",
          "2961:   codec_client_->sendTrailers(*request_encoder,",
          "2962:                               Http::TestRequestTrailerMapImpl{{\"some\", \"trailer\"}});",
          "2964:   waitForNextUpstreamRequest();",
          "2965:   upstream_request_->encodeHeaders(Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}}, true);",
          "2966:   ASSERT_TRUE(response->waitForEndStream());",
          "2968:   EXPECT_TRUE(upstream_request_->complete());",
          "2969:   EXPECT_TRUE(response->complete());",
          "2970:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "2971: }",
          "2975: TEST_P(DownstreamProtocolIntegrationTest, OverflowDecoderBufferFromDecodeTrailers) {",
          "2976:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "2977:     return;",
          "2978:   }",
          "2979:   config_helper_.setBufferLimits(64 * 1024, 64 * 1024);",
          "2980:   config_helper_.addFilter(R\"EOF(",
          "2981:   name: crash-filter",
          "2982:   typed_config:",
          "2983:       \"@type\": type.googleapis.com/test.integration.filters.CrashFilterConfig",
          "2984:       crash_in_decode_headers: false",
          "2985:       crash_in_decode_data: true",
          "2986:       crash_in_decode_trailers: true",
          "2987:   )EOF\");",
          "2988:   config_helper_.addFilter(R\"EOF(",
          "2989:   name: add-body-filter",
          "2990:   typed_config:",
          "2991:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "2992:       where_to_add_body: DECODE_TRAILERS",
          "2993:       where_to_stop_and_buffer: DECODE_DATA",
          "2994:       body_size: 70000",
          "2995:   )EOF\");",
          "2996:   initialize();",
          "2997:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "2998:   auto encoder_decoder =",
          "2999:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "3000:                                                                  {\":scheme\", \"http\"},",
          "3001:                                                                  {\":path\", \"/test/long/url\"},",
          "3002:                                                                  {\":authority\", \"host\"}});",
          "3003:   auto request_encoder = &encoder_decoder.first;",
          "3004:   auto response = std::move(encoder_decoder.second);",
          "3006:   codec_client_->sendData(*request_encoder, 1024, false);",
          "3007:   codec_client_->sendData(*request_encoder, 1024, false);",
          "3009:   codec_client_->sendTrailers(*request_encoder,",
          "3010:                               Http::TestRequestTrailerMapImpl{{\"some\", \"trailer\"}});",
          "3012:   ASSERT_TRUE(response->waitForEndStream());",
          "3013:   EXPECT_TRUE(response->complete());",
          "3014:   EXPECT_EQ(\"413\", response->headers().getStatusValue());",
          "3015: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62bd82d750ed0cbc50e92baa56432ddba68d4025",
      "candidate_info": {
        "commit_hash": "62bd82d750ed0cbc50e92baa56432ddba68d4025",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/62bd82d750ed0cbc50e92baa56432ddba68d4025",
        "files": [
          "include/envoy/http/filter.h",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "test/common/http/conn_manager_impl_test_base.cc",
          "test/common/http/filter_manager_test.cc",
          "test/integration/BUILD",
          "test/integration/filters/BUILD",
          "test/integration/filters/on_local_reply_filter.cc",
          "test/integration/http2_integration_test.cc",
          "test/mocks/http/mocks.h"
        ],
        "message": "http: adding an interface to inform filters of local replies (#15172)\n\nRisk Level: low (no-op for most filters)\nTesting: new integration test, unit tests\nDocs Changes: n/a\nRelease Notes: n/a\nFixes #14791\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "include/envoy/http/filter.h||include/envoy/http/filter.h",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "test/common/http/conn_manager_impl_test_base.cc||test/common/http/conn_manager_impl_test_base.cc",
          "test/common/http/filter_manager_test.cc||test/common/http/filter_manager_test.cc",
          "test/integration/filters/on_local_reply_filter.cc||test/integration/filters/on_local_reply_filter.cc",
          "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
          "test/mocks/http/mocks.h||test/mocks/http/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h"
          ],
          "candidate": [
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/filter.h||include/envoy/http/filter.h": [
          "File: include/envoy/http/filter.h -> include/envoy/http/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   Continue,",
          "164: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: enum class LocalErrorStatus {",
          "171:   Continue,",
          "175:   ContinueAndResetStream,",
          "176: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:   virtual void onMatchCallback(const Matcher::Action&) {}",
          "599: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:   struct LocalReplyData {",
          "614:     Http::Code code_;",
          "616:     absl::string_view details_;",
          "619:     bool reset_imminent_;",
          "620:   };",
          "638:   virtual LocalErrorStatus onLocalReply(const LocalReplyData&) {",
          "639:     return LocalErrorStatus::Continue;",
          "640:   }",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "812:   return std::next(filter->entry());",
          "813: }",
          "815: void FilterManager::sendLocalReply(",
          "816:     bool old_was_grpc_request, Code code, absl::string_view body,",
          "817:     const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "818:     const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details) {",
          "819:   const bool is_head_request = state_.is_head_request_;",
          "820:   bool is_grpc_request = old_was_grpc_request;",
          "821:   if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.unify_grpc_handling\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815: void FilterManager::onLocalReply(StreamFilterBase::LocalReplyData& data) {",
          "816:   state_.under_on_local_reply_ = true;",
          "817:   filter_manager_callbacks_.onLocalReply(data.code_);",
          "819:   for (auto entry : filters_) {",
          "820:     if (entry->onLocalReply(data) == LocalErrorStatus::ContinueAndResetStream) {",
          "821:       data.reset_imminent_ = true;",
          "822:     }",
          "823:   }",
          "824:   state_.under_on_local_reply_ = false;",
          "825: }",
          "831:   ASSERT(!state_.under_on_local_reply_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:   stream_info_.setResponseCodeDetails(details);",
          "829:   if (!filter_manager_callbacks_.responseHeaders().has_value()) {",
          "",
          "[Removed Lines]",
          "827:   filter_manager_callbacks_.onLocalReply(code);",
          "",
          "[Added Lines]",
          "840:   StreamFilterBase::LocalReplyData data{code, details, false};",
          "841:   FilterManager::onLocalReply(data);",
          "842:   if (data.reset_imminent_) {",
          "843:     ENVOY_STREAM_LOG(debug, \"Resetting stream due to {}. onLocalReply requested reset.\", *this,",
          "844:                      details);",
          "845:     filter_manager_callbacks_.resetStream();",
          "846:     return;",
          "847:   }",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:   void addStreamDecoderFilter(StreamDecoderFilterSharedPtr filter) override {",
          "773:     addStreamDecoderFilterWorker(filter, nullptr, false);",
          "774:   }",
          "775:   void addStreamDecoderFilter(StreamDecoderFilterSharedPtr filter,",
          "776:                               Matcher::MatchTreeSharedPtr<HttpMatchingData> match_tree) override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "774:     filters_.push_back(filter.get());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:   }",
          "788:   void addStreamEncoderFilter(StreamEncoderFilterSharedPtr filter) override {",
          "789:     addStreamEncoderFilterWorker(filter, nullptr, false);",
          "790:   }",
          "791:   void addStreamEncoderFilter(StreamEncoderFilterSharedPtr filter,",
          "792:                               Matcher::MatchTreeSharedPtr<HttpMatchingData> match_tree) override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:     filters_.push_back(filter.get());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "804:   void addStreamFilter(StreamFilterSharedPtr filter) override {",
          "805:     addStreamDecoderFilterWorker(filter, nullptr, true);",
          "806:     addStreamEncoderFilterWorker(filter, nullptr, true);",
          "807:   }",
          "808:   void addStreamFilter(StreamFilterSharedPtr filter,",
          "809:                        Matcher::MatchTreeSharedPtr<HttpMatchingData> match_tree) override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809:     StreamDecoderFilter* decoder_filter = filter.get();",
          "810:     filters_.push_back(decoder_filter);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "922:   void maybeEndEncode(bool end_stream);",
          "924:   void sendLocalReply(bool is_grpc_request, Code code, absl::string_view body,",
          "925:                       const std::function<void(ResponseHeaderMap& headers)>& modify_headers,",
          "926:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "932:   void onLocalReply(StreamFilterBase::LocalReplyData& data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1073:   std::list<ActiveStreamDecoderFilterPtr> decoder_filters_;",
          "1074:   std::list<ActiveStreamEncoderFilterPtr> encoder_filters_;",
          "1075:   std::list<AccessLog::InstanceSharedPtr> access_log_handlers_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:   std::list<StreamFilterBase*> filters_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1121:     State()",
          "1122:         : remote_complete_(false), local_complete_(false), has_continue_headers_(false),",
          "1123:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1126:     uint32_t filter_call_state_{0};",
          "",
          "[Removed Lines]",
          "1124:           non_100_response_headers_encoded_(false) {}",
          "",
          "[Added Lines]",
          "1135:           non_100_response_headers_encoded_(false), under_on_local_reply_(false) {}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1139:     bool is_grpc_request_ : 1;",
          "1141:     bool non_100_response_headers_encoded_ : 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1154:     bool under_on_local_reply_ : 1;",
          "",
          "---------------"
        ],
        "test/common/http/conn_manager_impl_test_base.cc||test/common/http/conn_manager_impl_test_base.cc": [
          "File: test/common/http/conn_manager_impl_test_base.cc -> test/common/http/conn_manager_impl_test_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   for (int i = 0; i < num_decoder_filters * num_requests; i++) {",
          "97:   }",
          "99:   for (int i = 0; i < num_encoder_filters * num_requests; i++) {",
          "101:   }",
          "103:   InSequence s;",
          "",
          "[Removed Lines]",
          "96:     decoder_filters_.push_back(new MockStreamDecoderFilter());",
          "100:     encoder_filters_.push_back(new MockStreamEncoderFilter());",
          "",
          "[Added Lines]",
          "96:     decoder_filters_.push_back(new NiceMock<MockStreamDecoderFilter>());",
          "100:     encoder_filters_.push_back(new NiceMock<MockStreamEncoderFilter>());",
          "",
          "---------------"
        ],
        "test/common/http/filter_manager_test.cc||test/common/http/filter_manager_test.cc": [
          "File: test/common/http/filter_manager_test.cc -> test/common/http/filter_manager_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"gtest/gtest.h\"",
          "20: using testing::Return;",
          "22: namespace Envoy {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: using testing::InSequence;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   Event::MockDispatcher dispatcher_;",
          "37:   NiceMock<Network::MockConnection> connection_;",
          "38:   Envoy::Http::MockFilterChainFactory filter_factory_;",
          "40:   Protocol protocol_{Protocol::Http2};",
          "41:   NiceMock<MockTimeSystem> time_source_;",
          "42:   StreamInfo::FilterStateSharedPtr filter_state_ =",
          "",
          "[Removed Lines]",
          "39:   LocalReply::MockLocalReply local_reply_;",
          "",
          "[Added Lines]",
          "40:   NiceMock<LocalReply::MockLocalReply> local_reply_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:   filter_manager_->decodeHeaders(*grpc_headers, true);",
          "346:   filter_manager_->destroyFilters();",
          "347: }",
          "348: } // namespace",
          "349: } // namespace Http",
          "350: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: TEST_F(FilterManagerTest, OnLocalReply) {",
          "351:   initialize();",
          "353:   std::shared_ptr<MockStreamDecoderFilter> decoder_filter(new NiceMock<MockStreamDecoderFilter>());",
          "354:   std::shared_ptr<MockStreamEncoderFilter> encoder_filter(new NiceMock<MockStreamEncoderFilter>());",
          "355:   std::shared_ptr<MockStreamFilter> stream_filter(new NiceMock<MockStreamFilter>());",
          "357:   RequestHeaderMapPtr headers{",
          "358:       new TestRequestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
          "360:   ON_CALL(filter_manager_callbacks_, requestHeaders()).WillByDefault(Return(makeOptRef(*headers)));",
          "362:   EXPECT_CALL(filter_factory_, createFilterChain(_))",
          "363:       .WillRepeatedly(Invoke([&](FilterChainFactoryCallbacks& callbacks) -> void {",
          "364:         callbacks.addStreamDecoderFilter(decoder_filter);",
          "365:         callbacks.addStreamFilter(stream_filter);",
          "366:         callbacks.addStreamEncoderFilter(encoder_filter);",
          "367:       }));",
          "369:   filter_manager_->createFilterChain();",
          "370:   filter_manager_->requestHeadersInitialized();",
          "371:   filter_manager_->decodeHeaders(*headers, true);",
          "375:   EXPECT_CALL(*decoder_filter, onLocalReply(_));",
          "376:   EXPECT_CALL(*stream_filter, onLocalReply(_))",
          "377:       .WillOnce(Return(LocalErrorStatus::ContinueAndResetStream));",
          "378:   EXPECT_CALL(*encoder_filter, onLocalReply(_));",
          "379:   EXPECT_CALL(filter_manager_callbacks_, resetStream());",
          "380:   decoder_filter->callbacks_->sendLocalReply(Code::InternalServerError, \"body\", nullptr,",
          "381:                                              absl::nullopt, \"details\");",
          "385:   ASSERT_TRUE(filter_manager_->streamInfo().responseCodeDetails().has_value());",
          "386:   EXPECT_EQ(filter_manager_->streamInfo().responseCodeDetails().value(), \"details\");",
          "387:   EXPECT_FALSE(filter_manager_->streamInfo().responseCode().has_value());",
          "389:   filter_manager_->destroyFilters();",
          "390: }",
          "392: TEST_F(FilterManagerTest, MultipleOnLocalReply) {",
          "393:   initialize();",
          "395:   std::shared_ptr<MockStreamDecoderFilter> decoder_filter(new NiceMock<MockStreamDecoderFilter>());",
          "396:   std::shared_ptr<MockStreamEncoderFilter> encoder_filter(new NiceMock<MockStreamEncoderFilter>());",
          "397:   std::shared_ptr<MockStreamFilter> stream_filter(new NiceMock<MockStreamFilter>());",
          "399:   RequestHeaderMapPtr headers{",
          "400:       new TestRequestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
          "402:   ON_CALL(filter_manager_callbacks_, requestHeaders()).WillByDefault(Return(makeOptRef(*headers)));",
          "404:   EXPECT_CALL(filter_factory_, createFilterChain(_))",
          "405:       .WillRepeatedly(Invoke([&](FilterChainFactoryCallbacks& callbacks) -> void {",
          "406:         callbacks.addStreamDecoderFilter(decoder_filter);",
          "407:         callbacks.addStreamFilter(stream_filter);",
          "408:         callbacks.addStreamEncoderFilter(encoder_filter);",
          "409:       }));",
          "411:   filter_manager_->createFilterChain();",
          "412:   filter_manager_->requestHeadersInitialized();",
          "413:   filter_manager_->decodeHeaders(*headers, true);",
          "415:   {",
          "418:     InSequence s;",
          "421:     EXPECT_CALL(*decoder_filter, onLocalReply(_));",
          "422:     EXPECT_CALL(*stream_filter, onLocalReply(_));",
          "423:     EXPECT_CALL(*encoder_filter, onLocalReply(_));",
          "427:     EXPECT_CALL(*encoder_filter, encodeHeaders(_, _))",
          "428:         .WillOnce(Invoke([&](ResponseHeaderMap&, bool) -> FilterHeadersStatus {",
          "429:           decoder_filter->callbacks_->sendLocalReply(Code::InternalServerError, \"body2\", nullptr,",
          "430:                                                      absl::nullopt, \"details2\");",
          "431:           return FilterHeadersStatus::StopIteration;",
          "432:         }));",
          "435:     EXPECT_CALL(*decoder_filter, onLocalReply(_));",
          "436:     EXPECT_CALL(*stream_filter, onLocalReply(_));",
          "437:     EXPECT_CALL(*encoder_filter, onLocalReply(_));",
          "439:     decoder_filter->callbacks_->sendLocalReply(Code::InternalServerError, \"body\", nullptr,",
          "440:                                                absl::nullopt, \"details\");",
          "441:   }",
          "444:   ASSERT_TRUE(filter_manager_->streamInfo().responseCodeDetails().has_value());",
          "445:   EXPECT_EQ(filter_manager_->streamInfo().responseCodeDetails().value(), \"details2\");",
          "446:   EXPECT_FALSE(filter_manager_->streamInfo().responseCode().has_value());",
          "448:   filter_manager_->destroyFilters();",
          "449: }",
          "",
          "---------------"
        ],
        "test/integration/filters/on_local_reply_filter.cc||test/integration/filters/on_local_reply_filter.cc": [
          "File: test/integration/filters/on_local_reply_filter.cc -> test/integration/filters/on_local_reply_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <string>",
          "3: #include \"envoy/http/filter.h\"",
          "4: #include \"envoy/registry/registry.h\"",
          "5: #include \"envoy/server/filter_config.h\"",
          "7: #include \"extensions/filters/http/common/pass_through_filter.h\"",
          "9: #include \"test/extensions/filters/http/common/empty_http_filter_config.h\"",
          "11: namespace Envoy {",
          "13: class OnLocalReplyFilter : public Http::PassThroughFilter {",
          "14: public:",
          "15:   Http::FilterHeadersStatus decodeHeaders(Http::RequestHeaderMap& request_headers, bool) override {",
          "16:     if (!request_headers.get(Http::LowerCaseString(\"reset\")).empty()) {",
          "17:       reset_ = true;",
          "18:     }",
          "19:     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest, \"body\", nullptr, absl::nullopt,",
          "20:                                        \"details\");",
          "21:     return Http::FilterHeadersStatus::StopIteration;",
          "22:   }",
          "24:   Http::LocalErrorStatus onLocalReply(const LocalReplyData&) override {",
          "25:     if (reset_) {",
          "26:       return Http::LocalErrorStatus::ContinueAndResetStream;",
          "27:     }",
          "28:     return Http::LocalErrorStatus::Continue;",
          "29:   }",
          "31:   bool reset_{};",
          "32: };",
          "34: class OnLocalReplyFilterConfig : public Extensions::HttpFilters::Common::EmptyHttpFilterConfig {",
          "35: public:",
          "36:   OnLocalReplyFilterConfig() : EmptyHttpFilterConfig(\"on-local-reply-filter\") {}",
          "37:   Http::FilterFactoryCb createFilter(const std::string&,",
          "38:                                      Server::Configuration::FactoryContext&) override {",
          "39:     return [](Http::FilterChainFactoryCallbacks& callbacks) -> void {",
          "40:       callbacks.addStreamFilter(std::make_shared<::Envoy::OnLocalReplyFilter>());",
          "41:     };",
          "42:   }",
          "43: };",
          "46: static Registry::RegisterFactory<OnLocalReplyFilterConfig,",
          "47:                                  Server::Configuration::NamedHttpFilterConfigFactory>",
          "48:     register_;",
          "49: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
          "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1637:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "1638: }",
          "1640: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1640: static std::string on_local_reply_filter = R\"EOF(",
          "1641: name: on-local-reply-filter",
          "1642: typed_config:",
          "1643:   \"@type\": type.googleapis.com/google.protobuf.Empty",
          "1644: )EOF\";",
          "1646: TEST_P(Http2IntegrationTest, OnLocalReply) {",
          "1647:   config_helper_.addFilter(on_local_reply_filter);",
          "1648:   initialize();",
          "1650:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "1651:   {",
          "1652:     auto response = codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "1653:     response->waitForEndStream();",
          "1654:     ASSERT_TRUE(response->complete());",
          "1655:   }",
          "1656:   {",
          "1657:     default_request_headers_.addCopy(\"reset\", \"yes\");",
          "1658:     auto response = codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "1659:     response->waitForReset();",
          "1660:     ASSERT_FALSE(response->complete());",
          "1661:   }",
          "1662: }",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.h||test/mocks/http/mocks.h": [
          "File: test/mocks/http/mocks.h -> test/mocks/http/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   MOCK_METHOD(void, onStreamComplete, ());",
          "323:   MOCK_METHOD(void, onDestroy, ());",
          "324:   MOCK_METHOD(void, onMatchCallback, (const Matcher::Action&));",
          "327:   MOCK_METHOD(FilterHeadersStatus, decodeHeaders, (RequestHeaderMap & headers, bool end_stream));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:   MOCK_METHOD(LocalErrorStatus, onLocalReply, (const LocalReplyData&));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   MOCK_METHOD(void, onStreamComplete, ());",
          "349:   MOCK_METHOD(void, onDestroy, ());",
          "350:   MOCK_METHOD(void, onMatchCallback, (const Matcher::Action&));",
          "353:   MOCK_METHOD(FilterHeadersStatus, encode100ContinueHeaders, (ResponseHeaderMap & headers));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   MOCK_METHOD(LocalErrorStatus, onLocalReply, (const LocalReplyData&));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:   MOCK_METHOD(void, onStreamComplete, ());",
          "371:   MOCK_METHOD(void, onDestroy, ());",
          "372:   MOCK_METHOD(void, onMatchCallback, (const Matcher::Action&));",
          "375:   MOCK_METHOD(FilterHeadersStatus, decodeHeaders, (RequestHeaderMap & headers, bool end_stream));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:   MOCK_METHOD(LocalErrorStatus, onLocalReply, (const LocalReplyData&));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51b6a8354ce6c2cff10064f2f7b59ca14d7e1350",
      "candidate_info": {
        "commit_hash": "51b6a8354ce6c2cff10064f2f7b59ca14d7e1350",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/51b6a8354ce6c2cff10064f2f7b59ca14d7e1350",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h",
          "source/common/runtime/runtime_features.cc",
          "test/common/http/conn_manager_impl_test.cc"
        ],
        "message": "http: reduce delay-close issues for HTTP/1.1 and below (#19863)\n\nskipping delay close for HTTP/1.0 framed by connection close (as it simply reduces time to end-framing) as well as HTTP/1.1 iff the request is fully read (so there's no FIN-RST race)\n\nAddresses the Envoy-specific parts of #19821 \n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h",
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   user_agent_.completeConnectionLength(*conn_length_);",
          "182: }",
          "185:   if (drain_state_ == DrainState::Closing && streams_.empty() && !codec_->wantsToWrite()) {",
          "187:                       StreamInfo::ResponseCodeDetails::get().DownstreamLocalDisconnect);",
          "188:   }",
          "189: }",
          "",
          "[Removed Lines]",
          "184: void ConnectionManagerImpl::checkForDeferredClose() {",
          "186:     doConnectionClose(Network::ConnectionCloseType::FlushWriteAndDelay, absl::nullopt,",
          "",
          "[Added Lines]",
          "184: void ConnectionManagerImpl::checkForDeferredClose(bool skip_delay_close) {",
          "185:   Network::ConnectionCloseType close = Network::ConnectionCloseType::FlushWriteAndDelay;",
          "186:   if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.skip_delay_close\") &&",
          "187:       skip_delay_close) {",
          "188:     close = Network::ConnectionCloseType::FlushWrite;",
          "189:   }",
          "191:     doConnectionClose(close, absl::nullopt,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     drain_state_ = DrainState::Closing;",
          "238:   }",
          "241: }",
          "243: void ConnectionManagerImpl::doDeferredStreamDestroy(ActiveStream& stream) {",
          "",
          "[Removed Lines]",
          "240:   checkForDeferredClose();",
          "",
          "[Added Lines]",
          "247:   bool http_10_sans_cl = (codec_->protocol() == Protocol::Http10) &&",
          "248:                          (!stream.response_headers_ || !stream.response_headers_->ContentLength());",
          "251:   bool connection_close = stream.state_.saw_connection_close_;",
          "252:   bool request_complete = stream.filter_manager_.remoteComplete();",
          "254:   checkForDeferredClose(connection_close && (request_complete || http_10_sans_cl));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:     ASSERT(status.ok());",
          "",
          "[Removed Lines]",
          "379:     checkForDeferredClose();",
          "",
          "[Added Lines]",
          "393:     checkForDeferredClose(false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:   ASSERT(drain_state_ != DrainState::NotDraining);",
          "543:   codec_->goAway();",
          "544:   drain_state_ = DrainState::Closing;",
          "546: }",
          "548: void ConnectionManagerImpl::chargeTracingStats(const Tracing::Reason& tracing_reason,",
          "",
          "[Removed Lines]",
          "545:   checkForDeferredClose();",
          "",
          "[Added Lines]",
          "559:   checkForDeferredClose(false);",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h": [
          "File: source/common/http/conn_manager_impl.h -> source/common/http/conn_manager_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "396:   void checkForDeferredClose();",
          "",
          "[Added Lines]",
          "396:   void checkForDeferredClose(bool skip_deferred_close);",
          "",
          "---------------"
        ],
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     \"envoy.reloadable_features.new_tcp_connection_pool\",",
          "77:     \"envoy.reloadable_features.proxy_102_103\",",
          "78:     \"envoy.reloadable_features.remove_legacy_json\",",
          "79:     \"envoy.reloadable_features.support_locality_update_on_eds_cluster_endpoints\",",
          "80:     \"envoy.reloadable_features.udp_listener_updates_filter_chain_in_place\",",
          "81:     \"envoy.reloadable_features.update_expected_rq_timeout_on_retry\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     \"envoy.reloadable_features.skip_delay_close\",",
          "",
          "---------------"
        ],
        "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
          "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2164: class StreamErrorOnInvalidHttpMessageTest : public HttpConnectionManagerImplTest {",
          "2165: public:",
          "2167:     setup(false, \"\");",
          "2169:     EXPECT_CALL(*codec_, dispatch(_))",
          "",
          "[Removed Lines]",
          "2166:   void sendInvalidRequestAndVerifyConnectionState(bool stream_error_on_invalid_http_message) {",
          "",
          "[Added Lines]",
          "2166:   void sendInvalidRequestAndVerifyConnectionState(bool stream_error_on_invalid_http_message,",
          "2167:                                                   bool send_complete_request = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2174:           RequestHeaderMapPtr headers{",
          "2175:               new TestRequestHeaderMapImpl{{\":method\", \"GET\"}, {\":path\", \"/\"}}};",
          "2177:           data.drain(0);",
          "2178:           return Http::okStatus();",
          "2179:         }));",
          "",
          "[Removed Lines]",
          "2176:           decoder_->decodeHeaders(std::move(headers), true);",
          "",
          "[Added Lines]",
          "2177:           decoder_->decodeHeaders(std::move(headers), send_complete_request);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2191:         .WillOnce(Return(stream_error_on_invalid_http_message));",
          "2192:     EXPECT_CALL(*filter, encodeComplete());",
          "2193:     EXPECT_CALL(*filter, encodeHeaders(_, true));",
          "2194:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
          "2195:         .WillOnce(Invoke([&](const ResponseHeaderMap& headers, bool) -> void {",
          "2196:           EXPECT_EQ(\"400\", headers.getStatusValue());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2195:     if (!stream_error_on_invalid_http_message) {",
          "2196:       EXPECT_CALL(filter_callbacks_.connection_, close(_)).Times(AnyNumber());",
          "2197:       if (send_complete_request) {",
          "2199:         EXPECT_CALL(filter_callbacks_.connection_, close(Network::ConnectionCloseType::FlushWrite))",
          "2200:             .Times(AnyNumber());",
          "2201:       } else {",
          "2203:         EXPECT_CALL(filter_callbacks_.connection_,",
          "2204:                     close(Network::ConnectionCloseType::FlushWriteAndDelay))",
          "2205:             .Times(AnyNumber());",
          "2206:       }",
          "2207:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2216:   sendInvalidRequestAndVerifyConnectionState(false);",
          "2217: }",
          "2219: TEST_F(StreamErrorOnInvalidHttpMessageTest, ConnectionOpenIfCodecStreamErrorIsTrue) {",
          "2220:   sendInvalidRequestAndVerifyConnectionState(true);",
          "2221: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2233: TEST_F(StreamErrorOnInvalidHttpMessageTest,",
          "2234:        ConnectionTerminatedWithDelayIfCodecStreamErrorIsFalse) {",
          "2236:   sendInvalidRequestAndVerifyConnectionState(false, false);",
          "2237: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3366:     decoder_ = &conn_manager_->newStream(response_encoder_);",
          "3367:     RequestHeaderMapPtr headers{",
          "3368:         new TestRequestHeaderMapImpl{{\":authority\", \"host\"}, {\":method\", \"GET\"}, {\":path\", \"/\"}}};",
          "3370:     data.drain(4);",
          "3371:     return Http::okStatus();",
          "3372:   }));",
          "",
          "[Removed Lines]",
          "3369:     decoder_->decodeHeaders(std::move(headers), true);",
          "",
          "[Added Lines]",
          "3389:     decoder_->decodeHeaders(std::move(headers), false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3376:         EXPECT_EQ(\"426\", headers.getStatusValue());",
          "3377:         EXPECT_EQ(\"close\", headers.getConnectionValue());",
          "3378:       }));",
          "3380:   Buffer::OwnedImpl fake_input(\"1234\");",
          "3381:   conn_manager_->onData(fake_input, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3402:   EXPECT_CALL(filter_callbacks_.connection_, close(_)).Times(AnyNumber());",
          "3403:   EXPECT_CALL(filter_callbacks_.connection_, close(Network::ConnectionCloseType::FlushWrite))",
          "3404:       .Times(AnyNumber());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e54a8d07a603d43925094a9220faef5a67cb1c2b",
      "candidate_info": {
        "commit_hash": "e54a8d07a603d43925094a9220faef5a67cb1c2b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/e54a8d07a603d43925094a9220faef5a67cb1c2b",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/runtime/runtime_features.cc",
          "test/common/http/conn_manager_impl_test_2.cc",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "hcm: handle stream reset during downstream encoding (#19144)\n\nCommit Message: when the downstream codec encodes response header/body/trailers in the same call stack as upstream decoding, which is the case for Http3, a connection could gets closed which will cause the stream to be reset. In such case, FilterManagerImpl shouldn't continue process the rest of the response, especially end_stream.\n\nAdditional Description: this contributes to the crash in #19006. This fix stops the crash, but didn't make the test pass.\n\nRisk Level: low\nTesting: new unit tests\nRelease Notes: guarded by envoy.reloadable_features.handle_stream_reset_during_hcm_encoding\nSigned-off-by: Dan Zhang <danzh@google.com>\n\nCo-authored-by: Dan Zhang <danzh@google.com>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "test/common/http/conn_manager_impl_test_2.cc||test/common/http/conn_manager_impl_test_2.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     filter_manager_.streamInfo().setResponseCodeDetails(",
          "1539:         StreamInfo::ResponseCodeDetails::get().Overload);",
          "1540:   }",
          "1542:   connection_manager_.doDeferredStreamDestroy(*this);",
          "1543: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541:   if (Runtime::runtimeFeatureEnabled(",
          "1542:           \"envoy.reloadable_features.handle_stream_reset_during_hcm_encoding\")) {",
          "1543:     filter_manager_.onDownstreamReset();",
          "1544:   }",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013:             state_.non_100_response_headers_encoded_ = true;",
          "1014:             filter_manager_callbacks_.encodeHeaders(*filter_manager_callbacks_.responseHeaders(),",
          "1015:                                                     end_stream);",
          "1017:             maybeEndEncode(end_stream);",
          "1018:           },",
          "1019:           [&](Buffer::Instance& data, bool end_stream) -> void {",
          "1020:             filter_manager_callbacks_.encodeData(data, end_stream);",
          "1021:             maybeEndEncode(end_stream);",
          "1022:           }},",
          "1023:       Utility::LocalReplyData{state_.is_grpc_request_, code, body, grpc_status, is_head_request});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:             if (state_.saw_downstream_reset_) {",
          "1017:               return;",
          "1018:             }",
          "1023:             if (state_.saw_downstream_reset_) {",
          "1024:               return;",
          "1025:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1151:   const bool modified_end_stream = (end_stream && continue_data_entry == encoder_filters_.end());",
          "1152:   state_.non_100_response_headers_encoded_ = true;",
          "1153:   filter_manager_callbacks_.encodeHeaders(headers, modified_end_stream);",
          "1154:   maybeEndEncode(modified_end_stream);",
          "1156:   if (!modified_end_stream) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1159:   if (state_.saw_downstream_reset_) {",
          "1160:     return;",
          "1161:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1291:   const bool modified_end_stream = end_stream && trailers_added_entry == encoder_filters_.end();",
          "1292:   filter_manager_callbacks_.encodeData(data, modified_end_stream);",
          "1293:   maybeEndEncode(modified_end_stream);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1301:   if (state_.saw_downstream_reset_) {",
          "1302:     return;",
          "1303:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1332:   }",
          "1334:   filter_manager_callbacks_.encodeTrailers(trailers);",
          "1335:   maybeEndEncode(true);",
          "1336: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346:   if (state_.saw_downstream_reset_) {",
          "1347:     return;",
          "1348:   }",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "946:   void contextOnContinue(ScopeTrackedObjectStack& tracked_object_stack);",
          "948: private:",
          "950:   enum class FilterIterationStartState { AlwaysStartFromNext, CanStartFromCurrent };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:   void onDownstreamReset() { state_.saw_downstream_reset_ = true; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1065:         : remote_complete_(false), local_complete_(false), has_1xx_headers_(false),",
          "1066:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1067:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "1070:     uint32_t filter_call_state_{0};",
          "",
          "[Removed Lines]",
          "1068:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false) {}",
          "",
          "[Added Lines]",
          "1070:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
          "1071:           saw_downstream_reset_(false) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1089:     bool decoder_filter_chain_aborted_ : 1;",
          "1090:     bool encoder_filter_chain_aborted_ : 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1094:     bool saw_downstream_reset_ : 1;",
          "",
          "---------------"
        ],
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     \"envoy.reloadable_features.disable_tls_inspector_injection\",",
          "63:     \"envoy.reloadable_features.fix_added_trailers\",",
          "64:     \"envoy.reloadable_features.grpc_bridge_stats_disabled\",",
          "65:     \"envoy.reloadable_features.hash_multiple_header_values\",",
          "66:     \"envoy.reloadable_features.health_check.graceful_goaway_handling\",",
          "67:     \"envoy.reloadable_features.http2_consume_stream_refused_errors\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     \"envoy.reloadable_features.handle_stream_reset_during_hcm_encoding\",",
          "",
          "---------------"
        ],
        "test/common/http/conn_manager_impl_test_2.cc||test/common/http/conn_manager_impl_test_2.cc": [
          "File: test/common/http/conn_manager_impl_test_2.cc -> test/common/http/conn_manager_impl_test_2.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2882:   EXPECT_EQ(1U, stats_.named_.downstream_rq_rejected_via_ip_detection_.value());",
          "2883: }",
          "2885: } // namespace Http",
          "2886: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2885: TEST_F(HttpConnectionManagerImplTest, DisconnectDuringEncodeHeader) {",
          "2886:   setup(false, \"envoy-server-test\");",
          "2887:   setupFilterChain(1, 0);",
          "2889:   EXPECT_CALL(*decoder_filters_[0], decodeHeaders(_, true))",
          "2890:       .WillOnce(Return(FilterHeadersStatus::StopIteration));",
          "2891:   startRequest(/*end_stream=*/true);",
          "2893:   EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
          "2894:       .WillOnce(Invoke([&](const ResponseHeaderMap& headers, bool) -> void {",
          "2895:         EXPECT_NE(nullptr, headers.Server());",
          "2896:         EXPECT_EQ(\"envoy-server-test\", headers.getServerValue());",
          "2897:         conn_manager_->onEvent(Network::ConnectionEvent::LocalClose);",
          "2898:       }));",
          "2899:   EXPECT_CALL(*decoder_filters_[0], onStreamComplete());",
          "2900:   EXPECT_CALL(*decoder_filters_[0], onDestroy());",
          "2902:   ResponseHeaderMapPtr response_headers{new TestResponseHeaderMapImpl{{\":status\", \"200\"}}};",
          "2903:   decoder_filters_[0]->callbacks_->streamInfo().setResponseCodeDetails(\"\");",
          "2904:   decoder_filters_[0]->callbacks_->encodeHeaders(std::move(response_headers), true, \"details\");",
          "2905: }",
          "2907: TEST_F(HttpConnectionManagerImplTest, DisconnectDuringEncodeBody) {",
          "2908:   setup(false, \"envoy-server-test\");",
          "2909:   setupFilterChain(1, 0);",
          "2911:   EXPECT_CALL(*decoder_filters_[0], decodeHeaders(_, true))",
          "2912:       .WillOnce(Return(FilterHeadersStatus::StopIteration));",
          "2913:   startRequest(/*end_stream=*/true);",
          "2915:   EXPECT_CALL(response_encoder_, encodeHeaders(_, false))",
          "2916:       .WillOnce(Invoke([&](const ResponseHeaderMap& headers, bool) -> void {",
          "2917:         EXPECT_NE(nullptr, headers.Server());",
          "2918:         EXPECT_EQ(\"envoy-server-test\", headers.getServerValue());",
          "2919:       }));",
          "2920:   EXPECT_CALL(response_encoder_, encodeData(_, true))",
          "2921:       .WillOnce(Invoke([&](Buffer::Instance&, bool) -> void {",
          "2922:         conn_manager_->onEvent(Network::ConnectionEvent::LocalClose);",
          "2923:       }));",
          "2924:   EXPECT_CALL(*decoder_filters_[0], onStreamComplete());",
          "2925:   EXPECT_CALL(*decoder_filters_[0], onDestroy());",
          "2927:   ResponseHeaderMapPtr response_headers{new TestResponseHeaderMapImpl{{\":status\", \"200\"}}};",
          "2928:   decoder_filters_[0]->callbacks_->streamInfo().setResponseCodeDetails(\"\");",
          "2929:   decoder_filters_[0]->callbacks_->encodeHeaders(std::move(response_headers), false, \"details\");",
          "2930:   Buffer::OwnedImpl response_body(\"response\");",
          "2931:   decoder_filters_[0]->callbacks_->encodeData(response_body, true);",
          "2932: }",
          "2934: TEST_F(HttpConnectionManagerImplTest, DisconnectDuringEncodeTrailer) {",
          "2935:   setup(false, \"envoy-server-test\");",
          "2936:   setupFilterChain(1, 0);",
          "2938:   EXPECT_CALL(*decoder_filters_[0], decodeHeaders(_, true))",
          "2939:       .WillOnce(Return(FilterHeadersStatus::StopIteration));",
          "2940:   startRequest(/*end_stream=*/true);",
          "2942:   EXPECT_CALL(response_encoder_, encodeHeaders(_, false))",
          "2943:       .WillOnce(Invoke([&](const ResponseHeaderMap& headers, bool) -> void {",
          "2944:         EXPECT_NE(nullptr, headers.Server());",
          "2945:         EXPECT_EQ(\"envoy-server-test\", headers.getServerValue());",
          "2946:       }));",
          "2947:   EXPECT_CALL(response_encoder_, encodeData(_, false));",
          "2948:   EXPECT_CALL(response_encoder_, encodeTrailers(_))",
          "2949:       .WillOnce(Invoke([&](const Http::ResponseTrailerMap&) -> void {",
          "2950:         conn_manager_->onEvent(Network::ConnectionEvent::LocalClose);",
          "2951:       }));",
          "2952:   EXPECT_CALL(*decoder_filters_[0], onStreamComplete());",
          "2953:   EXPECT_CALL(*decoder_filters_[0], onDestroy());",
          "2955:   ResponseHeaderMapPtr response_headers{new TestResponseHeaderMapImpl{{\":status\", \"200\"}}};",
          "2956:   decoder_filters_[0]->callbacks_->streamInfo().setResponseCodeDetails(\"\");",
          "2957:   decoder_filters_[0]->callbacks_->encodeHeaders(std::move(response_headers), false, \"details\");",
          "2958:   Buffer::OwnedImpl response_body(\"response\");",
          "2959:   decoder_filters_[0]->callbacks_->encodeData(response_body, false);",
          "2960:   decoder_filters_[0]->callbacks_->encodeTrailers(",
          "2961:       ResponseTrailerMapPtr{new TestResponseTrailerMapImpl{{\"some\", \"trailer\"}}});",
          "2962: }",
          "2964: TEST_F(HttpConnectionManagerImplTest, DirectLocalReplyCausesDisconnect) {",
          "2965:   initial_buffer_limit_ = 10;",
          "2966:   setup(false, \"\");",
          "2967:   setUpEncoderAndDecoder(false, false);",
          "2968:   sendRequestHeadersAndData();",
          "2972:   ResponseHeaderMapPtr response_headers{new TestResponseHeaderMapImpl{{\":status\", \"200\"}}};",
          "2973:   EXPECT_CALL(*encoder_filters_[1], encodeHeaders(_, false))",
          "2974:       .WillOnce(Return(FilterHeadersStatus::StopIteration));",
          "2975:   decoder_filters_[0]->callbacks_->streamInfo().setResponseCodeDetails(\"\");",
          "2976:   decoder_filters_[0]->callbacks_->encodeHeaders(std::move(response_headers), false, \"details\");",
          "2981:   expectOnDestroy();",
          "2982:   Buffer::OwnedImpl fake_response(\"A long enough string to go over watermarks\");",
          "2984:   EXPECT_CALL(*encoder_filters_[1], encodeData(_, false))",
          "2985:       .WillOnce(Return(FilterDataStatus::StopIterationAndBuffer));",
          "2986:   std::string response_body;",
          "2988:   EXPECT_CALL(response_encoder_, encodeHeaders(_, false))",
          "2989:       .WillOnce(Invoke([&](const ResponseHeaderMap& headers, bool) -> FilterHeadersStatus {",
          "2991:         EXPECT_EQ(\"500\", headers.getStatusValue());",
          "2993:         EXPECT_TRUE(headers.Date() != nullptr);",
          "2994:         EXPECT_EQ(\"response_payload_too_large\",",
          "2995:                   decoder_filters_[0]->callbacks_->streamInfo().responseCodeDetails().value());",
          "2996:         return FilterHeadersStatus::Continue;",
          "2997:       }));",
          "2998:   EXPECT_CALL(response_encoder_, encodeData(_, true))",
          "2999:       .WillOnce(Invoke([&](Buffer::Instance&, bool) -> void {",
          "3000:         conn_manager_->onEvent(Network::ConnectionEvent::LocalClose);",
          "3001:       }));",
          "3002:   decoder_filters_[0]->callbacks_->encodeData(fake_response, false);",
          "3004:   EXPECT_EQ(1U, stats_.named_.rs_too_large_.value());",
          "3005: }",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3556:   Network::IoSocketError* ebadf = Network::IoSocketError::getIoSocketEbadfInstance();",
          "3557:   socket_swap.write_matcher_->setSourcePort(lookupPort(\"http\"));",
          "3558:   socket_swap.write_matcher_->setWriteOverride(ebadf);",
          "3562:   if (downstreamProtocol() == Http::CodecType::HTTP3) {",
          "",
          "[Removed Lines]",
          "3560:   upstream_request_->encodeHeaders(Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}}, false);",
          "",
          "[Added Lines]",
          "3559:   upstream_request_->encodeHeaders(Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}}, true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}