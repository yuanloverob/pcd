{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9bc14c18fcb15563ffcda9ef14b24c1caedbab5e",
      "candidate_info": {
        "commit_hash": "9bc14c18fcb15563ffcda9ef14b24c1caedbab5e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/9bc14c18fcb15563ffcda9ef14b24c1caedbab5e",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_m68k.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_x86.c"
        ],
        "message": "cstool: delete tab",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_m68k.c||cstool/cstool_m68k.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_x86.c||cstool/cstool_x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: void print_insn_detail_sparc(csh handle, cs_insn *ins);",
          "18: void print_insn_detail_sysz(csh handle, cs_insn *ins);",
          "19: void print_insn_detail_xcore(csh handle, cs_insn *ins);",
          "22: void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "23: {",
          "",
          "[Removed Lines]",
          "20: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins);",
          "",
          "[Added Lines]",
          "20: void print_insn_detail_m68k(csh handle, cs_insn *ins);",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:    else",
          "97:     printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "99:   }",
          "101:   if (op->vector_index != -1) {",
          "102:    printf(\"\\t\\toperands[%u].vector_index = %u\\n\", i, op->vector_index);",
          "103:   }",
          "105:   if (op->subtracted)",
          "106:    printf(\"\\t\\tSubtracted: True\\n\");",
          "107:  }",
          "109:  if (arm->cc != ARM_CC_AL && arm->cc != ARM_CC_INVALID)",
          "110:   printf(\"\\tCode condition: %u\\n\", arm->cc);",
          "112:  if (arm->update_flags)",
          "113:   printf(\"\\tUpdate-flags: True\\n\");",
          "115:  if (arm->writeback)",
          "116:   printf(\"\\tWrite-back: True\\n\");",
          "118:  if (arm->cps_mode)",
          "119:   printf(\"\\tCPSI-mode: %u\\n\", arm->cps_mode);",
          "121:  if (arm->cps_flag)",
          "122:   printf(\"\\tCPSI-flag: %u\\n\", arm->cps_flag);",
          "124:  if (arm->vector_data)",
          "125:   printf(\"\\tVector-data: %u\\n\", arm->vector_data);",
          "127:  if (arm->vector_size)",
          "128:   printf(\"\\tVector-size: %u\\n\", arm->vector_size);",
          "130:  if (arm->usermode)",
          "131:   printf(\"\\tUser-mode: True\\n\");",
          "133:  if (arm->mem_barrier)",
          "134:   printf(\"\\tMemory-barrier: %u\\n\", arm->mem_barrier);",
          "137:  if (!cs_regs_access(handle, ins,",
          "138:       regs_read, &regs_read_count,",
          "",
          "[Removed Lines]",
          "98:         cs_reg_name(handle, op->shift.value));",
          "",
          "[Added Lines]",
          "98:      cs_reg_name(handle, op->shift.value));",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c"
        ],
        "cstool/cstool_m68k.c||cstool/cstool_m68k.c": [
          "File: cstool/cstool_m68k.c -> cstool/cstool_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "15:  \"<invalid mode>\",",
          "17:  \"Register Direct - Data\",",
          "18:  \"Register Direct - Address\",",
          "",
          "[Removed Lines]",
          "14: const char* s_addressing_modes[] = {",
          "",
          "[Added Lines]",
          "14: static const char* s_addressing_modes[] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:  \"Immediate value\",",
          "42: };",
          "45: {",
          "46:  int i;",
          "50:   uint16_t reg_id = detail->regs_read[i];",
          "51:   const char* reg_name = cs_reg_name(handle, reg_id);",
          "52:   printf(\"\\treading from reg: %s\\n\", reg_name);",
          "53:  }",
          "57:   uint16_t reg_id = detail->regs_write[i];",
          "58:   const char* reg_name = cs_reg_name(handle, reg_id);",
          "59:   printf(\"\\twriting to reg:   %s\\n\", reg_name);",
          "",
          "[Removed Lines]",
          "44: void print_read_write_regs(cs_detail* detail, csh handle)",
          "48:  for (i = 0; i < detail->regs_read_count; ++i)",
          "49:  {",
          "55:  for (i = 0; i < detail->regs_write_count; ++i)",
          "56:  {",
          "",
          "[Added Lines]",
          "44: static void print_read_write_regs(cs_detail* detail, csh handle)",
          "48:  for (i = 0; i < detail->regs_read_count; ++i) {",
          "54:  for (i = 0; i < detail->regs_write_count; ++i) {",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c"
        ],
        "cstool/cstool_x86.c||cstool/cstool_x86.c": [
          "File: cstool/cstool_x86.c -> cstool/cstool_x86.c"
        ]
      }
    },
    {
      "candidate_hash": "905556d6ef099e63de15af1d909e5f924a9c9226",
      "candidate_info": {
        "commit_hash": "905556d6ef099e63de15af1d909e5f924a9c9226",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/905556d6ef099e63de15af1d909e5f924a9c9226",
        "files": [
          "arch/X86/X86Disassembler.c"
        ],
        "message": "Refactoring conditional directives for incomplete if conditions.",
        "before_after_code_files": [
          "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c": [
          "File: arch/X86/X86Disassembler.c -> arch/X86/X86Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:  } // By default sign-extend all X86 immediates based on their encoding.",
          "169:  else if (type == TYPE_IMM8 || type == TYPE_IMM16 || type == TYPE_IMM32 ||",
          "170:    type == TYPE_IMM64 || type == TYPE_IMMv) {",
          "171:   uint32_t Opcode = MCInst_getOpcode(mcInst);",
          "172:   switch (operand->encoding) {",
          "173:    default:",
          "174:     break;",
          "175:    case ENCODING_IB:",
          "179: #ifndef CAPSTONE_X86_REDUCE",
          "197: #endif",
          "199:       if(immediate & 0x80)",
          "200:        immediate |= ~(0xffull);",
          "201:     break;",
          "",
          "[Removed Lines]",
          "178:     if (",
          "180:       Opcode != X86_BLENDPSrri &&",
          "181:       Opcode != X86_BLENDPDrri &&",
          "182:       Opcode != X86_PBLENDWrri &&",
          "183:       Opcode != X86_MPSADBWrri &&",
          "184:       Opcode != X86_DPPSrri &&",
          "185:       Opcode != X86_DPPDrri &&",
          "186:       Opcode != X86_INSERTPSrr &&",
          "187:       Opcode != X86_VBLENDPSYrri &&",
          "188:       Opcode != X86_VBLENDPSYrmi &&",
          "189:       Opcode != X86_VBLENDPDYrri &&",
          "190:       Opcode != X86_VBLENDPDYrmi &&",
          "191:       Opcode != X86_VPBLENDWrri &&",
          "192:       Opcode != X86_VMPSADBWrri &&",
          "193:       Opcode != X86_VDPPSYrri &&",
          "194:       Opcode != X86_VDPPSYrmi &&",
          "195:       Opcode != X86_VDPPDrri &&",
          "196:       Opcode != X86_VINSERTPSrr &&",
          "198:       Opcode != X86_INT)",
          "",
          "[Added Lines]",
          "173:   bool check_opcode;",
          "181:     check_opcode = (Opcode != X86_INT);",
          "183:         check_opcode = ((Opcode != X86_BLENDPSrri &&",
          "184:                   Opcode != X86_BLENDPDrri &&",
          "185:                   Opcode != X86_PBLENDWrri &&",
          "186:                   Opcode != X86_MPSADBWrri &&",
          "187:                   Opcode != X86_DPPSrri &&",
          "188:                   Opcode != X86_DPPDrri &&",
          "189:                   Opcode != X86_INSERTPSrr &&",
          "190:                   Opcode != X86_VBLENDPSYrri &&",
          "191:                   Opcode != X86_VBLENDPSYrmi &&",
          "192:                   Opcode != X86_VBLENDPDYrri &&",
          "193:                   Opcode != X86_VBLENDPDYrmi &&",
          "194:                   Opcode != X86_VPBLENDWrri &&",
          "195:                   Opcode != X86_VMPSADBWrri &&",
          "196:                   Opcode != X86_VDPPSYrri &&",
          "197:                   Opcode != X86_VDPPSYrmi &&",
          "198:                   Opcode != X86_VDPPDrri &&",
          "199:                   Opcode != X86_VINSERTPSrr) && check_opcode);",
          "201:     if (check_opcode)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505: #define ENTRY(x)                                        \\",
          "506:      case EA_BASE_##x:                                 \\",
          "508:       ALL_EA_BASES",
          "509: #undef ENTRY",
          "510: #define ENTRY(x) case EA_REG_##x:",
          "",
          "[Removed Lines]",
          "507:         MCOperand_CreateReg0(mcInst, X86_##x); break;",
          "",
          "[Added Lines]",
          "510:         MCOperand_CreateReg0(mcInst, X86_##x); break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "539: static bool translateRM(MCInst *mcInst, const OperandSpecifier *operand,",
          "540:   InternalInstruction *insn)",
          "542:  switch (operand->type) {",
          "543:   case TYPE_R8:",
          "544:   case TYPE_R16:",
          "",
          "[Removed Lines]",
          "541: {",
          "",
          "[Added Lines]",
          "544: {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c10a631e1e2210753b68b35b9a382189e48be796",
      "candidate_info": {
        "commit_hash": "c10a631e1e2210753b68b35b9a382189e48be796",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c10a631e1e2210753b68b35b9a382189e48be796",
        "files": [
          "arch/X86/X86Disassembler.c"
        ],
        "message": "x86: fix an warning on unintialized vars",
        "before_after_code_files": [
          "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c": [
          "File: arch/X86/X86Disassembler.c -> arch/X86/X86Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:   if (*size  == 2) {",
          "954:    reader(&info, &b1, address);",
          "955:    reader(&info, &b2, address + 1);",
          "",
          "[Removed Lines]",
          "952:    unsigned char b1, b2;",
          "",
          "[Added Lines]",
          "952:    unsigned char b1 = 0, b2 = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db0554cfd2aea2b166efffc61258ca30085d0338",
      "candidate_info": {
        "commit_hash": "db0554cfd2aea2b166efffc61258ca30085d0338",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/db0554cfd2aea2b166efffc61258ca30085d0338",
        "files": [
          "suite/regress/LICENSE",
          "suite/regress/regress.py"
        ],
        "message": "suite: add regress/",
        "before_after_code_files": [
          "suite/regress/regress.py||suite/regress/regress.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "suite/regress/regress.py||suite/regress/regress.py": [
          "File: suite/regress/regress.py -> suite/regress/regress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "3: import unittest",
          "5: from os.path import dirname, basename, isfile",
          "6: import glob",
          "8: # Find all unittest type in this directory and run it.",
          "10: class RegressTest(unittest.TestCase):",
          "11:     pass",
          "13: def main():",
          "14:     unittest.main()",
          "16: if __name__ == '__main__':",
          "17:     directory = dirname(__file__)",
          "18:     if directory == '':",
          "19:         directory = '.'",
          "20:     modules = glob.glob(directory+\"/*.py\")",
          "21:     __all__ = [ basename(f)[:-3] for f in modules if isfile(f)]",
          "22:     suite = unittest.TestSuite()",
          "24:     for module in __all__:",
          "25:         m = __import__(module)",
          "26:         for cl in dir(m):",
          "27:             try:",
          "28:                 realcl = getattr(m,cl)",
          "29:                 if issubclass(realcl, unittest.TestCase):",
          "30:                     suite.addTest(realcl())",
          "31:             except Exception as e:",
          "32:                 pass",
          "34:     unittest.TextTestRunner().run(suite)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7f4930ad7eebe45894e5ffd974c79cda5d320d1",
      "candidate_info": {
        "commit_hash": "b7f4930ad7eebe45894e5ffd974c79cda5d320d1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/b7f4930ad7eebe45894e5ffd974c79cda5d320d1",
        "files": [
          "bindings/python/.gitignore",
          "bindings/python/BUILDING.txt",
          "bindings/python/Makefile",
          "bindings/python/README.txt",
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "Python: Make cython work with extreme prejudice",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import glob",
          "4: import os",
          "5: import shutil",
          "7: import sys",
          "8: import platform",
          "",
          "[Removed Lines]",
          "6: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         pass",
          "57:     shutil.copytree(os.path.join(BUILD_DIR, \"arch\"), os.path.join(SRC_DIR, \"arch\"))",
          "60:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.[ch]\")))",
          "71:     for filename in src:",
          "72:         outpath = os.path.join(SRC_DIR, os.path.basename(filename))",
          "",
          "[Removed Lines]",
          "58:  shutil.copytree(os.path.join(BUILD_DIR, \"include\"), os.path.join(SRC_DIR, \"include\"))",
          "61:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.mk\"))",
          "63:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"Makefile\"))",
          "64:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"LICENSE*\"))",
          "65:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"README\"))",
          "66:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.TXT\"))",
          "67:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"RELEASE_NOTES\"))",
          "68:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"make.sh\"))",
          "69:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"CMakeLists.txt\"))",
          "",
          "[Added Lines]",
          "57:     shutil.copytree(os.path.join(BUILD_DIR, \"include\"), os.path.join(SRC_DIR, \"include\"))",
          "60:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.mk\")))",
          "62:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"Makefile\")))",
          "63:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"LICENSE*\")))",
          "64:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"README\")))",
          "65:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.TXT\")))",
          "66:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"RELEASE_NOTES\")))",
          "67:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"make.sh\")))",
          "68:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"CMakeLists.txt\")))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "102:         os.system(\"nmake\")",
          "103:     elif SYSTEM == \"cygwin\":",
          "107:         else:",
          "111:     else:   # Unix",
          "114:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "115:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "104:         os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "105:         if is_64bits:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw64\")",
          "108:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw32\")",
          "110:         so = \"capstone.dll\"",
          "112:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh\")",
          "",
          "[Added Lines]",
          "103:         if IS_64BITS:",
          "104:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "108:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:     cmdclass['develop'] = custom_develop",
          "155: except ImportError:",
          "158: if 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv:",
          "159:     idx = sys.argv.index('bdist_wheel') + 1",
          "",
          "[Removed Lines]",
          "156:     print \"Proper 'develop' support unavailable.\"",
          "",
          "[Added Lines]",
          "152:     print(\"Proper 'develop' support unavailable.\")",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from distutils.core import setup",
          "2: from distutils.extension import Extension",
          "4: from Cython.Distutils import build_ext",
          "6: VERSION = '3.0.4'",
          "30: # clean package directory first",
          "31: #import os.path, shutil, sys",
          "",
          "[Removed Lines]",
          "3: from distutils.command.install_lib import install_lib as _install",
          "8: compile_args = ['-O3', '-fomit-frame-pointer']",
          "10: ext_modules = [",
          "11:     Extension(\"capstone.ccapstone\", [\"pyx/ccapstone.pyx\"], libraries=[\"capstone\"], extra_compile_args=compile_args),",
          "12:     Extension(\"capstone.arm\", [\"pyx/arm.pyx\"], extra_compile_args=compile_args),",
          "13:     Extension(\"capstone.arm_const\", [\"pyx/arm_const.pyx\"], extra_compile_args=compile_args),",
          "14:     Extension(\"capstone.arm64\", [\"pyx/arm64.pyx\"], extra_compile_args=compile_args),",
          "15:     Extension(\"capstone.arm64_const\", [\"pyx/arm64_const.pyx\"], extra_compile_args=compile_args),",
          "16:     Extension(\"capstone.mips\", [\"pyx/mips.pyx\"], extra_compile_args=compile_args),",
          "17:     Extension(\"capstone.mips_const\", [\"pyx/mips_const.pyx\"], extra_compile_args=compile_args),",
          "18:     Extension(\"capstone.ppc\", [\"pyx/ppc.pyx\"], extra_compile_args=compile_args),",
          "19:     Extension(\"capstone.ppc_const\", [\"pyx/ppc_const.pyx\"], extra_compile_args=compile_args),",
          "20:     Extension(\"capstone.x86\", [\"pyx/x86.pyx\"], extra_compile_args=compile_args),",
          "21:     Extension(\"capstone.x86_const\", [\"pyx/x86_const.pyx\"], extra_compile_args=compile_args),",
          "22:     Extension(\"capstone.sparc\", [\"pyx/sparc.pyx\"], extra_compile_args=compile_args),",
          "23:     Extension(\"capstone.sparc_const\", [\"pyx/sparc_const.pyx\"], extra_compile_args=compile_args),",
          "24:     Extension(\"capstone.systemz\", [\"pyx/systemz.pyx\"], extra_compile_args=compile_args),",
          "25:     Extension(\"capstone.sysz_const\", [\"pyx/sysz_const.pyx\"], extra_compile_args=compile_args),",
          "26:     Extension(\"capstone.xcore\", [\"pyx/xcore.pyx\"], extra_compile_args=compile_args),",
          "27:     Extension(\"capstone.xcore_const\", [\"pyx/xcore_const.pyx\"], extra_compile_args=compile_args)",
          "28: ]",
          "",
          "[Added Lines]",
          "1: import os",
          "2: import sys",
          "3: import shutil",
          "4: from distutils import log",
          "7: from distutils.command.build import build",
          "11: SYSTEM = sys.platform",
          "14: # adapted from commit e504b81 of Nguyen Tan Cong",
          "15: # Reference: https://docs.python.org/2/library/platform.html#cross-platform",
          "16: IS_64BITS = sys.maxsize > 2**32",
          "18: # are we building from the repository or from a source distribution?",
          "19: ROOT_DIR = os.path.dirname(os.path.realpath(__file__))",
          "20: LIBS_DIR = os.path.join(ROOT_DIR, 'pyx', 'lib')",
          "21: HEADERS_DIR = os.path.join(ROOT_DIR, 'pyx', 'include')",
          "22: SRC_DIR = os.path.join(ROOT_DIR, 'src')",
          "23: BUILD_DIR = SRC_DIR if os.path.exists(SRC_DIR) else os.path.join(ROOT_DIR, '../..')",
          "24: PYPACKAGE_DIR = os.path.join(ROOT_DIR, 'capstone')",
          "25: CYPACKAGE_DIR = os.path.join(ROOT_DIR, 'pyx')",
          "27: if SYSTEM == 'darwin':",
          "28:     LIBRARY_FILE = \"libcapstone.dylib\"",
          "29:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "30: elif SYSTEM in ('win32', 'cygwin'):",
          "31:     LIBRARY_FILE = \"capstone.dll\"",
          "32:     STATIC_LIBRARY_FILE = None",
          "33: else:",
          "34:     LIBRARY_FILE = \"libcapstone.so\"",
          "35:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "37: compile_args = ['-O3', '-fomit-frame-pointer', '-I' + HEADERS_DIR]",
          "38: link_args = ['-L' + LIBS_DIR]",
          "40: ext_module_names = ['arm', 'arm_const', 'arm64', 'arm64_const', 'mips', 'mips_const', 'ppc', 'ppc_const', 'x86', 'x86_const', 'sparc', 'sparc_const', 'systemz', 'sysz_const', 'xcore', 'xcore_const']",
          "41: ext_modules = [Extension(\"capstone.ccapstone\",",
          "42:                          [\"pyx/ccapstone.pyx\"],",
          "43:                          libraries=[\"capstone\"],",
          "44:                          extra_compile_args=compile_args,",
          "45:                          extra_link_args=link_args)]",
          "46: ext_modules += [Extension(\"capstone.%s\" % name,",
          "47:                           [\"pyx/%s.pyx\" % name],",
          "48:                           extra_compile_args=compile_args,",
          "49:                           extra_link_args=link_args)",
          "50:                 for name in ext_module_names]",
          "52: def clean_bins():",
          "53:     shutil.rmtree(LIBS_DIR, ignore_errors=True)",
          "54:     shutil.rmtree(HEADERS_DIR, ignore_errors=True)",
          "56: def copy_pysources():",
          "57:     for fname in os.listdir(PYPACKAGE_DIR):",
          "58:         if not fname.endswith('.py'):",
          "59:             continue",
          "61:         if fname == '__init__.py':",
          "62:             shutil.copy(os.path.join(PYPACKAGE_DIR, fname), os.path.join(CYPACKAGE_DIR, fname))",
          "63:         else:",
          "64:             shutil.copy(os.path.join(PYPACKAGE_DIR, fname), os.path.join(CYPACKAGE_DIR, fname + 'x'))",
          "66: def build_libraries():",
          "67:     \"\"\"",
          "68:     Prepare the capstone directory for a binary distribution or installation.",
          "69:     Builds shared libraries and copies header files.",
          "71:     Will use a src/ dir if one exists in the current directory, otherwise assumes it's in the repo",
          "72:     \"\"\"",
          "73:     cwd = os.getcwd()",
          "74:     clean_bins()",
          "75:     os.mkdir(HEADERS_DIR)",
          "76:     os.mkdir(LIBS_DIR)",
          "78:     # copy public headers",
          "79:     shutil.copytree(os.path.join(BUILD_DIR, 'include'), os.path.join(HEADERS_DIR, 'capstone'))",
          "81:     os.chdir(BUILD_DIR)",
          "83:     # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "84:     if SYSTEM == \"win32\":",
          "85:         # Windows build: this process requires few things:",
          "86:         #    - CMake + MSVC installed",
          "87:         #    - Run this command in an environment setup for MSVC",
          "88:         if not os.path.exists(\"build\"): os.mkdir(\"build\")",
          "89:         os.chdir(\"build\")",
          "90:         # Do not build tests & static library",
          "91:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "92:         os.system(\"nmake\")",
          "93:     elif SYSTEM == \"cygwin\":",
          "94:         if IS_64BITS:",
          "95:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "96:         else:",
          "97:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "99:     else:   # Unix",
          "100:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "102:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "103:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "104:     os.chdir(cwd)",
          "107: class custom_build(build):",
          "108:     def run(self):",
          "109:         log.info('Copying python sources')",
          "110:         copy_pysources()",
          "111:         log.info('Building C extensions')",
          "112:         build_libraries()",
          "113:         return build.run(self)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     packages     = ['capstone'],",
          "45:     name         = 'capstone',",
          "46:     version      = VERSION,",
          "48:     ext_modules  = ext_modules,",
          "49:     author       = 'Nguyen Anh Quynh',",
          "50:     author_email = 'aquynh@gmail.com',",
          "",
          "[Removed Lines]",
          "47:     cmdclass     = {'build_ext': build_ext},",
          "",
          "[Added Lines]",
          "132:     cmdclass     = {'build_ext': build_ext, 'build': custom_build},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:                 'License :: OSI Approved :: BSD License',",
          "55:                 'Programming Language :: Python :: 2',",
          "56:                 ],",
          "57: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     include_package_data=True,",
          "143:     package_data={",
          "144:         \"capstone\": [\"lib/*\", \"include/capstone/*\"],",
          "145:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}