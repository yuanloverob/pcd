{
  "cve_id": "CVE-2022-1706",
  "cve_desc": "A vulnerability was found in Ignition where ignition configs are accessible from unprivileged containers in VMs running on VMware products. This issue is only relevant in user environments where the Ignition config contains secrets. The highest threat from this vulnerability is to data confidentiality. Possible workaround is to not put secrets in the Ignition config.",
  "repo": "coreos/ignition",
  "patch_hash": "4b70b44b430ecf8377a276e89b5acd3a6957d4ea",
  "patch_info": {
    "commit_hash": "4b70b44b430ecf8377a276e89b5acd3a6957d4ea",
    "repo": "coreos/ignition",
    "commit_url": "https://github.com/coreos/ignition/commit/4b70b44b430ecf8377a276e89b5acd3a6957d4ea",
    "files": [
      "Makefile",
      "go.mod",
      "go.sum",
      "internal/main.go",
      "internal/platform/platform.go",
      "internal/providers/providers.go",
      "internal/providers/virtualbox/virtualbox.c",
      "internal/providers/virtualbox/virtualbox.go",
      "internal/providers/virtualbox/virtualbox.h",
      "internal/providers/vmware/ovf.go",
      "internal/providers/vmware/ovf_test.go",
      "internal/providers/vmware/vmware_amd64.go",
      "internal/providers/vmware/vmware_unsupported.go",
      "systemd/ignition-delete-config.service",
      "vendor/github.com/beevik/etree/.travis.yml",
      "vendor/github.com/beevik/etree/CONTRIBUTORS",
      "vendor/github.com/beevik/etree/LICENSE",
      "vendor/github.com/beevik/etree/README.md",
      "vendor/github.com/beevik/etree/RELEASE_NOTES.md",
      "vendor/github.com/beevik/etree/etree.go",
      "vendor/github.com/beevik/etree/go.mod",
      "vendor/github.com/beevik/etree/helpers.go",
      "vendor/github.com/beevik/etree/path.go",
      "vendor/github.com/vmware/vmw-ovflib/LICENSE",
      "vendor/github.com/vmware/vmw-ovflib/README",
      "vendor/github.com/vmware/vmw-ovflib/ovf.go",
      "vendor/modules.txt",
      "config/shared/errors/errors.go",
      "config/v3_4_experimental/types/url.go",
      "config/v3_4_experimental/types/url_test.go",
      "docs/configuration-v3_4_experimental.md",
      "docs/supported-platforms.md",
      "internal/providers/azure/azure.go",
      "internal/providers/virtualbox/virtualbox.go",
      "internal/resource/url.go",
      "internal/resource/url_test.go"
    ],
    "message": "Merge pull request #1350 from bgilbert/userdata\n\nDelete userdata from VirtualBox/VMware after Ignition completes",
    "before_after_code_files": [
      "go.mod||go.mod",
      "go.sum||go.sum",
      "internal/main.go||internal/main.go",
      "internal/platform/platform.go||internal/platform/platform.go",
      "internal/providers/providers.go||internal/providers/providers.go",
      "internal/providers/virtualbox/virtualbox.c||internal/providers/virtualbox/virtualbox.c",
      "internal/providers/virtualbox/virtualbox.go||internal/providers/virtualbox/virtualbox.go",
      "internal/providers/virtualbox/virtualbox.h||internal/providers/virtualbox/virtualbox.h",
      "internal/providers/vmware/ovf.go||internal/providers/vmware/ovf.go",
      "internal/providers/vmware/ovf_test.go||internal/providers/vmware/ovf_test.go",
      "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go",
      "internal/providers/vmware/vmware_unsupported.go||internal/providers/vmware/vmware_unsupported.go",
      "systemd/ignition-delete-config.service||systemd/ignition-delete-config.service",
      "vendor/github.com/beevik/etree/etree.go||vendor/github.com/beevik/etree/etree.go",
      "vendor/github.com/beevik/etree/go.mod||vendor/github.com/beevik/etree/go.mod",
      "vendor/github.com/beevik/etree/helpers.go||vendor/github.com/beevik/etree/helpers.go",
      "vendor/github.com/beevik/etree/path.go||vendor/github.com/beevik/etree/path.go",
      "vendor/github.com/vmware/vmw-ovflib/ovf.go||vendor/github.com/vmware/vmw-ovflib/ovf.go"
    ]
  },
  "patch_diff": {
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  cloud.google.com/go v0.58.0",
      "7:  cloud.google.com/go/storage v1.9.0",
      "8:  github.com/aws/aws-sdk-go v1.30.28",
      "9:  github.com/coreos/go-semver v0.3.0",
      "10:  github.com/coreos/go-systemd/v22 v22.0.0",
      "11:  github.com/coreos/vcontext v0.0.0-20211021162308-f1dbbca7bef4",
      "12:  github.com/google/renameio v0.1.0",
      "13:  github.com/google/uuid v1.1.1",
      "14:  github.com/pin/tftp v2.1.0+incompatible",
      "16:  github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace",
      "17:  github.com/stretchr/testify v1.7.0",
      "18:  github.com/vincent-petithory/dataurl v1.0.0",
      "19:  github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3",
      "21:  go.opencensus.io v0.22.5 // indirect",
      "22:  golang.org/x/net v0.0.0-20200602114024-627f9648deb9",
      "23:  golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d",
      "",
      "[Removed Lines]",
      "15:  github.com/smartystreets/goconvey v0.0.0-20190222223459-a17d461953aa // indirect",
      "20:  github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714",
      "",
      "[Added Lines]",
      "9:  github.com/beevik/etree v1.1.1-0.20200718192613-4a2f8b9d084c",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=",
      "41: github.com/aws/aws-sdk-go v1.30.28 h1:SaPM7dlmp7h3Lj1nJ4jdzOkTdom08+g20k7AU5heZYg=",
      "42: github.com/aws/aws-sdk-go v1.30.28/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=",
      "43: github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=",
      "44: github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=",
      "45: github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: github.com/beevik/etree v1.1.1-0.20200718192613-4a2f8b9d084c h1:uYq6BD31fkfeNKQmfLj7ODcEfkb5JLsKrXVSqgnfGg8=",
      "44: github.com/beevik/etree v1.1.1-0.20200718192613-4a2f8b9d084c/go.mod h1:0yGO2rna3S9DkITDWHY1bMtcY4IJ4w+4S+EooZUR0bE=",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115: github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=",
      "116: github.com/googleapis/gax-go/v2 v2.0.5 h1:sjZBwGj9Jlw33ImPtvFviGYvseOtDM7hkSKB7+Tv3SM=",
      "117: github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=",
      "120: github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=",
      "121: github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=",
      "122: github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=",
      "",
      "[Removed Lines]",
      "118: github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=",
      "119: github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "125: github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=",
      "126: github.com/jstemmer/go-junit-report v0.9.1 h1:6QPYqodiu3GuPL+7mfx+NwDdp2eTkp9IfEUpgAwUN0o=",
      "127: github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=",
      "130: github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=",
      "131: github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=",
      "132: github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=",
      "",
      "[Removed Lines]",
      "128: github.com/jtolds/gls v4.2.1+incompatible h1:fSuqC+Gmlu6l/ZYAoZzx2pyucC8Xza35fpRVWLVmUEE=",
      "129: github.com/jtolds/gls v4.2.1+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "140: github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=",
      "141: github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=",
      "142: github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=",
      "147: github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace h1:9PNP1jnUjRhfmGMlkXHjYPishpcw4jpSt/V/xYY3FMA=",
      "148: github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=",
      "149: github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=",
      "",
      "[Removed Lines]",
      "143: github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=",
      "144: github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=",
      "145: github.com/smartystreets/goconvey v0.0.0-20190222223459-a17d461953aa h1:E+gaaifzi2xF65PbDmuKI3PhLWY6G5opMLniFq8vmXA=",
      "146: github.com/smartystreets/goconvey v0.0.0-20190222223459-a17d461953aa/go.mod h1:2RVY1rIf+2J2o/IM9+vPq9RzmHDSseB7FoXiSNIUsoU=",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "155: github.com/vincent-petithory/dataurl v1.0.0/go.mod h1:FHafX5vmDzyP+1CQATJn7WFKc9CvnvxyvZy6I1MrG/U=",
      "156: github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3 h1:v6jG/tdl4O07LNVp74Nt7/OyL+1JsIW1M2f/nSvQheY=",
      "157: github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3/go.mod h1:CSBTxrhePCm0cmXNKDGeu+6bOQzpaEklfCqEpn89JWk=",
      "160: github.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=",
      "161: github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=",
      "162: go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=",
      "",
      "[Removed Lines]",
      "158: github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714 h1:wJqF3m4Tj8I4beSi6vGxIyNtsq6wwGqhK3UnA99ltL4=",
      "159: github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714/go.mod h1:jiPk45kn7klhByRvUq5i2vo1RtHKBHj+iWGFpxbXuuI=",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "internal/main.go||internal/main.go": [
      "File: internal/main.go -> internal/main.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: )",
      "43: func main() {",
      "45:   ignitionApplyMain()",
      "48:   ignitionMain()",
      "49:  }",
      "50: }",
      "",
      "[Removed Lines]",
      "44:  if filepath.Base(os.Args[0]) == \"ignition-apply\" {",
      "46:  } else {",
      "",
      "[Added Lines]",
      "44:  switch filepath.Base(os.Args[0]) {",
      "45:  case \"ignition-apply\":",
      "47:  case \"ignition-rmcfg\":",
      "48:   ignitionRmCfgMain()",
      "49:  default:",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "187:   os.Exit(1)",
      "188:  }",
      "189: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "194: func ignitionRmCfgMain() {",
      "195:  flags := struct {",
      "196:   logToStdout bool",
      "197:   platform    string",
      "198:   version     bool",
      "199:  }{}",
      "200:  pflag.StringVar(&flags.platform, \"platform\", \"\", fmt.Sprintf(\"current platform. %v\", platform.Names()))",
      "201:  pflag.BoolVar(&flags.logToStdout, \"log-to-stdout\", false, \"log to stdout instead of the system log\")",
      "202:  pflag.BoolVar(&flags.version, \"version\", false, \"print the version and exit\")",
      "203:  pflag.Usage = func() {",
      "204:   fmt.Fprintf(pflag.CommandLine.Output(), \"Usage: %s [options]\\n\", os.Args[0])",
      "205:   fmt.Fprintf(pflag.CommandLine.Output(), \"Options:\\n\")",
      "206:   pflag.PrintDefaults()",
      "207:  }",
      "208:  pflag.Parse()",
      "210:  if flags.version {",
      "211:   fmt.Printf(\"%s\\n\", version.String)",
      "212:   return",
      "213:  }",
      "215:  if pflag.NArg() != 0 {",
      "216:   pflag.Usage()",
      "217:   os.Exit(2)",
      "218:  }",
      "220:  if flags.platform == \"\" {",
      "221:   fmt.Fprint(os.Stderr, \"'--platform' must be provided\\n\")",
      "222:   os.Exit(2)",
      "223:  }",
      "225:  logger := log.New(flags.logToStdout)",
      "226:  defer logger.Close()",
      "228:  logger.Info(version.String)",
      "230:  platformConfig := platform.MustGet(flags.platform)",
      "231:  fetcher, err := platformConfig.NewFetcherFunc()(&logger)",
      "232:  if err != nil {",
      "233:   logger.Crit(\"failed to generate fetcher: %s\", err)",
      "234:   os.Exit(3)",
      "235:  }",
      "237:  if err := platformConfig.DelConfig(&fetcher); err != nil {",
      "238:   logger.Crit(\"couldn't delete config: %s\", err)",
      "239:   os.Exit(1)",
      "240:  }",
      "242:  logger.Info(\"Successfully deleted config\")",
      "243: }",
      "",
      "---------------"
    ],
    "internal/platform/platform.go||internal/platform/platform.go": [
      "File: internal/platform/platform.go -> internal/platform/platform.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: package platform",
      "17: import (",
      "18:  \"fmt\"",
      "20:  \"github.com/coreos/ignition/v2/internal/log\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:  \"errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:  \"github.com/coreos/ignition/v2/internal/resource\"",
      "45: )",
      "48: type Config struct {",
      "49:  name       string",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: var (",
      "49:  ErrCannotDelete = errors.New(\"cannot delete config on this platform\")",
      "50: )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "51:  init       providers.FuncInit",
      "52:  newFetcher providers.FuncNewFetcher",
      "53:  status     providers.FuncPostStatus",
      "54: }",
      "56: func (c Config) Name() string {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  delConfig  providers.FuncDelConfig",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:  return nil",
      "94: }",
      "96: var configs = registry.Create(\"platform configs\")",
      "98: func init() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102: func (c Config) DelConfig(f *resource.Fetcher) error {",
      "103:  if c.delConfig != nil {",
      "104:   return c.delConfig(f)",
      "105:  } else {",
      "106:   return ErrCannotDelete",
      "107:  }",
      "108: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "172:   fetch: qemu.FetchConfig,",
      "173:  })",
      "174:  configs.Register(Config{",
      "177:  })",
      "178:  configs.Register(Config{",
      "181:  })",
      "182:  configs.Register(Config{",
      "183:   name:  \"vultr\",",
      "",
      "[Removed Lines]",
      "175:   name:  \"virtualbox\",",
      "176:   fetch: virtualbox.FetchConfig,",
      "179:   name:  \"vmware\",",
      "180:   fetch: vmware.FetchConfig,",
      "",
      "[Added Lines]",
      "189:   name:      \"virtualbox\",",
      "190:   fetch:     virtualbox.FetchConfig,",
      "191:   delConfig: virtualbox.DelConfig,",
      "194:   name:      \"vmware\",",
      "195:   fetch:     vmware.FetchConfig,",
      "196:   delConfig: vmware.DelConfig,",
      "",
      "---------------"
    ],
    "internal/providers/providers.go||internal/providers/providers.go": [
      "File: internal/providers/providers.go -> internal/providers/providers.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: type FuncInit func(f *resource.Fetcher) error",
      "33: type FuncNewFetcher func(logger *log.Logger) (resource.Fetcher, error)",
      "34: type FuncPostStatus func(stageName string, f resource.Fetcher, e error) error",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: type FuncDelConfig func(f *resource.Fetcher) error",
      "",
      "---------------"
    ],
    "internal/providers/virtualbox/virtualbox.c||internal/providers/virtualbox/virtualbox.c": [
      "File: internal/providers/virtualbox/virtualbox.c -> internal/providers/virtualbox/virtualbox.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include <errno.h>",
      "25: #include \"virtualbox.h\"",
      "27: static void _cleanup_close(int *fd) {",
      "28:  if (*fd != -1) {",
      "29:   close(*fd);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #define GUEST_PROP_FN_GET_PROP 1",
      "29: #define GUEST_PROP_FN_DEL_PROP 4",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86: }",
      "88: static int get_prop(int fd, uint32_t client_id, const char *name, void **value, size_t *size) {",
      "90:  size_t msg_size = sizeof(struct vbg_ioctl_hgcm_call) + 4 * sizeof(struct vmmdev_hgcm_function_parameter64);",
      "91:  struct vbg_ioctl_hgcm_call _cleanup_free_ *msg = calloc(1, msg_size);",
      "93:  init_header(&msg->hdr, msg_size - sizeof(msg->hdr), msg_size - sizeof(msg->hdr));",
      "94:  msg->client_id = client_id;",
      "96:  msg->timeout_ms = -1;  // inf",
      "97:  msg->interruptible = 1;",
      "98:  msg->parm_count = 4;",
      "",
      "[Removed Lines]",
      "95:  msg->function = 1;     // GUEST_PROP_FN_GET_PROP",
      "",
      "[Added Lines]",
      "102:  msg->function = GUEST_PROP_FN_GET_PROP;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "147:  }",
      "148: }",
      "150: static int disconnect(int fd, uint32_t client_id) {",
      "151:  struct vbg_ioctl_hgcm_disconnect msg = {",
      "152:   .u = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157: static int del_prop(int fd, uint32_t client_id, const char *name) {",
      "162:  size_t msg_size = sizeof(struct vbg_ioctl_hgcm_call) + sizeof(struct vmmdev_hgcm_function_parameter64);",
      "163:  struct vbg_ioctl_hgcm_call _cleanup_free_ *msg = calloc(1, msg_size);",
      "165:  init_header(&msg->hdr, msg_size - sizeof(msg->hdr), msg_size - sizeof(msg->hdr));",
      "166:  msg->client_id = client_id;",
      "167:  msg->function = GUEST_PROP_FN_DEL_PROP;",
      "168:  msg->timeout_ms = -1;  // inf",
      "169:  msg->interruptible = 1;",
      "170:  msg->parm_count = 1;",
      "173:  struct vmmdev_hgcm_function_parameter64 *params = (void *) (msg + 1);",
      "175:  params[0].type = VMMDEV_HGCM_PARM_TYPE_LINADDR_IN;",
      "176:  params[0].u.pointer.size = strlen(name) + 1;",
      "177:  params[0].u.pointer.u.linear_addr = (uintptr_t) name;",
      "180:  if (ioctl(fd, VBG_IOCTL_HGCM_CALL_64(msg_size), msg)) {",
      "181:   return VERR_GENERAL_FAILURE;",
      "182:  }",
      "183:  if (msg->hdr.rc != VINF_SUCCESS) {",
      "184:   return msg->hdr.rc;",
      "185:  }",
      "186:  return VINF_SUCCESS;",
      "187: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "162:  return msg.hdr.rc;",
      "163: }",
      "167:  errno = 0;",
      "",
      "[Removed Lines]",
      "165: int virtualbox_get_guest_property(char *name, void **value, size_t *size) {",
      "",
      "[Added Lines]",
      "204: static int start_connection(uint32_t *client_id) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "179:  }",
      "184:  if (ret != VINF_SUCCESS) {",
      "185:   return ret;",
      "186:  }",
      "189:  ret = get_prop(fd, client_id, name, value, size);",
      "190:  if (ret != VINF_SUCCESS) {",
      "",
      "[Removed Lines]",
      "182:  uint32_t client_id;",
      "183:  ret = connect(fd, &client_id);",
      "",
      "[Added Lines]",
      "221:  ret = connect(fd, client_id);",
      "227:  ret = fd;",
      "228:  fd = -1;",
      "229:  return ret;",
      "230: }",
      "232: int virtualbox_get_guest_property(char *name, void **value, size_t *size) {",
      "234:  uint32_t client_id;",
      "235:  int ret = start_connection(&client_id);",
      "236:  if (ret < 0) {",
      "237:   return ret;",
      "238:  }",
      "239:  int _cleanup_close_ fd = ret;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "206:  errno = 0;",
      "207:  return 0;",
      "208: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: int virtualbox_delete_guest_property(char *name) {",
      "265:  uint32_t client_id;",
      "266:  int ret = start_connection(&client_id);",
      "267:  if (ret < 0) {",
      "268:   return ret;",
      "269:  }",
      "270:  int _cleanup_close_ fd = ret;",
      "273:  ret = del_prop(fd, client_id, name);",
      "274:  if (ret != VINF_SUCCESS) {",
      "275:   disconnect(fd, client_id);",
      "276:   return ret;",
      "277:  }",
      "280:  ret = disconnect(fd, client_id);",
      "281:  if (ret != VINF_SUCCESS) {",
      "284:   return ret;",
      "285:  }",
      "288:  errno = 0;",
      "289:  return 0;",
      "290: }",
      "",
      "---------------"
    ],
    "internal/providers/virtualbox/virtualbox.go||internal/providers/virtualbox/virtualbox.go": [
      "File: internal/providers/virtualbox/virtualbox.go -> internal/providers/virtualbox/virtualbox.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:  return util.ParseConfig(f.Logger, config)",
      "70: }",
      "72: func fetchProperty(name string) ([]byte, error) {",
      "73:  cName := C.CString(name)",
      "74:  defer C.free(unsafe.Pointer(cName))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: func DelConfig(f *resource.Fetcher) error {",
      "73:  f.Logger.Info(\"deleting Ignition config from VirtualBox guest property\")",
      "74:  err := deleteProperty(configEncodingProperty)",
      "75:  if err != nil {",
      "76:   return err",
      "77:  }",
      "78:  err = deleteProperty(configProperty)",
      "79:  if err != nil {",
      "80:   return err",
      "81:  }",
      "82:  return nil",
      "83: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:  }",
      "97:  return s[0:len], nil",
      "98: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113: func deleteProperty(name string) error {",
      "114:  cName := C.CString(name)",
      "115:  defer C.free(unsafe.Pointer(cName))",
      "117:  ret, errno := C.virtualbox_delete_guest_property(cName)",
      "118:  if ret != C.VINF_SUCCESS {",
      "119:   if ret == C.VERR_GENERAL_FAILURE && errno != nil {",
      "120:    return fmt.Errorf(\"deleting VirtualBox guest property %q: %w\", name, errno)",
      "121:   }",
      "122:   if ret == C.VERR_PERMISSION_DENIED {",
      "123:    return fmt.Errorf(\"deleting VirtualBox guest property %q: permission denied; is the property read-only?\", name)",
      "124:   }",
      "126:   return fmt.Errorf(\"deleting VirtualBox guest property %q: error %d\", name, ret)",
      "127:  }",
      "128:  return nil",
      "129: }",
      "",
      "---------------"
    ],
    "internal/providers/virtualbox/virtualbox.h||internal/providers/virtualbox/virtualbox.h": [
      "File: internal/providers/virtualbox/virtualbox.h -> internal/providers/virtualbox/virtualbox.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #define IGNITION_VIRTUALBOX_H",
      "18: int virtualbox_get_guest_property(char *name, void **value, size_t *size);",
      "20: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: int virtualbox_delete_guest_property(char *name);",
      "",
      "---------------"
    ],
    "internal/providers/vmware/ovf.go||internal/providers/vmware/ovf.go": [
      "File: internal/providers/vmware/ovf.go -> internal/providers/vmware/ovf.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package vmware",
      "19: import (",
      "20:  \"encoding/xml\"",
      "21:  \"fmt\"",
      "23:  \"github.com/beevik/etree\"",
      "24: )",
      "26: const (",
      "27:  XMLNS = \"http://schemas.dmtf.org/ovf/environment/1\"",
      "28: )",
      "30: type environment struct {",
      "31:  Platform   platform   `xml:\"PlatformSection\"`",
      "32:  Properties []property `xml:\"PropertySection>Property\"`",
      "33: }",
      "35: type platform struct {",
      "36:  Kind    string `xml:\"Kind\"`",
      "37:  Version string `xml:\"Version\"`",
      "38:  Vendor  string `xml:\"Vendor\"`",
      "39:  Locale  string `xml:\"Locale\"`",
      "40: }",
      "42: type property struct {",
      "43:  Key   string `xml:\"key,attr\"`",
      "44:  Value string `xml:\"value,attr\"`",
      "45: }",
      "47: type OvfEnvironment struct {",
      "48:  Platform   platform",
      "49:  Properties map[string]string",
      "50: }",
      "52: func ReadOvfEnvironment(doc []byte) (OvfEnvironment, error) {",
      "53:  var env environment",
      "54:  if err := xml.Unmarshal(doc, &env); err != nil {",
      "55:   return OvfEnvironment{}, err",
      "56:  }",
      "58:  dict := make(map[string]string)",
      "59:  for _, p := range env.Properties {",
      "60:   dict[p.Key] = p.Value",
      "61:  }",
      "62:  return OvfEnvironment{Properties: dict, Platform: env.Platform}, nil",
      "63: }",
      "66: func DeleteOvfProperties(from []byte, props []string) ([]byte, bool, error) {",
      "68:  doc := etree.NewDocument()",
      "69:  if err := doc.ReadFromBytes(from); err != nil {",
      "70:   return nil, false, fmt.Errorf(\"parsing OVF environment: %w\", err)",
      "71:  }",
      "74:  drops := make(map[string]struct{})",
      "75:  for _, prop := range props {",
      "76:   drops[prop] = struct{}{}",
      "77:  }",
      "82:  removed := false",
      "83:  for _, parent := range doc.FindElements(\"/Environment[namespace-uri()='\" + XMLNS + \"']/PropertySection[namespace-uri()='\" + XMLNS + \"']\") {",
      "85:   var remove []*etree.Element",
      "86:   for _, el := range parent.ChildElements() {",
      "87:    if el.NamespaceURI() != XMLNS {",
      "88:     continue",
      "89:    }",
      "91:    for _, attr := range el.Attr {",
      "92:     if attr.NamespaceURI() != XMLNS {",
      "93:      continue",
      "94:     }",
      "97:     if attr.Key == \"key\" {",
      "98:      if _, drop := drops[attr.Value]; drop {",
      "99:       remove = append(remove, el)",
      "100:       removed = true",
      "101:      }",
      "102:      break",
      "103:     }",
      "104:    }",
      "105:   }",
      "107:   for _, el := range remove {",
      "108:    parent.RemoveChild(el)",
      "109:   }",
      "110:  }",
      "114:  if !removed {",
      "115:   return from, removed, nil",
      "116:  }",
      "118:  to, err := doc.WriteToBytes()",
      "119:  if err != nil {",
      "120:   return nil, false, fmt.Errorf(\"serializing OVF environment: %w\", err)",
      "121:  }",
      "122:  return to, removed, nil",
      "123: }",
      "",
      "---------------"
    ],
    "internal/providers/vmware/ovf_test.go||internal/providers/vmware/ovf_test.go": [
      "File: internal/providers/vmware/ovf_test.go -> internal/providers/vmware/ovf_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package vmware",
      "19: import (",
      "20:  \"strings\"",
      "21:  \"testing\"",
      "23:  \"github.com/stretchr/testify/assert\"",
      "24: )",
      "26: var data_vsphere = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "27: <Environment",
      "28:      xmlns=\"http://schemas.dmtf.org/ovf/environment/1\"",
      "29:      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
      "30:      xmlns:oe=\"http://schemas.dmtf.org/ovf/environment/1\"",
      "31:      xmlns:ve=\"http://www.vmware.com/schema/ovfenv\"",
      "32:      oe:id=\"\"",
      "33:      ve:vCenterId=\"vm-12345\">",
      "34:    <PlatformSection>",
      "35:       <Kind>VMware ESXi</Kind>",
      "36:       <Version>5.5.0</Version>",
      "37:       <Vendor>VMware, Inc.</Vendor>",
      "38:       <Locale>en</Locale>",
      "39:    </PlatformSection>",
      "40:    <PropertySection>",
      "41:          <Property oe:key=\"foo\" oe:value=\"42\"/>",
      "42:          <Property oe:key=\"bar\" oe:value=\"0\"/>",
      "43:    </PropertySection>",
      "44:    <ve:EthernetAdapterSection>",
      "45:       <ve:Adapter ve:mac=\"00:00:00:00:00:00\" ve:network=\"foo\" ve:unitNumber=\"7\"/>",
      "46:    </ve:EthernetAdapterSection>",
      "47: </Environment>`)",
      "49: var data_vapprun = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "50: <Environment xmlns=\"http://schemas.dmtf.org/ovf/environment/1\"",
      "51:      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
      "52:      xmlns:oe=\"http://schemas.dmtf.org/ovf/environment/1\"",
      "53:      oe:id=\"CoreOS-vmw\">",
      "54:    <PlatformSection>",
      "55:       <Kind>vapprun</Kind>",
      "56:       <Version>1.0</Version>",
      "57:       <Vendor>VMware, Inc.</Vendor>",
      "58:       <Locale>en_US</Locale>",
      "59:    </PlatformSection>",
      "60:    <PropertySection>",
      "61:       <Property oe:key=\"foo\" oe:value=\"42\"/>",
      "62:       <Property oe:key=\"bar\" oe:value=\"0\"/>",
      "63:       <Property oe:key=\"guestinfo.user_data.url\" oe:value=\"https://gist.githubusercontent.com/sigma/5a64aac1693da9ca70d2/raw/plop.yaml\"/>",
      "64:       <Property oe:key=\"guestinfo.user_data.doc\" oe:value=\"\"/>",
      "65:       <Property oe:key=\"guestinfo.meta_data.url\" oe:value=\"\"/>",
      "66:       <Property oe:key=\"guestinfo.meta_data.doc\" oe:value=\"\"/>",
      "67:    </PropertySection>",
      "68: </Environment>`)",
      "70: var data_delete_prop_simple = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "71: <Environment xmlns=\"http://schemas.dmtf.org/ovf/environment/1\" xmlns:a=\"http://schemas.dmtf.org/ovf/environment/1\">",
      "72:    <Invalid>",
      "73:      <InvalidKey>garbage!</InvalidKey>",
      "74:    </Invalid>",
      "75:    <PropertySection>",
      "76:       <!-- XML attributes don't default to the default namespace -->",
      "77:       <Property a:key=\"guestinfo.ignition.config.data\" value=\"remove\"/>",
      "78:       <Property a:key=\"guestinfo.ignition.config.data.encoding\" value=\"remove\"/>",
      "79:    </PropertySection>",
      "80: </Environment>`)",
      "82: var data_delete_prop_complex = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "83: <Environment xmlns=\"http://schemas.dmtf.org/ovf/environment/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:oe=\"http://schemas.dmtf.org/ovf/environment/1\" xmlns:ex=\"http://example.com/xmlns\" oe:id=\"ignition-vmw\">",
      "84:    <PlatformSection>",
      "85:       <Kind>vapprun</Kind>",
      "86:       <Version>1.0</Version>",
      "87:       <Vendor>VMware, Inc.</Vendor>",
      "88:       <Locale>en_US</Locale>",
      "89:    </PlatformSection>",
      "90:    <Invalid>",
      "91:      <InvalidKey>garbage!</InvalidKey>",
      "92:    </Invalid>",
      "93:    <PropertySection>",
      "94:       <Property ex:key=\"guestinfo.ignition.config.data.encoding\" oe:value=\"keep\"/>",
      "95:       <ex:Property oe:key=\"guestinfo.ignition.config.data.encoding\" oe:value=\"keep\"/>",
      "96:       <Property oe:key=\"guestinfo.ignition.config.data\" oe:value=\"remove\"/>",
      "97:       <Property oe:key=\"guestinfo.ignition.config.data.encoding\" oe:value=\"remove\"/>",
      "98:       <Property oe:key=\"bar\" oe:value=\"0\"/>",
      "99:    </PropertySection>",
      "100:    <ex:PropertySection>",
      "101:       <Property oe:key=\"guestinfo.ignition.config.data\" oe:value=\"keep\"/>",
      "102:       <Property oe:key=\"guestinfo.ignition.config.data.encoding\" oe:value=\"keep\"/>",
      "103:    </ex:PropertySection>",
      "104: </Environment>`)",
      "106: func TestOvfEnvProperties(t *testing.T) {",
      "107:  var testOne = func(env_str []byte) {",
      "108:   env, err := ReadOvfEnvironment(env_str)",
      "109:   assert.Nil(t, err)",
      "110:   props := env.Properties",
      "112:   var val string",
      "113:   var ok bool",
      "114:   val, ok = props[\"foo\"]",
      "115:   assert.True(t, ok)",
      "116:   assert.Equal(t, val, \"42\")",
      "118:   val, ok = props[\"bar\"]",
      "119:   assert.True(t, ok)",
      "120:   assert.Equal(t, val, \"0\")",
      "121:  }",
      "123:  testOne(data_vapprun)",
      "124:  testOne(data_vsphere)",
      "125: }",
      "127: func TestOvfEnvPlatform(t *testing.T) {",
      "128:  env, err := ReadOvfEnvironment(data_vsphere)",
      "129:  assert.Nil(t, err)",
      "130:  platform := env.Platform",
      "132:  assert.Equal(t, platform.Kind, \"VMware ESXi\")",
      "133:  assert.Equal(t, platform.Version, \"5.5.0\")",
      "134:  assert.Equal(t, platform.Vendor, \"VMware, Inc.\")",
      "135:  assert.Equal(t, platform.Locale, \"en\")",
      "136: }",
      "138: func TestVappRunUserDataUrl(t *testing.T) {",
      "139:  env, err := ReadOvfEnvironment(data_vapprun)",
      "140:  assert.Nil(t, err)",
      "141:  props := env.Properties",
      "143:  var val string",
      "144:  var ok bool",
      "146:  val, ok = props[\"guestinfo.user_data.url\"]",
      "147:  assert.True(t, ok)",
      "148:  assert.Equal(t, val, \"https://gist.githubusercontent.com/sigma/5a64aac1693da9ca70d2/raw/plop.yaml\")",
      "149: }",
      "151: func TestInvalidData(t *testing.T) {",
      "152:  _, err := ReadOvfEnvironment(append(data_vsphere, []byte(\"garbage\")...))",
      "153:  assert.Nil(t, err)",
      "154: }",
      "156: func TestDeleteProps(t *testing.T) {",
      "157:  for _, sample := range [][]byte{data_delete_prop_simple, data_delete_prop_complex, data_vapprun} {",
      "158:   var expectedLines []string",
      "159:   expectedDelete := false",
      "160:   for _, line := range strings.Split(string(sample), \"\\n\") {",
      "161:    if strings.Contains(line, \"remove\") {",
      "163:     startSkip := strings.IndexAny(line, \"<>\")",
      "164:     endSkip := strings.LastIndexAny(line, \"<>\")",
      "165:     line = line[:startSkip] + line[endSkip+1:]",
      "166:     expectedDelete = true",
      "167:    }",
      "168:    expectedLines = append(expectedLines, line)",
      "169:   }",
      "170:   expected := strings.Join(expectedLines, \"\\n\")",
      "172:   result, deleted, err := DeleteOvfProperties(sample, []string{\"guestinfo.ignition.config.data\", \"guestinfo.ignition.config.data.encoding\"})",
      "173:   assert.Nil(t, err)",
      "174:   assert.Equal(t, expected, string(result))",
      "175:   assert.Equal(t, expectedDelete, deleted)",
      "176:  }",
      "177: }",
      "",
      "---------------"
    ],
    "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go": [
      "File: internal/providers/vmware/vmware_amd64.go -> internal/providers/vmware/vmware_amd64.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: package vmware",
      "20: import (",
      "21:  \"github.com/coreos/ignition/v2/config/v3_4_experimental/types\"",
      "22:  \"github.com/coreos/ignition/v2/internal/providers\"",
      "23:  \"github.com/coreos/ignition/v2/internal/providers/util\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:  \"fmt\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:  \"github.com/coreos/vcontext/report\"",
      "27:  \"github.com/vmware/vmw-guestinfo/rpcvmx\"",
      "28:  \"github.com/vmware/vmw-guestinfo/vmcheck\"",
      "30: )",
      "32: func FetchConfig(f *resource.Fetcher) (types.Config, report.Report, error) {",
      "",
      "[Removed Lines]",
      "29:  \"github.com/vmware/vmw-ovflib\"",
      "",
      "[Added Lines]",
      "31: )",
      "33: const (",
      "34:  GUESTINFO_OVF               = \"ovfenv\"",
      "35:  GUESTINFO_USERDATA          = \"ignition.config.data\"",
      "36:  GUESTINFO_USERDATA_ENCODING = \"ignition.config.data.encoding\"",
      "38:  GUESTINFO_DELETED_USERDATA          = \"e30K\"",
      "39:  GUESTINFO_DELETED_USERDATA_ENCODING = \"base64\"",
      "41:  OVF_PREFIX            = \"guestinfo.\"",
      "42:  OVF_USERDATA          = OVF_PREFIX + GUESTINFO_USERDATA",
      "43:  OVF_USERDATA_ENCODING = OVF_PREFIX + GUESTINFO_USERDATA_ENCODING",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:  var ovfData string",
      "58:  var ovfEncoding string",
      "61:  if err != nil {",
      "62:   f.Logger.Warning(\"failed to fetch ovfenv: %v. Continuing...\", err)",
      "63:  } else if ovfEnv != \"\" {",
      "64:   f.Logger.Debug(\"using OVF environment from guestinfo\")",
      "66:   if err != nil {",
      "67:    f.Logger.Warning(\"failed to parse OVF environment: %v. Continuing...\", err)",
      "68:   }",
      "72:  }",
      "75:  if err != nil {",
      "76:   f.Logger.Debug(\"failed to fetch config: %v\", err)",
      "77:   return config{}, err",
      "78:  }",
      "81:  if err != nil {",
      "82:   f.Logger.Debug(\"failed to fetch config encoding: %v\", err)",
      "83:   return config{}, err",
      "",
      "[Removed Lines]",
      "60:  ovfEnv, err := info.String(\"ovfenv\", \"\")",
      "65:   env, err := ovf.ReadEnvironment([]byte(ovfEnv))",
      "70:   ovfData = env.Properties[\"guestinfo.ignition.config.data\"]",
      "71:   ovfEncoding = env.Properties[\"guestinfo.ignition.config.data.encoding\"]",
      "74:  data, err := info.String(\"ignition.config.data\", ovfData)",
      "80:  encoding, err := info.String(\"ignition.config.data.encoding\", ovfEncoding)",
      "",
      "[Added Lines]",
      "74:  ovfEnv, err := info.String(GUESTINFO_OVF, \"\")",
      "79:   env, err := ReadOvfEnvironment([]byte(ovfEnv))",
      "84:   ovfData = env.Properties[OVF_USERDATA]",
      "85:   ovfEncoding = env.Properties[OVF_USERDATA_ENCODING]",
      "88:  data, err := info.String(GUESTINFO_USERDATA, ovfData)",
      "94:  encoding, err := info.String(GUESTINFO_USERDATA_ENCODING, ovfEncoding)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "88:   encoding: encoding,",
      "89:  }, nil",
      "90: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106: func DelConfig(f *resource.Fetcher) error {",
      "107:  info := rpcvmx.NewConfig()",
      "110:  orig, err := info.String(GUESTINFO_USERDATA, GUESTINFO_DELETED_USERDATA)",
      "111:  if err != nil {",
      "112:   return fmt.Errorf(\"getting config property: %w\", err)",
      "113:  }",
      "114:  if orig != GUESTINFO_DELETED_USERDATA {",
      "117:   f.Logger.Info(\"deleting config from guestinfo properties\")",
      "118:   if err := info.SetString(GUESTINFO_USERDATA, GUESTINFO_DELETED_USERDATA); err != nil {",
      "119:    return fmt.Errorf(\"replacing config: %w\", err)",
      "120:   }",
      "123:   origEncoding, err := info.String(GUESTINFO_USERDATA_ENCODING, \"\")",
      "124:   if err != nil {",
      "125:    return fmt.Errorf(\"getting config encoding property: %w\", err)",
      "126:   }",
      "127:   if origEncoding != GUESTINFO_DELETED_USERDATA_ENCODING {",
      "128:    if err := info.SetString(GUESTINFO_USERDATA_ENCODING, GUESTINFO_DELETED_USERDATA_ENCODING); err != nil {",
      "129:     return fmt.Errorf(\"replacing config encoding: %w\", err)",
      "130:    }",
      "131:   }",
      "132:  }",
      "134:  ovfEnv, err := info.String(GUESTINFO_OVF, \"\")",
      "135:  if err != nil {",
      "138:   return fmt.Errorf(\"reading OVF environment: %w\", err)",
      "139:  }",
      "140:  if ovfEnv != \"\" {",
      "141:   prunedData, didPrune, err := DeleteOvfProperties([]byte(ovfEnv), []string{OVF_USERDATA, OVF_USERDATA_ENCODING})",
      "142:   if err != nil {",
      "143:    return fmt.Errorf(\"deleting OVF properties: %w\", err)",
      "144:   }",
      "146:   if didPrune {",
      "147:    f.Logger.Info(\"deleting config from OVF environment\")",
      "148:    if err := info.SetString(GUESTINFO_OVF, string(prunedData)); err != nil {",
      "149:     return fmt.Errorf(\"replacing OVF environment: %w\", err)",
      "150:    }",
      "151:   }",
      "152:  }",
      "154:  return nil",
      "155: }",
      "",
      "---------------"
    ],
    "internal/providers/vmware/vmware_unsupported.go||internal/providers/vmware/vmware_unsupported.go": [
      "File: internal/providers/vmware/vmware_unsupported.go -> internal/providers/vmware/vmware_unsupported.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: func FetchConfig(_ *resource.Fetcher) (types.Config, report.Report, error) {",
      "33:  return types.Config{}, report.Report{}, errors.New(\"vmware provider is not supported on this architecture\")",
      "34: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: func DelConfig(_ *resource.Fetcher) error {",
      "37:  return errors.New(\"vmware provider is not supported on this architecture\")",
      "38: }",
      "",
      "---------------"
    ],
    "systemd/ignition-delete-config.service||systemd/ignition-delete-config.service": [
      "File: systemd/ignition-delete-config.service -> systemd/ignition-delete-config.service",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: [Unit]",
      "2: Description=Ignition (delete config)",
      "3: Documentation=https://coreos.github.io/ignition/",
      "5: ConditionFirstBoot=true",
      "6: ConditionPathExists=/run/ignition.env",
      "7: ConditionKernelCommandLine=|ignition.platform.id=virtualbox",
      "8: ConditionKernelCommandLine=|ignition.platform.id=vmware",
      "10: DefaultDependencies=no",
      "11: # Run before any user services to prevent potential config leaks",
      "12: Before=sysinit.target",
      "14: OnFailure=emergency.target",
      "15: OnFailureJobMode=isolate",
      "17: [Service]",
      "18: Type=oneshot",
      "19: EnvironmentFile=/run/ignition.env",
      "20: ExecStart=/usr/libexec/ignition-rmcfg --platform=${PLATFORM_ID}",
      "21: RemainAfterExit=yes",
      "23: [Install]",
      "24: # Not RequiredBy, since we want to allow the unit to be masked",
      "25: WantedBy=sysinit.target",
      "",
      "---------------"
    ],
    "vendor/github.com/beevik/etree/etree.go||vendor/github.com/beevik/etree/etree.go": [
      "File: vendor/github.com/beevik/etree/etree.go -> vendor/github.com/beevik/etree/etree.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: package etree",
      "9: import (",
      "10:  \"bufio\"",
      "11:  \"bytes\"",
      "12:  \"encoding/xml\"",
      "13:  \"errors\"",
      "14:  \"io\"",
      "15:  \"os\"",
      "16:  \"sort\"",
      "17:  \"strings\"",
      "18: )",
      "20: const (",
      "23:  NoIndent = -1",
      "24: )",
      "27: var ErrXML = errors.New(\"etree: invalid XML format\")",
      "31: type ReadSettings struct {",
      "33:  CharsetReader func(charset string, input io.Reader) (io.Reader, error)",
      "37:  Permissive bool",
      "40:  Entity map[string]string",
      "41: }",
      "44: func newReadSettings() ReadSettings {",
      "45:  return ReadSettings{",
      "46:   CharsetReader: func(label string, input io.Reader) (io.Reader, error) {",
      "47:    return input, nil",
      "48:   },",
      "49:   Permissive: false,",
      "50:  }",
      "51: }",
      "54: func (s *ReadSettings) dup() ReadSettings {",
      "55:  var entityCopy map[string]string",
      "56:  if s.Entity != nil {",
      "57:   entityCopy = make(map[string]string)",
      "58:   for k, v := range s.Entity {",
      "59:    entityCopy[k] = v",
      "60:   }",
      "61:  }",
      "62:  return ReadSettings{",
      "63:   CharsetReader: s.CharsetReader,",
      "64:   Permissive:    s.Permissive,",
      "65:   Entity:        entityCopy,",
      "66:  }",
      "67: }",
      "71: type WriteSettings struct {",
      "74:  CanonicalEndTags bool",
      "79:  CanonicalText bool",
      "84:  CanonicalAttrVal bool",
      "89:  UseCRLF bool",
      "90: }",
      "93: func newWriteSettings() WriteSettings {",
      "94:  return WriteSettings{",
      "95:   CanonicalEndTags: false,",
      "96:   CanonicalText:    false,",
      "97:   CanonicalAttrVal: false,",
      "98:   UseCRLF:          false,",
      "99:  }",
      "100: }",
      "103: func (s *WriteSettings) dup() WriteSettings {",
      "104:  return *s",
      "105: }",
      "110: type Token interface {",
      "111:  Parent() *Element",
      "112:  Index() int",
      "113:  dup(parent *Element) Token",
      "114:  setParent(parent *Element)",
      "115:  setIndex(index int)",
      "116:  writeTo(w *bufio.Writer, s *WriteSettings)",
      "117: }",
      "129: type Document struct {",
      "130:  Element",
      "131:  ReadSettings  ReadSettings",
      "132:  WriteSettings WriteSettings",
      "133: }",
      "136: type Element struct {",
      "137:  Space, Tag string   // namespace prefix and tag",
      "138:  Attr       []Attr   // key-value attribute pairs",
      "139:  Child      []Token  // child tokens (elements, comments, etc.)",
      "140:  parent     *Element // parent element",
      "141:  index      int      // token index in parent's children",
      "142: }",
      "145: type Attr struct {",
      "146:  Space, Key string   // The attribute's namespace prefix and key",
      "147:  Value      string   // The attribute value string",
      "148:  element    *Element // element containing the attribute",
      "149: }",
      "152: type charDataFlags uint8",
      "154: const (",
      "156:  whitespaceFlag charDataFlags = 1 << iota",
      "159:  cdataFlag",
      "160: )",
      "165: type CharData struct {",
      "166:  Data   string // the simple text or CDATA section content",
      "167:  parent *Element",
      "168:  index  int",
      "169:  flags  charDataFlags",
      "170: }",
      "173: type Comment struct {",
      "174:  Data   string // the comment's text",
      "175:  parent *Element",
      "176:  index  int",
      "177: }",
      "180: type Directive struct {",
      "181:  Data   string // the directive string",
      "182:  parent *Element",
      "183:  index  int",
      "184: }",
      "187: type ProcInst struct {",
      "188:  Target string // the processing instruction target",
      "189:  Inst   string // the processing instruction value",
      "190:  parent *Element",
      "191:  index  int",
      "192: }",
      "195: func NewDocument() *Document {",
      "196:  return &Document{",
      "197:   Element:       Element{Child: make([]Token, 0)},",
      "198:   ReadSettings:  newReadSettings(),",
      "199:   WriteSettings: newWriteSettings(),",
      "200:  }",
      "201: }",
      "206: func NewDocumentWithRoot(e *Element) *Document {",
      "207:  d := NewDocument()",
      "208:  d.SetRoot(e)",
      "209:  return d",
      "210: }",
      "213: func (d *Document) Copy() *Document {",
      "214:  return &Document{",
      "215:   Element:       *(d.Element.dup(nil).(*Element)),",
      "216:   ReadSettings:  d.ReadSettings.dup(),",
      "217:   WriteSettings: d.WriteSettings.dup(),",
      "218:  }",
      "219: }",
      "223: func (d *Document) Root() *Element {",
      "224:  for _, t := range d.Child {",
      "225:   if c, ok := t.(*Element); ok {",
      "226:    return c",
      "227:   }",
      "228:  }",
      "229:  return nil",
      "230: }",
      "236: func (d *Document) SetRoot(e *Element) {",
      "237:  if e.parent != nil {",
      "238:   e.parent.RemoveChild(e)",
      "239:  }",
      "242:  p := &d.Element",
      "243:  for i, t := range p.Child {",
      "244:   if _, ok := t.(*Element); ok {",
      "245:    t.setParent(nil)",
      "246:    t.setIndex(-1)",
      "247:    p.Child[i] = e",
      "248:    e.setParent(p)",
      "249:    e.setIndex(i)",
      "250:    return",
      "251:   }",
      "252:  }",
      "255:  p.addChild(e)",
      "256: }",
      "260: func (d *Document) ReadFrom(r io.Reader) (n int64, err error) {",
      "261:  return d.Element.readFrom(r, d.ReadSettings)",
      "262: }",
      "266: func (d *Document) ReadFromFile(filepath string) error {",
      "267:  f, err := os.Open(filepath)",
      "268:  if err != nil {",
      "269:   return err",
      "270:  }",
      "271:  defer f.Close()",
      "272:  _, err = d.ReadFrom(f)",
      "273:  return err",
      "274: }",
      "277: func (d *Document) ReadFromBytes(b []byte) error {",
      "278:  _, err := d.ReadFrom(bytes.NewReader(b))",
      "279:  return err",
      "280: }",
      "283: func (d *Document) ReadFromString(s string) error {",
      "284:  _, err := d.ReadFrom(strings.NewReader(s))",
      "285:  return err",
      "286: }",
      "290: func (d *Document) WriteTo(w io.Writer) (n int64, err error) {",
      "291:  cw := newCountWriter(w)",
      "292:  b := bufio.NewWriter(cw)",
      "293:  for _, c := range d.Child {",
      "294:   c.writeTo(b, &d.WriteSettings)",
      "295:  }",
      "296:  err, n = b.Flush(), cw.bytes",
      "297:  return",
      "298: }",
      "301: func (d *Document) WriteToFile(filepath string) error {",
      "302:  f, err := os.Create(filepath)",
      "303:  if err != nil {",
      "304:   return err",
      "305:  }",
      "306:  defer f.Close()",
      "307:  _, err = d.WriteTo(f)",
      "308:  return err",
      "309: }",
      "312: func (d *Document) WriteToBytes() (b []byte, err error) {",
      "313:  var buf bytes.Buffer",
      "314:  if _, err = d.WriteTo(&buf); err != nil {",
      "315:   return",
      "316:  }",
      "317:  return buf.Bytes(), nil",
      "318: }",
      "321: func (d *Document) WriteToString() (s string, err error) {",
      "322:  var b []byte",
      "323:  if b, err = d.WriteToBytes(); err != nil {",
      "324:   return",
      "325:  }",
      "326:  return string(b), nil",
      "327: }",
      "329: type indentFunc func(depth int) string",
      "335: func (d *Document) Indent(spaces int) {",
      "336:  var indent indentFunc",
      "337:  switch {",
      "338:  case spaces < 0:",
      "339:   indent = func(depth int) string { return \"\" }",
      "340:  case d.WriteSettings.UseCRLF:",
      "341:   indent = func(depth int) string { return indentCRLF(depth*spaces, indentSpaces) }",
      "342:  default:",
      "343:   indent = func(depth int) string { return indentLF(depth*spaces, indentSpaces) }",
      "344:  }",
      "345:  d.Element.indent(0, indent)",
      "346: }",
      "351: func (d *Document) IndentTabs() {",
      "352:  var indent indentFunc",
      "353:  switch d.WriteSettings.UseCRLF {",
      "354:  case true:",
      "355:   indent = func(depth int) string { return indentCRLF(depth, indentTabs) }",
      "356:  default:",
      "357:   indent = func(depth int) string { return indentLF(depth, indentTabs) }",
      "358:  }",
      "359:  d.Element.indent(0, indent)",
      "360: }",
      "364: func NewElement(tag string) *Element {",
      "365:  space, stag := spaceDecompose(tag)",
      "366:  return newElement(space, stag, nil)",
      "367: }",
      "371: func newElement(space, tag string, parent *Element) *Element {",
      "372:  e := &Element{",
      "373:   Space:  space,",
      "374:   Tag:    tag,",
      "375:   Attr:   make([]Attr, 0),",
      "376:   Child:  make([]Token, 0),",
      "377:   parent: parent,",
      "378:   index:  -1,",
      "379:  }",
      "380:  if parent != nil {",
      "381:   parent.addChild(e)",
      "382:  }",
      "383:  return e",
      "384: }",
      "390: func (e *Element) Copy() *Element {",
      "391:  return e.dup(nil).(*Element)",
      "392: }",
      "396: func (e *Element) FullTag() string {",
      "397:  if e.Space == \"\" {",
      "398:   return e.Tag",
      "399:  }",
      "400:  return e.Space + \":\" + e.Tag",
      "401: }",
      "406: func (e *Element) NamespaceURI() string {",
      "407:  if e.Space == \"\" {",
      "408:   return e.findDefaultNamespaceURI()",
      "409:  }",
      "410:  return e.findLocalNamespaceURI(e.Space)",
      "411: }",
      "415: func (e *Element) findLocalNamespaceURI(prefix string) string {",
      "416:  for _, a := range e.Attr {",
      "417:   if a.Space == \"xmlns\" && a.Key == prefix {",
      "418:    return a.Value",
      "419:   }",
      "420:  }",
      "422:  if e.parent == nil {",
      "423:   return \"\"",
      "424:  }",
      "426:  return e.parent.findLocalNamespaceURI(prefix)",
      "427: }",
      "430: func (e *Element) findDefaultNamespaceURI() string {",
      "431:  for _, a := range e.Attr {",
      "432:   if a.Space == \"\" && a.Key == \"xmlns\" {",
      "433:    return a.Value",
      "434:   }",
      "435:  }",
      "437:  if e.parent == nil {",
      "438:   return \"\"",
      "439:  }",
      "441:  return e.parent.findDefaultNamespaceURI()",
      "442: }",
      "445: func (e *Element) namespacePrefix() string {",
      "446:  return e.Space",
      "447: }",
      "450: func (e *Element) name() string {",
      "451:  return e.Tag",
      "452: }",
      "456: func (e *Element) Text() string {",
      "457:  if len(e.Child) == 0 {",
      "458:   return \"\"",
      "459:  }",
      "461:  text := \"\"",
      "462:  for _, ch := range e.Child {",
      "463:   if cd, ok := ch.(*CharData); ok {",
      "464:    if text == \"\" {",
      "465:     text = cd.Data",
      "466:    } else {",
      "467:     text += cd.Data",
      "468:    }",
      "469:   } else {",
      "470:    break",
      "471:   }",
      "472:  }",
      "473:  return text",
      "474: }",
      "478: func (e *Element) SetText(text string) {",
      "479:  e.replaceText(0, text, 0)",
      "480: }",
      "484: func (e *Element) SetCData(text string) {",
      "485:  e.replaceText(0, text, cdataFlag)",
      "486: }",
      "490: func (e *Element) Tail() string {",
      "491:  if e.Parent() == nil {",
      "492:   return \"\"",
      "493:  }",
      "495:  p := e.Parent()",
      "496:  i := e.Index()",
      "498:  text := \"\"",
      "499:  for _, ch := range p.Child[i+1:] {",
      "500:   if cd, ok := ch.(*CharData); ok {",
      "501:    if text == \"\" {",
      "502:     text = cd.Data",
      "503:    } else {",
      "504:     text += cd.Data",
      "505:    }",
      "506:   } else {",
      "507:    break",
      "508:   }",
      "509:  }",
      "510:  return text",
      "511: }",
      "515: func (e *Element) SetTail(text string) {",
      "516:  if e.Parent() == nil {",
      "517:   return",
      "518:  }",
      "520:  p := e.Parent()",
      "521:  p.replaceText(e.Index()+1, text, 0)",
      "522: }",
      "526: func (e *Element) replaceText(i int, text string, flags charDataFlags) {",
      "527:  end := e.findTermCharDataIndex(i)",
      "529:  switch {",
      "530:  case end == i:",
      "531:   if text != \"\" {",
      "533:    cd := newCharData(text, flags, nil)",
      "534:    e.InsertChildAt(i, cd)",
      "535:   }",
      "537:  case end == i+1:",
      "538:   if text == \"\" {",
      "540:    e.RemoveChildAt(i)",
      "541:   } else {",
      "543:    cd := e.Child[i].(*CharData)",
      "544:    cd.Data, cd.flags = text, flags",
      "545:   }",
      "547:  default:",
      "548:   if text == \"\" {",
      "550:    copy(e.Child[i:], e.Child[end:])",
      "551:    removed := end - i",
      "552:    e.Child = e.Child[:len(e.Child)-removed]",
      "553:    for j := i; j < len(e.Child); j++ {",
      "554:     e.Child[j].setIndex(j)",
      "555:    }",
      "556:   } else {",
      "559:    cd := e.Child[i].(*CharData)",
      "560:    cd.Data, cd.flags = text, flags",
      "561:    copy(e.Child[i+1:], e.Child[end:])",
      "562:    removed := end - (i + 1)",
      "563:    e.Child = e.Child[:len(e.Child)-removed]",
      "564:    for j := i + 1; j < len(e.Child); j++ {",
      "565:     e.Child[j].setIndex(j)",
      "566:    }",
      "567:   }",
      "568:  }",
      "569: }",
      "573: func (e *Element) findTermCharDataIndex(start int) int {",
      "574:  for i := start; i < len(e.Child); i++ {",
      "575:   if _, ok := e.Child[i].(*CharData); !ok {",
      "576:    return i",
      "577:   }",
      "578:  }",
      "579:  return len(e.Child)",
      "580: }",
      "585: func (e *Element) CreateElement(tag string) *Element {",
      "586:  space, stag := spaceDecompose(tag)",
      "587:  return newElement(space, stag, e)",
      "588: }",
      "593: func (e *Element) AddChild(t Token) {",
      "594:  if t.Parent() != nil {",
      "595:   t.Parent().RemoveChild(t)",
      "596:  }",
      "597:  e.addChild(t)",
      "598: }",
      "608: func (e *Element) InsertChild(ex Token, t Token) {",
      "609:  if ex == nil || ex.Parent() != e {",
      "610:   e.AddChild(t)",
      "611:   return",
      "612:  }",
      "614:  if t.Parent() != nil {",
      "615:   t.Parent().RemoveChild(t)",
      "616:  }",
      "618:  t.setParent(e)",
      "620:  i := ex.Index()",
      "621:  e.Child = append(e.Child, nil)",
      "622:  copy(e.Child[i+1:], e.Child[i:])",
      "623:  e.Child[i] = t",
      "625:  for j := i; j < len(e.Child); j++ {",
      "626:   e.Child[j].setIndex(j)",
      "627:  }",
      "628: }",
      "634: func (e *Element) InsertChildAt(index int, t Token) {",
      "635:  if index >= len(e.Child) {",
      "636:   e.AddChild(t)",
      "637:   return",
      "638:  }",
      "640:  if t.Parent() != nil {",
      "641:   if t.Parent() == e && t.Index() > index {",
      "642:    index--",
      "643:   }",
      "644:   t.Parent().RemoveChild(t)",
      "645:  }",
      "647:  t.setParent(e)",
      "649:  e.Child = append(e.Child, nil)",
      "650:  copy(e.Child[index+1:], e.Child[index:])",
      "651:  e.Child[index] = t",
      "653:  for j := index; j < len(e.Child); j++ {",
      "654:   e.Child[j].setIndex(j)",
      "655:  }",
      "656: }",
      "661: func (e *Element) RemoveChild(t Token) Token {",
      "662:  if t.Parent() != e {",
      "663:   return nil",
      "664:  }",
      "665:  return e.RemoveChildAt(t.Index())",
      "666: }",
      "671: func (e *Element) RemoveChildAt(index int) Token {",
      "672:  if index >= len(e.Child) {",
      "673:   return nil",
      "674:  }",
      "676:  t := e.Child[index]",
      "677:  for j := index + 1; j < len(e.Child); j++ {",
      "678:   e.Child[j].setIndex(j - 1)",
      "679:  }",
      "680:  e.Child = append(e.Child[:index], e.Child[index+1:]...)",
      "681:  t.setIndex(-1)",
      "682:  t.setParent(nil)",
      "683:  return t",
      "684: }",
      "688: func (e *Element) readFrom(ri io.Reader, settings ReadSettings) (n int64, err error) {",
      "689:  r := newCountReader(ri)",
      "690:  dec := xml.NewDecoder(r)",
      "691:  dec.CharsetReader = settings.CharsetReader",
      "692:  dec.Strict = !settings.Permissive",
      "693:  dec.Entity = settings.Entity",
      "694:  var stack stack",
      "695:  stack.push(e)",
      "696:  for {",
      "697:   t, err := dec.RawToken()",
      "698:   switch {",
      "699:   case err == io.EOF:",
      "700:    if len(stack.data) != 1 {",
      "701:     return r.bytes, ErrXML",
      "702:    }",
      "703:    return r.bytes, nil",
      "704:   case err != nil:",
      "705:    return r.bytes, err",
      "706:   case stack.empty():",
      "707:    return r.bytes, ErrXML",
      "708:   }",
      "710:   top := stack.peek().(*Element)",
      "712:   switch t := t.(type) {",
      "713:   case xml.StartElement:",
      "714:    e := newElement(t.Name.Space, t.Name.Local, top)",
      "715:    for _, a := range t.Attr {",
      "716:     e.createAttr(a.Name.Space, a.Name.Local, a.Value, e)",
      "717:    }",
      "718:    stack.push(e)",
      "719:   case xml.EndElement:",
      "720:    if top.Tag != t.Name.Local || top.Space != t.Name.Space {",
      "721:     return r.bytes, ErrXML",
      "722:    }",
      "723:    stack.pop()",
      "724:   case xml.CharData:",
      "725:    data := string(t)",
      "726:    var flags charDataFlags",
      "727:    if isWhitespace(data) {",
      "728:     flags = whitespaceFlag",
      "729:    }",
      "730:    newCharData(data, flags, top)",
      "731:   case xml.Comment:",
      "732:    newComment(string(t), top)",
      "733:   case xml.Directive:",
      "734:    newDirective(string(t), top)",
      "735:   case xml.ProcInst:",
      "736:    newProcInst(t.Target, string(t.Inst), top)",
      "737:   }",
      "738:  }",
      "739: }",
      "745: func (e *Element) SelectAttr(key string) *Attr {",
      "746:  space, skey := spaceDecompose(key)",
      "747:  for i, a := range e.Attr {",
      "748:   if spaceMatch(space, a.Space) && skey == a.Key {",
      "749:    return &e.Attr[i]",
      "750:   }",
      "751:  }",
      "752:  return nil",
      "753: }",
      "759: func (e *Element) SelectAttrValue(key, dflt string) string {",
      "760:  space, skey := spaceDecompose(key)",
      "761:  for _, a := range e.Attr {",
      "762:   if spaceMatch(space, a.Space) && skey == a.Key {",
      "763:    return a.Value",
      "764:   }",
      "765:  }",
      "766:  return dflt",
      "767: }",
      "770: func (e *Element) ChildElements() []*Element {",
      "771:  var elements []*Element",
      "772:  for _, t := range e.Child {",
      "773:   if c, ok := t.(*Element); ok {",
      "774:    elements = append(elements, c)",
      "775:   }",
      "776:  }",
      "777:  return elements",
      "778: }",
      "783: func (e *Element) SelectElement(tag string) *Element {",
      "784:  space, stag := spaceDecompose(tag)",
      "785:  for _, t := range e.Child {",
      "786:   if c, ok := t.(*Element); ok && spaceMatch(space, c.Space) && stag == c.Tag {",
      "787:    return c",
      "788:   }",
      "789:  }",
      "790:  return nil",
      "791: }",
      "795: func (e *Element) SelectElements(tag string) []*Element {",
      "796:  space, stag := spaceDecompose(tag)",
      "797:  var elements []*Element",
      "798:  for _, t := range e.Child {",
      "799:   if c, ok := t.(*Element); ok && spaceMatch(space, c.Space) && stag == c.Tag {",
      "800:    elements = append(elements, c)",
      "801:   }",
      "802:  }",
      "803:  return elements",
      "804: }",
      "809: func (e *Element) FindElement(path string) *Element {",
      "810:  return e.FindElementPath(MustCompilePath(path))",
      "811: }",
      "815: func (e *Element) FindElementPath(path Path) *Element {",
      "816:  p := newPather()",
      "817:  elements := p.traverse(e, path)",
      "818:  if len(elements) > 0 {",
      "819:   return elements[0]",
      "820:  }",
      "821:  return nil",
      "822: }",
      "827: func (e *Element) FindElements(path string) []*Element {",
      "828:  return e.FindElementsPath(MustCompilePath(path))",
      "829: }",
      "832: func (e *Element) FindElementsPath(path Path) []*Element {",
      "833:  p := newPather()",
      "834:  return p.traverse(e, path)",
      "835: }",
      "839: func (e *Element) GetPath() string {",
      "840:  path := []string{}",
      "841:  for seg := e; seg != nil; seg = seg.Parent() {",
      "842:   if seg.Tag != \"\" {",
      "843:    path = append(path, seg.Tag)",
      "844:   }",
      "845:  }",
      "848:  for i, j := 0, len(path)-1; i < j; i, j = i+1, j-1 {",
      "849:   path[i], path[j] = path[j], path[i]",
      "850:  }",
      "852:  return \"/\" + strings.Join(path, \"/\")",
      "853: }",
      "858: func (e *Element) GetRelativePath(source *Element) string {",
      "859:  var path []*Element",
      "861:  if source == nil {",
      "862:   return \"\"",
      "863:  }",
      "867:  var seg *Element",
      "868:  for seg = e; seg != nil && seg != source; seg = seg.Parent() {",
      "869:   path = append(path, seg)",
      "870:  }",
      "874:  if seg == source {",
      "875:   if len(path) == 0 {",
      "876:    return \".\"",
      "877:   }",
      "878:   parts := []string{}",
      "879:   for i := len(path) - 1; i >= 0; i-- {",
      "880:    parts = append(parts, path[i].Tag)",
      "881:   }",
      "882:   return \"./\" + strings.Join(parts, \"/\")",
      "883:  }",
      "889:  findPathIndex := func(e *Element, path []*Element) int {",
      "890:   for i, ee := range path {",
      "891:    if e == ee {",
      "892:     return i",
      "893:    }",
      "894:   }",
      "895:   return -1",
      "896:  }",
      "898:  climb := 0",
      "899:  for seg = source; seg != nil; seg = seg.Parent() {",
      "900:   i := findPathIndex(seg, path)",
      "901:   if i >= 0 {",
      "902:    path = path[:i] // truncate at found segment",
      "903:    break",
      "904:   }",
      "905:   climb++",
      "906:  }",
      "910:  if seg == nil {",
      "911:   return \"\"",
      "912:  }",
      "916:  parts := []string{}",
      "917:  for i := 0; i < climb; i++ {",
      "918:   parts = append(parts, \"..\")",
      "919:  }",
      "920:  for i := len(path) - 1; i >= 0; i-- {",
      "921:   parts = append(parts, path[i].Tag)",
      "922:  }",
      "923:  return strings.Join(parts, \"/\")",
      "924: }",
      "928: func (e *Element) indent(depth int, indent indentFunc) {",
      "929:  e.stripIndent()",
      "930:  n := len(e.Child)",
      "931:  if n == 0 {",
      "932:   return",
      "933:  }",
      "935:  oldChild := e.Child",
      "936:  e.Child = make([]Token, 0, n*2+1)",
      "937:  isCharData, firstNonCharData := false, true",
      "938:  for _, c := range oldChild {",
      "942:   _, isCharData = c.(*CharData)",
      "943:   if !isCharData {",
      "944:    if !firstNonCharData || depth > 0 {",
      "945:     s := indent(depth)",
      "946:     if s != \"\" {",
      "947:      newCharData(s, whitespaceFlag, e)",
      "948:     }",
      "949:    }",
      "950:    firstNonCharData = false",
      "951:   }",
      "953:   e.addChild(c)",
      "956:   if ce, ok := c.(*Element); ok {",
      "957:    ce.indent(depth+1, indent)",
      "958:   }",
      "959:  }",
      "962:  if !isCharData {",
      "963:   if !firstNonCharData || depth > 0 {",
      "964:    s := indent(depth - 1)",
      "965:    if s != \"\" {",
      "966:     newCharData(s, whitespaceFlag, e)",
      "967:    }",
      "968:   }",
      "969:  }",
      "970: }",
      "973: func (e *Element) stripIndent() {",
      "975:  n := len(e.Child)",
      "976:  for _, c := range e.Child {",
      "977:   if cd, ok := c.(*CharData); ok && cd.IsWhitespace() {",
      "978:    n--",
      "979:   }",
      "980:  }",
      "981:  if n == len(e.Child) {",
      "982:   return",
      "983:  }",
      "986:  newChild := make([]Token, n)",
      "987:  j := 0",
      "988:  for _, c := range e.Child {",
      "989:   if cd, ok := c.(*CharData); ok && cd.IsWhitespace() {",
      "990:    continue",
      "991:   }",
      "992:   newChild[j] = c",
      "993:   newChild[j].setIndex(j)",
      "994:   j++",
      "995:  }",
      "996:  e.Child = newChild",
      "997: }",
      "1000: func (e *Element) dup(parent *Element) Token {",
      "1001:  ne := &Element{",
      "1002:   Space:  e.Space,",
      "1003:   Tag:    e.Tag,",
      "1004:   Attr:   make([]Attr, len(e.Attr)),",
      "1005:   Child:  make([]Token, len(e.Child)),",
      "1006:   parent: parent,",
      "1007:   index:  e.index,",
      "1008:  }",
      "1009:  for i, t := range e.Child {",
      "1010:   ne.Child[i] = t.dup(ne)",
      "1011:  }",
      "1012:  copy(ne.Attr, e.Attr)",
      "1013:  return ne",
      "1014: }",
      "1018: func (e *Element) Parent() *Element {",
      "1019:  return e.parent",
      "1020: }",
      "1025: func (e *Element) Index() int {",
      "1026:  return e.index",
      "1027: }",
      "1030: func (e *Element) setParent(parent *Element) {",
      "1031:  e.parent = parent",
      "1032: }",
      "1035: func (e *Element) setIndex(index int) {",
      "1036:  e.index = index",
      "1037: }",
      "1040: func (e *Element) writeTo(w *bufio.Writer, s *WriteSettings) {",
      "1041:  w.WriteByte('<')",
      "1042:  w.WriteString(e.FullTag())",
      "1043:  for _, a := range e.Attr {",
      "1044:   w.WriteByte(' ')",
      "1045:   a.writeTo(w, s)",
      "1046:  }",
      "1047:  if len(e.Child) > 0 {",
      "1048:   w.WriteByte('>')",
      "1049:   for _, c := range e.Child {",
      "1050:    c.writeTo(w, s)",
      "1051:   }",
      "1052:   w.Write([]byte{'<', '/'})",
      "1053:   w.WriteString(e.FullTag())",
      "1054:   w.WriteByte('>')",
      "1055:  } else {",
      "1056:   if s.CanonicalEndTags {",
      "1057:    w.Write([]byte{'>', '<', '/'})",
      "1058:    w.WriteString(e.FullTag())",
      "1059:    w.WriteByte('>')",
      "1060:   } else {",
      "1061:    w.Write([]byte{'/', '>'})",
      "1062:   }",
      "1063:  }",
      "1064: }",
      "1067: func (e *Element) addChild(t Token) {",
      "1068:  t.setParent(e)",
      "1069:  t.setIndex(len(e.Child))",
      "1070:  e.Child = append(e.Child, t)",
      "1071: }",
      "1077: func (e *Element) CreateAttr(key, value string) *Attr {",
      "1078:  space, skey := spaceDecompose(key)",
      "1079:  return e.createAttr(space, skey, value, e)",
      "1080: }",
      "1083: func (e *Element) createAttr(space, key, value string, parent *Element) *Attr {",
      "1084:  for i, a := range e.Attr {",
      "1085:   if space == a.Space && key == a.Key {",
      "1086:    e.Attr[i].Value = value",
      "1087:    return &e.Attr[i]",
      "1088:   }",
      "1089:  }",
      "1090:  a := Attr{",
      "1091:   Space:   space,",
      "1092:   Key:     key,",
      "1093:   Value:   value,",
      "1094:   element: parent,",
      "1095:  }",
      "1096:  e.Attr = append(e.Attr, a)",
      "1097:  return &e.Attr[len(e.Attr)-1]",
      "1098: }",
      "1104: func (e *Element) RemoveAttr(key string) *Attr {",
      "1105:  space, skey := spaceDecompose(key)",
      "1106:  for i, a := range e.Attr {",
      "1107:   if space == a.Space && skey == a.Key {",
      "1108:    e.Attr = append(e.Attr[0:i], e.Attr[i+1:]...)",
      "1109:    return &Attr{",
      "1110:     Space:   a.Space,",
      "1111:     Key:     a.Key,",
      "1112:     Value:   a.Value,",
      "1113:     element: nil,",
      "1114:    }",
      "1115:   }",
      "1116:  }",
      "1117:  return nil",
      "1118: }",
      "1121: func (e *Element) SortAttrs() {",
      "1122:  sort.Sort(byAttr(e.Attr))",
      "1123: }",
      "1125: type byAttr []Attr",
      "1127: func (a byAttr) Len() int {",
      "1128:  return len(a)",
      "1129: }",
      "1131: func (a byAttr) Swap(i, j int) {",
      "1132:  a[i], a[j] = a[j], a[i]",
      "1133: }",
      "1135: func (a byAttr) Less(i, j int) bool {",
      "1136:  sp := strings.Compare(a[i].Space, a[j].Space)",
      "1137:  if sp == 0 {",
      "1138:   return strings.Compare(a[i].Key, a[j].Key) < 0",
      "1139:  }",
      "1140:  return sp < 0",
      "1141: }",
      "1145: func (a *Attr) FullKey() string {",
      "1146:  if a.Space == \"\" {",
      "1147:   return a.Key",
      "1148:  }",
      "1149:  return a.Space + \":\" + a.Key",
      "1150: }",
      "1153: func (a *Attr) Element() *Element {",
      "1154:  return a.element",
      "1155: }",
      "1160: func (a *Attr) NamespaceURI() string {",
      "1161:  if a.Space == \"\" {",
      "1162:   return \"\"",
      "1163:  }",
      "1164:  return a.element.findLocalNamespaceURI(a.Space)",
      "1165: }",
      "1168: func (a *Attr) writeTo(w *bufio.Writer, s *WriteSettings) {",
      "1169:  w.WriteString(a.FullKey())",
      "1170:  w.WriteString(`=\"`)",
      "1171:  var m escapeMode",
      "1172:  if s.CanonicalAttrVal {",
      "1173:   m = escapeCanonicalAttr",
      "1174:  } else {",
      "1175:   m = escapeNormal",
      "1176:  }",
      "1177:  escapeString(w, a.Value, m)",
      "1178:  w.WriteByte('\"')",
      "1179: }",
      "1182: func NewText(text string) *CharData {",
      "1183:  return newCharData(text, 0, nil)",
      "1184: }",
      "1188: func NewCData(data string) *CharData {",
      "1189:  return newCharData(data, cdataFlag, nil)",
      "1190: }",
      "1197: func NewCharData(data string) *CharData {",
      "1198:  return newCharData(data, 0, nil)",
      "1199: }",
      "1203: func newCharData(data string, flags charDataFlags, parent *Element) *CharData {",
      "1204:  c := &CharData{",
      "1205:   Data:   data,",
      "1206:   parent: nil,",
      "1207:   index:  -1,",
      "1208:   flags:  flags,",
      "1209:  }",
      "1210:  if parent != nil {",
      "1211:   parent.addChild(c)",
      "1212:  }",
      "1213:  return c",
      "1214: }",
      "1218: func (e *Element) CreateText(text string) *CharData {",
      "1219:  return newCharData(text, 0, e)",
      "1220: }",
      "1225: func (e *Element) CreateCData(data string) *CharData {",
      "1226:  return newCharData(data, cdataFlag, e)",
      "1227: }",
      "1234: func (e *Element) CreateCharData(data string) *CharData {",
      "1235:  return newCharData(data, 0, e)",
      "1236: }",
      "1242: func (c *CharData) SetData(text string) {",
      "1243:  c.Data = text",
      "1244:  if isWhitespace(text) {",
      "1245:   c.flags |= whitespaceFlag",
      "1246:  } else {",
      "1247:   c.flags &= ^whitespaceFlag",
      "1248:  }",
      "1249: }",
      "1253: func (c *CharData) IsCData() bool {",
      "1254:  return (c.flags & cdataFlag) != 0",
      "1255: }",
      "1258: func (c *CharData) IsWhitespace() bool {",
      "1259:  return (c.flags & whitespaceFlag) != 0",
      "1260: }",
      "1264: func (c *CharData) Parent() *Element {",
      "1265:  return c.parent",
      "1266: }",
      "1271: func (c *CharData) Index() int {",
      "1272:  return c.index",
      "1273: }",
      "1276: func (c *CharData) dup(parent *Element) Token {",
      "1277:  return &CharData{",
      "1278:   Data:   c.Data,",
      "1279:   flags:  c.flags,",
      "1280:   parent: parent,",
      "1281:   index:  c.index,",
      "1282:  }",
      "1283: }",
      "1286: func (c *CharData) setParent(parent *Element) {",
      "1287:  c.parent = parent",
      "1288: }",
      "1292: func (c *CharData) setIndex(index int) {",
      "1293:  c.index = index",
      "1294: }",
      "1297: func (c *CharData) writeTo(w *bufio.Writer, s *WriteSettings) {",
      "1298:  if c.IsCData() {",
      "1299:   w.WriteString(`<![CDATA[`)",
      "1300:   w.WriteString(c.Data)",
      "1301:   w.WriteString(`]]>`)",
      "1302:  } else {",
      "1303:   var m escapeMode",
      "1304:   if s.CanonicalText {",
      "1305:    m = escapeCanonicalText",
      "1306:   } else {",
      "1307:    m = escapeNormal",
      "1308:   }",
      "1309:   escapeString(w, c.Data, m)",
      "1310:  }",
      "1311: }",
      "1314: func NewComment(comment string) *Comment {",
      "1315:  return newComment(comment, nil)",
      "1316: }",
      "1319: func newComment(comment string, parent *Element) *Comment {",
      "1320:  c := &Comment{",
      "1321:   Data:   comment,",
      "1322:   parent: nil,",
      "1323:   index:  -1,",
      "1324:  }",
      "1325:  if parent != nil {",
      "1326:   parent.addChild(c)",
      "1327:  }",
      "1328:  return c",
      "1329: }",
      "1333: func (e *Element) CreateComment(comment string) *Comment {",
      "1334:  return newComment(comment, e)",
      "1335: }",
      "1338: func (c *Comment) dup(parent *Element) Token {",
      "1339:  return &Comment{",
      "1340:   Data:   c.Data,",
      "1341:   parent: parent,",
      "1342:   index:  c.index,",
      "1343:  }",
      "1344: }",
      "1347: func (c *Comment) Parent() *Element {",
      "1348:  return c.parent",
      "1349: }",
      "1354: func (c *Comment) Index() int {",
      "1355:  return c.index",
      "1356: }",
      "1359: func (c *Comment) setParent(parent *Element) {",
      "1360:  c.parent = parent",
      "1361: }",
      "1365: func (c *Comment) setIndex(index int) {",
      "1366:  c.index = index",
      "1367: }",
      "1370: func (c *Comment) writeTo(w *bufio.Writer, s *WriteSettings) {",
      "1371:  w.WriteString(\"<!--\")",
      "1372:  w.WriteString(c.Data)",
      "1373:  w.WriteString(\"-->\")",
      "1374: }",
      "1377: func NewDirective(data string) *Directive {",
      "1378:  return newDirective(data, nil)",
      "1379: }",
      "1383: func newDirective(data string, parent *Element) *Directive {",
      "1384:  d := &Directive{",
      "1385:   Data:   data,",
      "1386:   parent: nil,",
      "1387:   index:  -1,",
      "1388:  }",
      "1389:  if parent != nil {",
      "1390:   parent.addChild(d)",
      "1391:  }",
      "1392:  return d",
      "1393: }",
      "1397: func (e *Element) CreateDirective(data string) *Directive {",
      "1398:  return newDirective(data, e)",
      "1399: }",
      "1402: func (d *Directive) dup(parent *Element) Token {",
      "1403:  return &Directive{",
      "1404:   Data:   d.Data,",
      "1405:   parent: parent,",
      "1406:   index:  d.index,",
      "1407:  }",
      "1408: }",
      "1412: func (d *Directive) Parent() *Element {",
      "1413:  return d.parent",
      "1414: }",
      "1419: func (d *Directive) Index() int {",
      "1420:  return d.index",
      "1421: }",
      "1424: func (d *Directive) setParent(parent *Element) {",
      "1425:  d.parent = parent",
      "1426: }",
      "1430: func (d *Directive) setIndex(index int) {",
      "1431:  d.index = index",
      "1432: }",
      "1435: func (d *Directive) writeTo(w *bufio.Writer, s *WriteSettings) {",
      "1436:  w.WriteString(\"<!\")",
      "1437:  w.WriteString(d.Data)",
      "1438:  w.WriteString(\">\")",
      "1439: }",
      "1442: func NewProcInst(target, inst string) *ProcInst {",
      "1443:  return newProcInst(target, inst, nil)",
      "1444: }",
      "1448: func newProcInst(target, inst string, parent *Element) *ProcInst {",
      "1449:  p := &ProcInst{",
      "1450:   Target: target,",
      "1451:   Inst:   inst,",
      "1452:   parent: nil,",
      "1453:   index:  -1,",
      "1454:  }",
      "1455:  if parent != nil {",
      "1456:   parent.addChild(p)",
      "1457:  }",
      "1458:  return p",
      "1459: }",
      "1464: func (e *Element) CreateProcInst(target, inst string) *ProcInst {",
      "1465:  return newProcInst(target, inst, e)",
      "1466: }",
      "1469: func (p *ProcInst) dup(parent *Element) Token {",
      "1470:  return &ProcInst{",
      "1471:   Target: p.Target,",
      "1472:   Inst:   p.Inst,",
      "1473:   parent: parent,",
      "1474:   index:  p.index,",
      "1475:  }",
      "1476: }",
      "1480: func (p *ProcInst) Parent() *Element {",
      "1481:  return p.parent",
      "1482: }",
      "1487: func (p *ProcInst) Index() int {",
      "1488:  return p.index",
      "1489: }",
      "1492: func (p *ProcInst) setParent(parent *Element) {",
      "1493:  p.parent = parent",
      "1494: }",
      "1498: func (p *ProcInst) setIndex(index int) {",
      "1499:  p.index = index",
      "1500: }",
      "1503: func (p *ProcInst) writeTo(w *bufio.Writer, s *WriteSettings) {",
      "1504:  w.WriteString(\"<?\")",
      "1505:  w.WriteString(p.Target)",
      "1506:  if p.Inst != \"\" {",
      "1507:   w.WriteByte(' ')",
      "1508:   w.WriteString(p.Inst)",
      "1509:  }",
      "1510:  w.WriteString(\"?>\")",
      "1511: }",
      "",
      "---------------"
    ],
    "vendor/github.com/beevik/etree/go.mod||vendor/github.com/beevik/etree/go.mod": [
      "File: vendor/github.com/beevik/etree/go.mod -> vendor/github.com/beevik/etree/go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: module github.com/beevik/etree",
      "3: go 1.12",
      "",
      "---------------"
    ],
    "vendor/github.com/beevik/etree/helpers.go||vendor/github.com/beevik/etree/helpers.go": [
      "File: vendor/github.com/beevik/etree/helpers.go -> vendor/github.com/beevik/etree/helpers.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package etree",
      "7: import (",
      "8:  \"bufio\"",
      "9:  \"io\"",
      "10:  \"strings\"",
      "11:  \"unicode/utf8\"",
      "12: )",
      "15: type stack struct {",
      "16:  data []interface{}",
      "17: }",
      "19: func (s *stack) empty() bool {",
      "20:  return len(s.data) == 0",
      "21: }",
      "23: func (s *stack) push(value interface{}) {",
      "24:  s.data = append(s.data, value)",
      "25: }",
      "27: func (s *stack) pop() interface{} {",
      "28:  value := s.data[len(s.data)-1]",
      "29:  s.data[len(s.data)-1] = nil",
      "30:  s.data = s.data[:len(s.data)-1]",
      "31:  return value",
      "32: }",
      "34: func (s *stack) peek() interface{} {",
      "35:  return s.data[len(s.data)-1]",
      "36: }",
      "39: type fifo struct {",
      "40:  data       []interface{}",
      "41:  head, tail int",
      "42: }",
      "44: func (f *fifo) add(value interface{}) {",
      "45:  if f.len()+1 >= len(f.data) {",
      "46:   f.grow()",
      "47:  }",
      "48:  f.data[f.tail] = value",
      "49:  if f.tail++; f.tail == len(f.data) {",
      "50:   f.tail = 0",
      "51:  }",
      "52: }",
      "54: func (f *fifo) remove() interface{} {",
      "55:  value := f.data[f.head]",
      "56:  f.data[f.head] = nil",
      "57:  if f.head++; f.head == len(f.data) {",
      "58:   f.head = 0",
      "59:  }",
      "60:  return value",
      "61: }",
      "63: func (f *fifo) len() int {",
      "64:  if f.tail >= f.head {",
      "65:   return f.tail - f.head",
      "66:  }",
      "67:  return len(f.data) - f.head + f.tail",
      "68: }",
      "70: func (f *fifo) grow() {",
      "71:  c := len(f.data) * 2",
      "72:  if c == 0 {",
      "73:   c = 4",
      "74:  }",
      "75:  buf, count := make([]interface{}, c), f.len()",
      "76:  if f.tail >= f.head {",
      "77:   copy(buf[0:count], f.data[f.head:f.tail])",
      "78:  } else {",
      "79:   hindex := len(f.data) - f.head",
      "80:   copy(buf[0:hindex], f.data[f.head:])",
      "81:   copy(buf[hindex:count], f.data[:f.tail])",
      "82:  }",
      "83:  f.data, f.head, f.tail = buf, 0, count",
      "84: }",
      "88: type countReader struct {",
      "89:  r     io.Reader",
      "90:  bytes int64",
      "91: }",
      "93: func newCountReader(r io.Reader) *countReader {",
      "94:  return &countReader{r: r}",
      "95: }",
      "97: func (cr *countReader) Read(p []byte) (n int, err error) {",
      "98:  b, err := cr.r.Read(p)",
      "99:  cr.bytes += int64(b)",
      "100:  return b, err",
      "101: }",
      "105: type countWriter struct {",
      "106:  w     io.Writer",
      "107:  bytes int64",
      "108: }",
      "110: func newCountWriter(w io.Writer) *countWriter {",
      "111:  return &countWriter{w: w}",
      "112: }",
      "114: func (cw *countWriter) Write(p []byte) (n int, err error) {",
      "115:  b, err := cw.w.Write(p)",
      "116:  cw.bytes += int64(b)",
      "117:  return b, err",
      "118: }",
      "122: func isWhitespace(s string) bool {",
      "123:  for i := 0; i < len(s); i++ {",
      "124:   if c := s[i]; c != ' ' && c != '\\t' && c != '\\n' && c != '\\r' {",
      "125:    return false",
      "126:   }",
      "127:  }",
      "128:  return true",
      "129: }",
      "133: func spaceMatch(a, b string) bool {",
      "134:  switch {",
      "135:  case a == \"\":",
      "136:   return true",
      "137:  default:",
      "138:   return a == b",
      "139:  }",
      "140: }",
      "144: func spaceDecompose(str string) (space, key string) {",
      "145:  colon := strings.IndexByte(str, ':')",
      "146:  if colon == -1 {",
      "147:   return \"\", str",
      "148:  }",
      "149:  return str[:colon], str[colon+1:]",
      "150: }",
      "153: const (",
      "154:  indentSpaces = \"\\r\\n                                                                \"",
      "155:  indentTabs   = \"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\"",
      "156: )",
      "160: func indentCRLF(n int, source string) string {",
      "161:  switch {",
      "162:  case n < 0:",
      "163:   return source[:2]",
      "164:  case n < len(source)-1:",
      "165:   return source[:n+2]",
      "166:  default:",
      "167:   return source + strings.Repeat(source[2:3], n-len(source)+2)",
      "168:  }",
      "169: }",
      "173: func indentLF(n int, source string) string {",
      "174:  switch {",
      "175:  case n < 0:",
      "176:   return source[1:2]",
      "177:  case n < len(source)-1:",
      "178:   return source[1 : n+2]",
      "179:  default:",
      "180:   return source[1:] + strings.Repeat(source[2:3], n-len(source)+2)",
      "181:  }",
      "182: }",
      "186: func nextIndex(s, sep string, offset int) int {",
      "187:  switch i := strings.Index(s[offset:], sep); i {",
      "188:  case -1:",
      "189:   return -1",
      "190:  default:",
      "191:   return offset + i",
      "192:  }",
      "193: }",
      "196: func isInteger(s string) bool {",
      "197:  for i := 0; i < len(s); i++ {",
      "198:   if (s[i] < '0' || s[i] > '9') && !(i == 0 && s[i] == '-') {",
      "199:    return false",
      "200:   }",
      "201:  }",
      "202:  return true",
      "203: }",
      "205: type escapeMode byte",
      "207: const (",
      "208:  escapeNormal escapeMode = iota",
      "209:  escapeCanonicalText",
      "210:  escapeCanonicalAttr",
      "211: )",
      "214: func escapeString(w *bufio.Writer, s string, m escapeMode) {",
      "215:  var esc []byte",
      "216:  last := 0",
      "217:  for i := 0; i < len(s); {",
      "218:   r, width := utf8.DecodeRuneInString(s[i:])",
      "219:   i += width",
      "220:   switch r {",
      "221:   case '&':",
      "222:    esc = []byte(\"&amp;\")",
      "223:   case '<':",
      "224:    esc = []byte(\"&lt;\")",
      "225:   case '>':",
      "226:    if m == escapeCanonicalAttr {",
      "227:     continue",
      "228:    }",
      "229:    esc = []byte(\"&gt;\")",
      "230:   case '\\'':",
      "231:    if m != escapeNormal {",
      "232:     continue",
      "233:    }",
      "234:    esc = []byte(\"&apos;\")",
      "235:   case '\"':",
      "236:    if m == escapeCanonicalText {",
      "237:     continue",
      "238:    }",
      "239:    esc = []byte(\"&quot;\")",
      "240:   case '\\t':",
      "241:    if m != escapeCanonicalAttr {",
      "242:     continue",
      "243:    }",
      "244:    esc = []byte(\"&#x9;\")",
      "245:   case '\\n':",
      "246:    if m != escapeCanonicalAttr {",
      "247:     continue",
      "248:    }",
      "249:    esc = []byte(\"&#xA;\")",
      "250:   case '\\r':",
      "251:    if m == escapeNormal {",
      "252:     continue",
      "253:    }",
      "254:    esc = []byte(\"&#xD;\")",
      "255:   default:",
      "256:    if !isInCharacterRange(r) || (r == 0xFFFD && width == 1) {",
      "257:     esc = []byte(\"\\uFFFD\")",
      "258:     break",
      "259:    }",
      "260:    continue",
      "261:   }",
      "262:   w.WriteString(s[last : i-width])",
      "263:   w.Write(esc)",
      "264:   last = i",
      "265:  }",
      "266:  w.WriteString(s[last:])",
      "267: }",
      "269: func isInCharacterRange(r rune) bool {",
      "270:  return r == 0x09 ||",
      "271:   r == 0x0A ||",
      "272:   r == 0x0D ||",
      "273:   r >= 0x20 && r <= 0xD7FF ||",
      "274:   r >= 0xE000 && r <= 0xFFFD ||",
      "275:   r >= 0x10000 && r <= 0x10FFFF",
      "276: }",
      "",
      "---------------"
    ],
    "vendor/github.com/beevik/etree/path.go||vendor/github.com/beevik/etree/path.go": [
      "File: vendor/github.com/beevik/etree/path.go -> vendor/github.com/beevik/etree/path.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package etree",
      "7: import (",
      "8:  \"strconv\"",
      "9:  \"strings\"",
      "10: )",
      "13: A Path is a string that represents a search path through an etree starting",
      "14: from the document root or an arbitrary element. Paths are used with the",
      "15: Element object's Find* methods to locate and return desired elements.",
      "17: A Path consists of a series of slash-separated \"selectors\", each of which may",
      "18: be modified by one or more bracket-enclosed \"filters\". Selectors are used to",
      "19: traverse the etree from element to element, while filters are used to narrow",
      "20: the list of candidate elements at each node.",
      "22: Although etree Path strings are structurally and behaviorally similar to XPath",
      "23: strings (https://www.w3.org/TR/1999/REC-xpath-19991116/), they have a more",
      "24: limited set of selectors and filtering options.",
      "26: The following selectors are supported by etree paths:",
      "28:     .               Select the current element.",
      "29:     ..              Select the parent of the current element.",
      "31:     /               Select the root element when used at the start of a path.",
      "33:     tag             Select all child elements with a name matching the tag.",
      "35: The following basic filters are supported:",
      "37:     [@attrib]       Keep elements with an attribute named attrib.",
      "38:     [@attrib='val'] Keep elements with an attribute named attrib and value matching val.",
      "39:     [tag]           Keep elements with a child element named tag.",
      "40:     [tag='val']     Keep elements with a child element named tag and text matching val.",
      "41:     [n]             Keep the n-th element, where n is a numeric index starting from 1.",
      "43: The following function-based filters are supported:",
      "45:     [text()]                    Keep elements with non-empty text.",
      "46:     [text()='val']              Keep elements whose text matches val.",
      "47:     [local-name()='val']        Keep elements whose un-prefixed tag matches val.",
      "48:     [name()='val']              Keep elements whose full tag exactly matches val.",
      "49:     [namespace-prefix()]        Keep elements with non-empty namespace prefixes.",
      "50:     [namespace-prefix()='val']  Keep elements whose namespace prefix matches val.",
      "51:     [namespace-uri()]           Keep elements with non-empty namespace URIs.",
      "52:     [namespace-uri()='val']     Keep elements whose namespace URI matches val.",
      "54: Below are some examples of etree path strings.",
      "56: Select the bookstore child element of the root element:",
      "57:     /bookstore",
      "59: Beginning from the root element, select the title elements of all descendant",
      "60: book elements having a 'category' attribute of 'WEB':",
      "63: Beginning from the current element, select the first descendant book element",
      "64: with a title child element containing the text 'Great Expectations':",
      "65:     .//book[title='Great Expectations'][1]",
      "67: Beginning from the current element, select all child elements of book elements",
      "68: with an attribute 'language' set to 'english':",
      "69:     ./book/*[@language='english']",
      "71: Beginning from the current element, select all child elements of book elements",
      "72: containing the text 'special':",
      "73:     ./book/*[text()='special']",
      "75: Beginning from the current element, select all descendant book elements whose",
      "76: title child element has a 'language' attribute of 'french':",
      "77:     .//book/title[@language='french']/..",
      "79: Beginning from the current element, select all descendant book elements",
      "80: belonging to the http://www.w3.org/TR/html4/ namespace:",
      "81:     .//book[namespace-uri()='http://www.w3.org/TR/html4/']",
      "84: type Path struct {",
      "85:  segments []segment",
      "86: }",
      "89: type ErrPath string",
      "92: func (err ErrPath) Error() string {",
      "93:  return \"etree: \" + string(err)",
      "94: }",
      "98: func CompilePath(path string) (Path, error) {",
      "99:  var comp compiler",
      "100:  segments := comp.parsePath(path)",
      "101:  if comp.err != ErrPath(\"\") {",
      "102:   return Path{nil}, comp.err",
      "103:  }",
      "104:  return Path{segments}, nil",
      "105: }",
      "111: func MustCompilePath(path string) Path {",
      "112:  p, err := CompilePath(path)",
      "113:  if err != nil {",
      "114:   panic(err)",
      "115:  }",
      "116:  return p",
      "117: }",
      "121: type segment struct {",
      "122:  sel     selector",
      "123:  filters []filter",
      "124: }",
      "126: func (seg *segment) apply(e *Element, p *pather) {",
      "127:  seg.sel.apply(e, p)",
      "128:  for _, f := range seg.filters {",
      "129:   f.apply(p)",
      "130:  }",
      "131: }",
      "135: type selector interface {",
      "136:  apply(e *Element, p *pather)",
      "137: }",
      "141: type filter interface {",
      "142:  apply(p *pather)",
      "143: }",
      "148: type pather struct {",
      "149:  queue      fifo",
      "150:  results    []*Element",
      "151:  inResults  map[*Element]bool",
      "152:  candidates []*Element",
      "153:  scratch    []*Element // used by filters",
      "154: }",
      "158: type node struct {",
      "159:  e        *Element",
      "160:  segments []segment",
      "161: }",
      "163: func newPather() *pather {",
      "164:  return &pather{",
      "165:   results:    make([]*Element, 0),",
      "166:   inResults:  make(map[*Element]bool),",
      "167:   candidates: make([]*Element, 0),",
      "168:   scratch:    make([]*Element, 0),",
      "169:  }",
      "170: }",
      "175: func (p *pather) traverse(e *Element, path Path) []*Element {",
      "176:  for p.queue.add(node{e, path.segments}); p.queue.len() > 0; {",
      "177:   p.eval(p.queue.remove().(node))",
      "178:  }",
      "179:  return p.results",
      "180: }",
      "184: func (p *pather) eval(n node) {",
      "185:  p.candidates = p.candidates[0:0]",
      "186:  seg, remain := n.segments[0], n.segments[1:]",
      "187:  seg.apply(n.e, p)",
      "189:  if len(remain) == 0 {",
      "190:   for _, c := range p.candidates {",
      "191:    if in := p.inResults[c]; !in {",
      "192:     p.inResults[c] = true",
      "193:     p.results = append(p.results, c)",
      "194:    }",
      "195:   }",
      "196:  } else {",
      "197:   for _, c := range p.candidates {",
      "198:    p.queue.add(node{c, remain})",
      "199:   }",
      "200:  }",
      "201: }",
      "204: type compiler struct {",
      "205:  err ErrPath",
      "206: }",
      "211: func (c *compiler) parsePath(path string) []segment {",
      "213:  if strings.HasSuffix(path, \"//\") {",
      "214:   path += \"*\"",
      "215:  }",
      "217:  var segments []segment",
      "220:  if strings.HasPrefix(path, \"/\") {",
      "221:   segments = append(segments, segment{new(selectRoot), []filter{}})",
      "222:   path = path[1:]",
      "223:  }",
      "226:  for _, s := range splitPath(path) {",
      "227:   segments = append(segments, c.parseSegment(s))",
      "228:   if c.err != ErrPath(\"\") {",
      "229:    break",
      "230:   }",
      "231:  }",
      "232:  return segments",
      "233: }",
      "235: func splitPath(path string) []string {",
      "236:  var pieces []string",
      "237:  start := 0",
      "238:  inquote := false",
      "239:  for i := 0; i+1 <= len(path); i++ {",
      "240:   if path[i] == '\\'' {",
      "241:    inquote = !inquote",
      "242:   } else if path[i] == '/' && !inquote {",
      "243:    pieces = append(pieces, path[start:i])",
      "244:    start = i + 1",
      "245:   }",
      "246:  }",
      "247:  return append(pieces, path[start:])",
      "248: }",
      "251: func (c *compiler) parseSegment(path string) segment {",
      "252:  pieces := strings.Split(path, \"[\")",
      "253:  seg := segment{",
      "254:   sel:     c.parseSelector(pieces[0]),",
      "255:   filters: []filter{},",
      "256:  }",
      "257:  for i := 1; i < len(pieces); i++ {",
      "258:   fpath := pieces[i]",
      "259:   if fpath[len(fpath)-1] != ']' {",
      "260:    c.err = ErrPath(\"path has invalid filter [brackets].\")",
      "261:    break",
      "262:   }",
      "263:   seg.filters = append(seg.filters, c.parseFilter(fpath[:len(fpath)-1]))",
      "264:  }",
      "265:  return seg",
      "266: }",
      "269: func (c *compiler) parseSelector(path string) selector {",
      "270:  switch path {",
      "271:  case \".\":",
      "272:   return new(selectSelf)",
      "273:  case \"..\":",
      "274:   return new(selectParent)",
      "275:  case \"*\":",
      "276:   return new(selectChildren)",
      "277:  case \"\":",
      "278:   return new(selectDescendants)",
      "279:  default:",
      "280:   return newSelectChildrenByTag(path)",
      "281:  }",
      "282: }",
      "284: var fnTable = map[string]func(e *Element) string{",
      "285:  \"local-name\":       (*Element).name,",
      "286:  \"name\":             (*Element).FullTag,",
      "287:  \"namespace-prefix\": (*Element).namespacePrefix,",
      "288:  \"namespace-uri\":    (*Element).NamespaceURI,",
      "289:  \"text\":             (*Element).Text,",
      "290: }",
      "293: func (c *compiler) parseFilter(path string) filter {",
      "294:  if len(path) == 0 {",
      "295:   c.err = ErrPath(\"path contains an empty filter expression.\")",
      "296:   return nil",
      "297:  }",
      "300:  eqindex := strings.Index(path, \"='\")",
      "301:  if eqindex >= 0 {",
      "302:   rindex := nextIndex(path, \"'\", eqindex+2)",
      "303:   if rindex != len(path)-1 {",
      "304:    c.err = ErrPath(\"path has mismatched filter quotes.\")",
      "305:    return nil",
      "306:   }",
      "308:   key := path[:eqindex]",
      "309:   value := path[eqindex+2 : rindex]",
      "311:   switch {",
      "312:   case key[0] == '@':",
      "313:    return newFilterAttrVal(key[1:], value)",
      "314:   case strings.HasSuffix(key, \"()\"):",
      "315:    name := key[:len(key)-2]",
      "316:    if fn, ok := fnTable[name]; ok {",
      "317:     return newFilterFuncVal(fn, value)",
      "318:    }",
      "319:    c.err = ErrPath(\"path has unknown function \" + name)",
      "320:    return nil",
      "321:   default:",
      "322:    return newFilterChildText(key, value)",
      "323:   }",
      "324:  }",
      "327:  switch {",
      "328:  case path[0] == '@':",
      "329:   return newFilterAttr(path[1:])",
      "330:  case strings.HasSuffix(path, \"()\"):",
      "331:   name := path[:len(path)-2]",
      "332:   if fn, ok := fnTable[name]; ok {",
      "333:    return newFilterFunc(fn)",
      "334:   }",
      "335:   c.err = ErrPath(\"path has unknown function \" + name)",
      "336:   return nil",
      "337:  case isInteger(path):",
      "338:   pos, _ := strconv.Atoi(path)",
      "339:   switch {",
      "340:   case pos > 0:",
      "341:    return newFilterPos(pos - 1)",
      "342:   default:",
      "343:    return newFilterPos(pos)",
      "344:   }",
      "345:  default:",
      "346:   return newFilterChild(path)",
      "347:  }",
      "348: }",
      "351: type selectSelf struct{}",
      "353: func (s *selectSelf) apply(e *Element, p *pather) {",
      "354:  p.candidates = append(p.candidates, e)",
      "355: }",
      "358: type selectRoot struct{}",
      "360: func (s *selectRoot) apply(e *Element, p *pather) {",
      "361:  root := e",
      "362:  for root.parent != nil {",
      "363:   root = root.parent",
      "364:  }",
      "365:  p.candidates = append(p.candidates, root)",
      "366: }",
      "369: type selectParent struct{}",
      "371: func (s *selectParent) apply(e *Element, p *pather) {",
      "372:  if e.parent != nil {",
      "373:   p.candidates = append(p.candidates, e.parent)",
      "374:  }",
      "375: }",
      "379: type selectChildren struct{}",
      "381: func (s *selectChildren) apply(e *Element, p *pather) {",
      "382:  for _, c := range e.Child {",
      "383:   if c, ok := c.(*Element); ok {",
      "384:    p.candidates = append(p.candidates, c)",
      "385:   }",
      "386:  }",
      "387: }",
      "391: type selectDescendants struct{}",
      "393: func (s *selectDescendants) apply(e *Element, p *pather) {",
      "394:  var queue fifo",
      "395:  for queue.add(e); queue.len() > 0; {",
      "396:   e := queue.remove().(*Element)",
      "397:   p.candidates = append(p.candidates, e)",
      "398:   for _, c := range e.Child {",
      "399:    if c, ok := c.(*Element); ok {",
      "400:     queue.add(c)",
      "401:    }",
      "402:   }",
      "403:  }",
      "404: }",
      "408: type selectChildrenByTag struct {",
      "409:  space, tag string",
      "410: }",
      "412: func newSelectChildrenByTag(path string) *selectChildrenByTag {",
      "413:  s, l := spaceDecompose(path)",
      "414:  return &selectChildrenByTag{s, l}",
      "415: }",
      "417: func (s *selectChildrenByTag) apply(e *Element, p *pather) {",
      "418:  for _, c := range e.Child {",
      "419:   if c, ok := c.(*Element); ok && spaceMatch(s.space, c.Space) && s.tag == c.Tag {",
      "420:    p.candidates = append(p.candidates, c)",
      "421:   }",
      "422:  }",
      "423: }",
      "427: type filterPos struct {",
      "428:  index int",
      "429: }",
      "431: func newFilterPos(pos int) *filterPos {",
      "432:  return &filterPos{pos}",
      "433: }",
      "435: func (f *filterPos) apply(p *pather) {",
      "436:  if f.index >= 0 {",
      "437:   if f.index < len(p.candidates) {",
      "438:    p.scratch = append(p.scratch, p.candidates[f.index])",
      "439:   }",
      "440:  } else {",
      "441:   if -f.index <= len(p.candidates) {",
      "442:    p.scratch = append(p.scratch, p.candidates[len(p.candidates)+f.index])",
      "443:   }",
      "444:  }",
      "445:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "446: }",
      "450: type filterAttr struct {",
      "451:  space, key string",
      "452: }",
      "454: func newFilterAttr(str string) *filterAttr {",
      "455:  s, l := spaceDecompose(str)",
      "456:  return &filterAttr{s, l}",
      "457: }",
      "459: func (f *filterAttr) apply(p *pather) {",
      "460:  for _, c := range p.candidates {",
      "461:   for _, a := range c.Attr {",
      "462:    if spaceMatch(f.space, a.Space) && f.key == a.Key {",
      "463:     p.scratch = append(p.scratch, c)",
      "464:     break",
      "465:    }",
      "466:   }",
      "467:  }",
      "468:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "469: }",
      "473: type filterAttrVal struct {",
      "474:  space, key, val string",
      "475: }",
      "477: func newFilterAttrVal(str, value string) *filterAttrVal {",
      "478:  s, l := spaceDecompose(str)",
      "479:  return &filterAttrVal{s, l, value}",
      "480: }",
      "482: func (f *filterAttrVal) apply(p *pather) {",
      "483:  for _, c := range p.candidates {",
      "484:   for _, a := range c.Attr {",
      "485:    if spaceMatch(f.space, a.Space) && f.key == a.Key && f.val == a.Value {",
      "486:     p.scratch = append(p.scratch, c)",
      "487:     break",
      "488:    }",
      "489:   }",
      "490:  }",
      "491:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "492: }",
      "496: type filterFunc struct {",
      "497:  fn func(e *Element) string",
      "498: }",
      "500: func newFilterFunc(fn func(e *Element) string) *filterFunc {",
      "501:  return &filterFunc{fn}",
      "502: }",
      "504: func (f *filterFunc) apply(p *pather) {",
      "505:  for _, c := range p.candidates {",
      "506:   if f.fn(c) != \"\" {",
      "507:    p.scratch = append(p.scratch, c)",
      "508:   }",
      "509:  }",
      "510:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "511: }",
      "515: type filterFuncVal struct {",
      "516:  fn  func(e *Element) string",
      "517:  val string",
      "518: }",
      "520: func newFilterFuncVal(fn func(e *Element) string, value string) *filterFuncVal {",
      "521:  return &filterFuncVal{fn, value}",
      "522: }",
      "524: func (f *filterFuncVal) apply(p *pather) {",
      "525:  for _, c := range p.candidates {",
      "526:   if f.fn(c) == f.val {",
      "527:    p.scratch = append(p.scratch, c)",
      "528:   }",
      "529:  }",
      "530:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "531: }",
      "535: type filterChild struct {",
      "536:  space, tag string",
      "537: }",
      "539: func newFilterChild(str string) *filterChild {",
      "540:  s, l := spaceDecompose(str)",
      "541:  return &filterChild{s, l}",
      "542: }",
      "544: func (f *filterChild) apply(p *pather) {",
      "545:  for _, c := range p.candidates {",
      "546:   for _, cc := range c.Child {",
      "547:    if cc, ok := cc.(*Element); ok &&",
      "548:     spaceMatch(f.space, cc.Space) &&",
      "549:     f.tag == cc.Tag {",
      "550:     p.scratch = append(p.scratch, c)",
      "551:    }",
      "552:   }",
      "553:  }",
      "554:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "555: }",
      "559: type filterChildText struct {",
      "560:  space, tag, text string",
      "561: }",
      "563: func newFilterChildText(str, text string) *filterChildText {",
      "564:  s, l := spaceDecompose(str)",
      "565:  return &filterChildText{s, l, text}",
      "566: }",
      "568: func (f *filterChildText) apply(p *pather) {",
      "569:  for _, c := range p.candidates {",
      "570:   for _, cc := range c.Child {",
      "571:    if cc, ok := cc.(*Element); ok &&",
      "572:     spaceMatch(f.space, cc.Space) &&",
      "573:     f.tag == cc.Tag &&",
      "574:     f.text == cc.Text() {",
      "575:     p.scratch = append(p.scratch, c)",
      "576:    }",
      "577:   }",
      "578:  }",
      "579:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
      "580: }",
      "",
      "---------------"
    ],
    "vendor/github.com/vmware/vmw-ovflib/ovf.go||vendor/github.com/vmware/vmw-ovflib/ovf.go": [
      "File: vendor/github.com/vmware/vmw-ovflib/ovf.go -> vendor/github.com/vmware/vmw-ovflib/ovf.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ec630edccfecc765fbe7aeb8ea5c79398a01af2",
      "candidate_info": {
        "commit_hash": "2ec630edccfecc765fbe7aeb8ea5c79398a01af2",
        "repo": "coreos/ignition",
        "commit_url": "https://github.com/coreos/ignition/commit/2ec630edccfecc765fbe7aeb8ea5c79398a01af2",
        "files": [
          "internal/providers/vmware/vmw-ovflib/ovf_test.go"
        ],
        "message": "providers/vmware: convert OVF tests to testify",
        "before_after_code_files": [
          "internal/providers/vmware/vmw-ovflib/ovf_test.go||internal/providers/vmware/vmw-ovflib/ovf_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/ignition/pull/1350"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/providers/vmware/vmw-ovflib/ovf_test.go||internal/providers/vmware/vmw-ovflib/ovf_test.go": [
          "File: internal/providers/vmware/vmw-ovflib/ovf_test.go -> internal/providers/vmware/vmw-ovflib/ovf_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"testing\"",
          "21: )",
          "23: var data_vsphere = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "20:  . \"github.com/smartystreets/goconvey/convey\"",
          "",
          "[Added Lines]",
          "20:  \"github.com/stretchr/testify/assert\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: </Environment>`)",
          "67: func TestOvfEnvProperties(t *testing.T) {",
          "89:  }",
          "93: }",
          "95: func TestOvfEnvPlatform(t *testing.T) {",
          "106: }",
          "108: func TestVappRunUserDataUrl(t *testing.T) {",
          "121: }",
          "123: func TestInvalidData(t *testing.T) {",
          "128: }",
          "",
          "[Removed Lines]",
          "69:  var testerFunc = func(env_str []byte) func() {",
          "70:   return func() {",
          "71:    env, err := ReadEnvironment(env_str)",
          "72:    So(err, ShouldBeNil)",
          "73:    props := env.Properties",
          "75:    var val string",
          "76:    var ok bool",
          "77:    Convey(`Property \"foo\"`, func() {",
          "78:     val, ok = props[\"foo\"]",
          "79:     So(ok, ShouldBeTrue)",
          "80:     So(val, ShouldEqual, \"42\")",
          "81:    })",
          "83:    Convey(`Property \"bar\"`, func() {",
          "84:     val, ok = props[\"bar\"]",
          "85:     So(ok, ShouldBeTrue)",
          "86:     So(val, ShouldEqual, \"0\")",
          "87:    })",
          "88:   }",
          "91:  Convey(\"With vAppRun environment\", t, testerFunc(data_vapprun))",
          "92:  Convey(\"With vSphere environment\", t, testerFunc(data_vsphere))",
          "96:  Convey(\"With vSphere environment\", t, func() {",
          "97:   env, err := ReadEnvironment(data_vsphere)",
          "98:   So(err, ShouldBeNil)",
          "99:   platform := env.Platform",
          "101:   So(platform.Kind, ShouldEqual, \"VMware ESXi\")",
          "102:   So(platform.Version, ShouldEqual, \"5.5.0\")",
          "103:   So(platform.Vendor, ShouldEqual, \"VMware, Inc.\")",
          "104:   So(platform.Locale, ShouldEqual, \"en\")",
          "105:  })",
          "109:  Convey(\"With vAppRun environment\", t, func() {",
          "110:   env, err := ReadEnvironment(data_vapprun)",
          "111:   So(err, ShouldBeNil)",
          "112:   props := env.Properties",
          "114:   var val string",
          "115:   var ok bool",
          "117:   val, ok = props[\"guestinfo.user_data.url\"]",
          "118:   So(ok, ShouldBeTrue)",
          "119:   So(val, ShouldEqual, \"https://gist.githubusercontent.com/sigma/5a64aac1693da9ca70d2/raw/plop.yaml\")",
          "120:  })",
          "124:  Convey(\"With invalid data\", t, func() {",
          "125:   _, err := ReadEnvironment(append(data_vsphere, []byte(\"garbage\")...))",
          "126:   So(err, ShouldBeNil)",
          "127:  })",
          "",
          "[Added Lines]",
          "68:  var testOne = func(env_str []byte) {",
          "69:   env, err := ReadEnvironment(env_str)",
          "70:   assert.Nil(t, err)",
          "71:   props := env.Properties",
          "73:   var val string",
          "74:   var ok bool",
          "75:   val, ok = props[\"foo\"]",
          "76:   assert.True(t, ok)",
          "77:   assert.Equal(t, val, \"42\")",
          "79:   val, ok = props[\"bar\"]",
          "80:   assert.True(t, ok)",
          "81:   assert.Equal(t, val, \"0\")",
          "84:  testOne(data_vapprun)",
          "85:  testOne(data_vsphere)",
          "89:  env, err := ReadEnvironment(data_vsphere)",
          "90:  assert.Nil(t, err)",
          "91:  platform := env.Platform",
          "93:  assert.Equal(t, platform.Kind, \"VMware ESXi\")",
          "94:  assert.Equal(t, platform.Version, \"5.5.0\")",
          "95:  assert.Equal(t, platform.Vendor, \"VMware, Inc.\")",
          "96:  assert.Equal(t, platform.Locale, \"en\")",
          "100:  env, err := ReadEnvironment(data_vapprun)",
          "101:  assert.Nil(t, err)",
          "102:  props := env.Properties",
          "104:  var val string",
          "105:  var ok bool",
          "107:  val, ok = props[\"guestinfo.user_data.url\"]",
          "108:  assert.True(t, ok)",
          "109:  assert.Equal(t, val, \"https://gist.githubusercontent.com/sigma/5a64aac1693da9ca70d2/raw/plop.yaml\")",
          "113:  _, err := ReadEnvironment(append(data_vsphere, []byte(\"garbage\")...))",
          "114:  assert.Nil(t, err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d870a6bdaa97676eb90156c3abc65228a522c4f1",
      "candidate_info": {
        "commit_hash": "d870a6bdaa97676eb90156c3abc65228a522c4f1",
        "repo": "coreos/ignition",
        "commit_url": "https://github.com/coreos/ignition/commit/d870a6bdaa97676eb90156c3abc65228a522c4f1",
        "files": [
          "internal/providers/vmware/vmw-ovflib/LICENSE",
          "internal/providers/vmware/vmw-ovflib/README",
          "internal/providers/vmware/vmw-ovflib/ovf.go",
          "internal/providers/vmware/vmw-ovflib/ovf_test.go"
        ],
        "message": "providers/vmware: add verbatim copy of vmw-ovflib\n\nImport vmware-archive/vmw-ovflib@53a0e9f7a4 verbatim; it's no longer\nmaintained upstream.  This is identical to the vendored vmw-ovflib code.",
        "before_after_code_files": [
          "internal/providers/vmware/vmw-ovflib/ovf.go||internal/providers/vmware/vmw-ovflib/ovf.go",
          "internal/providers/vmware/vmw-ovflib/ovf_test.go||internal/providers/vmware/vmw-ovflib/ovf_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/ignition/pull/1350"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/providers/vmware/vmw-ovflib/ovf.go||internal/providers/vmware/vmw-ovflib/ovf.go": [
          "File: internal/providers/vmware/vmw-ovflib/ovf.go -> internal/providers/vmware/vmw-ovflib/ovf.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package ovf",
          "17: import (",
          "18:  \"encoding/xml\"",
          "19: )",
          "21: type environment struct {",
          "22:  Platform   platform   `xml:\"PlatformSection\"`",
          "23:  Properties []property `xml:\"PropertySection>Property\"`",
          "24: }",
          "26: type platform struct {",
          "27:  Kind    string `xml:\"Kind\"`",
          "28:  Version string `xml:\"Version\"`",
          "29:  Vendor  string `xml:\"Vendor\"`",
          "30:  Locale  string `xml:\"Locale\"`",
          "31: }",
          "33: type property struct {",
          "34:  Key   string `xml:\"key,attr\"`",
          "35:  Value string `xml:\"value,attr\"`",
          "36: }",
          "38: type OvfEnvironment struct {",
          "39:  Platform   platform",
          "40:  Properties map[string]string",
          "41: }",
          "43: func ReadEnvironment(doc []byte) (OvfEnvironment, error) {",
          "44:  var env environment",
          "45:  if err := xml.Unmarshal(doc, &env); err != nil {",
          "46:   return OvfEnvironment{}, err",
          "47:  }",
          "49:  dict := make(map[string]string)",
          "50:  for _, p := range env.Properties {",
          "51:   dict[p.Key] = p.Value",
          "52:  }",
          "53:  return OvfEnvironment{Properties: dict, Platform: env.Platform}, nil",
          "54: }",
          "",
          "---------------"
        ],
        "internal/providers/vmware/vmw-ovflib/ovf_test.go||internal/providers/vmware/vmw-ovflib/ovf_test.go": [
          "File: internal/providers/vmware/vmw-ovflib/ovf_test.go -> internal/providers/vmware/vmw-ovflib/ovf_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package ovf",
          "17: import (",
          "18:  \"testing\"",
          "20:  . \"github.com/smartystreets/goconvey/convey\"",
          "21: )",
          "23: var data_vsphere = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "24: <Environment",
          "25:      xmlns=\"http://schemas.dmtf.org/ovf/environment/1\"",
          "26:      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
          "27:      xmlns:oe=\"http://schemas.dmtf.org/ovf/environment/1\"",
          "28:      xmlns:ve=\"http://www.vmware.com/schema/ovfenv\"",
          "29:      oe:id=\"\"",
          "30:      ve:vCenterId=\"vm-12345\">",
          "31:    <PlatformSection>",
          "32:       <Kind>VMware ESXi</Kind>",
          "33:       <Version>5.5.0</Version>",
          "34:       <Vendor>VMware, Inc.</Vendor>",
          "35:       <Locale>en</Locale>",
          "36:    </PlatformSection>",
          "37:    <PropertySection>",
          "38:          <Property oe:key=\"foo\" oe:value=\"42\"/>",
          "39:          <Property oe:key=\"bar\" oe:value=\"0\"/>",
          "40:    </PropertySection>",
          "41:    <ve:EthernetAdapterSection>",
          "42:       <ve:Adapter ve:mac=\"00:00:00:00:00:00\" ve:network=\"foo\" ve:unitNumber=\"7\"/>",
          "43:    </ve:EthernetAdapterSection>",
          "44: </Environment>`)",
          "46: var data_vapprun = []byte(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "47: <Environment xmlns=\"http://schemas.dmtf.org/ovf/environment/1\"",
          "48:      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
          "49:      xmlns:oe=\"http://schemas.dmtf.org/ovf/environment/1\"",
          "50:      oe:id=\"CoreOS-vmw\">",
          "51:    <PlatformSection>",
          "52:       <Kind>vapprun</Kind>",
          "53:       <Version>1.0</Version>",
          "54:       <Vendor>VMware, Inc.</Vendor>",
          "55:       <Locale>en_US</Locale>",
          "56:    </PlatformSection>",
          "57:    <PropertySection>",
          "58:       <Property oe:key=\"foo\" oe:value=\"42\"/>",
          "59:       <Property oe:key=\"bar\" oe:value=\"0\"/>",
          "60:       <Property oe:key=\"guestinfo.user_data.url\" oe:value=\"https://gist.githubusercontent.com/sigma/5a64aac1693da9ca70d2/raw/plop.yaml\"/>",
          "61:       <Property oe:key=\"guestinfo.user_data.doc\" oe:value=\"\"/>",
          "62:       <Property oe:key=\"guestinfo.meta_data.url\" oe:value=\"\"/>",
          "63:       <Property oe:key=\"guestinfo.meta_data.doc\" oe:value=\"\"/>",
          "64:    </PropertySection>",
          "65: </Environment>`)",
          "67: func TestOvfEnvProperties(t *testing.T) {",
          "69:  var testerFunc = func(env_str []byte) func() {",
          "70:   return func() {",
          "71:    env, err := ReadEnvironment(env_str)",
          "72:    So(err, ShouldBeNil)",
          "73:    props := env.Properties",
          "75:    var val string",
          "76:    var ok bool",
          "77:    Convey(`Property \"foo\"`, func() {",
          "78:     val, ok = props[\"foo\"]",
          "79:     So(ok, ShouldBeTrue)",
          "80:     So(val, ShouldEqual, \"42\")",
          "81:    })",
          "83:    Convey(`Property \"bar\"`, func() {",
          "84:     val, ok = props[\"bar\"]",
          "85:     So(ok, ShouldBeTrue)",
          "86:     So(val, ShouldEqual, \"0\")",
          "87:    })",
          "88:   }",
          "89:  }",
          "91:  Convey(\"With vAppRun environment\", t, testerFunc(data_vapprun))",
          "92:  Convey(\"With vSphere environment\", t, testerFunc(data_vsphere))",
          "93: }",
          "95: func TestOvfEnvPlatform(t *testing.T) {",
          "96:  Convey(\"With vSphere environment\", t, func() {",
          "97:   env, err := ReadEnvironment(data_vsphere)",
          "98:   So(err, ShouldBeNil)",
          "99:   platform := env.Platform",
          "101:   So(platform.Kind, ShouldEqual, \"VMware ESXi\")",
          "102:   So(platform.Version, ShouldEqual, \"5.5.0\")",
          "103:   So(platform.Vendor, ShouldEqual, \"VMware, Inc.\")",
          "104:   So(platform.Locale, ShouldEqual, \"en\")",
          "105:  })",
          "106: }",
          "108: func TestVappRunUserDataUrl(t *testing.T) {",
          "109:  Convey(\"With vAppRun environment\", t, func() {",
          "110:   env, err := ReadEnvironment(data_vapprun)",
          "111:   So(err, ShouldBeNil)",
          "112:   props := env.Properties",
          "114:   var val string",
          "115:   var ok bool",
          "117:   val, ok = props[\"guestinfo.user_data.url\"]",
          "118:   So(ok, ShouldBeTrue)",
          "119:   So(val, ShouldEqual, \"https://gist.githubusercontent.com/sigma/5a64aac1693da9ca70d2/raw/plop.yaml\")",
          "120:  })",
          "121: }",
          "123: func TestInvalidData(t *testing.T) {",
          "124:  Convey(\"With invalid data\", t, func() {",
          "125:   _, err := ReadEnvironment(append(data_vsphere, []byte(\"garbage\")...))",
          "126:   So(err, ShouldBeNil)",
          "127:  })",
          "128: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "addd34c7ae8e511286683d928210c222cc858cb3",
      "candidate_info": {
        "commit_hash": "addd34c7ae8e511286683d928210c222cc858cb3",
        "repo": "coreos/ignition",
        "commit_url": "https://github.com/coreos/ignition/commit/addd34c7ae8e511286683d928210c222cc858cb3",
        "files": [
          "go.mod",
          "go.sum",
          "vendor/github.com/beevik/etree/.travis.yml",
          "vendor/github.com/beevik/etree/CONTRIBUTORS",
          "vendor/github.com/beevik/etree/LICENSE",
          "vendor/github.com/beevik/etree/README.md",
          "vendor/github.com/beevik/etree/RELEASE_NOTES.md",
          "vendor/github.com/beevik/etree/etree.go",
          "vendor/github.com/beevik/etree/go.mod",
          "vendor/github.com/beevik/etree/helpers.go",
          "vendor/github.com/beevik/etree/path.go",
          "vendor/modules.txt"
        ],
        "message": "go.mod: add github.com/beevik/etree\n\nWe need to round-trip OVF environment XML, which uses XML namespace\nprefixes. encoding/xml can't handle those [1] and bad things happen if\nyou try [2].  Use an external package instead.\n\n[1]: https://github.com/golang/go/issues/9519\n[2]: https://github.com/mattermost/xml-roundtrip-validator/blob/master/advisories/unstable-elements.md",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "vendor/github.com/beevik/etree/etree.go||vendor/github.com/beevik/etree/etree.go",
          "vendor/github.com/beevik/etree/go.mod||vendor/github.com/beevik/etree/go.mod",
          "vendor/github.com/beevik/etree/helpers.go||vendor/github.com/beevik/etree/helpers.go",
          "vendor/github.com/beevik/etree/path.go||vendor/github.com/beevik/etree/path.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/ignition/pull/1350"
        ],
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "vendor/github.com/beevik/etree/etree.go||vendor/github.com/beevik/etree/etree.go",
            "vendor/github.com/beevik/etree/go.mod||vendor/github.com/beevik/etree/go.mod",
            "vendor/github.com/beevik/etree/helpers.go||vendor/github.com/beevik/etree/helpers.go",
            "vendor/github.com/beevik/etree/path.go||vendor/github.com/beevik/etree/path.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "vendor/github.com/beevik/etree/etree.go||vendor/github.com/beevik/etree/etree.go",
            "vendor/github.com/beevik/etree/go.mod||vendor/github.com/beevik/etree/go.mod",
            "vendor/github.com/beevik/etree/helpers.go||vendor/github.com/beevik/etree/helpers.go",
            "vendor/github.com/beevik/etree/path.go||vendor/github.com/beevik/etree/path.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  cloud.google.com/go v0.58.0",
          "7:  cloud.google.com/go/storage v1.9.0",
          "8:  github.com/aws/aws-sdk-go v1.30.28",
          "9:  github.com/coreos/go-semver v0.3.0",
          "10:  github.com/coreos/go-systemd/v22 v22.0.0",
          "11:  github.com/coreos/vcontext v0.0.0-20211021162308-f1dbbca7bef4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  github.com/beevik/etree v1.1.1-0.20200718192613-4a2f8b9d084c",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=",
          "41: github.com/aws/aws-sdk-go v1.30.28 h1:SaPM7dlmp7h3Lj1nJ4jdzOkTdom08+g20k7AU5heZYg=",
          "42: github.com/aws/aws-sdk-go v1.30.28/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=",
          "43: github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=",
          "44: github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=",
          "45: github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: github.com/beevik/etree v1.1.1-0.20200718192613-4a2f8b9d084c h1:uYq6BD31fkfeNKQmfLj7ODcEfkb5JLsKrXVSqgnfGg8=",
          "44: github.com/beevik/etree v1.1.1-0.20200718192613-4a2f8b9d084c/go.mod h1:0yGO2rna3S9DkITDWHY1bMtcY4IJ4w+4S+EooZUR0bE=",
          "",
          "---------------"
        ],
        "vendor/github.com/beevik/etree/etree.go||vendor/github.com/beevik/etree/etree.go": [
          "File: vendor/github.com/beevik/etree/etree.go -> vendor/github.com/beevik/etree/etree.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: package etree",
          "9: import (",
          "10:  \"bufio\"",
          "11:  \"bytes\"",
          "12:  \"encoding/xml\"",
          "13:  \"errors\"",
          "14:  \"io\"",
          "15:  \"os\"",
          "16:  \"sort\"",
          "17:  \"strings\"",
          "18: )",
          "20: const (",
          "23:  NoIndent = -1",
          "24: )",
          "27: var ErrXML = errors.New(\"etree: invalid XML format\")",
          "31: type ReadSettings struct {",
          "33:  CharsetReader func(charset string, input io.Reader) (io.Reader, error)",
          "37:  Permissive bool",
          "40:  Entity map[string]string",
          "41: }",
          "44: func newReadSettings() ReadSettings {",
          "45:  return ReadSettings{",
          "46:   CharsetReader: func(label string, input io.Reader) (io.Reader, error) {",
          "47:    return input, nil",
          "48:   },",
          "49:   Permissive: false,",
          "50:  }",
          "51: }",
          "54: func (s *ReadSettings) dup() ReadSettings {",
          "55:  var entityCopy map[string]string",
          "56:  if s.Entity != nil {",
          "57:   entityCopy = make(map[string]string)",
          "58:   for k, v := range s.Entity {",
          "59:    entityCopy[k] = v",
          "60:   }",
          "61:  }",
          "62:  return ReadSettings{",
          "63:   CharsetReader: s.CharsetReader,",
          "64:   Permissive:    s.Permissive,",
          "65:   Entity:        entityCopy,",
          "66:  }",
          "67: }",
          "71: type WriteSettings struct {",
          "74:  CanonicalEndTags bool",
          "79:  CanonicalText bool",
          "84:  CanonicalAttrVal bool",
          "89:  UseCRLF bool",
          "90: }",
          "93: func newWriteSettings() WriteSettings {",
          "94:  return WriteSettings{",
          "95:   CanonicalEndTags: false,",
          "96:   CanonicalText:    false,",
          "97:   CanonicalAttrVal: false,",
          "98:   UseCRLF:          false,",
          "99:  }",
          "100: }",
          "103: func (s *WriteSettings) dup() WriteSettings {",
          "104:  return *s",
          "105: }",
          "110: type Token interface {",
          "111:  Parent() *Element",
          "112:  Index() int",
          "113:  dup(parent *Element) Token",
          "114:  setParent(parent *Element)",
          "115:  setIndex(index int)",
          "116:  writeTo(w *bufio.Writer, s *WriteSettings)",
          "117: }",
          "129: type Document struct {",
          "130:  Element",
          "131:  ReadSettings  ReadSettings",
          "132:  WriteSettings WriteSettings",
          "133: }",
          "136: type Element struct {",
          "137:  Space, Tag string   // namespace prefix and tag",
          "138:  Attr       []Attr   // key-value attribute pairs",
          "139:  Child      []Token  // child tokens (elements, comments, etc.)",
          "140:  parent     *Element // parent element",
          "141:  index      int      // token index in parent's children",
          "142: }",
          "145: type Attr struct {",
          "146:  Space, Key string   // The attribute's namespace prefix and key",
          "147:  Value      string   // The attribute value string",
          "148:  element    *Element // element containing the attribute",
          "149: }",
          "152: type charDataFlags uint8",
          "154: const (",
          "156:  whitespaceFlag charDataFlags = 1 << iota",
          "159:  cdataFlag",
          "160: )",
          "165: type CharData struct {",
          "166:  Data   string // the simple text or CDATA section content",
          "167:  parent *Element",
          "168:  index  int",
          "169:  flags  charDataFlags",
          "170: }",
          "173: type Comment struct {",
          "174:  Data   string // the comment's text",
          "175:  parent *Element",
          "176:  index  int",
          "177: }",
          "180: type Directive struct {",
          "181:  Data   string // the directive string",
          "182:  parent *Element",
          "183:  index  int",
          "184: }",
          "187: type ProcInst struct {",
          "188:  Target string // the processing instruction target",
          "189:  Inst   string // the processing instruction value",
          "190:  parent *Element",
          "191:  index  int",
          "192: }",
          "195: func NewDocument() *Document {",
          "196:  return &Document{",
          "197:   Element:       Element{Child: make([]Token, 0)},",
          "198:   ReadSettings:  newReadSettings(),",
          "199:   WriteSettings: newWriteSettings(),",
          "200:  }",
          "201: }",
          "206: func NewDocumentWithRoot(e *Element) *Document {",
          "207:  d := NewDocument()",
          "208:  d.SetRoot(e)",
          "209:  return d",
          "210: }",
          "213: func (d *Document) Copy() *Document {",
          "214:  return &Document{",
          "215:   Element:       *(d.Element.dup(nil).(*Element)),",
          "216:   ReadSettings:  d.ReadSettings.dup(),",
          "217:   WriteSettings: d.WriteSettings.dup(),",
          "218:  }",
          "219: }",
          "223: func (d *Document) Root() *Element {",
          "224:  for _, t := range d.Child {",
          "225:   if c, ok := t.(*Element); ok {",
          "226:    return c",
          "227:   }",
          "228:  }",
          "229:  return nil",
          "230: }",
          "236: func (d *Document) SetRoot(e *Element) {",
          "237:  if e.parent != nil {",
          "238:   e.parent.RemoveChild(e)",
          "239:  }",
          "242:  p := &d.Element",
          "243:  for i, t := range p.Child {",
          "244:   if _, ok := t.(*Element); ok {",
          "245:    t.setParent(nil)",
          "246:    t.setIndex(-1)",
          "247:    p.Child[i] = e",
          "248:    e.setParent(p)",
          "249:    e.setIndex(i)",
          "250:    return",
          "251:   }",
          "252:  }",
          "255:  p.addChild(e)",
          "256: }",
          "260: func (d *Document) ReadFrom(r io.Reader) (n int64, err error) {",
          "261:  return d.Element.readFrom(r, d.ReadSettings)",
          "262: }",
          "266: func (d *Document) ReadFromFile(filepath string) error {",
          "267:  f, err := os.Open(filepath)",
          "268:  if err != nil {",
          "269:   return err",
          "270:  }",
          "271:  defer f.Close()",
          "272:  _, err = d.ReadFrom(f)",
          "273:  return err",
          "274: }",
          "277: func (d *Document) ReadFromBytes(b []byte) error {",
          "278:  _, err := d.ReadFrom(bytes.NewReader(b))",
          "279:  return err",
          "280: }",
          "283: func (d *Document) ReadFromString(s string) error {",
          "284:  _, err := d.ReadFrom(strings.NewReader(s))",
          "285:  return err",
          "286: }",
          "290: func (d *Document) WriteTo(w io.Writer) (n int64, err error) {",
          "291:  cw := newCountWriter(w)",
          "292:  b := bufio.NewWriter(cw)",
          "293:  for _, c := range d.Child {",
          "294:   c.writeTo(b, &d.WriteSettings)",
          "295:  }",
          "296:  err, n = b.Flush(), cw.bytes",
          "297:  return",
          "298: }",
          "301: func (d *Document) WriteToFile(filepath string) error {",
          "302:  f, err := os.Create(filepath)",
          "303:  if err != nil {",
          "304:   return err",
          "305:  }",
          "306:  defer f.Close()",
          "307:  _, err = d.WriteTo(f)",
          "308:  return err",
          "309: }",
          "312: func (d *Document) WriteToBytes() (b []byte, err error) {",
          "313:  var buf bytes.Buffer",
          "314:  if _, err = d.WriteTo(&buf); err != nil {",
          "315:   return",
          "316:  }",
          "317:  return buf.Bytes(), nil",
          "318: }",
          "321: func (d *Document) WriteToString() (s string, err error) {",
          "322:  var b []byte",
          "323:  if b, err = d.WriteToBytes(); err != nil {",
          "324:   return",
          "325:  }",
          "326:  return string(b), nil",
          "327: }",
          "329: type indentFunc func(depth int) string",
          "335: func (d *Document) Indent(spaces int) {",
          "336:  var indent indentFunc",
          "337:  switch {",
          "338:  case spaces < 0:",
          "339:   indent = func(depth int) string { return \"\" }",
          "340:  case d.WriteSettings.UseCRLF:",
          "341:   indent = func(depth int) string { return indentCRLF(depth*spaces, indentSpaces) }",
          "342:  default:",
          "343:   indent = func(depth int) string { return indentLF(depth*spaces, indentSpaces) }",
          "344:  }",
          "345:  d.Element.indent(0, indent)",
          "346: }",
          "351: func (d *Document) IndentTabs() {",
          "352:  var indent indentFunc",
          "353:  switch d.WriteSettings.UseCRLF {",
          "354:  case true:",
          "355:   indent = func(depth int) string { return indentCRLF(depth, indentTabs) }",
          "356:  default:",
          "357:   indent = func(depth int) string { return indentLF(depth, indentTabs) }",
          "358:  }",
          "359:  d.Element.indent(0, indent)",
          "360: }",
          "364: func NewElement(tag string) *Element {",
          "365:  space, stag := spaceDecompose(tag)",
          "366:  return newElement(space, stag, nil)",
          "367: }",
          "371: func newElement(space, tag string, parent *Element) *Element {",
          "372:  e := &Element{",
          "373:   Space:  space,",
          "374:   Tag:    tag,",
          "375:   Attr:   make([]Attr, 0),",
          "376:   Child:  make([]Token, 0),",
          "377:   parent: parent,",
          "378:   index:  -1,",
          "379:  }",
          "380:  if parent != nil {",
          "381:   parent.addChild(e)",
          "382:  }",
          "383:  return e",
          "384: }",
          "390: func (e *Element) Copy() *Element {",
          "391:  return e.dup(nil).(*Element)",
          "392: }",
          "396: func (e *Element) FullTag() string {",
          "397:  if e.Space == \"\" {",
          "398:   return e.Tag",
          "399:  }",
          "400:  return e.Space + \":\" + e.Tag",
          "401: }",
          "406: func (e *Element) NamespaceURI() string {",
          "407:  if e.Space == \"\" {",
          "408:   return e.findDefaultNamespaceURI()",
          "409:  }",
          "410:  return e.findLocalNamespaceURI(e.Space)",
          "411: }",
          "415: func (e *Element) findLocalNamespaceURI(prefix string) string {",
          "416:  for _, a := range e.Attr {",
          "417:   if a.Space == \"xmlns\" && a.Key == prefix {",
          "418:    return a.Value",
          "419:   }",
          "420:  }",
          "422:  if e.parent == nil {",
          "423:   return \"\"",
          "424:  }",
          "426:  return e.parent.findLocalNamespaceURI(prefix)",
          "427: }",
          "430: func (e *Element) findDefaultNamespaceURI() string {",
          "431:  for _, a := range e.Attr {",
          "432:   if a.Space == \"\" && a.Key == \"xmlns\" {",
          "433:    return a.Value",
          "434:   }",
          "435:  }",
          "437:  if e.parent == nil {",
          "438:   return \"\"",
          "439:  }",
          "441:  return e.parent.findDefaultNamespaceURI()",
          "442: }",
          "445: func (e *Element) namespacePrefix() string {",
          "446:  return e.Space",
          "447: }",
          "450: func (e *Element) name() string {",
          "451:  return e.Tag",
          "452: }",
          "456: func (e *Element) Text() string {",
          "457:  if len(e.Child) == 0 {",
          "458:   return \"\"",
          "459:  }",
          "461:  text := \"\"",
          "462:  for _, ch := range e.Child {",
          "463:   if cd, ok := ch.(*CharData); ok {",
          "464:    if text == \"\" {",
          "465:     text = cd.Data",
          "466:    } else {",
          "467:     text += cd.Data",
          "468:    }",
          "469:   } else {",
          "470:    break",
          "471:   }",
          "472:  }",
          "473:  return text",
          "474: }",
          "478: func (e *Element) SetText(text string) {",
          "479:  e.replaceText(0, text, 0)",
          "480: }",
          "484: func (e *Element) SetCData(text string) {",
          "485:  e.replaceText(0, text, cdataFlag)",
          "486: }",
          "490: func (e *Element) Tail() string {",
          "491:  if e.Parent() == nil {",
          "492:   return \"\"",
          "493:  }",
          "495:  p := e.Parent()",
          "496:  i := e.Index()",
          "498:  text := \"\"",
          "499:  for _, ch := range p.Child[i+1:] {",
          "500:   if cd, ok := ch.(*CharData); ok {",
          "501:    if text == \"\" {",
          "502:     text = cd.Data",
          "503:    } else {",
          "504:     text += cd.Data",
          "505:    }",
          "506:   } else {",
          "507:    break",
          "508:   }",
          "509:  }",
          "510:  return text",
          "511: }",
          "515: func (e *Element) SetTail(text string) {",
          "516:  if e.Parent() == nil {",
          "517:   return",
          "518:  }",
          "520:  p := e.Parent()",
          "521:  p.replaceText(e.Index()+1, text, 0)",
          "522: }",
          "526: func (e *Element) replaceText(i int, text string, flags charDataFlags) {",
          "527:  end := e.findTermCharDataIndex(i)",
          "529:  switch {",
          "530:  case end == i:",
          "531:   if text != \"\" {",
          "533:    cd := newCharData(text, flags, nil)",
          "534:    e.InsertChildAt(i, cd)",
          "535:   }",
          "537:  case end == i+1:",
          "538:   if text == \"\" {",
          "540:    e.RemoveChildAt(i)",
          "541:   } else {",
          "543:    cd := e.Child[i].(*CharData)",
          "544:    cd.Data, cd.flags = text, flags",
          "545:   }",
          "547:  default:",
          "548:   if text == \"\" {",
          "550:    copy(e.Child[i:], e.Child[end:])",
          "551:    removed := end - i",
          "552:    e.Child = e.Child[:len(e.Child)-removed]",
          "553:    for j := i; j < len(e.Child); j++ {",
          "554:     e.Child[j].setIndex(j)",
          "555:    }",
          "556:   } else {",
          "559:    cd := e.Child[i].(*CharData)",
          "560:    cd.Data, cd.flags = text, flags",
          "561:    copy(e.Child[i+1:], e.Child[end:])",
          "562:    removed := end - (i + 1)",
          "563:    e.Child = e.Child[:len(e.Child)-removed]",
          "564:    for j := i + 1; j < len(e.Child); j++ {",
          "565:     e.Child[j].setIndex(j)",
          "566:    }",
          "567:   }",
          "568:  }",
          "569: }",
          "573: func (e *Element) findTermCharDataIndex(start int) int {",
          "574:  for i := start; i < len(e.Child); i++ {",
          "575:   if _, ok := e.Child[i].(*CharData); !ok {",
          "576:    return i",
          "577:   }",
          "578:  }",
          "579:  return len(e.Child)",
          "580: }",
          "585: func (e *Element) CreateElement(tag string) *Element {",
          "586:  space, stag := spaceDecompose(tag)",
          "587:  return newElement(space, stag, e)",
          "588: }",
          "593: func (e *Element) AddChild(t Token) {",
          "594:  if t.Parent() != nil {",
          "595:   t.Parent().RemoveChild(t)",
          "596:  }",
          "597:  e.addChild(t)",
          "598: }",
          "608: func (e *Element) InsertChild(ex Token, t Token) {",
          "609:  if ex == nil || ex.Parent() != e {",
          "610:   e.AddChild(t)",
          "611:   return",
          "612:  }",
          "614:  if t.Parent() != nil {",
          "615:   t.Parent().RemoveChild(t)",
          "616:  }",
          "618:  t.setParent(e)",
          "620:  i := ex.Index()",
          "621:  e.Child = append(e.Child, nil)",
          "622:  copy(e.Child[i+1:], e.Child[i:])",
          "623:  e.Child[i] = t",
          "625:  for j := i; j < len(e.Child); j++ {",
          "626:   e.Child[j].setIndex(j)",
          "627:  }",
          "628: }",
          "634: func (e *Element) InsertChildAt(index int, t Token) {",
          "635:  if index >= len(e.Child) {",
          "636:   e.AddChild(t)",
          "637:   return",
          "638:  }",
          "640:  if t.Parent() != nil {",
          "641:   if t.Parent() == e && t.Index() > index {",
          "642:    index--",
          "643:   }",
          "644:   t.Parent().RemoveChild(t)",
          "645:  }",
          "647:  t.setParent(e)",
          "649:  e.Child = append(e.Child, nil)",
          "650:  copy(e.Child[index+1:], e.Child[index:])",
          "651:  e.Child[index] = t",
          "653:  for j := index; j < len(e.Child); j++ {",
          "654:   e.Child[j].setIndex(j)",
          "655:  }",
          "656: }",
          "661: func (e *Element) RemoveChild(t Token) Token {",
          "662:  if t.Parent() != e {",
          "663:   return nil",
          "664:  }",
          "665:  return e.RemoveChildAt(t.Index())",
          "666: }",
          "671: func (e *Element) RemoveChildAt(index int) Token {",
          "672:  if index >= len(e.Child) {",
          "673:   return nil",
          "674:  }",
          "676:  t := e.Child[index]",
          "677:  for j := index + 1; j < len(e.Child); j++ {",
          "678:   e.Child[j].setIndex(j - 1)",
          "679:  }",
          "680:  e.Child = append(e.Child[:index], e.Child[index+1:]...)",
          "681:  t.setIndex(-1)",
          "682:  t.setParent(nil)",
          "683:  return t",
          "684: }",
          "688: func (e *Element) readFrom(ri io.Reader, settings ReadSettings) (n int64, err error) {",
          "689:  r := newCountReader(ri)",
          "690:  dec := xml.NewDecoder(r)",
          "691:  dec.CharsetReader = settings.CharsetReader",
          "692:  dec.Strict = !settings.Permissive",
          "693:  dec.Entity = settings.Entity",
          "694:  var stack stack",
          "695:  stack.push(e)",
          "696:  for {",
          "697:   t, err := dec.RawToken()",
          "698:   switch {",
          "699:   case err == io.EOF:",
          "700:    if len(stack.data) != 1 {",
          "701:     return r.bytes, ErrXML",
          "702:    }",
          "703:    return r.bytes, nil",
          "704:   case err != nil:",
          "705:    return r.bytes, err",
          "706:   case stack.empty():",
          "707:    return r.bytes, ErrXML",
          "708:   }",
          "710:   top := stack.peek().(*Element)",
          "712:   switch t := t.(type) {",
          "713:   case xml.StartElement:",
          "714:    e := newElement(t.Name.Space, t.Name.Local, top)",
          "715:    for _, a := range t.Attr {",
          "716:     e.createAttr(a.Name.Space, a.Name.Local, a.Value, e)",
          "717:    }",
          "718:    stack.push(e)",
          "719:   case xml.EndElement:",
          "720:    if top.Tag != t.Name.Local || top.Space != t.Name.Space {",
          "721:     return r.bytes, ErrXML",
          "722:    }",
          "723:    stack.pop()",
          "724:   case xml.CharData:",
          "725:    data := string(t)",
          "726:    var flags charDataFlags",
          "727:    if isWhitespace(data) {",
          "728:     flags = whitespaceFlag",
          "729:    }",
          "730:    newCharData(data, flags, top)",
          "731:   case xml.Comment:",
          "732:    newComment(string(t), top)",
          "733:   case xml.Directive:",
          "734:    newDirective(string(t), top)",
          "735:   case xml.ProcInst:",
          "736:    newProcInst(t.Target, string(t.Inst), top)",
          "737:   }",
          "738:  }",
          "739: }",
          "745: func (e *Element) SelectAttr(key string) *Attr {",
          "746:  space, skey := spaceDecompose(key)",
          "747:  for i, a := range e.Attr {",
          "748:   if spaceMatch(space, a.Space) && skey == a.Key {",
          "749:    return &e.Attr[i]",
          "750:   }",
          "751:  }",
          "752:  return nil",
          "753: }",
          "759: func (e *Element) SelectAttrValue(key, dflt string) string {",
          "760:  space, skey := spaceDecompose(key)",
          "761:  for _, a := range e.Attr {",
          "762:   if spaceMatch(space, a.Space) && skey == a.Key {",
          "763:    return a.Value",
          "764:   }",
          "765:  }",
          "766:  return dflt",
          "767: }",
          "770: func (e *Element) ChildElements() []*Element {",
          "771:  var elements []*Element",
          "772:  for _, t := range e.Child {",
          "773:   if c, ok := t.(*Element); ok {",
          "774:    elements = append(elements, c)",
          "775:   }",
          "776:  }",
          "777:  return elements",
          "778: }",
          "783: func (e *Element) SelectElement(tag string) *Element {",
          "784:  space, stag := spaceDecompose(tag)",
          "785:  for _, t := range e.Child {",
          "786:   if c, ok := t.(*Element); ok && spaceMatch(space, c.Space) && stag == c.Tag {",
          "787:    return c",
          "788:   }",
          "789:  }",
          "790:  return nil",
          "791: }",
          "795: func (e *Element) SelectElements(tag string) []*Element {",
          "796:  space, stag := spaceDecompose(tag)",
          "797:  var elements []*Element",
          "798:  for _, t := range e.Child {",
          "799:   if c, ok := t.(*Element); ok && spaceMatch(space, c.Space) && stag == c.Tag {",
          "800:    elements = append(elements, c)",
          "801:   }",
          "802:  }",
          "803:  return elements",
          "804: }",
          "809: func (e *Element) FindElement(path string) *Element {",
          "810:  return e.FindElementPath(MustCompilePath(path))",
          "811: }",
          "815: func (e *Element) FindElementPath(path Path) *Element {",
          "816:  p := newPather()",
          "817:  elements := p.traverse(e, path)",
          "818:  if len(elements) > 0 {",
          "819:   return elements[0]",
          "820:  }",
          "821:  return nil",
          "822: }",
          "827: func (e *Element) FindElements(path string) []*Element {",
          "828:  return e.FindElementsPath(MustCompilePath(path))",
          "829: }",
          "832: func (e *Element) FindElementsPath(path Path) []*Element {",
          "833:  p := newPather()",
          "834:  return p.traverse(e, path)",
          "835: }",
          "839: func (e *Element) GetPath() string {",
          "840:  path := []string{}",
          "841:  for seg := e; seg != nil; seg = seg.Parent() {",
          "842:   if seg.Tag != \"\" {",
          "843:    path = append(path, seg.Tag)",
          "844:   }",
          "845:  }",
          "848:  for i, j := 0, len(path)-1; i < j; i, j = i+1, j-1 {",
          "849:   path[i], path[j] = path[j], path[i]",
          "850:  }",
          "852:  return \"/\" + strings.Join(path, \"/\")",
          "853: }",
          "858: func (e *Element) GetRelativePath(source *Element) string {",
          "859:  var path []*Element",
          "861:  if source == nil {",
          "862:   return \"\"",
          "863:  }",
          "867:  var seg *Element",
          "868:  for seg = e; seg != nil && seg != source; seg = seg.Parent() {",
          "869:   path = append(path, seg)",
          "870:  }",
          "874:  if seg == source {",
          "875:   if len(path) == 0 {",
          "876:    return \".\"",
          "877:   }",
          "878:   parts := []string{}",
          "879:   for i := len(path) - 1; i >= 0; i-- {",
          "880:    parts = append(parts, path[i].Tag)",
          "881:   }",
          "882:   return \"./\" + strings.Join(parts, \"/\")",
          "883:  }",
          "889:  findPathIndex := func(e *Element, path []*Element) int {",
          "890:   for i, ee := range path {",
          "891:    if e == ee {",
          "892:     return i",
          "893:    }",
          "894:   }",
          "895:   return -1",
          "896:  }",
          "898:  climb := 0",
          "899:  for seg = source; seg != nil; seg = seg.Parent() {",
          "900:   i := findPathIndex(seg, path)",
          "901:   if i >= 0 {",
          "902:    path = path[:i] // truncate at found segment",
          "903:    break",
          "904:   }",
          "905:   climb++",
          "906:  }",
          "910:  if seg == nil {",
          "911:   return \"\"",
          "912:  }",
          "916:  parts := []string{}",
          "917:  for i := 0; i < climb; i++ {",
          "918:   parts = append(parts, \"..\")",
          "919:  }",
          "920:  for i := len(path) - 1; i >= 0; i-- {",
          "921:   parts = append(parts, path[i].Tag)",
          "922:  }",
          "923:  return strings.Join(parts, \"/\")",
          "924: }",
          "928: func (e *Element) indent(depth int, indent indentFunc) {",
          "929:  e.stripIndent()",
          "930:  n := len(e.Child)",
          "931:  if n == 0 {",
          "932:   return",
          "933:  }",
          "935:  oldChild := e.Child",
          "936:  e.Child = make([]Token, 0, n*2+1)",
          "937:  isCharData, firstNonCharData := false, true",
          "938:  for _, c := range oldChild {",
          "942:   _, isCharData = c.(*CharData)",
          "943:   if !isCharData {",
          "944:    if !firstNonCharData || depth > 0 {",
          "945:     s := indent(depth)",
          "946:     if s != \"\" {",
          "947:      newCharData(s, whitespaceFlag, e)",
          "948:     }",
          "949:    }",
          "950:    firstNonCharData = false",
          "951:   }",
          "953:   e.addChild(c)",
          "956:   if ce, ok := c.(*Element); ok {",
          "957:    ce.indent(depth+1, indent)",
          "958:   }",
          "959:  }",
          "962:  if !isCharData {",
          "963:   if !firstNonCharData || depth > 0 {",
          "964:    s := indent(depth - 1)",
          "965:    if s != \"\" {",
          "966:     newCharData(s, whitespaceFlag, e)",
          "967:    }",
          "968:   }",
          "969:  }",
          "970: }",
          "973: func (e *Element) stripIndent() {",
          "975:  n := len(e.Child)",
          "976:  for _, c := range e.Child {",
          "977:   if cd, ok := c.(*CharData); ok && cd.IsWhitespace() {",
          "978:    n--",
          "979:   }",
          "980:  }",
          "981:  if n == len(e.Child) {",
          "982:   return",
          "983:  }",
          "986:  newChild := make([]Token, n)",
          "987:  j := 0",
          "988:  for _, c := range e.Child {",
          "989:   if cd, ok := c.(*CharData); ok && cd.IsWhitespace() {",
          "990:    continue",
          "991:   }",
          "992:   newChild[j] = c",
          "993:   newChild[j].setIndex(j)",
          "994:   j++",
          "995:  }",
          "996:  e.Child = newChild",
          "997: }",
          "1000: func (e *Element) dup(parent *Element) Token {",
          "1001:  ne := &Element{",
          "1002:   Space:  e.Space,",
          "1003:   Tag:    e.Tag,",
          "1004:   Attr:   make([]Attr, len(e.Attr)),",
          "1005:   Child:  make([]Token, len(e.Child)),",
          "1006:   parent: parent,",
          "1007:   index:  e.index,",
          "1008:  }",
          "1009:  for i, t := range e.Child {",
          "1010:   ne.Child[i] = t.dup(ne)",
          "1011:  }",
          "1012:  copy(ne.Attr, e.Attr)",
          "1013:  return ne",
          "1014: }",
          "1018: func (e *Element) Parent() *Element {",
          "1019:  return e.parent",
          "1020: }",
          "1025: func (e *Element) Index() int {",
          "1026:  return e.index",
          "1027: }",
          "1030: func (e *Element) setParent(parent *Element) {",
          "1031:  e.parent = parent",
          "1032: }",
          "1035: func (e *Element) setIndex(index int) {",
          "1036:  e.index = index",
          "1037: }",
          "1040: func (e *Element) writeTo(w *bufio.Writer, s *WriteSettings) {",
          "1041:  w.WriteByte('<')",
          "1042:  w.WriteString(e.FullTag())",
          "1043:  for _, a := range e.Attr {",
          "1044:   w.WriteByte(' ')",
          "1045:   a.writeTo(w, s)",
          "1046:  }",
          "1047:  if len(e.Child) > 0 {",
          "1048:   w.WriteByte('>')",
          "1049:   for _, c := range e.Child {",
          "1050:    c.writeTo(w, s)",
          "1051:   }",
          "1052:   w.Write([]byte{'<', '/'})",
          "1053:   w.WriteString(e.FullTag())",
          "1054:   w.WriteByte('>')",
          "1055:  } else {",
          "1056:   if s.CanonicalEndTags {",
          "1057:    w.Write([]byte{'>', '<', '/'})",
          "1058:    w.WriteString(e.FullTag())",
          "1059:    w.WriteByte('>')",
          "1060:   } else {",
          "1061:    w.Write([]byte{'/', '>'})",
          "1062:   }",
          "1063:  }",
          "1064: }",
          "1067: func (e *Element) addChild(t Token) {",
          "1068:  t.setParent(e)",
          "1069:  t.setIndex(len(e.Child))",
          "1070:  e.Child = append(e.Child, t)",
          "1071: }",
          "1077: func (e *Element) CreateAttr(key, value string) *Attr {",
          "1078:  space, skey := spaceDecompose(key)",
          "1079:  return e.createAttr(space, skey, value, e)",
          "1080: }",
          "1083: func (e *Element) createAttr(space, key, value string, parent *Element) *Attr {",
          "1084:  for i, a := range e.Attr {",
          "1085:   if space == a.Space && key == a.Key {",
          "1086:    e.Attr[i].Value = value",
          "1087:    return &e.Attr[i]",
          "1088:   }",
          "1089:  }",
          "1090:  a := Attr{",
          "1091:   Space:   space,",
          "1092:   Key:     key,",
          "1093:   Value:   value,",
          "1094:   element: parent,",
          "1095:  }",
          "1096:  e.Attr = append(e.Attr, a)",
          "1097:  return &e.Attr[len(e.Attr)-1]",
          "1098: }",
          "1104: func (e *Element) RemoveAttr(key string) *Attr {",
          "1105:  space, skey := spaceDecompose(key)",
          "1106:  for i, a := range e.Attr {",
          "1107:   if space == a.Space && skey == a.Key {",
          "1108:    e.Attr = append(e.Attr[0:i], e.Attr[i+1:]...)",
          "1109:    return &Attr{",
          "1110:     Space:   a.Space,",
          "1111:     Key:     a.Key,",
          "1112:     Value:   a.Value,",
          "1113:     element: nil,",
          "1114:    }",
          "1115:   }",
          "1116:  }",
          "1117:  return nil",
          "1118: }",
          "1121: func (e *Element) SortAttrs() {",
          "1122:  sort.Sort(byAttr(e.Attr))",
          "1123: }",
          "1125: type byAttr []Attr",
          "1127: func (a byAttr) Len() int {",
          "1128:  return len(a)",
          "1129: }",
          "1131: func (a byAttr) Swap(i, j int) {",
          "1132:  a[i], a[j] = a[j], a[i]",
          "1133: }",
          "1135: func (a byAttr) Less(i, j int) bool {",
          "1136:  sp := strings.Compare(a[i].Space, a[j].Space)",
          "1137:  if sp == 0 {",
          "1138:   return strings.Compare(a[i].Key, a[j].Key) < 0",
          "1139:  }",
          "1140:  return sp < 0",
          "1141: }",
          "1145: func (a *Attr) FullKey() string {",
          "1146:  if a.Space == \"\" {",
          "1147:   return a.Key",
          "1148:  }",
          "1149:  return a.Space + \":\" + a.Key",
          "1150: }",
          "1153: func (a *Attr) Element() *Element {",
          "1154:  return a.element",
          "1155: }",
          "1160: func (a *Attr) NamespaceURI() string {",
          "1161:  if a.Space == \"\" {",
          "1162:   return \"\"",
          "1163:  }",
          "1164:  return a.element.findLocalNamespaceURI(a.Space)",
          "1165: }",
          "1168: func (a *Attr) writeTo(w *bufio.Writer, s *WriteSettings) {",
          "1169:  w.WriteString(a.FullKey())",
          "1170:  w.WriteString(`=\"`)",
          "1171:  var m escapeMode",
          "1172:  if s.CanonicalAttrVal {",
          "1173:   m = escapeCanonicalAttr",
          "1174:  } else {",
          "1175:   m = escapeNormal",
          "1176:  }",
          "1177:  escapeString(w, a.Value, m)",
          "1178:  w.WriteByte('\"')",
          "1179: }",
          "1182: func NewText(text string) *CharData {",
          "1183:  return newCharData(text, 0, nil)",
          "1184: }",
          "1188: func NewCData(data string) *CharData {",
          "1189:  return newCharData(data, cdataFlag, nil)",
          "1190: }",
          "1197: func NewCharData(data string) *CharData {",
          "1198:  return newCharData(data, 0, nil)",
          "1199: }",
          "1203: func newCharData(data string, flags charDataFlags, parent *Element) *CharData {",
          "1204:  c := &CharData{",
          "1205:   Data:   data,",
          "1206:   parent: nil,",
          "1207:   index:  -1,",
          "1208:   flags:  flags,",
          "1209:  }",
          "1210:  if parent != nil {",
          "1211:   parent.addChild(c)",
          "1212:  }",
          "1213:  return c",
          "1214: }",
          "1218: func (e *Element) CreateText(text string) *CharData {",
          "1219:  return newCharData(text, 0, e)",
          "1220: }",
          "1225: func (e *Element) CreateCData(data string) *CharData {",
          "1226:  return newCharData(data, cdataFlag, e)",
          "1227: }",
          "1234: func (e *Element) CreateCharData(data string) *CharData {",
          "1235:  return newCharData(data, 0, e)",
          "1236: }",
          "1242: func (c *CharData) SetData(text string) {",
          "1243:  c.Data = text",
          "1244:  if isWhitespace(text) {",
          "1245:   c.flags |= whitespaceFlag",
          "1246:  } else {",
          "1247:   c.flags &= ^whitespaceFlag",
          "1248:  }",
          "1249: }",
          "1253: func (c *CharData) IsCData() bool {",
          "1254:  return (c.flags & cdataFlag) != 0",
          "1255: }",
          "1258: func (c *CharData) IsWhitespace() bool {",
          "1259:  return (c.flags & whitespaceFlag) != 0",
          "1260: }",
          "1264: func (c *CharData) Parent() *Element {",
          "1265:  return c.parent",
          "1266: }",
          "1271: func (c *CharData) Index() int {",
          "1272:  return c.index",
          "1273: }",
          "1276: func (c *CharData) dup(parent *Element) Token {",
          "1277:  return &CharData{",
          "1278:   Data:   c.Data,",
          "1279:   flags:  c.flags,",
          "1280:   parent: parent,",
          "1281:   index:  c.index,",
          "1282:  }",
          "1283: }",
          "1286: func (c *CharData) setParent(parent *Element) {",
          "1287:  c.parent = parent",
          "1288: }",
          "1292: func (c *CharData) setIndex(index int) {",
          "1293:  c.index = index",
          "1294: }",
          "1297: func (c *CharData) writeTo(w *bufio.Writer, s *WriteSettings) {",
          "1298:  if c.IsCData() {",
          "1299:   w.WriteString(`<![CDATA[`)",
          "1300:   w.WriteString(c.Data)",
          "1301:   w.WriteString(`]]>`)",
          "1302:  } else {",
          "1303:   var m escapeMode",
          "1304:   if s.CanonicalText {",
          "1305:    m = escapeCanonicalText",
          "1306:   } else {",
          "1307:    m = escapeNormal",
          "1308:   }",
          "1309:   escapeString(w, c.Data, m)",
          "1310:  }",
          "1311: }",
          "1314: func NewComment(comment string) *Comment {",
          "1315:  return newComment(comment, nil)",
          "1316: }",
          "1319: func newComment(comment string, parent *Element) *Comment {",
          "1320:  c := &Comment{",
          "1321:   Data:   comment,",
          "1322:   parent: nil,",
          "1323:   index:  -1,",
          "1324:  }",
          "1325:  if parent != nil {",
          "1326:   parent.addChild(c)",
          "1327:  }",
          "1328:  return c",
          "1329: }",
          "1333: func (e *Element) CreateComment(comment string) *Comment {",
          "1334:  return newComment(comment, e)",
          "1335: }",
          "1338: func (c *Comment) dup(parent *Element) Token {",
          "1339:  return &Comment{",
          "1340:   Data:   c.Data,",
          "1341:   parent: parent,",
          "1342:   index:  c.index,",
          "1343:  }",
          "1344: }",
          "1347: func (c *Comment) Parent() *Element {",
          "1348:  return c.parent",
          "1349: }",
          "1354: func (c *Comment) Index() int {",
          "1355:  return c.index",
          "1356: }",
          "1359: func (c *Comment) setParent(parent *Element) {",
          "1360:  c.parent = parent",
          "1361: }",
          "1365: func (c *Comment) setIndex(index int) {",
          "1366:  c.index = index",
          "1367: }",
          "1370: func (c *Comment) writeTo(w *bufio.Writer, s *WriteSettings) {",
          "1371:  w.WriteString(\"<!--\")",
          "1372:  w.WriteString(c.Data)",
          "1373:  w.WriteString(\"-->\")",
          "1374: }",
          "1377: func NewDirective(data string) *Directive {",
          "1378:  return newDirective(data, nil)",
          "1379: }",
          "1383: func newDirective(data string, parent *Element) *Directive {",
          "1384:  d := &Directive{",
          "1385:   Data:   data,",
          "1386:   parent: nil,",
          "1387:   index:  -1,",
          "1388:  }",
          "1389:  if parent != nil {",
          "1390:   parent.addChild(d)",
          "1391:  }",
          "1392:  return d",
          "1393: }",
          "1397: func (e *Element) CreateDirective(data string) *Directive {",
          "1398:  return newDirective(data, e)",
          "1399: }",
          "1402: func (d *Directive) dup(parent *Element) Token {",
          "1403:  return &Directive{",
          "1404:   Data:   d.Data,",
          "1405:   parent: parent,",
          "1406:   index:  d.index,",
          "1407:  }",
          "1408: }",
          "1412: func (d *Directive) Parent() *Element {",
          "1413:  return d.parent",
          "1414: }",
          "1419: func (d *Directive) Index() int {",
          "1420:  return d.index",
          "1421: }",
          "1424: func (d *Directive) setParent(parent *Element) {",
          "1425:  d.parent = parent",
          "1426: }",
          "1430: func (d *Directive) setIndex(index int) {",
          "1431:  d.index = index",
          "1432: }",
          "1435: func (d *Directive) writeTo(w *bufio.Writer, s *WriteSettings) {",
          "1436:  w.WriteString(\"<!\")",
          "1437:  w.WriteString(d.Data)",
          "1438:  w.WriteString(\">\")",
          "1439: }",
          "1442: func NewProcInst(target, inst string) *ProcInst {",
          "1443:  return newProcInst(target, inst, nil)",
          "1444: }",
          "1448: func newProcInst(target, inst string, parent *Element) *ProcInst {",
          "1449:  p := &ProcInst{",
          "1450:   Target: target,",
          "1451:   Inst:   inst,",
          "1452:   parent: nil,",
          "1453:   index:  -1,",
          "1454:  }",
          "1455:  if parent != nil {",
          "1456:   parent.addChild(p)",
          "1457:  }",
          "1458:  return p",
          "1459: }",
          "1464: func (e *Element) CreateProcInst(target, inst string) *ProcInst {",
          "1465:  return newProcInst(target, inst, e)",
          "1466: }",
          "1469: func (p *ProcInst) dup(parent *Element) Token {",
          "1470:  return &ProcInst{",
          "1471:   Target: p.Target,",
          "1472:   Inst:   p.Inst,",
          "1473:   parent: parent,",
          "1474:   index:  p.index,",
          "1475:  }",
          "1476: }",
          "1480: func (p *ProcInst) Parent() *Element {",
          "1481:  return p.parent",
          "1482: }",
          "1487: func (p *ProcInst) Index() int {",
          "1488:  return p.index",
          "1489: }",
          "1492: func (p *ProcInst) setParent(parent *Element) {",
          "1493:  p.parent = parent",
          "1494: }",
          "1498: func (p *ProcInst) setIndex(index int) {",
          "1499:  p.index = index",
          "1500: }",
          "1503: func (p *ProcInst) writeTo(w *bufio.Writer, s *WriteSettings) {",
          "1504:  w.WriteString(\"<?\")",
          "1505:  w.WriteString(p.Target)",
          "1506:  if p.Inst != \"\" {",
          "1507:   w.WriteByte(' ')",
          "1508:   w.WriteString(p.Inst)",
          "1509:  }",
          "1510:  w.WriteString(\"?>\")",
          "1511: }",
          "",
          "---------------"
        ],
        "vendor/github.com/beevik/etree/go.mod||vendor/github.com/beevik/etree/go.mod": [
          "File: vendor/github.com/beevik/etree/go.mod -> vendor/github.com/beevik/etree/go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: module github.com/beevik/etree",
          "3: go 1.12",
          "",
          "---------------"
        ],
        "vendor/github.com/beevik/etree/helpers.go||vendor/github.com/beevik/etree/helpers.go": [
          "File: vendor/github.com/beevik/etree/helpers.go -> vendor/github.com/beevik/etree/helpers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package etree",
          "7: import (",
          "8:  \"bufio\"",
          "9:  \"io\"",
          "10:  \"strings\"",
          "11:  \"unicode/utf8\"",
          "12: )",
          "15: type stack struct {",
          "16:  data []interface{}",
          "17: }",
          "19: func (s *stack) empty() bool {",
          "20:  return len(s.data) == 0",
          "21: }",
          "23: func (s *stack) push(value interface{}) {",
          "24:  s.data = append(s.data, value)",
          "25: }",
          "27: func (s *stack) pop() interface{} {",
          "28:  value := s.data[len(s.data)-1]",
          "29:  s.data[len(s.data)-1] = nil",
          "30:  s.data = s.data[:len(s.data)-1]",
          "31:  return value",
          "32: }",
          "34: func (s *stack) peek() interface{} {",
          "35:  return s.data[len(s.data)-1]",
          "36: }",
          "39: type fifo struct {",
          "40:  data       []interface{}",
          "41:  head, tail int",
          "42: }",
          "44: func (f *fifo) add(value interface{}) {",
          "45:  if f.len()+1 >= len(f.data) {",
          "46:   f.grow()",
          "47:  }",
          "48:  f.data[f.tail] = value",
          "49:  if f.tail++; f.tail == len(f.data) {",
          "50:   f.tail = 0",
          "51:  }",
          "52: }",
          "54: func (f *fifo) remove() interface{} {",
          "55:  value := f.data[f.head]",
          "56:  f.data[f.head] = nil",
          "57:  if f.head++; f.head == len(f.data) {",
          "58:   f.head = 0",
          "59:  }",
          "60:  return value",
          "61: }",
          "63: func (f *fifo) len() int {",
          "64:  if f.tail >= f.head {",
          "65:   return f.tail - f.head",
          "66:  }",
          "67:  return len(f.data) - f.head + f.tail",
          "68: }",
          "70: func (f *fifo) grow() {",
          "71:  c := len(f.data) * 2",
          "72:  if c == 0 {",
          "73:   c = 4",
          "74:  }",
          "75:  buf, count := make([]interface{}, c), f.len()",
          "76:  if f.tail >= f.head {",
          "77:   copy(buf[0:count], f.data[f.head:f.tail])",
          "78:  } else {",
          "79:   hindex := len(f.data) - f.head",
          "80:   copy(buf[0:hindex], f.data[f.head:])",
          "81:   copy(buf[hindex:count], f.data[:f.tail])",
          "82:  }",
          "83:  f.data, f.head, f.tail = buf, 0, count",
          "84: }",
          "88: type countReader struct {",
          "89:  r     io.Reader",
          "90:  bytes int64",
          "91: }",
          "93: func newCountReader(r io.Reader) *countReader {",
          "94:  return &countReader{r: r}",
          "95: }",
          "97: func (cr *countReader) Read(p []byte) (n int, err error) {",
          "98:  b, err := cr.r.Read(p)",
          "99:  cr.bytes += int64(b)",
          "100:  return b, err",
          "101: }",
          "105: type countWriter struct {",
          "106:  w     io.Writer",
          "107:  bytes int64",
          "108: }",
          "110: func newCountWriter(w io.Writer) *countWriter {",
          "111:  return &countWriter{w: w}",
          "112: }",
          "114: func (cw *countWriter) Write(p []byte) (n int, err error) {",
          "115:  b, err := cw.w.Write(p)",
          "116:  cw.bytes += int64(b)",
          "117:  return b, err",
          "118: }",
          "122: func isWhitespace(s string) bool {",
          "123:  for i := 0; i < len(s); i++ {",
          "124:   if c := s[i]; c != ' ' && c != '\\t' && c != '\\n' && c != '\\r' {",
          "125:    return false",
          "126:   }",
          "127:  }",
          "128:  return true",
          "129: }",
          "133: func spaceMatch(a, b string) bool {",
          "134:  switch {",
          "135:  case a == \"\":",
          "136:   return true",
          "137:  default:",
          "138:   return a == b",
          "139:  }",
          "140: }",
          "144: func spaceDecompose(str string) (space, key string) {",
          "145:  colon := strings.IndexByte(str, ':')",
          "146:  if colon == -1 {",
          "147:   return \"\", str",
          "148:  }",
          "149:  return str[:colon], str[colon+1:]",
          "150: }",
          "153: const (",
          "154:  indentSpaces = \"\\r\\n                                                                \"",
          "155:  indentTabs   = \"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\"",
          "156: )",
          "160: func indentCRLF(n int, source string) string {",
          "161:  switch {",
          "162:  case n < 0:",
          "163:   return source[:2]",
          "164:  case n < len(source)-1:",
          "165:   return source[:n+2]",
          "166:  default:",
          "167:   return source + strings.Repeat(source[2:3], n-len(source)+2)",
          "168:  }",
          "169: }",
          "173: func indentLF(n int, source string) string {",
          "174:  switch {",
          "175:  case n < 0:",
          "176:   return source[1:2]",
          "177:  case n < len(source)-1:",
          "178:   return source[1 : n+2]",
          "179:  default:",
          "180:   return source[1:] + strings.Repeat(source[2:3], n-len(source)+2)",
          "181:  }",
          "182: }",
          "186: func nextIndex(s, sep string, offset int) int {",
          "187:  switch i := strings.Index(s[offset:], sep); i {",
          "188:  case -1:",
          "189:   return -1",
          "190:  default:",
          "191:   return offset + i",
          "192:  }",
          "193: }",
          "196: func isInteger(s string) bool {",
          "197:  for i := 0; i < len(s); i++ {",
          "198:   if (s[i] < '0' || s[i] > '9') && !(i == 0 && s[i] == '-') {",
          "199:    return false",
          "200:   }",
          "201:  }",
          "202:  return true",
          "203: }",
          "205: type escapeMode byte",
          "207: const (",
          "208:  escapeNormal escapeMode = iota",
          "209:  escapeCanonicalText",
          "210:  escapeCanonicalAttr",
          "211: )",
          "214: func escapeString(w *bufio.Writer, s string, m escapeMode) {",
          "215:  var esc []byte",
          "216:  last := 0",
          "217:  for i := 0; i < len(s); {",
          "218:   r, width := utf8.DecodeRuneInString(s[i:])",
          "219:   i += width",
          "220:   switch r {",
          "221:   case '&':",
          "222:    esc = []byte(\"&amp;\")",
          "223:   case '<':",
          "224:    esc = []byte(\"&lt;\")",
          "225:   case '>':",
          "226:    if m == escapeCanonicalAttr {",
          "227:     continue",
          "228:    }",
          "229:    esc = []byte(\"&gt;\")",
          "230:   case '\\'':",
          "231:    if m != escapeNormal {",
          "232:     continue",
          "233:    }",
          "234:    esc = []byte(\"&apos;\")",
          "235:   case '\"':",
          "236:    if m == escapeCanonicalText {",
          "237:     continue",
          "238:    }",
          "239:    esc = []byte(\"&quot;\")",
          "240:   case '\\t':",
          "241:    if m != escapeCanonicalAttr {",
          "242:     continue",
          "243:    }",
          "244:    esc = []byte(\"&#x9;\")",
          "245:   case '\\n':",
          "246:    if m != escapeCanonicalAttr {",
          "247:     continue",
          "248:    }",
          "249:    esc = []byte(\"&#xA;\")",
          "250:   case '\\r':",
          "251:    if m == escapeNormal {",
          "252:     continue",
          "253:    }",
          "254:    esc = []byte(\"&#xD;\")",
          "255:   default:",
          "256:    if !isInCharacterRange(r) || (r == 0xFFFD && width == 1) {",
          "257:     esc = []byte(\"\\uFFFD\")",
          "258:     break",
          "259:    }",
          "260:    continue",
          "261:   }",
          "262:   w.WriteString(s[last : i-width])",
          "263:   w.Write(esc)",
          "264:   last = i",
          "265:  }",
          "266:  w.WriteString(s[last:])",
          "267: }",
          "269: func isInCharacterRange(r rune) bool {",
          "270:  return r == 0x09 ||",
          "271:   r == 0x0A ||",
          "272:   r == 0x0D ||",
          "273:   r >= 0x20 && r <= 0xD7FF ||",
          "274:   r >= 0xE000 && r <= 0xFFFD ||",
          "275:   r >= 0x10000 && r <= 0x10FFFF",
          "276: }",
          "",
          "---------------"
        ],
        "vendor/github.com/beevik/etree/path.go||vendor/github.com/beevik/etree/path.go": [
          "File: vendor/github.com/beevik/etree/path.go -> vendor/github.com/beevik/etree/path.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package etree",
          "7: import (",
          "8:  \"strconv\"",
          "9:  \"strings\"",
          "10: )",
          "13: A Path is a string that represents a search path through an etree starting",
          "14: from the document root or an arbitrary element. Paths are used with the",
          "15: Element object's Find* methods to locate and return desired elements.",
          "17: A Path consists of a series of slash-separated \"selectors\", each of which may",
          "18: be modified by one or more bracket-enclosed \"filters\". Selectors are used to",
          "19: traverse the etree from element to element, while filters are used to narrow",
          "20: the list of candidate elements at each node.",
          "22: Although etree Path strings are structurally and behaviorally similar to XPath",
          "23: strings (https://www.w3.org/TR/1999/REC-xpath-19991116/), they have a more",
          "24: limited set of selectors and filtering options.",
          "26: The following selectors are supported by etree paths:",
          "28:     .               Select the current element.",
          "29:     ..              Select the parent of the current element.",
          "31:     /               Select the root element when used at the start of a path.",
          "33:     tag             Select all child elements with a name matching the tag.",
          "35: The following basic filters are supported:",
          "37:     [@attrib]       Keep elements with an attribute named attrib.",
          "38:     [@attrib='val'] Keep elements with an attribute named attrib and value matching val.",
          "39:     [tag]           Keep elements with a child element named tag.",
          "40:     [tag='val']     Keep elements with a child element named tag and text matching val.",
          "41:     [n]             Keep the n-th element, where n is a numeric index starting from 1.",
          "43: The following function-based filters are supported:",
          "45:     [text()]                    Keep elements with non-empty text.",
          "46:     [text()='val']              Keep elements whose text matches val.",
          "47:     [local-name()='val']        Keep elements whose un-prefixed tag matches val.",
          "48:     [name()='val']              Keep elements whose full tag exactly matches val.",
          "49:     [namespace-prefix()]        Keep elements with non-empty namespace prefixes.",
          "50:     [namespace-prefix()='val']  Keep elements whose namespace prefix matches val.",
          "51:     [namespace-uri()]           Keep elements with non-empty namespace URIs.",
          "52:     [namespace-uri()='val']     Keep elements whose namespace URI matches val.",
          "54: Below are some examples of etree path strings.",
          "56: Select the bookstore child element of the root element:",
          "57:     /bookstore",
          "59: Beginning from the root element, select the title elements of all descendant",
          "60: book elements having a 'category' attribute of 'WEB':",
          "63: Beginning from the current element, select the first descendant book element",
          "64: with a title child element containing the text 'Great Expectations':",
          "65:     .//book[title='Great Expectations'][1]",
          "67: Beginning from the current element, select all child elements of book elements",
          "68: with an attribute 'language' set to 'english':",
          "69:     ./book/*[@language='english']",
          "71: Beginning from the current element, select all child elements of book elements",
          "72: containing the text 'special':",
          "73:     ./book/*[text()='special']",
          "75: Beginning from the current element, select all descendant book elements whose",
          "76: title child element has a 'language' attribute of 'french':",
          "77:     .//book/title[@language='french']/..",
          "79: Beginning from the current element, select all descendant book elements",
          "80: belonging to the http://www.w3.org/TR/html4/ namespace:",
          "81:     .//book[namespace-uri()='http://www.w3.org/TR/html4/']",
          "84: type Path struct {",
          "85:  segments []segment",
          "86: }",
          "89: type ErrPath string",
          "92: func (err ErrPath) Error() string {",
          "93:  return \"etree: \" + string(err)",
          "94: }",
          "98: func CompilePath(path string) (Path, error) {",
          "99:  var comp compiler",
          "100:  segments := comp.parsePath(path)",
          "101:  if comp.err != ErrPath(\"\") {",
          "102:   return Path{nil}, comp.err",
          "103:  }",
          "104:  return Path{segments}, nil",
          "105: }",
          "111: func MustCompilePath(path string) Path {",
          "112:  p, err := CompilePath(path)",
          "113:  if err != nil {",
          "114:   panic(err)",
          "115:  }",
          "116:  return p",
          "117: }",
          "121: type segment struct {",
          "122:  sel     selector",
          "123:  filters []filter",
          "124: }",
          "126: func (seg *segment) apply(e *Element, p *pather) {",
          "127:  seg.sel.apply(e, p)",
          "128:  for _, f := range seg.filters {",
          "129:   f.apply(p)",
          "130:  }",
          "131: }",
          "135: type selector interface {",
          "136:  apply(e *Element, p *pather)",
          "137: }",
          "141: type filter interface {",
          "142:  apply(p *pather)",
          "143: }",
          "148: type pather struct {",
          "149:  queue      fifo",
          "150:  results    []*Element",
          "151:  inResults  map[*Element]bool",
          "152:  candidates []*Element",
          "153:  scratch    []*Element // used by filters",
          "154: }",
          "158: type node struct {",
          "159:  e        *Element",
          "160:  segments []segment",
          "161: }",
          "163: func newPather() *pather {",
          "164:  return &pather{",
          "165:   results:    make([]*Element, 0),",
          "166:   inResults:  make(map[*Element]bool),",
          "167:   candidates: make([]*Element, 0),",
          "168:   scratch:    make([]*Element, 0),",
          "169:  }",
          "170: }",
          "175: func (p *pather) traverse(e *Element, path Path) []*Element {",
          "176:  for p.queue.add(node{e, path.segments}); p.queue.len() > 0; {",
          "177:   p.eval(p.queue.remove().(node))",
          "178:  }",
          "179:  return p.results",
          "180: }",
          "184: func (p *pather) eval(n node) {",
          "185:  p.candidates = p.candidates[0:0]",
          "186:  seg, remain := n.segments[0], n.segments[1:]",
          "187:  seg.apply(n.e, p)",
          "189:  if len(remain) == 0 {",
          "190:   for _, c := range p.candidates {",
          "191:    if in := p.inResults[c]; !in {",
          "192:     p.inResults[c] = true",
          "193:     p.results = append(p.results, c)",
          "194:    }",
          "195:   }",
          "196:  } else {",
          "197:   for _, c := range p.candidates {",
          "198:    p.queue.add(node{c, remain})",
          "199:   }",
          "200:  }",
          "201: }",
          "204: type compiler struct {",
          "205:  err ErrPath",
          "206: }",
          "211: func (c *compiler) parsePath(path string) []segment {",
          "213:  if strings.HasSuffix(path, \"//\") {",
          "214:   path += \"*\"",
          "215:  }",
          "217:  var segments []segment",
          "220:  if strings.HasPrefix(path, \"/\") {",
          "221:   segments = append(segments, segment{new(selectRoot), []filter{}})",
          "222:   path = path[1:]",
          "223:  }",
          "226:  for _, s := range splitPath(path) {",
          "227:   segments = append(segments, c.parseSegment(s))",
          "228:   if c.err != ErrPath(\"\") {",
          "229:    break",
          "230:   }",
          "231:  }",
          "232:  return segments",
          "233: }",
          "235: func splitPath(path string) []string {",
          "236:  var pieces []string",
          "237:  start := 0",
          "238:  inquote := false",
          "239:  for i := 0; i+1 <= len(path); i++ {",
          "240:   if path[i] == '\\'' {",
          "241:    inquote = !inquote",
          "242:   } else if path[i] == '/' && !inquote {",
          "243:    pieces = append(pieces, path[start:i])",
          "244:    start = i + 1",
          "245:   }",
          "246:  }",
          "247:  return append(pieces, path[start:])",
          "248: }",
          "251: func (c *compiler) parseSegment(path string) segment {",
          "252:  pieces := strings.Split(path, \"[\")",
          "253:  seg := segment{",
          "254:   sel:     c.parseSelector(pieces[0]),",
          "255:   filters: []filter{},",
          "256:  }",
          "257:  for i := 1; i < len(pieces); i++ {",
          "258:   fpath := pieces[i]",
          "259:   if fpath[len(fpath)-1] != ']' {",
          "260:    c.err = ErrPath(\"path has invalid filter [brackets].\")",
          "261:    break",
          "262:   }",
          "263:   seg.filters = append(seg.filters, c.parseFilter(fpath[:len(fpath)-1]))",
          "264:  }",
          "265:  return seg",
          "266: }",
          "269: func (c *compiler) parseSelector(path string) selector {",
          "270:  switch path {",
          "271:  case \".\":",
          "272:   return new(selectSelf)",
          "273:  case \"..\":",
          "274:   return new(selectParent)",
          "275:  case \"*\":",
          "276:   return new(selectChildren)",
          "277:  case \"\":",
          "278:   return new(selectDescendants)",
          "279:  default:",
          "280:   return newSelectChildrenByTag(path)",
          "281:  }",
          "282: }",
          "284: var fnTable = map[string]func(e *Element) string{",
          "285:  \"local-name\":       (*Element).name,",
          "286:  \"name\":             (*Element).FullTag,",
          "287:  \"namespace-prefix\": (*Element).namespacePrefix,",
          "288:  \"namespace-uri\":    (*Element).NamespaceURI,",
          "289:  \"text\":             (*Element).Text,",
          "290: }",
          "293: func (c *compiler) parseFilter(path string) filter {",
          "294:  if len(path) == 0 {",
          "295:   c.err = ErrPath(\"path contains an empty filter expression.\")",
          "296:   return nil",
          "297:  }",
          "300:  eqindex := strings.Index(path, \"='\")",
          "301:  if eqindex >= 0 {",
          "302:   rindex := nextIndex(path, \"'\", eqindex+2)",
          "303:   if rindex != len(path)-1 {",
          "304:    c.err = ErrPath(\"path has mismatched filter quotes.\")",
          "305:    return nil",
          "306:   }",
          "308:   key := path[:eqindex]",
          "309:   value := path[eqindex+2 : rindex]",
          "311:   switch {",
          "312:   case key[0] == '@':",
          "313:    return newFilterAttrVal(key[1:], value)",
          "314:   case strings.HasSuffix(key, \"()\"):",
          "315:    name := key[:len(key)-2]",
          "316:    if fn, ok := fnTable[name]; ok {",
          "317:     return newFilterFuncVal(fn, value)",
          "318:    }",
          "319:    c.err = ErrPath(\"path has unknown function \" + name)",
          "320:    return nil",
          "321:   default:",
          "322:    return newFilterChildText(key, value)",
          "323:   }",
          "324:  }",
          "327:  switch {",
          "328:  case path[0] == '@':",
          "329:   return newFilterAttr(path[1:])",
          "330:  case strings.HasSuffix(path, \"()\"):",
          "331:   name := path[:len(path)-2]",
          "332:   if fn, ok := fnTable[name]; ok {",
          "333:    return newFilterFunc(fn)",
          "334:   }",
          "335:   c.err = ErrPath(\"path has unknown function \" + name)",
          "336:   return nil",
          "337:  case isInteger(path):",
          "338:   pos, _ := strconv.Atoi(path)",
          "339:   switch {",
          "340:   case pos > 0:",
          "341:    return newFilterPos(pos - 1)",
          "342:   default:",
          "343:    return newFilterPos(pos)",
          "344:   }",
          "345:  default:",
          "346:   return newFilterChild(path)",
          "347:  }",
          "348: }",
          "351: type selectSelf struct{}",
          "353: func (s *selectSelf) apply(e *Element, p *pather) {",
          "354:  p.candidates = append(p.candidates, e)",
          "355: }",
          "358: type selectRoot struct{}",
          "360: func (s *selectRoot) apply(e *Element, p *pather) {",
          "361:  root := e",
          "362:  for root.parent != nil {",
          "363:   root = root.parent",
          "364:  }",
          "365:  p.candidates = append(p.candidates, root)",
          "366: }",
          "369: type selectParent struct{}",
          "371: func (s *selectParent) apply(e *Element, p *pather) {",
          "372:  if e.parent != nil {",
          "373:   p.candidates = append(p.candidates, e.parent)",
          "374:  }",
          "375: }",
          "379: type selectChildren struct{}",
          "381: func (s *selectChildren) apply(e *Element, p *pather) {",
          "382:  for _, c := range e.Child {",
          "383:   if c, ok := c.(*Element); ok {",
          "384:    p.candidates = append(p.candidates, c)",
          "385:   }",
          "386:  }",
          "387: }",
          "391: type selectDescendants struct{}",
          "393: func (s *selectDescendants) apply(e *Element, p *pather) {",
          "394:  var queue fifo",
          "395:  for queue.add(e); queue.len() > 0; {",
          "396:   e := queue.remove().(*Element)",
          "397:   p.candidates = append(p.candidates, e)",
          "398:   for _, c := range e.Child {",
          "399:    if c, ok := c.(*Element); ok {",
          "400:     queue.add(c)",
          "401:    }",
          "402:   }",
          "403:  }",
          "404: }",
          "408: type selectChildrenByTag struct {",
          "409:  space, tag string",
          "410: }",
          "412: func newSelectChildrenByTag(path string) *selectChildrenByTag {",
          "413:  s, l := spaceDecompose(path)",
          "414:  return &selectChildrenByTag{s, l}",
          "415: }",
          "417: func (s *selectChildrenByTag) apply(e *Element, p *pather) {",
          "418:  for _, c := range e.Child {",
          "419:   if c, ok := c.(*Element); ok && spaceMatch(s.space, c.Space) && s.tag == c.Tag {",
          "420:    p.candidates = append(p.candidates, c)",
          "421:   }",
          "422:  }",
          "423: }",
          "427: type filterPos struct {",
          "428:  index int",
          "429: }",
          "431: func newFilterPos(pos int) *filterPos {",
          "432:  return &filterPos{pos}",
          "433: }",
          "435: func (f *filterPos) apply(p *pather) {",
          "436:  if f.index >= 0 {",
          "437:   if f.index < len(p.candidates) {",
          "438:    p.scratch = append(p.scratch, p.candidates[f.index])",
          "439:   }",
          "440:  } else {",
          "441:   if -f.index <= len(p.candidates) {",
          "442:    p.scratch = append(p.scratch, p.candidates[len(p.candidates)+f.index])",
          "443:   }",
          "444:  }",
          "445:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "446: }",
          "450: type filterAttr struct {",
          "451:  space, key string",
          "452: }",
          "454: func newFilterAttr(str string) *filterAttr {",
          "455:  s, l := spaceDecompose(str)",
          "456:  return &filterAttr{s, l}",
          "457: }",
          "459: func (f *filterAttr) apply(p *pather) {",
          "460:  for _, c := range p.candidates {",
          "461:   for _, a := range c.Attr {",
          "462:    if spaceMatch(f.space, a.Space) && f.key == a.Key {",
          "463:     p.scratch = append(p.scratch, c)",
          "464:     break",
          "465:    }",
          "466:   }",
          "467:  }",
          "468:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "469: }",
          "473: type filterAttrVal struct {",
          "474:  space, key, val string",
          "475: }",
          "477: func newFilterAttrVal(str, value string) *filterAttrVal {",
          "478:  s, l := spaceDecompose(str)",
          "479:  return &filterAttrVal{s, l, value}",
          "480: }",
          "482: func (f *filterAttrVal) apply(p *pather) {",
          "483:  for _, c := range p.candidates {",
          "484:   for _, a := range c.Attr {",
          "485:    if spaceMatch(f.space, a.Space) && f.key == a.Key && f.val == a.Value {",
          "486:     p.scratch = append(p.scratch, c)",
          "487:     break",
          "488:    }",
          "489:   }",
          "490:  }",
          "491:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "492: }",
          "496: type filterFunc struct {",
          "497:  fn func(e *Element) string",
          "498: }",
          "500: func newFilterFunc(fn func(e *Element) string) *filterFunc {",
          "501:  return &filterFunc{fn}",
          "502: }",
          "504: func (f *filterFunc) apply(p *pather) {",
          "505:  for _, c := range p.candidates {",
          "506:   if f.fn(c) != \"\" {",
          "507:    p.scratch = append(p.scratch, c)",
          "508:   }",
          "509:  }",
          "510:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "511: }",
          "515: type filterFuncVal struct {",
          "516:  fn  func(e *Element) string",
          "517:  val string",
          "518: }",
          "520: func newFilterFuncVal(fn func(e *Element) string, value string) *filterFuncVal {",
          "521:  return &filterFuncVal{fn, value}",
          "522: }",
          "524: func (f *filterFuncVal) apply(p *pather) {",
          "525:  for _, c := range p.candidates {",
          "526:   if f.fn(c) == f.val {",
          "527:    p.scratch = append(p.scratch, c)",
          "528:   }",
          "529:  }",
          "530:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "531: }",
          "535: type filterChild struct {",
          "536:  space, tag string",
          "537: }",
          "539: func newFilterChild(str string) *filterChild {",
          "540:  s, l := spaceDecompose(str)",
          "541:  return &filterChild{s, l}",
          "542: }",
          "544: func (f *filterChild) apply(p *pather) {",
          "545:  for _, c := range p.candidates {",
          "546:   for _, cc := range c.Child {",
          "547:    if cc, ok := cc.(*Element); ok &&",
          "548:     spaceMatch(f.space, cc.Space) &&",
          "549:     f.tag == cc.Tag {",
          "550:     p.scratch = append(p.scratch, c)",
          "551:    }",
          "552:   }",
          "553:  }",
          "554:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "555: }",
          "559: type filterChildText struct {",
          "560:  space, tag, text string",
          "561: }",
          "563: func newFilterChildText(str, text string) *filterChildText {",
          "564:  s, l := spaceDecompose(str)",
          "565:  return &filterChildText{s, l, text}",
          "566: }",
          "568: func (f *filterChildText) apply(p *pather) {",
          "569:  for _, c := range p.candidates {",
          "570:   for _, cc := range c.Child {",
          "571:    if cc, ok := cc.(*Element); ok &&",
          "572:     spaceMatch(f.space, cc.Space) &&",
          "573:     f.tag == cc.Tag &&",
          "574:     f.text == cc.Text() {",
          "575:     p.scratch = append(p.scratch, c)",
          "576:    }",
          "577:   }",
          "578:  }",
          "579:  p.candidates, p.scratch = p.scratch, p.candidates[0:0]",
          "580: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95d669b651d8d64ab5c6161f11250d226dfd860d",
      "candidate_info": {
        "commit_hash": "95d669b651d8d64ab5c6161f11250d226dfd860d",
        "repo": "coreos/ignition",
        "commit_url": "https://github.com/coreos/ignition/commit/95d669b651d8d64ab5c6161f11250d226dfd860d",
        "files": [
          "internal/providers/vmware/vmware_amd64.go"
        ],
        "message": "providers/vmware: add constants for guestinfo and OVF property names",
        "before_after_code_files": [
          "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/ignition/pull/1350"
        ],
        "olp_code_files": {
          "patch": [
            "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go"
          ],
          "candidate": [
            "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go": [
          "File: internal/providers/vmware/vmware_amd64.go -> internal/providers/vmware/vmware_amd64.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"github.com/vmware/vmw-ovflib\"",
          "30: )",
          "32: func FetchConfig(f *resource.Fetcher) (types.Config, report.Report, error) {",
          "33:  if isVM, err := vmcheck.IsVirtualWorld(true); err != nil {",
          "34:   return types.Config{}, report.Report{}, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: const (",
          "33:  GUESTINFO_OVF               = \"ovfenv\"",
          "34:  GUESTINFO_USERDATA          = \"ignition.config.data\"",
          "35:  GUESTINFO_USERDATA_ENCODING = \"ignition.config.data.encoding\"",
          "37:  OVF_PREFIX            = \"guestinfo.\"",
          "38:  OVF_USERDATA          = OVF_PREFIX + GUESTINFO_USERDATA",
          "39:  OVF_USERDATA_ENCODING = OVF_PREFIX + GUESTINFO_USERDATA_ENCODING",
          "40: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  var ovfData string",
          "58:  var ovfEncoding string",
          "61:  if err != nil {",
          "62:   f.Logger.Warning(\"failed to fetch ovfenv: %v. Continuing...\", err)",
          "63:  } else if ovfEnv != \"\" {",
          "",
          "[Removed Lines]",
          "60:  ovfEnv, err := info.String(\"ovfenv\", \"\")",
          "",
          "[Added Lines]",
          "70:  ovfEnv, err := info.String(GUESTINFO_OVF, \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:    f.Logger.Warning(\"failed to parse OVF environment: %v. Continuing...\", err)",
          "68:   }",
          "72:  }",
          "75:  if err != nil {",
          "76:   f.Logger.Debug(\"failed to fetch config: %v\", err)",
          "77:   return config{}, err",
          "78:  }",
          "81:  if err != nil {",
          "82:   f.Logger.Debug(\"failed to fetch config encoding: %v\", err)",
          "83:   return config{}, err",
          "",
          "[Removed Lines]",
          "70:   ovfData = env.Properties[\"guestinfo.ignition.config.data\"]",
          "71:   ovfEncoding = env.Properties[\"guestinfo.ignition.config.data.encoding\"]",
          "74:  data, err := info.String(\"ignition.config.data\", ovfData)",
          "80:  encoding, err := info.String(\"ignition.config.data.encoding\", ovfEncoding)",
          "",
          "[Added Lines]",
          "80:   ovfData = env.Properties[OVF_USERDATA]",
          "81:   ovfEncoding = env.Properties[OVF_USERDATA_ENCODING]",
          "84:  data, err := info.String(GUESTINFO_USERDATA, ovfData)",
          "90:  encoding, err := info.String(GUESTINFO_USERDATA_ENCODING, ovfEncoding)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b651f9190e18be3c70e53e5fe10e3ba41e73139",
      "candidate_info": {
        "commit_hash": "0b651f9190e18be3c70e53e5fe10e3ba41e73139",
        "repo": "coreos/ignition",
        "commit_url": "https://github.com/coreos/ignition/commit/0b651f9190e18be3c70e53e5fe10e3ba41e73139",
        "files": [
          "go.mod",
          "go.sum",
          "internal/providers/vmware/ovf.go",
          "internal/providers/vmware/ovf_test.go",
          "internal/providers/vmware/vmw-ovflib/ovf.go",
          "internal/providers/vmware/vmw-ovflib/ovf_test.go",
          "internal/providers/vmware/vmware_amd64.go",
          "vendor/github.com/vmware/vmw-ovflib/LICENSE",
          "vendor/github.com/vmware/vmw-ovflib/README",
          "vendor/github.com/vmware/vmw-ovflib/ovf.go",
          "vendor/modules.txt"
        ],
        "message": "providers/vmware: switch to internal copy of OVF parser",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/providers/vmware/vmw-ovflib/ovf.go||internal/providers/vmware/ovf.go",
          "internal/providers/vmware/vmw-ovflib/ovf_test.go||internal/providers/vmware/ovf_test.go",
          "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go",
          "vendor/github.com/vmware/vmw-ovflib/ovf.go||vendor/github.com/vmware/vmw-ovflib/ovf.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/ignition/pull/1350"
        ],
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go",
            "vendor/github.com/vmware/vmw-ovflib/ovf.go||vendor/github.com/vmware/vmw-ovflib/ovf.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go",
            "vendor/github.com/vmware/vmw-ovflib/ovf.go||vendor/github.com/vmware/vmw-ovflib/ovf.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  github.com/google/renameio v0.1.0",
          "13:  github.com/google/uuid v1.1.1",
          "14:  github.com/pin/tftp v2.1.0+incompatible",
          "16:  github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace",
          "17:  github.com/stretchr/testify v1.7.0",
          "18:  github.com/vincent-petithory/dataurl v1.0.0",
          "19:  github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3",
          "21:  go.opencensus.io v0.22.5 // indirect",
          "22:  golang.org/x/net v0.0.0-20200602114024-627f9648deb9",
          "23:  golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d",
          "",
          "[Removed Lines]",
          "15:  github.com/smartystreets/goconvey v0.0.0-20190222223459-a17d461953aa // indirect",
          "20:  github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=",
          "116: github.com/googleapis/gax-go/v2 v2.0.5 h1:sjZBwGj9Jlw33ImPtvFviGYvseOtDM7hkSKB7+Tv3SM=",
          "117: github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=",
          "120: github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=",
          "121: github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=",
          "122: github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=",
          "",
          "[Removed Lines]",
          "118: github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=",
          "119: github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=",
          "126: github.com/jstemmer/go-junit-report v0.9.1 h1:6QPYqodiu3GuPL+7mfx+NwDdp2eTkp9IfEUpgAwUN0o=",
          "127: github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=",
          "130: github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=",
          "131: github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=",
          "132: github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=",
          "",
          "[Removed Lines]",
          "128: github.com/jtolds/gls v4.2.1+incompatible h1:fSuqC+Gmlu6l/ZYAoZzx2pyucC8Xza35fpRVWLVmUEE=",
          "129: github.com/jtolds/gls v4.2.1+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=",
          "141: github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=",
          "142: github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=",
          "147: github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace h1:9PNP1jnUjRhfmGMlkXHjYPishpcw4jpSt/V/xYY3FMA=",
          "148: github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=",
          "149: github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=",
          "",
          "[Removed Lines]",
          "143: github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=",
          "144: github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=",
          "145: github.com/smartystreets/goconvey v0.0.0-20190222223459-a17d461953aa h1:E+gaaifzi2xF65PbDmuKI3PhLWY6G5opMLniFq8vmXA=",
          "146: github.com/smartystreets/goconvey v0.0.0-20190222223459-a17d461953aa/go.mod h1:2RVY1rIf+2J2o/IM9+vPq9RzmHDSseB7FoXiSNIUsoU=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155: github.com/vincent-petithory/dataurl v1.0.0/go.mod h1:FHafX5vmDzyP+1CQATJn7WFKc9CvnvxyvZy6I1MrG/U=",
          "156: github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3 h1:v6jG/tdl4O07LNVp74Nt7/OyL+1JsIW1M2f/nSvQheY=",
          "157: github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3/go.mod h1:CSBTxrhePCm0cmXNKDGeu+6bOQzpaEklfCqEpn89JWk=",
          "160: github.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=",
          "161: github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=",
          "162: go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=",
          "",
          "[Removed Lines]",
          "158: github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714 h1:wJqF3m4Tj8I4beSi6vGxIyNtsq6wwGqhK3UnA99ltL4=",
          "159: github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714/go.mod h1:jiPk45kn7klhByRvUq5i2vo1RtHKBHj+iWGFpxbXuuI=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/providers/vmware/vmw-ovflib/ovf.go||internal/providers/vmware/ovf.go": [
          "File: internal/providers/vmware/vmw-ovflib/ovf.go -> internal/providers/vmware/ovf.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"encoding/xml\"",
          "",
          "[Removed Lines]",
          "15: package ovf",
          "",
          "[Added Lines]",
          "17: package vmware",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:  Properties map[string]string",
          "41: }",
          "44:  var env environment",
          "45:  if err := xml.Unmarshal(doc, &env); err != nil {",
          "46:   return OvfEnvironment{}, err",
          "",
          "[Removed Lines]",
          "43: func ReadEnvironment(doc []byte) (OvfEnvironment, error) {",
          "",
          "[Added Lines]",
          "45: func ReadOvfEnvironment(doc []byte) (OvfEnvironment, error) {",
          "",
          "---------------"
        ],
        "internal/providers/vmware/vmw-ovflib/ovf_test.go||internal/providers/vmware/ovf_test.go": [
          "File: internal/providers/vmware/vmw-ovflib/ovf_test.go -> internal/providers/vmware/ovf_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"testing\"",
          "",
          "[Removed Lines]",
          "15: package ovf",
          "",
          "[Added Lines]",
          "17: package vmware",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: func TestOvfEnvProperties(t *testing.T) {",
          "68:  var testOne = func(env_str []byte) {",
          "70:   assert.Nil(t, err)",
          "71:   props := env.Properties",
          "",
          "[Removed Lines]",
          "69:   env, err := ReadEnvironment(env_str)",
          "",
          "[Added Lines]",
          "71:   env, err := ReadOvfEnvironment(env_str)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: }",
          "88: func TestOvfEnvPlatform(t *testing.T) {",
          "90:  assert.Nil(t, err)",
          "91:  platform := env.Platform",
          "",
          "[Removed Lines]",
          "89:  env, err := ReadEnvironment(data_vsphere)",
          "",
          "[Added Lines]",
          "91:  env, err := ReadOvfEnvironment(data_vsphere)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97: }",
          "99: func TestVappRunUserDataUrl(t *testing.T) {",
          "101:  assert.Nil(t, err)",
          "102:  props := env.Properties",
          "",
          "[Removed Lines]",
          "100:  env, err := ReadEnvironment(data_vapprun)",
          "",
          "[Added Lines]",
          "102:  env, err := ReadOvfEnvironment(data_vapprun)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110: }",
          "112: func TestInvalidData(t *testing.T) {",
          "114:  assert.Nil(t, err)",
          "115: }",
          "",
          "[Removed Lines]",
          "113:  _, err := ReadEnvironment(append(data_vsphere, []byte(\"garbage\")...))",
          "",
          "[Added Lines]",
          "115:  _, err := ReadOvfEnvironment(append(data_vsphere, []byte(\"garbage\")...))",
          "",
          "---------------"
        ],
        "internal/providers/vmware/vmware_amd64.go||internal/providers/vmware/vmware_amd64.go": [
          "File: internal/providers/vmware/vmware_amd64.go -> internal/providers/vmware/vmware_amd64.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  \"github.com/coreos/vcontext/report\"",
          "27:  \"github.com/vmware/vmw-guestinfo/rpcvmx\"",
          "28:  \"github.com/vmware/vmw-guestinfo/vmcheck\"",
          "30: )",
          "32: const (",
          "",
          "[Removed Lines]",
          "29:  \"github.com/vmware/vmw-ovflib\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   f.Logger.Warning(\"failed to fetch ovfenv: %v. Continuing...\", err)",
          "73:  } else if ovfEnv != \"\" {",
          "74:   f.Logger.Debug(\"using OVF environment from guestinfo\")",
          "76:   if err != nil {",
          "77:    f.Logger.Warning(\"failed to parse OVF environment: %v. Continuing...\", err)",
          "78:   }",
          "",
          "[Removed Lines]",
          "75:   env, err := ovf.ReadEnvironment([]byte(ovfEnv))",
          "",
          "[Added Lines]",
          "74:   env, err := ReadOvfEnvironment([]byte(ovfEnv))",
          "",
          "---------------"
        ],
        "vendor/github.com/vmware/vmw-ovflib/ovf.go||vendor/github.com/vmware/vmw-ovflib/ovf.go": [
          "File: vendor/github.com/vmware/vmw-ovflib/ovf.go -> vendor/github.com/vmware/vmw-ovflib/ovf.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}