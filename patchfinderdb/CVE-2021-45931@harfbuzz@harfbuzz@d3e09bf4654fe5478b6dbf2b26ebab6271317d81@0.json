{
  "cve_id": "CVE-2021-45931",
  "cve_desc": "HarfBuzz 2.9.0 has an out-of-bounds write in hb_bit_set_invertible_t::set (called from hb_sparseset_t<hb_bit_set_invertible_t>::set and hb_set_copy).",
  "repo": "harfbuzz/harfbuzz",
  "patch_hash": "d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
  "patch_info": {
    "commit_hash": "d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
    "repo": "harfbuzz/harfbuzz",
    "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/d3e09bf4654fe5478b6dbf2b26ebab6271317d81",
    "files": [
      "src/hb-bit-set-invertible.hh",
      "src/hb-map.cc",
      "src/hb-map.hh",
      "src/hb-set.cc"
    ],
    "message": "[set] Make all operators null-safe again\n\nChanged my mind.\n\nAlso for hb_map_clear().\n\nPart of https://github.com/harfbuzz/harfbuzz/pull/3162",
    "before_after_code_files": [
      "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh",
      "src/hb-map.cc||src/hb-map.cc",
      "src/hb-map.hh||src/hb-map.hh",
      "src/hb-set.cc||src/hb-set.cc"
    ]
  },
  "patch_diff": {
    "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh": [
      "File: src/hb-bit-set-invertible.hh -> src/hb-bit-set-invertible.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   bool in_error () const { return s.in_error (); }",
      "47:   explicit operator bool () const { return !is_empty (); }",
      "53:   bool is_empty () const",
      "54:   {",
      "",
      "[Removed Lines]",
      "49:   void reset () { s.reset (); inverted = false; }",
      "50:   void clear () { s.clear (); inverted = false; }",
      "51:   void invert () { inverted = !inverted; }",
      "",
      "[Added Lines]",
      "49:   void reset ()",
      "50:   {",
      "51:     s.reset ();",
      "52:     inverted = false;",
      "53:   }",
      "54:   void clear ()",
      "55:   {",
      "56:     s.clear ();",
      "57:     if (likely (s.successful))",
      "58:       inverted = false;",
      "59:   }",
      "60:   void invert ()",
      "61:   {",
      "62:     if (likely (s.successful))",
      "63:       inverted = !inverted;",
      "64:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "116:     return next (&c) && c <= last;",
      "117:   }",
      "121:   bool is_equal (const hb_bit_set_invertible_t &other) const",
      "122:   {",
      "",
      "[Removed Lines]",
      "119:   void set (const hb_bit_set_invertible_t &other) { s.set (other.s); inverted = other.inverted; }",
      "",
      "[Added Lines]",
      "132:   void set (const hb_bit_set_invertible_t &other)",
      "133:   {",
      "134:     s.set (other.s);",
      "135:     if (likely (s.successful))",
      "136:       inverted = other.inverted;",
      "137:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:       else",
      "162:  process (hb_bitwise_lt, other);",
      "163:     }",
      "165:   }",
      "166:   void intersect (const hb_bit_set_invertible_t &other)",
      "167:   {",
      "",
      "[Removed Lines]",
      "164:     inverted = inverted || other.inverted;",
      "",
      "[Added Lines]",
      "182:     if (likely (s.successful))",
      "183:       inverted = inverted || other.inverted;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "179:       else",
      "180:  process (hb_bitwise_gt, other);",
      "181:     }",
      "183:   }",
      "184:   void subtract (const hb_bit_set_invertible_t &other)",
      "185:   {",
      "",
      "[Removed Lines]",
      "182:     inverted = inverted && other.inverted;",
      "",
      "[Added Lines]",
      "201:     if (likely (s.successful))",
      "202:       inverted = inverted && other.inverted;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "197:       else",
      "198:  process (hb_bitwise_and, other);",
      "199:     }",
      "201:   }",
      "202:   void symmetric_difference (const hb_bit_set_invertible_t &other)",
      "203:   {",
      "204:     process (hb_bitwise_xor, other);",
      "206:   }",
      "208:   bool next (hb_codepoint_t *codepoint) const",
      "",
      "[Removed Lines]",
      "200:     inverted = inverted && !other.inverted;",
      "205:     inverted = inverted ^ other.inverted;",
      "",
      "[Added Lines]",
      "220:     if (likely (s.successful))",
      "221:       inverted = inverted && !other.inverted;",
      "226:     if (likely (s.successful))",
      "227:       inverted = inverted ^ other.inverted;",
      "",
      "---------------"
    ],
    "src/hb-map.cc||src/hb-map.cc": [
      "File: src/hb-map.cc -> src/hb-map.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "255: void",
      "256: hb_map_clear (hb_map_t *map)",
      "257: {",
      "261:   return map->clear ();",
      "262: }",
      "",
      "[Removed Lines]",
      "258:   if (unlikely (hb_object_is_immutable (map)))",
      "259:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/hb-map.hh||src/hb-map.hh": [
      "File: src/hb-map.hh -> src/hb-map.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:   void clear ()",
      "171:   {",
      "172:     if (items)",
      "173:       for (auto &_ : hb_iter (items, mask + 1))",
      "174:  _.clear ();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:     if (unlikely (!successful)) return;",
      "",
      "---------------"
    ],
    "src/hb-set.cc||src/hb-set.cc": [
      "File: src/hb-set.cc -> src/hb-set.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "201: void",
      "202: hb_set_clear (hb_set_t *set)",
      "203: {",
      "207:   set->clear ();",
      "208: }",
      "",
      "[Removed Lines]",
      "204:   if (unlikely (hb_object_is_immutable (set)))",
      "205:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: hb_set_set (hb_set_t       *set,",
      "369:      const hb_set_t *other)",
      "370: {",
      "374:   set->set (*other);",
      "375: }",
      "",
      "[Removed Lines]",
      "371:   if (unlikely (hb_object_is_immutable (set)))",
      "372:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "387: hb_set_union (hb_set_t       *set,",
      "388:        const hb_set_t *other)",
      "389: {",
      "393:   set->union_ (*other);",
      "394: }",
      "",
      "[Removed Lines]",
      "390:   if (unlikely (hb_object_is_immutable (set)))",
      "391:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "406: hb_set_intersect (hb_set_t       *set,",
      "407:     const hb_set_t *other)",
      "408: {",
      "412:   set->intersect (*other);",
      "413: }",
      "",
      "[Removed Lines]",
      "409:   if (unlikely (hb_object_is_immutable (set)))",
      "410:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "425: hb_set_subtract (hb_set_t       *set,",
      "426:    const hb_set_t *other)",
      "427: {",
      "431:   set->subtract (*other);",
      "432: }",
      "",
      "[Removed Lines]",
      "428:   if (unlikely (hb_object_is_immutable (set)))",
      "429:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "445: hb_set_symmetric_difference (hb_set_t       *set,",
      "446:         const hb_set_t *other)",
      "447: {",
      "451:   set->symmetric_difference (*other);",
      "452: }",
      "",
      "[Removed Lines]",
      "448:   if (unlikely (hb_object_is_immutable (set)))",
      "449:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "462: void",
      "463: hb_set_invert (hb_set_t *set)",
      "464: {",
      "468:   set->invert ();",
      "469: }",
      "",
      "[Removed Lines]",
      "465:   if (unlikely (hb_object_is_immutable (set)))",
      "466:     return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f0c3804fa292ef3be41cc8d1cdea8239f00e2295",
      "candidate_info": {
        "commit_hash": "f0c3804fa292ef3be41cc8d1cdea8239f00e2295",
        "repo": "harfbuzz/harfbuzz",
        "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/f0c3804fa292ef3be41cc8d1cdea8239f00e2295",
        "files": [
          "docs/harfbuzz-sections.txt",
          "src/Makefile.sources",
          "src/hb-bit-set-invertible.hh",
          "src/hb-bit-set.hh",
          "src/hb-deprecated.h",
          "src/hb-set.cc",
          "src/hb-set.h",
          "src/hb-set.hh"
        ],
        "message": "[set] Add hb_bit_set_invertible_t and resurrect hb_set_invert()\n\nImplementation is NOT complete yet.",
        "before_after_code_files": [
          "src/Makefile.sources||src/Makefile.sources",
          "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh",
          "src/hb-bit-set.hh||src/hb-bit-set.hh",
          "src/hb-deprecated.h||src/hb-deprecated.h",
          "src/hb-set.cc||src/hb-set.cc",
          "src/hb-set.h||src/hb-set.h",
          "src/hb-set.hh||src/hb-set.hh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh",
            "src/hb-set.cc||src/hb-set.cc"
          ],
          "candidate": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh",
            "src/hb-set.cc||src/hb-set.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/Makefile.sources||src/Makefile.sources": [
          "File: src/Makefile.sources -> src/Makefile.sources",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  hb-bimap.hh \\",
          "22:  hb-bit-page.hh \\",
          "23:  hb-bit-set.hh \\",
          "24:  hb-blob.cc \\",
          "25:  hb-blob.hh \\",
          "26:  hb-buffer-serialize.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  hb-bit-set-invertible.hh \\",
          "",
          "---------------"
        ],
        "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh": [
          "File: src/hb-bit-set-invertible.hh -> src/hb-bit-set-invertible.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifndef HB_BIT_SET_INVERTIBLE_HH",
          "29: #define HB_BIT_SET_INVERTIBLE_HH",
          "31: #include \"hb.hh\"",
          "32: #include \"hb-bit-set.hh\"",
          "35: struct hb_bit_set_invertible_t",
          "36: {",
          "37:   hb_bit_set_t s;",
          "38:   bool inverted;",
          "40:   hb_bit_set_invertible_t () { init (); }",
          "41:   ~hb_bit_set_invertible_t () { fini (); }",
          "43:   void init () { s.init (); inverted = false; }",
          "44:   void fini () { s.fini (); }",
          "45:   void err () { s.err (); }",
          "46:   bool in_error () const { return s.in_error (); }",
          "47:   explicit operator bool () const { return !is_empty (); }",
          "49:   void reset () { s.reset (); inverted = false; }",
          "50:   void clear () { s.clear (); inverted = false; }",
          "51:   void invert () { if (!s.in_error ()) inverted = !inverted; }",
          "53:   bool is_empty () const { return inverted ? /*XXX*/false : s.is_empty (); }",
          "55:   void add (hb_codepoint_t g) { inverted ? s.del (g) : s.add (g); }",
          "56:   bool add_range (hb_codepoint_t a, hb_codepoint_t b) { return inverted ? (s.del_range (a, b), true) : s.add_range (a, b); }",
          "58:   template <typename T>",
          "59:   void add_array (const T *array, unsigned int count, unsigned int stride=sizeof(T))",
          "60:   { /*XXX(inverted)*/s.add_array (array, count, stride); }",
          "61:   template <typename T>",
          "62:   void add_array (const hb_array_t<const T>& arr) { add_array (&arr, arr.len ()); }",
          "66:   template <typename T>",
          "67:   bool add_sorted_array (const T *array, unsigned int count, unsigned int stride=sizeof(T))",
          "68:   { return /*XXX(inverted)*/s.add_sorted_array (array, count, stride); }",
          "69:   template <typename T>",
          "70:   bool add_sorted_array (const hb_sorted_array_t<const T>& arr) { return add_sorted_array (&arr, arr.len ()); }",
          "72:   void del (hb_codepoint_t g) { inverted ? s.add (g) : s.del (g); }",
          "73:   void del_range (hb_codepoint_t a, hb_codepoint_t b) { inverted ? (void) s.add_range (a, b) : s.del_range (a, b); }",
          "75:   bool get (hb_codepoint_t g) const { return s.get (g) ^ inverted; }",
          "78:   static constexpr bool SENTINEL = false;",
          "79:   typedef bool value_t;",
          "80:   value_t operator [] (hb_codepoint_t k) const { return get (k); }",
          "81:   bool has (hb_codepoint_t k) const { return (*this)[k] != SENTINEL; }",
          "83:   bool operator () (hb_codepoint_t k) const { return has (k); }",
          "86:   hb_bit_set_invertible_t& operator << (hb_codepoint_t v)",
          "87:   { add (v); return *this; }",
          "88:   hb_bit_set_invertible_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)",
          "89:   { add_range (range.first, range.second); return *this; }",
          "91:   bool intersects (hb_codepoint_t first, hb_codepoint_t last) const",
          "92:   { return /*XXX(inverted)*/s.intersects (first, last); }",
          "94:   void set (const hb_bit_set_invertible_t &other) { s.set (other.s); inverted = other.inverted; }",
          "96:   bool is_equal (const hb_bit_set_invertible_t &other) const",
          "97:   { return inverted == other.inverted /*XXX*/ && s.is_equal (other.s); }",
          "99:   bool is_subset (const hb_bit_set_invertible_t &larger_set) const",
          "100:   {",
          "102:     if (!inverted && larger_set.inverted)",
          "103:     {",
          "105:       for (auto c: s)",
          "106:         if (larger_set.s.has (c))",
          "107:    return false;",
          "108:       return true;",
          "109:     }",
          "111:     return inverted ? larger_set.s.is_subset (s) : s.is_subset (larger_set.s);",
          "112:   }",
          "114:   template <typename Op>",
          "115:   void process (const Op& op, const hb_bit_set_invertible_t &other)",
          "116:   { s.process (op, other.s); }",
          "119:   void union_ (const hb_bit_set_invertible_t &other) { process (hb_bitwise_or, other); }",
          "121:   void intersect (const hb_bit_set_invertible_t &other) { process (hb_bitwise_and, other); }",
          "123:   void subtract (const hb_bit_set_invertible_t &other) { process (hb_bitwise_sub, other); }",
          "125:   void symmetric_difference (const hb_bit_set_invertible_t &other) { process (hb_bitwise_xor, other); }",
          "127:   bool next (hb_codepoint_t *codepoint) const",
          "128:   {",
          "130:     return s.next (codepoint);",
          "131:   }",
          "132:   bool previous (hb_codepoint_t *codepoint) const",
          "133:   {",
          "135:     return s.previous (codepoint);",
          "136:   }",
          "137:   bool next_range (hb_codepoint_t *first, hb_codepoint_t *last) const",
          "138:   {",
          "140:     return s.next_range (first, last);",
          "141:   }",
          "142:   bool previous_range (hb_codepoint_t *first, hb_codepoint_t *last) const",
          "143:   {",
          "145:     return s.previous_range (first, last);",
          "146:   }",
          "148:   unsigned int get_population () const",
          "149:   { return inverted ? INVALID - s.get_population () : s.get_population (); }",
          "151:   hb_codepoint_t get_min () const",
          "152:   { return /*XXX(inverted)*/s.get_min (); }",
          "153:   hb_codepoint_t get_max () const",
          "154:   { return /*XXX(inverted)*/s.get_max (); }",
          "156:   static constexpr hb_codepoint_t INVALID = hb_bit_set_t::INVALID;",
          "162:   using iter_t = hb_bit_set_t::iter_t;",
          "163:   iter_t iter () const { return iter_t (this->s); }",
          "164:   operator iter_t () const { return iter (); }",
          "165: };",
          "",
          "---------------"
        ],
        "src/hb-bit-set.hh||src/hb-bit-set.hh": [
          "File: src/hb-bit-set.hh -> src/hb-bit-set.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: struct hb_bit_set_t",
          "37: {",
          "47:   void init ()",
          "48:   {",
          "",
          "[Removed Lines]",
          "38:   hb_bit_set_t ()",
          "39:   {",
          "40:     init ();",
          "41:   }",
          "42:   ~hb_bit_set_t ()",
          "43:   {",
          "44:     fini ();",
          "45:   }",
          "",
          "[Added Lines]",
          "38:   hb_bit_set_t () { init (); }",
          "39:   ~hb_bit_set_t () { fini (); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "558:       resize (newCount);",
          "559:   }",
          "561:   bool next (hb_codepoint_t *codepoint) const",
          "562:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555:   void union_ (const hb_bit_set_t &other) { process (hb_bitwise_or, other); }",
          "556:   void intersect (const hb_bit_set_t &other) { process (hb_bitwise_and, other); }",
          "557:   void subtract (const hb_bit_set_t &other) { process (hb_bitwise_sub, other); }",
          "558:   void symmetric_difference (const hb_bit_set_t &other) { process (hb_bitwise_xor, other); }",
          "",
          "---------------"
        ],
        "src/hb-deprecated.h||src/hb-deprecated.h": [
          "File: src/hb-deprecated.h -> src/hb-deprecated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:          hb_font_get_glyph_func_t func,",
          "108:          void *user_data, hb_destroy_func_t destroy);",
          "",
          "[Removed Lines]",
          "110: HB_EXTERN HB_DEPRECATED void",
          "111: hb_set_invert (hb_set_t *set);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hb-set.cc||src/hb-set.cc": [
          "File: src/hb-set.cc -> src/hb-set.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:   set->symmetric_difference (*other);",
          "433: }",
          "446: void",
          "448: {",
          "449: }",
          "",
          "[Removed Lines]",
          "435: #ifndef HB_DISABLE_DEPRECATED",
          "447: hb_set_invert (hb_set_t *set HB_UNUSED)",
          "450: #endif",
          "",
          "[Added Lines]",
          "444: hb_set_invert (hb_set_t *set)",
          "446:   set->invert ();",
          "",
          "---------------"
        ],
        "src/hb-set.h||src/hb-set.h": [
          "File: src/hb-set.h -> src/hb-set.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: HB_EXTERN hb_bool_t",
          "95: hb_set_is_empty (const hb_set_t *set);",
          "97: HB_EXTERN hb_bool_t",
          "98: hb_set_has (const hb_set_t *set,",
          "99:      hb_codepoint_t  codepoint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: HB_EXTERN void",
          "98: hb_set_invert (hb_set_t *set);",
          "",
          "---------------"
        ],
        "src/hb-set.hh||src/hb-set.hh": [
          "File: src/hb-set.hh -> src/hb-set.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define HB_SET_HH",
          "31: #include \"hb.hh\"",
          "35: template <typename impl_t>",
          "37: {",
          "38:   hb_object_header_t header;",
          "39:   impl_t s;",
          "45:   void init ()",
          "46:   {",
          "47:     hb_object_init (this);",
          "48:     init_shallow ();",
          "49:   }",
          "54:   void fini ()",
          "55:   {",
          "56:     hb_object_fini (this);",
          "",
          "[Removed Lines]",
          "32: #include \"hb-bit-set.hh\"",
          "36: struct hb_intset_t",
          "41:   void init_shallow ()",
          "42:   {",
          "43:     s.init ();",
          "44:   }",
          "50:   void fini_shallow ()",
          "51:   {",
          "52:     s.fini ();",
          "53:   }",
          "",
          "[Added Lines]",
          "32: #include \"hb-bit-set-invertible.hh\"",
          "36: struct hb_sparseset_t",
          "41:   hb_sparseset_t () { init (); }",
          "42:   ~hb_sparseset_t () { fini (); }",
          "44:   void init_shallow () { s.init (); }",
          "50:   void fini_shallow () { s.fini (); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   bool in_error () const { return s.in_error (); }",
          "65:   void reset () { s.reset (); }",
          "67:   void clear () { s.clear (); }",
          "69:   bool is_empty () const { return s.is_empty (); }",
          "71:   void add (hb_codepoint_t g) { s.add (g); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   void invert () { s.invert (); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   bool operator () (hb_codepoint_t k) const { return has (k); }",
          "103:   { add (v); return *this; }",
          "105:   { add_range (range.first, range.second); return *this; }",
          "107:   bool intersects (hb_codepoint_t first, hb_codepoint_t last) const",
          "108:   { return s.intersects (first, last); }",
          "121:   bool next (hb_codepoint_t *codepoint) const { return s.next (codepoint); }",
          "122:   bool previous (hb_codepoint_t *codepoint) const { return s.previous (codepoint); }",
          "",
          "[Removed Lines]",
          "102:   hb_intset_t& operator << (hb_codepoint_t v)",
          "104:   hb_intset_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)",
          "110:   void set (const hb_intset_t &other) { s.set (other.s); }",
          "112:   bool is_equal (const hb_intset_t &other) const { return s.is_equal (other.s); }",
          "114:   bool is_subset (const hb_intset_t &larger_set) const { return s.is_subset (larger_set.s); }",
          "116:   void union_ (const hb_intset_t &other) { s.process (hb_bitwise_or, other.s); }",
          "117:   void intersect (const hb_intset_t &other) { s.process (hb_bitwise_and, other.s); }",
          "118:   void subtract (const hb_intset_t &other) { s.process (hb_bitwise_sub, other.s); }",
          "119:   void symmetric_difference (const hb_intset_t &other) { s.process (hb_bitwise_xor, other.s); }",
          "",
          "[Added Lines]",
          "98:   hb_sparseset_t& operator << (hb_codepoint_t v)",
          "100:   hb_sparseset_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)",
          "106:   void set (const hb_sparseset_t &other) { s.set (other.s); }",
          "108:   bool is_equal (const hb_sparseset_t &other) const { return s.is_equal (other.s); }",
          "110:   bool is_subset (const hb_sparseset_t &larger_set) const { return s.is_subset (larger_set.s); }",
          "112:   void union_ (const hb_sparseset_t &other) { s.union_ (other.s); }",
          "113:   void intersect (const hb_sparseset_t &other) { s.intersect (other.s); }",
          "114:   void subtract (const hb_sparseset_t &other) { s.subtract (other.s); }",
          "115:   void symmetric_difference (const hb_sparseset_t &other) { s.symmetric_difference (other.s); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:   operator iter_t () const { return iter (); }",
          "140: };",
          "144: static_assert (hb_set_t::INVALID == HB_SET_VALUE_INVALID, \"\");",
          "",
          "[Removed Lines]",
          "142: struct hb_set_t : hb_intset_t<hb_bit_set_t> {};",
          "",
          "[Added Lines]",
          "138: struct hb_set_t : hb_sparseset_t<hb_bit_set_invertible_t> {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71af2c6d9b58213963577a01c97dc9dc021dc6b7",
      "candidate_info": {
        "commit_hash": "71af2c6d9b58213963577a01c97dc9dc021dc6b7",
        "repo": "harfbuzz/harfbuzz",
        "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/71af2c6d9b58213963577a01c97dc9dc021dc6b7",
        "files": [
          "src/hb-set.cc",
          "src/hb-set.h"
        ],
        "message": "[docs] Add gtkdoc comments to hb-set",
        "before_after_code_files": [
          "src/hb-set.cc||src/hb-set.cc",
          "src/hb-set.h||src/hb-set.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-set.cc||src/hb-set.cc"
          ],
          "candidate": [
            "src/hb-set.cc||src/hb-set.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/hb-set.cc||src/hb-set.cc": [
          "File: src/hb-set.cc -> src/hb-set.cc"
        ],
        "src/hb-set.h||src/hb-set.h": [
          "File: src/hb-set.h -> src/hb-set.h"
        ]
      }
    },
    {
      "candidate_hash": "b94f24ec79877d57a17e8e8b9961127d590afa34",
      "candidate_info": {
        "commit_hash": "b94f24ec79877d57a17e8e8b9961127d590afa34",
        "repo": "harfbuzz/harfbuzz",
        "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/b94f24ec79877d57a17e8e8b9961127d590afa34",
        "files": [
          "src/hb-algs.hh",
          "src/hb-bit-set-invertible.hh",
          "src/hb-bit-set.hh"
        ],
        "message": "[bit-set-invertible] Implement set algebra",
        "before_after_code_files": [
          "src/hb-algs.hh||src/hb-algs.hh",
          "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh",
          "src/hb-bit-set.hh||src/hb-bit-set.hh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
          ],
          "candidate": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
          ]
        }
      },
      "candidate_diff": {
        "src/hb-algs.hh||src/hb-algs.hh": [
          "File: src/hb-algs.hh -> src/hb-algs.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178: }",
          "1179: HB_FUNCOBJ (hb_bitwise_xor);",
          "1180: struct",
          "1181: { HB_PARTIALIZE(2);",
          "1182:   template <typename T> constexpr auto",
          "1183:   operator () (const T &a, const T &b) const HB_AUTO_RETURN (a & ~b)",
          "1184: }",
          "1186: struct",
          "1187: {",
          "1188:   template <typename T> constexpr auto",
          "",
          "[Removed Lines]",
          "1185: HB_FUNCOBJ (hb_bitwise_sub);",
          "",
          "[Added Lines]",
          "1181: { HB_PARTIALIZE(2);",
          "1182:   template <typename T> constexpr auto",
          "1183:   operator () (const T &a, const T &b) const HB_AUTO_RETURN (~a & b)",
          "1184: }",
          "1185: HB_FUNCOBJ (hb_bitwise_lt);",
          "1186: struct",
          "1191: HB_FUNCOBJ (hb_bitwise_gt); // aka sub",
          "1192: struct",
          "1193: { HB_PARTIALIZE(2);",
          "1194:   template <typename T> constexpr auto",
          "1195:   operator () (const T &a, const T &b) const HB_AUTO_RETURN (~a & ~b)",
          "1196: }",
          "1197: HB_FUNCOBJ (hb_bitwise_non);",
          "1198: struct",
          "1199: { HB_PARTIALIZE(2);",
          "1200:   template <typename T> constexpr auto",
          "1201:   operator () (const T &a, const T &b) const HB_AUTO_RETURN (~a | b)",
          "1202: }",
          "1203: HB_FUNCOBJ (hb_bitwise_le);",
          "1204: struct",
          "1205: { HB_PARTIALIZE(2);",
          "1206:   template <typename T> constexpr auto",
          "1207:   operator () (const T &a, const T &b) const HB_AUTO_RETURN (a | ~b)",
          "1208: }",
          "1209: HB_FUNCOBJ (hb_bitwise_ge);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1203: }",
          "1204: HB_FUNCOBJ (hb_sub);",
          "1205: struct",
          "1206: { HB_PARTIALIZE(2);",
          "1207:   template <typename T, typename T2> constexpr auto",
          "1208:   operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (a * b)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1230: { HB_PARTIALIZE(2);",
          "1231:   template <typename T, typename T2> constexpr auto",
          "1232:   operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (b - a)",
          "1233: }",
          "1234: HB_FUNCOBJ (hb_rsub);",
          "1235: struct",
          "",
          "---------------"
        ],
        "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh": [
          "File: src/hb-bit-set-invertible.hh -> src/hb-bit-set-invertible.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     return inverted ? larger_set.s.is_subset (s) : s.is_subset (larger_set.s);",
          "109:   }",
          "111:   template <typename Op>",
          "112:   void process (const Op& op, const hb_bit_set_invertible_t &other)",
          "124:   bool next (hb_codepoint_t *codepoint) const",
          "125:   {",
          "",
          "[Removed Lines]",
          "113:   { s.process (op, other.s); }",
          "116:   void union_ (const hb_bit_set_invertible_t &other) { process (hb_bitwise_or, other); }",
          "118:   void intersect (const hb_bit_set_invertible_t &other) { process (hb_bitwise_and, other); }",
          "120:   void subtract (const hb_bit_set_invertible_t &other) { process (hb_bitwise_sub, other); }",
          "122:   void symmetric_difference (const hb_bit_set_invertible_t &other) { process (hb_bitwise_xor, other); }",
          "",
          "[Added Lines]",
          "111:   protected:",
          "114:   {",
          "115:     s.process (op, other.s);",
          "116:     inverted = bool (op (int (inverted), int (other.inverted)));",
          "117:   }",
          "118:   public:",
          "119:   void union_ (const hb_bit_set_invertible_t &other)",
          "120:   {",
          "121:     if (inverted == other.inverted)",
          "122:     {",
          "123:       if (inverted)",
          "124:  process (hb_bitwise_and, other);",
          "125:       else",
          "127:     }",
          "128:     else",
          "129:     {",
          "130:       if (inverted)",
          "131:  process (hb_bitwise_gt, other);",
          "132:       else",
          "133:  process (hb_bitwise_lt, other);",
          "134:     }",
          "135:   }",
          "136:   void intersect (const hb_bit_set_invertible_t &other)",
          "137:   {",
          "138:     if (inverted == other.inverted)",
          "139:     {",
          "140:       if (inverted)",
          "141:  process (hb_bitwise_or, other);",
          "142:       else",
          "144:     }",
          "145:     else",
          "146:     {",
          "147:       if (inverted)",
          "148:  process (hb_bitwise_ge, other);",
          "149:       else",
          "150:  process (hb_bitwise_le, other);",
          "151:     }",
          "152:   }",
          "153:   void subtract (const hb_bit_set_invertible_t &other)",
          "154:   {",
          "155:     if (inverted == other.inverted)",
          "156:     {",
          "157:       if (inverted)",
          "158:  process (hb_bitwise_lt, other);",
          "159:       else",
          "161:     }",
          "162:     else",
          "163:     {",
          "164:       if (inverted)",
          "165:  process (hb_bitwise_non, other);",
          "166:       else",
          "167:  process (hb_bitwise_and, other);",
          "168:     }",
          "169:   }",
          "170:   void symmetric_difference (const hb_bit_set_invertible_t &other)",
          "171:   {",
          "172:     process (hb_bitwise_xor, other);",
          "173:   }",
          "",
          "---------------"
        ],
        "src/hb-bit-set.hh||src/hb-bit-set.hh": [
          "File: src/hb-bit-set.hh -> src/hb-bit-set.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   void union_ (const hb_bit_set_t &other) { process (hb_bitwise_or, other); }",
          "579:   void intersect (const hb_bit_set_t &other) { process (hb_bitwise_and, other); }",
          "581:   void symmetric_difference (const hb_bit_set_t &other) { process (hb_bitwise_xor, other); }",
          "583:   bool next (hb_codepoint_t *codepoint) const",
          "",
          "[Removed Lines]",
          "580:   void subtract (const hb_bit_set_t &other) { process (hb_bitwise_sub, other); }",
          "",
          "[Added Lines]",
          "580:   void subtract (const hb_bit_set_t &other) { process (hb_bitwise_gt, other); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92908c122bb578d502bdaa2fbf7a9a3b41540ae0",
      "candidate_info": {
        "commit_hash": "92908c122bb578d502bdaa2fbf7a9a3b41540ae0",
        "repo": "harfbuzz/harfbuzz",
        "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/92908c122bb578d502bdaa2fbf7a9a3b41540ae0",
        "files": [
          "src/hb-bit-set-invertible.hh"
        ],
        "message": "[bit-set-invertible] Remove extra check\n\nWe don't expect immutable / null set in this code.",
        "before_after_code_files": [
          "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
          ],
          "candidate": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
          ]
        }
      },
      "candidate_diff": {
        "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh": [
          "File: src/hb-bit-set-invertible.hh -> src/hb-bit-set-invertible.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   void reset () { s.reset (); inverted = false; }",
          "50:   void clear () { s.clear (); inverted = false; }",
          "53:   bool is_empty () const",
          "54:   {",
          "",
          "[Removed Lines]",
          "51:   void invert () { if (!s.in_error ()) inverted = !inverted; }",
          "",
          "[Added Lines]",
          "51:   void invert () { inverted = !inverted; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6aa37159bf1f4b3a2b83c7e263f4642959af73a",
      "candidate_info": {
        "commit_hash": "f6aa37159bf1f4b3a2b83c7e263f4642959af73a",
        "repo": "harfbuzz/harfbuzz",
        "commit_url": "https://github.com/harfbuzz/harfbuzz/commit/f6aa37159bf1f4b3a2b83c7e263f4642959af73a",
        "files": [
          "src/hb-bit-set-invertible.hh"
        ],
        "message": "[bit-set-invertible] Fix process logic for inverted [# On branch set-invert",
        "before_after_code_files": [
          "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
          ],
          "candidate": [
            "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh"
          ]
        }
      },
      "candidate_diff": {
        "src/hb-bit-set-invertible.hh||src/hb-bit-set-invertible.hh": [
          "File: src/hb-bit-set-invertible.hh -> src/hb-bit-set-invertible.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   protected:",
          "114:   template <typename Op>",
          "115:   void process (const Op& op, const hb_bit_set_invertible_t &other)",
          "120:   public:",
          "121:   void union_ (const hb_bit_set_invertible_t &other)",
          "122:   {",
          "",
          "[Removed Lines]",
          "116:   {",
          "117:     s.process (op, other.s);",
          "118:     inverted = bool (op (int (inverted), int (other.inverted)));",
          "119:   }",
          "",
          "[Added Lines]",
          "116:   { s.process (op, other.s); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:       else",
          "135:  process (hb_bitwise_lt, other);",
          "136:     }",
          "137:   }",
          "138:   void intersect (const hb_bit_set_invertible_t &other)",
          "139:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     inverted = inverted || other.inverted;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:       else",
          "152:  process (hb_bitwise_le, other);",
          "153:     }",
          "154:   }",
          "155:   void subtract (const hb_bit_set_invertible_t &other)",
          "156:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     inverted = inverted && other.inverted;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:       else",
          "169:  process (hb_bitwise_and, other);",
          "170:     }",
          "171:   }",
          "172:   void symmetric_difference (const hb_bit_set_invertible_t &other)",
          "173:   {",
          "174:     process (hb_bitwise_xor, other);",
          "175:   }",
          "177:   bool next (hb_codepoint_t *codepoint) const",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     inverted = inverted && !other.inverted;",
          "175:     inverted = inverted ^ other.inverted;",
          "",
          "---------------"
        ]
      }
    }
  ]
}