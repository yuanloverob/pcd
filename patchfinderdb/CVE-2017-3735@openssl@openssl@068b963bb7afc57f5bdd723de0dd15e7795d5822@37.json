{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f2be2f916f41caf32916da92c7ddf395293342f",
      "candidate_info": {
        "commit_hash": "7f2be2f916f41caf32916da92c7ddf395293342f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7f2be2f916f41caf32916da92c7ddf395293342f",
        "files": [
          "test/recipes/25-test_verify.t"
        ],
        "message": "recipes/25-test_verify.t: reformat.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4411)",
        "before_after_code_files": [
          "test/recipes/25-test_verify.t||test/recipes/25-test_verify.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/25-test_verify.t||test/recipes/25-test_verify.t": [
          "File: test/recipes/25-test_verify.t -> test/recipes/25-test_verify.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     my @args = qw(openssl verify -auth_level 1 -purpose);",
          "21:     my @path = qw(test certs);",
          "22:     push(@args, \"$purpose\", @opts);",
          "25:     push(@args, srctop_file(@path, \"$cert.pem\"));",
          "26:     run(app([@args]));",
          "27: }",
          "",
          "[Removed Lines]",
          "23:     for (@$trusted) { push(@args, \"-trusted\", srctop_file(@path, \"$_.pem\")) }",
          "24:     for (@$untrusted) { push(@args, \"-untrusted\", srctop_file(@path, \"$_.pem\")) }",
          "",
          "[Added Lines]",
          "23:     for (@$trusted) {",
          "24:         push(@args, \"-trusted\", srctop_file(@path, \"$_.pem\"))",
          "25:     }",
          "26:     for (@$untrusted) {",
          "27:         push(@args, \"-untrusted\", srctop_file(@path, \"$_.pem\"))",
          "28:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:    \"accept wildcard trust\");",
          "162: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca-cert)], [qw(ca-cert)]),",
          "163:    \"accept server purpose\");",
          "165:    \"accept server trust and purpose\");",
          "166: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca+anyEKU)], [qw(ca-cert)]),",
          "167:    \"accept wildcard trust and server purpose\");",
          "169:    \"accept client mistrust and server purpose\");",
          "171:    \"accept server trust and client purpose\");",
          "172: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca+anyEKU)], [qw(ca-cert)]),",
          "173:    \"accept wildcard trust and client purpose\");",
          "",
          "[Removed Lines]",
          "164: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca+serverAuth)], [qw(ca-cert)]),",
          "168: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca-clientAuth)], [qw(ca-cert)]),",
          "170: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca+serverAuth)], [qw(ca-cert)]),",
          "",
          "[Added Lines]",
          "168: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca+serverAuth)],",
          "169:           [qw(ca-cert)]),",
          "173: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca-clientAuth)],",
          "174:           [qw(ca-cert)]),",
          "176: ok(verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca+serverAuth)],",
          "177:           [qw(ca-cert)]),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:    \"fail client purpose\");",
          "176: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert ca-anyEKU)], [qw(ca-cert)]),",
          "177:    \"fail wildcard mistrust\");",
          "179:    \"fail server mistrust\");",
          "181:    \"fail client trust\");",
          "183:    \"fail client trust and server purpose\");",
          "185:    \"fail client trust and client purpose\");",
          "187:    \"fail server mistrust and client purpose\");",
          "189:    \"fail client mistrust and client purpose\");",
          "191:    \"fail server mistrust and server purpose\");",
          "192: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca-anyEKU)], [qw(ca-cert)]),",
          "193:    \"fail wildcard mistrust and server purpose\");",
          "",
          "[Removed Lines]",
          "178: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert ca-serverAuth)], [qw(ca-cert)]),",
          "180: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert ca+clientAuth)], [qw(ca-cert)]),",
          "182: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca+clientAuth)], [qw(ca-cert)]),",
          "184: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca+clientAuth)], [qw(ca-cert)]),",
          "186: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca-serverAuth)], [qw(ca-cert)]),",
          "188: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca-clientAuth)], [qw(ca-cert)]),",
          "190: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca-serverAuth)], [qw(ca-cert)]),",
          "",
          "[Added Lines]",
          "185: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert ca-serverAuth)],",
          "186:            [qw(ca-cert)]),",
          "188: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert ca+clientAuth)],",
          "189:            [qw(ca-cert)]),",
          "191: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca+clientAuth)],",
          "192:            [qw(ca-cert)]),",
          "194: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca+clientAuth)],",
          "195:            [qw(ca-cert)]),",
          "197: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca-serverAuth)],",
          "198:            [qw(ca-cert)]),",
          "200: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert cca-clientAuth)],",
          "201:            [qw(ca-cert)]),",
          "203: ok(!verify(\"ee-cert\", \"sslserver\", [qw(root-cert sca-serverAuth)],",
          "204:            [qw(ca-cert)]),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228: ok(verify(\"pc1-cert\", \"sslclient\", [qw(root-cert)], [qw(ee-client ca-cert)],",
          "229:           \"-allow_proxy_certs\"),",
          "230:    \"accept proxy cert 1\");",
          "233:    \"accept proxy cert 2\");",
          "236:    \"fail proxy cert with incorrect subject\");",
          "239:    \"fail proxy cert with incorrect pathlen\");",
          "242:    \"accept proxy cert missing proxy policy\");",
          "245:    \"failed proxy cert where last CN was added as a multivalue RDN component\");",
          "247: # Security level tests",
          "249:    \"accept RSA 2048 chain at auth level 2\");",
          "251:    \"reject RSA 2048 root at auth level 3\");",
          "253:    \"accept RSA 768 root at auth level 0\");",
          "254: ok(!verify(\"ee-cert\", \"sslserver\", [\"root-cert-768\"], [\"ca-cert-768i\"]),",
          "255:    \"reject RSA 768 root at auth level 1\");",
          "257:    \"accept RSA 768 intermediate at auth level 0\");",
          "258: ok(!verify(\"ee-cert-768i\", \"sslserver\", [\"root-cert\"], [\"ca-cert-768\"]),",
          "259:    \"reject RSA 768 intermediate at auth level 1\");",
          "261:    \"accept RSA 768 leaf at auth level 0\");",
          "262: ok(!verify(\"ee-cert-768\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"]),",
          "263:    \"reject RSA 768 leaf at auth level 1\");",
          "264: #",
          "266:    \"accept md5 self-signed TA at auth level 2\");",
          "268:    \"accept md5 intermediate TA at auth level 2\");",
          "270:    \"accept md5 intermediate at auth level 0\");",
          "271: ok(!verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert-md5\"]),",
          "272:    \"reject md5 intermediate at auth level 1\");",
          "274:    \"accept md5 leaf at auth level 0\");",
          "275: ok(!verify(\"ee-cert-md5\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"]),",
          "276:    \"reject md5 leaf at auth level 1\");",
          "",
          "[Removed Lines]",
          "231: ok(verify(\"pc2-cert\", \"sslclient\", [qw(root-cert)], [qw(pc1-cert ee-client ca-cert)],",
          "232:           \"-allow_proxy_certs\"),",
          "234: ok(!verify(\"bad-pc3-cert\", \"sslclient\", [qw(root-cert)], [qw(pc1-cert ee-client ca-cert)],",
          "235:           \"-allow_proxy_certs\"),",
          "237: ok(!verify(\"bad-pc4-cert\", \"sslclient\", [qw(root-cert)], [qw(pc1-cert ee-client ca-cert)],",
          "238:           \"-allow_proxy_certs\"),",
          "240: ok(verify(\"pc5-cert\", \"sslclient\", [qw(root-cert)], [qw(pc1-cert ee-client ca-cert)],",
          "241:           \"-allow_proxy_certs\"),",
          "243: ok(!verify(\"pc6-cert\", \"sslclient\", [qw(root-cert)], [qw(pc1-cert ee-client ca-cert)],",
          "244:           \"-allow_proxy_certs\"),",
          "248: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-auth_level\", \"2\"),",
          "250: ok(!verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-auth_level\", \"3\"),",
          "252: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert-768\"], [\"ca-cert-768i\"], \"-auth_level\", \"0\"),",
          "256: ok(verify(\"ee-cert-768i\", \"sslserver\", [\"root-cert\"], [\"ca-cert-768\"], \"-auth_level\", \"0\"),",
          "260: ok(verify(\"ee-cert-768\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-auth_level\", \"0\"),",
          "265: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert-md5\"], [\"ca-cert\"], \"-auth_level\", \"2\"),",
          "267: ok(verify(\"ee-cert\", \"sslserver\", [\"ca-cert-md5-any\"], [], \"-auth_level\", \"2\"),",
          "269: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert-md5\"], \"-auth_level\", \"0\"),",
          "273: ok(verify(\"ee-cert-md5\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-auth_level\", \"0\"),",
          "",
          "[Added Lines]",
          "245: ok(verify(\"pc2-cert\", \"sslclient\", [qw(root-cert)],",
          "246:           [qw(pc1-cert ee-client ca-cert)], \"-allow_proxy_certs\"),",
          "248: ok(!verify(\"bad-pc3-cert\", \"sslclient\", [qw(root-cert)],",
          "249:            [qw(pc1-cert ee-client ca-cert)], \"-allow_proxy_certs\"),",
          "251: ok(!verify(\"bad-pc4-cert\", \"sslclient\", [qw(root-cert)],",
          "252:            [qw(pc1-cert ee-client ca-cert)], \"-allow_proxy_certs\"),",
          "254: ok(verify(\"pc5-cert\", \"sslclient\", [qw(root-cert)],",
          "255:           [qw(pc1-cert ee-client ca-cert)], \"-allow_proxy_certs\"),",
          "257: ok(!verify(\"pc6-cert\", \"sslclient\", [qw(root-cert)],",
          "258:            [qw(pc1-cert ee-client ca-cert)], \"-allow_proxy_certs\"),",
          "262: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "263:           \"-auth_level\", \"2\"),",
          "265: ok(!verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "266:            \"-auth_level\", \"3\"),",
          "268: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert-768\"], [\"ca-cert-768i\"],",
          "269:           \"-auth_level\", \"0\"),",
          "273: ok(verify(\"ee-cert-768i\", \"sslserver\", [\"root-cert\"], [\"ca-cert-768\"],",
          "274:           \"-auth_level\", \"0\"),",
          "278: ok(verify(\"ee-cert-768\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "279:           \"-auth_level\", \"0\"),",
          "284: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert-md5\"], [\"ca-cert\"],",
          "285:           \"-auth_level\", \"2\"),",
          "287: ok(verify(\"ee-cert\", \"sslserver\", [\"ca-cert-md5-any\"], [],",
          "288:           \"-auth_level\", \"2\"),",
          "290: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert-md5\"],",
          "291:           \"-auth_level\", \"0\"),",
          "295: ok(verify(\"ee-cert-md5\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "296:           \"-auth_level\", \"0\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "279: # between the trust-anchor and the leaf, so, for example, with a root->ca->leaf",
          "280: # chain, depth = 1 is sufficient, but depth == 0 is not.",
          "281: #",
          "283:    \"accept chain with verify_depth 2\");",
          "285:    \"accept chain with verify_depth 1\");",
          "287:    \"accept chain with verify_depth 0\");",
          "289:    \"accept md5 intermediate TA with verify_depth 0\");",
          "291: # Name Constraints tests.",
          "",
          "[Removed Lines]",
          "282: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-verify_depth\", \"2\"),",
          "284: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-verify_depth\", \"1\"),",
          "286: ok(!verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"], \"-verify_depth\", \"0\"),",
          "288: ok(verify(\"ee-cert\", \"sslserver\", [\"ca-cert-md5-any\"], [], \"-verify_depth\", \"0\"),",
          "",
          "[Added Lines]",
          "305: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "306:           \"-verify_depth\", \"2\"),",
          "308: ok(verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "309:           \"-verify_depth\", \"1\"),",
          "311: ok(!verify(\"ee-cert\", \"sslserver\", [\"root-cert\"], [\"ca-cert\"],",
          "312:            \"-verify_depth\", \"0\"),",
          "314: ok(verify(\"ee-cert\", \"sslserver\", [\"ca-cert-md5-any\"], [],",
          "315:           \"-verify_depth\", \"0\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "320: ok(!verify(\"badalt7-cert\", \"sslserver\", [\"root-cert\"], [\"ncca1-cert\"], ),",
          "321:    \"Name Constraints CN BMPSTRING hostname not permitted\");",
          "324:    \"Name constaints nested DNS name not permitted 1\");",
          "327:    \"Name constaints nested DNS name not permitted 2\");",
          "330:    \"Name constaints nested DNS name excluded\");",
          "",
          "[Removed Lines]",
          "323: ok(!verify(\"badalt8-cert\", \"sslserver\", [\"root-cert\"], [\"ncca1-cert\", \"ncca3-cert\"], ),",
          "326: ok(!verify(\"badalt9-cert\", \"sslserver\", [\"root-cert\"], [\"ncca1-cert\", \"ncca3-cert\"], ),",
          "329: ok(!verify(\"badalt10-cert\", \"sslserver\", [\"root-cert\"], [\"ncca1-cert\", \"ncca3-cert\"], ),",
          "332: ok(!verify(\"many-names1\", \"sslserver\", [\"many-constraints\"], [\"many-constraints\"], ),",
          "333:     \"Too many names and constraints to check (1)\");",
          "334: ok(!verify(\"many-names2\", \"sslserver\", [\"many-constraints\"], [\"many-constraints\"], ),",
          "335:     \"Too many names and constraints to check (2)\");",
          "336: ok(!verify(\"many-names3\", \"sslserver\", [\"many-constraints\"], [\"many-constraints\"], ),",
          "337:     \"Too many names and constraints to check (3)\");",
          "339: ok(verify(\"some-names1\", \"sslserver\", [\"many-constraints\"], [\"many-constraints\"], ),",
          "340:     \"Not too many names and constraints to check (1)\");",
          "341: ok(verify(\"some-names2\", \"sslserver\", [\"many-constraints\"], [\"many-constraints\"], ),",
          "342:     \"Not too many names and constraints to check (2)\");",
          "343: ok(verify(\"some-names2\", \"sslserver\", [\"many-constraints\"], [\"many-constraints\"], ),",
          "344:     \"Not too many names and constraints to check (3)\");",
          "",
          "[Added Lines]",
          "350: ok(!verify(\"badalt8-cert\", \"sslserver\", [\"root-cert\"],",
          "351:            [\"ncca1-cert\", \"ncca3-cert\"], ),",
          "354: ok(!verify(\"badalt9-cert\", \"sslserver\", [\"root-cert\"],",
          "355:            [\"ncca1-cert\", \"ncca3-cert\"], ),",
          "358: ok(!verify(\"badalt10-cert\", \"sslserver\", [\"root-cert\"],",
          "359:            [\"ncca1-cert\", \"ncca3-cert\"], ),",
          "362: ok(!verify(\"many-names1\", \"sslserver\", [\"many-constraints\"],",
          "363:            [\"many-constraints\"], ),",
          "364:    \"Too many names and constraints to check (1)\");",
          "365: ok(!verify(\"many-names2\", \"sslserver\", [\"many-constraints\"],",
          "366:            [\"many-constraints\"], ),",
          "367:    \"Too many names and constraints to check (2)\");",
          "368: ok(!verify(\"many-names3\", \"sslserver\", [\"many-constraints\"],",
          "369:            [\"many-constraints\"], ),",
          "370:    \"Too many names and constraints to check (3)\");",
          "372: ok(verify(\"some-names1\", \"sslserver\", [\"many-constraints\"],",
          "373:           [\"many-constraints\"], ),",
          "374:    \"Not too many names and constraints to check (1)\");",
          "375: ok(verify(\"some-names2\", \"sslserver\", [\"many-constraints\"],",
          "376:           [\"many-constraints\"], ),",
          "377:    \"Not too many names and constraints to check (2)\");",
          "378: ok(verify(\"some-names2\", \"sslserver\", [\"many-constraints\"],",
          "379:           [\"many-constraints\"], ),",
          "380:    \"Not too many names and constraints to check (3)\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f4a4df647d5d988eaa8be6a6c950b664f09b096",
      "candidate_info": {
        "commit_hash": "2f4a4df647d5d988eaa8be6a6c950b664f09b096",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2f4a4df647d5d988eaa8be6a6c950b664f09b096",
        "files": [
          "doc/ssl/SSL_export_keying_material.pod",
          "include/openssl/tls1.h",
          "ssl/ssl_lib.c"
        ],
        "message": "Add documentation for the SSL_export_keying_material() function\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3736)",
        "before_after_code_files": [
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/ssl_lib.c||ssl/ssl_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: __owur int SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,",
          "236: int SSL_get_sigalgs(SSL *s, int idx,",
          "237:                     int *psign, int *phash, int *psignandhash,",
          "",
          "[Removed Lines]",
          "232:                                const char *label, size_t llen,",
          "233:                                const unsigned char *p, size_t plen,",
          "234:                                int use_context);",
          "",
          "[Added Lines]",
          "232:                                       const char *label, size_t llen,",
          "233:                                       const unsigned char *context,",
          "234:                                       size_t contextlen, int use_context);",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2293: int SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,",
          "2294:                                const char *label, size_t llen,",
          "2296:                                int use_context)",
          "2297: {",
          "2298:     if (s->version < TLS1_VERSION && s->version != DTLS1_BAD_VER)",
          "2299:         return -1;",
          "2301:     return s->method->ssl3_enc->export_keying_material(s, out, olen, label,",
          "2304: }",
          "2306: static unsigned long ssl_session_hash(const SSL_SESSION *a)",
          "",
          "[Removed Lines]",
          "2295:                                const unsigned char *p, size_t plen,",
          "2302:                                                        llen, p, plen,",
          "2303:                                                        use_context);",
          "",
          "[Added Lines]",
          "2295:                                const unsigned char *context, size_t contextlen,",
          "2302:                                                        llen, context,",
          "2303:                                                        contextlen, use_context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca9e4d7a36c8906c30a7daf17d6239d42f761ddf",
      "candidate_info": {
        "commit_hash": "ca9e4d7a36c8906c30a7daf17d6239d42f761ddf",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ca9e4d7a36c8906c30a7daf17d6239d42f761ddf",
        "files": [
          "ssl/t1_trce.c"
        ],
        "message": "Fix the names of ChaCha20-Poly1305 cipher suites in t1_trce.c.\n\nPer RFC 7905, the cipher suite names end in \"_SHA256\". The original\nimplementation targeted the -03 draft, but there was a -04 draft right\nbefore the RFC was published to make the names consistent.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3748)\n\n(cherry picked from commit 32bbf777d0de7b0be90170b69fe9290096065fc9)",
        "before_after_code_files": [
          "ssl/t1_trce.c||ssl/t1_trce.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_trce.c||ssl/t1_trce.c": [
          "File: ssl/t1_trce.c -> ssl/t1_trce.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:     {0xC0AD, \"TLS_ECDHE_ECDSA_WITH_AES_256_CCM\"},",
          "416:     {0xC0AE, \"TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\"},",
          "417:     {0xC0AF, \"TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8\"},",
          "425:     {0xFEFE, \"SSL_RSA_FIPS_WITH_DES_CBC_SHA\"},",
          "426:     {0xFEFF, \"SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA\"},",
          "427: };",
          "",
          "[Removed Lines]",
          "418:     {0xCCA8, \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\"},",
          "419:     {0xCCA9, \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\"},",
          "420:     {0xCCAA, \"TLS_DHE_RSA_WITH_CHACHA20_POLY1305\"},",
          "421:     {0xCCAB, \"TLS_PSK_WITH_CHACHA20_POLY1305\"},",
          "422:     {0xCCAC, \"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305\"},",
          "423:     {0xCCAD, \"TLS_DHE_PSK_WITH_CHACHA20_POLY1305\"},",
          "424:     {0xCCAE, \"TLS_RSA_PSK_WITH_CHACHA20_POLY1305\"},",
          "",
          "[Added Lines]",
          "418:     {0xCCA8, \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"},",
          "419:     {0xCCA9, \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\"},",
          "420:     {0xCCAA, \"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"},",
          "421:     {0xCCAB, \"TLS_PSK_WITH_CHACHA20_POLY1305_SHA256\"},",
          "422:     {0xCCAC, \"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256\"},",
          "423:     {0xCCAD, \"TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256\"},",
          "424:     {0xCCAE, \"TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d93022c5ad05fd87c5732881b79dec7d797d2e24",
      "candidate_info": {
        "commit_hash": "d93022c5ad05fd87c5732881b79dec7d797d2e24",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d93022c5ad05fd87c5732881b79dec7d797d2e24",
        "files": [
          "crypto/cms/cms_smime.c"
        ],
        "message": "Support CMS decrypt without a certificate for all key types\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4115)\n\n(cherry picked from commit 3f1d1704f215dc11e1fefbb6ecdcb2a08c3a65db)",
        "before_after_code_files": [
          "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
          "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:     STACK_OF(CMS_RecipientEncryptedKey) *reks;",
          "584:     CMS_RecipientEncryptedKey *rek;",
          "585:     reks = CMS_RecipientInfo_kari_get0_reks(ri);",
          "588:     for (i = 0; i < sk_CMS_RecipientEncryptedKey_num(reks); i++) {",
          "589:         int rv;",
          "590:         rek = sk_CMS_RecipientEncryptedKey_value(reks, i);",
          "592:             continue;",
          "593:         CMS_RecipientInfo_kari_set0_pkey(ri, pk);",
          "594:         rv = CMS_RecipientInfo_kari_decrypt(cms, ri, rek);",
          "595:         CMS_RecipientInfo_kari_set0_pkey(ri, NULL);",
          "596:         if (rv > 0)",
          "597:             return 1;",
          "599:     }",
          "600:     return 0;",
          "601: }",
          "",
          "[Removed Lines]",
          "586:     if (!cert)",
          "587:         return 0;",
          "591:         if (CMS_RecipientEncryptedKey_cert_cmp(rek, cert))",
          "598:         return -1;",
          "",
          "[Added Lines]",
          "589:         if (cert != NULL && CMS_RecipientEncryptedKey_cert_cmp(rek, cert))",
          "596:         return cert == NULL ? 0 : -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:                 return 1;",
          "660:         }",
          "661:     }",
          "664:         ERR_clear_error();",
          "665:         return 1;",
          "666:     }",
          "",
          "[Removed Lines]",
          "663:     if (match_ri && !cert && !debug) {",
          "",
          "[Added Lines]",
          "661:     if (cert == NULL && ri_type == CMS_RECIPINFO_TRANS && match_ri && !debug) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "257a03ccb5f395a23bbf63b6fcdd024081b114c7",
      "candidate_info": {
        "commit_hash": "257a03ccb5f395a23bbf63b6fcdd024081b114c7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/257a03ccb5f395a23bbf63b6fcdd024081b114c7",
        "files": [
          "include/openssl/tls1.h"
        ],
        "message": "Add missing paren.\n\nThanks to Remi Gacogne for pointing this out.\nAlso indented the two macro bodies\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4608)",
        "before_after_code_files": [
          "include/openssl/tls1.h||include/openssl/tls1.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB,(void (*)(void))cb)",
          "300: # define SSL_CTX_get_tlsext_status_arg(ssl, arg) \\",
          "302: # define SSL_CTX_set_tlsext_status_arg(ssl, arg) \\",
          "305: #define SSL_CTX_set_tlsext_status_type(ssl, type) \\",
          "306:         SSL_CTX_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE, type, NULL)",
          "",
          "[Removed Lines]",
          "301: SSL_CTX_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG,0, (void *)arg",
          "303: SSL_CTX_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG,0, (void *)arg)",
          "",
          "[Added Lines]",
          "301:         SSL_CTX_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG,0, (void *)arg)",
          "303:         SSL_CTX_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG,0, (void *)arg)",
          "",
          "---------------"
        ]
      }
    }
  ]
}