{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2156e5eca10d1dc3bb8155dc70f1dc0718841028",
      "candidate_info": {
        "commit_hash": "2156e5eca10d1dc3bb8155dc70f1dc0718841028",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2156e5eca10d1dc3bb8155dc70f1dc0718841028",
        "files": [
          "src/node_file.cc"
        ],
        "message": "fs: don't assert on uv_fs_*() errors\n\nPass errors to the JS callbacks, don't assert in C++ land.\n\nFixes among other things the case where Node aborts because uv_fs_futimes()\nreturns ENOSYS.",
        "before_after_code_files": [
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "227: #define ASYNC_CALL(func, callback, ...)                           \\",
          "228:   FSReqWrap* req_wrap = new FSReqWrap();                          \\",
          "230:       __VA_ARGS__, After);                                        \\",
          "232:   req_wrap->object_->Set(oncomplete_sym, callback);               \\",
          "233:   req_wrap->Dispatched();                                         \\",
          "234:   return scope.Close(req_wrap->object_);",
          "236: #define SYNC_CALL(func, path, ...)                                \\",
          "",
          "[Removed Lines]",
          "229:   int r = uv_fs_##func(Loop(), &req_wrap->req_,              \\",
          "231:   assert(r == 0);                                                 \\",
          "",
          "[Added Lines]",
          "229:   int r = uv_fs_##func(Loop(), &req_wrap->req_,                   \\",
          "233:   if (r < 0) {                                                    \\",
          "234:     uv_fs_t* req = &req_wrap->req_;                               \\",
          "235:     req->result = r;                                              \\",
          "236:     req->path = NULL;                                             \\",
          "237:     req->errorno = uv_last_error(uv_default_loop()).code;         \\",
          "238:     After(req);                                                   \\",
          "239:   }                                                               \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "533a4552745d24ab61fb1e0b8617903f19557046",
      "candidate_info": {
        "commit_hash": "533a4552745d24ab61fb1e0b8617903f19557046",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/533a4552745d24ab61fb1e0b8617903f19557046",
        "files": [
          "src/node.cc",
          "src/node_extensions.h",
          "src/node_internals.h",
          "src/node_isolate.cc",
          "test/addons/shared-buffer/test.js",
          "test/simple/test-isolates.js"
        ],
        "message": "move isolate V8 functions out of node.cc",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_extensions.h||src/node_extensions.h",
          "src/node_internals.h||src/node_internals.h",
          "src/node_isolate.cc||src/node_isolate.cc",
          "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_isolate.h>",
          "25: #include <uv.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <node_internals.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: static void CheckStatus(uv_timer_t* watcher, int status);",
          "150: uv_loop_t* Loop() {",
          "151: #if defined(HAVE_ISOLATES) && HAVE_ISOLATES",
          "",
          "[Removed Lines]",
          "145: void StartThread(Isolate* isolate,",
          "146:                  int argc,",
          "147:                  char** argv);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1859: }",
          "1938: static Handle<Value> ProcessTitleGetter(Local<String> property,",
          "1939:                                         const AccessorInfo& info) {",
          "1940:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "1862: static void RunIsolate(void* arg) {",
          "1863:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "1864:   isolate->Enter();",
          "1865:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "1866:   isolate->Dispose();",
          "1867:   delete isolate;",
          "1868: }",
          "1871: static char magic_isolate_cookie_[] = \"magic isolate cookie\";",
          "1874: static Handle<Value> NewIsolate(const Arguments& args) {",
          "1875:   HandleScope scope;",
          "1877:   assert(args[0]->IsArray());",
          "1879:   Local<Array> argv = args[0].As<Array>();",
          "1880:   assert(argv->Length() >= 2);",
          "1884:   Isolate* isolate = new node::Isolate();",
          "1887:   isolate->argc_ = argv->Length();",
          "1888:   isolate->argv_ = new char*[isolate->argc_ + 1];",
          "1889:   for (int i = 0; i < isolate->argc_; ++i) {",
          "1890:     String::Utf8Value str(argv->Get(i));",
          "1891:     size_t size = 1 + strlen(*str);",
          "1892:     isolate->argv_[i] = new char[size];",
          "1893:     memcpy(isolate->argv_[i], *str, size);",
          "1894:   }",
          "1895:   isolate->argv_[isolate->argc_] = NULL;",
          "1897:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "1898:     delete isolate;",
          "1899:     return Null();",
          "1900:   }",
          "1902:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "1903:   tpl->SetInternalFieldCount(2);",
          "1905:   Local<Object> obj = tpl->NewInstance();",
          "1906:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1907:   obj->SetPointerInInternalField(1, isolate);",
          "1909:   return scope.Close(obj);",
          "1910: }",
          "1913: static Handle<Value> CountIsolate(const Arguments& args) {",
          "1914:   HandleScope scope;",
          "1915:   return scope.Close(Integer::New(Isolate::Count()));",
          "1916: }",
          "1919: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "1920:   HandleScope scope;",
          "1922:   assert(args[0]->IsObject());",
          "1924:   Local<Object> obj = args[0]->ToObject();",
          "1925:   assert(obj->InternalFieldCount() == 2);",
          "1926:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1928:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "1929:       obj->GetPointerFromInternalField(1));",
          "1931:   if (uv_thread_join(&ti->tid_))",
          "1932:     return False(); // error",
          "1933:   else",
          "1934:     return True();  // ok",
          "1935: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2207:   NODE_SET_METHOD(process, \"binding\", Binding);",
          "2213:   return process;",
          "2214: }",
          "",
          "[Removed Lines]",
          "2209:   NODE_SET_METHOD(process, \"_newIsolate\", NewIsolate);",
          "2210:   NODE_SET_METHOD(process, \"_countIsolate\", CountIsolate);",
          "2211:   NODE_SET_METHOD(process, \"_joinIsolate\", JoinIsolate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_extensions.h||src/node_extensions.h": [
          "File: src/node_extensions.h -> src/node_extensions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: NODE_EXT_LIST_ITEM(node_os)",
          "35: NODE_EXT_LIST_ITEM(node_zlib)",
          "38: NODE_EXT_LIST_ITEM(node_timer_wrap)",
          "39: NODE_EXT_LIST_ITEM(node_tcp_wrap)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #if defined(HAVE_ISOLATES) && HAVE_ISOLATES",
          "38: NODE_EXT_LIST_ITEM(node_isolates)",
          "39: #endif",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: namespace node {",
          "27: #ifndef offset_of",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: class Isolate;",
          "32: void StartThread(Isolate* isolate, int argc, char** argv);",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdlib.h>",
          "25: #include <string.h>",
          "26: #include <assert.h>",
          "30: namespace node {",
          "33: static volatile bool initialized;",
          "34: static volatile int id;",
          "",
          "[Removed Lines]",
          "22: #include \"node_isolate.h\"",
          "",
          "[Added Lines]",
          "22: #include <node.h>",
          "23: #include <node_isolate.h>",
          "24: #include <node_internals.h>",
          "25: #include <v8.h>",
          "34: using v8::Arguments;",
          "35: using v8::Array;",
          "36: using v8::False;",
          "37: using v8::Handle;",
          "38: using v8::HandleScope;",
          "39: using v8::Integer;",
          "40: using v8::Local;",
          "41: using v8::Null;",
          "42: using v8::Object;",
          "43: using v8::ObjectTemplate;",
          "44: using v8::String;",
          "45: using v8::True;",
          "46: using v8::Value;",
          "48: static char magic_isolate_cookie_[] = \"magic isolate cookie\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: }",
          "169: } // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: static void RunIsolate(void* arg) {",
          "188:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "189:   isolate->Enter();",
          "195:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "197:   isolate->Dispose();",
          "198:   delete isolate;",
          "199: }",
          "202: static Handle<Value> CreateIsolate(const Arguments& args) {",
          "203:   HandleScope scope;",
          "205:   assert(args[0]->IsArray());",
          "207:   Local<Array> argv = args[0].As<Array>();",
          "208:   assert(argv->Length() >= 2);",
          "212:   Isolate* isolate = new node::Isolate();",
          "215:   isolate->argc_ = argv->Length();",
          "216:   isolate->argv_ = new char*[isolate->argc_ + 1];",
          "217:   for (int i = 0; i < isolate->argc_; ++i) {",
          "218:     String::Utf8Value str(argv->Get(i));",
          "219:     size_t size = 1 + strlen(*str);",
          "220:     isolate->argv_[i] = new char[size];",
          "221:     memcpy(isolate->argv_[i], *str, size);",
          "222:   }",
          "223:   isolate->argv_[isolate->argc_] = NULL;",
          "225:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "226:     delete isolate;",
          "227:     return Null();",
          "228:   }",
          "231:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "232:   tpl->SetInternalFieldCount(2);",
          "234:   Local<Object> obj = tpl->NewInstance();",
          "235:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "236:   obj->SetPointerInInternalField(1, isolate);",
          "238:   return scope.Close(obj);",
          "239: }",
          "242: static Handle<Value> CountIsolate(const Arguments& args) {",
          "243:   HandleScope scope;",
          "244:   return scope.Close(Integer::New(Isolate::Count()));",
          "245: }",
          "248: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "249:   HandleScope scope;",
          "251:   assert(args[0]->IsObject());",
          "253:   Local<Object> obj = args[0]->ToObject();",
          "254:   assert(obj->InternalFieldCount() == 2);",
          "255:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "257:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "258:       obj->GetPointerFromInternalField(1));",
          "260:   if (uv_thread_join(&ti->tid_))",
          "261:     return False(); // error",
          "262:   else",
          "263:     return True();  // ok",
          "264: }",
          "267: void InitIsolates(Handle<Object> target) {",
          "268:   HandleScope scope;",
          "269:   NODE_SET_METHOD(target, \"create\", CreateIsolate);",
          "270:   NODE_SET_METHOD(target, \"count\", CountIsolate);",
          "271:   NODE_SET_METHOD(target, \"join\", JoinIsolate);",
          "272: }",
          "278: NODE_MODULE(node_isolates, node::InitIsolates)",
          "",
          "---------------"
        ],
        "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js": [
          "File: test/addons/shared-buffer/test.js -> test/addons/shared-buffer/test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var assert = require('assert');",
          "2: var binding = require('./out/Release/binding');",
          "4: console.log(\"binding.length =\", binding.length);",
          "6: if (process.tid === 1) {",
          "8:   for (var i = 0; i < binding.length; i++) {",
          "9:     console.log('parent',",
          "10:                 'binding.set(' + i + ', ' + i + ')',",
          "",
          "[Removed Lines]",
          "7:   var isolate = process._newIsolate(process.argv);",
          "",
          "[Added Lines]",
          "3: var isolates = process.binding('isolates');",
          "8:   var isolate = isolates.create(process.argv);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var fs = require('fs');",
          "2: var http = require('http');",
          "6: if (process.tid === 1) {",
          "9:   console.error(\"master\");",
          "10:   fs.stat(__dirname, function(err, stat) {",
          "",
          "[Removed Lines]",
          "4: console.log(\"count: %d\", process._countIsolate());",
          "7:   var isolate = process._newIsolate(process.argv);",
          "",
          "[Added Lines]",
          "3: var isolates = process.binding('isolates');",
          "5: console.log(\"count: %d\", isolates.count());",
          "8:   var isolate = isolates.create(process.argv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     });",
          "20:   }, 500);",
          "23: } else {",
          "24:   console.error(\"slave\");",
          "25:   fs.stat(__dirname, function(err, stat) {",
          "",
          "[Removed Lines]",
          "22:   console.log(\"thread 1 count: %d\", process._countIsolate());",
          "",
          "[Added Lines]",
          "23:   console.log(\"thread 1 count: %d\", isolates.count());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:     });",
          "35:   }, 500);",
          "38: }",
          "",
          "[Removed Lines]",
          "37:   console.error(\"thread 2 count: %d\", process._countIsolate());",
          "",
          "[Added Lines]",
          "38:   console.error(\"thread 2 count: %d\", isolates.count());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2728dcc95bfaf9a4a084159e6f615238700c2060",
      "candidate_info": {
        "commit_hash": "2728dcc95bfaf9a4a084159e6f615238700c2060",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2728dcc95bfaf9a4a084159e6f615238700c2060",
        "files": [
          "tools/license2rtf.js",
          "vcbuild.bat"
        ],
        "message": "Windows: add build step that generates license.rtf from LICENSE",
        "before_after_code_files": [
          "tools/license2rtf.js||tools/license2rtf.js",
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/license2rtf.js||tools/license2rtf.js": [
          "File: tools/license2rtf.js -> tools/license2rtf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var assert = require('assert'),",
          "3:     Stream = require('stream'),",
          "4:     inherits = require('util').inherits;",
          "10: function LineSplitter() {",
          "11:   var self = this,",
          "12:       buffer = \"\";",
          "14:   Stream.call(this);",
          "15:   this.writable = true;",
          "17:   this.write = function(data) {",
          "18:     var lines = (buffer + data).split(/\\r\\n|\\n\\r|\\n|\\r/);",
          "19:     for (var i = 0; i < lines.length - 1; i++) {",
          "20:       self.emit('data', lines[i]);",
          "21:     }",
          "22:     buffer = lines[lines.length - 1];",
          "23:     return true;",
          "24:   };",
          "26:   this.end = function(data) {",
          "27:     this.write(data || '');",
          "28:     if (buffer) {",
          "29:       self.emit('data', buffer);",
          "30:     }",
          "31:     self.emit('end');",
          "32:   };",
          "33: }",
          "34: inherits(LineSplitter, Stream);",
          "40: function ParagraphParser() {",
          "41:   var self = this,",
          "42:       block_is_license_block = false,",
          "43:       block_has_c_style_comment,",
          "44:       is_first_line_in_paragraph,",
          "45:       paragraph_line_indent,",
          "46:       paragraph;",
          "48:    Stream.call(this);",
          "49:    this.writable = true;",
          "51:    resetBlock(false);",
          "53:    this.write = function(data) {",
          "54:      parseLine(data + '');",
          "55:      return true;",
          "56:    };",
          "58:    this.end = function(data) {",
          "59:      if (data) {",
          "60:        parseLine(data + '');",
          "61:      }",
          "62:      flushParagraph();",
          "63:      self.emit('end');",
          "64:    };",
          "66:   function resetParagraph() {",
          "67:     is_first_line_in_paragraph = true;",
          "68:     paragraph_line_indent = -1;",
          "70:     paragraph = {",
          "71:       li: '',",
          "72:       in_license_block: block_is_license_block,",
          "73:       lines: []",
          "74:     };",
          "75:   }",
          "77:   function resetBlock(is_license_block) {",
          "78:     block_is_license_block = is_license_block;",
          "79:     block_has_c_style_comment = false;",
          "80:     resetParagraph();",
          "81:   }",
          "83:   function flushParagraph() {",
          "84:     if (paragraph.lines.length || paragraph.li) {",
          "85:       self.emit('data', paragraph);",
          "86:     }",
          "87:     resetParagraph();",
          "88:   }",
          "90:   function parseLine(line) {",
          "92:     line = line.replace(/\\s*$/, '');",
          "95:     if (/^\\s*(=|\"){3,}\\s*$/.test(line)) {",
          "96:       flushParagraph();",
          "97:       resetBlock(!block_is_license_block);",
          "98:       return;",
          "99:     }",
          "102:     if (block_is_license_block) {",
          "103:       if (!block_has_c_style_comment)",
          "104:         block_has_c_style_comment = /^\\s*(\\/\\*)/.test(line);",
          "105:       if (block_has_c_style_comment) {",
          "106:         var prev = line;",
          "107:         line = line.replace(/^(\\s*?)(?:\\s?\\*\\/|\\/\\*\\s|\\s\\*\\s?)/, '$1');",
          "108:         if (prev == line)",
          "109:           line = line.replace(/^\\s{2}/, '');",
          "110:         if (/\\*\\//.test(prev))",
          "111:           block_has_c_style_comment = false;",
          "112:       } else {",
          "114:         line = line.replace(/^(\\s*)(?:\\/\\/\\s?|#\\s?)/, '$1');",
          "115:       }",
          "116:     }",
          "119:     if (!/\\S/.test(line)) {",
          "120:       flushParagraph();",
          "121:       return;",
          "122:     }",
          "126:     if (/^\\s*[=*\\-]{5,}\\s*$/.test(line)) {",
          "127:       flushParagraph();",
          "128:       return;",
          "129:     }",
          "132:     var result = /^(\\s*)(\\d+\\.|\\*|-)?\\s*/.exec(line);",
          "133:     assert.ok(result);",
          "136:     var line_strip_length = result[0].length;",
          "139:     var line_indent = Math.floor(result[0].length / 2) * 2;",
          "141:     var level = Math.floor(result[1].length / 2);",
          "143:     var line_li = result[2];",
          "146:     if (line_li || (line_indent != paragraph_line_indent &&",
          "147:                     paragraph_line_indent != -1)) {",
          "148:       flushParagraph();",
          "149:       paragraph.li = line_li;",
          "150:     }",
          "155:     if (!line_li && paragraph_line_indent != -1) {",
          "156:       paragraph_line_indent = line_indent;",
          "157:     }",
          "160:     if (paragraph.level === undefined)",
          "161:       paragraph.level = level;",
          "164:     line = line.slice(line_strip_length);",
          "166:     if (line)",
          "167:       paragraph.lines.push(line);",
          "169:     is_first_line_in_paragraph = false;",
          "170:   }",
          "171: }",
          "172: inherits(ParagraphParser, Stream);",
          "179: function Unwrapper() {",
          "180:   var self = this;",
          "182:   Stream.call(this);",
          "183:   this.writable = true;",
          "185:   this.write = function(paragraph) {",
          "186:     var lines = paragraph.lines,",
          "187:         break_after = [],",
          "188:         i;",
          "190:     for (i = 0; i < lines.length - 1; i++) {",
          "191:       var line = lines[i];",
          "195:       if (line.length < 50)  {",
          "198:         var next_first_word_length = lines[i + 1].replace(/\\s.*$/, '').length;",
          "199:         if (line.length + next_first_word_length < 60) {",
          "200:           break_after[i] = true;",
          "201:         }",
          "202:       }",
          "203:     }",
          "205:     for (i = 0; i < lines.length - 1; ) {",
          "206:       if (!break_after[i]) {",
          "207:         lines[i] += ' ' + lines.splice(i + 1, 1)[0];",
          "208:       } else {",
          "209:         i++;",
          "210:       }",
          "211:     }",
          "213:     self.emit('data', paragraph);",
          "214:   };",
          "216:   this.end = function(data) {",
          "217:     if (data)",
          "218:       self.write(data);",
          "219:     self.emit('end');",
          "220:   };",
          "221: }",
          "222: inherits(Unwrapper, Stream);",
          "228: function RtfGenerator() {",
          "229:   var self = this,",
          "230:       did_write_anything = false;",
          "232:   Stream.call(this);",
          "233:   this.writable = true;",
          "235:   this.write = function(paragraph) {",
          "236:     if (!did_write_anything) {",
          "237:       emitHeader();",
          "238:       did_write_anything = true;",
          "239:     }",
          "241:     var li = paragraph.li,",
          "242:         level = paragraph.level + (li ? 1 : 0),",
          "243:         lic = paragraph.in_license_block;",
          "245:     var rtf = \"\\\\pard\";",
          "246:     rtf += '\\\\sa150\\\\sl300\\\\slmult1';",
          "247:     if (level > 0)",
          "248:       rtf += '\\\\li' + (level * 240);",
          "249:     if (li) {",
          "250:       rtf += '\\\\tx' + (level) * 240;",
          "251:       rtf += '\\\\fi-240';",
          "252:     }",
          "253:     if (lic)",
          "254:       rtf += '\\\\ri240';",
          "255:     if (!lic)",
          "256:       rtf += '\\\\b';",
          "257:     if (li)",
          "258:       rtf += ' ' + li + '\\\\tab';",
          "259:     rtf += ' ';",
          "260:     rtf += paragraph.lines.map(rtfEscape).join('\\\\line ');",
          "261:     if (!lic)",
          "262:       rtf += '\\\\b0';",
          "263:     rtf += '\\\\par\\n';",
          "265:     self.emit('data', rtf);",
          "266:   };",
          "268:   this.end = function(data) {",
          "269:     if (data)",
          "270:       self.write(data);",
          "271:     if (did_write_anything)",
          "272:       emitFooter();",
          "273:     self.emit('end');",
          "274:   };",
          "276:   function toHex(number, length) {",
          "277:     var hex = (~~number).toString(16);",
          "278:     while (hex.length < length)",
          "279:       hex = '0' + hex;",
          "280:     return hex;",
          "281:   }",
          "283:   function rtfEscape(string) {",
          "284:     return string",
          "285:       .replace(/[\\\\\\{\\}]/g, function(m) {",
          "286:        return '\\\\' + m;",
          "287:       })",
          "288:       .replace(/\\t/g, function() {",
          "289:         return '\\\\tab ';",
          "290:       })",
          "291:       .replace(/[\\x00-\\x1f\\x7f-\\xff]/g, function(m) {",
          "292:         return '\\\\\\'' + toHex(m.charCodeAt(0), 2);",
          "293:       })",
          "294:       .replace(/\\ufeff/g, '')",
          "295:       .replace(/[\\u0100-\\uffff]/g, function(m) {",
          "296:         return '\\\\u' + toHex(m.charCodeAt(0), 4) + '?';",
          "297:      });",
          "298:   }",
          "300:   function emitHeader() {",
          "301:     self.emit('data', '{\\\\rtf1\\\\ansi\\\\ansicpg1252\\\\uc1\\\\deff0\\\\deflang1033' +",
          "302:                       '{\\\\fonttbl{\\\\f0\\\\fswiss\\\\fcharset0 Tahoma;}}\\\\fs20\\n' +",
          "303:                       '{\\\\*\\\\generator txt2rtf 0.0.1;}\\n');",
          "304:   }",
          "306:   function emitFooter() {",
          "307:     self.emit('data', '}');",
          "308:   }",
          "309: }",
          "310: inherits(RtfGenerator, Stream);",
          "313: var stdin = process.stdin,",
          "314:     stdout = process.stdout,",
          "315:     line_splitter = new LineSplitter(),",
          "316:     paragraph_parser = new ParagraphParser(),",
          "317:     unwrapper = new Unwrapper(),",
          "318:     rtf_generator = new RtfGenerator();",
          "320: stdin.setEncoding('utf-8');",
          "321: stdin.resume();",
          "323: stdin.pipe(line_splitter);",
          "324: line_splitter.pipe(paragraph_parser);",
          "325: paragraph_parser.pipe(unwrapper);",
          "326: unwrapper.pipe(rtf_generator);",
          "327: rtf_generator.pipe(stdout);",
          "",
          "---------------"
        ],
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: set test=",
          "25: set test_args=",
          "26: set msi=",
          "27: set upload=",
          "28: set jslint=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: set licensertf=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: if /i \"%1\"==\"nobuild\"       set nobuild=1&goto arg-ok",
          "40: if /i \"%1\"==\"nosign\"        set nosign=1&goto arg-ok",
          "41: if /i \"%1\"==\"nosnapshot\"    set nosnapshot=1&goto arg-ok",
          "42: if /i \"%1\"==\"test-uv\"       set test=test-uv&goto arg-ok",
          "43: if /i \"%1\"==\"test-internet\" set test=test-internet&goto arg-ok",
          "44: if /i \"%1\"==\"test-pummel\"   set test=test-pummel&goto arg-ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: if /i \"%1\"==\"licensertf\"    set licensertf=1&goto arg-ok",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46: if /i \"%1\"==\"test-message\"  set test=test-message&goto arg-ok",
          "47: if /i \"%1\"==\"test-all\"      set test=test-all&goto arg-ok",
          "48: if /i \"%1\"==\"test\"          set test=test&goto arg-ok",
          "50: if /i \"%1\"==\"upload\"        set upload=1&goto arg-ok",
          "51: if /i \"%1\"==\"jslint\"        set jslint=1&goto arg-ok",
          "",
          "[Removed Lines]",
          "49: if /i \"%1\"==\"msi\"           set msi=1&goto arg-ok",
          "",
          "[Added Lines]",
          "51: if /i \"%1\"==\"msi\"           set msi=1&set licensertf=1&goto arg-ok",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: :msbuild",
          "76: @rem Skip project generation if requested.",
          "79: @rem Bail out early if not running in VS build env.",
          "80: if defined VCINSTALLDIR goto msbuild-found",
          "",
          "[Removed Lines]",
          "77: if defined nobuild goto msi",
          "",
          "[Added Lines]",
          "79: if defined nobuild goto sign",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93: msbuild node.sln /m /t:%target% /p:Configuration=%config% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "94: if errorlevel 1 goto exit",
          "97: signtool sign /a Release\\node.exe",
          "99: :msi",
          "100: @rem Skip msi generation if not requested",
          "101: if not defined msi goto run",
          "",
          "[Removed Lines]",
          "96: if defined nosign goto msi",
          "",
          "[Added Lines]",
          "98: :sign",
          "99: @rem Skip signing if the `nosign` option was specified.",
          "100: if defined nosign goto licensertf",
          "104: :licensertf",
          "105: @rem Skip license.rtf generation if not requested.",
          "106: if not defined licensertf goto msi",
          "108: %config%\\node tools\\license2rtf.js < LICENSE > %config%\\license.rtf",
          "109: if errorlevel 1 echo Failed to generate license.rtf&goto exit",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a848a3efbfeb70181a95383e022474fdf2c83aae",
      "candidate_info": {
        "commit_hash": "a848a3efbfeb70181a95383e022474fdf2c83aae",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a848a3efbfeb70181a95383e022474fdf2c83aae",
        "files": [
          "lib/net.js",
          "test/simple/test-net-after-close.js"
        ],
        "message": "net: fix Socket.pause null reference when called on a closed Stream\n\nFixes #1980.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-after-close.js||test/simple/test-net-after-close.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: Socket.prototype.address = function() {",
          "170: };",
          "",
          "[Removed Lines]",
          "169:   return this._handle.getsockname();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: Object.defineProperty(Socket.prototype, 'bufferSize', {",
          "191:   get: function() {",
          "193:   }",
          "194: });",
          "",
          "[Removed Lines]",
          "192:     return this._handle.writeQueueSize + this._connectQueueSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-after-close.js||test/simple/test-net-after-close.js": [
          "File: test/simple/test-net-after-close.js -> test/simple/test-net-after-close.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "25: var closed = false;",
          "27: var server = net.createServer(function(s) {",
          "28:   s.end();",
          "29: });",
          "31: server.listen(common.PORT, function() {",
          "32:   var c = net.createConnection(common.PORT);",
          "33:   c.on('close', function() {",
          "34:     assert.strictEqual(c._handle, null);",
          "35:     closed = true;",
          "36:     assert.doesNotThrow(function() {",
          "37:       c.setNoDelay();",
          "38:       c.setKeepAlive();",
          "39:       c.bufferSize;",
          "40:       c.pause();",
          "41:       c.resume();",
          "42:       c.address();",
          "43:       c.remoteAddress;",
          "44:       c.remotePort;",
          "45:     });",
          "46:     server.close();",
          "47:   });",
          "48: });",
          "50: process.on('exit', function() {",
          "51:   assert(closed);",
          "52: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06e1002c893deb1c705586193120dd606e264b0",
      "candidate_info": {
        "commit_hash": "c06e1002c893deb1c705586193120dd606e264b0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c06e1002c893deb1c705586193120dd606e264b0",
        "files": [
          "test/simple/test-child-process-exec-error.js"
        ],
        "message": "windows: make test-child-process-exec-error pass",
        "before_after_code_files": [
          "test/simple/test-child-process-exec-error.js||test/simple/test-child-process-exec-error.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-exec-error.js||test/simple/test-child-process-exec-error.js": [
          "File: test/simple/test-child-process-exec-error.js -> test/simple/test-child-process-exec-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   });",
          "37: }",
          "40: test(child_process.execFile, 'ENOENT');",
          "",
          "[Removed Lines]",
          "39: test(child_process.exec, 127); // exit code of /bin/sh or cmd.exe",
          "",
          "[Added Lines]",
          "39: if (process.platform === 'win32') {",
          "40:   test(child_process.exec, 1); // exit code of cmd.exe",
          "41: } else {",
          "42:   test(child_process.exec, 127); // exit code of /bin/sh",
          "43: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}