{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef7d5187a74fdddee3dabfaddebaf63ca316aac7",
      "candidate_info": {
        "commit_hash": "ef7d5187a74fdddee3dabfaddebaf63ca316aac7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef7d5187a74fdddee3dabfaddebaf63ca316aac7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "test/round1.test"
        ],
        "message": "Improved rounding even on systems with an 8-byte \"long double\" type.\n\nFossilOrigin-Name: 15202aee150fa8e15fb90e90e5765c5e19a1eaf4896da2996a747636b76da8e6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "test/round1.test||test/round1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81721aa54587e20d031d528fb6b74d91671a6e950fa926dc63f4284466e70f0e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:         rounder = arRound[idx%10];",
          "528:         while( idx>=10 ){ rounder *= 1.0e-10; idx -= 10; }",
          "529:         if( xtype==etFLOAT ){",
          "531:           realvalue += rounder;",
          "532:         }",
          "",
          "[Removed Lines]",
          "530:           if( precision<17) rounder += realvalue*2.0e-16;",
          "",
          "[Added Lines]",
          "530:           double rx = (double)realvalue;",
          "531:           sqlite3_uint64 u;",
          "532:           int ex;",
          "533:           memcpy(&u, &rx, sizeof(u));",
          "534:           ex = -1023 + (int)((u>>52)&0x7ff);",
          "535:           if( precision+(ex/3) < 15 ) rounder += realvalue*3e-16;",
          "",
          "---------------"
        ],
        "test/round1.test||test/round1.test": [
          "File: test/round1.test -> test/round1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix round1",
          "23: expr srand(0)",
          "24: unset -nocomplain iTest",
          "26:    set x1 [expr int(rand()*100000)]",
          "27:    set x2 [expr int(rand()*100000)+1000*int(rand()*10000)]",
          "28:    set n [expr int(rand()*8)+1]",
          "",
          "[Removed Lines]",
          "18: if {$::longdouble_size<=8} {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "25: for {set iTest 1} {$iTest<=10000} {incr iTest} {",
          "",
          "[Added Lines]",
          "20: for {set iTest 1} {$iTest<=50000} {incr iTest} {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
      "candidate_info": {
        "commit_hash": "ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 49073b7003330027303c4c776e9f85112f8b99b89f848fec3f953eba501d7505",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 322eca7f6ad2234059669015aabb773a790e8bc3da95431c9c851ff5342c969b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
      "candidate_info": {
        "commit_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select6.test"
        ],
        "message": "Fix the query flattener optimization so that it preserve the \"SF_Compound\" bit when flattening a compound subquery into a non-compound outer query. Failure to preserve that bit could allow subsequent flattenings which are not valid. Fix for ticket [c41afac34f15781fe09cd].\n\nFossilOrigin-Name: 523b42371122d9e1b3185425745f1490138bff7f7cc941ee26ee81df7ade5bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select6.test||test/select6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c736c40aab071a69bd5c5347b7c116d87ea3954019e967ca8ff7bdb4b518e5bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4045:       substSelect(&x, pParent, 0);",
          "4046:     }",
          "",
          "[Removed Lines]",
          "4051:     pParent->selFlags |= pSub->selFlags & SF_Distinct;",
          "",
          "[Added Lines]",
          "4050:     pParent->selFlags |= pSub->selFlags & SF_Compound;",
          "",
          "---------------"
        ],
        "test/select6.test||test/select6.test": [
          "File: test/select6.test -> test/select6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing SELECT statements that contain",
          "13: # subqueries in their FROM clause.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: select6.test,v 1.29 2009/01/09 01:12:28 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:     FROM ( SELECT count(*) AS cnt FROM t1 );",
          "614: } {{}}",
          "617: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: # 2019-05-29 ticket https://www.sqlite.org/src/info/c41afac34f15781f",
          "616: # A LIMIT clause in a subquery is incorrectly applied to a subquery.",
          "617: #",
          "618: do_execsql_test 12.100 {",
          "619:   DROP TABLE t1;",
          "620:   DROP TABLE t2;",
          "621:   CREATE TABLE t1(a);",
          "622:   INSERT INTO t1 VALUES(1);",
          "623:   INSERT INTO t1 VALUES(2);",
          "624:   CREATE TABLE t2(b);",
          "625:   INSERT INTO t2 VALUES(3);",
          "626:   SELECT * FROM (",
          "627:     SELECT * FROM (SELECT * FROM t1 LIMIT 1)",
          "628:     UNION ALL",
          "629:     SELECT * from t2);",
          "630: } {1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
      "candidate_info": {
        "commit_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "\"STORED\" is not actually a keyword.  The parser looks for STORED as an ordinary identifier.\n\nFossilOrigin-Name: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "225: %endif",
          "226:   REINDEX RENAME CTIME_KW IF",
          "227:   .",
          "",
          "[Removed Lines]",
          "224:   GENERATED ALWAYS STORED",
          "",
          "[Added Lines]",
          "224:   GENERATED ALWAYS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17180fca9d46d95c9572edcc17409827e057260c",
      "candidate_info": {
        "commit_hash": "17180fca9d46d95c9572edcc17409827e057260c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17180fca9d46d95c9572edcc17409827e057260c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Improved optimization of the AND and OR operators.\n\nFossilOrigin-Name: 0fbd154eb419b57b9c064c1f47346835d6324388b966b73f8a0122de065f08b1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a2ead8aa4517b63cda7bf84464326e9cb5e228224caa603568c0e04ea44e6588",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1808:   return pExpr->u.zToken[4]==0;",
          "1809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1824: Expr *sqlite3ExprSimplifiedAndOr(Expr *pExpr){",
          "1825:   assert( pExpr!=0 );",
          "1826:   if( pExpr->op==TK_AND || pExpr->op==TK_OR ){",
          "1827:     Expr *pRight = sqlite3ExprSimplifiedAndOr(pExpr->pRight);",
          "1828:     Expr *pLeft = sqlite3ExprSimplifiedAndOr(pExpr->pLeft);",
          "1829:     if( ExprAlwaysTrue(pLeft) || ExprAlwaysFalse(pRight) ){",
          "1830:       pExpr = pExpr->op==TK_AND ? pRight : pLeft;",
          "1831:     }else if( ExprAlwaysTrue(pRight) || ExprAlwaysFalse(pLeft) ){",
          "1832:       pExpr = pExpr->op==TK_AND ? pLeft : pRight;",
          "1833:     }",
          "1834:   }",
          "1835:   return pExpr;",
          "1836: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4400:   op = pExpr->op;",
          "4401:   switch( op ){",
          "4410:     case TK_OR: {",
          "4414:       break;",
          "4415:     }",
          "4416:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "4402:     case TK_AND: {",
          "4403:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4404:       testcase( jumpIfNull==0 );",
          "4405:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4406:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4407:       sqlite3VdbeResolveLabel(v, d2);",
          "4408:       break;",
          "4409:     }",
          "4411:       testcase( jumpIfNull==0 );",
          "4412:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4413:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4429:     case TK_AND:",
          "4431:       Expr *pAlt = sqlite3ExprSimplifiedAndOr(pExpr);",
          "4432:       if( pAlt!=pExpr ){",
          "4433:         sqlite3ExprIfTrue(pParse, pAlt, dest, jumpIfNull);",
          "4434:       }else if( op==TK_AND ){",
          "4435:         int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4436:         testcase( jumpIfNull==0 );",
          "4437:         sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,",
          "4438:                            jumpIfNull^SQLITE_JUMPIFNULL);",
          "4439:         sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4440:         sqlite3VdbeResolveLabel(v, d2);",
          "4441:       }else{",
          "4442:         testcase( jumpIfNull==0 );",
          "4443:         sqlite3ExprIfTrue(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4444:         sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4445:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4566:   assert( pExpr->op!=TK_GE || op==OP_Lt );",
          "4568:   switch( pExpr->op ){",
          "4575:     case TK_OR: {",
          "4581:       break;",
          "4582:     }",
          "4583:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "4569:     case TK_AND: {",
          "4570:       testcase( jumpIfNull==0 );",
          "4571:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4572:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4573:       break;",
          "4574:     }",
          "4576:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4577:       testcase( jumpIfNull==0 );",
          "4578:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4579:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4580:       sqlite3VdbeResolveLabel(v, d2);",
          "",
          "[Added Lines]",
          "4601:     case TK_AND:",
          "4603:       Expr *pAlt = sqlite3ExprSimplifiedAndOr(pExpr);",
          "4604:       if( pAlt!=pExpr ){",
          "4605:         sqlite3ExprIfFalse(pParse, pAlt, dest, jumpIfNull);",
          "4606:       }else if( pExpr->op==TK_AND ){",
          "4607:         testcase( jumpIfNull==0 );",
          "4608:         sqlite3ExprIfFalse(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4609:         sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4610:       }else{",
          "4611:         int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4612:         testcase( jumpIfNull==0 );",
          "4613:         sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2,",
          "4614:                           jumpIfNull^SQLITE_JUMPIFNULL);",
          "4615:         sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4616:         sqlite3VdbeResolveLabel(v, d2);",
          "4617:       }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3859: Expr *sqlite3PExpr(Parse*, int, Expr*, Expr*);",
          "3860: void sqlite3PExprAddSelect(Parse*, Expr*, Select*);",
          "3861: Expr *sqlite3ExprAnd(Parse*,Expr*, Expr*);",
          "3862: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3863: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3864: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3862: Expr *sqlite3ExprSimplifiedAndOr(Expr*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}