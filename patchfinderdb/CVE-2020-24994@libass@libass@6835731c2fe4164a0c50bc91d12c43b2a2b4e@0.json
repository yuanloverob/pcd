{
  "cve_id": "CVE-2020-24994",
  "cve_desc": "Stack overflow in the parse_tag function in libass/ass_parse.c in libass before 0.15.0 allows remote attackers to cause a denial of service or remote code execution via a crafted file.",
  "repo": "libass/libass",
  "patch_hash": "6835731c2fe4164a0c50bc91d12c43b2a2b4e799",
  "patch_info": {
    "commit_hash": "6835731c2fe4164a0c50bc91d12c43b2a2b4e799",
    "repo": "libass/libass",
    "commit_url": "https://github.com/libass/libass/commit/6835731c2fe4164a0c50bc91d12c43b2a2b4e",
    "files": [
      "Changelog",
      "libass/ass_parse.c"
    ],
    "message": "parse_tags: don't recurse for nested \\t()\n\nThis fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4892\n(stack overflow on deeply nested \\t()).\n\nThis is possible because parentheses do not nest and the first ')'\nterminates the whole tag. Thus something like \\t(\\t(\\t(\\t(\\t() can be\nread in a simple loop with no recursion required. Recursion is also\nnot required if the ')' is missing entirely and the outermost \\t(...\nnever ends.\n\nSee https://github.com/libass/libass/pull/296 for more backstory.",
    "before_after_code_files": [
      "libass/ass_parse.c||libass/ass_parse.c"
    ]
  },
  "patch_diff": {
    "libass/ass_parse.c||libass/ass_parse.c": [
      "File: libass/ass_parse.c -> libass/ass_parse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "650:                 k = pow(((double) (t - t1)) / delta_t, accel);",
      "651:             }",
      "652:             p = args[cnt].start;",
      "654:         } else if (complex_tag(\"clip\")) {",
      "655:             if (nargs == 4) {",
      "656:                 int x0, y0, x1, y1;",
      "",
      "[Removed Lines]",
      "653:             p = parse_tags(render_priv, p, args[cnt].end, k);    // maybe k*pwr ? no, specs forbid nested \\t's",
      "",
      "[Added Lines]",
      "653:             if (args[cnt].end < end) {",
      "654:                 p = parse_tags(render_priv, p, args[cnt].end, k);",
      "655:             } else {",
      "656:                 assert(q == end);",
      "661:                 pwr = k;",
      "662:                 q = p;",
      "663:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14586a1b2f3ae784ee2f29957b4d01207cc6c2a0",
      "candidate_info": {
        "commit_hash": "14586a1b2f3ae784ee2f29957b4d01207cc6c2a0",
        "repo": "libass/libass",
        "commit_url": "https://github.com/libass/libass/commit/14586a1b2f3ae784ee2f29957b4d01207cc6c2a0",
        "files": [
          "libass/ass.c",
          "libass/ass_parse.c",
          "libass/ass_utils.c",
          "libass/ass_utils.h"
        ],
        "message": "Reuse numpad2align in parse_tag",
        "before_after_code_files": [
          "libass/ass.c||libass/ass.c",
          "libass/ass_parse.c||libass/ass_parse.c",
          "libass/ass_utils.c||libass/ass_utils.c",
          "libass/ass_utils.h||libass/ass_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libass/ass_parse.c||libass/ass_parse.c"
          ],
          "candidate": [
            "libass/ass_parse.c||libass/ass_parse.c"
          ]
        }
      },
      "candidate_diff": {
        "libass/ass.c||libass/ass.c": [
          "File: libass/ass.c -> libass/ass.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <string.h>",
          "25: #include <assert.h>",
          "26: #include <errno.h>",
          "28: #include <sys/types.h>",
          "29: #include <sys/stat.h>",
          "30: #include <inttypes.h>",
          "",
          "[Removed Lines]",
          "27: #include <limits.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     return tm;",
          "238: }",
          "262: #define NEXT(str,token) \\",
          "263:  token = next_token(&str); \\",
          "264:  if (!token) break;",
          "",
          "[Removed Lines]",
          "243: static int numpad2align(int val)",
          "244: {",
          "245:     if (val < -INT_MAX)",
          "248:         val = 2;",
          "249:     else if (val < 0)",
          "250:         val = -val;",
          "252:     int res = ((val - 1) % 3) + 1;  // horizontal alignment",
          "253:     if (val <= 3)",
          "254:         res |= VALIGN_SUB;",
          "255:     else if (val <= 6)",
          "256:         res |= VALIGN_CENTER;",
          "257:     else",
          "258:         res |= VALIGN_TOP;",
          "259:     return res;",
          "260: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libass/ass_parse.c||libass/ass_parse.c": [
          "File: libass/ass_parse.c -> libass/ass_parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     } else if (tag(\"an\")) {",
          "567:         int val = argtoi(*args);",
          "568:         if ((render_priv->state.parsed_tags & PARSED_A) == 0) {",
          "577:                 render_priv->state.alignment =",
          "578:                     render_priv->state.style->Alignment;",
          "579:             render_priv->state.parsed_tags |= PARSED_A;",
          "",
          "[Removed Lines]",
          "569:             if (val >= 1 && val <= 9) {",
          "570:                 int v = (val - 1) / 3;      // 0, 1 or 2 for vertical alignment",
          "571:                 if (v != 0)",
          "572:                     v = 3 - v;",
          "573:                 val = ((val - 1) % 3) + 1;  // horizontal alignment",
          "574:                 val += v * 4;",
          "575:                 render_priv->state.alignment = val;",
          "576:             } else",
          "",
          "[Added Lines]",
          "569:             if (val >= 1 && val <= 9)",
          "570:                 render_priv->state.alignment = numpad2align(val);",
          "571:             else",
          "",
          "---------------"
        ],
        "libass/ass_utils.c||libass/ass_utils.c": [
          "File: libass/ass_utils.c -> libass/ass_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdlib.h>",
          "24: #include <stdio.h>",
          "25: #include <stdint.h>",
          "26: #include <inttypes.h>",
          "28: #include \"ass_library.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:     return YCBCR_UNKNOWN;",
          "328: }",
          "330: void ass_msg(ASS_Library *priv, int lvl, const char *fmt, ...)",
          "331: {",
          "332:     va_list va;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: int numpad2align(int val)",
          "335: {",
          "336:     if (val < -INT_MAX)",
          "339:         val = 2;",
          "340:     else if (val < 0)",
          "341:         val = -val;",
          "343:     int res = ((val - 1) % 3) + 1;  // horizontal alignment",
          "344:     if (val <= 3)",
          "345:         res |= VALIGN_SUB;",
          "346:     else if (val <= 6)",
          "347:         res |= VALIGN_CENTER;",
          "348:     else",
          "349:         res |= VALIGN_TOP;",
          "350:     return res;",
          "351: }",
          "",
          "---------------"
        ],
        "libass/ass_utils.h||libass/ass_utils.h": [
          "File: libass/ass_utils.h -> libass/ass_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: uint32_t parse_color_header(char *str);",
          "88: char parse_bool(char *str);",
          "89: int parse_ycbcr_matrix(char *str);",
          "90: unsigned ass_utf8_get_char(char **str);",
          "91: unsigned ass_utf8_put_char(char *dest, uint32_t ch);",
          "92: void ass_utf16be_to_utf8(char *dst, size_t dst_size, uint8_t *src, size_t src_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: int numpad2align(int val);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "691b422247552a86e9d3310c4f1ea096dc52a3f2",
      "candidate_info": {
        "commit_hash": "691b422247552a86e9d3310c4f1ea096dc52a3f2",
        "repo": "libass/libass",
        "commit_url": "https://github.com/libass/libass/commit/691b422247552a86e9d3310c4f1ea096dc52a3f2",
        "files": [
          "libass/ass_parse.c",
          "libass/ass_parse.h",
          "libass/ass_render.c"
        ],
        "message": "Move parse_tag loop into parse_tag itself, now called parse_tags\n\nThis commit is mostly transparent to `git blame -w`.",
        "before_after_code_files": [
          "libass/ass_parse.c||libass/ass_parse.c",
          "libass/ass_parse.h||libass/ass_parse.h",
          "libass/ass_render.c||libass/ass_render.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libass/ass_parse.c||libass/ass_parse.c"
          ],
          "candidate": [
            "libass/ass_parse.c||libass/ass_parse.c"
          ]
        }
      },
      "candidate_diff": {
        "libass/ass_parse.c||libass/ass_parse.c": [
          "File: libass/ass_parse.c -> libass/ass_parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: }",
          "234: {",
          "236:         ++p;",
          "285:                 if (q != end)",
          "288:             }",
          "289:         }",
          "292: #define tag(name) (mystrcmp(&p, (name)) && (push_arg(args, &nargs, p, name_end), 1))",
          "293: #define complex_tag(name) mystrcmp(&p, (name))",
          "449:                 }",
          "450:             }",
          "470:             render_priv->state.detect_collisions = 0;",
          "535:             else",
          "547:             else",
          "746:             val = (val < 0) ? 0 : val;",
          "838:     }",
          "841: }",
          "843: void apply_transition_effects(ASS_Renderer *render_priv, ASS_Event *event)",
          "",
          "[Removed Lines]",
          "233: char *parse_tag(ASS_Renderer *render_priv, char *p, char *end, double pwr)",
          "235:     while (*p != '\\\\' && p != end)",
          "237:     if (*p != '\\\\')",
          "238:         return p;",
          "239:     ++p;",
          "240:     if (p != end)",
          "241:         skip_spaces(&p);",
          "243:     char *q = p;",
          "244:     while (*q != '(' && *q != '\\\\' && q != end)",
          "245:         ++q;",
          "246:     if (q == p)",
          "247:         return q;",
          "249:     char *name_end = q;",
          "252:     struct arg args[MAX_VALID_NARGS + 1];",
          "253:     int nargs = 0;",
          "254:     for (int i = 0; i <= MAX_VALID_NARGS; ++i)",
          "255:         args[i].start = args[i].end = \"\";",
          "259:     if (*q == '(') {",
          "260:         ++q;",
          "261:         while (1) {",
          "262:             if (q != end)",
          "263:                 skip_spaces(&q);",
          "270:             char *r = q;",
          "271:             while (*r != ',' && *r != '\\\\' && *r != ')' && r != end)",
          "272:                 ++r;",
          "274:             if (*r == ',') {",
          "275:                 push_arg(args, &nargs, q, r);",
          "276:                 q = r + 1;",
          "277:             } else {",
          "280:                 while (*r != ')' && r != end)",
          "281:                     ++r;",
          "282:                 push_arg(args, &nargs, q, r);",
          "283:                 q = r;",
          "286:                     ++q;",
          "287:                 break;",
          "290:     }",
          "296:     if (tag(\"xbord\")) {",
          "297:         double val;",
          "298:         if (nargs) {",
          "299:             val = argtod(*args);",
          "300:             val = render_priv->state.border_x * (1 - pwr) + val * pwr;",
          "301:             val = (val < 0) ? 0 : val;",
          "302:         } else",
          "303:             val = render_priv->state.style->Outline;",
          "304:         render_priv->state.border_x = val;",
          "305:     } else if (tag(\"ybord\")) {",
          "306:         double val;",
          "307:         if (nargs) {",
          "308:             val = argtod(*args);",
          "309:             val = render_priv->state.border_y * (1 - pwr) + val * pwr;",
          "310:             val = (val < 0) ? 0 : val;",
          "311:         } else",
          "312:             val = render_priv->state.style->Outline;",
          "313:         render_priv->state.border_y = val;",
          "314:     } else if (tag(\"xshad\")) {",
          "315:         double val;",
          "316:         if (nargs) {",
          "317:             val = argtod(*args);",
          "318:             val = render_priv->state.shadow_x * (1 - pwr) + val * pwr;",
          "319:         } else",
          "320:             val = render_priv->state.style->Shadow;",
          "321:         render_priv->state.shadow_x = val;",
          "322:     } else if (tag(\"yshad\")) {",
          "323:         double val;",
          "324:         if (nargs) {",
          "325:             val = argtod(*args);",
          "326:             val = render_priv->state.shadow_y * (1 - pwr) + val * pwr;",
          "327:         } else",
          "328:             val = render_priv->state.style->Shadow;",
          "329:         render_priv->state.shadow_y = val;",
          "330:     } else if (tag(\"fax\")) {",
          "331:         double val;",
          "332:         if (nargs) {",
          "333:             val = argtod(*args);",
          "334:             render_priv->state.fax =",
          "335:                 val * pwr + render_priv->state.fax * (1 - pwr);",
          "336:         } else",
          "337:             render_priv->state.fax = 0.;",
          "338:     } else if (tag(\"fay\")) {",
          "339:         double val;",
          "340:         if (nargs) {",
          "341:             val = argtod(*args);",
          "342:             render_priv->state.fay =",
          "343:                 val * pwr + render_priv->state.fay * (1 - pwr);",
          "344:         } else",
          "345:             render_priv->state.fay = 0.;",
          "346:     } else if (complex_tag(\"iclip\")) {",
          "347:         if (nargs == 4) {",
          "348:             int x0, y0, x1, y1;",
          "349:             x0 = argtoi(args[0]);",
          "350:             y0 = argtoi(args[1]);",
          "351:             x1 = argtoi(args[2]);",
          "352:             y1 = argtoi(args[3]);",
          "353:             render_priv->state.clip_x0 =",
          "354:                 render_priv->state.clip_x0 * (1 - pwr) + x0 * pwr;",
          "355:             render_priv->state.clip_x1 =",
          "356:                 render_priv->state.clip_x1 * (1 - pwr) + x1 * pwr;",
          "357:             render_priv->state.clip_y0 =",
          "358:                 render_priv->state.clip_y0 * (1 - pwr) + y0 * pwr;",
          "359:             render_priv->state.clip_y1 =",
          "360:                 render_priv->state.clip_y1 * (1 - pwr) + y1 * pwr;",
          "361:             render_priv->state.clip_mode = 1;",
          "362:         } else if (!render_priv->state.clip_drawing) {",
          "363:             if (parse_vector_clip(render_priv, args, nargs))",
          "364:                 render_priv->state.clip_drawing_mode = 1;",
          "365:         }",
          "366:     } else if (tag(\"blur\")) {",
          "367:         double val;",
          "368:         if (nargs) {",
          "369:             val = argtod(*args);",
          "370:             val = render_priv->state.blur * (1 - pwr) + val * pwr;",
          "371:             val = (val < 0) ? 0 : val;",
          "372:             val = (val > BLUR_MAX_RADIUS) ? BLUR_MAX_RADIUS : val;",
          "373:             render_priv->state.blur = val;",
          "374:         } else",
          "375:             render_priv->state.blur = 0.0;",
          "377:     } else if (tag(\"fscx\")) {",
          "378:         double val;",
          "379:         if (nargs) {",
          "380:             val = argtod(*args) / 100;",
          "381:             val = render_priv->state.scale_x * (1 - pwr) + val * pwr;",
          "382:             val = (val < 0) ? 0 : val;",
          "383:         } else",
          "384:             val = render_priv->state.style->ScaleX;",
          "385:         render_priv->state.scale_x = val;",
          "386:     } else if (tag(\"fscy\")) {",
          "387:         double val;",
          "388:         if (nargs) {",
          "389:             val = argtod(*args) / 100;",
          "390:             val = render_priv->state.scale_y * (1 - pwr) + val * pwr;",
          "391:             val = (val < 0) ? 0 : val;",
          "392:         } else",
          "393:             val = render_priv->state.style->ScaleY;",
          "394:         render_priv->state.scale_y = val;",
          "395:     } else if (tag(\"fsc\")) {",
          "396:         render_priv->state.scale_x = render_priv->state.style->ScaleX;",
          "397:         render_priv->state.scale_y = render_priv->state.style->ScaleY;",
          "398:     } else if (tag(\"fsp\")) {",
          "399:         double val;",
          "400:         if (nargs) {",
          "401:             val = argtod(*args);",
          "402:             render_priv->state.hspacing =",
          "403:                 render_priv->state.hspacing * (1 - pwr) + val * pwr;",
          "404:         } else",
          "405:             render_priv->state.hspacing = render_priv->state.style->Spacing;",
          "406:     } else if (tag(\"fs\")) {",
          "407:         double val = 0;",
          "408:         if (nargs) {",
          "409:             val = argtod(*args);",
          "410:             if (*args->start == '+' || *args->start == '-')",
          "411:                 val = render_priv->state.font_size * (1 + pwr * val / 10);",
          "412:             else",
          "413:                 val = render_priv->state.font_size * (1 - pwr) + val * pwr;",
          "414:         }",
          "415:         if (val <= 0)",
          "416:             val = render_priv->state.style->FontSize;",
          "417:         if (render_priv->state.font)",
          "418:             change_font_size(render_priv, val);",
          "419:     } else if (tag(\"bord\")) {",
          "420:         double val, xval, yval;",
          "421:         if (nargs) {",
          "422:             val = argtod(*args);",
          "423:             xval = render_priv->state.border_x * (1 - pwr) + val * pwr;",
          "424:             yval = render_priv->state.border_y * (1 - pwr) + val * pwr;",
          "425:             xval = (xval < 0) ? 0 : xval;",
          "426:             yval = (yval < 0) ? 0 : yval;",
          "427:         } else",
          "428:             xval = yval = render_priv->state.style->Outline;",
          "429:         render_priv->state.border_x = xval;",
          "430:         render_priv->state.border_y = yval;",
          "431:     } else if (complex_tag(\"move\")) {",
          "432:         double x1, x2, y1, y2;",
          "433:         long long t1, t2, delta_t, t;",
          "434:         double x, y;",
          "435:         double k;",
          "436:         if (nargs == 4 || nargs == 6) {",
          "437:             x1 = argtod(args[0]);",
          "438:             y1 = argtod(args[1]);",
          "439:             x2 = argtod(args[2]);",
          "440:             y2 = argtod(args[3]);",
          "441:             t1 = t2 = 0;",
          "442:             if (nargs == 6) {",
          "443:                 t1 = argtoll(args[4]);",
          "444:                 t2 = argtoll(args[5]);",
          "445:                 if (t1 > t2) {",
          "446:                     long long tmp = t2;",
          "447:                     t2 = t1;",
          "448:                     t1 = tmp;",
          "451:         } else",
          "452:             return q;",
          "453:         if (t1 <= 0 && t2 <= 0) {",
          "454:             t1 = 0;",
          "455:             t2 = render_priv->state.event->Duration;",
          "456:         }",
          "457:         delta_t = t2 - t1;",
          "458:         t = render_priv->time - render_priv->state.event->Start;",
          "459:         if (t <= t1)",
          "460:             k = 0.;",
          "461:         else if (t >= t2)",
          "462:             k = 1.;",
          "463:         else",
          "464:             k = ((double) (t - t1)) / delta_t;",
          "465:         x = k * (x2 - x1) + x1;",
          "466:         y = k * (y2 - y1) + y1;",
          "467:         if (render_priv->state.evt_type != EVENT_POSITIONED) {",
          "468:             render_priv->state.pos_x = x;",
          "469:             render_priv->state.pos_y = y;",
          "471:             render_priv->state.evt_type = EVENT_POSITIONED;",
          "472:         }",
          "473:     } else if (tag(\"frx\")) {",
          "474:         double val;",
          "475:         if (nargs) {",
          "476:             val = argtod(*args);",
          "477:             val *= M_PI / 180;",
          "478:             render_priv->state.frx =",
          "479:                 val * pwr + render_priv->state.frx * (1 - pwr);",
          "480:         } else",
          "481:             render_priv->state.frx = 0.;",
          "482:     } else if (tag(\"fry\")) {",
          "483:         double val;",
          "484:         if (nargs) {",
          "485:             val = argtod(*args);",
          "486:             val *= M_PI / 180;",
          "487:             render_priv->state.fry =",
          "488:                 val * pwr + render_priv->state.fry * (1 - pwr);",
          "489:         } else",
          "490:             render_priv->state.fry = 0.;",
          "491:     } else if (tag(\"frz\") || tag(\"fr\")) {",
          "492:         double val;",
          "493:         if (nargs) {",
          "494:             val = argtod(*args);",
          "495:             val *= M_PI / 180;",
          "496:             render_priv->state.frz =",
          "497:                 val * pwr + render_priv->state.frz * (1 - pwr);",
          "498:         } else",
          "499:             render_priv->state.frz =",
          "500:                 M_PI * render_priv->state.style->Angle / 180.;",
          "501:     } else if (tag(\"fn\")) {",
          "502:         char *family;",
          "503:         char *start = args->start;",
          "504:         end = args->end;",
          "505:         if (nargs && strncmp(start, \"0\", end - start)) {",
          "506:             skip_spaces(&start);",
          "507:             family = strndup(start, end - start);",
          "508:         } else",
          "509:             family = strdup(render_priv->state.style->FontName);",
          "510:         free(render_priv->state.family);",
          "511:         render_priv->state.family = family;",
          "512:         update_font(render_priv);",
          "513:     } else if (tag(\"alpha\")) {",
          "514:         int i;",
          "515:         if (nargs) {",
          "516:             int32_t a = parse_alpha_tag(args->start);",
          "517:             for (i = 0; i < 4; ++i)",
          "518:                 change_alpha(&render_priv->state.c[i], a, pwr);",
          "519:         } else {",
          "520:             change_alpha(&render_priv->state.c[0],",
          "521:                          _a(render_priv->state.style->PrimaryColour), 1);",
          "522:             change_alpha(&render_priv->state.c[1],",
          "523:                          _a(render_priv->state.style->SecondaryColour), 1);",
          "524:             change_alpha(&render_priv->state.c[2],",
          "525:                          _a(render_priv->state.style->OutlineColour), 1);",
          "526:             change_alpha(&render_priv->state.c[3],",
          "527:                          _a(render_priv->state.style->BackColour), 1);",
          "528:         }",
          "530:     } else if (tag(\"an\")) {",
          "531:         int val = argtoi(*args);",
          "532:         if ((render_priv->state.parsed_tags & PARSED_A) == 0) {",
          "533:             if (val >= 1 && val <= 9)",
          "534:                 render_priv->state.alignment = numpad2align(val);",
          "536:                 render_priv->state.alignment =",
          "537:                     render_priv->state.style->Alignment;",
          "538:             render_priv->state.parsed_tags |= PARSED_A;",
          "539:         }",
          "540:     } else if (tag(\"a\")) {",
          "541:         int val = argtoi(*args);",
          "542:         if ((render_priv->state.parsed_tags & PARSED_A) == 0) {",
          "543:             if (val >= 1 && val <= 11)",
          "546:                 render_priv->state.alignment = ((val & 3) == 0) ? 5 : val;",
          "548:                 render_priv->state.alignment =",
          "549:                     render_priv->state.style->Alignment;",
          "550:             render_priv->state.parsed_tags |= PARSED_A;",
          "551:         }",
          "552:     } else if (complex_tag(\"pos\")) {",
          "553:         double v1, v2;",
          "554:         if (nargs == 2) {",
          "555:             v1 = argtod(args[0]);",
          "556:             v2 = argtod(args[1]);",
          "557:         } else",
          "558:             return q;",
          "559:         if (render_priv->state.evt_type == EVENT_POSITIONED) {",
          "560:             ass_msg(render_priv->library, MSGL_V, \"Subtitle has a new \\\\pos \"",
          "561:                    \"after \\\\move or \\\\pos, ignoring\");",
          "562:         } else {",
          "563:             render_priv->state.evt_type = EVENT_POSITIONED;",
          "564:             render_priv->state.detect_collisions = 0;",
          "565:             render_priv->state.pos_x = v1;",
          "566:             render_priv->state.pos_y = v2;",
          "567:         }",
          "568:     } else if (complex_tag(\"fade\") || complex_tag(\"fad\")) {",
          "569:         int a1, a2, a3;",
          "570:         long long t1, t2, t3, t4;",
          "571:         if (nargs == 2) {",
          "573:             a1 = 0xFF;",
          "574:             a2 = 0;",
          "575:             a3 = 0xFF;",
          "576:             t1 = -1;",
          "577:             t2 = argtoll(args[0]);",
          "578:             t3 = argtoll(args[1]);",
          "579:             t4 = -1;",
          "580:         } else if (nargs == 7) {",
          "582:             a1 = argtoi(args[0]);",
          "583:             a2 = argtoi(args[1]);",
          "584:             a3 = argtoi(args[2]);",
          "585:             t1 = argtoll(args[3]);",
          "586:             t2 = argtoll(args[4]);",
          "587:             t3 = argtoll(args[5]);",
          "588:             t4 = argtoll(args[6]);",
          "589:         } else",
          "590:             return q;",
          "591:         if (t1 == -1 && t4 == -1) {",
          "592:             t1 = 0;",
          "593:             t4 = render_priv->state.event->Duration;",
          "594:             t3 = t4 - t3;",
          "595:         }",
          "596:         if ((render_priv->state.parsed_tags & PARSED_FADE) == 0) {",
          "597:             render_priv->state.fade =",
          "598:                 interpolate_alpha(render_priv->time -",
          "599:                         render_priv->state.event->Start, t1, t2,",
          "600:                         t3, t4, a1, a2, a3);",
          "601:             render_priv->state.parsed_tags |= PARSED_FADE;",
          "602:         }",
          "603:     } else if (complex_tag(\"org\")) {",
          "604:         double v1, v2;",
          "605:         if (nargs == 2) {",
          "606:             v1 = argtod(args[0]);",
          "607:             v2 = argtod(args[1]);",
          "608:         } else",
          "609:             return q;",
          "610:         if (!render_priv->state.have_origin) {",
          "611:             render_priv->state.org_x = v1;",
          "612:             render_priv->state.org_y = v2;",
          "613:             render_priv->state.have_origin = 1;",
          "614:             render_priv->state.detect_collisions = 0;",
          "615:         }",
          "616:     } else if (complex_tag(\"t\")) {",
          "617:         double accel;",
          "618:         int cnt = nargs - 1;",
          "619:         long long t1, t2, t, delta_t;",
          "620:         double k;",
          "621:         if (cnt == 3) {",
          "622:             t1 = argtoll(args[0]);",
          "623:             t2 = argtoll(args[1]);",
          "624:             accel = argtod(args[2]);",
          "625:         } else if (cnt == 2) {",
          "626:             t1 = argtoll(args[0]);",
          "627:             t2 = argtoll(args[1]);",
          "628:             accel = 1.;",
          "629:         } else if (cnt == 1) {",
          "630:             t1 = 0;",
          "631:             t2 = 0;",
          "632:             accel = argtod(args[0]);",
          "633:         } else if (cnt == 0) {",
          "634:             t1 = 0;",
          "635:             t2 = 0;",
          "636:             accel = 1.;",
          "637:         } else",
          "638:             return q;",
          "639:         render_priv->state.detect_collisions = 0;",
          "640:         if (t2 == 0)",
          "641:             t2 = render_priv->state.event->Duration;",
          "642:         delta_t = t2 - t1;",
          "643:         t = render_priv->time - render_priv->state.event->Start;        // FIXME: move to render_context",
          "644:         if (t <= t1)",
          "645:             k = 0.;",
          "646:         else if (t >= t2)",
          "647:             k = 1.;",
          "648:         else {",
          "649:             assert(delta_t != 0.);",
          "650:             k = pow(((double) (t - t1)) / delta_t, accel);",
          "651:         }",
          "652:         p = args[cnt].start;",
          "653:         while (p < args[cnt].end)",
          "654:             p = parse_tag(render_priv, p, args[cnt].end, k);    // maybe k*pwr ? no, specs forbid nested \\t's",
          "655:     } else if (complex_tag(\"clip\")) {",
          "656:         if (nargs == 4) {",
          "657:             int x0, y0, x1, y1;",
          "658:             x0 = argtoi(args[0]);",
          "659:             y0 = argtoi(args[1]);",
          "660:             x1 = argtoi(args[2]);",
          "661:             y1 = argtoi(args[3]);",
          "662:             render_priv->state.clip_x0 =",
          "663:                 render_priv->state.clip_x0 * (1 - pwr) + x0 * pwr;",
          "664:             render_priv->state.clip_x1 =",
          "665:                 render_priv->state.clip_x1 * (1 - pwr) + x1 * pwr;",
          "666:             render_priv->state.clip_y0 =",
          "667:                 render_priv->state.clip_y0 * (1 - pwr) + y0 * pwr;",
          "668:             render_priv->state.clip_y1 =",
          "669:                 render_priv->state.clip_y1 * (1 - pwr) + y1 * pwr;",
          "670:             render_priv->state.clip_mode = 0;",
          "671:         } else if (!render_priv->state.clip_drawing) {",
          "672:             if (parse_vector_clip(render_priv, args, nargs))",
          "673:                 render_priv->state.clip_drawing_mode = 0;",
          "674:         }",
          "675:     } else if (tag(\"c\") || tag(\"1c\")) {",
          "676:         if (nargs) {",
          "677:             uint32_t val = parse_color_tag(args->start);",
          "678:             change_color(&render_priv->state.c[0], val, pwr);",
          "679:         } else",
          "680:             change_color(&render_priv->state.c[0],",
          "681:                          render_priv->state.style->PrimaryColour, 1);",
          "682:     } else if (tag(\"2c\")) {",
          "683:         if (nargs) {",
          "684:             uint32_t val = parse_color_tag(args->start);",
          "685:             change_color(&render_priv->state.c[1], val, pwr);",
          "686:         } else",
          "687:             change_color(&render_priv->state.c[1],",
          "688:                          render_priv->state.style->SecondaryColour, 1);",
          "689:     } else if (tag(\"3c\")) {",
          "690:         if (nargs) {",
          "691:             uint32_t val = parse_color_tag(args->start);",
          "692:             change_color(&render_priv->state.c[2], val, pwr);",
          "693:         } else",
          "694:             change_color(&render_priv->state.c[2],",
          "695:                          render_priv->state.style->OutlineColour, 1);",
          "696:     } else if (tag(\"4c\")) {",
          "697:         if (nargs) {",
          "698:             uint32_t val = parse_color_tag(args->start);",
          "699:             change_color(&render_priv->state.c[3], val, pwr);",
          "700:         } else",
          "701:             change_color(&render_priv->state.c[3],",
          "702:                          render_priv->state.style->BackColour, 1);",
          "703:     } else if (tag(\"1a\")) {",
          "704:         if (nargs) {",
          "705:             uint32_t val = parse_alpha_tag(args->start);",
          "706:             change_alpha(&render_priv->state.c[0], val, pwr);",
          "707:         } else",
          "708:             change_alpha(&render_priv->state.c[0],",
          "709:                          _a(render_priv->state.style->PrimaryColour), 1);",
          "710:     } else if (tag(\"2a\")) {",
          "711:         if (nargs) {",
          "712:             uint32_t val = parse_alpha_tag(args->start);",
          "713:             change_alpha(&render_priv->state.c[1], val, pwr);",
          "714:         } else",
          "715:             change_alpha(&render_priv->state.c[1],",
          "716:                          _a(render_priv->state.style->SecondaryColour), 1);",
          "717:     } else if (tag(\"3a\")) {",
          "718:         if (nargs) {",
          "719:             uint32_t val = parse_alpha_tag(args->start);",
          "720:             change_alpha(&render_priv->state.c[2], val, pwr);",
          "721:         } else",
          "722:             change_alpha(&render_priv->state.c[2],",
          "723:                          _a(render_priv->state.style->OutlineColour), 1);",
          "724:     } else if (tag(\"4a\")) {",
          "725:         if (nargs) {",
          "726:             uint32_t val = parse_alpha_tag(args->start);",
          "727:             change_alpha(&render_priv->state.c[3], val, pwr);",
          "728:         } else",
          "729:             change_alpha(&render_priv->state.c[3],",
          "730:                          _a(render_priv->state.style->BackColour), 1);",
          "731:     } else if (tag(\"r\")) {",
          "732:         if (nargs) {",
          "733:             int len = args->end - args->start;",
          "734:             reset_render_context(render_priv,",
          "735:                     lookup_style_strict(render_priv->track, args->start, len));",
          "736:         } else",
          "737:             reset_render_context(render_priv, NULL);",
          "738:     } else if (tag(\"be\")) {",
          "739:         double dval;",
          "740:         if (nargs) {",
          "741:             int val;",
          "742:             dval = argtod(*args);",
          "744:             val = (int) (render_priv->state.be * (1 - pwr) + dval * pwr + 0.5);",
          "747:             val = (val > MAX_BE) ? MAX_BE : val;",
          "748:             render_priv->state.be = val;",
          "749:         } else",
          "750:             render_priv->state.be = 0;",
          "751:     } else if (tag(\"b\")) {",
          "752:         int val = argtoi(*args);",
          "753:         if (!nargs || !(val == 0 || val == 1 || val >= 100))",
          "754:             val = render_priv->state.style->Bold;",
          "755:         render_priv->state.bold = val;",
          "756:         update_font(render_priv);",
          "757:     } else if (tag(\"i\")) {",
          "758:         int val = argtoi(*args);",
          "759:         if (!nargs || !(val == 0 || val == 1))",
          "760:             val = render_priv->state.style->Italic;",
          "761:         render_priv->state.italic = val;",
          "762:         update_font(render_priv);",
          "763:     } else if (tag(\"kf\") || tag(\"K\")) {",
          "764:         double val = 100;",
          "765:         if (nargs)",
          "766:             val = argtod(*args);",
          "767:         render_priv->state.effect_type = EF_KARAOKE_KF;",
          "768:         if (render_priv->state.effect_timing)",
          "769:             render_priv->state.effect_skip_timing +=",
          "770:                 render_priv->state.effect_timing;",
          "771:         render_priv->state.effect_timing = val * 10;",
          "772:     } else if (tag(\"ko\")) {",
          "773:         double val = 100;",
          "774:         if (nargs)",
          "775:             val = argtod(*args);",
          "776:         render_priv->state.effect_type = EF_KARAOKE_KO;",
          "777:         if (render_priv->state.effect_timing)",
          "778:             render_priv->state.effect_skip_timing +=",
          "779:                 render_priv->state.effect_timing;",
          "780:         render_priv->state.effect_timing = val * 10;",
          "781:     } else if (tag(\"k\")) {",
          "782:         double val = 100;",
          "783:         if (nargs)",
          "784:             val = argtod(*args);",
          "785:         render_priv->state.effect_type = EF_KARAOKE;",
          "786:         if (render_priv->state.effect_timing)",
          "787:             render_priv->state.effect_skip_timing +=",
          "788:                 render_priv->state.effect_timing;",
          "789:         render_priv->state.effect_timing = val * 10;",
          "790:     } else if (tag(\"shad\")) {",
          "791:         double val, xval, yval;",
          "792:         if (nargs) {",
          "793:             val = argtod(*args);",
          "794:             xval = render_priv->state.shadow_x * (1 - pwr) + val * pwr;",
          "795:             yval = render_priv->state.shadow_y * (1 - pwr) + val * pwr;",
          "797:             xval = (xval < 0) ? 0 : xval;",
          "798:             yval = (yval < 0) ? 0 : yval;",
          "799:         } else",
          "800:             xval = yval = render_priv->state.style->Shadow;",
          "801:         render_priv->state.shadow_x = xval;",
          "802:         render_priv->state.shadow_y = yval;",
          "803:     } else if (tag(\"s\")) {",
          "804:         int val = argtoi(*args);",
          "805:         if (!nargs || !(val == 0 || val == 1))",
          "806:             val = render_priv->state.style->StrikeOut;",
          "807:         if (val)",
          "808:             render_priv->state.flags |= DECO_STRIKETHROUGH;",
          "809:         else",
          "810:             render_priv->state.flags &= ~DECO_STRIKETHROUGH;",
          "811:     } else if (tag(\"u\")) {",
          "812:         int val = argtoi(*args);",
          "813:         if (!nargs || !(val == 0 || val == 1))",
          "814:             val = render_priv->state.style->Underline;",
          "815:         if (val)",
          "816:             render_priv->state.flags |= DECO_UNDERLINE;",
          "817:         else",
          "818:             render_priv->state.flags &= ~DECO_UNDERLINE;",
          "819:     } else if (tag(\"pbo\")) {",
          "820:         double val = argtod(*args);",
          "821:         render_priv->state.pbo = val;",
          "822:     } else if (tag(\"p\")) {",
          "823:         int val = argtoi(*args);",
          "824:         val = (val < 0) ? 0 : val;",
          "825:         render_priv->state.drawing_scale = val;",
          "826:     } else if (tag(\"q\")) {",
          "827:         int val = argtoi(*args);",
          "828:         if (!nargs || !(val >= 0 && val <= 3))",
          "829:             val = render_priv->track->WrapStyle;",
          "830:         render_priv->state.wrap_style = val;",
          "831:     } else if (tag(\"fe\")) {",
          "832:         int val;",
          "833:         if (nargs)",
          "834:             val = argtoi(*args);",
          "835:         else",
          "836:             val = render_priv->state.style->Encoding;",
          "837:         render_priv->state.font_encoding = val;",
          "840:     return q;",
          "",
          "[Added Lines]",
          "233: char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr)",
          "235:     for (char *q; p < end; p = q) {",
          "236:         while (*p != '\\\\' && p != end)",
          "237:             ++p;",
          "238:         if (*p != '\\\\')",
          "239:             break;",
          "241:         if (p != end)",
          "242:             skip_spaces(&p);",
          "244:         q = p;",
          "245:         while (*q != '(' && *q != '\\\\' && q != end)",
          "246:             ++q;",
          "247:         if (q == p)",
          "248:             continue;",
          "250:         char *name_end = q;",
          "253:         struct arg args[MAX_VALID_NARGS + 1];",
          "254:         int nargs = 0;",
          "255:         for (int i = 0; i <= MAX_VALID_NARGS; ++i)",
          "256:             args[i].start = args[i].end = \"\";",
          "260:         if (*q == '(') {",
          "261:             ++q;",
          "262:             while (1) {",
          "264:                     skip_spaces(&q);",
          "271:                 char *r = q;",
          "272:                 while (*r != ',' && *r != '\\\\' && *r != ')' && r != end)",
          "273:                     ++r;",
          "275:                 if (*r == ',') {",
          "276:                     push_arg(args, &nargs, q, r);",
          "277:                     q = r + 1;",
          "278:                 } else {",
          "281:                     while (*r != ')' && r != end)",
          "282:                         ++r;",
          "283:                     push_arg(args, &nargs, q, r);",
          "284:                     q = r;",
          "286:                     if (q != end)",
          "287:                         ++q;",
          "288:                     break;",
          "289:                 }",
          "297:         if (tag(\"xbord\")) {",
          "298:             double val;",
          "299:             if (nargs) {",
          "300:                 val = argtod(*args);",
          "301:                 val = render_priv->state.border_x * (1 - pwr) + val * pwr;",
          "302:                 val = (val < 0) ? 0 : val;",
          "303:             } else",
          "304:                 val = render_priv->state.style->Outline;",
          "305:             render_priv->state.border_x = val;",
          "306:         } else if (tag(\"ybord\")) {",
          "307:             double val;",
          "308:             if (nargs) {",
          "309:                 val = argtod(*args);",
          "310:                 val = render_priv->state.border_y * (1 - pwr) + val * pwr;",
          "311:                 val = (val < 0) ? 0 : val;",
          "312:             } else",
          "313:                 val = render_priv->state.style->Outline;",
          "314:             render_priv->state.border_y = val;",
          "315:         } else if (tag(\"xshad\")) {",
          "316:             double val;",
          "317:             if (nargs) {",
          "318:                 val = argtod(*args);",
          "319:                 val = render_priv->state.shadow_x * (1 - pwr) + val * pwr;",
          "320:             } else",
          "321:                 val = render_priv->state.style->Shadow;",
          "322:             render_priv->state.shadow_x = val;",
          "323:         } else if (tag(\"yshad\")) {",
          "324:             double val;",
          "325:             if (nargs) {",
          "326:                 val = argtod(*args);",
          "327:                 val = render_priv->state.shadow_y * (1 - pwr) + val * pwr;",
          "328:             } else",
          "329:                 val = render_priv->state.style->Shadow;",
          "330:             render_priv->state.shadow_y = val;",
          "331:         } else if (tag(\"fax\")) {",
          "332:             double val;",
          "333:             if (nargs) {",
          "334:                 val = argtod(*args);",
          "335:                 render_priv->state.fax =",
          "336:                     val * pwr + render_priv->state.fax * (1 - pwr);",
          "337:             } else",
          "338:                 render_priv->state.fax = 0.;",
          "339:         } else if (tag(\"fay\")) {",
          "340:             double val;",
          "341:             if (nargs) {",
          "342:                 val = argtod(*args);",
          "343:                 render_priv->state.fay =",
          "344:                     val * pwr + render_priv->state.fay * (1 - pwr);",
          "345:             } else",
          "346:                 render_priv->state.fay = 0.;",
          "347:         } else if (complex_tag(\"iclip\")) {",
          "348:             if (nargs == 4) {",
          "349:                 int x0, y0, x1, y1;",
          "350:                 x0 = argtoi(args[0]);",
          "351:                 y0 = argtoi(args[1]);",
          "352:                 x1 = argtoi(args[2]);",
          "353:                 y1 = argtoi(args[3]);",
          "354:                 render_priv->state.clip_x0 =",
          "355:                     render_priv->state.clip_x0 * (1 - pwr) + x0 * pwr;",
          "356:                 render_priv->state.clip_x1 =",
          "357:                     render_priv->state.clip_x1 * (1 - pwr) + x1 * pwr;",
          "358:                 render_priv->state.clip_y0 =",
          "359:                     render_priv->state.clip_y0 * (1 - pwr) + y0 * pwr;",
          "360:                 render_priv->state.clip_y1 =",
          "361:                     render_priv->state.clip_y1 * (1 - pwr) + y1 * pwr;",
          "362:                 render_priv->state.clip_mode = 1;",
          "363:             } else if (!render_priv->state.clip_drawing) {",
          "364:                 if (parse_vector_clip(render_priv, args, nargs))",
          "365:                     render_priv->state.clip_drawing_mode = 1;",
          "366:             }",
          "367:         } else if (tag(\"blur\")) {",
          "368:             double val;",
          "369:             if (nargs) {",
          "370:                 val = argtod(*args);",
          "371:                 val = render_priv->state.blur * (1 - pwr) + val * pwr;",
          "372:                 val = (val < 0) ? 0 : val;",
          "373:                 val = (val > BLUR_MAX_RADIUS) ? BLUR_MAX_RADIUS : val;",
          "374:                 render_priv->state.blur = val;",
          "375:             } else",
          "376:                 render_priv->state.blur = 0.0;",
          "378:         } else if (tag(\"fscx\")) {",
          "379:             double val;",
          "380:             if (nargs) {",
          "381:                 val = argtod(*args) / 100;",
          "382:                 val = render_priv->state.scale_x * (1 - pwr) + val * pwr;",
          "383:                 val = (val < 0) ? 0 : val;",
          "384:             } else",
          "385:                 val = render_priv->state.style->ScaleX;",
          "386:             render_priv->state.scale_x = val;",
          "387:         } else if (tag(\"fscy\")) {",
          "388:             double val;",
          "389:             if (nargs) {",
          "390:                 val = argtod(*args) / 100;",
          "391:                 val = render_priv->state.scale_y * (1 - pwr) + val * pwr;",
          "392:                 val = (val < 0) ? 0 : val;",
          "393:             } else",
          "394:                 val = render_priv->state.style->ScaleY;",
          "395:             render_priv->state.scale_y = val;",
          "396:         } else if (tag(\"fsc\")) {",
          "397:             render_priv->state.scale_x = render_priv->state.style->ScaleX;",
          "398:             render_priv->state.scale_y = render_priv->state.style->ScaleY;",
          "399:         } else if (tag(\"fsp\")) {",
          "400:             double val;",
          "401:             if (nargs) {",
          "402:                 val = argtod(*args);",
          "403:                 render_priv->state.hspacing =",
          "404:                     render_priv->state.hspacing * (1 - pwr) + val * pwr;",
          "405:             } else",
          "406:                 render_priv->state.hspacing = render_priv->state.style->Spacing;",
          "407:         } else if (tag(\"fs\")) {",
          "408:             double val = 0;",
          "409:             if (nargs) {",
          "410:                 val = argtod(*args);",
          "411:                 if (*args->start == '+' || *args->start == '-')",
          "412:                     val = render_priv->state.font_size * (1 + pwr * val / 10);",
          "413:                 else",
          "414:                     val = render_priv->state.font_size * (1 - pwr) + val * pwr;",
          "415:             }",
          "416:             if (val <= 0)",
          "417:                 val = render_priv->state.style->FontSize;",
          "418:             if (render_priv->state.font)",
          "419:                 change_font_size(render_priv, val);",
          "420:         } else if (tag(\"bord\")) {",
          "421:             double val, xval, yval;",
          "422:             if (nargs) {",
          "423:                 val = argtod(*args);",
          "424:                 xval = render_priv->state.border_x * (1 - pwr) + val * pwr;",
          "425:                 yval = render_priv->state.border_y * (1 - pwr) + val * pwr;",
          "426:                 xval = (xval < 0) ? 0 : xval;",
          "427:                 yval = (yval < 0) ? 0 : yval;",
          "428:             } else",
          "429:                 xval = yval = render_priv->state.style->Outline;",
          "430:             render_priv->state.border_x = xval;",
          "431:             render_priv->state.border_y = yval;",
          "432:         } else if (complex_tag(\"move\")) {",
          "433:             double x1, x2, y1, y2;",
          "434:             long long t1, t2, delta_t, t;",
          "435:             double x, y;",
          "436:             double k;",
          "437:             if (nargs == 4 || nargs == 6) {",
          "438:                 x1 = argtod(args[0]);",
          "439:                 y1 = argtod(args[1]);",
          "440:                 x2 = argtod(args[2]);",
          "441:                 y2 = argtod(args[3]);",
          "442:                 t1 = t2 = 0;",
          "443:                 if (nargs == 6) {",
          "444:                     t1 = argtoll(args[4]);",
          "445:                     t2 = argtoll(args[5]);",
          "446:                     if (t1 > t2) {",
          "447:                         long long tmp = t2;",
          "448:                         t2 = t1;",
          "449:                         t1 = tmp;",
          "450:                     }",
          "452:             } else",
          "453:                 continue;",
          "454:             if (t1 <= 0 && t2 <= 0) {",
          "455:                 t1 = 0;",
          "456:                 t2 = render_priv->state.event->Duration;",
          "458:             delta_t = t2 - t1;",
          "459:             t = render_priv->time - render_priv->state.event->Start;",
          "460:             if (t <= t1)",
          "461:                 k = 0.;",
          "462:             else if (t >= t2)",
          "463:                 k = 1.;",
          "464:             else",
          "465:                 k = ((double) (t - t1)) / delta_t;",
          "466:             x = k * (x2 - x1) + x1;",
          "467:             y = k * (y2 - y1) + y1;",
          "468:             if (render_priv->state.evt_type != EVENT_POSITIONED) {",
          "469:                 render_priv->state.pos_x = x;",
          "470:                 render_priv->state.pos_y = y;",
          "471:                 render_priv->state.detect_collisions = 0;",
          "472:                 render_priv->state.evt_type = EVENT_POSITIONED;",
          "473:             }",
          "474:         } else if (tag(\"frx\")) {",
          "475:             double val;",
          "476:             if (nargs) {",
          "477:                 val = argtod(*args);",
          "478:                 val *= M_PI / 180;",
          "479:                 render_priv->state.frx =",
          "480:                     val * pwr + render_priv->state.frx * (1 - pwr);",
          "481:             } else",
          "482:                 render_priv->state.frx = 0.;",
          "483:         } else if (tag(\"fry\")) {",
          "484:             double val;",
          "485:             if (nargs) {",
          "486:                 val = argtod(*args);",
          "487:                 val *= M_PI / 180;",
          "488:                 render_priv->state.fry =",
          "489:                     val * pwr + render_priv->state.fry * (1 - pwr);",
          "490:             } else",
          "491:                 render_priv->state.fry = 0.;",
          "492:         } else if (tag(\"frz\") || tag(\"fr\")) {",
          "493:             double val;",
          "494:             if (nargs) {",
          "495:                 val = argtod(*args);",
          "496:                 val *= M_PI / 180;",
          "497:                 render_priv->state.frz =",
          "498:                     val * pwr + render_priv->state.frz * (1 - pwr);",
          "499:             } else",
          "500:                 render_priv->state.frz =",
          "501:                     M_PI * render_priv->state.style->Angle / 180.;",
          "502:         } else if (tag(\"fn\")) {",
          "503:             char *family;",
          "504:             char *start = args->start;",
          "505:             if (nargs && strncmp(start, \"0\", args->end - start)) {",
          "506:                 skip_spaces(&start);",
          "507:                 family = strndup(start, args->end - start);",
          "508:             } else",
          "509:                 family = strdup(render_priv->state.style->FontName);",
          "510:             free(render_priv->state.family);",
          "511:             render_priv->state.family = family;",
          "512:             update_font(render_priv);",
          "513:         } else if (tag(\"alpha\")) {",
          "514:             int i;",
          "515:             if (nargs) {",
          "516:                 int32_t a = parse_alpha_tag(args->start);",
          "517:                 for (i = 0; i < 4; ++i)",
          "518:                     change_alpha(&render_priv->state.c[i], a, pwr);",
          "519:             } else {",
          "520:                 change_alpha(&render_priv->state.c[0],",
          "521:                              _a(render_priv->state.style->PrimaryColour), 1);",
          "522:                 change_alpha(&render_priv->state.c[1],",
          "523:                              _a(render_priv->state.style->SecondaryColour), 1);",
          "524:                 change_alpha(&render_priv->state.c[2],",
          "525:                              _a(render_priv->state.style->OutlineColour), 1);",
          "526:                 change_alpha(&render_priv->state.c[3],",
          "527:                              _a(render_priv->state.style->BackColour), 1);",
          "528:             }",
          "530:         } else if (tag(\"an\")) {",
          "531:             int val = argtoi(*args);",
          "532:             if ((render_priv->state.parsed_tags & PARSED_A) == 0) {",
          "533:                 if (val >= 1 && val <= 9)",
          "534:                     render_priv->state.alignment = numpad2align(val);",
          "535:                 else",
          "536:                     render_priv->state.alignment =",
          "537:                         render_priv->state.style->Alignment;",
          "538:                 render_priv->state.parsed_tags |= PARSED_A;",
          "539:             }",
          "540:         } else if (tag(\"a\")) {",
          "541:             int val = argtoi(*args);",
          "542:             if ((render_priv->state.parsed_tags & PARSED_A) == 0) {",
          "543:                 if (val >= 1 && val <= 11)",
          "546:                     render_priv->state.alignment = ((val & 3) == 0) ? 5 : val;",
          "547:                 else",
          "548:                     render_priv->state.alignment =",
          "549:                         render_priv->state.style->Alignment;",
          "550:                 render_priv->state.parsed_tags |= PARSED_A;",
          "551:             }",
          "552:         } else if (complex_tag(\"pos\")) {",
          "553:             double v1, v2;",
          "554:             if (nargs == 2) {",
          "555:                 v1 = argtod(args[0]);",
          "556:                 v2 = argtod(args[1]);",
          "557:             } else",
          "558:                 continue;",
          "559:             if (render_priv->state.evt_type == EVENT_POSITIONED) {",
          "560:                 ass_msg(render_priv->library, MSGL_V, \"Subtitle has a new \\\\pos \"",
          "561:                        \"after \\\\move or \\\\pos, ignoring\");",
          "562:             } else {",
          "563:                 render_priv->state.evt_type = EVENT_POSITIONED;",
          "564:                 render_priv->state.detect_collisions = 0;",
          "565:                 render_priv->state.pos_x = v1;",
          "566:                 render_priv->state.pos_y = v2;",
          "567:             }",
          "568:         } else if (complex_tag(\"fade\") || complex_tag(\"fad\")) {",
          "569:             int a1, a2, a3;",
          "570:             long long t1, t2, t3, t4;",
          "571:             if (nargs == 2) {",
          "573:                 a1 = 0xFF;",
          "574:                 a2 = 0;",
          "575:                 a3 = 0xFF;",
          "576:                 t1 = -1;",
          "577:                 t2 = argtoll(args[0]);",
          "578:                 t3 = argtoll(args[1]);",
          "579:                 t4 = -1;",
          "580:             } else if (nargs == 7) {",
          "582:                 a1 = argtoi(args[0]);",
          "583:                 a2 = argtoi(args[1]);",
          "584:                 a3 = argtoi(args[2]);",
          "585:                 t1 = argtoll(args[3]);",
          "586:                 t2 = argtoll(args[4]);",
          "587:                 t3 = argtoll(args[5]);",
          "588:                 t4 = argtoll(args[6]);",
          "589:             } else",
          "590:                 continue;",
          "591:             if (t1 == -1 && t4 == -1) {",
          "592:                 t1 = 0;",
          "593:                 t4 = render_priv->state.event->Duration;",
          "594:                 t3 = t4 - t3;",
          "595:             }",
          "596:             if ((render_priv->state.parsed_tags & PARSED_FADE) == 0) {",
          "597:                 render_priv->state.fade =",
          "598:                     interpolate_alpha(render_priv->time -",
          "599:                             render_priv->state.event->Start, t1, t2,",
          "600:                             t3, t4, a1, a2, a3);",
          "601:                 render_priv->state.parsed_tags |= PARSED_FADE;",
          "602:             }",
          "603:         } else if (complex_tag(\"org\")) {",
          "604:             double v1, v2;",
          "605:             if (nargs == 2) {",
          "606:                 v1 = argtod(args[0]);",
          "607:                 v2 = argtod(args[1]);",
          "608:             } else",
          "609:                 continue;",
          "610:             if (!render_priv->state.have_origin) {",
          "611:                 render_priv->state.org_x = v1;",
          "612:                 render_priv->state.org_y = v2;",
          "613:                 render_priv->state.have_origin = 1;",
          "614:                 render_priv->state.detect_collisions = 0;",
          "615:             }",
          "616:         } else if (complex_tag(\"t\")) {",
          "617:             double accel;",
          "618:             int cnt = nargs - 1;",
          "619:             long long t1, t2, t, delta_t;",
          "620:             double k;",
          "621:             if (cnt == 3) {",
          "622:                 t1 = argtoll(args[0]);",
          "623:                 t2 = argtoll(args[1]);",
          "624:                 accel = argtod(args[2]);",
          "625:             } else if (cnt == 2) {",
          "626:                 t1 = argtoll(args[0]);",
          "627:                 t2 = argtoll(args[1]);",
          "628:                 accel = 1.;",
          "629:             } else if (cnt == 1) {",
          "630:                 t1 = 0;",
          "631:                 t2 = 0;",
          "632:                 accel = argtod(args[0]);",
          "633:             } else if (cnt == 0) {",
          "634:                 t1 = 0;",
          "635:                 t2 = 0;",
          "636:                 accel = 1.;",
          "637:             } else",
          "638:                 continue;",
          "640:             if (t2 == 0)",
          "641:                 t2 = render_priv->state.event->Duration;",
          "642:             delta_t = t2 - t1;",
          "643:             t = render_priv->time - render_priv->state.event->Start;        // FIXME: move to render_context",
          "644:             if (t <= t1)",
          "645:                 k = 0.;",
          "646:             else if (t >= t2)",
          "647:                 k = 1.;",
          "648:             else {",
          "649:                 assert(delta_t != 0.);",
          "650:                 k = pow(((double) (t - t1)) / delta_t, accel);",
          "651:             }",
          "652:             p = args[cnt].start;",
          "653:             p = parse_tags(render_priv, p, args[cnt].end, k);    // maybe k*pwr ? no, specs forbid nested \\t's",
          "654:         } else if (complex_tag(\"clip\")) {",
          "655:             if (nargs == 4) {",
          "656:                 int x0, y0, x1, y1;",
          "657:                 x0 = argtoi(args[0]);",
          "658:                 y0 = argtoi(args[1]);",
          "659:                 x1 = argtoi(args[2]);",
          "660:                 y1 = argtoi(args[3]);",
          "661:                 render_priv->state.clip_x0 =",
          "662:                     render_priv->state.clip_x0 * (1 - pwr) + x0 * pwr;",
          "663:                 render_priv->state.clip_x1 =",
          "664:                     render_priv->state.clip_x1 * (1 - pwr) + x1 * pwr;",
          "665:                 render_priv->state.clip_y0 =",
          "666:                     render_priv->state.clip_y0 * (1 - pwr) + y0 * pwr;",
          "667:                 render_priv->state.clip_y1 =",
          "668:                     render_priv->state.clip_y1 * (1 - pwr) + y1 * pwr;",
          "669:                 render_priv->state.clip_mode = 0;",
          "670:             } else if (!render_priv->state.clip_drawing) {",
          "671:                 if (parse_vector_clip(render_priv, args, nargs))",
          "672:                     render_priv->state.clip_drawing_mode = 0;",
          "673:             }",
          "674:         } else if (tag(\"c\") || tag(\"1c\")) {",
          "675:             if (nargs) {",
          "676:                 uint32_t val = parse_color_tag(args->start);",
          "677:                 change_color(&render_priv->state.c[0], val, pwr);",
          "678:             } else",
          "679:                 change_color(&render_priv->state.c[0],",
          "680:                              render_priv->state.style->PrimaryColour, 1);",
          "681:         } else if (tag(\"2c\")) {",
          "682:             if (nargs) {",
          "683:                 uint32_t val = parse_color_tag(args->start);",
          "684:                 change_color(&render_priv->state.c[1], val, pwr);",
          "685:             } else",
          "686:                 change_color(&render_priv->state.c[1],",
          "687:                              render_priv->state.style->SecondaryColour, 1);",
          "688:         } else if (tag(\"3c\")) {",
          "689:             if (nargs) {",
          "690:                 uint32_t val = parse_color_tag(args->start);",
          "691:                 change_color(&render_priv->state.c[2], val, pwr);",
          "692:             } else",
          "693:                 change_color(&render_priv->state.c[2],",
          "694:                              render_priv->state.style->OutlineColour, 1);",
          "695:         } else if (tag(\"4c\")) {",
          "696:             if (nargs) {",
          "697:                 uint32_t val = parse_color_tag(args->start);",
          "698:                 change_color(&render_priv->state.c[3], val, pwr);",
          "699:             } else",
          "700:                 change_color(&render_priv->state.c[3],",
          "701:                              render_priv->state.style->BackColour, 1);",
          "702:         } else if (tag(\"1a\")) {",
          "703:             if (nargs) {",
          "704:                 uint32_t val = parse_alpha_tag(args->start);",
          "705:                 change_alpha(&render_priv->state.c[0], val, pwr);",
          "706:             } else",
          "707:                 change_alpha(&render_priv->state.c[0],",
          "708:                              _a(render_priv->state.style->PrimaryColour), 1);",
          "709:         } else if (tag(\"2a\")) {",
          "710:             if (nargs) {",
          "711:                 uint32_t val = parse_alpha_tag(args->start);",
          "712:                 change_alpha(&render_priv->state.c[1], val, pwr);",
          "713:             } else",
          "714:                 change_alpha(&render_priv->state.c[1],",
          "715:                              _a(render_priv->state.style->SecondaryColour), 1);",
          "716:         } else if (tag(\"3a\")) {",
          "717:             if (nargs) {",
          "718:                 uint32_t val = parse_alpha_tag(args->start);",
          "719:                 change_alpha(&render_priv->state.c[2], val, pwr);",
          "720:             } else",
          "721:                 change_alpha(&render_priv->state.c[2],",
          "722:                              _a(render_priv->state.style->OutlineColour), 1);",
          "723:         } else if (tag(\"4a\")) {",
          "724:             if (nargs) {",
          "725:                 uint32_t val = parse_alpha_tag(args->start);",
          "726:                 change_alpha(&render_priv->state.c[3], val, pwr);",
          "727:             } else",
          "728:                 change_alpha(&render_priv->state.c[3],",
          "729:                              _a(render_priv->state.style->BackColour), 1);",
          "730:         } else if (tag(\"r\")) {",
          "731:             if (nargs) {",
          "732:                 int len = args->end - args->start;",
          "733:                 reset_render_context(render_priv,",
          "734:                         lookup_style_strict(render_priv->track, args->start, len));",
          "735:             } else",
          "736:                 reset_render_context(render_priv, NULL);",
          "737:         } else if (tag(\"be\")) {",
          "738:             double dval;",
          "739:             if (nargs) {",
          "740:                 int val;",
          "741:                 dval = argtod(*args);",
          "743:                 val = (int) (render_priv->state.be * (1 - pwr) + dval * pwr + 0.5);",
          "745:                 val = (val < 0) ? 0 : val;",
          "746:                 val = (val > MAX_BE) ? MAX_BE : val;",
          "747:                 render_priv->state.be = val;",
          "748:             } else",
          "749:                 render_priv->state.be = 0;",
          "750:         } else if (tag(\"b\")) {",
          "751:             int val = argtoi(*args);",
          "752:             if (!nargs || !(val == 0 || val == 1 || val >= 100))",
          "753:                 val = render_priv->state.style->Bold;",
          "754:             render_priv->state.bold = val;",
          "755:             update_font(render_priv);",
          "756:         } else if (tag(\"i\")) {",
          "757:             int val = argtoi(*args);",
          "758:             if (!nargs || !(val == 0 || val == 1))",
          "759:                 val = render_priv->state.style->Italic;",
          "760:             render_priv->state.italic = val;",
          "761:             update_font(render_priv);",
          "762:         } else if (tag(\"kf\") || tag(\"K\")) {",
          "763:             double val = 100;",
          "764:             if (nargs)",
          "765:                 val = argtod(*args);",
          "766:             render_priv->state.effect_type = EF_KARAOKE_KF;",
          "767:             if (render_priv->state.effect_timing)",
          "768:                 render_priv->state.effect_skip_timing +=",
          "769:                     render_priv->state.effect_timing;",
          "770:             render_priv->state.effect_timing = val * 10;",
          "771:         } else if (tag(\"ko\")) {",
          "772:             double val = 100;",
          "773:             if (nargs)",
          "774:                 val = argtod(*args);",
          "775:             render_priv->state.effect_type = EF_KARAOKE_KO;",
          "776:             if (render_priv->state.effect_timing)",
          "777:                 render_priv->state.effect_skip_timing +=",
          "778:                     render_priv->state.effect_timing;",
          "779:             render_priv->state.effect_timing = val * 10;",
          "780:         } else if (tag(\"k\")) {",
          "781:             double val = 100;",
          "782:             if (nargs)",
          "783:                 val = argtod(*args);",
          "784:             render_priv->state.effect_type = EF_KARAOKE;",
          "785:             if (render_priv->state.effect_timing)",
          "786:                 render_priv->state.effect_skip_timing +=",
          "787:                     render_priv->state.effect_timing;",
          "788:             render_priv->state.effect_timing = val * 10;",
          "789:         } else if (tag(\"shad\")) {",
          "790:             double val, xval, yval;",
          "791:             if (nargs) {",
          "792:                 val = argtod(*args);",
          "793:                 xval = render_priv->state.shadow_x * (1 - pwr) + val * pwr;",
          "794:                 yval = render_priv->state.shadow_y * (1 - pwr) + val * pwr;",
          "796:                 xval = (xval < 0) ? 0 : xval;",
          "797:                 yval = (yval < 0) ? 0 : yval;",
          "798:             } else",
          "799:                 xval = yval = render_priv->state.style->Shadow;",
          "800:             render_priv->state.shadow_x = xval;",
          "801:             render_priv->state.shadow_y = yval;",
          "802:         } else if (tag(\"s\")) {",
          "803:             int val = argtoi(*args);",
          "804:             if (!nargs || !(val == 0 || val == 1))",
          "805:                 val = render_priv->state.style->StrikeOut;",
          "806:             if (val)",
          "807:                 render_priv->state.flags |= DECO_STRIKETHROUGH;",
          "809:                 render_priv->state.flags &= ~DECO_STRIKETHROUGH;",
          "810:         } else if (tag(\"u\")) {",
          "811:             int val = argtoi(*args);",
          "812:             if (!nargs || !(val == 0 || val == 1))",
          "813:                 val = render_priv->state.style->Underline;",
          "814:             if (val)",
          "815:                 render_priv->state.flags |= DECO_UNDERLINE;",
          "817:                 render_priv->state.flags &= ~DECO_UNDERLINE;",
          "818:         } else if (tag(\"pbo\")) {",
          "819:             double val = argtod(*args);",
          "820:             render_priv->state.pbo = val;",
          "821:         } else if (tag(\"p\")) {",
          "822:             int val = argtoi(*args);",
          "824:             render_priv->state.drawing_scale = val;",
          "825:         } else if (tag(\"q\")) {",
          "826:             int val = argtoi(*args);",
          "827:             if (!nargs || !(val >= 0 && val <= 3))",
          "828:                 val = render_priv->track->WrapStyle;",
          "829:             render_priv->state.wrap_style = val;",
          "830:         } else if (tag(\"fe\")) {",
          "831:             int val;",
          "832:             if (nargs)",
          "833:                 val = argtoi(*args);",
          "834:             else",
          "835:                 val = render_priv->state.style->Encoding;",
          "836:             render_priv->state.font_encoding = val;",
          "837:         }",
          "840:     return p;",
          "",
          "---------------"
        ],
        "libass/ass_parse.h||libass/ass_parse.h": [
          "File: libass/ass_parse.h -> libass/ass_parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: void apply_transition_effects(ASS_Renderer *render_priv, ASS_Event *event);",
          "32: void process_karaoke_effects(ASS_Renderer *render_priv);",
          "33: unsigned get_next_char(ASS_Renderer *render_priv, char **str);",
          "35: int event_has_hard_overrides(char *str);",
          "36: extern void change_alpha(uint32_t *var, int32_t new, double pwr);",
          "37: extern uint32_t mult_alpha(uint32_t a, uint32_t b);",
          "",
          "[Removed Lines]",
          "34: char *parse_tag(ASS_Renderer *render_priv, char *p, char *end, double pwr);",
          "",
          "[Added Lines]",
          "34: char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr);",
          "",
          "---------------"
        ],
        "libass/ass_render.c||libass/ass_render.c": [
          "File: libass/ass_render.c -> libass/ass_render.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1712:         code = 0;",
          "1713:         while (*p) {",
          "1714:             if ((*p == '{') && (q = strchr(p, '}'))) {",
          "1717:                 assert(*p == '}');",
          "1718:                 p++;",
          "1719:             } else if (render_priv->state.drawing_scale) {",
          "",
          "[Removed Lines]",
          "1715:                 while (p < q)",
          "1716:                     p = parse_tag(render_priv, p, q, 1.);",
          "",
          "[Added Lines]",
          "1715:                 p = parse_tags(render_priv, p, q, 1.);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3171bdafd1bc9b2f6118568a8d51694333e85fb9",
      "candidate_info": {
        "commit_hash": "3171bdafd1bc9b2f6118568a8d51694333e85fb9",
        "repo": "libass/libass",
        "commit_url": "https://github.com/libass/libass/commit/3171bdafd1bc9b2f6118568a8d51694333e85fb9",
        "files": [
          "Changelog",
          "libass/ass_parse.c",
          "libass/ass_parse.h",
          "libass/ass_render.c"
        ],
        "message": "parse_tags: handle argumentless \\t inside \\t() like VSFilter\n\n\\t with no parantheses inside \\t() resets the animation parameters\nof the \\t() for subsequent tags, so they are animated as if the \\t()\nwas the single-argument version regardless of the actual number\nof arguments the \\t() has.\n\nEquivalently, you could say parentheses are implied for \\t inside \\t().\n\nFor example, \\t(20,60,\\frx0\\t\\fry0\\frz0) animates \\frx from 20 to 60 ms\nand animates \\fry and \\frz for the whole duration of the line,\njust like \\t(20,60,\\frx0)\\t(\\fry0\\frz0) or \\t(20,60,\\frx0\\t(\\fry0\\frz0)).\n\nTechnically, VSFilter simply resets the animation parameters for any \\t\nit encounters but parses the embedded tags only if the \\t has the right\nnumber of arguments. However, top-level animation parameters don't matter\nbecause top-level tags are not animated, while any nested \\t that has\nparentheses terminates the containing \\t because they share the closing\nparenthesis, so the fact that a nested \\t with empty parentheses or with\nat least four arguments changes the animation parameters also doesn't\nmatter because the containing \\t immediately ends and the changed\nparameters have nothing to apply to. Thus the only situation where\nthis has a visible effect is a nested \\t without parentheses.\n\nCloses https://github.com/libass/libass/pull/296.",
        "before_after_code_files": [
          "libass/ass_parse.c||libass/ass_parse.c",
          "libass/ass_parse.h||libass/ass_parse.h",
          "libass/ass_render.c||libass/ass_render.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libass/ass_parse.c||libass/ass_parse.c"
          ],
          "candidate": [
            "libass/ass_parse.c||libass/ass_parse.c"
          ]
        }
      },
      "candidate_diff": {
        "libass/ass_parse.c||libass/ass_parse.c": [
          "File: libass/ass_parse.c -> libass/ass_parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: {",
          "235:     for (char *q; p < end; p = q) {",
          "236:         while (*p != '\\\\' && p != end)",
          "",
          "[Removed Lines]",
          "233: char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr)",
          "",
          "[Added Lines]",
          "233: char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr,",
          "234:                  bool nested)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:                 t1 = 0;",
          "631:                 t2 = 0;",
          "632:                 accel = argtod(args[0]);",
          "634:                 t1 = 0;",
          "635:                 t2 = 0;",
          "636:                 accel = 1.;",
          "639:             render_priv->state.detect_collisions = 0;",
          "640:             if (t2 == 0)",
          "641:                 t2 = render_priv->state.event->Duration;",
          "",
          "[Removed Lines]",
          "633:             } else if (cnt == 0) {",
          "637:             } else",
          "638:                 continue;",
          "",
          "[Added Lines]",
          "634:             } else {",
          "638:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "649:                 assert(delta_t != 0.);",
          "650:                 k = pow(((double) (t - t1)) / delta_t, accel);",
          "651:             }",
          "652:             p = args[cnt].start;",
          "653:             if (args[cnt].end < end) {",
          "655:             } else {",
          "656:                 assert(q == end);",
          "",
          "[Removed Lines]",
          "654:                 p = parse_tags(render_priv, p, args[cnt].end, k);",
          "",
          "[Added Lines]",
          "652:             if (nested)",
          "653:                 pwr = k;",
          "654:             if (cnt < 0 || cnt > 3)",
          "655:                 continue;",
          "658:                 p = parse_tags(render_priv, p, args[cnt].end, k, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "661:                 pwr = k;",
          "662:                 q = p;",
          "663:             }",
          "664:         } else if (complex_tag(\"clip\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:                 nested = true;",
          "",
          "---------------"
        ],
        "libass/ass_parse.h||libass/ass_parse.h": [
          "File: libass/ass_parse.h -> libass/ass_parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: void apply_transition_effects(ASS_Renderer *render_priv, ASS_Event *event);",
          "32: void process_karaoke_effects(ASS_Renderer *render_priv);",
          "33: unsigned get_next_char(ASS_Renderer *render_priv, char **str);",
          "35: int event_has_hard_overrides(char *str);",
          "36: extern void change_alpha(uint32_t *var, int32_t new, double pwr);",
          "37: extern uint32_t mult_alpha(uint32_t a, uint32_t b);",
          "",
          "[Removed Lines]",
          "34: char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr);",
          "",
          "[Added Lines]",
          "34: char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr,",
          "35:                  bool nested);",
          "",
          "---------------"
        ],
        "libass/ass_render.c||libass/ass_render.c": [
          "File: libass/ass_render.c -> libass/ass_render.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1712:         code = 0;",
          "1713:         while (*p) {",
          "1714:             if ((*p == '{') && (q = strchr(p, '}'))) {",
          "1716:                 assert(*p == '}');",
          "1717:                 p++;",
          "1718:             } else if (render_priv->state.drawing_scale) {",
          "",
          "[Removed Lines]",
          "1715:                 p = parse_tags(render_priv, p, q, 1.);",
          "",
          "[Added Lines]",
          "1715:                 p = parse_tags(render_priv, p, q, 1., false);",
          "",
          "---------------"
        ]
      }
    }
  ]
}