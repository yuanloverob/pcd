{
  "cve_id": "CVE-2016-2526",
  "cve_desc": "epan/dissectors/packet-hiqnet.c in the HiQnet dissector in Wireshark 2.0.x before 2.0.2 does not validate the data type, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "69a679cc3a9c087064b7e9521b9e9f3c40dd0b72",
  "patch_info": {
    "commit_hash": "69a679cc3a9c087064b7e9521b9e9f3c40dd0b72",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/69a679cc3a9c087064b7e9521b9e9f3c40dd0b72",
    "files": [
      "epan/dissectors/packet-hiqnet.c"
    ],
    "message": "Prevent out-of-bounds read in hiqnet_display_data.\n\nBug: 11983\nChange-Id: If8b0c4ff45014c0d7480e43afaaf12747590a56f\nReviewed-on: https://code.wireshark.org/review/13370\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c": [
      "File: epan/dissectors/packet-hiqnet.c -> epan/dissectors/packet-hiqnet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include \"config.h\"",
      "27: #include <epan/packet.h>",
      "28: #include \"packet-tcp.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "387: static int hf_hiqnet_devaddr = -1;",
      "388: static int hf_hiqnet_newdevaddr = -1;",
      "390: static const int *hiqnet_flag_fields[] = {",
      "391:     &hf_hiqnet_reqack_flag,",
      "392:     &hf_hiqnet_ack_flag,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "391: static expert_field ei_hiqnet_datatype = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "515: static gint",
      "517:     guint8 datatype = 0;",
      "520:     datatype = tvb_get_guint8(tvb, offset);",
      "522:     offset += 1;",
      "525:         datalen = tvb_get_ntohs(tvb, offset);",
      "526:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datalen, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "",
      "[Removed Lines]",
      "516: hiqnet_display_data(proto_tree *hiqnet_payload_tree, tvbuff_t *tvb, gint offset) {",
      "518:     gint datalen;",
      "521:     proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datatype, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "523:     datalen = hiqnet_datasize_per_type[datatype];",
      "",
      "[Added Lines]",
      "519: hiqnet_display_data(proto_tree *hiqnet_payload_tree, packet_info *pinfo, tvbuff_t *tvb, gint offset) {",
      "521:     gint datalen = 0;",
      "522:     proto_item* ti;",
      "525:     ti = proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datatype, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "527:     if (datatype < sizeof(hiqnet_datasize_per_type)/sizeof(int))",
      "528:         datalen = hiqnet_datasize_per_type[datatype];",
      "529:     else",
      "530:         expert_add_info(pinfo, ti, &ei_hiqnet_datatype);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "697:                     proto_tree_add_item(hiqnet_parameter_tree, hf_hiqnet_paramid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "698:                     offset += 2;",
      "701:                     }",
      "702:                     paramcount -= 1;",
      "703:                 }",
      "",
      "[Removed Lines]",
      "700:                         offset = hiqnet_display_data(hiqnet_parameter_tree, tvb, offset);",
      "",
      "[Added Lines]",
      "707:                         offset = hiqnet_display_data(hiqnet_parameter_tree, pinfo, tvb, offset);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "711:                         hiqnet_payload_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Parameter\");",
      "712:                     proto_tree_add_item(hiqnet_parameter_tree, hf_hiqnet_paramid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "713:                     offset += 2;",
      "715:                     paramcount -= 1;",
      "716:                 }",
      "717:                 break;",
      "",
      "[Removed Lines]",
      "714:                     offset = hiqnet_display_data(hiqnet_parameter_tree, tvb, offset);",
      "",
      "[Added Lines]",
      "721:                     offset = hiqnet_display_data(hiqnet_parameter_tree, pinfo, tvb, offset);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "761:                             hiqnet_payload_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Attribute\");",
      "762:                         proto_tree_add_item(hiqnet_attribute_tree, hf_hiqnet_attrid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "763:                         offset += 2;",
      "765:                         attrcount -= 1;",
      "766:                     }",
      "",
      "[Removed Lines]",
      "764:                         offset = hiqnet_display_data(hiqnet_attribute_tree, tvb, offset);",
      "",
      "[Added Lines]",
      "771:                         offset = hiqnet_display_data(hiqnet_attribute_tree, pinfo, tvb, offset);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "903:                             hiqnet_object_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Parameter\");",
      "904:                         proto_tree_add_item(hiqnet_parameter_tree, hf_hiqnet_paramid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "905:                         offset += 2;",
      "907:                         paramcount -= 1;",
      "908:                     }",
      "909:                     objcount -= 1;",
      "",
      "[Removed Lines]",
      "906:                         offset = hiqnet_display_data(hiqnet_parameter_tree, tvb, offset);",
      "",
      "[Added Lines]",
      "913:                         offset = hiqnet_display_data(hiqnet_parameter_tree, pinfo, tvb, offset);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "973:                         hiqnet_payload_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Attribute\");",
      "974:                     proto_tree_add_item(hiqnet_attribute_tree, hf_hiqnet_attrid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "975:                     offset += 2;",
      "977:                     attrcount -= 1;",
      "978:                 }",
      "979:                 break;",
      "",
      "[Removed Lines]",
      "976:                     offset = hiqnet_display_data(hiqnet_attribute_tree, tvb, offset);",
      "",
      "[Added Lines]",
      "983:                     offset = hiqnet_display_data(hiqnet_attribute_tree, pinfo, tvb, offset);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1651:         &ett_hiqnet_cats",
      "1652:     };",
      "1660:     proto_register_field_array(proto_hiqnet, hf, array_length(hf));",
      "1661:     proto_register_subtree_array(ett, array_length(ett));",
      "1662: }",
      "",
      "[Removed Lines]",
      "1654:     proto_hiqnet = proto_register_protocol (",
      "1658:     );",
      "",
      "[Added Lines]",
      "1661:     static ei_register_info ei[] = {",
      "1662:         { &ei_hiqnet_datatype, { \"hiqnet.datatype.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid datatype\", EXPFILL }},",
      "1663:     };",
      "1665:     expert_module_t* expert_hiqnet;",
      "1667:     proto_hiqnet = proto_register_protocol (\"Harman HiQnet\", \"HiQnet\", \"hiqnet\");",
      "1671:     expert_hiqnet = expert_register_protocol(proto_hiqnet);",
      "1672:     expert_register_field_array(expert_hiqnet, ei, array_length(ei));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "325fb1ae940da14fcd4dd87c542454be09a9399d",
      "candidate_info": {
        "commit_hash": "325fb1ae940da14fcd4dd87c542454be09a9399d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/325fb1ae940da14fcd4dd87c542454be09a9399d",
        "files": [
          "epan/dissectors/packet-hiqnet.c"
        ],
        "message": "Prevent out-of-bounds read in hiqnet_display_data.\n\nBug: 11983\nChange-Id: If8b0c4ff45014c0d7480e43afaaf12747590a56f\nReviewed-on: https://code.wireshark.org/review/13370\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 69a679cc3a9c087064b7e9521b9e9f3c40dd0b72)\nReviewed-on: https://code.wireshark.org/review/13372",
        "before_after_code_files": [
          "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
          ],
          "candidate": [
            "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c": [
          "File: epan/dissectors/packet-hiqnet.c -> epan/dissectors/packet-hiqnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"config.h\"",
          "27: #include <epan/packet.h>",
          "28: #include \"packet-tcp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387: static int hf_hiqnet_devaddr = -1;",
          "388: static int hf_hiqnet_newdevaddr = -1;",
          "390: static const int *hiqnet_flag_fields[] = {",
          "391:     &hf_hiqnet_reqack_flag,",
          "392:     &hf_hiqnet_ack_flag,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: static expert_field ei_hiqnet_datatype = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515: static gint",
          "517:     guint8 datatype = 0;",
          "520:     datatype = tvb_get_guint8(tvb, offset);",
          "522:     offset += 1;",
          "525:         datalen = tvb_get_ntohs(tvb, offset);",
          "526:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datalen, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "516: hiqnet_display_data(proto_tree *hiqnet_payload_tree, tvbuff_t *tvb, gint offset) {",
          "518:     gint datalen;",
          "521:     proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datatype, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "523:     datalen = hiqnet_datasize_per_type[datatype];",
          "",
          "[Added Lines]",
          "519: hiqnet_display_data(proto_tree *hiqnet_payload_tree, packet_info *pinfo, tvbuff_t *tvb, gint offset) {",
          "521:     gint datalen = 0;",
          "522:     proto_item* ti;",
          "525:     ti = proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datatype, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "527:     if (datatype < sizeof(hiqnet_datasize_per_type)/sizeof(int))",
          "528:         datalen = hiqnet_datasize_per_type[datatype];",
          "529:     else",
          "530:         expert_add_info(pinfo, ti, &ei_hiqnet_datatype);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "697:                     proto_tree_add_item(hiqnet_parameter_tree, hf_hiqnet_paramid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "698:                     offset += 2;",
          "701:                     }",
          "702:                     paramcount -= 1;",
          "703:                 }",
          "",
          "[Removed Lines]",
          "700:                         offset = hiqnet_display_data(hiqnet_parameter_tree, tvb, offset);",
          "",
          "[Added Lines]",
          "707:                         offset = hiqnet_display_data(hiqnet_parameter_tree, pinfo, tvb, offset);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "711:                         hiqnet_payload_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Parameter\");",
          "712:                     proto_tree_add_item(hiqnet_parameter_tree, hf_hiqnet_paramid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "713:                     offset += 2;",
          "715:                     paramcount -= 1;",
          "716:                 }",
          "717:                 break;",
          "",
          "[Removed Lines]",
          "714:                     offset = hiqnet_display_data(hiqnet_parameter_tree, tvb, offset);",
          "",
          "[Added Lines]",
          "721:                     offset = hiqnet_display_data(hiqnet_parameter_tree, pinfo, tvb, offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "761:                             hiqnet_payload_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Attribute\");",
          "762:                         proto_tree_add_item(hiqnet_attribute_tree, hf_hiqnet_attrid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "763:                         offset += 2;",
          "765:                         attrcount -= 1;",
          "766:                     }",
          "",
          "[Removed Lines]",
          "764:                         offset = hiqnet_display_data(hiqnet_attribute_tree, tvb, offset);",
          "",
          "[Added Lines]",
          "771:                         offset = hiqnet_display_data(hiqnet_attribute_tree, pinfo, tvb, offset);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "903:                             hiqnet_object_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Parameter\");",
          "904:                         proto_tree_add_item(hiqnet_parameter_tree, hf_hiqnet_paramid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "905:                         offset += 2;",
          "907:                         paramcount -= 1;",
          "908:                     }",
          "909:                     objcount -= 1;",
          "",
          "[Removed Lines]",
          "906:                         offset = hiqnet_display_data(hiqnet_parameter_tree, tvb, offset);",
          "",
          "[Added Lines]",
          "913:                         offset = hiqnet_display_data(hiqnet_parameter_tree, pinfo, tvb, offset);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "973:                         hiqnet_payload_tree, tvb, offset, -1, ett_hiqnet, NULL, \"Attribute\");",
          "974:                     proto_tree_add_item(hiqnet_attribute_tree, hf_hiqnet_attrid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "975:                     offset += 2;",
          "977:                     attrcount -= 1;",
          "978:                 }",
          "979:                 break;",
          "",
          "[Removed Lines]",
          "976:                     offset = hiqnet_display_data(hiqnet_attribute_tree, tvb, offset);",
          "",
          "[Added Lines]",
          "983:                     offset = hiqnet_display_data(hiqnet_attribute_tree, pinfo, tvb, offset);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1651:         &ett_hiqnet_cats",
          "1652:     };",
          "1660:     proto_register_field_array(proto_hiqnet, hf, array_length(hf));",
          "1661:     proto_register_subtree_array(ett, array_length(ett));",
          "1662: }",
          "",
          "[Removed Lines]",
          "1654:     proto_hiqnet = proto_register_protocol (",
          "1658:     );",
          "",
          "[Added Lines]",
          "1661:     static ei_register_info ei[] = {",
          "1662:         { &ei_hiqnet_datatype, { \"hiqnet.datatype.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid datatype\", EXPFILL }},",
          "1663:     };",
          "1665:     expert_module_t* expert_hiqnet;",
          "1667:     proto_hiqnet = proto_register_protocol (\"Harman HiQnet\", \"HiQnet\", \"hiqnet\");",
          "1671:     expert_hiqnet = expert_register_protocol(proto_hiqnet);",
          "1672:     expert_register_field_array(expert_hiqnet, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "818c274721cee622c0b181248d3e17830046e52d",
      "candidate_info": {
        "commit_hash": "818c274721cee622c0b181248d3e17830046e52d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/818c274721cee622c0b181248d3e17830046e52d",
        "files": [
          "epan/dissectors/packet-hiqnet.c"
        ],
        "message": "HiQnet parameters and Wireshark fields have data types; use them.\n\nDon't just display every field that's not a STRING as a lump of hex\nbytes; display them (and make them filterable) according to their data\ntype.\n\nChange-Id: I5717c45bc970616ba9438277e1bcaae46c3cbdf8\nReviewed-on: https://code.wireshark.org/review/13669\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
          ],
          "candidate": [
            "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-hiqnet.c||epan/dissectors/packet-hiqnet.c": [
          "File: epan/dissectors/packet-hiqnet.c -> epan/dissectors/packet-hiqnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: };",
          "154: #endif",
          "156: static const value_string datatypenames[] = {",
          "169:     { 0, NULL }",
          "170: };",
          "",
          "[Removed Lines]",
          "157:     { 0, \"BYTE\" },",
          "158:     { 1, \"UBYTE\" },",
          "159:     { 2, \"WORD\" },",
          "160:     { 3, \"UWORD\" },",
          "161:     { 4, \"LONG\" },",
          "162:     { 5, \"ULONG\" },",
          "163:     { 6, \"FLOAT32\" },",
          "164:     { 7, \"FLOAT64\" },",
          "165:     { 8, \"BLOCK\" },",
          "166:     { 9, \"STRING\" },",
          "167:     { 10, \"LONG64\" },",
          "168:     { 11, \"ULONG64\" },",
          "",
          "[Added Lines]",
          "156: #define HIQNET_DATATYPE_BYTE    0",
          "157: #define HIQNET_DATATYPE_UBYTE   1",
          "158: #define HIQNET_DATATYPE_WORD    2",
          "159: #define HIQNET_DATATYPE_UWORD   3",
          "160: #define HIQNET_DATATYPE_LONG    4",
          "161: #define HIQNET_DATATYPE_ULONG   5",
          "162: #define HIQNET_DATATYPE_FLOAT32 6",
          "163: #define HIQNET_DATATYPE_FLOAT64 7",
          "164: #define HIQNET_DATATYPE_BLOCK   8",
          "165: #define HIQNET_DATATYPE_STRING  9",
          "166: #define HIQNET_DATATYPE_LONG64  10",
          "167: #define HIQNET_DATATYPE_ULONG64 11",
          "170:     { HIQNET_DATATYPE_BYTE,    \"BYTE\" },",
          "171:     { HIQNET_DATATYPE_UBYTE,   \"UBYTE\" },",
          "172:     { HIQNET_DATATYPE_WORD,    \"WORD\" },",
          "173:     { HIQNET_DATATYPE_UWORD,   \"UWORD\" },",
          "174:     { HIQNET_DATATYPE_LONG,    \"LONG\" },",
          "175:     { HIQNET_DATATYPE_ULONG,   \"ULONG\" },",
          "176:     { HIQNET_DATATYPE_FLOAT32, \"FLOAT32\" },",
          "177:     { HIQNET_DATATYPE_FLOAT64, \"FLOAT64\" },",
          "178:     { HIQNET_DATATYPE_BLOCK,   \"BLOCK\" },",
          "179:     { HIQNET_DATATYPE_STRING,  \"STRING\" },",
          "180:     { HIQNET_DATATYPE_LONG64,  \"LONG64\" },",
          "181:     { HIQNET_DATATYPE_ULONG64, \"ULONG64\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:     { 0, NULL }",
          "281: };",
          "285: static int proto_hiqnet = -1;",
          "287: static int hf_hiqnet_version = -1;",
          "",
          "[Removed Lines]",
          "283: static const gint hiqnet_datasize_per_type[] = { 1, 1, 2, 2, 4, 4, 4, 8, -1, -1, 8, 8 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "326: static int hf_hiqnet_flagmask = -1;",
          "327: static int hf_hiqnet_paramcount = -1;",
          "328: static int hf_hiqnet_paramid = -1;",
          "331: static int hf_hiqnet_vdobject = -1;",
          "332: static int hf_hiqnet_subtype = -1;",
          "333: static int hf_hiqnet_sensrate = -1;",
          "",
          "[Removed Lines]",
          "329: static int hf_hiqnet_datatype = -1;",
          "330: static int hf_hiqnet_value = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "340: static int hf_hiqnet_reserved1 = -1;",
          "341: static int hf_hiqnet_attrcount = -1;",
          "342: static int hf_hiqnet_attrid = -1;",
          "343: static int hf_hiqnet_datalen = -1;",
          "345: static int hf_hiqnet_wrkgrppath = -1;",
          "346: static int hf_hiqnet_numvds = -1;",
          "347: static int hf_hiqnet_vdaddr = -1;",
          "",
          "[Removed Lines]",
          "344: static int hf_hiqnet_string = -1;",
          "",
          "[Added Lines]",
          "352: static int hf_hiqnet_datatype = -1;",
          "354: static int hf_hiqnet_byte_value = -1;",
          "355: static int hf_hiqnet_ubyte_value = -1;",
          "356: static int hf_hiqnet_word_value = -1;",
          "357: static int hf_hiqnet_uword_value = -1;",
          "358: static int hf_hiqnet_long_value = -1;",
          "359: static int hf_hiqnet_ulong_value = -1;",
          "360: static int hf_hiqnet_float32_value = -1;",
          "361: static int hf_hiqnet_float64_value = -1;",
          "362: static int hf_hiqnet_block_value = -1;",
          "363: static int hf_hiqnet_string_value = -1;",
          "364: static int hf_hiqnet_long64_value = -1;",
          "365: static int hf_hiqnet_ulong64_value = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "518: static gint",
          "519: hiqnet_display_data(proto_tree *hiqnet_payload_tree, packet_info *pinfo, tvbuff_t *tvb, gint offset) {",
          "522:     proto_item* ti;",
          "526:     offset += 1;",
          "534:         offset += 2;",
          "535:     }",
          "542:     return offset;",
          "543: }",
          "",
          "[Removed Lines]",
          "520:     guint8 datatype = 0;",
          "521:     gint datalen = 0;",
          "524:     datatype = tvb_get_guint8(tvb, offset);",
          "525:     ti = proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datatype, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "527:     if (datatype < sizeof(hiqnet_datasize_per_type)/sizeof(int))",
          "528:         datalen = hiqnet_datasize_per_type[datatype];",
          "529:     else",
          "530:         expert_add_info(pinfo, ti, &ei_hiqnet_datatype);",
          "532:         datalen = tvb_get_ntohs(tvb, offset);",
          "533:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_datalen, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "537:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_string, tvb, offset, datalen, ENC_UCS_2);",
          "538:     } else {",
          "539:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_value, tvb, offset, datalen, ENC_NA);",
          "540:     }",
          "541:     offset += datalen;",
          "",
          "[Added Lines]",
          "541:     guint32 datatype;",
          "542:     guint32 datalen;",
          "545:     ti = proto_tree_add_item_ret_uint(hiqnet_payload_tree, hf_hiqnet_datatype, tvb, offset, 1, ENC_BIG_ENDIAN, &datatype);",
          "547:     switch (datatype) {",
          "549:     case HIQNET_DATATYPE_BYTE:",
          "550:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_byte_value, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "551:         offset += 1;",
          "552:         break;",
          "554:     case HIQNET_DATATYPE_UBYTE:",
          "555:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_ubyte_value, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "556:         offset += 1;",
          "557:         break;",
          "559:     case HIQNET_DATATYPE_WORD:",
          "560:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_word_value, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "562:         break;",
          "564:     case HIQNET_DATATYPE_UWORD:",
          "565:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_uword_value, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "566:         offset += 2;",
          "567:         break;",
          "569:     case HIQNET_DATATYPE_LONG:",
          "570:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_long_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "571:         offset += 4;",
          "572:         break;",
          "574:     case HIQNET_DATATYPE_ULONG:",
          "575:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_ulong_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "576:         offset += 4;",
          "577:         break;",
          "579:     case HIQNET_DATATYPE_FLOAT32:",
          "580:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_float32_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "581:         offset += 4;",
          "582:         break;",
          "584:     case HIQNET_DATATYPE_FLOAT64:",
          "585:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_float64_value, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "586:         offset += 8;",
          "587:         break;",
          "589:     case HIQNET_DATATYPE_BLOCK:",
          "590:         proto_tree_add_item_ret_uint(hiqnet_payload_tree, hf_hiqnet_datalen, tvb, offset, 2, ENC_BIG_ENDIAN, &datalen);",
          "591:         offset += 2;",
          "592:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_block_value, tvb, offset, datalen, ENC_NA);",
          "593:         offset += datalen;",
          "594:         break;",
          "596:     case HIQNET_DATATYPE_STRING:",
          "597:         proto_tree_add_item_ret_uint(hiqnet_payload_tree, hf_hiqnet_datalen, tvb, offset, 2, ENC_BIG_ENDIAN, &datalen);",
          "598:         offset += 2;",
          "599:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_string_value, tvb, offset, datalen, ENC_UCS_2|ENC_BIG_ENDIAN);",
          "600:         offset += datalen;",
          "601:         break;",
          "603:     case HIQNET_DATATYPE_LONG64:",
          "604:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_long64_value, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "605:         offset += 8;",
          "606:         break;",
          "608:     case HIQNET_DATATYPE_ULONG64:",
          "609:         proto_tree_add_item(hiqnet_payload_tree, hf_hiqnet_ulong64_value, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "610:         offset += 8;",
          "611:         break;",
          "613:     default:",
          "615:         expert_add_info(pinfo, ti, &ei_hiqnet_datatype);",
          "616:         break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656:             hiqnet_error_tree = proto_tree_add_subtree(hiqnet_header_tree, tvb, offset, 2, ett_hiqnet, NULL, \"Error\");",
          "657:             proto_tree_add_item(hiqnet_error_tree, hf_hiqnet_errcode, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "658:             offset += 1;",
          "660:         }",
          "661:         if (flags & HIQNET_MULTIPART_FLAG) {",
          "",
          "[Removed Lines]",
          "659:             proto_tree_add_item(hiqnet_error_tree, hf_hiqnet_errstr, tvb, offset, headerlen - offset, ENC_UCS_2);",
          "",
          "[Added Lines]",
          "735:             proto_tree_add_item(hiqnet_error_tree, hf_hiqnet_errstr, tvb, offset, headerlen - offset, ENC_UCS_2|ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1275:                 NULL, 0x0,",
          "1276:                 NULL, HFILL }",
          "1277:         },",
          "1290:         { &hf_hiqnet_vdobject,",
          "1291:             { \"Virtual Device Object\", \"hiqnet.vdobject\",",
          "1292:                 FT_BYTES, BASE_NONE,",
          "",
          "[Removed Lines]",
          "1278:         { &hf_hiqnet_datatype,",
          "1279:             { \"Data type\", \"hiqnet.datatype\",",
          "1280:                 FT_UINT8, BASE_HEX,",
          "1281:                 VALS(datatypenames), 0x0,",
          "1282:                 NULL, HFILL }",
          "1283:         },",
          "1284:         { &hf_hiqnet_value,",
          "1285:             { \"Value\", \"hiqnet.value\",",
          "1286:                 FT_BYTES, BASE_NONE,",
          "1287:                 NULL, 0x0,",
          "1288:                 NULL, HFILL }",
          "1289:         },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1367:                 VALS(device_attributes_names), 0x0,",
          "1368:                 NULL, HFILL }",
          "1369:         },",
          "1370:         { &hf_hiqnet_datalen,",
          "1371:             { \"Data length\", \"hiqnet.datalen\",",
          "1372:                 FT_UINT16, BASE_DEC,",
          "1373:                 NULL, 0x0,",
          "1374:                 NULL, HFILL }",
          "1375:         },",
          "1378:                 FT_STRINGZ, STR_UNICODE,",
          "1379:                 NULL, 0x0,",
          "1380:                 NULL, HFILL }",
          "1381:         },",
          "1382:         { &hf_hiqnet_wrkgrppath,",
          "1383:             { \"Workgroup Path\", \"hiqnet.wrkgrppath\",",
          "1384:                 FT_STRINGZ, STR_UNICODE,",
          "",
          "[Removed Lines]",
          "1376:         { &hf_hiqnet_string,",
          "1377:             { \"String\", \"hiqnet.string\",",
          "",
          "[Added Lines]",
          "1434:         { &hf_hiqnet_datatype,",
          "1435:             { \"Data type\", \"hiqnet.datatype\",",
          "1436:                 FT_UINT8, BASE_HEX,",
          "1437:                 VALS(datatypenames), 0x0,",
          "1438:                 NULL, HFILL }",
          "1439:         },",
          "1446:         { &hf_hiqnet_byte_value,",
          "1447:             { \"Value\", \"hiqnet.byte_value\",",
          "1448:                 FT_INT8, BASE_DEC,",
          "1449:                 NULL, 0x0,",
          "1450:                 NULL, HFILL }",
          "1451:         },",
          "1452:         { &hf_hiqnet_ubyte_value,",
          "1453:             { \"Value\", \"hiqnet.ubyte_value\",",
          "1454:                 FT_UINT8, BASE_DEC_HEX,",
          "1455:                 NULL, 0x0,",
          "1456:                 NULL, HFILL }",
          "1457:         },",
          "1458:         { &hf_hiqnet_word_value,",
          "1459:             { \"Value\", \"hiqnet.word_value\",",
          "1460:                 FT_INT16, BASE_DEC,",
          "1461:                 NULL, 0x0,",
          "1462:                 NULL, HFILL }",
          "1463:         },",
          "1464:         { &hf_hiqnet_uword_value,",
          "1465:             { \"Value\", \"hiqnet.uword_value\",",
          "1466:                 FT_UINT16, BASE_DEC_HEX,",
          "1467:                 NULL, 0x0,",
          "1468:                 NULL, HFILL }",
          "1469:         },",
          "1470:         { &hf_hiqnet_long_value,",
          "1471:             { \"Value\", \"hiqnet.long_value\",",
          "1472:                 FT_INT32, BASE_DEC,",
          "1473:                 NULL, 0x0,",
          "1474:                 NULL, HFILL }",
          "1475:         },",
          "1476:         { &hf_hiqnet_ulong_value,",
          "1477:             { \"Value\", \"hiqnet.ulong_value\",",
          "1478:                 FT_UINT32, BASE_DEC_HEX,",
          "1479:                 NULL, 0x0,",
          "1480:                 NULL, HFILL }",
          "1481:         },",
          "1482:         { &hf_hiqnet_float32_value,",
          "1483:             { \"Value\", \"hiqnet.float32_value\",",
          "1484:                 FT_FLOAT, BASE_NONE,",
          "1485:                 NULL, 0x0,",
          "1486:                 NULL, HFILL }",
          "1487:         },",
          "1488:         { &hf_hiqnet_float64_value,",
          "1489:             { \"Value\", \"hiqnet.float64_value\",",
          "1490:                 FT_DOUBLE, BASE_NONE,",
          "1491:                 NULL, 0x0,",
          "1492:                 NULL, HFILL }",
          "1493:         },",
          "1494:         { &hf_hiqnet_block_value,",
          "1495:             { \"Value\", \"hiqnet.block_value\",",
          "1496:                 FT_BYTES, BASE_NONE,",
          "1497:                 NULL, 0x0,",
          "1498:                 NULL, HFILL }",
          "1499:         },",
          "1501:         { &hf_hiqnet_string_value,",
          "1502:             { \"Value\", \"hiqnet.string_value\",",
          "1507:         { &hf_hiqnet_long64_value,",
          "1508:             { \"Value\", \"hiqnet.long64_value\",",
          "1509:                 FT_INT64, BASE_DEC,",
          "1510:                 NULL, 0x0,",
          "1511:                 NULL, HFILL }",
          "1512:         },",
          "1513:         { &hf_hiqnet_ulong64_value,",
          "1514:             { \"Value\", \"hiqnet.ulong64_value\",",
          "1515:                 FT_UINT64 , BASE_DEC_HEX,",
          "1516:                 NULL, 0x0,",
          "1517:                 NULL, HFILL }",
          "1518:         },",
          "",
          "---------------"
        ]
      }
    }
  ]
}