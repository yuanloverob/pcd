{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83c5bb997a496d00f50b63a9af8feccb33a2b138",
      "candidate_info": {
        "commit_hash": "83c5bb997a496d00f50b63a9af8feccb33a2b138",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83c5bb997a496d00f50b63a9af8feccb33a2b138",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Mark rowid-comparison opcodes as never-null for VDBE coverage tracking purposes.\n\nFossilOrigin-Name: a69bb4f257500e40ef4056d5628ef25266def5bcef07eebdb471a79fffe80237",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f56d305a7bad6608d51d8c8cef417ddb66cff50f0a75d28554ea669e47f3d90d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1578:   if( pMWin->eExclude==TK_CURRENT ){",
          "1579:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1581:   }else if( pMWin->eExclude!=TK_NO ){",
          "1582:     int addr;",
          "1583:     int addrEq = 0;",
          "",
          "[Removed Lines]",
          "1580:     VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1580:     VdbeCoverageNeverNull(v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1588:     }",
          "1589:     if( pMWin->eExclude==TK_TIES ){",
          "1590:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, 0, regRowid);",
          "1592:     }",
          "1593:     if( pKeyInfo ){",
          "1594:       windowReadPeerValues(p, csr, regPeer);",
          "",
          "[Removed Lines]",
          "1591:       VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1591:       VdbeCoverageNeverNull(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2526:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2527:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2528:   addrNe = sqlite3VdbeAddOp3(v, OP_Ne, pMWin->regOne, 0, regRowid);",
          "2532:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "2529:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2529:   VdbeCoverageNeverNull(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
      "candidate_info": {
        "commit_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97afa309d7bf31ec6856a74c13d41f118c780809",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "Fix another pattern for which the LIKE optimization does not work for a non-TEXT affinity.  Case found by Manuel Rigger.\n\nFossilOrigin-Name: 740201107ae802c12b678e388ea524db01ad0eb70601c78490ad63eae0fe6cf1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef0015fde4c87e992ffd3d7dea8586951bdd65ff98d30d436b126b85b1cc9c74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (zNew[0]+1=='0' && iTo==1)",
          "",
          "[Added Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: }",
          "181: # 2019-05-01",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "",
          "[Removed Lines]",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "",
          "[Added Lines]",
          "182: # another case of the above reported on the mailing list by Manuel Rigger.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "191: # 2019-02-27",
          "192: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "193: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: # 2019-05-08",
          "192: # Yet another case for the above from Manuel Rigger.",
          "193: #",
          "194: do_execsql_test like3-5.400 {",
          "195:   DROP TABLE IF EXISTS t0;",
          "196:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "197:   INSERT INTO t0(c0) VALUES ('./');",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a3884efae47b8f762fdd7c3b0751ddca8e41243",
      "candidate_info": {
        "commit_hash": "8a3884efae47b8f762fdd7c3b0751ddca8e41243",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a3884efae47b8f762fdd7c3b0751ddca8e41243",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Much faster implementation of applyNumericAffinity() by avoiding some unnecessary calls to sqlite3Atoi64().\n\nFossilOrigin-Name: c1d8a3f65490eef2216f360d708b1746cbaa6dadce42c0950dc8e09b9ab28ee2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f9e85e6c79162081f8f512d22951931a89d157a32b24afdc48b7eb865379abe7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175: int sqlite3FixExpr(DbFixer*, Expr*);",
          "4176: int sqlite3FixExprList(DbFixer*, ExprList*);",
          "4177: int sqlite3FixTriggerStep(DbFixer*, TriggerStep*);",
          "4178: int sqlite3AtoF(const char *z, double*, int, u8);",
          "4179: int sqlite3GetInt32(const char *, int*);",
          "4180: int sqlite3Atoi(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178: int sqlite3RealSameAsInt(double,sqlite3_int64);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     incr = 2;",
          "437:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "438:     for(i=3-enc; i<length && z[i]==0; i+=2){}",
          "440:     zEnd = &z[i^1];",
          "441:     z += (enc&1);",
          "442:   }",
          "",
          "[Removed Lines]",
          "439:     nonNum = i<length;",
          "",
          "[Added Lines]",
          "444:     if( i<length ) eType = -100;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "469:   if( *z=='.' ){",
          "470:     z+=incr;",
          "473:     while( z<zEnd && sqlite3Isdigit(*z) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:     eType++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:   if( *z=='e' || *z=='E' ){",
          "486:     z+=incr;",
          "487:     eValid = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     eType++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "587: #else",
          "588:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "593:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   return pCx;",
          "277: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: static void applyNumericAffinity(Mem *pRec, int bTryForInt){",
          "295:   double rValue;",
          "297:   u8 enc = pRec->enc;",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "302:     pRec->flags |= MEM_Int;",
          "303:   }else{",
          "304:     pRec->u.r = rValue;",
          "",
          "[Removed Lines]",
          "296:   i64 iValue;",
          "299:   if( sqlite3AtoF(pRec->z, &rValue, pRec->n, enc)==0 ) return;",
          "300:   if( 0==sqlite3Atoi64(pRec->z, &iValue, pRec->n, enc) ){",
          "301:     pRec->u.i = iValue;",
          "",
          "[Added Lines]",
          "321:   int rc;",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "324:   if( rc==0 ) return;",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   double r2 = (double)i;",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "703: }",
          "",
          "[Removed Lines]",
          "700: static int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "",
          "[Added Lines]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e11892db8919592352b20228b9c9c36f31bf1a8",
      "candidate_info": {
        "commit_hash": "6e11892db8919592352b20228b9c9c36f31bf1a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e11892db8919592352b20228b9c9c36f31bf1a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/where.c",
          "src/window.c",
          "test/nulls1.test",
          "tool/mkkeywordhash.c"
        ],
        "message": "Experimental implementation of NULLS FIRST/LAST. This branch still has problems - the most significant of which is that ORDER BY clauses with a non-default NULLS FIRST/LAST qualifier can never use an index.\n\nFossilOrigin-Name: 07babb0f897fc8c9cb5b30481899c32fdd743f3f3ca508d8d957826252107dd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "test/nulls1.test||test/nulls1.test",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1443:     pTab->keyConf = (u8)onError;",
          "1444:     assert( autoInc==0 || autoInc==1 );",
          "1445:     pTab->tabFlags |= autoInc*TF_Autoincrement;",
          "1447:   }else if( autoInc ){",
          "1448: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "1449:     sqlite3ErrorMsg(pParse, \"AUTOINCREMENT is only allowed on an \"",
          "",
          "[Removed Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortOrder;",
          "",
          "[Added Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1894:     if( IN_RENAME_OBJECT ){",
          "1895:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1896:     }",
          "1898:     assert( pParse->pNewTable==pTab );",
          "1899:     pTab->iPKey = -1;",
          "1900:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "",
          "[Removed Lines]",
          "1897:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "",
          "[Added Lines]",
          "1897:     pList->a[0].sortFlags = pParse->iPkSortOrder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3368:               sqlite3ExprAlloc(db, TK_ID, &prevCol, 0));",
          "3369:     if( pList==0 ) goto exit_create_index;",
          "3370:     assert( pList->nExpr==1 );",
          "3372:   }else{",
          "3373:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3374:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "[Removed Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "",
          "[Added Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3486:       goto exit_create_index;",
          "3487:     }",
          "3488:     pIndex->azColl[i] = zColl;",
          "3490:     pIndex->aSortOrder[i] = (u8)requestedSortOrder;",
          "3491:   }",
          "",
          "[Removed Lines]",
          "3489:     requestedSortOrder = pListItem->sortOrder & sortOrderMask;",
          "",
          "[Added Lines]",
          "3489:     requestedSortOrder = pListItem->sortFlags & sortOrderMask;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4704:       const char *zColl = pIdx->azColl[i];",
          "4705:       pKey->aColl[i] = zColl==sqlite3StrBINARY ? 0 :",
          "4706:                         sqlite3LocateCollSeq(pParse, zColl);",
          "4708:     }",
          "4709:     if( pParse->nErr ){",
          "4710:       assert( pParse->rc==SQLITE_ERROR_MISSING_COLLSEQ );",
          "",
          "[Removed Lines]",
          "4707:       pKey->aSortOrder[i] = pIdx->aSortOrder[i];",
          "",
          "[Added Lines]",
          "4707:       pKey->aSortFlags[i] = pIdx->aSortOrder[i];",
          "4708:       assert( 0==(pKey->aSortFlags[i] & KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:     }",
          "1405:     pItem->zName = sqlite3DbStrDup(db, pOldItem->zName);",
          "1406:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1408:     pItem->done = 0;",
          "1409:     pItem->bSpanIsTab = pOldItem->bSpanIsTab;",
          "1410:     pItem->bSorterRef = pOldItem->bSorterRef;",
          "",
          "[Removed Lines]",
          "1407:     pItem->sortOrder = pOldItem->sortOrder;",
          "",
          "[Added Lines]",
          "1407:     pItem->sortFlags = pOldItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1661:   if( p==0 ) return;",
          "1663:   assert( p->nExpr>0 );",
          "1667:   }",
          "1669: }",
          "",
          "[Removed Lines]",
          "1660: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){",
          "1662:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC>=0 && SQLITE_SO_DESC>0 );",
          "1664:   if( iSortOrder<0 ){",
          "1665:     assert( p->a[p->nExpr-1].sortOrder==SQLITE_SO_ASC );",
          "1666:     return;",
          "1668:   p->a[p->nExpr-1].sortOrder = (u8)iSortOrder;",
          "",
          "[Added Lines]",
          "1660: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1664:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC==0 && SQLITE_SO_DESC>0 );",
          "1665:   assert( iSortOrder==SQLITE_SO_UNDEFINED",
          "1666:        || iSortOrder==SQLITE_SO_ASC",
          "1667:        || iSortOrder==SQLITE_SO_DESC",
          "1668:   );",
          "1669:   assert( eNulls==SQLITE_SO_UNDEFINED",
          "1670:        || eNulls==SQLITE_SO_ASC",
          "1671:        || eNulls==SQLITE_SO_DESC",
          "1672:   );",
          "1674:   if( iSortOrder==SQLITE_SO_UNDEFINED ) iSortOrder = SQLITE_SO_ASC;",
          "1675:   p->a[p->nExpr-1].sortFlags = (u8)iSortOrder;",
          "1676:   if( eNulls!=SQLITE_SO_UNDEFINED && iSortOrder!=eNulls ){",
          "1677:     p->a[p->nExpr-1].sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4909:   for(i=0; i<pA->nExpr; i++){",
          "4910:     Expr *pExprA = pA->a[i].pExpr;",
          "4911:     Expr *pExprB = pB->a[i].pExpr;",
          "4913:     if( sqlite3ExprCompare(0, pExprA, pExprB, iTab) ) return 1;",
          "4914:   }",
          "4915:   return 0;",
          "",
          "[Removed Lines]",
          "4912:     if( pA->a[i].sortOrder!=pB->a[i].sortOrder ) return 1;",
          "",
          "[Added Lines]",
          "4922:     if( pA->a[i].sortFlags!=pB->a[i].sortFlags ) return 1;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   IGNORE IMMEDIATE INITIALLY INSTEAD LIKE_KW MATCH NO PLAN",
          "212:   QUERY KEY OF OFFSET PRAGMA RAISE RECURSIVE RELEASE REPLACE RESTRICT ROW ROWS",
          "213:   ROLLBACK SAVEPOINT TEMP TRIGGER VACUUM VIEW VIRTUAL WITH WITHOUT",
          "214: %ifdef SQLITE_OMIT_COMPOUND_SELECT",
          "215:   EXCEPT INTERSECT UNION",
          "216: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   NULLS FIRST LAST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782: orderby_opt(A) ::= .                          {A = 0;}",
          "783: orderby_opt(A) ::= ORDER BY sortlist(X).      {A = X;}",
          "785:   A = sqlite3ExprListAppend(pParse,A,Y);",
          "787: }",
          "791: }",
          "793: %type sortorder {int}",
          "",
          "[Removed Lines]",
          "784: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z). {",
          "786:   sqlite3ExprListSetSortOrder(A,Z);",
          "788: sortlist(A) ::= expr(Y) sortorder(Z). {",
          "790:   sqlite3ExprListSetSortOrder(A,Z);",
          "",
          "[Added Lines]",
          "785: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z) nulls(X). {",
          "787:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "789: sortlist(A) ::= expr(Y) sortorder(Z) nulls(X). {",
          "791:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: sortorder(A) ::= DESC.          {A = SQLITE_SO_DESC;}",
          "797: sortorder(A) ::= .              {A = SQLITE_SO_UNDEFINED;}",
          "799: %type groupby_opt {ExprList*}",
          "800: %destructor groupby_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "801: groupby_opt(A) ::= .                      {A = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800: %type nulls {int}",
          "801: nulls(A) ::= NULLS FIRST.       {A = SQLITE_SO_ASC;}",
          "802: nulls(A) ::= NULLS LAST.        {A = SQLITE_SO_DESC;}",
          "803: nulls(A) ::= .                  {A = SQLITE_SO_UNDEFINED;}",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1275:   int nExtra = (N+X)*(sizeof(CollSeq*)+1) - sizeof(CollSeq*);",
          "1276:   KeyInfo *p = sqlite3DbMallocRawNN(db, sizeof(KeyInfo) + nExtra);",
          "1277:   if( p ){",
          "1279:     p->nKeyField = (u16)N;",
          "1280:     p->nAllField = (u16)(N+X);",
          "1281:     p->enc = ENC(db);",
          "",
          "[Removed Lines]",
          "1278:     p->aSortOrder = (u8*)&p->aColl[N+X];",
          "",
          "[Added Lines]",
          "1278:     p->aSortFlags = (u8*)&p->aColl[N+X];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:     assert( sqlite3KeyInfoIsWriteable(pInfo) );",
          "1353:     for(i=iStart, pItem=pList->a+iStart; i<nExpr; i++, pItem++){",
          "1354:       pInfo->aColl[i-iStart] = sqlite3ExprNNCollSeq(pParse, pItem->pExpr);",
          "1356:     }",
          "1357:   }",
          "1358:   return pInfo;",
          "",
          "[Removed Lines]",
          "1355:       pInfo->aSortOrder[i-iStart] = pItem->sortOrder;",
          "",
          "[Added Lines]",
          "1355:       pInfo->aSortFlags[i-iStart] = pItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2253:       }",
          "2254:       assert( sqlite3KeyInfoIsWriteable(pRet) );",
          "2255:       pRet->aColl[i] = pColl;",
          "2257:     }",
          "2258:   }",
          "",
          "[Removed Lines]",
          "2256:       pRet->aSortOrder[i] = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "2256:       pRet->aSortFlags[i] = pOrderBy->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3228:       assert( sqlite3KeyInfoIsWriteable(pKeyDup) );",
          "3229:       for(i=0; i<nExpr; i++){",
          "3230:         pKeyDup->aColl[i] = multiSelectCollSeq(pParse, p, i);",
          "3232:       }",
          "3233:     }",
          "3234:   }",
          "",
          "[Removed Lines]",
          "3231:         pKeyDup->aSortOrder[i] = 0;",
          "",
          "[Added Lines]",
          "3231:         pKeyDup->aSortFlags[i] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4425:   }",
          "4427:   assert( pOrderBy!=0 || db->mallocFailed );",
          "4429:   return eRet;",
          "4430: }",
          "",
          "[Removed Lines]",
          "4428:   if( pOrderBy ) pOrderBy->a[0].sortOrder = sortOrder;",
          "",
          "[Added Lines]",
          "4428:   if( pOrderBy ) pOrderBy->a[0].sortFlags = sortOrder;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2141: #define KEYINFO_ORDER_DESC    0x01",
          "2142: #define KEYINFO_ORDER_BIGNULL 0x02",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3881: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "3882: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3883: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3885: void sqlite3ExprListSetName(Parse*,ExprList*,Token*,int);",
          "3886: void sqlite3ExprListSetSpan(Parse*,ExprList*,const char*,const char*);",
          "3887: void sqlite3ExprListDelete(sqlite3*, ExprList*);",
          "",
          "[Removed Lines]",
          "3884: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Added Lines]",
          "3887: void sqlite3ExprListSetSortOrder(ExprList*,int,int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:     REGISTER_TRACE(p2+idx, &aMem[p2+idx]);",
          "2228:     assert( i<pKeyInfo->nKeyField );",
          "2229:     pColl = pKeyInfo->aColl[i];",
          "2231:     iCompare = sqlite3MemCompare(&aMem[p1+idx], &aMem[p2+idx], pColl);",
          "2232:     if( iCompare ){",
          "2233:       if( bRev ) iCompare = -iCompare;",
          "2234:       break;",
          "2235:     }",
          "",
          "[Removed Lines]",
          "2230:     bRev = pKeyInfo->aSortOrder[i];",
          "",
          "[Added Lines]",
          "2230:     bRev = (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC);",
          "2233:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "2234:        && ((aMem[p1+idx].flags & MEM_Null) || (aMem[p2+idx].flags & MEM_Null))",
          "2235:       ){",
          "2236:         iCompare = -iCompare;",
          "2237:       }",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:     case P4_KEYINFO: {",
          "1494:       int j;",
          "1495:       KeyInfo *pKeyInfo = pOp->p4.pKeyInfo;",
          "1497:       sqlite3_str_appendf(&x, \"k(%d\", pKeyInfo->nKeyField);",
          "1498:       for(j=0; j<pKeyInfo->nKeyField; j++){",
          "1499:         CollSeq *pColl = pKeyInfo->aColl[j];",
          "1500:         const char *zColl = pColl ? pColl->zName : \"\";",
          "1501:         if( strcmp(zColl, \"BINARY\")==0 ) zColl = \"B\";",
          "1504:       }",
          "1505:       sqlite3_str_append(&x, \")\", 1);",
          "1506:       break;",
          "",
          "[Removed Lines]",
          "1496:       assert( pKeyInfo->aSortOrder!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s\",",
          "1503:                pKeyInfo->aSortOrder[j] ? \"-\" : \"\", zColl);",
          "",
          "[Added Lines]",
          "1496:       assert( pKeyInfo->aSortFlags!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s%s\",",
          "1503:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_DESC) ? \"-\" : \"\",",
          "1504:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_BIGNULL)? \"N.\" : \"\",",
          "1505:                zColl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3813:   p = (UnpackedRecord *)sqlite3DbMallocRaw(pKeyInfo->db, nByte);",
          "3814:   if( !p ) return 0;",
          "3815:   p->aMem = (Mem*)&((char*)p)[ROUND8(sizeof(UnpackedRecord))];",
          "3817:   p->pKeyInfo = pKeyInfo;",
          "3818:   p->nField = pKeyInfo->nKeyField + 1;",
          "3819:   return p;",
          "",
          "[Removed Lines]",
          "3816:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3818:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3912:   if( szHdr1>98307 ) return SQLITE_CORRUPT;",
          "3913:   d1 = szHdr1;",
          "3914:   assert( pKeyInfo->nAllField>=pPKey2->nField || CORRUPT_DB );",
          "3916:   assert( pKeyInfo->nKeyField>0 );",
          "3917:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "3918:   do{",
          "",
          "[Removed Lines]",
          "3915:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3917:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3943:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "3944:     if( rc!=0 ){",
          "3948:       }",
          "3949:       goto debugCompareEnd;",
          "",
          "[Removed Lines]",
          "3946:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Added Lines]",
          "3948:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "3949:        && ((mem1.flags & MEM_Null) || (pPKey2->aMem[i].flags & MEM_Null))",
          "3950:       ){",
          "3951:         rc = -rc;",
          "3952:       }",
          "3953:       if( pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4320:   assert( pPKey2->pKeyInfo->nAllField>=pPKey2->nField",
          "4321:        || CORRUPT_DB );",
          "4323:   assert( pPKey2->pKeyInfo->nKeyField>0 );",
          "4324:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "4325:   do{",
          "",
          "[Removed Lines]",
          "4322:   assert( pPKey2->pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "4329:   assert( pPKey2->pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4442:     }",
          "4444:     if( rc!=0 ){",
          "4447:       }",
          "4448:       assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) );",
          "",
          "[Removed Lines]",
          "4445:       if( pPKey2->pKeyInfo->aSortOrder[i] ){",
          "4446:         rc = -rc;",
          "",
          "[Added Lines]",
          "4452:       int sortFlags = pPKey2->pKeyInfo->aSortFlags[i];",
          "4453:       if( sortFlags ){",
          "4454:         if( (sortFlags & KEYINFO_ORDER_BIGNULL)==0",
          "4455:          || ((sortFlags & KEYINFO_ORDER_DESC)",
          "4456:            !=(serial_type==0 || (pRhs->flags&MEM_Null)))",
          "4457:         ){",
          "4458:           rc = -rc;",
          "4459:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4661:   if( p->pKeyInfo->nAllField<=13 ){",
          "4662:     int flags = p->aMem[0].flags;",
          "4664:       p->r1 = 1;",
          "4665:       p->r2 = -1;",
          "4666:     }else{",
          "",
          "[Removed Lines]",
          "4663:     if( p->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "4676:     if( p->pKeyInfo->aSortFlags[0] ){",
          "4677:       if( p->pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL ){",
          "4678:         return sqlite3VdbeRecordCompare;",
          "4679:       }",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:       );",
          "830:     }",
          "831:   }else{",
          "833:       res = res * -1;",
          "834:     }",
          "835:   }",
          "",
          "[Removed Lines]",
          "832:     if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "832:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "833:     if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:           pTask, pbKey2Cached, pKey1, nKey1, pKey2, nKey2",
          "898:       );",
          "899:     }",
          "901:     res = res * -1;",
          "902:   }",
          "",
          "[Removed Lines]",
          "900:   }else if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "901:   }else if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "902:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     if( pKeyInfo->nAllField<13",
          "1014:      && (pKeyInfo->aColl[0]==0 || pKeyInfo->aColl[0]==db->pDfltColl)",
          "1015:     ){",
          "1016:       pSorter->typeMask = SORTER_TYPE_INTEGER | SORTER_TYPE_TEXT;",
          "1017:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1017:      && (pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL)==0",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:   for(i=0; i<nOrderBy; i++){",
          "1032:     Expr *pExpr = pOrderBy->a[i].pExpr;",
          "1033:     pIdxOrderBy[i].iColumn = pExpr->iColumn;",
          "1035:   }",
          "",
          "[Removed Lines]",
          "1034:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "1034:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3836:               continue;",
          "3837:             }",
          "3838:           }",
          "3839:           if( iColumn!=XN_ROWID ){",
          "3840:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3841:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3839:           if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3849:         if( isMatch && (wctrlFlags & WHERE_GROUPBY)==0 ){",
          "3852:           if( revSet ){",
          "3854:           }else{",
          "3856:             if( rev ) *pRevMask |= MASKBIT(iLoop);",
          "3857:             revSet = 1;",
          "3858:           }",
          "",
          "[Removed Lines]",
          "3853:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortOrder ) isMatch = 0;",
          "3855:             rev = revIdx ^ pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "3853:           assert( (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL)==0 );",
          "3855:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortFlags ) isMatch = 0;",
          "3857:             rev = revIdx ^ pOrderBy->a[i].sortFlags;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "889:       }",
          "890:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "892:     }",
          "893:   }",
          "894:   return pList;",
          "",
          "[Removed Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortOrder = pAppend->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:       pWin->regApp = pParse->nMem+1;",
          "1297:       pParse->nMem += 3;",
          "1298:       if( pKeyInfo && pWin->pFunc->zName[1]=='i' ){",
          "1301:       }",
          "1302:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pWin->csrApp, 2);",
          "1303:       sqlite3VdbeAppendP4(v, pKeyInfo, P4_KEYINFO);",
          "",
          "[Removed Lines]",
          "1299:         assert( pKeyInfo->aSortOrder[0]==0 );",
          "1300:         pKeyInfo->aSortOrder[0] = 1;",
          "",
          "[Added Lines]",
          "1299:         assert( pKeyInfo->aSortFlags[0]==0 );",
          "1300:         pKeyInfo->aSortFlags[0] = KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1861:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1862:   assert( p->pMWin->pOrderBy && p->pMWin->pOrderBy->nExpr==1 );",
          "1864:     switch( op ){",
          "1865:       case OP_Ge: op = OP_Le; break;",
          "1866:       case OP_Gt: op = OP_Lt; break;",
          "",
          "[Removed Lines]",
          "1863:   if( p->pMWin->pOrderBy->a[0].sortOrder ){",
          "",
          "[Added Lines]",
          "1863:   if( p->pMWin->pOrderBy->a[0].sortFlags & KEYINFO_ORDER_DESC ){",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 August 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix nulls1",
          "22: do_execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t3;",
          "24:   CREATE TABLE t3(a INTEGER);",
          "25:   INSERT INTO t3 VALUES(NULL), (10), (30), (20), (NULL);",
          "26: } {}",
          "28: for {set a 0} {$a < 2} {incr a} {",
          "29:   foreach {tn limit} {",
          "30:     1 \"\"",
          "31:     2 \"LIMIT 10\"",
          "32:   } {",
          "33:     do_execsql_test 1.$a.$tn.1 \"",
          "34:       SELECT a FROM t3 ORDER BY a nULLS FIRST $limit",
          "35:     \" {{}   {}   10   20   30}",
          "37:     do_execsql_test 1.$a.$tn.2 \"",
          "38:       SELECT a FROM t3 ORDER BY a nULLS LAST $limit",
          "39:     \" {10   20   30   {}   {}}",
          "41:     do_execsql_test 1.$a.$tn.3 \"",
          "42:       SELECT a FROM t3 ORDER BY a DESC nULLS FIRST $limit",
          "43:     \" {{}   {}   30   20   10}",
          "45:     do_execsql_test 1.$a.$tn.4 \"",
          "46:       SELECT a FROM t3 ORDER BY a DESC nULLS LAST $limit",
          "47:     \" {30   20   10   {}   {}}",
          "48:   }",
          "50:   catchsql { CREATE INDEX i1 ON t3(a) }",
          "51: }",
          "53: finish_test",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "211:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "212:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "213:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "214:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "215:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "236:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "237:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "238:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "239:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "240:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "246:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "247:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "248:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "249:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "250:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6813350966beba60f4ede1a4e25372fae926ca3d",
      "candidate_info": {
        "commit_hash": "6813350966beba60f4ede1a4e25372fae926ca3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6813350966beba60f4ede1a4e25372fae926ca3d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corrupt2.test",
          "test/corruptD.test",
          "test/corruptK.test"
        ],
        "message": "Fix test cases.  Avoid unnecessary tests for MemPage.nFree less than zero.\n\nFossilOrigin-Name: 480a5090befdc29eaeb6f0b22831c980d6ee92438d9b2e766de68b037ded38b8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corrupt2.test||test/corrupt2.test",
          "test/corruptD.test||test/corruptD.test",
          "test/corruptK.test||test/corruptK.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7499f74351415e601eb48eff6b6fccd3a78d137f5ea9cd7cac46b904772966de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7225:   assert( pPage->nOverflow==1 );",
          "",
          "[Removed Lines]",
          "7228:   if( pPage->nFree<0 ){",
          "7229:     rc = btreeComputeFreeSpace(pPage);",
          "7230:     if( rc ) return rc;",
          "7231:   }",
          "7232:   if( pParent->nFree<0 ){",
          "7233:     rc = btreeComputeFreeSpace(pParent);",
          "7234:     if( rc ) return rc;",
          "7235:   }",
          "",
          "[Added Lines]",
          "7228:   assert( pPage->nFree>=0 );",
          "7229:   assert( pParent->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7511:   if( !aOvflSpace ){",
          "7512:     return SQLITE_NOMEM_BKPT;",
          "7513:   }",
          "",
          "[Removed Lines]",
          "7514:   if( pParent->nFree<0 ){",
          "7515:     rc = btreeComputeFreeSpace(pParent);",
          "7516:     if( rc ) return rc;",
          "7517:   }",
          "",
          "[Added Lines]",
          "7507:   assert( pParent->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8336:       int const iIdx = pCur->aiIdx[iPage-1];",
          "8338:       rc = sqlite3PagerWrite(pParent->pDbPage);",
          "8339:       if( rc==SQLITE_OK ){",
          "8340: #ifndef SQLITE_OMIT_QUICKBALANCE",
          "8341:         if( pPage->intKeyLeaf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8329:       if( rc==SQLITE_OK && pParent->nFree<0 ){",
          "8330:         rc = btreeComputeFreeSpace(pParent);",
          "8331:       }",
          "",
          "---------------"
        ],
        "test/corrupt2.test||test/corrupt2.test": [
          "File: test/corrupt2.test -> test/corrupt2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   close $f",
          "97:   sqlite3 db2 corrupt.db",
          "104: do_test corrupt2-1.5 {",
          "105:   db2 close",
          "",
          "[Removed Lines]",
          "98:   catchsql \"",
          "99:     $::presql",
          "100:     SELECT * FROM sqlite_master;",
          "101:   \" db2",
          "102: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "98:   # Note: This test is no longer meaningful due to the deferred computation",
          "99:   # of MemPage.nFree",
          "100:   catchsql {PRAGMA quick_check} db2",
          "101: } {0 {{*** in database main ***",
          "102: Page 1: free space corruption}}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   close $f",
          "120:   sqlite3 db2 corrupt.db",
          "126: db2 close",
          "128: # Corrupt a database by having 2 indices of the same name:",
          "",
          "[Removed Lines]",
          "121:   catchsql \"",
          "122:     $::presql",
          "123:     SELECT * FROM sqlite_master;",
          "124:   \" db2",
          "125: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "121:   catchsql {PRAGMA quick_check} db2",
          "122: } {0 {{*** in database main ***",
          "123: Page 1: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/corruptD.test||test/corruptD.test": [
          "File: test/corruptD.test -> test/corruptD.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: do_test corruptD-1.1.1 {",
          "112:   incr_change_counter",
          "113:   hexio_write test.db [expr 1024+1] FFFF",
          "116: do_test corruptD-1.1.2 {",
          "117:   incr_change_counter",
          "118:   hexio_write test.db [expr 1024+1] [hexio_render_int32 1021]",
          "",
          "[Removed Lines]",
          "114:   catchsql { SELECT * FROM t1 ORDER BY rowid }",
          "115: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "114:   catchsql { PRAGMA quick_check }",
          "115: } {0 {{*** in database main ***",
          "116: Page 2: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/corruptK.test||test/corruptK.test": [
          "File: test/corruptK.test -> test/corruptK.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_execsql_test 1.3 {",
          "69:   INSERT INTO t1 VALUES(randomblob(20));",
          "70: }",
          "71: do_catchsql_test 1.4 {",
          "72:   INSERT INTO t1 VALUES(randomblob(90));",
          "73: } {1 {database disk image is malformed}}",
          "75: #-------------------------------------------------------------------------",
          "76: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: # This test no longer functions due to the deferred computation of",
          "73: # MemPage.nFree.",
          "74: #",
          "75: if 0 {",
          "79: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}