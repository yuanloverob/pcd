{
  "cve_id": "CVE-2020-35964",
  "cve_desc": "track_header in libavformat/vividas.c in FFmpeg 4.3.1 has an out-of-bounds write because of incorrect extradata packing.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "27a99e2c7d450fef15594671eef4465c8a166bd7",
  "patch_info": {
    "commit_hash": "27a99e2c7d450fef15594671eef4465c8a166bd7",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/27a99e2c7d450fef15594671eef4465c8a166bd7",
    "files": [
      "libavformat/vividas.c"
    ],
    "message": "avformat/vividas: improve extradata packing checks in track_header()\n\nFixes: out of array accesses\nFixes: 26622/clusterfuzz-testcase-minimized-ffmpeg_dem_VIVIDAS_fuzzer-6581200338288640\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavformat/vividas.c||libavformat/vividas.c"
    ]
  },
  "patch_diff": {
    "libavformat/vividas.c||libavformat/vividas.c": [
      "File: libavformat/vividas.c -> libavformat/vividas.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #include \"libavutil/intreadwrite.h\"",
      "32: #include \"avio_internal.h\"",
      "33: #include \"avformat.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: #include \"libavutil/avassert.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "380:         if (avio_tell(pb) < off) {",
      "381:             int num_data;",
      "383:             int data_len[256];",
      "384:             int offset = 1;",
      "385:             uint8_t *p;",
      "",
      "[Removed Lines]",
      "382:             int xd_size = 0;",
      "",
      "[Added Lines]",
      "383:             int xd_size = 1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "393:                     return AVERROR_INVALIDDATA;",
      "394:                 }",
      "395:                 data_len[j] = len;",
      "397:             }",
      "400:             if (ret < 0)",
      "401:                 return ret;",
      "",
      "[Removed Lines]",
      "396:                 xd_size += len;",
      "399:             ret = ff_alloc_extradata(st->codecpar, 64 + xd_size + xd_size / 255);",
      "",
      "[Added Lines]",
      "397:                 xd_size += len + 1 + len/255;",
      "400:             ret = ff_alloc_extradata(st->codecpar, xd_size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "406:             for (j = 0; j < num_data - 1; j++) {",
      "407:                 unsigned delta = av_xiphlacing(&p[offset], data_len[j]);",
      "411:                 offset += delta;",
      "412:             }",
      "",
      "[Removed Lines]",
      "408:                 if (delta > data_len[j]) {",
      "409:                     return AVERROR_INVALIDDATA;",
      "410:                 }",
      "",
      "[Added Lines]",
      "409:                 av_assert0(delta <= xd_size - offset);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "418:                     av_freep(&st->codecpar->extradata);",
      "419:                     break;",
      "420:                 }",
      "421:                 offset += data_len[j];",
      "422:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "420:                 av_assert0(data_len[j] <= xd_size - offset);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "955b471fbe77bdab4f007c43c65e71c596e212b5",
      "candidate_info": {
        "commit_hash": "955b471fbe77bdab4f007c43c65e71c596e212b5",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/955b471fbe77bdab4f007c43c65e71c596e212b5",
        "files": [
          "libavformat/vividas.c"
        ],
        "message": "avformat/vividas: improve extradata packing checks in track_header()\n\nFixes: out of array accesses\nFixes: 26622/clusterfuzz-testcase-minimized-ffmpeg_dem_VIVIDAS_fuzzer-6581200338288640\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 27a99e2c7d450fef15594671eef4465c8a166bd7)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/vividas.c||libavformat/vividas.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/vividas.c||libavformat/vividas.c"
          ],
          "candidate": [
            "libavformat/vividas.c||libavformat/vividas.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/vividas.c||libavformat/vividas.c": [
          "File: libavformat/vividas.c -> libavformat/vividas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"libavutil/intreadwrite.h\"",
          "32: #include \"avio_internal.h\"",
          "33: #include \"avformat.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"libavutil/avassert.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:         if (avio_tell(pb) < off) {",
          "376:             int num_data;",
          "378:             int data_len[256];",
          "379:             int offset = 1;",
          "380:             uint8_t *p;",
          "",
          "[Removed Lines]",
          "377:             int xd_size = 0;",
          "",
          "[Added Lines]",
          "378:             int xd_size = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:                     return AVERROR_INVALIDDATA;",
          "390:                 }",
          "391:                 data_len[j] = len;",
          "393:             }",
          "397:                 av_free(pb);",
          "398:                 return AVERROR(ENOMEM);",
          "399:             }",
          "",
          "[Removed Lines]",
          "392:                 xd_size += len;",
          "395:             st->codecpar->extradata_size = 64 + xd_size + xd_size / 255;",
          "396:             if (ff_alloc_extradata(st->codecpar, st->codecpar->extradata_size)) {",
          "",
          "[Added Lines]",
          "393:                 xd_size += len + 1 + len/255;",
          "396:             if (ff_alloc_extradata(st->codecpar, xd_size)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "404:             for (j = 0; j < num_data - 1; j++) {",
          "405:                 unsigned delta = av_xiphlacing(&p[offset], data_len[j]);",
          "410:                 offset += delta;",
          "411:             }",
          "",
          "[Removed Lines]",
          "406:                 if (delta > data_len[j]) {",
          "407:                     av_free(pb);",
          "408:                     return AVERROR_INVALIDDATA;",
          "409:                 }",
          "",
          "[Added Lines]",
          "406:                 av_assert0(delta <= xd_size - offset);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:                     av_freep(&st->codecpar->extradata);",
          "418:                     break;",
          "419:                 }",
          "420:                 offset += data_len[j];",
          "421:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:                 av_assert0(data_len[j] <= xd_size - offset);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f0bdff292391cdb96b79b08c56533029166bdc8",
      "candidate_info": {
        "commit_hash": "4f0bdff292391cdb96b79b08c56533029166bdc8",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4f0bdff292391cdb96b79b08c56533029166bdc8",
        "files": [
          "libavformat/vividas.c"
        ],
        "message": "avformat/vividas: improve extradata packing checks in track_header()\n\nFixes: out of array accesses\nFixes: 26622/clusterfuzz-testcase-minimized-ffmpeg_dem_VIVIDAS_fuzzer-6581200338288640\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 27a99e2c7d450fef15594671eef4465c8a166bd7)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/vividas.c||libavformat/vividas.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/vividas.c||libavformat/vividas.c"
          ],
          "candidate": [
            "libavformat/vividas.c||libavformat/vividas.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/vividas.c||libavformat/vividas.c": [
          "File: libavformat/vividas.c -> libavformat/vividas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"libavutil/intreadwrite.h\"",
          "32: #include \"avio_internal.h\"",
          "33: #include \"avformat.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"libavutil/avassert.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:         if (avio_tell(pb) < off) {",
          "381:             int num_data;",
          "383:             int data_len[256];",
          "384:             int offset = 1;",
          "385:             uint8_t *p;",
          "",
          "[Removed Lines]",
          "382:             int xd_size = 0;",
          "",
          "[Added Lines]",
          "383:             int xd_size = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:                     return AVERROR_INVALIDDATA;",
          "394:                 }",
          "395:                 data_len[j] = len;",
          "397:             }",
          "400:             if (ret < 0)",
          "401:                 return ret;",
          "",
          "[Removed Lines]",
          "396:                 xd_size += len;",
          "399:             ret = ff_alloc_extradata(st->codecpar, 64 + xd_size + xd_size / 255);",
          "",
          "[Added Lines]",
          "397:                 xd_size += len + 1 + len/255;",
          "400:             ret = ff_alloc_extradata(st->codecpar, xd_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "406:             for (j = 0; j < num_data - 1; j++) {",
          "407:                 unsigned delta = av_xiphlacing(&p[offset], data_len[j]);",
          "411:                 offset += delta;",
          "412:             }",
          "",
          "[Removed Lines]",
          "408:                 if (delta > data_len[j]) {",
          "409:                     return AVERROR_INVALIDDATA;",
          "410:                 }",
          "",
          "[Added Lines]",
          "409:                 av_assert0(delta <= xd_size - offset);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "418:                     av_freep(&st->codecpar->extradata);",
          "419:                     break;",
          "420:                 }",
          "421:                 offset += data_len[j];",
          "422:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:                 av_assert0(data_len[j] <= xd_size - offset);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff5c8e57e756e5b80bc32ea469495a9a89c012b6",
      "candidate_info": {
        "commit_hash": "ff5c8e57e756e5b80bc32ea469495a9a89c012b6",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ff5c8e57e756e5b80bc32ea469495a9a89c012b6",
        "files": [
          "libavformat/vividas.c"
        ],
        "message": "avformat/vividas: Avoid allocation of AVIOContext\n\nPut an AVIOContext whose lifetime doesn't extend beyond the function where\nit is allocated on the stack instead of allocating and freeing it. This\nalso avoids the need to free it, which in this case fixes possible\nmemleaks on error.\n\nSigned-off-by: Andreas Rheinhardt <andreas.rheinhardt@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/vividas.c||libavformat/vividas.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/vividas.c||libavformat/vividas.c"
          ],
          "candidate": [
            "libavformat/vividas.c||libavformat/vividas.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/vividas.c||libavformat/vividas.c": [
          "File: libavformat/vividas.c -> libavformat/vividas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     int64_t off;",
          "283:     int val_1;",
          "284:     int num_video;",
          "291:     ffio_read_varlen(pb); // track_header_len",
          "292:     avio_r8(pb); // '1'",
          "",
          "[Removed Lines]",
          "285:     AVIOContext *pb;",
          "287:     pb = avio_alloc_context(buf, size, 0, NULL, NULL, NULL, NULL);",
          "288:     if (!pb)",
          "289:         return AVERROR(ENOMEM);",
          "",
          "[Added Lines]",
          "285:     AVIOContext pb0, *pb = &pb0;",
          "287:     ffio_init_context(pb, buf, size, 0, NULL, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             for (j = 0; j < num_data; j++) {",
          "384:                 uint64_t len = ffio_read_varlen(pb);",
          "385:                 if (len > INT_MAX/2 - xd_size) {",
          "387:                     return AVERROR_INVALIDDATA;",
          "388:                 }",
          "389:                 data_len[j] = len;",
          "",
          "[Removed Lines]",
          "386:                     av_free(pb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:             st->codecpar->extradata_size = 64 + xd_size + xd_size / 255;",
          "394:             if (ff_alloc_extradata(st->codecpar, st->codecpar->extradata_size)) {",
          "396:                 return AVERROR(ENOMEM);",
          "397:             }",
          "",
          "[Removed Lines]",
          "395:                 av_free(pb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "402:             for (j = 0; j < num_data - 1; j++) {",
          "403:                 unsigned delta = av_xiphlacing(&p[offset], data_len[j]);",
          "404:                 if (delta > data_len[j]) {",
          "406:                     return AVERROR_INVALIDDATA;",
          "407:                 }",
          "408:                 offset += delta;",
          "",
          "[Removed Lines]",
          "405:                     av_free(pb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "423:         }",
          "424:     }",
          "427:     return 0;",
          "428: }",
          "",
          "[Removed Lines]",
          "426:     av_free(pb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "432:     int64_t off;",
          "433:     int64_t poff;",
          "434:     int maxnp=0;",
          "436:     int i;",
          "437:     int64_t filesize = avio_size(s->pb);",
          "443:     ffio_read_varlen(pb); // track_index_len",
          "444:     avio_r8(pb); // 'c'",
          "",
          "[Removed Lines]",
          "435:     AVIOContext *pb;",
          "439:     pb = avio_alloc_context(buf, size, 0, NULL, NULL, NULL, NULL);",
          "440:     if (!pb)",
          "441:         return AVERROR(ENOMEM);",
          "",
          "[Added Lines]",
          "429:     AVIOContext pb0, *pb = &pb0;",
          "433:     ffio_init_context(pb, buf, size, 0, NULL, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:     viv->sb_blocks = av_calloc(viv->n_sb_blocks, sizeof(VIV_SB_block));",
          "449:     if (!viv->sb_blocks) {",
          "450:         viv->n_sb_blocks = 0;",
          "452:         return AVERROR(ENOMEM);",
          "453:     }",
          "",
          "[Removed Lines]",
          "451:         av_free(pb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "479:         goto error;",
          "481:     viv->sb_entries = av_calloc(maxnp, sizeof(VIV_SB_entry));",
          "484:     return 0;",
          "485: error:",
          "487:     viv->n_sb_blocks = 0;",
          "488:     av_freep(&viv->sb_blocks);",
          "489:     return AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "482:     av_free(pb);",
          "486:     av_free(pb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}