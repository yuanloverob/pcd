{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90ea68107a94b33e6b20cd9c2af8547b8c41da7c",
      "candidate_info": {
        "commit_hash": "90ea68107a94b33e6b20cd9c2af8547b8c41da7c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/90ea68107a94b33e6b20cd9c2af8547b8c41da7c",
        "files": [
          "deps/v8/tools/run-valgrind.py"
        ],
        "message": "test: fix up `make valgrind-test`\n\n* valgrind complained too much about memory leaks from the V8 heap to be\n  useful, run it with --leak-check=no. Not ideal, needs to be revisited,\n  preferably with a suppression file.\n\n* tools/run-valgrind.py didn't deal with tests that logged to stderr, rewrite\n  the heuristic and make valgrind write to a socket instead of stderr.\n\nFixes #3869.",
        "before_after_code_files": [
          "deps/v8/tools/run-valgrind.py||deps/v8/tools/run-valgrind.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/tools/run-valgrind.py||deps/v8/tools/run-valgrind.py": [
          "File: deps/v8/tools/run-valgrind.py -> deps/v8/tools/run-valgrind.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: # Simple wrapper for running valgrind and checking the output on",
          "31: # stderr for memory leaks.",
          "33: import subprocess",
          "34: import sys",
          "35: import re",
          "37: VALGRIND_ARGUMENTS = [",
          "42: ]",
          "48: process = subprocess.Popen(command, stderr=subprocess.PIPE)",
          "",
          "[Removed Lines]",
          "38:   'valgrind',",
          "39:   '--error-exitcode=1',",
          "40:   '--leak-check=full',",
          "41:   '--smc-check=all'",
          "44: # Compute the command line.",
          "45: command = VALGRIND_ARGUMENTS + sys.argv[1:]",
          "47: # Run valgrind.",
          "49: code = process.wait();",
          "50: errors = process.stderr.readlines();",
          "52: # If valgrind produced an error, we report that to the user.",
          "53: if code != 0:",
          "54:   sys.stderr.writelines(errors)",
          "55:   sys.exit(code)",
          "57: # Look through the leak details and make sure that we don't",
          "58: # have any definitely, indirectly, and possibly lost bytes.",
          "59: LEAK_RE = r\"(?:definitely|indirectly|possibly) lost: \"",
          "60: LEAK_LINE_MATCHER = re.compile(LEAK_RE)",
          "61: LEAK_OKAY_MATCHER = re.compile(r\"lost: 0 bytes in 0 blocks\")",
          "62: leaks = []",
          "63: for line in errors:",
          "64:   if LEAK_LINE_MATCHER.search(line):",
          "65:     leaks.append(line)",
          "66:     if not LEAK_OKAY_MATCHER.search(line):",
          "67:       sys.stderr.writelines(errors)",
          "68:       sys.exit(1)",
          "70: # Make sure we found between 2 and 3 leak lines.",
          "71: if len(leaks) < 2 or len(leaks) > 3:",
          "72:   sys.stderr.writelines(errors)",
          "73:   sys.stderr.write('\\n\\n#### Malformed valgrind output.\\n#### Exiting.\\n')",
          "74:   sys.exit(1)",
          "76: # No leaks found.",
          "77: sys.exit(0)",
          "",
          "[Added Lines]",
          "33: import os",
          "34: import socket",
          "39: VALGRIND = os.environ.get('VALGRIND', 'valgrind')",
          "42:   VALGRIND,",
          "43:   '--log-socket=127.0.0.1:15151',",
          "44:   '--error-exitcode=247',",
          "45:   '--leak-check=no',",
          "46:   '--smc-check=all',",
          "49: server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
          "50: server.bind(('127.0.0.1', 15151))",
          "51: server.listen(1)",
          "53: command = VALGRIND_ARGUMENTS + sys.argv[1:]",
          "56: errors = ''",
          "57: conn, addr = server.accept()",
          "58: while True:",
          "59:   data = conn.recv(8192)",
          "60:   if not data: break",
          "61:   errors += data",
          "63: code = process.wait()",
          "64: if code == 247: sys.stderr.writelines(errors)",
          "65: sys.exit(code)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9693d3334c9906840132764c91b4ec399a7a5cfd",
      "candidate_info": {
        "commit_hash": "9693d3334c9906840132764c91b4ec399a7a5cfd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9693d3334c9906840132764c91b4ec399a7a5cfd",
        "files": [
          "src/node.cc"
        ],
        "message": "node: remove process.uvCounters()",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1576: }",
          "1611: v8::Handle<v8::Value> MemoryUsage(const v8::Arguments& args) {",
          "1612:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "1579: v8::Handle<v8::Value> UVCounters(const v8::Arguments& args) {",
          "1580:   HandleScope scope;",
          "1582:   uv_counters_t* c = &uv_default_loop()->counters;",
          "1584:   Local<Object> obj = Object::New();",
          "1586: #define setc(name) \\",
          "1587:     obj->Set(String::New(#name), Integer::New(static_cast<int32_t>(c->name)));",
          "1589:   setc(eio_init)",
          "1590:   setc(req_init)",
          "1591:   setc(handle_init)",
          "1592:   setc(stream_init)",
          "1593:   setc(tcp_init)",
          "1594:   setc(udp_init)",
          "1595:   setc(pipe_init)",
          "1596:   setc(tty_init)",
          "1597:   setc(prepare_init)",
          "1598:   setc(check_init)",
          "1599:   setc(idle_init)",
          "1600:   setc(async_init)",
          "1601:   setc(timer_init)",
          "1602:   setc(process_init)",
          "1603:   setc(fs_event_init)",
          "1605: #undef setc",
          "1607:   return scope.Close(obj);",
          "1608: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2268:   NODE_SET_METHOD(process, \"uptime\", Uptime);",
          "2269:   NODE_SET_METHOD(process, \"memoryUsage\", MemoryUsage);",
          "2272:   NODE_SET_METHOD(process, \"binding\", Binding);",
          "",
          "[Removed Lines]",
          "2270:   NODE_SET_METHOD(process, \"uvCounters\", UVCounters);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41421ff9da1288aa241a5e9dcf915b685ade1c23",
      "candidate_info": {
        "commit_hash": "41421ff9da1288aa241a5e9dcf915b685ade1c23",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/41421ff9da1288aa241a5e9dcf915b685ade1c23",
        "files": [
          "lib/net.js"
        ],
        "message": "Make listenFD just DTRT after warning",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1072: };",
          "1075: Server.prototype.listenFD = function(fd, type) {",
          "1077: };",
          "",
          "[Removed Lines]",
          "1076:   throw new Error('This API is no longer supported. See child_process.fork');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ae9b69871427697cf7c0abb6cd345f9778cc7a5",
      "candidate_info": {
        "commit_hash": "2ae9b69871427697cf7c0abb6cd345f9778cc7a5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2ae9b69871427697cf7c0abb6cd345f9778cc7a5",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-empty-readStream.js"
        ],
        "message": "fs: no end emit after createReadStream.pause()\n\nIn case a fd option is given to fs.createReadStream a read will instantly\nhappen. But in the edge case where fd point to an empty file and .pause()\nwas executed instantly, the end event would emit since no async wait was\nbetween fs.createReadStream and the file read there emits end.\n\nThis is a cherry-pick of commit 1f3e4a7 into the v0.6 branch.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-empty-readStream.js||test/simple/test-fs-empty-readStream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1068:   }",
          "1070:   if (this.fd !== null) {",
          "1072:     return;",
          "1073:   }",
          "",
          "[Removed Lines]",
          "1071:     this._read();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-empty-readStream.js||test/simple/test-fs-empty-readStream.js": [
          "File: test/simple/test-fs-empty-readStream.js -> test/simple/test-fs-empty-readStream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var path = require('path');",
          "25: var fs = require('fs');",
          "27: var emptyFile = path.join(common.fixturesDir, 'empty.txt');",
          "29: fs.open(emptyFile, 'r', function (error, fd) {",
          "30:   assert.ifError(error);",
          "32:   var read = fs.createReadStream(emptyFile, { 'fd': fd });",
          "34:   read.once('data', function () {",
          "35:     throw new Error(\"data event should not emit\");",
          "36:   });",
          "38:   var readEmit = false;",
          "39:   read.once('end', function () {",
          "40:     readEmit = true;",
          "41:   });",
          "43:   setTimeout(function () {",
          "44:     assert.equal(readEmit, true);",
          "45:   }, 50);",
          "46: });",
          "48: fs.open(emptyFile, 'r', function (error, fd) {",
          "49:   assert.ifError(error);",
          "51:   var read = fs.createReadStream(emptyFile, { 'fd': fd });",
          "52:   read.pause();",
          "54:   read.once('data', function () {",
          "55:     throw new Error(\"data event should not emit\");",
          "56:   });",
          "58:   var readEmit = false;",
          "59:   read.once('end', function () {",
          "60:     readEmit = true;",
          "61:   });",
          "63:   setTimeout(function () {",
          "64:     assert.equal(readEmit, false);",
          "65:   }, 50);",
          "66: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05fe70b582c1f888e09ea7d21a70fe736bd09d12",
      "candidate_info": {
        "commit_hash": "05fe70b582c1f888e09ea7d21a70fe736bd09d12",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/05fe70b582c1f888e09ea7d21a70fe736bd09d12",
        "files": [
          "test/gc/node_modules/weak/lib/weak.js"
        ],
        "message": "test: use the debug build of node-weak when necessary",
        "before_after_code_files": [
          "test/gc/node_modules/weak/lib/weak.js||test/gc/node_modules/weak/liweak.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/gc/node_modules/weak/lib/weak.js||test/gc/node_modules/weak/liweak.js": [
          "File: test/gc/node_modules/weak/lib/weak.js -> test/gc/node_modules/weak/liweak.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: module.exports = bindings.create",
          "",
          "[Removed Lines]",
          "1: var bindings = require('../build/Release/weakref.node')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}