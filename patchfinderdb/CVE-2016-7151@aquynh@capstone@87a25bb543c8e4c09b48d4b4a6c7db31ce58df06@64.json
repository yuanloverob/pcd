{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ccd9066461ab0eddc262ce3e441d312901d35678",
      "candidate_info": {
        "commit_hash": "ccd9066461ab0eddc262ce3e441d312901d35678",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/ccd9066461ab0eddc262ce3e441d312901d35678",
        "files": [
          "include/capstone.h",
          "tests/test_skipdata.c"
        ],
        "message": "Replace CAPSTONE_API to mycallback and cs_skipdata_cb_t",
        "before_after_code_files": [
          "include/capstone.h||include/capstone.h",
          "tests/test_skipdata.c||tests/test_skipdata.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone.h||include/capstone.h": [
          "File: include/capstone.h -> include/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:  @return: return number of bytes to skip, or 0 to immediately stop disassembling.",
          "178: typedef struct cs_opt_skipdata {",
          "",
          "[Removed Lines]",
          "175: typedef size_t (*cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);",
          "",
          "[Added Lines]",
          "175: typedef size_t (CAPSTONE_API*cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);",
          "",
          "---------------"
        ],
        "tests/test_skipdata.c||tests/test_skipdata.c": [
          "File: tests/test_skipdata.c -> tests/test_skipdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  printf(\"\\n\");",
          "31: }",
          "34: {",
          "36:  return 2;",
          "",
          "[Removed Lines]",
          "33: static size_t mycallback(const uint8_t *buffer, size_t buffer_size, size_t offset, void *p)",
          "",
          "[Added Lines]",
          "33: static size_t CAPSTONE_API mycallback(const uint8_t *buffer, size_t buffer_size, size_t offset, void *p)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b3a298609577b7981fc913759fe9bb9134dc2a4",
      "candidate_info": {
        "commit_hash": "2b3a298609577b7981fc913759fe9bb9134dc2a4",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/2b3a298609577b7981fc913759fe9bb9134dc2a4",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "python: perform the last dylib loader only if it fails before that (for El Capitan)",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: # Attempt Darwin specific load (10.11 specific),",
          "232: # since LD_LIBRARY_PATH is not guaranteed to exist",
          "234:     _lib_path = '/usr/local/lib/'",
          "235:     for _lib in _all_libs:",
          "236:         try:",
          "",
          "[Removed Lines]",
          "233: if system() == 'Darwin':",
          "",
          "[Added Lines]",
          "233: if (_found == False) and (system() == 'Darwin'):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1287c8e221e01d3afd1d9160eff0ec6fe4b9e26",
      "candidate_info": {
        "commit_hash": "f1287c8e221e01d3afd1d9160eff0ec6fe4b9e26",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f1287c8e221e01d3afd1d9160eff0ec6fe4b9e26",
        "files": [
          "include/capstone/sparc.h"
        ],
        "message": "Fixed sparc header to comply with bindings",
        "before_after_code_files": [
          "include/capstone/sparc.h||include/capstone/sparc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/sparc.h||include/capstone/sparc.h": [
          "File: include/capstone/sparc.h -> include/capstone/sparc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: typedef struct sparc_op_mem {",
          "184:  int32_t disp;  // displacement/offset value",
          "185: } sparc_op_mem;",
          "",
          "[Removed Lines]",
          "182:  sparc_reg base;  // base register",
          "183:  sparc_reg index; // index register",
          "",
          "[Added Lines]",
          "182:  uint8_t base;  // base register, can be safely interpreted as",
          "185:  uint8_t index;  // index register, same conditions apply here",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fba330a6e2328afec684ea688bbe614eeb6a177",
      "candidate_info": {
        "commit_hash": "8fba330a6e2328afec684ea688bbe614eeb6a177",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8fba330a6e2328afec684ea688bbe614eeb6a177",
        "files": [
          "bindings/python/test_lite.py"
        ],
        "message": "Add missing architectures to test_lite.py.\n\nThe code constants and the all_tests tuple is now analogous to\ntest_basic.py.",
        "before_after_code_files": [
          "bindings/python/test_lite.py||bindings/python/test_lite.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/test_lite.py||bindings/python/test_lite.py": [
          "File: bindings/python/test_lite.py -> bindings/python/test_lite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: X86_CODE16 = b\"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\"",
          "11: X86_CODE64 = b\"\\x55\\x48\\x8b\\x05\\xb8\\x13\\x00\\x00\"",
          "12: ARM_CODE = b\"\\xED\\xFF\\xFF\\xEB\\x04\\xe0\\x2d\\xe5\\x00\\x00\\x00\\x00\\xe0\\x83\\x22\\xe5\\xf1\\x02\\x03\\x0e\\x00\\x00\\xa0\\xe3\\x02\\x30\\xc1\\xe7\\x00\\x00\\x53\\xe3\"",
          "13: ARM_CODE2 = b\"\\x10\\xf1\\x10\\xe7\\x11\\xf2\\x31\\xe7\\xdc\\xa1\\x2e\\xf3\\xe8\\x4e\\x62\\xf3\"",
          "14: THUMB_CODE = b\"\\x70\\x47\\xeb\\x46\\x83\\xb0\\xc9\\x68\"",
          "15: THUMB_CODE2 = b\"\\x4f\\xf0\\x00\\x01\\xbd\\xe8\\x00\\x88\\xd1\\xe8\\x00\\xf0\"",
          "16: MIPS_CODE = b\"\\x0C\\x10\\x00\\x97\\x00\\x00\\x00\\x00\\x24\\x02\\x00\\x0c\\x8f\\xa2\\x00\\x00\\x34\\x21\\x34\\x56\"",
          "17: MIPS_CODE2 = b\"\\x56\\x34\\x21\\x34\\xc2\\x17\\x01\\x00\"",
          "18: ARM64_CODE = b\"\\x21\\x7c\\x02\\x9b\\x21\\x7c\\x00\\x53\\x00\\x40\\x21\\x4b\\xe1\\x0b\\x40\\xb9\"",
          "19: PPC_CODE = b\"\\x80\\x20\\x00\\x00\\x80\\x3f\\x00\\x00\\x10\\x43\\x23\\x0e\\xd0\\x44\\x00\\x80\\x4c\\x43\\x22\\x02\\x2d\\x03\\x00\\x80\\x7c\\x43\\x20\\x14\\x7c\\x43\\x20\\x93\\x4f\\x20\\x00\\x21\\x4c\\xc8\\x00\\x21\"",
          "21: all_tests = (",
          "22:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "23:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "24:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "25:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "26:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "27:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "28:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "29:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "30:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "31:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "32:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "33:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "34:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64, print register with number only\", CS_OPT_SYNTAX_NOREGNAME),",
          "35:         )",
          "",
          "[Removed Lines]",
          "10: X86_CODE32 = b\"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\"",
          "",
          "[Added Lines]",
          "10: X86_CODE32 = b\"\\xba\\xcd\\xab\\x00\\x00\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\"",
          "16: THUMB_MCLASS = b\"\\xef\\xf3\\x02\\x80\"",
          "17: ARMV8 = b\"\\xe0\\x3b\\xb2\\xee\\x42\\x00\\x01\\xe1\\x51\\xf0\\x7f\\xf5\"",
          "20: MIPS_32R6M = b\"\\x00\\x07\\x00\\x07\\x00\\x11\\x93\\x7c\\x01\\x8c\\x8b\\x7c\\x00\\xc7\\x48\\xd0\"",
          "21: MIPS_32R6 = b\"\\xec\\x80\\x00\\x19\\x7c\\x43\\x22\\xa0\"",
          "24: PPC_CODE2 = b\"\\x10\\x60\\x2a\\x10\\x10\\x64\\x28\\x88\\x7c\\x4a\\x5d\\x0f\"",
          "25: SPARC_CODE = b\"\\x80\\xa0\\x40\\x02\\x85\\xc2\\x60\\x08\\x85\\xe8\\x20\\x01\\x81\\xe8\\x00\\x00\\x90\\x10\\x20\\x01\\xd5\\xf6\\x10\\x16\\x21\\x00\\x00\\x0a\\x86\\x00\\x40\\x02\\x01\\x00\\x00\\x00\\x12\\xbf\\xff\\xff\\x10\\xbf\\xff\\xff\\xa0\\x02\\x00\\x09\\x0d\\xbf\\xff\\xff\\xd4\\x20\\x60\\x00\\xd4\\x4e\\x00\\x16\\x2a\\xc2\\x80\\x03\"",
          "26: SPARCV9_CODE = b\"\\x81\\xa8\\x0a\\x24\\x89\\xa0\\x10\\x20\\x89\\xa0\\x1a\\x60\\x89\\xa0\\x00\\xe0\"",
          "27: SYSZ_CODE = b\"\\xed\\x00\\x00\\x00\\x00\\x1a\\x5a\\x0f\\x1f\\xff\\xc2\\x09\\x80\\x00\\x00\\x00\\x07\\xf7\\xeb\\x2a\\xff\\xff\\x7f\\x57\\xe3\\x01\\xff\\xff\\x7f\\x57\\xeb\\x00\\xf0\\x00\\x00\\x24\\xb2\\x4f\\x00\\x78\"",
          "28: XCORE_CODE = b\"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\"",
          "34:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (MASM syntax)\", CS_OPT_SYNTAX_MASM),",
          "40:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "41:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "44:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", None),",
          "45:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", None),",
          "49:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", CS_OPT_SYNTAX_NOREGNAME),",
          "50:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", None),",
          "51:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", None),",
          "52:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", None),",
          "53:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", None),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "256090a8c8a32c35c5aeaeb307900f8bb00836ea",
      "candidate_info": {
        "commit_hash": "256090a8c8a32c35c5aeaeb307900f8bb00836ea",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/256090a8c8a32c35c5aeaeb307900f8bb00836ea",
        "files": [
          "arch/ARM/ARMInstPrinter.c",
          "bindings/python/capstone/__init__.py",
          "cs.c",
          "cs_priv.h",
          "include/capstone/capstone.h"
        ],
        "message": "add CS_OPT_UNSIGNED option to print immediate in unsigned form. only ARM is supported for now (issue #585)",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "cs.c||cs.c",
          "cs_priv.h||cs_priv.h",
          "include/capstone/capstone.h||include/capstone/capstone.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:     imm += (int32_t)MI->address + 8;",
          "848:    }",
          "858:   } else {",
          "859:    switch(MI->flat_insn->id) {",
          "860:     default:",
          "872:      break;",
          "873:     case ARM_INS_AND:",
          "874:     case ARM_INS_ORR:",
          "",
          "[Removed Lines]",
          "850:    if (imm >= 0) {",
          "851:     if (imm > HEX_THRESHOLD)",
          "852:      SStream_concat(O, \"#0x%x\", imm);",
          "853:     else",
          "854:      SStream_concat(O, \"#%u\", imm);",
          "855:    } else {",
          "856:     SStream_concat(O, \"#0x%x\", imm);",
          "857:    }",
          "861:      if (imm >= 0) {",
          "862:       if (imm > HEX_THRESHOLD)",
          "863:        SStream_concat(O, \"#0x%x\", imm);",
          "864:       else",
          "865:        SStream_concat(O, \"#%u\", imm);",
          "866:      } else {",
          "867:       if (imm < -HEX_THRESHOLD)",
          "868:        SStream_concat(O, \"#-0x%x\", -imm);",
          "869:       else",
          "870:        SStream_concat(O, \"#-%u\", -imm);",
          "871:      }",
          "",
          "[Added Lines]",
          "851:    printUInt32Bang(O, imm);",
          "855:      if (MI->csh->imm_unsigned)",
          "856:       printUInt32Bang(O, imm);",
          "857:      else",
          "858:       printInt32Bang(O, imm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "876:     case ARM_INS_BIC:",
          "877:     case ARM_INS_MVN:",
          "883:      break;",
          "884:    }",
          "885:   }",
          "",
          "[Removed Lines]",
          "879:      if (imm >= 0 && imm <= HEX_THRESHOLD)",
          "880:       SStream_concat(O, \"#%u\", imm);",
          "881:      else",
          "882:       SStream_concat(O, \"#0x%x\", imm);",
          "",
          "[Added Lines]",
          "866:      printUInt32Bang(O, imm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "912:  if (isSub) {",
          "913:   SStream_concat(O, \"#-0x%x\", -OffImm);",
          "914:  } else {",
          "919:  }",
          "921:  SStream_concat0(O, \"]\");",
          "",
          "[Removed Lines]",
          "915:   if (OffImm > HEX_THRESHOLD)",
          "916:    SStream_concat(O, \"#0x%x\", OffImm);",
          "917:   else",
          "918:    SStream_concat(O, \"#%u\", OffImm);",
          "",
          "[Added Lines]",
          "899:   printUInt32Bang(O, OffImm);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1386:  int32_t width = (32 - CountLeadingZeros_32 (v)) - lsb;",
          "1394:  if (width > HEX_THRESHOLD)",
          "1395:   SStream_concat(O, \", #0x%x\", width);",
          "",
          "[Removed Lines]",
          "1389:  if (lsb > HEX_THRESHOLD)",
          "1390:   SStream_concat(O, \"#0x%x\", lsb);",
          "1391:  else",
          "1392:   SStream_concat(O, \"#%u\", lsb);",
          "",
          "[Added Lines]",
          "1370:  printUInt32Bang(O, lsb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1895: static void printThumbS4ImmOperand(MCInst *MI, unsigned OpNum, SStream *O)",
          "1896: {",
          "1897:  unsigned tmp = (unsigned int)MCOperand_getImm(MCInst_getOperand(MI, OpNum)) * 4;",
          "1902:  if (MI->csh->detail) {",
          "1903:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "1904:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = tmp;",
          "",
          "[Removed Lines]",
          "1898:  if (tmp > HEX_THRESHOLD)",
          "1899:   SStream_concat(O, \"#0x%x\", tmp);",
          "1900:  else",
          "1901:   SStream_concat(O, \"#%u\", tmp);",
          "",
          "[Added Lines]",
          "1877:  printUInt32Bang(O, tmp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1910: {",
          "1911:  unsigned Imm = (unsigned int)MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "1912:  unsigned tmp = Imm == 0 ? 32 : Imm;",
          "1918:  if (MI->csh->detail) {",
          "1919:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "",
          "[Removed Lines]",
          "1913:  if (tmp > HEX_THRESHOLD)",
          "1914:   SStream_concat(O, \"#0x%x\", tmp);",
          "1915:  else",
          "1916:   SStream_concat(O, \"#%u\", tmp);",
          "",
          "[Added Lines]",
          "1891:  printUInt32Bang(O, tmp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1988:  if (ImmOffs) {",
          "1989:   tmp = ImmOffs * Scale;",
          "1990:   SStream_concat0(O, \", \");",
          "1995:   if (MI->csh->detail)",
          "1996:    MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].mem.disp = tmp;",
          "1997:  }",
          "",
          "[Removed Lines]",
          "1991:   if (tmp > HEX_THRESHOLD)",
          "1992:    SStream_concat(O, \"#0x%x\", tmp);",
          "1993:   else",
          "1994:    SStream_concat(O, \"#%u\", tmp);",
          "",
          "[Added Lines]",
          "1966:   printUInt32Bang(O, tmp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2184:  if (MCOperand_getImm(MO2)) {",
          "2185:   SStream_concat0(O, \", \");",
          "2186:   tmp = (unsigned int)MCOperand_getImm(MO2) * 4;",
          "2191:   if (MI->csh->detail)",
          "2192:    MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].mem.disp = tmp;",
          "2193:  }",
          "",
          "[Removed Lines]",
          "2187:   if (tmp > HEX_THRESHOLD)",
          "2188:    SStream_concat(O, \"#0x%x\", tmp);",
          "2189:   else",
          "2190:    SStream_concat(O, \"#%u\", tmp);",
          "",
          "[Added Lines]",
          "2159:   printUInt32Bang(O, tmp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2209:    MI->flat_insn->detail->arm.op_count++;",
          "2210:   }",
          "2211:  } else {",
          "2223:   if (MI->csh->detail) {",
          "2224:    MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "2225:    MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = OffImm;",
          "",
          "[Removed Lines]",
          "2212:   if (OffImm < 0) {",
          "2213:    if (OffImm < -HEX_THRESHOLD)",
          "2214:     SStream_concat(O, \"#-0x%x\", -OffImm);",
          "2215:    else",
          "2216:     SStream_concat(O, \"#-%u\", -OffImm);",
          "2217:   } else {",
          "2218:    if (OffImm > HEX_THRESHOLD)",
          "2219:     SStream_concat(O, \"#0x%x\", OffImm);",
          "2220:    else",
          "2221:     SStream_concat(O, \"#%u\", OffImm);",
          "2222:   }",
          "",
          "[Added Lines]",
          "2181:   printInt32Bang(O, OffImm);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2245:    MI->flat_insn->detail->arm.op_count++;",
          "2246:   }",
          "2247:  } else {",
          "2259:   if (MI->csh->detail) {",
          "2260:    MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "2261:    MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = OffImm;",
          "",
          "[Removed Lines]",
          "2248:   if (OffImm < 0) {",
          "2249:    if (OffImm < -HEX_THRESHOLD)",
          "2250:     SStream_concat(O, \"#-0x%x\", -OffImm);",
          "2251:    else",
          "2252:     SStream_concat(O, \"#-%u\", -OffImm);",
          "2253:   } else {",
          "2254:    if (OffImm > HEX_THRESHOLD)",
          "2255:     SStream_concat(O, \"#0x%x\", OffImm);",
          "2256:    else",
          "2257:     SStream_concat(O, \"#%u\", OffImm);",
          "2258:   }",
          "",
          "[Added Lines]",
          "2207:   printInt32Bang(O, OffImm);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2417:  unsigned tmp;",
          "2419:  tmp = 16 - (unsigned int)MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "2424:  if (MI->csh->detail) {",
          "2425:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "2426:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = tmp;",
          "",
          "[Removed Lines]",
          "2420:  if (tmp > HEX_THRESHOLD)",
          "2421:   SStream_concat(O, \"#0x%x\", tmp);",
          "2422:  else",
          "2423:   SStream_concat(O, \"#%u\", tmp);",
          "",
          "[Added Lines]",
          "2369:  printUInt32Bang(O, tmp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2433:  unsigned tmp;",
          "2435:  tmp = 32 - (unsigned int)MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "2440:  if (MI->csh->detail) {",
          "2441:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "2442:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = tmp;",
          "",
          "[Removed Lines]",
          "2436:  if (tmp > HEX_THRESHOLD)",
          "2437:   SStream_concat(O, \"#0x%x\", tmp);",
          "2438:  else",
          "2439:   SStream_concat(O, \"#%u\", tmp);",
          "",
          "[Added Lines]",
          "2383:  printUInt32Bang(O, tmp);",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: CS_OPT_SKIPDATA = 5  # Skip data when disassembling",
          "162: CS_OPT_SKIPDATA_SETUP = 6      # Setup user-defined function for SKIPDATA option",
          "163: CS_OPT_MNEMONIC = 7  # Customize instruction mnemonic",
          "165: # Capstone option value",
          "166: CS_OPT_OFF = 0             # Turn OFF an option - default option of CS_OPT_DETAIL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: CS_OPT_UNSIGNED = 8  # Print immediate in unsigned form",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:             self._syntax = None",
          "773:         self._detail = False  # by default, do not produce instruction details",
          "774:         self._diet = cs_support(CS_SUPPORT_DIET)",
          "775:         self._x86reduce = cs_support(CS_SUPPORT_X86_REDUCE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:         self._imm_unsigned = False  # by default, print immediate operands as signed numbers",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "900:         self._detail = opt",
          "903:     # return disassembly mode of this engine.",
          "904:     @property",
          "905:     def mode(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905:     # is detail mode enable?",
          "906:     @property",
          "907:     def imm_unsigned(self):",
          "908:         return self._imm_unsigned",
          "911:     # modify detail mode.",
          "912:     @imm_unsigned.setter",
          "913:     def imm_unsigned(self, opt):  # opt is boolean type, so must be either 'True' or 'False'",
          "914:         if opt == False:",
          "915:             status = _cs.cs_option(self.csh, CS_OPT_UNSIGNED, CS_OPT_OFF)",
          "916:         else:",
          "917:             status = _cs.cs_option(self.csh, CS_OPT_UNSIGNED, CS_OPT_ON)",
          "918:         if status != CS_ERR_OK:",
          "919:             raise CsError(status)",
          "920:         # save detail",
          "921:         self._imm_unsigned = opt",
          "",
          "---------------"
        ],
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   default:",
          "424:    break;",
          "426:   case CS_OPT_DETAIL:",
          "427:    handle->detail = (cs_opt_value)value;",
          "428:    return CS_ERR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:   case CS_OPT_UNSIGNED:",
          "427:    handle->imm_unsigned = (cs_opt_value)value;",
          "428:    return CS_ERR_OK;",
          "",
          "---------------"
        ],
        "cs_priv.h||cs_priv.h": [
          "File: cs_priv.h -> cs_priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  PostPrinter_t post_printer;",
          "64:  cs_err errnum;",
          "65:  ARM_ITStatus ITBlock; // for Arm only",
          "67:  int syntax; // asm syntax for simple printer such as ARM, Mips & PPC",
          "68:  bool doing_mem; // handling memory operand in InstPrinter code",
          "69:  unsigned short *insn_cache; // index caching for mapping.c",
          "",
          "[Removed Lines]",
          "66:  cs_opt_value detail;",
          "",
          "[Added Lines]",
          "66:  cs_opt_value detail, imm_unsigned;",
          "",
          "---------------"
        ],
        "include/capstone/capstone.h||include/capstone/capstone.h": [
          "File: include/capstone/capstone.h -> include/capstone/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:  CS_OPT_SKIPDATA, // Skip data when disassembling. Then engine is in SKIPDATA mode.",
          "152:  CS_OPT_SKIPDATA_SETUP, // Setup user-defined function for SKIPDATA option",
          "153:  CS_OPT_MNEMONIC, // Customize instruction mnemonic",
          "154: } cs_opt_type;",
          "157: typedef enum cs_opt_value {",
          "159:  CS_OPT_ON = 3, // Turn ON an option (CS_OPT_DETAIL, CS_OPT_SKIPDATA).",
          "160:  CS_OPT_SYNTAX_DEFAULT = 0, // Default asm syntax (CS_OPT_SYNTAX).",
          "161:  CS_OPT_SYNTAX_INTEL, // X86 Intel asm syntax - default on X86 (CS_OPT_SYNTAX).",
          "",
          "[Removed Lines]",
          "158:  CS_OPT_OFF = 0,  // Turn OFF an option - default option of CS_OPT_DETAIL, CS_OPT_SKIPDATA.",
          "",
          "[Added Lines]",
          "154:  CS_OPT_UNSIGNED, // print immediate operands in unsigned form",
          "159:  CS_OPT_OFF = 0,  // Turn OFF an option - default for CS_OPT_DETAIL, CS_OPT_SKIPDATA, CS_OPT_UNSIGNED.",
          "",
          "---------------"
        ]
      }
    }
  ]
}