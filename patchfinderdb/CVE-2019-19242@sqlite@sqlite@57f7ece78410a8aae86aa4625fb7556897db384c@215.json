{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fcee090746b0f2f87dd78f015fc548ebb08c8adf",
      "candidate_info": {
        "commit_hash": "fcee090746b0f2f87dd78f015fc548ebb08c8adf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcee090746b0f2f87dd78f015fc548ebb08c8adf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/pragma4.test"
        ],
        "message": "Improvements to two cases in pragma4.test.\n\nFossilOrigin-Name: 3c893d9bcc34c391505b08cc35808dd3abddf3c5d952798334c296547bcae6a6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4331b4990cbc1221d94fadd376dfc6efe83f67836aef00912126da4c924bf659",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   execsql { DROP TABLE t1 } db3",
          "123:   execsql { DROP TABLE t2 } db2",
          "124: } {}",
          "128: db2 close",
          "129: db3 close",
          "",
          "[Removed Lines]",
          "125: do_execsql_test 4.1.5 { PRAGMA table_info = t1 }",
          "126: do_execsql_test 4.1.6 { PRAGMA table_info = t2 }",
          "",
          "[Added Lines]",
          "125: do_execsql_test 4.1.5 { PRAGMA table_info(t1) }",
          "126: do_execsql_test 4.1.6 { PRAGMA table_info(t2) }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbb9a5b1e377224f8f409bec03d3947188417623",
      "candidate_info": {
        "commit_hash": "fbb9a5b1e377224f8f409bec03d3947188417623",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbb9a5b1e377224f8f409bec03d3947188417623",
        "files": [
          "ext/fts5/fts5_main.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: a8927d14f88c44828e794787bab080455ab62705c93f65ce7d8db83478aa5a8e",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:         pRank = apVal[i];",
          "1210:         break;",
          "1211:       case 'm': {",
          "1213:         if( zText==0 ) zText = \"\";",
          "1215:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "",
          "[Removed Lines]",
          "1212:         char *zText = sqlite3_value_text(apVal[i]);",
          "",
          "[Added Lines]",
          "1211:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1279:     assert( pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 );",
          "1281:     assert( pCsr->iLastRowid==LARGEST_INT64 );",
          "1282:     assert( pCsr->iFirstRowid==SMALLEST_INT64 );",
          "1283:     if( pTab->pSortCsr->bDesc ){",
          "",
          "[Removed Lines]",
          "1280:     assert( nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "[Added Lines]",
          "1279:     assert( nVal==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d418a7a491761eeb38a70898677a493e2631e5d62e75ee88431f52d3dfd2344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8083ef029f8a298462aa461bebc6a1c1190504f7",
      "candidate_info": {
        "commit_hash": "8083ef029f8a298462aa461bebc6a1c1190504f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8083ef029f8a298462aa461bebc6a1c1190504f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "In the \"pgidx\" command of the showdb utility, try to identify orphaned pages and show when pages have been zeroed out.\n\nFossilOrigin-Name: eed701ef919c70d891727250be6a1b626aeb894c562d221e319ae6d74fc71d3d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5df2bf62fcd4dfdaa195062dddbd5ce5420bc239b2649ac8f547e0db34e7f0bb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:   }",
          "836: }",
          "842: static void page_usage_btree(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: static int allZero(unsigned char *a, int n){",
          "842:   while( n && (a++)[0]==0 ){ n--; }",
          "843:   return n==0;",
          "844: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854:   if( pgno<=0 || pgno>g.mxPage ) return;",
          "855:   a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "856:   switch( a[hdr] ){",
          "857:     case 2:  zType = \"interior node of index\";  break;",
          "858:     case 5:  zType = \"interior node of table\";  break;",
          "859:     case 10: zType = \"leaf of index\";           break;",
          "860:     case 13: zType = \"leaf of table\";           break;",
          "861:   }",
          "863:     page_usage_msg(pgno, \"%s [%s], child %d of page %d\",",
          "864:                    zType, zName, idx, parent);",
          "866:     page_usage_msg(pgno, \"root %s [%s]\", zType, zName);",
          "867:   }",
          "868:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "869:   if( a[hdr]==2 || a[hdr]==5 ){",
          "",
          "[Removed Lines]",
          "862:   if( parent ){",
          "865:   }else{",
          "",
          "[Added Lines]",
          "868:     case 0: {",
          "869:       if( allZero(a, g.pagesize) ){",
          "870:         zType = \"zeroed page\";",
          "871:       }else if( parent<0 ){",
          "872:         return;",
          "873:       }else{",
          "874:         zType = \"corrupt node\";",
          "875:       }",
          "876:       break;",
          "877:     }",
          "882:     default: {",
          "883:       if( parent<0 ) return;",
          "884:       zType = \"corrupt node\";",
          "885:     }",
          "887:   if( parent>0 ){",
          "890:   }else if( parent==0 ){",
          "892:   }else{",
          "893:     page_usage_msg(pgno, \"orphaned %s\", zType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "990:   for(i=1; i<=g.mxPage; i++){",
          "991:     printf(\"%5d: %s\\n\", i, zPageUse[i] ? zPageUse[i] : \"???\");",
          "992:     sqlite3_free(zPageUse[i]);",
          "993:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1018:     if( zPageUse[i]==0 ) page_usage_btree(i, -1, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89dec01e4867f2ab888bc33adbf4a65c2cf7b16a",
      "candidate_info": {
        "commit_hash": "89dec01e4867f2ab888bc33adbf4a65c2cf7b16a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89dec01e4867f2ab888bc33adbf4a65c2cf7b16a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Add a few more test cases to walvfs.test.\n\nFossilOrigin-Name: 14a64df36efe0dc36795311d58385f9c65dc465b214059e07c2ee6b95ea99c87",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6cae81cd1ffb0180e0260d5ba921502c7dee2f54637bff3558a4d1cb5dfd3f32",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     { SQLITE_LOCKED,   \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "237:   };",
          "239:   const char *z;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     { SQLITE_READONLY_CANTINIT, \"SQLITE_READONLY_CANTINIT\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:   if( rc==SQLITE_OK && isWrite && !pFd->pShm->aPage[iPage] ){",
          "920:     tvfsAllocPage(pFd->pShm, iPage, pgsz);",
          "921:   }",
          "924:   return rc;",
          "925: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923:   if( rc==SQLITE_OK || rc==SQLITE_READONLY ){",
          "925:   }",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #-------------------------------------------------------------------------",
          "107: # Test that a checkpoint may be interrupted using sqlite3_interrupt().",
          "108: #",
          "109: reset_db",
          "110: db close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: # And that the error code is SQLITE_NOMEM, not SQLITE_INTERRUPT, if",
          "110: # an OOM error occurs just before the sqlite3_interrupt() call.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   PRAGMA wal_checkpoint",
          "138: } {1 interrupted}",
          "140: #-------------------------------------------------------------------------",
          "141: #",
          "142: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: set ::cnt 2",
          "144: proc xWrite {method file args} {",
          "145:   if {[file tail $file]==\"test.db\"} {",
          "146:     incr ::cnt -1",
          "147:     if {$::cnt==0} {",
          "148:       sqlite3_memdebug_fail 5 -repeat 0",
          "149:       catchsql { SELECT 'a big long string!' }",
          "150:       sqlite3_interrupt db",
          "151:     }",
          "152:   }",
          "153:   return SQLITE_OK",
          "154: }",
          "156: do_catchsql_test 3.2 {",
          "157:   PRAGMA wal_checkpoint",
          "158: } {1 {out of memory}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:   execsql { SELECT count(*) FROM t1 }",
          "236: } {20}",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: vfs_set_readmark db main 1 100",
          "259: vfs_set_readmark db main 2 100",
          "260: vfs_set_readmark db main 3 100",
          "261: vfs_set_readmark db main 4 100",
          "263: tvfs script xShmMapLock",
          "264: tvfs filter {xShmLock xShmMap}",
          "265: proc xShmMapLock {method args} {",
          "266:   if {$method==\"xShmMap\"} {",
          "267:     return \"SQLITE_READONLY\"",
          "268:   }",
          "269:   return SQLITE_BUSY",
          "270: }",
          "272: sqlite3 db2 test.db -vfs tvfs",
          "273: breakpoint",
          "274: do_test 5.5 {",
          "275:   list [catch { execsql { SELECT count(*) FROM t1 } db2 } msg] $msg",
          "276: } {1 {attempt to write a readonly database}}",
          "278: tvfs filter {}",
          "279: vfs_set_readmark db main 1 1",
          "281: do_test 5.6 {",
          "282:   list [catch { execsql { SELECT count(*) FROM t1 } db2 } msg] $msg",
          "283: } {0 20}",
          "284: db2 close",
          "285: db close",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259: } {}",
          "261: tvfs filter xShmLock",
          "262: set ::flag 0",
          "263: proc xShmLock {method file handle spec} {",
          "264:   if {$::flag && [lrange $spec 2 end]==\"lock shared\"} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: tvfs script xShmLock",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "306:   PRAGMA wal_checkpoint",
          "307: } {1 -1 -1}",
          "309: db close",
          "310: tvfs delete",
          "311: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359: #-------------------------------------------------------------------------",
          "360: # Check that the page cache is correctly flushed if a checkpointer using",
          "361: # a version 2 VFS makes a checkpoint with an out-of-date cache.",
          "362: #",
          "363: reset_db",
          "364: testvfs tvfs2 -iversion 2",
          "365: db close",
          "366: sqlite3 db test.db -vfs tvfs2",
          "367: do_execsql_test 8.0 {",
          "368:   PRAGMA auto_vacuum = 0;",
          "369:   PRAGMA page_size = 1024;",
          "370:   CREATE TABLE t1(x);",
          "371:   PRAGMA journal_mode = wal;",
          "372:   WITH s(i) AS ( SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20 )",
          "373:   INSERT INTO t1 SELECT randomblob(75) FROM s;",
          "374: } {wal}",
          "376: do_execsql_test 8.1 { SELECT count(*) FROM t1 } {20}",
          "378: do_test 8.2 {",
          "379:   sqlite3 db2 test.db -vfs tvfs2",
          "380:   execsql {",
          "381:     INSERT INTO t1 VALUES(randomblob(75));",
          "382:   } db2",
          "383:   db2 close",
          "384: } {}",
          "386: do_execsql_test 8.3 {",
          "387:   PRAGMA wal_checkpoint;",
          "388:   SELECT count(*) FROM t1",
          "389: } {0 5 5 21}",
          "390: tvfs2 delete",
          "392: #-------------------------------------------------------------------------",
          "393: reset_db",
          "394: db close",
          "395: sqlite3 db test.db -vfs tvfs",
          "396: do_execsql_test 9.0 {",
          "397:   PRAGMA auto_vacuum = 0;",
          "398:   PRAGMA page_size = 1024;",
          "399:   CREATE TABLE t1(x);",
          "400:   PRAGMA journal_mode = wal;",
          "401:   WITH s(i) AS ( SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20 )",
          "402:   INSERT INTO t1 SELECT randomblob(75) FROM s;",
          "403: } {wal}",
          "405: sqlite3 db2 test.db -vfs tvfs",
          "406: tvfs filter {xShmMap xShmLock}",
          "407: tvfs script xShmMap",
          "408: proc xShmMap {method file handle args} {",
          "409:   switch -- $method {",
          "410:     xShmMap {",
          "411:       return \"SQLITE_READONLY_CANTINIT\"",
          "412:     }",
          "413:     xShmLock {",
          "414:       if {$args==\"{3 1 lock shared}\"} {",
          "415:         return \"SQLITE_IOERR\"",
          "416:       }",
          "417:     }",
          "418:   }",
          "419: }",
          "421: do_test 9.1 {",
          "422:   catchsql { SELECT count(*) FROM t1 } db2",
          "423: } {1 {disk I/O error}}",
          "426: db2 close",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "855b5d144aaa7ff9e52741a039e53ffcaaac7d65",
      "candidate_info": {
        "commit_hash": "855b5d144aaa7ff9e52741a039e53ffcaaac7d65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/855b5d144aaa7ff9e52741a039e53ffcaaac7d65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/subquery2.test"
        ],
        "message": "Ensure that when an ephemeral cursor is reopened with a second invocation of to OP_OpenEphemeral, the sequence counter is reset and the cache marked as stale. Fix for [9cdc5c46].\n\nFossilOrigin-Name: 5fd20e09a522b62a529cf4d76fbdf0a09426f67ffa30430cac6b81ebf32ba43e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/subquery2.test||test/subquery2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1c58522e49cd91426bca7efccf0d99e0f2803dcd5991ae5d56166fc5510e4c62",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3755:     assert( pCx->isEphemeral );",
          "3756:     if( pCx->pBtx ){",
          "3757:       rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3758:     }",
          "3759:   }else{",
          "3760:     pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3761:     if( pCx==0 ) goto no_mem;",
          "3763:     pCx->isEphemeral = 1;",
          "3764:     rc = sqlite3BtreeOpen(db->pVfs, 0, db, &pCx->pBtx,",
          "3765:                           BTREE_OMIT_JOURNAL | BTREE_SINGLE | pOp->p5,",
          "",
          "[Removed Lines]",
          "3762:     pCx->nullRow = 1;",
          "",
          "[Added Lines]",
          "3756:     pCx->seqCount = 0;",
          "3757:     pCx->cacheStatus = CACHE_STALE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3795:     pCx->isOrdered = (pOp->p5!=BTREE_UNORDERED);",
          "3796:   }",
          "3797:   if( rc ) goto abort_due_to_error;",
          "3798:   break;",
          "3799: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3799:   pCx->nullRow = 1;",
          "",
          "---------------"
        ],
        "test/subquery2.test||test/subquery2.test": [
          "File: test/subquery2.test -> test/subquery2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   }]",
          "198: }",
          "201: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: # Test that ticket [9cdc5c46] is fixed.",
          "202: #",
          "203: reset_db",
          "204: do_execsql_test 5.0 {",
          "205:   CREATE TABLE t1(x);",
          "206:   INSERT INTO t1 VALUES('ALFKI');",
          "207:   INSERT INTO t1 VALUES('ANATR');",
          "209:   CREATE TABLE t2(y, z);",
          "210:   CREATE INDEX t2y ON t2 (y);",
          "211:   INSERT INTO t2 VALUES('ANATR', '1997-08-08 00:00:00');",
          "212:   INSERT INTO t2 VALUES('ALFKI', '1997-08-25 00:00:00');",
          "213: }",
          "214: do_execsql_test 5.1 {",
          "215:   SELECT ( SELECT y FROM t2 WHERE x = y ORDER BY y, z) FROM t1;",
          "216: } {ALFKI ANATR}",
          "",
          "---------------"
        ]
      }
    }
  ]
}