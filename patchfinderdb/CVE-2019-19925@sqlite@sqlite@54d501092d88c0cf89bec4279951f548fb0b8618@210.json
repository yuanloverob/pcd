{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f236b21f4b3dba4c104fcda5eb582297be89efe9",
      "candidate_info": {
        "commit_hash": "f236b21f4b3dba4c104fcda5eb582297be89efe9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f236b21f4b3dba4c104fcda5eb582297be89efe9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/window.c"
        ],
        "message": "Add missing VdbeCoverage() macros to new code.\n\nFossilOrigin-Name: b1cbcdc6eb42cca0c42a05e0d6ba4c6c7f09adff0c59ecfc5b434a94dec07a41",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73e30c2e92ccab274ff7cee48511c461de148786bb9d338921c1ecb193822282",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5218:       if( pLevel->regBignull ){",
          "5219:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5220:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5221:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5222:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5227:         sqlite3VdbeJumpHere(v, addr);",
          "5228:       }",
          "5229: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "",
          "[Removed Lines]",
          "5223:         sqlite3VdbeChangeP5(v, pLevel->p5);",
          "5224:         VdbeCoverage(v);",
          "5225:         VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5226:         VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "",
          "[Added Lines]",
          "5221:         VdbeCoverage(v);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1907:     addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1908:     switch( op ){",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1913:     }",
          "1914:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "",
          "[Removed Lines]",
          "1910:       case OP_Gt: sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); break;",
          "1911:       case OP_Le: sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); break;",
          "",
          "[Added Lines]",
          "1910:       case OP_Gt:",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "1912:         VdbeCoverage(v);",
          "1913:         break;",
          "1914:       case OP_Le:",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "1916:         VdbeCoverage(v);",
          "1917:         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
      "candidate_info": {
        "commit_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Fix a potential array bounds overflow in the mkkeywordhash.c code generator. Also add marks to omit keywords specific to generated columns when building with -DSQLITE_OMIT_GENERATED_COLUMNS.\n\nFossilOrigin-Name: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: #else",
          "155: #  define WINDOWFUNC 0x00100000",
          "156: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "158: #  define GENCOL 0",
          "159: #else",
          "160: #  define GENCOL 0x00200000",
          "161: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "",
          "[Removed Lines]",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "",
          "[Added Lines]",
          "173:   { \"ALWAYS\",           \"TK_ALWAYS\",       GENCOL,           0      },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "",
          "[Removed Lines]",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "",
          "[Added Lines]",
          "226:   { \"GENERATED\",        \"TK_GENERATED\",    GENCOL,           1      },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "",
          "[Removed Lines]",
          "367:   int j = aKeywordTable[i].iNext;",
          "",
          "[Added Lines]",
          "372:   int j;",
          "373:   if( i<0 ) return;",
          "374:   j = aKeywordTable[i].iNext;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75f107688588c23f0ac084d59903d2443852b8f1",
      "candidate_info": {
        "commit_hash": "75f107688588c23f0ac084d59903d2443852b8f1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75f107688588c23f0ac084d59903d2443852b8f1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Due to the previous change, the p5 parameter to OP_VColumn no longer ever contains extraneous bits, so change a testcase() into an assert() to show as much.\n\nFossilOrigin-Name: 5b4a88cd3b3a32b1242e0eb733cc0bc4becb830a887b8e6604a4c7452050e163",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2401e04730a156aa48787b91af4e516406cb7635145e430be62fd16481816237",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7217:   assert( pModule->xColumn );",
          "7218:   memset(&sContext, 0, sizeof(sContext));",
          "7219:   sContext.pOut = pDest;",
          "7221:   if( pOp->p5 & OPFLAG_NOCHNG ){",
          "7222:     sqlite3VdbeMemSetNull(pDest);",
          "7223:     pDest->flags = MEM_Null|MEM_Zero;",
          "",
          "[Removed Lines]",
          "7220:   testcase( (pOp->p5 & OPFLAG_NOCHNG)==0 && pOp->p5!=0 );",
          "",
          "[Added Lines]",
          "7220:   assert( pOp->p5==OPFLAG_NOCHNG || pOp->p5==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
      "candidate_info": {
        "commit_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08652b5ea00316539c913fc936e2966c8d58d283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/pragma.c",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Provide the SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA compile-time option to omit the case_sensitive_like pragma.  This change, in combination with documentation changes, is the current solution to ticket [a340eef47b0cad5].\n\nFossilOrigin-Name: eabe7f2d4ff0e0dd868dcab7ec1d4a9168a25f80d3a52f0eeea2f90bd33782f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658b84d7f4a0886591c5aab30ed9e31c4a0f56db303eb863f24833ca37085d14",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1824:   }",
          "1825:   sqlite3CreateFunc(db, \"like\", 2, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1826:   sqlite3CreateFunc(db, \"like\", 3, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1830:   setLikeOptFlag(db, \"like\",",
          "1831:       caseSensitive ? (SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE) : SQLITE_FUNC_LIKE);",
          "1832: }",
          "",
          "[Removed Lines]",
          "1827:   sqlite3CreateFunc(db, \"glob\", 2, SQLITE_UTF8,",
          "1828:       (struct compareInfo*)&globInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1829:   setLikeOptFlag(db, \"glob\", SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424: #ifndef SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: #endif",
          "181:  {/* zName:     */ \"case_sensitive_like\",",
          "186:  {/* zName:     */ \"cell_size_check\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #if !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "187: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   NAME: case_sensitive_like",
          "303:   FLAG: NoColumns",
          "305:   NAME: integrity_check",
          "306:   FLAG: NeedSchema Result0 Result1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:   IF:   !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
      "candidate_info": {
        "commit_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/filter1.test"
        ],
        "message": "Fix a problem with queries containing a min() or max() function for which the FILTER clause excludes all rows.\n\nFossilOrigin-Name: b1d7e104e034655fe41bc55c562d91e8074a2973d538b8b29301458db45afc57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 601ce9532d34f97a5faa170b6d8a272e5c54f2eabff84660201a1840e0fd9929",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5343:   int i;",
          "5344:   int regHit = 0;",
          "5345:   int addrHitTest = 0;",
          "5346:   struct AggInfo_func *pF;",
          "5347:   struct AggInfo_col *pC;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5346:   int bFilterMinMax = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5356:     assert( !IsWindowFunc(pF->pExpr) );",
          "5357:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5358:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5359:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5360:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5361:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5360:       if( pAggInfo->nAccumulator",
          "5361:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5362:       ){",
          "5363:         bFilterMinMax = 1;",
          "5364:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5369:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5370:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5406:   for(i=0, pC=pAggInfo->aCol; i<pAggInfo->nAccumulator; i++, pC++){",
          "5407:     sqlite3ExprCode(pParse, pC->pExpr, pC->iMem);",
          "5408:   }",
          "5409:   pAggInfo->directMode = 0;",
          "5410:   if( addrHitTest ){",
          "5411:     sqlite3VdbeJumpHere(v, addrHitTest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5421:   if( bFilterMinMax ){",
          "5425:     sqlite3VdbeAddOp2(v, OP_Integer, 1, regHit);",
          "5426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6581:       {",
          "6589:         if( sAggInfo.nAccumulator ){",
          "6590:           for(i=0; i<sAggInfo.nFunc; i++){",
          "6591:             if( sAggInfo.aFunc[i].pFunc->funcFlags&SQLITE_FUNC_NEEDCOLL ) break;",
          "6592:           }",
          "6593:           if( i==sAggInfo.nFunc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6614:             if( ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_WinFunc) ) continue;",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #-------------------------------------------------------------------------",
          "105: reset_db",
          "106: do_execsql_test 3.0 {",
          "107:   CREATE TABLE t1(a,b);",
          "108:   INSERT INTO t1 VALUES(1, 1);",
          "109: }",
          "110: do_execsql_test 3.1 {",
          "111:   SELECT b, max(a) FILTER (WHERE b='x') FROM t1;",
          "112: } {1 {}}",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE t2(a, b, c);",
          "116:   INSERT INTO t2 VALUES(1, 2, 3);",
          "117:   INSERT INTO t2 VALUES(1, 3, 4);",
          "118:   INSERT INTO t2 VALUES(2, 5, 6);",
          "119:   INSERT INTO t2 VALUES(2, 7, 8);",
          "120: }",
          "121: do_execsql_test 3.3 {",
          "122:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "123: } {1 3 {} 2 6 {}}",
          "125: do_execsql_test 3.4 {",
          "126:   DELETE FROM t2;",
          "127:   INSERT INTO t2 VALUES(1, 5, 'x');",
          "128:   INSERT INTO t2 VALUES(1, 2, 3);",
          "129:   INSERT INTO t2 VALUES(1, 4, 'x');",
          "130:   INSERT INTO t2 VALUES(2, 5, 6);",
          "131:   INSERT INTO t2 VALUES(2, 7, 8);",
          "132: }",
          "133: do_execsql_test 3.5 {",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}