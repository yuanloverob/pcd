{
  "cve_id": "CVE-2022-32166",
  "cve_desc": "In ovs versions v0.90.0 through v2.5.0 are vulnerable to heap buffer over-read in flow.c. An unsafe comparison of \u201cminimasks\u201d function could lead access to an unmapped region of memory. This vulnerability is capable of crashing the software, memory modification, and possible remote execution.",
  "repo": "cloudbase/ovs",
  "patch_hash": "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
  "patch_info": {
    "commit_hash": "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
    "repo": "cloudbase/ovs",
    "commit_url": "https://github.com/cloudbase/ovs/commit/2ed6505555cdcb46f9b1f0329d1491b75290fc73",
    "files": [
      "lib/flow.c"
    ],
    "message": "flow: Avoid unsafe comparison of minimasks.\n\nThe following, run inside the OVS sandbox, caused OVS to abort when\nAddress Sanitizer was used:\n\n    ovs-vsctl add-br br-int\n    ovs-ofctl add-flow br-int \"table=0,cookie=0x1234,priority=10000,icmp,actions=drop\"\n    ovs-ofctl --strict del-flows br-int \"table=0,cookie=0x1234/-1,priority=10000\"\n\nSample report from Address Sanitizer:\n\n==3029==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000043260 at pc 0x7f6b09c2459b bp 0x7ffcb67e7540 sp 0x7ffcb67e6cf0\nREAD of size 40 at 0x603000043260 thread T0\n    #0 0x7f6b09c2459a  (/lib/x86_64-linux-gnu/libasan.so.5+0xb859a)\n    #1 0x565110a748a5 in minimask_equal ../lib/flow.c:3510\n    #2 0x565110a9ea41 in minimatch_equal ../lib/match.c:1821\n    #3 0x56511091e864 in collect_rules_strict ../ofproto/ofproto.c:4516\n    #4 0x56511093d526 in delete_flow_start_strict ../ofproto/ofproto.c:5959\n    #5 0x56511093d526 in ofproto_flow_mod_start ../ofproto/ofproto.c:7949\n    #6 0x56511093d77b in handle_flow_mod__ ../ofproto/ofproto.c:6122\n    #7 0x56511093db71 in handle_flow_mod ../ofproto/ofproto.c:6099\n    #8 0x5651109407f6 in handle_single_part_openflow ../ofproto/ofproto.c:8406\n    #9 0x5651109407f6 in handle_openflow ../ofproto/ofproto.c:8587\n    #10 0x5651109e40da in ofconn_run ../ofproto/connmgr.c:1318\n    #11 0x5651109e40da in connmgr_run ../ofproto/connmgr.c:355\n    #12 0x56511092b129 in ofproto_run ../ofproto/ofproto.c:1826\n    #13 0x5651108f23cd in bridge_run__ ../vswitchd/bridge.c:2965\n    #14 0x565110904887 in bridge_run ../vswitchd/bridge.c:3023\n    #15 0x5651108e659c in main ../vswitchd/ovs-vswitchd.c:127\n    #16 0x7f6b093b709a in __libc_start_main ../csu/libc-start.c:308\n    #17 0x5651108e9009 in _start (/home/blp/nicira/ovs/_build/vswitchd/ovs-vswitchd+0x11d009)\n\nThis fixes the problem, which although largely theoretical could crop up\nwith odd implementations of memcmp(), perhaps ones optimized in various\n\"clever\" ways.  All in all, it seems best to avoid the theoretical problem.\n\nAcked-by: Dumitru Ceara <dceara@redhat.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
    "before_after_code_files": [
      "lib/flow.c||lib/flow.c"
    ]
  },
  "patch_diff": {
    "lib/flow.c||lib/flow.c": [
      "File: lib/flow.c -> lib/flow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3511: {",
      "3512:     return !memcmp(a, b, sizeof *a",
      "3513:                    + MINIFLOW_VALUES_SIZE(miniflow_n_values(&a->masks)));",
      "",
      "[Removed Lines]",
      "3509: bool",
      "3510: minimask_equal(const struct minimask *a, const struct minimask *b)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f889134c238bd4e3d14fffc15f95941c70fda49",
      "candidate_info": {
        "commit_hash": "4f889134c238bd4e3d14fffc15f95941c70fda49",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/4f889134c238bd4e3d14fffc15f95941c70fda49",
        "files": [
          "lib/odp-util.c"
        ],
        "message": "odp-util: Fix passing uninitialized bytes in OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV*.\n\nBoth ovs_key_ct_tuple_ipv* structures contains padding at the end\nthat mast be cleared before passing attributes to kernel:\n\n Syscall param sendmsg(msg.msg_iov[0]) points to uninitialised byte(s)\n    at 0x566A607: sendmsg (sendmsg.c:28)\n    by 0xFC95CE: nl_sock_transact_multiple__ (netlink-socket.c:858)\n    by 0xFC8580: nl_sock_transact_multiple (netlink-socket.c:1079)\n    by 0xFC83FF: nl_transact_multiple (netlink-socket.c:1839)\n    by 0xFA8648: dpif_netlink_operate__ (dpif-netlink.c:1926)\n    by 0xFA789F: dpif_netlink_operate_chunks (dpif-netlink.c:2219)\n    by 0xFA25CB: dpif_netlink_operate (dpif-netlink.c:2278)\n    by 0xE5BB4C: dpif_operate (dpif.c:1377)\n    by 0xE5B7F6: dpif_flow_put (dpif.c:1048)\n    by 0xE5B49A: dpif_probe_feature (dpif.c:965)\n    by 0xDD6BF5: check_ct_orig_tuple (ofproto-dpif.c:1557)\n    by 0xDD41EC: check_support (ofproto-dpif.c:1590)\n    by 0xDD3BF3: open_dpif_backer (ofproto-dpif.c:818)\n    by 0xDC8467: construct (ofproto-dpif.c:1605)\n    by 0xDAD6BB: ofproto_create (ofproto.c:549)\n    by 0xD96A19: bridge_reconfigure (bridge.c:877)\n    by 0xD9625D: bridge_run (bridge.c:3324)\n    by 0xDA5829: main (ovs-vswitchd.c:127)\n  Address 0x1ffefe36a5 is on thread 1's stack\n  in frame #4, created by dpif_netlink_operate__ (dpif-netlink.c:1839)\n  Uninitialised value was created by a stack allocation\n    at 0xEB87D0: odp_flow_key_from_flow__ (odp-util.c:5996)\n\nFixes: daf4d3c18da4 (\"odp: Support conntrack orig tuple key.\")\nSigned-off-by: Ilya Maximets <i.maximets@ovn.org>\nAcked-by: Ben Pfaff <blp@ovn.org>",
        "before_after_code_files": [
          "lib/odp-util.c||lib/odp-util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/odp-util.c||lib/odp-util.c": [
          "File: lib/odp-util.c -> lib/odp-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6001:     }",
          "6002:     if (flow->ct_nw_proto) {",
          "6003:         if (parms->support.ct_orig_tuple",
          "6013:                               sizeof ct);",
          "6014:         } else if (parms->support.ct_orig_tuple6",
          "6024:                               sizeof ct);",
          "6025:         }",
          "6026:     }",
          "",
          "[Removed Lines]",
          "6004:             && flow->dl_type == htons(ETH_TYPE_IP)) {",
          "6005:             struct ovs_key_ct_tuple_ipv4 ct = {",
          "6006:                 data->ct_nw_src,",
          "6007:                 data->ct_nw_dst,",
          "6008:                 data->ct_tp_src,",
          "6009:                 data->ct_tp_dst,",
          "6010:                 data->ct_nw_proto,",
          "6011:             };",
          "6012:             nl_msg_put_unspec(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4, &ct,",
          "6015:                    && flow->dl_type == htons(ETH_TYPE_IPV6)) {",
          "6016:             struct ovs_key_ct_tuple_ipv6 ct = {",
          "6017:                 data->ct_ipv6_src,",
          "6018:                 data->ct_ipv6_dst,",
          "6019:                 data->ct_tp_src,",
          "6020:                 data->ct_tp_dst,",
          "6021:                 data->ct_nw_proto,",
          "6022:             };",
          "6023:             nl_msg_put_unspec(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6, &ct,",
          "",
          "[Added Lines]",
          "6004:             && flow->dl_type == htons(ETH_TYPE_IP)) {",
          "6005:             struct ovs_key_ct_tuple_ipv4 *ct;",
          "6008:             ct = nl_msg_put_unspec_zero(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4,",
          "6009:                                         sizeof *ct);",
          "6010:             ct->ipv4_src = data->ct_nw_src;",
          "6011:             ct->ipv4_dst = data->ct_nw_dst;",
          "6012:             ct->src_port = data->ct_tp_src;",
          "6013:             ct->dst_port = data->ct_tp_dst;",
          "6016:                    && flow->dl_type == htons(ETH_TYPE_IPV6)) {",
          "6017:             struct ovs_key_ct_tuple_ipv6 *ct;",
          "6020:             ct = nl_msg_put_unspec_zero(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6,",
          "6021:                                         sizeof *ct);",
          "6022:             ct->ipv6_src = data->ct_ipv6_src;",
          "6023:             ct->ipv6_dst = data->ct_ipv6_dst;",
          "6024:             ct->src_port = data->ct_tp_src;",
          "6025:             ct->dst_port = data->ct_tp_dst;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4d2627cf5fcecdc64c1bacc2917ecdbcf00cf70",
      "candidate_info": {
        "commit_hash": "e4d2627cf5fcecdc64c1bacc2917ecdbcf00cf70",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/e4d2627cf5fcecdc64c1bacc2917ecdbcf00cf70",
        "files": [
          "ofproto/ofproto-dpif-upcall.c"
        ],
        "message": "ofproto: fix stack-buffer-overflow\n\nShould use flow->actions not &flow->actions.\n\nhere is ASAN report:\n=================================================================\n==57189==ERROR: AddressSanitizer: stack-buffer-overflow on address 0xffff428fa0e8 at pc 0xffff7f61a520 bp 0xffff428f9420 sp 0xffff428f9498 READ of size 196 at 0xffff428fa0e8 thread T150 (revalidator22)\n    #0 0xffff7f61a51f in __interceptor_memcpy (/lib64/libasan.so.4+0xa251f)\n    #1 0xaaaad26a3b2b in ofpbuf_put lib/ofpbuf.c:426\n    #2 0xaaaad26a30cb in ofpbuf_clone_data_with_headroom lib/ofpbuf.c:248\n    #3 0xaaaad26a2e77 in ofpbuf_clone_with_headroom lib/ofpbuf.c:218\n    #4 0xaaaad26a2dc3 in ofpbuf_clone lib/ofpbuf.c:208\n    #5 0xaaaad23e3993 in ukey_set_actions ofproto/ofproto-dpif-upcall.c:1640\n    #6 0xaaaad23e3f03 in ukey_create__ ofproto/ofproto-dpif-upcall.c:1696\n    #7 0xaaaad23e553f in ukey_create_from_dpif_flow ofproto/ofproto-dpif-upcall.c:1806\n    #8 0xaaaad23e65fb in ukey_acquire ofproto/ofproto-dpif-upcall.c:1984\n    #9 0xaaaad23eb583 in revalidate ofproto/ofproto-dpif-upcall.c:2625\n    #10 0xaaaad23dee5f in udpif_revalidator ofproto/ofproto-dpif-upcall.c:1076\n    #11 0xaaaad26b84ef in ovsthread_wrapper lib/ovs-thread.c:708\n    #12 0xffff7e74a8bb in start_thread (/lib64/libpthread.so.0+0x78bb)\n    #13 0xffff7e0665cb in thread_start (/lib64/libc.so.6+0xd55cb)\n\nAddress 0xffff428fa0e8 is located in stack of thread T150 (revalidator22) at offset 328 in frame\n    #0 0xaaaad23e4cab in ukey_create_from_dpif_flow ofproto/ofproto-dpif-upcall.c:1762\n\n  This frame has 4 object(s):\n    [32, 96) 'actions'\n    [128, 192) 'buf'\n    [224, 328) 'full_flow'\n    [384, 2432) 'stub' <== Memory access at offset 328 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n      (longjmp and C++ exceptions *are* supported) Thread T150 (revalidator22) created by T0 here:\n    #0 0xffff7f5b0f7f in __interceptor_pthread_create (/lib64/libasan.so.4+0x38f7f)\n    #1 0xaaaad26b891f in ovs_thread_create lib/ovs-thread.c:792\n    #2 0xaaaad23dc62f in udpif_start_threads ofproto/ofproto-dpif-upcall.c:639\n    #3 0xaaaad23daf87 in ofproto_set_flow_table ofproto/ofproto-dpif-upcall.c:446\n    #4 0xaaaad230ff7f in dpdk_evs_cfg_set vswitchd/bridge.c:1134\n    #5 0xaaaad2310097 in bridge_reconfigure vswitchd/bridge.c:1148\n    #6 0xaaaad23279d7 in bridge_run vswitchd/bridge.c:3944\n    #7 0xaaaad23365a3 in main vswitchd/ovs-vswitchd.c:240\n    #8 0xffff7dfb1adf in __libc_start_main (/lib64/libc.so.6+0x20adf)\n    #9 0xaaaad230a3d3  (/usr/sbin/ovs-vswitchd-2.7.0-1.1.RC5.001.asan+0x26f3d3)\n\nSUMMARY: AddressSanitizer: stack-buffer-overflow (/lib64/libasan.so.4+0xa251f) in __interceptor_memcpy Shadow bytes around the buggy address:\n  0x200fe851f3c0: 00 00 00 00 f1 f1 f1 f1 f8 f2 f2 f2 00 00 00 00\n  0x200fe851f3d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f3e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f3f0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 00 00 00\n  0x200fe851f400: f2 f2 f2 f2 f8 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2\n=>0x200fe851f410: 00 00 00 00 00 00 00 00 00 00 00 00 00[f2]f2 f2\n  0x200fe851f420: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==57189==ABORTING\n\nAcked-by: Numan Siddique <numans@ovn.org>\nSigned-off-by: Linhaifeng <haifeng.lin@huawei.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
        "before_after_code_files": [
          "ofproto/ofproto-dpif-upcall.c||ofproto/ofproto-dpif-upcall.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ofproto/ofproto-dpif-upcall.c||ofproto/ofproto-dpif-upcall.c": [
          "File: ofproto/ofproto-dpif-upcall.c -> ofproto/ofproto-dpif-upcall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1798:             return EINVAL;",
          "1799:         }",
          "1800:     }",
          "1803:     ofpbuf_use_const(&actions, &flow->actions, flow->actions_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae15413897c7cc04c7895ae69ea0939acb9810f1",
      "candidate_info": {
        "commit_hash": "ae15413897c7cc04c7895ae69ea0939acb9810f1",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/ae15413897c7cc04c7895ae69ea0939acb9810f1",
        "files": [
          "ofproto/ofproto-dpif-upcall.c"
        ],
        "message": "ofproto: fix stack-buffer-overflow\n\nShould use flow->actions not &flow->actions.\n\nhere is ASAN report:\n=================================================================\n==57189==ERROR: AddressSanitizer: stack-buffer-overflow on address 0xffff428fa0e8 at pc 0xffff7f61a520 bp 0xffff428f9420 sp 0xffff428f9498 READ of size 196 at 0xffff428fa0e8 thread T150 (revalidator22)\n    #0 0xffff7f61a51f in __interceptor_memcpy (/lib64/libasan.so.4+0xa251f)\n    #1 0xaaaad26a3b2b in ofpbuf_put lib/ofpbuf.c:426\n    #2 0xaaaad26a30cb in ofpbuf_clone_data_with_headroom lib/ofpbuf.c:248\n    #3 0xaaaad26a2e77 in ofpbuf_clone_with_headroom lib/ofpbuf.c:218\n    #4 0xaaaad26a2dc3 in ofpbuf_clone lib/ofpbuf.c:208\n    #5 0xaaaad23e3993 in ukey_set_actions ofproto/ofproto-dpif-upcall.c:1640\n    #6 0xaaaad23e3f03 in ukey_create__ ofproto/ofproto-dpif-upcall.c:1696\n    #7 0xaaaad23e553f in ukey_create_from_dpif_flow ofproto/ofproto-dpif-upcall.c:1806\n    #8 0xaaaad23e65fb in ukey_acquire ofproto/ofproto-dpif-upcall.c:1984\n    #9 0xaaaad23eb583 in revalidate ofproto/ofproto-dpif-upcall.c:2625\n    #10 0xaaaad23dee5f in udpif_revalidator ofproto/ofproto-dpif-upcall.c:1076\n    #11 0xaaaad26b84ef in ovsthread_wrapper lib/ovs-thread.c:708\n    #12 0xffff7e74a8bb in start_thread (/lib64/libpthread.so.0+0x78bb)\n    #13 0xffff7e0665cb in thread_start (/lib64/libc.so.6+0xd55cb)\n\nAddress 0xffff428fa0e8 is located in stack of thread T150 (revalidator22) at offset 328 in frame\n    #0 0xaaaad23e4cab in ukey_create_from_dpif_flow ofproto/ofproto-dpif-upcall.c:1762\n\n  This frame has 4 object(s):\n    [32, 96) 'actions'\n    [128, 192) 'buf'\n    [224, 328) 'full_flow'\n    [384, 2432) 'stub' <== Memory access at offset 328 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n      (longjmp and C++ exceptions *are* supported) Thread T150 (revalidator22) created by T0 here:\n    #0 0xffff7f5b0f7f in __interceptor_pthread_create (/lib64/libasan.so.4+0x38f7f)\n    #1 0xaaaad26b891f in ovs_thread_create lib/ovs-thread.c:792\n    #2 0xaaaad23dc62f in udpif_start_threads ofproto/ofproto-dpif-upcall.c:639\n    #3 0xaaaad23daf87 in ofproto_set_flow_table ofproto/ofproto-dpif-upcall.c:446\n    #4 0xaaaad230ff7f in dpdk_evs_cfg_set vswitchd/bridge.c:1134\n    #5 0xaaaad2310097 in bridge_reconfigure vswitchd/bridge.c:1148\n    #6 0xaaaad23279d7 in bridge_run vswitchd/bridge.c:3944\n    #7 0xaaaad23365a3 in main vswitchd/ovs-vswitchd.c:240\n    #8 0xffff7dfb1adf in __libc_start_main (/lib64/libc.so.6+0x20adf)\n    #9 0xaaaad230a3d3  (/usr/sbin/ovs-vswitchd-2.7.0-1.1.RC5.001.asan+0x26f3d3)\n\nSUMMARY: AddressSanitizer: stack-buffer-overflow (/lib64/libasan.so.4+0xa251f) in __interceptor_memcpy Shadow bytes around the buggy address:\n  0x200fe851f3c0: 00 00 00 00 f1 f1 f1 f1 f8 f2 f2 f2 00 00 00 00\n  0x200fe851f3d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f3e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f3f0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 00 00 00\n  0x200fe851f400: f2 f2 f2 f2 f8 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2\n=>0x200fe851f410: 00 00 00 00 00 00 00 00 00 00 00 00 00[f2]f2 f2\n  0x200fe851f420: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x200fe851f460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==57189==ABORTING\n\nAcked-by: Numan Siddique <numans@ovn.org>\nSigned-off-by: Linhaifeng <haifeng.lin@huawei.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
        "before_after_code_files": [
          "ofproto/ofproto-dpif-upcall.c||ofproto/ofproto-dpif-upcall.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ofproto/ofproto-dpif-upcall.c||ofproto/ofproto-dpif-upcall.c": [
          "File: ofproto/ofproto-dpif-upcall.c -> ofproto/ofproto-dpif-upcall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1798:             return EINVAL;",
          "1799:         }",
          "1800:     }",
          "1803:     ofpbuf_use_const(&actions, &flow->actions, flow->actions_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}