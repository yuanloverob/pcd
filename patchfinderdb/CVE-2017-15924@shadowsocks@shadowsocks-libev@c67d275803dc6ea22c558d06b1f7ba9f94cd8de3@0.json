{
  "cve_id": "CVE-2017-15924",
  "cve_desc": "In manager.c in ss-manager in shadowsocks-libev 3.1.0, improper parsing allows command injection via shell metacharacters in a JSON configuration request received via 127.0.0.1 UDP traffic, related to the add_server, build_config, and construct_command_line functions.",
  "repo": "shadowsocks/shadowsocks-libev",
  "patch_hash": "c67d275803dc6ea22c558d06b1f7ba9f94cd8de3",
  "patch_info": {
    "commit_hash": "c67d275803dc6ea22c558d06b1f7ba9f94cd8de3",
    "repo": "shadowsocks/shadowsocks-libev",
    "commit_url": "https://github.com/shadowsocks/shadowsocks-libev/commit/c67d275803dc6ea22c558d06b1f7ba9f94cd8de3",
    "files": [
      "src/manager.c"
    ],
    "message": "Fix #1734",
    "before_after_code_files": [
      "src/manager.c||src/manager.c"
    ]
  },
  "patch_diff": {
    "src/manager.c||src/manager.c": [
      "File: src/manager.c -> src/manager.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "92: }",
      "94: static void",
      "96: {",
      "97:     char *path    = NULL;",
      "98:     int path_size = strlen(prefix) + strlen(server->port) + 20;",
      "",
      "[Removed Lines]",
      "95: build_config(char *prefix, struct server *server)",
      "",
      "[Added Lines]",
      "95: build_config(char *prefix, struct manager_ctx *manager, struct server *server)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     fprintf(f, \"{\\n\");",
      "111:     fprintf(f, \"\\\"server_port\\\":%d,\\n\", atoi(server->port));",
      "112:     fprintf(f, \"\\\"password\\\":\\\"%s\\\"\", server->password);",
      "118:     fprintf(f, \"\\n}\\n\");",
      "119:     fclose(f);",
      "120:     ss_free(path);",
      "",
      "[Removed Lines]",
      "113:     if (server->fast_open[0]) fprintf(f, \",\\n\\\"fast_open\\\": %s\", server->fast_open);",
      "114:     if (server->mode)   fprintf(f, \",\\n\\\"mode\\\":\\\"%s\\\"\", server->mode);",
      "115:     if (server->method) fprintf(f, \",\\n\\\"method\\\":\\\"%s\\\"\", server->method);",
      "116:     if (server->plugin) fprintf(f, \",\\n\\\"plugin\\\":\\\"%s\\\"\", server->plugin);",
      "117:     if (server->plugin_opts) fprintf(f, \",\\n\\\"plugin_opts\\\":\\\"%s\\\"\", server->plugin_opts);",
      "",
      "[Added Lines]",
      "113:     if (server->method)",
      "114:         fprintf(f, \",\\n\\\"method\\\":\\\"%s\\\"\", server->method);",
      "115:     else if (manager->method)",
      "116:         fprintf(f, \",\\n\\\"method\\\":\\\"%s\\\"\", manager->method);",
      "117:     if (server->fast_open[0])",
      "118:         fprintf(f, \",\\n\\\"fast_open\\\": %s\", server->fast_open);",
      "119:     if (server->mode)",
      "120:         fprintf(f, \",\\n\\\"mode\\\":\\\"%s\\\"\", server->mode);",
      "121:     if (server->plugin)",
      "122:         fprintf(f, \",\\n\\\"plugin\\\":\\\"%s\\\"\", server->plugin);",
      "123:     if (server->plugin_opts)",
      "124:         fprintf(f, \",\\n\\\"plugin_opts\\\":\\\"%s\\\"\", server->plugin_opts);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "124: construct_command_line(struct manager_ctx *manager, struct server *server)",
      "125: {",
      "126:     static char cmd[BUF_SIZE];",
      "128:     int i;",
      "133:     memset(cmd, 0, BUF_SIZE);",
      "134:     snprintf(cmd, BUF_SIZE,",
      "139:     if (manager->acl != NULL) {",
      "140:         int len = strlen(cmd);",
      "",
      "[Removed Lines]",
      "127:     char *method = manager->method;",
      "130:     build_config(working_dir, server);",
      "132:     if (server->method) method = server->method;",
      "135:              \"%s -m %s --manager-address %s -f %s/.shadowsocks_%s.pid -c %s/.shadowsocks_%s.conf\",",
      "136:              executable, method, manager->manager_address,",
      "137:              working_dir, server->port, working_dir, server->port);",
      "",
      "[Added Lines]",
      "135:     int port;",
      "137:     port = atoi(server->port);",
      "139:     build_config(working_dir, manager, server);",
      "143:              \"%s --manager-address %s -f %s/.shadowsocks_%d.pid -c %s/.shadowsocks_%d.conf\",",
      "144:              executable, manager->manager_address, working_dir, port, working_dir, port);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae156c6aebcb7a6e68c6bb6124b5e7a3a1946d75",
      "candidate_info": {
        "commit_hash": "ae156c6aebcb7a6e68c6bb6124b5e7a3a1946d75",
        "repo": "shadowsocks/shadowsocks-libev",
        "commit_url": "https://github.com/shadowsocks/shadowsocks-libev/commit/ae156c6aebcb7a6e68c6bb6124b5e7a3a1946d75",
        "files": [
          "src/manager.c"
        ],
        "message": "Fix #1518 config file with wrong json format\n\nRemoving trailing \",\" to make the configuration file compliant with JSON specification",
        "before_after_code_files": [
          "src/manager.c||src/manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/manager.c||src/manager.c"
          ],
          "candidate": [
            "src/manager.c||src/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "src/manager.c||src/manager.c": [
          "File: src/manager.c -> src/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     }",
          "111:     fprintf(f, \"{\\n\");",
          "112:     fprintf(f, \"\\\"server_port\\\":\\\"%s\\\",\\n\", server->port);",
          "120:     fclose(f);",
          "121:     ss_free(path);",
          "122: }",
          "",
          "[Removed Lines]",
          "113:     fprintf(f, \"\\\"password\\\":\\\"%s\\\",\\n\", server->password);",
          "114:     if (server->fast_open[0]) fprintf(f, \"\\\"fast_open\\\": %s,\\n\", server->fast_open);",
          "115:     if (server->mode)   fprintf(f, \"\\\"mode\\\":\\\"%s\\\",\\n\", server->mode);",
          "116:     if (server->method) fprintf(f, \"\\\"method\\\":\\\"%s\\\",\\n\", server->method);",
          "117:     if (server->plugin) fprintf(f, \"\\\"plugin\\\":\\\"%s\\\",\\n\", server->plugin);",
          "118:     if (server->plugin_opts) fprintf(f, \"\\\"plugin_opts\\\":\\\"%s\\\",\\n\", server->plugin_opts);",
          "119:     fprintf(f, \"}\\n\");",
          "",
          "[Added Lines]",
          "113:     fprintf(f, \"\\\"password\\\":\\\"%s\\\"\", server->password);",
          "114:     if (server->fast_open[0]) fprintf(f, \",\\n\\\"fast_open\\\": %s\", server->fast_open);",
          "115:     if (server->mode)   fprintf(f, \",\\n\\\"mode\\\":\\\"%s\\\"\", server->mode);",
          "116:     if (server->method) fprintf(f, \",\\n\\\"method\\\":\\\"%s\\\"\", server->method);",
          "117:     if (server->plugin) fprintf(f, \",\\n\\\"plugin\\\":\\\"%s\\\"\", server->plugin);",
          "118:     if (server->plugin_opts) fprintf(f, \",\\n\\\"plugin_opts\\\":\\\"%s\\\"\", server->plugin_opts);",
          "119:     fprintf(f, \",\\n}\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "233cf15834622dfd9269ced8b0d6059823f08f66",
      "candidate_info": {
        "commit_hash": "233cf15834622dfd9269ced8b0d6059823f08f66",
        "repo": "shadowsocks/shadowsocks-libev",
        "commit_url": "https://github.com/shadowsocks/shadowsocks-libev/commit/233cf15834622dfd9269ced8b0d6059823f08f66",
        "files": [
          "src/manager.c",
          "src/manager.h"
        ],
        "message": "Add method, fast_open, mode, plugin options to ss-manager",
        "before_after_code_files": [
          "src/manager.c||src/manager.c",
          "src/manager.h||src/manager.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/manager.c||src/manager.c"
          ],
          "candidate": [
            "src/manager.c||src/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "src/manager.c||src/manager.c": [
          "File: src/manager.c -> src/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     return fcntl(fd, F_SETFL, flags | O_NONBLOCK);",
          "84: }",
          "86: static void",
          "87: build_config(char *prefix, struct server *server)",
          "88: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: static void",
          "87: destroy_server(struct server *server) {",
          "89:     if (server->method) ss_free(server->method);",
          "90:     if (server->plugin) ss_free(server->plugin);",
          "91:     if (server->plugin_opts) ss_free(server->plugin_opts);",
          "92:     if (server->mode) ss_free(server->mode);",
          "93: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     fprintf(f, \"{\\n\");",
          "103:     fprintf(f, \"\\\"server_port\\\":\\\"%s\\\",\\n\", server->port);",
          "104:     fprintf(f, \"\\\"password\\\":\\\"%s\\\",\\n\", server->password);",
          "105:     fprintf(f, \"}\\n\");",
          "106:     fclose(f);",
          "107:     ss_free(path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     if (server->fast_open[0]) fprintf(f, \"\\\"fast_open\\\": %s,\\n\", server->fast_open);",
          "115:     if (server->mode)   fprintf(f, \"\\\"mode\\\":\\\"%s\\\",\\n\", server->mode);",
          "116:     if (server->method) fprintf(f, \"\\\"method\\\":\\\"%s\\\",\\n\", server->method);",
          "117:     if (server->plugin) fprintf(f, \"\\\"plugin\\\":\\\"%s\\\",\\n\", server->plugin);",
          "118:     if (server->plugin_opts) fprintf(f, \"\\\"plugin_opts\\\":\\\"%s\\\",\\n\", server->plugin_opts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: construct_command_line(struct manager_ctx *manager, struct server *server)",
          "112: {",
          "113:     static char cmd[BUF_SIZE];",
          "114:     int i;",
          "116:     build_config(working_dir, server);",
          "118:     memset(cmd, 0, BUF_SIZE);",
          "119:     snprintf(cmd, BUF_SIZE,",
          "120:              \"%s -m %s --manager-address %s -f %s/.shadowsocks_%s.pid -c %s/.shadowsocks_%s.conf\",",
          "122:              working_dir, server->port, working_dir, server->port);",
          "124:     if (manager->acl != NULL) {",
          "",
          "[Removed Lines]",
          "121:              executable, manager->method, manager->manager_address,",
          "",
          "[Added Lines]",
          "128:     char *method = manager->method;",
          "133:     if (server->method) method = server->method;",
          "137:              executable, method, manager->manager_address,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:         int len = strlen(cmd);",
          "144:         snprintf(cmd + len, BUF_SIZE - len, \" -v\");",
          "145:     }",
          "147:         int len = strlen(cmd);",
          "148:         snprintf(cmd + len, BUF_SIZE - len, \" -U\");",
          "149:     }",
          "151:         int len = strlen(cmd);",
          "152:         snprintf(cmd + len, BUF_SIZE - len, \" -u\");",
          "153:     }",
          "155:         int len = strlen(cmd);",
          "156:         snprintf(cmd + len, BUF_SIZE - len, \" --fast-open\");",
          "157:     }",
          "",
          "[Removed Lines]",
          "146:     if (manager->mode == UDP_ONLY) {",
          "150:     if (manager->mode == TCP_AND_UDP) {",
          "154:     if (manager->fast_open) {",
          "",
          "[Added Lines]",
          "162:     if (server->mode == NULL && manager->mode == UDP_ONLY) {",
          "166:     if (server->mode == NULL && manager->mode == TCP_AND_UDP) {",
          "170:     if (server->fast_open[0] == 0 && manager->fast_open) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:         int len = strlen(cmd);",
          "164:         snprintf(cmd + len, BUF_SIZE - len, \" --mtu %d\", manager->mtu);",
          "165:     }",
          "167:         int len = strlen(cmd);",
          "168:         snprintf(cmd + len, BUF_SIZE - len, \" --plugin \\\"%s\\\"\", manager->plugin);",
          "169:     }",
          "171:         int len = strlen(cmd);",
          "172:         snprintf(cmd + len, BUF_SIZE - len, \" --plugin-opts \\\"%s\\\"\", manager->plugin_opts);",
          "173:     }",
          "",
          "[Removed Lines]",
          "166:     if (manager->plugin) {",
          "170:     if (manager->plugin_opts) {",
          "",
          "[Added Lines]",
          "182:     if (server->plugin == NULL && manager->plugin) {",
          "186:     if (server->plugin_opts == NULL && manager->plugin_opts) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:                 if (value->type == json_string) {",
          "265:                     strncpy(server->password, value->u.string.ptr, 128);",
          "266:                 }",
          "267:             } else {",
          "268:                 LOGE(\"invalid data: %s\", data);",
          "269:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:             } else if (strcmp(name, \"method\") == 0) {",
          "284:                 if (value->type == json_string) {",
          "285:                     server->method = strdup(value->u.string.ptr);",
          "286:                 }",
          "287:             } else if (strcmp(name, \"fast_open\") == 0) {",
          "288:                 if (value->type == json_boolean) {",
          "289:                     strncpy(server->fast_open, (value->u.boolean ? \"true\" : \"false\"), 8);",
          "290:                 }",
          "291:             } else if (strcmp(name, \"plugin\") == 0) {",
          "292:                 if (value->type == json_string) {",
          "293:                     server->plugin = strdup(value->u.string.ptr);",
          "294:                 }",
          "295:             } else if (strcmp(name, \"plugin_opts\") == 0) {",
          "296:                 if (value->type == json_string) {",
          "297:                     server->plugin_opts = strdup(value->u.string.ptr);",
          "298:                 }",
          "299:             } else if (strcmp(name, \"mode\") == 0) {",
          "300:                 if (value->type == json_string) {",
          "301:                     server->mode = strdup(value->u.string.ptr);",
          "302:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "623:     cork_hash_table_delete(server_table, (void *)port, (void **)&old_port, (void **)&old_server);",
          "625:     if (old_server != NULL) {",
          "626:         ss_free(old_server);",
          "627:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:         destroy_server(old_server);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "647: {",
          "648:     struct manager_ctx *manager = (struct manager_ctx *)w;",
          "649:     socklen_t len;",
          "651:     struct sockaddr_un claddr;",
          "652:     char buf[BUF_SIZE];",
          "",
          "[Removed Lines]",
          "650:     size_t r;",
          "",
          "[Added Lines]",
          "687:     ssize_t r;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "676:         if (server == NULL || server->port[0] == 0 || server->password[0] == 0) {",
          "677:             LOGE(\"invalid command: %s:%s\", buf, get_data(buf, r));",
          "678:             if (server != NULL) {",
          "679:                 ss_free(server);",
          "680:             }",
          "681:             goto ERROR_MSG;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716:                 destroy_server(server);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "684:         remove_server(working_dir, server->port);",
          "685:         int ret = add_server(manager, server);",
          "687:         char *msg;",
          "688:         int msg_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:         destroy_server(server);",
          "725:         ss_free(server);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "704:         if (server == NULL || server->port[0] == 0) {",
          "705:             LOGE(\"invalid command: %s:%s\", buf, get_data(buf, r));",
          "706:             if (server != NULL) {",
          "707:                 ss_free(server);",
          "708:             }",
          "709:             goto ERROR_MSG;",
          "710:         }",
          "712:         remove_server(working_dir, server->port);",
          "713:         ss_free(server);",
          "715:         char msg[3] = \"ok\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:                 destroy_server(server);",
          "754:         destroy_server(server);",
          "",
          "---------------"
        ],
        "src/manager.h||src/manager.h": [
          "File: src/manager.h -> src/manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: struct server {",
          "68:     char port[8];",
          "69:     char password[128];",
          "70:     uint64_t traffic;",
          "71: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     char fast_open[8];",
          "71:     char *mode;",
          "72:     char *method;",
          "73:     char *plugin;",
          "74:     char *plugin_opts;",
          "",
          "---------------"
        ]
      }
    }
  ]
}