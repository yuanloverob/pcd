{
  "cve_id": "CVE-2018-18311",
  "cve_desc": "Perl before 5.26.3 and 5.28.x before 5.28.1 has a buffer overflow via a crafted regular expression that triggers invalid write operations.",
  "repo": "Perl/perl5",
  "patch_hash": "34716e2a6ee2af96078d62b065b7785c001194be",
  "patch_info": {
    "commit_hash": "34716e2a6ee2af96078d62b065b7785c001194be",
    "repo": "Perl/perl5",
    "commit_url": "https://github.com/Perl/perl5/commit/34716e2a6ee2af96078d62b065b7785c001194be",
    "files": [
      "util.c"
    ],
    "message": "Perl_my_setenv(); handle integer wrap\n\nRT #133204\n\nWean this function off int/I32 and onto UV/Size_t.\nAlso, replace all malloc-ish calls with a wrapper that does\noverflow checks,\n\nIn particular, it was doing (nlen + vlen + 2) which could wrap when\nthe combined length of the environment variable name and value\nexceeded around 0x7fffffff.\n\nThe wrapper check function is probably overkill, but belt and braces...\n\nNB this function has several variant parts, #ifdef'ed by platform\ntype; I have blindly changed the parts that aren't compiled under linux.",
    "before_after_code_files": [
      "util.c||util.c"
    ]
  },
  "patch_diff": {
    "util.c||util.c": [
      "File: util.c -> util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2063: #ifdef USE_ENVIRON_ARRAY",
      "2065: #if !defined(WIN32) && !defined(NETWARE)",
      "2066: void",
      "2067: Perl_my_setenv(pTHX_ const char *nam, const char *val)",
      "2068: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2069: static char *",
      "2070: S_env_alloc(void *current, Size_t l1, Size_t l2, Size_t l3, Size_t size)",
      "2071: {",
      "2072:     void *p;",
      "2073:     Size_t sl, l = l1 + l2;",
      "2075:     if (l < l2)",
      "2076:         goto panic;",
      "2077:     l += l3;",
      "2078:     if (l < l3)",
      "2079:         goto panic;",
      "2080:     sl = l * size;",
      "2081:     if (sl < l)",
      "2082:         goto panic;",
      "2084:     p = current",
      "2085:             ? safesysrealloc(current, sl)",
      "2086:             : safesysmalloc(sl);",
      "2087:     if (p)",
      "2088:         return (char*)p;",
      "2090:   panic:",
      "2091:     croak_memory_wrap();",
      "2092: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2078: #ifndef PERL_USE_SAFE_PUTENV",
      "2079:     if (!PL_use_safe_putenv) {",
      "2086:         for (i = 0; environ[i]; i++) {",
      "2088:                 break;",
      "2089:         }",
      "2094:             char **tmpenv;",
      "2096:             max = i;",
      "2097:             while (environ[max])",
      "2098:                 max++;",
      "2103:                 Copy(environ[j], tmpenv[j], len+1, char);",
      "2104:             }",
      "2105:             tmpenv[max] = NULL;",
      "",
      "[Removed Lines]",
      "2081:         I32 i;",
      "2082:         const I32 len = strlen(nam);",
      "2083:         int nlen, vlen;",
      "2087:             if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')",
      "2092:             I32 j;",
      "2093:             I32 max;",
      "2099:             tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));",
      "2101:                 const int len = strlen(environ[j]);",
      "2102:                 tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));",
      "",
      "[Added Lines]",
      "2113:         UV i;",
      "2114:         Size_t vlen, nlen = strlen(nam);",
      "2118:             if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')",
      "2123:             UV j, max;",
      "2130:             tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));",
      "2132:                 const Size_t len = strlen(environ[j]);",
      "2133:                 tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2118: #endif",
      "2119:         }",
      "2123:         }",
      "2124:         else",
      "2125:             safesysfree(environ[i]);",
      "2127:         vlen = strlen(val);",
      "2131:         my_setenv_format(environ[i], nam, nlen, val, vlen);",
      "2132:     } else {",
      "",
      "[Removed Lines]",
      "2121:             environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));",
      "2126:         nlen = strlen(nam);",
      "2129:         environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));",
      "",
      "[Added Lines]",
      "2152:             environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));",
      "2160:         environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2151:                 (void)unsetenv(nam);",
      "2152:         } else {",
      "2157:             my_setenv_format(new_env, nam, nlen, val, vlen);",
      "2158:             (void)putenv(new_env);",
      "2159:         }",
      "2161:         char *new_env;",
      "2164:         if (!val) {",
      "2165:     val = \"\";",
      "2166:         }",
      "2167:         vlen = strlen(val);",
      "2170:         my_setenv_format(new_env, nam, nlen, val, vlen);",
      "2171:         (void)putenv(new_env);",
      "",
      "[Removed Lines]",
      "2153:      const int nlen = strlen(nam);",
      "2154:      const int vlen = strlen(val);",
      "2155:      char * const new_env =",
      "2156:                 (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
      "2162:  const int nlen = strlen(nam);",
      "2163:  int vlen;",
      "2168:         new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
      "",
      "[Added Lines]",
      "2184:      const Size_t nlen = strlen(nam);",
      "2185:      const Size_t vlen = strlen(val);",
      "2186:      char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
      "2192:  const Size_t nlen = strlen(nam);",
      "2193:  Size_t vlen;",
      "2198:         new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2187: {",
      "2188:     dVAR;",
      "2189:     char *envstr;",
      "2193:     if (!val) {",
      "2194:        val = \"\";",
      "2195:     }",
      "2196:     vlen = strlen(val);",
      "2198:     my_setenv_format(envstr, nam, nlen, val, vlen);",
      "2199:     (void)PerlEnv_putenv(envstr);",
      "2200:     Safefree(envstr);",
      "",
      "[Removed Lines]",
      "2190:     const int nlen = strlen(nam);",
      "2191:     int vlen;",
      "2197:     Newx(envstr, nlen+vlen+2, char);",
      "",
      "[Added Lines]",
      "2220:     const Size_t nlen = strlen(nam);",
      "2221:     Size_t vlen;",
      "2227:     envstr = S_env_alloc(NULL, nlen, vlen, 2, 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5737d31aac51360cc1eb412ef059e36147c9d6d6",
      "candidate_info": {
        "commit_hash": "5737d31aac51360cc1eb412ef059e36147c9d6d6",
        "repo": "Perl/perl5",
        "commit_url": "https://github.com/Perl/perl5/commit/5737d31aac51360cc1eb412ef059e36147c9d6d6",
        "files": [
          "util.c"
        ],
        "message": "Perl_my_setenv(); handle integer wrap\n\nRT #133204\n\nWean this function off int/I32 and onto UV/Size_t.\nAlso, replace all malloc-ish calls with a wrapper that does\noverflow checks,\n\nIn particular, it was doing (nlen + vlen + 2) which could wrap when\nthe combined length of the environment variable name and value\nexceeded around 0x7fffffff.\n\nThe wrapper check function is probably overkill, but belt and braces...\n\nNB this function has several variant parts, #ifdef'ed by platform\ntype; I have blindly changed the parts that aren't compiled under linux.\n\n(cherry picked from commit 34716e2a6ee2af96078d62b065b7785c001194be)",
        "before_after_code_files": [
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2066: #ifdef USE_ENVIRON_ARRAY",
          "2068: #if !defined(WIN32) && !defined(NETWARE)",
          "2069: void",
          "2070: Perl_my_setenv(pTHX_ const char *nam, const char *val)",
          "2071: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2072: static char *",
          "2073: S_env_alloc(void *current, Size_t l1, Size_t l2, Size_t l3, Size_t size)",
          "2074: {",
          "2075:     void *p;",
          "2076:     Size_t sl, l = l1 + l2;",
          "2078:     if (l < l2)",
          "2079:         goto panic;",
          "2080:     l += l3;",
          "2081:     if (l < l3)",
          "2082:         goto panic;",
          "2083:     sl = l * size;",
          "2084:     if (sl < l)",
          "2085:         goto panic;",
          "2087:     p = current",
          "2088:             ? safesysrealloc(current, sl)",
          "2089:             : safesysmalloc(sl);",
          "2090:     if (p)",
          "2091:         return (char*)p;",
          "2093:   panic:",
          "2094:     croak_memory_wrap();",
          "2095: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2081: #ifndef PERL_USE_SAFE_PUTENV",
          "2082:     if (!PL_use_safe_putenv) {",
          "2089:         for (i = 0; environ[i]; i++) {",
          "2091:                 break;",
          "2092:         }",
          "2097:             char **tmpenv;",
          "2099:             max = i;",
          "2100:             while (environ[max])",
          "2101:                 max++;",
          "2106:                 Copy(environ[j], tmpenv[j], len+1, char);",
          "2107:             }",
          "2108:             tmpenv[max] = NULL;",
          "",
          "[Removed Lines]",
          "2084:         I32 i;",
          "2085:         const I32 len = strlen(nam);",
          "2086:         int nlen, vlen;",
          "2090:             if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')",
          "2095:             I32 j;",
          "2096:             I32 max;",
          "2102:             tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));",
          "2104:                 const int len = strlen(environ[j]);",
          "2105:                 tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "2116:         UV i;",
          "2117:         Size_t vlen, nlen = strlen(nam);",
          "2121:             if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')",
          "2126:             UV j, max;",
          "2133:             tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));",
          "2135:                 const Size_t len = strlen(environ[j]);",
          "2136:                 tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2121: #endif",
          "2122:         }",
          "2126:         }",
          "2127:         else",
          "2128:             safesysfree(environ[i]);",
          "2130:         vlen = strlen(val);",
          "2134:         my_setenv_format(environ[i], nam, nlen, val, vlen);",
          "2135:     } else {",
          "",
          "[Removed Lines]",
          "2124:             environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));",
          "2129:         nlen = strlen(nam);",
          "2132:         environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));",
          "",
          "[Added Lines]",
          "2155:             environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));",
          "2163:         environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2155:                 (void)unsetenv(nam);",
          "2156:         } else {",
          "2161:             my_setenv_format(new_env, nam, nlen, val, vlen);",
          "2162:             (void)putenv(new_env);",
          "2163:         }",
          "2165:         char *new_env;",
          "2168:         if (!val) {",
          "2169:     val = \"\";",
          "2170:         }",
          "2171:         vlen = strlen(val);",
          "2174:         my_setenv_format(new_env, nam, nlen, val, vlen);",
          "2175:         (void)putenv(new_env);",
          "",
          "[Removed Lines]",
          "2157:      const int nlen = strlen(nam);",
          "2158:      const int vlen = strlen(val);",
          "2159:      char * const new_env =",
          "2160:                 (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
          "2166:  const int nlen = strlen(nam);",
          "2167:  int vlen;",
          "2172:         new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
          "",
          "[Added Lines]",
          "2188:      const Size_t nlen = strlen(nam);",
          "2189:      const Size_t vlen = strlen(val);",
          "2190:      char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "2196:  const Size_t nlen = strlen(nam);",
          "2197:  Size_t vlen;",
          "2202:         new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2192: {",
          "2193:     dVAR;",
          "2194:     char *envstr;",
          "2198:     if (!val) {",
          "2199:        val = \"\";",
          "2200:     }",
          "2201:     vlen = strlen(val);",
          "2203:     my_setenv_format(envstr, nam, nlen, val, vlen);",
          "2204:     (void)PerlEnv_putenv(envstr);",
          "2205:     Safefree(envstr);",
          "",
          "[Removed Lines]",
          "2195:     const int nlen = strlen(nam);",
          "2196:     int vlen;",
          "2202:     Newx(envstr, nlen+vlen+2, char);",
          "",
          "[Added Lines]",
          "2225:     const Size_t nlen = strlen(nam);",
          "2226:     Size_t vlen;",
          "2232:     envstr = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0589f071dc6836de80b24fd798c3336c72ead850",
      "candidate_info": {
        "commit_hash": "0589f071dc6836de80b24fd798c3336c72ead850",
        "repo": "Perl/perl5",
        "commit_url": "https://github.com/Perl/perl5/commit/0589f071dc6836de80b24fd798c3336c72ead850",
        "files": [
          "util.c"
        ],
        "message": "Perl_my_setenv(); handle integer wrap\n\nRT #133204\n\nWean this function off int/I32 and onto UV/Size_t.\nAlso, replace all malloc-ish calls with a wrapper that does\noverflow checks,\n\nIn particular, it was doing (nlen + vlen + 2) which could wrap when\nthe combined length of the environment variable name and value\nexceeded around 0x7fffffff.\n\nThe wrapper check function is probably overkill, but belt and braces...\n\nNB this function has several variant parts, #ifdef'ed by platform\ntype; I have blindly changed the parts that aren't compiled under linux.\n\n(cherry picked from commit 34716e2a6ee2af96078d62b065b7785c001194be)",
        "before_after_code_files": [
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2063: #ifdef USE_ENVIRON_ARRAY",
          "2065: #if !defined(WIN32) && !defined(NETWARE)",
          "2066: void",
          "2067: Perl_my_setenv(pTHX_ const char *nam, const char *val)",
          "2068: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2069: static char *",
          "2070: S_env_alloc(void *current, Size_t l1, Size_t l2, Size_t l3, Size_t size)",
          "2071: {",
          "2072:     void *p;",
          "2073:     Size_t sl, l = l1 + l2;",
          "2075:     if (l < l2)",
          "2076:         goto panic;",
          "2077:     l += l3;",
          "2078:     if (l < l3)",
          "2079:         goto panic;",
          "2080:     sl = l * size;",
          "2081:     if (sl < l)",
          "2082:         goto panic;",
          "2084:     p = current",
          "2085:             ? safesysrealloc(current, sl)",
          "2086:             : safesysmalloc(sl);",
          "2087:     if (p)",
          "2088:         return (char*)p;",
          "2090:   panic:",
          "2091:     croak_memory_wrap();",
          "2092: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2078: #ifndef PERL_USE_SAFE_PUTENV",
          "2079:     if (!PL_use_safe_putenv) {",
          "2086:         for (i = 0; environ[i]; i++) {",
          "2088:                 break;",
          "2089:         }",
          "2094:             char **tmpenv;",
          "2096:             max = i;",
          "2097:             while (environ[max])",
          "2098:                 max++;",
          "2103:                 Copy(environ[j], tmpenv[j], len+1, char);",
          "2104:             }",
          "2105:             tmpenv[max] = NULL;",
          "",
          "[Removed Lines]",
          "2081:         I32 i;",
          "2082:         const I32 len = strlen(nam);",
          "2083:         int nlen, vlen;",
          "2087:             if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')",
          "2092:             I32 j;",
          "2093:             I32 max;",
          "2099:             tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));",
          "2101:                 const int len = strlen(environ[j]);",
          "2102:                 tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "2113:         UV i;",
          "2114:         Size_t vlen, nlen = strlen(nam);",
          "2118:             if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')",
          "2123:             UV j, max;",
          "2130:             tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));",
          "2132:                 const Size_t len = strlen(environ[j]);",
          "2133:                 tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2118: #endif",
          "2119:         }",
          "2123:         }",
          "2124:         else",
          "2125:             safesysfree(environ[i]);",
          "2127:         vlen = strlen(val);",
          "2131:         my_setenv_format(environ[i], nam, nlen, val, vlen);",
          "2132:     } else {",
          "",
          "[Removed Lines]",
          "2121:             environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));",
          "2126:         nlen = strlen(nam);",
          "2129:         environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));",
          "",
          "[Added Lines]",
          "2152:             environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));",
          "2160:         environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2151:                 (void)unsetenv(nam);",
          "2152:         } else {",
          "2157:             my_setenv_format(new_env, nam, nlen, val, vlen);",
          "2158:             (void)putenv(new_env);",
          "2159:         }",
          "2161:         char *new_env;",
          "2164:         if (!val) {",
          "2165:     val = \"\";",
          "2166:         }",
          "2167:         vlen = strlen(val);",
          "2170:         my_setenv_format(new_env, nam, nlen, val, vlen);",
          "2171:         (void)putenv(new_env);",
          "",
          "[Removed Lines]",
          "2153:      const int nlen = strlen(nam);",
          "2154:      const int vlen = strlen(val);",
          "2155:      char * const new_env =",
          "2156:                 (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
          "2162:  const int nlen = strlen(nam);",
          "2163:  int vlen;",
          "2168:         new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
          "",
          "[Added Lines]",
          "2184:      const Size_t nlen = strlen(nam);",
          "2185:      const Size_t vlen = strlen(val);",
          "2186:      char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "2192:  const Size_t nlen = strlen(nam);",
          "2193:  Size_t vlen;",
          "2198:         new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2187: {",
          "2188:     dVAR;",
          "2189:     char *envstr;",
          "2193:     if (!val) {",
          "2194:        val = \"\";",
          "2195:     }",
          "2196:     vlen = strlen(val);",
          "2198:     my_setenv_format(envstr, nam, nlen, val, vlen);",
          "2199:     (void)PerlEnv_putenv(envstr);",
          "2200:     Safefree(envstr);",
          "",
          "[Removed Lines]",
          "2190:     const int nlen = strlen(nam);",
          "2191:     int vlen;",
          "2197:     Newx(envstr, nlen+vlen+2, char);",
          "",
          "[Added Lines]",
          "2220:     const Size_t nlen = strlen(nam);",
          "2221:     Size_t vlen;",
          "2227:     envstr = S_env_alloc(NULL, nlen, vlen, 2, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ad758c71191a2a3db14a28ce222a611005ff638",
      "candidate_info": {
        "commit_hash": "8ad758c71191a2a3db14a28ce222a611005ff638",
        "repo": "Perl/perl5",
        "commit_url": "https://github.com/Perl/perl5/commit/8ad758c71191a2a3db14a28ce222a611005ff638",
        "files": [
          "util.c"
        ],
        "message": "util.c: simplify cpp conditionals",
        "before_after_code_files": [
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2149:         (void)setenv(nam, val, 1);",
          "2153:         if (val == NULL) {",
          "2155:                 (void)unsetenv(nam);",
          "",
          "[Removed Lines]",
          "2151: #   else",
          "2152: #       if defined(HAS_UNSETENV)",
          "",
          "[Added Lines]",
          "2151: #   elif defined(HAS_UNSETENV)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2509:   PerlLIO_close(pp[0]);",
          "2510:     return PerlIO_fdopen(p[This], mode);",
          "2511: }",
          "2514: FILE *djgpp_popen();",
          "2515: PerlIO *",
          "2516: Perl_my_popen(pTHX_ const char *cmd, const char *mode)",
          "",
          "[Removed Lines]",
          "2512: #else",
          "2513: #if defined(DJGPP)",
          "",
          "[Added Lines]",
          "2510: #elif defined(DJGPP)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2523:     return PerlIO_importFILE(djgpp_popen(cmd, mode), 0);",
          "2524: }",
          "2527: PerlIO *",
          "2528: Perl_my_popen(pTHX_ const char *cmd, const char *mode)",
          "2529: {",
          "2530:     return NULL;",
          "2531: }",
          "",
          "[Removed Lines]",
          "2525: #else",
          "2526: #if defined(__LIBCATAMOUNT__)",
          "2532: #endif",
          "2533: #endif",
          "",
          "[Added Lines]",
          "2522: #elif defined(__LIBCATAMOUNT__)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2848:        : 0",
          "2849:     );",
          "2850: }",
          "2853: I32",
          "2854: Perl_my_pclose(pTHX_ PerlIO *ptr)",
          "2855: {",
          "2856:     return -1;",
          "2857: }",
          "2861: #if  (!defined(DOSISH) || defined(OS2) || defined(WIN32) || defined(NETWARE)) && !defined(__LIBCATAMOUNT__)",
          "",
          "[Removed Lines]",
          "2851: #else",
          "2852: #if defined(__LIBCATAMOUNT__)",
          "2858: #endif",
          "",
          "[Added Lines]",
          "2845: #elif defined(__LIBCATAMOUNT__)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3312:     if (error)",
          "3313:  Perl_croak_nocontext(\"panic: pthread_getspecific, error=%d\", error);",
          "3314:     return (void*)t;",
          "3317:     return (void*)cthread_data(cthread_self());",
          "3319:     return (void*)PTHREAD_GETSPECIFIC(PL_thr_key);",
          "3321: #  endif",
          "3322: #else",
          "3323:     return (void*)NULL;",
          "",
          "[Removed Lines]",
          "3315: #  else",
          "3316: #    ifdef I_MACH_CTHREADS",
          "3318: #    else",
          "3320: #    endif",
          "",
          "[Added Lines]",
          "3307: #  elif defined(I_MACH_CTHREADS)",
          "3309: #  else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3433:     long open_max = -1;",
          "3434: #   ifdef PERL_FFLUSH_ALL_FOPEN_MAX",
          "3435:     open_max = PERL_FFLUSH_ALL_FOPEN_MAX;",
          "3438:     open_max = sysconf(_SC_OPEN_MAX);",
          "3441:     open_max = FOPEN_MAX;",
          "3444:     open_max = OPEN_MAX;",
          "3447:     open_max = _NFILE;",
          "3453:     if (open_max > 0) {",
          "3454:       long i;",
          "3455:       for (i = 0; i < open_max; i++)",
          "",
          "[Removed Lines]",
          "3436: #   else",
          "3437: #    if defined(HAS_SYSCONF) && defined(_SC_OPEN_MAX)",
          "3439: #     else",
          "3440: #      ifdef FOPEN_MAX",
          "3442: #      else",
          "3443: #       ifdef OPEN_MAX",
          "3445: #       else",
          "3446: #        ifdef _NFILE",
          "3448: #        endif",
          "3449: #       endif",
          "3450: #      endif",
          "3451: #     endif",
          "3452: #    endif",
          "",
          "[Added Lines]",
          "3426: #   elif defined(HAS_SYSCONF) && defined(_SC_OPEN_MAX)",
          "3428: #   elif defined(FOPEN_MAX)",
          "3430: #   elif defined(OPEN_MAX)",
          "3432: #   elif defined(_NFILE)",
          "3434: #   endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4269:   abort_tidy_up_and_fail:",
          "4270: #ifdef ECONNABORTED",
          "4278: #endif",
          "4279:   tidy_up_and_fail:",
          "4280:     {",
          "",
          "[Removed Lines]",
          "4272: #else",
          "4273: #  ifdef ECONNREFUSED",
          "4275: #  else",
          "4277: #  endif",
          "",
          "[Added Lines]",
          "4254: #elif defined(ECONNREFUSED)",
          "4256: #else",
          "",
          "---------------"
        ]
      }
    }
  ]
}