{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f68142b820d10f3b0b4b9df65e789f4058eb67d",
      "candidate_info": {
        "commit_hash": "3f68142b820d10f3b0b4b9df65e789f4058eb67d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f68142b820d10f3b0b4b9df65e789f4058eb67d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Enforce SQLITE_VTABRISK restrictions.\n\nFossilOrigin-Name: 3d87ff312e617a26846d482b423163cad9c222513f33e128f0fe348dda27c7c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5fcf1fbc6473f8e91315b14d67745f2748010641b7463d1f4ca51e6fdf97462",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4964:         assert( pFrom->pSelect==0 );",
          "4965:         if( pTab->pSelect && (db->flags & SQLITE_EnableView)==0 ){",
          "4966:           sqlite3ErrorMsg(pParse, \"access to view \\\"%s\\\" prohibited\",",
          "4968:         }",
          "4969:         pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);",
          "4970:         nCol = pTab->nCol;",
          "",
          "[Removed Lines]",
          "4967:               pTab->zName);",
          "",
          "[Added Lines]",
          "4967:             pTab->zName);",
          "4968:         }",
          "4969:         if( IsVirtual(pTab)",
          "4970:          && pFrom->fg.fromDDL",
          "4971:          && ALWAYS(pTab->pVTable!=0)",
          "4972:          && pTab->pVTable->eVtabRisk > ((db->flags & SQLITE_TrustedSchema)!=0)",
          "4973:         ){",
          "4974:           sqlite3ErrorMsg(pParse, \"cannot access \\\"%s\\\" from within a trigger\"",
          "4975:                                   \" or view\", pTab->zName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a78d2c052837f9eac464c175a8924fbe173f7643",
      "candidate_info": {
        "commit_hash": "a78d2c052837f9eac464c175a8924fbe173f7643",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a78d2c052837f9eac464c175a8924fbe173f7643",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c"
        ],
        "message": "Fix the table_info pragma so that it always checks the schema version and reprepares, even if it is a no-op.\n\nFossilOrigin-Name: 6da77973abc325ae8baf64615267a614a0b8bb8dfd0a01a9f7d6c3a8f359564f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0a8b11dfd6b3ab89ae5032d60cf3c1bba7198a1a2debe5c691b5d1f2e1befee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:   case PragTyp_TABLE_INFO: if( zRight ){",
          "1140:     Table *pTab;",
          "1141:     pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);",
          "1142:     if( pTab ){",
          "1144:       int i, k;",
          "1145:       int nHidden = 0;",
          "1146:       Column *pCol;",
          "1147:       Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1148:       pParse->nMem = 7;",
          "1150:       sqlite3ViewGetColumnNames(pParse, pTab);",
          "1151:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1152:         int isHidden = 0;",
          "",
          "[Removed Lines]",
          "1143:       int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1149:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "",
          "[Added Lines]",
          "1141:     sqlite3CodeVerifyNamedSchema(pParse, zDb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8080403e44b864345af75689e31c986477139b7c",
      "candidate_info": {
        "commit_hash": "8080403e44b864345af75689e31c986477139b7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8080403e44b864345af75689e31c986477139b7c",
        "files": [
          "ext/misc/urifuncs.c",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/main.c",
          "src/pager.c",
          "src/pager.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h"
        ],
        "message": "Redesign for better legacy compatibility.  Add the sqlite3_uri_key() interface.\n\nFossilOrigin-Name: bcb43d11c4d0be36888c9e968ccdf85e7d7fccd72a29866f85c014e0562d4b93",
        "before_after_code_files": [
          "ext/misc/urifuncs.c||ext/misc/urifuncs.c",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/urifuncs.c||ext/misc/urifuncs.c": [
          "File: ext/misc/urifuncs.c -> ext/misc/urifuncs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"sqlite3ext.h\"",
          "28: SQLITE_EXTENSION_INIT1",
          "29: #include <assert.h>",
          "30: #include <string.h>",
          "37: static void func_db_filename(",
          "38:   sqlite3_context *context,",
          "39:   int argc,",
          "40:   sqlite3_value **argv",
          "41: ){",
          "42:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "43:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "44:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "45:   sqlite3_result_text(context, zFile, -1, SQLITE_TRANSIENT);",
          "46: }",
          "53: static void func_uri_parameter(",
          "54:   sqlite3_context *context,",
          "55:   int argc,",
          "56:   sqlite3_value **argv",
          "57: ){",
          "58:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "59:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "60:   const char *zName = (const char*)sqlite3_value_text(argv[1]);",
          "61:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "62:   const char *zRes = sqlite3_uri_parameter(zFile, zName);",
          "63:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "64: }",
          "72: static void func_uri_boolean(",
          "73:   sqlite3_context *context,",
          "74:   int argc,",
          "75:   sqlite3_value **argv",
          "76: ){",
          "77:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "78:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "79:   const char *zName = (const char*)sqlite3_value_text(argv[1]);",
          "80:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "81:   int iDflt = sqlite3_value_int(argv[2]);",
          "82:   int iRes = sqlite3_uri_boolean(zFile, zName, iDflt);",
          "83:   sqlite3_result_int(context, iRes);",
          "84: }",
          "91: static void func_uri_key(",
          "92:   sqlite3_context *context,",
          "93:   int argc,",
          "94:   sqlite3_value **argv",
          "95: ){",
          "96:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "97:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "98:   int N = sqlite3_value_int(argv[1]);",
          "99:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "100:   const char *zRes = sqlite3_uri_key(zFile, N);",
          "101:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "102: }",
          "110: static void func_uri_int64(",
          "111:   sqlite3_context *context,",
          "112:   int argc,",
          "113:   sqlite3_value **argv",
          "114: ){",
          "115:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "116:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "117:   const char *zName = (const char*)sqlite3_value_text(argv[1]);",
          "118:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "119:   sqlite3_int64 iDflt = sqlite3_value_int64(argv[2]);",
          "120:   sqlite3_int64 iRes = sqlite3_uri_int64(zFile, zName, iDflt);",
          "121:   sqlite3_result_int64(context, iRes);",
          "122: }",
          "129: static void func_filename_database(",
          "130:   sqlite3_context *context,",
          "131:   int argc,",
          "132:   sqlite3_value **argv",
          "133: ){",
          "134:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "135:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "136:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "137:   const char *zRes = sqlite3_filename_database(zFile);",
          "138:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "139: }",
          "146: static void func_filename_journal(",
          "147:   sqlite3_context *context,",
          "148:   int argc,",
          "149:   sqlite3_value **argv",
          "150: ){",
          "151:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "152:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "153:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "154:   const char *zRes = sqlite3_filename_journal(zFile);",
          "155:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "156: }",
          "163: static void func_filename_wal(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "169:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "170:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "171:   const char *zRes = sqlite3_filename_wal(zFile);",
          "172:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "173: }",
          "175: #ifdef _WIN32",
          "176: __declspec(dllexport)",
          "177: #endif",
          "178: int sqlite3_urifuncs_init(",
          "179:   sqlite3 *db,",
          "180:   char **pzErrMsg,",
          "181:   const sqlite3_api_routines *pApi",
          "182: ){",
          "183:   static const struct {",
          "184:     const char *zFuncName;",
          "185:     int nArg;",
          "186:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);",
          "187:   } aFunc[] = {",
          "188:     { \"sqlite3_db_filename\",       1, func_db_filename       },",
          "189:     { \"sqlite3_uri_parameter\",     2, func_uri_parameter     },",
          "190:     { \"sqlite3_uri_boolean\",       3, func_uri_boolean       },",
          "191:     { \"sqlite3_uri_int64\",         3, func_uri_int64         },",
          "192:     { \"sqlite3_uri_key\",           2, func_uri_key           },",
          "193:     { \"sqlite3_filename_database\", 1, func_filename_database },",
          "194:     { \"sqlite3_filename_journal\",  1, func_filename_journal  },",
          "195:     { \"sqlite3_filename_wal\",      1, func_filename_wal      },",
          "196:   };",
          "197:   int rc = SQLITE_OK;",
          "198:   int i;",
          "199:   SQLITE_EXTENSION_INIT2(pApi);",
          "201:   for(i=0; rc==SQLITE_OK && i<sizeof(aFunc)/sizeof(aFunc[0]); i++){",
          "202:     rc = sqlite3_create_function(db, aFunc[i].zFuncName, aFunc[i].nArg,",
          "203:                      SQLITE_UTF8, 0,",
          "204:                      aFunc[i].xFunc, 0, 0);",
          "205:   }",
          "206:   return rc;",
          "207: }",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4936:   return rc;",
          "4937: }",
          "",
          "[Removed Lines]",
          "4946: static const char *rbuMainToWal(const char *zName, int flags){",
          "4947:   int n = (int)strlen(zName);",
          "4948:   const char *z = &zName[n];",
          "4949:   if( flags & SQLITE_OPEN_URI ){",
          "4950:     int odd = 0;",
          "4951:     while( 1 ){",
          "4952:       if( z[0]==0 ){",
          "4953:         odd = 1 - odd;",
          "4954:         if( odd && z[1]==0 ) break;",
          "4955:       }",
          "4956:       z++;",
          "4957:     }",
          "4958:     z += 2;",
          "4959:   }else{",
          "4960:     while( *z==0 ) z++;",
          "4961:   }",
          "4962:   z += (n + 8 + 2);",
          "4963:   return z;",
          "4964: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5015:     }",
          "5016:     else if( flags & SQLITE_OPEN_WAL ){",
          "5017:       rbu_file *pDb = rbuFindMaindb(pRbuVfs, zName, 0);",
          "",
          "[Removed Lines]",
          "5014:       pFd->zWal = rbuMainToWal(zName, flags);",
          "",
          "[Added Lines]",
          "4987:       pFd->zWal = sqlite3_filename_wal(zName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5026:           char *zCopy;",
          "5027:           if( rbuIsVacuum(pDb->pRbu) ){",
          "5028:             zBase = sqlite3_db_filename(pDb->pRbu->dbRbu, \"main\");",
          "5030:           }",
          "5031:           nCopy = strlen(zBase);",
          "5032:           zCopy = sqlite3_malloc64(nCopy+2);",
          "",
          "[Removed Lines]",
          "5029:             zBase = rbuMainToWal(zBase, SQLITE_OPEN_URI);",
          "",
          "[Added Lines]",
          "5002:             zBase = sqlite3_filename_wal(zBase);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2ae77bd2335708343bce4541b4d2cf16edfe3fd5bc2dfb93757238c926aa960b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: #endif",
          "472:   sqlite3_hard_heap_limit64,",
          "473: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:   sqlite3_uri_key,",
          "474:   sqlite3_filename_database,",
          "475:   sqlite3_filename_journal,",
          "476:   sqlite3_filename_wal,",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4241:   return rc;",
          "4242: }",
          "",
          "[Removed Lines]",
          "4244: #ifdef SQLITE_DEBUG",
          "4250: int sqlite3UriCount(const char *z){",
          "4251:   int n = 0;",
          "4252:   if( z==0 ) return 0;",
          "4253:   z += strlen(z)+1;",
          "4254:   while( z[0] ){",
          "4255:     z += strlen(z)+1;",
          "4256:     z += strlen(z)+1;",
          "4257:     n++;",
          "4258:   }",
          "4259:   return n;",
          "4260: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4274: const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){",
          "4277:   if( zFilename==0 || zParam==0 ) return 0;",
          "4286:   }",
          "4287:   return 0;",
          "4288: }",
          "",
          "[Removed Lines]",
          "4275:   const Pager *pPager;",
          "4276:   const char *z;",
          "4278:   pPager = sqlite3PagerFromFilename(zFilename);",
          "4279:   assert( pPager!=0 );",
          "4280:   z = sqlite3PagerQueryParameters(pPager);",
          "4281:   while( z[0] ){",
          "4282:     int x = strcmp(z, zParam);",
          "4283:     z += sqlite3Strlen30(z) + 1;",
          "4284:     if( x==0 ) return z;",
          "4285:     z += sqlite3Strlen30(z) + 1;",
          "",
          "[Added Lines]",
          "4257:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4258:   while( zFilename[0] ){",
          "4259:     int x = strcmp(zFilename, zParam);",
          "4260:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4261:     if( x==0 ) return zFilename;",
          "4262:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4270: const char *sqlite3_uri_key(const char *zFilename, int N){",
          "4271:   if( zFilename==0 || N<0 ) return 0;",
          "4272:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4273:   while( zFilename[0] && (N--)>0 ){",
          "4274:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4275:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4276:   }",
          "4277:   return zFilename[0] ? zFilename : 0;",
          "4278: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4312:   return bDflt;",
          "4313: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4315: static const char *startOfNameList(const char *zName){",
          "4316:   while( zName[0]!='\\001' || zName[1]!=0 ){",
          "4317:     zName -= 3;",
          "4318:     while( zName[0]!='\\000' ){ zName--; }",
          "4319:     zName++;",
          "4320:   }",
          "4321:   return zName-1;",
          "4322: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4325: const char *sqlite3_filename_database(const char *zFilename){",
          "4329: }",
          "4330: const char *sqlite3_filename_journal(const char *zFilename){",
          "4334: }",
          "4335: const char *sqlite3_filename_wal(const char *zFilename){",
          "4339: }",
          "",
          "[Removed Lines]",
          "4326:   const Pager *pPager = sqlite3PagerFromFilename(zFilename);",
          "4327:   assert( pPager!=0 );",
          "4328:   return sqlite3PagerFilename(pPager, 0);",
          "4331:   const Pager *pPager = sqlite3PagerFromFilename(zFilename);",
          "4332:   assert( pPager!=0 );",
          "4333:   return sqlite3PagerJournalFilename(pPager);",
          "4336:   const Pager *pPager = sqlite3PagerFromFilename(zFilename);",
          "4337:   assert( pPager!=0 );",
          "4338:   return sqlite3PagerWalFilename(pPager);",
          "",
          "[Added Lines]",
          "4335:   return sqlite3_uri_parameter(zFilename - 3, \"\\003\");",
          "4338:   return sqlite3_uri_parameter(startOfNameList(zFilename), \"\\001\");",
          "4341:   return sqlite3_uri_parameter(startOfNameList(zFilename), \"\\002\");",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4852:   pPtr = (u8 *)sqlite3MallocZero(",
          "4861: #ifndef SQLITE_OMIT_WAL",
          "4864: #endif",
          "4866:   );",
          "4867:   assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );",
          "4868:   if( !pPtr ){",
          "",
          "[Removed Lines]",
          "4865:     0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4876:   pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4877:   assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );",
          "4891: #ifndef SQLITE_OMIT_WAL",
          "4898: #endif",
          "4907:   if( nPathname ) sqlite3DbFree(0, zPathname);",
          "4908:   pPager->pVfs = pVfs;",
          "",
          "[Removed Lines]",
          "4880:   assert( EIGHT_BYTE_ALIGNMENT(pPtr) );",
          "4881:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "4882:   pPager->zFilename = (char*)pPtr;",
          "4883:   if( nPathname==0 ) zPathname = \"\";",
          "4884:   memcpy(pPtr, zPathname, nPathname);",
          "4885:   pPager->zQueryParam = pPager->zFilename + nPathname + 1;",
          "4886:   if( zUri ) memcpy(pPager->zQueryParam, zUri, nUriByte);",
          "4887:   assert( nUriByte>=1 );",
          "4888:   assert( nUriByte >= nUri*3 + 1 );",
          "4889:   pPtr += ROUND8(nPathname + 1 + nUriByte);",
          "4893:   assert( EIGHT_BYTE_ALIGNMENT(pPtr) );",
          "4894:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "4895:   pPager->zWal = (char*)pPtr;",
          "4896:   memcpy(pPtr, zPathname, nPathname);",
          "4897:   memcpy(pPtr+nPathname, \"-wal\", 4);      pPtr += ROUND8(nPathname + 4 + 2);",
          "4901:   assert( EIGHT_BYTE_ALIGNMENT(pPtr) );",
          "4902:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "4903:   pPager->zJournal = (char*)pPtr;",
          "4904:   memcpy(pPtr, zPathname, nPathname);",
          "",
          "[Added Lines]",
          "4880:   pPtr[1] = '\\001';                       pPtr += 3;",
          "4881:   if( nPathname>0 ){",
          "4882:     pPager->zJournal = (char*)pPtr;",
          "4883:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",
          "4884:     memcpy(pPtr, \"-journal\",8);           pPtr += 8 + 1;",
          "4885: #ifdef SQLITE_ENABLE_8_3_NAMES",
          "4886:     sqlite3FileSuffix3(zFilename,pPager->zJournal);",
          "4887:     pPtr = (u8*)(pPager->zJournal + sqlite3Strlen30(pPager->zJournal)+1);",
          "4888: #endif",
          "4889:   }else{",
          "4890:     pPager->zJournal = 0;",
          "4891:     pPtr++;",
          "4892:   }",
          "4896:   pPtr[0] = '\\002'; pPtr[1] = 0;          pPtr += 2;",
          "4897:   if( nPathname>0 ){",
          "4898:     pPager->zWal = (char*)pPtr;",
          "4899:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",
          "4900:     memcpy(pPtr, \"-wal\", 4);              pPtr += 4 + 1;",
          "4901: #ifdef SQLITE_ENABLE_8_3_NAMES",
          "4902:     sqlite3FileSuffix3(zFilename, pPager->zWal);",
          "4903:     pPtr = (u8*)(pPager->zWal + sqlite3Strlen30(pPager->zWal)+1);",
          "4904: #endif",
          "4905:   }else{",
          "4906:     pPager->zWal = 0;",
          "4907:     pPtr++;",
          "4908:   }",
          "4912:   pPtr[0] = '\\003'; pPtr[1] = 0;          pPtr += 2;",
          "4913:   pPager->zFilename = (char*)pPtr;",
          "4914:   memcpy(pPtr, zPathname, nPathname);     pPtr += nPathname + 1;",
          "4915:   if( zUri ){",
          "4917:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7065: }",
          "",
          "[Removed Lines]",
          "7022: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "7023:   return (nullIfMemDb && pPager->memDb) ? \"\" : pPager->zFilename;",
          "7024: }",
          "7029: const char *sqlite3PagerJournalFilename(const Pager *pPager){",
          "7030:   assert( pPager!=0 );",
          "7031:   return pPager->zJournal;",
          "7032: }",
          "7033: #ifndef SQLITE_OMIT_WAL",
          "7034: const char *sqlite3PagerWalFilename(const Pager *pPager){",
          "7035:   assert( pPager!=0 );",
          "7036:   return pPager->zWal;",
          "7037: }",
          "7048: const char *sqlite3PagerQueryParameters(const Pager *pPager){",
          "7049:   assert( pPager!=0 );",
          "7050:   return pPager->zQueryParam;",
          "7051: }",
          "7058: const Pager *sqlite3PagerFromFilename(const char *zFilename){",
          "7059:   const Pager **pp = (const Pager**)zFilename;",
          "7060:   pp--;",
          "7061:   assert( (*pp)->zFilename==zFilename",
          "7062:        || (*pp)->zJournal==zFilename",
          "7063:        || (*pp)->zWal==zFilename );",
          "7064:   return *pp;",
          "",
          "[Added Lines]",
          "7038: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "7039:   static const char zFake[] = { 0x01, 0x00, 0x00, 0x00 };",
          "7040:   return (nullIfMemDb && pPager->memDb) ? &zFake[2] : pPager->zFilename;",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: #endif",
          "205: int sqlite3PagerMemUsed(Pager*);",
          "206: const char *sqlite3PagerFilename(const Pager*, int);",
          "211: sqlite3_vfs *sqlite3PagerVfs(Pager*);",
          "212: sqlite3_file *sqlite3PagerFile(Pager*);",
          "213: sqlite3_file *sqlite3PagerJrnlFile(Pager*);",
          "",
          "[Removed Lines]",
          "207: const char *sqlite3PagerWalFilename(const Pager*);",
          "208: const char *sqlite3PagerJournalFilename(const Pager*);",
          "209: const char *sqlite3PagerQueryParameters(const Pager*);",
          "210: const Pager *sqlite3PagerFromFilename(const char*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3535: const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);",
          "3536: int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);",
          "3537: sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);",
          "3562: const char *sqlite3_filename_database(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3552: const char *sqlite3_uri_key(const char *zFilename, int N);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "326:   int (*drop_modules)(sqlite3*,const char**);",
          "327:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "328: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   const char *(*uri_key)(const char*,int);",
          "330:   const char *(*filename_database)(const char*);",
          "331:   const char *(*filename_journal)(const char*);",
          "332:   const char *(*filename_wal)(const char*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "621: #define sqlite3_drop_modules           sqlite3_api->drop_modules",
          "622: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "625: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: #define sqlite3_uri_key                sqlite3_api->uri_key",
          "630: #define sqlite3_filename_database      sqlite3_api->filename_database",
          "631: #define sqlite3_filename_journal       sqlite3_api->filename_journal",
          "632: #define sqlite3_filename_wal           sqlite3_api->filename_wal",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f54f105446934f7e85002a52e004b0c522123163",
      "candidate_info": {
        "commit_hash": "f54f105446934f7e85002a52e004b0c522123163",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f54f105446934f7e85002a52e004b0c522123163",
        "files": [
          "VERSION",
          "autoconf/tea/configure.ac",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the version number to 3.31.1.\n\nFossilOrigin-Name: 6fb9a8fb85486a8fccc462856316ef523450c23a7a7a81c8dfb323fbe809f8f5",
        "before_after_code_files": [
          "autoconf/teconfigure.ac||autoconf/tea/configure.ac",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/teconfigure.ac||autoconf/tea/configure.ac": [
          "File: autoconf/teconfigure.ac -> autoconf/tea/configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: AC_INIT([sqlite], [3.31.1])",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34ab760689fd493eda482e856047708d74e769a01cc90b69da456d79ffe39aea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "871f45441cd99398b2daec14bc141649db21a06f",
      "candidate_info": {
        "commit_hash": "871f45441cd99398b2daec14bc141649db21a06f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/871f45441cd99398b2daec14bc141649db21a06f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Remove an obsolete comment.  No changes to code.\n\nFossilOrigin-Name: 4135cb024456288d9c85aef5fb572dbb591527dd33d9a60ca5946b712c269941",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5b0def96ba6d90f47bc96fab1ccf9c501d84885d086744035b16fd96f3e248c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    }
  ]
}