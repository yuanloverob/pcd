{
  "cve_id": "CVE-2019-15807",
  "cve_desc": "In the Linux kernel before 5.1.13, there is a memory leak in drivers/scsi/libsas/sas_expander.c when SAS expander discovery fails. This will cause a BUG and denial of service.",
  "repo": "torvalds/linux",
  "patch_hash": "3b0541791453fbe7f42867e310e0c9eb6295364d",
  "patch_info": {
    "commit_hash": "3b0541791453fbe7f42867e310e0c9eb6295364d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3b0541791453fbe7f42867e310e0c9eb6295364d",
    "files": [
      "drivers/scsi/libsas/sas_expander.c"
    ],
    "message": "scsi: libsas: delete sas port if expander discover failed\n\nThe sas_port(phy->port) allocated in sas_ex_discover_expander() will not be\ndeleted when the expander failed to discover. This will cause resource leak\nand a further issue of kernel BUG like below:\n\n[159785.843156]  port-2:17:29: trying to add phy phy-2:17:29 fails: it's\nalready part of another port\n[159785.852144] ------------[ cut here  ]------------\n[159785.856833] kernel BUG at drivers/scsi/scsi_transport_sas.c:1086!\n[159785.863000] Internal error: Oops - BUG: 0 [#1] SMP\n[159785.867866] CPU: 39 PID: 16993 Comm: kworker/u96:2 Tainted: G\nW  OE     4.19.25-vhulk1901.1.0.h111.aarch64 #1\n[159785.878458] Hardware name: Huawei Technologies Co., Ltd.\nHi1620EVBCS/Hi1620EVBCS, BIOS Hi1620 CS B070 1P TA 03/21/2019\n[159785.889231] Workqueue: 0000:74:02.0_disco_q sas_discover_domain\n[159785.895224] pstate: 40c00009 (nZcv daif +PAN +UAO)\n[159785.900094] pc : sas_port_add_phy+0x188/0x1b8\n[159785.904524] lr : sas_port_add_phy+0x188/0x1b8\n[159785.908952] sp : ffff0001120e3b80\n[159785.912341] x29: ffff0001120e3b80 x28: 0000000000000000\n[159785.917727] x27: ffff802ade8f5400 x26: ffff0000681b7560\n[159785.923111] x25: ffff802adf11a800 x24: ffff0000680e8000\n[159785.928496] x23: ffff802ade8f5728 x22: ffff802ade8f5708\n[159785.933880] x21: ffff802adea2db40 x20: ffff802ade8f5400\n[159785.939264] x19: ffff802adea2d800 x18: 0000000000000010\n[159785.944649] x17: 00000000821bf734 x16: ffff00006714faa0\n[159785.950033] x15: ffff0000e8ab4ecf x14: 7261702079646165\n[159785.955417] x13: 726c612073277469 x12: ffff00006887b830\n[159785.960802] x11: ffff00006773eaa0 x10: 7968702079687020\n[159785.966186] x9 : 0000000000002453 x8 : 726f702072656874\n[159785.971570] x7 : 6f6e6120666f2074 x6 : ffff802bcfb21290\n[159785.976955] x5 : ffff802bcfb21290 x4 : 0000000000000000\n[159785.982339] x3 : ffff802bcfb298c8 x2 : 337752b234c2ab00\n[159785.987723] x1 : 337752b234c2ab00 x0 : 0000000000000000\n[159785.993108] Process kworker/u96:2 (pid: 16993, stack limit =\n0x0000000072dae094)\n[159786.000576] Call trace:\n[159786.003097]  sas_port_add_phy+0x188/0x1b8\n[159786.007179]  sas_ex_get_linkrate.isra.5+0x134/0x140\n[159786.012130]  sas_ex_discover_expander+0x128/0x408\n[159786.016906]  sas_ex_discover_dev+0x218/0x4c8\n[159786.021249]  sas_ex_discover_devices+0x9c/0x1a8\n[159786.025852]  sas_discover_root_expander+0x134/0x160\n[159786.030802]  sas_discover_domain+0x1b8/0x1e8\n[159786.035148]  process_one_work+0x1b4/0x3f8\n[159786.039230]  worker_thread+0x54/0x470\n[159786.042967]  kthread+0x134/0x138\n[159786.046269]  ret_from_fork+0x10/0x18\n[159786.049918] Code: 91322300 f0004402 91178042 97fe4c9b (d4210000)\n[159786.056083] Modules linked in: hns3_enet_ut(OE) hclge(OE) hnae3(OE)\nhisi_sas_test_hw(OE) hisi_sas_test_main(OE) serdes(OE)\n[159786.067202] ---[ end trace 03622b9e2d99e196  ]---\n[159786.071893] Kernel panic - not syncing: Fatal exception\n[159786.077190] SMP: stopping secondary CPUs\n[159786.081192] Kernel Offset: disabled\n[159786.084753] CPU features: 0x2,a2a00a38\n\nFixes: 2908d778ab3e (\"[SCSI] aic94xx: new driver\")\nReported-by: Jian Luo <luojian5@huawei.com>\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nCC: John Garry <john.garry@huawei.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_expander.c||drivers/scsi/libsas/sas_expander.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_expander.c||drivers/scsi/libsas/sas_expander.c": [
      "File: drivers/scsi/libsas/sas_expander.c -> drivers/scsi/libsas/sas_expander.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1019:   list_del(&child->dev_list_node);",
      "1020:   spin_unlock_irq(&parent->port->dev_list_lock);",
      "1021:   sas_put_device(child);",
      "1022:   return NULL;",
      "1023:  }",
      "1024:  list_add_tail(&child->siblings, &parent->ex_dev.children);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1022:   sas_port_delete(phy->port);",
      "1023:   phy->port = NULL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fee13fe96529523a709d1fff487f14a5e0d56d34",
      "candidate_info": {
        "commit_hash": "fee13fe96529523a709d1fff487f14a5e0d56d34",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fee13fe96529523a709d1fff487f14a5e0d56d34",
        "files": [
          "fs/btrfs/zstd.c"
        ],
        "message": "btrfs: correct zstd workspace manager lock to use spin_lock_bh()\n\nThe btrfs zstd workspace manager uses a background timer to reclaim not\nrecently used workspaces. I used spin_lock() from this context which\nshould have been caught with lockdep, but was not. This deadlock was\nreported in bugzilla. The fix is to switch the zstd wsm lock to use\nspin_lock_bh() from the softirq context.\n\nThis happened quite relibably on ppc64, unlike on other architectures.\n\n  [  313.402874] ================================\n  [  313.402875] WARNING: inconsistent lock state\n  [  313.402879] 5.1.0-rc7 #1 Not tainted\n  [  313.402880] --------------------------------\n  [  313.402882] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.\n  [  313.402885] swapper/5/0 [HC0[0]:SC1[1]:HE1:SE0] takes:\n  [  313.402888] 0000000080d1120c (&(&wsm.lock)->rlock){+.?.}, at: .zstd_reclaim_timer_fn+0x40/0x230\n  [  313.402895] {SOFTIRQ-ON-W} state was registered at:\n  [  313.402899]   .lock_acquire+0xd0/0x240\n  [  313.402903]   ._raw_spin_lock+0x34/0x60\n  [  313.402906]   .zstd_get_workspace+0xd0/0x360\n  [  313.402908]   .end_compressed_bio_read+0x3b8/0x540\n  [  313.402911]   .bio_endio+0x174/0x2c0\n  [  313.402914]   .end_workqueue_fn+0x4c/0x70\n  [  313.402917]   .normal_work_helper+0x138/0x7e0\n  [  313.402920]   .process_one_work+0x324/0x790\n  [  313.402922]   .worker_thread+0x68/0x570\n  [  313.402925]   .kthread+0x19c/0x1b0\n  [  313.402928]   .ret_from_kernel_thread+0x58/0x78\n  [  313.402930] irq event stamp: 2629216\n  [  313.402933] hardirqs last  enabled at (2629216): [<c0000000009da738>] ._raw_spin_unlock_irq+0x38/0x60\n  [  313.402936] hardirqs last disabled at (2629215): [<c0000000009da4c4>] ._raw_spin_lock_irq+0x24/0x70\n  [  313.402939] softirqs last  enabled at (2629212): [<c0000000000af9fc>] .irq_enter+0x8c/0xd0\n  [  313.402942] softirqs last disabled at (2629213): [<c0000000000afb58>] .irq_exit+0x118/0x170\n  [  313.402944]\n\t\t other info that might help us debug this:\n  [  313.402945]  Possible unsafe locking scenario:\n\n  [  313.402947]        CPU0\n  [  313.402948]        ----\n  [  313.402949]   lock(&(&wsm.lock)->rlock);\n  [  313.402951]   <Interrupt>\n  [  313.402952]     lock(&(&wsm.lock)->rlock);\n  [  313.402954]\n\t\t  *** DEADLOCK ***\n\n  [  313.402957] 1 lock held by swapper/5/0:\n  [  313.402958]  #0: 000000004b612042 ((&wsm.timer)){+.-.}, at: .call_timer_fn+0x0/0x3c0\n  [  313.402963]\n\t\t stack backtrace:\n  [  313.402967] CPU: 5 PID: 0 Comm: swapper/5 Not tainted 5.1.0-rc7 #1\n  [  313.402968] Call Trace:\n  [  313.402972] [c0000007fa262e70] [c0000000009b3294] .dump_stack+0xe0/0x15c (unreliable)\n  [  313.402975] [c0000007fa262f10] [c000000000125548] .print_usage_bug+0x348/0x390\n  [  313.402978] [c0000007fa262fd0] [c000000000125cb4] .mark_lock+0x724/0x930\n  [  313.402981] [c0000007fa263080] [c000000000126c20] .__lock_acquire+0xc90/0x16a0\n  [  313.402984] [c0000007fa2631b0] [c000000000128040] .lock_acquire+0xd0/0x240\n  [  313.402987] [c0000007fa263280] [c0000000009da2b4] ._raw_spin_lock+0x34/0x60\n  [  313.402990] [c0000007fa263300] [c00000000054b0b0] .zstd_reclaim_timer_fn+0x40/0x230\n  [  313.402993] [c0000007fa2633d0] [c000000000158b38] .call_timer_fn+0xc8/0x3c0\n  [  313.402996] [c0000007fa2634a0] [c000000000158f74] .expire_timers+0x144/0x260\n  [  313.402999] [c0000007fa263550] [c000000000159178] .run_timer_softirq+0xe8/0x230\n  [  313.403002] [c0000007fa263680] [c0000000009db288] .__do_softirq+0x188/0x5d4\n  [  313.403004] [c0000007fa263790] [c0000000000afb58] .irq_exit+0x118/0x170\n  [  313.403008] [c0000007fa263800] [c000000000028d88] .timer_interrupt+0x158/0x430\n  [  313.403012] [c0000007fa2638b0] [c0000000000091d4] decrementer_common+0x134/0x140\n  [  313.403017] --- interrupt: 901 at replay_interrupt_return+0x0/0x4\n\t\t     LR = .arch_local_irq_restore.part.0+0x68/0x80\n  [  313.403020] [c0000007fa263bb0] [c00000000001a3ac] .arch_local_irq_restore.part.0+0x2c/0x80 (unreliable)\n  [  313.403024] [c0000007fa263c30] [c0000000007bbbcc] .cpuidle_enter_state+0xec/0x670\n  [  313.403027] [c0000007fa263d00] [c0000000000f5130] .call_cpuidle+0x40/0x90\n  [  313.403031] [c0000007fa263d70] [c0000000000f554c] .do_idle+0x2dc/0x3a0\n  [  313.403034] [c0000007fa263e30] [c0000000000f59ac] .cpu_startup_entry+0x2c/0x30\n  [  313.403037] [c0000007fa263ea0] [c000000000045674] .start_secondary+0x644/0x650\n  [  313.403041] [c0000007fa263f90] [c00000000000ad5c] start_secondary_prolog+0x10/0x14\n\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203517\nFixes: 3f93aef535c8 (\"btrfs: add zstd compression level support\")\nCC: stable@vger.kernel.org # 5.1+\nSigned-off-by: Dennis Zhou <dennis@kernel.org>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/zstd.c||fs/btrfs/zstd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/zstd.c||fs/btrfs/zstd.c": [
          "File: fs/btrfs/zstd.c -> fs/btrfs/zstd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  unsigned long reclaim_threshold = jiffies - ZSTD_BTRFS_RECLAIM_JIFFIES;",
          "106:  struct list_head *pos, *next;",
          "110:  if (list_empty(&wsm.lru_list)) {",
          "112:   return;",
          "113:  }",
          "",
          "[Removed Lines]",
          "108:  spin_lock(&wsm.lock);",
          "111:   spin_unlock(&wsm.lock);",
          "",
          "[Added Lines]",
          "108:  spin_lock_bh(&wsm.lock);",
          "111:   spin_unlock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:  if (!list_empty(&wsm.lru_list))",
          "138:   mod_timer(&wsm.timer, jiffies + ZSTD_BTRFS_RECLAIM_JIFFIES);",
          "141: }",
          "",
          "[Removed Lines]",
          "140:  spin_unlock(&wsm.lock);",
          "",
          "[Added Lines]",
          "140:  spin_unlock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:  struct workspace *workspace;",
          "199:  int i;",
          "202:  for (i = 0; i < ZSTD_BTRFS_MAX_LEVEL; i++) {",
          "203:   while (!list_empty(&wsm.idle_ws[i])) {",
          "204:    workspace = container_of(wsm.idle_ws[i].next,",
          "",
          "[Removed Lines]",
          "201:  spin_lock(&wsm.lock);",
          "",
          "[Added Lines]",
          "201:  spin_lock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:    zstd_free_workspace(&workspace->list);",
          "209:   }",
          "210:  }",
          "213:  del_timer_sync(&wsm.timer);",
          "214: }",
          "",
          "[Removed Lines]",
          "211:  spin_unlock(&wsm.lock);",
          "",
          "[Added Lines]",
          "211:  spin_unlock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:  struct workspace *workspace;",
          "231:  int i = level - 1;",
          "234:  for_each_set_bit_from(i, &wsm.active_map, ZSTD_BTRFS_MAX_LEVEL) {",
          "235:   if (!list_empty(&wsm.idle_ws[i])) {",
          "236:    ws = wsm.idle_ws[i].next;",
          "",
          "[Removed Lines]",
          "233:  spin_lock(&wsm.lock);",
          "",
          "[Added Lines]",
          "233:  spin_lock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:     list_del(&workspace->lru_list);",
          "243:    if (list_empty(&wsm.idle_ws[i]))",
          "244:     clear_bit(i, &wsm.active_map);",
          "246:    return ws;",
          "247:   }",
          "248:  }",
          "251:  return NULL;",
          "252: }",
          "",
          "[Removed Lines]",
          "245:    spin_unlock(&wsm.lock);",
          "249:  spin_unlock(&wsm.lock);",
          "",
          "[Added Lines]",
          "245:    spin_unlock_bh(&wsm.lock);",
          "249:  spin_unlock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "305: {",
          "306:  struct workspace *workspace = list_to_workspace(ws);",
          "311:  if (workspace->req_level == workspace->level) {",
          "",
          "[Removed Lines]",
          "308:  spin_lock(&wsm.lock);",
          "",
          "[Added Lines]",
          "308:  spin_lock_bh(&wsm.lock);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "325:  list_add(&workspace->list, &wsm.idle_ws[workspace->level - 1]);",
          "326:  workspace->req_level = 0;",
          "330:  if (workspace->level == ZSTD_BTRFS_MAX_LEVEL)",
          "331:   cond_wake_up(&wsm.wait);",
          "",
          "[Removed Lines]",
          "328:  spin_unlock(&wsm.lock);",
          "",
          "[Added Lines]",
          "328:  spin_unlock_bh(&wsm.lock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b81f8161dfeda4017cef4f2498ccb64b13f0d61",
      "candidate_info": {
        "commit_hash": "2b81f8161dfeda4017cef4f2498ccb64b13f0d61",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2b81f8161dfeda4017cef4f2498ccb64b13f0d61",
        "files": [
          "net/ipv4/af_inet.c"
        ],
        "message": "net: don't clear sock->sk early to avoid trouble in strparser\n\naf_inet sets sock->sk to NULL which trips strparser over:\n\nBUG: kernel NULL pointer dereference, address: 0000000000000012\nPGD 0 P4D 0\nOops: 0000 [#1] SMP PTI\nCPU: 7 PID: 0 Comm: swapper/7 Not tainted 5.2.0-rc1-00139-g14629453a6d3 #21\nRIP: 0010:tcp_peek_len+0x10/0x60\nRSP: 0018:ffffc02e41c54b98 EFLAGS: 00010246\nRAX: 0000000000000000 RBX: ffff9cf924c4e030 RCX: 0000000000000051\nRDX: 0000000000000000 RSI: 000000000000000c RDI: ffff9cf97128f480\nRBP: ffff9cf9365e0300 R08: ffff9cf94fe7d2c0 R09: 0000000000000000\nR10: 000000000000036b R11: ffff9cf939735e00 R12: ffff9cf91ad9ae40\nR13: ffff9cf924c4e000 R14: ffff9cf9a8fcbaae R15: 0000000000000020\nFS: 0000000000000000(0000) GS:ffff9cf9af7c0000(0000) knlGS:0000000000000000\nCS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000012 CR3: 000000013920a003 CR4: 00000000003606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n Call Trace:\n <IRQ>\n strp_data_ready+0x48/0x90\n tls_data_ready+0x22/0xd0 [tls]\n tcp_rcv_established+0x569/0x620\n tcp_v4_do_rcv+0x127/0x1e0\n tcp_v4_rcv+0xad7/0xbf0\n ip_protocol_deliver_rcu+0x2c/0x1c0\n ip_local_deliver_finish+0x41/0x50\n ip_local_deliver+0x6b/0xe0\n ? ip_protocol_deliver_rcu+0x1c0/0x1c0\n ip_rcv+0x52/0xd0\n ? ip_rcv_finish_core.isra.20+0x380/0x380\n __netif_receive_skb_one_core+0x7e/0x90\n netif_receive_skb_internal+0x42/0xf0\n napi_gro_receive+0xed/0x150\n nfp_net_poll+0x7a2/0xd30 [nfp]\n ? kmem_cache_free_bulk+0x286/0x310\n net_rx_action+0x149/0x3b0\n __do_softirq+0xe3/0x30a\n ? handle_irq_event_percpu+0x6a/0x80\n irq_exit+0xe8/0xf0\n do_IRQ+0x85/0xd0\n common_interrupt+0xf/0xf\n </IRQ>\nRIP: 0010:cpuidle_enter_state+0xbc/0x450\n\nTo avoid this issue set sock->sk after sk_prot->close.\nMy grepping and testing did not discover any code which\nwould depend on the current behaviour.\n\nFixes: c46234ebb4d1 (\"tls: RX path for ktls\")\nReported-by: David Beckett <david.beckett@netronome.com>\nSigned-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nReviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/af_inet.c||net/ipv4/af_inet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ipv4/af_inet.c||net/ipv4/af_inet.c": [
          "File: net/ipv4/af_inet.c -> net/ipv4/af_inet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:   if (sock_flag(sk, SOCK_LINGER) &&",
          "429:       !(current->flags & PF_EXITING))",
          "430:    timeout = sk->sk_lingertime;",
          "432:   sk->sk_prot->close(sk, timeout);",
          "433:  }",
          "434:  return 0;",
          "435: }",
          "",
          "[Removed Lines]",
          "431:   sock->sk = NULL;",
          "",
          "[Added Lines]",
          "432:   sock->sk = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46bdf370f671c90573e8b683d9a14bb335057a36",
      "candidate_info": {
        "commit_hash": "46bdf370f671c90573e8b683d9a14bb335057a36",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/46bdf370f671c90573e8b683d9a14bb335057a36",
        "files": [
          "drivers/infiniband/core/device.c"
        ],
        "message": "RDMA/core: Fix panic when port_data isn't initialized\n\nThis happens if assign_name() returns failure when called from\nib_register_device(), that will lead to the following panic in every time\nthat someone touches the port_data's data members.\n\n BUG: unable to handle kernel NULL pointer dereference at 00000000000000c0\n PGD 0 P4D 0\n Oops: 0002 [#1] SMP PTI\n CPU: 19 PID: 1994 Comm: systemd-udevd Not tainted 5.1.0-rc5+ #1\n Hardware name: HP ProLiant DL360p Gen8, BIOS P71 12/20/2013\n RIP: 0010:_raw_spin_lock_irqsave+0x1e/0x40\n Code: 85 ff 66 2e 0f 1f 84 00 00 00 00 00 66 66 66 66 90 53 9c 58 66 66 90\n 66 90 48 89 c3 fa 66 66 90 66 66 90 31 c0 ba 01 00 00 00 <f0> 0f b1 17 0f\n 94 c2 84 d2 74 05 48 89 d8 5b c3 89 c6 e8 b4 85 8a\n RSP: 0018:ffffa8d7079a7c08 EFLAGS: 00010046\n RAX: 0000000000000000 RBX: 0000000000000202 RCX: ffffa8d7079a7bf8\n RDX: 0000000000000001 RSI: ffff93607c990000 RDI: 00000000000000c0\n RBP: 0000000000000001 R08: 0000000000000000 R09: ffffffffc08c4dd8\n R10: 0000000000000000 R11: 0000000000000001 R12: 00000000000000c0\n R13: ffff93607c990000 R14: ffffffffc05a9740 R15: ffffa8d7079a7e98\n FS:  00007f1c6ee438c0(0000) GS:ffff93609f6c0000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 00000000000000c0 CR3: 0000000819fca002 CR4: 00000000000606e0\n Call Trace:\n  free_netdevs+0x4d/0xe0 [ib_core]\n  ib_dealloc_device+0x51/0xb0 [ib_core]\n  __mlx5_ib_add+0x5e/0x70 [mlx5_ib]\n  mlx5_add_device+0x57/0xe0 [mlx5_core]\n  mlx5_register_interface+0x85/0xc0 [mlx5_core]\n  ? 0xffffffffc0474000\n  do_one_initcall+0x4e/0x1d4\n  ? _cond_resched+0x15/0x30\n  ? kmem_cache_alloc_trace+0x15f/0x1c0\n  do_init_module+0x5a/0x218\n  load_module+0x186b/0x1e40\n  ? m_show+0x1c0/0x1c0\n  __do_sys_finit_module+0x94/0xe0\n  do_syscall_64+0x5b/0x180\n  entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nFixes: 8ceb1357b337 (\"RDMA/device: Consolidate ib_device per_port data into one place\")\nSigned-off-by: Kamal Heib <kamalheib1@gmail.com>\nSigned-off-by: Jason Gunthorpe <jgg@mellanox.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/device.c||drivers/infiniband/core/device.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/device.c||drivers/infiniband/core/device.c": [
          "File: drivers/infiniband/core/device.c -> drivers/infiniband/core/device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:  free_netdevs(dev);",
          "493:  WARN_ON(refcount_read(&dev->refcount));",
          "499:   kfree_rcu(container_of(dev->port_data, struct ib_port_data_rcu,",
          "500:            pdata[0]),",
          "501:      rcu_head);",
          "502:  kfree_rcu(dev, rcu_head);",
          "503: }",
          "",
          "[Removed Lines]",
          "494:  ib_cache_release_one(dev);",
          "495:  ib_security_release_port_pkey_list(dev);",
          "496:  xa_destroy(&dev->compat_devs);",
          "497:  xa_destroy(&dev->client_data);",
          "498:  if (dev->port_data)",
          "",
          "[Added Lines]",
          "494:  if (dev->port_data) {",
          "495:   ib_cache_release_one(dev);",
          "496:   ib_security_release_port_pkey_list(dev);",
          "500:  }",
          "501:  xa_destroy(&dev->compat_devs);",
          "502:  xa_destroy(&dev->client_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1952:  unsigned long flags;",
          "1953:  unsigned int port;",
          "1955:  rdma_for_each_port (ib_dev, port) {",
          "1956:   struct ib_port_data *pdata = &ib_dev->port_data[port];",
          "1957:   struct net_device *ndev;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1956:  if (!ib_dev->port_data)",
          "1957:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e577c8b64d58fe307ea4d5149d31615df2d90861",
      "candidate_info": {
        "commit_hash": "e577c8b64d58fe307ea4d5149d31615df2d90861",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e577c8b64d58fe307ea4d5149d31615df2d90861",
        "files": [
          "mm/compaction.c"
        ],
        "message": "mm, compaction: make sure we isolate a valid PFN\n\nWhen we have holes in a normal memory zone, we could endup having\ncached_migrate_pfns which may not necessarily be valid, under heavy memory\npressure with swapping enabled ( via __reset_isolation_suitable(),\ntriggered by kswapd).\n\nLater if we fail to find a page via fast_isolate_freepages(), we may end\nup using the migrate_pfn we started the search with, as valid page.  This\ncould lead to accessing NULL pointer derefernces like below, due to an\ninvalid mem_section pointer.\n\nUnable to handle kernel NULL pointer dereference at virtual address 0000000000000008 [47/1825]\n Mem abort info:\n   ESR = 0x96000004\n   Exception class = DABT (current EL), IL = 32 bits\n   SET = 0, FnV = 0\n   EA = 0, S1PTW = 0\n Data abort info:\n   ISV = 0, ISS = 0x00000004\n   CM = 0, WnR = 0\n user pgtable: 4k pages, 48-bit VAs, pgdp = 0000000082f94ae9\n [0000000000000008] pgd=0000000000000000\n Internal error: Oops: 96000004 [#1] SMP\n ...\n CPU: 10 PID: 6080 Comm: qemu-system-aar Not tainted 510-rc1+ #6\n Hardware name: AmpereComputing(R) OSPREY EV-883832-X3-0001/OSPREY, BIOS 4819 09/25/2018\n pstate: 60000005 (nZCv daif -PAN -UAO)\n pc : set_pfnblock_flags_mask+0x58/0xe8\n lr : compaction_alloc+0x300/0x950\n [...]\n Process qemu-system-aar (pid: 6080, stack limit = 0x0000000095070da5)\n Call trace:\n  set_pfnblock_flags_mask+0x58/0xe8\n  compaction_alloc+0x300/0x950\n  migrate_pages+0x1a4/0xbb0\n  compact_zone+0x750/0xde8\n  compact_zone_order+0xd8/0x118\n  try_to_compact_pages+0xb4/0x290\n  __alloc_pages_direct_compact+0x84/0x1e0\n  __alloc_pages_nodemask+0x5e0/0xe18\n  alloc_pages_vma+0x1cc/0x210\n  do_huge_pmd_anonymous_page+0x108/0x7c8\n  __handle_mm_fault+0xdd4/0x1190\n  handle_mm_fault+0x114/0x1c0\n  __get_user_pages+0x198/0x3c0\n  get_user_pages_unlocked+0xb4/0x1d8\n  __gfn_to_pfn_memslot+0x12c/0x3b8\n  gfn_to_pfn_prot+0x4c/0x60\n  kvm_handle_guest_abort+0x4b0/0xcd8\n  handle_exit+0x140/0x1b8\n  kvm_arch_vcpu_ioctl_run+0x260/0x768\n  kvm_vcpu_ioctl+0x490/0x898\n  do_vfs_ioctl+0xc4/0x898\n  ksys_ioctl+0x8c/0xa0\n  __arm64_sys_ioctl+0x28/0x38\n  el0_svc_common+0x74/0x118\n  el0_svc_handler+0x38/0x78\n  el0_svc+0x8/0xc\n Code: f8607840 f100001f 8b011401 9a801020 (f9400400)\n ---[ end trace af6a35219325a9b6 ]---\n\nThe issue was reported on an arm64 server with 128GB with holes in the\nzone (e.g, [32GB@4GB, 96GB@544GB]), with a swap device enabled, while\nrunning 100 KVM guest instances.\n\nThis patch fixes the issue by ensuring that the page belongs to a valid\nPFN when we fallback to using the lower limit of the scan range upon\nfailure in fast_isolate_freepages().\n\nLink: http://lkml.kernel.org/r/1558711908-15688-1-git-send-email-suzuki.poulose@arm.com\nFixes: 5a811889de10f1eb (\"mm, compaction: use free lists to quickly locate a migration target\")\nSigned-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>\nReported-by: Marc Zyngier <marc.zyngier@arm.com>\nReviewed-by: Mel Gorman <mgorman@techsingularity.net>\nReviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>\nCc: Michal Hocko <mhocko@suse.com>\nCc: Qian Cai <cai@lca.pw>\nCc: Marc Zyngier <marc.zyngier@arm.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/compaction.c||mm/compaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/compaction.c||mm/compaction.c": [
          "File: mm/compaction.c -> mm/compaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     page = pfn_to_page(highest);",
          "1400:     cc->free_pfn = highest;",
          "1401:    } else {",
          "1403:      page = pfn_to_page(min_pfn);",
          "1404:      cc->free_pfn = min_pfn;",
          "1405:     }",
          "",
          "[Removed Lines]",
          "1402:     if (cc->direct_compaction) {",
          "",
          "[Added Lines]",
          "1402:     if (cc->direct_compaction && pfn_valid(min_pfn)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a200c721956ca026f44416acccc8efcca41109c5",
      "candidate_info": {
        "commit_hash": "a200c721956ca026f44416acccc8efcca41109c5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a200c721956ca026f44416acccc8efcca41109c5",
        "files": [
          "drivers/media/platform/qcom/venus/hfi_helper.h"
        ],
        "message": "media: venus: hfi_parser: fix a regression in parser\n\nThis fixes the following data abort:\n\n Unable to handle kernel paging request at virtual address 0000078000000040\n Mem abort info:\n   ESR = 0x96000004\n   Exception class = DABT (current EL), IL = 32 bits\n   SET = 0, FnV = 0\n   EA = 0, S1PTW = 0\n Data abort info:\n   ISV = 0, ISS = 0x00000004\n   CM = 0, WnR = 0\n user pgtable: 4k pages, 48-bit VAs, pgdp = (____ptrval____)\n [0000078000000040] pgd=0000000000000000\n Internal error: Oops: 96000004 [#1] PREEMPT SMP\n Process irq/28-venus (pid: 292, stack limit = 0x(____ptrval____))\n CPU: 0 PID: 292 Comm: irq/28-venus Not tainted 5.2.0-rc1+ #60\n Hardware name: Qualcomm Technologies, Inc. APQ 8016 SBC (DT)\n pstate: 60000005 (nZCv daif -PAN -UAO)\n pc : __memcpy+0x100/0x180\n lr : parse_caps+0x94/0xc0 [venus_core]\n sp : ffff0000114e3990\n x29: ffff0000114e3990 x28: ffff80003a7d0148\n x27: 00000000000df018 x26: ffff000008bd4618\n x25: 0000000000020003 x24: 0000078000000040\n x23: 0000000000000002 x22: 0000000000000002\n x21: ffff80003b9b8080 x20: 0000000000000008\n x19: ffff000010f59000 x18: 0000000000000000\n x17: 0000000000000000 x16: ffff80003c0f9b80\n x15: 0000000000000000 x14: 0100000100000002\n x13: 000000010020100b x12: 000000010000100a\n x11: 0000100000000040 x10: 0000100000000004\n x9 : 0000000000000000 x8 : ffff0000114e3bd8\n x7 : 0000000000000000 x6 : ffff0000114e39d8\n x5 : 0000000000000040 x4 : 0000000000000000\n x3 : 0000000000000010 x2 : 0000000000000000\n x1 : 0000078000000040 x0 : ffff0000114e39d8\n Call trace:\n  __memcpy+0x100/0x180\n  hfi_parser+0x23c/0x3b8 [venus_core]\n  hfi_session_init_done+0x40/0x60 [venus_core]\n  hfi_process_msg_packet+0xd4/0x1d8 [venus_core]\n  venus_isr_thread+0x1e0/0x230 [venus_core]\n  hfi_isr_thread+0x18/0x20 [venus_core]\n  irq_thread_fn+0x28/0x78\n  irq_thread+0x124/0x1c0\n  kthread+0x124/0x128\n  ret_from_fork+0x10/0x18\n Code: d503201f d503201f d503201f d503201f (a8c12027)\n ---[ end trace fd253ebaeea05ffc ]---\n genirq: exiting task \"irq/28-venus\" (292) is an active IRQ thread (irq 28)\n\nby modifying structure members to flexible array members.\n\nFixes: ded716267196862809e5926072adc962a611a1e3 media: hfi_parser: don't trick gcc with a wrong expected size\n\nSigned-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>\nSigned-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>",
        "before_after_code_files": [
          "drivers/mediplatform/qcom/venus/hfi_helper.h||drivers/media/platform/qcom/venus/hfi_helper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mediplatform/qcom/venus/hfi_helper.h||drivers/media/platform/qcom/venus/hfi_helper.h": [
          "File: drivers/mediplatform/qcom/venus/hfi_helper.h -> drivers/media/platform/qcom/venus/hfi_helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572:  struct hfi_capability data[];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:  struct hfi_profile_level profile_level[];",
          "",
          "---------------"
        ]
      }
    }
  ]
}