{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
      "candidate_info": {
        "commit_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Experimental code that tries to put the computation of subqueries inside a subroutine, and reuse that subroutine if the same subquery is evaluated more than once.  Current code does not work for CHECK constraints.\n\nFossilOrigin-Name: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2544:     }",
          "2545:     assert( pX->op==TK_IN );",
          "2547:     if( rMayHaveNull ){",
          "2549:     }",
          "2550:     pParse->nQueryLoop = savedNQueryLoop;",
          "2553:   }",
          "2555:   if( aiMap && eType!=IN_INDEX_INDEX_ASC && eType!=IN_INDEX_INDEX_DESC ){",
          "",
          "[Removed Lines]",
          "2546:     sqlite3CodeRhsOfIN(pParse, pX, eType==IN_INDEX_ROWID);",
          "2548:       sqlite3SetHasNullFlag(v, pX->iTable, rMayHaveNull);",
          "2551:   }else{",
          "2552:     pX->iTable = iTab;",
          "",
          "[Added Lines]",
          "2547:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "2549:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2658: void sqlite3CodeRhsOfIN(",
          "2662: ){",
          "2671:   assert( v!=0 );",
          "2683:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2685:   }",
          "",
          "[Removed Lines]",
          "2670:   v = sqlite3GetVdbe(pParse);",
          "2684:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2675:   v = pParse->pVdbe;",
          "2693:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2694:       sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "2695:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2696:                         pExpr->y.sub.iAddr);",
          "2697:       sqlite3VdbeAddOp2(v, OP_OpenDup, iTab, pExpr->iTable);",
          "2698:       return;",
          "2699:     }",
          "2702:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2703:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2704:     pExpr->y.sub.iAddr =",
          "2705:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2706:     VdbeComment((v, \"return address\"));",
          "2708:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2696:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2697:       pExpr->iTable, (isRowid?0:nVal));",
          "2698:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "2700:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2695:   pExpr->iTable = pParse->nTab++;",
          "",
          "[Added Lines]",
          "2719:   pExpr->iTable = iTab;",
          "2722: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2723:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2724:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "2725:   }else{",
          "2726:     VdbeComment((v, \"RHS of IN operator\"));",
          "2727:   }",
          "2728: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2706:     Select *pSelect = pExpr->x.pSelect;",
          "2707:     ExprList *pEList = pSelect->pEList;",
          "2711:     ));",
          "2712:     assert( !isRowid );",
          "",
          "[Removed Lines]",
          "2709:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY\",",
          "2710:         jmpIfDynamic>=0?\"\":\"CORRELATED \"",
          "",
          "[Added Lines]",
          "2740:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2741:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2778:       }",
          "",
          "[Removed Lines]",
          "2775:       if( jmpIfDynamic>=0 && !sqlite3ExprIsConstant(pE2) ){",
          "2776:         sqlite3VdbeChangeToNoop(v, jmpIfDynamic);",
          "2777:         jmpIfDynamic = -1;",
          "",
          "[Added Lines]",
          "2806:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2807:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2808:         addrOnce = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2799:   if( pKeyInfo ){",
          "2800:     sqlite3VdbeChangeP4(v, addr, (void *)pKeyInfo, P4_KEYINFO);",
          "2801:   }",
          "2804:   }",
          "2805: }",
          "",
          "[Removed Lines]",
          "2802:   if( jmpIfDynamic>=0 ){",
          "2803:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2833:   if( addrOnce ){",
          "2834:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2836:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2837:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2822: #ifndef SQLITE_OMIT_SUBQUERY",
          "2823: int sqlite3CodeSubselect(Parse *pParse, Expr *pExpr){",
          "2831:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2830:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2843:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2845:   }",
          "",
          "[Removed Lines]",
          "2844:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2862:   pSel = pExpr->x.pSelect;",
          "2863:   ExplainQueryPlan((pParse, 1, \"%sSCALAR SUBQUERY\",",
          "2865:   nReg = pExpr->op==TK_SELECT ? pSel->pEList->nExpr : 1;",
          "2866:   sqlite3SelectDestInit(&dest, 0, pParse->nMem+1);",
          "2867:   pParse->nMem += nReg;",
          "",
          "[Removed Lines]",
          "2864:         jmpIfDynamic>=0?\"\":\"CORRELATED \"));",
          "",
          "[Added Lines]",
          "2912:         addrOnce?\"\":\"CORRELATED \"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2887:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "2888:     return 0;",
          "2889:   }",
          "2891:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2895:   }",
          "2897:   return rReg;",
          "2898: }",
          "",
          "[Removed Lines]",
          "2890:   rReg = dest.iSDParm;",
          "2893:   if( jmpIfDynamic>=0 ){",
          "2894:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2938:   pExpr->iTable = rReg = dest.iSDParm;",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2987:   VdbeNoopComment((v, \"begin IN expr\"));",
          "2988:   eType = sqlite3FindInIndex(pParse, pExpr,",
          "2989:                              IN_INDEX_MEMBERSHIP | IN_INDEX_NOOP_OK,",
          "2992:   assert( pParse->nErr || nVector==1 || eType==IN_INDEX_EPH",
          "2993:        || eType==IN_INDEX_INDEX_ASC || eType==IN_INDEX_INDEX_DESC",
          "",
          "[Removed Lines]",
          "2990:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull, aiMap);",
          "",
          "[Added Lines]",
          "3042:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull,",
          "3043:                              aiMap, &iTab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3099:     VdbeCoverage(v);",
          "3101:   }else{",
          "3102:     sqlite3VdbeAddOp4(v, OP_Affinity, rLhs, nVector, 0, zAff, nVector);",
          "3103:     if( destIfFalse==destIfNull ){",
          "3106:                            rLhs, nVector); VdbeCoverage(v);",
          "3107:       goto sqlite3ExprCodeIN_finished;",
          "3108:     }",
          "3111:                                       rLhs, nVector); VdbeCoverage(v);",
          "3112:   }",
          "",
          "[Removed Lines]",
          "3098:     sqlite3VdbeAddOp3(v, OP_SeekRowid, pExpr->iTable, destIfFalse, rLhs);",
          "3105:       sqlite3VdbeAddOp4Int(v, OP_NotFound, pExpr->iTable, destIfFalse,",
          "3110:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, pExpr->iTable, 0,",
          "",
          "[Added Lines]",
          "3151:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iTab, destIfFalse, rLhs);",
          "3158:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iTab, destIfFalse,",
          "3163:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, iTab, 0,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3134:   if( destStep6 ) sqlite3VdbeResolveLabel(v, destStep6);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Removed Lines]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "",
          "[Added Lines]",
          "3188:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, iTab, destIfFalse);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3147:     int r3 = sqlite3GetTempReg(pParse);",
          "3148:     p = sqlite3VectorFieldSubexpr(pLeft, i);",
          "3149:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "3151:     sqlite3VdbeAddOp4(v, OP_Ne, rLhs+i, destNotNull, r3,",
          "3152:                       (void*)pColl, P4_COLLSEQ);",
          "3153:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3150:     sqlite3VdbeAddOp3(v, OP_Column, pExpr->iTable, i, r3);",
          "",
          "[Added Lines]",
          "3203:     sqlite3VdbeAddOp3(v, OP_Column, iTab, i, r3);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3156:   sqlite3VdbeAddOp2(v, OP_Goto, 0, destIfNull);",
          "3157:   if( nVector>1 ){",
          "3158:     sqlite3VdbeResolveLabel(v, destNotNull);",
          "3160:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3159:     sqlite3VdbeAddOp2(v, OP_Next, pExpr->iTable, addrTop+1);",
          "",
          "[Added Lines]",
          "3212:     sqlite3VdbeAddOp2(v, OP_Next, iTab, addrTop+1);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2485:     Table *pTab;           /* TK_COLUMN: Table containing column. Can be NULL",
          "2488:   } y;",
          "2489: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:     } sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4258: int sqlite3GetToken(const unsigned char *, int *);",
          "4259: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4260: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4262: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4263: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4264: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4261: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4266: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4516: int sqlite3JournalOpen(sqlite3_vfs *, const char *, sqlite3_file *, int, int);",
          "4517: int sqlite3JournalSize(sqlite3_vfs *);",
          "",
          "[Removed Lines]",
          "4514: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*);",
          "",
          "[Added Lines]",
          "4519: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*, int*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3610:   pCx->isEphemeral = 1;",
          "3611:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3612:   pCx->isTable = pOrig->isTable;",
          "3614:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "3613:   rc = sqlite3BtreeCursor(pOrig->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3613:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3614:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3682:         assert( pgno==MASTER_ROOT+1 );",
          "3683:         assert( pKeyInfo->db==db );",
          "3684:         assert( pKeyInfo->enc==ENC(db) );",
          "3685:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "3686:                                 pKeyInfo, pCx->uc.pCursor);",
          "3687:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3686:         pCx->pgnoRoot = pgno;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3690:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3691:                               0, pCx->uc.pCursor);",
          "3692:       pCx->isTable = 1;",
          "3693:     }",
          "3694:   }",
          "3695:   if( rc ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3695:       pCx->pgnoRoot = MASTER_ROOT;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "855:                           pTabItem->regResult, 1);",
          "856:     sqlite3VdbeGoto(v, addrTop);",
          "857:   }else{",
          "858:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "859:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857:     pTabItem->fg.viaCoroutine = 0;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:       if( pLoop->aLTerm[i]->pExpr==pX ) nEq++;",
          "539:     }",
          "541:     if( (pX->flags & EP_xIsSelect)==0 || pX->x.pSelect->pEList->nExpr==1 ){",
          "543:     }else{",
          "544:       sqlite3 *db = pParse->db;",
          "545:       pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);",
          "547:       if( !db->mallocFailed ){",
          "548:         aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);",
          "551:       }",
          "552:       sqlite3ExprDelete(db, pX);",
          "553:       pX = pTerm->pExpr;",
          "",
          "[Removed Lines]",
          "542:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0);",
          "549:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap);",
          "550:         pTerm->pExpr->iTable = pX->iTable;",
          "",
          "[Added Lines]",
          "541:     iTab = 0;",
          "543:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0, &iTab);",
          "550:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap, &iTab);",
          "551:         pTerm->pExpr->iTable = iTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:       testcase( bRev );",
          "558:       bRev = !bRev;",
          "559:     }",
          "561:     sqlite3VdbeAddOp2(v, bRev ? OP_Last : OP_Rewind, iTab, 0);",
          "562:     VdbeCoverageIf(v, bRev);",
          "563:     VdbeCoverageIf(v, !bRev);",
          "",
          "[Removed Lines]",
          "560:     iTab = pX->iTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2197:     if( pAlt->wtFlags & (TERM_CODED) ) continue;",
          "2198:     if( (pAlt->eOperator & WO_IN)",
          "2199:      && (pAlt->pExpr->flags & EP_xIsSelect)",
          "2201:     ){",
          "2202:       continue;",
          "2203:     }",
          "",
          "[Removed Lines]",
          "2200:      && (pAlt->pExpr->x.pSelect->pEList->nExpr>1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ab76166e3af6ab6e63615a61785ef489cd7b7de",
      "candidate_info": {
        "commit_hash": "1ab76166e3af6ab6e63615a61785ef489cd7b7de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1ab76166e3af6ab6e63615a61785ef489cd7b7de",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change another fts5 assert() that may fail with a corrupt database to an assert_nc().\n\nFossilOrigin-Name: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1711:   if( p->rc==SQLITE_OK ){",
          "1712:     pIter->iLeafOffset = 4;",
          "1713:     assert_nc( pIter->pLeaf->nn>4 );",
          "1715:     pIter->iPgidxOff = pIter->pLeaf->szLeaf+1;",
          "1716:     fts5SegIterLoadTerm(p, pIter, 0);",
          "1717:     fts5SegIterLoadNPos(p, pIter);",
          "",
          "[Removed Lines]",
          "1714:     assert( fts5LeafFirstTermOff(pIter->pLeaf)==4 );",
          "",
          "[Added Lines]",
          "1714:     assert_nc( fts5LeafFirstTermOff(pIter->pLeaf)==4 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "769: }]} {}",
          "772:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "773: } {1 {vtable constructor failed: t1}}",
          "775: sqlite3_fts5_may_be_corrupt 0",
          "776: finish_test",
          "",
          "[Removed Lines]",
          "771: do_catchsql_test 14.1 {",
          "",
          "[Added Lines]",
          "771: do_catchsql_test 13.1 {",
          "775: #-------------------------------------------------------------------------",
          "776: reset_db",
          "777: do_test 14.0 {",
          "778:   sqlite3 db {}",
          "779:   db deserialize [decode_hexdb {",
          "780: | size 28672 pagesize 4096 filename c14b.db",
          "781: | page 1 offset 0",
          "782: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "783: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 07   .....@  ........",
          "784: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "785: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "786: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "787: |     96: 00 2e 30 38 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ..08...........m",
          "788: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "789: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "790: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "791: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "792: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "793: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "794: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "795: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "796: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "797: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "798: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "799: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "800: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "801: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "802: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "803: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "804: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "805: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "806: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "807: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "808: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "809: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "810: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "811: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "812: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "813: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "814: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "815: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "816: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "817: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "818: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "819: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "820: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "821: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "822: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "823: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "824: | page 2 offset 4096",
          "825: |      0: 0d 0f ef 00 04 0f 18 00 0f e8 0f 18 0f bd 0f 2c   ...............,",
          "826: |   3856: 00 00 00 00 00 00 00 00 12 0a 03 00 2a 00 00 00   ............*...",
          "827: |   3872: 00 01 02 02 00 02 01 01 01 02 01 01 81 09 88 80   ................",
          "828: |   3888: 80 80 80 01 04 00 82 16 00 00 00 79 06 30 61 62   ...........y.0ab",
          "829: |   3904: 61 63 6b 08 02 07 04 04 6e 64 6f 6e 08 02 05 02   ack.....ndon....",
          "830: |   3920: 05 63 74 69 76 65 04 02 02 04 02 0b 02 04 6c 70   .ctive........lp",
          "831: |   3936: 68 61 08 04 02 0a 02 03 74 6b 6d 06 02 02 03 02   ha......tkm.....",
          "832: |   3952: 6f 6d 08 02 09 05 02 69 63 07 02 02 01 06 62 61   om.....ic.....ba",
          "833: |   3968: 63 6b 75 70 08 02 04 02 05 6f 6f 6d 65 72 05 02   ckup.....oomer..",
          "834: |   3984: 02 01 0c 63 68 61 6e 6e 65 62 6f 6f 6d 65 72 08   ...channeboomer.",
          "835: |   4000: 02 08 07 01 6c 08 02 03 01 04 74 65 73 74 08 02   ....l.....test..",
          "836: |   4016: 06 04 0a 09 0d 0a 08 07 07 0b 0a 11 06 24 84 80   .............$..",
          "837: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "838: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "839: |   4064: 6f 6e 03 02 02 03 9a 07 05 01 03 00 10 08 11 00   on..............",
          "840: |   4080: 00 00 11 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "841: | page 3 offset 8192",
          "842: |      0: 0a 00 00 00 02 0f f3 00 0f fa 0f f3 00 00 00 00   ................",
          "843: |   4080: 00 00 00 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "844: | page 4 offset 12288",
          "845: |      0: 0d 00 00 00 08 0f 6a 00 0f f6 0f ec 0f e0 0f d5   ......j.........",
          "846: |     16: 0f ca 0f c1 0f b6 0f 6a 00 00 00 00 00 00 00 00   .......j........",
          "847: |   3936: 00 00 00 00 00 00 00 00 00 00 4a 08 04 00 81 19   ..........J.....",
          "848: |   3952: 61 6c 70 68 61 20 63 68 61 6e 6e 65 6c 20 62 61   alpha channel ba",
          "849: |   3968: 63 6b 75 70 20 61 62 61 6e 64 6f 6e 20 74 65 73   ckup abandon tes",
          "850: |   3984: 74 20 61 62 61 63 6b 20 63 68 61 6e 6e 65 62 6f   t aback channebo",
          "851: |   4000: 6f 6d 65 72 20 61 74 6f 6d 20 61 6c 70 68 61 20   omer atom alpha",
          "852: |   4016: 61 63 74 69 76 65 09 07 03 00 19 61 74 6f 6d 69   active.....atomi",
          "853: |   4032: 63 07 06 03 00 15 61 74 6b 6d 09 05 03 00 19 62   c.....atkm.....b",
          "854: |   4048: 6f 6f 6d 65 72 09 04 03 00 19 61 63 74 69 76 65   oomer.....active",
          "855: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "856: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "857: | page 5 offset 16384",
          "858: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "859: |     16: 0f e2 0f dc 0f d6 0f d0 00 00 00 00 00 00 00 00   ................",
          "860: |   4048: 04 08 03 00 0e 0a 04 07 03 00 0e 01 04 06 03 00   ................",
          "861: |   4064: 0e 01 04 05 03 00 0e 01 04 04 03 00 0e 01 04 03   ................",
          "862: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "863: | page 6 offset 20480",
          "864: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "865: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "866: | page 7 offset 24576",
          "867: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "868: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "869: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "870: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "871: | end c14b.db",
          "872: }]} {}",
          "874: breakpoint",
          "875: do_catchsql_test 14.1 {",
          "876:   INSERT INTO t1(t1) VALUES('optimize');",
          "877: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d697f6f3ca47350dad30feb529914fc5254fa662ece783408eea963d912918c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
      "candidate_info": {
        "commit_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62e009f3d89c837d83a366215332f0a0d04bfd04",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 177f5f40eabfcfd229ac7f291dfed9e9ee35762e86923a0f356915f389da177d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
      "candidate_info": {
        "commit_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a407eccb6179ee033b8e83a6eab4734dd075664b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "If replace triggers are run during uniqueness checking, then rerun all uniqueness checks a second time using the ABORT algorithm. Fix for ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea068b099c96b8b9526114732d2a6be186cf381b7329d102778ad25b95510c9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:     }",
          "1484:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1513:   if( (db->flags & (SQLITE_RecTriggers|SQLITE_ForeignKeys))==0 ){",
          "1516:     pTrigger = 0;",
          "1517:     regTrigCnt = 0;",
          "1518:   }else{",
          "1519:     if( db->flags&SQLITE_RecTriggers ){",
          "1520:       pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1521:       regTrigCnt = pTrigger!=0 || sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1522:     }else{",
          "1523:       pTrigger = 0;",
          "1524:       regTrigCnt = sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1525:     }",
          "1526:     if( regTrigCnt ){",
          "1529:       regTrigCnt = ++pParse->nMem;",
          "1530:       sqlite3VdbeAddOp2(v, OP_Integer, 0, regTrigCnt);",
          "1531:       VdbeComment((v, \"trigger count\"));",
          "1532:       lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1533:       addrRecheck = lblRecheckOk;",
          "1534:     }",
          "1535:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1580:           sqlite3MultiWrite(pParse);",
          "1581:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1582:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1586:         }else{",
          "1587: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1588:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "1575:         Trigger *pTrigger = 0;",
          "1576:         if( db->flags&SQLITE_RecTriggers ){",
          "1577:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1578:         }",
          "1579:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1583:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1584:           VdbeCoverage(v);",
          "1585:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "[Added Lines]",
          "1626:         if( regTrigCnt ){",
          "1631:           nReplaceTrig++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:     sqlite3VdbeVerifyAbortable(v, onError);",
          "1752:     regR = (pIdx==pPk) ? regIdx : sqlite3GetTempRange(pParse, nPkField);",
          "",
          "[Removed Lines]",
          "1748:     sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1749:                          regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1795:     addrConflictCk =",
          "1796:       sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1797:                            regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1829:         break;",
          "1830:       }",
          "1831:       default: {",
          "1834:         assert( onError==OE_Replace );",
          "1839:           sqlite3MultiWrite(pParse);",
          "1841:         }",
          "1842:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1843:             regR, nPkField, 0, OE_Replace,",
          "1844:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1848:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1849:         }",
          "1850:         seenReplace = 1;",
          "1851:         break;",
          "",
          "[Removed Lines]",
          "1832:         Trigger *pTrigger = 0;",
          "1833:         int bRetryConstraintCheck = 0;",
          "1835:         if( db->flags&SQLITE_RecTriggers ){",
          "1836:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1837:         }",
          "1838:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1840:           bRetryConstraintCheck = 1;",
          "1845:         if( bRetryConstraintCheck ){",
          "1846:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1847:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1883:         nConflictCk = sqlite3VdbeCurrentAddr(v) - addrConflictCk;",
          "1884:         if( regTrigCnt ){",
          "1886:           nReplaceTrig++;",
          "1891:         if( regTrigCnt ){",
          "1898:           VdbeComment((v, \"bypass recheck\"));",
          "1903:           sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1904:           lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "1914:           pOp = sqlite3VdbeGetOp(v, addrConflictCk);",
          "1915:           while( nConflictCk>0 && !db->mallocFailed ){",
          "1916:             if( sqlite3OpcodeProperty[pOp->opcode]&OPFLG_JUMP ){",
          "1917:               p2 = lblRecheckOk;",
          "1918:             }else{",
          "1919:               p2 = pOp->p2;",
          "1920:             }",
          "1921:             if( pOp->opcode!=OP_IdxRowid ){",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "1928:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1867:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1868:   }",
          "1871:   if( HasRowid(pTab) ){",
          "1872:     int regRec = aRegIdx[ix];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1955:   testcase( regTrigCnt!=0 && nReplaceTrig==0 );",
          "1956:   if( nReplaceTrig ){",
          "1957:     sqlite3VdbeAddOp2(v, OP_IfNot, regTrigCnt, lblRecheckOk);VdbeCoverage(v);",
          "1958:     if( !pPk ){",
          "1959:       if( isUpdate ){",
          "1960:         sqlite3VdbeAddOp3(v, OP_Eq, regNewData, addrRecheck, regOldData);",
          "1961:         sqlite3VdbeChangeP5(v, SQLITE_NOTNULL);",
          "1962:         VdbeCoverage(v);",
          "1963:       }",
          "1964:       sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRecheck, regNewData);",
          "1965:       VdbeCoverage(v);",
          "1966:       sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1967:     }else{",
          "1968:       sqlite3VdbeGoto(v, addrRecheck);",
          "1969:     }",
          "1970:     sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1971:   }",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "526: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: # 2019-10-25 ticket c1e19e12046d23fe",
          "523: do_catchsql_test insert-17.1 {",
          "524:   PRAGMA temp.recursive_triggers = true;",
          "525:   DROP TABLE IF EXISTS t0;",
          "526:   CREATE TABLE t0(aa, bb);",
          "527:   CREATE UNIQUE INDEX t0bb ON t0(bb);",
          "528:   CREATE TRIGGER \"r17.1\" BEFORE DELETE ON t0",
          "529:     BEGIN INSERT INTO t0(aa,bb) VALUES(99,1);",
          "530:   END;",
          "531:   INSERT INTO t0(aa,bb) VALUES(10,20);",
          "532:   REPLACE INTO t0(aa,bb) VALUES(30,20);",
          "533: } {1 {UNIQUE constraint failed: t0.rowid}}",
          "534: integrity_check insert-17.2",
          "535: do_catchsql_test insert-17.3 {",
          "536:   DROP TABLE IF EXISTS t1;",
          "537:   CREATE TABLE t1(a, b UNIQUE, c UNIQUE);",
          "538:   INSERT INTO t1(a,b,c) VALUES(1,1,1),(2,2,2),(3,3,3),(4,4,4);",
          "539:   CREATE TRIGGER \"r17.3\" AFTER DELETE ON t1 WHEN OLD.c<>3 BEGIN",
          "540:     INSERT INTO t1(rowid,a,b,c) VALUES(100,100,100,3);",
          "541:   END;",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68748ec50924a77e19498766d5243851ca836d29",
      "candidate_info": {
        "commit_hash": "68748ec50924a77e19498766d5243851ca836d29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68748ec50924a77e19498766d5243851ca836d29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/fuzzdata8.db"
        ],
        "message": "Futher improvements to the IN operator for row-values on virtual tables.\n\nFossilOrigin-Name: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 344d9cb0c726078af6deb4a26bed3aded5b26914bb286d3446d3a4e9150840b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:     iIn = pLevel->u.in.nIn;",
          "1306:     for(j=nConstraint-1; j>=0; j--){",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:         assert( pLevel->u.in.aInLoop!=0 || db->mallocFailed );",
          "1322:         if( !db->mallocFailed ){",
          "1325:           assert( pOp->opcode==OP_Column || pOp->opcode==OP_Rowid );",
          "1326:           assert( pOp->opcode!=OP_Column || pOp->p3==iReg+j+2 );",
          "1327:           assert( pOp->opcode!=OP_Rowid || pOp->p2==iReg+j+2 );",
          "",
          "[Removed Lines]",
          "1323:           assert( iIn>0 );",
          "1324:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[--iIn].addrInTop);",
          "",
          "[Added Lines]",
          "1324:           assert( iIn>=0 && iIn<pLevel->u.in.nIn );",
          "1325:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[iIn].addrInTop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1345:         }",
          "1346:       }",
          "1347:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1349:     assert( iIn==0 || db->mallocFailed );",
          "",
          "---------------"
        ]
      }
    }
  ]
}