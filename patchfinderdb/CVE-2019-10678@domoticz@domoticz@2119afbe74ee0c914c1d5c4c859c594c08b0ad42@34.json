{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f04a3dddc2350f18a5684ee46f4c1a8cad20b5d",
      "candidate_info": {
        "commit_hash": "0f04a3dddc2350f18a5684ee46f4c1a8cad20b5d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0f04a3dddc2350f18a5684ee46f4c1a8cad20b5d",
        "files": [
          "main/Helper.cpp",
          "main/Helper.h",
          "main/domoticz.cpp"
        ],
        "message": "Moved IsWSL to Helper file",
        "before_after_code_files": [
          "main/Helper.cpp||main/Helper.cpp",
          "main/Helper.h||main/Helper.h",
          "main/domoticz.cpp||main/domoticz.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/Helper.cpp||main/Helper.cpp"
          ],
          "candidate": [
            "main/Helper.cpp||main/Helper.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1137: #endif",
          "1138: }",
          "1139: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141: #if defined(__linux__)",
          "1142: bool IsWSL(void)",
          "1143: {",
          "1145:  bool is_wsl = false;",
          "1147:  char buf[1024];",
          "1149:  int status_fd = open(\"/proc/sys/kernel/osrelease\", O_RDONLY);",
          "1150:  if (status_fd == -1)",
          "1151:   return is_wsl;",
          "1153:  ssize_t num_read = read(status_fd, buf, sizeof(buf) - 1);",
          "1155:  if (num_read > 0)",
          "1156:  {",
          "1157:   buf[num_read] = 0;",
          "1158:   is_wsl |= (strstr(buf, \"Microsoft\") != NULL);",
          "1159:   is_wsl |= (strstr(buf, \"WSL\") != NULL);",
          "1160:  }",
          "1162:  status_fd = open(\"/proc/version\", O_RDONLY);",
          "1163:  if (status_fd == -1)",
          "1164:   return is_wsl;",
          "1166:  num_read = read(status_fd, buf, sizeof(buf) - 1);",
          "1168:  if (num_read > 0)",
          "1169:  {",
          "1170:   buf[num_read] = 0;",
          "1171:   is_wsl |= (strstr(buf, \"Microsoft\") != NULL);",
          "1172:   is_wsl |= (strstr(buf, \"WSL\") != NULL);",
          "1173:  }",
          "1175:  return is_wsl;",
          "1176: }",
          "1177: #endif",
          "",
          "---------------"
        ],
        "main/Helper.h||main/Helper.h": [
          "File: main/Helper.h -> main/Helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: int GetDirFilesRecursive(const std::string &DirPath, std::map<std::string, int> &_Files);",
          "79: int SetThreadName(std::thread::native_handle_type thread, const char *name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: #if defined(__linux__)",
          "82:  bool IsWSL(void); //Detects if running under Windows Subsystem for Linux (WSL)",
          "83: #endif",
          "",
          "---------------"
        ],
        "main/domoticz.cpp||main/domoticz.cpp": [
          "File: main/domoticz.cpp -> main/domoticz.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  #include <string.h>",
          "46: #endif",
          "87: const char *szHelp =",
          "88: \"Usage: Domoticz -www port\\n\"",
          "89: \"\\t-version display version number\\n\"",
          "",
          "[Removed Lines]",
          "48: #if defined(__linux__)",
          "49: static bool IsWSL(void)",
          "50: {",
          "52:  bool is_wsl = false;",
          "54:  char buf[1024];",
          "56:  int status_fd = open(\"/proc/sys/kernel/osrelease\", O_RDONLY);",
          "57:  if (status_fd == -1)",
          "58:   return is_wsl;",
          "60:  ssize_t num_read = read(status_fd, buf, sizeof(buf)-1);",
          "62:  if (num_read > 0)",
          "63:  {",
          "64:   buf[num_read] = 0;",
          "65:   is_wsl |= (strstr(buf, \"Microsoft\") != NULL);",
          "66:   is_wsl |= (strstr(buf, \"WSL\") != NULL);",
          "67:  }",
          "69:  status_fd = open(\"/proc/version\", O_RDONLY);",
          "70:  if (status_fd == -1)",
          "71:   return is_wsl;",
          "73:  num_read = read(status_fd, buf, sizeof(buf)-1);",
          "75:  if (num_read > 0)",
          "76:  {",
          "77:   buf[num_read] = 0;",
          "78:   is_wsl |= (strstr(buf, \"Microsoft\") != NULL);",
          "79:   is_wsl |= (strstr(buf, \"WSL\") != NULL);",
          "80:  }",
          "82:  return is_wsl;",
          "83: }",
          "85: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c662f710c597d086f43099f5cf7bb2f7b0a4145c",
      "candidate_info": {
        "commit_hash": "c662f710c597d086f43099f5cf7bb2f7b0a4145c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/c662f710c597d086f43099f5cf7bb2f7b0a4145c",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Fixed compile warning",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8162:     }",
          "8163:    }",
          "8166:    if (totUserDevices == 0)",
          "8167:    {",
          "",
          "[Removed Lines]",
          "8165:    char szData[250];",
          "",
          "[Added Lines]",
          "8165:    char szData[320];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5934e5bf63f0861dd7107a38b9c007f12930a4f",
      "candidate_info": {
        "commit_hash": "d5934e5bf63f0861dd7107a38b9c007f12930a4f",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d5934e5bf63f0861dd7107a38b9c007f12930a4f",
        "files": [
          "hardware/plugins/PluginTransports.h"
        ],
        "message": "Bugfix: ICMP and UDP disconnect set to signal as async",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.h||hardware/plugins/PluginTransports.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.h||hardware/plugins/PluginTransports.h": [
          "File: hardware/plugins/PluginTransports.h -> hardware/plugins/PluginTransports.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   std::string   m_IP;",
          "57:  public:",
          "58:   CPluginTransportIP(int HwdID, PyObject* pConnection, const std::string& Address, const std::string& Port) : CPluginTransport(HwdID, pConnection), m_IP(Address) { m_Port = Port; };",
          "59:  };",
          "61:  class CPluginTransportTCP : public CPluginTransportIP, std::enable_shared_from_this<CPluginTransportTCP>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:   virtual bool  AsyncDisconnect() { return IsConnected() || IsConnecting(); };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   virtual void  handleRead(const boost::system::error_code& e, std::size_t bytes_transferred);",
          "72:   virtual void  handleWrite(const std::vector<byte>& pMessage);",
          "73:   virtual bool  handleDisconnect();",
          "75:   virtual bool  ThreadPoolRequired() { return true; };",
          "76:   boost::asio::ip::tcp::socket& Socket() { return *m_Socket; };",
          "77:   ~CPluginTransportTCP();",
          "",
          "[Removed Lines]",
          "74:   virtual bool  AsyncDisconnect() { return IsConnected() || IsConnecting(); };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37d1cc57e5c77030f18c4ba68f6cc7296736890e",
      "candidate_info": {
        "commit_hash": "37d1cc57e5c77030f18c4ba68f6cc7296736890e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/37d1cc57e5c77030f18c4ba68f6cc7296736890e",
        "files": [
          "hardware/Rtl433.cpp"
        ],
        "message": "better logging for RTL433 (missing headers before!)",
        "before_after_code_files": [
          "hardware/Rtl433.cpp||hardware/Rtl433.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Rtl433.cpp||hardware/Rtl433.cpp": [
          "File: hardware/Rtl433.cpp -> hardware/Rtl433.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  {",
          "101:   char line[2048];",
          "102:   std::vector<std::string> headers;",
          "103:   std::string sLastLine = \"\";",
          "105:   std::string szFlags = \"-F csv -q -I 2 \" + m_cmdline; // -f 433.92e6 -f 868.24e6 -H 60 -d 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   std::string headerLine = \"\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if (bFirstTime)",
          "152:     {",
          "153:      bFirstTime = false;",
          "154:      headers = ParseCSVLine(line);",
          "155:      continue;",
          "156:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:      headerLine = line;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:     if (!bHaveSend)",
          "463:     {",
          "466:     }",
          "467:     else",
          "468:     {",
          "",
          "[Removed Lines]",
          "465:      _log.Log(LOG_STATUS, \"Rtl433: Unhandled sensor reading, please report: (%s)\", line);",
          "",
          "[Added Lines]",
          "467:      _log.Log(LOG_STATUS, \"Rtl433: Unhandled sensor reading, please report: (%s|%s)\", headerLine.c_str(), line.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f098557117899e2701b97a40899bd5cef74d8a38",
      "candidate_info": {
        "commit_hash": "f098557117899e2701b97a40899bd5cef74d8a38",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f098557117899e2701b97a40899bd5cef74d8a38",
        "files": [
          "www/app/app.js",
          "www/app/events/Events.html"
        ],
        "message": "Removed double closing tag in event editor",
        "before_after_code_files": [
          "www/app/app.js||www/app/app.js",
          "www/app/events/Events.html||www/app/events/Events.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/app.js||www/app/app.js": [
          "File: www/app/app.js -> www/app/app.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:       $rootScope.config.WindSign = data.WindSign;",
          "734:       $rootScope.config.language = data.language;",
          "735:       $rootScope.config.EnableTabProxy = data.result.EnableTabProxy,",
          "738:       $rootScope.config.EnableTabLights = data.result.EnableTabLights;",
          "739:       $rootScope.config.EnableTabScenes = data.result.EnableTabScenes;",
          "740:       $rootScope.config.EnableTabTemp = data.result.EnableTabTemp;",
          "",
          "[Removed Lines]",
          "736:        $rootScope.config.EnableTabDashboard = data.result.EnableTabDashboard,",
          "737:        $rootScope.config.EnableTabFloorplans = data.result.EnableTabFloorplans;",
          "",
          "[Added Lines]",
          "736:       $rootScope.config.EnableTabDashboard = data.result.EnableTabDashboard,",
          "737:       $rootScope.config.EnableTabFloorplans = data.result.EnableTabFloorplans;",
          "",
          "---------------"
        ],
        "www/app/events/Events.html||www/app/events/Events.html": [
          "File: www/app/events/Events.html -> www/app/events/Events.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:                 <i class=\"icon-tasks\"></i>",
          "40:             </a>",
          "43:             <a class=\"events-editor__file\"",
          "44:                href=\"javascript:void(0)\"",
          "45:                ng-repeat=\"event in $ctrl.openedEvents track by event.id\"",
          "",
          "[Removed Lines]",
          "42:             </a>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}