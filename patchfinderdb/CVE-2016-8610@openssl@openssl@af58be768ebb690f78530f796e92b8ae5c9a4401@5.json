{
  "cve_id": "CVE-2016-8610",
  "cve_desc": "A denial of service flaw was found in OpenSSL 0.9.8, 1.0.1, 1.0.2 through 1.0.2h, and 1.1.0 in the way the TLS/SSL protocol defined processing of ALERT packets during a connection handshake. A remote attacker could use this flaw to make a TLS/SSL server consume an excessive amount of CPU and fail to accept connections from other clients.",
  "repo": "openssl/openssl",
  "patch_hash": "af58be768ebb690f78530f796e92b8ae5c9a4401",
  "patch_info": {
    "commit_hash": "af58be768ebb690f78530f796e92b8ae5c9a4401",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/af58be768ebb690f78530f796e92b8ae5c9a4401",
    "files": [
      "include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/record.h",
      "ssl/record/record_locl.h",
      "ssl/ssl_err.c"
    ],
    "message": "Don't allow too many consecutive warning alerts\n\nCertain warning alerts are ignored if they are received. This can mean that\nno progress will be made if one peer continually sends those warning alerts.\nImplement a count so that we abort the connection if we receive too many.\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/record.h||ssl/record/record.h",
      "ssl/record/record_locl.h||ssl/record/record_locl.h",
      "ssl/ssl_err.c||ssl/ssl_err.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2485: # define SSL_R_TLS_HEARTBEAT_PENDING                      366",
      "2486: # define SSL_R_TLS_ILLEGAL_EXPORTER_LABEL                 367",
      "2487: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
      "2488: # define SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS             314",
      "2489: # define SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS       239",
      "2490: # define SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES           242",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "443:         }",
      "444:     }",
      "448:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "450:     if (SSL3_RECORD_get_type(rr) != SSL3_RT_ALERT",
      "451:             && SSL3_RECORD_get_length(rr) != 0)",
      "452:         s->rlayer.alert_count = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:         if (alert_level == SSL3_AL_WARNING) {",
      "724:             s->s3->warn_alert = alert_descr;",
      "725:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
      "726: #ifndef OPENSSL_NO_SCTP",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "734:             s->rlayer.alert_count++;",
      "735:             if (s->rlayer.alert_count == MAX_WARN_ALERT_COUNT) {",
      "736:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
      "737:                 SSLerr(SSL_F_DTLS1_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
      "738:                 goto f_err;",
      "739:             }",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1063:     } while (num_recs == 0);",
      "1064:     rr = &rr[curr_rec];",
      "1068:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:     if (SSL3_RECORD_get_type(rr) != SSL3_RT_ALERT",
      "1071:             && SSL3_RECORD_get_length(rr) != 0)",
      "1072:         s->rlayer.alert_count = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1333:         if (alert_level == SSL3_AL_WARNING) {",
      "1334:             s->s3->warn_alert = alert_descr;",
      "1335:             SSL3_RECORD_set_read(rr);",
      "1336:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
      "1337:                 s->shutdown |= SSL_RECEIVED_SHUTDOWN;",
      "1338:                 return (0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1345:             s->rlayer.alert_count++;",
      "1346:             if (s->rlayer.alert_count == MAX_WARN_ALERT_COUNT) {",
      "1347:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
      "1348:                 SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
      "1349:                 goto f_err;",
      "1350:             }",
      "",
      "---------------"
    ],
    "ssl/record/record.h||ssl/record/record.h": [
      "File: ssl/record/record.h -> ssl/record/record.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     unsigned char write_sequence[SEQ_NUM_SIZE];",
      "180:     unsigned int is_first_record;",
      "181:     DTLS_RECORD_LAYER *d;",
      "182: } RECORD_LAYER;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     unsigned int alert_count;",
      "",
      "---------------"
    ],
    "ssl/record/record_locl.h||ssl/record/record_locl.h": [
      "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->rbuf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #define MAX_WARN_ALERT_COUNT    5",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:      \"tls illegal exporter label\"},",
      "618:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
      "619:      \"tls invalid ecpointformat list\"},",
      "620:     {ERR_REASON(SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS),",
      "621:      \"unable to find ecdh parameters\"},",
      "622:     {ERR_REASON(SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "620:     {ERR_REASON(SSL_R_TOO_MANY_WARN_ALERTS), \"too many warn alerts\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b612799a80af398040efc2416e0d09dcb0da1cf5",
      "candidate_info": {
        "commit_hash": "b612799a80af398040efc2416e0d09dcb0da1cf5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b612799a80af398040efc2416e0d09dcb0da1cf5",
        "files": [
          "Configure",
          "apps/openssl.c",
          "apps/s_cb.c",
          "apps/s_client.c",
          "apps/s_server.c",
          "include/openssl/ssl.h",
          "include/openssl/ssl3.h",
          "include/openssl/tls1.h",
          "ssl/s3_lib.c",
          "ssl/ssl_err.c",
          "ssl/t1_trce.c",
          "util/mkdef.pl"
        ],
        "message": "Revert \"Remove heartbeats completely\"\n\nDone too soon, this is for future OpenSSL 1.2.0\n\nThis reverts commit 6c62f9e1639a7d1a879f363a99882920104dfedb.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/openssl.c||apps/openssl.c",
          "apps/s_cb.c||apps/s_cb.c",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/t1_trce.c||ssl/t1_trce.c",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/openssl.c||apps/openssl.c": [
          "File: apps/openssl.c -> apps/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628: #ifdef OPENSSL_NO_GOST",
          "629:     BIO_puts(bio_out, \"GOST\\n\");",
          "630: #endif",
          "631: #ifdef OPENSSL_NO_IDEA",
          "632:     BIO_puts(bio_out, \"IDEA\\n\");",
          "633: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631: #ifdef OPENSSL_NO_HEARTBEATS",
          "632:     BIO_puts(bio_out, \"HEARTBEATS\\n\");",
          "633: #endif",
          "",
          "---------------"
        ],
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:         case 23:",
          "556:             str_content_type = \"ApplicationData\";",
          "557:             break;",
          "558:         }",
          "559:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558: #ifndef OPENSSL_NO_HEARTBEATS",
          "559:         case 24:",
          "560:             str_details1 = \", Heartbeat\";",
          "562:             if (len > 0) {",
          "563:                 switch (bp[0]) {",
          "564:                 case 1:",
          "565:                     str_details1 = \", HeartbeatRequest\";",
          "566:                     break;",
          "567:                 case 2:",
          "568:                     str_details1 = \", HeartbeatResponse\";",
          "569:                     break;",
          "570:                 }",
          "571:             }",
          "572:             break;",
          "573: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:     {\"SRP\", TLSEXT_TYPE_srp},",
          "596:     {\"signature algorithms\", TLSEXT_TYPE_signature_algorithms},",
          "597:     {\"use SRTP\", TLSEXT_TYPE_use_srtp},",
          "598:     {\"session ticket\", TLSEXT_TYPE_session_ticket},",
          "599:     {\"renegotiation info\", TLSEXT_TYPE_renegotiate},",
          "600:     {\"signed certificate timestamps\", TLSEXT_TYPE_signed_certificate_timestamp},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     {\"heartbeat\", TLSEXT_TYPE_heartbeat},",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2448:                 SSL_renegotiate(con);",
          "2449:                 cbuf_len = 0;",
          "2450:             }",
          "2451:             else {",
          "2452:                 cbuf_len = i;",
          "2453:                 cbuf_off = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2451: #ifndef OPENSSL_NO_HEARTBEATS",
          "2452:             else if ((!c_ign_eof) && (cbuf[0] == 'B' && cmdletters)) {",
          "2453:                 BIO_printf(bio_err, \"HEARTBEATING\\n\");",
          "2454:                 SSL_heartbeat(con);",
          "2455:                 cbuf_len = 0;",
          "2456:             }",
          "2457: #endif",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:                     goto err;",
          "2228:                 }",
          "2229:                 if ((buf[0] == 'r') && ((buf[1] == '\\n') || (buf[1] == '\\r'))) {",
          "2230:                     SSL_renegotiate(con);",
          "2231:                     i = SSL_do_handshake(con);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2229: #ifndef OPENSSL_NO_HEARTBEATS",
          "2230:                 if ((buf[0] == 'B') && ((buf[1] == '\\n') || (buf[1] == '\\r'))) {",
          "2231:                     BIO_printf(bio_err, \"HEARTBEATING\\n\");",
          "2232:                     SSL_heartbeat(con);",
          "2233:                     i = 0;",
          "2234:                     continue;",
          "2235:                 }",
          "2236: #endif",
          "",
          "---------------"
        ],
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "509: # define SSL_get_secure_renegotiation_support(ssl) \\",
          "510:         SSL_ctrl((ssl), SSL_CTRL_GET_RI_SUPPORT, 0, NULL)",
          "512: # define SSL_CTX_set_cert_flags(ctx,op) \\",
          "513:         SSL_CTX_ctrl((ctx),SSL_CTRL_CERT_FLAGS,(op),NULL)",
          "514: # define SSL_set_cert_flags(s,op) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512: # ifndef OPENSSL_NO_HEARTBEATS",
          "513: #  define SSL_heartbeat(ssl) \\",
          "514:         SSL_ctrl((ssl),SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT,0,NULL)",
          "515: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1090: # define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79",
          "1091: # define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80",
          "1092: # define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81",
          "1093: # define DTLS_CTRL_GET_TIMEOUT           73",
          "1094: # define DTLS_CTRL_HANDLE_TIMEOUT        74",
          "1095: # define SSL_CTRL_GET_RI_SUPPORT                 76",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1098: # ifndef OPENSSL_NO_HEARTBEATS",
          "1099: #  define SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT               85",
          "1100: #  define SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING        86",
          "1101: #  define SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS    87",
          "1102: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2075: # define SSL_F_DO_SSL3_WRITE                              104",
          "2076: # define SSL_F_DTLS1_BUFFER_RECORD                        247",
          "2077: # define SSL_F_DTLS1_CHECK_TIMEOUT_NUM                    318",
          "2078: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
          "2079: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             424",
          "2080: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2088: # define SSL_F_DTLS1_HEARTBEAT                            305",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2499: # define SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE             1111",
          "2500: # define SSL_R_TLSV1_UNRECOGNIZED_NAME                    1112",
          "2501: # define SSL_R_TLSV1_UNSUPPORTED_EXTENSION                1110",
          "2502: # define SSL_R_TLS_ILLEGAL_EXPORTER_LABEL                 367",
          "2503: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
          "2504: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2513: # define SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT           365",
          "2514: # define SSL_R_TLS_HEARTBEAT_PENDING                      366",
          "",
          "---------------"
        ],
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: # define SSL3_RT_ALERT                   21",
          "205: # define SSL3_RT_HANDSHAKE               22",
          "206: # define SSL3_RT_APPLICATION_DATA        23",
          "209: # define TLS1_RT_CRYPTO                  0x1000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: # define DTLS1_RT_HEARTBEAT              24",
          "",
          "---------------"
        ],
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: # define TLSEXT_TYPE_use_srtp    14",
          "150: # define TLSEXT_TYPE_application_layer_protocol_negotiation 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: # define TLSEXT_TYPE_heartbeat   15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: # define SSL_CTX_set_tlsext_ticket_key_cb(ssl, cb) \\",
          "323: SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB,(void (*)(void))cb)",
          "326: # define TLS1_CK_PSK_WITH_RC4_128_SHA                    0x0300008A",
          "327: # define TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA               0x0300008B",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328: # ifndef OPENSSL_NO_HEARTBEATS",
          "329: #  define SSL_DTLSEXT_HB_ENABLED                   0x01",
          "330: #  define SSL_DTLSEXT_HB_DONT_SEND_REQUESTS        0x02",
          "331: #  define SSL_DTLSEXT_HB_DONT_RECV_REQUESTS        0x04",
          "332: #  define SSL_get_dtlsext_heartbeat_pending(ssl) \\",
          "333:         SSL_ctrl((ssl),SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING,0,NULL)",
          "334: #  define SSL_set_dtlsext_heartbeat_no_requests(ssl, arg) \\",
          "335:         SSL_ctrl((ssl),SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS,arg,NULL)",
          "337: #  if OPENSSL_API_COMPAT < 0x10100000L",
          "338: #   define SSL_CTRL_TLS_EXT_SEND_HEARTBEAT \\",
          "339:         SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT",
          "340: #   define SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING \\",
          "341:         SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING",
          "342: #   define SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS \\",
          "343:         SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS",
          "344: #   define SSL_TLSEXT_HB_ENABLED \\",
          "345:         SSL_DTLSEXT_HB_ENABLED",
          "346: #   define SSL_TLSEXT_HB_DONT_SEND_REQUESTS \\",
          "347:         SSL_DTLSEXT_HB_DONT_SEND_REQUESTS",
          "348: #   define SSL_TLSEXT_HB_DONT_RECV_REQUESTS \\",
          "349:         SSL_DTLSEXT_HB_DONT_RECV_REQUESTS",
          "350: #   define SSL_get_tlsext_heartbeat_pending(ssl) \\",
          "351:         SSL_get_dtlsext_heartbeat_pending(ssl)",
          "352: #   define SSL_set_tlsext_heartbeat_no_requests(ssl, arg) \\",
          "353:         SSL_set_dtlsext_heartbeat_no_requests(ssl, arg)",
          "354: #  endif",
          "355: # endif",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:         ret = 1;",
          "3048:         break;",
          "3050:     case SSL_CTRL_CHAIN:",
          "3051:         if (larg)",
          "3052:             return ssl_cert_set1_chain(s, NULL, (STACK_OF(X509) *)parg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3050: #ifndef OPENSSL_NO_HEARTBEATS",
          "3051:     case SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT:",
          "3052:     case SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING:",
          "3053:     case SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS:",
          "3054:         break;",
          "3055: #endif",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     {ERR_FUNC(SSL_F_DO_SSL3_WRITE), \"do_ssl3_write\"},",
          "31:     {ERR_FUNC(SSL_F_DTLS1_BUFFER_RECORD), \"dtls1_buffer_record\"},",
          "32:     {ERR_FUNC(SSL_F_DTLS1_CHECK_TIMEOUT_NUM), \"dtls1_check_timeout_num\"},",
          "33:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"dtls1_preprocess_fragment\"},",
          "34:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
          "35:      \"dtls1_process_buffered_records\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"dtls1_heartbeat\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:     {ERR_REASON(SSL_R_TLSV1_UNRECOGNIZED_NAME), \"tlsv1 unrecognized name\"},",
          "620:     {ERR_REASON(SSL_R_TLSV1_UNSUPPORTED_EXTENSION),",
          "621:      \"tlsv1 unsupported extension\"},",
          "622:     {ERR_REASON(SSL_R_TLS_ILLEGAL_EXPORTER_LABEL),",
          "623:      \"tls illegal exporter label\"},",
          "624:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:     {ERR_REASON(SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT),",
          "624:      \"peer does not accept heartbeats\"},",
          "625:     {ERR_REASON(SSL_R_TLS_HEARTBEAT_PENDING),",
          "626:      \"heartbeat request already pending\"},",
          "",
          "---------------"
        ],
        "ssl/t1_trce.c||ssl/t1_trce.c": [
          "File: ssl/t1_trce.c -> ssl/t1_trce.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         }",
          "711:         break;",
          "713:     case TLSEXT_TYPE_session_ticket:",
          "714:         if (extlen != 0)",
          "715:             ssl_print_hex(bio, indent + 4, \"ticket\", ext, extlen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     case TLSEXT_TYPE_heartbeat:",
          "714:         return 0;",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     # RFC3779",
          "102:     \"RFC3779\",",
          "103:     # TLS",
          "105:     # CMS",
          "106:     \"CMS\",",
          "107:                          \"OCSP\",",
          "",
          "[Removed Lines]",
          "104:     \"PSK\", \"SRP\",",
          "",
          "[Added Lines]",
          "104:     \"PSK\", \"SRP\", \"HEARTBEATS\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92760c21e62c6e5ef172fa110cf47a509cd50f2f",
      "candidate_info": {
        "commit_hash": "92760c21e62c6e5ef172fa110cf47a509cd50f2f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/92760c21e62c6e5ef172fa110cf47a509cd50f2f",
        "files": [
          "include/openssl/ssl.h",
          "ssl/s3_lib.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c",
          "ssl/tls13_enc.c",
          "test/tls13secretstest.c"
        ],
        "message": "Update state machine to be closer to TLS1.3\n\nThis is a major overhaul of the TLSv1.3 state machine. Currently it still\nlooks like TLSv1.2. This commit changes things around so that it starts\nto look a bit less like TLSv1.2 and bit more like TLSv1.3.\n\nAfter this commit we have:\n\nClientHello\n+ key_share          ---->\n                           ServerHello\n                           +key_share\n                           {CertificateRequest*}\n                           {Certificate*}\n                           {CertificateStatus*}\n                     <---- {Finished}\n{Certificate*}\n{CertificateVerify*}\n{Finished}           ---->\n[ApplicationData]    <---> [Application Data]\n\nKey differences between this intermediate position and the final TLSv1.3\nposition are:\n- No EncryptedExtensions message yet\n- No server side CertificateVerify message yet\n- CertificateStatus still exists as a separate message\n- A number of the messages are still in the TLSv1.2 format\n- Still running on the TLSv1.2 record layer\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "ssl/tls13_enc.c||ssl/tls13_enc.c",
          "test/tls13secretstest.c||test/tls13secretstest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2242: # define SSL_F_SSL_WRITE_EX                               433",
          "2243: # define SSL_F_STATE_MACHINE                              353",
          "2244: # define SSL_F_TLS12_CHECK_PEER_SIGALG                    333",
          "2246: # define SSL_F_TLS1_CHANGE_CIPHER_STATE                   209",
          "2247: # define SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS            341",
          "2248: # define SSL_F_TLS1_ENC                                   401",
          "",
          "[Removed Lines]",
          "2245: # define SSL_F_TLS13_CHANGE_CIPHER_STATE                  435",
          "",
          "[Added Lines]",
          "2245: # define SSL_F_TLS13_CHANGE_CIPHER_STATE                  440",
          "2246: # define SSL_F_TLS13_SETUP_KEY_BLOCK                      441",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2336: # define SSL_R_BIO_NOT_SET                                128",
          "2337: # define SSL_R_BLOCK_CIPHER_PAD_IS_WRONG                  129",
          "2338: # define SSL_R_BN_LIB                                     130",
          "2339: # define SSL_R_CA_DN_LENGTH_MISMATCH                      131",
          "2340: # define SSL_R_CA_KEY_TOO_SMALL                           397",
          "2341: # define SSL_R_CA_MD_TOO_WEAK                             398",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2340: # define SSL_R_CANNOT_CHANGE_CIPHER                       109",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4067: }",
          "4068: #endif",
          "4072: {",
          "4073:     int rv = 0;",
          "4074:     unsigned char *pms = NULL;",
          "",
          "[Removed Lines]",
          "4071: int ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey, int genmaster)",
          "",
          "[Added Lines]",
          "4071: int ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey, int gensecret)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4093:     if (EVP_PKEY_derive(pctx, pms, &pmslen) <= 0)",
          "4094:         goto err;",
          "4099:         pms = NULL;",
          "4100:     } else {",
          "",
          "[Removed Lines]",
          "4096:     if (genmaster) {",
          "4098:         rv = ssl_generate_master_secret(s, pms, pmslen, 1);",
          "",
          "[Added Lines]",
          "4096:     if (gensecret) {",
          "4097:         if (SSL_IS_TLS13(s)) {",
          "4103:             rv = tls13_generate_early_secret(s, NULL, 0)",
          "4104:                  && tls13_generate_handshake_secret(s, pms, pmslen);",
          "4105:             OPENSSL_free(pms);",
          "4106:         } else {",
          "4108:             rv = ssl_generate_master_secret(s, pms, pmslen, 1);",
          "4109:         }",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     {ERR_FUNC(SSL_F_STATE_MACHINE), \"state_machine\"},",
          "240:     {ERR_FUNC(SSL_F_TLS12_CHECK_PEER_SIGALG), \"tls12_check_peer_sigalg\"},",
          "241:     {ERR_FUNC(SSL_F_TLS13_CHANGE_CIPHER_STATE), \"tls13_change_cipher_state\"},",
          "242:     {ERR_FUNC(SSL_F_TLS1_CHANGE_CIPHER_STATE), \"tls1_change_cipher_state\"},",
          "243:     {ERR_FUNC(SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS),",
          "244:      \"tls1_check_duplicate_extensions\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     {ERR_FUNC(SSL_F_TLS13_SETUP_KEY_BLOCK), \"tls13_setup_key_block\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:     {ERR_REASON(SSL_R_BLOCK_CIPHER_PAD_IS_WRONG),",
          "369:      \"block cipher pad is wrong\"},",
          "370:     {ERR_REASON(SSL_R_BN_LIB), \"bn lib\"},",
          "371:     {ERR_REASON(SSL_R_CA_DN_LENGTH_MISMATCH), \"ca dn length mismatch\"},",
          "372:     {ERR_REASON(SSL_R_CA_KEY_TOO_SMALL), \"ca key too small\"},",
          "373:     {ERR_REASON(SSL_R_CA_MD_TOO_WEAK), \"ca md too weak\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:     {ERR_REASON(SSL_R_CANNOT_CHANGE_CIPHER), \"cannot change cipher\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2003: __owur int tls1_generate_master_secret(SSL *s, unsigned char *out,",
          "2004:                                        unsigned char *p, size_t len,",
          "2005:                                        size_t *secret_size);",
          "2006: __owur int tls13_change_cipher_state(SSL *s, int which);",
          "2007: __owur int tls13_derive_secret(SSL *s, const unsigned char *insecret,",
          "2008:                                const unsigned char *label, size_t labellen,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2006: __owur int tls13_setup_key_block(SSL *s);",
          "2007: __owur size_t tls13_final_finish_mac(SSL *s, const char *str, size_t slen,",
          "2008:                                      unsigned char *p);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     case TLS_ST_CR_SRVR_HELLO:",
          "138:         if (s->hit) {",
          "141:                 return 1;",
          "142:             }",
          "143:         } else {",
          "145:                 st->hand_state = TLS_ST_CR_CERT;",
          "146:                 return 1;",
          "147:             }",
          "148:         }",
          "149:         break;",
          "151:     case TLS_ST_CR_CERT:",
          "",
          "[Removed Lines]",
          "139:             if (mt == SSL3_MT_CHANGE_CIPHER_SPEC) {",
          "140:                 st->hand_state = TLS_ST_CR_CHANGE;",
          "144:             if (mt == SSL3_MT_CERTIFICATE) {",
          "",
          "[Added Lines]",
          "139:             if (mt == SSL3_MT_FINISHED) {",
          "140:                 st->hand_state = TLS_ST_CR_FINISHED;",
          "144:             if (mt == SSL3_MT_CERTIFICATE_REQUEST) {",
          "145:                 st->hand_state = TLS_ST_CR_CERT_REQ;",
          "146:                 return 1;",
          "147:             } else if (mt == SSL3_MT_CERTIFICATE) {",
          "154:     case TLS_ST_CR_CERT_REQ:",
          "155:         if (mt == SSL3_MT_CERTIFICATE) {",
          "156:             st->hand_state = TLS_ST_CR_CERT;",
          "157:             return 1;",
          "158:         }",
          "159:         break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:     case TLS_ST_CR_CERT_STATUS:",
          "187:         if (mt == SSL3_MT_FINISHED) {",
          "188:             st->hand_state = TLS_ST_CR_FINISHED;",
          "189:             return 1;",
          "190:         }",
          "191:         break;",
          "192:     }",
          "196:     ssl3_send_alert(s, SSL3_AL_FATAL, SSL3_AD_UNEXPECTED_MESSAGE);",
          "197:     SSLerr(SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION,",
          "",
          "[Removed Lines]",
          "163:         if (mt == SSL3_MT_CERTIFICATE_REQUEST) {",
          "164:             if (cert_req_allowed(s)) {",
          "165:                 st->hand_state = TLS_ST_CR_CERT_REQ;",
          "166:                 return 1;",
          "167:             }",
          "168:             goto err;",
          "169:         }",
          "172:     case TLS_ST_CR_CERT_REQ:",
          "173:         if (mt == SSL3_MT_SERVER_DONE) {",
          "174:             st->hand_state = TLS_ST_CR_SRVR_DONE;",
          "175:             return 1;",
          "176:         }",
          "177:         break;",
          "179:     case TLS_ST_CW_FINISHED:",
          "180:         if (mt == SSL3_MT_CHANGE_CIPHER_SPEC) {",
          "181:             st->hand_state = TLS_ST_CR_CHANGE;",
          "182:             return 1;",
          "183:         }",
          "184:         break;",
          "186:     case TLS_ST_CR_CHANGE:",
          "194:  err:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:         return WRITE_TRAN_ERROR;",
          "397:         st->hand_state = (s->s3->tmp.cert_req != 0) ? TLS_ST_CW_CERT",
          "399:         return WRITE_TRAN_CONTINUE;",
          "401:     case TLS_ST_CW_CERT:",
          "403:         st->hand_state = (s->s3->tmp.cert_req == 1) ? TLS_ST_CW_CERT_VRFY",
          "405:         return WRITE_TRAN_CONTINUE;",
          "407:     case TLS_ST_CW_CERT_VRFY:",
          "412:         st->hand_state = TLS_ST_CW_FINISHED;",
          "413:         return WRITE_TRAN_CONTINUE;",
          "415:     case TLS_ST_CW_FINISHED:",
          "428:         st->hand_state = TLS_ST_OK;",
          "429:         ossl_statem_set_in_init(s, 0);",
          "430:         return WRITE_TRAN_CONTINUE;",
          "",
          "[Removed Lines]",
          "396:     case TLS_ST_CR_SRVR_DONE:",
          "398:                                                     : TLS_ST_CW_CHANGE;",
          "404:                                                     : TLS_ST_CW_CHANGE;",
          "408:         st->hand_state = TLS_ST_CW_CHANGE;",
          "409:         return WRITE_TRAN_CONTINUE;",
          "411:     case TLS_ST_CW_CHANGE:",
          "416:         if (s->hit) {",
          "417:             st->hand_state = TLS_ST_OK;",
          "418:             ossl_statem_set_in_init(s, 0);",
          "419:             return WRITE_TRAN_CONTINUE;",
          "420:         }",
          "421:         return WRITE_TRAN_FINISHED;",
          "423:     case TLS_ST_CR_FINISHED:",
          "424:         if (s->hit) {",
          "425:             st->hand_state = TLS_ST_CW_CHANGE;",
          "426:             return WRITE_TRAN_CONTINUE;",
          "427:         }",
          "",
          "[Added Lines]",
          "382:     case TLS_ST_CR_FINISHED:",
          "384:                                                     : TLS_ST_CW_FINISHED;",
          "390:                                                     : TLS_ST_CW_FINISHED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "666: #endif",
          "667:         if (statem_flush(s) != 1)",
          "668:             return WORK_MORE_B;",
          "669:         break;",
          "670:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640:         if (SSL_IS_TLS13(s)) {",
          "641:             if (!s->method->ssl3_enc->change_cipher_state(s,",
          "642:                         SSL3_CC_APPLICATION | SSL3_CHANGE_CIPHER_CLIENT_WRITE))",
          "643:             return WORK_ERROR;",
          "644:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1343:     }",
          "1344: #endif",
          "1346:     return MSG_PROCESS_CONTINUE_READING;",
          "1347:  f_err:",
          "1348:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1326:     if (SSL_IS_TLS13(s)",
          "1327:             && (!s->method->ssl3_enc->setup_key_block(s)",
          "1328:                 || !s->method->ssl3_enc->change_cipher_state(s,",
          "1329:                     SSL3_CC_HANDSHAKE | SSL3_CHANGE_CIPHER_CLIENT_WRITE)",
          "1330:                 || !s->method->ssl3_enc->change_cipher_state(s,",
          "1331:                     SSL3_CC_HANDSHAKE | SSL3_CHANGE_CIPHER_CLIENT_READ))) {",
          "1332:         al = SSL_AD_INTERNAL_ERROR;",
          "1333:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_CANNOT_CHANGE_CIPHER);",
          "1334:         goto f_err;",
          "1335:     }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:     size_t md_len;",
          "334:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "335:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_GOT_A_FIN_BEFORE_A_CCS);",
          "336:         goto f_err;",
          "",
          "[Removed Lines]",
          "333:     if (!s->s3->change_cipher_spec) {",
          "",
          "[Added Lines]",
          "333:     if (!SSL_IS_TLS13(s) && !s->s3->change_cipher_spec) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:         s->s3->previous_server_finished_len = md_len;",
          "368:     }",
          "370:     return MSG_PROCESS_FINISHED_READING;",
          "371:  f_err:",
          "372:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     if (SSL_IS_TLS13(s)) {",
          "372:         if (s->server) {",
          "373:             if (!s->method->ssl3_enc->change_cipher_state(s,",
          "374:                     SSL3_CC_APPLICATION | SSL3_CHANGE_CIPHER_SERVER_READ)) {",
          "375:                 al = SSL_AD_INTERNAL_ERROR;",
          "376:                 SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_CANNOT_CHANGE_CIPHER);",
          "377:                 goto f_err;",
          "378:             }",
          "379:         } else {",
          "380:             if (!s->method->ssl3_enc->generate_master_secret(s,",
          "381:                     s->session->master_key, s->handshake_secret, 0,",
          "382:                     &s->session->master_key_length)) {",
          "383:                 al = SSL_AD_INTERNAL_ERROR;",
          "384:                 SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_CANNOT_CHANGE_CIPHER);",
          "385:                 goto f_err;",
          "386:             }",
          "387:             if (!s->method->ssl3_enc->change_cipher_state(s,",
          "388:                     SSL3_CC_APPLICATION | SSL3_CHANGE_CIPHER_CLIENT_READ)) {",
          "389:                 al = SSL_AD_INTERNAL_ERROR;",
          "390:                 SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_CANNOT_CHANGE_CIPHER);",
          "391:                 goto f_err;",
          "392:             }",
          "393:         }",
          "394:     }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     default:",
          "95:         break;",
          "98:         if (s->s3->tmp.cert_request) {",
          "99:             if (mt == SSL3_MT_CERTIFICATE) {",
          "100:                 st->hand_state = TLS_ST_SR_CERT;",
          "101:                 return 1;",
          "102:             }",
          "103:         } else {",
          "106:                 return 1;",
          "107:             }",
          "108:         }",
          "",
          "[Removed Lines]",
          "97:     case TLS_ST_SW_SRVR_DONE:",
          "104:             if (mt == SSL3_MT_CHANGE_CIPHER_SPEC) {",
          "105:                 st->hand_state = TLS_ST_SR_CHANGE;",
          "",
          "[Added Lines]",
          "97:     case TLS_ST_SW_FINISHED:",
          "104:             if (mt == SSL3_MT_FINISHED) {",
          "105:                 st->hand_state = TLS_ST_SR_FINISHED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     case TLS_ST_SR_CERT:",
          "112:         if (s->session->peer == NULL) {",
          "115:                 return 1;",
          "116:             }",
          "117:         } else {",
          "",
          "[Removed Lines]",
          "113:             if (mt == SSL3_MT_CHANGE_CIPHER_SPEC) {",
          "114:                 st->hand_state = TLS_ST_SR_CHANGE;",
          "",
          "[Added Lines]",
          "113:             if (mt == SSL3_MT_FINISHED) {",
          "114:                 st->hand_state = TLS_ST_SR_FINISHED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:         break;",
          "125:     case TLS_ST_SR_CERT_VRFY:",
          "133:         if (mt == SSL3_MT_FINISHED) {",
          "134:             st->hand_state = TLS_ST_SR_FINISHED;",
          "135:             return 1;",
          "136:         }",
          "137:         break;",
          "145:     }",
          "",
          "[Removed Lines]",
          "126:         if (mt == SSL3_MT_CHANGE_CIPHER_SPEC) {",
          "127:             st->hand_state = TLS_ST_SR_CHANGE;",
          "128:             return 1;",
          "129:         }",
          "130:         break;",
          "132:     case TLS_ST_SR_CHANGE:",
          "139:     case TLS_ST_SW_FINISHED:",
          "140:         if (mt == SSL3_MT_CHANGE_CIPHER_SPEC) {",
          "141:             st->hand_state = TLS_ST_SR_CHANGE;",
          "142:             return 1;",
          "143:         }",
          "144:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:     case TLS_ST_SW_SRVR_HELLO:",
          "421:         if (s->hit)",
          "423:         else",
          "424:             st->hand_state = TLS_ST_SW_CERT;",
          "426:         return WRITE_TRAN_CONTINUE;",
          "442:     case TLS_ST_SW_CERT_REQ:",
          "444:         return WRITE_TRAN_CONTINUE;",
          "457:         return WRITE_TRAN_CONTINUE;",
          "461:         st->hand_state = TLS_ST_SW_FINISHED;",
          "462:         return WRITE_TRAN_CONTINUE;",
          "464:     case TLS_ST_SW_FINISHED:",
          "468:         st->hand_state = TLS_ST_OK;",
          "469:         ossl_statem_set_in_init(s, 0);",
          "470:         return WRITE_TRAN_CONTINUE;",
          "",
          "[Removed Lines]",
          "422:             st->hand_state = TLS_ST_SW_CHANGE;",
          "428:     case TLS_ST_SW_CERT:",
          "429:         if (s->tlsext_status_expected) {",
          "430:             st->hand_state = TLS_ST_SW_CERT_STATUS;",
          "431:             return WRITE_TRAN_CONTINUE;",
          "432:         }",
          "435:     case TLS_ST_SW_CERT_STATUS:",
          "436:         if (send_certificate_request(s)) {",
          "437:             st->hand_state = TLS_ST_SW_CERT_REQ;",
          "438:             return WRITE_TRAN_CONTINUE;",
          "439:         }",
          "443:         st->hand_state = TLS_ST_SW_SRVR_DONE;",
          "446:     case TLS_ST_SW_SRVR_DONE:",
          "447:         return WRITE_TRAN_FINISHED;",
          "449:     case TLS_ST_SR_FINISHED:",
          "450:         if (s->hit) {",
          "451:             st->hand_state = TLS_ST_OK;",
          "452:             ossl_statem_set_in_init(s, 0);",
          "453:             return WRITE_TRAN_CONTINUE;",
          "454:         }",
          "455:         st->hand_state = TLS_ST_SW_CHANGE;",
          "460:     case TLS_ST_SW_CHANGE:",
          "465:         if (s->hit)",
          "466:             return WRITE_TRAN_FINISHED;",
          "",
          "[Added Lines]",
          "408:             st->hand_state = TLS_ST_SW_FINISHED;",
          "409:         else if (send_certificate_request(s))",
          "410:             st->hand_state = TLS_ST_SW_CERT_REQ;",
          "417:         st->hand_state = TLS_ST_SW_CERT;",
          "420:     case TLS_ST_SW_CERT:",
          "421:         if (s->tlsext_status_expected)",
          "422:             st->hand_state = TLS_ST_SW_CERT_STATUS;",
          "423:         else",
          "424:             st->hand_state = TLS_ST_SW_FINISHED;",
          "427:     case TLS_ST_SW_CERT_STATUS:",
          "432:         return WRITE_TRAN_FINISHED;",
          "434:     case TLS_ST_SR_FINISHED:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:                      sizeof(sctpauthkey), sctpauthkey);",
          "741:         }",
          "742: #endif",
          "743:         break;",
          "745:     case TLS_ST_SW_CHANGE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716:         if (SSL_IS_TLS13(s)) {",
          "717:             if (!s->method->ssl3_enc->setup_key_block(s)",
          "718:                 || !s->method->ssl3_enc->change_cipher_state(s,",
          "719:                         SSL3_CC_HANDSHAKE | SSL3_CHANGE_CIPHER_SERVER_WRITE)",
          "720:                 || !s->method->ssl3_enc->change_cipher_state(s,",
          "721:                         SSL3_CC_HANDSHAKE |SSL3_CHANGE_CIPHER_SERVER_READ))",
          "722:             return WORK_ERROR;",
          "723:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "782:                      0, NULL);",
          "783:         }",
          "784: #endif",
          "785:         break;",
          "786:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:         if (SSL_IS_TLS13(s)) {",
          "767:             if (!s->method->ssl3_enc->generate_master_secret(s,",
          "768:                         s->session->master_key, s->handshake_secret, 0,",
          "769:                         &s->session->master_key_length)",
          "770:                 || !s->method->ssl3_enc->change_cipher_state(s,",
          "771:                         SSL3_CC_APPLICATION | SSL3_CHANGE_CIPHER_SERVER_WRITE))",
          "772:             return WORK_ERROR;",
          "773:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1001: #endif",
          "1002:         return WORK_FINISHED_CONTINUE;",
          "1003:     }",
          "1005: }",
          "1007: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993:     return WORK_FINISHED_CONTINUE;",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: SSL3_ENC_METHOD const TLSv1_3_enc_data = {",
          "82:     tls1_enc,",
          "83:     tls1_mac,",
          "88:     TLS_MD_CLIENT_FINISH_CONST, TLS_MD_CLIENT_FINISH_CONST_SIZE,",
          "89:     TLS_MD_SERVER_FINISH_CONST, TLS_MD_SERVER_FINISH_CONST_SIZE,",
          "90:     tls1_alert_code,",
          "",
          "[Removed Lines]",
          "84:     tls1_setup_key_block,",
          "85:     tls1_generate_master_secret,",
          "86:     tls1_change_cipher_state,",
          "87:     tls1_final_finish_mac,",
          "",
          "[Added Lines]",
          "84:     tls13_setup_key_block,",
          "85:     tls13_generate_master_secret,",
          "86:     tls13_change_cipher_state,",
          "87:     tls13_final_finish_mac,",
          "",
          "---------------"
        ],
        "ssl/tls13_enc.c||ssl/tls13_enc.c": [
          "File: ssl/tls13_enc.c -> ssl/tls13_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:     return tls13_generate_secret(s, prev, NULL, 0, out);",
          "215: }",
          "217: const unsigned char client_handshake_traffic[] =",
          "218:     \"client handshake traffic secret\";",
          "219: const unsigned char client_application_traffic[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: size_t tls13_final_finish_mac(SSL *s, const char *str, size_t slen,",
          "223:                              unsigned char *out)",
          "224: {",
          "225:     size_t hashlen;",
          "226:     const EVP_MD *md;",
          "232:     md = ssl_handshake_md(s);",
          "233:     hashlen = EVP_MD_size(md);",
          "234:     memset(out, 0, hashlen);",
          "236:     return hashlen;",
          "237: }",
          "245: int tls13_setup_key_block(SSL *s)",
          "246: {",
          "247:     const EVP_CIPHER *c;",
          "248:     const EVP_MD *hash;",
          "249:     int mac_type = NID_undef;",
          "251:     s->session->cipher = s->s3->tmp.new_cipher;",
          "252:     if (!ssl_cipher_get_evp",
          "253:         (s->session, &c, &hash, &mac_type, NULL, NULL, 0)) {",
          "254:         SSLerr(SSL_F_TLS13_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
          "255:         return 0;",
          "256:     }",
          "258:     s->s3->tmp.new_sym_enc = c;",
          "259:     s->s3->tmp.new_hash = hash;",
          "261:     return 1;",
          "262: }",
          "",
          "---------------"
        ],
        "test/tls13secretstest.c||test/tls13secretstest.c": [
          "File: test/tls13secretstest.c -> test/tls13secretstest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: {",
          "171: }",
          "175: static int test_secret(SSL *s, unsigned char *prk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,",
          "174:                        const EVP_MD **md, int *mac_pkey_type,",
          "175:                        size_t *mac_secret_size, SSL_COMP **comp, int use_etm)",
          "177: {",
          "178:     return 0;",
          "179: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22646a075e75991b4e8f5d67171e45a6aead5b48",
      "candidate_info": {
        "commit_hash": "22646a075e75991b4e8f5d67171e45a6aead5b48",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/22646a075e75991b4e8f5d67171e45a6aead5b48",
        "files": [
          "ssl/d1_pkt.c",
          "ssl/s3_pkt.c",
          "ssl/ssl.h",
          "ssl/ssl_locl.h"
        ],
        "message": "Don't allow too many consecutive warning alerts\n\nCertain warning alerts are ignored if they are received. This can mean that\nno progress will be made if one peer continually sends those warning alerts.\nImplement a count so that we abort the connection if we receive too many.\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:         goto start;",
          "952:     }",
          "956:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:     if (rr->type != SSL3_RT_ALERT && rr->length != 0)",
          "959:         s->cert->alert_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:         if (alert_level == SSL3_AL_WARNING) {",
          "1219:             s->s3->warn_alert = alert_descr;",
          "1220:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
          "1221: #ifndef OPENSSL_NO_SCTP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1228:             s->cert->alert_count++;",
          "1229:             if (s->cert->alert_count == MAX_WARN_ALERT_COUNT) {",
          "1230:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1231:                 SSLerr(SSL_F_DTLS1_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
          "1232:                 goto f_err;",
          "1233:             }",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1229:             return (ret);",
          "1230:     }",
          "1234:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1236:     if (rr->type != SSL3_RT_ALERT && rr->length != 0)",
          "1237:         s->cert->alert_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1444:         if (alert_level == SSL3_AL_WARNING) {",
          "1445:             s->s3->warn_alert = alert_descr;",
          "1446:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
          "1447:                 s->shutdown |= SSL_RECEIVED_SHUTDOWN;",
          "1448:                 return (0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1454:             s->cert->alert_count++;",
          "1455:             if (s->cert->alert_count == MAX_WARN_ALERT_COUNT) {",
          "1456:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1457:                 SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
          "1458:                 goto f_err;",
          "1459:             }",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3107: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
          "3108: # define SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST 233",
          "3109: # define SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG    234",
          "3110: # define SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER            235",
          "3111: # define SSL_R_UNABLE_TO_DECODE_DH_CERTS                  236",
          "3112: # define SSL_R_UNABLE_TO_DECODE_ECDH_CERTS                313",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3110: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "592: # define SSL_EXT_FLAG_SENT       0x2",
          "594: typedef struct {",
          "595:     custom_ext_method *meths;",
          "596:     size_t meths_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594: # define MAX_WARN_ALERT_COUNT    5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "699:     unsigned int alpn_proposed_len;",
          "701: } CERT;",
          "703: typedef struct sess_cert_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:     unsigned int alert_count;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1f97699cb5e01f1b7e37f4c92df1a9bce6772f5",
      "candidate_info": {
        "commit_hash": "f1f97699cb5e01f1b7e37f4c92df1a9bce6772f5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f1f97699cb5e01f1b7e37f4c92df1a9bce6772f5",
        "files": [
          "ssl/ssl_err.c"
        ],
        "message": "Add missing error string for SSL_R_TOO_MANY_WARN_ALERTS\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "753:      \"tls illegal exporter label\"},",
          "754:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
          "755:      \"tls invalid ecpointformat list\"},",
          "756:     {ERR_REASON(SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST),",
          "757:      \"tls peer did not respond with certificate list\"},",
          "758:     {ERR_REASON(SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756:     {ERR_REASON(SSL_R_TOO_MANY_WARN_ALERTS), \"too many warn alerts\"},",
          "",
          "---------------"
        ]
      }
    }
  ]
}