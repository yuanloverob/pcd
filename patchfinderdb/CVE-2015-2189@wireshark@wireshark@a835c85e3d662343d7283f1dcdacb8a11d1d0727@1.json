{
  "cve_id": "CVE-2015-2189",
  "cve_desc": "Off-by-one error in the pcapng_read function in wiretap/pcapng.c in the pcapng file parser in Wireshark 1.10.x before 1.10.13 and 1.12.x before 1.12.4 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via an invalid Interface Statistics Block (ISB) interface ID in a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "a835c85e3d662343d7283f1dcdacb8a11d1d0727",
  "patch_info": {
    "commit_hash": "a835c85e3d662343d7283f1dcdacb8a11d1d0727",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/a835c85e3d662343d7283f1dcdacb8a11d1d0727",
    "files": [
      "wiretap/pcapng.c"
    ],
    "message": "Pcapng: Don't fetch past the end of a GArray.\n\nDue to an off-by-one error an invalid ISB interface ID could make us\nfetch past the end of a GArray. Found using American Fuzzy Lop.\n\nBug: 10895\nChange-Id: I7d4049ad7a386ae7e8013b8e741d54a31f353f1f\nReviewed-on: https://code.wireshark.org/review/6798\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
    "before_after_code_files": [
      "wiretap/pcapng.c||wiretap/pcapng.c"
    ]
  },
  "patch_diff": {
    "wiretap/pcapng.c||wiretap/pcapng.c": [
      "File: wiretap/pcapng.c -> wiretap/pcapng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2470:             case(BLOCK_TYPE_ISB):",
      "2472:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
      "2475:                 } else {",
      "2477:                     wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);",
      "",
      "[Removed Lines]",
      "2473:                 if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
      "2474:                     pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
      "",
      "[Added Lines]",
      "2473:                 if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {",
      "2474:                     pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces\", wblock.data.if_stats.interface_id);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2509: got_packet:",
      "2514:     return TRUE;",
      "2515: }",
      "",
      "[Removed Lines]",
      "2512:     pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset + bytes_read);",
      "",
      "[Added Lines]",
      "2512:     pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0513b29b8b61dba15b7f8c23d9304938206e71fb",
      "candidate_info": {
        "commit_hash": "0513b29b8b61dba15b7f8c23d9304938206e71fb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0513b29b8b61dba15b7f8c23d9304938206e71fb",
        "files": [
          "cfile.c",
          "cfile.h",
          "epan/epan-int.h",
          "epan/epan.c",
          "epan/epan.h",
          "file.c",
          "wiretap/pcapng.c",
          "wiretap/wtap.c",
          "wiretap/wtap.h"
        ],
        "message": "Revert \"Allow pcapng interface options to be available to dissectors.\" This patch causes Wireshark/tshark to segfault if the file is reread(open a file and press reload). The test suite also fails on 2.1.1 Step: Exit status for existing file: \"/home/wireshark/builders/trunk/sol10sparc/build/test/captures/dhcp.pcap\" must be 0/home/wireshark/builders/trunk/sol10sparc/build/test/suite-clopts.sh: line 149:  6646 Segmentation Fault      (core dumped) $TSHARK -r \"${CAPTURE_DIR}dhcp.pcap\" > ./testout.txt 2>&1\n\nOSX build bot chokes on\npcapng.c: In function 'pcapng_destroy_option_value':\npcapng.c:377: warning: implicit declaration of function 'g_byte_array_unref'\npcapng.c:379: warning: implicit declaration of function 'g_array_unref'\npcapng.c: In function 'pcapng_collect_block_option':\npcapng.c:419: warning: implicit declaration of function 'g_byte_array_new_take'\npcapng.c:419: warning: initialization makes pointer from integer without a cast\n\nthese functions are glib 2.22\nThis reverts commit 7b13a3b0f6a5617e0e352f87cc5a20afea226aa8.\n\nChange-Id: Ia82fdb2d08287bc2cd2841e1e941ae68cbc2e009\nReviewed-on: https://code.wireshark.org/review/749\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "cfile.c||cfile.c",
          "cfile.h||cfile.h",
          "epan/epan-int.h||epan/epan-int.h",
          "epan/epan.c||epan/epan.c",
          "epan/epan.h||epan/epan.h",
          "file.c||file.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "cfile.c||cfile.c": [
          "File: cfile.c -> cfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"cfile.h\"",
          "34: {",
          "35:   capture_file *cf = (capture_file *) data;",
          "36:   wtapng_iface_descriptions_t *idb_info;",
          "",
          "[Removed Lines]",
          "32: static const wtapng_if_descr_t *",
          "33: cap_file_get_interface_desc(void *data, guint32 interface_id)",
          "",
          "[Added Lines]",
          "32: const char *",
          "33: cap_file_get_interface_name(void *data, guint32 interface_id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     wtapng_if_descr = &g_array_index(idb_info->interface_data, wtapng_if_descr_t, interface_id);",
          "44:   g_free(idb_info);",
          "53:   if (wtapng_if_descr) {",
          "54:     if (wtapng_if_descr->if_name)",
          "",
          "[Removed Lines]",
          "45:   return wtapng_if_descr;",
          "46: }",
          "48: const char *",
          "49: cap_file_get_interface_name(void *data, guint32 interface_id)",
          "50: {",
          "51:   const wtapng_if_descr_t *wtapng_if_descr = cap_file_get_interface_desc(data, interface_id);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:   return \"unknown\";",
          "60: }",
          "74: void",
          "75: cap_file_init(capture_file *cf)",
          "76: {",
          "",
          "[Removed Lines]",
          "62: const GArray *",
          "63: cap_file_get_interface_option(void *data, guint32 interface_id, guint16 option_code)",
          "64: {",
          "65:   const wtapng_if_descr_t *wtapng_if_descr = cap_file_get_interface_desc(data, interface_id);",
          "67:   if (wtapng_if_descr && wtapng_if_descr->if_options) {",
          "68:     gint code = (gint) option_code;",
          "69:     return (const GArray *) g_hash_table_lookup(wtapng_if_descr->if_options, &code);",
          "70:   }",
          "71:   return NULL;",
          "72: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cfile.h||cfile.h": [
          "File: cfile.h -> cfile.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: extern const char *cap_file_get_interface_name(void *data, guint32 interface_id);",
          "138: #ifdef __cplusplus",
          "139: }",
          "",
          "[Removed Lines]",
          "136: extern const GArray *cap_file_get_interface_option(void *data, guint32 interface_id, guint16 option_code);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/epan-int.h||epan/epan-int.h": [
          "File: epan/epan-int.h -> epan/epan-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  const nstime_t *(*get_frame_ts)(void *data, guint32 frame_num);",
          "32:  const char *(*get_interface_name)(void *data, guint32 interface_id);",
          "33:  const char *(*get_user_comment)(void *data, const frame_data *fd);",
          "36: };",
          "38: #endif",
          "",
          "[Removed Lines]",
          "34:  const GArray *(*get_interface_option)(void *data, guint32 interface_id,",
          "35:            guint16 option_code);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/epan.c||epan/epan.c": [
          "File: epan/epan.c -> epan/epan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:  return NULL;",
          "179: }",
          "190: const nstime_t *",
          "191: epan_get_frame_ts(const epan_t *session, guint32 frame_num)",
          "192: {",
          "",
          "[Removed Lines]",
          "181: const GArray *",
          "182: epan_get_interface_option(const epan_t *session, guint32 interface_id, guint16 option_code)",
          "183: {",
          "184:  if (session->get_interface_option)",
          "185:   return session->get_interface_option(session->data, interface_id, option_code);",
          "187:  return NULL;",
          "188: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/epan.h||epan/epan.h": [
          "File: epan/epan.h -> epan/epan.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: const char *epan_get_interface_name(const epan_t *session, guint32 interface_id);",
          "140: const nstime_t *epan_get_frame_ts(const epan_t *session, guint32 frame_num);",
          "142: WS_DLL_PUBLIC void epan_free(epan_t *session);",
          "",
          "[Removed Lines]",
          "138: const GArray *epan_get_interface_option(const epan_t *session, guint32 interface_id, guint16 option_code);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "file.c||file.c": [
          "File: file.c -> file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:   epan->get_frame_ts = ws_get_frame_ts;",
          "330:   epan->get_interface_name = cap_file_get_interface_name;",
          "331:   epan->get_user_comment = ws_get_user_comment;",
          "334:   return epan;",
          "335: }",
          "",
          "[Removed Lines]",
          "332:   epan->get_interface_option = cap_file_get_interface_option;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:                 wtapng_if_stats_t       if_stats;",
          "345:         } data;",
          "",
          "[Removed Lines]",
          "348:         GHashTable * pcapng_options;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:         int *file_encap;",
          "361: } wtapng_block_t;",
          "427: typedef struct interface_data_s {",
          "428:         int wtap_encap;",
          "",
          "[Removed Lines]",
          "363: static void",
          "364: pcapng_destroy_option_key(gpointer data)",
          "365: {",
          "366:         g_free(data);",
          "367: }",
          "369: static void",
          "370: pcapng_destroy_option_value(gpointer data)",
          "371: {",
          "372:         GArray * pval = (GArray *) data;",
          "373:         if (pval) {",
          "374:                 guint i;",
          "375:                 for(i=0; i<pval->len; i++) {",
          "376:                         GByteArray * element = g_array_index(pval, GByteArray *, i);",
          "377:                         g_byte_array_unref(element);",
          "378:                 }",
          "379:                 g_array_unref(pval);",
          "380:         }",
          "381: }",
          "383: static void",
          "384: pcapng_init_block_options(wtapng_block_t *wblock)",
          "385: {",
          "386:         wblock->pcapng_options = g_hash_table_new_full(g_int_hash,",
          "387:              g_int_equal,",
          "388:              pcapng_destroy_option_key,",
          "389:              pcapng_destroy_option_value);",
          "390: }",
          "392: static void",
          "393: pcapng_unref_block_options(wtapng_block_t *wblock)",
          "394: {",
          "395:         if (wblock->pcapng_options) {",
          "396:                 g_hash_table_destroy(wblock->pcapng_options);",
          "397:                 wblock->pcapng_options = NULL;",
          "398:  }",
          "399: }",
          "401: static void",
          "402: pcapng_collect_block_option(wtapng_block_t *wblock, guint16 code,",
          "403:        const guint8 *data, gsize len)",
          "404: {",
          "405:         if (wblock->pcapng_options) {",
          "406:                 gint tempkey = (gint) code;",
          "407:                 GArray * pval = (GArray *) g_hash_table_lookup(wblock->pcapng_options, &tempkey);",
          "408:                 if(!pval) {",
          "410:                            new key and new array for its first value,",
          "412:                         gpointer pkey = g_try_malloc(sizeof(gint));",
          "413:                         if (pkey) {",
          "414:                             pval = g_array_new(FALSE, TRUE, sizeof(GByteArray *));",
          "415:                             g_hash_table_insert(wblock->pcapng_options, pkey, pval);",
          "416:                         }",
          "417:                 }",
          "418:                 if (pval) {",
          "419:                         GByteArray * optionbuf = g_byte_array_new_take(g_strndup(data, len), len);",
          "420:                         g_array_append_val(pval, optionbuf);",
          "421:                 }",
          "422:         }",
          "423: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "673:                 block_read += bytes_read;",
          "674:                 to_read -= bytes_read;",
          "682:                 switch (oh.option_code) {",
          "683:                     case(OPT_EOFOPT):",
          "",
          "[Removed Lines]",
          "676:                 if (oh.option_code) {",
          "678:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "679:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "850:                 block_read += bytes_read;",
          "851:                 to_read -= bytes_read;",
          "859:                 switch (oh.option_code) {",
          "",
          "[Removed Lines]",
          "853:                 if (oh.option_code) {",
          "855:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "856:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1282:                 block_read += bytes_read;",
          "1283:                 to_read -= bytes_read;",
          "1291:                 switch (oh.option_code) {",
          "1292:                     case(OPT_EOFOPT):",
          "",
          "[Removed Lines]",
          "1285:                 if (oh.option_code) {",
          "1287:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "1288:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1908:                 block_read += bytes_read;",
          "1909:                 to_read -= bytes_read;",
          "1917:                 switch (oh.option_code) {",
          "",
          "[Removed Lines]",
          "1911:                 if (oh.option_code) {",
          "1913:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "1914:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2218:         int_data.num_stat_entries = 0;",
          "2219:         int_data.interface_statistics = NULL;",
          "2224:         g_array_append_val(wth->interface_data, int_data);",
          "2225:         wth->number_of_interfaces++;",
          "",
          "[Removed Lines]",
          "2221:         int_data.if_options = wblock->pcapng_options;",
          "2222:         wblock->pcapng_options = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2243:         pcapng_block_header_t bh;",
          "2244:         gint64 saved_offset;",
          "2248:         pn.shb_read = FALSE;",
          "2250:         pn.byte_swapped = FALSE;",
          "",
          "[Removed Lines]",
          "2246:         pcapng_init_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2265:         bytes_read = pcapng_read_block(wth->fh, TRUE, &pn, &wblock, err, err_info);",
          "2266:         if (bytes_read <= 0) {",
          "2267:                 pcapng_debug0(\"pcapng_open: couldn't read first SHB\");",
          "2270:                 if (*err != 0 && *err != WTAP_ERR_SHORT_READ)",
          "2271:                         return -1;",
          "",
          "[Removed Lines]",
          "2268:                 pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2282:                 pcapng_debug1(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "2284:                 return 0;",
          "2285:         }",
          "2286:         pn.shb_read = TRUE;",
          "",
          "[Removed Lines]",
          "2283:                 pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2326:                 if (bytes_read != sizeof bh) {",
          "2328:                         pcapng_debug3(\"pcapng_open:  Check for more IDB:s, file_read() returned %d instead of %u, err = %d.\", bytes_read, (unsigned int)sizeof bh, *err);",
          "2330:                         if (*err == 0)",
          "2332:                         return -1;",
          "",
          "[Removed Lines]",
          "2329:                         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2352:                 if (bytes_read <= 0) {",
          "2353:                         pcapng_debug0(\"pcapng_open: couldn't read IDB\");",
          "2356:                         if (*err == 0)",
          "2358:                         return -1;",
          "",
          "[Removed Lines]",
          "2355:                         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2360:                 pcapng_process_idb(wth, pcapng, &wblock);",
          "2361:                 pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\", wth->number_of_interfaces, *wblock.file_encap);",
          "2362:         }",
          "2364:         return 1;",
          "2365: }",
          "",
          "[Removed Lines]",
          "2363:         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2375:         wtapng_if_descr_t *wtapng_if_descr;",
          "2376:         wtapng_if_stats_t if_stats;",
          "2381:         pcapng_debug1(\"pcapng_read: data_offset is initially %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "",
          "[Removed Lines]",
          "2378:         pcapng_init_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2393:                 if (bytes_read <= 0) {",
          "2394:                         pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2395:                         pcapng_debug0(\"pcapng_read: couldn't read packet block\");",
          "2397:                         return FALSE;",
          "2398:                 }",
          "",
          "[Removed Lines]",
          "2396:                         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2404:                         wth->phdr.pkt_encap = WTAP_ENCAP_UNKNOWN;",
          "2408:                         return FALSE;",
          "2410:                 case(BLOCK_TYPE_PB):",
          "",
          "[Removed Lines]",
          "2407:                         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2475:         pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset + bytes_read);",
          "2478:         return TRUE;",
          "2479: }",
          "",
          "[Removed Lines]",
          "2476:         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2490:         int bytes_read;",
          "2491:         wtapng_block_t wblock;",
          "2496:         bytes_read64 = file_seek(wth->random_fh, seek_off, SEEK_SET, err);",
          "2497:         if (bytes_read64 <= 0) {",
          "2500:         }",
          "2501:         pcapng_debug1(\"pcapng_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "",
          "[Removed Lines]",
          "2493:         pcapng_init_block_options(&wblock);",
          "2498:   pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2509:         if (bytes_read <= 0) {",
          "2510:                 pcapng_debug3(\"pcapng_seek_read: couldn't read packet block (err=%d, errno=%d, bytes_read=%d).\",",
          "2513:                 return FALSE;",
          "2514:         }",
          "",
          "[Removed Lines]",
          "2512:                 pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2518:         if (wblock.type != BLOCK_TYPE_PB && wblock.type != BLOCK_TYPE_EPB &&",
          "2519:             wblock.type != BLOCK_TYPE_SPB) {",
          "2520:                 pcapng_debug1(\"pcapng_seek_read: block type %u not PB/EPB/SPB\", wblock.type);",
          "2522:                 return FALSE;",
          "2523:         }",
          "2526:         return TRUE;",
          "2527: }",
          "",
          "[Removed Lines]",
          "2521:                 pcapng_unref_block_options(&wblock);",
          "2525:         pcapng_unref_block_options(&wblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "925:   if(wtapng_if_descr->num_stat_entries != 0){",
          "926:     g_array_free(wtapng_if_descr->interface_statistics, TRUE);",
          "927:   }",
          "931:  }",
          "932:  if(wth->number_of_interfaces != 0){",
          "933:    g_array_free(wth->interface_data, TRUE);",
          "",
          "[Removed Lines]",
          "928:   if(wtapng_if_descr->if_options){",
          "929:     g_hash_table_destroy(wtapng_if_descr->if_options);",
          "930:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118:     guint8                 num_stat_entries;",
          "1119:     GArray                *interface_statistics;  /**< An array holding the interface statistics from",
          "1122: } wtapng_if_descr_t;",
          "",
          "[Removed Lines]",
          "1121:     GHashTable            *if_options;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aee917058fb46b2e86d750766001c4db214fc78",
      "candidate_info": {
        "commit_hash": "3aee917058fb46b2e86d750766001c4db214fc78",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3aee917058fb46b2e86d750766001c4db214fc78",
        "files": [
          "cfile.c",
          "file.c",
          "summary.c",
          "tshark.c",
          "ui/gtk/file_import_dlg.c",
          "ui/tap_export_pdu.c",
          "wiretap/erf.c",
          "wiretap/file_access.c",
          "wiretap/pcapng.c",
          "wiretap/wtap-int.h",
          "wiretap/wtap.c",
          "wiretap/wtap.h"
        ],
        "message": "wiretap: remove unused code, drop number_of_interfaces\n\nWhile investigating an ASAN issue (fixed in\ncommit dcdd076ab0965c346efe90051678ba790eaf7a02), I got greatly confused\nby three different types having the same \"interface_data\" field name:\n\n * pcapng_t *pn stores an array of interface_data_t objects.\n * wtap *wth stores an array of wtapng_if_descr_t objects.\n * pcapng_dump_t should store an array of interface_data_t objects.\n\npcapng_dump_t and friends are unused since\ncommit c7f1a431d23e17a15777652b1252e139f182b0e6, so drop it.\n\nTo fix the confusion, rename the interface_data_t type to\ninterface_info_t type and use the local variable \"iface_info\"\neverywhere. Rename interface_data of pcapng_t to \"interfaces\" and\nadd a comment what this exactly means (interfaces listed in the capture\nfile).\n\nDrop the number_of_interfaces field for interfaces as the array\nlength is already available from GArray. Now interface_data is always\ninitialized for wth (which also gets copied to idb).\n\ns/int/guint/g and replace cast at some places.\n\nThere are no regressions for the in-tree test suite.\n\nChange-Id: I2d5985c9f1e43f8230dbb4a73bd1e243c4858170\nReviewed-on: https://code.wireshark.org/review/1656\nReviewed-by: Evan Huus <eapache@gmail.com>\nTested-by: Evan Huus <eapache@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "cfile.c||cfile.c",
          "file.c||file.c",
          "summary.c||summary.c",
          "tshark.c||tshark.c",
          "ui/gtk/file_import_dlg.c||ui/gtk/file_import_dlg.c",
          "ui/tap_export_pdu.c||ui/tap_export_pdu.c",
          "wiretap/erf.c||wiretap/erf.c",
          "wiretap/file_access.c||wiretap/file_access.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/wtap-int.h||wiretap/wtap-int.h",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "cfile.c||cfile.c": [
          "File: cfile.c -> cfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   idb_info = wtap_file_get_idb_info(cf->wth);",
          "42:     wtapng_if_descr = &g_array_index(idb_info->interface_data, wtapng_if_descr_t, interface_id);",
          "44:   g_free(idb_info);",
          "",
          "[Removed Lines]",
          "41:   if (interface_id < idb_info->number_of_interfaces)",
          "",
          "[Added Lines]",
          "41:   if (interface_id < idb_info->interface_data->len)",
          "",
          "---------------"
        ],
        "file.c||file.c": [
          "File: file.c -> file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1384:     idb_inf = g_new(wtapng_iface_descriptions_t,1);",
          "1388:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "1390:     for (i = 0; i < in_file_count; i++) {",
          "",
          "[Removed Lines]",
          "1385:     idb_inf->number_of_interfaces = in_file_count; /* TODO make this the number of DIFFERENT encapsulation types",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "summary.c||summary.c": [
          "File: summary.c -> summary.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   st->ifaces  = g_array_new(FALSE, FALSE, sizeof(iface_options));",
          "174:   idb_info = wtap_file_get_idb_info(cf->wth);",
          "176:     wtapng_if_descr = g_array_index(idb_info->interface_data, wtapng_if_descr_t, i);",
          "177:     iface.cfilter = g_strdup(wtapng_if_descr.if_filter_str);",
          "178:     iface.name = g_strdup(wtapng_if_descr.if_name);",
          "",
          "[Removed Lines]",
          "175:   for (i = 0; i < idb_info->number_of_interfaces; i++) {",
          "",
          "[Added Lines]",
          "175:   for (i = 0; i < idb_info->interface_data->len; i++) {",
          "",
          "---------------"
        ],
        "tshark.c||tshark.c": [
          "File: tshark.c -> tshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3080:   shb_hdr = wtap_file_get_shb_info(cf->wth);",
          "3081:   idb_inf = wtap_file_get_idb_info(cf->wth);",
          "3082: #ifdef PCAP_NG_DEFAULT",
          "3084:     linktype = WTAP_ENCAP_PER_PACKET;",
          "3085:   } else {",
          "3086:     linktype = wtap_file_encap(cf->wth);",
          "",
          "[Removed Lines]",
          "3083:   if (idb_inf->number_of_interfaces > 1) {",
          "",
          "[Added Lines]",
          "3083:   if (idb_inf->interface_data->len > 1) {",
          "",
          "---------------"
        ],
        "ui/gtk/file_import_dlg.c||ui/gtk/file_import_dlg.c": [
          "File: ui/gtk/file_import_dlg.c -> ui/gtk/file_import_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:     idb_inf = g_new(wtapng_iface_descriptions_t,1);",
          "497:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Removed Lines]",
          "496:     idb_inf->number_of_interfaces = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/tap_export_pdu.c||ui/tap_export_pdu.c": [
          "File: ui/tap_export_pdu.c -> ui/tap_export_pdu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     idb_inf = g_new(wtapng_iface_descriptions_t,1);",
          "124:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Removed Lines]",
          "123:     idb_inf->number_of_interfaces = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/erf.c||wiretap/erf.c": [
          "File: wiretap/erf.c -> wiretap/erf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:   if (!wth)",
          "727:     return -1;",
          "735:   int_data.wtap_encap = WTAP_ENCAP_ERF;",
          "",
          "[Removed Lines]",
          "729:   if (!wth->interface_data) {",
          "730:     wth->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "731:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:     int_data.if_description = g_strdup_printf(\"ERF Interface Id %d (Port %c)\", i, 'A'+i);",
          "764:     g_array_append_val(wth->interface_data, int_data);",
          "766:   }",
          "768:   return 0;",
          "",
          "[Removed Lines]",
          "765:     wth->number_of_interfaces++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/file_access.c||wiretap/file_access.c": [
          "File: wiretap/file_access.c -> wiretap/file_access.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:  wth->priv = NULL;",
          "799:  wth->wslua_data = NULL;",
          "801:  if (wth->random_fh) {",
          "802:   wth->fast_seek = g_ptr_array_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:  wth->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1021:   descr.if_fcslen = -1;",
          "1023:   descr.interface_statistics = NULL;",
          "1026:   g_array_append_val(wth->interface_data, descr);",
          "1028:  }",
          "",
          "[Removed Lines]",
          "1024:   wth->number_of_interfaces= 1;",
          "1025:   wth->interface_data= g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1985:  wdh->shb_hdr = shb_hdr;",
          "1989:   wdh->interface_data = idb_inf->interface_data;",
          "1990:  } else {",
          "1991:   wtapng_if_descr_t descr;",
          "",
          "[Removed Lines]",
          "1987:  if ((idb_inf != NULL) && (idb_inf->number_of_interfaces > 0)) {",
          "1988:   wdh->number_of_interfaces = idb_inf->number_of_interfaces;",
          "",
          "[Added Lines]",
          "1990:  if ((idb_inf != NULL) && (idb_inf->interface_data->len > 0)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2006:   descr.if_fcslen = -1;",
          "2008:   descr.interface_statistics = NULL;",
          "2011:   g_array_append_val(wdh->interface_data, descr);",
          "2012:  }",
          "2013:  return wdh;",
          "",
          "[Removed Lines]",
          "2009:   wdh->number_of_interfaces= 1;",
          "2010:   wdh->interface_data= g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: } wtapng_block_t;",
          "362:         int wtap_encap;",
          "363:         guint32 snap_len;",
          "364:         guint64 time_units_per_second;",
          "367: typedef struct {",
          "369:         gboolean byte_swapped;",
          "370:         guint16 version_major;",
          "371:         guint16 version_minor;",
          "374:         gint8 if_fcslen;",
          "375:         wtap_new_ipv4_callback_t add_new_ipv4;",
          "376:         wtap_new_ipv6_callback_t add_new_ipv6;",
          "",
          "[Removed Lines]",
          "361: typedef struct interface_data_s {",
          "365: } interface_data_t;",
          "372:         GArray *interface_data;",
          "373:         guint number_of_interfaces;",
          "",
          "[Added Lines]",
          "361: typedef struct interface_info_s {",
          "365: } interface_info_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "944:         wtapng_packet_t packet;",
          "945:         guint32 block_total_length;",
          "946:         guint32 padding;",
          "948:         guint64 ts;",
          "949:         pcapng_option_header_t oh;",
          "950:         int pseudo_header_len;",
          "",
          "[Removed Lines]",
          "947:         interface_data_t int_data;",
          "",
          "[Added Lines]",
          "946:         interface_info_t iface_info;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1101:                       packet.cap_len,",
          "1102:                       packet.interface_id);",
          "1108:                 return 0;",
          "1109:         }",
          "1111:             packet.interface_id);",
          "1113:         wblock->packet_header->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1115:         pcapng_debug3(\"pcapng_read_packet_block: encapsulation = %d (%s), pseudo header size = %d.\",",
          "1119:         wblock->packet_header->interface_id = packet.interface_id;",
          "1122:         memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1123:         pseudo_header_len = pcap_process_pseudo_header(fh,",
          "1124:                                                        WTAP_FILE_TYPE_SUBTYPE_PCAPNG,",
          "1126:                                                        packet.cap_len,",
          "1127:                                                        TRUE,",
          "1128:                                                        wblock->packet_header,",
          "",
          "[Removed Lines]",
          "1104:         if (packet.interface_id >= pn->number_of_interfaces) {",
          "1107:                     packet.interface_id, pn->number_of_interfaces);",
          "1110:         int_data = g_array_index(pn->interface_data, interface_data_t,",
          "1116:                        int_data.wtap_encap,",
          "1117:                        wtap_encap_string(int_data.wtap_encap),",
          "1118:                        pcap_get_phdr_size(int_data.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1120:         wblock->packet_header->pkt_encap = int_data.wtap_encap;",
          "1125:                                                        int_data.wtap_encap,",
          "",
          "[Added Lines]",
          "1103:         if (packet.interface_id >= pn->interfaces->len) {",
          "1106:                     packet.interface_id, pn->interfaces->len);",
          "1109:         iface_info = g_array_index(pn->interfaces, interface_info_t,",
          "1115:                        iface_info.wtap_encap,",
          "1116:                        wtap_encap_string(iface_info.wtap_encap),",
          "1117:                        pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1119:         wblock->packet_header->pkt_encap = iface_info.wtap_encap;",
          "1124:                                                        iface_info.wtap_encap,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1132:                 return 0;",
          "1133:         }",
          "1134:         block_read += pseudo_header_len;",
          "1136:                 pcapng_debug1(\"pcapng_read_packet_block: Could only read %d bytes for pseudo header.\",",
          "1137:                               pseudo_header_len);",
          "1138:         }",
          "",
          "[Removed Lines]",
          "1135:         if (pseudo_header_len != pcap_get_phdr_size(int_data.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "",
          "[Added Lines]",
          "1134:         if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1143:         ts = (((guint64)packet.ts_high) << 32) | ((guint64)packet.ts_low);",
          "1148:         errno = WTAP_ERR_CANT_READ;",
          "",
          "[Removed Lines]",
          "1144:         wblock->packet_header->ts.secs = (time_t)(ts / int_data.time_units_per_second);",
          "1145:         wblock->packet_header->ts.nsecs = (int)(((ts % int_data.time_units_per_second) * 1000000000) / int_data.time_units_per_second);",
          "",
          "[Added Lines]",
          "1143:         wblock->packet_header->ts.secs = (time_t)(ts / iface_info.time_units_per_second);",
          "1144:         wblock->packet_header->ts.nsecs = (int)(((ts % iface_info.time_units_per_second) * 1000000000) / iface_info.time_units_per_second);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1264:         g_free(option_content);",
          "1267:             wblock->packet_header, buffer_start_ptr(wblock->frame_buffer),",
          "1268:             pn->byte_swapped, fcslen);",
          "1269:         return block_read;",
          "",
          "[Removed Lines]",
          "1266:         pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, int_data.wtap_encap,",
          "",
          "[Added Lines]",
          "1265:         pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, iface_info.wtap_encap,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1276:         int bytes_read;",
          "1277:         guint block_read;",
          "1278:         guint64 file_offset64;",
          "1280:         pcapng_simple_packet_block_t spb;",
          "1281:         wtapng_simple_packet_t simple_packet;",
          "1282:         guint32 block_total_length;",
          "",
          "[Removed Lines]",
          "1279:         interface_data_t int_data;",
          "",
          "[Added Lines]",
          "1278:         interface_info_t iface_info;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1321:         }",
          "1322:         block_read = bytes_read;",
          "1327:                 return 0;",
          "1328:         }",
          "1331:         if (pn->byte_swapped) {",
          "1332:                 simple_packet.packet_len   = GUINT32_SWAP_LE_BE(spb.packet_len);",
          "",
          "[Removed Lines]",
          "1324:         if (0 >= pn->number_of_interfaces) {",
          "1329:         int_data = g_array_index(pn->interface_data, interface_data_t, 0);",
          "",
          "[Added Lines]",
          "1323:         if (0 >= pn->interfaces->len) {",
          "1328:         iface_info = g_array_index(pn->interfaces, interface_info_t, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1342:         simple_packet.cap_len = simple_packet.packet_len;",
          "",
          "[Removed Lines]",
          "1343:         if (simple_packet.cap_len > int_data.snap_len)",
          "1344:                 simple_packet.cap_len = int_data.snap_len;",
          "",
          "[Added Lines]",
          "1342:         if (simple_packet.cap_len > iface_info.snap_len)",
          "1343:                 simple_packet.cap_len = iface_info.snap_len;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1386:                        simple_packet.packet_len);",
          "1388:         pcapng_debug1(\"pcapng_read_simple_packet_block: Need to read pseudo header of size %d\",",
          "1392:         wblock->packet_header->presence_flags = WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1393:         wblock->packet_header->interface_id = 0;",
          "1395:         wblock->packet_header->ts.secs = 0;",
          "1396:         wblock->packet_header->ts.nsecs = 0;",
          "1397:         wblock->packet_header->interface_id = 0;",
          "",
          "[Removed Lines]",
          "1389:                       pcap_get_phdr_size(int_data.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1394:         wblock->packet_header->pkt_encap = int_data.wtap_encap;",
          "",
          "[Added Lines]",
          "1388:                       pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1393:         wblock->packet_header->pkt_encap = iface_info.wtap_encap;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1402:         memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1403:         pseudo_header_len = pcap_process_pseudo_header(fh,",
          "1404:                                                        WTAP_FILE_TYPE_SUBTYPE_PCAPNG,",
          "1406:                                                        simple_packet.cap_len,",
          "1407:                                                        TRUE,",
          "1408:                                                        wblock->packet_header,",
          "",
          "[Removed Lines]",
          "1405:                                                        int_data.wtap_encap,",
          "",
          "[Added Lines]",
          "1404:                                                        iface_info.wtap_encap,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1414:         wblock->packet_header->caplen = simple_packet.cap_len - pseudo_header_len;",
          "1415:         wblock->packet_header->len = simple_packet.packet_len - pseudo_header_len;",
          "1416:         block_read += pseudo_header_len;",
          "1418:                 pcapng_debug1(\"pcapng_read_simple_packet_block: Could only read %d bytes for pseudo header.\",",
          "1419:                               pseudo_header_len);",
          "1420:         }",
          "",
          "[Removed Lines]",
          "1417:         if (pseudo_header_len != pcap_get_phdr_size(int_data.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "",
          "[Added Lines]",
          "1416:         if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1439:                 block_read += 4 - (simple_packet.cap_len % 4);",
          "1440:         }",
          "1443:             wblock->packet_header, buffer_start_ptr(wblock->frame_buffer),",
          "1444:             pn->byte_swapped, pn->if_fcslen);",
          "1445:         return block_read;",
          "",
          "[Removed Lines]",
          "1442:         pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, int_data.wtap_encap,",
          "",
          "[Added Lines]",
          "1441:         pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, iface_info.wtap_encap,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2099: pcapng_process_idb(wtap *wth, pcapng_t *pcapng, wtapng_block_t *wblock)",
          "2100: {",
          "2101:         wtapng_if_descr_t int_data;",
          "2104:         int_data.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2105:         int_data.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "",
          "[Removed Lines]",
          "2102:         interface_data_t interface_data;",
          "",
          "[Added Lines]",
          "2101:         interface_info_t iface_info;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2127:         int_data.interface_statistics = NULL;",
          "2129:         g_array_append_val(wth->interface_data, int_data);",
          "2138: }",
          "",
          "[Removed Lines]",
          "2130:         wth->number_of_interfaces++;",
          "2132:         interface_data.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2133:         interface_data.snap_len = wblock->data.if_descr.snap_len;",
          "2134:         interface_data.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2136:         g_array_append_val(pcapng->interface_data, interface_data);",
          "2137:         pcapng->number_of_interfaces++;",
          "",
          "[Added Lines]",
          "2130:         iface_info.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2131:         iface_info.snap_len = wblock->data.if_descr.snap_len;",
          "2132:         iface_info.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2134:         g_array_append_val(pcapng->interfaces, iface_info);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2154:         pn.if_fcslen = -1;",
          "2155:         pn.version_major = -1;",
          "2156:         pn.version_minor = -1;",
          "",
          "[Removed Lines]",
          "2157:         pn.interface_data = g_array_new(FALSE, FALSE, sizeof(interface_data_t));",
          "2158:         pn.number_of_interfaces = 0;",
          "",
          "[Added Lines]",
          "2154:         pn.interfaces = g_array_new(FALSE, FALSE, sizeof(interface_info_t));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2209:         wth->subtype_close = pcapng_close;",
          "2210:         wth->file_type_subtype = WTAP_FILE_TYPE_SUBTYPE_PCAPNG;",
          "2217:         while (1) {",
          "",
          "[Removed Lines]",
          "2213:         wth->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "2214:         wth->number_of_interfaces = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2257:                         return -1;",
          "2258:                 }",
          "2259:                 pcapng_process_idb(wth, pcapng, &wblock);",
          "2261:         }",
          "2262:         return 1;",
          "2263: }",
          "",
          "[Removed Lines]",
          "2260:                 pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\", wth->number_of_interfaces, *wblock.file_encap);",
          "",
          "[Added Lines]",
          "2252:                 pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\",",
          "2253:                         wth->interface_data->len, *wblock.file_encap);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2325:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2327:                         pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2329:                                 pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2330:                         } else {",
          "",
          "[Removed Lines]",
          "2328:                         if (wth->number_of_interfaces < wblock.data.if_stats.interface_id) {",
          "",
          "[Added Lines]",
          "2321:                         if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2422:         pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2424:         pcapng_debug0(\"pcapng_close: closing file\");",
          "2428: }",
          "2437: static gboolean",
          "2438: pcapng_write_section_header_block(wtap_dumper *wdh, int *err)",
          "2439: {",
          "",
          "[Removed Lines]",
          "2425:         if (pcapng->interface_data != NULL) {",
          "2426:                 g_array_free(pcapng->interface_data, TRUE);",
          "2427:         }",
          "2432: typedef struct {",
          "2433:         GArray *interface_data;",
          "2434:         guint number_of_interfaces;",
          "2435: } pcapng_dump_t;",
          "",
          "[Added Lines]",
          "2418:         g_array_free(pcapng->interfaces, TRUE);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3300:         if (epb.interface_id >= wdh->number_of_interfaces) {",
          "",
          "[Added Lines]",
          "3285:         if (epb.interface_id >= wdh->interface_data->len) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3557:     return TRUE;",
          "3558: }",
          "3578: static gboolean pcapng_dump(wtap_dumper *wdh,",
          "3579:         const struct wtap_pkthdr *phdr,",
          "3580:         const guint8 *pd, int *err)",
          "3581: {",
          "3582:         const union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "3587:         pcapng_debug2(\"pcapng_dump: encap = %d (%s)\",",
          "3588:                       phdr->pkt_encap,",
          "",
          "[Removed Lines]",
          "3560: #if 0",
          "3561: static guint32",
          "3562: pcapng_lookup_interface_id_by_encap(int wtap_encap, wtap_dumper *wdh)",
          "3563: {",
          "3564:         gint i;",
          "3565:         interface_data_t int_data;",
          "3566:         pcapng_dump_t *pcapng = (pcapng_dump_t *)wdh->priv;",
          "3568:         for(i = 0; i < (gint)pcapng->number_of_interfaces; i++) {",
          "3569:                 int_data = g_array_index(pcapng->interface_data, interface_data_t, i);",
          "3570:                 if (wtap_encap == int_data.wtap_encap) {",
          "3571:                         return (guint32)i;",
          "3572:                 }",
          "3573:         }",
          "3574:         return G_MAXUINT32;",
          "3575: }",
          "3576: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3604: static gboolean pcapng_dump_close(wtap_dumper *wdh, int *err _U_)",
          "3605: {",
          "3624:                         }",
          "3625:                 }",
          "3626:         }",
          "3628:         pcapng_debug0(\"pcapng_dump_close\");",
          "3631:         return TRUE;",
          "3632: }",
          "",
          "[Removed Lines]",
          "3606:         int i, j;",
          "3607:         pcapng_dump_t *pcapng = (pcapng_dump_t *)wdh->priv;",
          "3609:         if ((wdh->number_of_interfaces > 0) && (wdh->interface_data != NULL)) {",
          "3610:                 for (i = 0; i < (int)wdh->number_of_interfaces; i++) {",
          "3613:                         wtapng_if_descr_t int_data;",
          "3615:                         int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3616:                         for (j = 0; j < (int)int_data.num_stat_entries; j++) {",
          "3617:                                 wtapng_if_stats_t if_stats;",
          "3619:                                 if_stats = g_array_index(int_data.interface_statistics, wtapng_if_stats_t, j);",
          "3620:                                 pcapng_debug1(\"pcapng_dump_close: write ISB for interface %u\",if_stats.interface_id);",
          "3621:                                 if (!pcapng_write_interface_statistics_block(wdh, &if_stats, err)) {",
          "3622:                                         return FALSE;",
          "3623:                                 }",
          "3629:         g_array_free(pcapng->interface_data, TRUE);",
          "3630:         pcapng->number_of_interfaces = 0;",
          "",
          "[Added Lines]",
          "3570:         guint i, j;",
          "3572:         for (i = 0; i < wdh->interface_data->len; i++) {",
          "3575:                 wtapng_if_descr_t int_data;",
          "3577:                 int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3578:                 for (j = 0; j < int_data.num_stat_entries; j++) {",
          "3579:                         wtapng_if_stats_t if_stats;",
          "3581:                         if_stats = g_array_index(int_data.interface_statistics, wtapng_if_stats_t, j);",
          "3582:                         pcapng_debug1(\"pcapng_dump_close: write ISB for interface %u\",if_stats.interface_id);",
          "3583:                         if (!pcapng_write_interface_statistics_block(wdh, &if_stats, err)) {",
          "3584:                                 return FALSE;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3637: gboolean",
          "3638: pcapng_dump_open(wtap_dumper *wdh, int *err)",
          "3639: {",
          "3644:         pcapng_debug0(\"pcapng_dump_open\");",
          "3646:         wdh->subtype_write = pcapng_dump;",
          "3647:         wdh->subtype_close = pcapng_dump_close;",
          "3653:                 pcapng_debug0(\"There are no interfaces. Can't handle that...\");",
          "3655:                 return FALSE;",
          "",
          "[Removed Lines]",
          "3640:         pcapng_dump_t *pcapng;",
          "3641:         int i;",
          "3642:         interface_data_t interface_data;",
          "3648:         pcapng = (pcapng_dump_t *)g_malloc0(sizeof(pcapng_dump_t));",
          "3649:         wdh->priv = (void *)pcapng;",
          "3650:         pcapng->interface_data = g_array_new(FALSE, FALSE, sizeof(interface_data_t));",
          "3652:         if ((wdh->number_of_interfaces == 0) || (wdh->interface_data == NULL)) {",
          "",
          "[Added Lines]",
          "3599:         guint i;",
          "3606:         if (wdh->interface_data->len == 0) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3662:         pcapng_debug0(\"pcapng_dump_open: wrote section header block.\");",
          "3670:                 wtapng_if_descr_t int_data;",
          "3672:                 int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3680:                 if (!pcapng_write_if_descr_block(wdh, &int_data, err)) {",
          "3681:                         return FALSE;",
          "3682:                 }",
          "3684:         }",
          "3736:         return TRUE;",
          "3737: }",
          "",
          "[Removed Lines]",
          "3665:         pcapng_debug1(\"pcapng_dump_open: Number of IDB:s to write (number of interfaces) %u\", wdh->number_of_interfaces);",
          "3667:         for (i = 0; i < (int)wdh->number_of_interfaces; i++) {",
          "3674:                 interface_data.wtap_encap = int_data.wtap_encap;",
          "3675:                 interface_data.time_units_per_second = int_data.time_units_per_second;",
          "3677:                 g_array_append_val(pcapng->interface_data, interface_data);",
          "3678:                 pcapng->number_of_interfaces++;",
          "3685: #if 0",
          "3686:         interface_id = pcapng_lookup_interface_id_by_encap(phdr->pkt_encap, wdh);",
          "3687:         if (interface_id == G_MAXUINT32) {",
          "3694:                 pcap_encap = wtap_wtap_encap_to_pcap_encap(phdr->pkt_encap);",
          "3695:                 if (pcap_encap == -1) {",
          "3700:                         return FALSE;",
          "3701:                 }",
          "3704:                 wblock.frame_buffer            = NULL;",
          "3705:                 wblock.pseudo_header           = NULL;",
          "3706:                 wblock.packet_header           = NULL;",
          "3707:                 wblock.file_encap              = NULL;",
          "3708:                 wblock.type                    = BLOCK_TYPE_IDB;",
          "3709:                 wblock.data.if_descr.link_type = pcap_encap;",
          "3710:                 wblock.data.if_descr.snap_len = (wdh->snaplen != 0) ? wdh->snaplen :",
          "3714:                 wblock.data.if_descr.if_speed   = -1;",
          "3716:                 wblock.data.if_descr.if_os      = NULL;",
          "3717:                 wblock.data.if_descr.if_fcslen  = -1;",
          "3719:                 if (!pcapng_write_if_descr_block(wdh, &wblock, err)) {",
          "3720:                         return FALSE;",
          "3721:                 }",
          "3723:                 interface_id = pcapng->number_of_interfaces;",
          "3724:                 int_data.wtap_encap = phdr->pkt_encap;",
          "3725:                 int_data.time_units_per_second = 0;",
          "3726:                 g_array_append_val(pcapng->interface_data, int_data);",
          "3727:                 pcapng->number_of_interfaces++;",
          "3729:                 pcapng_debug3(\"pcapng_dump: added interface description block with index %u for encap = %d (%s).\",",
          "3730:                               interface_id,",
          "3731:                               phdr->pkt_encap,",
          "3732:                               wtap_encap_string(phdr->pkt_encap));",
          "3733:         }",
          "3734: #endif",
          "",
          "[Added Lines]",
          "3619:         pcapng_debug1(\"pcapng_dump_open: Number of IDB:s to write (number of interfaces) %u\",",
          "3620:                 wdh->interface_data->len);",
          "3622:         for (i = 0; i < wdh->interface_data->len; i++) {",
          "",
          "---------------"
        ],
        "wiretap/wtap-int.h||wiretap/wtap-int.h": [
          "File: wiretap/wtap-int.h -> wiretap/wtap-int.h"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:  idb_info = g_new(wtapng_iface_descriptions_t,1);",
          "205:  idb_info->interface_data = wth->interface_data;",
          "207:  return idb_info;",
          "",
          "[Removed Lines]",
          "204:  idb_info->number_of_interfaces = wth->number_of_interfaces;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "907: void",
          "908: wtap_close(wtap *wth)",
          "909: {",
          "911:  wtapng_if_descr_t *wtapng_if_descr;",
          "912:  wtapng_if_stats_t *if_stats;",
          "",
          "[Removed Lines]",
          "910:  gint i, j;",
          "",
          "[Added Lines]",
          "909:  guint i, j;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "926:   g_ptr_array_foreach(wth->fast_seek, g_fast_seek_item_free, NULL);",
          "927:   g_ptr_array_free(wth->fast_seek, TRUE);",
          "928:  }",
          "930:   wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, i);",
          "931:   if(wtapng_if_descr->opt_comment != NULL){",
          "932:    g_free(wtapng_if_descr->opt_comment);",
          "",
          "[Removed Lines]",
          "929:  for(i = 0; i < (gint)wth->number_of_interfaces; i++) {",
          "",
          "[Added Lines]",
          "928:  for(i = 0; i < wth->interface_data->len; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "946:   if(wtapng_if_descr->if_os != NULL){",
          "947:    g_free(wtapng_if_descr->if_os);",
          "948:   }",
          "950:    if_stats = &g_array_index(wtapng_if_descr->interface_statistics, wtapng_if_stats_t, j);",
          "951:    if(if_stats->opt_comment != NULL){",
          "952:     g_free(if_stats->opt_comment);",
          "953:    }",
          "954:   }",
          "955:   if(wtapng_if_descr->num_stat_entries != 0){",
          "957:   }",
          "958:  }",
          "962:  g_free(wth);",
          "963: }",
          "",
          "[Removed Lines]",
          "949:   for(j = 0; j < (gint)wtapng_if_descr->num_stat_entries; j++) {",
          "956:     g_array_free(wtapng_if_descr->interface_statistics, TRUE);",
          "959:  if(wth->number_of_interfaces != 0){",
          "960:    g_array_free(wth->interface_data, TRUE);",
          "961:  }",
          "",
          "[Added Lines]",
          "948:   for(j = 0; j < wtapng_if_descr->num_stat_entries; j++) {",
          "955:    g_array_free(wtapng_if_descr->interface_statistics, TRUE);",
          "958:  g_array_free(wth->interface_data, TRUE);",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "992: typedef struct wtapng_iface_descriptions_s {",
          "994:     GArray *interface_data;",
          "995: } wtapng_iface_descriptions_t;",
          "",
          "[Removed Lines]",
          "993:     guint number_of_interfaces;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d7b29592aa9cac3f10823ea8f33b18893707e83",
      "candidate_info": {
        "commit_hash": "6d7b29592aa9cac3f10823ea8f33b18893707e83",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6d7b29592aa9cac3f10823ea8f33b18893707e83",
        "files": [
          "CMakeLists.txt",
          "asn1/nbap/nbap.cnf",
          "asn1/nbap/packet-nbap-template.c",
          "configure.ac",
          "doc/README.developer",
          "epan/dissectors/packet-icep.c",
          "epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-netflow.c",
          "tshark.c",
          "wiretap/ipfix.c",
          "wiretap/merge.c",
          "wiretap/pcapng.c"
        ],
        "message": "Allow use of variadic macros\n\nRemove variadic macros restriction (c99, c++11 feature) from\nREADME.developer. GCC, Clang, MSVC 2005 all support it.\n\nEnable -Wno-variadic-macros in configure.ac and CMakeLists.txt when\n-Wpedantic is enabled (which would enable -Wvariadic-macros).\n\nFor all files matching 'define\\s*\\w+[0-9]\\(', replace \"FOO[0-9]\" by\n\"FOO\" and adjust the macro definition accordingly. The nbap dissector\nwas regenerated after adjusting its template and .cnf file. The\ngenerated code is the same since all files disabled the debug macros.\n\nDiscussed at:\nhttps://www.wireshark.org/lists/wireshark-dev/201209/msg00142.html\nhttps://www.wireshark.org/lists/wireshark-dev/201510/msg00012.html\n\nChange-Id: I3b2e22487db817cbbaac774a592669a4f44314b2\nReviewed-on: https://code.wireshark.org/review/10781\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "asn1/nbap/nbap.cnf||asn1/nbap/nbap.cnf",
          "asn1/nbap/packet-nbap-template.c||asn1/nbap/packet-nbap-template.c",
          "configure.ac||configure.ac",
          "epan/dissectors/packet-icep.c||epan/dissectors/packet-icep.c",
          "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c",
          "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c",
          "tshark.c||tshark.c",
          "wiretap/ipfix.c||wiretap/ipfix.c",
          "wiretap/merge.c||wiretap/merge.c",
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/nbap/nbap.cnf||asn1/nbap/nbap.cnf": [
          "File: asn1/nbap/nbap.cnf -> asn1/nbap/nbap.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "871:                         actx->pinfo->fd->num,",
          "872:                         num_tf);",
          "874:                 for (j = 0; j < num_tf; j++) {",
          "875:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "876:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "878:                 }",
          "",
          "[Removed Lines]",
          "870:                 nbap_debug2(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %%u\",",
          "877:                     nbap_debug2(\"    UL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "",
          "[Added Lines]",
          "870:                 nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %%u\",",
          "877:                     nbap_debug(\"    UL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882:                 for (j = 0; j < num_tf; j++) {",
          "883:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "884:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "886:                 }",
          "889:                 i = commontransportchannelid;",
          "893:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commontransportchannelid;",
          "894:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Removed Lines]",
          "885:                     nbap_debug2(\"    DL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "891:                 nbap_debug2(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "",
          "[Added Lines]",
          "885:                     nbap_debug(\"    DL tf %%u ul_chan_tf_size %%u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "891:                 nbap_debug(\"    commontransportchannelid %%u next ch %%u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "911:                 }",
          "912:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "916:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "917:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "920:                         actx->pinfo->fd->num);",
          "922:             }",
          "",
          "[Removed Lines]",
          "914:                 nbap_debug1(\"    num_dch_in_flow %%u\", umts_fp_conversation_info->num_dch_in_flow);",
          "919:                 nbap_debug1(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "",
          "[Added Lines]",
          "914:                 nbap_debug(\"    num_dch_in_flow %%u\", umts_fp_conversation_info->num_dch_in_flow);",
          "919:                 nbap_debug(\"Frame %%u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1229:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1230:             }",
          "1236:         }",
          "",
          "[Removed Lines]",
          "1232:             nbap_debug1(\"Frame %%u RL-Specific-DCH-Info-Item Start\", actx->pinfo->fd->num);",
          "1233:             nbap_debug1(\"    Total no of ch in flow will be: %%d\", umts_fp_conversation_info->num_dch_in_flow);",
          "1234:             nbap_debug1(\"Frame %%u RL-Specific-DCH-Info-Item End\", actx->pinfo->fd->num);",
          "",
          "[Added Lines]",
          "1232:             nbap_debug(\"Frame %%u RL-Specific-DCH-Info-Item Start\", actx->pinfo->fd->num);",
          "1233:             nbap_debug(\"    Total no of ch in flow will be: %%d\", umts_fp_conversation_info->num_dch_in_flow);",
          "1234:             nbap_debug(\"Frame %%u RL-Specific-DCH-Info-Item End\", actx->pinfo->fd->num);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1317:                     nbap_edch_port_info->crnc_address = transportLayerAddress_ipv4;",
          "1320:                         actx->pinfo->fd->num);",
          "1323:                         umts_fp_conversation_info->com_context_id,",
          "1324:                         e_dch_macdflow_id,",
          "1325:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "",
          "[Removed Lines]",
          "1319:                     nbap_debug1(\"Frame %%u RL-Specific-E-DCH-Information-Item Start\",",
          "1322:                     nbap_debug4(\"    g_tree_insert(edch_flow_port_map) com_context_id %%u e_dch_macdflow_id %%u IP %%s Port %%u\",",
          "",
          "[Added Lines]",
          "1319:                     nbap_debug(\"Frame %%u RL-Specific-E-DCH-Information-Item Start\",",
          "1322:                     nbap_debug(\"    g_tree_insert(edch_flow_port_map) com_context_id %%u e_dch_macdflow_id %%u IP %%s Port %%u\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1328:                     g_tree_insert(edch_flow_port_map, GINT_TO_POINTER((gint)umts_fp_conversation_info->com_context_id), nbap_edch_port_info);",
          "1329:                 }else{",
          "1332:                         umts_fp_conversation_info->com_context_id,",
          "1333:                         e_dch_macdflow_id,",
          "1334:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "",
          "[Removed Lines]",
          "1331:                     nbap_debug4(\"    Insert in existing edch_flow_port_map com_context_id %%u e_dch_macdflow_id %%u IP %%s Port %%u\",",
          "",
          "[Added Lines]",
          "1331:                     nbap_debug(\"    Insert in existing edch_flow_port_map com_context_id %%u e_dch_macdflow_id %%u IP %%s Port %%u\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1345:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "1348:             }",
          "1349:     }",
          "",
          "[Removed Lines]",
          "1347:                 nbap_debug1(\"Frame %%u RL-Specific-E-DCH-Information-Item End\", actx->pinfo->fd->num);",
          "",
          "[Added Lines]",
          "1347:                 nbap_debug(\"Frame %%u RL-Specific-E-DCH-Information-Item End\", actx->pinfo->fd->num);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1430:             0, NO_ADDR_B|NO_PORT_B);",
          "1432:         if(old_conversation){",
          "1434:                 actx->pinfo->fd->num,",
          "1435:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "1436:                 BindingID_port);",
          "1437:         }else{",
          "1439:                 actx->pinfo->fd->num,",
          "1440:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "1441:                 BindingID_port);",
          "",
          "[Removed Lines]",
          "1433:             nbap_debug3(\"Frame %%u E-DCH-FDD-Information-to-Modify: found old conv on IP %%s Port %%u\",",
          "1438:             nbap_debug3(\"Frame %%u E-DCH-FDD-Information-to-Modify: Did not find old conv on IP %%s Port %%u\",",
          "",
          "[Added Lines]",
          "1433:             nbap_debug(\"Frame %%u E-DCH-FDD-Information-to-Modify: found old conv on IP %%s Port %%u\",",
          "1438:             nbap_debug(\"Frame %%u E-DCH-FDD-Information-to-Modify: Did not find old conv on IP %%s Port %%u\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1505:         return offset;",
          "1506:     }",
          "1509:         actx->pinfo->fd->num);",
          "",
          "[Removed Lines]",
          "1508:     nbap_debug1(\"Frame %%u E-DCH-MACdFlow-Specific-InfoItem-to-Modify\",",
          "",
          "[Added Lines]",
          "1508:     nbap_debug(\"Frame %%u E-DCH-MACdFlow-Specific-InfoItem-to-Modify\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1526:         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_find_port_info);",
          "1527:         return offset;",
          "1528:     }",
          "1532:     BindingID_port = old_info->crnc_port[e_dch_macdflow_id];",
          "1535:         BindingID_port,",
          "1536:         e_dch_macdflow_id);",
          "",
          "[Removed Lines]",
          "1529:     nbap_debug1(\"    Found com_context_id %%u\", com_context_id);",
          "1534:     nbap_debug2(\" Port %%u loaded from old_info->crnc_port[e_dch_macdflow_id %%u]\",",
          "",
          "[Added Lines]",
          "1529:     nbap_debug(\"    Found com_context_id %%u\", com_context_id);",
          "1534:     nbap_debug(\" Port %%u loaded from old_info->crnc_port[e_dch_macdflow_id %%u]\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1778:     SET_ADDRESS(&null_addr, AT_NONE, 0, NULL);",
          "1779:     for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "1780:         if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "1782:                         actx->pinfo->fd->num,",
          "1783:                         i,",
          "1784:                         address_to_str (wmem_packet_scope(), &(nbap_hsdsch_channel_info[i].crnc_address)),",
          "",
          "[Removed Lines]",
          "1781:             nbap_debug4(\"Frame %%u HSDSCH-MACdFlows-Information:hsdsch_macdflow_id %%u Look for conv on IP %%s Port %%u\",",
          "",
          "[Added Lines]",
          "1781:             nbap_debug(\"Frame %%u HSDSCH-MACdFlows-Information:hsdsch_macdflow_id %%u Look for conv on IP %%s Port %%u\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1791:             if (conversation == NULL) {",
          "1794:                 conversation = conversation_new(actx->pinfo->fd->num, &(nbap_hsdsch_channel_info[i].crnc_address),",
          "1795:                     &null_addr, PT_UDP, nbap_hsdsch_channel_info[i].crnc_port,",
          "1796:                     0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "1793:                 nbap_debug2(\"Frame %%u HSDSCH-MACdFlows-Information: Set up conv on Port %%u\", actx->pinfo->fd->num, nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "[Added Lines]",
          "1793:                 nbap_debug(\"Frame %%u HSDSCH-MACdFlows-Information: Set up conv on Port %%u\", actx->pinfo->fd->num, nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1891:     SET_ADDRESS(&null_addr, AT_NONE, 0, NULL);",
          "1894:         actx->pinfo->fd->num);",
          "1896:     for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "1897:         if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "1899:                         i,",
          "1900:                         address_to_str (wmem_packet_scope(), &(nbap_hsdsch_channel_info[i].crnc_address)),",
          "1901:                         nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "[Removed Lines]",
          "1893:     nbap_debug1(\"Frame %%u HSDSCH-MACdFlows-Information Start\",",
          "1898:             nbap_debug3(\"    hsdsch_macdflow_id %%u Look for conv on IP %%s Port %%u\",",
          "",
          "[Added Lines]",
          "1893:     nbap_debug(\"Frame %%u HSDSCH-MACdFlows-Information Start\",",
          "1898:             nbap_debug(\"    hsdsch_macdflow_id %%u Look for conv on IP %%s Port %%u\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1907:             if (conversation == NULL) {",
          "1911:                 conversation = conversation_new(actx->pinfo->fd->num, &(nbap_hsdsch_channel_info[i].crnc_address),",
          "1912:                     &null_addr, PT_UDP, nbap_hsdsch_channel_info[i].crnc_port,",
          "",
          "[Removed Lines]",
          "1909:                 nbap_debug1(\"    Set up conv on Port %%u\", nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "[Added Lines]",
          "1909:                 nbap_debug(\"    Set up conv on Port %%u\", nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1958:                 }",
          "1959:             }",
          "1960:         }",
          "1962:             actx->pinfo->fd->num);",
          "1964:     }",
          "",
          "[Removed Lines]",
          "1961:         nbap_debug1(\"Frame %%u HSDSCH-MACdFlows-Information End\",",
          "",
          "[Added Lines]",
          "1961:         nbap_debug(\"Frame %%u HSDSCH-MACdFlows-Information End\",",
          "",
          "---------------"
        ],
        "asn1/nbap/packet-nbap-template.c||asn1/nbap/packet-nbap-template.c": [
          "File: asn1/nbap/packet-nbap-template.c -> asn1/nbap/packet-nbap-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #if 0",
          "63: #else",
          "69: #endif",
          "71: void proto_register_nbap(void);",
          "",
          "[Removed Lines]",
          "58: #define nbap_debug0(str) g_warning(str)",
          "59: #define nbap_debug1(str,p1) g_warning(str,p1)",
          "60: #define nbap_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "61: #define nbap_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "62: #define nbap_debug4(str,p1,p2,p3,p4) g_warning(str,p1,p2,p3,p4)",
          "64: #define nbap_debug0(str)",
          "65: #define nbap_debug1(str,p1)",
          "66: #define nbap_debug2(str,p1,p2)",
          "67: #define nbap_debug3(str,p1,p2,p3)",
          "68: #define nbap_debug4(str,p1,p2,p3,p4)",
          "",
          "[Added Lines]",
          "58: #define nbap_debug(...) g_warning(__VA_ARGS__)",
          "60: #define nbap_debug(...)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "871:   # The following are for C and C++",
          "872:   #",
          "873:   AC_WIRESHARK_COMPILER_FLAGS_CHECK(-Wpedantic)",
          "874:   #",
          "875:   # Various code blocks this one.",
          "876:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874:   AC_WIRESHARK_COMPILER_FLAGS_CHECK(-Wno-variadic-macros)",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-icep.c||epan/dissectors/packet-icep.c": [
          "File: epan/dissectors/packet-icep.c -> epan/dissectors/packet-icep.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: void proto_reg_handoff_icep(void);",
          "49: #if 0",
          "51:                                         fprintf(stdout, \\",
          "52:                                         \"[%s][%s][%d]: \",\\",
          "53:                                         __FILE__, \\",
          "54:                                         __FUNCTION__, \\",
          "55:                                         __LINE__); \\",
          "56:                                         fflush(stdout); \\",
          "58:                                 } while (0)",
          "59: #else",
          "",
          "[Removed Lines]",
          "50: #define DBG(str, args...)       do {\\",
          "57:                                         fprintf(stdout, str, ## args); \\",
          "60: #define DBG0(format)",
          "61: #define DBG1(format, arg1)",
          "62: #define DBG2(format, arg1, arg2)",
          "",
          "[Added Lines]",
          "50: #define DBG(...)       do {\\",
          "57:                                         fprintf(stdout, __VA_ARGS__); \\",
          "60: #define DBG(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:         (*consumed) += 4;",
          "220:     }",
          "225:     if ( !tvb_bytes_exist(tvb, offset, Size) ) {",
          "",
          "[Removed Lines]",
          "222:     DBG1(\"string.Size --> %d\\n\", Size);",
          "",
          "[Added Lines]",
          "220:     DBG(\"string.Size --> %d\\n\", Size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:         (*consumed) += 4;",
          "391:     }",
          "395:     if ( Size > icep_max_ice_context_pairs ) {",
          "",
          "[Removed Lines]",
          "393:     DBG1(\"context.Size --> %d\\n\", Size);",
          "",
          "[Added Lines]",
          "391:     DBG(\"context.Size --> %d\\n\", Size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421:         proto_item *ti;",
          "422:         proto_tree *context_tree;",
          "425:         context_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_icep_invocation_context, &ti, \"Invocation Context\");",
          "427:         dissect_ice_string(pinfo, context_tree, ti, hf_icep_invocation_key, tvb, offset, &consumed_key, &str_key);",
          "",
          "[Removed Lines]",
          "424:         DBG1(\"looping through context dictionary, loop #%d\\n\", i);",
          "",
          "[Added Lines]",
          "422:         DBG(\"looping through context dictionary, loop #%d\\n\", i);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "486:     size = tvb_get_letohl(tvb, offset);",
          "490:     if ( size < ICEP_MIN_PARAMS_SIZE ) {",
          "",
          "[Removed Lines]",
          "488:     DBG1(\"params.size --> %d\\n\", size);",
          "",
          "[Added Lines]",
          "486:     DBG(\"params.size --> %d\\n\", size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "585:     if ( consumed == -1 )",
          "586:         goto error;",
          "589:     (*total_consumed) += consumed;",
          "",
          "[Removed Lines]",
          "588:     offset += consumed; DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "586:     offset += consumed; DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "594:     if ( consumed == -1 )",
          "595:         goto error;",
          "598:     (*total_consumed) += consumed;",
          "",
          "[Removed Lines]",
          "597:     offset += consumed; DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "595:     offset += consumed; DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "608:     if ( consumed == -1 )",
          "609:         goto error;",
          "612:     (*total_consumed) += consumed;",
          "",
          "[Removed Lines]",
          "611:     offset += consumed; DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "609:     offset += consumed; DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:     if ( consumed == -1 )",
          "621:         goto error;",
          "622:     else {",
          "624:         (*total_consumed) += consumed;",
          "626:         if ( opstr && namestr ) {",
          "628:             col_append_fstr(pinfo->cinfo, COL_INFO, \" %s.%s()\",",
          "629:                         namestr, opstr);",
          "630:             opstr = NULL;",
          "",
          "[Removed Lines]",
          "623:         offset += consumed; DBG1(\"consumed --> %d\\n\", consumed);",
          "627:             DBG2(\"operation --> %s.%s()\\n\", namestr, opstr);",
          "",
          "[Added Lines]",
          "621:         offset += consumed; DBG(\"consumed --> %d\\n\", consumed);",
          "625:             DBG(\"operation --> %s.%s()\\n\", namestr, opstr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "644:     proto_tree_add_item(icep_sub_tree, hf_icep_mode, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "647:     (*total_consumed)++;",
          "",
          "[Removed Lines]",
          "646:     offset++; DBG0(\"consumed --> 1\\n\");",
          "",
          "[Added Lines]",
          "644:     offset++; DBG(\"consumed --> 1\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:     if ( consumed == -1 )",
          "657:         goto error;",
          "660:     (*total_consumed) += consumed;",
          "",
          "[Removed Lines]",
          "659:     offset += consumed; DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "657:     offset += consumed; DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "669:         goto error;",
          "673:     (*total_consumed) += consumed;",
          "675:     return;",
          "",
          "[Removed Lines]",
          "672:      DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "670:      DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "700:     gint32 consumed = 0;",
          "701:     guint32 reqid = 0;",
          "706:     if ( !tvb_bytes_exist(tvb, offset, 4) ) {",
          "",
          "[Removed Lines]",
          "703:     DBG0(\"dissect request\\n\");",
          "",
          "[Added Lines]",
          "701:     DBG(\"dissect request\\n\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "729:     offset += 4;",
          "732:     dissect_icep_request_common(tvb, offset, pinfo, icep_sub_tree, ti, &consumed);",
          "",
          "[Removed Lines]",
          "730:     DBG0(\"consumed --> 4\\n\");",
          "",
          "[Added Lines]",
          "728:     DBG(\"consumed --> 4\\n\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "735:         return;",
          "739: }",
          "",
          "[Removed Lines]",
          "738:     DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "736:     DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "768:     guint32 i = 0;",
          "769:     gint32 consumed = 0;",
          "774:     if ( !tvb_bytes_exist(tvb, offset, 4) ) {",
          "",
          "[Removed Lines]",
          "771:     DBG0(\"dissect batch request\\n\");",
          "",
          "[Added Lines]",
          "769:     DBG(\"dissect batch request\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "781:     num_reqs = tvb_get_letohl(tvb, offset);",
          "782:     offset += 4;",
          "786:     if ( num_reqs > icep_max_batch_requests ) {",
          "",
          "[Removed Lines]",
          "784:     DBG1(\"batch_requests.count --> %d\\n\", num_reqs);",
          "",
          "[Added Lines]",
          "782:     DBG(\"batch_requests.count --> %d\\n\", num_reqs);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "809:     for ( i = 0; i < num_reqs; i++ ) {",
          "",
          "[Removed Lines]",
          "811:         DBG1(\"looping through sequence of batch requests, loop #%d\\n\", i);",
          "",
          "[Added Lines]",
          "809:         DBG(\"looping through sequence of batch requests, loop #%d\\n\", i);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "828:             proto_item_set_len(ti, consumed);",
          "830:         offset += consumed;",
          "832:     }",
          "833: }",
          "",
          "[Removed Lines]",
          "831:         DBG1(\"consumed --> %d\\n\", consumed);",
          "",
          "[Added Lines]",
          "829:         DBG(\"consumed --> %d\\n\", consumed);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "850:     proto_item *ti = NULL;",
          "851:     proto_tree *icep_sub_tree = NULL;",
          "",
          "[Removed Lines]",
          "853:     DBG0(\"dissect reply\\n\");",
          "",
          "[Added Lines]",
          "851:     DBG(\"dissect reply\\n\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "885:     offset++;",
          "890:     tvb_data_remained = tvb_reported_length_remaining(tvb, offset);",
          "",
          "[Removed Lines]",
          "887:     DBG1(\"consumed --> %d\\n\", 5);",
          "",
          "[Added Lines]",
          "885:     DBG(\"consumed --> %d\\n\", 5);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "901:                     reported_reply_data - tvb_data_remained);",
          "905:         return;",
          "906:     }",
          "",
          "[Removed Lines]",
          "904:         DBG1(\"consumed --> %d\\n\", tvb_data_remained);",
          "",
          "[Added Lines]",
          "902:         DBG(\"consumed --> %d\\n\", tvb_data_remained);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "910:     proto_tree_add_item(icep_sub_tree, hf_icep_reply_data, tvb, offset, reported_reply_data, ENC_NA);",
          "914: }",
          "916: static guint get_icep_pdu_len(packet_info *pinfo _U_, tvbuff_t *tvb,",
          "",
          "[Removed Lines]",
          "913:     DBG1(\"consumed --> %d\\n\", reported_reply_data);",
          "",
          "[Added Lines]",
          "911:     DBG(\"consumed --> %d\\n\", reported_reply_data);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "948:                     icep_msgtype_vals,",
          "949:                     \"Unknown Message Type: 0x%02x\"));",
          "",
          "[Removed Lines]",
          "951:     DBG0(\"got an icep msg, start analysis\\n\");",
          "",
          "[Added Lines]",
          "949:     DBG(\"got an icep msg, start analysis\\n\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "997:     switch(tvb_get_guint8(tvb, 8)) {",
          "998:     case 0x0:",
          "1000:             tvb_captured_length_remaining(tvb, offset));",
          "1001:         dissect_icep_request(tvb, offset, pinfo, icep_tree, ti);",
          "1002:         break;",
          "1003:     case 0x1:",
          "1005:             tvb_captured_length_remaining(tvb, offset));",
          "1006:         dissect_icep_batch_request(tvb, offset, pinfo, icep_tree, ti);",
          "1007:         break;",
          "1008:     case 0x2:",
          "1010:             tvb_captured_length_remaining(tvb, offset));",
          "1011:         dissect_icep_reply(tvb, offset, pinfo, icep_tree, ti);",
          "1012:         break;",
          "",
          "[Removed Lines]",
          "999:         DBG1(\"request message body: parsing %d bytes\\n\",",
          "1004:         DBG1(\"batch request message body: parsing %d bytes\\n\",",
          "1009:         DBG1(\"reply message body: parsing %d bytes\\n\",",
          "",
          "[Added Lines]",
          "997:         DBG(\"request message body: parsing %d bytes\\n\",",
          "1002:         DBG(\"batch request message body: parsing %d bytes\\n\",",
          "1007:         DBG(\"reply message body: parsing %d bytes\\n\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1025: static gboolean dissect_icep_tcp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "1026: {",
          "1029:     if ( tvb_memeql(tvb, 0, icep_magic, 4) == -1 ) {",
          "",
          "[Removed Lines]",
          "1027:     DBG0(\"triggered\\n\");",
          "",
          "[Added Lines]",
          "1025:     DBG(\"triggered\\n\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1042: static gboolean dissect_icep_udp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "1043: {",
          "1046:     if ( tvb_memeql(tvb, 0, icep_magic, 4) == -1 ) {",
          "",
          "[Removed Lines]",
          "1044:     DBG0(\"triggered\\n\");",
          "",
          "[Added Lines]",
          "1042:     DBG(\"triggered\\n\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nbap.c||epan/dissectors/packet-nbap.c": [
          "File: epan/dissectors/packet-nbap.c -> epan/dissectors/packet-nbap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #if 0",
          "71: #else",
          "77: #endif",
          "79: void proto_register_nbap(void);",
          "",
          "[Removed Lines]",
          "66: #define nbap_debug0(str) g_warning(str)",
          "67: #define nbap_debug1(str,p1) g_warning(str,p1)",
          "68: #define nbap_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "69: #define nbap_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "70: #define nbap_debug4(str,p1,p2,p3,p4) g_warning(str,p1,p2,p3,p4)",
          "72: #define nbap_debug0(str)",
          "73: #define nbap_debug1(str,p1)",
          "74: #define nbap_debug2(str,p1,p2)",
          "75: #define nbap_debug3(str,p1,p2,p3)",
          "76: #define nbap_debug4(str,p1,p2,p3,p4)",
          "",
          "[Added Lines]",
          "66: #define nbap_debug(...) g_warning(__VA_ARGS__)",
          "68: #define nbap_debug(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1544: } ProtocolIE_ID_enum;",
          "1550: static int proto_nbap = -1;",
          "",
          "[Removed Lines]",
          "1547: #line 82 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "1539: #line 74 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4848: static int hf_nbap_RACH_SubChannelNumbers_subCh0 = -1;",
          "4854: static int ett_nbap = -1;",
          "",
          "[Removed Lines]",
          "4851: #line 90 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "4843: #line 82 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6487: static gint ett_nbap_Outcome = -1;",
          "6492: static expert_field ei_nbap_no_find_comm_context_id = EI_INIT;",
          "6493: static expert_field ei_nbap_no_find_port_info = EI_INIT;",
          "",
          "[Removed Lines]",
          "6490: #line 98 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "6482: #line 90 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "18494:         return offset;",
          "18495:     }",
          "18498:         actx->pinfo->fd->num);",
          "",
          "[Removed Lines]",
          "18497:     nbap_debug1(\"Frame %u E-DCH-MACdFlow-Specific-InfoItem-to-Modify\",",
          "",
          "[Added Lines]",
          "18489:     nbap_debug(\"Frame %u E-DCH-MACdFlow-Specific-InfoItem-to-Modify\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "18515:         expert_add_info(actx->pinfo, NULL, &ei_nbap_no_find_port_info);",
          "18516:         return offset;",
          "18517:     }",
          "18521:     BindingID_port = old_info->crnc_port[e_dch_macdflow_id];",
          "18524:         BindingID_port,",
          "18525:         e_dch_macdflow_id);",
          "",
          "[Removed Lines]",
          "18518:     nbap_debug1(\"    Found com_context_id %u\", com_context_id);",
          "18523:     nbap_debug2(\" Port %u loaded from old_info->crnc_port[e_dch_macdflow_id %u]\",",
          "",
          "[Added Lines]",
          "18510:     nbap_debug(\"    Found com_context_id %u\", com_context_id);",
          "18515:     nbap_debug(\" Port %u loaded from old_info->crnc_port[e_dch_macdflow_id %u]\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "18649:             0, NO_ADDR_B|NO_PORT_B);",
          "18651:         if(old_conversation){",
          "18653:                 actx->pinfo->fd->num,",
          "18654:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "18655:                 BindingID_port);",
          "18656:         }else{",
          "18658:                 actx->pinfo->fd->num,",
          "18659:                 address_to_str(wmem_packet_scope(), &dst_addr),",
          "18660:                 BindingID_port);",
          "",
          "[Removed Lines]",
          "18652:             nbap_debug3(\"Frame %u E-DCH-FDD-Information-to-Modify: found old conv on IP %s Port %u\",",
          "18657:             nbap_debug3(\"Frame %u E-DCH-FDD-Information-to-Modify: Did not find old conv on IP %s Port %u\",",
          "",
          "[Added Lines]",
          "18644:             nbap_debug(\"Frame %u E-DCH-FDD-Information-to-Modify: found old conv on IP %s Port %u\",",
          "18649:             nbap_debug(\"Frame %u E-DCH-FDD-Information-to-Modify: Did not find old conv on IP %s Port %u\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "23793:     SET_ADDRESS(&null_addr, AT_NONE, 0, NULL);",
          "23794:     for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "23795:         if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "23797:                         actx->pinfo->fd->num,",
          "23798:                         i,",
          "23799:                         address_to_str (wmem_packet_scope(), &(nbap_hsdsch_channel_info[i].crnc_address)),",
          "",
          "[Removed Lines]",
          "23796:             nbap_debug4(\"Frame %u HSDSCH-MACdFlows-Information:hsdsch_macdflow_id %u Look for conv on IP %s Port %u\",",
          "",
          "[Added Lines]",
          "23788:             nbap_debug(\"Frame %u HSDSCH-MACdFlows-Information:hsdsch_macdflow_id %u Look for conv on IP %s Port %u\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "23806:             if (conversation == NULL) {",
          "23809:                 conversation = conversation_new(actx->pinfo->fd->num, &(nbap_hsdsch_channel_info[i].crnc_address),",
          "23810:                     &null_addr, PT_UDP, nbap_hsdsch_channel_info[i].crnc_port,",
          "23811:                     0, NO_ADDR2|NO_PORT2);",
          "",
          "[Removed Lines]",
          "23808:                 nbap_debug2(\"Frame %u HSDSCH-MACdFlows-Information: Set up conv on Port %u\", actx->pinfo->fd->num, nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "[Added Lines]",
          "23800:                 nbap_debug(\"Frame %u HSDSCH-MACdFlows-Information: Set up conv on Port %u\", actx->pinfo->fd->num, nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "24127:     SET_ADDRESS(&null_addr, AT_NONE, 0, NULL);",
          "24130:         actx->pinfo->fd->num);",
          "24132:     for (i = 0; i < maxNrOfMACdFlows; i++) {",
          "24133:         if (nbap_hsdsch_channel_info[i].crnc_port != 0){",
          "24135:                         i,",
          "24136:                         address_to_str (wmem_packet_scope(), &(nbap_hsdsch_channel_info[i].crnc_address)),",
          "24137:                         nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "[Removed Lines]",
          "24129:     nbap_debug1(\"Frame %u HSDSCH-MACdFlows-Information Start\",",
          "24134:             nbap_debug3(\"    hsdsch_macdflow_id %u Look for conv on IP %s Port %u\",",
          "",
          "[Added Lines]",
          "24121:     nbap_debug(\"Frame %u HSDSCH-MACdFlows-Information Start\",",
          "24126:             nbap_debug(\"    hsdsch_macdflow_id %u Look for conv on IP %s Port %u\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "24143:             if (conversation == NULL) {",
          "24147:                 conversation = conversation_new(actx->pinfo->fd->num, &(nbap_hsdsch_channel_info[i].crnc_address),",
          "24148:                     &null_addr, PT_UDP, nbap_hsdsch_channel_info[i].crnc_port,",
          "",
          "[Removed Lines]",
          "24145:                 nbap_debug1(\"    Set up conv on Port %u\", nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "[Added Lines]",
          "24137:                 nbap_debug(\"    Set up conv on Port %u\", nbap_hsdsch_channel_info[i].crnc_port);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "24194:                 }",
          "24195:             }",
          "24196:         }",
          "24198:             actx->pinfo->fd->num);",
          "24200:     }",
          "",
          "[Removed Lines]",
          "24197:         nbap_debug1(\"Frame %u HSDSCH-MACdFlows-Information End\",",
          "",
          "[Added Lines]",
          "24189:         nbap_debug(\"Frame %u HSDSCH-MACdFlows-Information End\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "28746:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "28747:             }",
          "28753:         }",
          "",
          "[Removed Lines]",
          "28749:             nbap_debug1(\"Frame %u RL-Specific-DCH-Info-Item Start\", actx->pinfo->fd->num);",
          "28750:             nbap_debug1(\"    Total no of ch in flow will be: %d\", umts_fp_conversation_info->num_dch_in_flow);",
          "28751:             nbap_debug1(\"Frame %u RL-Specific-DCH-Info-Item End\", actx->pinfo->fd->num);",
          "",
          "[Added Lines]",
          "28741:             nbap_debug(\"Frame %u RL-Specific-DCH-Info-Item Start\", actx->pinfo->fd->num);",
          "28742:             nbap_debug(\"    Total no of ch in flow will be: %d\", umts_fp_conversation_info->num_dch_in_flow);",
          "28743:             nbap_debug(\"Frame %u RL-Specific-DCH-Info-Item End\", actx->pinfo->fd->num);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "28864:                     nbap_edch_port_info->crnc_address = transportLayerAddress_ipv4;",
          "28867:                         actx->pinfo->fd->num);",
          "28870:                         umts_fp_conversation_info->com_context_id,",
          "28871:                         e_dch_macdflow_id,",
          "28872:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "",
          "[Removed Lines]",
          "28866:                     nbap_debug1(\"Frame %u RL-Specific-E-DCH-Information-Item Start\",",
          "28869:                     nbap_debug4(\"    g_tree_insert(edch_flow_port_map) com_context_id %u e_dch_macdflow_id %u IP %s Port %u\",",
          "",
          "[Added Lines]",
          "28858:                     nbap_debug(\"Frame %u RL-Specific-E-DCH-Information-Item Start\",",
          "28861:                     nbap_debug(\"    g_tree_insert(edch_flow_port_map) com_context_id %u e_dch_macdflow_id %u IP %s Port %u\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "28875:                     g_tree_insert(edch_flow_port_map, GINT_TO_POINTER((gint)umts_fp_conversation_info->com_context_id), nbap_edch_port_info);",
          "28876:                 }else{",
          "28879:                         umts_fp_conversation_info->com_context_id,",
          "28880:                         e_dch_macdflow_id,",
          "28881:                         address_to_str(wmem_packet_scope(), &dst_addr),",
          "",
          "[Removed Lines]",
          "28878:                     nbap_debug4(\"    Insert in existing edch_flow_port_map com_context_id %u e_dch_macdflow_id %u IP %s Port %u\",",
          "",
          "[Added Lines]",
          "28870:                     nbap_debug(\"    Insert in existing edch_flow_port_map com_context_id %u e_dch_macdflow_id %u IP %s Port %u\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "28892:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "28895:             }",
          "28896:     }",
          "",
          "[Removed Lines]",
          "28894:                 nbap_debug1(\"Frame %u RL-Specific-E-DCH-Information-Item End\", actx->pinfo->fd->num);",
          "",
          "[Added Lines]",
          "28886:                 nbap_debug(\"Frame %u RL-Specific-E-DCH-Information-Item End\", actx->pinfo->fd->num);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "32569:                 umts_fp_conversation_info->fp_dch_channel_info[0].num_ul_chans = num_tf = nbap_dch_chnl_info[commontransportchannelid].num_ul_chans;",
          "32572:                         actx->pinfo->fd->num,",
          "32573:                         num_tf);",
          "32575:                 for (j = 0; j < num_tf; j++) {",
          "32576:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j];",
          "32577:                     umts_fp_conversation_info->fp_dch_channel_info[0].ul_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].ul_chan_num_tbs[j];",
          "32579:                 }",
          "",
          "[Removed Lines]",
          "32571:                 nbap_debug2(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %u\",",
          "32578:                     nbap_debug2(\"    UL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "",
          "[Added Lines]",
          "32563:                 nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD Start: num_tf %u\",",
          "32570:                     nbap_debug(\"    UL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].ul_chan_tf_size[j]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "32583:                 for (j = 0; j < num_tf; j++) {",
          "32584:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_tf_size[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j];",
          "32585:                     umts_fp_conversation_info->fp_dch_channel_info[0].dl_chan_num_tbs[j] = nbap_dch_chnl_info[commontransportchannelid].dl_chan_num_tbs[j];",
          "32587:                 }",
          "32590:                 i = commontransportchannelid;",
          "32594:                 umts_fp_conversation_info->dchs_in_flow_list[0] = commontransportchannelid;",
          "32595:                 while(nbap_dch_chnl_info[i].next_dch != 0){",
          "",
          "[Removed Lines]",
          "32586:                     nbap_debug2(\"    DL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "32592:                 nbap_debug2(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "",
          "[Added Lines]",
          "32578:                     nbap_debug(\"    DL tf %u ul_chan_tf_size %u\",j, nbap_dch_chnl_info[commontransportchannelid].dl_chan_tf_size[j]);",
          "32584:                 nbap_debug(\"    commontransportchannelid %u next ch %u\",commontransportchannelid, nbap_dch_chnl_info[i].next_dch);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "32612:                 }",
          "32613:                 umts_fp_conversation_info->num_dch_in_flow++;",
          "32617:                 umts_fp_conversation_info->dchs_in_flow_list[umts_fp_conversation_info->num_dch_in_flow] = i;",
          "32618:                 set_umts_fp_conv_data(conversation, umts_fp_conversation_info);",
          "32621:                         actx->pinfo->fd->num);",
          "32623:             }",
          "",
          "[Removed Lines]",
          "32615:                 nbap_debug1(\"    num_dch_in_flow %u\", umts_fp_conversation_info->num_dch_in_flow);",
          "32620:                 nbap_debug1(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "",
          "[Added Lines]",
          "32607:                 nbap_debug(\"    num_dch_in_flow %u\", umts_fp_conversation_info->num_dch_in_flow);",
          "32612:                 nbap_debug(\"Frame %u PCH-ParametersItem-CTCH-SetupRqstFDD End\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "55172: static int dissect_ProtocolIEFieldValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "55173: {",
          "",
          "[Removed Lines]",
          "55170: #line 320 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "55162: #line 312 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "68501:         NULL, HFILL }},",
          "68505:  };",
          "",
          "[Removed Lines]",
          "68504: #line 489 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "68496: #line 481 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "70141:     &ett_nbap_Outcome,",
          "70145:  };",
          "70147:  static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "70144: #line 498 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "70136: #line 490 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "71300: }",
          "",
          "[Removed Lines]",
          "71299: #line 556 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "[Added Lines]",
          "71291: #line 548 \"../../asn1/nbap/packet-nbap-template.c\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c": [
          "File: epan/dissectors/packet-netflow.c -> epan/dissectors/packet-netflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: void proto_reg_handoff_netflow(void);",
          "143: #if 0",
          "148: #else",
          "153: #endif",
          "",
          "[Removed Lines]",
          "144: #define ipfix_debug0(str) g_warning(str)",
          "145: #define ipfix_debug1(str,p1) g_warning(str,p1)",
          "146: #define ipfix_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "147: #define ipfix_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "149: #define ipfix_debug0(str)",
          "150: #define ipfix_debug1(str,p1)",
          "151: #define ipfix_debug2(str,p1,p2)",
          "152: #define ipfix_debug3(str,p1,p2,p3)",
          "",
          "[Added Lines]",
          "144: #define ipfix_debug(...) g_warning(__VA_ARGS__)",
          "146: #define ipfix_debug(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2313:     dissect_pdu_t  *pduptr;",
          "2314:     guint32         flows_seen = 0;",
          "2318:     ver = tvb_get_ntohs(tvb, offset);",
          "2322:     switch (ver) {",
          "2323:     case 1:",
          "",
          "[Removed Lines]",
          "2316:     ipfix_debug0(\"dissect_netflow: start\");",
          "2320:     ipfix_debug1(\"dissect_netflow: found version %d\", ver);",
          "",
          "[Added Lines]",
          "2310:     ipfix_debug(\"dissect_netflow: start\");",
          "2314:     ipfix_debug(\"dissect_netflow: found version %d\", ver);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2352:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"CFLOW\");",
          "2353:     col_clear(pinfo->cinfo, COL_INFO);",
          "2356:     if (tree) {",
          "2357:         ti = proto_tree_add_item(tree, proto_netflow, tvb, offset, -1, ENC_NA);",
          "2358:         netflow_tree = proto_item_add_subtree(ti, ett_netflow);",
          "2359:     }",
          "2362:     hdrinfo.vspec = ver;",
          "2363:     hdrinfo.src_id = 0;",
          "",
          "[Removed Lines]",
          "2354:     ipfix_debug0(\"dissect_netflow: column cleared\");",
          "2360:     ipfix_debug0(\"dissect_netflow: tree added\");",
          "",
          "[Added Lines]",
          "2348:     ipfix_debug(\"dissect_netflow: column cleared\");",
          "2354:     ipfix_debug(\"dissect_netflow: tree added\");",
          "",
          "---------------"
        ],
        "tshark.c||tshark.c": [
          "File: tshark.c -> tshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: #if 0",
          "143: #else",
          "148: #endif",
          "",
          "[Removed Lines]",
          "139: #define tshark_debug0(str) g_warning(str)",
          "140: #define tshark_debug1(str,p1) g_warning(str,p1)",
          "141: #define tshark_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "142: #define tshark_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "144: #define tshark_debug0(str)",
          "145: #define tshark_debug1(str,p1)",
          "146: #define tshark_debug2(str,p1,p2)",
          "147: #define tshark_debug3(str,p1,p2,p3)",
          "",
          "[Added Lines]",
          "139: #define tshark_debug(...) g_warning(__VA_ARGS__)",
          "141: #define tshark_debug(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1052:   static const char    optstring[] = OPTSTRING;",
          "1057:   setlocale(LC_ALL, \"\");",
          "",
          "[Removed Lines]",
          "1054:   tshark_debug1(\"tshark started with %d args\", argc);",
          "",
          "[Added Lines]",
          "1048:   tshark_debug(\"tshark started with %d args\", argc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1309:     return 0;",
          "1310:   }",
          "1314:   prefs_p = read_prefs(&gpf_open_errno, &gpf_read_errno, &gpf_path,",
          "1315:                      &pf_open_errno, &pf_read_errno, &pf_path);",
          "",
          "[Removed Lines]",
          "1312:   tshark_debug0(\"tshark reading preferences\");",
          "",
          "[Added Lines]",
          "1306:   tshark_debug(\"tshark reading preferences\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2112: #endif",
          "2114:   if (rfilter != NULL) {",
          "2116:     if (!dfilter_compile(rfilter, &rfcode, &err_msg)) {",
          "2117:       cmdarg_err(\"%s\", err_msg);",
          "2118:       g_free(err_msg);",
          "",
          "[Removed Lines]",
          "2115:     tshark_debug1(\"Compiling read filter: '%s'\", rfilter);",
          "",
          "[Added Lines]",
          "2109:     tshark_debug(\"Compiling read filter: '%s'\", rfilter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2138:   cfile.rfcode = rfcode;",
          "2140:   if (dfilter != NULL) {",
          "2142:     if (!dfilter_compile(dfilter, &dfcode, &err_msg)) {",
          "2143:       cmdarg_err(\"%s\", err_msg);",
          "2144:       g_free(err_msg);",
          "",
          "[Removed Lines]",
          "2141:     tshark_debug1(\"Compiling display filter: '%s'\", dfilter);",
          "",
          "[Added Lines]",
          "2135:     tshark_debug(\"Compiling display filter: '%s'\", dfilter);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2195:   do_dissection = print_packet_info || rfcode || dfcode || tap_listeners_require_dissection();",
          "2198:   if (cf_name) {",
          "",
          "[Removed Lines]",
          "2196:   tshark_debug1(\"tshark: do_dissection = %s\", do_dissection ? \"TRUE\" : \"FALSE\");",
          "2199:     tshark_debug1(\"tshark: Opening capture file: %s\", cf_name);",
          "",
          "[Added Lines]",
          "2190:   tshark_debug(\"tshark: do_dissection = %s\", do_dissection ? \"TRUE\" : \"FALSE\");",
          "2193:     tshark_debug(\"tshark: Opening capture file: %s\", cf_name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2206:     }",
          "2210:     TRY {",
          "2211: #ifdef HAVE_LIBPCAP",
          "2212:       err = load_cap_file(&cfile, global_capture_opts.save_file, out_file_type, out_file_name_res,",
          "",
          "[Removed Lines]",
          "2209:     tshark_debug0(\"tshark: invoking load_cap_file() to process the packets\");",
          "",
          "[Added Lines]",
          "2203:     tshark_debug(\"tshark: invoking load_cap_file() to process the packets\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2233:       exit_status = 2;",
          "2234:     }",
          "2235:   } else {",
          "2238:        or get a list of link-layer types for a live capture device;",
          "",
          "[Removed Lines]",
          "2236:     tshark_debug0(\"tshark: no capture file specified\");",
          "",
          "[Added Lines]",
          "2230:     tshark_debug(\"tshark: no capture file specified\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2316:       }",
          "2317:     }",
          "",
          "[Removed Lines]",
          "2319:     tshark_debug0(\"tshark: performing live capture\");",
          "",
          "[Added Lines]",
          "2313:     tshark_debug(\"tshark: performing live capture\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3201:       snapshot_length = WTAP_MAX_PACKET_SIZE;",
          "3202:     }",
          "3205:     shb_hdr = wtap_file_get_shb_for_new_file(cf->wth);",
          "3206:     nrb_hdr = wtap_file_get_nrb_for_new_file(cf->wth);",
          "",
          "[Removed Lines]",
          "3203:     tshark_debug1(\"tshark: snapshot_length = %d\", snapshot_length);",
          "",
          "[Added Lines]",
          "3197:     tshark_debug(\"tshark: snapshot_length = %d\", snapshot_length);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3214:     if (linktype != WTAP_ENCAP_PER_PACKET &&",
          "3215:         out_file_type == WTAP_FILE_TYPE_SUBTYPE_PCAP) {",
          "3217:         pdh = wtap_dump_open(save_file, out_file_type, linktype,",
          "3218:             snapshot_length, FALSE /* compressed */, &err);",
          "3219:     }",
          "3220:     else {",
          "3222:         pdh = wtap_dump_open_ng(save_file, out_file_type, linktype,",
          "3223:             snapshot_length, FALSE /* compressed */, shb_hdr, idb_inf, nrb_hdr, &err);",
          "3224:     }",
          "",
          "[Removed Lines]",
          "3216:         tshark_debug1(\"tshark: writing PCAP format to %s\", save_file);",
          "3221:         tshark_debug2(\"tshark: writing format type %d, to %s\", out_file_type, save_file);",
          "",
          "[Added Lines]",
          "3210:         tshark_debug(\"tshark: writing PCAP format to %s\", save_file);",
          "3215:         tshark_debug(\"tshark: writing format type %d, to %s\", out_file_type, save_file);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3279:   if (perform_two_pass_analysis) {",
          "3280:     frame_data *fdata;",
          "3285:     cf->frames = new_frame_data_sequence();",
          "",
          "[Removed Lines]",
          "3282:     tshark_debug1(\"tshark: perform_two_pass_analysis, do_dissection=%s\", do_dissection ? \"TRUE\" : \"FALSE\");",
          "",
          "[Added Lines]",
          "3276:     tshark_debug(\"tshark: perform_two_pass_analysis, do_dissection=%s\", do_dissection ? \"TRUE\" : \"FALSE\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3292:       if (cf->rfcode || cf->dfcode)",
          "3293:         create_proto_tree = TRUE;",
          "3299:       edt = epan_dissect_new(cf->epan, create_proto_tree, FALSE);",
          "3300:     }",
          "3303:     while (wtap_read(cf->wth, &err, &err_info, &data_offset)) {",
          "3304:       if (process_packet_first_pass(cf, edt, data_offset, wtap_phdr(cf->wth),",
          "3305:                          wtap_buf_ptr(cf->wth))) {",
          "",
          "[Removed Lines]",
          "3295:       tshark_debug1(\"tshark: create_proto_tree = %s\", create_proto_tree ? \"TRUE\" : \"FALSE\");",
          "3302:     tshark_debug0(\"tshark: reading records for first pass\");",
          "",
          "[Added Lines]",
          "3289:       tshark_debug(\"tshark: create_proto_tree = %s\", create_proto_tree ? \"TRUE\" : \"FALSE\");",
          "3296:     tshark_debug(\"tshark: reading records for first pass\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3311:         if ( (--max_packet_count == 0) || (max_byte_count != 0 && data_offset >= max_byte_count)) {",
          "3313:                         max_packet_count, data_offset, max_byte_count);",
          "3315:           break;",
          "",
          "[Removed Lines]",
          "3312:           tshark_debug3(\"tshark: max_packet_count (%d) or max_byte_count (%\" G_GINT64_MODIFIER \"d/%\" G_GINT64_MODIFIER \"d) reached\",",
          "",
          "[Added Lines]",
          "3306:           tshark_debug(\"tshark: max_packet_count (%d) or max_byte_count (%\" G_GINT64_MODIFIER \"d/%\" G_GINT64_MODIFIER \"d) reached\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3333:     prev_cap = NULL;",
          "3334:     ws_buffer_init(&buf, 1500);",
          "3338:     if (do_dissection) {",
          "3339:       gboolean create_proto_tree;",
          "",
          "[Removed Lines]",
          "3336:     tshark_debug0(\"tshark: done with first pass\");",
          "",
          "[Added Lines]",
          "3330:     tshark_debug(\"tshark: done with first pass\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3344:       else",
          "3345:            create_proto_tree = FALSE;",
          "3350:          printing packet details, which is true if we're printing stuff",
          "",
          "[Removed Lines]",
          "3347:       tshark_debug1(\"tshark: create_proto_tree = %s\", create_proto_tree ? \"TRUE\" : \"FALSE\");",
          "",
          "[Added Lines]",
          "3341:       tshark_debug(\"tshark: create_proto_tree = %s\", create_proto_tree ? \"TRUE\" : \"FALSE\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3357:       fdata = frame_data_sequence_find(cf->frames, framenum);",
          "3358:       if (wtap_seek_read(cf->wth, fdata->file_off, &phdr, &buf, &err,",
          "3359:                          &err_info)) {",
          "3361:         if (process_packet_second_pass(cf, edt, fdata, &phdr, &buf,",
          "3362:                                        tap_flags)) {",
          "3364:              filter, so, if we're writing to a capture file, write",
          "3366:           if (pdh != NULL) {",
          "3368:             if (!wtap_dump(pdh, &phdr, ws_buffer_start_ptr(&buf), &err, &err_info)) {",
          "3371:               switch (err) {",
          "3373:               case WTAP_ERR_UNWRITABLE_ENCAP:",
          "",
          "[Removed Lines]",
          "3360:         tshark_debug1(\"tshark: invoking process_packet_second_pass() for frame #%d\", framenum);",
          "3367:             tshark_debug1(\"tshark: writing packet #%d to outfile\", framenum);",
          "3370:               tshark_debug1(\"tshark: error writing to a capture file (%d)\", err);",
          "",
          "[Added Lines]",
          "3354:         tshark_debug(\"tshark: invoking process_packet_second_pass() for frame #%d\", framenum);",
          "3361:             tshark_debug(\"tshark: writing packet #%d to outfile\", framenum);",
          "3364:               tshark_debug(\"tshark: error writing to a capture file (%d)\", err);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3454:     ws_buffer_free(&buf);",
          "3457:   }",
          "3458:   else {",
          "3460:     framenum = 0;",
          "3464:     if (do_dissection) {",
          "3465:       gboolean create_proto_tree;",
          "",
          "[Removed Lines]",
          "3456:     tshark_debug0(\"tshark: done with second pass\");",
          "3462:     tshark_debug1(\"tshark: perform one pass analysis, do_dissection=%s\", do_dissection ? \"TRUE\" : \"FALSE\");",
          "",
          "[Added Lines]",
          "3450:     tshark_debug(\"tshark: done with second pass\");",
          "3456:     tshark_debug(\"tshark: perform one pass analysis, do_dissection=%s\", do_dissection ? \"TRUE\" : \"FALSE\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3470:       else",
          "3471:         create_proto_tree = FALSE;",
          "3476:          printing packet details, which is true if we're printing stuff",
          "",
          "[Removed Lines]",
          "3473:       tshark_debug1(\"tshark: create_proto_tree = %s\", create_proto_tree ? \"TRUE\" : \"FALSE\");",
          "",
          "[Added Lines]",
          "3467:       tshark_debug(\"tshark: create_proto_tree = %s\", create_proto_tree ? \"TRUE\" : \"FALSE\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3482:     while (wtap_read(cf->wth, &err, &err_info, &data_offset)) {",
          "3483:       framenum++;",
          "3487:       if (process_packet(cf, edt, data_offset, wtap_phdr(cf->wth),",
          "3488:                          wtap_buf_ptr(cf->wth),",
          "",
          "[Removed Lines]",
          "3485:       tshark_debug1(\"tshark: processing packet #%d\", framenum);",
          "",
          "[Added Lines]",
          "3479:       tshark_debug(\"tshark: processing packet #%d\", framenum);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3491:            filter, so, if we're writing to a capture file, write",
          "3493:         if (pdh != NULL) {",
          "3495:           if (!wtap_dump(pdh, wtap_phdr(cf->wth), wtap_buf_ptr(cf->wth), &err, &err_info)) {",
          "3498:             switch (err) {",
          "3500:             case WTAP_ERR_UNWRITABLE_ENCAP:",
          "",
          "[Removed Lines]",
          "3494:           tshark_debug1(\"tshark: writing packet #%d to outfile\", framenum);",
          "3497:             tshark_debug1(\"tshark: error writing to a capture file (%d)\", err);",
          "",
          "[Added Lines]",
          "3488:           tshark_debug(\"tshark: writing packet #%d to outfile\", framenum);",
          "3491:             tshark_debug(\"tshark: error writing to a capture file (%d)\", err);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3566:       if ( (--max_packet_count == 0) || (max_byte_count != 0 && data_offset >= max_byte_count)) {",
          "3568:                       max_packet_count, data_offset, max_byte_count);",
          "3570:         break;",
          "",
          "[Removed Lines]",
          "3567:         tshark_debug3(\"tshark: max_packet_count (%d) or max_byte_count (%\" G_GINT64_MODIFIER \"d/%\" G_GINT64_MODIFIER \"d) reached\",",
          "",
          "[Added Lines]",
          "3561:         tshark_debug(\"tshark: max_packet_count (%d) or max_byte_count (%\" G_GINT64_MODIFIER \"d/%\" G_GINT64_MODIFIER \"d) reached\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3580:   wtap_phdr_cleanup(&phdr);",
          "3582:   if (err != 0) {",
          "",
          "[Removed Lines]",
          "3583:     tshark_debug1(\"tshark: something failed along the line (%d)\", err);",
          "",
          "[Added Lines]",
          "3577:     tshark_debug(\"tshark: something failed along the line (%d)\", err);",
          "",
          "---------------"
        ],
        "wiretap/ipfix.c||wiretap/ipfix.c": [
          "File: wiretap/ipfix.c -> wiretap/ipfix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #include \"ipfix.h\"",
          "70: #if 0",
          "75: #else",
          "80: #endif",
          "82: #define RECORDS_FOR_IPFIX_CHECK 20",
          "",
          "[Removed Lines]",
          "71: #define ipfix_debug0(str) g_warning(str)",
          "72: #define ipfix_debug1(str,p1) g_warning(str,p1)",
          "73: #define ipfix_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "74: #define ipfix_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "76: #define ipfix_debug0(str)",
          "77: #define ipfix_debug1(str,p1)",
          "78: #define ipfix_debug2(str,p1,p2)",
          "79: #define ipfix_debug3(str,p1,p2,p3)",
          "",
          "[Added Lines]",
          "71: #define ipfix_debug(...) g_warning(__VA_ARGS__)",
          "73: #define ipfix_debug(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     if (file_seek(fh, 0 - IPFIX_MSG_HDR_SIZE, SEEK_CUR, err) == -1) {",
          "147:         return FALSE;",
          "148:     }",
          "",
          "[Removed Lines]",
          "146:         ipfix_debug0(\"ipfix_read: couldn't go back in file before header\");",
          "",
          "[Added Lines]",
          "140:         ipfix_debug(\"ipfix_read: couldn't go back in file before header\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:     ipfix_message_header_t msg_hdr;",
          "190:     ipfix_set_header_t set_hdr;",
          "195:     if ((s = getenv(\"IPFIX_RECORDS_TO_CHECK\")) != NULL) {",
          "",
          "[Removed Lines]",
          "192:     ipfix_debug0(\"ipfix_open: opening file\");",
          "",
          "[Added Lines]",
          "186:     ipfix_debug(\"ipfix_open: opening file\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:     for (i = 0; i < records_for_ipfix_check; i++) {",
          "208:         if (!ipfix_read_message_header(&msg_hdr, wth->fh, err, err_info)) {",
          "210:                          i, *err, *err_info);",
          "211:             if (*err == WTAP_ERR_BAD_FILE) {",
          "",
          "[Removed Lines]",
          "209:             ipfix_debug3(\"ipfix_open: couldn't read message header #%d with err code #%d (%s)\",",
          "",
          "[Added Lines]",
          "203:             ipfix_debug(\"ipfix_open: couldn't read message header #%d with err code #%d (%s)\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:             break;",
          "231:         }",
          "232:         if (file_seek(wth->fh, IPFIX_MSG_HDR_SIZE, SEEK_CUR, err) == -1) {",
          "234:                          msg_hdr.message_length);",
          "235:             return WTAP_OPEN_NOT_MINE;",
          "236:         }",
          "",
          "[Removed Lines]",
          "233:             ipfix_debug1(\"ipfix_open: failed seek to next message in file, %d bytes away\",",
          "",
          "[Added Lines]",
          "227:             ipfix_debug(\"ipfix_open: failed seek to next message in file, %d bytes away\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:                                  err, err_info)) {",
          "243:                 if (*err == WTAP_ERR_SHORT_READ) {",
          "246:                     return WTAP_OPEN_NOT_MINE;",
          "247:                 }",
          "",
          "[Removed Lines]",
          "245:                     ipfix_debug1(\"ipfix_open: error %d reading set\", *err);",
          "",
          "[Added Lines]",
          "239:                     ipfix_debug(\"ipfix_open: error %d reading set\", *err);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "252:             set_hdr.set_length = g_ntohs(set_hdr.set_length);",
          "253:             if ((set_hdr.set_length < IPFIX_SET_HDR_SIZE) ||",
          "254:                 ((set_hdr.set_length + checked_len) > msg_hdr.message_length))  {",
          "256:                              set_hdr.set_length);",
          "257:                 return WTAP_OPEN_NOT_MINE;",
          "258:             }",
          "",
          "[Removed Lines]",
          "255:                 ipfix_debug1(\"ipfix_open: found invalid set_length of %d\",",
          "",
          "[Added Lines]",
          "249:                 ipfix_debug(\"ipfix_open: found invalid set_length of %d\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:             if (file_seek(wth->fh, set_hdr.set_length - IPFIX_SET_HDR_SIZE,",
          "261:                  SEEK_CUR, err) == -1)",
          "262:             {",
          "264:                              set_hdr.set_length - IPFIX_SET_HDR_SIZE);",
          "265:                 return WTAP_OPEN_ERROR;",
          "266:             }",
          "",
          "[Removed Lines]",
          "263:                 ipfix_debug1(\"ipfix_open: failed seek to next set in file, %d bytes away\",",
          "",
          "[Added Lines]",
          "257:                 ipfix_debug(\"ipfix_open: failed seek to next set in file, %d bytes away\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "291: ipfix_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset)",
          "292: {",
          "296:     if (!ipfix_read_message(wth->fh, &wth->phdr, wth->frame_buffer, err, err_info)) {",
          "299:         return FALSE;",
          "300:     }",
          "",
          "[Removed Lines]",
          "294:     ipfix_debug1(\"ipfix_read: data_offset is initially %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "297:         ipfix_debug2(\"ipfix_read: couldn't read message header with code: %d\\n, and error '%s'\",",
          "",
          "[Added Lines]",
          "288:     ipfix_debug(\"ipfix_read: data_offset is initially %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "291:         ipfix_debug(\"ipfix_read: couldn't read message header with code: %d\\n, and error '%s'\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "310: {",
          "312:     if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1) {",
          "316:     }",
          "320:     if (!ipfix_read_message(wth->random_fh, phdr, buf, err, err_info)) {",
          "322:         if (*err == 0)",
          "324:         return FALSE;",
          "",
          "[Removed Lines]",
          "313:         ipfix_debug2(\"ipfix_seek_read: couldn't read message header with code: %d\\n, and error '%s'\",",
          "318:     ipfix_debug1(\"ipfix_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "321:         ipfix_debug0(\"ipfix_seek_read: couldn't read message header\");",
          "",
          "[Added Lines]",
          "307:         ipfix_debug(\"ipfix_seek_read: couldn't read message header with code: %d\\n, and error '%s'\",",
          "312:     ipfix_debug(\"ipfix_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "315:         ipfix_debug(\"ipfix_seek_read: couldn't read message header\");",
          "",
          "---------------"
        ],
        "wiretap/merge.c||wiretap/merge.c": [
          "File: wiretap/merge.c -> wiretap/merge.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #if 0",
          "48: #else",
          "53: #endif",
          "",
          "[Removed Lines]",
          "44: #define merge_debug0(str) g_warning(str)",
          "45: #define merge_debug1(str,p1) g_warning(str,p1)",
          "46: #define merge_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "47: #define merge_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "49: #define merge_debug0(str)",
          "50: #define merge_debug1(str,p1)",
          "51: #define merge_debug2(str,p1,p2)",
          "52: #define merge_debug3(str,p1,p2,p3)",
          "",
          "[Added Lines]",
          "44: #define merge_debug(...) g_warning(__VA_ARGS__)",
          "46: #define merge_debug(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410: {",
          "411:     g_assert(idb1 && idb2);",
          "415:                  (idb1->wtap_encap == idb2->wtap_encap) ? \"TRUE\":\"FALSE\");",
          "417:                  (idb1->time_units_per_second == idb2->time_units_per_second) ? \"TRUE\":\"FALSE\");",
          "419:                  (idb1->tsprecision == idb2->tsprecision) ? \"TRUE\":\"FALSE\");",
          "421:                  (idb1->link_type == idb2->link_type) ? \"TRUE\":\"FALSE\");",
          "423:                  (idb1->snap_len == idb2->snap_len) ? \"TRUE\":\"FALSE\");",
          "425:                  (idb1->if_speed == idb2->if_speed) ? \"TRUE\":\"FALSE\");",
          "427:                  (idb1->if_tsresol == idb2->if_tsresol) ? \"TRUE\":\"FALSE\");",
          "429:                  (idb1->if_fcslen == idb2->if_fcslen) ? \"TRUE\":\"FALSE\");",
          "431:                  (g_strcmp0(idb1->opt_comment, idb2->opt_comment) == 0) ? \"TRUE\":\"FALSE\");",
          "433:                  (g_strcmp0(idb1->if_name, idb2->if_name) == 0) ? \"TRUE\":\"FALSE\");",
          "435:                  (g_strcmp0(idb1->if_description, idb2->if_description) == 0) ? \"TRUE\":\"FALSE\");",
          "437:                  (g_strcmp0(idb1->if_os, idb2->if_os) == 0) ? \"TRUE\":\"FALSE\");",
          "441:     return (idb1->wtap_encap == idb2->wtap_encap &&",
          "",
          "[Removed Lines]",
          "413:     merge_debug0(\"merge::is_duplicate_idb() called\");",
          "414:     merge_debug1(\"idb1->wtap_encap == idb2->wtap_encap: %s\",",
          "416:     merge_debug1(\"idb1->time_units_per_second == idb2->time_units_per_second: %s\",",
          "418:     merge_debug1(\"idb1->tsprecision == idb2->tsprecision: %s\",",
          "420:     merge_debug1(\"idb1->link_type == idb2->link_type: %s\",",
          "422:     merge_debug1(\"idb1->snap_len == idb2->snap_len: %s\",",
          "424:     merge_debug1(\"idb1->if_speed == idb2->if_speed: %s\",",
          "426:     merge_debug1(\"idb1->if_tsresol == idb2->if_tsresol: %s\",",
          "428:     merge_debug1(\"idb1->if_fcslen == idb2->if_fcslen: %s\",",
          "430:     merge_debug1(\"g_strcmp0(idb1->opt_comment, idb2->opt_comment) == 0: %s\",",
          "432:     merge_debug1(\"g_strcmp0(idb1->if_name, idb2->if_name) == 0: %s\",",
          "434:     merge_debug1(\"g_strcmp0(idb1->if_description, idb2->if_description) == 0: %s\",",
          "436:     merge_debug1(\"g_strcmp0(idb1->if_os, idb2->if_os) == 0: %s\",",
          "438:     merge_debug0(\"merge::is_duplicate_idb() returning\");",
          "",
          "[Added Lines]",
          "407:     merge_debug(\"merge::is_duplicate_idb() called\");",
          "408:     merge_debug(\"idb1->wtap_encap == idb2->wtap_encap: %s\",",
          "410:     merge_debug(\"idb1->time_units_per_second == idb2->time_units_per_second: %s\",",
          "412:     merge_debug(\"idb1->tsprecision == idb2->tsprecision: %s\",",
          "414:     merge_debug(\"idb1->link_type == idb2->link_type: %s\",",
          "416:     merge_debug(\"idb1->snap_len == idb2->snap_len: %s\",",
          "418:     merge_debug(\"idb1->if_speed == idb2->if_speed: %s\",",
          "420:     merge_debug(\"idb1->if_tsresol == idb2->if_tsresol: %s\",",
          "422:     merge_debug(\"idb1->if_fcslen == idb2->if_fcslen: %s\",",
          "424:     merge_debug(\"g_strcmp0(idb1->opt_comment, idb2->opt_comment) == 0: %s\",",
          "426:     merge_debug(\"g_strcmp0(idb1->if_name, idb2->if_name) == 0: %s\",",
          "428:     merge_debug(\"g_strcmp0(idb1->if_description, idb2->if_description) == 0: %s\",",
          "430:     merge_debug(\"g_strcmp0(idb1->if_os, idb2->if_os) == 0: %s\",",
          "432:     merge_debug(\"merge::is_duplicate_idb() returning\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:         other_idb_list_size = other_idb_list->interface_data->len;",
          "482:         if (other_idb_list_size != first_idb_list_size) {",
          "484:                          first_idb_list_size, other_idb_list_size);",
          "485:             g_free(other_idb_list);",
          "486:             g_free(first_idb_list);",
          "",
          "[Removed Lines]",
          "483:             merge_debug2(\"merge::all_idbs_are_duplicates: sizes of IDB lists don't match: first=%u, other=%u\",",
          "",
          "[Added Lines]",
          "477:             merge_debug(\"merge::all_idbs_are_duplicates: sizes of IDB lists don't match: first=%u, other=%u\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "492:             other_file_idb = &g_array_index(other_idb_list->interface_data, wtapng_if_descr_t, j);",
          "494:             if (!is_duplicate_idb(first_file_idb, other_file_idb)) {",
          "496:                 g_free(other_idb_list);",
          "497:                 g_free(first_idb_list);",
          "498:                 return FALSE;",
          "",
          "[Removed Lines]",
          "495:                 merge_debug1(\"merge::all_idbs_are_duplicates: IDBs at index %d do not match, returning FALSE\", j);",
          "",
          "[Added Lines]",
          "489:                 merge_debug(\"merge::all_idbs_are_duplicates: IDBs at index %d do not match, returning FALSE\", j);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:         g_free(other_idb_list);",
          "502:     }",
          "506:     g_free(first_idb_list);",
          "",
          "[Removed Lines]",
          "504:     merge_debug0(\"merge::all_idbs_are_duplicates: returning TRUE\");",
          "",
          "[Added Lines]",
          "498:     merge_debug(\"merge::all_idbs_are_duplicates: returning TRUE\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:     if (mode == IDB_MERGE_MODE_ALL_SAME && all_idbs_are_duplicates(in_files, in_file_count)) {",
          "596:         guint num_idbs;",
          "601:         input_file_idb_list = wtap_file_get_idb_info(in_files[0].wth);",
          "",
          "[Removed Lines]",
          "598:         merge_debug0(\"merge::generate_merged_idb: mode ALL set and all IDBs are duplicates\");",
          "",
          "[Added Lines]",
          "592:         merge_debug(\"merge::generate_merged_idb: mode ALL set and all IDBs are duplicates\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "630:                 if (mode == IDB_MERGE_MODE_ANY_SAME &&",
          "631:                     find_duplicate_idb(input_file_idb, merged_idb_list, &merged_index))",
          "632:                 {",
          "",
          "[Removed Lines]",
          "633:                     merge_debug0(\"merge::generate_merged_idb: mode ANY set and found a duplicate\");",
          "",
          "[Added Lines]",
          "627:                     merge_debug(\"merge::generate_merged_idb: mode ANY set and found a duplicate\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "639:                     add_idb_index_map(&in_files[i], itf_count, merged_index);",
          "640:                 }",
          "641:                 else {",
          "",
          "[Removed Lines]",
          "642:                     merge_debug0(\"merge::generate_merged_idb: mode NONE set or did not find a duplicate\");",
          "",
          "[Added Lines]",
          "636:                     merge_debug(\"merge::generate_merged_idb: mode NONE set or did not find a duplicate\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "671:     if (current_interface_id >= in_file->idb_index_map->len) {",
          "674:         return FALSE;",
          "675:     }",
          "",
          "[Removed Lines]",
          "673:         merge_debug0(\"merge::map_phdr_interface_id: current_interface_id >= in_file->idb_index_map->len (ERROR?)\");",
          "",
          "[Added Lines]",
          "667:         merge_debug(\"merge::map_phdr_interface_id: current_interface_id >= in_file->idb_index_map->len (ERROR?)\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "868:     g_assert((cb != NULL) ? (cb->callback_func != NULL) : TRUE);",
          "873:     if (!merge_open_in_files(in_file_count, in_filenames, &in_files,",
          "874:                              err, err_info, err_fileno)) {",
          "876:         return MERGE_ERR_CANT_OPEN_INFILE;",
          "877:     }",
          "",
          "[Removed Lines]",
          "870:     merge_debug0(\"merge_files: begin\");",
          "875:         merge_debug1(\"merge_files: merge_open_in_files() failed with err=%d\", *err);",
          "",
          "[Added Lines]",
          "864:     merge_debug(\"merge_files: begin\");",
          "869:         merge_debug(\"merge_files: merge_open_in_files() failed with err=%d\", *err);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "894:     frame_type = merge_select_frame_type(in_file_count, in_files);",
          "897:     if (cb)",
          "898:         cb->callback_func(MERGE_EVENT_FRAME_TYPE_SELECTED, frame_type, in_files, in_file_count, cb->data);",
          "",
          "[Removed Lines]",
          "895:     merge_debug1(\"merge_files: got frame_type=%d\", frame_type);",
          "",
          "[Added Lines]",
          "889:     merge_debug(\"merge_files: got frame_type=%d\", frame_type);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "901:     if (file_type == WTAP_FILE_TYPE_SUBTYPE_PCAPNG) {",
          "902:         shb_hdr = create_shb_header(in_files, in_file_count, app_name);",
          "905:         idb_inf = generate_merged_idb(in_files, in_file_count, mode);",
          "908:         pdh = wtap_dump_fdopen_ng(out_fd, file_type, frame_type, snaplen,",
          "909:                                   FALSE /* compressed */, shb_hdr, idb_inf,",
          "",
          "[Removed Lines]",
          "903:         merge_debug0(\"merge_files: SHB created\");",
          "906:         merge_debug1(\"merge_files: IDB merge operation complete, got %u IDBs\", idb_inf ? idb_inf->interface_data->len : 0);",
          "",
          "[Added Lines]",
          "897:         merge_debug(\"merge_files: SHB created\");",
          "900:         merge_debug(\"merge_files: IDB merge operation complete, got %u IDBs\", idb_inf ? idb_inf->interface_data->len : 0);",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"pcapng_module.h\"",
          "45: #if 0",
          "50: #else",
          "55: #endif",
          "57: static gboolean",
          "",
          "[Removed Lines]",
          "46: #define pcapng_debug0(str) g_warning(str)",
          "47: #define pcapng_debug1(str,p1) g_warning(str,p1)",
          "48: #define pcapng_debug2(str,p1,p2) g_warning(str,p1,p2)",
          "49: #define pcapng_debug3(str,p1,p2,p3) g_warning(str,p1,p2,p3)",
          "51: #define pcapng_debug0(str)",
          "52: #define pcapng_debug1(str,p1)",
          "53: #define pcapng_debug2(str,p1,p2)",
          "54: #define pcapng_debug3(str,p1,p2,p3)",
          "",
          "[Added Lines]",
          "46: #define pcapng_debug(...) g_warning(__VA_ARGS__)",
          "48: #define pcapng_debug(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:     if (!wtap_read_bytes(fh, oh, sizeof (*oh), err, err_info)) {",
          "479:         return -1;",
          "480:     }",
          "481:     block_read = sizeof (*oh);",
          "",
          "[Removed Lines]",
          "478:         pcapng_debug0(\"pcapng_read_option: failed to read option\");",
          "",
          "[Added Lines]",
          "472:         pcapng_debug(\"pcapng_read_option: failed to read option\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:     if (!wtap_read_bytes(fh, content, oh->option_length, err, err_info)) {",
          "504:         return -1;",
          "505:     }",
          "506:     block_read += oh->option_length;",
          "",
          "[Removed Lines]",
          "503:         pcapng_debug1(\"pcapng_read_option: failed to read content of option %u\", oh->option_code);",
          "",
          "[Added Lines]",
          "497:         pcapng_debug(\"pcapng_read_option: failed to read content of option %u\", oh->option_code);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "572:             pn->version_major               = shb.version_major;",
          "573:             pn->version_minor               = shb.version_minor;",
          "576:                           pn->version_major, pn->version_minor, bh->block_total_length);",
          "577:             break;",
          "578:         case(0x4D3C2B1A):",
          "",
          "[Removed Lines]",
          "575:             pcapng_debug3(\"pcapng_read_section_header_block: SHB (little endian) V%u.%u, len %u\",",
          "",
          "[Added Lines]",
          "569:             pcapng_debug(\"pcapng_read_section_header_block: SHB (little endian) V%u.%u, len %u\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "585:             bh->block_total_length  = GUINT32_SWAP_LE_BE(bh->block_total_length);",
          "588:                           pn->version_major, pn->version_minor, bh->block_total_length);",
          "589:             break;",
          "590:         default:",
          "",
          "[Removed Lines]",
          "587:             pcapng_debug3(\"pcapng_read_section_header_block: SHB (big endian) V%u.%u, len %u\",",
          "",
          "[Added Lines]",
          "581:             pcapng_debug(\"pcapng_read_section_header_block: SHB (big endian) V%u.%u, len %u\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "662:         return PCAPNG_BLOCK_ERROR;",
          "663:     }",
          "665:     while (to_read != 0) {",
          "668:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "669:         if (bytes_read <= 0) {",
          "671:             return PCAPNG_BLOCK_ERROR;",
          "672:         }",
          "673:         to_read -= bytes_read;",
          "",
          "[Removed Lines]",
          "664:     pcapng_debug1(\"pcapng_read_section_header_block: Options %u bytes\", to_read);",
          "667:         pcapng_debug1(\"pcapng_read_section_header_block: Options %u bytes remaining\", to_read);",
          "670:             pcapng_debug0(\"pcapng_read_section_header_block: failed to read option\");",
          "",
          "[Added Lines]",
          "658:     pcapng_debug(\"pcapng_read_section_header_block: Options %u bytes\", to_read);",
          "661:         pcapng_debug(\"pcapng_read_section_header_block: Options %u bytes remaining\", to_read);",
          "664:             pcapng_debug(\"pcapng_read_section_header_block: failed to read option\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "676:         switch (oh.option_code) {",
          "677:             case(OPT_EOFOPT):",
          "678:                 if (to_read != 0) {",
          "680:                 }",
          "682:                 to_read = 0;",
          "",
          "[Removed Lines]",
          "679:                     pcapng_debug1(\"pcapng_read_section_header_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "[Added Lines]",
          "673:                     pcapng_debug(\"pcapng_read_section_header_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "685:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "686:                     g_free(wblock->data.section.opt_comment);",
          "687:                     wblock->data.section.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "689:                 } else {",
          "691:                 }",
          "692:                 break;",
          "693:             case(OPT_SHB_HARDWARE):",
          "694:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "695:                     g_free(wblock->data.section.shb_hardware);",
          "696:                     wblock->data.section.shb_hardware = g_strndup((char *)option_content, oh.option_length);",
          "698:                 } else {",
          "700:                 }",
          "701:                 break;",
          "702:             case(OPT_SHB_OS):",
          "703:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "704:                     g_free(wblock->data.section.shb_os);",
          "705:                     wblock->data.section.shb_os = g_strndup((char *)option_content, oh.option_length);",
          "707:                 } else {",
          "709:                 }",
          "710:                 break;",
          "711:             case(OPT_SHB_USERAPPL):",
          "712:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "713:                     g_free(wblock->data.section.shb_user_appl);",
          "714:                     wblock->data.section.shb_user_appl = g_strndup((char *)option_content, oh.option_length);",
          "716:                 } else {",
          "718:                 }",
          "719:                 break;",
          "720:             default:",
          "722:                               oh.option_code, oh.option_length);",
          "723:         }",
          "724:     }",
          "",
          "[Removed Lines]",
          "688:                     pcapng_debug1(\"pcapng_read_section_header_block: opt_comment %s\", wblock->data.section.opt_comment);",
          "690:                     pcapng_debug1(\"pcapng_read_section_header_block: opt_comment length %u seems strange\", oh.option_length);",
          "697:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware %s\", wblock->data.section.shb_hardware);",
          "699:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware length %u seems strange\", oh.option_length);",
          "706:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_os %s\", wblock->data.section.shb_os);",
          "708:                     pcapng_debug2(\"pcapng_read_section_header_block: shb_os length %u seems strange, opt buffsize %u\", oh.option_length,to_read);",
          "715:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl %s\", wblock->data.section.shb_user_appl);",
          "717:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl length %u seems strange\", oh.option_length);",
          "721:                 pcapng_debug2(\"pcapng_read_section_header_block: unknown option %u - ignoring %u bytes\",",
          "",
          "[Added Lines]",
          "682:                     pcapng_debug(\"pcapng_read_section_header_block: opt_comment %s\", wblock->data.section.opt_comment);",
          "684:                     pcapng_debug(\"pcapng_read_section_header_block: opt_comment length %u seems strange\", oh.option_length);",
          "691:                     pcapng_debug(\"pcapng_read_section_header_block: shb_hardware %s\", wblock->data.section.shb_hardware);",
          "693:                     pcapng_debug(\"pcapng_read_section_header_block: shb_hardware length %u seems strange\", oh.option_length);",
          "700:                     pcapng_debug(\"pcapng_read_section_header_block: shb_os %s\", wblock->data.section.shb_os);",
          "702:                     pcapng_debug(\"pcapng_read_section_header_block: shb_os length %u seems strange, opt buffsize %u\", oh.option_length,to_read);",
          "709:                     pcapng_debug(\"pcapng_read_section_header_block: shb_user_appl %s\", wblock->data.section.shb_user_appl);",
          "711:                     pcapng_debug(\"pcapng_read_section_header_block: shb_user_appl length %u seems strange\", oh.option_length);",
          "715:                 pcapng_debug(\"pcapng_read_section_header_block: unknown option %u - ignoring %u bytes\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "774:     if (!wtap_read_bytes(fh, &idb, sizeof idb, err, err_info)) {",
          "776:         return FALSE;",
          "777:     }",
          "",
          "[Removed Lines]",
          "775:         pcapng_debug0(\"pcapng_read_if_descr_block: failed to read IDB\");",
          "",
          "[Added Lines]",
          "769:         pcapng_debug(\"pcapng_read_if_descr_block: failed to read IDB\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "789:     wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "790:     wblock->data.if_descr.tsprecision = tsprecision;",
          "793:                   wblock->data.if_descr.link_type,",
          "794:                   wtap_encap_string(wblock->data.if_descr.wtap_encap),",
          "795:                   wblock->data.if_descr.snap_len);",
          "",
          "[Removed Lines]",
          "792:     pcapng_debug3(\"pcapng_read_if_descr_block: IDB link_type %u (%s), snap %u\",",
          "",
          "[Added Lines]",
          "786:     pcapng_debug(\"pcapng_read_if_descr_block: IDB link_type %u (%s), snap %u\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "803:                       wblock->data.if_descr.snap_len);",
          "805:     }",
          "",
          "[Removed Lines]",
          "802:         pcapng_debug1(\"pcapng_read_if_descr_block: snapshot length %u unrealistic.\",",
          "",
          "[Added Lines]",
          "796:         pcapng_debug(\"pcapng_read_if_descr_block: snapshot length %u unrealistic.\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "838:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "839:         if (bytes_read <= 0) {",
          "841:             return FALSE;",
          "842:         }",
          "843:         to_read -= bytes_read;",
          "",
          "[Removed Lines]",
          "840:             pcapng_debug0(\"pcapng_read_if_descr_block: failed to read option\");",
          "",
          "[Added Lines]",
          "834:             pcapng_debug(\"pcapng_read_if_descr_block: failed to read option\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "846:         switch (oh.option_code) {",
          "848:                 if (to_read != 0) {",
          "850:                 }",
          "852:                 to_read = 0;",
          "",
          "[Removed Lines]",
          "849:                     pcapng_debug1(\"pcapng_read_if_descr_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "[Added Lines]",
          "843:                     pcapng_debug(\"pcapng_read_if_descr_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "855:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "856:                     wblock->data.if_descr.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "858:                 } else {",
          "860:                 }",
          "861:                 break;",
          "863:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "864:                     wblock->data.if_descr.if_name = g_strndup((char *)option_content, oh.option_length);",
          "866:                 } else {",
          "868:                 }",
          "869:                 break;",
          "871:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "872:                     wblock->data.if_descr.if_description = g_strndup((char *)option_content, oh.option_length);",
          "874:                 } else {",
          "876:                 }",
          "877:                 break;",
          "",
          "[Removed Lines]",
          "857:                     pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment %s\", wblock->data.if_descr.opt_comment);",
          "859:                     pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment length %u seems strange\", oh.option_length);",
          "865:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_name %s\", wblock->data.if_descr.if_name);",
          "867:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_name length %u seems strange\", oh.option_length);",
          "873:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_description %s\", wblock->data.if_descr.if_description);",
          "875:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_description length %u seems strange\", oh.option_length);",
          "",
          "[Added Lines]",
          "851:                     pcapng_debug(\"pcapng_read_if_descr_block: opt_comment %s\", wblock->data.if_descr.opt_comment);",
          "853:                     pcapng_debug(\"pcapng_read_if_descr_block: opt_comment length %u seems strange\", oh.option_length);",
          "859:                     pcapng_debug(\"pcapng_read_if_descr_block: if_name %s\", wblock->data.if_descr.if_name);",
          "861:                     pcapng_debug(\"pcapng_read_if_descr_block: if_name length %u seems strange\", oh.option_length);",
          "867:                     pcapng_debug(\"pcapng_read_if_descr_block: if_description %s\", wblock->data.if_descr.if_description);",
          "869:                     pcapng_debug(\"pcapng_read_if_descr_block: if_description length %u seems strange\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "884:                     memcpy(&wblock->data.if_descr.if_speed, option_content, sizeof(guint64));",
          "885:                     if (pn->byte_swapped)",
          "886:                         wblock->data.if_descr.if_speed = GUINT64_SWAP_LE_BE(wblock->data.if_descr.if_speed);",
          "888:                 } else {",
          "890:                 }",
          "891:                 break;",
          "",
          "[Removed Lines]",
          "887:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", wblock->data.if_descr.if_speed);",
          "889:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_speed length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "881:                     pcapng_debug(\"pcapng_read_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", wblock->data.if_descr.if_speed);",
          "883:                     pcapng_debug(\"pcapng_read_if_descr_block: if_speed length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "912:                         time_units_per_second = G_MAXUINT64;",
          "913:                     }",
          "914:                     if (time_units_per_second > (((guint64)1) << 32)) {",
          "916:                     }",
          "917:                     wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "918:                     wblock->data.if_descr.if_tsresol = if_tsresol;",
          "",
          "[Removed Lines]",
          "915:                         pcapng_debug0(\"pcapng_open: time conversion might be inaccurate\");",
          "",
          "[Added Lines]",
          "909:                         pcapng_debug(\"pcapng_open: time conversion might be inaccurate\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "929:                     else",
          "930:                         tsprecision = WTAP_TSPREC_SEC;",
          "931:                     wblock->data.if_descr.tsprecision = tsprecision;",
          "933:                 } else {",
          "935:                 }",
          "936:                 break;",
          "",
          "[Removed Lines]",
          "932:                     pcapng_debug3(\"pcapng_read_if_descr_block: if_tsresol %u, units/s %\" G_GINT64_MODIFIER \"u, tsprecision %d\", wblock->data.if_descr.if_tsresol, wblock->data.if_descr.time_units_per_second, tsprecision);",
          "934:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_tsresol length %u not 1 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "926:                     pcapng_debug(\"pcapng_read_if_descr_block: if_tsresol %u, units/s %\" G_GINT64_MODIFIER \"u, tsprecision %d\", wblock->data.if_descr.if_tsresol, wblock->data.if_descr.time_units_per_second, tsprecision);",
          "928:                     pcapng_debug(\"pcapng_read_if_descr_block: if_tsresol length %u not 1 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "945:                     if (option_content[0] == 0) {",
          "946:                         wblock->data.if_descr.if_filter_str = g_strndup((char *)option_content+1, oh.option_length-1);",
          "948:                     } else if (option_content[0] == 1) {",
          "949:                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "950:                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "951:                         memcpy(wblock->data.if_descr.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
          "952:                     }",
          "953:                 } else {",
          "955:                 }",
          "956:                 break;",
          "",
          "[Removed Lines]",
          "947:                         pcapng_debug2(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", wblock->data.if_descr.if_filter_str, oh.option_length);",
          "954:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "",
          "[Added Lines]",
          "941:                         pcapng_debug(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", wblock->data.if_descr.if_filter_str, oh.option_length);",
          "948:                     pcapng_debug(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "963:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "964:                     wblock->data.if_descr.if_os = g_strndup((char *)option_content, oh.option_length);",
          "966:                 } else {",
          "968:                 }",
          "969:                 break;",
          "971:                 if (oh.option_length == 1) {",
          "972:                     wblock->data.if_descr.if_fcslen = option_content[0];",
          "973:                     pn->if_fcslen = wblock->data.if_descr.if_fcslen;",
          "976:                 } else {",
          "978:                 }",
          "979:                 break;",
          "",
          "[Removed Lines]",
          "965:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_os %s\", wblock->data.if_descr.if_os);",
          "967:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_os length %u seems strange\", oh.option_length);",
          "974:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_fcslen %u\", wblock->data.if_descr.if_fcslen);",
          "977:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_fcslen length %u not 1 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "959:                     pcapng_debug(\"pcapng_read_if_descr_block: if_os %s\", wblock->data.if_descr.if_os);",
          "961:                     pcapng_debug(\"pcapng_read_if_descr_block: if_os length %u seems strange\", oh.option_length);",
          "968:                     pcapng_debug(\"pcapng_read_if_descr_block: if_fcslen %u\", wblock->data.if_descr.if_fcslen);",
          "971:                     pcapng_debug(\"pcapng_read_if_descr_block: if_fcslen length %u not 1 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1025:             default:",
          "1027:                               oh.option_code, oh.option_length);",
          "1028:         }",
          "1029:     }",
          "",
          "[Removed Lines]",
          "1026:                 pcapng_debug2(\"pcapng_read_if_descr_block: unknown option %u - ignoring %u bytes\",",
          "",
          "[Added Lines]",
          "1020:                 pcapng_debug(\"pcapng_read_if_descr_block: unknown option %u - ignoring %u bytes\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1115:             return FALSE;",
          "1116:         }",
          "1117:         if (!wtap_read_bytes(fh, &epb, sizeof epb, err, err_info)) {",
          "1119:             return FALSE;",
          "1120:         }",
          "1121:         block_read = (guint)sizeof epb;",
          "",
          "[Removed Lines]",
          "1118:             pcapng_debug0(\"pcapng_read_packet_block: failed to read packet data\");",
          "",
          "[Added Lines]",
          "1112:             pcapng_debug(\"pcapng_read_packet_block: failed to read packet data\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1135:             packet.cap_len             = epb.captured_len;",
          "1136:             packet.packet_len          = epb.packet_len;",
          "1137:         }",
          "1139:                       packet.interface_id, packet.cap_len, packet.packet_len);",
          "1140:     } else {",
          "",
          "[Removed Lines]",
          "1138:         pcapng_debug3(\"pcapng_read_packet_block: EPB on interface_id %d, cap_len %d, packet_len %d\",",
          "",
          "[Added Lines]",
          "1132:         pcapng_debug(\"pcapng_read_packet_block: EPB on interface_id %d, cap_len %d, packet_len %d\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1151:             return FALSE;",
          "1152:         }",
          "1153:         if (!wtap_read_bytes(fh, &pb, sizeof pb, err, err_info)) {",
          "1155:             return FALSE;",
          "1156:         }",
          "1157:         block_read = (guint)sizeof pb;",
          "",
          "[Removed Lines]",
          "1154:             pcapng_debug0(\"pcapng_read_packet_block: failed to read packet data\");",
          "",
          "[Added Lines]",
          "1148:             pcapng_debug(\"pcapng_read_packet_block: failed to read packet data\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1171:             packet.cap_len             = pb.captured_len;",
          "1172:             packet.packet_len          = pb.packet_len;",
          "1173:         }",
          "1175:                       packet.interface_id, packet.cap_len, packet.packet_len);",
          "1176:     }",
          "",
          "[Removed Lines]",
          "1174:         pcapng_debug3(\"pcapng_read_packet_block: PB on interface_id %d, cap_len %d, packet_len %d\",",
          "",
          "[Added Lines]",
          "1168:         pcapng_debug(\"pcapng_read_packet_block: PB on interface_id %d, cap_len %d, packet_len %d\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1190:     } else {",
          "1191:         block_total_length = bh->block_total_length;",
          "1192:     }",
          "",
          "[Removed Lines]",
          "1193:     pcapng_debug1(\"pcapng_read_packet_block: block_total_length %d\", block_total_length);",
          "",
          "[Added Lines]",
          "1187:     pcapng_debug(\"pcapng_read_packet_block: block_total_length %d\", block_total_length);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1225:                                     packet.cap_len, WTAP_MAX_PACKET_SIZE);",
          "1226:         return FALSE;",
          "1227:     }",
          "1229:                   packet.packet_len,",
          "1230:                   packet.cap_len,",
          "1231:                   packet.interface_id);",
          "",
          "[Removed Lines]",
          "1228:     pcapng_debug3(\"pcapng_read_packet_block: packet data: packet_len %u captured_len %u interface_id %u\",",
          "",
          "[Added Lines]",
          "1222:     pcapng_debug(\"pcapng_read_packet_block: packet data: packet_len %u captured_len %u interface_id %u\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1242:     wblock->packet_header->rec_type = REC_TYPE_PACKET;",
          "1243:     wblock->packet_header->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1246:                   iface_info.wtap_encap,",
          "1247:                   wtap_encap_string(iface_info.wtap_encap),",
          "1248:                   pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "",
          "[Removed Lines]",
          "1245:     pcapng_debug3(\"pcapng_read_packet_block: encapsulation = %d (%s), pseudo header size = %d.\",",
          "",
          "[Added Lines]",
          "1239:     pcapng_debug(\"pcapng_read_packet_block: encapsulation = %d (%s), pseudo header size = %d.\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1264:     }",
          "1265:     block_read += pseudo_header_len;",
          "1266:     if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "1268:                       pseudo_header_len);",
          "1269:     }",
          "1270:     wblock->packet_header->caplen = packet.cap_len - pseudo_header_len;",
          "",
          "[Removed Lines]",
          "1267:         pcapng_debug1(\"pcapng_read_packet_block: Could only read %d bytes for pseudo header.\",",
          "",
          "[Added Lines]",
          "1261:         pcapng_debug(\"pcapng_read_packet_block: Could only read %d bytes for pseudo header.\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1318:         option_content = opt_ptr + sizeof (pcapng_option_header_t);",
          "1319:         bytes_read = pcapng_read_option(fh, pn, oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "1320:         if (bytes_read <= 0) {",
          "1323:             return FALSE;",
          "1324:         }",
          "",
          "[Removed Lines]",
          "1321:             pcapng_debug0(\"pcapng_read_packet_block: failed to read option\");",
          "",
          "[Added Lines]",
          "1315:             pcapng_debug(\"pcapng_read_packet_block: failed to read option\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1329:         switch (oh->option_code) {",
          "1330:             case(OPT_EOFOPT):",
          "1331:                 if (to_read != 0) {",
          "1333:                 }",
          "1335:                 to_read = 0;",
          "",
          "[Removed Lines]",
          "1332:                     pcapng_debug1(\"pcapng_read_packet_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "[Added Lines]",
          "1326:                     pcapng_debug(\"pcapng_read_packet_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1338:                 if (oh->option_length > 0 && oh->option_length < opt_cont_buf_len) {",
          "1339:                     wblock->packet_header->presence_flags |= WTAP_HAS_COMMENTS;",
          "1340:                     wblock->packet_header->opt_comment = g_strndup((char *)option_content, oh->option_length);",
          "1342:                 } else {",
          "1344:                 }",
          "1345:                 break;",
          "1346:             case(OPT_EPB_FLAGS):",
          "",
          "[Removed Lines]",
          "1341:                     pcapng_debug2(\"pcapng_read_packet_block: length %u opt_comment '%s'\", oh->option_length, wblock->packet_header->opt_comment);",
          "1343:                     pcapng_debug1(\"pcapng_read_packet_block: opt_comment length %u seems strange\", oh->option_length);",
          "",
          "[Added Lines]",
          "1335:                     pcapng_debug(\"pcapng_read_packet_block: length %u opt_comment '%s'\", oh->option_length, wblock->packet_header->opt_comment);",
          "1337:                     pcapng_debug(\"pcapng_read_packet_block: opt_comment length %u seems strange\", oh->option_length);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1366:                     fcslen = (wblock->packet_header->pack_flags & 0x000001E0) >> 5;",
          "1367:                 }",
          "1369:                 break;",
          "1370:             case(OPT_EPB_HASH):",
          "1372:                               oh->option_code, oh->option_length);",
          "1373:                 break;",
          "1374:             case(OPT_EPB_DROPCOUNT):",
          "",
          "[Removed Lines]",
          "1368:                 pcapng_debug1(\"pcapng_read_packet_block: pack_flags %u (ignored)\", wblock->packet_header->pack_flags);",
          "1371:                 pcapng_debug2(\"pcapng_read_packet_block: epb_hash %u currently not handled - ignoring %u bytes\",",
          "",
          "[Added Lines]",
          "1362:                 pcapng_debug(\"pcapng_read_packet_block: pack_flags %u (ignored)\", wblock->packet_header->pack_flags);",
          "1365:                 pcapng_debug(\"pcapng_read_packet_block: epb_hash %u currently not handled - ignoring %u bytes\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1390:                     memcpy(option_content, &wblock->packet_header->drop_count, sizeof(guint64));",
          "1391:                 }",
          "1394:                 break;",
          "1395:             default:",
          "1396: #ifdef HAVE_PLUGINS",
          "",
          "[Removed Lines]",
          "1393:                 pcapng_debug1(\"pcapng_read_packet_block: drop_count %\" G_GINT64_MODIFIER \"u\", wblock->packet_header->drop_count);",
          "",
          "[Added Lines]",
          "1387:                 pcapng_debug(\"pcapng_read_packet_block: drop_count %\" G_GINT64_MODIFIER \"u\", wblock->packet_header->drop_count);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1408:                 } else",
          "1409: #endif",
          "1410:                 {",
          "1412:                                   oh->option_code, oh->option_length);",
          "1413:                 }",
          "1414:         }",
          "",
          "[Removed Lines]",
          "1411:                     pcapng_debug2(\"pcapng_read_packet_block: unknown option %u - ignoring %u bytes\",",
          "",
          "[Added Lines]",
          "1405:                     pcapng_debug(\"pcapng_read_packet_block: unknown option %u - ignoring %u bytes\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1463:     if (!wtap_read_bytes(fh, &spb, sizeof spb, err, err_info)) {",
          "1465:         return FALSE;",
          "1466:     }",
          "",
          "[Removed Lines]",
          "1464:         pcapng_debug0(\"pcapng_read_simple_packet_block: failed to read packet data\");",
          "",
          "[Added Lines]",
          "1458:         pcapng_debug(\"pcapng_read_simple_packet_block: failed to read packet data\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1503:     } else {",
          "1504:         block_total_length = bh->block_total_length;",
          "1505:     }",
          "",
          "[Removed Lines]",
          "1506:     pcapng_debug1(\"pcapng_read_simple_packet_block: block_total_length %d\", block_total_length);",
          "",
          "[Added Lines]",
          "1500:     pcapng_debug(\"pcapng_read_simple_packet_block: block_total_length %d\", block_total_length);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1527:                                     simple_packet.cap_len, WTAP_MAX_PACKET_SIZE);",
          "1528:         return FALSE;",
          "1529:     }",
          "1531:                   simple_packet.packet_len);",
          "1534:                   pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "",
          "[Removed Lines]",
          "1530:     pcapng_debug1(\"pcapng_read_simple_packet_block: packet data: packet_len %u\",",
          "1533:     pcapng_debug1(\"pcapng_read_simple_packet_block: Need to read pseudo header of size %d\",",
          "",
          "[Added Lines]",
          "1524:     pcapng_debug(\"pcapng_read_simple_packet_block: packet data: packet_len %u\",",
          "1527:     pcapng_debug(\"pcapng_read_simple_packet_block: Need to read pseudo header of size %d\",",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1561:     wblock->packet_header->caplen = simple_packet.cap_len - pseudo_header_len;",
          "1562:     wblock->packet_header->len = simple_packet.packet_len - pseudo_header_len;",
          "1563:     if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "1565:                       pseudo_header_len);",
          "1566:     }",
          "",
          "[Removed Lines]",
          "1564:         pcapng_debug1(\"pcapng_read_simple_packet_block: Could only read %d bytes for pseudo header.\",",
          "",
          "[Added Lines]",
          "1558:         pcapng_debug(\"pcapng_read_simple_packet_block: Could only read %d bytes for pseudo header.\",",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1679:     pcapng_debug1(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
          "",
          "[Added Lines]",
          "1673:     pcapng_debug(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1699:         }",
          "1700:         if (!wtap_read_bytes(fh, &nrb, sizeof nrb, err, err_info)) {",
          "1701:             ws_buffer_free(&nrb_rec);",
          "1703:             return FALSE;",
          "1704:         }",
          "1705:         block_read += (int)sizeof nrb;",
          "",
          "[Removed Lines]",
          "1702:             pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read record header\");",
          "",
          "[Added Lines]",
          "1696:             pcapng_debug(\"pcapng_read_name_resolution_block: failed to read record header\");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1748:                 if (!wtap_read_bytes(fh, ws_buffer_start_ptr(&nrb_rec),",
          "1749:                                      nrb.record_len, err, err_info)) {",
          "1750:                     ws_buffer_free(&nrb_rec);",
          "1752:                     return FALSE;",
          "1753:                 }",
          "1754:                 block_read += nrb.record_len;",
          "",
          "[Removed Lines]",
          "1751:                     pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read IPv4 record data\");",
          "",
          "[Added Lines]",
          "1745:                     pcapng_debug(\"pcapng_read_name_resolution_block: failed to read IPv4 record data\");",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1846:                 block_read += PADDING4(nrb.record_len);",
          "1847:                 break;",
          "1848:             default:",
          "1850:                 if (!file_skip(fh, nrb.record_len + PADDING4(nrb.record_len), err)) {",
          "1851:                     ws_buffer_free(&nrb_rec);",
          "1852:                     return FALSE;",
          "",
          "[Removed Lines]",
          "1849:                 pcapng_debug1(\"pcapng_read_name_resolution_block: unknown record type 0x%x\", nrb.record_type);",
          "",
          "[Added Lines]",
          "1843:                 pcapng_debug(\"pcapng_read_name_resolution_block: unknown record type 0x%x\", nrb.record_type);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1883:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "1884:         if (bytes_read <= 0) {",
          "1886:             g_free(option_content);",
          "1887:             ws_buffer_free(&nrb_rec);",
          "1888:             return FALSE;",
          "",
          "[Removed Lines]",
          "1885:             pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read option\");",
          "",
          "[Added Lines]",
          "1879:             pcapng_debug(\"pcapng_read_name_resolution_block: failed to read option\");",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1893:         switch (oh.option_code) {",
          "1894:             case(OPT_EOFOPT):",
          "1895:                 if (to_read != 0) {",
          "1897:                 }",
          "1899:                 to_read = 0;",
          "",
          "[Removed Lines]",
          "1896:                     pcapng_debug1(\"pcapng_read_name_resolution_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "[Added Lines]",
          "1890:                     pcapng_debug(\"pcapng_read_name_resolution_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1901:             case(OPT_COMMENT):",
          "1902:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1903:                     wblock->data.name_res.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "1905:                 } else {",
          "1907:                 }",
          "1908:                 break;",
          "1909:                 break;",
          "",
          "[Removed Lines]",
          "1904:                     pcapng_debug2(\"pcapng_read_name_resolution_block: length %u opt_comment '%s'\", oh.option_length, wblock->data.name_res.opt_comment);",
          "1906:                     pcapng_debug1(\"pcapng_read_name_resolution_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "[Added Lines]",
          "1898:                     pcapng_debug(\"pcapng_read_name_resolution_block: length %u opt_comment '%s'\", oh.option_length, wblock->data.name_res.opt_comment);",
          "1900:                     pcapng_debug(\"pcapng_read_name_resolution_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1926:                 } else",
          "1927: #endif",
          "1928:                 {",
          "1930:                                   oh.option_code, oh.option_length);",
          "1931:                 }",
          "1932:         }",
          "",
          "[Removed Lines]",
          "1929:                     pcapng_debug2(\"pcapng_read_name_resolution_block: unknown option %u - ignoring %u bytes\",",
          "",
          "[Added Lines]",
          "1923:                     pcapng_debug(\"pcapng_read_name_resolution_block: unknown option %u - ignoring %u bytes\",",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1978:     if (!wtap_read_bytes(fh, &isb, sizeof isb, err, err_info)) {",
          "1980:         return FALSE;",
          "1981:     }",
          "",
          "[Removed Lines]",
          "1979:         pcapng_debug0(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
          "",
          "[Added Lines]",
          "1973:         pcapng_debug(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1989:         wblock->data.if_stats.ts_high      = isb.timestamp_high;",
          "1990:         wblock->data.if_stats.ts_low       = isb.timestamp_low;",
          "1991:     }",
          "1995:     wblock->data.if_stats.opt_comment          = NULL;",
          "",
          "[Removed Lines]",
          "1992:     pcapng_debug1(\"pcapng_read_interface_statistics_block: interface_id %u\", wblock->data.if_stats.interface_id);",
          "",
          "[Added Lines]",
          "1986:     pcapng_debug(\"pcapng_read_interface_statistics_block: interface_id %u\", wblock->data.if_stats.interface_id);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2016:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "2017:         if (bytes_read <= 0) {",
          "2019:             return FALSE;",
          "2020:         }",
          "2021:         to_read -= bytes_read;",
          "",
          "[Removed Lines]",
          "2018:             pcapng_debug0(\"pcapng_read_interface_statistics_block: failed to read option\");",
          "",
          "[Added Lines]",
          "2012:             pcapng_debug(\"pcapng_read_interface_statistics_block: failed to read option\");",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2024:         switch (oh.option_code) {",
          "2026:                 if (to_read != 0) {",
          "2028:                 }",
          "2030:                 to_read = 0;",
          "",
          "[Removed Lines]",
          "2027:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "[Added Lines]",
          "2021:                     pcapng_debug(\"pcapng_read_interface_statistics_block: %u bytes after opt_endofopt\", to_read);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2033:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "2034:                     wblock->data.if_stats.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "2036:                 } else {",
          "2038:                 }",
          "2039:                 break;",
          "",
          "[Removed Lines]",
          "2035:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment %s\", wblock->data.if_stats.opt_comment);",
          "2037:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "[Added Lines]",
          "2029:                     pcapng_debug(\"pcapng_read_interface_statistics_block: opt_comment %s\", wblock->data.if_stats.opt_comment);",
          "2031:                     pcapng_debug(\"pcapng_read_interface_statistics_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2054:                     wblock->data.if_stats.isb_starttime = (guint64)high;",
          "2055:                     wblock->data.if_stats.isb_starttime <<= 32;",
          "2056:                     wblock->data.if_stats.isb_starttime += (guint64)low;",
          "2058:                 } else {",
          "2060:                 }",
          "2061:                 break;",
          "",
          "[Removed Lines]",
          "2057:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_starttime);",
          "2059:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "2051:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_starttime);",
          "2053:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2076:                     wblock->data.if_stats.isb_endtime = (guint64)high;",
          "2077:                     wblock->data.if_stats.isb_endtime <<= 32;",
          "2078:                     wblock->data.if_stats.isb_endtime += (guint64)low;",
          "2080:                 } else {",
          "2082:                 }",
          "2083:                 break;",
          "",
          "[Removed Lines]",
          "2079:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_endtime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_endtime);",
          "2081:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "2073:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_endtime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_endtime);",
          "2075:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2090:                     memcpy(&wblock->data.if_stats.isb_ifrecv, option_content, sizeof(guint64));",
          "2091:                     if (pn->byte_swapped)",
          "2092:                         wblock->data.if_stats.isb_ifrecv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifrecv);",
          "2094:                 } else {",
          "2096:                 }",
          "2097:                 break;",
          "",
          "[Removed Lines]",
          "2093:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifrecv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifrecv);",
          "2095:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifrecv length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "2087:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifrecv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifrecv);",
          "2089:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifrecv length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2104:                     memcpy(&wblock->data.if_stats.isb_ifdrop, option_content, sizeof(guint64));",
          "2105:                     if (pn->byte_swapped)",
          "2106:                         wblock->data.if_stats.isb_ifdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifdrop);",
          "2108:                 } else {",
          "2110:                 }",
          "2111:                 break;",
          "",
          "[Removed Lines]",
          "2107:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifdrop);",
          "2109:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifdrop length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "2101:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifdrop);",
          "2103:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifdrop length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2118:                     memcpy(&wblock->data.if_stats.isb_filteraccept, option_content, sizeof(guint64));",
          "2119:                     if (pn->byte_swapped)",
          "2120:                         wblock->data.if_stats.isb_filteraccept = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_filteraccept);",
          "2122:                 } else {",
          "2124:                 }",
          "2125:                 break;",
          "",
          "[Removed Lines]",
          "2121:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_filteraccept %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_filteraccept);",
          "2123:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_filteraccept length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "2115:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_filteraccept %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_filteraccept);",
          "2117:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_filteraccept length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2132:                     memcpy(&wblock->data.if_stats.isb_osdrop, option_content, sizeof(guint64));",
          "2133:                     if (pn->byte_swapped)",
          "2134:                         wblock->data.if_stats.isb_osdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_osdrop);",
          "2136:                 } else {",
          "2138:                 }",
          "2139:                 break;",
          "",
          "[Removed Lines]",
          "2135:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_osdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_osdrop);",
          "2137:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_osdrop length %u not 8 as expected\", oh.option_length);",
          "",
          "[Added Lines]",
          "2129:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_osdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_osdrop);",
          "2131:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_osdrop length %u not 8 as expected\", oh.option_length);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2146:                     memcpy(&wblock->data.if_stats.isb_usrdeliv, option_content, sizeof(guint64));",
          "2147:                     if (pn->byte_swapped)",
          "2148:                         wblock->data.if_stats.isb_usrdeliv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_usrdeliv);",
          "2150:                 } else {",
          "2152:                 }",
          "2153:                 break;",
          "2154:             default:",
          "2156:                               oh.option_code, oh.option_length);",
          "2157:         }",
          "2158:     }",
          "",
          "[Removed Lines]",
          "2149:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_usrdeliv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_usrdeliv);",
          "2151:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_usrdeliv length %u not 8 as expected\", oh.option_length);",
          "2155:                 pcapng_debug2(\"pcapng_read_interface_statistics_block: unknown option %u - ignoring %u bytes\",",
          "",
          "[Added Lines]",
          "2143:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_usrdeliv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_usrdeliv);",
          "2145:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_usrdeliv length %u not 8 as expected\", oh.option_length);",
          "2149:                 pcapng_debug(\"pcapng_read_interface_statistics_block: unknown option %u - ignoring %u bytes\",",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2227:     if (!wtap_read_bytes_or_eof(fh, &bh, sizeof bh, err, err_info)) {",
          "2229:         if (*err == 0 || *err == WTAP_ERR_SHORT_READ) {",
          "",
          "[Removed Lines]",
          "2228:         pcapng_debug1(\"pcapng_read_block: wtap_read_bytes_or_eof() failed, err = %d.\", *err);",
          "",
          "[Added Lines]",
          "2222:         pcapng_debug(\"pcapng_read_block: wtap_read_bytes_or_eof() failed, err = %d.\", *err);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2250:     wblock->type = bh.block_type;",
          "",
          "[Removed Lines]",
          "2252:     pcapng_debug1(\"pcapng_read_block: block_type 0x%x\", bh.block_type);",
          "",
          "[Added Lines]",
          "2246:     pcapng_debug(\"pcapng_read_block: block_type 0x%x\", bh.block_type);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2298:                     return PCAPNG_BLOCK_ERROR;",
          "2299:                 break;",
          "2300:             default:",
          "2302:                 if (!pcapng_read_unknown_block(fh, &bh, pn, wblock, err, err_info))",
          "2303:                     return PCAPNG_BLOCK_ERROR;",
          "2304:                 break;",
          "",
          "[Removed Lines]",
          "2301:                 pcapng_debug2(\"pcapng_read_block: Unknown block_type: 0x%x (block ignored), block total length %d\", bh.block_type, bh.block_total_length);",
          "",
          "[Added Lines]",
          "2295:                 pcapng_debug(\"pcapng_read_block: Unknown block_type: 0x%x (block ignored), block total length %d\", bh.block_type, bh.block_total_length);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2309:     if (!wtap_read_bytes(fh, &block_total_length, sizeof block_total_length,",
          "2310:                          err, err_info)) {",
          "2312:         return PCAPNG_BLOCK_ERROR;",
          "2313:     }",
          "",
          "[Removed Lines]",
          "2311:         pcapng_debug0(\"pcapng_check_block_trailer: couldn't read second block length\");",
          "",
          "[Added Lines]",
          "2305:         pcapng_debug(\"pcapng_check_block_trailer: couldn't read second block length\");",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2389:     wblock.frame_buffer = NULL;",
          "2390:     wblock.packet_header = NULL;",
          "2394:     switch (pcapng_read_block(wth, wth->fh, &pn, &wblock, err, err_info)) {",
          "",
          "[Removed Lines]",
          "2392:     pcapng_debug0(\"pcapng_open: opening file\");",
          "",
          "[Added Lines]",
          "2386:     pcapng_debug(\"pcapng_open: opening file\");",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2421:         pcapng_free_wtapng_block_data(&wblock);",
          "2422:         return WTAP_OPEN_NOT_MINE;",
          "2423:     }",
          "",
          "[Removed Lines]",
          "2420:         pcapng_debug1(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "",
          "[Added Lines]",
          "2414:         pcapng_debug(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2454:         if (!wtap_read_bytes_or_eof(wth->fh, &bh, sizeof bh, err, err_info)) {",
          "2455:             if (*err == 0) {",
          "2458:                 break;",
          "2459:             }",
          "2461:             return WTAP_OPEN_ERROR;",
          "2462:         }",
          "",
          "[Removed Lines]",
          "2457:                 pcapng_debug0(\"No more IDBs available...\");",
          "2460:             pcapng_debug1(\"pcapng_open:  Check for more IDB:s, wtap_read_bytes_or_eof() failed, err = %d.\", *err);",
          "",
          "[Added Lines]",
          "2451:                 pcapng_debug(\"No more IDBs available...\");",
          "2454:             pcapng_debug(\"pcapng_open:  Check for more IDB:s, wtap_read_bytes_or_eof() failed, err = %d.\", *err);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2468:             bh.block_type         = GUINT32_SWAP_LE_BE(bh.block_type);",
          "2469:         }",
          "2473:         if (bh.block_type != BLOCK_TYPE_IDB) {",
          "2475:         }",
          "2476:         if (pcapng_read_block(wth, wth->fh, &pn, &wblock, err, err_info) != PCAPNG_BLOCK_OK) {",
          "2477:             if (*err == 0) {",
          "2479:                 pcapng_free_wtapng_block_data(&wblock);",
          "2480:                 break;",
          "2481:             } else {",
          "2483:                 pcapng_free_wtapng_block_data(&wblock);",
          "2484:                 return WTAP_OPEN_ERROR;",
          "2485:             }",
          "2486:         }",
          "2487:         pcapng_process_idb(wth, pcapng, &wblock);",
          "2489:                       wth->interface_data->len, wth->file_encap);",
          "2490:     }",
          "2491:     return WTAP_OPEN_MINE;",
          "",
          "[Removed Lines]",
          "2471:         pcapng_debug1(\"pcapng_open: Check for more IDB:s block_type 0x%x\", bh.block_type);",
          "2478:                 pcapng_debug0(\"No more IDBs available...\");",
          "2482:                 pcapng_debug0(\"pcapng_open: couldn't read IDB\");",
          "2488:         pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\",",
          "",
          "[Added Lines]",
          "2465:         pcapng_debug(\"pcapng_open: Check for more IDB:s block_type 0x%x\", bh.block_type);",
          "2472:                 pcapng_debug(\"No more IDBs available...\");",
          "2476:                 pcapng_debug(\"pcapng_open: couldn't read IDB\");",
          "2482:         pcapng_debug(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\",",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2511:     while (1) {",
          "2514:         if (pcapng_read_block(wth, wth->fh, pcapng, &wblock, err, err_info) != PCAPNG_BLOCK_OK) {",
          "2517:             return FALSE;",
          "2518:         }",
          "",
          "[Removed Lines]",
          "2513:         pcapng_debug1(\"pcapng_read: data_offset is %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2515:             pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2516:             pcapng_debug0(\"pcapng_read: couldn't read packet block\");",
          "",
          "[Added Lines]",
          "2507:         pcapng_debug(\"pcapng_read: data_offset is %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2509:             pcapng_debug(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2510:             pcapng_debug(\"pcapng_read: couldn't read packet block\");",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2536:             case(BLOCK_TYPE_IDB):",
          "2539:                 pcapng_process_idb(wth, pcapng, &wblock);",
          "2540:                 break;",
          "2542:             case(BLOCK_TYPE_NRB):",
          "2545:                 break;",
          "2547:             case(BLOCK_TYPE_ISB):",
          "2550:                 if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {",
          "2552:                 } else {",
          "2554:                     wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);",
          "2555:                     if (wtapng_if_descr->num_stat_entries == 0) {",
          "2558:                         wtapng_if_descr->interface_statistics = g_array_new(FALSE, FALSE, sizeof(wtapng_if_stats_t));",
          "2559:                     }",
          "",
          "[Removed Lines]",
          "2538:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_IDB\");",
          "2544:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_NRB\");",
          "2549:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2551:                     pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2557:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB. First ISB found, no previous entry\");",
          "",
          "[Added Lines]",
          "2532:                 pcapng_debug(\"pcapng_read: block type BLOCK_TYPE_IDB\");",
          "2538:                 pcapng_debug(\"pcapng_read: block type BLOCK_TYPE_NRB\");",
          "2543:                 pcapng_debug(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2545:                     pcapng_debug(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2551:                         pcapng_debug(\"pcapng_read: block type BLOCK_TYPE_ISB. First ISB found, no previous entry\");",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2579:             default:",
          "2582:                 break;",
          "2583:         }",
          "2584:     }",
          "2586: got_packet:",
          "2591:     return TRUE;",
          "2592: }",
          "",
          "[Removed Lines]",
          "2581:                 pcapng_debug1(\"pcapng_read: Unknown block type 0x%08x\", wblock.type);",
          "2589:     pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "",
          "[Added Lines]",
          "2575:                 pcapng_debug(\"pcapng_read: Unknown block type 0x%08x\", wblock.type);",
          "2583:     pcapng_debug(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2607:     if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) < 0) {",
          "2609:     }",
          "2612:     wblock.frame_buffer = buf;",
          "2613:     wblock.packet_header = phdr;",
          "",
          "[Removed Lines]",
          "2610:     pcapng_debug1(\"pcapng_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "",
          "[Added Lines]",
          "2604:     pcapng_debug(\"pcapng_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2616:     ret = pcapng_read_block(wth, wth->random_fh, pcapng, &wblock, err, err_info);",
          "2617:     pcapng_free_wtapng_block_data(&wblock);",
          "2618:     if (ret != PCAPNG_BLOCK_OK) {",
          "2621:         return FALSE;",
          "2622:     }",
          "",
          "[Removed Lines]",
          "2619:         pcapng_debug1(\"pcapng_seek_read: couldn't read packet block (err=%d).\",",
          "",
          "[Added Lines]",
          "2613:         pcapng_debug(\"pcapng_seek_read: couldn't read packet block (err=%d).\",",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2626:     if (wblock.type != BLOCK_TYPE_PB && wblock.type != BLOCK_TYPE_EPB &&",
          "2627:         wblock.type != BLOCK_TYPE_SPB) {",
          "2629:         return FALSE;",
          "2630:     }",
          "",
          "[Removed Lines]",
          "2628:         pcapng_debug1(\"pcapng_seek_read: block type %u not PB/EPB/SPB\", wblock.type);",
          "",
          "[Added Lines]",
          "2622:         pcapng_debug(\"pcapng_seek_read: block type %u not PB/EPB/SPB\", wblock.type);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2639: {",
          "2640:     pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2643:     g_array_free(pcapng->interfaces, TRUE);",
          "2644: }",
          "",
          "[Removed Lines]",
          "2642:     pcapng_debug0(\"pcapng_close: closing file\");",
          "",
          "[Added Lines]",
          "2636:     pcapng_debug(\"pcapng_close: closing file\");",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2657:     guint32 comment_pad_len = 0, shb_hardware_pad_len = 0, shb_os_pad_len = 0, shb_user_appl_pad_len = 0;",
          "2659:     if (wdh->shb_hdr) {",
          "2662:         if (wdh->shb_hdr->opt_comment) {",
          "2663:             have_options = TRUE;",
          "",
          "[Removed Lines]",
          "2660:         pcapng_debug0(\"pcapng_write_section_header_block: Have shb_hdr\");",
          "",
          "[Added Lines]",
          "2654:         pcapng_debug(\"pcapng_write_section_header_block: Have shb_hdr\");",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2716:     bh.block_type = BLOCK_TYPE_SHB;",
          "2717:     bh.block_total_length = (guint32)(sizeof(bh) + sizeof(shb) + options_total_length + 4);",
          "2720:     if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "2721:         return FALSE;",
          "",
          "[Removed Lines]",
          "2718:     pcapng_debug2(\"pcapng_write_section_header_block: Total len %u, Options total len %u\",bh.block_total_length, options_total_length);",
          "",
          "[Added Lines]",
          "2712:     pcapng_debug(\"pcapng_write_section_header_block: Total len %u, Options total len %u\",bh.block_total_length, options_total_length);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2747:         wdh->bytes_dumped += 4;",
          "2751:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->opt_comment, comment_len, err))",
          "2752:             return FALSE;",
          "2753:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "2750:         pcapng_debug3(\"pcapng_write_section_header_block, comment:'%s' comment_len %u comment_pad_len %u\" , wdh->shb_hdr->opt_comment, comment_len, comment_pad_len);",
          "",
          "[Added Lines]",
          "2744:         pcapng_debug(\"pcapng_write_section_header_block, comment:'%s' comment_len %u comment_pad_len %u\" , wdh->shb_hdr->opt_comment, comment_len, comment_pad_len);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2768:         wdh->bytes_dumped += 4;",
          "2772:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_hardware, shb_hardware_len, err))",
          "2773:             return FALSE;",
          "2774:         wdh->bytes_dumped += shb_hardware_len;",
          "",
          "[Removed Lines]",
          "2771:         pcapng_debug3(\"pcapng_write_section_header_block, shb_hardware:'%s' shb_hardware_len %u shb_hardware_pad_len %u\" , wdh->shb_hdr->shb_hardware, shb_hardware_len, shb_hardware_pad_len);",
          "",
          "[Added Lines]",
          "2765:         pcapng_debug(\"pcapng_write_section_header_block, shb_hardware:'%s' shb_hardware_len %u shb_hardware_pad_len %u\" , wdh->shb_hdr->shb_hardware, shb_hardware_len, shb_hardware_pad_len);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2789:         wdh->bytes_dumped += 4;",
          "2793:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_os, shb_os_len, err))",
          "2794:             return FALSE;",
          "2795:         wdh->bytes_dumped += shb_os_len;",
          "",
          "[Removed Lines]",
          "2792:         pcapng_debug3(\"pcapng_write_section_header_block, shb_os:'%s' shb_os_len %u shb_os_pad_len %u\" , wdh->shb_hdr->shb_os, shb_os_len, shb_os_pad_len);",
          "",
          "[Added Lines]",
          "2786:         pcapng_debug(\"pcapng_write_section_header_block, shb_os:'%s' shb_os_len %u shb_os_pad_len %u\" , wdh->shb_hdr->shb_os, shb_os_len, shb_os_pad_len);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2810:         wdh->bytes_dumped += 4;",
          "2814:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_user_appl, shb_user_appl_len, err))",
          "2815:             return FALSE;",
          "2816:         wdh->bytes_dumped += shb_user_appl_len;",
          "",
          "[Removed Lines]",
          "2813:         pcapng_debug3(\"pcapng_write_section_header_block, shb_user_appl:'%s' shb_user_appl_len %u shb_user_appl_pad_len %u\" , wdh->shb_hdr->shb_user_appl, shb_user_appl_len, shb_user_appl_pad_len);",
          "",
          "[Added Lines]",
          "2807:         pcapng_debug(\"pcapng_write_section_header_block, shb_user_appl:'%s' shb_user_appl_len %u shb_user_appl_pad_len %u\" , wdh->shb_hdr->shb_user_appl, shb_user_appl_len, shb_user_appl_pad_len);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2855:     guint32 comment_pad_len = 0, if_name_pad_len = 0, if_description_pad_len = 0, if_os_pad_len = 0, if_filter_str_pad_len = 0;",
          "2859:                   int_data->link_type,",
          "2860:                   wtap_encap_string(wtap_pcap_encap_to_wtap_encap(int_data->link_type)),",
          "2861:                   int_data->snap_len);",
          "",
          "[Removed Lines]",
          "2858:     pcapng_debug3(\"pcapng_write_if_descr_block: encap = %d (%s), snaplen = %d\",",
          "",
          "[Added Lines]",
          "2852:     pcapng_debug(\"pcapng_write_if_descr_block: encap = %d (%s), snaplen = %d\",",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2996:         wdh->bytes_dumped += 4;",
          "3000:         if (!wtap_dump_file_write(wdh, int_data->opt_comment, comment_len, err))",
          "3001:             return FALSE;",
          "3002:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "2999:         pcapng_debug3(\"pcapng_write_if_descr_block, comment:'%s' comment_len %u comment_pad_len %u\" , int_data->opt_comment, comment_len, comment_pad_len);",
          "",
          "[Added Lines]",
          "2993:         pcapng_debug(\"pcapng_write_if_descr_block, comment:'%s' comment_len %u comment_pad_len %u\" , int_data->opt_comment, comment_len, comment_pad_len);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3019:         wdh->bytes_dumped += 4;",
          "3023:         if (!wtap_dump_file_write(wdh, int_data->if_name, if_name_len, err))",
          "3024:             return FALSE;",
          "3025:         wdh->bytes_dumped += if_name_len;",
          "",
          "[Removed Lines]",
          "3022:         pcapng_debug3(\"pcapng_write_if_descr_block, if_name:'%s' if_name_len %u if_name_pad_len %u\" , int_data->if_name, if_name_len, if_name_pad_len);",
          "",
          "[Added Lines]",
          "3016:         pcapng_debug(\"pcapng_write_if_descr_block, if_name:'%s' if_name_len %u if_name_pad_len %u\" , int_data->if_name, if_name_len, if_name_pad_len);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3042:         wdh->bytes_dumped += 4;",
          "3046:         if (!wtap_dump_file_write(wdh, int_data->if_description, if_description_len, err))",
          "3047:             return FALSE;",
          "3048:         wdh->bytes_dumped += if_description_len;",
          "",
          "[Removed Lines]",
          "3045:         pcapng_debug3(\"pcapng_write_if_descr_block, if_description:'%s' if_description_len %u if_description_pad_len %u\" , int_data->if_description, if_description_len, if_description_pad_len);",
          "",
          "[Added Lines]",
          "3039:         pcapng_debug(\"pcapng_write_if_descr_block, if_description:'%s' if_description_len %u if_description_pad_len %u\" , int_data->if_description, if_description_len, if_description_pad_len);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3071:         wdh->bytes_dumped += 4;",
          "3075:         if (!wtap_dump_file_write(wdh, &int_data->if_speed, sizeof(guint64), err))",
          "3076:             return FALSE;",
          "3077:         wdh->bytes_dumped += 8;",
          "",
          "[Removed Lines]",
          "3074:         pcapng_debug1(\"pcapng_write_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", int_data->if_speed);",
          "",
          "[Added Lines]",
          "3068:         pcapng_debug(\"pcapng_write_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", int_data->if_speed);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3090:         wdh->bytes_dumped += 4;",
          "3094:         if (!wtap_dump_file_write(wdh, &int_data->if_tsresol, 1, err))",
          "3095:             return FALSE;",
          "3096:         wdh->bytes_dumped += 1;",
          "",
          "[Removed Lines]",
          "3093:         pcapng_debug1(\"pcapng_write_if_descr_block: if_tsresol %u\", int_data->if_tsresol);",
          "",
          "[Added Lines]",
          "3087:         pcapng_debug(\"pcapng_write_if_descr_block: if_tsresol %u\", int_data->if_tsresol);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3119:         wdh->bytes_dumped += 1;",
          "3124:         if (!wtap_dump_file_write(wdh, int_data->if_filter_str, if_filter_str_len-1, err))",
          "3125:             return FALSE;",
          "",
          "[Removed Lines]",
          "3122:         pcapng_debug3(\"pcapng_write_if_descr_block, if_filter_str:'%s' if_filter_str_len %u if_filter_str_pad_len %u\" , int_data->if_filter_str, if_filter_str_len, if_filter_str_pad_len);",
          "",
          "[Added Lines]",
          "3116:         pcapng_debug(\"pcapng_write_if_descr_block, if_filter_str:'%s' if_filter_str_len %u if_filter_str_pad_len %u\" , int_data->if_filter_str, if_filter_str_len, if_filter_str_pad_len);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3143:         wdh->bytes_dumped += 4;",
          "3147:         if (!wtap_dump_file_write(wdh, int_data->if_os, if_os_len, err))",
          "3148:             return FALSE;",
          "3149:         wdh->bytes_dumped += if_os_len;",
          "",
          "[Removed Lines]",
          "3146:         pcapng_debug3(\"pcapng_write_if_descr_block, if_os:'%s' if_os_len %u if_os_pad_len %u\" , int_data->if_os, if_os_len, if_os_pad_len);",
          "",
          "[Added Lines]",
          "3140:         pcapng_debug(\"pcapng_write_if_descr_block, if_os:'%s' if_os_len %u if_os_pad_len %u\" , int_data->if_os, if_os_len, if_os_pad_len);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3194:     guint32 comment_len = 0;",
          "3195:     guint32 comment_pad_len = 0;",
          "",
          "[Removed Lines]",
          "3197:     pcapng_debug0(\"pcapng_write_interface_statistics_block\");",
          "",
          "[Added Lines]",
          "3191:     pcapng_debug(\"pcapng_write_interface_statistics_block\");",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3277:         wdh->bytes_dumped += 4;",
          "3281:         if (!wtap_dump_file_write(wdh, if_stats->opt_comment, comment_len, err))",
          "3282:             return FALSE;",
          "3283:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "3280:         pcapng_debug3(\"pcapng_write_interface_statistics_block, comment:'%s' comment_len %u comment_pad_len %u\" , if_stats->opt_comment, comment_len, comment_pad_len);",
          "",
          "[Added Lines]",
          "3274:         pcapng_debug(\"pcapng_write_interface_statistics_block, comment:'%s' comment_len %u comment_pad_len %u\" , if_stats->opt_comment, comment_len, comment_pad_len);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3302:         wdh->bytes_dumped += 4;",
          "3306:         if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3307:             return FALSE;",
          "3308:         wdh->bytes_dumped += 4;",
          "",
          "[Removed Lines]",
          "3305:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_starttime);",
          "",
          "[Added Lines]",
          "3299:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_starttime);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3323:         wdh->bytes_dumped += 4;",
          "3327:         if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3328:             return FALSE;",
          "3329:         wdh->bytes_dumped += 4;",
          "",
          "[Removed Lines]",
          "3326:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_endtime);",
          "",
          "[Added Lines]",
          "3320:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_endtime);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3340:         wdh->bytes_dumped += 4;",
          "3344:         if (!wtap_dump_file_write(wdh, &if_stats->isb_ifrecv, 8, err))",
          "3345:             return FALSE;",
          "3346:         wdh->bytes_dumped += 8;",
          "",
          "[Removed Lines]",
          "3343:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_ifrecv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifrecv);",
          "",
          "[Added Lines]",
          "3337:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_ifrecv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifrecv);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3354:         wdh->bytes_dumped += 4;",
          "3358:         if (!wtap_dump_file_write(wdh, &if_stats->isb_ifdrop, 8, err))",
          "3359:             return FALSE;",
          "3360:         wdh->bytes_dumped += 8;",
          "",
          "[Removed Lines]",
          "3357:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_ifdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifdrop);",
          "",
          "[Added Lines]",
          "3351:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_ifdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifdrop);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3368:         wdh->bytes_dumped += 4;",
          "3372:         if (!wtap_dump_file_write(wdh, &if_stats->isb_filteraccept, 8, err))",
          "3373:             return FALSE;",
          "3374:         wdh->bytes_dumped += 8;",
          "",
          "[Removed Lines]",
          "3371:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_filteraccept: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_filteraccept);",
          "",
          "[Added Lines]",
          "3365:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_filteraccept: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_filteraccept);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3382:         wdh->bytes_dumped += 4;",
          "3386:         if (!wtap_dump_file_write(wdh, &if_stats->isb_osdrop, 8, err))",
          "3387:             return FALSE;",
          "3388:         wdh->bytes_dumped += 8;",
          "",
          "[Removed Lines]",
          "3385:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_osdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_osdrop);",
          "",
          "[Added Lines]",
          "3379:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_osdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_osdrop);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3396:         wdh->bytes_dumped += 4;",
          "3400:         if (!wtap_dump_file_write(wdh, &if_stats->isb_usrdeliv, 8, err))",
          "3401:             return FALSE;",
          "3402:         wdh->bytes_dumped += 8;",
          "",
          "[Removed Lines]",
          "3399:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_usrdeliv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_usrdeliv);",
          "",
          "[Added Lines]",
          "3393:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_usrdeliv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_usrdeliv);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3561:         wdh->bytes_dumped += 4;",
          "3565:         if (!wtap_dump_file_write(wdh, phdr->opt_comment, comment_len, err))",
          "3566:             return FALSE;",
          "3567:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "3564:         pcapng_debug3(\"pcapng_write_enhanced_packet_block, comment:'%s' comment_len %u comment_pad_len %u\" , phdr->opt_comment, comment_len, comment_pad_len);",
          "",
          "[Added Lines]",
          "3558:         pcapng_debug(\"pcapng_write_enhanced_packet_block, comment:'%s' comment_len %u comment_pad_len %u\" , phdr->opt_comment, comment_len, comment_pad_len);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3573:             wdh->bytes_dumped += comment_pad_len;",
          "3574:         }",
          "3577:                       comment_len,",
          "3578:                       comment_pad_len);",
          "3579:     }",
          "",
          "[Removed Lines]",
          "3576:         pcapng_debug2(\"pcapng_write_enhanced_packet_block: Wrote Options comments: comment_len %u, comment_pad_len %u\",",
          "",
          "[Added Lines]",
          "3570:         pcapng_debug(\"pcapng_write_enhanced_packet_block: Wrote Options comments: comment_len %u, comment_pad_len %u\",",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3586:         if (!wtap_dump_file_write(wdh, &phdr->pack_flags, 4, err))",
          "3587:             return FALSE;",
          "3588:         wdh->bytes_dumped += 4;",
          "3590:     }",
          "3592:     if (have_options) {",
          "",
          "[Removed Lines]",
          "3589:         pcapng_debug1(\"pcapng_write_enhanced_packet_block: Wrote Options packet flags: %x\", phdr->pack_flags);",
          "",
          "[Added Lines]",
          "3583:         pcapng_debug(\"pcapng_write_enhanced_packet_block: Wrote Options packet flags: %x\", phdr->pack_flags);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3659:                 memcpy(rec_data + rec_off, &bh.block_total_length, sizeof(bh.block_total_length));",
          "3663:                 if (!wtap_dump_file_write(wdh, rec_data, bh.block_total_length, err)) {",
          "3664:                     g_free(rec_data);",
          "",
          "[Removed Lines]",
          "3661:                 pcapng_debug2(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "[Added Lines]",
          "3655:                 pcapng_debug(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3682:             rec_off += namelen;",
          "3683:             memset(rec_data + rec_off, 0, PADDING4(namelen));",
          "3684:             rec_off += PADDING4(namelen);",
          "3687:             i++;",
          "3688:             ipv4_hash_list_entry = (hashipv4_t *)g_list_nth_data(wdh->addrinfo_lists->ipv4_addr_list, i);",
          "",
          "[Removed Lines]",
          "3685:             pcapng_debug1(\"NRB: added IPv4 record for %s\", ipv4_hash_list_entry->name);",
          "",
          "[Added Lines]",
          "3679:             pcapng_debug(\"NRB: added IPv4 record for %s\", ipv4_hash_list_entry->name);",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3728:                 memcpy(rec_data + rec_off, &bh.block_total_length, sizeof(bh.block_total_length));",
          "3732:                 if (!wtap_dump_file_write(wdh, rec_data, bh.block_total_length, err)) {",
          "3733:                     g_free(rec_data);",
          "",
          "[Removed Lines]",
          "3730:                 pcapng_debug2(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "[Added Lines]",
          "3724:                 pcapng_debug(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3751:             rec_off += namelen;",
          "3752:             memset(rec_data + rec_off, 0, PADDING4(namelen));",
          "3753:             rec_off += PADDING4(namelen);",
          "3756:             i++;",
          "3757:             ipv6_hash_list_entry = (hashipv6_t *)g_list_nth_data(wdh->addrinfo_lists->ipv6_addr_list, i);",
          "",
          "[Removed Lines]",
          "3754:             pcapng_debug1(\"NRB: added IPv6 record for %s\", ipv6_hash_list_entry->name);",
          "",
          "[Added Lines]",
          "3748:             pcapng_debug(\"NRB: added IPv6 record for %s\", ipv6_hash_list_entry->name);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3802:                 memcpy(rec_data + rec_off, &bh.block_total_length, sizeof(bh.block_total_length));",
          "3806:                 if (!wtap_dump_file_write(wdh, rec_data, bh.block_total_length, err)) {",
          "3807:                     g_free(rec_data);",
          "",
          "[Removed Lines]",
          "3804:                 pcapng_debug2(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "[Added Lines]",
          "3798:                 pcapng_debug(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3830:                 memset(rec_data + rec_off, 0, comment_pad_len);",
          "3831:                 rec_off += comment_pad_len;",
          "3834:                               comment_len,",
          "3835:                               comment_pad_len);",
          "3836:             }",
          "",
          "[Removed Lines]",
          "3833:                 pcapng_debug2(\"pcapng_write_name_resolution_block: Wrote Options comments: comment_len %u, comment_pad_len %u\",",
          "",
          "[Added Lines]",
          "3827:                 pcapng_debug(\"pcapng_write_name_resolution_block: Wrote Options comments: comment_len %u, comment_pad_len %u\",",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3854:     memcpy(rec_data + rec_off, &bh.block_total_length, sizeof(bh.block_total_length));",
          "3858:     if (!wtap_dump_file_write(wdh, rec_data, bh.block_total_length, err)) {",
          "3859:         g_free(rec_data);",
          "",
          "[Removed Lines]",
          "3856:     pcapng_debug2(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "[Added Lines]",
          "3850:     pcapng_debug(\"pcapng_write_name_resolution_block: Write bh.block_total_length bytes %d, rec_off %u\", bh.block_total_length, rec_off);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3874:     block_handler *handler;",
          "3875: #endif",
          "3878:                   phdr->pkt_encap,",
          "3879:                   wtap_encap_string(phdr->pkt_encap));",
          "",
          "[Removed Lines]",
          "3877:     pcapng_debug2(\"pcapng_dump: encap = %d (%s)\",",
          "",
          "[Added Lines]",
          "3871:     pcapng_debug(\"pcapng_dump: encap = %d (%s)\",",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3936:             wtapng_if_stats_t if_stats;",
          "3938:             if_stats = g_array_index(int_data.interface_statistics, wtapng_if_stats_t, j);",
          "3940:             if (!pcapng_write_interface_statistics_block(wdh, &if_stats, err)) {",
          "3941:                 return FALSE;",
          "3942:             }",
          "3943:         }",
          "3944:     }",
          "3947:     return TRUE;",
          "3948: }",
          "",
          "[Removed Lines]",
          "3939:             pcapng_debug1(\"pcapng_dump_close: write ISB for interface %u\",if_stats.interface_id);",
          "3946:     pcapng_debug0(\"pcapng_dump_close\");",
          "",
          "[Added Lines]",
          "3933:             pcapng_debug(\"pcapng_dump_close: write ISB for interface %u\",if_stats.interface_id);",
          "3940:     pcapng_debug(\"pcapng_dump_close\");",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3955: {",
          "3956:     guint i;",
          "3960:     wdh->subtype_write = pcapng_dump;",
          "3961:     wdh->subtype_close = pcapng_dump_close;",
          "3963:     if (wdh->interface_data->len == 0) {",
          "3966:         return FALSE;",
          "3967:     }",
          "",
          "[Removed Lines]",
          "3958:     pcapng_debug0(\"pcapng_dump_open\");",
          "3964:         pcapng_debug0(\"There are no interfaces. Can't handle that...\");",
          "",
          "[Added Lines]",
          "3952:     pcapng_debug(\"pcapng_dump_open\");",
          "3958:         pcapng_debug(\"There are no interfaces. Can't handle that...\");",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3970:     if (!pcapng_write_section_header_block(wdh, err)) {",
          "3971:         return FALSE;",
          "3972:     }",
          "3977:                   wdh->interface_data->len);",
          "3979:     for (i = 0; i < wdh->interface_data->len; i++) {",
          "",
          "[Removed Lines]",
          "3973:     pcapng_debug0(\"pcapng_dump_open: wrote section header block.\");",
          "3976:     pcapng_debug1(\"pcapng_dump_open: Number of IDB:s to write (number of interfaces) %u\",",
          "",
          "[Added Lines]",
          "3967:     pcapng_debug(\"pcapng_dump_open: wrote section header block.\");",
          "3970:     pcapng_debug(\"pcapng_dump_open: Number of IDB:s to write (number of interfaces) %u\",",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3998: int pcapng_dump_can_write_encap(int wtap_encap)",
          "3999: {",
          "4001:                   wtap_encap,",
          "4002:                   wtap_encap_string(wtap_encap));",
          "",
          "[Removed Lines]",
          "4000:     pcapng_debug2(\"pcapng_dump_can_write_encap: encap = %d (%s)\",",
          "",
          "[Added Lines]",
          "3994:     pcapng_debug(\"pcapng_dump_can_write_encap: encap = %d (%s)\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3dd7fe1eb5348922b079db2bdede700d4d28fbd",
      "candidate_info": {
        "commit_hash": "f3dd7fe1eb5348922b079db2bdede700d4d28fbd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f3dd7fe1eb5348922b079db2bdede700d4d28fbd",
        "files": [
          "capinfos.c",
          "captype.c",
          "dumpcap.c",
          "editcap.c",
          "epan/address.h",
          "epan/charsets.h",
          "epan/conversation_table.c",
          "epan/frame_data_sequence.c",
          "epan/oids.h",
          "epan/prefs.c",
          "mergecap.c",
          "pcapio.c",
          "reordercap.c",
          "text2pcap.c",
          "tfshark.c",
          "tshark.c",
          "ui/gtk/addr_resolution_dlg.c",
          "ui/gtk/color_dlg.c",
          "ui/gtk/conversations_table.c",
          "ui/gtk/main.c",
          "ui/gtk/text_page_utils.c",
          "wiretap/pcapng.c",
          "wiretap/vwr.c",
          "wiretap/wtap.h"
        ],
        "message": "Fix whitespace/indentation to match editor modelines.\n\nChange-Id: I3445ae22f10584582d465bf632942e016f5f70ca\nReviewed-on: https://code.wireshark.org/review/3452\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
        "before_after_code_files": [
          "capinfos.c||capinfos.c",
          "captype.c||captype.c",
          "dumpcap.c||dumpcap.c",
          "editcap.c||editcap.c",
          "epan/address.h||epan/address.h",
          "epan/charsets.h||epan/charsets.h",
          "epan/conversation_table.c||epan/conversation_table.c",
          "epan/frame_data_sequence.c||epan/frame_data_sequence.c",
          "epan/oids.h||epan/oids.h",
          "epan/prefs.c||epan/prefs.c",
          "mergecap.c||mergecap.c",
          "pcapio.c||pcapio.c",
          "reordercap.c||reordercap.c",
          "text2pcap.c||text2pcap.c",
          "tfshark.c||tfshark.c",
          "tshark.c||tshark.c",
          "ui/gtk/addr_resolution_dlg.c||ui/gtk/addr_resolution_dlg.c",
          "ui/gtk/color_dlg.c||ui/gtk/color_dlg.c",
          "ui/gtk/conversations_table.c||ui/gtk/conversations_table.c",
          "ui/gtk/main.c||ui/gtk/main.c",
          "ui/gtk/text_page_utils.c||ui/gtk/text_page_utils.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/vwr.c||wiretap/vwr.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "capinfos.c||capinfos.c": [
          "File: capinfos.c -> capinfos.c"
        ],
        "captype.c||captype.c": [
          "File: captype.c -> captype.c"
        ],
        "dumpcap.c||dumpcap.c": [
          "File: dumpcap.c -> dumpcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4153: }",
          "4155: static void",
          "4157: {",
          "4164: #ifdef HAVE_LIBZ",
          "4166: #ifdef ZLIB_VERSION",
          "4174: }",
          "",
          "[Removed Lines]",
          "4156: get_dumpcap_compiled_info(GString *str)",
          "4159:  g_string_append(str, \", \");",
          "4160:  get_compiled_caplibs_version(str);",
          "4163:  g_string_append(str, \", \");",
          "4165:  g_string_append(str, \"with libz \");",
          "4167:  g_string_append(str, ZLIB_VERSION);",
          "4169:  g_string_append(str, \"(version unknown)\");",
          "4172:  g_string_append(str, \"without libz\");",
          "",
          "[Added Lines]",
          "4156:     get_dumpcap_compiled_info(GString *str)",
          "4159:     g_string_append(str, \", \");",
          "4160:     get_compiled_caplibs_version(str);",
          "4163:     g_string_append(str, \", \");",
          "4165:     g_string_append(str, \"with libz \");",
          "4167:     g_string_append(str, ZLIB_VERSION);",
          "4169:     g_string_append(str, \"(version unknown)\");",
          "4172:     g_string_append(str, \"without libz\");",
          "",
          "---------------"
        ],
        "editcap.c||editcap.c": [
          "File: editcap.c -> editcap.c"
        ],
        "epan/address.h||epan/address.h": [
          "File: epan/address.h -> epan/address.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     addr->hf   = -1;",
          "84:     addr->len  = addr_len;",
          "85: }",
          "87:     set_address((addr), (addr_type), (addr_len), (addr_data))",
          "",
          "[Removed Lines]",
          "86: #define SET_ADDRESS(addr, addr_type, addr_len, addr_data) \\",
          "",
          "[Added Lines]",
          "86: #define SET_ADDRESS(addr, addr_type, addr_len, addr_data) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     do {                            \\",
          "106:         const void *TVB_SET_ADDRESS_data = (const void *)tvb_get_ptr(tvb, offset, addr_len); \\",
          "107:         set_address((addr), (addr_type), (addr_len), TVB_SET_ADDRESS_data); \\",
          "",
          "[Removed Lines]",
          "104: #define TVB_SET_ADDRESS(addr, addr_type, tvb, offset, addr_len) \\",
          "",
          "[Added Lines]",
          "104: #define TVB_SET_ADDRESS(addr, addr_type, tvb, offset, addr_len) \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     addr->hf   = addr_hf;",
          "124:     addr->len  = addr_len;",
          "125: }",
          "127:     set_address_hf((addr), (addr_type), (addr_len), (addr_data), (addr_hf))",
          "",
          "[Removed Lines]",
          "126: #define SET_ADDRESS_HF(addr, addr_type, addr_len, addr_data, addr_hf) \\",
          "",
          "[Added Lines]",
          "126: #define SET_ADDRESS_HF(addr, addr_type, addr_len, addr_data, addr_hf) \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:     do {                            \\",
          "147:         const void *TVB_SET_ADDRESS_data = (const void *) tvb_get_ptr(tvb, offset, addr_len); \\",
          "148:         set_address_hf((addr), (addr_type), (addr_len), TVB_SET_ADDRESS_data, (addr_hf)); \\",
          "",
          "[Removed Lines]",
          "145: #define TVB_SET_ADDRESS_HF(addr, addr_type, tvb, offset, addr_len, addr_hf) \\",
          "",
          "[Added Lines]",
          "145: #define TVB_SET_ADDRESS_HF(addr, addr_type, tvb, offset, addr_len, addr_hf) \\",
          "",
          "---------------"
        ],
        "epan/charsets.h||epan/charsets.h": [
          "File: epan/charsets.h -> epan/charsets.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: WS_DLL_PUBLIC guint8 *",
          "90: get_ts_23_038_7bits_string(wmem_allocator_t *scope, const guint8 *ptr,",
          "93: WS_DLL_PUBLIC guint8 *",
          "94: get_ascii_7bits_string(wmem_allocator_t *scope, const guint8 *ptr,",
          "97: WS_DLL_PUBLIC guint8 *",
          "98: get_ebcdic_string(wmem_allocator_t *scope, const guint8 *ptr, gint length);",
          "",
          "[Removed Lines]",
          "91:  const gint bit_offset, gint no_of_chars);",
          "95:  const gint bit_offset, gint no_of_chars);",
          "",
          "[Added Lines]",
          "91:         const gint bit_offset, gint no_of_chars);",
          "95:         const gint bit_offset, gint no_of_chars);",
          "",
          "---------------"
        ],
        "epan/conversation_table.c||epan/conversation_table.c": [
          "File: epan/conversation_table.c -> epan/conversation_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: register_ct_t* get_conversation_by_proto_id(int proto_id)",
          "90: {",
          "97:             return table;",
          "100:     return NULL;",
          "101: }",
          "",
          "[Removed Lines]",
          "91:  GSList *ct;",
          "92:  register_ct_t *table;",
          "94:  for(ct = registered_ct_tables; ct != NULL; ct = g_slist_next(ct)){",
          "95:   table = (register_ct_t*)ct->data;",
          "96:   if ((table) && (table->proto_id == proto_id))",
          "98:  }",
          "",
          "[Added Lines]",
          "91:     GSList *ct;",
          "92:     register_ct_t *table;",
          "94:     for(ct = registered_ct_tables; ct != NULL; ct = g_slist_next(ct)){",
          "95:         table = (register_ct_t*)ct->data;",
          "96:         if ((table) && (table->proto_id == proto_id))",
          "98:     }",
          "",
          "---------------"
        ],
        "epan/frame_data_sequence.c||epan/frame_data_sequence.c": [
          "File: epan/frame_data_sequence.c -> epan/frame_data_sequence.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: struct _frame_data_sequence {",
          "",
          "[Removed Lines]",
          "41: #define LOG2_NODES_PER_LEVEL 10",
          "42: #define NODES_PER_LEVEL  (1<<LOG2_NODES_PER_LEVEL)",
          "",
          "[Added Lines]",
          "41: #define LOG2_NODES_PER_LEVEL    10",
          "42: #define NODES_PER_LEVEL         (1<<LOG2_NODES_PER_LEVEL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: #define LEVEL_3_INDEX(framenum) \\",
          "55: #define LEVEL_2_INDEX(framenum) \\",
          "57: #define LEVEL_1_INDEX(framenum) \\",
          "59: #define LEAF_INDEX(framenum) \\",
          "62: frame_data_sequence *",
          "63: new_frame_data_sequence(void)",
          "64: {",
          "71: }",
          "",
          "[Removed Lines]",
          "54:  ((framenum) >> (3*LOG2_NODES_PER_LEVEL))",
          "56:  (((framenum) >> (2*LOG2_NODES_PER_LEVEL)) & (NODES_PER_LEVEL - 1))",
          "58:  (((framenum) >> (1*LOG2_NODES_PER_LEVEL)) & (NODES_PER_LEVEL - 1))",
          "60:  (((framenum) >> (0*LOG2_NODES_PER_LEVEL)) & (NODES_PER_LEVEL - 1))",
          "65:  frame_data_sequence *fds;",
          "67:  fds = (frame_data_sequence *)g_malloc(sizeof *fds);",
          "68:  fds->count = 0;",
          "69:  fds->ptree_root = NULL;",
          "70:  return fds;",
          "",
          "[Added Lines]",
          "54:         ((framenum) >> (3*LOG2_NODES_PER_LEVEL))",
          "56:         (((framenum) >> (2*LOG2_NODES_PER_LEVEL)) & (NODES_PER_LEVEL - 1))",
          "58:         (((framenum) >> (1*LOG2_NODES_PER_LEVEL)) & (NODES_PER_LEVEL - 1))",
          "60:         (((framenum) >> (0*LOG2_NODES_PER_LEVEL)) & (NODES_PER_LEVEL - 1))",
          "65:   frame_data_sequence *fds;",
          "67:   fds = (frame_data_sequence *)g_malloc(sizeof *fds);",
          "68:   fds->count = 0;",
          "69:   fds->ptree_root = NULL;",
          "70:   return fds;",
          "",
          "---------------"
        ],
        "epan/oids.h||epan/oids.h": [
          "File: epan/oids.h -> epan/oids.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: guint oid_encoded2subid(const guint8 *oid, gint len, guint32** subids_p);",
          "146: WS_DLL_PUBLIC",
          "147: guint oid_encoded2subid_sub(const guint8 *oid_bytes, gint oid_len, guint32** subids_pi,",
          "149: WS_DLL_PUBLIC",
          "150: guint oid_string2subid(wmem_allocator_t *scope, const gchar *oid_str, guint32** subids_p);",
          "",
          "[Removed Lines]",
          "148:   gboolean is_first);",
          "",
          "[Added Lines]",
          "148:                 gboolean is_first);",
          "",
          "---------------"
        ],
        "epan/prefs.c||epan/prefs.c": [
          "File: epan/prefs.c -> epan/prefs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2600: GList *",
          "2601: prefs_get_string_list(const gchar *str)",
          "2602: {",
          "2684:     }",
          "2688: }",
          "2690: char *join_string_list(GList *sl)",
          "",
          "[Removed Lines]",
          "2603:   enum { PRE_STRING, IN_QUOT, NOT_IN_QUOT };",
          "2605:   gint      state = PRE_STRING, i = 0, j = 0;",
          "2606:   gboolean  backslash = FALSE;",
          "2607:   guchar    cur_c;",
          "2608:   gchar    *slstr = NULL;",
          "2609:   GList    *sl = NULL;",
          "2612:   slstr = (gchar *) g_malloc(sizeof(gchar) * COL_MAX_LEN);",
          "2613:   j = 0;",
          "2615:   for (;;) {",
          "2616:     cur_c = str[i];",
          "2617:     if (cur_c == '\\0') {",
          "2620:       if (state == IN_QUOT || backslash) {",
          "2623:         g_free(slstr);",
          "2624:         prefs_clear_string_list(sl);",
          "2625:         return NULL;",
          "2626:       }",
          "2627:       slstr[j] = '\\0';",
          "2628:       sl = g_list_append(sl, slstr);",
          "2629:       break;",
          "2630:     }",
          "2631:     if (cur_c == '\"' && ! backslash) {",
          "2632:       switch (state) {",
          "2633:         case PRE_STRING:",
          "2636:           state = IN_QUOT;",
          "2637:           break;",
          "2638:         case IN_QUOT:",
          "2641:           state = NOT_IN_QUOT;",
          "2642:           break;",
          "2643:         case NOT_IN_QUOT:",
          "2646:           state = IN_QUOT;",
          "2647:           break;",
          "2648:         default:",
          "2649:           break;",
          "2650:       }",
          "2651:     } else if (cur_c == '\\\\' && ! backslash) {",
          "2653:          backslash; escape the next character.",
          "2656:       backslash = TRUE;",
          "2657:       if (state == PRE_STRING)",
          "2658:         state = NOT_IN_QUOT;",
          "2659:     } else if (cur_c == ',' && state != IN_QUOT && ! backslash) {",
          "2661:          and it wasn't preceded by a backslash; it's the end of",
          "2663:       slstr[j] = '\\0';",
          "2664:       sl = g_list_append(sl, slstr);",
          "2667:       state = PRE_STRING;",
          "2668:       slstr = (gchar *) g_malloc(sizeof(gchar) * COL_MAX_LEN);",
          "2669:       j = 0;",
          "2670:     } else if (!isspace(cur_c) || state != PRE_STRING) {",
          "2672:          string (i.e., already seen a non-white-space character for that",
          "2673:          string and put it into the string).",
          "2675:          The character is to be put into the string; do so if there's",
          "2677:       if (j < COL_MAX_LEN) {",
          "2678:         slstr[j] = cur_c;",
          "2679:         j++;",
          "2680:       }",
          "2683:       backslash = FALSE;",
          "2685:     i++;",
          "2686:   }",
          "2687:   return(sl);",
          "",
          "[Added Lines]",
          "2603:     enum { PRE_STRING, IN_QUOT, NOT_IN_QUOT };",
          "2605:     gint      state = PRE_STRING, i = 0, j = 0;",
          "2606:     gboolean  backslash = FALSE;",
          "2607:     guchar    cur_c;",
          "2608:     gchar    *slstr = NULL;",
          "2609:     GList    *sl = NULL;",
          "2612:     slstr = (gchar *) g_malloc(sizeof(gchar) * COL_MAX_LEN);",
          "2613:     j = 0;",
          "2615:     for (;;) {",
          "2616:         cur_c = str[i];",
          "2617:         if (cur_c == '\\0') {",
          "2620:             if (state == IN_QUOT || backslash) {",
          "2623:                 g_free(slstr);",
          "2624:                 prefs_clear_string_list(sl);",
          "2625:                 return NULL;",
          "2626:             }",
          "2627:             slstr[j] = '\\0';",
          "2628:             sl = g_list_append(sl, slstr);",
          "2629:             break;",
          "2630:         }",
          "2631:         if (cur_c == '\"' && ! backslash) {",
          "2632:             switch (state) {",
          "2633:             case PRE_STRING:",
          "2636:                 state = IN_QUOT;",
          "2637:                 break;",
          "2638:             case IN_QUOT:",
          "2641:                 state = NOT_IN_QUOT;",
          "2642:                 break;",
          "2643:             case NOT_IN_QUOT:",
          "2646:                 state = IN_QUOT;",
          "2647:                 break;",
          "2648:             default:",
          "2649:                 break;",
          "2650:             }",
          "2651:         } else if (cur_c == '\\\\' && ! backslash) {",
          "2653:                backslash; escape the next character.",
          "2656:             backslash = TRUE;",
          "2657:             if (state == PRE_STRING)",
          "2658:                 state = NOT_IN_QUOT;",
          "2659:         } else if (cur_c == ',' && state != IN_QUOT && ! backslash) {",
          "2661:                and it wasn't preceded by a backslash; it's the end of",
          "2663:             slstr[j] = '\\0';",
          "2664:             sl = g_list_append(sl, slstr);",
          "2667:             state = PRE_STRING;",
          "2668:             slstr = (gchar *) g_malloc(sizeof(gchar) * COL_MAX_LEN);",
          "2669:             j = 0;",
          "2670:         } else if (!isspace(cur_c) || state != PRE_STRING) {",
          "2672:                string (i.e., already seen a non-white-space character for that",
          "2673:                string and put it into the string).",
          "2675:                The character is to be put into the string; do so if there's",
          "2677:             if (j < COL_MAX_LEN) {",
          "2678:                 slstr[j] = cur_c;",
          "2679:                 j++;",
          "2680:             }",
          "2683:             backslash = FALSE;",
          "2684:         }",
          "2685:         i++;",
          "2687:     return(sl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2721: void",
          "2722: prefs_clear_string_list(GList *sl)",
          "2723: {",
          "2730: }",
          "",
          "[Removed Lines]",
          "2724:   GList *l = sl;",
          "2726:   while (l) {",
          "2727:     g_free(l->data);",
          "2728:     l = g_list_remove_link(l, l);",
          "2729:   }",
          "",
          "[Added Lines]",
          "2724:     GList *l = sl;",
          "2726:     while (l) {",
          "2727:         g_free(l->data);",
          "2728:         l = g_list_remove_link(l, l);",
          "2729:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2789: static gboolean",
          "2790: parse_column_format(fmt_data *cfmt, const char *fmt)",
          "2791: {",
          "2815:         g_strfreev(cust_format_info);",
          "2823:     } else {",
          "2825:     }",
          "2841: }",
          "",
          "[Removed Lines]",
          "2792:   const gchar *cust_format = col_format_to_string(COL_CUSTOM);",
          "2793:   size_t cust_format_len = strlen(cust_format);",
          "2794:   gchar **cust_format_info;",
          "2795:   char *p;",
          "2796:   int col_fmt;",
          "2797:   gchar *col_custom_field;",
          "2798:   long col_custom_occurrence;",
          "2799:   gboolean col_resolved;",
          "2804:   if ((strlen(fmt) > cust_format_len) && (fmt[cust_format_len] == ':') &&",
          "2805:       strncmp(fmt, cust_format, cust_format_len) == 0) {",
          "2807:     col_fmt = COL_CUSTOM;",
          "2809:     col_custom_field = g_strdup(cust_format_info[0]);",
          "2810:     if (col_custom_field && cust_format_info[1]) {",
          "2811:       col_custom_occurrence = strtol(cust_format_info[1], &p, 10);",
          "2812:       if (p == cust_format_info[1] || *p != '\\0') {",
          "2814:         g_free(col_custom_field);",
          "2816:         return FALSE;",
          "2817:       }",
          "2818:     } else {",
          "2819:       col_custom_occurrence = 0;",
          "2820:     }",
          "2821:     if (col_custom_field && cust_format_info[1] && cust_format_info[2]) {",
          "2822:       col_resolved = (cust_format_info[2][0] == 'U') ? FALSE : TRUE;",
          "2824:       col_resolved = TRUE;",
          "2826:     g_strfreev(cust_format_info);",
          "2827:   } else {",
          "2828:     col_fmt = get_column_format_from_str(fmt);",
          "2829:     if (col_fmt == -1)",
          "2830:       return FALSE;",
          "2831:     col_custom_field = NULL;",
          "2832:     col_custom_occurrence = 0;",
          "2833:     col_resolved = TRUE;",
          "2834:   }",
          "2836:   cfmt->fmt = col_fmt;",
          "2837:   cfmt->custom_field = col_custom_field;",
          "2838:   cfmt->custom_occurrence = (int)col_custom_occurrence;",
          "2839:   cfmt->resolved = col_resolved;",
          "2840:   return TRUE;",
          "",
          "[Added Lines]",
          "2792:     const gchar *cust_format = col_format_to_string(COL_CUSTOM);",
          "2793:     size_t cust_format_len = strlen(cust_format);",
          "2794:     gchar **cust_format_info;",
          "2795:     char *p;",
          "2796:     int col_fmt;",
          "2797:     gchar *col_custom_field;",
          "2798:     long col_custom_occurrence;",
          "2799:     gboolean col_resolved;",
          "2804:     if ((strlen(fmt) > cust_format_len) && (fmt[cust_format_len] == ':') &&",
          "2805:         strncmp(fmt, cust_format, cust_format_len) == 0) {",
          "2807:         col_fmt = COL_CUSTOM;",
          "2809:         col_custom_field = g_strdup(cust_format_info[0]);",
          "2810:         if (col_custom_field && cust_format_info[1]) {",
          "2811:             col_custom_occurrence = strtol(cust_format_info[1], &p, 10);",
          "2812:             if (p == cust_format_info[1] || *p != '\\0') {",
          "2814:                 g_free(col_custom_field);",
          "2815:                 g_strfreev(cust_format_info);",
          "2816:                 return FALSE;",
          "2817:             }",
          "2818:         } else {",
          "2819:             col_custom_occurrence = 0;",
          "2820:         }",
          "2821:         if (col_custom_field && cust_format_info[1] && cust_format_info[2]) {",
          "2822:             col_resolved = (cust_format_info[2][0] == 'U') ? FALSE : TRUE;",
          "2823:         } else {",
          "2824:             col_resolved = TRUE;",
          "2825:         }",
          "2828:         col_fmt = get_column_format_from_str(fmt);",
          "2829:         if (col_fmt == -1)",
          "2830:             return FALSE;",
          "2831:         col_custom_field = NULL;",
          "2832:         col_custom_occurrence = 0;",
          "2833:         col_resolved = TRUE;",
          "2836:     cfmt->fmt = col_fmt;",
          "2837:     cfmt->custom_field = col_custom_field;",
          "2838:     cfmt->custom_occurrence = (int)col_custom_occurrence;",
          "2839:     cfmt->resolved = col_resolved;",
          "2840:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2849: static void",
          "2850: init_prefs(void)",
          "2851: {",
          "2862: }",
          "",
          "[Removed Lines]",
          "2852:   if (prefs_initialized)",
          "2853:     return;",
          "2855:   uat_load_all();",
          "2857:   prefs_register_modules();",
          "2859:   filter_expression_init(TRUE);",
          "2861:   prefs_initialized = TRUE;",
          "",
          "[Added Lines]",
          "2852:     if (prefs_initialized)",
          "2853:         return;",
          "2855:     uat_load_all();",
          "2857:     prefs_register_modules();",
          "2859:     filter_expression_init(TRUE);",
          "2861:     prefs_initialized = TRUE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2867: static void",
          "2868: pre_init_prefs(void)",
          "2869: {",
          "2897: #ifdef _WIN32",
          "2899: #else",
          "2901: #endif",
          "2966: #ifdef HTML_VIEWER",
          "2968: #else",
          "2970: #endif",
          "2998: #ifdef PCAP_NG_DEFAULT",
          "3000: #else",
          "3002: #endif",
          "3032: }",
          "",
          "[Removed Lines]",
          "2870:   int         i;",
          "2871:   gchar       *col_name;",
          "2872:   fmt_data    *cfmt;",
          "2873:   static const gchar *col_fmt[DEF_NUM_COLS*2] = {",
          "2874:                             \"No.\",      \"%m\", \"Time\",        \"%t\",",
          "2875:                             \"Source\",   \"%s\", \"Destination\", \"%d\",",
          "2876:                             \"Protocol\", \"%p\", \"Length\",      \"%L\",",
          "2877:                             \"Info\",     \"%i\"};",
          "2879:   if (prefs_pre_initialized)",
          "2880:      return;",
          "2882:   prefs.pr_format  = PR_FMT_TEXT;",
          "2883:   prefs.pr_dest    = PR_DEST_CMD;",
          "2884:   prefs.pr_file    = \"wireshark.out\";",
          "2885:   prefs.pr_cmd     = \"lpr\";",
          "2887:   prefs.gui_altern_colors = FALSE;",
          "2888:   prefs.gui_expert_composite_eyecandy = FALSE;",
          "2889:   prefs.gui_ptree_line_style = 0;",
          "2890:   prefs.gui_ptree_expander_style = 1;",
          "2891:   prefs.gui_hex_dump_highlight_style = 1;",
          "2892:   prefs.filter_toolbar_show_in_statusbar = FALSE;",
          "2893:   prefs.gui_toolbar_main_style = TB_STYLE_ICONS;",
          "2894:   prefs.gui_toolbar_filter_style = TB_STYLE_TEXT;",
          "2898:   prefs.gui_gtk2_font_name         = (char *) \"Lucida Console 10\";",
          "2900:   prefs.gui_gtk2_font_name         = (char *) \"Monospace 10\";",
          "2903:   prefs.gui_qt_font_name           = (char *) \"\";",
          "2904:   prefs.gui_marked_fg.pixel        =     65535;",
          "2905:   prefs.gui_marked_fg.red          =     65535;",
          "2906:   prefs.gui_marked_fg.green        =     65535;",
          "2907:   prefs.gui_marked_fg.blue         =     65535;",
          "2908:   prefs.gui_marked_bg.pixel        =         0;",
          "2909:   prefs.gui_marked_bg.red          =         0;",
          "2910:   prefs.gui_marked_bg.green        =      8224;",
          "2911:   prefs.gui_marked_bg.blue         =     10794;",
          "2912:   prefs.gui_ignored_fg.pixel       =     32767;",
          "2913:   prefs.gui_ignored_fg.red         =     32767;",
          "2914:   prefs.gui_ignored_fg.green       =     32767;",
          "2915:   prefs.gui_ignored_fg.blue        =     32767;",
          "2916:   prefs.gui_ignored_bg.pixel       =     65535;",
          "2917:   prefs.gui_ignored_bg.red         =     65535;",
          "2918:   prefs.gui_ignored_bg.green       =     65535;",
          "2919:   prefs.gui_ignored_bg.blue        =     65535;",
          "2920:   prefs.gui_colorized_fg           = \"000000,000000,000000,000000,000000,000000,000000,000000,000000,000000\";",
          "2921:   prefs.gui_colorized_bg           = \"ffc0c0,ffc0ff,e0c0e0,c0c0ff,c0e0e0,c0ffff,c0ffc0,ffffc0,e0e0c0,e0e0e0\";",
          "2922:   prefs.st_client_fg.pixel         =     0;",
          "2923:   prefs.st_client_fg.red           = 32767;",
          "2924:   prefs.st_client_fg.green         =     0;",
          "2925:   prefs.st_client_fg.blue          =     0;",
          "2926:   prefs.st_client_bg.pixel         =     0;",
          "2927:   prefs.st_client_bg.red           = 64507;",
          "2928:   prefs.st_client_bg.green         = 60909;",
          "2929:   prefs.st_client_bg.blue          = 60909;",
          "2930:   prefs.st_server_fg.pixel         =     0;",
          "2931:   prefs.st_server_fg.red           =     0;",
          "2932:   prefs.st_server_fg.green         =     0;",
          "2933:   prefs.st_server_fg.blue          = 32767;",
          "2934:   prefs.st_server_bg.pixel         =     0;",
          "2935:   prefs.st_server_bg.red           = 60909;",
          "2936:   prefs.st_server_bg.green         = 60909;",
          "2937:   prefs.st_server_bg.blue          = 64507;",
          "2939:   prefs.gui_text_valid.red           = 0xAFFF;",
          "2940:   prefs.gui_text_valid.green         = 0xFFFF;",
          "2941:   prefs.gui_text_valid.blue          = 0xAFFF;",
          "2943:   prefs.gui_text_invalid.red       = 0xFFFF;",
          "2944:   prefs.gui_text_invalid.green     = 0xAFFF;",
          "2945:   prefs.gui_text_invalid.blue      = 0xAFFF;",
          "2947:   prefs.gui_text_deprecated.red    = 0xFFFF;",
          "2948:   prefs.gui_text_deprecated.green  = 0xFFFF;",
          "2949:   prefs.gui_text_deprecated.blue   = 0xAFFF;",
          "2950:   prefs.gui_geometry_save_position = TRUE;",
          "2951:   prefs.gui_geometry_save_size     = TRUE;",
          "2952:   prefs.gui_geometry_save_maximized= TRUE;",
          "2953:   prefs.gui_macosx_style           = TRUE;",
          "2954:   prefs.gui_console_open           = console_open_never;",
          "2955:   prefs.gui_fileopen_style         = FO_STYLE_LAST_OPENED;",
          "2956:   prefs.gui_recent_df_entries_max  = 10;",
          "2957:   prefs.gui_recent_files_count_max = 10;",
          "2958:   prefs.gui_fileopen_dir           = (char *) get_persdatafile_dir();",
          "2959:   prefs.gui_fileopen_preview       = 3;",
          "2960:   prefs.gui_ask_unsaved            = TRUE;",
          "2961:   prefs.gui_find_wrap              = TRUE;",
          "2962:   prefs.gui_use_pref_save          = FALSE;",
          "2963:   prefs.gui_update_enabled         = TRUE;",
          "2964:   prefs.gui_update_channel         = UPDATE_CHANNEL_STABLE;",
          "2967:   prefs.gui_webbrowser             = (char *) HTML_VIEWER \" %s\";",
          "2969:   prefs.gui_webbrowser             = (char *) \"\";",
          "2971:   prefs.gui_window_title           = (char *) \"\";",
          "2972:   prefs.gui_start_title            = \"The World's Most Popular Network Protocol Analyzer\";",
          "2973:   prefs.gui_version_placement      = version_both;",
          "2974:   prefs.gui_auto_scroll_on_expand  = FALSE;",
          "2975:   prefs.gui_auto_scroll_percentage = 0;",
          "2976:   prefs.gui_layout_type            = layout_type_5;",
          "2977:   prefs.gui_layout_content_1       = layout_pane_content_plist;",
          "2978:   prefs.gui_layout_content_2       = layout_pane_content_pdetails;",
          "2979:   prefs.gui_layout_content_3       = layout_pane_content_pbytes;",
          "2981:   prefs.gui_packet_editor          = FALSE;",
          "2983:   prefs.col_list = NULL;",
          "2984:   for (i = 0; i < DEF_NUM_COLS; i++) {",
          "2985:     cfmt = g_new(fmt_data,1);",
          "2986:     cfmt->title = g_strdup(col_fmt[i * 2]);",
          "2987:     parse_column_format(cfmt, col_fmt[(i * 2) + 1]);",
          "2988:     cfmt->visible = TRUE;",
          "2989:     cfmt->resolved = TRUE;",
          "2990:     cfmt->custom_field = NULL;",
          "2991:     cfmt->custom_occurrence = 0;",
          "2992:     prefs.col_list = g_list_append(prefs.col_list, cfmt);",
          "2993:   }",
          "2994:   prefs.num_cols  = DEF_NUM_COLS;",
          "2997:   prefs.capture_prom_mode             = TRUE;",
          "2999:   prefs.capture_pcap_ng               = TRUE;",
          "3001:   prefs.capture_pcap_ng               = FALSE;",
          "3003:   prefs.capture_real_time             = TRUE;",
          "3004:   prefs.capture_auto_scroll           = TRUE;",
          "3005:   prefs.capture_show_info             = FALSE;",
          "3007:   prefs.capture_columns               = NULL;",
          "3008:   for (i = 0; i < num_capture_cols; i++) {",
          "3009:     col_name = g_strdup(capture_cols[i]);",
          "3010:     prefs.capture_columns = g_list_append(prefs.capture_columns, col_name);",
          "3011:   }",
          "3013:   prefs.console_log_level          =",
          "3014:       G_LOG_LEVEL_WARNING | G_LOG_LEVEL_CRITICAL | G_LOG_LEVEL_ERROR;",
          "3017:   prefs.tap_update_interval    = TAP_UPDATE_DEFAULT_INTERVAL;",
          "3018:   prefs.rtp_player_max_visible = RTP_PLAYER_DEFAULT_VISIBLE;",
          "3019:   prefs.st_enable_burstinfo = TRUE;",
          "3020:   prefs.st_burst_showcount = FALSE;",
          "3021:   prefs.st_burst_resolution = ST_DEF_BURSTRES;",
          "3022:   prefs.st_burst_windowlen = ST_DEF_BURSTLEN;",
          "3023:   prefs.st_sort_casesensitve = TRUE;",
          "3024:   prefs.st_sort_rng_fixorder = TRUE;",
          "3025:   prefs.st_sort_rng_nameonly = TRUE;",
          "3026:   prefs.st_sort_defcolflag = ST_SORT_COL_COUNT;",
          "3027:   prefs.st_sort_defdescending = TRUE;",
          "3028:   prefs.st_sort_showfullname = FALSE;",
          "3029:   prefs.display_hidden_proto_items = FALSE;",
          "3031:   prefs_pre_initialized = TRUE;",
          "",
          "[Added Lines]",
          "2870:     int         i;",
          "2871:     gchar       *col_name;",
          "2872:     fmt_data    *cfmt;",
          "2873:     static const gchar *col_fmt[DEF_NUM_COLS*2] = {",
          "2874:         \"No.\",      \"%m\", \"Time\",        \"%t\",",
          "2875:         \"Source\",   \"%s\", \"Destination\", \"%d\",",
          "2876:         \"Protocol\", \"%p\", \"Length\",      \"%L\",",
          "2877:         \"Info\",     \"%i\"};",
          "2879:     if (prefs_pre_initialized)",
          "2880:         return;",
          "2882:     prefs.pr_format  = PR_FMT_TEXT;",
          "2883:     prefs.pr_dest    = PR_DEST_CMD;",
          "2884:     prefs.pr_file    = \"wireshark.out\";",
          "2885:     prefs.pr_cmd     = \"lpr\";",
          "2887:     prefs.gui_altern_colors = FALSE;",
          "2888:     prefs.gui_expert_composite_eyecandy = FALSE;",
          "2889:     prefs.gui_ptree_line_style = 0;",
          "2890:     prefs.gui_ptree_expander_style = 1;",
          "2891:     prefs.gui_hex_dump_highlight_style = 1;",
          "2892:     prefs.filter_toolbar_show_in_statusbar = FALSE;",
          "2893:     prefs.gui_toolbar_main_style = TB_STYLE_ICONS;",
          "2894:     prefs.gui_toolbar_filter_style = TB_STYLE_TEXT;",
          "2898:     prefs.gui_gtk2_font_name         = (char *) \"Lucida Console 10\";",
          "2900:     prefs.gui_gtk2_font_name         = (char *) \"Monospace 10\";",
          "2903:     prefs.gui_qt_font_name           = (char *) \"\";",
          "2904:     prefs.gui_marked_fg.pixel        =     65535;",
          "2905:     prefs.gui_marked_fg.red          =     65535;",
          "2906:     prefs.gui_marked_fg.green        =     65535;",
          "2907:     prefs.gui_marked_fg.blue         =     65535;",
          "2908:     prefs.gui_marked_bg.pixel        =         0;",
          "2909:     prefs.gui_marked_bg.red          =         0;",
          "2910:     prefs.gui_marked_bg.green        =      8224;",
          "2911:     prefs.gui_marked_bg.blue         =     10794;",
          "2912:     prefs.gui_ignored_fg.pixel       =     32767;",
          "2913:     prefs.gui_ignored_fg.red         =     32767;",
          "2914:     prefs.gui_ignored_fg.green       =     32767;",
          "2915:     prefs.gui_ignored_fg.blue        =     32767;",
          "2916:     prefs.gui_ignored_bg.pixel       =     65535;",
          "2917:     prefs.gui_ignored_bg.red         =     65535;",
          "2918:     prefs.gui_ignored_bg.green       =     65535;",
          "2919:     prefs.gui_ignored_bg.blue        =     65535;",
          "2920:     prefs.gui_colorized_fg           = \"000000,000000,000000,000000,000000,000000,000000,000000,000000,000000\";",
          "2921:     prefs.gui_colorized_bg           = \"ffc0c0,ffc0ff,e0c0e0,c0c0ff,c0e0e0,c0ffff,c0ffc0,ffffc0,e0e0c0,e0e0e0\";",
          "2922:     prefs.st_client_fg.pixel         =     0;",
          "2923:     prefs.st_client_fg.red           = 32767;",
          "2924:     prefs.st_client_fg.green         =     0;",
          "2925:     prefs.st_client_fg.blue          =     0;",
          "2926:     prefs.st_client_bg.pixel         =     0;",
          "2927:     prefs.st_client_bg.red           = 64507;",
          "2928:     prefs.st_client_bg.green         = 60909;",
          "2929:     prefs.st_client_bg.blue          = 60909;",
          "2930:     prefs.st_server_fg.pixel         =     0;",
          "2931:     prefs.st_server_fg.red           =     0;",
          "2932:     prefs.st_server_fg.green         =     0;",
          "2933:     prefs.st_server_fg.blue          = 32767;",
          "2934:     prefs.st_server_bg.pixel         =     0;",
          "2935:     prefs.st_server_bg.red           = 60909;",
          "2936:     prefs.st_server_bg.green         = 60909;",
          "2937:     prefs.st_server_bg.blue          = 64507;",
          "2939:     prefs.gui_text_valid.red           = 0xAFFF;",
          "2940:     prefs.gui_text_valid.green         = 0xFFFF;",
          "2941:     prefs.gui_text_valid.blue          = 0xAFFF;",
          "2943:     prefs.gui_text_invalid.red       = 0xFFFF;",
          "2944:     prefs.gui_text_invalid.green     = 0xAFFF;",
          "2945:     prefs.gui_text_invalid.blue      = 0xAFFF;",
          "2947:     prefs.gui_text_deprecated.red    = 0xFFFF;",
          "2948:     prefs.gui_text_deprecated.green  = 0xFFFF;",
          "2949:     prefs.gui_text_deprecated.blue   = 0xAFFF;",
          "2950:     prefs.gui_geometry_save_position = TRUE;",
          "2951:     prefs.gui_geometry_save_size     = TRUE;",
          "2952:     prefs.gui_geometry_save_maximized= TRUE;",
          "2953:     prefs.gui_macosx_style           = TRUE;",
          "2954:     prefs.gui_console_open           = console_open_never;",
          "2955:     prefs.gui_fileopen_style         = FO_STYLE_LAST_OPENED;",
          "2956:     prefs.gui_recent_df_entries_max  = 10;",
          "2957:     prefs.gui_recent_files_count_max = 10;",
          "2958:     prefs.gui_fileopen_dir           = (char *) get_persdatafile_dir();",
          "2959:     prefs.gui_fileopen_preview       = 3;",
          "2960:     prefs.gui_ask_unsaved            = TRUE;",
          "2961:     prefs.gui_find_wrap              = TRUE;",
          "2962:     prefs.gui_use_pref_save          = FALSE;",
          "2963:     prefs.gui_update_enabled         = TRUE;",
          "2964:     prefs.gui_update_channel         = UPDATE_CHANNEL_STABLE;",
          "2967:     prefs.gui_webbrowser             = (char *) HTML_VIEWER \" %s\";",
          "2969:     prefs.gui_webbrowser             = (char *) \"\";",
          "2971:     prefs.gui_window_title           = (char *) \"\";",
          "2972:     prefs.gui_start_title            = \"The World's Most Popular Network Protocol Analyzer\";",
          "2973:     prefs.gui_version_placement      = version_both;",
          "2974:     prefs.gui_auto_scroll_on_expand  = FALSE;",
          "2975:     prefs.gui_auto_scroll_percentage = 0;",
          "2976:     prefs.gui_layout_type            = layout_type_5;",
          "2977:     prefs.gui_layout_content_1       = layout_pane_content_plist;",
          "2978:     prefs.gui_layout_content_2       = layout_pane_content_pdetails;",
          "2979:     prefs.gui_layout_content_3       = layout_pane_content_pbytes;",
          "2981:     prefs.gui_packet_editor          = FALSE;",
          "2983:     prefs.col_list = NULL;",
          "2984:     for (i = 0; i < DEF_NUM_COLS; i++) {",
          "2985:         cfmt = g_new(fmt_data,1);",
          "2986:         cfmt->title = g_strdup(col_fmt[i * 2]);",
          "2987:         parse_column_format(cfmt, col_fmt[(i * 2) + 1]);",
          "2988:         cfmt->visible = TRUE;",
          "2989:         cfmt->resolved = TRUE;",
          "2990:         cfmt->custom_field = NULL;",
          "2991:         cfmt->custom_occurrence = 0;",
          "2992:         prefs.col_list = g_list_append(prefs.col_list, cfmt);",
          "2993:     }",
          "2994:     prefs.num_cols  = DEF_NUM_COLS;",
          "2997:     prefs.capture_prom_mode             = TRUE;",
          "2999:     prefs.capture_pcap_ng               = TRUE;",
          "3001:     prefs.capture_pcap_ng               = FALSE;",
          "3003:     prefs.capture_real_time             = TRUE;",
          "3004:     prefs.capture_auto_scroll           = TRUE;",
          "3005:     prefs.capture_show_info             = FALSE;",
          "3007:     prefs.capture_columns               = NULL;",
          "3008:     for (i = 0; i < num_capture_cols; i++) {",
          "3009:         col_name = g_strdup(capture_cols[i]);",
          "3010:         prefs.capture_columns = g_list_append(prefs.capture_columns, col_name);",
          "3011:     }",
          "3013:     prefs.console_log_level          =",
          "3014:         G_LOG_LEVEL_WARNING | G_LOG_LEVEL_CRITICAL | G_LOG_LEVEL_ERROR;",
          "3017:     prefs.tap_update_interval    = TAP_UPDATE_DEFAULT_INTERVAL;",
          "3018:     prefs.rtp_player_max_visible = RTP_PLAYER_DEFAULT_VISIBLE;",
          "3019:     prefs.st_enable_burstinfo = TRUE;",
          "3020:     prefs.st_burst_showcount = FALSE;",
          "3021:     prefs.st_burst_resolution = ST_DEF_BURSTRES;",
          "3022:     prefs.st_burst_windowlen = ST_DEF_BURSTLEN;",
          "3023:     prefs.st_sort_casesensitve = TRUE;",
          "3024:     prefs.st_sort_rng_fixorder = TRUE;",
          "3025:     prefs.st_sort_rng_nameonly = TRUE;",
          "3026:     prefs.st_sort_defcolflag = ST_SORT_COL_COUNT;",
          "3027:     prefs.st_sort_defdescending = TRUE;",
          "3028:     prefs.st_sort_showfullname = FALSE;",
          "3029:     prefs.display_hidden_proto_items = FALSE;",
          "3031:     prefs_pre_initialized = TRUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3124: void",
          "3125: prefs_reset(void)",
          "3126: {",
          "3150: }",
          "",
          "[Removed Lines]",
          "3127:   prefs_initialized = FALSE;",
          "3128:   g_free(prefs.saved_at_version);",
          "3129:   prefs.saved_at_version = NULL;",
          "3134:   uat_unload_all();",
          "3139:   oids_cleanup();",
          "3144:   init_prefs();",
          "3149:   wmem_tree_foreach(prefs_modules, reset_module_prefs, NULL);",
          "",
          "[Added Lines]",
          "3127:     prefs_initialized = FALSE;",
          "3128:     g_free(prefs.saved_at_version);",
          "3129:     prefs.saved_at_version = NULL;",
          "3134:     uat_unload_all();",
          "3139:     oids_cleanup();",
          "3144:     init_prefs();",
          "3149:     wmem_tree_foreach(prefs_modules, reset_module_prefs, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3166:            char **gpf_path_return, int *pf_errno_return,",
          "3167:            int *pf_read_errno_return, char **pf_path_return)",
          "3168: {",
          "3195:     }",
          "3225:     }",
          "3235:     }",
          "3278: }",
          "",
          "[Removed Lines]",
          "3169:   int         err;",
          "3170:   char        *pf_path;",
          "3171:   FILE        *pf;",
          "3174:   oids_cleanup();",
          "3176:   init_prefs();",
          "3182:   if (gpf_path == NULL) {",
          "3187:     gpf_path = get_datafile_path(PF_NAME);",
          "3188:     if ((pf = ws_fopen(gpf_path, \"r\")) == NULL && errno == ENOENT) {",
          "3192:       g_free(gpf_path);",
          "3193:       gpf_path = get_datafile_path(OLD_GPF_NAME);",
          "3194:       pf = ws_fopen(gpf_path, \"r\");",
          "3196:   } else {",
          "3200:     pf = ws_fopen(gpf_path, \"r\");",
          "3201:   }",
          "3209:   if (pf != NULL) {",
          "3214:     mgcp_tcp_port_count = 0;",
          "3215:     mgcp_udp_port_count = 0;",
          "3218:     err = read_prefs_file(gpf_path, pf, set_pref, NULL);",
          "3219:     if (err != 0) {",
          "3226:     fclose(pf);",
          "3227:   } else {",
          "3229:        \"it doesn't exist\", return the errno and the pathname, so our",
          "3231:     if (errno != ENOENT) {",
          "3236:   }",
          "3239:   pf_path = get_persconffile_path(PF_NAME, TRUE);",
          "3243:   if ((pf = ws_fopen(pf_path, \"r\")) != NULL) {",
          "3248:     mgcp_tcp_port_count = 0;",
          "3249:     mgcp_udp_port_count = 0;",
          "3252:     err = read_prefs_file(pf_path, pf, set_pref, NULL);",
          "3253:     if (err != 0) {",
          "3259:     } else",
          "3260:       g_free(pf_path);",
          "3261:     fclose(pf);",
          "3262:   } else {",
          "3264:        \"it doesn't exist\", return the errno and the pathname, so our",
          "3266:     if (errno != ENOENT) {",
          "3270:     } else",
          "3271:       g_free(pf_path);",
          "3272:   }",
          "3275:   oids_init();",
          "3277:   return &prefs;",
          "",
          "[Added Lines]",
          "3169:     int         err;",
          "3170:     char        *pf_path;",
          "3171:     FILE        *pf;",
          "3174:     oids_cleanup();",
          "3176:     init_prefs();",
          "3182:     if (gpf_path == NULL) {",
          "3187:         gpf_path = get_datafile_path(PF_NAME);",
          "3188:         if ((pf = ws_fopen(gpf_path, \"r\")) == NULL && errno == ENOENT) {",
          "3192:             g_free(gpf_path);",
          "3193:             gpf_path = get_datafile_path(OLD_GPF_NAME);",
          "3194:             pf = ws_fopen(gpf_path, \"r\");",
          "3195:         }",
          "3196:     } else {",
          "3200:         pf = ws_fopen(gpf_path, \"r\");",
          "3209:     if (pf != NULL) {",
          "3214:         mgcp_tcp_port_count = 0;",
          "3215:         mgcp_udp_port_count = 0;",
          "3218:         err = read_prefs_file(gpf_path, pf, set_pref, NULL);",
          "3219:         if (err != 0) {",
          "3225:         }",
          "3226:         fclose(pf);",
          "3227:     } else {",
          "3229:            \"it doesn't exist\", return the errno and the pathname, so our",
          "3231:         if (errno != ENOENT) {",
          "3235:         }",
          "3239:     pf_path = get_persconffile_path(PF_NAME, TRUE);",
          "3243:     if ((pf = ws_fopen(pf_path, \"r\")) != NULL) {",
          "3248:         mgcp_tcp_port_count = 0;",
          "3249:         mgcp_udp_port_count = 0;",
          "3252:         err = read_prefs_file(pf_path, pf, set_pref, NULL);",
          "3253:         if (err != 0) {",
          "3259:         } else",
          "3260:             g_free(pf_path);",
          "3261:         fclose(pf);",
          "3262:     } else {",
          "3264:            \"it doesn't exist\", return the errno and the pathname, so our",
          "3266:         if (errno != ENOENT) {",
          "3270:         } else",
          "3271:             g_free(pf_path);",
          "3275:     oids_init();",
          "3277:     return &prefs;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3283: read_prefs_file(const char *pf_path, FILE *pf,",
          "3284:                 pref_set_pair_cb pref_set_pair_fct, void *private_data)",
          "3285: {",
          "3329:     }",
          "3343:                 }",
          "3355:                 break;",
          "3360:                 break;",
          "3370:                 prefs.unknown_prefs = TRUE;",
          "3371:                 break;",
          "3383:                 prefs.unknown_prefs = TRUE;",
          "3384:                 break;",
          "3388:             }",
          "3406:         } else {",
          "3421:         }",
          "3428:     }",
          "3472: }",
          "",
          "[Removed Lines]",
          "3286:   enum {",
          "3292:   } state = START;",
          "3293:   int       got_c;",
          "3294:   GString  *cur_val;",
          "3295:   GString  *cur_var;",
          "3296:   gboolean  got_val = FALSE;",
          "3297:   gint      fline = 1, pline = 1;",
          "3298:   gchar     hint[] = \"(save preferences to remove this warning)\";",
          "3299:   gchar     ver[128];",
          "3301:   cur_val = g_string_new(\"\");",
          "3302:   cur_var = g_string_new(\"\");",
          "3305:   if (fscanf(pf, \"# Configuration file for %127[^\\r\\n]\", ver) == 1) {",
          "3307:     prefs.saved_at_version = g_strndup(ver, strlen(ver) - 1);",
          "3308:   }",
          "3309:   rewind(pf);",
          "3311:   while ((got_c = getc(pf)) != EOF) {",
          "3312:     if (got_c == '\\r') {",
          "3316:       got_c = getc(pf);",
          "3317:       if (got_c == EOF)",
          "3318:         break;",
          "3319:       if (got_c != '\\n') {",
          "3321:         ungetc(got_c, pf);",
          "3322:         got_c = '\\r';",
          "3323:       }",
          "3324:     }",
          "3325:     if (got_c == '\\n') {",
          "3326:       state = START;",
          "3327:       fline++;",
          "3328:       continue;",
          "3331:     switch (state) {",
          "3332:       case START:",
          "3333:         if (isalnum(got_c)) {",
          "3334:           if (cur_var->len > 0) {",
          "3335:             if (got_val) {",
          "3336:               if (cur_val->len > 0) {",
          "3337:                 if (cur_val->str[cur_val->len-1] == ',') {",
          "3341:                   cur_val->str[cur_val->len-1] = '\\0';",
          "3342:                   g_warning (\"%s line %d: trailing comma in \\\"%s\\\" %s\", pf_path, pline, cur_var->str, hint);",
          "3344:               }",
          "3346:                  the value as appropriate.",
          "3348:                  Since we're reading a file, rather than processing",
          "3349:                  explicit user input, for range preferences, silently",
          "3350:                  lower values in excess of the range's maximum, rather",
          "3352:               switch (pref_set_pair_fct(cur_var->str, cur_val->str, private_data, FALSE)) {",
          "3354:               case PREFS_SET_OK:",
          "3357:               case PREFS_SET_SYNTAX_ERR:",
          "3358:                 g_warning (\"Syntax error in preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3359:                   cur_var->str, pline, pf_path, hint);",
          "3362:               case PREFS_SET_NO_SUCH_PREF:",
          "3367:                 if (strcmp(cur_var->str, \"print.command\") != 0)",
          "3368:                     g_warning (\"No such preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3369:                       cur_var->str, pline, pf_path, hint);",
          "3373:               case PREFS_SET_OBSOLETE:",
          "3374:                 if (strcmp(cur_var->str, \"print.command\") != 0)",
          "3376:                      displayed stating that obsolete prefs have been detected and the user will",
          "3377:                      be given the opportunity to save these prefs under a different profile name.",
          "3378:                      The prefs in question need to be listed in the console window so that the",
          "3379:                      user can make an informed choice.",
          "3381:                   g_warning (\"Obsolete preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3382:                     cur_var->str, pline, pf_path, hint);",
          "3385:               }",
          "3386:             } else {",
          "3387:               g_warning (\"Incomplete preference at line %d: of\\n%s %s\", pline, pf_path, hint);",
          "3389:           }",
          "3390:           state      = IN_VAR;",
          "3391:           got_val    = FALSE;",
          "3392:           g_string_truncate(cur_var, 0);",
          "3393:           g_string_append_c(cur_var, (gchar) got_c);",
          "3394:           pline = fline;",
          "3395:         } else if (isspace(got_c) && cur_var->len > 0 && got_val) {",
          "3396:           state = PRE_VAL;",
          "3397:         } else if (got_c == '#') {",
          "3398:           state = IN_SKIP;",
          "3399:         } else {",
          "3400:           g_warning (\"Malformed preference at line %d of\\n%s %s\", fline, pf_path, hint);",
          "3401:         }",
          "3402:         break;",
          "3403:       case IN_VAR:",
          "3404:         if (got_c != ':') {",
          "3405:           g_string_append_c(cur_var, (gchar) got_c);",
          "3408:           state   = PRE_VAL;",
          "3409:           g_string_truncate(cur_val, 0);",
          "3414:           got_val = TRUE;",
          "3415:         }",
          "3416:         break;",
          "3417:       case PRE_VAL:",
          "3418:         if (!isspace(got_c)) {",
          "3419:           state = IN_VAL;",
          "3420:           g_string_append_c(cur_val, (gchar) got_c);",
          "3422:         break;",
          "3423:       case IN_VAL:",
          "3424:         g_string_append_c(cur_val, (gchar) got_c);",
          "3425:         break;",
          "3426:       case IN_SKIP:",
          "3427:         break;",
          "3429:   }",
          "3430:   if (cur_var->len > 0) {",
          "3431:     if (got_val) {",
          "3433:          the value as appropriate.",
          "3435:          Since we're reading a file, rather than processing",
          "3436:          explicit user input, for range preferences, silently",
          "3437:          lower values in excess of the range's maximum, rather",
          "3439:       switch (pref_set_pair_fct(cur_var->str, cur_val->str, private_data, FALSE)) {",
          "3441:       case PREFS_SET_OK:",
          "3442:         break;",
          "3444:       case PREFS_SET_SYNTAX_ERR:",
          "3445:         g_warning (\"Syntax error in preference %s at line %d of\\n%s %s\",",
          "3446:           cur_var->str, pline, pf_path, hint);",
          "3447:         break;",
          "3449:       case PREFS_SET_NO_SUCH_PREF:",
          "3450:         g_warning (\"No such preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3451:             cur_var->str, pline, pf_path, hint);",
          "3452:         prefs.unknown_prefs = TRUE;",
          "3453:         break;",
          "3455:       case PREFS_SET_OBSOLETE:",
          "3456:         prefs.unknown_prefs = TRUE;",
          "3457:         break;",
          "3458:       }",
          "3459:     } else {",
          "3460:       g_warning (\"Incomplete preference at line %d of\\n%s %s\",",
          "3461:         pline, pf_path, hint);",
          "3462:     }",
          "3463:   }",
          "3465:   g_string_free(cur_val, TRUE);",
          "3466:   g_string_free(cur_var, TRUE);",
          "3468:   if (ferror(pf))",
          "3469:     return errno;",
          "3470:   else",
          "3471:     return 0;",
          "",
          "[Added Lines]",
          "3286:     enum {",
          "3292:     } state = START;",
          "3293:     int       got_c;",
          "3294:     GString  *cur_val;",
          "3295:     GString  *cur_var;",
          "3296:     gboolean  got_val = FALSE;",
          "3297:     gint      fline = 1, pline = 1;",
          "3298:     gchar     hint[] = \"(save preferences to remove this warning)\";",
          "3299:     gchar     ver[128];",
          "3301:     cur_val = g_string_new(\"\");",
          "3302:     cur_var = g_string_new(\"\");",
          "3305:     if (fscanf(pf, \"# Configuration file for %127[^\\r\\n]\", ver) == 1) {",
          "3307:         prefs.saved_at_version = g_strndup(ver, strlen(ver) - 1);",
          "3309:     rewind(pf);",
          "3311:     while ((got_c = getc(pf)) != EOF) {",
          "3312:         if (got_c == '\\r') {",
          "3316:             got_c = getc(pf);",
          "3317:             if (got_c == EOF)",
          "3318:                 break;",
          "3319:             if (got_c != '\\n') {",
          "3321:                 ungetc(got_c, pf);",
          "3322:                 got_c = '\\r';",
          "3323:             }",
          "3324:         }",
          "3325:         if (got_c == '\\n') {",
          "3326:             state = START;",
          "3327:             fline++;",
          "3328:             continue;",
          "3329:         }",
          "3331:         switch (state) {",
          "3332:         case START:",
          "3333:             if (isalnum(got_c)) {",
          "3334:                 if (cur_var->len > 0) {",
          "3335:                     if (got_val) {",
          "3336:                         if (cur_val->len > 0) {",
          "3337:                             if (cur_val->str[cur_val->len-1] == ',') {",
          "3341:                                 cur_val->str[cur_val->len-1] = '\\0';",
          "3342:                                 g_warning (\"%s line %d: trailing comma in \\\"%s\\\" %s\", pf_path, pline, cur_var->str, hint);",
          "3343:                             }",
          "3344:                         }",
          "3346:                            the value as appropriate.",
          "3348:                            Since we're reading a file, rather than processing",
          "3349:                            explicit user input, for range preferences, silently",
          "3350:                            lower values in excess of the range's maximum, rather",
          "3352:                         switch (pref_set_pair_fct(cur_var->str, cur_val->str, private_data, FALSE)) {",
          "3354:                         case PREFS_SET_OK:",
          "3355:                             break;",
          "3357:                         case PREFS_SET_SYNTAX_ERR:",
          "3358:                             g_warning (\"Syntax error in preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3359:                                        cur_var->str, pline, pf_path, hint);",
          "3360:                             break;",
          "3362:                         case PREFS_SET_NO_SUCH_PREF:",
          "3367:                             if (strcmp(cur_var->str, \"print.command\") != 0)",
          "3368:                                 g_warning (\"No such preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3369:                                            cur_var->str, pline, pf_path, hint);",
          "3370:                             prefs.unknown_prefs = TRUE;",
          "3371:                             break;",
          "3373:                         case PREFS_SET_OBSOLETE:",
          "3374:                             if (strcmp(cur_var->str, \"print.command\") != 0)",
          "3376:                                    displayed stating that obsolete prefs have been detected and the user will",
          "3377:                                    be given the opportunity to save these prefs under a different profile name.",
          "3378:                                    The prefs in question need to be listed in the console window so that the",
          "3379:                                    user can make an informed choice.",
          "3381:                                 g_warning (\"Obsolete preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3382:                                            cur_var->str, pline, pf_path, hint);",
          "3383:                             prefs.unknown_prefs = TRUE;",
          "3384:                             break;",
          "3385:                         }",
          "3386:                     } else {",
          "3387:                         g_warning (\"Incomplete preference at line %d: of\\n%s %s\", pline, pf_path, hint);",
          "3388:                     }",
          "3390:                 state      = IN_VAR;",
          "3391:                 got_val    = FALSE;",
          "3392:                 g_string_truncate(cur_var, 0);",
          "3393:                 g_string_append_c(cur_var, (gchar) got_c);",
          "3394:                 pline = fline;",
          "3395:             } else if (isspace(got_c) && cur_var->len > 0 && got_val) {",
          "3396:                 state = PRE_VAL;",
          "3397:             } else if (got_c == '#') {",
          "3398:                 state = IN_SKIP;",
          "3399:             } else {",
          "3400:                 g_warning (\"Malformed preference at line %d of\\n%s %s\", fline, pf_path, hint);",
          "3401:             }",
          "3402:             break;",
          "3403:         case IN_VAR:",
          "3404:             if (got_c != ':') {",
          "3405:                 g_string_append_c(cur_var, (gchar) got_c);",
          "3406:             } else {",
          "3408:                 state   = PRE_VAL;",
          "3409:                 g_string_truncate(cur_val, 0);",
          "3414:                 got_val = TRUE;",
          "3415:             }",
          "3416:             break;",
          "3417:         case PRE_VAL:",
          "3418:             if (!isspace(got_c)) {",
          "3419:                 state = IN_VAL;",
          "3420:                 g_string_append_c(cur_val, (gchar) got_c);",
          "3421:             }",
          "3422:             break;",
          "3423:         case IN_VAL:",
          "3424:             g_string_append_c(cur_val, (gchar) got_c);",
          "3425:             break;",
          "3426:         case IN_SKIP:",
          "3427:             break;",
          "3428:         }",
          "3429:     }",
          "3430:     if (cur_var->len > 0) {",
          "3431:         if (got_val) {",
          "3433:                the value as appropriate.",
          "3435:                Since we're reading a file, rather than processing",
          "3436:                explicit user input, for range preferences, silently",
          "3437:                lower values in excess of the range's maximum, rather",
          "3439:             switch (pref_set_pair_fct(cur_var->str, cur_val->str, private_data, FALSE)) {",
          "3441:             case PREFS_SET_OK:",
          "3444:             case PREFS_SET_SYNTAX_ERR:",
          "3445:                 g_warning (\"Syntax error in preference %s at line %d of\\n%s %s\",",
          "3446:                            cur_var->str, pline, pf_path, hint);",
          "3449:             case PREFS_SET_NO_SUCH_PREF:",
          "3450:                 g_warning (\"No such preference \\\"%s\\\" at line %d of\\n%s %s\",",
          "3451:                            cur_var->str, pline, pf_path, hint);",
          "3455:             case PREFS_SET_OBSOLETE:",
          "3460:             g_warning (\"Incomplete preference at line %d of\\n%s %s\",",
          "3461:                        pline, pf_path, hint);",
          "3465:     g_string_free(cur_val, TRUE);",
          "3466:     g_string_free(cur_var, TRUE);",
          "3468:     if (ferror(pf))",
          "3469:         return errno;",
          "3470:     else",
          "3471:         return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3728: char",
          "3729: string_to_name_resolve(const char *string, e_addr_resolve *name_resolve)",
          "3730: {",
          "3759: }",
          "",
          "[Removed Lines]",
          "3731:   char c;",
          "3733:   memset(name_resolve, 0, sizeof(e_addr_resolve));",
          "3734:   while ((c = *string++) != '\\0') {",
          "3735:       switch (c) {",
          "3736:       case 'm':",
          "3737:           name_resolve->mac_name = TRUE;",
          "3738:           break;",
          "3739:       case 'n':",
          "3740:           name_resolve->network_name = TRUE;",
          "3741:           break;",
          "3742:       case 'N':",
          "3743:           name_resolve->use_external_net_name_resolver = TRUE;",
          "3744:           break;",
          "3745:       case 't':",
          "3746:           name_resolve->transport_name = TRUE;",
          "3747:           break;",
          "3748:       case 'C':",
          "3749:           name_resolve->concurrent_dns = TRUE;",
          "3750:           break;",
          "3751:       default:",
          "3755:           return c;",
          "3756:       }",
          "3757:   }",
          "3758:   return '\\0';",
          "",
          "[Added Lines]",
          "3731:     char c;",
          "3733:     memset(name_resolve, 0, sizeof(e_addr_resolve));",
          "3734:     while ((c = *string++) != '\\0') {",
          "3735:         switch (c) {",
          "3736:         case 'm':",
          "3737:             name_resolve->mac_name = TRUE;",
          "3738:             break;",
          "3739:         case 'n':",
          "3740:             name_resolve->network_name = TRUE;",
          "3741:             break;",
          "3742:         case 'N':",
          "3743:             name_resolve->use_external_net_name_resolver = TRUE;",
          "3744:             break;",
          "3745:         case 't':",
          "3746:             name_resolve->transport_name = TRUE;",
          "3747:             break;",
          "3748:         case 'C':",
          "3749:             name_resolve->concurrent_dns = TRUE;",
          "3750:             break;",
          "3751:         default:",
          "3755:             return c;",
          "3756:         }",
          "3757:     }",
          "3758:     return '\\0';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3806: set_pref(gchar *pref_name, const gchar *value, void *private_data _U_,",
          "3807:          gboolean return_range_errors)",
          "3808: {",
          "3887:         }",
          "4010:         }",
          "4127:         }",
          "4179:         }",
          "4188:         }",
          "4308:     }",
          "4312: }",
          "4314: typedef struct {",
          "",
          "[Removed Lines]",
          "3809:   unsigned long int cval;",
          "3810:   guint    uval;",
          "3811:   gboolean bval;",
          "3812:   gint     enum_val;",
          "3813:   char     *p;",
          "3814:   gchar    *dotp, *last_dotp;",
          "3815:   static gchar *filter_label = NULL;",
          "3816:   static gboolean filter_enabled = FALSE;",
          "3817:   gchar    *filter_expr = NULL;",
          "3818:   module_t *module;",
          "3819:   pref_t   *pref;",
          "3821:   if (strcmp(pref_name, PRS_GUI_FILTER_LABEL) == 0) {",
          "3822:     filter_label = g_strdup(value);",
          "3823:   } else if (strcmp(pref_name, PRS_GUI_FILTER_ENABLED) == 0) {",
          "3824:     filter_enabled = (strcmp(value, \"TRUE\") == 0) ? TRUE : FALSE;",
          "3825:   } else if (strcmp(pref_name, PRS_GUI_FILTER_EXPR) == 0) {",
          "3826:     filter_expr = g_strdup(value);",
          "3827:     filter_expression_new(filter_label, filter_expr, filter_enabled);",
          "3828:     g_free(filter_label);",
          "3829:     g_free(filter_expr);",
          "3830:   } else if (strcmp(pref_name, \"gui.version_in_start_page\") == 0) {",
          "3832:     if (g_ascii_strcasecmp(value, \"true\") == 0) {",
          "3833:         prefs.gui_version_placement = version_both;",
          "3834:     } else {",
          "3835:         prefs.gui_version_placement = version_neither;",
          "3836:     }",
          "3837:   } else if (strcmp(pref_name, \"name_resolve\") == 0 ||",
          "3838:              strcmp(pref_name, \"capture.name_resolve\") == 0) {",
          "3847:      if (g_ascii_strcasecmp(value, \"true\") == 0) {",
          "3848:         gbl_resolv_flags.mac_name = TRUE;",
          "3849:         gbl_resolv_flags.network_name = TRUE;",
          "3850:         gbl_resolv_flags.transport_name = TRUE;",
          "3851:         gbl_resolv_flags.concurrent_dns = TRUE;",
          "3852:      }",
          "3853:      else if (g_ascii_strcasecmp(value, \"false\") == 0) {",
          "3854:         gbl_resolv_flags.mac_name = FALSE;",
          "3855:         gbl_resolv_flags.network_name = FALSE;",
          "3856:         gbl_resolv_flags.transport_name = FALSE;",
          "3857:         gbl_resolv_flags.concurrent_dns = FALSE;",
          "3858:      }",
          "3859:      else {",
          "3861:         gbl_resolv_flags.mac_name = FALSE;",
          "3862:         gbl_resolv_flags.network_name = FALSE;",
          "3863:         gbl_resolv_flags.transport_name = FALSE;",
          "3864:         gbl_resolv_flags.concurrent_dns = FALSE;",
          "3865:         if (string_to_name_resolve(value, &gbl_resolv_flags) != '\\0')",
          "3866:            return PREFS_SET_SYNTAX_ERR;",
          "3867:      }",
          "3868:   } else {",
          "3872:     if ((strcmp(pref_name, \"name_resolve_concurrency\") == 0) ||",
          "3873:         (strcmp(pref_name, \"name_resolve_load_smi_modules\") == 0)  ||",
          "3874:         (strcmp(pref_name, \"name_resolve_suppress_smi_errors\") == 0)) {",
          "3875:         module = nameres_module;",
          "3876:         dotp = pref_name;",
          "3877:     } else {",
          "3879:       module = NULL;",
          "3880:       last_dotp = pref_name;",
          "3881:       while (!module) {",
          "3882:         dotp = strchr(last_dotp, '.');",
          "3883:         if (dotp == NULL) {",
          "3886:             return PREFS_SET_NO_SUCH_PREF;",
          "3889:         module = prefs_find_module(pref_name);",
          "3912:         if (module == NULL) {",
          "3913:           if (strcmp(pref_name, \"column\") == 0)",
          "3914:             module = gui_column_module;",
          "3915:           else if (strcmp(pref_name, \"Diameter\") == 0)",
          "3916:             module = prefs_find_module(\"diameter\");",
          "3917:           else if (strcmp(pref_name, \"bxxp\") == 0)",
          "3918:             module = prefs_find_module(\"beep\");",
          "3919:           else if (strcmp(pref_name, \"gtpv0\") == 0 ||",
          "3920:                    strcmp(pref_name, \"gtpv1\") == 0)",
          "3921:             module = prefs_find_module(\"gtp\");",
          "3922:           else if (strcmp(pref_name, \"smpp-gsm-sms\") == 0)",
          "3923:             module = prefs_find_module(\"gsm-sms-ud\");",
          "3924:           else if (strcmp(pref_name, \"dcp\") == 0)",
          "3925:             module = prefs_find_module(\"dccp\");",
          "3926:           else if (strcmp(pref_name, \"x.25\") == 0)",
          "3927:             module = prefs_find_module(\"x25\");",
          "3928:           else if (strcmp(pref_name, \"x411\") == 0)",
          "3929:             module = prefs_find_module(\"p1\");",
          "3930:           else if (strcmp(pref_name, \"nsip\") == 0)",
          "3931:             module = prefs_find_module(\"gprs-ns\");",
          "3932:           else if (strcmp(pref_name, \"sonmp\") == 0)",
          "3933:             module = prefs_find_module(\"ndp\");",
          "3934:           else if (strcmp(pref_name, \"etheric\") == 0 ||",
          "3935:                    strcmp(pref_name, \"isup_thin\") == 0) {",
          "3937:             return PREFS_SET_OBSOLETE;",
          "3938:           }",
          "3939:           if (module) {",
          "3940:             g_warning (\"Preference \\\"%s.%s\\\" has been converted to \\\"%s.%s.%s\\\"\\n\"",
          "3941:               \"Save your preferences to make this change permanent.\",",
          "3942:               pref_name, dotp+1, module->parent->name, pref_name, dotp+1);",
          "3943:             prefs.unknown_prefs = TRUE;",
          "3944:           }",
          "3945:         }",
          "3948:         last_dotp = dotp;",
          "3949:       }",
          "3950:     }",
          "3952:     pref = prefs_find_preference(module, dotp);",
          "3954:     if (pref == NULL) {",
          "3955:       prefs.unknown_prefs = TRUE;",
          "3960:       if ((strcmp(pref_name, PRS_COL_HIDDEN) == 0) ||",
          "3961:           (strcmp(pref_name, PRS_COL_FMT) == 0)) {",
          "3962:          pref = prefs_find_preference(module, pref_name);",
          "3963:       }",
          "3964:       else if (strcmp(module->name, \"mgcp\") == 0) {",
          "3984:         if (strcmp(dotp, \"display raw text toggle\") == 0)",
          "3985:           pref = prefs_find_preference(module, \"display_raw_text\");",
          "3986:         else if (strcmp(dotp, \"display dissect tree\") == 0)",
          "3987:           pref = prefs_find_preference(module, \"display_dissect_tree\");",
          "3988:         else if (strcmp(dotp, \"tcp.port\") == 0) {",
          "3989:           mgcp_tcp_port_count++;",
          "3990:           if (mgcp_tcp_port_count == 1) {",
          "3992:             pref = prefs_find_preference(module, \"tcp.gateway_port\");",
          "3993:           } else if (mgcp_tcp_port_count == 2) {",
          "3995:             pref = prefs_find_preference(module, \"tcp.callagent_port\");",
          "3996:           }",
          "3999:         } else if (strcmp(dotp, \"udp.port\") == 0) {",
          "4000:           mgcp_udp_port_count++;",
          "4001:           if (mgcp_udp_port_count == 1) {",
          "4003:             pref = prefs_find_preference(module, \"udp.gateway_port\");",
          "4004:           } else if (mgcp_udp_port_count == 2) {",
          "4006:             pref = prefs_find_preference(module, \"udp.callagent_port\");",
          "4007:           }",
          "4011:       } else if (strcmp(module->name, \"smb\") == 0) {",
          "4013:         if (strcmp(dotp, \"smb.trans.reassembly\") == 0)",
          "4014:           pref = prefs_find_preference(module, \"trans_reassembly\");",
          "4015:         else if (strcmp(dotp, \"smb.dcerpc.reassembly\") == 0)",
          "4016:           pref = prefs_find_preference(module, \"dcerpc_reassembly\");",
          "4017:       } else if (strcmp(module->name, \"ndmp\") == 0) {",
          "4019:         if (strcmp(dotp, \"ndmp.desegment\") == 0)",
          "4020:           pref = prefs_find_preference(module, \"desegment\");",
          "4021:       } else if (strcmp(module->name, \"diameter\") == 0) {",
          "4023:         if (strcmp(dotp, \"diameter.desegment\") == 0)",
          "4024:           pref = prefs_find_preference(module, \"desegment\");",
          "4025:       } else if (strcmp(module->name, \"pcli\") == 0) {",
          "4027:         if (strcmp(dotp, \"pcli.udp_port\") == 0)",
          "4028:           pref = prefs_find_preference(module, \"udp_port\");",
          "4029:       } else if (strcmp(module->name, \"artnet\") == 0) {",
          "4031:         if (strcmp(dotp, \"artnet.udp_port\") == 0)",
          "4032:           pref = prefs_find_preference(module, \"udp_port\");",
          "4033:       } else if (strcmp(module->name, \"mapi\") == 0) {",
          "4035:         if (strcmp(dotp, \"mapi_decrypt\") == 0)",
          "4036:           pref = prefs_find_preference(module, \"decrypt\");",
          "4037:       } else if (strcmp(module->name, \"fc\") == 0) {",
          "4039:         if (strcmp(dotp, \"reassemble_fc\") == 0)",
          "4040:           pref = prefs_find_preference(module, \"reassemble\");",
          "4041:         else if (strcmp(dotp, \"fc_max_frame_size\") == 0)",
          "4042:           pref = prefs_find_preference(module, \"max_frame_size\");",
          "4043:       } else if (strcmp(module->name, \"fcip\") == 0) {",
          "4045:         if (strcmp(dotp, \"desegment_fcip_messages\") == 0)",
          "4046:           pref = prefs_find_preference(module, \"desegment\");",
          "4047:         else if (strcmp(dotp, \"fcip_port\") == 0)",
          "4048:           pref = prefs_find_preference(module, \"target_port\");",
          "4049:       } else if (strcmp(module->name, \"gtp\") == 0) {",
          "4051:         if (strcmp(dotp, \"gtpv0_port\") == 0)",
          "4052:           pref = prefs_find_preference(module, \"v0_port\");",
          "4053:         else if (strcmp(dotp, \"gtpv1c_port\") == 0)",
          "4054:           pref = prefs_find_preference(module, \"v1c_port\");",
          "4055:         else if (strcmp(dotp, \"gtpv1u_port\") == 0)",
          "4056:           pref = prefs_find_preference(module, \"v1u_port\");",
          "4057:         else if (strcmp(dotp, \"gtp_dissect_tpdu\") == 0)",
          "4058:           pref = prefs_find_preference(module, \"dissect_tpdu\");",
          "4059:         else if (strcmp(dotp, \"gtpv0_dissect_cdr_as\") == 0)",
          "4060:           pref = prefs_find_preference(module, \"v0_dissect_cdr_as\");",
          "4061:         else if (strcmp(dotp, \"gtpv0_check_etsi\") == 0)",
          "4062:           pref = prefs_find_preference(module, \"v0_check_etsi\");",
          "4063:         else if (strcmp(dotp, \"gtpv1_check_etsi\") == 0)",
          "4064:           pref = prefs_find_preference(module, \"v1_check_etsi\");",
          "4065:       } else if (strcmp(module->name, \"ip\") == 0) {",
          "4067:         if (strcmp(dotp, \"ip_summary_in_tree\") == 0)",
          "4068:           pref = prefs_find_preference(module, \"summary_in_tree\");",
          "4069:       } else if (strcmp(module->name, \"iscsi\") == 0) {",
          "4071:         if (strcmp(dotp, \"iscsi_port\") == 0)",
          "4072:           pref = prefs_find_preference(module, \"target_port\");",
          "4073:       } else if (strcmp(module->name, \"lmp\") == 0) {",
          "4075:         if (strcmp(dotp, \"lmp_version\") == 0)",
          "4076:           pref = prefs_find_preference(module, \"version\");",
          "4077:       } else if (strcmp(module->name, \"mtp3\") == 0) {",
          "4079:         if (strcmp(dotp, \"mtp3_standard\") == 0)",
          "4080:           pref = prefs_find_preference(module, \"standard\");",
          "4081:         else if (strcmp(dotp, \"net_addr_format\") == 0)",
          "4082:           pref = prefs_find_preference(module, \"addr_format\");",
          "4083:       } else if (strcmp(module->name, \"nlm\") == 0) {",
          "4085:         if (strcmp(dotp, \"nlm_msg_res_matching\") == 0)",
          "4086:           pref = prefs_find_preference(module, \"msg_res_matching\");",
          "4087:       } else if (strcmp(module->name, \"ppp\") == 0) {",
          "4089:         if (strcmp(dotp, \"ppp_fcs\") == 0)",
          "4090:           pref = prefs_find_preference(module, \"fcs_type\");",
          "4091:         else if (strcmp(dotp, \"ppp_vj\") == 0)",
          "4092:           pref = prefs_find_preference(module, \"decompress_vj\");",
          "4093:       } else if (strcmp(module->name, \"rsvp\") == 0) {",
          "4095:         if (strcmp(dotp, \"rsvp_process_bundle\") == 0)",
          "4096:           pref = prefs_find_preference(module, \"process_bundle\");",
          "4097:       } else if (strcmp(module->name, \"tcp\") == 0) {",
          "4099:         if (strcmp(dotp, \"tcp_summary_in_tree\") == 0)",
          "4100:           pref = prefs_find_preference(module, \"summary_in_tree\");",
          "4101:         else if (strcmp(dotp, \"tcp_analyze_sequence_numbers\") == 0)",
          "4102:           pref = prefs_find_preference(module, \"analyze_sequence_numbers\");",
          "4103:         else if (strcmp(dotp, \"tcp_relative_sequence_numbers\") == 0)",
          "4104:           pref = prefs_find_preference(module, \"relative_sequence_numbers\");",
          "4105:       } else if (strcmp(module->name, \"udp\") == 0) {",
          "4107:         if (strcmp(dotp, \"udp_summary_in_tree\") == 0)",
          "4108:           pref = prefs_find_preference(module, \"summary_in_tree\");",
          "4109:       } else if (strcmp(module->name, \"ndps\") == 0) {",
          "4111:         if (strcmp(dotp, \"desegment_ndps\") == 0)",
          "4112:           pref = prefs_find_preference(module, \"desegment_tcp\");",
          "4113:       } else if (strcmp(module->name, \"http\") == 0) {",
          "4115:         if (strcmp(dotp, \"desegment_http_headers\") == 0)",
          "4116:           pref = prefs_find_preference(module, \"desegment_headers\");",
          "4117:         else if (strcmp(dotp, \"desegment_http_body\") == 0)",
          "4118:           pref = prefs_find_preference(module, \"desegment_body\");",
          "4119:       } else if (strcmp(module->name, \"smpp\") == 0) {",
          "4121:         module_t *new_module = prefs_find_module(\"gsm-sms-ud\");",
          "4122:         if (new_module){",
          "4123:           if (strcmp(dotp, \"port_number_udh_means_wsp\") == 0)",
          "4124:             pref = prefs_find_preference(new_module, \"port_number_udh_means_wsp\");",
          "4125:           else if (strcmp(dotp, \"try_dissect_1st_fragment\") == 0)",
          "4126:             pref = prefs_find_preference(new_module, \"try_dissect_1st_fragment\");",
          "4128:       } else if (strcmp(module->name, \"asn1\") == 0) {",
          "4130:            rename, as the new preferences support multiple ports,",
          "4132:         if (strcmp(dotp, \"tcp_port\") == 0)",
          "4133:           pref = prefs_find_preference(module, \"tcp_ports\");",
          "4134:         else if (strcmp(dotp, \"udp_port\") == 0)",
          "4135:           pref = prefs_find_preference(module, \"udp_ports\");",
          "4136:         else if (strcmp(dotp, \"sctp_port\") == 0)",
          "4137:           pref = prefs_find_preference(module, \"sctp_ports\");",
          "4138:       } else if (strcmp(module->name, \"llcgprs\") == 0) {",
          "4139:         if (strcmp(dotp, \"ignore_cipher_bit\") == 0)",
          "4140:           pref = prefs_find_preference(module, \"autodetect_cipher_bit\");",
          "4141:       } else if (strcmp(module->name, \"erf\") == 0) {",
          "4142:         if (strcmp(dotp, \"erfeth\") == 0) {",
          "4144:              \"ethfcs\" preference, and map the values to those for",
          "4146:           pref = prefs_find_preference(module, \"ethfcs\");",
          "4147:           if (strcmp(value, \"ethfcs\") == 0 || strcmp(value, \"Ethernet with FCS\") == 0)",
          "4148:             value = \"TRUE\";",
          "4149:           else if (strcmp(value, \"eth\") == 0 || strcmp(value, \"Ethernet\") == 0)",
          "4150:             value = \"FALSE\";",
          "4151:           else if (strcmp(value, \"raw\") == 0 || strcmp(value, \"Raw data\") == 0)",
          "4152:             value = \"TRUE\";",
          "4153:         } else if (strcmp(dotp, \"erfatm\") == 0) {",
          "4155:              \"aal5_type\" preference, and map the values to those for",
          "4157:           pref = prefs_find_preference(module, \"aal5_type\");",
          "4158:           if (strcmp(value, \"atm\") == 0 || strcmp(value, \"ATM\") == 0)",
          "4159:             value = \"guess\";",
          "4160:           else if (strcmp(value, \"llc\") == 0 || strcmp(value, \"LLC\") == 0)",
          "4161:             value = \"llc\";",
          "4162:           else if (strcmp(value, \"raw\") == 0 || strcmp(value, \"Raw data\") == 0)",
          "4163:             value = \"guess\";",
          "4164:         } else if (strcmp(dotp, \"erfhdlc\") == 0) {",
          "4166:              \"hdlc_type\" preference, and map the values to those for",
          "4168:           pref = prefs_find_preference(module, \"hdlc_type\");",
          "4169:           if (strcmp(value, \"chdlc\") == 0 || strcmp(value, \"Cisco HDLC\") == 0)",
          "4170:             value = \"chdlc\";",
          "4171:           else if (strcmp(value, \"ppp\") == 0 || strcmp(value, \"PPP serial\") == 0)",
          "4172:             value = \"ppp\";",
          "4173:           else if (strcmp(value, \"fr\") == 0 || strcmp(value, \"Frame Relay\") == 0)",
          "4174:             value = \"frelay\";",
          "4175:           else if (strcmp(value, \"mtp2\") == 0 || strcmp(value, \"SS7 MTP2\") == 0)",
          "4176:             value = \"mtp2\";",
          "4177:           else if (strcmp(value, \"raw\") == 0 || strcmp(value, \"Raw data\") == 0)",
          "4178:             value = \"guess\";",
          "4180:       } else if (strcmp(module->name, \"eth\") == 0) {",
          "4182:         if (strcmp(dotp, \"qinq_ethertype\") == 0) {",
          "4183:           module_t *new_module = prefs_find_module(\"vlan\");",
          "4184:           if (new_module) {",
          "4185:             pref = prefs_find_preference(new_module, \"qinq_ethertype\");",
          "4186:             module = new_module;",
          "4187:           }",
          "4189:       } else if (strcmp(module->name, \"taps\") == 0) {",
          "4191:           if (strcmp(dotp, \"update_interval\") == 0 ||",
          "4192:               strcmp(dotp, \"rtp_player_max_visible\") == 0)",
          "4193:             pref = prefs_find_preference(stats_module, dotp);",
          "4194:       } else if (strcmp(module->name, \"packet_list\") == 0) {",
          "4196:           if (strcmp(dotp, \"display_hidden_proto_items\") == 0)",
          "4197:             pref = prefs_find_preference(protocols_module, dotp);",
          "4198:       } else if (strcmp(module->name, \"stream\") == 0) {",
          "4200:           if ((strcmp(dotp, \"client.fg\") == 0) ||",
          "4201:               (strcmp(dotp, \"client.bg\") == 0) ||",
          "4202:               (strcmp(dotp, \"server.fg\") == 0) ||",
          "4203:               (strcmp(dotp, \"server.bg\") == 0))",
          "4204:             pref = prefs_find_preference(gui_color_module, pref_name);",
          "4205:       } else if (strcmp(module->name, \"nameres\") == 0) {",
          "4206:           if (strcmp(pref_name, \"name_resolve_concurrency\") == 0) {",
          "4207:             pref = prefs_find_preference(nameres_module, pref_name);",
          "4208:           } else if (strcmp(pref_name, \"name_resolve_load_smi_modules\") == 0) {",
          "4209:             pref = prefs_find_preference(nameres_module, \"load_smi_modules\");",
          "4210:           } else if (strcmp(pref_name, \"name_resolve_suppress_smi_errors\") == 0) {",
          "4211:             pref = prefs_find_preference(nameres_module, \"suppress_smi_errors\");",
          "4212:           }",
          "4213:       }",
          "4214:     }",
          "4215:     if (pref == NULL)",
          "4218:     switch (pref->type) {",
          "4220:     case PREF_UINT:",
          "4222:       uval = (guint)strtoul(value, &p, pref->info.base);",
          "4223:       if (p == value || *p != '\\0')",
          "4225:       if (*pref->varp.uint != uval) {",
          "4226:         module->prefs_changed = TRUE;",
          "4228:       }",
          "4229:       break;",
          "4231:     case PREF_BOOL:",
          "4233:       if (g_ascii_strcasecmp(value, \"true\") == 0)",
          "4234:         bval = TRUE;",
          "4235:       else",
          "4236:         bval = FALSE;",
          "4237:       if (*pref->varp.boolp != bval) {",
          "4238:         module->prefs_changed = TRUE;",
          "4240:       }",
          "4241:       break;",
          "4243:     case PREF_ENUM:",
          "4245:       enum_val = find_val_for_string(value, pref->info.enum_info.enumvals,",
          "4247:       if (*pref->varp.enump != enum_val) {",
          "4248:         module->prefs_changed = TRUE;",
          "4250:       }",
          "4251:       break;",
          "4253:     case PREF_STRING:",
          "4254:     case PREF_FILENAME:",
          "4255:     case PREF_DIRNAME:",
          "4256:       if (strcmp(*pref->varp.string, value) != 0) {",
          "4257:         module->prefs_changed = TRUE;",
          "4258:         g_free((void *)*pref->varp.string);",
          "4260:       }",
          "4261:       break;",
          "4263:     case PREF_RANGE:",
          "4264:     {",
          "4265:       range_t *newrange;",
          "4267:       if (range_convert_str_work(&newrange, value, pref->info.max_value,",
          "4268:                                  return_range_errors) != CVT_NO_ERROR) {",
          "4270:       }",
          "4272:       if (!ranges_are_equal(*pref->varp.range, newrange)) {",
          "4273:         module->prefs_changed = TRUE;",
          "4274:         g_free(*pref->varp.range);",
          "4276:       } else {",
          "4277:         g_free (newrange);",
          "4278:       }",
          "4279:       break;",
          "4280:     }",
          "4282:     case PREF_COLOR:",
          "4283:     {",
          "4284:       cval = strtoul(value, NULL, 16);",
          "4285:       pref->varp.colorp->pixel = 0;",
          "4286:       if ((pref->varp.colorp->red != RED_COMPONENT(cval)) ||",
          "4287:           (pref->varp.colorp->green != GREEN_COMPONENT(cval)) ||",
          "4288:           (pref->varp.colorp->blue != BLUE_COMPONENT(cval))) {",
          "4289:           module->prefs_changed = TRUE;",
          "4290:           pref->varp.colorp->red   = RED_COMPONENT(cval);",
          "4291:           pref->varp.colorp->green = GREEN_COMPONENT(cval);",
          "4292:           pref->varp.colorp->blue  = BLUE_COMPONENT(cval);",
          "4293:       }",
          "4294:       break;",
          "4295:     }",
          "4297:     case PREF_CUSTOM:",
          "4298:         return pref->custom_cbs.set_cb(pref, value, &module->prefs_changed);",
          "4300:     case PREF_STATIC_TEXT:",
          "4301:     case PREF_UAT:",
          "4302:     {",
          "4303:       break;",
          "4304:     }",
          "4306:     case PREF_OBSOLETE:",
          "4309:   }",
          "4311:   return PREFS_SET_OK;",
          "",
          "[Added Lines]",
          "3809:     unsigned long int cval;",
          "3810:     guint    uval;",
          "3811:     gboolean bval;",
          "3812:     gint     enum_val;",
          "3813:     char     *p;",
          "3814:     gchar    *dotp, *last_dotp;",
          "3815:     static gchar *filter_label = NULL;",
          "3816:     static gboolean filter_enabled = FALSE;",
          "3817:     gchar    *filter_expr = NULL;",
          "3818:     module_t *module;",
          "3819:     pref_t   *pref;",
          "3821:     if (strcmp(pref_name, PRS_GUI_FILTER_LABEL) == 0) {",
          "3822:         filter_label = g_strdup(value);",
          "3823:     } else if (strcmp(pref_name, PRS_GUI_FILTER_ENABLED) == 0) {",
          "3824:         filter_enabled = (strcmp(value, \"TRUE\") == 0) ? TRUE : FALSE;",
          "3825:     } else if (strcmp(pref_name, PRS_GUI_FILTER_EXPR) == 0) {",
          "3826:         filter_expr = g_strdup(value);",
          "3827:         filter_expression_new(filter_label, filter_expr, filter_enabled);",
          "3828:         g_free(filter_label);",
          "3829:         g_free(filter_expr);",
          "3830:     } else if (strcmp(pref_name, \"gui.version_in_start_page\") == 0) {",
          "3832:         if (g_ascii_strcasecmp(value, \"true\") == 0) {",
          "3833:             prefs.gui_version_placement = version_both;",
          "3834:         } else {",
          "3835:             prefs.gui_version_placement = version_neither;",
          "3837:     } else if (strcmp(pref_name, \"name_resolve\") == 0 ||",
          "3838:                strcmp(pref_name, \"capture.name_resolve\") == 0) {",
          "3847:         if (g_ascii_strcasecmp(value, \"true\") == 0) {",
          "3848:             gbl_resolv_flags.mac_name = TRUE;",
          "3849:             gbl_resolv_flags.network_name = TRUE;",
          "3850:             gbl_resolv_flags.transport_name = TRUE;",
          "3851:             gbl_resolv_flags.concurrent_dns = TRUE;",
          "3853:         else if (g_ascii_strcasecmp(value, \"false\") == 0) {",
          "3854:             gbl_resolv_flags.mac_name = FALSE;",
          "3855:             gbl_resolv_flags.network_name = FALSE;",
          "3856:             gbl_resolv_flags.transport_name = FALSE;",
          "3857:             gbl_resolv_flags.concurrent_dns = FALSE;",
          "3859:         else {",
          "3861:             gbl_resolv_flags.mac_name = FALSE;",
          "3862:             gbl_resolv_flags.network_name = FALSE;",
          "3863:             gbl_resolv_flags.transport_name = FALSE;",
          "3864:             gbl_resolv_flags.concurrent_dns = FALSE;",
          "3865:             if (string_to_name_resolve(value, &gbl_resolv_flags) != '\\0')",
          "3866:                 return PREFS_SET_SYNTAX_ERR;",
          "3868:     } else {",
          "3872:         if ((strcmp(pref_name, \"name_resolve_concurrency\") == 0) ||",
          "3873:             (strcmp(pref_name, \"name_resolve_load_smi_modules\") == 0)  ||",
          "3874:             (strcmp(pref_name, \"name_resolve_suppress_smi_errors\") == 0)) {",
          "3875:             module = nameres_module;",
          "3876:             dotp = pref_name;",
          "3877:         } else {",
          "3879:             module = NULL;",
          "3880:             last_dotp = pref_name;",
          "3881:             while (!module) {",
          "3882:                 dotp = strchr(last_dotp, '.');",
          "3883:                 if (dotp == NULL) {",
          "3886:                     return PREFS_SET_NO_SUCH_PREF;",
          "3887:                 }",
          "3889:                 module = prefs_find_module(pref_name);",
          "3912:                 if (module == NULL) {",
          "3913:                     if (strcmp(pref_name, \"column\") == 0)",
          "3914:                         module = gui_column_module;",
          "3915:                     else if (strcmp(pref_name, \"Diameter\") == 0)",
          "3916:                         module = prefs_find_module(\"diameter\");",
          "3917:                     else if (strcmp(pref_name, \"bxxp\") == 0)",
          "3918:                         module = prefs_find_module(\"beep\");",
          "3919:                     else if (strcmp(pref_name, \"gtpv0\") == 0 ||",
          "3920:                              strcmp(pref_name, \"gtpv1\") == 0)",
          "3921:                         module = prefs_find_module(\"gtp\");",
          "3922:                     else if (strcmp(pref_name, \"smpp-gsm-sms\") == 0)",
          "3923:                         module = prefs_find_module(\"gsm-sms-ud\");",
          "3924:                     else if (strcmp(pref_name, \"dcp\") == 0)",
          "3925:                         module = prefs_find_module(\"dccp\");",
          "3926:                     else if (strcmp(pref_name, \"x.25\") == 0)",
          "3927:                         module = prefs_find_module(\"x25\");",
          "3928:                     else if (strcmp(pref_name, \"x411\") == 0)",
          "3929:                         module = prefs_find_module(\"p1\");",
          "3930:                     else if (strcmp(pref_name, \"nsip\") == 0)",
          "3931:                         module = prefs_find_module(\"gprs-ns\");",
          "3932:                     else if (strcmp(pref_name, \"sonmp\") == 0)",
          "3933:                         module = prefs_find_module(\"ndp\");",
          "3934:                     else if (strcmp(pref_name, \"etheric\") == 0 ||",
          "3935:                              strcmp(pref_name, \"isup_thin\") == 0) {",
          "3937:                         return PREFS_SET_OBSOLETE;",
          "3938:                     }",
          "3939:                     if (module) {",
          "3940:                         g_warning (\"Preference \\\"%s.%s\\\" has been converted to \\\"%s.%s.%s\\\"\\n\"",
          "3941:                                    \"Save your preferences to make this change permanent.\",",
          "3942:                                    pref_name, dotp+1, module->parent->name, pref_name, dotp+1);",
          "3943:                         prefs.unknown_prefs = TRUE;",
          "3944:                     }",
          "3945:                 }",
          "3948:                 last_dotp = dotp;",
          "3949:             }",
          "3952:         pref = prefs_find_preference(module, dotp);",
          "3954:         if (pref == NULL) {",
          "3955:             prefs.unknown_prefs = TRUE;",
          "3960:             if ((strcmp(pref_name, PRS_COL_HIDDEN) == 0) ||",
          "3961:                 (strcmp(pref_name, PRS_COL_FMT) == 0)) {",
          "3962:                 pref = prefs_find_preference(module, pref_name);",
          "3963:             }",
          "3964:             else if (strcmp(module->name, \"mgcp\") == 0) {",
          "3984:                 if (strcmp(dotp, \"display raw text toggle\") == 0)",
          "3985:                     pref = prefs_find_preference(module, \"display_raw_text\");",
          "3986:                 else if (strcmp(dotp, \"display dissect tree\") == 0)",
          "3987:                     pref = prefs_find_preference(module, \"display_dissect_tree\");",
          "3988:                 else if (strcmp(dotp, \"tcp.port\") == 0) {",
          "3989:                     mgcp_tcp_port_count++;",
          "3990:                     if (mgcp_tcp_port_count == 1) {",
          "3992:                         pref = prefs_find_preference(module, \"tcp.gateway_port\");",
          "3993:                     } else if (mgcp_tcp_port_count == 2) {",
          "3995:                         pref = prefs_find_preference(module, \"tcp.callagent_port\");",
          "3996:                     }",
          "3999:                 } else if (strcmp(dotp, \"udp.port\") == 0) {",
          "4000:                     mgcp_udp_port_count++;",
          "4001:                     if (mgcp_udp_port_count == 1) {",
          "4003:                         pref = prefs_find_preference(module, \"udp.gateway_port\");",
          "4004:                     } else if (mgcp_udp_port_count == 2) {",
          "4006:                         pref = prefs_find_preference(module, \"udp.callagent_port\");",
          "4007:                     }",
          "4010:                 }",
          "4011:             } else if (strcmp(module->name, \"smb\") == 0) {",
          "4013:                 if (strcmp(dotp, \"smb.trans.reassembly\") == 0)",
          "4014:                     pref = prefs_find_preference(module, \"trans_reassembly\");",
          "4015:                 else if (strcmp(dotp, \"smb.dcerpc.reassembly\") == 0)",
          "4016:                     pref = prefs_find_preference(module, \"dcerpc_reassembly\");",
          "4017:             } else if (strcmp(module->name, \"ndmp\") == 0) {",
          "4019:                 if (strcmp(dotp, \"ndmp.desegment\") == 0)",
          "4020:                     pref = prefs_find_preference(module, \"desegment\");",
          "4021:             } else if (strcmp(module->name, \"diameter\") == 0) {",
          "4023:                 if (strcmp(dotp, \"diameter.desegment\") == 0)",
          "4024:                     pref = prefs_find_preference(module, \"desegment\");",
          "4025:             } else if (strcmp(module->name, \"pcli\") == 0) {",
          "4027:                 if (strcmp(dotp, \"pcli.udp_port\") == 0)",
          "4028:                     pref = prefs_find_preference(module, \"udp_port\");",
          "4029:             } else if (strcmp(module->name, \"artnet\") == 0) {",
          "4031:                 if (strcmp(dotp, \"artnet.udp_port\") == 0)",
          "4032:                     pref = prefs_find_preference(module, \"udp_port\");",
          "4033:             } else if (strcmp(module->name, \"mapi\") == 0) {",
          "4035:                 if (strcmp(dotp, \"mapi_decrypt\") == 0)",
          "4036:                     pref = prefs_find_preference(module, \"decrypt\");",
          "4037:             } else if (strcmp(module->name, \"fc\") == 0) {",
          "4039:                 if (strcmp(dotp, \"reassemble_fc\") == 0)",
          "4040:                     pref = prefs_find_preference(module, \"reassemble\");",
          "4041:                 else if (strcmp(dotp, \"fc_max_frame_size\") == 0)",
          "4042:                     pref = prefs_find_preference(module, \"max_frame_size\");",
          "4043:             } else if (strcmp(module->name, \"fcip\") == 0) {",
          "4045:                 if (strcmp(dotp, \"desegment_fcip_messages\") == 0)",
          "4046:                     pref = prefs_find_preference(module, \"desegment\");",
          "4047:                 else if (strcmp(dotp, \"fcip_port\") == 0)",
          "4048:                     pref = prefs_find_preference(module, \"target_port\");",
          "4049:             } else if (strcmp(module->name, \"gtp\") == 0) {",
          "4051:                 if (strcmp(dotp, \"gtpv0_port\") == 0)",
          "4052:                     pref = prefs_find_preference(module, \"v0_port\");",
          "4053:                 else if (strcmp(dotp, \"gtpv1c_port\") == 0)",
          "4054:                     pref = prefs_find_preference(module, \"v1c_port\");",
          "4055:                 else if (strcmp(dotp, \"gtpv1u_port\") == 0)",
          "4056:                     pref = prefs_find_preference(module, \"v1u_port\");",
          "4057:                 else if (strcmp(dotp, \"gtp_dissect_tpdu\") == 0)",
          "4058:                     pref = prefs_find_preference(module, \"dissect_tpdu\");",
          "4059:                 else if (strcmp(dotp, \"gtpv0_dissect_cdr_as\") == 0)",
          "4060:                     pref = prefs_find_preference(module, \"v0_dissect_cdr_as\");",
          "4061:                 else if (strcmp(dotp, \"gtpv0_check_etsi\") == 0)",
          "4062:                     pref = prefs_find_preference(module, \"v0_check_etsi\");",
          "4063:                 else if (strcmp(dotp, \"gtpv1_check_etsi\") == 0)",
          "4064:                     pref = prefs_find_preference(module, \"v1_check_etsi\");",
          "4065:             } else if (strcmp(module->name, \"ip\") == 0) {",
          "4067:                 if (strcmp(dotp, \"ip_summary_in_tree\") == 0)",
          "4068:                     pref = prefs_find_preference(module, \"summary_in_tree\");",
          "4069:             } else if (strcmp(module->name, \"iscsi\") == 0) {",
          "4071:                 if (strcmp(dotp, \"iscsi_port\") == 0)",
          "4072:                     pref = prefs_find_preference(module, \"target_port\");",
          "4073:             } else if (strcmp(module->name, \"lmp\") == 0) {",
          "4075:                 if (strcmp(dotp, \"lmp_version\") == 0)",
          "4076:                     pref = prefs_find_preference(module, \"version\");",
          "4077:             } else if (strcmp(module->name, \"mtp3\") == 0) {",
          "4079:                 if (strcmp(dotp, \"mtp3_standard\") == 0)",
          "4080:                     pref = prefs_find_preference(module, \"standard\");",
          "4081:                 else if (strcmp(dotp, \"net_addr_format\") == 0)",
          "4082:                     pref = prefs_find_preference(module, \"addr_format\");",
          "4083:             } else if (strcmp(module->name, \"nlm\") == 0) {",
          "4085:                 if (strcmp(dotp, \"nlm_msg_res_matching\") == 0)",
          "4086:                     pref = prefs_find_preference(module, \"msg_res_matching\");",
          "4087:             } else if (strcmp(module->name, \"ppp\") == 0) {",
          "4089:                 if (strcmp(dotp, \"ppp_fcs\") == 0)",
          "4090:                     pref = prefs_find_preference(module, \"fcs_type\");",
          "4091:                 else if (strcmp(dotp, \"ppp_vj\") == 0)",
          "4092:                     pref = prefs_find_preference(module, \"decompress_vj\");",
          "4093:             } else if (strcmp(module->name, \"rsvp\") == 0) {",
          "4095:                 if (strcmp(dotp, \"rsvp_process_bundle\") == 0)",
          "4096:                     pref = prefs_find_preference(module, \"process_bundle\");",
          "4097:             } else if (strcmp(module->name, \"tcp\") == 0) {",
          "4099:                 if (strcmp(dotp, \"tcp_summary_in_tree\") == 0)",
          "4100:                     pref = prefs_find_preference(module, \"summary_in_tree\");",
          "4101:                 else if (strcmp(dotp, \"tcp_analyze_sequence_numbers\") == 0)",
          "4102:                     pref = prefs_find_preference(module, \"analyze_sequence_numbers\");",
          "4103:                 else if (strcmp(dotp, \"tcp_relative_sequence_numbers\") == 0)",
          "4104:                     pref = prefs_find_preference(module, \"relative_sequence_numbers\");",
          "4105:             } else if (strcmp(module->name, \"udp\") == 0) {",
          "4107:                 if (strcmp(dotp, \"udp_summary_in_tree\") == 0)",
          "4108:                     pref = prefs_find_preference(module, \"summary_in_tree\");",
          "4109:             } else if (strcmp(module->name, \"ndps\") == 0) {",
          "4111:                 if (strcmp(dotp, \"desegment_ndps\") == 0)",
          "4112:                     pref = prefs_find_preference(module, \"desegment_tcp\");",
          "4113:             } else if (strcmp(module->name, \"http\") == 0) {",
          "4115:                 if (strcmp(dotp, \"desegment_http_headers\") == 0)",
          "4116:                     pref = prefs_find_preference(module, \"desegment_headers\");",
          "4117:                 else if (strcmp(dotp, \"desegment_http_body\") == 0)",
          "4118:                     pref = prefs_find_preference(module, \"desegment_body\");",
          "4119:             } else if (strcmp(module->name, \"smpp\") == 0) {",
          "4121:                 module_t *new_module = prefs_find_module(\"gsm-sms-ud\");",
          "4122:                 if (new_module){",
          "4123:                     if (strcmp(dotp, \"port_number_udh_means_wsp\") == 0)",
          "4124:                         pref = prefs_find_preference(new_module, \"port_number_udh_means_wsp\");",
          "4125:                     else if (strcmp(dotp, \"try_dissect_1st_fragment\") == 0)",
          "4126:                         pref = prefs_find_preference(new_module, \"try_dissect_1st_fragment\");",
          "4127:                 }",
          "4128:             } else if (strcmp(module->name, \"asn1\") == 0) {",
          "4130:                    rename, as the new preferences support multiple ports,",
          "4132:                 if (strcmp(dotp, \"tcp_port\") == 0)",
          "4133:                     pref = prefs_find_preference(module, \"tcp_ports\");",
          "4134:                 else if (strcmp(dotp, \"udp_port\") == 0)",
          "4135:                     pref = prefs_find_preference(module, \"udp_ports\");",
          "4136:                 else if (strcmp(dotp, \"sctp_port\") == 0)",
          "4137:                     pref = prefs_find_preference(module, \"sctp_ports\");",
          "4138:             } else if (strcmp(module->name, \"llcgprs\") == 0) {",
          "4139:                 if (strcmp(dotp, \"ignore_cipher_bit\") == 0)",
          "4140:                     pref = prefs_find_preference(module, \"autodetect_cipher_bit\");",
          "4141:             } else if (strcmp(module->name, \"erf\") == 0) {",
          "4142:                 if (strcmp(dotp, \"erfeth\") == 0) {",
          "4144:                        \"ethfcs\" preference, and map the values to those for",
          "4146:                     pref = prefs_find_preference(module, \"ethfcs\");",
          "4147:                     if (strcmp(value, \"ethfcs\") == 0 || strcmp(value, \"Ethernet with FCS\") == 0)",
          "4148:                         value = \"TRUE\";",
          "4149:                     else if (strcmp(value, \"eth\") == 0 || strcmp(value, \"Ethernet\") == 0)",
          "4150:                         value = \"FALSE\";",
          "4151:                     else if (strcmp(value, \"raw\") == 0 || strcmp(value, \"Raw data\") == 0)",
          "4152:                         value = \"TRUE\";",
          "4153:                 } else if (strcmp(dotp, \"erfatm\") == 0) {",
          "4155:                        \"aal5_type\" preference, and map the values to those for",
          "4157:                     pref = prefs_find_preference(module, \"aal5_type\");",
          "4158:                     if (strcmp(value, \"atm\") == 0 || strcmp(value, \"ATM\") == 0)",
          "4159:                         value = \"guess\";",
          "4160:                     else if (strcmp(value, \"llc\") == 0 || strcmp(value, \"LLC\") == 0)",
          "4161:                         value = \"llc\";",
          "4162:                     else if (strcmp(value, \"raw\") == 0 || strcmp(value, \"Raw data\") == 0)",
          "4163:                         value = \"guess\";",
          "4164:                 } else if (strcmp(dotp, \"erfhdlc\") == 0) {",
          "4166:                        \"hdlc_type\" preference, and map the values to those for",
          "4168:                     pref = prefs_find_preference(module, \"hdlc_type\");",
          "4169:                     if (strcmp(value, \"chdlc\") == 0 || strcmp(value, \"Cisco HDLC\") == 0)",
          "4170:                         value = \"chdlc\";",
          "4171:                     else if (strcmp(value, \"ppp\") == 0 || strcmp(value, \"PPP serial\") == 0)",
          "4172:                         value = \"ppp\";",
          "4173:                     else if (strcmp(value, \"fr\") == 0 || strcmp(value, \"Frame Relay\") == 0)",
          "4174:                         value = \"frelay\";",
          "4175:                     else if (strcmp(value, \"mtp2\") == 0 || strcmp(value, \"SS7 MTP2\") == 0)",
          "4176:                         value = \"mtp2\";",
          "4177:                     else if (strcmp(value, \"raw\") == 0 || strcmp(value, \"Raw data\") == 0)",
          "4178:                         value = \"guess\";",
          "4179:                 }",
          "4180:             } else if (strcmp(module->name, \"eth\") == 0) {",
          "4182:                 if (strcmp(dotp, \"qinq_ethertype\") == 0) {",
          "4183:                     module_t *new_module = prefs_find_module(\"vlan\");",
          "4184:                     if (new_module) {",
          "4185:                         pref = prefs_find_preference(new_module, \"qinq_ethertype\");",
          "4186:                         module = new_module;",
          "4187:                     }",
          "4188:                 }",
          "4189:             } else if (strcmp(module->name, \"taps\") == 0) {",
          "4191:                 if (strcmp(dotp, \"update_interval\") == 0 ||",
          "4192:                     strcmp(dotp, \"rtp_player_max_visible\") == 0)",
          "4193:                     pref = prefs_find_preference(stats_module, dotp);",
          "4194:             } else if (strcmp(module->name, \"packet_list\") == 0) {",
          "4196:                 if (strcmp(dotp, \"display_hidden_proto_items\") == 0)",
          "4197:                     pref = prefs_find_preference(protocols_module, dotp);",
          "4198:             } else if (strcmp(module->name, \"stream\") == 0) {",
          "4200:                 if ((strcmp(dotp, \"client.fg\") == 0) ||",
          "4201:                     (strcmp(dotp, \"client.bg\") == 0) ||",
          "4202:                     (strcmp(dotp, \"server.fg\") == 0) ||",
          "4203:                     (strcmp(dotp, \"server.bg\") == 0))",
          "4204:                     pref = prefs_find_preference(gui_color_module, pref_name);",
          "4205:             } else if (strcmp(module->name, \"nameres\") == 0) {",
          "4206:                 if (strcmp(pref_name, \"name_resolve_concurrency\") == 0) {",
          "4207:                     pref = prefs_find_preference(nameres_module, pref_name);",
          "4208:                 } else if (strcmp(pref_name, \"name_resolve_load_smi_modules\") == 0) {",
          "4209:                     pref = prefs_find_preference(nameres_module, \"load_smi_modules\");",
          "4210:                 } else if (strcmp(pref_name, \"name_resolve_suppress_smi_errors\") == 0) {",
          "4211:                     pref = prefs_find_preference(nameres_module, \"suppress_smi_errors\");",
          "4212:                 }",
          "4213:             }",
          "4214:         }",
          "4215:         if (pref == NULL)",
          "4218:         switch (pref->type) {",
          "4220:         case PREF_UINT:",
          "4222:             uval = (guint)strtoul(value, &p, pref->info.base);",
          "4223:             if (p == value || *p != '\\0')",
          "4225:             if (*pref->varp.uint != uval) {",
          "4226:                 module->prefs_changed = TRUE;",
          "4228:             }",
          "4229:             break;",
          "4231:         case PREF_BOOL:",
          "4233:             if (g_ascii_strcasecmp(value, \"true\") == 0)",
          "4234:                 bval = TRUE;",
          "4235:             else",
          "4236:                 bval = FALSE;",
          "4237:             if (*pref->varp.boolp != bval) {",
          "4238:                 module->prefs_changed = TRUE;",
          "4240:             }",
          "4241:             break;",
          "4243:         case PREF_ENUM:",
          "4245:             enum_val = find_val_for_string(value, pref->info.enum_info.enumvals,",
          "4247:             if (*pref->varp.enump != enum_val) {",
          "4248:                 module->prefs_changed = TRUE;",
          "4250:             }",
          "4251:             break;",
          "4253:         case PREF_STRING:",
          "4254:         case PREF_FILENAME:",
          "4255:         case PREF_DIRNAME:",
          "4256:             if (strcmp(*pref->varp.string, value) != 0) {",
          "4257:                 module->prefs_changed = TRUE;",
          "4258:                 g_free((void *)*pref->varp.string);",
          "4260:             }",
          "4261:             break;",
          "4263:         case PREF_RANGE:",
          "4264:         {",
          "4265:             range_t *newrange;",
          "4267:             if (range_convert_str_work(&newrange, value, pref->info.max_value,",
          "4268:                                        return_range_errors) != CVT_NO_ERROR) {",
          "4270:             }",
          "4272:             if (!ranges_are_equal(*pref->varp.range, newrange)) {",
          "4273:                 module->prefs_changed = TRUE;",
          "4274:                 g_free(*pref->varp.range);",
          "4276:             } else {",
          "4277:                 g_free (newrange);",
          "4278:             }",
          "4279:             break;",
          "4280:         }",
          "4282:         case PREF_COLOR:",
          "4283:         {",
          "4284:             cval = strtoul(value, NULL, 16);",
          "4285:             pref->varp.colorp->pixel = 0;",
          "4286:             if ((pref->varp.colorp->red != RED_COMPONENT(cval)) ||",
          "4287:                 (pref->varp.colorp->green != GREEN_COMPONENT(cval)) ||",
          "4288:                 (pref->varp.colorp->blue != BLUE_COMPONENT(cval))) {",
          "4289:                 module->prefs_changed = TRUE;",
          "4290:                 pref->varp.colorp->red   = RED_COMPONENT(cval);",
          "4291:                 pref->varp.colorp->green = GREEN_COMPONENT(cval);",
          "4292:                 pref->varp.colorp->blue  = BLUE_COMPONENT(cval);",
          "4293:             }",
          "4294:             break;",
          "4295:         }",
          "4297:         case PREF_CUSTOM:",
          "4298:             return pref->custom_cbs.set_cb(pref, value, &module->prefs_changed);",
          "4300:         case PREF_STATIC_TEXT:",
          "4301:         case PREF_UAT:",
          "4302:         {",
          "4303:             break;",
          "4304:         }",
          "4306:         case PREF_OBSOLETE:",
          "4308:         }",
          "4311:     return PREFS_SET_OK;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4782: int",
          "4783: write_prefs(char **pf_path_return)",
          "4784: {",
          "4803:     }",
          "4840:     }",
          "4853: }",
          "",
          "[Removed Lines]",
          "4785:   char        *pf_path;",
          "4786:   FILE        *pf;",
          "4787:   write_gui_pref_arg_t write_gui_pref_info;",
          "4790:   init_prefs();",
          "4798:   if (pf_path_return != NULL) {",
          "4799:     pf_path = get_persconffile_path(PF_NAME, TRUE);",
          "4800:     if ((pf = ws_fopen(pf_path, \"w\")) == NULL) {",
          "4802:       return errno;",
          "4804:   } else {",
          "4805:     pf = stdout;",
          "4806:   }",
          "4808:   fputs(\"# Configuration file for Wireshark \" VERSION \".\\n\"",
          "4809:         \"#\\n\"",
          "4810:         \"# This file is regenerated each time preferences are saved within\\n\"",
          "4811:         \"# Wireshark. Making manual changes should be safe, however.\\n\"",
          "4812:         \"# Preferences that have been commented out have not been\\n\"",
          "4813:         \"# changed from their default value.\\n\", pf);",
          "4821:   write_gui_pref_info.pf = pf;",
          "4822:   write_gui_pref_info.is_gui_module = TRUE;",
          "4824:   write_module_prefs(gui_module, &write_gui_pref_info);",
          "4826:   {",
          "4827:     struct filter_expression *fe = *(struct filter_expression **)prefs.filter_expressions;",
          "4829:     if (fe != NULL)",
          "4830:       fprintf(pf, \"\\n####### Filter Expressions ########\\n\");",
          "4832:     while (fe != NULL) {",
          "4833:       if (fe->deleted == FALSE) {",
          "4834:         fprintf(pf, \"%s: %s\\n\", PRS_GUI_FILTER_LABEL, fe->label);",
          "4835:         fprintf(pf, \"%s: %s\\n\", PRS_GUI_FILTER_ENABLED,",
          "4836:         fe->enabled == TRUE ? \"TRUE\" : \"FALSE\");",
          "4837:         fprintf(pf, \"%s: %s\\n\", PRS_GUI_FILTER_EXPR, fe->expression);",
          "4838:       }",
          "4839:       fe = fe->next;",
          "4841:   }",
          "4843:   write_gui_pref_info.is_gui_module = FALSE;",
          "4844:   prefs_modules_foreach_submodules(NULL, write_module_prefs, &write_gui_pref_info);",
          "4846:   fclose(pf);",
          "4849:      an error indication, or maybe write to a new preferences file and",
          "4850:      rename that file on top of the old one only if there are not I/O",
          "4852:   return 0;",
          "",
          "[Added Lines]",
          "4785:     char        *pf_path;",
          "4786:     FILE        *pf;",
          "4787:     write_gui_pref_arg_t write_gui_pref_info;",
          "4790:     init_prefs();",
          "4798:     if (pf_path_return != NULL) {",
          "4799:         pf_path = get_persconffile_path(PF_NAME, TRUE);",
          "4800:         if ((pf = ws_fopen(pf_path, \"w\")) == NULL) {",
          "4802:             return errno;",
          "4803:         }",
          "4804:     } else {",
          "4805:         pf = stdout;",
          "4808:     fputs(\"# Configuration file for Wireshark \" VERSION \".\\n\"",
          "4809:           \"#\\n\"",
          "4810:           \"# This file is regenerated each time preferences are saved within\\n\"",
          "4811:           \"# Wireshark. Making manual changes should be safe, however.\\n\"",
          "4812:           \"# Preferences that have been commented out have not been\\n\"",
          "4813:           \"# changed from their default value.\\n\", pf);",
          "4821:     write_gui_pref_info.pf = pf;",
          "4822:     write_gui_pref_info.is_gui_module = TRUE;",
          "4824:     write_module_prefs(gui_module, &write_gui_pref_info);",
          "4826:     {",
          "4827:         struct filter_expression *fe = *(struct filter_expression **)prefs.filter_expressions;",
          "4829:         if (fe != NULL)",
          "4830:             fprintf(pf, \"\\n####### Filter Expressions ########\\n\");",
          "4832:         while (fe != NULL) {",
          "4833:             if (fe->deleted == FALSE) {",
          "4834:                 fprintf(pf, \"%s: %s\\n\", PRS_GUI_FILTER_LABEL, fe->label);",
          "4835:                 fprintf(pf, \"%s: %s\\n\", PRS_GUI_FILTER_ENABLED,",
          "4836:                         fe->enabled == TRUE ? \"TRUE\" : \"FALSE\");",
          "4837:                 fprintf(pf, \"%s: %s\\n\", PRS_GUI_FILTER_EXPR, fe->expression);",
          "4838:             }",
          "4839:             fe = fe->next;",
          "4840:         }",
          "4843:     write_gui_pref_info.is_gui_module = FALSE;",
          "4844:     prefs_modules_foreach_submodules(NULL, write_module_prefs, &write_gui_pref_info);",
          "4846:     fclose(pf);",
          "4849:        an error indication, or maybe write to a new preferences file and",
          "4850:        rename that file on top of the old one only if there are not I/O",
          "4852:     return 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4859: static void",
          "4860: free_col_info(GList * list)",
          "4861: {",
          "4874: }",
          "",
          "[Removed Lines]",
          "4862:   fmt_data *cfmt;",
          "4864:   while (list != NULL) {",
          "4865:     cfmt = (fmt_data *)list->data;",
          "4867:     g_free(cfmt->title);",
          "4868:     g_free(cfmt->custom_field);",
          "4869:     g_free(cfmt);",
          "4870:     list = g_list_remove_link(list, list);",
          "4871:   }",
          "4872:   g_list_free(list);",
          "4873:   list = NULL;",
          "",
          "[Added Lines]",
          "4862:     fmt_data *cfmt;",
          "4864:     while (list != NULL) {",
          "4865:         cfmt = (fmt_data *)list->data;",
          "4867:         g_free(cfmt->title);",
          "4868:         g_free(cfmt->custom_field);",
          "4869:         g_free(cfmt);",
          "4870:         list = g_list_remove_link(list, list);",
          "4871:     }",
          "4872:     g_list_free(list);",
          "4873:     list = NULL;",
          "",
          "---------------"
        ],
        "mergecap.c||mergecap.c": [
          "File: mergecap.c -> mergecap.c"
        ],
        "pcapio.c||pcapio.c": [
          "File: pcapio.c -> pcapio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:                 return (guint32)(sizeof(struct option) +",
          "251:                                  (guint16)ADD_PADDING(strlen(option_value)));",
          "254: }",
          "256: static gboolean",
          "",
          "[Removed Lines]",
          "252:  }",
          "",
          "[Added Lines]",
          "252:         }",
          "",
          "---------------"
        ],
        "reordercap.c||reordercap.c": [
          "File: reordercap.c -> reordercap.c"
        ],
        "text2pcap.c||text2pcap.c": [
          "File: text2pcap.c -> text2pcap.c"
        ],
        "tfshark.c||tfshark.c": [
          "File: tfshark.c -> tfshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static void",
          "752: get_tfshark_compiled_version_info(GString *str)",
          "753: {",
          "755: #ifdef HAVE_LIBZ",
          "757: #ifdef ZLIB_VERSION",
          "765: }",
          "767: static void",
          "768: get_tfshark_runtime_version_info(GString *str)",
          "769: {",
          "771: #if defined(HAVE_LIBZ) && !defined(_WIN32)",
          "773: #endif",
          "777: }",
          "779: int",
          "",
          "[Removed Lines]",
          "756:  g_string_append(str, \"with libz \");",
          "758:  g_string_append(str, ZLIB_VERSION);",
          "760:  g_string_append(str, \"(version unknown)\");",
          "763:  g_string_append(str, \"without libz\");",
          "772:     g_string_append_printf(str, \", with libz %s\", zlibVersion());",
          "776:     epan_get_runtime_version_info(str);",
          "",
          "[Added Lines]",
          "756:   g_string_append(str, \"with libz \");",
          "758:   g_string_append(str, ZLIB_VERSION);",
          "760:   g_string_append(str, \"(version unknown)\");",
          "763:   g_string_append(str, \"without libz\");",
          "772:   g_string_append_printf(str, \", with libz %s\", zlibVersion());",
          "776:   epan_get_runtime_version_info(str);",
          "",
          "---------------"
        ],
        "tshark.c||tshark.c": [
          "File: tshark.c -> tshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:   fprintf(output, \"                           default report=\\\"fields\\\"\\n\");",
          "395:   fprintf(output, \"                           use \\\"-G ?\\\" for more help\\n\");",
          "396: #ifdef __linux__",
          "402: #endif",
          "404: }",
          "",
          "[Removed Lines]",
          "397:     fprintf(output, \"\\n\");",
          "398:     fprintf(output, \"WARNING: dumpcap will enable kernel BPF JIT compiler if available.\\n\");",
          "399:     fprintf(output, \"You might want to reset it\\n\");",
          "400:     fprintf(output, \"By doing \\\"echo 0 > /proc/sys/net/core/bpf_jit_enable\\\"\\n\");",
          "401:     fprintf(output, \"\\n\");",
          "",
          "[Added Lines]",
          "397:   fprintf(output, \"\\n\");",
          "398:   fprintf(output, \"WARNING: dumpcap will enable kernel BPF JIT compiler if available.\\n\");",
          "399:   fprintf(output, \"You might want to reset it\\n\");",
          "400:   fprintf(output, \"By doing \\\"echo 0 > /proc/sys/net/core/bpf_jit_enable\\\"\\n\");",
          "401:   fprintf(output, \"\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "915: static void",
          "916: get_tshark_compiled_version_info(GString *str)",
          "917: {",
          "923: #ifdef HAVE_LIBZ",
          "925: #ifdef ZLIB_VERSION",
          "933: }",
          "",
          "[Removed Lines]",
          "919:  get_compiled_caplibs_version(str);",
          "922:  g_string_append(str, \", \");",
          "924:  g_string_append(str, \"with libz \");",
          "926:  g_string_append(str, ZLIB_VERSION);",
          "928:  g_string_append(str, \"(version unknown)\");",
          "931:  g_string_append(str, \"without libz\");",
          "",
          "[Added Lines]",
          "919:   get_compiled_caplibs_version(str);",
          "922:   g_string_append(str, \", \");",
          "924:   g_string_append(str, \"with libz \");",
          "926:   g_string_append(str, ZLIB_VERSION);",
          "928:   g_string_append(str, \"(version unknown)\");",
          "931:   g_string_append(str, \"without libz\");",
          "",
          "---------------"
        ],
        "ui/gtk/addr_resolution_dlg.c||ui/gtk/addr_resolution_dlg.c": [
          "File: ui/gtk/addr_resolution_dlg.c -> ui/gtk/addr_resolution_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: static void",
          "58: eth_hash_to_texbuff(gpointer key, gpointer value, gpointer user_data)",
          "59: {",
          "77: }",
          "78: static void",
          "79: manuf_hash_to_texbuff(gpointer key, gpointer value, gpointer user_data)",
          "80: {",
          "89: }",
          "91: static void",
          "92: wka_hash_to_texbuff(gpointer key, gpointer value, gpointer user_data)",
          "93: {",
          "109: }",
          "111: static void",
          "112: serv_port_hash_to_texbuff(gpointer key, gpointer value, gpointer user_data)",
          "113: {",
          "128: }",
          "130: static void",
          "131: ipv4_hash_table_to_texbuff(gpointer key, gpointer value, gpointer user_data)",
          "132: {",
          "145: }",
          "147: static void",
          "148: ipv4_hash_table_resolved_to_texbuff(gpointer key _U_, gpointer value, gpointer user_data)",
          "149: {",
          "162: }",
          "",
          "[Removed Lines]",
          "60:  gchar string_buff[ADDRESS_STR_MAX];",
          "61:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "62:  gint64 eth_as_gint64 = *(gint64*)key;",
          "63:  hashether_t* tp = (hashether_t*)value;",
          "65:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X Status: %u %s %s\\n\",",
          "66:      (guint8)(eth_as_gint64>>40&0xff),",
          "67:      (guint8)(eth_as_gint64>>32&0xff),",
          "68:      (guint8)((eth_as_gint64>>24)&0xff),",
          "69:      (guint8)((eth_as_gint64>>16)&0xff),",
          "70:      (guint8)((eth_as_gint64>>8)&0xff),",
          "71:      (guint8)(eth_as_gint64&0xff),",
          "72:      tp->status,",
          "73:      tp->hexaddr,",
          "74:      tp->resolved_name);",
          "75:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "81:  gchar string_buff[ADDRESS_STR_MAX];",
          "82:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "83:  gchar *name = (gchar *)value;",
          "84:  int eth_as_gint = *(int*)key;",
          "86:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"%.2X:%.2X:%.2X  %s\\n\",eth_as_gint>>16, (eth_as_gint>>8)&0xff, eth_as_gint&0xff,name);",
          "87:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "94:  gchar string_buff[ADDRESS_STR_MAX];",
          "95:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "96:  gchar *name = (gchar *)value;",
          "97:  gint64 eth_as_gint64 = *(gint64*)key;",
          "99:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X  %s\\n\",",
          "100:      (guint8)(eth_as_gint64>>40&0xff),",
          "101:      (guint8)(eth_as_gint64>>32&0xff),",
          "102:      (guint8)((eth_as_gint64>>24)&0xff),",
          "103:      (guint8)((eth_as_gint64>>16)&0xff),",
          "104:      (guint8)((eth_as_gint64>>8)&0xff),",
          "105:      (guint8)(eth_as_gint64&0xff),",
          "106:      name);",
          "107:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "114:  gchar string_buff[ADDRESS_STR_MAX];",
          "115:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "116:  serv_port_t *serv_port_table = (serv_port_t *)value;",
          "117:  int port = *(int*)key;",
          "119:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"Port %u \\n\"\"     TCP  %s\\n\"\"     UDP  %s\\n\"\"     SCTP %s\\n\"\"     DCCP %s\\n\",",
          "120:      port,",
          "121:      serv_port_table->tcp_name,",
          "122:      serv_port_table->udp_name,",
          "123:      serv_port_table->sctp_name,",
          "124:      serv_port_table->dccp_name);",
          "126:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "133:  gchar string_buff[ADDRESS_STR_MAX];",
          "134:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "135:  hashipv4_t *ipv4_hash_table_entry = (hashipv4_t *)value;",
          "136:  int addr = GPOINTER_TO_UINT(key);",
          "138:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"Key:0x%x IP: %s, Name: %s\\n\",",
          "139:     addr,",
          "140:     ipv4_hash_table_entry->ip,",
          "141:     ipv4_hash_table_entry->name);",
          "143:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "150:  gchar string_buff[ADDRESS_STR_MAX];",
          "151:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "152:  hashipv4_t *ipv4_hash_table_entry = (hashipv4_t *)value;",
          "154:  if((ipv4_hash_table_entry->flags & DUMMY_ADDRESS_ENTRY)== 0){",
          "155:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"%s\\t%s\\n\",",
          "156:      ipv4_hash_table_entry->ip,",
          "157:      ipv4_hash_table_entry->name);",
          "159:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "160:  }",
          "",
          "[Added Lines]",
          "60:     gchar string_buff[ADDRESS_STR_MAX];",
          "61:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "62:     gint64 eth_as_gint64 = *(gint64*)key;",
          "63:     hashether_t* tp = (hashether_t*)value;",
          "65:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X Status: %u %s %s\\n\",",
          "66:                (guint8)(eth_as_gint64>>40&0xff),",
          "67:                (guint8)(eth_as_gint64>>32&0xff),",
          "68:                (guint8)((eth_as_gint64>>24)&0xff),",
          "69:                (guint8)((eth_as_gint64>>16)&0xff),",
          "70:                (guint8)((eth_as_gint64>>8)&0xff),",
          "71:                (guint8)(eth_as_gint64&0xff),",
          "72:                tp->status,",
          "73:                tp->hexaddr,",
          "74:                tp->resolved_name);",
          "75:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "81:     gchar string_buff[ADDRESS_STR_MAX];",
          "82:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "83:     gchar *name = (gchar *)value;",
          "84:     int eth_as_gint = *(int*)key;",
          "86:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"%.2X:%.2X:%.2X  %s\\n\",eth_as_gint>>16, (eth_as_gint>>8)&0xff, eth_as_gint&0xff,name);",
          "87:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "94:     gchar string_buff[ADDRESS_STR_MAX];",
          "95:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "96:     gchar *name = (gchar *)value;",
          "97:     gint64 eth_as_gint64 = *(gint64*)key;",
          "99:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X  %s\\n\",",
          "100:                (guint8)(eth_as_gint64>>40&0xff),",
          "101:                (guint8)(eth_as_gint64>>32&0xff),",
          "102:                (guint8)((eth_as_gint64>>24)&0xff),",
          "103:                (guint8)((eth_as_gint64>>16)&0xff),",
          "104:                (guint8)((eth_as_gint64>>8)&0xff),",
          "105:                (guint8)(eth_as_gint64&0xff),",
          "106:                name);",
          "107:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "114:     gchar string_buff[ADDRESS_STR_MAX];",
          "115:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "116:     serv_port_t *serv_port_table = (serv_port_t *)value;",
          "117:     int port = *(int*)key;",
          "119:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"Port %u \\n\"\"     TCP  %s\\n\"\"     UDP  %s\\n\"\"     SCTP %s\\n\"\"     DCCP %s\\n\",",
          "120:                port,",
          "121:                serv_port_table->tcp_name,",
          "122:                serv_port_table->udp_name,",
          "123:                serv_port_table->sctp_name,",
          "124:                serv_port_table->dccp_name);",
          "126:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "133:     gchar string_buff[ADDRESS_STR_MAX];",
          "134:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "135:     hashipv4_t *ipv4_hash_table_entry = (hashipv4_t *)value;",
          "136:     int addr = GPOINTER_TO_UINT(key);",
          "138:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"Key:0x%x IP: %s, Name: %s\\n\",",
          "139:                addr,",
          "140:                ipv4_hash_table_entry->ip,",
          "141:                ipv4_hash_table_entry->name);",
          "143:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "150:     gchar string_buff[ADDRESS_STR_MAX];",
          "151:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "152:     hashipv4_t *ipv4_hash_table_entry = (hashipv4_t *)value;",
          "154:     if((ipv4_hash_table_entry->flags & DUMMY_ADDRESS_ENTRY)== 0){",
          "155:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"%s\\t%s\\n\",",
          "156:                    ipv4_hash_table_entry->ip,",
          "157:                    ipv4_hash_table_entry->name);",
          "159:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "160:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: static void",
          "167: ipv6_hash_table_to_texbuff(gpointer key _U_, gpointer value, gpointer user_data)",
          "168: {",
          "179: }",
          "181: static void",
          "182: ipv6_hash_table_resolved_to_texbuff(gpointer key _U_, gpointer value, gpointer user_data)",
          "183: {",
          "196: }",
          "",
          "[Removed Lines]",
          "169:  gchar string_buff[ADDRESS_STR_MAX];",
          "170:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "171:  hashipv6_t *ipv6_hash_table_entry = (hashipv6_t *)value;",
          "173:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"IP: %s, Name: %s\\n\",",
          "174:     ipv6_hash_table_entry->ip6,",
          "175:     ipv6_hash_table_entry->name);",
          "177:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "184:  gchar string_buff[ADDRESS_STR_MAX];",
          "185:  GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "186:  hashipv6_t *ipv6_hash_table_entry = (hashipv6_t *)value;",
          "188:  if((ipv6_hash_table_entry->flags & DUMMY_ADDRESS_ENTRY)== 0){",
          "189:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"%s\\t%s\\n\",",
          "190:      ipv6_hash_table_entry->ip6,",
          "191:      ipv6_hash_table_entry->name);",
          "193:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "194:  }",
          "",
          "[Added Lines]",
          "169:     gchar string_buff[ADDRESS_STR_MAX];",
          "170:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "171:     hashipv6_t *ipv6_hash_table_entry = (hashipv6_t *)value;",
          "173:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"IP: %s, Name: %s\\n\",",
          "174:                ipv6_hash_table_entry->ip6,",
          "175:                ipv6_hash_table_entry->name);",
          "177:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "184:     gchar string_buff[ADDRESS_STR_MAX];",
          "185:     GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;",
          "186:     hashipv6_t *ipv6_hash_table_entry = (hashipv6_t *)value;",
          "188:     if((ipv6_hash_table_entry->flags & DUMMY_ADDRESS_ENTRY)== 0){",
          "189:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"%s\\t%s\\n\",",
          "190:                    ipv6_hash_table_entry->ip6,",
          "191:                    ipv6_hash_table_entry->name);",
          "193:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "194:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199: addres_resolution_to_texbuff(GtkTextBuffer *buffer)",
          "200: {",
          "201:     gchar string_buff[ADDRESS_STR_MAX];",
          "209:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"# Hosts information in Wireshark \\n#\\n\");",
          "210:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "",
          "[Removed Lines]",
          "202:  GHashTable *manuf_hashtable;",
          "203:  GHashTable *wka_hashtable;",
          "204:  GHashTable *eth_hashtable;",
          "205:  GHashTable *serv_port_hashtable;",
          "206:  GHashTable *ipv4_hash_table;",
          "207:  GHashTable *ipv6_hash_table;",
          "",
          "[Added Lines]",
          "202:     GHashTable *manuf_hashtable;",
          "203:     GHashTable *wka_hashtable;",
          "204:     GHashTable *eth_hashtable;",
          "205:     GHashTable *serv_port_hashtable;",
          "206:     GHashTable *ipv4_hash_table;",
          "207:     GHashTable *ipv6_hash_table;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "285: }",
          "",
          "[Removed Lines]",
          "215:  ipv4_hash_table = get_ipv4_hash_table();",
          "216:  if(ipv4_hash_table){",
          "217:   g_hash_table_foreach( ipv4_hash_table, ipv4_hash_table_resolved_to_texbuff, buffer);",
          "218:  }",
          "220:  ipv6_hash_table = get_ipv6_hash_table();",
          "221:  if(ipv6_hash_table){",
          "222:   g_hash_table_foreach( ipv6_hash_table, ipv6_hash_table_resolved_to_texbuff, buffer);",
          "223:  }",
          "225:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Address resolution IPv4 Hash table \\n#\\n\");",
          "226:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "228:  if(ipv4_hash_table){",
          "229:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(ipv4_hash_table));",
          "230:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "231:   g_hash_table_foreach( ipv4_hash_table, ipv4_hash_table_to_texbuff, buffer);",
          "232:  }",
          "234:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Address resolution IPv6 Hash table \\n#\\n\");",
          "235:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "237:  if(ipv6_hash_table){",
          "238:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(ipv6_hash_table));",
          "239:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "240:   g_hash_table_foreach( ipv6_hash_table, ipv6_hash_table_to_texbuff, buffer);",
          "241:  }",
          "244:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Port names information in Wireshark \\n#\\n\");",
          "245:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "247:  serv_port_hashtable = get_serv_port_hashtable();",
          "248:  if(serv_port_hashtable){",
          "249:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(serv_port_hashtable));",
          "250:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "251:   g_hash_table_foreach( serv_port_hashtable, serv_port_hash_to_texbuff, buffer);",
          "252:  }",
          "254:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Eth names information in Wireshark \\n#\\n\");",
          "255:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "257:  eth_hashtable = get_eth_hashtable();",
          "258:  if(eth_hashtable){",
          "259:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(eth_hashtable));",
          "260:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "261:   g_hash_table_foreach( eth_hashtable, eth_hash_to_texbuff, buffer);",
          "262:  }",
          "264:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Manuf information in Wireshark \\n#\\n\");",
          "265:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "267:  manuf_hashtable = get_manuf_hashtable();",
          "268:  if(manuf_hashtable){",
          "269:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(manuf_hashtable));",
          "270:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "271:   g_hash_table_foreach( manuf_hashtable, manuf_hash_to_texbuff, buffer);",
          "272:  }",
          "274:  g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# wka information in Wireshark \\n#\\n\");",
          "275:  gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "277:  wka_hashtable = get_wka_hashtable();",
          "278:  if(wka_hashtable){",
          "279:   g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(wka_hashtable));",
          "280:   gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "281:   g_hash_table_foreach( wka_hashtable, wka_hash_to_texbuff, buffer);",
          "282:  }",
          "",
          "[Added Lines]",
          "215:     ipv4_hash_table = get_ipv4_hash_table();",
          "216:     if(ipv4_hash_table){",
          "217:         g_hash_table_foreach( ipv4_hash_table, ipv4_hash_table_resolved_to_texbuff, buffer);",
          "218:     }",
          "220:     ipv6_hash_table = get_ipv6_hash_table();",
          "221:     if(ipv6_hash_table){",
          "222:         g_hash_table_foreach( ipv6_hash_table, ipv6_hash_table_resolved_to_texbuff, buffer);",
          "223:     }",
          "225:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Address resolution IPv4 Hash table \\n#\\n\");",
          "226:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "228:     if(ipv4_hash_table){",
          "229:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(ipv4_hash_table));",
          "230:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "231:         g_hash_table_foreach( ipv4_hash_table, ipv4_hash_table_to_texbuff, buffer);",
          "232:     }",
          "234:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Address resolution IPv6 Hash table \\n#\\n\");",
          "235:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "237:     if(ipv6_hash_table){",
          "238:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(ipv6_hash_table));",
          "239:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "240:         g_hash_table_foreach( ipv6_hash_table, ipv6_hash_table_to_texbuff, buffer);",
          "241:     }",
          "244:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Port names information in Wireshark \\n#\\n\");",
          "245:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "247:     serv_port_hashtable = get_serv_port_hashtable();",
          "248:     if(serv_port_hashtable){",
          "249:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(serv_port_hashtable));",
          "250:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "251:         g_hash_table_foreach( serv_port_hashtable, serv_port_hash_to_texbuff, buffer);",
          "252:     }",
          "254:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Eth names information in Wireshark \\n#\\n\");",
          "255:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "257:     eth_hashtable = get_eth_hashtable();",
          "258:     if(eth_hashtable){",
          "259:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(eth_hashtable));",
          "260:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "261:         g_hash_table_foreach( eth_hashtable, eth_hash_to_texbuff, buffer);",
          "262:     }",
          "264:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# Manuf information in Wireshark \\n#\\n\");",
          "265:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "267:     manuf_hashtable = get_manuf_hashtable();",
          "268:     if(manuf_hashtable){",
          "269:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(manuf_hashtable));",
          "270:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "271:         g_hash_table_foreach( manuf_hashtable, manuf_hash_to_texbuff, buffer);",
          "272:     }",
          "274:     g_snprintf(string_buff, ADDRESS_STR_MAX, \"\\n\\n# wka information in Wireshark \\n#\\n\");",
          "275:     gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "277:     wka_hashtable = get_wka_hashtable();",
          "278:     if(wka_hashtable){",
          "279:         g_snprintf(string_buff, ADDRESS_STR_MAX, \"# With %i entries\\n#\\n\", g_hash_table_size(wka_hashtable));",
          "280:         gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);",
          "281:         g_hash_table_foreach( wka_hashtable, wka_hash_to_texbuff, buffer);",
          "282:     }",
          "",
          "---------------"
        ],
        "ui/gtk/color_dlg.c||ui/gtk/color_dlg.c": [
          "File: ui/gtk/color_dlg.c -> ui/gtk/color_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1020: static void",
          "1021: overwrite_existing_colorfilters_cb(gpointer dialog _U_, gint btn, gpointer data _U_)",
          "1022: {",
          "1037: }",
          "1039: static void",
          "",
          "[Removed Lines]",
          "1023:  switch (btn) {",
          "1024:  case(ESD_BTN_SAVE):",
          "1026:         if (!color_filters_write(color_filter_edit_list))",
          "1027:             simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK,",
          "1028:                 \"Could not open colorfilter file: %s\", g_strerror(errno));",
          "1029:         else",
          "1030:             prefs.unknown_colorfilters = FALSE;",
          "1031:      break;",
          "1032:  case(ESD_BTN_DONT_SAVE):",
          "1033:      break;",
          "1034:  default:",
          "1035:      g_assert_not_reached();",
          "1036:  }",
          "",
          "[Added Lines]",
          "1023:   switch (btn) {",
          "1024:   case(ESD_BTN_SAVE):",
          "1026:     if (!color_filters_write(color_filter_edit_list))",
          "1027:       simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK,",
          "1028:                     \"Could not open colorfilter file: %s\", g_strerror(errno));",
          "1029:     else",
          "1030:       prefs.unknown_colorfilters = FALSE;",
          "1031:     break;",
          "1032:   case(ESD_BTN_DONT_SAVE):",
          "1033:     break;",
          "1034:   default:",
          "1035:     g_assert_not_reached();",
          "1036:   }",
          "",
          "---------------"
        ],
        "ui/gtk/conversations_table.c||ui/gtk/conversations_table.c": [
          "File: ui/gtk/conversations_table.c -> ui/gtk/conversations_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     }",
          "97:     if(ct->page_lb) {",
          "99:         g_snprintf(title, sizeof(title), \"Conversations: %s\", display_name);",
          "100:         g_free(display_name);",
          "101:         gtk_window_set_title(GTK_WINDOW(ct->win), title);",
          "",
          "[Removed Lines]",
          "98:      display_name = cf_get_display_name(&cfile);",
          "",
          "[Added Lines]",
          "98:         display_name = cf_get_display_name(&cfile);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         }",
          "115:         gtk_label_set_text(GTK_LABEL(ct->name_lb), title);",
          "116:     } else {",
          "118:         g_snprintf(title, sizeof(title), \"%s Conversations: %s\", ct->name, display_name);",
          "119:         g_free(display_name);",
          "120:         gtk_window_set_title(GTK_WINDOW(ct->win), title);",
          "",
          "[Removed Lines]",
          "117:      display_name = cf_get_display_name(&cfile);",
          "",
          "[Added Lines]",
          "117:         display_name = cf_get_display_name(&cfile);",
          "",
          "---------------"
        ],
        "ui/gtk/main.c||ui/gtk/main.c": [
          "File: ui/gtk/main.c -> ui/gtk/main.c"
        ],
        "ui/gtk/text_page_utils.c||ui/gtk/text_page_utils.c": [
          "File: ui/gtk/text_page_utils.c -> ui/gtk/text_page_utils.c"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: static gboolean",
          "60: pcapng_read(wtap *wth, int *err, gchar **err_info,",
          "62: static gboolean",
          "63: pcapng_seek_read(wtap *wth, gint64 seek_off,",
          "65: static void",
          "66: pcapng_close(wtap *wth);",
          "70: typedef struct pcapng_block_header_s {",
          "75: } pcapng_block_header_t;",
          "",
          "[Removed Lines]",
          "61:     gint64 *data_offset);",
          "64:     struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info);",
          "71:         guint32 block_type;",
          "72:         guint32 block_total_length;",
          "",
          "[Added Lines]",
          "61:             gint64 *data_offset);",
          "64:                  struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info);",
          "71:     guint32 block_type;",
          "72:     guint32 block_total_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: typedef struct pcapng_section_header_block_s {",
          "102: } pcapng_section_header_block_t;",
          "",
          "[Removed Lines]",
          "92: #define MAX_BLOCK_SIZE (16*1024*1024)",
          "97:         guint32 magic;",
          "98:         guint16 version_major;",
          "99:         guint16 version_minor;",
          "",
          "[Added Lines]",
          "92: #define MAX_BLOCK_SIZE  (16*1024*1024)",
          "97:     guint32 magic;",
          "98:     guint16 version_major;",
          "99:     guint16 version_minor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110: typedef struct pcapng_interface_description_block_s {",
          "115: } pcapng_interface_description_block_t;",
          "",
          "[Removed Lines]",
          "111:         guint16 linktype;",
          "112:         guint16 reserved;",
          "113:         guint32 snaplen;",
          "",
          "[Added Lines]",
          "111:     guint16 linktype;",
          "112:     guint16 reserved;",
          "113:     guint32 snaplen;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123: typedef struct pcapng_packet_block_s {",
          "133: } pcapng_packet_block_t;",
          "",
          "[Removed Lines]",
          "124:         guint16 interface_id;",
          "125:         guint16 drops_count;",
          "126:         guint32 timestamp_high;",
          "127:         guint32 timestamp_low;",
          "128:         guint32 captured_len;",
          "129:         guint32 packet_len;",
          "",
          "[Added Lines]",
          "124:     guint16 interface_id;",
          "125:     guint16 drops_count;",
          "126:     guint32 timestamp_high;",
          "127:     guint32 timestamp_low;",
          "128:     guint32 captured_len;",
          "129:     guint32 packet_len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141: typedef struct pcapng_enhanced_packet_block_s {",
          "150: } pcapng_enhanced_packet_block_t;",
          "",
          "[Removed Lines]",
          "142:         guint32 interface_id;",
          "143:         guint32 timestamp_high;",
          "144:         guint32 timestamp_low;",
          "145:         guint32 captured_len;",
          "146:         guint32 packet_len;",
          "",
          "[Added Lines]",
          "142:     guint32 interface_id;",
          "143:     guint32 timestamp_high;",
          "144:     guint32 timestamp_low;",
          "145:     guint32 captured_len;",
          "146:     guint32 packet_len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158: typedef struct pcapng_simple_packet_block_s {",
          "162: } pcapng_simple_packet_block_t;",
          "",
          "[Removed Lines]",
          "159:         guint32 packet_len;",
          "",
          "[Added Lines]",
          "159:     guint32 packet_len;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "170: typedef struct pcapng_name_resolution_block_s {",
          "174: } pcapng_name_resolution_block_t;",
          "",
          "[Removed Lines]",
          "171:         guint16 record_type;",
          "172:         guint16 record_len;",
          "",
          "[Added Lines]",
          "171:     guint16 record_type;",
          "172:     guint16 record_len;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183: typedef struct pcapng_interface_statistics_block_s {",
          "188: } pcapng_interface_statistics_block_t;",
          "",
          "[Removed Lines]",
          "184:         guint32 interface_id;",
          "185:         guint32 timestamp_high;",
          "186:         guint32 timestamp_low;",
          "",
          "[Added Lines]",
          "184:     guint32 interface_id;",
          "185:     guint32 timestamp_high;",
          "186:     guint32 timestamp_low;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "196: typedef struct pcapng_option_header_s {",
          "201: } pcapng_option_header_t;",
          "203: struct option {",
          "206: };",
          "",
          "[Removed Lines]",
          "197:         guint16 option_code;",
          "198:         guint16 option_length;",
          "204:         guint16 type;",
          "205:         guint16 value_length;",
          "",
          "[Added Lines]",
          "197:     guint16 option_code;",
          "198:     guint16 option_length;",
          "204:     guint16 type;",
          "205:     guint16 value_length;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "228: #if 0",
          "230: typedef struct wtapng_section_s {",
          "238: } wtapng_section_t;",
          "239: #endif",
          "",
          "[Removed Lines]",
          "232:         guint64                         section_length;",
          "",
          "[Added Lines]",
          "232:     guint64                         section_length;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "262: typedef struct wtapng_if_descr_s {",
          "286: } wtapng_if_descr_t;",
          "287: #endif",
          "290: typedef struct wtapng_packet_s {",
          "301: } wtapng_packet_t;",
          "304: typedef struct wtapng_simple_packet_s {",
          "311: } wtapng_simple_packet_t;",
          "314: typedef struct wtapng_name_res_s {",
          "318: } wtapng_name_res_t;",
          "320: #if 0",
          "322: typedef struct wtapng_if_stats_s {",
          "336: } wtapng_if_stats_t;",
          "337: #endif",
          "339: typedef struct wtapng_block_s {",
          "359: } wtapng_block_t;",
          "362: typedef struct interface_info_s {",
          "366: } interface_info_t;",
          "368: typedef struct {",
          "377: } pcapng_t;",
          "379: #ifdef HAVE_PLUGINS",
          "",
          "[Removed Lines]",
          "264:         guint16                         link_type;",
          "265:         guint                           encap;",
          "266:         guint32                         snap_len;",
          "276:         guint8                          if_tsresol;     /* default is 6 for microsecond resolution, opt 9  Resolution of timestamps.",
          "280:         gchar                           *if_filter;     /* NULL if not available, opt 11  The filter (e.g. \"capture only TCP traffic\") used to capture traffic.",
          "308:         guint32                         pseudo_header_len;",
          "309:         int                             wtap_encap;",
          "324:         guint32                         interface_id;",
          "325:         guint32                         ts_high;",
          "326:         guint32                         ts_low;",
          "329:         guint64                         isb_starttime;",
          "330:         guint64                         isb_endtime;",
          "331:         guint64                         isb_ifrecv;",
          "332:         guint64                         isb_ifdrop;",
          "333:         guint64                         isb_filteraccept;",
          "334:         guint64                         isb_osdrop;",
          "335:         guint64                         isb_usrdeliv;",
          "341:         union {",
          "342:                 wtapng_section_t        section;",
          "343:                 wtapng_if_descr_t       if_descr;",
          "344:                 wtapng_name_res_t       name_res;",
          "345:                 wtapng_if_stats_t       if_stats;",
          "346:         } data;",
          "356:         struct wtap_pkthdr *packet_header;",
          "357:         Buffer *frame_buffer;",
          "358:         int *file_encap;",
          "363:         int wtap_encap;",
          "364:         guint32 snap_len;",
          "365:         guint64 time_units_per_second;",
          "370:         gboolean byte_swapped;",
          "371:         guint16 version_major;",
          "372:         guint16 version_minor;",
          "374:         gint8 if_fcslen;",
          "375:         wtap_new_ipv4_callback_t add_new_ipv4;",
          "376:         wtap_new_ipv6_callback_t add_new_ipv6;",
          "",
          "[Added Lines]",
          "264:     guint16  link_type;",
          "265:     guint    encap;",
          "266:     guint32  snap_len;",
          "276:     guint8   if_tsresol;     /* default is 6 for microsecond resolution, opt 9  Resolution of timestamps.",
          "280:     gchar   *if_filter;     /* NULL if not available, opt 11  The filter (e.g. \"capture only TCP traffic\") used to capture traffic.",
          "308:     guint32                         pseudo_header_len;",
          "309:     int                             wtap_encap;",
          "324:     guint32                         interface_id;",
          "325:     guint32                         ts_high;",
          "326:     guint32                         ts_low;",
          "329:     guint64                         isb_starttime;",
          "330:     guint64                         isb_endtime;",
          "331:     guint64                         isb_ifrecv;",
          "332:     guint64                         isb_ifdrop;",
          "333:     guint64                         isb_filteraccept;",
          "334:     guint64                         isb_osdrop;",
          "335:     guint64                         isb_usrdeliv;",
          "341:     union {",
          "342:         wtapng_section_t        section;",
          "343:         wtapng_if_descr_t       if_descr;",
          "344:         wtapng_name_res_t       name_res;",
          "345:         wtapng_if_stats_t       if_stats;",
          "346:     } data;",
          "356:     struct wtap_pkthdr *packet_header;",
          "357:     Buffer *frame_buffer;",
          "358:     int *file_encap;",
          "363:     int wtap_encap;",
          "364:     guint32 snap_len;",
          "365:     guint64 time_units_per_second;",
          "370:     gboolean byte_swapped;",
          "371:     guint16 version_major;",
          "372:     guint16 version_minor;",
          "374:     gint8 if_fcslen;",
          "375:     wtap_new_ipv4_callback_t add_new_ipv4;",
          "376:     wtap_new_ipv6_callback_t add_new_ipv6;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "393: typedef struct {",
          "396: } block_handler;",
          "398: static GHashTable *block_handlers;",
          "",
          "[Removed Lines]",
          "394:         block_reader read;",
          "395:         block_writer write;",
          "",
          "[Added Lines]",
          "394:     block_reader read;",
          "395:     block_writer write;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "401: register_pcapng_block_type_handler(guint block_type, block_reader read,",
          "402:                                    block_writer write)",
          "403: {",
          "422: }",
          "",
          "[Removed Lines]",
          "404:         block_handler *handler;",
          "406:         if (block_handlers == NULL) {",
          "413:                 block_handlers = g_hash_table_new_full(g_direct_hash,",
          "414:                                                        g_direct_equal,",
          "415:                                                        NULL, g_free);",
          "416:         }",
          "417:         handler = (block_handler *)g_malloc(sizeof *handler);",
          "418:         handler->read = read;",
          "419:         handler->write = write;",
          "420:         (void)g_hash_table_insert(block_handlers, GUINT_TO_POINTER(block_type),",
          "421:                                   handler);",
          "",
          "[Added Lines]",
          "404:     block_handler *handler;",
          "406:     if (block_handlers == NULL) {",
          "413:         block_handlers = g_hash_table_new_full(g_direct_hash,",
          "414:                                                g_direct_equal,",
          "415:                                                NULL, g_free);",
          "416:     }",
          "417:     handler = (block_handler *)g_malloc(sizeof *handler);",
          "418:     handler->read = read;",
          "419:     handler->write = write;",
          "420:     (void)g_hash_table_insert(block_handlers, GUINT_TO_POINTER(block_type),",
          "421:                               handler);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "427:                    char *content, guint len, guint to_read,",
          "428:                    int *err, gchar **err_info)",
          "429: {",
          "492:         }",
          "495: }",
          "",
          "[Removed Lines]",
          "430:         int     bytes_read;",
          "431:         int     block_read;",
          "432:         guint64 file_offset64;",
          "435:         if (to_read < sizeof (*oh)) {",
          "438:                 return -1;",
          "439:         }",
          "442:         errno = WTAP_ERR_CANT_READ;",
          "443:         bytes_read = file_read(oh, sizeof (*oh), fh);",
          "444:         if (bytes_read != sizeof (*oh)) {",
          "445:                 pcapng_debug0(\"pcapng_read_option: failed to read option\");",
          "447:                 if (*err != 0)",
          "448:                         return -1;",
          "449:                 return 0;",
          "450:         }",
          "451:         block_read = sizeof (*oh);",
          "452:         if (pn->byte_swapped) {",
          "453:                 oh->option_code      = GUINT16_SWAP_LE_BE(oh->option_code);",
          "454:                 oh->option_length    = GUINT16_SWAP_LE_BE(oh->option_length);",
          "455:         }",
          "458:         if (to_read < sizeof (*oh) + oh->option_length) {",
          "461:                 return -1;",
          "462:         }",
          "465:         if (oh->option_length > len) {",
          "466:                 pcapng_debug2(\"pcapng_read_option: option_length %u larger than buffer (%u)\",",
          "467:                               oh->option_length, len);",
          "468:                 return 0;",
          "469:         }",
          "472:         errno = WTAP_ERR_CANT_READ;",
          "473:         bytes_read = file_read(content, oh->option_length, fh);",
          "474:         if (bytes_read != oh->option_length) {",
          "475:                 pcapng_debug1(\"pcapng_read_option: failed to read content of option %u\", oh->option_code);",
          "477:                 if (*err != 0)",
          "478:                         return -1;",
          "479:                 return 0;",
          "480:         }",
          "481:         block_read += oh->option_length;",
          "484:         if ( (oh->option_length % 4) != 0) {",
          "485:                 file_offset64 = file_seek(fh, 4 - (oh->option_length % 4), SEEK_CUR, err);",
          "486:                 if (file_offset64 <= 0) {",
          "487:                         if (*err != 0)",
          "488:                                 return -1;",
          "489:                         return 0;",
          "490:                 }",
          "491:                 block_read += 4 - (oh->option_length % 4);",
          "494:         return block_read;",
          "",
          "[Added Lines]",
          "430:     int     bytes_read;",
          "431:     int     block_read;",
          "432:     guint64 file_offset64;",
          "435:     if (to_read < sizeof (*oh)) {",
          "438:         return -1;",
          "439:     }",
          "442:     errno = WTAP_ERR_CANT_READ;",
          "443:     bytes_read = file_read(oh, sizeof (*oh), fh);",
          "444:     if (bytes_read != sizeof (*oh)) {",
          "445:         pcapng_debug0(\"pcapng_read_option: failed to read option\");",
          "447:         if (*err != 0)",
          "448:             return -1;",
          "449:         return 0;",
          "450:     }",
          "451:     block_read = sizeof (*oh);",
          "452:     if (pn->byte_swapped) {",
          "453:         oh->option_code      = GUINT16_SWAP_LE_BE(oh->option_code);",
          "454:         oh->option_length    = GUINT16_SWAP_LE_BE(oh->option_length);",
          "455:     }",
          "458:     if (to_read < sizeof (*oh) + oh->option_length) {",
          "461:         return -1;",
          "462:     }",
          "465:     if (oh->option_length > len) {",
          "466:         pcapng_debug2(\"pcapng_read_option: option_length %u larger than buffer (%u)\",",
          "467:                       oh->option_length, len);",
          "468:         return 0;",
          "469:     }",
          "472:     errno = WTAP_ERR_CANT_READ;",
          "473:     bytes_read = file_read(content, oh->option_length, fh);",
          "474:     if (bytes_read != oh->option_length) {",
          "475:         pcapng_debug1(\"pcapng_read_option: failed to read content of option %u\", oh->option_code);",
          "477:         if (*err != 0)",
          "478:             return -1;",
          "479:         return 0;",
          "480:     }",
          "481:     block_read += oh->option_length;",
          "484:     if ( (oh->option_length % 4) != 0) {",
          "485:         file_offset64 = file_seek(fh, 4 - (oh->option_length % 4), SEEK_CUR, err);",
          "486:         if (file_offset64 <= 0) {",
          "487:             if (*err != 0)",
          "488:                 return -1;",
          "489:             return 0;",
          "491:         block_read += 4 - (oh->option_length % 4);",
          "492:     }",
          "494:     return block_read;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "501:                                  wtapng_block_t *wblock, int *err,",
          "502:                                  gchar **err_info)",
          "503: {",
          "548:         }",
          "584:                 return 0;",
          "625:         }",
          "652:                 }",
          "700:                 }",
          "701:         }",
          "705: }",
          "",
          "[Removed Lines]",
          "504:         int     bytes_read;",
          "505:         guint   block_read;",
          "506:         guint to_read, opt_cont_buf_len;",
          "507:         pcapng_section_header_block_t shb;",
          "508:         pcapng_option_header_t oh;",
          "514:         if (bh->block_total_length < MIN_SHB_SIZE) {",
          "518:                 if (first_block)",
          "522:                               bh->block_total_length, MIN_SHB_SIZE);",
          "523:                 return -1;",
          "524:         }",
          "527:         errno = WTAP_ERR_CANT_READ;",
          "528:         bytes_read = file_read(&shb, sizeof shb, fh);",
          "529:         if (bytes_read != sizeof shb) {",
          "531:                 if (*err == 0) {",
          "532:                         if (first_block) {",
          "539:                                 return 0;",
          "540:                         }",
          "546:                 }",
          "547:                 return -1;",
          "549:         block_read = bytes_read;",
          "552:         switch (shb.magic) {",
          "553:             case(0x1A2B3C4D):",
          "555:                 pn->byte_swapped                = FALSE;",
          "556:                 pn->version_major               = shb.version_major;",
          "557:                 pn->version_minor               = shb.version_minor;",
          "559:                 pcapng_debug3(\"pcapng_read_section_header_block: SHB (little endian) V%u.%u, len %u\",",
          "560:                                 pn->version_major, pn->version_minor, bh->block_total_length);",
          "561:                 break;",
          "562:             case(0x4D3C2B1A):",
          "564:                 pn->byte_swapped                = TRUE;",
          "565:                 pn->version_major               = GUINT16_SWAP_LE_BE(shb.version_major);",
          "566:                 pn->version_minor               = GUINT16_SWAP_LE_BE(shb.version_minor);",
          "569:                 bh->block_total_length  = GUINT32_SWAP_LE_BE(bh->block_total_length);",
          "571:                 pcapng_debug3(\"pcapng_read_section_header_block: SHB (big endian) V%u.%u, len %u\",",
          "572:                                 pn->version_major, pn->version_minor, bh->block_total_length);",
          "573:                 break;",
          "574:             default:",
          "576:                 if (first_block) {",
          "578:                         return 0;",
          "579:                 }",
          "585:         }",
          "589:            Don't try to allocate memory for a huge number of options, as",
          "590:            that might fail and, even if it succeeds, it might not leave",
          "591:            any address space or memory+backing store for anything else.",
          "593:            We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "594:            We check for this *after* checking the SHB for its byte",
          "595:            order magic number, so that non-pcap-ng files are less",
          "597:         if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "600:                               bh->block_total_length, MAX_BLOCK_SIZE);",
          "601:                 return -1;",
          "602:         }",
          "605:         if (pn->shb_read == TRUE) {",
          "608:                 return 0;",
          "609:         }",
          "612:         if (pn->version_major != 1 || pn->version_minor > 0) {",
          "615:                               pn->version_major, pn->version_minor);",
          "616:                 return -1;",
          "617:         }",
          "621:         if (pn->byte_swapped) {",
          "622:                 wblock->data.section.section_length = GUINT64_SWAP_LE_BE(shb.section_length);",
          "623:         } else {",
          "624:                 wblock->data.section.section_length = shb.section_length;",
          "628:         wblock->data.section.opt_comment        = NULL;",
          "629:         wblock->data.section.shb_hardware       = NULL;",
          "630:         wblock->data.section.shb_os                     = NULL;",
          "631:         wblock->data.section.shb_user_appl      = NULL;",
          "634:         errno = WTAP_ERR_CANT_READ;",
          "635:         to_read = bh->block_total_length - MIN_SHB_SIZE;",
          "638:         opt_cont_buf_len = to_read;",
          "639:         option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "640:         if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "642:   return -1;",
          "643:  }",
          "644:         pcapng_debug1(\"pcapng_read_section_header_block: Options %u bytes\", to_read);",
          "645:         while (to_read != 0) {",
          "647:                 pcapng_debug1(\"pcapng_read_section_header_block: Options %u bytes remaining\", to_read);",
          "648:                 bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "649:                 if (bytes_read <= 0) {",
          "650:                         pcapng_debug0(\"pcapng_read_section_header_block: failed to read option\");",
          "651:                         return bytes_read;",
          "653:                 block_read += bytes_read;",
          "654:                 to_read -= bytes_read;",
          "657:                 switch (oh.option_code) {",
          "658:                     case(OPT_EOFOPT):",
          "659:                         if (to_read != 0) {",
          "660:                                 pcapng_debug1(\"pcapng_read_section_header_block: %u bytes after opt_endofopt\", to_read);",
          "661:                         }",
          "663:                         to_read = 0;",
          "664:                         break;",
          "665:                     case(OPT_COMMENT):",
          "666:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "667:                                 wblock->data.section.opt_comment = g_strndup(option_content, oh.option_length);",
          "668:                                 pcapng_debug1(\"pcapng_read_section_header_block: opt_comment %s\", wblock->data.section.opt_comment);",
          "669:                         } else {",
          "670:                                 pcapng_debug1(\"pcapng_read_section_header_block: opt_comment length %u seems strange\", oh.option_length);",
          "671:                         }",
          "672:                         break;",
          "673:                     case(OPT_SHB_HARDWARE):",
          "674:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "675:                                 wblock->data.section.shb_hardware = g_strndup(option_content, oh.option_length);",
          "676:                                 pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware %s\", wblock->data.section.shb_hardware);",
          "677:                         } else {",
          "678:                                 pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware length %u seems strange\", oh.option_length);",
          "679:                         }",
          "680:                         break;",
          "681:                     case(OPT_SHB_OS):",
          "682:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "683:                                 wblock->data.section.shb_os = g_strndup(option_content, oh.option_length);",
          "684:                                 pcapng_debug1(\"pcapng_read_section_header_block: shb_os %s\", wblock->data.section.shb_os);",
          "685:                         } else {",
          "686:                                 pcapng_debug2(\"pcapng_read_section_header_block: shb_os length %u seems strange, opt buffsize %u\", oh.option_length,to_read);",
          "687:                         }",
          "688:                         break;",
          "689:                     case(OPT_SHB_USERAPPL):",
          "690:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "691:                                 wblock->data.section.shb_user_appl = g_strndup(option_content, oh.option_length);",
          "692:                                 pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl %s\", wblock->data.section.shb_user_appl);",
          "693:                         } else {",
          "694:                                 pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl length %u seems strange\", oh.option_length);",
          "695:                         }",
          "696:                         break;",
          "697:                     default:",
          "698:                         pcapng_debug2(\"pcapng_read_section_header_block: unknown option %u - ignoring %u bytes\",",
          "699:                                       oh.option_code, oh.option_length);",
          "702:         g_free(option_content);",
          "704:         return block_read;",
          "",
          "[Added Lines]",
          "504:     int     bytes_read;",
          "505:     guint   block_read;",
          "506:     guint to_read, opt_cont_buf_len;",
          "507:     pcapng_section_header_block_t shb;",
          "508:     pcapng_option_header_t oh;",
          "514:     if (bh->block_total_length < MIN_SHB_SIZE) {",
          "518:         if (first_block)",
          "522:                                     bh->block_total_length, MIN_SHB_SIZE);",
          "523:         return -1;",
          "524:     }",
          "527:     errno = WTAP_ERR_CANT_READ;",
          "528:     bytes_read = file_read(&shb, sizeof shb, fh);",
          "529:     if (bytes_read != sizeof shb) {",
          "531:         if (*err == 0) {",
          "532:             if (first_block) {",
          "539:                 return 0;",
          "540:             }",
          "547:         return -1;",
          "548:     }",
          "549:     block_read = bytes_read;",
          "552:     switch (shb.magic) {",
          "553:         case(0x1A2B3C4D):",
          "555:             pn->byte_swapped                = FALSE;",
          "556:             pn->version_major               = shb.version_major;",
          "557:             pn->version_minor               = shb.version_minor;",
          "559:             pcapng_debug3(\"pcapng_read_section_header_block: SHB (little endian) V%u.%u, len %u\",",
          "560:                           pn->version_major, pn->version_minor, bh->block_total_length);",
          "561:             break;",
          "562:         case(0x4D3C2B1A):",
          "564:             pn->byte_swapped                = TRUE;",
          "565:             pn->version_major               = GUINT16_SWAP_LE_BE(shb.version_major);",
          "566:             pn->version_minor               = GUINT16_SWAP_LE_BE(shb.version_minor);",
          "569:             bh->block_total_length  = GUINT32_SWAP_LE_BE(bh->block_total_length);",
          "571:             pcapng_debug3(\"pcapng_read_section_header_block: SHB (big endian) V%u.%u, len %u\",",
          "572:                           pn->version_major, pn->version_minor, bh->block_total_length);",
          "573:             break;",
          "574:         default:",
          "576:             if (first_block) {",
          "579:             }",
          "584:             return 0;",
          "585:     }",
          "589:        Don't try to allocate memory for a huge number of options, as",
          "590:        that might fail and, even if it succeeds, it might not leave",
          "591:        any address space or memory+backing store for anything else.",
          "593:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "594:        We check for this *after* checking the SHB for its byte",
          "595:        order magic number, so that non-pcap-ng files are less",
          "597:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "600:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "601:         return -1;",
          "602:     }",
          "605:     if (pn->shb_read == TRUE) {",
          "608:         return 0;",
          "609:     }",
          "612:     if (pn->version_major != 1 || pn->version_minor > 0) {",
          "615:                                     pn->version_major, pn->version_minor);",
          "616:         return -1;",
          "617:     }",
          "621:     if (pn->byte_swapped) {",
          "622:         wblock->data.section.section_length = GUINT64_SWAP_LE_BE(shb.section_length);",
          "623:     } else {",
          "624:         wblock->data.section.section_length = shb.section_length;",
          "625:     }",
          "628:     wblock->data.section.opt_comment        = NULL;",
          "629:     wblock->data.section.shb_hardware       = NULL;",
          "630:     wblock->data.section.shb_os                     = NULL;",
          "631:     wblock->data.section.shb_user_appl      = NULL;",
          "634:     errno = WTAP_ERR_CANT_READ;",
          "635:     to_read = bh->block_total_length - MIN_SHB_SIZE;",
          "638:     opt_cont_buf_len = to_read;",
          "639:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "640:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "642:         return -1;",
          "643:     }",
          "644:     pcapng_debug1(\"pcapng_read_section_header_block: Options %u bytes\", to_read);",
          "645:     while (to_read != 0) {",
          "647:         pcapng_debug1(\"pcapng_read_section_header_block: Options %u bytes remaining\", to_read);",
          "648:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "649:         if (bytes_read <= 0) {",
          "650:             pcapng_debug0(\"pcapng_read_section_header_block: failed to read option\");",
          "651:             return bytes_read;",
          "653:         block_read += bytes_read;",
          "654:         to_read -= bytes_read;",
          "657:         switch (oh.option_code) {",
          "658:             case(OPT_EOFOPT):",
          "659:                 if (to_read != 0) {",
          "660:                     pcapng_debug1(\"pcapng_read_section_header_block: %u bytes after opt_endofopt\", to_read);",
          "663:                 to_read = 0;",
          "664:                 break;",
          "665:             case(OPT_COMMENT):",
          "666:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "667:                     wblock->data.section.opt_comment = g_strndup(option_content, oh.option_length);",
          "668:                     pcapng_debug1(\"pcapng_read_section_header_block: opt_comment %s\", wblock->data.section.opt_comment);",
          "669:                 } else {",
          "670:                     pcapng_debug1(\"pcapng_read_section_header_block: opt_comment length %u seems strange\", oh.option_length);",
          "671:                 }",
          "672:                 break;",
          "673:             case(OPT_SHB_HARDWARE):",
          "674:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "675:                     wblock->data.section.shb_hardware = g_strndup(option_content, oh.option_length);",
          "676:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware %s\", wblock->data.section.shb_hardware);",
          "677:                 } else {",
          "678:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware length %u seems strange\", oh.option_length);",
          "680:                 break;",
          "681:             case(OPT_SHB_OS):",
          "682:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "683:                     wblock->data.section.shb_os = g_strndup(option_content, oh.option_length);",
          "684:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_os %s\", wblock->data.section.shb_os);",
          "685:                 } else {",
          "686:                     pcapng_debug2(\"pcapng_read_section_header_block: shb_os length %u seems strange, opt buffsize %u\", oh.option_length,to_read);",
          "687:                 }",
          "688:                 break;",
          "689:             case(OPT_SHB_USERAPPL):",
          "690:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "691:                     wblock->data.section.shb_user_appl = g_strndup(option_content, oh.option_length);",
          "692:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl %s\", wblock->data.section.shb_user_appl);",
          "693:                 } else {",
          "694:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl length %u seems strange\", oh.option_length);",
          "695:                 }",
          "696:                 break;",
          "697:             default:",
          "698:                 pcapng_debug2(\"pcapng_read_section_header_block: unknown option %u - ignoring %u bytes\",",
          "699:                               oh.option_code, oh.option_length);",
          "701:     }",
          "702:     g_free(option_content);",
          "704:     return block_read;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "710: pcapng_read_if_descr_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn,",
          "711:                            wtapng_block_t *wblock, int *err, gchar **err_info)",
          "712: {",
          "776:                       wblock->data.if_descr.snap_len);",
          "786:         }",
          "824:                 }",
          "964:                 }",
          "974:                 }",
          "1035:                 }",
          "1045:                 } else {",
          "1052:                 }",
          "1067:                 }",
          "1073:                 }",
          "1083:                 } else {",
          "1090:                 }",
          "1093:         }",
          "1109:         }",
          "1137:         }",
          "1185:         }",
          "1210:         }",
          "1246:                 }",
          "1308:                 }",
          "1309:         }",
          "1317: }",
          "1320: static int",
          "1321: pcapng_read_simple_packet_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn, wtapng_block_t *wblock, int *err, gchar **err_info)",
          "1322: {",
          "1488:         }",
          "1494: }",
          "1496: #define NRES_ENDOFRECORD 0",
          "",
          "[Removed Lines]",
          "714:         int     bytes_read;",
          "715:         guint   block_read;",
          "716:         guint to_read, opt_cont_buf_len;",
          "717:         pcapng_interface_description_block_t idb;",
          "718:         pcapng_option_header_t oh;",
          "724:         if (bh->block_total_length < MIN_IDB_SIZE) {",
          "730:                               bh->block_total_length, MIN_IDB_SIZE);",
          "731:                 return -1;",
          "732:         }",
          "735:            that might fail and, even if it succeeds, it might not leave",
          "736:            any address space or memory+backing store for anything else.",
          "738:            We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "739:            We check for this *after* checking the SHB for its byte",
          "740:            order magic number, so that non-pcap-ng files are less",
          "742:         if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "745:                               bh->block_total_length, MAX_BLOCK_SIZE);",
          "746:                 return -1;",
          "747:         }",
          "750:         errno = WTAP_ERR_CANT_READ;",
          "751:         bytes_read = file_read(&idb, sizeof idb, fh);",
          "752:         if (bytes_read != sizeof idb) {",
          "753:                 pcapng_debug0(\"pcapng_read_if_descr_block: failed to read IDB\");",
          "755:                 if (*err != 0)",
          "756:                         return -1;",
          "757:                 return 0;",
          "758:         }",
          "759:         block_read = bytes_read;",
          "762:         if (pn->byte_swapped) {",
          "763:                 wblock->data.if_descr.link_type = GUINT16_SWAP_LE_BE(idb.linktype);",
          "764:                 wblock->data.if_descr.snap_len  = GUINT32_SWAP_LE_BE(idb.snaplen);",
          "765:         } else {",
          "766:                 wblock->data.if_descr.link_type = idb.linktype;",
          "767:                 wblock->data.if_descr.snap_len  = idb.snaplen;",
          "768:         }",
          "770:         wblock->data.if_descr.wtap_encap = wtap_pcap_encap_to_wtap_encap(wblock->data.if_descr.link_type);",
          "771:         wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "773:         pcapng_debug3(\"pcapng_read_if_descr_block: IDB link_type %u (%s), snap %u\",",
          "774:                       wblock->data.if_descr.link_type,",
          "775:                       wtap_encap_string(wblock->data.if_descr.wtap_encap),",
          "778:         if (wblock->data.if_descr.snap_len > WTAP_MAX_PACKET_SIZE) {",
          "783:                 pcapng_debug1(\"pcapng_read_if_descr_block: snapshot length %u unrealistic.\",",
          "784:                               wblock->data.if_descr.snap_len);",
          "789:         wblock->data.if_descr.opt_comment = NULL;",
          "790:         wblock->data.if_descr.if_name = NULL;",
          "791:         wblock->data.if_descr.if_description = NULL;",
          "798:         wblock->data.if_descr.if_filter_str = NULL;",
          "799:         wblock->data.if_descr.bpf_filter_len = 0;",
          "800:         wblock->data.if_descr.if_filter_bpf_bytes = NULL;",
          "801:         wblock->data.if_descr.if_os = NULL;",
          "807:         errno = WTAP_ERR_CANT_READ;",
          "808:         to_read = bh->block_total_length - MIN_IDB_SIZE;",
          "811:         opt_cont_buf_len = to_read;",
          "812:         option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "813:         if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "815:   return -1;",
          "816:  }",
          "818:         while (to_read != 0) {",
          "820:                 bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "821:                 if (bytes_read <= 0) {",
          "822:                         pcapng_debug0(\"pcapng_read_if_descr_block: failed to read option\");",
          "823:                         return bytes_read;",
          "825:                 block_read += bytes_read;",
          "826:                 to_read -= bytes_read;",
          "829:                 switch (oh.option_code) {",
          "831:                         if (to_read != 0) {",
          "832:                                 pcapng_debug1(\"pcapng_read_if_descr_block: %u bytes after opt_endofopt\", to_read);",
          "833:                         }",
          "835:                         to_read = 0;",
          "836:                         break;",
          "838:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "839:                                 wblock->data.if_descr.opt_comment = g_strndup(option_content, oh.option_length);",
          "840:                                 pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment %s\", wblock->data.if_descr.opt_comment);",
          "841:                         } else {",
          "842:                                 pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment length %u seems strange\", oh.option_length);",
          "843:                         }",
          "844:                         break;",
          "846:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "847:                                 wblock->data.if_descr.if_name = g_strndup(option_content, oh.option_length);",
          "848:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_name %s\", wblock->data.if_descr.if_name);",
          "849:                         } else {",
          "850:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_name length %u seems strange\", oh.option_length);",
          "851:                         }",
          "852:                         break;",
          "854:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "855:                             wblock->data.if_descr.if_description = g_strndup(option_content, oh.option_length);",
          "856:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_description %s\", wblock->data.if_descr.if_description);",
          "857:                         } else {",
          "858:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_description length %u seems strange\", oh.option_length);",
          "859:                         }",
          "860:                         break;",
          "868:                         if (oh.option_length == 8) {",
          "872:                                 memcpy(&wblock->data.if_descr.if_speed, option_content, sizeof(guint64));",
          "873:                                 if (pn->byte_swapped)",
          "874:                                         wblock->data.if_descr.if_speed = GUINT64_SWAP_LE_BE(wblock->data.if_descr.if_speed);",
          "875:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", wblock->data.if_descr.if_speed);",
          "876:                         } else {",
          "877:                                     pcapng_debug1(\"pcapng_read_if_descr_block: if_speed length %u not 8 as expected\", oh.option_length);",
          "878:                         }",
          "879:                         break;",
          "881:                         if (oh.option_length == 1) {",
          "882:                                 guint64 base;",
          "883:                                 guint64 result;",
          "884:                                 guint8 i, exponent, if_tsresol;",
          "886:                                 if_tsresol = option_content[0];",
          "887:                                 if (if_tsresol & 0x80) {",
          "888:                                         base = 2;",
          "889:                                 } else {",
          "890:                                         base = 10;",
          "891:                                 }",
          "892:                                 exponent = (guint8)(if_tsresol & 0x7f);",
          "893:                                 if (((base == 2) && (exponent < 64)) || ((base == 10) && (exponent < 20))) {",
          "894:                                         result = 1;",
          "895:                                         for (i = 0; i < exponent; i++) {",
          "896:                                                 result *= base;",
          "897:                                         }",
          "898:                                         time_units_per_second = result;",
          "899:                                 } else {",
          "900:                                         time_units_per_second = G_MAXUINT64;",
          "901:                                 }",
          "902:                                 if (time_units_per_second > (((guint64)1) << 32)) {",
          "903:                                         pcapng_debug0(\"pcapng_open: time conversion might be inaccurate\");",
          "904:                                 }",
          "905:                                 wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "906:                                 wblock->data.if_descr.if_tsresol = if_tsresol;",
          "907:                                 pcapng_debug2(\"pcapng_read_if_descr_block: if_tsresol %u, units/s %\" G_GINT64_MODIFIER \"u\", wblock->data.if_descr.if_tsresol, wblock->data.if_descr.time_units_per_second);",
          "908:                         } else {",
          "909:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_tsresol length %u not 1 as expected\", oh.option_length);",
          "910:                         }",
          "911:                         break;",
          "916:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "920:                                 if (option_content[0] == 0) {",
          "921:                                         wblock->data.if_descr.if_filter_str = g_strndup(option_content+1, oh.option_length-1);",
          "922:                                         pcapng_debug2(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", wblock->data.if_descr.if_filter_str, oh.option_length);",
          "923:                                 } else if (option_content[0] == 1) {",
          "924:                                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "925:                                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "926:                                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "927:                                 }",
          "928:                         } else {",
          "929:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "930:                         }",
          "931:                         break;",
          "938:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "939:                             wblock->data.if_descr.if_os = g_strndup(option_content, oh.option_length);",
          "940:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_os %s\", wblock->data.if_descr.if_os);",
          "941:                         } else {",
          "942:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_os length %u seems strange\", oh.option_length);",
          "943:                         }",
          "944:                         break;",
          "946:                         if (oh.option_length == 1) {",
          "947:                                 wblock->data.if_descr.if_fcslen = option_content[0];",
          "948:                                 pn->if_fcslen = wblock->data.if_descr.if_fcslen;",
          "949:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_fcslen %u\", wblock->data.if_descr.if_fcslen);",
          "951:                         } else {",
          "952:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_fcslen length %u not 1 as expected\", oh.option_length);",
          "953:                         }",
          "954:                         break;",
          "961:                     default:",
          "962:                         pcapng_debug2(\"pcapng_read_if_descr_block: unknown option %u - ignoring %u bytes\",",
          "963:                                       oh.option_code, oh.option_length);",
          "965:         }",
          "967:         g_free(option_content);",
          "969:         if (*wblock->file_encap == WTAP_ENCAP_UNKNOWN) {",
          "971:         } else {",
          "972:                 if (*wblock->file_encap != wblock->data.if_descr.wtap_encap) {",
          "975:         }",
          "977:         return block_read;",
          "978: }",
          "981: static int",
          "982: pcapng_read_packet_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn, wtapng_block_t *wblock, int *err, gchar **err_info, gboolean enhanced)",
          "983: {",
          "984:         int bytes_read;",
          "985:         guint block_read;",
          "986:         guint to_read, opt_cont_buf_len;",
          "987:         guint64 file_offset64;",
          "988:         pcapng_enhanced_packet_block_t epb;",
          "989:         pcapng_packet_block_t pb;",
          "990:         wtapng_packet_t packet;",
          "991:         guint32 block_total_length;",
          "992:         guint32 padding;",
          "993:         interface_info_t iface_info;",
          "994:         guint64 ts;",
          "995:         pcapng_option_header_t oh;",
          "996:         int pseudo_header_len;",
          "998:         int fcslen;",
          "1001:            that might fail and, even if it succeeds, it might not leave",
          "1002:            any address space or memory+backing store for anything else.",
          "1004:            We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1005:            We check for this *after* checking the SHB for its byte",
          "1006:            order magic number, so that non-pcap-ng files are less",
          "1008:         if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1011:                               bh->block_total_length, MAX_BLOCK_SIZE);",
          "1012:                 return -1;",
          "1013:         }",
          "1016:         errno = WTAP_ERR_CANT_READ;",
          "1017:         if (enhanced) {",
          "1021:                 if (bh->block_total_length < MIN_EPB_SIZE) {",
          "1027:                                       bh->block_total_length, MIN_EPB_SIZE);",
          "1028:                         return -1;",
          "1029:                 }",
          "1030:                 bytes_read = file_read(&epb, sizeof epb, fh);",
          "1031:                 if (bytes_read != sizeof epb) {",
          "1032:                         pcapng_debug0(\"pcapng_read_packet_block: failed to read packet data\");",
          "1034:                         return 0;",
          "1036:                 block_read = bytes_read;",
          "1038:                 if (pn->byte_swapped) {",
          "1039:                         packet.interface_id        = GUINT32_SWAP_LE_BE(epb.interface_id);",
          "1041:                         packet.ts_high             = GUINT32_SWAP_LE_BE(epb.timestamp_high);",
          "1042:                         packet.ts_low              = GUINT32_SWAP_LE_BE(epb.timestamp_low);",
          "1043:                         packet.cap_len             = GUINT32_SWAP_LE_BE(epb.captured_len);",
          "1044:                         packet.packet_len          = GUINT32_SWAP_LE_BE(epb.packet_len);",
          "1046:                         packet.interface_id        = epb.interface_id;",
          "1048:                         packet.ts_high             = epb.timestamp_high;",
          "1049:                         packet.ts_low              = epb.timestamp_low;",
          "1050:                         packet.cap_len             = epb.captured_len;",
          "1051:                         packet.packet_len          = epb.packet_len;",
          "1053:                 pcapng_debug3(\"pcapng_read_packet_block: EPB on interface_id %d, cap_len %d, packet_len %d\",",
          "1054:                               packet.interface_id, packet.cap_len, packet.packet_len);",
          "1055:         } else {",
          "1059:                 if (bh->block_total_length < MIN_PB_SIZE) {",
          "1065:                                       bh->block_total_length, MIN_PB_SIZE);",
          "1066:                         return -1;",
          "1068:                 bytes_read = file_read(&pb, sizeof pb, fh);",
          "1069:                 if (bytes_read != sizeof pb) {",
          "1070:                         pcapng_debug0(\"pcapng_read_packet_block: failed to read packet data\");",
          "1072:                         return 0;",
          "1074:                 block_read = bytes_read;",
          "1076:                 if (pn->byte_swapped) {",
          "1077:                         packet.interface_id        = GUINT16_SWAP_LE_BE(pb.interface_id);",
          "1078:                         packet.drops_count         = GUINT16_SWAP_LE_BE(pb.drops_count);",
          "1079:                         packet.ts_high             = GUINT32_SWAP_LE_BE(pb.timestamp_high);",
          "1080:                         packet.ts_low              = GUINT32_SWAP_LE_BE(pb.timestamp_low);",
          "1081:                         packet.cap_len             = GUINT32_SWAP_LE_BE(pb.captured_len);",
          "1082:                         packet.packet_len          = GUINT32_SWAP_LE_BE(pb.packet_len);",
          "1084:                         packet.interface_id        = pb.interface_id;",
          "1085:                         packet.drops_count         = pb.drops_count;",
          "1086:                         packet.ts_high             = pb.timestamp_high;",
          "1087:                         packet.ts_low              = pb.timestamp_low;",
          "1088:                         packet.cap_len             = pb.captured_len;",
          "1089:                         packet.packet_len          = pb.packet_len;",
          "1091:                 pcapng_debug3(\"pcapng_read_packet_block: PB on interface_id %d, cap_len %d, packet_len %d\",",
          "1092:                               packet.interface_id, packet.cap_len, packet.packet_len);",
          "1098:         if ((packet.cap_len % 4) != 0)",
          "1099:                 padding = 4 - (packet.cap_len % 4);",
          "1100:         else",
          "1101:                 padding = 0;",
          "1105:         if (bh->block_total_length % 4) {",
          "1106:                 block_total_length = bh->block_total_length + 4 - (bh->block_total_length % 4);",
          "1107:         } else {",
          "1108:                 block_total_length = bh->block_total_length;",
          "1110:         pcapng_debug1(\"pcapng_read_packet_block: block_total_length %d\", block_total_length);",
          "1115:         if (enhanced) {",
          "1116:                 if (block_total_length <",
          "1117:                     MIN_EPB_SIZE + packet.cap_len + padding) {",
          "1123:                                       block_total_length, packet.cap_len);",
          "1124:                         return -1;",
          "1125:                 }",
          "1126:         } else {",
          "1127:                 if (block_total_length <",
          "1128:                     MIN_PB_SIZE + packet.cap_len + padding) {",
          "1134:                                       block_total_length, packet.cap_len);",
          "1135:                         return -1;",
          "1136:                 }",
          "1139:         if (packet.cap_len > WTAP_MAX_PACKET_SIZE) {",
          "1142:                     packet.cap_len, WTAP_MAX_PACKET_SIZE);",
          "1143:                 return 0;",
          "1144:         }",
          "1145:         pcapng_debug3(\"pcapng_read_packet_block: packet data: packet_len %u captured_len %u interface_id %u\",",
          "1146:                       packet.packet_len,",
          "1147:                       packet.cap_len,",
          "1148:                       packet.interface_id);",
          "1150:         if (packet.interface_id >= pn->interfaces->len) {",
          "1153:                     packet.interface_id, pn->interfaces->len);",
          "1154:                 return 0;",
          "1155:         }",
          "1156:         iface_info = g_array_index(pn->interfaces, interface_info_t,",
          "1157:             packet.interface_id);",
          "1159:         wblock->packet_header->rec_type = REC_TYPE_PACKET;",
          "1160:         wblock->packet_header->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1162:         pcapng_debug3(\"pcapng_read_packet_block: encapsulation = %d (%s), pseudo header size = %d.\",",
          "1163:                        iface_info.wtap_encap,",
          "1164:                        wtap_encap_string(iface_info.wtap_encap),",
          "1165:                        pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1166:         wblock->packet_header->interface_id = packet.interface_id;",
          "1167:         wblock->packet_header->pkt_encap = iface_info.wtap_encap;",
          "1169:         memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1170:         pseudo_header_len = pcap_process_pseudo_header(fh,",
          "1171:                                                        WTAP_FILE_TYPE_SUBTYPE_PCAPNG,",
          "1172:                                                        iface_info.wtap_encap,",
          "1173:                                                        packet.cap_len,",
          "1174:                                                        TRUE,",
          "1175:                                                        wblock->packet_header,",
          "1176:                                                        err,",
          "1177:                                                        err_info);",
          "1178:         if (pseudo_header_len < 0) {",
          "1179:                 return 0;",
          "1180:         }",
          "1181:         block_read += pseudo_header_len;",
          "1182:         if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "1183:                 pcapng_debug1(\"pcapng_read_packet_block: Could only read %d bytes for pseudo header.\",",
          "1184:                               pseudo_header_len);",
          "1186:         wblock->packet_header->caplen = packet.cap_len - pseudo_header_len;",
          "1187:         wblock->packet_header->len = packet.packet_len - pseudo_header_len;",
          "1190:         ts = (((guint64)packet.ts_high) << 32) | ((guint64)packet.ts_low);",
          "1191:         wblock->packet_header->ts.secs = (time_t)(ts / iface_info.time_units_per_second);",
          "1192:         wblock->packet_header->ts.nsecs = (int)(((ts % iface_info.time_units_per_second) * 1000000000) / iface_info.time_units_per_second);",
          "1195:         errno = WTAP_ERR_CANT_READ;",
          "1196:  if (!wtap_read_packet_bytes(fh, wblock->frame_buffer,",
          "1197:      packet.cap_len - pseudo_header_len, err, err_info))",
          "1198:   return 0;",
          "1199:         block_read += packet.cap_len - pseudo_header_len;",
          "1202:         if (padding != 0) {",
          "1203:                 file_offset64 = file_seek(fh, padding, SEEK_CUR, err);",
          "1204:                 if (file_offset64 <= 0) {",
          "1205:                         if (*err != 0)",
          "1206:                                 return -1;",
          "1207:                         return 0;",
          "1208:                 }",
          "1209:                 block_read += padding;",
          "1213:         wblock->packet_header->opt_comment = NULL;",
          "1214:         wblock->packet_header->drop_count  = -1;",
          "1215:         wblock->packet_header->pack_flags  = 0;",
          "1218:         fcslen = pn->if_fcslen;",
          "1226:         errno = WTAP_ERR_CANT_READ;",
          "1227:         to_read = block_total_length -",
          "1228:                   (int)sizeof(pcapng_block_header_t) -",
          "1230:                   (int)sizeof(bh->block_total_length);",
          "1233:         opt_cont_buf_len = to_read;",
          "1234:         option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "1235:         if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "1237:   return -1;",
          "1238:  }",
          "1240:         while (to_read != 0) {",
          "1242:                 bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "1243:                 if (bytes_read <= 0) {",
          "1244:                         pcapng_debug0(\"pcapng_read_packet_block: failed to read option\");",
          "1245:                         return bytes_read;",
          "1247:                 block_read += bytes_read;",
          "1248:                 to_read -= bytes_read;",
          "1251:                 switch (oh.option_code) {",
          "1252:                     case(OPT_EOFOPT):",
          "1253:                         if (to_read != 0) {",
          "1254:                                 pcapng_debug1(\"pcapng_read_packet_block: %u bytes after opt_endofopt\", to_read);",
          "1255:                         }",
          "1257:                         to_read = 0;",
          "1258:                         break;",
          "1259:                     case(OPT_COMMENT):",
          "1260:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1261:                                 wblock->packet_header->presence_flags |= WTAP_HAS_COMMENTS;",
          "1262:                                 wblock->packet_header->opt_comment = g_strndup(option_content, oh.option_length);",
          "1263:                                 pcapng_debug2(\"pcapng_read_packet_block: length %u opt_comment '%s'\", oh.option_length, wblock->packet_header->opt_comment);",
          "1264:                         } else {",
          "1265:                                 pcapng_debug1(\"pcapng_read_packet_block: opt_comment length %u seems strange\", oh.option_length);",
          "1266:                         }",
          "1267:                         break;",
          "1268:                     case(OPT_EPB_FLAGS):",
          "1269:                         if (oh.option_length == 4) {",
          "1273:                                 wblock->packet_header->presence_flags |= WTAP_HAS_PACK_FLAGS;",
          "1274:                                 memcpy(&wblock->packet_header->pack_flags, option_content, sizeof(guint32));",
          "1275:                                 if (pn->byte_swapped)",
          "1276:                                         wblock->packet_header->pack_flags = GUINT32_SWAP_LE_BE(wblock->packet_header->pack_flags);",
          "1277:                                 if (wblock->packet_header->pack_flags & 0x000001E0) {",
          "1279:                                         fcslen = (wblock->packet_header->pack_flags & 0x000001E0) >> 5;",
          "1280:                                 }",
          "1281:                                 pcapng_debug1(\"pcapng_read_packet_block: pack_flags %u (ignored)\", wblock->packet_header->pack_flags);",
          "1282:                         } else {",
          "1283:                                 pcapng_debug1(\"pcapng_read_packet_block: pack_flags length %u not 4 as expected\", oh.option_length);",
          "1284:                         }",
          "1285:                         break;",
          "1286:                     case(OPT_EPB_HASH):",
          "1287:                         pcapng_debug2(\"pcapng_read_packet_block: epb_hash %u currently not handled - ignoring %u bytes\",",
          "1288:                                       oh.option_code, oh.option_length);",
          "1289:                         break;",
          "1290:                     case(OPT_EPB_DROPCOUNT):",
          "1291:                         if (oh.option_length == 8) {",
          "1295:                                 wblock->packet_header->presence_flags |= WTAP_HAS_DROP_COUNT;",
          "1296:                                 memcpy(&wblock->packet_header->drop_count, option_content, sizeof(guint64));",
          "1297:                                 if (pn->byte_swapped)",
          "1298:                                         wblock->packet_header->drop_count = GUINT64_SWAP_LE_BE(wblock->packet_header->drop_count);",
          "1300:                                 pcapng_debug1(\"pcapng_read_packet_block: drop_count %\" G_GINT64_MODIFIER \"u\", wblock->packet_header->drop_count);",
          "1301:                         } else {",
          "1302:                                 pcapng_debug1(\"pcapng_read_packet_block: drop_count length %u not 8 as expected\", oh.option_length);",
          "1303:                         }",
          "1304:                         break;",
          "1305:                     default:",
          "1306:                         pcapng_debug2(\"pcapng_read_packet_block: unknown option %u - ignoring %u bytes\",",
          "1307:                                       oh.option_code, oh.option_length);",
          "1311:         g_free(option_content);",
          "1313:         pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, iface_info.wtap_encap,",
          "1314:             wblock->packet_header, ws_buffer_start_ptr(wblock->frame_buffer),",
          "1315:             pn->byte_swapped, fcslen);",
          "1316:         return block_read;",
          "1323:         int bytes_read;",
          "1324:         guint block_read;",
          "1325:         guint64 file_offset64;",
          "1326:         interface_info_t iface_info;",
          "1327:         pcapng_simple_packet_block_t spb;",
          "1328:         wtapng_simple_packet_t simple_packet;",
          "1329:         guint32 block_total_length;",
          "1330:         guint32 padding;",
          "1331:         int pseudo_header_len;",
          "1336:         if (bh->block_total_length < MIN_SPB_SIZE) {",
          "1342:                               bh->block_total_length, MIN_SPB_SIZE);",
          "1343:                 return -1;",
          "1344:         }",
          "1347:            that might fail and, even if it succeeds, it might not leave",
          "1348:            any address space or memory+backing store for anything else.",
          "1350:            We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1351:            We check for this *after* checking the SHB for its byte",
          "1352:            order magic number, so that non-pcap-ng files are less",
          "1354:         if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1357:                               bh->block_total_length, MAX_BLOCK_SIZE);",
          "1358:                 return -1;",
          "1359:         }",
          "1362:         errno = WTAP_ERR_CANT_READ;",
          "1363:         bytes_read = file_read(&spb, sizeof spb, fh);",
          "1364:         if (bytes_read != sizeof spb) {",
          "1365:                 pcapng_debug0(\"pcapng_read_simple_packet_block: failed to read packet data\");",
          "1367:                 return 0;",
          "1368:         }",
          "1369:         block_read = bytes_read;",
          "1371:         if (0 >= pn->interfaces->len) {",
          "1374:                 return 0;",
          "1375:         }",
          "1376:         iface_info = g_array_index(pn->interfaces, interface_info_t, 0);",
          "1378:         if (pn->byte_swapped) {",
          "1379:                 simple_packet.packet_len   = GUINT32_SWAP_LE_BE(spb.packet_len);",
          "1380:         } else {",
          "1381:                 simple_packet.packet_len   = spb.packet_len;",
          "1382:         }",
          "1389:         simple_packet.cap_len = simple_packet.packet_len;",
          "1390:         if (simple_packet.cap_len > iface_info.snap_len)",
          "1391:                 simple_packet.cap_len = iface_info.snap_len;",
          "1396:         if ((simple_packet.cap_len % 4) != 0)",
          "1397:                 padding = 4 - (simple_packet.cap_len % 4);",
          "1398:         else",
          "1399:                 padding = 0;",
          "1403:         if (bh->block_total_length % 4) {",
          "1404:                 block_total_length = bh->block_total_length + 4 - (bh->block_total_length % 4);",
          "1405:         } else {",
          "1406:                 block_total_length = bh->block_total_length;",
          "1407:         }",
          "1408:         pcapng_debug1(\"pcapng_read_simple_packet_block: block_total_length %d\", block_total_length);",
          "1413:         if (block_total_length < MIN_SPB_SIZE + simple_packet.cap_len + padding) {",
          "1422:                               block_total_length, simple_packet.packet_len);",
          "1423:                 return -1;",
          "1424:         }",
          "1426:         if (simple_packet.cap_len > WTAP_MAX_PACKET_SIZE) {",
          "1429:                     simple_packet.cap_len, WTAP_MAX_PACKET_SIZE);",
          "1430:                 return 0;",
          "1431:         }",
          "1432:         pcapng_debug1(\"pcapng_read_simple_packet_block: packet data: packet_len %u\",",
          "1433:                        simple_packet.packet_len);",
          "1435:         pcapng_debug1(\"pcapng_read_simple_packet_block: Need to read pseudo header of size %d\",",
          "1436:                       pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1439:         wblock->packet_header->rec_type = REC_TYPE_PACKET;",
          "1440:         wblock->packet_header->presence_flags = WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1441:         wblock->packet_header->interface_id = 0;",
          "1442:         wblock->packet_header->pkt_encap = iface_info.wtap_encap;",
          "1443:         wblock->packet_header->ts.secs = 0;",
          "1444:         wblock->packet_header->ts.nsecs = 0;",
          "1445:         wblock->packet_header->interface_id = 0;",
          "1446:         wblock->packet_header->opt_comment = NULL;",
          "1447:         wblock->packet_header->drop_count = 0;",
          "1448:         wblock->packet_header->pack_flags = 0;",
          "1450:         memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1451:         pseudo_header_len = pcap_process_pseudo_header(fh,",
          "1452:                                                        WTAP_FILE_TYPE_SUBTYPE_PCAPNG,",
          "1453:                                                        iface_info.wtap_encap,",
          "1454:                                                        simple_packet.cap_len,",
          "1455:                                                        TRUE,",
          "1456:                                                        wblock->packet_header,",
          "1457:                                                        err,",
          "1458:                                                        err_info);",
          "1459:         if (pseudo_header_len < 0) {",
          "1460:                 return 0;",
          "1461:         }",
          "1462:         wblock->packet_header->caplen = simple_packet.cap_len - pseudo_header_len;",
          "1463:         wblock->packet_header->len = simple_packet.packet_len - pseudo_header_len;",
          "1464:         block_read += pseudo_header_len;",
          "1465:         if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "1466:                 pcapng_debug1(\"pcapng_read_simple_packet_block: Could only read %d bytes for pseudo header.\",",
          "1467:                               pseudo_header_len);",
          "1468:         }",
          "1470:         memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1473:         errno = WTAP_ERR_CANT_READ;",
          "1474:  if (!wtap_read_packet_bytes(fh, wblock->frame_buffer,",
          "1475:      simple_packet.cap_len, err, err_info))",
          "1476:   return 0;",
          "1477:         block_read += simple_packet.cap_len;",
          "1480:         if ((simple_packet.cap_len % 4) != 0) {",
          "1481:                 file_offset64 = file_seek(fh, 4 - (simple_packet.cap_len % 4), SEEK_CUR, err);",
          "1482:                 if (file_offset64 <= 0) {",
          "1483:                         if (*err != 0)",
          "1484:                                 return -1;",
          "1485:                         return 0;",
          "1486:                 }",
          "1487:                 block_read += 4 - (simple_packet.cap_len % 4);",
          "1490:         pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, iface_info.wtap_encap,",
          "1491:             wblock->packet_header, ws_buffer_start_ptr(wblock->frame_buffer),",
          "1492:             pn->byte_swapped, pn->if_fcslen);",
          "1493:         return block_read;",
          "",
          "[Added Lines]",
          "714:     int     bytes_read;",
          "715:     guint   block_read;",
          "716:     guint to_read, opt_cont_buf_len;",
          "717:     pcapng_interface_description_block_t idb;",
          "718:     pcapng_option_header_t oh;",
          "724:     if (bh->block_total_length < MIN_IDB_SIZE) {",
          "730:                                     bh->block_total_length, MIN_IDB_SIZE);",
          "731:         return -1;",
          "732:     }",
          "735:        that might fail and, even if it succeeds, it might not leave",
          "736:        any address space or memory+backing store for anything else.",
          "738:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "739:        We check for this *after* checking the SHB for its byte",
          "740:        order magic number, so that non-pcap-ng files are less",
          "742:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "745:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "746:         return -1;",
          "747:     }",
          "750:     errno = WTAP_ERR_CANT_READ;",
          "751:     bytes_read = file_read(&idb, sizeof idb, fh);",
          "752:     if (bytes_read != sizeof idb) {",
          "753:         pcapng_debug0(\"pcapng_read_if_descr_block: failed to read IDB\");",
          "755:         if (*err != 0)",
          "756:             return -1;",
          "757:         return 0;",
          "758:     }",
          "759:     block_read = bytes_read;",
          "762:     if (pn->byte_swapped) {",
          "763:         wblock->data.if_descr.link_type = GUINT16_SWAP_LE_BE(idb.linktype);",
          "764:         wblock->data.if_descr.snap_len  = GUINT32_SWAP_LE_BE(idb.snaplen);",
          "765:     } else {",
          "766:         wblock->data.if_descr.link_type = idb.linktype;",
          "767:         wblock->data.if_descr.snap_len  = idb.snaplen;",
          "768:     }",
          "770:     wblock->data.if_descr.wtap_encap = wtap_pcap_encap_to_wtap_encap(wblock->data.if_descr.link_type);",
          "771:     wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "773:     pcapng_debug3(\"pcapng_read_if_descr_block: IDB link_type %u (%s), snap %u\",",
          "774:                   wblock->data.if_descr.link_type,",
          "775:                   wtap_encap_string(wblock->data.if_descr.wtap_encap),",
          "776:                   wblock->data.if_descr.snap_len);",
          "778:     if (wblock->data.if_descr.snap_len > WTAP_MAX_PACKET_SIZE) {",
          "783:         pcapng_debug1(\"pcapng_read_if_descr_block: snapshot length %u unrealistic.\",",
          "786:     }",
          "789:     wblock->data.if_descr.opt_comment = NULL;",
          "790:     wblock->data.if_descr.if_name = NULL;",
          "791:     wblock->data.if_descr.if_description = NULL;",
          "798:     wblock->data.if_descr.if_filter_str = NULL;",
          "799:     wblock->data.if_descr.bpf_filter_len = 0;",
          "800:     wblock->data.if_descr.if_filter_bpf_bytes = NULL;",
          "801:     wblock->data.if_descr.if_os = NULL;",
          "807:     errno = WTAP_ERR_CANT_READ;",
          "808:     to_read = bh->block_total_length - MIN_IDB_SIZE;",
          "811:     opt_cont_buf_len = to_read;",
          "812:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "813:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "815:         return -1;",
          "816:     }",
          "818:     while (to_read != 0) {",
          "820:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "821:         if (bytes_read <= 0) {",
          "822:             pcapng_debug0(\"pcapng_read_if_descr_block: failed to read option\");",
          "823:             return bytes_read;",
          "825:         block_read += bytes_read;",
          "826:         to_read -= bytes_read;",
          "829:         switch (oh.option_code) {",
          "831:                 if (to_read != 0) {",
          "832:                     pcapng_debug1(\"pcapng_read_if_descr_block: %u bytes after opt_endofopt\", to_read);",
          "835:                 to_read = 0;",
          "836:                 break;",
          "838:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "839:                     wblock->data.if_descr.opt_comment = g_strndup(option_content, oh.option_length);",
          "840:                     pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment %s\", wblock->data.if_descr.opt_comment);",
          "841:                 } else {",
          "842:                     pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment length %u seems strange\", oh.option_length);",
          "844:                 break;",
          "846:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "847:                     wblock->data.if_descr.if_name = g_strndup(option_content, oh.option_length);",
          "848:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_name %s\", wblock->data.if_descr.if_name);",
          "849:                 } else {",
          "850:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_name length %u seems strange\", oh.option_length);",
          "852:                 break;",
          "854:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "855:                     wblock->data.if_descr.if_description = g_strndup(option_content, oh.option_length);",
          "856:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_description %s\", wblock->data.if_descr.if_description);",
          "857:                 } else {",
          "858:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_description length %u seems strange\", oh.option_length);",
          "859:                 }",
          "860:                 break;",
          "868:                 if (oh.option_length == 8) {",
          "872:                     memcpy(&wblock->data.if_descr.if_speed, option_content, sizeof(guint64));",
          "873:                     if (pn->byte_swapped)",
          "874:                         wblock->data.if_descr.if_speed = GUINT64_SWAP_LE_BE(wblock->data.if_descr.if_speed);",
          "875:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", wblock->data.if_descr.if_speed);",
          "876:                 } else {",
          "877:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_speed length %u not 8 as expected\", oh.option_length);",
          "879:                 break;",
          "881:                 if (oh.option_length == 1) {",
          "882:                     guint64 base;",
          "883:                     guint64 result;",
          "884:                     guint8 i, exponent, if_tsresol;",
          "886:                     if_tsresol = option_content[0];",
          "887:                     if (if_tsresol & 0x80) {",
          "888:                         base = 2;",
          "889:                     } else {",
          "890:                         base = 10;",
          "891:                     }",
          "892:                     exponent = (guint8)(if_tsresol & 0x7f);",
          "893:                     if (((base == 2) && (exponent < 64)) || ((base == 10) && (exponent < 20))) {",
          "894:                         result = 1;",
          "895:                         for (i = 0; i < exponent; i++) {",
          "896:                             result *= base;",
          "897:                         }",
          "898:                         time_units_per_second = result;",
          "899:                     } else {",
          "900:                         time_units_per_second = G_MAXUINT64;",
          "901:                     }",
          "902:                     if (time_units_per_second > (((guint64)1) << 32)) {",
          "903:                         pcapng_debug0(\"pcapng_open: time conversion might be inaccurate\");",
          "904:                     }",
          "905:                     wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "906:                     wblock->data.if_descr.if_tsresol = if_tsresol;",
          "907:                     pcapng_debug2(\"pcapng_read_if_descr_block: if_tsresol %u, units/s %\" G_GINT64_MODIFIER \"u\", wblock->data.if_descr.if_tsresol, wblock->data.if_descr.time_units_per_second);",
          "909:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_tsresol length %u not 1 as expected\", oh.option_length);",
          "911:                 break;",
          "916:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "920:                     if (option_content[0] == 0) {",
          "921:                         wblock->data.if_descr.if_filter_str = g_strndup(option_content+1, oh.option_length-1);",
          "922:                         pcapng_debug2(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", wblock->data.if_descr.if_filter_str, oh.option_length);",
          "923:                     } else if (option_content[0] == 1) {",
          "924:                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "925:                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "926:                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "927:                     }",
          "928:                 } else {",
          "929:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "931:                 break;",
          "938:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "939:                     wblock->data.if_descr.if_os = g_strndup(option_content, oh.option_length);",
          "940:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_os %s\", wblock->data.if_descr.if_os);",
          "941:                 } else {",
          "942:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_os length %u seems strange\", oh.option_length);",
          "944:                 break;",
          "946:                 if (oh.option_length == 1) {",
          "947:                     wblock->data.if_descr.if_fcslen = option_content[0];",
          "948:                     pn->if_fcslen = wblock->data.if_descr.if_fcslen;",
          "949:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_fcslen %u\", wblock->data.if_descr.if_fcslen);",
          "952:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_fcslen length %u not 1 as expected\", oh.option_length);",
          "954:                 break;",
          "961:             default:",
          "962:                 pcapng_debug2(\"pcapng_read_if_descr_block: unknown option %u - ignoring %u bytes\",",
          "963:                               oh.option_code, oh.option_length);",
          "964:         }",
          "965:     }",
          "967:     g_free(option_content);",
          "969:     if (*wblock->file_encap == WTAP_ENCAP_UNKNOWN) {",
          "971:     } else {",
          "972:         if (*wblock->file_encap != wblock->data.if_descr.wtap_encap) {",
          "975:     }",
          "977:     return block_read;",
          "978: }",
          "981: static int",
          "982: pcapng_read_packet_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn, wtapng_block_t *wblock, int *err, gchar **err_info, gboolean enhanced)",
          "983: {",
          "984:     int bytes_read;",
          "985:     guint block_read;",
          "986:     guint to_read, opt_cont_buf_len;",
          "987:     guint64 file_offset64;",
          "988:     pcapng_enhanced_packet_block_t epb;",
          "989:     pcapng_packet_block_t pb;",
          "990:     wtapng_packet_t packet;",
          "991:     guint32 block_total_length;",
          "992:     guint32 padding;",
          "993:     interface_info_t iface_info;",
          "994:     guint64 ts;",
          "995:     pcapng_option_header_t oh;",
          "996:     int pseudo_header_len;",
          "998:     int fcslen;",
          "1001:        that might fail and, even if it succeeds, it might not leave",
          "1002:        any address space or memory+backing store for anything else.",
          "1004:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1005:        We check for this *after* checking the SHB for its byte",
          "1006:        order magic number, so that non-pcap-ng files are less",
          "1008:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1011:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1012:         return -1;",
          "1013:     }",
          "1016:     errno = WTAP_ERR_CANT_READ;",
          "1017:     if (enhanced) {",
          "1021:         if (bh->block_total_length < MIN_EPB_SIZE) {",
          "1027:                                         bh->block_total_length, MIN_EPB_SIZE);",
          "1028:             return -1;",
          "1029:         }",
          "1030:         bytes_read = file_read(&epb, sizeof epb, fh);",
          "1031:         if (bytes_read != sizeof epb) {",
          "1032:             pcapng_debug0(\"pcapng_read_packet_block: failed to read packet data\");",
          "1034:             return 0;",
          "1036:         block_read = bytes_read;",
          "1038:         if (pn->byte_swapped) {",
          "1039:             packet.interface_id        = GUINT32_SWAP_LE_BE(epb.interface_id);",
          "1041:             packet.ts_high             = GUINT32_SWAP_LE_BE(epb.timestamp_high);",
          "1042:             packet.ts_low              = GUINT32_SWAP_LE_BE(epb.timestamp_low);",
          "1043:             packet.cap_len             = GUINT32_SWAP_LE_BE(epb.captured_len);",
          "1044:             packet.packet_len          = GUINT32_SWAP_LE_BE(epb.packet_len);",
          "1045:         } else {",
          "1046:             packet.interface_id        = epb.interface_id;",
          "1048:             packet.ts_high             = epb.timestamp_high;",
          "1049:             packet.ts_low              = epb.timestamp_low;",
          "1050:             packet.cap_len             = epb.captured_len;",
          "1051:             packet.packet_len          = epb.packet_len;",
          "1052:         }",
          "1053:         pcapng_debug3(\"pcapng_read_packet_block: EPB on interface_id %d, cap_len %d, packet_len %d\",",
          "1054:                       packet.interface_id, packet.cap_len, packet.packet_len);",
          "1055:     } else {",
          "1059:         if (bh->block_total_length < MIN_PB_SIZE) {",
          "1065:                                         bh->block_total_length, MIN_PB_SIZE);",
          "1066:             return -1;",
          "1067:         }",
          "1068:         bytes_read = file_read(&pb, sizeof pb, fh);",
          "1069:         if (bytes_read != sizeof pb) {",
          "1070:             pcapng_debug0(\"pcapng_read_packet_block: failed to read packet data\");",
          "1072:             return 0;",
          "1074:         block_read = bytes_read;",
          "1076:         if (pn->byte_swapped) {",
          "1077:             packet.interface_id        = GUINT16_SWAP_LE_BE(pb.interface_id);",
          "1078:             packet.drops_count         = GUINT16_SWAP_LE_BE(pb.drops_count);",
          "1079:             packet.ts_high             = GUINT32_SWAP_LE_BE(pb.timestamp_high);",
          "1080:             packet.ts_low              = GUINT32_SWAP_LE_BE(pb.timestamp_low);",
          "1081:             packet.cap_len             = GUINT32_SWAP_LE_BE(pb.captured_len);",
          "1082:             packet.packet_len          = GUINT32_SWAP_LE_BE(pb.packet_len);",
          "1083:         } else {",
          "1084:             packet.interface_id        = pb.interface_id;",
          "1085:             packet.drops_count         = pb.drops_count;",
          "1086:             packet.ts_high             = pb.timestamp_high;",
          "1087:             packet.ts_low              = pb.timestamp_low;",
          "1088:             packet.cap_len             = pb.captured_len;",
          "1089:             packet.packet_len          = pb.packet_len;",
          "1090:         }",
          "1091:         pcapng_debug3(\"pcapng_read_packet_block: PB on interface_id %d, cap_len %d, packet_len %d\",",
          "1092:                       packet.interface_id, packet.cap_len, packet.packet_len);",
          "1093:     }",
          "1098:     if ((packet.cap_len % 4) != 0)",
          "1099:         padding = 4 - (packet.cap_len % 4);",
          "1100:     else",
          "1101:         padding = 0;",
          "1105:     if (bh->block_total_length % 4) {",
          "1106:         block_total_length = bh->block_total_length + 4 - (bh->block_total_length % 4);",
          "1107:     } else {",
          "1108:         block_total_length = bh->block_total_length;",
          "1109:     }",
          "1110:     pcapng_debug1(\"pcapng_read_packet_block: block_total_length %d\", block_total_length);",
          "1115:     if (enhanced) {",
          "1116:         if (block_total_length <",
          "1117:             MIN_EPB_SIZE + packet.cap_len + padding) {",
          "1123:                                         block_total_length, packet.cap_len);",
          "1124:             return -1;",
          "1125:         }",
          "1126:     } else {",
          "1127:         if (block_total_length <",
          "1128:             MIN_PB_SIZE + packet.cap_len + padding) {",
          "1134:                                         block_total_length, packet.cap_len);",
          "1135:             return -1;",
          "1137:     }",
          "1139:     if (packet.cap_len > WTAP_MAX_PACKET_SIZE) {",
          "1142:                                     packet.cap_len, WTAP_MAX_PACKET_SIZE);",
          "1143:         return 0;",
          "1144:     }",
          "1145:     pcapng_debug3(\"pcapng_read_packet_block: packet data: packet_len %u captured_len %u interface_id %u\",",
          "1146:                   packet.packet_len,",
          "1147:                   packet.cap_len,",
          "1148:                   packet.interface_id);",
          "1150:     if (packet.interface_id >= pn->interfaces->len) {",
          "1153:                                     packet.interface_id, pn->interfaces->len);",
          "1154:         return 0;",
          "1155:     }",
          "1156:     iface_info = g_array_index(pn->interfaces, interface_info_t,",
          "1157:                                packet.interface_id);",
          "1159:     wblock->packet_header->rec_type = REC_TYPE_PACKET;",
          "1160:     wblock->packet_header->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1162:     pcapng_debug3(\"pcapng_read_packet_block: encapsulation = %d (%s), pseudo header size = %d.\",",
          "1163:                   iface_info.wtap_encap,",
          "1164:                   wtap_encap_string(iface_info.wtap_encap),",
          "1165:                   pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1166:     wblock->packet_header->interface_id = packet.interface_id;",
          "1167:     wblock->packet_header->pkt_encap = iface_info.wtap_encap;",
          "1169:     memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1170:     pseudo_header_len = pcap_process_pseudo_header(fh,",
          "1171:                                                    WTAP_FILE_TYPE_SUBTYPE_PCAPNG,",
          "1172:                                                    iface_info.wtap_encap,",
          "1173:                                                    packet.cap_len,",
          "1174:                                                    TRUE,",
          "1175:                                                    wblock->packet_header,",
          "1176:                                                    err,",
          "1177:                                                    err_info);",
          "1178:     if (pseudo_header_len < 0) {",
          "1179:         return 0;",
          "1180:     }",
          "1181:     block_read += pseudo_header_len;",
          "1182:     if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "1183:         pcapng_debug1(\"pcapng_read_packet_block: Could only read %d bytes for pseudo header.\",",
          "1184:                       pseudo_header_len);",
          "1185:     }",
          "1186:     wblock->packet_header->caplen = packet.cap_len - pseudo_header_len;",
          "1187:     wblock->packet_header->len = packet.packet_len - pseudo_header_len;",
          "1190:     ts = (((guint64)packet.ts_high) << 32) | ((guint64)packet.ts_low);",
          "1191:     wblock->packet_header->ts.secs = (time_t)(ts / iface_info.time_units_per_second);",
          "1192:     wblock->packet_header->ts.nsecs = (int)(((ts % iface_info.time_units_per_second) * 1000000000) / iface_info.time_units_per_second);",
          "1195:     errno = WTAP_ERR_CANT_READ;",
          "1196:     if (!wtap_read_packet_bytes(fh, wblock->frame_buffer,",
          "1197:                                 packet.cap_len - pseudo_header_len, err, err_info))",
          "1198:         return 0;",
          "1199:     block_read += packet.cap_len - pseudo_header_len;",
          "1202:     if (padding != 0) {",
          "1203:         file_offset64 = file_seek(fh, padding, SEEK_CUR, err);",
          "1204:         if (file_offset64 <= 0) {",
          "1205:             if (*err != 0)",
          "1206:                 return -1;",
          "1207:             return 0;",
          "1209:         block_read += padding;",
          "1210:     }",
          "1213:     wblock->packet_header->opt_comment = NULL;",
          "1214:     wblock->packet_header->drop_count  = -1;",
          "1215:     wblock->packet_header->pack_flags  = 0;",
          "1218:     fcslen = pn->if_fcslen;",
          "1226:     errno = WTAP_ERR_CANT_READ;",
          "1227:     to_read = block_total_length -",
          "1228:         (int)sizeof(pcapng_block_header_t) -",
          "1230:         (int)sizeof(bh->block_total_length);",
          "1233:     opt_cont_buf_len = to_read;",
          "1234:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "1235:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "1237:         return -1;",
          "1238:     }",
          "1240:     while (to_read != 0) {",
          "1242:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "1243:         if (bytes_read <= 0) {",
          "1244:             pcapng_debug0(\"pcapng_read_packet_block: failed to read option\");",
          "1245:             return bytes_read;",
          "1246:         }",
          "1247:         block_read += bytes_read;",
          "1248:         to_read -= bytes_read;",
          "1251:         switch (oh.option_code) {",
          "1252:             case(OPT_EOFOPT):",
          "1253:                 if (to_read != 0) {",
          "1254:                     pcapng_debug1(\"pcapng_read_packet_block: %u bytes after opt_endofopt\", to_read);",
          "1257:                 to_read = 0;",
          "1258:                 break;",
          "1259:             case(OPT_COMMENT):",
          "1260:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1261:                     wblock->packet_header->presence_flags |= WTAP_HAS_COMMENTS;",
          "1262:                     wblock->packet_header->opt_comment = g_strndup(option_content, oh.option_length);",
          "1263:                     pcapng_debug2(\"pcapng_read_packet_block: length %u opt_comment '%s'\", oh.option_length, wblock->packet_header->opt_comment);",
          "1264:                 } else {",
          "1265:                     pcapng_debug1(\"pcapng_read_packet_block: opt_comment length %u seems strange\", oh.option_length);",
          "1267:                 break;",
          "1268:             case(OPT_EPB_FLAGS):",
          "1269:                 if (oh.option_length == 4) {",
          "1273:                     wblock->packet_header->presence_flags |= WTAP_HAS_PACK_FLAGS;",
          "1274:                     memcpy(&wblock->packet_header->pack_flags, option_content, sizeof(guint32));",
          "1275:                     if (pn->byte_swapped)",
          "1276:                         wblock->packet_header->pack_flags = GUINT32_SWAP_LE_BE(wblock->packet_header->pack_flags);",
          "1277:                     if (wblock->packet_header->pack_flags & 0x000001E0) {",
          "1279:                         fcslen = (wblock->packet_header->pack_flags & 0x000001E0) >> 5;",
          "1280:                     }",
          "1281:                     pcapng_debug1(\"pcapng_read_packet_block: pack_flags %u (ignored)\", wblock->packet_header->pack_flags);",
          "1282:                 } else {",
          "1283:                     pcapng_debug1(\"pcapng_read_packet_block: pack_flags length %u not 4 as expected\", oh.option_length);",
          "1284:                 }",
          "1285:                 break;",
          "1286:             case(OPT_EPB_HASH):",
          "1287:                 pcapng_debug2(\"pcapng_read_packet_block: epb_hash %u currently not handled - ignoring %u bytes\",",
          "1288:                               oh.option_code, oh.option_length);",
          "1289:                 break;",
          "1290:             case(OPT_EPB_DROPCOUNT):",
          "1291:                 if (oh.option_length == 8) {",
          "1295:                     wblock->packet_header->presence_flags |= WTAP_HAS_DROP_COUNT;",
          "1296:                     memcpy(&wblock->packet_header->drop_count, option_content, sizeof(guint64));",
          "1297:                     if (pn->byte_swapped)",
          "1298:                         wblock->packet_header->drop_count = GUINT64_SWAP_LE_BE(wblock->packet_header->drop_count);",
          "1300:                     pcapng_debug1(\"pcapng_read_packet_block: drop_count %\" G_GINT64_MODIFIER \"u\", wblock->packet_header->drop_count);",
          "1301:                 } else {",
          "1302:                     pcapng_debug1(\"pcapng_read_packet_block: drop_count length %u not 8 as expected\", oh.option_length);",
          "1303:                 }",
          "1304:                 break;",
          "1305:             default:",
          "1306:                 pcapng_debug2(\"pcapng_read_packet_block: unknown option %u - ignoring %u bytes\",",
          "1307:                               oh.option_code, oh.option_length);",
          "1309:     }",
          "1311:     g_free(option_content);",
          "1313:     pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, iface_info.wtap_encap,",
          "1314:                            wblock->packet_header, ws_buffer_start_ptr(wblock->frame_buffer),",
          "1315:                            pn->byte_swapped, fcslen);",
          "1316:     return block_read;",
          "1323:     int bytes_read;",
          "1324:     guint block_read;",
          "1325:     guint64 file_offset64;",
          "1326:     interface_info_t iface_info;",
          "1327:     pcapng_simple_packet_block_t spb;",
          "1328:     wtapng_simple_packet_t simple_packet;",
          "1329:     guint32 block_total_length;",
          "1330:     guint32 padding;",
          "1331:     int pseudo_header_len;",
          "1336:     if (bh->block_total_length < MIN_SPB_SIZE) {",
          "1342:                                     bh->block_total_length, MIN_SPB_SIZE);",
          "1343:         return -1;",
          "1344:     }",
          "1347:        that might fail and, even if it succeeds, it might not leave",
          "1348:        any address space or memory+backing store for anything else.",
          "1350:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1351:        We check for this *after* checking the SHB for its byte",
          "1352:        order magic number, so that non-pcap-ng files are less",
          "1354:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1357:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1358:         return -1;",
          "1359:     }",
          "1362:     errno = WTAP_ERR_CANT_READ;",
          "1363:     bytes_read = file_read(&spb, sizeof spb, fh);",
          "1364:     if (bytes_read != sizeof spb) {",
          "1365:         pcapng_debug0(\"pcapng_read_simple_packet_block: failed to read packet data\");",
          "1367:         return 0;",
          "1368:     }",
          "1369:     block_read = bytes_read;",
          "1371:     if (0 >= pn->interfaces->len) {",
          "1374:         return 0;",
          "1375:     }",
          "1376:     iface_info = g_array_index(pn->interfaces, interface_info_t, 0);",
          "1378:     if (pn->byte_swapped) {",
          "1379:         simple_packet.packet_len   = GUINT32_SWAP_LE_BE(spb.packet_len);",
          "1380:     } else {",
          "1381:         simple_packet.packet_len   = spb.packet_len;",
          "1382:     }",
          "1389:     simple_packet.cap_len = simple_packet.packet_len;",
          "1390:     if (simple_packet.cap_len > iface_info.snap_len)",
          "1391:         simple_packet.cap_len = iface_info.snap_len;",
          "1396:     if ((simple_packet.cap_len % 4) != 0)",
          "1397:         padding = 4 - (simple_packet.cap_len % 4);",
          "1398:     else",
          "1399:         padding = 0;",
          "1403:     if (bh->block_total_length % 4) {",
          "1404:         block_total_length = bh->block_total_length + 4 - (bh->block_total_length % 4);",
          "1405:     } else {",
          "1406:         block_total_length = bh->block_total_length;",
          "1407:     }",
          "1408:     pcapng_debug1(\"pcapng_read_simple_packet_block: block_total_length %d\", block_total_length);",
          "1413:     if (block_total_length < MIN_SPB_SIZE + simple_packet.cap_len + padding) {",
          "1422:                                     block_total_length, simple_packet.packet_len);",
          "1423:         return -1;",
          "1424:     }",
          "1426:     if (simple_packet.cap_len > WTAP_MAX_PACKET_SIZE) {",
          "1429:                                     simple_packet.cap_len, WTAP_MAX_PACKET_SIZE);",
          "1430:         return 0;",
          "1431:     }",
          "1432:     pcapng_debug1(\"pcapng_read_simple_packet_block: packet data: packet_len %u\",",
          "1433:                   simple_packet.packet_len);",
          "1435:     pcapng_debug1(\"pcapng_read_simple_packet_block: Need to read pseudo header of size %d\",",
          "1436:                   pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header));",
          "1439:     wblock->packet_header->rec_type = REC_TYPE_PACKET;",
          "1440:     wblock->packet_header->presence_flags = WTAP_HAS_CAP_LEN|WTAP_HAS_INTERFACE_ID;",
          "1441:     wblock->packet_header->interface_id = 0;",
          "1442:     wblock->packet_header->pkt_encap = iface_info.wtap_encap;",
          "1443:     wblock->packet_header->ts.secs = 0;",
          "1444:     wblock->packet_header->ts.nsecs = 0;",
          "1445:     wblock->packet_header->interface_id = 0;",
          "1446:     wblock->packet_header->opt_comment = NULL;",
          "1447:     wblock->packet_header->drop_count = 0;",
          "1448:     wblock->packet_header->pack_flags = 0;",
          "1450:     memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1451:     pseudo_header_len = pcap_process_pseudo_header(fh,",
          "1452:                                                    WTAP_FILE_TYPE_SUBTYPE_PCAPNG,",
          "1453:                                                    iface_info.wtap_encap,",
          "1454:                                                    simple_packet.cap_len,",
          "1455:                                                    TRUE,",
          "1456:                                                    wblock->packet_header,",
          "1457:                                                    err,",
          "1458:                                                    err_info);",
          "1459:     if (pseudo_header_len < 0) {",
          "1460:         return 0;",
          "1461:     }",
          "1462:     wblock->packet_header->caplen = simple_packet.cap_len - pseudo_header_len;",
          "1463:     wblock->packet_header->len = simple_packet.packet_len - pseudo_header_len;",
          "1464:     block_read += pseudo_header_len;",
          "1465:     if (pseudo_header_len != pcap_get_phdr_size(iface_info.wtap_encap, &wblock->packet_header->pseudo_header)) {",
          "1466:         pcapng_debug1(\"pcapng_read_simple_packet_block: Could only read %d bytes for pseudo header.\",",
          "1467:                       pseudo_header_len);",
          "1468:     }",
          "1470:     memset((void *)&wblock->packet_header->pseudo_header, 0, sizeof(union wtap_pseudo_header));",
          "1473:     errno = WTAP_ERR_CANT_READ;",
          "1474:     if (!wtap_read_packet_bytes(fh, wblock->frame_buffer,",
          "1475:                                 simple_packet.cap_len, err, err_info))",
          "1476:         return 0;",
          "1477:     block_read += simple_packet.cap_len;",
          "1480:     if ((simple_packet.cap_len % 4) != 0) {",
          "1481:         file_offset64 = file_seek(fh, 4 - (simple_packet.cap_len % 4), SEEK_CUR, err);",
          "1482:         if (file_offset64 <= 0) {",
          "1483:             if (*err != 0)",
          "1484:                 return -1;",
          "1485:             return 0;",
          "1487:         block_read += 4 - (simple_packet.cap_len % 4);",
          "1488:     }",
          "1490:     pcap_read_post_process(WTAP_FILE_TYPE_SUBTYPE_PCAPNG, iface_info.wtap_encap,",
          "1491:                            wblock->packet_header, ws_buffer_start_ptr(wblock->frame_buffer),",
          "1492:                            pn->byte_swapped, pn->if_fcslen);",
          "1493:     return block_read;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1512: static int",
          "1513: name_resolution_block_find_name_end(const char *p, guint record_len, int *err,",
          "1515: {",
          "1538: }",
          "1540: static int",
          "1541: pcapng_read_name_resolution_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn, wtapng_block_t *wblock _U_,int *err, gchar **err_info)",
          "1542: {",
          "1603:                         return -1;",
          "1604:                 }",
          "1611:                 }",
          "1612:                 block_read += bytes_read;",
          "1617:                 }",
          "1625:                         return -1;",
          "1626:                 }",
          "1775:                 }",
          "1776:         }",
          "1780: }",
          "1782: static int",
          "1783: pcapng_read_interface_statistics_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn, wtapng_block_t *wblock,int *err, gchar **err_info)",
          "1784: {",
          "1838:         }",
          "1868:                 }",
          "1999:                 }",
          "2000:         }",
          "2005: }",
          "2008: static int",
          "2009: pcapng_read_unknown_block(FILE_T fh, pcapng_block_header_t *bh, pcapng_t *pn _U_, wtapng_block_t *wblock _U_, int *err, gchar **err_info)",
          "2010: {",
          "2013: #ifdef HAVE_PLUGINS",
          "2015: #endif",
          "2034: #ifdef HAVE_PLUGINS",
          "2047: #endif",
          "2055:         }",
          "2058: }",
          "2061: static int",
          "2062: pcapng_read_block(FILE_T fh, gboolean first_block, pcapng_t *pn, wtapng_block_t *wblock, int *err, gchar **err_info)",
          "2063: {",
          "2161: }",
          "2164: static void",
          "2165: pcapng_process_idb(wtap *wth, pcapng_t *pcapng, wtapng_block_t *wblock)",
          "2166: {",
          "2202: }",
          "2205: int",
          "2206: pcapng_open(wtap *wth, int *err, gchar **err_info)",
          "2207: {",
          "2321:         }",
          "2323: }",
          "",
          "[Removed Lines]",
          "1514:     gchar **err_info)",
          "1516:         int namelen;",
          "1518:         namelen = 0;",
          "1519:         for (;;) {",
          "1520:                 if (record_len == 0) {",
          "1527:                         return -1;",
          "1528:                 }",
          "1529:                 if (*p == '\\0')",
          "1531:                 p++;",
          "1532:                 record_len--;",
          "1534:         }",
          "1537:         return namelen + 1;",
          "1543:         int bytes_read = 0;",
          "1544:         int block_read = 0;",
          "1545:         int to_read;",
          "1546:         guint64 file_offset64;",
          "1547:         pcapng_name_resolution_block_t nrb;",
          "1548:         Buffer nrb_rec;",
          "1549:         guint32 v4_addr;",
          "1550:         guint record_len;",
          "1551:         char *namep;",
          "1552:         int namelen;",
          "1557:         if (bh->block_total_length < MIN_NRB_SIZE) {",
          "1563:                               bh->block_total_length, MIN_NRB_SIZE);",
          "1564:                 return -1;",
          "1565:         }",
          "1568:            that might fail and, even if it succeeds, it might not leave",
          "1569:            any address space or memory+backing store for anything else.",
          "1571:            We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1572:            We check for this *after* checking the SHB for its byte",
          "1573:            order magic number, so that non-pcap-ng files are less",
          "1575:         if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1578:                               bh->block_total_length, MAX_BLOCK_SIZE);",
          "1579:                 return -1;",
          "1580:         }",
          "1582:         errno = WTAP_ERR_CANT_READ;",
          "1585:         pcapng_debug1(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
          "1591:         ws_buffer_init(&nrb_rec, INITIAL_NRB_REC_SIZE);",
          "1592:         while (block_read < to_read) {",
          "1597:                 if ((size_t)(to_read - block_read) < sizeof nrb) {",
          "1598:                         ws_buffer_free(&nrb_rec);",
          "1601:                                       to_read - block_read,",
          "1602:                                       (guint)sizeof nrb);",
          "1605:                 bytes_read = file_read(&nrb, sizeof nrb, fh);",
          "1606:                 if (bytes_read != sizeof nrb) {",
          "1607:                         ws_buffer_free(&nrb_rec);",
          "1608:                         pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read record header\");",
          "1610:                         return 0;",
          "1614:                 if (pn->byte_swapped) {",
          "1615:                         nrb.record_type = GUINT16_SWAP_LE_BE(nrb.record_type);",
          "1616:                         nrb.record_len  = GUINT16_SWAP_LE_BE(nrb.record_len);",
          "1619:                 if (to_read - block_read < nrb.record_len + PADDING4(nrb.record_len)) {",
          "1620:                         ws_buffer_free(&nrb_rec);",
          "1623:                                       to_read - block_read,",
          "1624:                                       nrb.record_len + PADDING4(nrb.record_len));",
          "1627:                 switch (nrb.record_type) {",
          "1628:                         case NRES_ENDOFRECORD:",
          "1630:                                 to_read = 0;",
          "1631:                                 break;",
          "1632:                         case NRES_IP4RECORD:",
          "1647:                                 if (nrb.record_len < 4) {",
          "1648:                                         ws_buffer_free(&nrb_rec);",
          "1651:                                                       nrb.record_len);",
          "1652:                                         return -1;",
          "1653:                                 }",
          "1654:                                 ws_buffer_assure_space(&nrb_rec, nrb.record_len);",
          "1655:                                 bytes_read = file_read(ws_buffer_start_ptr(&nrb_rec),",
          "1656:                                     nrb.record_len, fh);",
          "1657:                                 if (bytes_read != nrb.record_len) {",
          "1658:                                         ws_buffer_free(&nrb_rec);",
          "1659:                                         pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read IPv4 record data\");",
          "1661:                                         return 0;",
          "1662:                                 }",
          "1663:                                 block_read += bytes_read;",
          "1665:                                 if (pn->add_new_ipv4) {",
          "1670:                                         memcpy(&v4_addr,",
          "1671:                                             ws_buffer_start_ptr(&nrb_rec), 4);",
          "1672:                                         if (pn->byte_swapped)",
          "1673:                                                 v4_addr = GUINT32_SWAP_LE_BE(v4_addr);",
          "1674:                                         for (namep = (char *)ws_buffer_start_ptr(&nrb_rec) + 4, record_len = nrb.record_len - 4;",
          "1675:                                             record_len != 0;",
          "1676:                                             namep += namelen, record_len -= namelen) {",
          "1681:                                                 namelen = name_resolution_block_find_name_end(namep, record_len, err, err_info);",
          "1682:                                                 if (namelen == -1) {",
          "1683:                                                         ws_buffer_free(&nrb_rec);",
          "1685:                                                 }",
          "1686:                                                 pn->add_new_ipv4(v4_addr, namep);",
          "1687:                                         }",
          "1688:                                 }",
          "1690:                                 file_offset64 = file_seek(fh, PADDING4(nrb.record_len), SEEK_CUR, err);",
          "1691:                                 if (file_offset64 <= 0) {",
          "1692:                                         ws_buffer_free(&nrb_rec);",
          "1693:                                         if (*err != 0)",
          "1694:                                                 return -1;",
          "1695:                                         return 0;",
          "1696:                                 }",
          "1697:                                 block_read += PADDING4(nrb.record_len);",
          "1698:                                 break;",
          "1699:                         case NRES_IP6RECORD:",
          "1714:                                 if (nrb.record_len < 16) {",
          "1715:                                         ws_buffer_free(&nrb_rec);",
          "1718:                                                       nrb.record_len);",
          "1719:                                         return -1;",
          "1720:                                 }",
          "1721:                                 if (to_read < nrb.record_len) {",
          "1722:                                         ws_buffer_free(&nrb_rec);",
          "1723:                                         pcapng_debug0(\"pcapng_read_name_resolution_block: insufficient data for IPv6 record\");",
          "1724:                                         return 0;",
          "1725:                                 }",
          "1726:                                 ws_buffer_assure_space(&nrb_rec, nrb.record_len);",
          "1727:                                 bytes_read = file_read(ws_buffer_start_ptr(&nrb_rec),",
          "1728:                                     nrb.record_len, fh);",
          "1729:                                 if (bytes_read != nrb.record_len) {",
          "1730:                                         ws_buffer_free(&nrb_rec);",
          "1731:                                         pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read IPv6 record data\");",
          "1733:                                         return 0;",
          "1734:                                 }",
          "1735:                                 block_read += bytes_read;",
          "1737:                                 if (pn->add_new_ipv6) {",
          "1738:                                         for (namep = (char *)ws_buffer_start_ptr(&nrb_rec) + 16, record_len = nrb.record_len - 16;",
          "1739:                                             record_len != 0;",
          "1740:                                             namep += namelen, record_len -= namelen) {",
          "1745:                                                 namelen = name_resolution_block_find_name_end(namep, record_len, err, err_info);",
          "1746:                                                 if (namelen == -1) {",
          "1747:                                                         ws_buffer_free(&nrb_rec);",
          "1749:                                                 }",
          "1750:                                                 pn->add_new_ipv6(ws_buffer_start_ptr(&nrb_rec),",
          "1751:                                                     namep);",
          "1752:                                         }",
          "1753:                                 }",
          "1755:                                 file_offset64 = file_seek(fh, PADDING4(nrb.record_len), SEEK_CUR, err);",
          "1756:                                 if (file_offset64 <= 0) {",
          "1757:                                         ws_buffer_free(&nrb_rec);",
          "1758:                                         if (*err != 0)",
          "1759:                                                 return -1;",
          "1760:                                         return 0;",
          "1761:                                 }",
          "1762:                                 block_read += PADDING4(nrb.record_len);",
          "1763:                                 break;",
          "1764:                         default:",
          "1765:                                 pcapng_debug1(\"pcapng_read_name_resolution_block: unknown record type 0x%x\", nrb.record_type);",
          "1766:                                 file_offset64 = file_seek(fh, nrb.record_len + PADDING4(nrb.record_len), SEEK_CUR, err);",
          "1767:                                 if (file_offset64 <= 0) {",
          "1768:                                         ws_buffer_free(&nrb_rec);",
          "1769:                                         if (*err != 0)",
          "1770:                                                 return -1;",
          "1771:                                         return 0;",
          "1772:                                 }",
          "1773:                                 block_read += nrb.record_len + PADDING4(nrb.record_len);",
          "1774:                                 break;",
          "1778:         ws_buffer_free(&nrb_rec);",
          "1779:         return block_read;",
          "1785:         int bytes_read;",
          "1786:         guint block_read;",
          "1787:         guint to_read, opt_cont_buf_len;",
          "1788:         pcapng_interface_statistics_block_t isb;",
          "1789:         pcapng_option_header_t oh;",
          "1795:         if (bh->block_total_length < MIN_ISB_SIZE) {",
          "1801:                               bh->block_total_length, MIN_ISB_SIZE);",
          "1802:                 return -1;",
          "1803:         }",
          "1806:            that might fail and, even if it succeeds, it might not leave",
          "1807:            any address space or memory+backing store for anything else.",
          "1809:            We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1810:            We check for this *after* checking the SHB for its byte",
          "1811:            order magic number, so that non-pcap-ng files are less",
          "1813:         if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1816:                               bh->block_total_length, MAX_BLOCK_SIZE);",
          "1817:                 return -1;",
          "1818:         }",
          "1821:         errno = WTAP_ERR_CANT_READ;",
          "1822:         bytes_read = file_read(&isb, sizeof isb, fh);",
          "1823:         if (bytes_read != sizeof isb) {",
          "1824:                 pcapng_debug0(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
          "1826:                 return 0;",
          "1827:         }",
          "1828:         block_read = bytes_read;",
          "1830:         if (pn->byte_swapped) {",
          "1831:                 wblock->data.if_stats.interface_id = GUINT32_SWAP_LE_BE(isb.interface_id);",
          "1832:                 wblock->data.if_stats.ts_high      = GUINT32_SWAP_LE_BE(isb.timestamp_high);",
          "1833:                 wblock->data.if_stats.ts_low       = GUINT32_SWAP_LE_BE(isb.timestamp_low);",
          "1834:         } else {",
          "1835:                 wblock->data.if_stats.interface_id = isb.interface_id;",
          "1836:                 wblock->data.if_stats.ts_high      = isb.timestamp_high;",
          "1837:                 wblock->data.if_stats.ts_low       = isb.timestamp_low;",
          "1839:         pcapng_debug1(\"pcapng_read_interface_statistics_block: interface_id %u\", wblock->data.if_stats.interface_id);",
          "1842:         wblock->data.if_stats.opt_comment          = NULL;",
          "1843:         wblock->data.if_stats.isb_ifrecv           = -1;",
          "1844:         wblock->data.if_stats.isb_ifdrop           = -1;",
          "1845:         wblock->data.if_stats.isb_filteraccept     = -1;",
          "1846:         wblock->data.if_stats.isb_osdrop           = -1;",
          "1847:         wblock->data.if_stats.isb_usrdeliv         = -1;",
          "1850:         errno = WTAP_ERR_CANT_READ;",
          "1851:         to_read = bh->block_total_length -",
          "1855:         opt_cont_buf_len = to_read;",
          "1856:         option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "1857:         if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "1859:   return -1;",
          "1860:  }",
          "1862:         while (to_read != 0) {",
          "1864:                 bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "1865:                 if (bytes_read <= 0) {",
          "1866:                         pcapng_debug0(\"pcapng_read_interface_statistics_block: failed to read option\");",
          "1867:                         return bytes_read;",
          "1869:                 block_read += bytes_read;",
          "1870:                 to_read -= bytes_read;",
          "1873:                 switch (oh.option_code) {",
          "1875:                         if (to_read != 0) {",
          "1876:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: %u bytes after opt_endofopt\", to_read);",
          "1877:                         }",
          "1879:                         to_read = 0;",
          "1880:                         break;",
          "1882:                         if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1883:                                 wblock->data.if_stats.opt_comment = g_strndup(option_content, oh.option_length);",
          "1884:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment %s\", wblock->data.if_stats.opt_comment);",
          "1885:                         } else {",
          "1886:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment length %u seems strange\", oh.option_length);",
          "1887:                         }",
          "1888:                         break;",
          "1890:                         if (oh.option_length == 8) {",
          "1891:                                 guint32 high, low;",
          "1896:                                 memcpy(&high, option_content, sizeof(guint32));",
          "1897:                                 memcpy(&low, option_content + sizeof(guint32), sizeof(guint32));",
          "1898:                                 if (pn->byte_swapped) {",
          "1899:                                         high = GUINT32_SWAP_LE_BE(high);",
          "1900:                                         low = GUINT32_SWAP_LE_BE(low);",
          "1901:                                 }",
          "1902:                                 wblock->data.if_stats.isb_starttime = (guint64)high;",
          "1903:                                 wblock->data.if_stats.isb_starttime <<= 32;",
          "1904:                                 wblock->data.if_stats.isb_starttime += (guint64)low;",
          "1905:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_starttime);",
          "1906:                         } else {",
          "1907:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "1908:                         }",
          "1909:                         break;",
          "1911:                         if (oh.option_length == 8) {",
          "1912:                                 guint32 high, low;",
          "1917:                                 memcpy(&high, option_content, sizeof(guint32));",
          "1918:                                 memcpy(&low, option_content + sizeof(guint32), sizeof(guint32));",
          "1919:                                 if (pn->byte_swapped) {",
          "1920:                                         high = GUINT32_SWAP_LE_BE(high);",
          "1921:                                         low = GUINT32_SWAP_LE_BE(low);",
          "1922:                                 }",
          "1923:                                 wblock->data.if_stats.isb_endtime = (guint64)high;",
          "1924:                                 wblock->data.if_stats.isb_endtime <<= 32;",
          "1925:                                 wblock->data.if_stats.isb_endtime += (guint64)low;",
          "1926:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_endtime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_endtime);",
          "1927:                         } else {",
          "1928:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "1929:                         }",
          "1930:                         break;",
          "1932:                         if (oh.option_length == 8) {",
          "1936:                                 memcpy(&wblock->data.if_stats.isb_ifrecv, option_content, sizeof(guint64));",
          "1937:                                 if (pn->byte_swapped)",
          "1938:                                         wblock->data.if_stats.isb_ifrecv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifrecv);",
          "1939:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifrecv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifrecv);",
          "1940:                         } else {",
          "1941:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifrecv length %u not 8 as expected\", oh.option_length);",
          "1942:                         }",
          "1943:                         break;",
          "1945:                         if (oh.option_length == 8) {",
          "1949:                                 memcpy(&wblock->data.if_stats.isb_ifdrop, option_content, sizeof(guint64));",
          "1950:                                 if (pn->byte_swapped)",
          "1951:                                         wblock->data.if_stats.isb_ifdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifdrop);",
          "1952:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifdrop);",
          "1953:                         } else {",
          "1954:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifdrop length %u not 8 as expected\", oh.option_length);",
          "1955:                         }",
          "1956:                         break;",
          "1958:                         if (oh.option_length == 8) {",
          "1962:                                 memcpy(&wblock->data.if_stats.isb_filteraccept, option_content, sizeof(guint64));",
          "1963:                                 if (pn->byte_swapped)",
          "1964:                                         wblock->data.if_stats.isb_ifdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_filteraccept);",
          "1965:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_filteraccept %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_filteraccept);",
          "1966:                         } else {",
          "1967:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_filteraccept length %u not 8 as expected\", oh.option_length);",
          "1968:                         }",
          "1969:                         break;",
          "1971:                         if (oh.option_length == 8) {",
          "1975:                                 memcpy(&wblock->data.if_stats.isb_osdrop, option_content, sizeof(guint64));",
          "1976:                                 if (pn->byte_swapped)",
          "1977:                                         wblock->data.if_stats.isb_osdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_osdrop);",
          "1978:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_osdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_osdrop);",
          "1979:                         } else {",
          "1980:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_osdrop length %u not 8 as expected\", oh.option_length);",
          "1981:                         }",
          "1982:                         break;",
          "1984:                         if (oh.option_length == 8) {",
          "1988:                                 memcpy(&wblock->data.if_stats.isb_usrdeliv, option_content, sizeof(guint64));",
          "1989:                                 if (pn->byte_swapped)",
          "1990:                                         wblock->data.if_stats.isb_usrdeliv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_osdrop);",
          "1991:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_usrdeliv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_usrdeliv);",
          "1992:                         } else {",
          "1993:                                 pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_usrdeliv length %u not 8 as expected\", oh.option_length);",
          "1994:                         }",
          "1995:                         break;",
          "1996:                     default:",
          "1997:                         pcapng_debug2(\"pcapng_read_interface_statistics_block: unknown option %u - ignoring %u bytes\",",
          "1998:                                       oh.option_code, oh.option_length);",
          "2002:         g_free(option_content);",
          "2004:         return block_read;",
          "2011:         int block_read;",
          "2012:         guint32 block_total_length;",
          "2014:         block_handler *handler;",
          "2017:         if (bh->block_total_length < MIN_BLOCK_SIZE) {",
          "2020:                               bh->block_total_length, MIN_BLOCK_SIZE);",
          "2021:                 return -1;",
          "2022:         }",
          "2026:         if (bh->block_total_length % 4) {",
          "2027:                 block_total_length = bh->block_total_length + 4 - (bh->block_total_length % 4);",
          "2028:         } else {",
          "2029:                 block_total_length = bh->block_total_length;",
          "2030:         }",
          "2032:         block_read = block_total_length - MIN_BLOCK_SIZE;",
          "2038:         handler = (block_handler *)g_hash_table_lookup(block_handlers,",
          "2039:                                                        GUINT_TO_POINTER(bh->block_type));",
          "2040:         if (handler != NULL) {",
          "2042:                 if (!handler->read(fh, block_read, pn->byte_swapped,",
          "2043:                                    wblock->packet_header, wblock->frame_buffer,",
          "2044:                                    err, err_info))",
          "2045:                         return -1;",
          "2046:         } else",
          "2048:         {",
          "2050:                 if (!file_skip(fh, block_read, err)) {",
          "2051:                         if (*err != 0)",
          "2052:                                 return -1;",
          "2053:                         return 0;",
          "2054:                 }",
          "2057:         return block_read;",
          "2064:         int block_read;",
          "2065:         int bytes_read;",
          "2066:         pcapng_block_header_t bh;",
          "2067:         guint32 block_total_length;",
          "2071:         errno = WTAP_ERR_CANT_READ;",
          "2072:         bytes_read = file_read(&bh, sizeof bh, fh);",
          "2073:         if (bytes_read != sizeof bh) {",
          "2075:                 pcapng_debug3(\"pcapng_read_block: file_read() returned %d instead of %u, err = %d.\", bytes_read, (unsigned int)sizeof bh, *err);",
          "2076:                 if (*err != 0)",
          "2077:                         return -1;",
          "2078:                 return 0;",
          "2079:         }",
          "2081:         block_read = bytes_read;",
          "2082:         if (pn->byte_swapped) {",
          "2083:                 bh.block_type         = GUINT32_SWAP_LE_BE(bh.block_type);",
          "2084:                 bh.block_total_length = GUINT32_SWAP_LE_BE(bh.block_total_length);",
          "2085:         }",
          "2087:         wblock->type = bh.block_type;",
          "2089:         pcapng_debug1(\"pcapng_read_block: block_type 0x%x\", bh.block_type);",
          "2091:         if (first_block) {",
          "2101:                 if (bh.block_type != BLOCK_TYPE_SHB)",
          "2103:         }",
          "2105:         switch (bh.block_type) {",
          "2106:                 case(BLOCK_TYPE_SHB):",
          "2107:                         bytes_read = pcapng_read_section_header_block(fh, first_block, &bh, pn, wblock, err, err_info);",
          "2108:                         break;",
          "2109:                 case(BLOCK_TYPE_IDB):",
          "2110:                         bytes_read = pcapng_read_if_descr_block(fh, &bh, pn, wblock, err, err_info);",
          "2111:                         break;",
          "2112:                 case(BLOCK_TYPE_PB):",
          "2113:                         bytes_read = pcapng_read_packet_block(fh, &bh, pn, wblock, err, err_info, FALSE);",
          "2114:                         break;",
          "2115:                 case(BLOCK_TYPE_SPB):",
          "2116:                         bytes_read = pcapng_read_simple_packet_block(fh, &bh, pn, wblock, err, err_info);",
          "2117:                         break;",
          "2118:                 case(BLOCK_TYPE_EPB):",
          "2119:                         bytes_read = pcapng_read_packet_block(fh, &bh, pn, wblock, err, err_info, TRUE);",
          "2120:                         break;",
          "2121:                 case(BLOCK_TYPE_NRB):",
          "2122:                         bytes_read = pcapng_read_name_resolution_block(fh, &bh, pn, wblock, err, err_info);",
          "2123:                         break;",
          "2124:                 case(BLOCK_TYPE_ISB):",
          "2125:                         bytes_read = pcapng_read_interface_statistics_block(fh, &bh, pn, wblock, err, err_info);",
          "2126:                         break;",
          "2127:                 default:",
          "2128:                         pcapng_debug2(\"pcapng_read_block: Unknown block_type: 0x%x (block ignored), block total length %d\", bh.block_type, bh.block_total_length);",
          "2129:                         bytes_read = pcapng_read_unknown_block(fh, &bh, pn, wblock, err, err_info);",
          "2130:                         break;",
          "2131:         }",
          "2133:         if (bytes_read <= 0) {",
          "2134:                 return bytes_read;",
          "2135:         }",
          "2136:         block_read += bytes_read;",
          "2139:         errno = WTAP_ERR_CANT_READ;",
          "2140:         bytes_read = file_read(&block_total_length, sizeof block_total_length, fh);",
          "2141:         if (bytes_read != sizeof block_total_length) {",
          "2142:                 pcapng_debug0(\"pcapng_read_block: couldn't read second block length\");",
          "2144:                 if (*err == 0)",
          "2146:                 return -1;",
          "2147:         }",
          "2148:         block_read += bytes_read;",
          "2150:         if (pn->byte_swapped)",
          "2151:                 block_total_length = GUINT32_SWAP_LE_BE(block_total_length);",
          "2153:         if (!(block_total_length == bh.block_total_length)) {",
          "2156:                               bh.block_total_length, block_total_length);",
          "2157:                 return -1;",
          "2158:         }",
          "2160:         return block_read;",
          "2167:         wtapng_if_descr_t int_data;",
          "2168:         interface_info_t iface_info;",
          "2170:         int_data.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2171:         int_data.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2172:         int_data.link_type = wblock->data.if_descr.link_type;",
          "2173:         int_data.snap_len = wblock->data.if_descr.snap_len;",
          "2175:         int_data.opt_comment = wblock->data.if_descr.opt_comment;",
          "2176:         int_data.if_name = wblock->data.if_descr.if_name;",
          "2177:         int_data.if_description = wblock->data.if_descr.if_description;",
          "2182:         int_data.if_speed = wblock->data.if_descr.if_speed;",
          "2183:         int_data.if_tsresol = wblock->data.if_descr.if_tsresol;",
          "2185:         int_data.if_filter_str = wblock->data.if_descr.if_filter_str;",
          "2186:         int_data.bpf_filter_len = wblock->data.if_descr.bpf_filter_len;",
          "2187:         int_data.if_filter_bpf_bytes = wblock->data.if_descr.if_filter_bpf_bytes;",
          "2188:         int_data.if_os = wblock->data.if_descr.if_os;",
          "2189:         int_data.if_fcslen = wblock->data.if_descr.if_fcslen;",
          "2192:         int_data.num_stat_entries = 0;",
          "2193:         int_data.interface_statistics = NULL;",
          "2195:         g_array_append_val(wth->interface_data, int_data);",
          "2197:         iface_info.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2198:         iface_info.snap_len = wblock->data.if_descr.snap_len;",
          "2199:         iface_info.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2201:         g_array_append_val(pcapng->interfaces, iface_info);",
          "2208:         int bytes_read;",
          "2209:         pcapng_t pn;",
          "2210:         wtapng_block_t wblock;",
          "2211:         pcapng_t *pcapng;",
          "2212:         pcapng_block_header_t bh;",
          "2213:         gint64 saved_offset;",
          "2215:         pn.shb_read = FALSE;",
          "2217:         pn.byte_swapped = FALSE;",
          "2218:         pn.if_fcslen = -1;",
          "2219:         pn.version_major = -1;",
          "2220:         pn.version_minor = -1;",
          "2221:         pn.interfaces = g_array_new(FALSE, FALSE, sizeof(interface_info_t));",
          "2225:         wblock.frame_buffer = NULL;",
          "2226:         wblock.packet_header = NULL;",
          "2227:         wblock.file_encap = &wth->file_encap;",
          "2229:         pcapng_debug0(\"pcapng_open: opening file\");",
          "2231:         bytes_read = pcapng_read_block(wth->fh, TRUE, &pn, &wblock, err, err_info);",
          "2232:         if (bytes_read <= 0) {",
          "2233:                 pcapng_debug0(\"pcapng_open: couldn't read first SHB\");",
          "2235:                 if (*err != 0 && *err != WTAP_ERR_SHORT_READ)",
          "2236:                         return -1;",
          "2237:                 return 0;",
          "2238:         }",
          "2241:         if (wblock.type != BLOCK_TYPE_SHB) {",
          "2247:                 pcapng_debug1(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "2248:                 return 0;",
          "2249:         }",
          "2250:         pn.shb_read = TRUE;",
          "2258:         wth->shb_hdr.opt_comment = wblock.data.section.opt_comment;",
          "2259:         wth->shb_hdr.shb_hardware = wblock.data.section.shb_hardware;",
          "2260:         wth->shb_hdr.shb_os = wblock.data.section.shb_os;",
          "2261:         wth->shb_hdr.shb_user_appl = wblock.data.section.shb_user_appl;",
          "2263:         wth->file_encap = WTAP_ENCAP_UNKNOWN;",
          "2264:         wth->snapshot_length = 0;",
          "2265:         wth->tsprecision = WTAP_FILE_TSPREC_NSEC;",
          "2266:         pcapng = (pcapng_t *)g_malloc(sizeof(pcapng_t));",
          "2267:         wth->priv = (void *)pcapng;",
          "2270:         wth->subtype_read = pcapng_read;",
          "2271:         wth->subtype_seek_read = pcapng_seek_read;",
          "2272:         wth->subtype_close = pcapng_close;",
          "2273:         wth->file_type_subtype = WTAP_FILE_TYPE_SUBTYPE_PCAPNG;",
          "2276:         while (1) {",
          "2279:                 saved_offset = file_tell(wth->fh);",
          "2280:                 errno = WTAP_ERR_CANT_READ;",
          "2281:                 bytes_read = file_read(&bh, sizeof bh, wth->fh);",
          "2282:                 if (bytes_read == 0) {",
          "2283:                         pcapng_debug0(\"No more IDBs available...\");",
          "2284:                         break;",
          "2285:                 }",
          "2286:                 if (bytes_read != sizeof bh) {",
          "2288:                         pcapng_debug3(\"pcapng_open:  Check for more IDB:s, file_read() returned %d instead of %u, err = %d.\", bytes_read, (unsigned int)sizeof bh, *err);",
          "2289:                         if (*err == 0)",
          "2291:                         return -1;",
          "2292:                 }",
          "2295:                 file_seek(wth->fh, saved_offset, SEEK_SET, err);",
          "2297:                 if (pn.byte_swapped) {",
          "2298:                         bh.block_type         = GUINT32_SWAP_LE_BE(bh.block_type);",
          "2299:                 }",
          "2301:                 pcapng_debug1(\"pcapng_open: Check for more IDB:s block_type 0x%x\", bh.block_type);",
          "2303:                 if (bh.block_type != BLOCK_TYPE_IDB) {",
          "2305:                 }",
          "2306:                 bytes_read = pcapng_read_block(wth->fh, FALSE, &pn, &wblock, err, err_info);",
          "2307:                 if (bytes_read == 0) {",
          "2308:                         pcapng_debug0(\"No more IDBs available...\");",
          "2309:                         break;",
          "2310:                 }",
          "2311:                 if (bytes_read <= 0) {",
          "2312:                         pcapng_debug0(\"pcapng_open: couldn't read IDB\");",
          "2314:                         if (*err == 0)",
          "2316:                         return -1;",
          "2317:                 }",
          "2318:                 pcapng_process_idb(wth, pcapng, &wblock);",
          "2319:                 pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\",",
          "2320:                         wth->interface_data->len, *wblock.file_encap);",
          "2322:         return 1;",
          "",
          "[Added Lines]",
          "1514:                                     gchar **err_info)",
          "1516:     int namelen;",
          "1518:     namelen = 0;",
          "1519:     for (;;) {",
          "1520:         if (record_len == 0) {",
          "1527:             return -1;",
          "1528:         }",
          "1529:         if (*p == '\\0')",
          "1531:         p++;",
          "1532:         record_len--;",
          "1534:     }",
          "1537:     return namelen + 1;",
          "1543:     int bytes_read = 0;",
          "1544:     int block_read = 0;",
          "1545:     int to_read;",
          "1546:     guint64 file_offset64;",
          "1547:     pcapng_name_resolution_block_t nrb;",
          "1548:     Buffer nrb_rec;",
          "1549:     guint32 v4_addr;",
          "1550:     guint record_len;",
          "1551:     char *namep;",
          "1552:     int namelen;",
          "1557:     if (bh->block_total_length < MIN_NRB_SIZE) {",
          "1563:                                     bh->block_total_length, MIN_NRB_SIZE);",
          "1564:         return -1;",
          "1565:     }",
          "1568:        that might fail and, even if it succeeds, it might not leave",
          "1569:        any address space or memory+backing store for anything else.",
          "1571:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1572:        We check for this *after* checking the SHB for its byte",
          "1573:        order magic number, so that non-pcap-ng files are less",
          "1575:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1578:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1579:         return -1;",
          "1580:     }",
          "1582:     errno = WTAP_ERR_CANT_READ;",
          "1585:     pcapng_debug1(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
          "1591:     ws_buffer_init(&nrb_rec, INITIAL_NRB_REC_SIZE);",
          "1592:     while (block_read < to_read) {",
          "1597:         if ((size_t)(to_read - block_read) < sizeof nrb) {",
          "1598:             ws_buffer_free(&nrb_rec);",
          "1601:                                         to_read - block_read,",
          "1602:                                         (guint)sizeof nrb);",
          "1603:             return -1;",
          "1604:         }",
          "1605:         bytes_read = file_read(&nrb, sizeof nrb, fh);",
          "1606:         if (bytes_read != sizeof nrb) {",
          "1607:             ws_buffer_free(&nrb_rec);",
          "1608:             pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read record header\");",
          "1610:             return 0;",
          "1611:         }",
          "1612:         block_read += bytes_read;",
          "1614:         if (pn->byte_swapped) {",
          "1615:             nrb.record_type = GUINT16_SWAP_LE_BE(nrb.record_type);",
          "1616:             nrb.record_len  = GUINT16_SWAP_LE_BE(nrb.record_len);",
          "1617:         }",
          "1619:         if (to_read - block_read < nrb.record_len + PADDING4(nrb.record_len)) {",
          "1620:             ws_buffer_free(&nrb_rec);",
          "1623:                                         to_read - block_read,",
          "1624:                                         nrb.record_len + PADDING4(nrb.record_len));",
          "1625:             return -1;",
          "1626:         }",
          "1627:         switch (nrb.record_type) {",
          "1628:             case NRES_ENDOFRECORD:",
          "1630:                 to_read = 0;",
          "1631:                 break;",
          "1632:             case NRES_IP4RECORD:",
          "1647:                 if (nrb.record_len < 4) {",
          "1648:                     ws_buffer_free(&nrb_rec);",
          "1651:                                                 nrb.record_len);",
          "1652:                     return -1;",
          "1653:                 }",
          "1654:                 ws_buffer_assure_space(&nrb_rec, nrb.record_len);",
          "1655:                 bytes_read = file_read(ws_buffer_start_ptr(&nrb_rec),",
          "1656:                                        nrb.record_len, fh);",
          "1657:                 if (bytes_read != nrb.record_len) {",
          "1658:                     ws_buffer_free(&nrb_rec);",
          "1659:                     pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read IPv4 record data\");",
          "1661:                     return 0;",
          "1662:                 }",
          "1663:                 block_read += bytes_read;",
          "1665:                 if (pn->add_new_ipv4) {",
          "1670:                     memcpy(&v4_addr,",
          "1671:                            ws_buffer_start_ptr(&nrb_rec), 4);",
          "1672:                     if (pn->byte_swapped)",
          "1673:                         v4_addr = GUINT32_SWAP_LE_BE(v4_addr);",
          "1674:                     for (namep = (char *)ws_buffer_start_ptr(&nrb_rec) + 4, record_len = nrb.record_len - 4;",
          "1675:                          record_len != 0;",
          "1676:                          namep += namelen, record_len -= namelen) {",
          "1681:                         namelen = name_resolution_block_find_name_end(namep, record_len, err, err_info);",
          "1682:                         if (namelen == -1) {",
          "1683:                             ws_buffer_free(&nrb_rec);",
          "1685:                         }",
          "1686:                         pn->add_new_ipv4(v4_addr, namep);",
          "1687:                     }",
          "1688:                 }",
          "1690:                 file_offset64 = file_seek(fh, PADDING4(nrb.record_len), SEEK_CUR, err);",
          "1691:                 if (file_offset64 <= 0) {",
          "1692:                     ws_buffer_free(&nrb_rec);",
          "1693:                     if (*err != 0)",
          "1695:                     return 0;",
          "1697:                 block_read += PADDING4(nrb.record_len);",
          "1698:                 break;",
          "1699:             case NRES_IP6RECORD:",
          "1714:                 if (nrb.record_len < 16) {",
          "1715:                     ws_buffer_free(&nrb_rec);",
          "1718:                                                 nrb.record_len);",
          "1719:                     return -1;",
          "1720:                 }",
          "1721:                 if (to_read < nrb.record_len) {",
          "1722:                     ws_buffer_free(&nrb_rec);",
          "1723:                     pcapng_debug0(\"pcapng_read_name_resolution_block: insufficient data for IPv6 record\");",
          "1724:                     return 0;",
          "1725:                 }",
          "1726:                 ws_buffer_assure_space(&nrb_rec, nrb.record_len);",
          "1727:                 bytes_read = file_read(ws_buffer_start_ptr(&nrb_rec),",
          "1728:                                        nrb.record_len, fh);",
          "1729:                 if (bytes_read != nrb.record_len) {",
          "1730:                     ws_buffer_free(&nrb_rec);",
          "1731:                     pcapng_debug0(\"pcapng_read_name_resolution_block: failed to read IPv6 record data\");",
          "1733:                     return 0;",
          "1737:                 if (pn->add_new_ipv6) {",
          "1738:                     for (namep = (char *)ws_buffer_start_ptr(&nrb_rec) + 16, record_len = nrb.record_len - 16;",
          "1739:                          record_len != 0;",
          "1740:                          namep += namelen, record_len -= namelen) {",
          "1745:                         namelen = name_resolution_block_find_name_end(namep, record_len, err, err_info);",
          "1746:                         if (namelen == -1) {",
          "1747:                             ws_buffer_free(&nrb_rec);",
          "1749:                         }",
          "1750:                         pn->add_new_ipv6(ws_buffer_start_ptr(&nrb_rec),",
          "1751:                                          namep);",
          "1752:                     }",
          "1755:                 file_offset64 = file_seek(fh, PADDING4(nrb.record_len), SEEK_CUR, err);",
          "1756:                 if (file_offset64 <= 0) {",
          "1757:                     ws_buffer_free(&nrb_rec);",
          "1758:                     if (*err != 0)",
          "1760:                     return 0;",
          "1762:                 block_read += PADDING4(nrb.record_len);",
          "1763:                 break;",
          "1764:             default:",
          "1765:                 pcapng_debug1(\"pcapng_read_name_resolution_block: unknown record type 0x%x\", nrb.record_type);",
          "1766:                 file_offset64 = file_seek(fh, nrb.record_len + PADDING4(nrb.record_len), SEEK_CUR, err);",
          "1767:                 if (file_offset64 <= 0) {",
          "1768:                     ws_buffer_free(&nrb_rec);",
          "1769:                     if (*err != 0)",
          "1770:                         return -1;",
          "1771:                     return 0;",
          "1773:                 block_read += nrb.record_len + PADDING4(nrb.record_len);",
          "1774:                 break;",
          "1776:     }",
          "1778:     ws_buffer_free(&nrb_rec);",
          "1779:     return block_read;",
          "1785:     int bytes_read;",
          "1786:     guint block_read;",
          "1787:     guint to_read, opt_cont_buf_len;",
          "1788:     pcapng_interface_statistics_block_t isb;",
          "1789:     pcapng_option_header_t oh;",
          "1795:     if (bh->block_total_length < MIN_ISB_SIZE) {",
          "1801:                                     bh->block_total_length, MIN_ISB_SIZE);",
          "1802:         return -1;",
          "1803:     }",
          "1806:        that might fail and, even if it succeeds, it might not leave",
          "1807:        any address space or memory+backing store for anything else.",
          "1809:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1810:        We check for this *after* checking the SHB for its byte",
          "1811:        order magic number, so that non-pcap-ng files are less",
          "1813:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1816:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1817:         return -1;",
          "1818:     }",
          "1821:     errno = WTAP_ERR_CANT_READ;",
          "1822:     bytes_read = file_read(&isb, sizeof isb, fh);",
          "1823:     if (bytes_read != sizeof isb) {",
          "1824:         pcapng_debug0(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
          "1826:         return 0;",
          "1827:     }",
          "1828:     block_read = bytes_read;",
          "1830:     if (pn->byte_swapped) {",
          "1831:         wblock->data.if_stats.interface_id = GUINT32_SWAP_LE_BE(isb.interface_id);",
          "1832:         wblock->data.if_stats.ts_high      = GUINT32_SWAP_LE_BE(isb.timestamp_high);",
          "1833:         wblock->data.if_stats.ts_low       = GUINT32_SWAP_LE_BE(isb.timestamp_low);",
          "1834:     } else {",
          "1835:         wblock->data.if_stats.interface_id = isb.interface_id;",
          "1836:         wblock->data.if_stats.ts_high      = isb.timestamp_high;",
          "1837:         wblock->data.if_stats.ts_low       = isb.timestamp_low;",
          "1838:     }",
          "1839:     pcapng_debug1(\"pcapng_read_interface_statistics_block: interface_id %u\", wblock->data.if_stats.interface_id);",
          "1842:     wblock->data.if_stats.opt_comment          = NULL;",
          "1843:     wblock->data.if_stats.isb_ifrecv           = -1;",
          "1844:     wblock->data.if_stats.isb_ifdrop           = -1;",
          "1845:     wblock->data.if_stats.isb_filteraccept     = -1;",
          "1846:     wblock->data.if_stats.isb_osdrop           = -1;",
          "1847:     wblock->data.if_stats.isb_usrdeliv         = -1;",
          "1850:     errno = WTAP_ERR_CANT_READ;",
          "1851:     to_read = bh->block_total_length -",
          "1855:     opt_cont_buf_len = to_read;",
          "1856:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "1857:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "1859:         return -1;",
          "1860:     }",
          "1862:     while (to_read != 0) {",
          "1864:         bytes_read = pcapng_read_option(fh, pn, &oh, option_content, opt_cont_buf_len, to_read, err, err_info);",
          "1865:         if (bytes_read <= 0) {",
          "1866:             pcapng_debug0(\"pcapng_read_interface_statistics_block: failed to read option\");",
          "1867:             return bytes_read;",
          "1869:         block_read += bytes_read;",
          "1870:         to_read -= bytes_read;",
          "1873:         switch (oh.option_code) {",
          "1875:                 if (to_read != 0) {",
          "1876:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: %u bytes after opt_endofopt\", to_read);",
          "1879:                 to_read = 0;",
          "1880:                 break;",
          "1882:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1883:                     wblock->data.if_stats.opt_comment = g_strndup(option_content, oh.option_length);",
          "1884:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment %s\", wblock->data.if_stats.opt_comment);",
          "1885:                 } else {",
          "1886:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment length %u seems strange\", oh.option_length);",
          "1887:                 }",
          "1888:                 break;",
          "1890:                 if (oh.option_length == 8) {",
          "1891:                     guint32 high, low;",
          "1896:                     memcpy(&high, option_content, sizeof(guint32));",
          "1897:                     memcpy(&low, option_content + sizeof(guint32), sizeof(guint32));",
          "1898:                     if (pn->byte_swapped) {",
          "1899:                         high = GUINT32_SWAP_LE_BE(high);",
          "1900:                         low = GUINT32_SWAP_LE_BE(low);",
          "1901:                     }",
          "1902:                     wblock->data.if_stats.isb_starttime = (guint64)high;",
          "1903:                     wblock->data.if_stats.isb_starttime <<= 32;",
          "1904:                     wblock->data.if_stats.isb_starttime += (guint64)low;",
          "1905:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_starttime);",
          "1906:                 } else {",
          "1907:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "1908:                 }",
          "1909:                 break;",
          "1911:                 if (oh.option_length == 8) {",
          "1912:                     guint32 high, low;",
          "1917:                     memcpy(&high, option_content, sizeof(guint32));",
          "1918:                     memcpy(&low, option_content + sizeof(guint32), sizeof(guint32));",
          "1919:                     if (pn->byte_swapped) {",
          "1920:                         high = GUINT32_SWAP_LE_BE(high);",
          "1921:                         low = GUINT32_SWAP_LE_BE(low);",
          "1922:                     }",
          "1923:                     wblock->data.if_stats.isb_endtime = (guint64)high;",
          "1924:                     wblock->data.if_stats.isb_endtime <<= 32;",
          "1925:                     wblock->data.if_stats.isb_endtime += (guint64)low;",
          "1926:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_endtime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_endtime);",
          "1927:                 } else {",
          "1928:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "1929:                 }",
          "1930:                 break;",
          "1932:                 if (oh.option_length == 8) {",
          "1936:                     memcpy(&wblock->data.if_stats.isb_ifrecv, option_content, sizeof(guint64));",
          "1937:                     if (pn->byte_swapped)",
          "1938:                         wblock->data.if_stats.isb_ifrecv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifrecv);",
          "1939:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifrecv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifrecv);",
          "1940:                 } else {",
          "1941:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifrecv length %u not 8 as expected\", oh.option_length);",
          "1942:                 }",
          "1943:                 break;",
          "1945:                 if (oh.option_length == 8) {",
          "1949:                     memcpy(&wblock->data.if_stats.isb_ifdrop, option_content, sizeof(guint64));",
          "1950:                     if (pn->byte_swapped)",
          "1951:                         wblock->data.if_stats.isb_ifdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifdrop);",
          "1952:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifdrop);",
          "1953:                 } else {",
          "1954:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_ifdrop length %u not 8 as expected\", oh.option_length);",
          "1955:                 }",
          "1956:                 break;",
          "1958:                 if (oh.option_length == 8) {",
          "1962:                     memcpy(&wblock->data.if_stats.isb_filteraccept, option_content, sizeof(guint64));",
          "1963:                     if (pn->byte_swapped)",
          "1964:                         wblock->data.if_stats.isb_ifdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_filteraccept);",
          "1965:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_filteraccept %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_filteraccept);",
          "1966:                 } else {",
          "1967:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_filteraccept length %u not 8 as expected\", oh.option_length);",
          "1968:                 }",
          "1969:                 break;",
          "1971:                 if (oh.option_length == 8) {",
          "1975:                     memcpy(&wblock->data.if_stats.isb_osdrop, option_content, sizeof(guint64));",
          "1976:                     if (pn->byte_swapped)",
          "1977:                         wblock->data.if_stats.isb_osdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_osdrop);",
          "1978:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_osdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_osdrop);",
          "1979:                 } else {",
          "1980:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_osdrop length %u not 8 as expected\", oh.option_length);",
          "1982:                 break;",
          "1984:                 if (oh.option_length == 8) {",
          "1988:                     memcpy(&wblock->data.if_stats.isb_usrdeliv, option_content, sizeof(guint64));",
          "1989:                     if (pn->byte_swapped)",
          "1990:                         wblock->data.if_stats.isb_usrdeliv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_osdrop);",
          "1991:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_usrdeliv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_usrdeliv);",
          "1992:                 } else {",
          "1993:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: isb_usrdeliv length %u not 8 as expected\", oh.option_length);",
          "1994:                 }",
          "1995:                 break;",
          "1996:             default:",
          "1997:                 pcapng_debug2(\"pcapng_read_interface_statistics_block: unknown option %u - ignoring %u bytes\",",
          "1998:                               oh.option_code, oh.option_length);",
          "2000:     }",
          "2002:     g_free(option_content);",
          "2004:     return block_read;",
          "2011:     int block_read;",
          "2012:     guint32 block_total_length;",
          "2014:     block_handler *handler;",
          "2017:     if (bh->block_total_length < MIN_BLOCK_SIZE) {",
          "2020:                                     bh->block_total_length, MIN_BLOCK_SIZE);",
          "2021:         return -1;",
          "2022:     }",
          "2026:     if (bh->block_total_length % 4) {",
          "2027:         block_total_length = bh->block_total_length + 4 - (bh->block_total_length % 4);",
          "2028:     } else {",
          "2029:         block_total_length = bh->block_total_length;",
          "2030:     }",
          "2032:     block_read = block_total_length - MIN_BLOCK_SIZE;",
          "2038:     handler = (block_handler *)g_hash_table_lookup(block_handlers,",
          "2039:                                                    GUINT_TO_POINTER(bh->block_type));",
          "2040:     if (handler != NULL) {",
          "2042:         if (!handler->read(fh, block_read, pn->byte_swapped,",
          "2043:                            wblock->packet_header, wblock->frame_buffer,",
          "2044:                            err, err_info))",
          "2045:             return -1;",
          "2046:     } else",
          "2048:     {",
          "2050:         if (!file_skip(fh, block_read, err)) {",
          "2051:             if (*err != 0)",
          "2052:                 return -1;",
          "2053:             return 0;",
          "2055:     }",
          "2057:     return block_read;",
          "2064:     int block_read;",
          "2065:     int bytes_read;",
          "2066:     pcapng_block_header_t bh;",
          "2067:     guint32 block_total_length;",
          "2071:     errno = WTAP_ERR_CANT_READ;",
          "2072:     bytes_read = file_read(&bh, sizeof bh, fh);",
          "2073:     if (bytes_read != sizeof bh) {",
          "2075:         pcapng_debug3(\"pcapng_read_block: file_read() returned %d instead of %u, err = %d.\", bytes_read, (unsigned int)sizeof bh, *err);",
          "2076:         if (*err != 0)",
          "2077:             return -1;",
          "2078:         return 0;",
          "2079:     }",
          "2081:     block_read = bytes_read;",
          "2082:     if (pn->byte_swapped) {",
          "2083:         bh.block_type         = GUINT32_SWAP_LE_BE(bh.block_type);",
          "2084:         bh.block_total_length = GUINT32_SWAP_LE_BE(bh.block_total_length);",
          "2085:     }",
          "2087:     wblock->type = bh.block_type;",
          "2089:     pcapng_debug1(\"pcapng_read_block: block_type 0x%x\", bh.block_type);",
          "2091:     if (first_block) {",
          "2101:         if (bh.block_type != BLOCK_TYPE_SHB)",
          "2103:     }",
          "2105:     switch (bh.block_type) {",
          "2106:         case(BLOCK_TYPE_SHB):",
          "2107:             bytes_read = pcapng_read_section_header_block(fh, first_block, &bh, pn, wblock, err, err_info);",
          "2108:             break;",
          "2109:         case(BLOCK_TYPE_IDB):",
          "2110:             bytes_read = pcapng_read_if_descr_block(fh, &bh, pn, wblock, err, err_info);",
          "2111:             break;",
          "2112:         case(BLOCK_TYPE_PB):",
          "2113:             bytes_read = pcapng_read_packet_block(fh, &bh, pn, wblock, err, err_info, FALSE);",
          "2114:             break;",
          "2115:         case(BLOCK_TYPE_SPB):",
          "2116:             bytes_read = pcapng_read_simple_packet_block(fh, &bh, pn, wblock, err, err_info);",
          "2117:             break;",
          "2118:         case(BLOCK_TYPE_EPB):",
          "2119:             bytes_read = pcapng_read_packet_block(fh, &bh, pn, wblock, err, err_info, TRUE);",
          "2120:             break;",
          "2121:         case(BLOCK_TYPE_NRB):",
          "2122:             bytes_read = pcapng_read_name_resolution_block(fh, &bh, pn, wblock, err, err_info);",
          "2123:             break;",
          "2124:         case(BLOCK_TYPE_ISB):",
          "2125:             bytes_read = pcapng_read_interface_statistics_block(fh, &bh, pn, wblock, err, err_info);",
          "2126:             break;",
          "2127:         default:",
          "2128:             pcapng_debug2(\"pcapng_read_block: Unknown block_type: 0x%x (block ignored), block total length %d\", bh.block_type, bh.block_total_length);",
          "2129:             bytes_read = pcapng_read_unknown_block(fh, &bh, pn, wblock, err, err_info);",
          "2130:             break;",
          "2131:     }",
          "2133:     if (bytes_read <= 0) {",
          "2134:         return bytes_read;",
          "2135:     }",
          "2136:     block_read += bytes_read;",
          "2139:     errno = WTAP_ERR_CANT_READ;",
          "2140:     bytes_read = file_read(&block_total_length, sizeof block_total_length, fh);",
          "2141:     if (bytes_read != sizeof block_total_length) {",
          "2142:         pcapng_debug0(\"pcapng_read_block: couldn't read second block length\");",
          "2144:         if (*err == 0)",
          "2146:         return -1;",
          "2147:     }",
          "2148:     block_read += bytes_read;",
          "2150:     if (pn->byte_swapped)",
          "2151:         block_total_length = GUINT32_SWAP_LE_BE(block_total_length);",
          "2153:     if (!(block_total_length == bh.block_total_length)) {",
          "2156:                                     bh.block_total_length, block_total_length);",
          "2157:         return -1;",
          "2158:     }",
          "2160:     return block_read;",
          "2167:     wtapng_if_descr_t int_data;",
          "2168:     interface_info_t iface_info;",
          "2170:     int_data.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2171:     int_data.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2172:     int_data.link_type = wblock->data.if_descr.link_type;",
          "2173:     int_data.snap_len = wblock->data.if_descr.snap_len;",
          "2175:     int_data.opt_comment = wblock->data.if_descr.opt_comment;",
          "2176:     int_data.if_name = wblock->data.if_descr.if_name;",
          "2177:     int_data.if_description = wblock->data.if_descr.if_description;",
          "2182:     int_data.if_speed = wblock->data.if_descr.if_speed;",
          "2183:     int_data.if_tsresol = wblock->data.if_descr.if_tsresol;",
          "2185:     int_data.if_filter_str = wblock->data.if_descr.if_filter_str;",
          "2186:     int_data.bpf_filter_len = wblock->data.if_descr.bpf_filter_len;",
          "2187:     int_data.if_filter_bpf_bytes = wblock->data.if_descr.if_filter_bpf_bytes;",
          "2188:     int_data.if_os = wblock->data.if_descr.if_os;",
          "2189:     int_data.if_fcslen = wblock->data.if_descr.if_fcslen;",
          "2192:     int_data.num_stat_entries = 0;",
          "2193:     int_data.interface_statistics = NULL;",
          "2195:     g_array_append_val(wth->interface_data, int_data);",
          "2197:     iface_info.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2198:     iface_info.snap_len = wblock->data.if_descr.snap_len;",
          "2199:     iface_info.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2201:     g_array_append_val(pcapng->interfaces, iface_info);",
          "2208:     int bytes_read;",
          "2209:     pcapng_t pn;",
          "2210:     wtapng_block_t wblock;",
          "2211:     pcapng_t *pcapng;",
          "2212:     pcapng_block_header_t bh;",
          "2213:     gint64 saved_offset;",
          "2215:     pn.shb_read = FALSE;",
          "2217:     pn.byte_swapped = FALSE;",
          "2218:     pn.if_fcslen = -1;",
          "2219:     pn.version_major = -1;",
          "2220:     pn.version_minor = -1;",
          "2221:     pn.interfaces = g_array_new(FALSE, FALSE, sizeof(interface_info_t));",
          "2225:     wblock.frame_buffer = NULL;",
          "2226:     wblock.packet_header = NULL;",
          "2227:     wblock.file_encap = &wth->file_encap;",
          "2229:     pcapng_debug0(\"pcapng_open: opening file\");",
          "2231:     bytes_read = pcapng_read_block(wth->fh, TRUE, &pn, &wblock, err, err_info);",
          "2232:     if (bytes_read <= 0) {",
          "2233:         pcapng_debug0(\"pcapng_open: couldn't read first SHB\");",
          "2235:         if (*err != 0 && *err != WTAP_ERR_SHORT_READ)",
          "2236:             return -1;",
          "2237:         return 0;",
          "2238:     }",
          "2241:     if (wblock.type != BLOCK_TYPE_SHB) {",
          "2247:         pcapng_debug1(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "2248:         return 0;",
          "2249:     }",
          "2250:     pn.shb_read = TRUE;",
          "2258:     wth->shb_hdr.opt_comment = wblock.data.section.opt_comment;",
          "2259:     wth->shb_hdr.shb_hardware = wblock.data.section.shb_hardware;",
          "2260:     wth->shb_hdr.shb_os = wblock.data.section.shb_os;",
          "2261:     wth->shb_hdr.shb_user_appl = wblock.data.section.shb_user_appl;",
          "2263:     wth->file_encap = WTAP_ENCAP_UNKNOWN;",
          "2264:     wth->snapshot_length = 0;",
          "2265:     wth->tsprecision = WTAP_FILE_TSPREC_NSEC;",
          "2266:     pcapng = (pcapng_t *)g_malloc(sizeof(pcapng_t));",
          "2267:     wth->priv = (void *)pcapng;",
          "2270:     wth->subtype_read = pcapng_read;",
          "2271:     wth->subtype_seek_read = pcapng_seek_read;",
          "2272:     wth->subtype_close = pcapng_close;",
          "2273:     wth->file_type_subtype = WTAP_FILE_TYPE_SUBTYPE_PCAPNG;",
          "2276:     while (1) {",
          "2279:         saved_offset = file_tell(wth->fh);",
          "2280:         errno = WTAP_ERR_CANT_READ;",
          "2281:         bytes_read = file_read(&bh, sizeof bh, wth->fh);",
          "2282:         if (bytes_read == 0) {",
          "2283:             pcapng_debug0(\"No more IDBs available...\");",
          "2284:             break;",
          "2285:         }",
          "2286:         if (bytes_read != sizeof bh) {",
          "2288:             pcapng_debug3(\"pcapng_open:  Check for more IDB:s, file_read() returned %d instead of %u, err = %d.\", bytes_read, (unsigned int)sizeof bh, *err);",
          "2289:             if (*err == 0)",
          "2291:             return -1;",
          "2292:         }",
          "2295:         file_seek(wth->fh, saved_offset, SEEK_SET, err);",
          "2297:         if (pn.byte_swapped) {",
          "2298:             bh.block_type         = GUINT32_SWAP_LE_BE(bh.block_type);",
          "2299:         }",
          "2301:         pcapng_debug1(\"pcapng_open: Check for more IDB:s block_type 0x%x\", bh.block_type);",
          "2303:         if (bh.block_type != BLOCK_TYPE_IDB) {",
          "2305:         }",
          "2306:         bytes_read = pcapng_read_block(wth->fh, FALSE, &pn, &wblock, err, err_info);",
          "2307:         if (bytes_read == 0) {",
          "2308:             pcapng_debug0(\"No more IDBs available...\");",
          "2309:             break;",
          "2311:         if (bytes_read <= 0) {",
          "2312:             pcapng_debug0(\"pcapng_open: couldn't read IDB\");",
          "2314:             if (*err == 0)",
          "2316:             return -1;",
          "2317:         }",
          "2318:         pcapng_process_idb(wth, pcapng, &wblock);",
          "2319:         pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\",",
          "2320:                       wth->interface_data->len, *wblock.file_encap);",
          "2321:     }",
          "2322:     return 1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2327: static gboolean",
          "2328: pcapng_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset)",
          "2329: {",
          "2423:                 }",
          "2424:         }",
          "2426: got_packet:",
          "2432: }",
          "2436: static gboolean",
          "2437: pcapng_seek_read(wtap *wth, gint64 seek_off,",
          "2440: {",
          "2475: }",
          "",
          "[Removed Lines]",
          "2330:         pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2331:         int bytes_read;",
          "2332:         wtapng_block_t wblock;",
          "2333:         wtapng_if_descr_t *wtapng_if_descr;",
          "2334:         wtapng_if_stats_t if_stats;",
          "2337:         pcapng_debug1(\"pcapng_read: data_offset is initially %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2339:         wblock.frame_buffer  = wth->frame_buffer;",
          "2340:         wblock.packet_header = &wth->phdr;",
          "2341:         wblock.file_encap    = &wth->file_encap;",
          "2343:         pcapng->add_new_ipv4 = wth->add_new_ipv4;",
          "2344:         pcapng->add_new_ipv6 = wth->add_new_ipv6;",
          "2347:         while (1) {",
          "2348:                 bytes_read = pcapng_read_block(wth->fh, FALSE, pcapng, &wblock, err, err_info);",
          "2349:                 if (bytes_read <= 0) {",
          "2350:                         pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2351:                         pcapng_debug0(\"pcapng_read: couldn't read packet block\");",
          "2352:                         return FALSE;",
          "2353:                 }",
          "2355:                 switch (wblock.type) {",
          "2357:                 case(BLOCK_TYPE_SHB):",
          "2359:                         wth->phdr.pkt_encap = WTAP_ENCAP_UNKNOWN;",
          "2362:                         return FALSE;",
          "2364:                 case(BLOCK_TYPE_PB):",
          "2365:                 case(BLOCK_TYPE_SPB):",
          "2366:                 case(BLOCK_TYPE_EPB):",
          "2368:                         goto got_packet;",
          "2370:                 case(BLOCK_TYPE_IDB):",
          "2372:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_IDB\");",
          "2374:                         pcapng_process_idb(wth, pcapng, &wblock);",
          "2375:                         break;",
          "2377:                 case(BLOCK_TYPE_NRB):",
          "2379:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_NRB\");",
          "2381:                         break;",
          "2383:                 case(BLOCK_TYPE_ISB):",
          "2385:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2387:                         pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2388:                         if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
          "2389:                                 pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2390:                         } else {",
          "2392:                                 wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);",
          "2393:                                 if (wtapng_if_descr->num_stat_entries == 0) {",
          "2395:                                     pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB. First ISB found, no previous entry\");",
          "2396:                                     wtapng_if_descr->interface_statistics = g_array_new(FALSE, FALSE, sizeof(wtapng_if_stats_t));",
          "2397:                                 }",
          "2399:                                 if_stats.interface_id       = wblock.data.if_stats.interface_id;",
          "2400:                                 if_stats.ts_high            = wblock.data.if_stats.ts_high;",
          "2401:                                 if_stats.ts_low             = wblock.data.if_stats.ts_low;",
          "2404:                                 if_stats.isb_starttime      = wblock.data.if_stats.isb_starttime;",
          "2405:                                 if_stats.isb_endtime        = wblock.data.if_stats.isb_endtime;",
          "2406:                                 if_stats.isb_ifrecv         = wblock.data.if_stats.isb_ifrecv;",
          "2407:                                 if_stats.isb_ifdrop         = wblock.data.if_stats.isb_ifdrop;",
          "2408:                                 if_stats.isb_filteraccept   = wblock.data.if_stats.isb_filteraccept;",
          "2409:                                 if_stats.isb_osdrop         = wblock.data.if_stats.isb_osdrop;",
          "2410:                                 if_stats.isb_usrdeliv       = wblock.data.if_stats.isb_usrdeliv;",
          "2412:                                 g_array_append_val(wtapng_if_descr->interface_statistics, if_stats);",
          "2413:                                 wtapng_if_descr->num_stat_entries++;",
          "2414:                         }",
          "2415:                         break;",
          "2417:                 default:",
          "2419:                         pcapng_debug1(\"pcapng_read: Unknown block type 0x%08x\", wblock.type);",
          "2421:                         pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2422:                         break;",
          "2429:         pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset + bytes_read);",
          "2431:         return TRUE;",
          "2438:     struct wtap_pkthdr *phdr, Buffer *buf,",
          "2439:     int *err, gchar **err_info)",
          "2441:         pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2442:         guint64 bytes_read64;",
          "2443:         int bytes_read;",
          "2444:         wtapng_block_t wblock;",
          "2448:         bytes_read64 = file_seek(wth->random_fh, seek_off, SEEK_SET, err);",
          "2449:         if (bytes_read64 <= 0) {",
          "2451:         }",
          "2452:         pcapng_debug1(\"pcapng_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "2454:         wblock.frame_buffer = buf;",
          "2455:         wblock.packet_header = phdr;",
          "2456:         wblock.file_encap = &wth->file_encap;",
          "2459:         bytes_read = pcapng_read_block(wth->random_fh, FALSE, pcapng, &wblock, err, err_info);",
          "2460:         if (bytes_read <= 0) {",
          "2461:                 pcapng_debug3(\"pcapng_seek_read: couldn't read packet block (err=%d, errno=%d, bytes_read=%d).\",",
          "2463:                 return FALSE;",
          "2464:         }",
          "2468:         if (wblock.type != BLOCK_TYPE_PB && wblock.type != BLOCK_TYPE_EPB &&",
          "2469:             wblock.type != BLOCK_TYPE_SPB) {",
          "2470:                 pcapng_debug1(\"pcapng_seek_read: block type %u not PB/EPB/SPB\", wblock.type);",
          "2471:                 return FALSE;",
          "2472:         }",
          "2474:         return TRUE;",
          "",
          "[Added Lines]",
          "2330:     pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2331:     int bytes_read;",
          "2332:     wtapng_block_t wblock;",
          "2333:     wtapng_if_descr_t *wtapng_if_descr;",
          "2334:     wtapng_if_stats_t if_stats;",
          "2337:     pcapng_debug1(\"pcapng_read: data_offset is initially %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2339:     wblock.frame_buffer  = wth->frame_buffer;",
          "2340:     wblock.packet_header = &wth->phdr;",
          "2341:     wblock.file_encap    = &wth->file_encap;",
          "2343:     pcapng->add_new_ipv4 = wth->add_new_ipv4;",
          "2344:     pcapng->add_new_ipv6 = wth->add_new_ipv6;",
          "2347:     while (1) {",
          "2348:         bytes_read = pcapng_read_block(wth->fh, FALSE, pcapng, &wblock, err, err_info);",
          "2349:         if (bytes_read <= 0) {",
          "2350:             pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2351:             pcapng_debug0(\"pcapng_read: couldn't read packet block\");",
          "2352:             return FALSE;",
          "2353:         }",
          "2355:         switch (wblock.type) {",
          "2357:             case(BLOCK_TYPE_SHB):",
          "2359:                 wth->phdr.pkt_encap = WTAP_ENCAP_UNKNOWN;",
          "2362:                 return FALSE;",
          "2364:             case(BLOCK_TYPE_PB):",
          "2365:             case(BLOCK_TYPE_SPB):",
          "2366:             case(BLOCK_TYPE_EPB):",
          "2368:                 goto got_packet;",
          "2370:             case(BLOCK_TYPE_IDB):",
          "2372:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_IDB\");",
          "2374:                 pcapng_process_idb(wth, pcapng, &wblock);",
          "2375:                 break;",
          "2377:             case(BLOCK_TYPE_NRB):",
          "2379:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_NRB\");",
          "2381:                 break;",
          "2383:             case(BLOCK_TYPE_ISB):",
          "2385:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2387:                 pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2388:                 if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
          "2389:                     pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2390:                 } else {",
          "2392:                     wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);",
          "2393:                     if (wtapng_if_descr->num_stat_entries == 0) {",
          "2395:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB. First ISB found, no previous entry\");",
          "2396:                         wtapng_if_descr->interface_statistics = g_array_new(FALSE, FALSE, sizeof(wtapng_if_stats_t));",
          "2397:                     }",
          "2399:                     if_stats.interface_id       = wblock.data.if_stats.interface_id;",
          "2400:                     if_stats.ts_high            = wblock.data.if_stats.ts_high;",
          "2401:                     if_stats.ts_low             = wblock.data.if_stats.ts_low;",
          "2404:                     if_stats.isb_starttime      = wblock.data.if_stats.isb_starttime;",
          "2405:                     if_stats.isb_endtime        = wblock.data.if_stats.isb_endtime;",
          "2406:                     if_stats.isb_ifrecv         = wblock.data.if_stats.isb_ifrecv;",
          "2407:                     if_stats.isb_ifdrop         = wblock.data.if_stats.isb_ifdrop;",
          "2408:                     if_stats.isb_filteraccept   = wblock.data.if_stats.isb_filteraccept;",
          "2409:                     if_stats.isb_osdrop         = wblock.data.if_stats.isb_osdrop;",
          "2410:                     if_stats.isb_usrdeliv       = wblock.data.if_stats.isb_usrdeliv;",
          "2412:                     g_array_append_val(wtapng_if_descr->interface_statistics, if_stats);",
          "2413:                     wtapng_if_descr->num_stat_entries++;",
          "2415:                 break;",
          "2417:             default:",
          "2419:                 pcapng_debug1(\"pcapng_read: Unknown block type 0x%08x\", wblock.type);",
          "2421:                 pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2422:                 break;",
          "2424:     }",
          "2429:     pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset + bytes_read);",
          "2431:     return TRUE;",
          "2438:                  struct wtap_pkthdr *phdr, Buffer *buf,",
          "2439:                  int *err, gchar **err_info)",
          "2441:     pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2442:     guint64 bytes_read64;",
          "2443:     int bytes_read;",
          "2444:     wtapng_block_t wblock;",
          "2448:     bytes_read64 = file_seek(wth->random_fh, seek_off, SEEK_SET, err);",
          "2449:     if (bytes_read64 <= 0) {",
          "2451:     }",
          "2452:     pcapng_debug1(\"pcapng_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "2454:     wblock.frame_buffer = buf;",
          "2455:     wblock.packet_header = phdr;",
          "2456:     wblock.file_encap = &wth->file_encap;",
          "2459:     bytes_read = pcapng_read_block(wth->random_fh, FALSE, pcapng, &wblock, err, err_info);",
          "2460:     if (bytes_read <= 0) {",
          "2461:         pcapng_debug3(\"pcapng_seek_read: couldn't read packet block (err=%d, errno=%d, bytes_read=%d).\",",
          "2463:         return FALSE;",
          "2464:     }",
          "2468:     if (wblock.type != BLOCK_TYPE_PB && wblock.type != BLOCK_TYPE_EPB &&",
          "2469:         wblock.type != BLOCK_TYPE_SPB) {",
          "2470:         pcapng_debug1(\"pcapng_seek_read: block type %u not PB/EPB/SPB\", wblock.type);",
          "2471:         return FALSE;",
          "2472:     }",
          "2474:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2479: static void",
          "2480: pcapng_close(wtap *wth)",
          "2481: {",
          "2486: }",
          "2489: static gboolean",
          "2490: pcapng_write_section_header_block(wtap_dumper *wdh, int *err)",
          "2491: {",
          "2554:         }",
          "2573:                 return FALSE;",
          "2623:         }",
          "2674:         }",
          "2679:                 return FALSE;",
          "2683: }",
          "2685: #define IDB_OPT_IF_NAME         2",
          "",
          "[Removed Lines]",
          "2482:         pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2484:         pcapng_debug0(\"pcapng_close: closing file\");",
          "2485:         g_array_free(pcapng->interfaces, TRUE);",
          "2492:         pcapng_block_header_t bh;",
          "2493:         pcapng_section_header_block_t shb;",
          "2494:         const guint32 zero_pad = 0;",
          "2495:         gboolean have_options = FALSE;",
          "2497:         guint32 options_total_length = 0;",
          "2498:         guint32 comment_len = 0, shb_hardware_len = 0, shb_os_len = 0, shb_user_appl_len = 0;",
          "2499:         guint32 comment_pad_len = 0, shb_hardware_pad_len = 0, shb_os_pad_len = 0, shb_user_appl_pad_len = 0;",
          "2501:         if (wdh->shb_hdr) {",
          "2502:                 pcapng_debug0(\"pcapng_write_section_header_block: Have shb_hdr\");",
          "2504:                 if (wdh->shb_hdr->opt_comment) {",
          "2505:                         have_options = TRUE;",
          "2506:                         comment_len = (guint32)strlen(wdh->shb_hdr->opt_comment) & 0xffff;",
          "2507:                         if ((comment_len % 4)) {",
          "2508:                                 comment_pad_len = 4 - (comment_len % 4);",
          "2509:                         } else {",
          "2510:                                 comment_pad_len = 0;",
          "2511:                         }",
          "2512:                         options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "2513:                 }",
          "2516:                 if (wdh->shb_hdr->shb_hardware) {",
          "2517:                         have_options = TRUE;",
          "2518:                         shb_hardware_len = (guint32)strlen(wdh->shb_hdr->shb_hardware) & 0xffff;",
          "2519:                         if ((shb_hardware_len % 4)) {",
          "2520:                                 shb_hardware_pad_len = 4 - (shb_hardware_len % 4);",
          "2521:                         } else {",
          "2522:                                 shb_hardware_pad_len = 0;",
          "2523:                         }",
          "2524:                         options_total_length = options_total_length + shb_hardware_len + shb_hardware_pad_len + 4 /* options tag */ ;",
          "2525:                 }",
          "2528:                 if (wdh->shb_hdr->shb_os) {",
          "2529:                         have_options = TRUE;",
          "2530:                         shb_os_len = (guint32)strlen(wdh->shb_hdr->shb_os) & 0xffff;",
          "2531:                         if ((shb_os_len % 4)) {",
          "2532:                                 shb_os_pad_len = 4 - (shb_os_len % 4);",
          "2533:                         } else {",
          "2534:                                 shb_os_pad_len = 0;",
          "2535:                         }",
          "2536:                         options_total_length = options_total_length + shb_os_len + shb_os_pad_len + 4 /* options tag */ ;",
          "2537:                 }",
          "2540:                 if (wdh->shb_hdr->shb_user_appl) {",
          "2541:                         have_options = TRUE;",
          "2542:                         shb_user_appl_len = (guint32)strlen(wdh->shb_hdr->shb_user_appl) & 0xffff;",
          "2543:                         if ((shb_user_appl_len % 4)) {",
          "2544:                                 shb_user_appl_pad_len = 4 - (shb_user_appl_len % 4);",
          "2545:                         } else {",
          "2546:                                 shb_user_appl_pad_len = 0;",
          "2547:                         }",
          "2548:                         options_total_length = options_total_length + shb_user_appl_len + shb_user_appl_pad_len + 4 /* options tag */ ;",
          "2549:                 }",
          "2550:                 if (have_options) {",
          "2552:                         options_total_length += 4;",
          "2553:                 }",
          "2557:         bh.block_type = BLOCK_TYPE_SHB;",
          "2558:         bh.block_total_length = (guint32)(sizeof(bh) + sizeof(shb) + options_total_length + 4);",
          "2559:         pcapng_debug2(\"pcapng_write_section_header_block: Total len %u, Options total len %u\",bh.block_total_length, options_total_length);",
          "2561:         if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "2562:                 return FALSE;",
          "2563:         wdh->bytes_dumped += sizeof bh;",
          "2567:         shb.magic = 0x1A2B3C4D;",
          "2568:         shb.version_major = 1;",
          "2569:         shb.version_minor = 0;",
          "2570:         shb.section_length = -1;",
          "2572:         if (!wtap_dump_file_write(wdh, &shb, sizeof shb, err))",
          "2574:         wdh->bytes_dumped += sizeof shb;",
          "2583:         if (comment_len) {",
          "2584:                 option_hdr.type          = OPT_COMMENT;",
          "2585:                 option_hdr.value_length = comment_len;",
          "2586:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2587:                         return FALSE;",
          "2588:                 wdh->bytes_dumped += 4;",
          "2591:                 pcapng_debug3(\"pcapng_write_section_header_block, comment:'%s' comment_len %u comment_pad_len %u\" , wdh->shb_hdr->opt_comment, comment_len, comment_pad_len);",
          "2592:                 if (!wtap_dump_file_write(wdh, wdh->shb_hdr->opt_comment, comment_len, err))",
          "2593:                         return FALSE;",
          "2594:                 wdh->bytes_dumped += comment_len;",
          "2597:                 if (comment_pad_len != 0) {",
          "2598:                         if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "2599:                                 return FALSE;",
          "2600:                         wdh->bytes_dumped += comment_pad_len;",
          "2601:                 }",
          "2602:         }",
          "2604:         if (shb_hardware_len) {",
          "2605:                 option_hdr.type          = OPT_SHB_HARDWARE;",
          "2606:                 option_hdr.value_length = shb_hardware_len;",
          "2607:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2608:                         return FALSE;",
          "2609:                 wdh->bytes_dumped += 4;",
          "2612:                 pcapng_debug3(\"pcapng_write_section_header_block, shb_hardware:'%s' shb_hardware_len %u shb_hardware_pad_len %u\" , wdh->shb_hdr->shb_hardware, shb_hardware_len, shb_hardware_pad_len);",
          "2613:                 if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_hardware, shb_hardware_len, err))",
          "2614:                         return FALSE;",
          "2615:                 wdh->bytes_dumped += shb_hardware_len;",
          "2618:                 if (shb_hardware_pad_len != 0) {",
          "2619:                         if (!wtap_dump_file_write(wdh, &zero_pad, shb_hardware_pad_len, err))",
          "2620:                                 return FALSE;",
          "2621:                         wdh->bytes_dumped += shb_hardware_pad_len;",
          "2622:                 }",
          "2625:         if (shb_os_len) {",
          "2626:                 option_hdr.type          = OPT_SHB_OS;",
          "2627:                 option_hdr.value_length = shb_os_len;",
          "2628:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2629:                         return FALSE;",
          "2630:                 wdh->bytes_dumped += 4;",
          "2633:                 pcapng_debug3(\"pcapng_write_section_header_block, shb_os:'%s' shb_os_len %u shb_os_pad_len %u\" , wdh->shb_hdr->shb_os, shb_os_len, shb_os_pad_len);",
          "2634:                 if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_os, shb_os_len, err))",
          "2635:                         return FALSE;",
          "2636:                 wdh->bytes_dumped += shb_os_len;",
          "2639:                 if (shb_os_pad_len != 0) {",
          "2640:                         if (!wtap_dump_file_write(wdh, &zero_pad, shb_os_pad_len, err))",
          "2641:                                 return FALSE;",
          "2642:                         wdh->bytes_dumped += shb_os_pad_len;",
          "2643:                 }",
          "2644:         }",
          "2646:         if (shb_user_appl_len) {",
          "2647:                 option_hdr.type          = OPT_SHB_USERAPPL;",
          "2648:                 option_hdr.value_length = shb_user_appl_len;",
          "2649:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2650:                         return FALSE;",
          "2651:                 wdh->bytes_dumped += 4;",
          "2654:                 pcapng_debug3(\"pcapng_write_section_header_block, shb_user_appl:'%s' shb_user_appl_len %u shb_user_appl_pad_len %u\" , wdh->shb_hdr->shb_user_appl, shb_user_appl_len, shb_user_appl_pad_len);",
          "2655:                 if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_user_appl, shb_user_appl_len, err))",
          "2656:                         return FALSE;",
          "2657:                 wdh->bytes_dumped += shb_user_appl_len;",
          "2660:                 if (shb_user_appl_pad_len != 0) {",
          "2661:                         if (!wtap_dump_file_write(wdh, &zero_pad, shb_user_appl_pad_len, err))",
          "2662:                                 return FALSE;",
          "2663:                         wdh->bytes_dumped += shb_user_appl_pad_len;",
          "2664:                 }",
          "2665:         }",
          "2668:         if (have_options) {",
          "2669:                 option_hdr.type = OPT_EOFOPT;",
          "2670:                 option_hdr.value_length = 0;",
          "2671:                 if (!wtap_dump_file_write(wdh, &zero_pad, 4, err))",
          "2672:                         return FALSE;",
          "2673:                 wdh->bytes_dumped += 4;",
          "2677:         if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "2678:             sizeof bh.block_total_length, err))",
          "2680:         wdh->bytes_dumped += sizeof bh.block_total_length;",
          "2682:         return TRUE;",
          "",
          "[Added Lines]",
          "2482:     pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2484:     pcapng_debug0(\"pcapng_close: closing file\");",
          "2485:     g_array_free(pcapng->interfaces, TRUE);",
          "2492:     pcapng_block_header_t bh;",
          "2493:     pcapng_section_header_block_t shb;",
          "2494:     const guint32 zero_pad = 0;",
          "2495:     gboolean have_options = FALSE;",
          "2497:     guint32 options_total_length = 0;",
          "2498:     guint32 comment_len = 0, shb_hardware_len = 0, shb_os_len = 0, shb_user_appl_len = 0;",
          "2499:     guint32 comment_pad_len = 0, shb_hardware_pad_len = 0, shb_os_pad_len = 0, shb_user_appl_pad_len = 0;",
          "2501:     if (wdh->shb_hdr) {",
          "2502:         pcapng_debug0(\"pcapng_write_section_header_block: Have shb_hdr\");",
          "2504:         if (wdh->shb_hdr->opt_comment) {",
          "2505:             have_options = TRUE;",
          "2506:             comment_len = (guint32)strlen(wdh->shb_hdr->opt_comment) & 0xffff;",
          "2507:             if ((comment_len % 4)) {",
          "2508:                 comment_pad_len = 4 - (comment_len % 4);",
          "2509:             } else {",
          "2510:                 comment_pad_len = 0;",
          "2511:             }",
          "2512:             options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "2513:         }",
          "2516:         if (wdh->shb_hdr->shb_hardware) {",
          "2517:             have_options = TRUE;",
          "2518:             shb_hardware_len = (guint32)strlen(wdh->shb_hdr->shb_hardware) & 0xffff;",
          "2519:             if ((shb_hardware_len % 4)) {",
          "2520:                 shb_hardware_pad_len = 4 - (shb_hardware_len % 4);",
          "2521:             } else {",
          "2522:                 shb_hardware_pad_len = 0;",
          "2523:             }",
          "2524:             options_total_length = options_total_length + shb_hardware_len + shb_hardware_pad_len + 4 /* options tag */ ;",
          "2525:         }",
          "2528:         if (wdh->shb_hdr->shb_os) {",
          "2529:             have_options = TRUE;",
          "2530:             shb_os_len = (guint32)strlen(wdh->shb_hdr->shb_os) & 0xffff;",
          "2531:             if ((shb_os_len % 4)) {",
          "2532:                 shb_os_pad_len = 4 - (shb_os_len % 4);",
          "2533:             } else {",
          "2534:                 shb_os_pad_len = 0;",
          "2535:             }",
          "2536:             options_total_length = options_total_length + shb_os_len + shb_os_pad_len + 4 /* options tag */ ;",
          "2537:         }",
          "2540:         if (wdh->shb_hdr->shb_user_appl) {",
          "2541:             have_options = TRUE;",
          "2542:             shb_user_appl_len = (guint32)strlen(wdh->shb_hdr->shb_user_appl) & 0xffff;",
          "2543:             if ((shb_user_appl_len % 4)) {",
          "2544:                 shb_user_appl_pad_len = 4 - (shb_user_appl_len % 4);",
          "2545:             } else {",
          "2546:                 shb_user_appl_pad_len = 0;",
          "2547:             }",
          "2548:             options_total_length = options_total_length + shb_user_appl_len + shb_user_appl_pad_len + 4 /* options tag */ ;",
          "2549:         }",
          "2550:         if (have_options) {",
          "2552:             options_total_length += 4;",
          "2554:     }",
          "2557:     bh.block_type = BLOCK_TYPE_SHB;",
          "2558:     bh.block_total_length = (guint32)(sizeof(bh) + sizeof(shb) + options_total_length + 4);",
          "2559:     pcapng_debug2(\"pcapng_write_section_header_block: Total len %u, Options total len %u\",bh.block_total_length, options_total_length);",
          "2561:     if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "2562:         return FALSE;",
          "2563:     wdh->bytes_dumped += sizeof bh;",
          "2567:     shb.magic = 0x1A2B3C4D;",
          "2568:     shb.version_major = 1;",
          "2569:     shb.version_minor = 0;",
          "2570:     shb.section_length = -1;",
          "2572:     if (!wtap_dump_file_write(wdh, &shb, sizeof shb, err))",
          "2573:         return FALSE;",
          "2574:     wdh->bytes_dumped += sizeof shb;",
          "2583:     if (comment_len) {",
          "2584:         option_hdr.type          = OPT_COMMENT;",
          "2585:         option_hdr.value_length = comment_len;",
          "2586:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2587:             return FALSE;",
          "2588:         wdh->bytes_dumped += 4;",
          "2591:         pcapng_debug3(\"pcapng_write_section_header_block, comment:'%s' comment_len %u comment_pad_len %u\" , wdh->shb_hdr->opt_comment, comment_len, comment_pad_len);",
          "2592:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->opt_comment, comment_len, err))",
          "2593:             return FALSE;",
          "2594:         wdh->bytes_dumped += comment_len;",
          "2597:         if (comment_pad_len != 0) {",
          "2598:             if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "2600:             wdh->bytes_dumped += comment_pad_len;",
          "2601:         }",
          "2602:     }",
          "2604:     if (shb_hardware_len) {",
          "2605:         option_hdr.type          = OPT_SHB_HARDWARE;",
          "2606:         option_hdr.value_length = shb_hardware_len;",
          "2607:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2608:             return FALSE;",
          "2609:         wdh->bytes_dumped += 4;",
          "2612:         pcapng_debug3(\"pcapng_write_section_header_block, shb_hardware:'%s' shb_hardware_len %u shb_hardware_pad_len %u\" , wdh->shb_hdr->shb_hardware, shb_hardware_len, shb_hardware_pad_len);",
          "2613:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_hardware, shb_hardware_len, err))",
          "2614:             return FALSE;",
          "2615:         wdh->bytes_dumped += shb_hardware_len;",
          "2618:         if (shb_hardware_pad_len != 0) {",
          "2619:             if (!wtap_dump_file_write(wdh, &zero_pad, shb_hardware_pad_len, err))",
          "2620:                 return FALSE;",
          "2621:             wdh->bytes_dumped += shb_hardware_pad_len;",
          "2623:     }",
          "2625:     if (shb_os_len) {",
          "2626:         option_hdr.type          = OPT_SHB_OS;",
          "2627:         option_hdr.value_length = shb_os_len;",
          "2628:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2629:             return FALSE;",
          "2630:         wdh->bytes_dumped += 4;",
          "2633:         pcapng_debug3(\"pcapng_write_section_header_block, shb_os:'%s' shb_os_len %u shb_os_pad_len %u\" , wdh->shb_hdr->shb_os, shb_os_len, shb_os_pad_len);",
          "2634:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_os, shb_os_len, err))",
          "2635:             return FALSE;",
          "2636:         wdh->bytes_dumped += shb_os_len;",
          "2639:         if (shb_os_pad_len != 0) {",
          "2640:             if (!wtap_dump_file_write(wdh, &zero_pad, shb_os_pad_len, err))",
          "2641:                 return FALSE;",
          "2642:             wdh->bytes_dumped += shb_os_pad_len;",
          "2644:     }",
          "2646:     if (shb_user_appl_len) {",
          "2647:         option_hdr.type          = OPT_SHB_USERAPPL;",
          "2648:         option_hdr.value_length = shb_user_appl_len;",
          "2649:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2650:             return FALSE;",
          "2651:         wdh->bytes_dumped += 4;",
          "2654:         pcapng_debug3(\"pcapng_write_section_header_block, shb_user_appl:'%s' shb_user_appl_len %u shb_user_appl_pad_len %u\" , wdh->shb_hdr->shb_user_appl, shb_user_appl_len, shb_user_appl_pad_len);",
          "2655:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_user_appl, shb_user_appl_len, err))",
          "2656:             return FALSE;",
          "2657:         wdh->bytes_dumped += shb_user_appl_len;",
          "2660:         if (shb_user_appl_pad_len != 0) {",
          "2661:             if (!wtap_dump_file_write(wdh, &zero_pad, shb_user_appl_pad_len, err))",
          "2663:             wdh->bytes_dumped += shb_user_appl_pad_len;",
          "2664:         }",
          "2665:     }",
          "2668:     if (have_options) {",
          "2669:         option_hdr.type = OPT_EOFOPT;",
          "2670:         option_hdr.value_length = 0;",
          "2671:         if (!wtap_dump_file_write(wdh, &zero_pad, 4, err))",
          "2672:             return FALSE;",
          "2673:         wdh->bytes_dumped += 4;",
          "2674:     }",
          "2677:     if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "2678:                               sizeof bh.block_total_length, err))",
          "2679:         return FALSE;",
          "2680:     wdh->bytes_dumped += sizeof bh.block_total_length;",
          "2682:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2692: static gboolean",
          "2693: pcapng_write_if_descr_block(wtap_dumper *wdh, wtapng_if_descr_t *int_data, int *err)",
          "2694: {",
          "2725:         }",
          "2739:         }",
          "2790:         }",
          "2803:         }",
          "2809:         }",
          "2834:                 return FALSE;",
          "2925:         }",
          "2947:         }",
          "2981:         }",
          "3004:         }",
          "3012:         }",
          "3029: }",
          "3031: #define ISB_STARTTIME     2",
          "",
          "[Removed Lines]",
          "2695:         pcapng_block_header_t bh;",
          "2696:         pcapng_interface_description_block_t idb;",
          "2697:         const guint32 zero_pad = 0;",
          "2698:         gboolean have_options = FALSE;",
          "2700:         guint32 options_total_length = 0;",
          "2701:         guint32 comment_len = 0, if_name_len = 0, if_description_len = 0 , if_os_len = 0, if_filter_str_len = 0;",
          "2702:         guint32 comment_pad_len = 0, if_name_pad_len = 0, if_description_pad_len = 0, if_os_pad_len = 0, if_filter_str_pad_len = 0;",
          "2705:         pcapng_debug3(\"pcapng_write_if_descr_block: encap = %d (%s), snaplen = %d\",",
          "2706:                       int_data->link_type,",
          "2707:                       wtap_encap_string(wtap_pcap_encap_to_wtap_encap(int_data->link_type)),",
          "2708:                       int_data->snap_len);",
          "2710:         if (int_data->link_type == (guint16)-1) {",
          "2712:                 return FALSE;",
          "2713:         }",
          "2716:         if (int_data->opt_comment) {",
          "2717:                 have_options = TRUE;",
          "2718:                 comment_len = (guint32)strlen(int_data->opt_comment) & 0xffff;",
          "2719:                 if ((comment_len % 4)) {",
          "2720:                         comment_pad_len = 4 - (comment_len % 4);",
          "2721:                 } else {",
          "2722:                         comment_pad_len = 0;",
          "2723:                 }",
          "2724:                 options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "2730:         if (int_data->if_name) {",
          "2731:                 have_options = TRUE;",
          "2732:                 if_name_len = (guint32)strlen(int_data->if_name) & 0xffff;",
          "2733:                 if ((if_name_len % 4)) {",
          "2734:                         if_name_pad_len = 4 - (if_name_len % 4);",
          "2735:                 } else {",
          "2736:                         if_name_pad_len = 0;",
          "2737:                 }",
          "2738:                 options_total_length = options_total_length + if_name_len + if_name_pad_len + 4 /* comment options tag */ ;",
          "2744:         if (int_data->if_description) {",
          "2745:                 have_options = TRUE;",
          "2746:                 if_description_len = (guint32)strlen(int_data->if_description) & 0xffff;",
          "2747:                 if ((if_description_len % 4)) {",
          "2748:                         if_description_pad_len = 4 - (if_description_len % 4);",
          "2749:                 } else {",
          "2750:                         if_description_pad_len = 0;",
          "2751:                 }",
          "2752:                 options_total_length = options_total_length + if_description_len + if_description_pad_len + 4 /* comment options tag */ ;",
          "2753:         }",
          "2763:         if (int_data->if_speed != 0) {",
          "2764:                 have_options = TRUE;",
          "2765:                 options_total_length = options_total_length + 8 + 4;",
          "2766:         }",
          "2770:         if (int_data->if_tsresol != 0) {",
          "2771:                 have_options = TRUE;",
          "2772:                 options_total_length = options_total_length + 4 + 4;",
          "2773:         }",
          "2781:         if (int_data->if_filter_str) {",
          "2782:                 have_options = TRUE;",
          "2783:                 if_filter_str_len = (guint32)(strlen(int_data->if_filter_str) + 1) & 0xffff;",
          "2784:                 if ((if_filter_str_len % 4)) {",
          "2785:                         if_filter_str_pad_len = 4 - (if_filter_str_len % 4);",
          "2786:                 } else {",
          "2787:                         if_filter_str_pad_len = 0;",
          "2788:                 }",
          "2789:                 options_total_length = options_total_length + if_filter_str_len + if_filter_str_pad_len + 4 /* comment options tag */ ;",
          "2794:         if (int_data->if_os) {",
          "2795:                 have_options = TRUE;",
          "2796:                 if_os_len = (guint32)strlen(int_data->if_os) & 0xffff;",
          "2797:                 if ((if_os_len % 4)) {",
          "2798:                         if_os_pad_len = 4 - (if_os_len % 4);",
          "2799:                 } else {",
          "2800:                         if_os_pad_len = 0;",
          "2801:                 }",
          "2802:                 options_total_length = options_total_length + if_os_len + if_os_pad_len + 4 /* comment options tag */ ;",
          "2808:         if (int_data->if_fcslen != 0) {",
          "2815:         if (have_options) {",
          "2817:                 options_total_length += 4;",
          "2818:         }",
          "2821:         bh.block_type = BLOCK_TYPE_IDB;",
          "2822:         bh.block_total_length = (guint32)(sizeof(bh) + sizeof(idb) + options_total_length + 4);",
          "2824:         if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "2825:                 return FALSE;",
          "2826:         wdh->bytes_dumped += sizeof bh;",
          "2829:         idb.linktype    = int_data->link_type;",
          "2830:         idb.reserved    = 0;",
          "2831:         idb.snaplen     = int_data->snap_len;",
          "2833:         if (!wtap_dump_file_write(wdh, &idb, sizeof idb, err))",
          "2835:         wdh->bytes_dumped += sizeof idb;",
          "2838:         if (comment_len != 0) {",
          "2839:                 option_hdr.type         = OPT_COMMENT;",
          "2840:                 option_hdr.value_length = comment_len;",
          "2841:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2842:                         return FALSE;",
          "2843:                 wdh->bytes_dumped += 4;",
          "2846:                 pcapng_debug3(\"pcapng_write_if_descr_block, comment:'%s' comment_len %u comment_pad_len %u\" , int_data->opt_comment, comment_len, comment_pad_len);",
          "2847:                 if (!wtap_dump_file_write(wdh, int_data->opt_comment, comment_len, err))",
          "2848:                         return FALSE;",
          "2849:                 wdh->bytes_dumped += comment_len;",
          "2852:                 if (comment_pad_len != 0) {",
          "2853:                         if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "2854:                                 return FALSE;",
          "2855:                         wdh->bytes_dumped += comment_pad_len;",
          "2856:                 }",
          "2857:         }",
          "2861:         if (if_name_len !=0) {",
          "2862:                 option_hdr.type = IDB_OPT_IF_NAME;",
          "2863:                 option_hdr.value_length = if_name_len;",
          "2864:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2865:                         return FALSE;",
          "2866:                 wdh->bytes_dumped += 4;",
          "2869:                 pcapng_debug3(\"pcapng_write_if_descr_block, if_name:'%s' if_name_len %u if_name_pad_len %u\" , int_data->if_name, if_name_len, if_name_pad_len);",
          "2870:                 if (!wtap_dump_file_write(wdh, int_data->if_name, if_name_len, err))",
          "2871:                         return FALSE;",
          "2872:                 wdh->bytes_dumped += if_name_len;",
          "2875:                 if (if_name_pad_len != 0) {",
          "2876:                         if (!wtap_dump_file_write(wdh, &zero_pad, if_name_pad_len, err))",
          "2877:                                 return FALSE;",
          "2878:                         wdh->bytes_dumped += if_name_pad_len;",
          "2879:                 }",
          "2880:         }",
          "2884:         if (if_description_len != 0) {",
          "2885:                 option_hdr.type          = IDB_OPT_IF_NAME;",
          "2886:                 option_hdr.value_length = if_description_len;",
          "2887:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2888:                         return FALSE;",
          "2889:                 wdh->bytes_dumped += 4;",
          "2892:                 pcapng_debug3(\"pcapng_write_if_descr_block, if_description:'%s' if_description_len %u if_description_pad_len %u\" , int_data->if_description, if_description_len, if_description_pad_len);",
          "2893:                 if (!wtap_dump_file_write(wdh, int_data->if_description, if_description_len, err))",
          "2894:                         return FALSE;",
          "2895:                 wdh->bytes_dumped += if_description_len;",
          "2898:                 if (if_description_pad_len != 0) {",
          "2899:                         if (!wtap_dump_file_write(wdh, &zero_pad, if_description_pad_len, err))",
          "2900:                                 return FALSE;",
          "2901:                         wdh->bytes_dumped += if_description_pad_len;",
          "2902:                 }",
          "2903:         }",
          "2913:         if (int_data->if_speed != 0) {",
          "2914:                 option_hdr.type          = IDB_OPT_IF_SPEED;",
          "2915:                 option_hdr.value_length = 8;",
          "2916:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2917:                         return FALSE;",
          "2918:                 wdh->bytes_dumped += 4;",
          "2921:                 pcapng_debug1(\"pcapng_write_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", int_data->if_speed);",
          "2922:                 if (!wtap_dump_file_write(wdh, &int_data->if_speed, sizeof(guint64), err))",
          "2923:                         return FALSE;",
          "2924:                 wdh->bytes_dumped += 8;",
          "2932:         if (int_data->if_tsresol != 0) {",
          "2933:                 option_hdr.type          = IDB_OPT_IF_TSRESOL;",
          "2934:                 option_hdr.value_length = 1;",
          "2935:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2936:                         return FALSE;",
          "2937:                 wdh->bytes_dumped += 4;",
          "2940:                 pcapng_debug1(\"pcapng_write_if_descr_block: if_tsresol %u\", int_data->if_tsresol);",
          "2941:                 if (!wtap_dump_file_write(wdh, &int_data->if_tsresol, 1, err))",
          "2942:                         return FALSE;",
          "2943:                 wdh->bytes_dumped += 1;",
          "2944:                 if (!wtap_dump_file_write(wdh, &zero_pad, 3, err))",
          "2945:                         return FALSE;",
          "2946:                 wdh->bytes_dumped += 3;",
          "2955:         if (if_filter_str_len !=0) {",
          "2956:                 option_hdr.type          = IDB_OPT_IF_FILTER;",
          "2957:                 option_hdr.value_length = if_filter_str_len;",
          "2959:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2960:                         return FALSE;",
          "2961:                 wdh->bytes_dumped += 4;",
          "2964:                 if (!wtap_dump_file_write(wdh, &zero_pad, 1, err))",
          "2965:                         return FALSE;",
          "2966:                 wdh->bytes_dumped += 1;",
          "2969:                 pcapng_debug3(\"pcapng_write_if_descr_block, if_filter_str:'%s' if_filter_str_len %u if_filter_str_pad_len %u\" , int_data->if_filter_str, if_filter_str_len, if_filter_str_pad_len);",
          "2971:                 if (!wtap_dump_file_write(wdh, int_data->if_filter_str, if_filter_str_len-1, err))",
          "2972:                         return FALSE;",
          "2973:                 wdh->bytes_dumped += if_filter_str_len - 1;",
          "2976:                 if (if_filter_str_pad_len != 0) {",
          "2977:                         if (!wtap_dump_file_write(wdh, &zero_pad, if_filter_str_pad_len, err))",
          "2978:                                 return FALSE;",
          "2979:                         wdh->bytes_dumped += if_filter_str_pad_len;",
          "2980:                 }",
          "2985:         if (if_os_len != 0) {",
          "2986:                 option_hdr.type          = IDB_OPT_IF_OS;",
          "2987:                 option_hdr.value_length = if_os_len;",
          "2988:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2989:                         return FALSE;",
          "2990:                 wdh->bytes_dumped += 4;",
          "2993:                 pcapng_debug3(\"pcapng_write_if_descr_block, if_os:'%s' if_os_len %u if_os_pad_len %u\" , int_data->if_os, if_os_len, if_os_pad_len);",
          "2994:                 if (!wtap_dump_file_write(wdh, int_data->if_os, if_os_len, err))",
          "2995:                         return FALSE;",
          "2996:                 wdh->bytes_dumped += if_os_len;",
          "2999:                 if (if_os_pad_len != 0) {",
          "3000:                         if (!wtap_dump_file_write(wdh, &zero_pad, if_os_pad_len, err))",
          "3001:                                 return FALSE;",
          "3002:                         wdh->bytes_dumped += if_os_pad_len;",
          "3003:                 }",
          "3006:         if (have_options) {",
          "3007:                 option_hdr.type = OPT_EOFOPT;",
          "3008:                 option_hdr.value_length = 0;",
          "3009:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3010:                         return FALSE;",
          "3011:                 wdh->bytes_dumped += 4;",
          "3023:         if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "3024:             sizeof bh.block_total_length, err))",
          "3025:                 return FALSE;",
          "3026:         wdh->bytes_dumped += sizeof bh.block_total_length;",
          "3028:         return TRUE;",
          "",
          "[Added Lines]",
          "2695:     pcapng_block_header_t bh;",
          "2696:     pcapng_interface_description_block_t idb;",
          "2697:     const guint32 zero_pad = 0;",
          "2698:     gboolean have_options = FALSE;",
          "2700:     guint32 options_total_length = 0;",
          "2701:     guint32 comment_len = 0, if_name_len = 0, if_description_len = 0 , if_os_len = 0, if_filter_str_len = 0;",
          "2702:     guint32 comment_pad_len = 0, if_name_pad_len = 0, if_description_pad_len = 0, if_os_pad_len = 0, if_filter_str_pad_len = 0;",
          "2705:     pcapng_debug3(\"pcapng_write_if_descr_block: encap = %d (%s), snaplen = %d\",",
          "2706:                   int_data->link_type,",
          "2707:                   wtap_encap_string(wtap_pcap_encap_to_wtap_encap(int_data->link_type)),",
          "2708:                   int_data->snap_len);",
          "2710:     if (int_data->link_type == (guint16)-1) {",
          "2712:         return FALSE;",
          "2713:     }",
          "2716:     if (int_data->opt_comment) {",
          "2717:         have_options = TRUE;",
          "2718:         comment_len = (guint32)strlen(int_data->opt_comment) & 0xffff;",
          "2719:         if ((comment_len % 4)) {",
          "2720:             comment_pad_len = 4 - (comment_len % 4);",
          "2721:         } else {",
          "2722:             comment_pad_len = 0;",
          "2724:         options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "2725:     }",
          "2730:     if (int_data->if_name) {",
          "2731:         have_options = TRUE;",
          "2732:         if_name_len = (guint32)strlen(int_data->if_name) & 0xffff;",
          "2733:         if ((if_name_len % 4)) {",
          "2734:             if_name_pad_len = 4 - (if_name_len % 4);",
          "2735:         } else {",
          "2736:             if_name_pad_len = 0;",
          "2738:         options_total_length = options_total_length + if_name_len + if_name_pad_len + 4 /* comment options tag */ ;",
          "2739:     }",
          "2744:     if (int_data->if_description) {",
          "2745:         have_options = TRUE;",
          "2746:         if_description_len = (guint32)strlen(int_data->if_description) & 0xffff;",
          "2747:         if ((if_description_len % 4)) {",
          "2748:             if_description_pad_len = 4 - (if_description_len % 4);",
          "2749:         } else {",
          "2750:             if_description_pad_len = 0;",
          "2752:         options_total_length = options_total_length + if_description_len + if_description_pad_len + 4 /* comment options tag */ ;",
          "2753:     }",
          "2763:     if (int_data->if_speed != 0) {",
          "2764:         have_options = TRUE;",
          "2765:         options_total_length = options_total_length + 8 + 4;",
          "2766:     }",
          "2770:     if (int_data->if_tsresol != 0) {",
          "2771:         have_options = TRUE;",
          "2772:         options_total_length = options_total_length + 4 + 4;",
          "2773:     }",
          "2781:     if (int_data->if_filter_str) {",
          "2782:         have_options = TRUE;",
          "2783:         if_filter_str_len = (guint32)(strlen(int_data->if_filter_str) + 1) & 0xffff;",
          "2784:         if ((if_filter_str_len % 4)) {",
          "2785:             if_filter_str_pad_len = 4 - (if_filter_str_len % 4);",
          "2786:         } else {",
          "2787:             if_filter_str_pad_len = 0;",
          "2789:         options_total_length = options_total_length + if_filter_str_len + if_filter_str_pad_len + 4 /* comment options tag */ ;",
          "2790:     }",
          "2794:     if (int_data->if_os) {",
          "2795:         have_options = TRUE;",
          "2796:         if_os_len = (guint32)strlen(int_data->if_os) & 0xffff;",
          "2797:         if ((if_os_len % 4)) {",
          "2798:             if_os_pad_len = 4 - (if_os_len % 4);",
          "2799:         } else {",
          "2800:             if_os_pad_len = 0;",
          "2802:         options_total_length = options_total_length + if_os_len + if_os_pad_len + 4 /* comment options tag */ ;",
          "2803:     }",
          "2808:     if (int_data->if_fcslen != 0) {",
          "2809:     }",
          "2815:     if (have_options) {",
          "2817:         options_total_length += 4;",
          "2818:     }",
          "2821:     bh.block_type = BLOCK_TYPE_IDB;",
          "2822:     bh.block_total_length = (guint32)(sizeof(bh) + sizeof(idb) + options_total_length + 4);",
          "2824:     if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "2825:         return FALSE;",
          "2826:     wdh->bytes_dumped += sizeof bh;",
          "2829:     idb.linktype    = int_data->link_type;",
          "2830:     idb.reserved    = 0;",
          "2831:     idb.snaplen     = int_data->snap_len;",
          "2833:     if (!wtap_dump_file_write(wdh, &idb, sizeof idb, err))",
          "2834:         return FALSE;",
          "2835:     wdh->bytes_dumped += sizeof idb;",
          "2838:     if (comment_len != 0) {",
          "2839:         option_hdr.type         = OPT_COMMENT;",
          "2840:         option_hdr.value_length = comment_len;",
          "2841:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2842:             return FALSE;",
          "2843:         wdh->bytes_dumped += 4;",
          "2846:         pcapng_debug3(\"pcapng_write_if_descr_block, comment:'%s' comment_len %u comment_pad_len %u\" , int_data->opt_comment, comment_len, comment_pad_len);",
          "2847:         if (!wtap_dump_file_write(wdh, int_data->opt_comment, comment_len, err))",
          "2848:             return FALSE;",
          "2849:         wdh->bytes_dumped += comment_len;",
          "2852:         if (comment_pad_len != 0) {",
          "2853:             if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "2855:             wdh->bytes_dumped += comment_pad_len;",
          "2857:     }",
          "2861:     if (if_name_len !=0) {",
          "2862:         option_hdr.type = IDB_OPT_IF_NAME;",
          "2863:         option_hdr.value_length = if_name_len;",
          "2864:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2865:             return FALSE;",
          "2866:         wdh->bytes_dumped += 4;",
          "2869:         pcapng_debug3(\"pcapng_write_if_descr_block, if_name:'%s' if_name_len %u if_name_pad_len %u\" , int_data->if_name, if_name_len, if_name_pad_len);",
          "2870:         if (!wtap_dump_file_write(wdh, int_data->if_name, if_name_len, err))",
          "2871:             return FALSE;",
          "2872:         wdh->bytes_dumped += if_name_len;",
          "2875:         if (if_name_pad_len != 0) {",
          "2876:             if (!wtap_dump_file_write(wdh, &zero_pad, if_name_pad_len, err))",
          "2877:                 return FALSE;",
          "2878:             wdh->bytes_dumped += if_name_pad_len;",
          "2880:     }",
          "2884:     if (if_description_len != 0) {",
          "2885:         option_hdr.type          = IDB_OPT_IF_NAME;",
          "2886:         option_hdr.value_length = if_description_len;",
          "2887:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2888:             return FALSE;",
          "2889:         wdh->bytes_dumped += 4;",
          "2892:         pcapng_debug3(\"pcapng_write_if_descr_block, if_description:'%s' if_description_len %u if_description_pad_len %u\" , int_data->if_description, if_description_len, if_description_pad_len);",
          "2893:         if (!wtap_dump_file_write(wdh, int_data->if_description, if_description_len, err))",
          "2894:             return FALSE;",
          "2895:         wdh->bytes_dumped += if_description_len;",
          "2898:         if (if_description_pad_len != 0) {",
          "2899:             if (!wtap_dump_file_write(wdh, &zero_pad, if_description_pad_len, err))",
          "2900:                 return FALSE;",
          "2901:             wdh->bytes_dumped += if_description_pad_len;",
          "2903:     }",
          "2913:     if (int_data->if_speed != 0) {",
          "2914:         option_hdr.type          = IDB_OPT_IF_SPEED;",
          "2915:         option_hdr.value_length = 8;",
          "2916:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2917:             return FALSE;",
          "2918:         wdh->bytes_dumped += 4;",
          "2921:         pcapng_debug1(\"pcapng_write_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", int_data->if_speed);",
          "2922:         if (!wtap_dump_file_write(wdh, &int_data->if_speed, sizeof(guint64), err))",
          "2923:             return FALSE;",
          "2924:         wdh->bytes_dumped += 8;",
          "2925:     }",
          "2932:     if (int_data->if_tsresol != 0) {",
          "2933:         option_hdr.type          = IDB_OPT_IF_TSRESOL;",
          "2934:         option_hdr.value_length = 1;",
          "2935:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2936:             return FALSE;",
          "2937:         wdh->bytes_dumped += 4;",
          "2940:         pcapng_debug1(\"pcapng_write_if_descr_block: if_tsresol %u\", int_data->if_tsresol);",
          "2941:         if (!wtap_dump_file_write(wdh, &int_data->if_tsresol, 1, err))",
          "2942:             return FALSE;",
          "2943:         wdh->bytes_dumped += 1;",
          "2944:         if (!wtap_dump_file_write(wdh, &zero_pad, 3, err))",
          "2945:             return FALSE;",
          "2946:         wdh->bytes_dumped += 3;",
          "2947:     }",
          "2955:     if (if_filter_str_len !=0) {",
          "2956:         option_hdr.type          = IDB_OPT_IF_FILTER;",
          "2957:         option_hdr.value_length = if_filter_str_len;",
          "2959:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2960:             return FALSE;",
          "2961:         wdh->bytes_dumped += 4;",
          "2964:         if (!wtap_dump_file_write(wdh, &zero_pad, 1, err))",
          "2965:             return FALSE;",
          "2966:         wdh->bytes_dumped += 1;",
          "2969:         pcapng_debug3(\"pcapng_write_if_descr_block, if_filter_str:'%s' if_filter_str_len %u if_filter_str_pad_len %u\" , int_data->if_filter_str, if_filter_str_len, if_filter_str_pad_len);",
          "2971:         if (!wtap_dump_file_write(wdh, int_data->if_filter_str, if_filter_str_len-1, err))",
          "2972:             return FALSE;",
          "2973:         wdh->bytes_dumped += if_filter_str_len - 1;",
          "2976:         if (if_filter_str_pad_len != 0) {",
          "2977:             if (!wtap_dump_file_write(wdh, &zero_pad, if_filter_str_pad_len, err))",
          "2978:                 return FALSE;",
          "2979:             wdh->bytes_dumped += if_filter_str_pad_len;",
          "2981:     }",
          "2985:     if (if_os_len != 0) {",
          "2986:         option_hdr.type          = IDB_OPT_IF_OS;",
          "2987:         option_hdr.value_length = if_os_len;",
          "2988:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "2989:             return FALSE;",
          "2990:         wdh->bytes_dumped += 4;",
          "2993:         pcapng_debug3(\"pcapng_write_if_descr_block, if_os:'%s' if_os_len %u if_os_pad_len %u\" , int_data->if_os, if_os_len, if_os_pad_len);",
          "2994:         if (!wtap_dump_file_write(wdh, int_data->if_os, if_os_len, err))",
          "2995:             return FALSE;",
          "2996:         wdh->bytes_dumped += if_os_len;",
          "2999:         if (if_os_pad_len != 0) {",
          "3000:             if (!wtap_dump_file_write(wdh, &zero_pad, if_os_pad_len, err))",
          "3001:                 return FALSE;",
          "3002:             wdh->bytes_dumped += if_os_pad_len;",
          "3004:     }",
          "3006:     if (have_options) {",
          "3007:         option_hdr.type = OPT_EOFOPT;",
          "3008:         option_hdr.value_length = 0;",
          "3009:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3010:             return FALSE;",
          "3011:         wdh->bytes_dumped += 4;",
          "3012:     }",
          "3023:     if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "3024:                               sizeof bh.block_total_length, err))",
          "3025:         return FALSE;",
          "3026:     wdh->bytes_dumped += sizeof bh.block_total_length;",
          "3028:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3040: pcapng_write_interface_statistics_block(wtap_dumper *wdh, wtapng_if_stats_t *if_stats, int *err)",
          "3041: {",
          "3100:         }",
          "3123:                 return FALSE;",
          "3258:         }",
          "3276: }",
          "3279: static gboolean",
          "3280: pcapng_write_enhanced_packet_block(wtap_dumper *wdh,",
          "3283: {",
          "3305:         } else {",
          "3327:         }",
          "3451:         }",
          "3460: }",
          "",
          "[Removed Lines]",
          "3043:         pcapng_block_header_t bh;",
          "3044:         pcapng_interface_statistics_block_t isb;",
          "3045:         const guint32 zero_pad = 0;",
          "3046:         gboolean have_options = FALSE;",
          "3048:         guint32 options_total_length = 0;",
          "3049:         guint32 comment_len = 0;",
          "3050:         guint32 comment_pad_len = 0;",
          "3052:         pcapng_debug0(\"pcapng_write_interface_statistics_block\");",
          "3056:         if (if_stats->opt_comment) {",
          "3057:                 have_options = TRUE;",
          "3058:                 comment_len = (guint32)strlen(if_stats->opt_comment) & 0xffff;",
          "3059:                 if ((comment_len % 4)) {",
          "3060:                         comment_pad_len = 4 - (comment_len % 4);",
          "3061:                 } else {",
          "3062:                         comment_pad_len = 0;",
          "3063:                 }",
          "3064:                 options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "3065:         }",
          "3067:         if (if_stats->isb_starttime != 0) {",
          "3068:                 have_options = TRUE;",
          "3069:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3070:         }",
          "3072:         if (if_stats->isb_endtime != 0) {",
          "3073:                 have_options = TRUE;",
          "3074:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3075:         }",
          "3077:         if (if_stats->isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3078:                 have_options = TRUE;",
          "3079:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3080:         }",
          "3082:         if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3083:                 have_options = TRUE;",
          "3084:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3085:         }",
          "3087:         if (if_stats->isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3088:                 have_options = TRUE;",
          "3089:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3090:         }",
          "3092:         if (if_stats->isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3093:                 have_options = TRUE;",
          "3094:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3095:         }",
          "3097:         if (if_stats->isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3098:                 have_options = TRUE;",
          "3099:                 options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3103:         if (have_options) {",
          "3105:                 options_total_length += 4;",
          "3106:         }",
          "3109:         bh.block_type = BLOCK_TYPE_ISB;",
          "3110:         bh.block_total_length = (guint32)(sizeof(bh) + sizeof(isb) + options_total_length + 4);",
          "3112:         if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "3113:                 return FALSE;",
          "3114:         wdh->bytes_dumped += sizeof bh;",
          "3117:         isb.interface_id                = if_stats->interface_id;",
          "3118:         isb.timestamp_high              = if_stats->ts_high;",
          "3119:         isb.timestamp_low               = if_stats->ts_low;",
          "3122:         if (!wtap_dump_file_write(wdh, &isb, sizeof isb, err))",
          "3124:         wdh->bytes_dumped += sizeof isb;",
          "3127:         if (comment_len) {",
          "3128:                 option_hdr.type          = OPT_COMMENT;",
          "3129:                 option_hdr.value_length  = comment_len;",
          "3130:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3131:                         return FALSE;",
          "3132:                 wdh->bytes_dumped += 4;",
          "3135:                 pcapng_debug3(\"pcapng_write_interface_statistics_block, comment:'%s' comment_len %u comment_pad_len %u\" , if_stats->opt_comment, comment_len, comment_pad_len);",
          "3136:                 if (!wtap_dump_file_write(wdh, if_stats->opt_comment, comment_len, err))",
          "3137:                         return FALSE;",
          "3138:                 wdh->bytes_dumped += comment_len;",
          "3141:                 if (comment_pad_len != 0) {",
          "3142:                         if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "3143:                                 return FALSE;",
          "3144:                         wdh->bytes_dumped += comment_pad_len;",
          "3145:                 }",
          "3146:         }",
          "3148:         if (if_stats->isb_starttime != 0) {",
          "3149:                 guint32 high, low;",
          "3151:                 option_hdr.type = ISB_STARTTIME;",
          "3152:                 option_hdr.value_length = 8;",
          "3153:                 high = (guint32)((if_stats->isb_starttime>>32) & 0xffffffff);",
          "3154:                 low = (guint32)(if_stats->isb_starttime & 0xffffffff);",
          "3155:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3156:                         return FALSE;",
          "3157:                 wdh->bytes_dumped += 4;",
          "3160:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_starttime);",
          "3161:                 if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3162:                         return FALSE;",
          "3163:                 wdh->bytes_dumped += 4;",
          "3164:                 if (!wtap_dump_file_write(wdh, &low, 4, err))",
          "3165:                         return FALSE;",
          "3166:                 wdh->bytes_dumped += 4;",
          "3167:         }",
          "3169:         if (if_stats->isb_endtime != 0) {",
          "3170:                 guint32 high, low;",
          "3172:                 option_hdr.type = ISB_ENDTIME;",
          "3173:                 option_hdr.value_length = 8;",
          "3174:                 high = (guint32)((if_stats->isb_endtime>>32) & 0xffffffff);",
          "3175:                 low = (guint32)(if_stats->isb_endtime & 0xffffffff);",
          "3176:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3177:                         return FALSE;",
          "3178:                 wdh->bytes_dumped += 4;",
          "3181:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_endtime);",
          "3182:                 if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3183:                         return FALSE;",
          "3184:                 wdh->bytes_dumped += 4;",
          "3185:                 if (!wtap_dump_file_write(wdh, &low, 4, err))",
          "3186:                         return FALSE;",
          "3187:                 wdh->bytes_dumped += 4;",
          "3188:         }",
          "3190:         if (if_stats->isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3191:                 option_hdr.type          = ISB_IFRECV;",
          "3192:                 option_hdr.value_length  = 8;",
          "3193:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3194:                         return FALSE;",
          "3195:                 wdh->bytes_dumped += 4;",
          "3198:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_ifrecv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifrecv);",
          "3199:                 if (!wtap_dump_file_write(wdh, &if_stats->isb_ifrecv, 8, err))",
          "3200:                         return FALSE;",
          "3201:                 wdh->bytes_dumped += 8;",
          "3202:         }",
          "3204:         if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3205:                 option_hdr.type          = ISB_IFDROP;",
          "3206:                 option_hdr.value_length  = 8;",
          "3207:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3208:                         return FALSE;",
          "3209:                 wdh->bytes_dumped += 4;",
          "3212:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_ifdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifdrop);",
          "3213:                 if (!wtap_dump_file_write(wdh, &if_stats->isb_ifdrop, 8, err))",
          "3214:                         return FALSE;",
          "3215:                 wdh->bytes_dumped += 8;",
          "3216:         }",
          "3218:         if (if_stats->isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3219:                 option_hdr.type          = ISB_FILTERACCEPT;",
          "3220:                 option_hdr.value_length  = 8;",
          "3221:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3222:                         return FALSE;",
          "3223:                 wdh->bytes_dumped += 4;",
          "3226:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_filteraccept: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_filteraccept);",
          "3227:                 if (!wtap_dump_file_write(wdh, &if_stats->isb_filteraccept, 8, err))",
          "3228:                         return FALSE;",
          "3229:                 wdh->bytes_dumped += 8;",
          "3230:         }",
          "3232:         if (if_stats->isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3233:                 option_hdr.type          = ISB_OSDROP;",
          "3234:                 option_hdr.value_length  = 8;",
          "3235:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3236:                         return FALSE;",
          "3237:                 wdh->bytes_dumped += 4;",
          "3240:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_osdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_osdrop);",
          "3241:                 if (!wtap_dump_file_write(wdh, &if_stats->isb_osdrop, 8, err))",
          "3242:                         return FALSE;",
          "3243:                 wdh->bytes_dumped += 8;",
          "3244:         }",
          "3246:         if (if_stats->isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3247:                 option_hdr.type          = ISB_USRDELIV;",
          "3248:                 option_hdr.value_length  = 8;",
          "3249:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3250:                         return FALSE;",
          "3251:                 wdh->bytes_dumped += 4;",
          "3254:                 pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_usrdeliv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_usrdeliv);",
          "3255:                 if (!wtap_dump_file_write(wdh, &if_stats->isb_usrdeliv, 8, err))",
          "3256:                         return FALSE;",
          "3257:                 wdh->bytes_dumped += 8;",
          "3260:         if (have_options) {",
          "3261:                 option_hdr.type = OPT_EOFOPT;",
          "3262:                 option_hdr.value_length = 0;",
          "3263:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3264:                         return FALSE;",
          "3265:                 wdh->bytes_dumped += 4;",
          "3266:         }",
          "3269:         if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "3270:             sizeof bh.block_total_length, err))",
          "3271:                 return FALSE;",
          "3272:         wdh->bytes_dumped += sizeof bh.block_total_length;",
          "3274:         return TRUE;",
          "3281:     const struct wtap_pkthdr *phdr,",
          "3282:     const union wtap_pseudo_header *pseudo_header, const guint8 *pd, int *err)",
          "3284:         pcapng_block_header_t bh;",
          "3285:         pcapng_enhanced_packet_block_t epb;",
          "3286:         guint64 ts;",
          "3287:         const guint32 zero_pad = 0;",
          "3288:         guint32 pad_len;",
          "3289:         guint32 phdr_len;",
          "3290:         gboolean have_options = FALSE;",
          "3291:         guint32 options_total_length = 0;",
          "3292:         struct option option_hdr;",
          "3293:         guint32 comment_len = 0, comment_pad_len = 0;",
          "3294:         wtapng_if_descr_t int_data;",
          "3297:  if (phdr->caplen > WTAP_MAX_PACKET_SIZE) {",
          "3299:   return FALSE;",
          "3300:  }",
          "3302:         phdr_len = (guint32)pcap_get_phdr_size(phdr->pkt_encap, pseudo_header);",
          "3303:         if ((phdr_len + phdr->caplen) % 4) {",
          "3304:                 pad_len = 4 - ((phdr_len + phdr->caplen) % 4);",
          "3306:                 pad_len = 0;",
          "3307:         }",
          "3310:         if (phdr->opt_comment) {",
          "3311:                 have_options = TRUE;",
          "3312:                 comment_len = (guint32)strlen(phdr->opt_comment) & 0xffff;",
          "3313:                 if ((comment_len % 4)) {",
          "3314:                         comment_pad_len = 4 - (comment_len % 4);",
          "3315:                 } else {",
          "3316:                         comment_pad_len = 0;",
          "3317:                 }",
          "3318:                 options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "3319:         }",
          "3320:         if (phdr->presence_flags & WTAP_HAS_PACK_FLAGS) {",
          "3321:                 have_options = TRUE;",
          "3322:                 options_total_length = options_total_length + 8;",
          "3323:         }",
          "3324:         if (have_options) {",
          "3326:                 options_total_length += 4;",
          "3330:         bh.block_type = BLOCK_TYPE_EPB;",
          "3331:         bh.block_total_length = (guint32)sizeof(bh) + (guint32)sizeof(epb) + phdr_len + phdr->caplen + pad_len + options_total_length + 4;",
          "3333:         if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "3334:                 return FALSE;",
          "3335:         wdh->bytes_dumped += sizeof bh;",
          "3338:         if (phdr->presence_flags & WTAP_HAS_INTERFACE_ID)",
          "3339:                 epb.interface_id        = phdr->interface_id;",
          "3340:         else {",
          "3346:                 epb.interface_id        = 0;",
          "3347:         }",
          "3352:         if (epb.interface_id >= wdh->interface_data->len) {",
          "3357:                 return FALSE;",
          "3358:         }",
          "3359:         int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t,",
          "3360:             epb.interface_id);",
          "3361:         ts = ((guint64)phdr->ts.secs) * int_data.time_units_per_second +",
          "3362:              (((guint64)phdr->ts.nsecs) * int_data.time_units_per_second) / 1000000000;",
          "3363:         epb.timestamp_high      = (guint32)(ts >> 32);",
          "3364:         epb.timestamp_low       = (guint32)ts;",
          "3365:         epb.captured_len        = phdr->caplen + phdr_len;",
          "3366:         epb.packet_len          = phdr->len + phdr_len;",
          "3368:         if (!wtap_dump_file_write(wdh, &epb, sizeof epb, err))",
          "3369:                 return FALSE;",
          "3370:         wdh->bytes_dumped += sizeof epb;",
          "3373:         if (!pcap_write_phdr(wdh, phdr->pkt_encap, pseudo_header, err)) {",
          "3374:                 return FALSE;",
          "3375:         }",
          "3376:         wdh->bytes_dumped += phdr_len;",
          "3379:         if (!wtap_dump_file_write(wdh, pd, phdr->caplen, err))",
          "3380:                 return FALSE;",
          "3381:         wdh->bytes_dumped += phdr->caplen;",
          "3384:         if (pad_len != 0) {",
          "3385:                 if (!wtap_dump_file_write(wdh, &zero_pad, pad_len, err))",
          "3386:                         return FALSE;",
          "3387:                 wdh->bytes_dumped += pad_len;",
          "3388:         }",
          "3411:         if (phdr->opt_comment) {",
          "3412:                 option_hdr.type         = OPT_COMMENT;",
          "3413:                 option_hdr.value_length = comment_len;",
          "3414:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3415:                         return FALSE;",
          "3416:                 wdh->bytes_dumped += 4;",
          "3419:                 pcapng_debug3(\"pcapng_write_enhanced_packet_block, comment:'%s' comment_len %u comment_pad_len %u\" , phdr->opt_comment, comment_len, comment_pad_len);",
          "3420:                 if (!wtap_dump_file_write(wdh, phdr->opt_comment, comment_len, err))",
          "3421:                         return FALSE;",
          "3422:                 wdh->bytes_dumped += comment_len;",
          "3425:                 if (comment_pad_len != 0) {",
          "3426:                         if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "3427:                                 return FALSE;",
          "3428:                         wdh->bytes_dumped += comment_pad_len;",
          "3429:                 }",
          "3431:                 pcapng_debug2(\"pcapng_write_enhanced_packet_block: Wrote Options comments: comment_len %u, comment_pad_len %u\",",
          "3432:                         comment_len,",
          "3433:                         comment_pad_len);",
          "3434:         }",
          "3435:         if (phdr->presence_flags & WTAP_HAS_PACK_FLAGS) {",
          "3436:                 option_hdr.type         = OPT_EPB_FLAGS;",
          "3437:                 option_hdr.value_length = 4;",
          "3438:                 if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3439:                         return FALSE;",
          "3440:                 wdh->bytes_dumped += 4;",
          "3441:                 if (!wtap_dump_file_write(wdh, &phdr->pack_flags, 4, err))",
          "3442:                         return FALSE;",
          "3443:                 wdh->bytes_dumped += 4;",
          "3444:                 pcapng_debug1(\"pcapng_write_enhanced_packet_block: Wrote Options packet flags: %x\", phdr->pack_flags);",
          "3445:         }",
          "3447:         if (have_options) {",
          "3448:                 if (!wtap_dump_file_write(wdh, &zero_pad, 4, err))",
          "3449:                         return FALSE;",
          "3450:                 wdh->bytes_dumped += 4;",
          "3454:         if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "3455:             sizeof bh.block_total_length, err))",
          "3456:                 return FALSE;",
          "3457:         wdh->bytes_dumped += sizeof bh.block_total_length;",
          "3459:         return TRUE;",
          "",
          "[Added Lines]",
          "3043:     pcapng_block_header_t bh;",
          "3044:     pcapng_interface_statistics_block_t isb;",
          "3045:     const guint32 zero_pad = 0;",
          "3046:     gboolean have_options = FALSE;",
          "3048:     guint32 options_total_length = 0;",
          "3049:     guint32 comment_len = 0;",
          "3050:     guint32 comment_pad_len = 0;",
          "3052:     pcapng_debug0(\"pcapng_write_interface_statistics_block\");",
          "3056:     if (if_stats->opt_comment) {",
          "3057:         have_options = TRUE;",
          "3058:         comment_len = (guint32)strlen(if_stats->opt_comment) & 0xffff;",
          "3059:         if ((comment_len % 4)) {",
          "3060:             comment_pad_len = 4 - (comment_len % 4);",
          "3061:         } else {",
          "3062:             comment_pad_len = 0;",
          "3064:         options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "3065:     }",
          "3067:     if (if_stats->isb_starttime != 0) {",
          "3068:         have_options = TRUE;",
          "3069:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3070:     }",
          "3072:     if (if_stats->isb_endtime != 0) {",
          "3073:         have_options = TRUE;",
          "3074:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3075:     }",
          "3077:     if (if_stats->isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3078:         have_options = TRUE;",
          "3079:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3080:     }",
          "3082:     if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3083:         have_options = TRUE;",
          "3084:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3085:     }",
          "3087:     if (if_stats->isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3088:         have_options = TRUE;",
          "3089:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3090:     }",
          "3092:     if (if_stats->isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3093:         have_options = TRUE;",
          "3094:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3095:     }",
          "3097:     if (if_stats->isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3098:         have_options = TRUE;",
          "3099:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3100:     }",
          "3103:     if (have_options) {",
          "3105:         options_total_length += 4;",
          "3106:     }",
          "3109:     bh.block_type = BLOCK_TYPE_ISB;",
          "3110:     bh.block_total_length = (guint32)(sizeof(bh) + sizeof(isb) + options_total_length + 4);",
          "3112:     if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "3113:         return FALSE;",
          "3114:     wdh->bytes_dumped += sizeof bh;",
          "3117:     isb.interface_id                = if_stats->interface_id;",
          "3118:     isb.timestamp_high              = if_stats->ts_high;",
          "3119:     isb.timestamp_low               = if_stats->ts_low;",
          "3122:     if (!wtap_dump_file_write(wdh, &isb, sizeof isb, err))",
          "3123:         return FALSE;",
          "3124:     wdh->bytes_dumped += sizeof isb;",
          "3127:     if (comment_len) {",
          "3128:         option_hdr.type          = OPT_COMMENT;",
          "3129:         option_hdr.value_length  = comment_len;",
          "3130:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3131:             return FALSE;",
          "3132:         wdh->bytes_dumped += 4;",
          "3135:         pcapng_debug3(\"pcapng_write_interface_statistics_block, comment:'%s' comment_len %u comment_pad_len %u\" , if_stats->opt_comment, comment_len, comment_pad_len);",
          "3136:         if (!wtap_dump_file_write(wdh, if_stats->opt_comment, comment_len, err))",
          "3137:             return FALSE;",
          "3138:         wdh->bytes_dumped += comment_len;",
          "3141:         if (comment_pad_len != 0) {",
          "3142:             if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "3144:             wdh->bytes_dumped += comment_pad_len;",
          "3146:     }",
          "3148:     if (if_stats->isb_starttime != 0) {",
          "3149:         guint32 high, low;",
          "3151:         option_hdr.type = ISB_STARTTIME;",
          "3152:         option_hdr.value_length = 8;",
          "3153:         high = (guint32)((if_stats->isb_starttime>>32) & 0xffffffff);",
          "3154:         low = (guint32)(if_stats->isb_starttime & 0xffffffff);",
          "3155:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3156:             return FALSE;",
          "3157:         wdh->bytes_dumped += 4;",
          "3160:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_starttime);",
          "3161:         if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3162:             return FALSE;",
          "3163:         wdh->bytes_dumped += 4;",
          "3164:         if (!wtap_dump_file_write(wdh, &low, 4, err))",
          "3165:             return FALSE;",
          "3166:         wdh->bytes_dumped += 4;",
          "3167:     }",
          "3169:     if (if_stats->isb_endtime != 0) {",
          "3170:         guint32 high, low;",
          "3172:         option_hdr.type = ISB_ENDTIME;",
          "3173:         option_hdr.value_length = 8;",
          "3174:         high = (guint32)((if_stats->isb_endtime>>32) & 0xffffffff);",
          "3175:         low = (guint32)(if_stats->isb_endtime & 0xffffffff);",
          "3176:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3177:             return FALSE;",
          "3178:         wdh->bytes_dumped += 4;",
          "3181:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_endtime);",
          "3182:         if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3183:             return FALSE;",
          "3184:         wdh->bytes_dumped += 4;",
          "3185:         if (!wtap_dump_file_write(wdh, &low, 4, err))",
          "3186:             return FALSE;",
          "3187:         wdh->bytes_dumped += 4;",
          "3188:     }",
          "3190:     if (if_stats->isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3191:         option_hdr.type          = ISB_IFRECV;",
          "3192:         option_hdr.value_length  = 8;",
          "3193:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3194:             return FALSE;",
          "3195:         wdh->bytes_dumped += 4;",
          "3198:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_ifrecv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifrecv);",
          "3199:         if (!wtap_dump_file_write(wdh, &if_stats->isb_ifrecv, 8, err))",
          "3200:             return FALSE;",
          "3201:         wdh->bytes_dumped += 8;",
          "3202:     }",
          "3204:     if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3205:         option_hdr.type          = ISB_IFDROP;",
          "3206:         option_hdr.value_length  = 8;",
          "3207:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3208:             return FALSE;",
          "3209:         wdh->bytes_dumped += 4;",
          "3212:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_ifdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifdrop);",
          "3213:         if (!wtap_dump_file_write(wdh, &if_stats->isb_ifdrop, 8, err))",
          "3214:             return FALSE;",
          "3215:         wdh->bytes_dumped += 8;",
          "3216:     }",
          "3218:     if (if_stats->isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3219:         option_hdr.type          = ISB_FILTERACCEPT;",
          "3220:         option_hdr.value_length  = 8;",
          "3221:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3222:             return FALSE;",
          "3223:         wdh->bytes_dumped += 4;",
          "3226:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_filteraccept: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_filteraccept);",
          "3227:         if (!wtap_dump_file_write(wdh, &if_stats->isb_filteraccept, 8, err))",
          "3228:             return FALSE;",
          "3229:         wdh->bytes_dumped += 8;",
          "3230:     }",
          "3232:     if (if_stats->isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3233:         option_hdr.type          = ISB_OSDROP;",
          "3234:         option_hdr.value_length  = 8;",
          "3235:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3236:             return FALSE;",
          "3237:         wdh->bytes_dumped += 4;",
          "3240:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_osdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_osdrop);",
          "3241:         if (!wtap_dump_file_write(wdh, &if_stats->isb_osdrop, 8, err))",
          "3242:             return FALSE;",
          "3243:         wdh->bytes_dumped += 8;",
          "3244:     }",
          "3246:     if (if_stats->isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3247:         option_hdr.type          = ISB_USRDELIV;",
          "3248:         option_hdr.value_length  = 8;",
          "3249:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3250:             return FALSE;",
          "3251:         wdh->bytes_dumped += 4;",
          "3254:         pcapng_debug1(\"pcapng_write_interface_statistics_block, isb_usrdeliv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_usrdeliv);",
          "3255:         if (!wtap_dump_file_write(wdh, &if_stats->isb_usrdeliv, 8, err))",
          "3256:             return FALSE;",
          "3257:         wdh->bytes_dumped += 8;",
          "3258:     }",
          "3260:     if (have_options) {",
          "3261:         option_hdr.type = OPT_EOFOPT;",
          "3262:         option_hdr.value_length = 0;",
          "3263:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3264:             return FALSE;",
          "3265:         wdh->bytes_dumped += 4;",
          "3266:     }",
          "3269:     if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "3270:                               sizeof bh.block_total_length, err))",
          "3271:         return FALSE;",
          "3272:     wdh->bytes_dumped += sizeof bh.block_total_length;",
          "3274:     return TRUE;",
          "3281:                                    const struct wtap_pkthdr *phdr,",
          "3282:                                    const union wtap_pseudo_header *pseudo_header, const guint8 *pd, int *err)",
          "3284:     pcapng_block_header_t bh;",
          "3285:     pcapng_enhanced_packet_block_t epb;",
          "3286:     guint64 ts;",
          "3287:     const guint32 zero_pad = 0;",
          "3288:     guint32 pad_len;",
          "3289:     guint32 phdr_len;",
          "3290:     gboolean have_options = FALSE;",
          "3291:     guint32 options_total_length = 0;",
          "3292:     struct option option_hdr;",
          "3293:     guint32 comment_len = 0, comment_pad_len = 0;",
          "3294:     wtapng_if_descr_t int_data;",
          "3297:     if (phdr->caplen > WTAP_MAX_PACKET_SIZE) {",
          "3299:         return FALSE;",
          "3300:     }",
          "3302:     phdr_len = (guint32)pcap_get_phdr_size(phdr->pkt_encap, pseudo_header);",
          "3303:     if ((phdr_len + phdr->caplen) % 4) {",
          "3304:         pad_len = 4 - ((phdr_len + phdr->caplen) % 4);",
          "3305:     } else {",
          "3306:         pad_len = 0;",
          "3307:     }",
          "3310:     if (phdr->opt_comment) {",
          "3311:         have_options = TRUE;",
          "3312:         comment_len = (guint32)strlen(phdr->opt_comment) & 0xffff;",
          "3313:         if ((comment_len % 4)) {",
          "3314:             comment_pad_len = 4 - (comment_len % 4);",
          "3316:             comment_pad_len = 0;",
          "3318:         options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "3319:     }",
          "3320:     if (phdr->presence_flags & WTAP_HAS_PACK_FLAGS) {",
          "3321:         have_options = TRUE;",
          "3322:         options_total_length = options_total_length + 8;",
          "3323:     }",
          "3324:     if (have_options) {",
          "3326:         options_total_length += 4;",
          "3327:     }",
          "3330:     bh.block_type = BLOCK_TYPE_EPB;",
          "3331:     bh.block_total_length = (guint32)sizeof(bh) + (guint32)sizeof(epb) + phdr_len + phdr->caplen + pad_len + options_total_length + 4;",
          "3333:     if (!wtap_dump_file_write(wdh, &bh, sizeof bh, err))",
          "3334:         return FALSE;",
          "3335:     wdh->bytes_dumped += sizeof bh;",
          "3338:     if (phdr->presence_flags & WTAP_HAS_INTERFACE_ID)",
          "3339:         epb.interface_id        = phdr->interface_id;",
          "3340:     else {",
          "3346:         epb.interface_id        = 0;",
          "3347:     }",
          "3352:     if (epb.interface_id >= wdh->interface_data->len) {",
          "3357:         return FALSE;",
          "3358:     }",
          "3359:     int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t,",
          "3360:                              epb.interface_id);",
          "3361:     ts = ((guint64)phdr->ts.secs) * int_data.time_units_per_second +",
          "3362:         (((guint64)phdr->ts.nsecs) * int_data.time_units_per_second) / 1000000000;",
          "3363:     epb.timestamp_high      = (guint32)(ts >> 32);",
          "3364:     epb.timestamp_low       = (guint32)ts;",
          "3365:     epb.captured_len        = phdr->caplen + phdr_len;",
          "3366:     epb.packet_len          = phdr->len + phdr_len;",
          "3368:     if (!wtap_dump_file_write(wdh, &epb, sizeof epb, err))",
          "3369:         return FALSE;",
          "3370:     wdh->bytes_dumped += sizeof epb;",
          "3373:     if (!pcap_write_phdr(wdh, phdr->pkt_encap, pseudo_header, err)) {",
          "3374:         return FALSE;",
          "3375:     }",
          "3376:     wdh->bytes_dumped += phdr_len;",
          "3379:     if (!wtap_dump_file_write(wdh, pd, phdr->caplen, err))",
          "3380:         return FALSE;",
          "3381:     wdh->bytes_dumped += phdr->caplen;",
          "3384:     if (pad_len != 0) {",
          "3385:         if (!wtap_dump_file_write(wdh, &zero_pad, pad_len, err))",
          "3386:             return FALSE;",
          "3387:         wdh->bytes_dumped += pad_len;",
          "3388:     }",
          "3411:     if (phdr->opt_comment) {",
          "3412:         option_hdr.type         = OPT_COMMENT;",
          "3413:         option_hdr.value_length = comment_len;",
          "3414:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3415:             return FALSE;",
          "3416:         wdh->bytes_dumped += 4;",
          "3419:         pcapng_debug3(\"pcapng_write_enhanced_packet_block, comment:'%s' comment_len %u comment_pad_len %u\" , phdr->opt_comment, comment_len, comment_pad_len);",
          "3420:         if (!wtap_dump_file_write(wdh, phdr->opt_comment, comment_len, err))",
          "3421:             return FALSE;",
          "3422:         wdh->bytes_dumped += comment_len;",
          "3425:         if (comment_pad_len != 0) {",
          "3426:             if (!wtap_dump_file_write(wdh, &zero_pad, comment_pad_len, err))",
          "3427:                 return FALSE;",
          "3428:             wdh->bytes_dumped += comment_pad_len;",
          "3431:         pcapng_debug2(\"pcapng_write_enhanced_packet_block: Wrote Options comments: comment_len %u, comment_pad_len %u\",",
          "3432:                       comment_len,",
          "3433:                       comment_pad_len);",
          "3434:     }",
          "3435:     if (phdr->presence_flags & WTAP_HAS_PACK_FLAGS) {",
          "3436:         option_hdr.type         = OPT_EPB_FLAGS;",
          "3437:         option_hdr.value_length = 4;",
          "3438:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3439:             return FALSE;",
          "3440:         wdh->bytes_dumped += 4;",
          "3441:         if (!wtap_dump_file_write(wdh, &phdr->pack_flags, 4, err))",
          "3442:             return FALSE;",
          "3443:         wdh->bytes_dumped += 4;",
          "3444:         pcapng_debug1(\"pcapng_write_enhanced_packet_block: Wrote Options packet flags: %x\", phdr->pack_flags);",
          "3445:     }",
          "3447:     if (have_options) {",
          "3448:         if (!wtap_dump_file_write(wdh, &zero_pad, 4, err))",
          "3449:             return FALSE;",
          "3450:         wdh->bytes_dumped += 4;",
          "3451:     }",
          "3454:     if (!wtap_dump_file_write(wdh, &bh.block_total_length,",
          "3455:                               sizeof bh.block_total_length, err))",
          "3456:         return FALSE;",
          "3457:     wdh->bytes_dumped += sizeof bh.block_total_length;",
          "3459:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3610: }",
          "3612: static gboolean pcapng_dump(wtap_dumper *wdh,",
          "3615: {",
          "3617: #ifdef HAVE_PLUGINS",
          "3619: #endif",
          "3630:         case REC_TYPE_PACKET:",
          "3636:         case REC_TYPE_FT_SPECIFIC_EVENT:",
          "3637:         case REC_TYPE_FT_SPECIFIC_REPORT:",
          "3638: #ifdef HAVE_PLUGINS",
          "3649: #endif",
          "3660:                 return FALSE;",
          "3664: }",
          "",
          "[Removed Lines]",
          "3613:         const struct wtap_pkthdr *phdr,",
          "3614:         const guint8 *pd, int *err)",
          "3616:         const union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "3618:         block_handler *handler;",
          "3621:         pcapng_debug2(\"pcapng_dump: encap = %d (%s)\",",
          "3622:                       phdr->pkt_encap,",
          "3623:                       wtap_encap_string(phdr->pkt_encap));",
          "3626:         pcapng_write_name_resolution_block(wdh, err);",
          "3628:         switch (phdr->rec_type) {",
          "3631:                 if (!pcapng_write_enhanced_packet_block(wdh, phdr, pseudo_header, pd, err)) {",
          "3632:                         return FALSE;",
          "3633:                 }",
          "3634:                 break;",
          "3642:                 handler = (block_handler *)g_hash_table_lookup(block_handlers,",
          "3643:                                                                GUINT_TO_POINTER(pseudo_header->ftsrec.record_type));",
          "3644:                 if (handler != NULL) {",
          "3646:                         if (!handler->write(wdh, phdr, pd, err))",
          "3647:                                 return FALSE;",
          "3648:                 } else",
          "3650:                 {",
          "3653:                         return FALSE;",
          "3654:                 }",
          "3655:                 break;",
          "3657:         default:",
          "3661:         }",
          "3663:         return TRUE;",
          "",
          "[Added Lines]",
          "3613:                             const struct wtap_pkthdr *phdr,",
          "3614:                             const guint8 *pd, int *err)",
          "3616:     const union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "3618:     block_handler *handler;",
          "3621:     pcapng_debug2(\"pcapng_dump: encap = %d (%s)\",",
          "3622:                   phdr->pkt_encap,",
          "3623:                   wtap_encap_string(phdr->pkt_encap));",
          "3626:     pcapng_write_name_resolution_block(wdh, err);",
          "3628:     switch (phdr->rec_type) {",
          "3631:             if (!pcapng_write_enhanced_packet_block(wdh, phdr, pseudo_header, pd, err)) {",
          "3632:                 return FALSE;",
          "3633:             }",
          "3634:             break;",
          "3642:             handler = (block_handler *)g_hash_table_lookup(block_handlers,",
          "3643:                                                            GUINT_TO_POINTER(pseudo_header->ftsrec.record_type));",
          "3644:             if (handler != NULL) {",
          "3646:                 if (!handler->write(wdh, phdr, pd, err))",
          "3647:                     return FALSE;",
          "3648:             } else",
          "3650:             {",
          "3654:             }",
          "3655:             break;",
          "3657:         default:",
          "3660:             return FALSE;",
          "3661:     }",
          "3663:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3669: static gboolean pcapng_dump_close(wtap_dumper *wdh, int *err _U_)",
          "3670: {",
          "3688:         }",
          "3692: }",
          "",
          "[Removed Lines]",
          "3671:         guint i, j;",
          "3673:         for (i = 0; i < wdh->interface_data->len; i++) {",
          "3676:                 wtapng_if_descr_t int_data;",
          "3678:                 int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3679:                 for (j = 0; j < int_data.num_stat_entries; j++) {",
          "3680:                         wtapng_if_stats_t if_stats;",
          "3682:                         if_stats = g_array_index(int_data.interface_statistics, wtapng_if_stats_t, j);",
          "3683:                         pcapng_debug1(\"pcapng_dump_close: write ISB for interface %u\",if_stats.interface_id);",
          "3684:                         if (!pcapng_write_interface_statistics_block(wdh, &if_stats, err)) {",
          "3685:                                 return FALSE;",
          "3686:                         }",
          "3687:                 }",
          "3690:         pcapng_debug0(\"pcapng_dump_close\");",
          "3691:         return TRUE;",
          "",
          "[Added Lines]",
          "3671:     guint i, j;",
          "3673:     for (i = 0; i < wdh->interface_data->len; i++) {",
          "3676:         wtapng_if_descr_t int_data;",
          "3678:         int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3679:         for (j = 0; j < int_data.num_stat_entries; j++) {",
          "3680:             wtapng_if_stats_t if_stats;",
          "3682:             if_stats = g_array_index(int_data.interface_statistics, wtapng_if_stats_t, j);",
          "3683:             pcapng_debug1(\"pcapng_dump_close: write ISB for interface %u\",if_stats.interface_id);",
          "3684:             if (!pcapng_write_interface_statistics_block(wdh, &if_stats, err)) {",
          "3685:                 return FALSE;",
          "3686:             }",
          "3688:     }",
          "3690:     pcapng_debug0(\"pcapng_dump_close\");",
          "3691:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3697: gboolean",
          "3698: pcapng_dump_open(wtap_dumper *wdh, int *err)",
          "3699: {",
          "3734:         }",
          "3737: }",
          "",
          "[Removed Lines]",
          "3700:         guint i;",
          "3702:         pcapng_debug0(\"pcapng_dump_open\");",
          "3704:         wdh->subtype_write = pcapng_dump;",
          "3705:         wdh->subtype_close = pcapng_dump_close;",
          "3707:         if (wdh->interface_data->len == 0) {",
          "3708:                 pcapng_debug0(\"There are no interfaces. Can't handle that...\");",
          "3710:                 return FALSE;",
          "3711:         }",
          "3714:         if (!pcapng_write_section_header_block(wdh, err)) {",
          "3715:                 return FALSE;",
          "3716:         }",
          "3717:         pcapng_debug0(\"pcapng_dump_open: wrote section header block.\");",
          "3720:         pcapng_debug1(\"pcapng_dump_open: Number of IDB:s to write (number of interfaces) %u\",",
          "3721:                 wdh->interface_data->len);",
          "3723:         for (i = 0; i < wdh->interface_data->len; i++) {",
          "3726:                 wtapng_if_descr_t int_data;",
          "3728:                 int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3730:                 if (!pcapng_write_if_descr_block(wdh, &int_data, err)) {",
          "3731:                         return FALSE;",
          "3732:                 }",
          "3736:         return TRUE;",
          "",
          "[Added Lines]",
          "3700:     guint i;",
          "3702:     pcapng_debug0(\"pcapng_dump_open\");",
          "3704:     wdh->subtype_write = pcapng_dump;",
          "3705:     wdh->subtype_close = pcapng_dump_close;",
          "3707:     if (wdh->interface_data->len == 0) {",
          "3708:         pcapng_debug0(\"There are no interfaces. Can't handle that...\");",
          "3710:         return FALSE;",
          "3711:     }",
          "3714:     if (!pcapng_write_section_header_block(wdh, err)) {",
          "3715:         return FALSE;",
          "3716:     }",
          "3717:     pcapng_debug0(\"pcapng_dump_open: wrote section header block.\");",
          "3720:     pcapng_debug1(\"pcapng_dump_open: Number of IDB:s to write (number of interfaces) %u\",",
          "3721:                   wdh->interface_data->len);",
          "3723:     for (i = 0; i < wdh->interface_data->len; i++) {",
          "3726:         wtapng_if_descr_t int_data;",
          "3728:         int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "3730:         if (!pcapng_write_if_descr_block(wdh, &int_data, err)) {",
          "3731:             return FALSE;",
          "3734:     }",
          "3736:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3742: int pcapng_dump_can_write_encap(int wtap_encap)",
          "3743: {",
          "3757: }",
          "",
          "[Removed Lines]",
          "3744:         pcapng_debug2(\"pcapng_dump_can_write_encap: encap = %d (%s)\",",
          "3745:                       wtap_encap,",
          "3746:                       wtap_encap_string(wtap_encap));",
          "3749:         if (wtap_encap == WTAP_ENCAP_PER_PACKET)",
          "3750:                 return 0;",
          "3753:         if (wtap_wtap_encap_to_pcap_encap(wtap_encap) == -1)",
          "3754:                 return WTAP_ERR_UNSUPPORTED_ENCAP;",
          "3756:         return 0;",
          "",
          "[Added Lines]",
          "3744:     pcapng_debug2(\"pcapng_dump_can_write_encap: encap = %d (%s)\",",
          "3745:                   wtap_encap,",
          "3746:                   wtap_encap_string(wtap_encap));",
          "3749:     if (wtap_encap == WTAP_ENCAP_PER_PACKET)",
          "3750:         return 0;",
          "3753:     if (wtap_wtap_encap_to_pcap_encap(wtap_encap) == -1)",
          "3754:         return WTAP_ERR_UNSUPPORTED_ENCAP;",
          "3756:     return 0;",
          "",
          "---------------"
        ],
        "wiretap/vwr.c||wiretap/vwr.c": [
          "File: wiretap/vwr.c -> wiretap/vwr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427: typedef struct {",
          "491: } vwr_t;",
          "",
          "[Removed Lines]",
          "453:         guint32      FRAME_TYPE_OFF;",
          "470:         guint16      QOS_VALID;",
          "478:         guint32      FPGA_VERSION;",
          "479:         guint32      HEADER_IS_RX;",
          "480:         guint32      HEADER_IS_TX;",
          "484:         guint32      IS_TCP;",
          "485:         guint32      IS_UDP;",
          "486:         guint32      IS_ICMP;",
          "487:         guint32      IS_IGMP;",
          "488:         guint16      IS_QOS;",
          "489:         guint32      IS_VLAN;",
          "490:         guint32      MPDU_OFF;",
          "",
          "[Added Lines]",
          "453:     guint32      FRAME_TYPE_OFF;",
          "470:     guint16      QOS_VALID;",
          "478:     guint32      FPGA_VERSION;",
          "479:     guint32      HEADER_IS_RX;",
          "480:     guint32      HEADER_IS_TX;",
          "484:     guint32      IS_TCP;",
          "485:     guint32      IS_UDP;",
          "486:     guint32      IS_ICMP;",
          "487:     guint32      IS_IGMP;",
          "488:     guint16      IS_QOS;",
          "489:     guint32      IS_VLAN;",
          "490:     guint32      MPDU_OFF;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1153:         msdu_length = ((s_start_ptr[vVW510021_W_MSDU_LENGTH_OFF+1] & 0x1f) << 8)",
          "1156:         vc_id = pntoh16(&s_start_ptr[vVW510021_W_VCID_OFF]);",
          "1157:         if (IS_TX)",
          "1158:         {",
          "1159:             rssi[0] = (s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF] & 0x80) ?",
          "1162:         }",
          "1163:         else",
          "1164:         {",
          "1165:             rssi[0] = (s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF] & 0x80) ?",
          "1168:         }",
          "1169:         rssi[1] = 100;",
          "1170:         rssi[2] = 100;",
          "",
          "[Removed Lines]",
          "1154:                  + s_start_ptr[vVW510021_W_MSDU_LENGTH_OFF];",
          "1160:                 -1 * (s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF] & 0x7f) :",
          "1161:          s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF] & 0x7f;",
          "1166:                (s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF]- 256) :",
          "1167:         s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF];",
          "",
          "[Added Lines]",
          "1154:                         + s_start_ptr[vVW510021_W_MSDU_LENGTH_OFF];",
          "1160:                        -1 * (s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF] & 0x7f) :",
          "1161:                        s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF] & 0x7f;",
          "1166:                       (s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF]- 256) :",
          "1167:                       s_start_ptr[vVW510021_W_RSSI_TXPOWER_OFF];",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1296: };",
          "1298: #define OPEN_INFO_MAGIC      0",
          "",
          "[Removed Lines]",
          "1294:  wtap_open_routine_t open_routine;",
          "1295:  const char *extensions;",
          "",
          "[Added Lines]",
          "1294:     wtap_open_routine_t open_routine;",
          "1295:     const char *extensions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1407: WS_DLL_PUBLIC",
          "1408: gboolean wtap_seek_read (wtap *wth, gint64 seek_off,",
          "1412: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "1409:  struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info);",
          "",
          "[Added Lines]",
          "1409:         struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info);",
          "",
          "---------------"
        ]
      }
    }
  ]
}