{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81f9159b5ec0e19d9aafee9c03a13bc4e7735cd8",
      "candidate_info": {
        "commit_hash": "81f9159b5ec0e19d9aafee9c03a13bc4e7735cd8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81f9159b5ec0e19d9aafee9c03a13bc4e7735cd8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Faster allocation of new sqlite3_stmt objects.\n\nFossilOrigin-Name: 891f1f72187f0f9ec0d24fda98cc08be3ae3c3ff8b27c4e409ee7135c3106398",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8f10efc29dea7b816b1ba401726c268950d6671d890f686911269082a241d8d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2196: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2198: #endif",
          "2200:     x.pSpace = p->pFree = sqlite3DbMallocRawNN(db, x.nNeeded);",
          "2201:     x.nFree = x.nNeeded;",
          "2204:   p->pVList = pParse->pVList;",
          "2205:   pParse->pVList =  0;",
          "",
          "[Removed Lines]",
          "2190:   do {",
          "2191:     x.nNeeded = 0;",
          "2192:     p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2193:     p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2194:     p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2195:     p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2197:     p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2199:     if( x.nNeeded==0 ) break;",
          "2202:   }while( !db->mallocFailed );",
          "",
          "[Added Lines]",
          "2190:   x.nNeeded = 0;",
          "2191:   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));",
          "2192:   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));",
          "2193:   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));",
          "2194:   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));",
          "2196:   p->anExec = allocSpace(&x, 0, p->nOp*sizeof(i64));",
          "2198:   if( x.nNeeded ){",
          "2201:     if( !db->mallocFailed ){",
          "2202:       p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2203:       p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2204:       p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2205:       p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2206: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2207:       p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2208: #endif",
          "2209:     }",
          "2210:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
      "candidate_info": {
        "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/join.test"
        ],
        "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
          "3798:     isLeftJoin = 1;",
          "3801:       return 0;",
          "3802:     }",
          "3803:   }",
          "",
          "[Removed Lines]",
          "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
          "",
          "[Added Lines]",
          "3804:     ){",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
          "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
          "978: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
          "979: # Detected by Yongheng and Rui.",
          "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
          "981: # on 2017-04-18",
          "982: #",
          "983: reset_db",
          "984: do_execsql_test join-22.10 {",
          "985:   CREATE TABLE t0(a, b);",
          "986:   CREATE INDEX t0a ON t0(a);",
          "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
          "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
          "989: } {11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af48257bc91a8d23663bc7fa136626ed90f61a22",
      "candidate_info": {
        "commit_hash": "af48257bc91a8d23663bc7fa136626ed90f61a22",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af48257bc91a8d23663bc7fa136626ed90f61a22",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Mention the new -memtrace command-line option in the -help output of the CLI.\n\nFossilOrigin-Name: ada91aefe37efe3c009691b5599e4d6acf182e5ec3cf28dda0871d09858498b3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67fecbc79d3e927a7e22f3589be3184114322635874e4b3170666e352d0bfe9d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8675: #if defined(SQLITE_ENABLE_DESERIALIZE)",
          "8676:   \"   -maxsize N           maximum size for a --deserialize database\\n\"",
          "8677: #endif",
          "8678:   \"   -mmap N              default mmap size set to N\\n\"",
          "8679: #ifdef SQLITE_ENABLE_MULTIPLEX",
          "8680:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8678:   \"   -memtrace            trace all memory allocations and deallocations\\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16e12c573dbf4afb49bb1f59b2634b4acfee168b",
      "candidate_info": {
        "commit_hash": "16e12c573dbf4afb49bb1f59b2634b4acfee168b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16e12c573dbf4afb49bb1f59b2634b4acfee168b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test"
        ],
        "message": "Add tests for the FILTER clause. And a bugfix.\n\nFossilOrigin-Name: 28aa1702f7f0334abd1b30e7aa48ea3679539b11bfbba32bc9f0d6049cf18a7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f1ae2d6ac8dcbb62e5aa3dc17bc67d559cb565fc0d0a8c00a596075d35f8130",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "829:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "830:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "831:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "832:         );",
          "834:           sqlite3ErrorMsg(pParse,",
          "835:               \"%.*s() may not be used as a window function\", nId, zId",
          "836:           );",
          "837:           pNC->nErr++;",
          "838:         }else if(",
          "839:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "842:         ){",
          "843:           const char *zType;",
          "845:             zType = \"window\";",
          "846:           }else{",
          "847:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "833:         if( pDef && pDef->xValue==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "840:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pExpr->y.pWin)",
          "841:            || (is_agg && pExpr->y.pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "844:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "829:         int is_win = ExprHasProperty(pExpr, EP_WinFunc);",
          "834:         if( pDef && pDef->xValue==0 && is_win ){",
          "841:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !is_win)",
          "842:            || (is_agg && is_win && (pNC->ncFlags & NC_AllowWin)==0)",
          "845:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || is_win ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "884: #else",
          "885:           pNC->ncFlags &= ~NC_AllowAgg;",
          "886: #endif",
          "",
          "[Removed Lines]",
          "883:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "884:           pNC->ncFlags &= ~(NC_AllowWin | (!is_win ? NC_AllowAgg : 0));",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: do_catchsql_test 2.3 {",
          "85:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "86: } {1 {misuse of aggregate: count()}}",
          "",
          "[Added Lines]",
          "86: } {1 {misuse of aggregate function count()}}",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: execsql_test 1.8 {",
          "72:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "73: }",
          "75: execsql_test 1.9 {",
          "76:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "77:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "78:   ORDER BY 1",
          "79: }",
          "81: execsql_test 1.10 {",
          "82:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "83:   FROM t1",
          "84:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "85:   ORDER BY 1",
          "86: }",
          "88: execsql_test 1.11 {",
          "89:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "90:   FROM t1",
          "91:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "92:   ORDER BY 2",
          "93: }",
          "95: execsql_test 1.12 {",
          "96:   SELECT (a%5),",
          "97:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "98:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "99:   FROM t1 GROUP BY (a%5)",
          "100:   ORDER BY 2",
          "101: }",
          "103: execsql_test 1.13 {",
          "104:   SELECT",
          "105:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "106:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "107:     count(*) FILTER (WHERE b%2!=0),",
          "108:     count(*) FILTER (WHERE b%2!=1)",
          "109:   FROM t1;",
          "110: }",
          "112: execsql_float_test 1.14 {",
          "113:   SELECT",
          "114:     avg(b) FILTER (WHERE b>a),",
          "115:     avg(b) FILTER (WHERE b<a)",
          "116:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;",
          "117: }",
          "119: execsql_test 1.15 {",
          "120:   SELECT",
          "121:     a/5,",
          "122:     sum(b) FILTER (WHERE a%5=0),",
          "123:     sum(b) FILTER (WHERE a%5=1),",
          "124:     sum(b) FILTER (WHERE a%5=2),",
          "125:     sum(b) FILTER (WHERE a%5=3),",
          "126:     sum(b) FILTER (WHERE a%5=4)",
          "127:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "128: }",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: do_execsql_test 1.8 {",
          "83:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "84: } {{}}",
          "86: do_execsql_test 1.9 {",
          "87:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "88:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "89:   ORDER BY 1",
          "90: } {3   4}",
          "92: do_execsql_test 1.10 {",
          "93:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "94:   FROM t1",
          "95:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "96:   ORDER BY 1",
          "97: } {3 49   4 46}",
          "99: do_execsql_test 1.11 {",
          "100:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "101:   FROM t1",
          "102:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "103:   ORDER BY 2",
          "104: } {4 46   3 49}",
          "106: do_execsql_test 1.12 {",
          "107:   SELECT (a%5),",
          "108:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "109:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "110:   FROM t1 GROUP BY (a%5)",
          "111:   ORDER BY 2",
          "112: } {2 25 3   0 34 2   1 34 4   4 46 4   3 49 5}",
          "114: do_execsql_test 1.13 {",
          "115:   SELECT",
          "116:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "117:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "118:     count(*) FILTER (WHERE b%2!=0),",
          "119:     count(*) FILTER (WHERE b%2!=1)",
          "120:   FROM t1;",
          "121: } {7_3_5_23_27_3_17_33_25_47_13_45_31_11_37_21_3_7_29_3_3_23_5_11_25_15_23 30_26_26_36_36_22_14_16_50_38_36_12_4_46_48_24_46_18_18 27 19}",
          "124: do_test 1.14 {",
          "125:   set myres {}",
          "126:   foreach r [db eval {SELECT",
          "127:     avg(b) FILTER (WHERE b>a),",
          "128:     avg(b) FILTER (WHERE b<a)",
          "129:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;}] {",
          "130:     lappend myres [format %.4f [set r]]",
          "131:   }",
          "132:   set res2 {30.8333 13.7273 31.4167 13.0000}",
          "133:   set i 0",
          "134:   foreach r [set myres] r2 [set res2] {",
          "135:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "136:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "137:     }",
          "138:     incr i",
          "139:   }",
          "140:   set {} {}",
          "141: } {}",
          "143: do_execsql_test 1.15 {",
          "144:   SELECT",
          "145:     a/5,",
          "146:     sum(b) FILTER (WHERE a%5=0),",
          "147:     sum(b) FILTER (WHERE a%5=1),",
          "148:     sum(b) FILTER (WHERE a%5=2),",
          "149:     sum(b) FILTER (WHERE a%5=3),",
          "150:     sum(b) FILTER (WHERE a%5=4)",
          "151:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "152: } {0 {} 7 3 5 30   1 26 23 27 3 17   2 26 33 25 {} 47   3 36 13 45 31 11",
          "153:   4 36 37 21 22 14   5 16 3 7 29 50   6 38 3 36 12 4   7 46 3 48 23 {}",
          "154:   8 24 5 46 11 {}   9 18 25 15 18 23}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
      "candidate_info": {
        "commit_hash": "38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: e5924939c9c8f39367900360fa294cdb1220e9f68d183e32882e0926f775869d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef27e7a08728aa7447ae19812803ac5c4a9d80c97541014bd292485792005a3e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}