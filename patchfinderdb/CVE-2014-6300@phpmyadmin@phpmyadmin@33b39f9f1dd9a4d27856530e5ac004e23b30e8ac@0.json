{
  "cve_id": "CVE-2014-6300",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in the micro history implementation in phpMyAdmin 4.0.x before 4.0.10.3, 4.1.x before 4.1.14.4, and 4.2.x before 4.2.8.1 allows remote attackers to inject arbitrary web script or HTML, and consequently conduct a cross-site request forgery (CSRF) attack to create a root account, via a crafted URL, related to js/ajax.js.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "33b39f9f1dd9a4d27856530e5ac004e23b30e8ac",
  "patch_info": {
    "commit_hash": "33b39f9f1dd9a4d27856530e5ac004e23b30e8ac",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/33b39f9f1dd9a4d27856530e5ac004e23b30e8ac",
    "files": [
      "ChangeLog",
      "js/ajax.js",
      "js/whitelist.php",
      "libraries/Header.class.php",
      "libraries/Scripts.class.php"
    ],
    "message": "bug #4530 [security] DOM based XSS that results to a CSRF that creates a ROOT account in certain conditions\n\nSigned-off-by: Marc Delisle <marc@infomarc.info>",
    "before_after_code_files": [
      "js/ajax.js||js/ajax.js",
      "js/whitelist.php||js/whitelist.php",
      "libraries/Header.class.php||libraries/Header.class.php",
      "libraries/Scripts.class.php||libraries/Scripts.class.php"
    ]
  },
  "patch_diff": {
    "js/ajax.js||js/ajax.js": [
      "File: js/ajax.js -> js/ajax.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "783:     if (window.location.hash.substring(0, 8) == '#PMAURL-') {",
      "789:     } else {",
      "",
      "[Removed Lines]",
      "786:         window.location = window.location.hash.substring(",
      "787:             window.location.hash.indexOf(':') + 1",
      "788:         );",
      "",
      "[Added Lines]",
      "786:         var colon_position = window.location.hash.indexOf(':');",
      "787:         var questionmark_position = window.location.hash.indexOf('?');",
      "788:         if (colon_position != -1 && questionmark_position != -1 && colon_position < questionmark_position) {",
      "789:             var hash_url = window.location.hash.substring(colon_position + 1, questionmark_position);",
      "790:             if (PMA_gotoWhitelist.indexOf(hash_url) != -1) {",
      "791:                 window.location = window.location.hash.substring(",
      "792:                     colon_position + 1",
      "793:                 );",
      "794:             }",
      "795:         }",
      "",
      "---------------"
    ],
    "js/whitelist.php||js/whitelist.php": [
      "File: js/whitelist.php -> js/whitelist.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "9: chdir('..');",
      "12: header('Content-Type: text/javascript; charset=UTF-8');",
      "16: header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');",
      "20: define('PMA_MINIMUM_COMMON', true);",
      "21: require_once './libraries/common.inc.php';",
      "23: session_write_close();",
      "25: echo \"var PMA_gotoWhitelist = new Array();\\n\";",
      "26: $i = -1;",
      "27: foreach ($GLOBALS['goto_whitelist'] as $one_whitelist) {",
      "28:     $i++;",
      "29:     echo 'PMA_gotoWhitelist[' . $i . ']=\"' . $one_whitelist . '\";' . \"\\n\";",
      "30: }",
      "31: ?>",
      "",
      "---------------"
    ],
    "libraries/Header.class.php||libraries/Header.class.php": [
      "File: libraries/Header.class.php -> libraries/Header.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:     private function _addDefaultScripts()",
      "146:     {",
      "147:         $this->_scripts->addFile('jquery/jquery-1.8.3.min.js');",
      "148:         $this->_scripts->addFile('ajax.js');",
      "149:         $this->_scripts->addFile('keyhandler.js');",
      "150:         $this->_scripts->addFile('jquery/jquery-ui-1.9.2.custom.min.js');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:         $params = array('lang' => $GLOBALS['lang']);",
      "149:         if (isset($GLOBALS['db'])) {",
      "150:             $params['db'] = $GLOBALS['db'];",
      "151:         }",
      "153:         $this->_scripts->addFile(",
      "154:             'whitelist.php' . PMA_URL_getCommon($params), false, true",
      "155:         );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "179:         $this->_scripts->addFile('messages.php' . PMA_URL_getCommon($params));",
      "",
      "[Removed Lines]",
      "175:         $params = array('lang' => $GLOBALS['lang']);",
      "176:         if (isset($GLOBALS['db'])) {",
      "177:             $params['db'] = $GLOBALS['db'];",
      "178:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libraries/Scripts.class.php||libraries/Scripts.class.php": [
      "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     private function _includeFiles($files)",
      "52:     {",
      "53:         $dynamic_scripts = \"\";",
      "54:         $scripts = array();",
      "55:         foreach ($files as $value) {",
      "56:             if (strpos($value['filename'], \"?\") !== false) {",
      "59:                 continue;",
      "60:             }",
      "61:             $include = true;",
      "",
      "[Removed Lines]",
      "57:                 $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
      "58:                     . $value['filename'] . \"'></script>\";",
      "",
      "[Added Lines]",
      "53:         $first_dynamic_scripts = \"\";",
      "58:                 if ($value['before_statics'] === true) {",
      "59:                     $first_dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
      "60:                         . $value['filename'] . \"'></script>\";",
      "61:                 } else {",
      "62:                     $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
      "63:                         . $value['filename'] . \"'></script>\";",
      "64:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:             '<script type=\"text/javascript\" src=\"%s\"></script>',",
      "84:             htmlspecialchars($url)",
      "85:         );",
      "87:     }",
      "",
      "[Removed Lines]",
      "86:         return $static_scripts . $dynamic_scripts;",
      "",
      "[Added Lines]",
      "92:         return $first_dynamic_scripts . $static_scripts . $dynamic_scripts;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:     {",
      "113:         $hash = md5($filename);",
      "114:         if (!empty($this->_files[$hash])) {",
      "",
      "[Removed Lines]",
      "111:     public function addFile($filename, $conditional_ie = false)",
      "",
      "[Added Lines]",
      "119:     public function addFile($filename, $conditional_ie = false, $before_statics = false)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "119:         $this->_files[$hash] = array(",
      "120:             'has_onload' => $has_onload,",
      "121:             'filename' => $filename,",
      "123:         );",
      "124:     }",
      "",
      "[Removed Lines]",
      "122:             'conditional_ie' => $conditional_ie",
      "",
      "[Added Lines]",
      "130:             'conditional_ie' => $conditional_ie,",
      "131:             'before_statics' => $before_statics",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "30311537466ca57b5b2576c2adc7f5dc28a6fc33",
      "candidate_info": {
        "commit_hash": "30311537466ca57b5b2576c2adc7f5dc28a6fc33",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/30311537466ca57b5b2576c2adc7f5dc28a6fc33",
        "files": [
          "js/ajax.js",
          "js/sql.js"
        ],
        "message": "Fix non-html5 microhistory behavior\n\nSigned-off-by: Atul Pratap Singh <atulpratapsingh05@gmail.com>",
        "before_after_code_files": [
          "js/ajax.js||js/ajax.js",
          "js/sql.js||js/sql.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "js/ajax.js||js/ajax.js"
          ],
          "candidate": [
            "js/ajax.js||js/ajax.js"
          ]
        }
      },
      "candidate_diff": {
        "js/ajax.js||js/ajax.js": [
          "File: js/ajax.js -> js/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:                 if (data._menu) {",
          "355:                     if (history && history.pushState) {",
          "356:                         history.replaceState({",
          "358:                             },",
          "359:                             null",
          "360:                         );",
          "",
          "[Removed Lines]",
          "357:                             menu : data._menu",
          "",
          "[Added Lines]",
          "357:                                 menu : data._menu",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:             var self = this;",
          "550:             self._scriptsToBeLoaded = [];",
          "551:             self._scriptsToBeFired = [];",
          "",
          "[Removed Lines]",
          "548:         load: function (files) {",
          "",
          "[Added Lines]",
          "548:         load: function (files, callback) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:             if (needRequest) {",
          "573:                 this.appendScript(\"js/get_scripts.js.php?\" + request.join(\"&\"));",
          "574:             } else {",
          "576:             }",
          "577:         },",
          "",
          "[Removed Lines]",
          "575:                 self.done();",
          "",
          "[Added Lines]",
          "575:                 self.done(callback);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:             if (typeof ErrorReport !== 'undefined') {",
          "585:                 ErrorReport.wrap_global_functions();",
          "586:             }",
          "",
          "[Removed Lines]",
          "583:         done: function () {",
          "",
          "[Added Lines]",
          "583:         done: function (callback) {",
          "584:             if($.isFunction(callback)) {",
          "585:                 callback();",
          "586:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "714:         });",
          "716:         history.replaceState({",
          "718:             },",
          "719:             null",
          "720:         );",
          "721:     } else {",
          "742:     }",
          "743: });",
          "",
          "[Removed Lines]",
          "717:             menu : menuContent",
          "723:         AJAX.scriptHandler.load([{'name' : 'microhistory.js', 'fire' : 1}]);",
          "725:         if (PMA_MicroHistory.primer.url) {",
          "726:             PMA_MicroHistory.menus.add(",
          "727:                 PMA_MicroHistory.primer.menuHash,",
          "728:                 menuContent",
          "729:             );",
          "730:         }",
          "731:         $(function () {",
          "734:             if (PMA_MicroHistory.primer.url) {",
          "735:                 PMA_MicroHistory.add(",
          "736:                     PMA_MicroHistory.primer.url,",
          "737:                     PMA_MicroHistory.primer.scripts,",
          "738:                     PMA_MicroHistory.primer.menuHash",
          "739:                 );",
          "740:             }",
          "741:         });",
          "",
          "[Added Lines]",
          "720:                 menu : menuContent",
          "726:         AJAX.scriptHandler",
          "727:             .load([{'name' : 'microhistory.js', 'fire' : 1}], function () {",
          "729:                 if (PMA_MicroHistory.primer.url) {",
          "730:                     PMA_MicroHistory.menus.add(",
          "731:                         PMA_MicroHistory.primer.menuHash,",
          "732:                         menuContent",
          "733:                     );",
          "734:                 }",
          "735:                 $(function () {",
          "738:                     if (PMA_MicroHistory.primer.url) {",
          "739:                         PMA_MicroHistory.add(",
          "740:                             PMA_MicroHistory.primer.url,",
          "741:                             PMA_MicroHistory.primer.scripts,",
          "742:                             PMA_MicroHistory.primer.menuHash",
          "743:                         );",
          "744:                     }",
          "745:                 });",
          "746:             });",
          "",
          "---------------"
        ],
        "js/sql.js||js/sql.js": [
          "File: js/sql.js -> js/sql.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:                 if (data._menu) {",
          "391:                     if (history && history.pushState) {",
          "392:                         history.replaceState({",
          "394:                             },",
          "395:                             null",
          "396:                         );",
          "",
          "[Removed Lines]",
          "393:                             menu : data._menu",
          "",
          "[Added Lines]",
          "393:                                 menu : data._menu",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:                         PMA_Microhistory.menus.replace(data._menu);",
          "400:                         PMA_Microhistory.menus.add(data._menuHash, data._menu);",
          "401:                     }",
          "403:                     if (! (history && history.pushState)) {",
          "404:                         PMA_Microhistory.menus.replace(PMA_Microhistory.menus.get(data._menuHash));",
          "405:                     }",
          "",
          "[Removed Lines]",
          "402:                 } else if (data._menuHash) {debugger;",
          "",
          "[Added Lines]",
          "402:                 } else if (data._menuHash) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ff140c5be5489bd2985aebbfbe8090116bc8805",
      "candidate_info": {
        "commit_hash": "4ff140c5be5489bd2985aebbfbe8090116bc8805",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/4ff140c5be5489bd2985aebbfbe8090116bc8805",
        "files": [
          "js/ajax.js",
          "js/makegrid.js",
          "js/menu-resizer.js",
          "js/pmd/move.js",
          "js/tbl_change.js"
        ],
        "message": "Correct spacing before javascript operators\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
        "before_after_code_files": [
          "js/ajax.js||js/ajax.js",
          "js/makegrid.js||js/makegrid.js",
          "js/menu-resizer.js||js/menu-resizer.js",
          "js/pmd/move.js||js/pmd/move.js",
          "js/tbl_change.js||js/tbl_change.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "js/ajax.js||js/ajax.js"
          ],
          "candidate": [
            "js/ajax.js||js/ajax.js"
          ]
        }
      },
      "candidate_diff": {
        "js/ajax.js||js/ajax.js": [
          "File: js/ajax.js -> js/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     navigate: function (index) {",
          "589:         ) {",
          "590:             PMA_ajaxShowMessage(",
          "591:                 '<div class=\"error\">' + PMA_messages.strInvalidPage + '</div>',",
          "",
          "[Removed Lines]",
          "585:         if (typeof this.pages[index] === 'undefined'",
          "586:             || typeof this.pages[index].content === 'undefined'",
          "587:             || typeof this.pages[index].menu === 'undefined'",
          "588:             || ! AJAX.cache.menus.get(this.pages[index].menu)",
          "",
          "[Added Lines]",
          "585:         if (typeof this.pages[index] === 'undefined' ||",
          "586:             typeof this.pages[index].content === 'undefined' ||",
          "587:             typeof this.pages[index].menu === 'undefined' ||",
          "588:             ! AJAX.cache.menus.get(this.pages[index].menu)",
          "",
          "---------------"
        ],
        "js/makegrid.js||js/makegrid.js": [
          "File: js/makegrid.js -> js/makegrid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1731:             });",
          "1732:             $('html').click(function (e) {",
          "1736:                 ) {",
          "1737:                     g.hideEditCell();",
          "1738:                 }",
          "",
          "[Removed Lines]",
          "1734:                 if ($(e.target).parents().index($(g.cEdit)) == -1",
          "1735:                     && ! $(e.target).parents('.ui-datepicker-header').length",
          "",
          "[Added Lines]",
          "1734:                 if ($(e.target).parents().index($(g.cEdit)) == -1 &&",
          "1735:                     ! $(e.target).parents('.ui-datepicker-header').length",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1860:             });",
          "1861:         })",
          "1862:         .mouseleave(function (e) {",
          "1864:             g.showRemColHint = false;",
          "1865:             $(t).find(\"th.draggable\").tooltip(\"option\", {",
          "1866:                 content: g.updateHint()",
          "",
          "[Removed Lines]",
          "1863:             g.showSortHint = false;",
          "",
          "[Added Lines]",
          "1863:             g.showSortHint = false;",
          "",
          "---------------"
        ],
        "js/menu-resizer.js||js/menu-resizer.js": [
          "File: js/menu-resizer.js -> js/menu-resizer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 total_len += $($li2[i]).data('width');",
          "99:                 ) {",
          "100:                     $($li2[i]).insertBefore($submenu);",
          "101:                 } else {",
          "",
          "[Removed Lines]",
          "97:                 if (total_len < wmax",
          "98:                     || (i == $li2.length - 1 && total_len - submenu_w < wmax)",
          "",
          "[Added Lines]",
          "97:                 if (total_len < wmax ||",
          "98:                     (i == $li2.length - 1 && total_len - submenu_w < wmax)",
          "",
          "---------------"
        ],
        "js/pmd/move.js||js/pmd/move.js": [
          "File: js/pmd/move.js -> js/pmd/move.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:         for (key in contr[K]) {",
          "777:             for (key2 in contr[K][key]) {",
          "778:                 for (key3 in contr[K][key][key2]) {",
          "781:                         continue; // if hide",
          "782:                     }",
          "783:                     var x1_left  = document.getElementById(key2).offsetLeft + 1;//document.getElementById(key2+\".\"+key3).offsetLeft;",
          "",
          "[Removed Lines]",
          "779:                     if (!document.getElementById(\"check_vis_\" + key2).checked",
          "780:                         || !document.getElementById(\"check_vis_\" + contr[K][key][key2][key3][0]).checked) {",
          "",
          "[Added Lines]",
          "779:                     if (! document.getElementById(\"check_vis_\" + key2).checked ||",
          "780:                         ! document.getElementById(\"check_vis_\" + contr[K][key][key2][key3][0]).checked) {",
          "",
          "---------------"
        ],
        "js/tbl_change.js||js/tbl_change.js": [
          "File: js/tbl_change.js -> js/tbl_change.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:     }",
          "622:     var type = $(elem).val();",
          "628:     ) {",
          "629:         $(\"#fieldID_\" + searchIndex).attr('multiple', '');",
          "630:     } else {",
          "",
          "[Removed Lines]",
          "623:     if (",
          "624:         'IN (...)' == type",
          "625:         || 'NOT IN (...)' == type",
          "626:         || 'BETWEEN' == type",
          "627:         || 'NOT BETWEEN' == type",
          "",
          "[Added Lines]",
          "623:     if ('IN (...)' == type ||",
          "624:         'NOT IN (...)' == type ||",
          "625:         'BETWEEN' == type ||",
          "626:         'NOT BETWEEN' == type",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd76cb6acc1af19331dc543db45aa0f60eaaefe6",
      "candidate_info": {
        "commit_hash": "cd76cb6acc1af19331dc543db45aa0f60eaaefe6",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/cd76cb6acc1af19331dc543db45aa0f60eaaefe6",
        "files": [
          "js/ajax.js",
          "libraries/Header.class.php",
          "libraries/Scripts.class.php",
          "test/classes/PMA_Scripts_test.php"
        ],
        "message": "Avoid caching JS and CSS files across phpMyAdmin versions\n\nSigned-off-by: Madhura Jayaratne <madhura.cj@gmail.com>",
        "before_after_code_files": [
          "js/ajax.js||js/ajax.js",
          "libraries/Header.class.php||libraries/Header.class.php",
          "libraries/Scripts.class.php||libraries/Scripts.class.php",
          "test/classes/PMA_Scripts_test.php||test/classes/PMA_Scripts_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "js/ajax.js||js/ajax.js",
            "libraries/Header.class.php||libraries/Header.class.php",
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ],
          "candidate": [
            "js/ajax.js||js/ajax.js",
            "libraries/Header.class.php||libraries/Header.class.php",
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ]
        }
      },
      "candidate_diff": {
        "js/ajax.js||js/ajax.js": [
          "File: js/ajax.js -> js/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:                 }",
          "572:             }",
          "573:             request.push(\"call_done=1\");",
          "575:             if (needRequest) {",
          "576:                 this.appendScript(\"js/get_scripts.js.php?\" + request.join(\"&\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:             request.push(\"v=\" + encodeURIComponent(PMA_commonParams.get('PMA_VERSION')));",
          "",
          "---------------"
        ],
        "libraries/Header.class.php||libraries/Header.class.php": [
          "File: libraries/Header.class.php -> libraries/Header.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:             'confirm' => $GLOBALS['cfg']['Confirm'],",
          "258:             'LoginCookieValidity' => $GLOBALS['cfg']['LoginCookieValidity'],",
          "259:             'logged_in' => isset($GLOBALS['userlink']) ? true : false,",
          "260:         );",
          "261:         if (isset($GLOBALS['cfg']['Server'])",
          "262:             && isset($GLOBALS['cfg']['Server']['auth_type'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:             'PMA_VERSION' => PMA_VERSION",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "649:         $basedir    = defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : '';",
          "650:         $theme_id   = $GLOBALS['PMA_Config']->getThemeUniqueValue();",
          "651:         $theme_path = $GLOBALS['pmaThemePath'];",
          "653:         if ($this->_isPrintView) {",
          "654:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "656:         } else {",
          "659:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "660:                 . $theme_path . '/jquery/jquery-ui-1.11.2.css\" />';",
          "661:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "663:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "665:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "667:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "668:                 . $basedir . 'phpmyadmin.css.php?'",
          "669:                 . 'nocache=' . $theme_id . $GLOBALS['text_dir'] . '\" />';",
          "671:             $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
          "673:         }",
          "675:         return $retval;",
          "",
          "[Removed Lines]",
          "655:                 . $basedir . 'print.css\" />';",
          "662:                 . $basedir . 'js/codemirror/lib/codemirror.css\" />';",
          "664:                 . $basedir . 'js/codemirror/addon/hint/show-hint.css\" />';",
          "666:                 . $basedir . 'js/codemirror/addon/lint/lint.css\" />';",
          "672:                 . $theme_path . '/css/printview.css\" />';",
          "",
          "[Added Lines]",
          "653:         $v          = self::getVersionParameter();",
          "657:                 . $basedir . 'print.css?' . $v . '\" />';",
          "664:                 . $basedir . 'js/codemirror/lib/codemirror.css?' . $v . '\" />';",
          "666:                 . $basedir . 'js/codemirror/addon/hint/show-hint.css?' . $v . '\" />';",
          "668:                 . $basedir . 'js/codemirror/addon/lint/lint.css?' . $v . '\" />';",
          "674:                 . $theme_path . '/css/printview.css?' . $v . '\" />';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "777:         }",
          "778:         return $retval;",
          "779:     }",
          "780: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "789:     public static function getVersionParameter()",
          "790:     {",
          "791:         return \"v=\" . urlencode(PMA_VERSION);",
          "792:     }",
          "",
          "---------------"
        ],
        "libraries/Scripts.class.php||libraries/Scripts.class.php": [
          "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         $first_dynamic_scripts = \"\";",
          "54:         $dynamic_scripts = \"\";",
          "55:         $scripts = array();",
          "56:         foreach ($files as $value) {",
          "57:             if (/*overload*/mb_strpos($value['filename'], \"?\") !== false) {",
          "58:                 if ($value['before_statics'] === true) {",
          "59:                     $first_dynamic_scripts",
          "60:                         .= \"<script data-cfasync='false' type='text/javascript' src='js/\"",
          "62:                 } else {",
          "63:                     $dynamic_scripts .= \"<script data-cfasync='false' type='text/javascript' src='js/\"",
          "65:                 }",
          "66:                 continue;",
          "67:             }",
          "",
          "[Removed Lines]",
          "61:                         . $value['filename'] . \"'></script>\";",
          "64:                         . $value['filename'] . \"'></script>\";",
          "",
          "[Added Lines]",
          "56:         $separator = PMA_URL_getArgSeparator();",
          "59:                 $file_name = $value['filename'] . $separator",
          "60:                     . PMA_Header::getVersionParameter();",
          "64:                         . $file_name . \"'></script>\";",
          "67:                         . $file_name . \"'></script>\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:                 $scripts[] = \"scripts%5B%5D=\" . $value['filename'];",
          "82:             }",
          "83:         }",
          "87:         $static_scripts = sprintf(",
          "88:             '<script data-cfasync=\"false\" type=\"text/javascript\" src=\"%s\"></script>',",
          "",
          "[Removed Lines]",
          "84:         $separator = PMA_URL_getArgSeparator();",
          "85:         $url = 'js/get_scripts.js.php?' . implode($separator, $scripts);",
          "",
          "[Added Lines]",
          "87:         $url = 'js/get_scripts.js.php?' . implode($separator, $scripts)",
          "88:             . $separator . PMA_Header::getVersionParameter();",
          "",
          "---------------"
        ],
        "test/classes/PMA_Scripts_test.php||test/classes/PMA_Scripts_test.php": [
          "File: test/classes/PMA_Scripts_test.php -> test/classes/PMA_Scripts_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         $this->assertEquals(",
          "82:             '<script data-cfasync=\"false\" type=\"text/javascript\" '",
          "83:             . 'src=\"js/get_scripts.js.php?'",
          "85:             $this->_callPrivateFunction(",
          "86:                 '_includeFiles',",
          "87:                 array(",
          "",
          "[Removed Lines]",
          "84:             . 'scripts%5B%5D=common.js\"></script>',",
          "",
          "[Added Lines]",
          "84:             . 'scripts%5B%5D=common.js&amp;v=' . PMA_VERSION . '\"></script>',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:         $this->assertRegExp(",
          "112:             '@<script data-cfasync=\"false\" type=\"text/javascript\" '",
          "113:             . 'src=\"js/get_scripts.js.php\\\\?'",
          "115:             . '<script data-cfasync=\"false\" type=\"text/'",
          "116:             . 'javascript\">// <!\\\\[CDATA\\\\[' . \"\\n\"",
          "117:             . 'AJAX.scriptHandler.add\\\\(\"common.js\",1\\\\);' . \"\\n\"",
          "",
          "[Removed Lines]",
          "114:             . 'scripts%5B%5D=common.js\"></script>'",
          "",
          "[Added Lines]",
          "114:             . 'scripts%5B%5D=common.js&amp;v=' . PMA_VERSION . '\"></script>'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "340b01b3959471759114751220374ae1cec5ac5d",
      "candidate_info": {
        "commit_hash": "340b01b3959471759114751220374ae1cec5ac5d",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/340b01b3959471759114751220374ae1cec5ac5d",
        "files": [
          "libraries/Response.class.php",
          "libraries/Scripts.class.php",
          "libraries/StorageEngine.class.php",
          "libraries/Table.class.php",
          "libraries/bookmark.lib.php",
          "libraries/config/FormDisplay.class.php",
          "libraries/config/FormDisplay.tpl.php",
          "libraries/config/ServerConfigChecks.class.php",
          "libraries/config/Validator.class.php",
          "libraries/config/page_settings.class.php",
          "libraries/dbi/DBIDummy.class.php",
          "libraries/normalization.lib.php",
          "libraries/rte/rte_events.lib.php",
          "libraries/rte/rte_routines.lib.php",
          "libraries/server_privileges.lib.php"
        ],
        "message": "Make PHPCS happy.\n\nSigned-off-by: Hugues Peccatte <hugues.peccatte@gmail.com>",
        "before_after_code_files": [
          "libraries/Response.class.php||libraries/Response.class.php",
          "libraries/Scripts.class.php||libraries/Scripts.class.php",
          "libraries/StorageEngine.class.php||libraries/StorageEngine.class.php",
          "libraries/Table.class.php||libraries/Table.class.php",
          "libraries/bookmark.lib.php||libraries/bookmark.lib.php",
          "libraries/config/FormDisplay.class.php||libraries/config/FormDisplay.class.php",
          "libraries/config/FormDisplay.tpl.php||libraries/config/FormDisplay.tpl.php",
          "libraries/config/ServerConfigChecks.class.php||libraries/config/ServerConfigChecks.class.php",
          "libraries/config/Validator.class.php||libraries/config/Validator.class.php",
          "libraries/config/page_settings.class.php||libraries/config/page_settings.class.php",
          "libraries/dbi/DBIDummy.class.php||libraries/dbi/DBIDummy.class.php",
          "libraries/normalization.lib.php||libraries/normalization.lib.php",
          "libraries/rte/rte_events.lib.php||libraries/rte/rte_events.lib.php",
          "libraries/rte/rte_routines.lib.php||libraries/rte/rte_routines.lib.php",
          "libraries/server_privileges.lib.php||libraries/server_privileges.lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ],
          "candidate": [
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Response.class.php||libraries/Response.class.php": [
          "File: libraries/Response.class.php -> libraries/Response.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:                     $hashes = explode('-', $_REQUEST['menuHashes']);",
          "313:                 }",
          "314:                 if (! in_array($menuHash, $hashes)) {",
          "316:                 }",
          "317:             }",
          "",
          "[Removed Lines]",
          "315:                     $this->addJSON('_menu', $this->getHeader()->getMenu()->getDisplay());",
          "",
          "[Added Lines]",
          "315:                     $this->addJSON('_menu',",
          "316:                         $this->getHeader()",
          "317:                             ->getMenu()",
          "318:                             ->getDisplay()",
          "319:                     );",
          "",
          "---------------"
        ],
        "libraries/Scripts.class.php||libraries/Scripts.class.php": [
          "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:                     . PMA_Header::getVersionParameter();",
          "61:                 if ($value['before_statics'] === true) {",
          "62:                     $first_dynamic_scripts",
          "65:                 } else {",
          "68:                 }",
          "69:                 continue;",
          "70:             }",
          "",
          "[Removed Lines]",
          "63:                         .= \"<script data-cfasync='false' type='text/javascript' src='js/\"",
          "64:                         . $file_name . \"'></script>\";",
          "66:                     $dynamic_scripts .= \"<script data-cfasync='false' type='text/javascript' src='js/\"",
          "67:                         . $file_name . \"'></script>\";",
          "",
          "[Added Lines]",
          "63:                         .= \"<script data-cfasync='false' type='text/javascript' \"",
          "64:                         . \"src='js/\" . $file_name . \"'></script>\";",
          "66:                     $dynamic_scripts .= \"<script data-cfasync='false' \"",
          "67:                         . \"type='text/javascript' src='js/\" . $file_name",
          "68:                         . \"'></script>\";",
          "",
          "---------------"
        ],
        "libraries/StorageEngine.class.php||libraries/StorageEngine.class.php": [
          "File: libraries/StorageEngine.class.php -> libraries/StorageEngine.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:         if (! $ret) {",
          "270:             $ret = '<p>' . \"\\n\"",
          "275:         } else {",
          "276:             $ret = '<table class=\"data\">' . \"\\n\" . $ret . '</table>' . \"\\n\";",
          "277:         }",
          "",
          "[Removed Lines]",
          "271:                  . '    '",
          "272:                  . __('There is no detailed status information available for this storage engine.')",
          "273:                  . \"\\n\"",
          "274:                  . '</p>' . \"\\n\";",
          "",
          "[Added Lines]",
          "271:                 . '    '",
          "272:                 . __(",
          "273:                     'There is no detailed status information available for this '",
          "274:                     . 'storage engine.'",
          "275:                 )",
          "276:                 . \"\\n\"",
          "277:                 . '</p>' . \"\\n\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:             break;",
          "381:         case PMA_ENGINE_SUPPORT_NO:",
          "382:         default:",
          "384:         }",
          "385:         return sprintf($message, htmlspecialchars($this->title));",
          "386:     }",
          "",
          "[Removed Lines]",
          "383:             $message = __('This MySQL server does not support the %s storage engine.');",
          "",
          "[Added Lines]",
          "386:             $message = __(",
          "387:                 'This MySQL server does not support the %s storage engine.'",
          "388:             );",
          "",
          "---------------"
        ],
        "libraries/Table.class.php||libraries/Table.class.php": [
          "File: libraries/Table.class.php -> libraries/Table.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:         $table = $this->_name;",
          "498:         if ($this->_dbi->getCachedTableContent(\"${db}.${table}.ExactRows\") != null) {",
          "500:             return $row_count;",
          "501:         }",
          "502:         $row_count = false;",
          "",
          "[Removed Lines]",
          "499:             $row_count = $this->_dbi->getCachedTableContent(\"${db}.${table}.ExactRows\");",
          "",
          "[Added Lines]",
          "499:             $row_count = $this->_dbi->getCachedTableContent(",
          "500:                 \"${db}.${table}.ExactRows\"",
          "501:             );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:             ) {",
          "508:                 $tmp_tables = $this->_dbi->getTablesFull($db, $table);",
          "509:                 if (isset($tmp_tables[$table])) {",
          "511:                 }",
          "512:             }",
          "513:             if ($this->_dbi->getCachedTableContent(\"${db}.${table}.Rows\") != null) {",
          "515:             } else {",
          "516:                 $row_count = false;",
          "517:             }",
          "",
          "[Removed Lines]",
          "510:                     $this->_dbi->cacheTableContent(\"${db}.${table}\", $tmp_tables[$table]);",
          "514:                 $row_count = $this->_dbi->getCachedTableContent(\"${db}.${table}.Rows\");",
          "",
          "[Added Lines]",
          "512:                     $this->_dbi->cacheTableContent(",
          "513:                         \"${db}.${table}\",",
          "514:                         $tmp_tables[$table]",
          "515:                     );",
          "519:                 $row_count = $this->_dbi->getCachedTableContent(",
          "520:                     \"${db}.${table}.Rows\"",
          "521:                 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2380:     function getColumnsWithIndex($types)",
          "2381:     {",
          "2382:         $columns_with_index = array();",
          "2384:             $columns = $index->getColumns();",
          "2385:             foreach ($columns as $column_name => $dummy) {",
          "2386:                 $columns_with_index[] = $column_name;",
          "",
          "[Removed Lines]",
          "2383:         foreach (PMA_Index::getFromTableByChoice($this->_name, $this->_db_name, $types) as $index) {",
          "",
          "[Added Lines]",
          "2390:         foreach (",
          "2391:             PMA_Index::getFromTableByChoice(",
          "2392:                 $this->_name,",
          "2393:                 $this->_db_name,",
          "2394:                 $types",
          "2395:             ) as $index",
          "2396:         ) {",
          "",
          "---------------"
        ],
        "libraries/bookmark.lib.php||libraries/bookmark.lib.php": [
          "File: libraries/bookmark.lib.php -> libraries/bookmark.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     }",
          "67:     if ($db !== false) {",
          "73:         $per_user = $GLOBALS['dbi']->fetchResult(",
          "74:             $query, 'id', null, $controllink, PMA_DatabaseInterface::QUERY_STORE",
          "75:         );",
          "82:         $global = $GLOBALS['dbi']->fetchResult(",
          "83:             $query, 'id', null, $controllink, PMA_DatabaseInterface::QUERY_STORE",
          "84:         );",
          "",
          "[Removed Lines]",
          "68:         $query  = 'SELECT query, label, id FROM ' . PMA_Util::backquote($cfgBookmark['db'])",
          "69:             . '.' . PMA_Util::backquote($cfgBookmark['table'])",
          "70:             . ' WHERE dbase = \\'' . PMA_Util::sqlAddSlashes($db) . '\\''",
          "71:             . ' AND user = \\'' . PMA_Util::sqlAddSlashes($cfgBookmark['user']) . '\\''",
          "72:             . ' ORDER BY label';",
          "77:         $query  = 'SELECT query, label, id FROM ' . PMA_Util::backquote($cfgBookmark['db'])",
          "78:             . '.' . PMA_Util::backquote($cfgBookmark['table'])",
          "79:             . ' WHERE dbase = \\'' . PMA_Util::sqlAddSlashes($db) . '\\''",
          "80:             . ' AND user = \\'\\''",
          "81:             . ' ORDER BY label';",
          "",
          "[Added Lines]",
          "68:         $query = 'SELECT query, label, id FROM ' . PMA_Util::backquote(",
          "69:             $cfgBookmark['db']",
          "70:         ) . '.' . PMA_Util::backquote($cfgBookmark['table'])",
          "71:         . ' WHERE dbase = \\'' . PMA_Util::sqlAddSlashes($db) . '\\''",
          "72:         . ' AND user = \\'' . PMA_Util::sqlAddSlashes($cfgBookmark['user']) . '\\''",
          "73:         . ' ORDER BY label';",
          "78:         $query = 'SELECT query, label, id FROM ' . PMA_Util::backquote(",
          "79:             $cfgBookmark['db']",
          "80:         ) . '.' . PMA_Util::backquote($cfgBookmark['table'])",
          "81:         . ' WHERE dbase = \\'' . PMA_Util::sqlAddSlashes($db) . '\\''",
          "82:         . ' AND user = \\'\\''",
          "83:         . ' ORDER BY label';",
          "",
          "---------------"
        ],
        "libraries/config/FormDisplay.class.php||libraries/config/FormDisplay.class.php": [
          "File: libraries/config/FormDisplay.class.php -> libraries/config/FormDisplay.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:                 'BZipDump' => array('bzopen', 'bzcompress'));",
          "834:             if (!function_exists($funcs[$system_path][0])) {",
          "835:                 $comment = sprintf(",
          "837:                     $funcs[$system_path][0]",
          "838:                 );",
          "839:             }",
          "",
          "[Removed Lines]",
          "836:                     __('Compressed import will not work due to missing function %s.'),",
          "",
          "[Added Lines]",
          "836:                     __(",
          "837:                         'Compressed import will not work due to missing function %s.'",
          "838:                     ),",
          "",
          "---------------"
        ],
        "libraries/config/FormDisplay.tpl.php||libraries/config/FormDisplay.tpl.php": [
          "File: libraries/config/FormDisplay.tpl.php -> libraries/config/FormDisplay.tpl.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     $htmlOutput = '<tr' . $tr_class . '>';",
          "216:     $htmlOutput .= '<th>';",
          "219:     if (! empty($opts['doc'])) {",
          "220:         $htmlOutput .= '<span class=\"doc\">';",
          "",
          "[Removed Lines]",
          "217:     $htmlOutput .= '<label for=\"' . htmlspecialchars($path) . '\">' . $name . '</label>';",
          "",
          "[Added Lines]",
          "217:     $htmlOutput .= '<label for=\"' . htmlspecialchars($path) . '\">' . $name",
          "218:         . '</label>';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:         $htmlOutput .= '</select>';",
          "298:         break;",
          "299:     case 'list':",
          "303:         break;",
          "304:     }",
          "305:     if (isset($opts['comment']) && $opts['comment']) {",
          "",
          "[Removed Lines]",
          "300:         $htmlOutput .= '<textarea cols=\"40\" rows=\"5\" ' . $name_id . $field_class . '>'",
          "301:             . htmlspecialchars(implode(\"\\n\", $value))",
          "302:             . '</textarea>';",
          "",
          "[Added Lines]",
          "301:         $htmlOutput .= '<textarea cols=\"40\" rows=\"5\" ' . $name_id . $field_class",
          "302:             . '>' . htmlspecialchars(implode(\"\\n\", $value)) . '</textarea>';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:     if ($is_setup_script && isset($opts['userprefs_allow'])) {",
          "342:         $htmlOutput .= '<td class=\"userprefs-allow\" title=\"' .",
          "343:             __('Allow users to customize this value') . '\">';",
          "345:         if ($opts['userprefs_allow']) {",
          "346:             $htmlOutput .= 'checked=\"checked\"';",
          "347:         };",
          "",
          "[Removed Lines]",
          "344:         $htmlOutput .= '<input type=\"checkbox\" name=\"' . $path . '-userprefs-allow\" ';",
          "",
          "[Added Lines]",
          "344:         $htmlOutput .= '<input type=\"checkbox\" name=\"' . $path",
          "345:             . '-userprefs-allow\" ';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:     $colspan = defined('PMA_SETUP')",
          "373:         ? 3",
          "374:         : 2;",
          "376:     $htmlOutput .= '<th colspan=\"' . $colspan . '\">';",
          "377:     $htmlOutput .= $header_text;",
          "378:     $htmlOutput .= '</th>';",
          "",
          "[Removed Lines]",
          "375:     $htmlOutput = '<tr class=\"group-header group-header-' . $_FormDisplayGroup . '\">';",
          "",
          "[Added Lines]",
          "376:     $htmlOutput = '<tr class=\"group-header group-header-' . $_FormDisplayGroup",
          "377:         . '\">';",
          "",
          "---------------"
        ],
        "libraries/config/ServerConfigChecks.class.php||libraries/config/ServerConfigChecks.class.php": [
          "File: libraries/config/ServerConfigChecks.class.php -> libraries/config/ServerConfigChecks.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:                     'notice',",
          "166:                     \"Servers/$i/ssl\",",
          "167:                     $title,",
          "169:                 );",
          "170:             }",
          "",
          "[Removed Lines]",
          "168:                     __('You should use SSL connections if your database server supports it.')",
          "",
          "[Added Lines]",
          "168:                     __(",
          "169:                         'You should use SSL connections if your database server '",
          "170:                         . 'supports it.'",
          "171:                     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:                     'notice',",
          "203:                     \"Servers/$i/AllowNoPassword\",",
          "204:                     $title,",
          "207:                 );",
          "208:             }",
          "209:         }",
          "",
          "[Removed Lines]",
          "205:                     __('You allow for connecting to the server without a password.') . ' '",
          "206:                     . PMA_lang($sSecurityInfoMsg, $i)",
          "",
          "[Added Lines]",
          "208:                     __('You allow for connecting to the server without a password.')",
          "209:                     . ' ' . PMA_lang($sSecurityInfoMsg, $i)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:                 if (/*overload*/mb_strlen($blowfishSecret) < 8) {",
          "344:                 }",
          "346:                 $hasDigits = (bool)preg_match('/\\d/', $blowfishSecret);",
          "347:                 $hasChars = (bool)preg_match('/\\S/', $blowfishSecret);",
          "348:                 $hasNonword = (bool)preg_match('/\\W/', $blowfishSecret);",
          "349:                 if (!$hasDigits || !$hasChars || !$hasNonword) {",
          "351:                 }",
          "352:                 if (!empty($blowfishWarnings)) {",
          "353:                     PMA_messagesSet(",
          "",
          "[Removed Lines]",
          "343:                     $blowfishWarnings[] = __('Key is too short, it should have at least 8 characters.');",
          "350:                     $blowfishWarnings[] = PMA_lang(__('Key should contain letters, numbers [em]and[/em] special characters.'));",
          "",
          "[Added Lines]",
          "346:                     $blowfishWarnings[] = __(",
          "347:                         'Key is too short, it should have at least 8 characters.'",
          "348:                     );",
          "355:                     $blowfishWarnings[] = PMA_lang(",
          "356:                         __(",
          "357:                             'Key should contain letters, numbers [em]and[/em] '",
          "358:                             . 'special characters.'",
          "359:                         )",
          "360:                     );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:     protected static function defineMessages()",
          "370:     {",
          "372:         $sAllowArbitraryServerWarn = sprintf(",
          "373:             $sAllowArbitraryServerWarn,",
          "375:             '[/a]',",
          "377:             '[/a]',",
          "379:             '[/a]'",
          "380:         );",
          "383:         $sBZipDumpWarning = sprintf(",
          "384:             $sBZipDumpWarning,",
          "386:             '[/a]', '%s'",
          "387:         );",
          "390:         $sForceSSLNotice = sprintf(",
          "391:             $sForceSSLNotice,",
          "393:             '[/a]'",
          "394:         );",
          "396:         $sGZipDumpWarning = sprintf(",
          "397:             $sGZipDumpWarning,",
          "399:             '[/a]',",
          "400:             '%s'",
          "401:         );",
          "403:         $sLoginCookieValidityWarn = sprintf(",
          "404:             $sLoginCookieValidityWarn,",
          "406:             '[/a]',",
          "407:             '[a@' . PMA_getPHPDocLink(",
          "408:                 'session.configuration.php#ini.session.gc-maxlifetime'",
          "",
          "[Removed Lines]",
          "371:         $sAllowArbitraryServerWarn = __('This %soption%s should be disabled as it allows attackers to bruteforce login to any MySQL server. If you feel this is necessary, use %srestrict login to MySQL server%s or %strusted proxies list%s. However, IP-based protection with trusted proxies list may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');",
          "374:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "376:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "378:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "381:         $sBlowfishSecretMsg = __('You didn\\'t have blowfish secret set and have enabled [kbd]cookie[/kbd] authentication, so a key was automatically generated for you. It is used to encrypt cookies; you don\\'t need to remember it.');",
          "382:         $sBZipDumpWarning = __('%sBzip2 compression and decompression%s requires functions (%s) which are unavailable on this system.');",
          "385:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Import_export]',",
          "388:         $sDirectoryNotice = __('This value should be double checked to ensure that this directory is neither world accessible nor readable or writable by other users on your server.');",
          "389:         $sForceSSLNotice = __('This %soption%s should be enabled if your web server supports it.');",
          "392:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "395:         $sGZipDumpWarning = __('%sGZip compression and decompression%s requires functions (%s) which are unavailable on this system.');",
          "398:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Import_export]',",
          "402:         $sLoginCookieValidityWarn = __('%sLogin cookie validity%s greater than %ssession.gc_maxlifetime%s may cause random session invalidation (currently session.gc_maxlifetime is %d).');",
          "405:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "",
          "[Added Lines]",
          "381:         $sAllowArbitraryServerWarn = __(",
          "382:             'This %soption%s should be disabled as it allows attackers to '",
          "383:             . 'bruteforce login to any MySQL server. If you feel this is necessary, '",
          "384:             . 'use %srestrict login to MySQL server%s or %strusted proxies list%s. '",
          "385:             . 'However, IP-based protection with trusted proxies list may not be '",
          "386:             . 'reliable if your IP belongs to an ISP where thousands of users, '",
          "387:             . 'including you, are connected to.'",
          "388:         );",
          "391:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "392:             . '&amp;formset=Features#tab_Security]',",
          "394:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "395:             . '&amp;formset=Features#tab_Security]',",
          "397:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "398:             . '&amp;formset=Features#tab_Security]',",
          "401:         $sBlowfishSecretMsg = __(",
          "402:             'You didn\\'t have blowfish secret set and have enabled '",
          "403:             . '[kbd]cookie[/kbd] authentication, so a key was automatically '",
          "404:             . 'generated for you. It is used to encrypt cookies; you don\\'t need to '",
          "405:             . 'remember it.'",
          "406:         );",
          "407:         $sBZipDumpWarning = __(",
          "408:             '%sBzip2 compression and decompression%s requires functions (%s) which '",
          "409:             . 'are unavailable on this system.'",
          "410:         );",
          "413:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "414:             . '&amp;formset=Features#tab_Import_export]',",
          "417:         $sDirectoryNotice = __(",
          "418:             'This value should be double checked to ensure that this directory is '",
          "419:             . 'neither world accessible nor readable or writable by other users on '",
          "420:             . 'your server.'",
          "421:         );",
          "422:         $sForceSSLNotice = __(",
          "423:             'This %soption%s should be enabled if your web server supports it.'",
          "424:         );",
          "427:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "428:             . '&amp;formset=Features#tab_Security]',",
          "431:         $sGZipDumpWarning = __(",
          "432:             '%sGZip compression and decompression%s requires functions (%s) which '",
          "433:             . 'are unavailable on this system.'",
          "434:         );",
          "437:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "438:             . '&amp;formset=Features#tab_Import_export]',",
          "442:         $sLoginCookieValidityWarn = __(",
          "443:             '%sLogin cookie validity%s greater than %ssession.gc_maxlifetime%s may '",
          "444:             . 'cause random session invalidation (currently session.gc_maxlifetime '",
          "445:             . 'is %d).'",
          "446:         );",
          "449:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "450:             . '&amp;formset=Features#tab_Security]',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:             '[/a]',",
          "411:             ini_get('session.gc_maxlifetime')",
          "412:         );",
          "414:         $sLoginCookieValidityWarn2 = sprintf(",
          "415:             $sLoginCookieValidityWarn2,",
          "417:             '[/a]'",
          "418:         );",
          "420:         $sLoginCookieValidityWarn3 = sprintf(",
          "421:             $sLoginCookieValidityWarn3,",
          "423:             '[/a]',",
          "425:             '[/a]'",
          "426:         );",
          "428:         $sSecurityInfoMsg = sprintf(",
          "429:             $sSecurityInfoMsg,",
          "431:             '[/a]',",
          "433:             '[/a]'",
          "434:         );",
          "436:         $sServerAuthConfigMsg = sprintf(",
          "437:             $sServerAuthConfigMsg,",
          "439:             '[/a]'",
          "440:         );",
          "442:         $sZipDumpExportWarn = sprintf(",
          "443:             $sZipDumpExportWarn,",
          "445:             '[/a]',",
          "446:             '%s'",
          "447:         );",
          "449:         $sZipDumpImportWarn = sprintf(",
          "450:             $sZipDumpImportWarn,",
          "452:             '[/a]',",
          "453:             '%s'",
          "454:         );",
          "",
          "[Removed Lines]",
          "413:         $sLoginCookieValidityWarn2 = __('%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) at most. Values larger than 1800 may pose a security risk such as impersonation.');",
          "416:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "419:         $sLoginCookieValidityWarn3 = __('If using [kbd]cookie[/kbd] authentication and %sLogin cookie store%s is not 0, %sLogin cookie validity%s must be set to a value less or equal to it.');",
          "422:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "424:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "427:         $sSecurityInfoMsg = __('If you feel this is necessary, use additional protection settings - %shost authentication%s settings and %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');",
          "430:             '[a@?page=servers' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;mode=edit&amp;id=%1$d#tab_Server_config]',",
          "432:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Security]',",
          "435:         $sServerAuthConfigMsg = __('You set the [kbd]config[/kbd] authentication type and included username and password for auto-login, which is not a desirable option for live hosts. Anyone who knows or guesses your phpMyAdmin URL can directly access your phpMyAdmin panel. Set %sauthentication type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].');",
          "438:             '[a@?page=servers' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;mode=edit&amp;id=%1$d#tab_Server]',",
          "441:         $sZipDumpExportWarn = __('%sZip compression%s requires functions (%s) which are unavailable on this system.');",
          "444:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Import_export]',",
          "448:         $sZipDumpImportWarn = __('%sZip decompression%s requires functions (%s) which are unavailable on this system.');",
          "451:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&') . '&amp;formset=Features#tab_Import_export]',",
          "",
          "[Added Lines]",
          "458:         $sLoginCookieValidityWarn2 = __(",
          "459:             '%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) '",
          "460:             . 'at most. Values larger than 1800 may pose a security risk such as '",
          "461:             . 'impersonation.'",
          "462:         );",
          "465:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "466:             . '&amp;formset=Features#tab_Security]',",
          "469:         $sLoginCookieValidityWarn3 = __(",
          "470:             'If using [kbd]cookie[/kbd] authentication and %sLogin cookie store%s '",
          "471:             . 'is not 0, %sLogin cookie validity%s must be set to a value less or '",
          "472:             . 'equal to it.'",
          "473:         );",
          "476:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "477:             . '&amp;formset=Features#tab_Security]',",
          "479:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "480:             . '&amp;formset=Features#tab_Security]',",
          "483:         $sSecurityInfoMsg = __(",
          "484:             'If you feel this is necessary, use additional protection settings - '",
          "485:             . '%shost authentication%s settings and %strusted proxies list%s. '",
          "486:             . 'However, IP-based protection may not be reliable if your IP belongs '",
          "487:             . 'to an ISP where thousands of users, including you, are connected to.'",
          "488:         );",
          "491:             '[a@?page=servers' . PMA_URL_getCommon(array(), 'html', '&')",
          "492:             . '&amp;mode=edit&amp;id=%1$d#tab_Server_config]',",
          "494:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "495:             . '&amp;formset=Features#tab_Security]',",
          "498:         $sServerAuthConfigMsg = __(",
          "499:             'You set the [kbd]config[/kbd] authentication type and included '",
          "500:             . 'username and password for auto-login, which is not a desirable '",
          "501:             . 'option for live hosts. Anyone who knows or guesses your phpMyAdmin '",
          "502:             . 'URL can directly access your phpMyAdmin panel. Set %sauthentication '",
          "503:             . 'type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].'",
          "504:         );",
          "507:             '[a@?page=servers' . PMA_URL_getCommon(array(), 'html', '&')",
          "508:             . '&amp;mode=edit&amp;id=%1$d#tab_Server]',",
          "511:         $sZipDumpExportWarn = __(",
          "512:             '%sZip compression%s requires functions (%s) which are unavailable on '",
          "513:             . 'this system.'",
          "514:         );",
          "517:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "518:             . '&amp;formset=Features#tab_Import_export]',",
          "522:         $sZipDumpImportWarn = __(",
          "523:             '%sZip decompression%s requires functions (%s) which are unavailable '",
          "524:             . 'on this system.'",
          "525:         );",
          "528:             '[a@?page=form' . PMA_URL_getCommon(array(), 'html', '&')",
          "529:             . '&amp;formset=Features#tab_Import_export]',",
          "",
          "---------------"
        ],
        "libraries/config/Validator.class.php||libraries/config/Validator.class.php": [
          "File: libraries/config/Validator.class.php -> libraries/config/Validator.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:         if ($values['Servers/1/auth_type'] == 'config'",
          "316:             && empty($values['Servers/1/user'])",
          "317:         ) {",
          "320:             $error = true;",
          "321:         }",
          "322:         if ($values['Servers/1/auth_type'] == 'signon'",
          "",
          "[Removed Lines]",
          "318:             $result['Servers/1/user']",
          "319:                 = __('Empty username while using [kbd]config[/kbd] authentication method!');",
          "",
          "[Added Lines]",
          "318:             $result['Servers/1/user'] = __(",
          "319:                 'Empty username while using [kbd]config[/kbd] authentication method!'",
          "320:             );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:         if ($values['Servers/1/auth_type'] == 'signon'",
          "332:             && empty($values['Servers/1/SignonURL'])",
          "333:         ) {",
          "336:             $error = true;",
          "337:         }",
          "",
          "[Removed Lines]",
          "334:             $result['Servers/1/SignonURL']",
          "335:                 = __('Empty signon URL while using [kbd]signon[/kbd] authentication method!');",
          "",
          "[Added Lines]",
          "335:             $result['Servers/1/SignonURL'] = __(",
          "336:                 'Empty signon URL while using [kbd]signon[/kbd] authentication '",
          "337:                 . 'method!'",
          "338:             );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381:         $result = array();",
          "382:         if ($values['Servers/1/controluser'] == '') {",
          "385:             $error = true;",
          "386:         }",
          "387:         if ($values['Servers/1/controlpass'] == '') {",
          "390:             $error = true;",
          "391:         }",
          "392:         if (! $error) {",
          "",
          "[Removed Lines]",
          "383:             $result['Servers/1/controluser']",
          "384:                 = __('Empty phpMyAdmin control user while using phpMyAdmin configuration storage!');",
          "388:             $result['Servers/1/controlpass']",
          "389:                 = __('Empty phpMyAdmin control user password while using phpMyAdmin configuration storage!');",
          "",
          "[Added Lines]",
          "386:             $result['Servers/1/controluser'] = __(",
          "387:                 'Empty phpMyAdmin control user while using phpMyAdmin configuration '",
          "388:                 . 'storage!'",
          "389:             );",
          "393:             $result['Servers/1/controlpass'] = __(",
          "394:                 'Empty phpMyAdmin control user password while using phpMyAdmin '",
          "395:                 . 'configuration storage!'",
          "396:             );",
          "",
          "---------------"
        ],
        "libraries/config/page_settings.class.php||libraries/config/page_settings.class.php": [
          "File: libraries/config/page_settings.class.php -> libraries/config/page_settings.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         $error = null;",
          "89:             $this->_processPageSettings($form_display, $cf, $error);",
          "90:         }",
          "",
          "[Removed Lines]",
          "88:         if (isset($_POST['submit_save']) && $_POST['submit_save'] == $formGroupName) {",
          "",
          "[Added Lines]",
          "88:         if (isset($_POST['submit_save'])",
          "89:             && $_POST['submit_save'] == $formGroupName",
          "90:         ) {",
          "",
          "---------------"
        ],
        "libraries/dbi/DBIDummy.class.php||libraries/dbi/DBIDummy.class.php": [
          "File: libraries/dbi/DBIDummy.class.php -> libraries/dbi/DBIDummy.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:         )",
          "528:     ),",
          "529:     array(",
          "531:             . \"WHERE `TABLE_SCHEMA` = 'db' AND `TABLE_NAME` = 'table'\",",
          "532:         'result' => array()",
          "533:     ),",
          "",
          "[Removed Lines]",
          "530:         'query' => \"SELECT `PARTITION_METHOD` FROM `information_schema`.`PARTITIONS` \"",
          "",
          "[Added Lines]",
          "530:         'query' => \"SELECT `PARTITION_METHOD` \"",
          "531:             . \"FROM `information_schema`.`PARTITIONS` \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545:         )",
          "546:     ),",
          "547:     array(",
          "549:         'result' => array()",
          "550:     ),",
          "551:     array(",
          "",
          "[Removed Lines]",
          "548:         'query' => \"SHOW FULL TABLES FROM `default` WHERE `Table_type`!='BASE TABLE'\",",
          "",
          "[Added Lines]",
          "549:         'query' => \"SHOW FULL TABLES FROM `default` \"",
          "550:             . \"WHERE `Table_type`!='BASE TABLE'\",",
          "",
          "---------------"
        ],
        "libraries/normalization.lib.php||libraries/normalization.lib.php": [
          "File: libraries/normalization.lib.php -> libraries/normalization.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:     $html_output .= '<fieldset>';",
          "805:     $html_output .= '<legend>'",
          "806:         . __('Improve table structure (Normalization):') . '</legend>';",
          "808:     $choices = array(",
          "809:             '1nf' => __('First step of normalization (1NF)'),",
          "810:             '2nf'      => __('Second step of normalization (1NF+2NF)'),",
          "",
          "[Removed Lines]",
          "807:     $html_output .= '<h3>' . __('Select up to what step you want to normalize') . '</h3>';",
          "",
          "[Added Lines]",
          "807:     $html_output .= '<h3>' . __('Select up to what step you want to normalize')",
          "808:         . '</h3>';",
          "",
          "---------------"
        ],
        "libraries/rte/rte_events.lib.php||libraries/rte/rte_events.lib.php": [
          "File: libraries/rte/rte_events.lib.php -> libraries/rte/rte_events.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:     } else {",
          "421:         $retval .= \"        <input name='item_type' type='hidden' \\n\";",
          "422:         $retval .= \"               value='{$item['item_type']}' />\\n\";",
          "425:         $retval .= \"            {$item['item_type']}\\n\";",
          "426:         $retval .= \"        </div>\\n\";",
          "427:         $retval .= \"        <input style='width: 49%;' type='submit'\\n\";",
          "",
          "[Removed Lines]",
          "423:         $retval .= \"        <div class='floatleft' style='width: 49%; text-align: center;\"",
          "424:                                 . \" font-weight: bold;'>\\n\";",
          "",
          "[Added Lines]",
          "423:         $retval .= \"        <div class='floatleft' style='width: 49%; \"",
          "424:             . \"text-align: center; font-weight: bold;'>\\n\";",
          "",
          "---------------"
        ],
        "libraries/rte/rte_routines.lib.php||libraries/rte/rte_routines.lib.php": [
          "File: libraries/rte/rte_routines.lib.php -> libraries/rte/rte_routines.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:             if (isset($GLOBALS['proc_priv']) && $GLOBALS['proc_priv']",
          "1003:                 && isset($GLOBALS['flush_priv']) && $GLOBALS['flush_priv']",
          "1004:             ) {",
          "1007:             } else {",
          "1011:                         \"You do not have sufficient privileges to perform this \"",
          "1013:                     )",
          "1014:                     . \"' disabled/></td>\";",
          "1015:             }",
          "",
          "[Removed Lines]",
          "1005:                 $retval .= \"    <td><input type='checkbox' name='item_adjust_privileges'\"",
          "1006:                     . \" value='1' checked /></td>\";",
          "1008:                 $retval .= \"    <td><input type='checkbox' name='item_adjust_privileges'\"",
          "1009:                     . \" value='1' \"",
          "1010:                     . \"title='\" . __(",
          "1012:                         . \"operation; Please refer to the documentation for more details\"",
          "",
          "[Added Lines]",
          "1005:                 $retval .= \"    <td><input type='checkbox' \"",
          "1006:                     . \"name='item_adjust_privileges' value='1' checked /></td>\";",
          "1008:                 $retval .= \"    <td><input type='checkbox' \"",
          "1009:                     . \"name='item_adjust_privileges' value='1' title='\" . __(",
          "1011:                         . \"operation; Please refer to the documentation for more \"",
          "1012:                         . \"details\"",
          "",
          "---------------"
        ],
        "libraries/server_privileges.lib.php||libraries/server_privileges.lib.php": [
          "File: libraries/server_privileges.lib.php -> libraries/server_privileges.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3082:                 : __('No'))",
          "3083:             . '</td>' . \"\\n\"",
          "3084:             . '<td>';",
          "3086:             $html_output .= __('Yes');",
          "3087:         } else {",
          "3088:             $html_output .= __('No');",
          "",
          "[Removed Lines]",
          "3085:         if (! empty($row['Table_privs']) || ! empty ($row['Column_priv'])) {",
          "",
          "[Added Lines]",
          "3085:         if (!empty($row['Table_privs']) || !empty($row['Column_priv'])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4022:         $create_user_real, $create_user_show, $real_sql_query, $sql_query,",
          "4023:         $password_set_real, $password_set_show",
          "4024:     ) = PMA_getSqlQueriesForDisplayAndAddUser(",
          "4026:     );",
          "4028:     if (empty($_REQUEST['change_copy'])) {",
          "",
          "[Removed Lines]",
          "4025:         $username, $hostname, (isset ($password) ? $password : '')",
          "",
          "[Added Lines]",
          "4025:         $username, $hostname, (isset($password) ? $password : '')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4132:     $tablename = null;",
          "4133:     $dbname_is_wildcard = null;",
          "4136:         $username = $_REQUEST['username'];",
          "4137:     }",
          "4139:         $hostname = $_REQUEST['hostname'];",
          "4140:     }",
          "",
          "[Removed Lines]",
          "4135:     if (isset ($_REQUEST['username'])) {",
          "4138:     if (isset ($_REQUEST['hostname'])) {",
          "",
          "[Added Lines]",
          "4135:     if (isset($_REQUEST['username'])) {",
          "4138:     if (isset($_REQUEST['hostname'])) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4526:                 $flushnote = new PMA_Message(",
          "4527:                     __(",
          "4528:                         'Note: phpMyAdmin gets the users\\' privileges directly '",
          "4531:                         . 'if they have been changed manually. In this case, '",
          "4532:                         . 'you should %sreload the privileges%s before you continue.'",
          "4533:                     ),",
          "",
          "[Removed Lines]",
          "4529:                         . 'from MySQL\\'s privilege tables. The content of these tables '",
          "4530:                         . 'may differ from the privileges the server uses, '",
          "",
          "[Added Lines]",
          "4529:                         . 'from MySQL\\'s privilege tables. The content of these '",
          "4530:                         . 'tables may differ from the privileges the server uses, '",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4545:                 $flushnote = new PMA_Message(",
          "4546:                     __(",
          "4547:                         'Note: phpMyAdmin gets the users\\' privileges directly '",
          "4550:                         . 'if they have been changed manually. In this case, '",
          "4553:                     )",
          "4554:                     . PMA_Util::showMySQLDocu(",
          "4555:                         'privileges-provided',",
          "",
          "[Removed Lines]",
          "4548:                         . 'from MySQL\\'s privilege tables. The content of these tables '",
          "4549:                         . 'may differ from the privileges the server uses, '",
          "4551:                         . 'the privileges have to be reloaded but currently, you don\\'t have '",
          "4552:                         . 'the RELOAD privilege.'",
          "",
          "[Added Lines]",
          "4548:                         . 'from MySQL\\'s privilege tables. The content of these '",
          "4549:                         . 'tables may differ from the privileges the server uses, '",
          "4551:                         . 'the privileges have to be reloaded but currently, you '",
          "4552:                         . 'don\\'t have the RELOAD privilege.'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "563b3b709d75f5d5b034d644fcec512a562c7f1f",
      "candidate_info": {
        "commit_hash": "563b3b709d75f5d5b034d644fcec512a562c7f1f",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/563b3b709d75f5d5b034d644fcec512a562c7f1f",
        "files": [
          "js/ajax.js",
          "js/microhistory.js",
          "js/sql.js",
          "libraries/Footer.class.php"
        ],
        "message": "Move to HTML5 API for maintaining AJAX history\n\nSigned-off-by: Atul Pratap Singh <atulpratapsingh05@gmail.com>",
        "before_after_code_files": [
          "js/ajax.js||js/ajax.js",
          "js/microhistory.js||js/microhistory.js",
          "js/sql.js||js/sql.js",
          "libraries/Footer.class.php||libraries/Footer.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "js/ajax.js||js/ajax.js"
          ],
          "candidate": [
            "js/ajax.js||js/ajax.js"
          ]
        }
      },
      "candidate_diff": {
        "js/ajax.js||js/ajax.js": [
          "File: js/ajax.js -> js/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:             return false;",
          "241:         }",
          "242:         AJAX.resetLock();",
          "244:         if (AJAX.active === true) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:         var isLink = !! href || false;",
          "244:         var previousLinkAborted = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:                     AJAX.$msgbox = PMA_ajaxShowMessage(PMA_messages.strAbortedRequest);",
          "254:                     AJAX.active = false;",
          "255:                     AJAX.xhr = null;",
          "256:                 } else {",
          "258:                     return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:                     if (isLink) {",
          "259:                         previousLinkAborted = true;",
          "260:                     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:         $('html, body').animate({scrollTop: 0}, 'fast');",
          "271:         var url = isLink ? href : $(this).attr('action');",
          "272:         var params = 'ajax_request=true&ajax_page_request=true';",
          "273:         if (! isLink) {",
          "",
          "[Removed Lines]",
          "270:         var isLink = !! href || false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:             AJAX.$msgbox = PMA_ajaxShowMessage();",
          "289:             AJAX.xhr = $.get(url, params, AJAX.responseHandler);",
          "290:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:             if (history && history.pushState) {",
          "295:                 if (previousLinkAborted) {",
          "298:                     history.replaceState(null, null, href);",
          "299:                 } else {",
          "300:                     history.pushState(null, null, href);",
          "301:                 }",
          "302:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:                     $('title').replaceWith(data._title);",
          "340:                 }",
          "341:                 if (data._menu) {",
          "344:                         PMA_MicroHistory.menus.replace(data._menu);",
          "345:                         PMA_MicroHistory.menus.add(data._menuHash, data._menu);",
          "346:                     }",
          "",
          "[Removed Lines]",
          "343:                     if (! (history && history.pushState)) {",
          "",
          "[Added Lines]",
          "355:                     if (history && history.pushState) {",
          "356:                         history.replaceState({",
          "357:                             menu : data._menu",
          "358:                             },",
          "359:                             null",
          "360:                         );",
          "361:                         AJAX.handleMenu.replace(data._menu);",
          "362:                     } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "680: $(function () {",
          "681:     if (history && history.pushState) {",
          "683:     } else {",
          "687:         if (PMA_MicroHistory.primer.url) {",
          "688:             PMA_MicroHistory.menus.add(",
          "689:                 PMA_MicroHistory.primer.menuHash,",
          "695:             );",
          "696:         }",
          "697:         $(function () {",
          "",
          "[Removed Lines]",
          "690:                 $('<div></div>')",
          "691:                     .append('<div></div>')",
          "692:                     .append($('#serverinfo').clone())",
          "693:                     .append($('#topmenucontainer').clone())",
          "694:                     .html()",
          "",
          "[Added Lines]",
          "699:     var menuContent = $('<div></div>')",
          "700:         .append($('#serverinfo').clone())",
          "701:         .append($('#topmenucontainer').clone())",
          "702:         .html();",
          "704:         $(window).on('popstate', function(event) {",
          "705:             if (event && event.originalEvent.state && event.originalEvent.state.menu) {",
          "706:                 var params = 'ajax_request=true&ajax_page_request=true';",
          "707:                 $.get(location.href, params, AJAX.responseHandler);",
          "713:             }",
          "714:         });",
          "716:         history.replaceState({",
          "717:             menu : menuContent",
          "718:             },",
          "719:             null",
          "720:         );",
          "723:         AJAX.scriptHandler.load([{'name' : 'microhistory.js', 'fire' : 1}]);",
          "728:                 menuContent",
          "",
          "---------------"
        ],
        "js/microhistory.js||js/microhistory.js": [
          "File: js/microhistory.js -> js/microhistory.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:     jQuery(function () {",
          "315:             if (userChange === false) {",
          "317:                 userChange = true;",
          "",
          "[Removed Lines]",
          "314:         jQuery(window).hashchange(function () { return;",
          "",
          "[Added Lines]",
          "314:         jQuery(window).hashchange(function () {",
          "",
          "---------------"
        ],
        "js/sql.js||js/sql.js": [
          "File: js/sql.js -> js/sql.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:                         PMA_Microhistory.menus.replace(data._menu);",
          "400:                         PMA_Microhistory.menus.add(data._menuHash, data._menu);",
          "401:                     }",
          "403:                     if (! (history && history.pushState)) {",
          "404:                         PMA_Microhistory.menus.replace(PMA_Microhistory.menus.get(data._menuHash));",
          "405:                     }",
          "",
          "[Removed Lines]",
          "402:                 } else if (data._menuHash) {",
          "",
          "[Added Lines]",
          "402:                 } else if (data._menuHash) {debugger;",
          "",
          "---------------"
        ],
        "libraries/Footer.class.php||libraries/Footer.class.php": [
          "File: libraries/Footer.class.php -> libraries/Footer.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:                     $this->_scripts->addCode(",
          "324:                         sprintf(",
          "326:                             . ' url: \"%s\",'",
          "327:                             . ' scripts: %s,'",
          "328:                             . ' menuHash: \"%s\"'",
          "",
          "[Removed Lines]",
          "325:                             'PMA_Microhistory.primer = {'",
          "",
          "[Added Lines]",
          "325:                             'if (! (history && history.pushState)) PMA_Microhistory.primer = {'",
          "",
          "---------------"
        ]
      }
    }
  ]
}