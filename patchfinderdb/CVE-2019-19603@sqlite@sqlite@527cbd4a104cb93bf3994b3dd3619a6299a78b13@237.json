{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5976552a72f33438c293ab0584d981909955e866",
      "candidate_info": {
        "commit_hash": "5976552a72f33438c293ab0584d981909955e866",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976552a72f33438c293ab0584d981909955e866",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --max-data and --max-as options to dbfuzz2.  Also cause dbfuzz2 to show its maximum RSS size upon exit in standalone mode with the -v option.\n\nFossilOrigin-Name: 7ce93e824a954d1e0cf8d7343e59a2660175f42bd4dac02aed8ad77644e7eb2f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c11ae4fed89484f0a0061002861b5d599bbda8e40a1f0c33fdbe8cb072134d5c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         bVdbeDebug = 1;",
          "151:         continue;",
          "152:       }",
          "154:         struct rlimit x,y;",
          "155:         if( i+1==argc ){",
          "156:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "157:           exit(1);",
          "158:         }",
          "159:         memset(&x,0,sizeof(x));",
          "161:         y.rlim_cur = atoi(argv[++i]);",
          "162:         y.rlim_max = x.rlim_cur;",
          "164:         memset(&y,0,sizeof(y));",
          "168:         continue;",
          "169:       }",
          "170:     }",
          "",
          "[Removed Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0 ){",
          "160:         getrlimit(RLIMIT_STACK, &x);",
          "163:         setrlimit(RLIMIT_STACK, &y);",
          "165:         getrlimit(RLIMIT_STACK, &y);",
          "166:         printf(\"Stack size limit changed from %d to %d\\n\",",
          "167:                (int)x.rlim_cur, (int)y.rlim_cur);",
          "",
          "[Added Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0",
          "154:        || strcmp(z,\"max-data\")==0",
          "155:        || strcmp(z,\"max-as\")==0",
          "156:       ){",
          "158:         int resource = RLIMIT_STACK;",
          "159:         char *zType = \"RLIMIT_STACK\";",
          "164:         if( z[4]=='d' ){",
          "165:           resource = RLIMIT_DATA;",
          "166:           zType = \"RLIMIT_DATA\";",
          "167:         }",
          "168:         if( z[4]=='a' ){",
          "169:           resource = RLIMIT_AS;",
          "170:           zType = \"RLIMIT_AS\";",
          "171:         }",
          "173:         getrlimit(resource, &x);",
          "176:         setrlimit(resource, &y);",
          "178:         getrlimit(resource, &y);",
          "179:         printf(\"%s changed from %d to %d\\n\",",
          "180:                zType, (int)x.rlim_cur, (int)y.rlim_cur);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     }",
          "218:   }",
          "219:   if( eVerbosity>0 ){",
          "220:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "221:   }",
          "222:   return 0;",
          "223: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     struct rusage x;",
          "235:     memset(&x, 0, sizeof(x));",
          "236:     if( getrusage(RUSAGE_SELF, &x)==0 ){",
          "237:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "238:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c59136498547fefb69e3edaff4d949b0bf1113e",
      "candidate_info": {
        "commit_hash": "6c59136498547fefb69e3edaff4d949b0bf1113e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c59136498547fefb69e3edaff4d949b0bf1113e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix a minor typo in a comment.  No changes to code.\n\nFossilOrigin-Name: 95209072176ff21a91e96d5bd014b35ef100da2b0b93958baf6df4294a8daa85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af53c41a127c314c0608f3fd016d3a26896783745e46cd180976a188400cdb75",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ]
      }
    },
    {
      "candidate_hash": "55f66b341a55f418fac2e6ce4554dc9702309616",
      "candidate_info": {
        "commit_hash": "55f66b341a55f418fac2e6ce4554dc9702309616",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55f66b341a55f418fac2e6ce4554dc9702309616",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c",
          "src/btree.c",
          "src/build.c",
          "src/fkey.c",
          "src/parse.y",
          "src/pcache.c",
          "src/pcache1.c",
          "src/select.c",
          "src/trigger.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/wal.c",
          "src/where.c",
          "src/window.c",
          "tool/lempar.c"
        ],
        "message": "Add new assert() statements in an attempt to help static analyzers avoid false-positives.\n\nFossilOrigin-Name: 9e66458592d40fbd96ea5f21339573110ca1cfe328238a020c9420a87d35dd72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/pcache.c||src/pcache.c",
          "src/pcache1.c||src/pcache1.c",
          "src/select.c||src/select.c",
          "src/trigger.c||src/trigger.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/wal.c||src/wal.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 22a7c15b262376fb0ce4dd3d044373380d86c5ccd96e2f24576cf04318597c33",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:   }",
          "620:   if( p->isAttached ){",
          "621:     pp = sqlite3PagerBackupPtr(sqlite3BtreePager(p->pSrc));",
          "622:     while( *pp!=p ){",
          "623:       pp = &(*pp)->pNext;",
          "624:     }",
          "626:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622:     assert( pp!=0 );",
          "625:       assert( pp!=0 );",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7962:   ));",
          "7964:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "7965:   put4byte(pRight, apNew[nNew-1]->pgno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7965:   assert( nNew>=1 && nNew<=ArraySize(apNew) );",
          "7966:   assert( apNew[nNew-1]!=0 );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3632:       if( pStart ){",
          "3633:         int n = (int)(pParse->sLastToken.z - pName->z) + pParse->sLastToken.n;",
          "3634:         if( pName->z[n-1]==';' ) n--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3632:       assert( pName!=0 || pStart==0 );",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:       return 0;",
          "1333:     }",
          "1334:     assert( pStep!=0 );",
          "1336:     switch( action ){",
          "1337:       case OE_Restrict:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:     assert( pTrigger!=0 );",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:   static void parserDoubleLinkSelect(Parse *pParse, Select *p){",
          "461:     if( p->pPrior ){",
          "462:       Select *pNext = 0, *pLoop;",
          "463:       int mxSelect, cnt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:     assert( p!=0 );",
          "",
          "---------------"
        ],
        "src/pcache.c||src/pcache.c": [
          "File: src/pcache.c -> src/pcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     sqlite3PCacheSetDefault();",
          "265:   }",
          "266:   return sqlite3GlobalConfig.pcache2.xInit(sqlite3GlobalConfig.pcache2.pArg);",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     assert( sqlite3GlobalConfig.pcache2.xInit!=0 );",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   assert( sqlite3_mutex_held(pCache->pGroup->mutex) );",
          "426:   if( pCache->pFree || (pCache->nPage==0 && pcache1InitBulk(pCache)) ){",
          "427:     p = pCache->pFree;",
          "428:     pCache->pFree = p->pNext;",
          "429:     p->pNext = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     assert( pCache->pFree!=0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3949:   for(pParent=p; pParent; pParent=pParent->pPrior, pSub=pSub->pPrior){",
          "3950:     int nSubSrc;",
          "3951:     u8 jointype = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3952:     assert( pSub!=0 );",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     Trigger *pLink = pTrig;",
          "341:     Hash *pHash = &db->aDb[iDb].pSchema->trigHash;",
          "342:     assert( sqlite3SchemaMutexHeld(db, iDb, 0) );",
          "343:     pTrig = sqlite3HashInsert(pHash, zName, pTrig);",
          "344:     if( pTrig ){",
          "345:       sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     assert( pLink!=0 );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:       int j;",
          "1909:       i -= p->nOp;",
          "1910:       for(j=0; i>=apSub[j]->nOp; j++){",
          "1911:         i -= apSub[j]->nOp;",
          "1912:       }",
          "1913:       pOp = &apSub[j]->aOp[i];",
          "1914:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1910:       assert( apSub!=0 );",
          "1911:       assert( nSub>0 );",
          "1914:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1728:       rc = vdbeSorterListToPMA(&pSorter->aTask[nWorker], &pSorter->list);",
          "1729:     }else{",
          "1734:       assert( pTask->pThread==0 && pTask->bDone==0 );",
          "1735:       assert( pTask->list.pList==0 );",
          "1736:       assert( pTask->list.aMemory==0 || pSorter->list.aMemory!=0 );",
          "1738:       pSorter->iPrev = (u8)(pTask - pSorter->aTask);",
          "1739:       pTask->list = pSorter->list;",
          "1740:       pSorter->list.pList = 0;",
          "",
          "[Removed Lines]",
          "1731:       u8 *aMem = pTask->list.aMemory;",
          "1732:       void *pCtx = (void*)pTask;",
          "",
          "[Added Lines]",
          "1731:       u8 *aMem;",
          "1732:       void *pCtx;",
          "1734:       assert( pTask!=0 );",
          "1739:       aMem = pTask->list.aMemory;",
          "1740:       pCtx = (void*)pTask;",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         if( rc ) return rc;",
          "3479:         iOffset += szFrame;",
          "3480:         nExtra++;",
          "3481:       }",
          "3482:     }",
          "3483:     if( bSync ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3481:         assert( pLast!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3510:     iFrame++;",
          "3511:     rc = walIndexAppend(pWal, iFrame, p->pgno);",
          "3512:   }",
          "3513:   while( rc==SQLITE_OK && nExtra>0 ){",
          "3514:     iFrame++;",
          "3515:     nExtra--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3514:   assert( pLast!=0 || nExtra==0 );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2271:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "2272:   for(i=pWC->nTerm, pTerm=pWC->a; i>0; i--, pTerm++){",
          "2273:     if( (pTerm->wtFlags & TERM_VIRTUAL)!=0 ) break;",
          "2274:     if( (pTerm->prereqAll & pLoop->maskSelf)==0 ) continue;",
          "2275:     if( (pTerm->prereqAll & notAllowed)!=0 ) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2273:     assert( pTerm!=0 );",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: static int selectWindowRewriteExprCb(Walker *pWalker, Expr *pExpr){",
          "749:   struct WindowRewrite *p = pWalker->u.pRewrite;",
          "750:   Parse *pParse = pWalker->pParse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751:   assert( p!=0 );",
          "752:   assert( p->pWin!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "847:   Walker sWalker;",
          "848:   WindowRewrite sRewrite;",
          "850:   memset(&sWalker, 0, sizeof(Walker));",
          "851:   memset(&sRewrite, 0, sizeof(WindowRewrite));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   assert( pWin!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1567:   int lblNext;",
          "1568:   int lblBrk;",
          "1569:   int addrNext;",
          "1572:   nPeer = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1574:   lblNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "1570:   int csr = pMWin->csrApp;",
          "",
          "[Added Lines]",
          "1573:   int csr;",
          "1575:   assert( pMWin!=0 );",
          "1576:   csr = pMWin->csrApp;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:       return yy_default[stateno];",
          "569:     }else{",
          "570:       return yy_action[i];",
          "571:     }",
          "572:   }while(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:       assert( i>=0 && i<sizeof(yy_action)/sizeof(yy_action[0]) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1722baaf80218bcad87597803510c4e214a5811",
      "candidate_info": {
        "commit_hash": "f1722baaf80218bcad87597803510c4e214a5811",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f1722baaf80218bcad87597803510c4e214a5811",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/wherecode.c",
          "tool/addopcodes.tcl"
        ],
        "message": "Eliminate the tool/addopcodes.tcl script.  The purpose of that script was to keep the number of parser codes below 256 in order to save parser table space. But we have long since blown through that ceiling so the addopcodes.tcl script was just needless complexity. There is no longer any reason to keep it around.\n\nFossilOrigin-Name: d272819298083ebbde57962a2938925b1aaa1caf03e48bb3ea26ad91e0461d84",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/wherecode.c||src/wherecode.c",
          "tool/addopcodes.tcl||tool/addopcodes.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051: #",
          "1052: parse.h: parse.c",
          "1055:  cp $(TOP)/src/parse.y .",
          "1057:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) parse.y",
          "1061: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid$(BEXE) $(TOP)/VERSION",
          "1062:  $(TCLSH_CMD) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "1054: parse.c: $(TOP)/src/parse.y lemon$(BEXE) $(TOP)/tool/addopcodes.tcl",
          "1056:  rm -f parse.h",
          "1058:  mv parse.h parse.h.temp",
          "1059:  $(TCLSH_CMD) $(TOP)/tool/addopcodes.tcl parse.h.temp >parse.h",
          "",
          "[Added Lines]",
          "1054: parse.c: $(TOP)/src/parse.y lemon$(BEXE)",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: #",
          "2140: parse.h: parse.c",
          "2143:  del /Q parse.y parse.h parse.h.temp 2>NUL",
          "2144:  copy $(TOP)\\src\\parse.y .",
          "2145:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) parse.y",
          "2149: $(SQLITE3H): $(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION",
          "2150:  $(TCLSH_CMD) $(TOP)\\tool\\mksqlite3h.tcl $(TOP:\\=/) > $(SQLITE3H) $(MKSQLITE3H_ARGS)",
          "",
          "[Removed Lines]",
          "2142: parse.c: $(TOP)\\src\\parse.y lemon.exe $(TOP)\\tool\\addopcodes.tcl",
          "2146:  move parse.h parse.h.temp",
          "2147:  $(TCLSH_CMD) $(TOP)\\tool\\addopcodes.tcl parse.h.temp > parse.h",
          "",
          "[Added Lines]",
          "2142: parse.c: $(TOP)\\src\\parse.y lemon.exe",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "716: #",
          "717: parse.h: parse.c",
          "720:  cp $(TOP)/src/parse.y .",
          "722:  ./lemon -s $(OPTS) parse.y",
          "726: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid $(TOP)/VERSION $(TOP)/ext/rtree/sqlite3rtree.h",
          "727:  tclsh $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "719: parse.c: $(TOP)/src/parse.y lemon $(TOP)/tool/addopcodes.tcl",
          "721:  rm -f parse.h",
          "723:  mv parse.h parse.h.temp",
          "724:  tclsh $(TOP)/tool/addopcodes.tcl parse.h.temp >parse.h",
          "",
          "[Added Lines]",
          "719: parse.c: $(TOP)/src/parse.y lemon",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbc67de5a3937fa65811ed7c13e870699c895660dc2132cf9d3cf5d83364e344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:     p = sqlite3DbMallocRawNN(pParse->db, sizeof(Expr));",
          "858:     if( p ){",
          "859:       memset(p, 0, sizeof(Expr));",
          "861:       p->iAgg = -1;",
          "862:     }",
          "863:     sqlite3ExprAttachSubtrees(pParse->db, p, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "860:       p->op = op & TKFLG_MASK;",
          "",
          "[Added Lines]",
          "860:       p->op = op & 0xff;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1744: filter_opt(A) ::= .                            { A = 0; }",
          "1745: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1752: %token",
          "1768: .",
          "1774: %include {",
          "1775: #if TK_SPAN>255",
          "1776: # error too many tokens in the grammar",
          "1777: #endif",
          "1778: }",
          "1786: %token SPACE ILLEGAL.",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1967:         pAndExpr = sqlite3ExprAnd(db, pAndExpr, pExpr);",
          "1968:       }",
          "1969:       if( pAndExpr ){",
          "1971:       }",
          "1972:     }",
          "",
          "[Removed Lines]",
          "1970:         pAndExpr = sqlite3PExpr(pParse, TK_AND|TKFLG_DONTFOLD, 0, pAndExpr);",
          "",
          "[Added Lines]",
          "1975:         pAndExpr = sqlite3PExpr(pParse, TK_AND|0x10000, 0, pAndExpr);",
          "",
          "---------------"
        ],
        "tool/addopcodes.tcl||tool/addopcodes.tcl": [
          "File: tool/addopcodes.tcl -> tool/addopcodes.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
      "candidate_info": {
        "commit_hash": "38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fixes for the \".recover\" shell command.\n\nFossilOrigin-Name: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f193ca587f9e4f925f4f2343b0b07053bd6f93dd87fc6f8f41cf4479e90cf562",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6113:     sqlite3_stmt *pStmt = 0;",
          "6115:     rc = sqlite3_open(\"\", &dbtmp);",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, zSql, 0, 0, 0);",
          "6118:       if( rc==SQLITE_ERROR ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "6118:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6361:   if( rc==SQLITE_OK ){",
          "6362:     sqlite3_stmt *pStmt = 0;",
          "6363:     raw_printf(pState->out, \"BEGIN;\\n\");",
          "6365:         \"SELECT sql FROM recovery.schema \"",
          "6370:     );",
          "6371:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6372:       const char *zCreateTable = (const char*)sqlite3_column_text(pStmt, 0);",
          "6374:     }",
          "6375:     shellFinalize(&rc, pStmt);",
          "6376:   }",
          "",
          "[Removed Lines]",
          "6364:     shellPrepare(pState->db, &rc,",
          "6366:         \"WHERE type='table' \"",
          "6367:         \"  AND length(sql)>6\"",
          "6368:         \"  AND sql LIKE 'create table%'\"",
          "6369:         \"  AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'\", &pStmt",
          "6373:       raw_printf(pState->out, \"%s;\\n\", zCreateTable);",
          "",
          "[Added Lines]",
          "6367:     raw_printf(pState->out, \"PRAGMA writable_schema = on;\\n\");",
          "6368:     shellPrepare(pState->db, &rc,",
          "6370:         \"WHERE type='table' AND sql LIKE 'create table%'\", &pStmt",
          "6374:       raw_printf(pState->out, \"CREATE TABLE IF NOT EXISTS %s;\\n\",",
          "6375:           &zCreateTable[12]",
          "6376:       );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6379:   shellPrepare(pState->db, &rc,",
          "6380:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "6382:   );",
          "6383:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6384:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "",
          "[Removed Lines]",
          "6381:       \" WHERE root>1 GROUP BY root, intkey\", &pLoop",
          "",
          "[Added Lines]",
          "6384:       \" WHERE root>1 GROUP BY root, intkey ORDER BY root=(\"",
          "6385:       \"  SELECT rootpage FROM recovery.schema WHERE name='sqlite_sequence'\"",
          "6386:       \")\", &pLoop",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6389:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6390:     if( pTab ){",
          "6391:       sqlite3_stmt *pData = 0;",
          "6392:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6393:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "6394:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6397:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6410:   }",
          "6411:   shellFinalize(&rc, pLoop);",
          "6413:   if( rc==SQLITE_OK ){",
          "6414:     raw_printf(pState->out, \"COMMIT;\\n\");",
          "6415:   }",
          "6416:   sqlite3_exec(pState->db, \"DETACH recovery\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6422:   if( rc==SQLITE_OK ){",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "6430:       if( sqlite3_strnicmp(zSql, \"create virt\", 11)==0 ){",
          "6431:         const char *zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6432:         char *zPrint = shellMPrintf(&rc,",
          "6433:           \"INSERT INTO sqlite_master VALUES('table', %Q, %Q, 0, %Q)\",",
          "6434:           zName, zName, zSql",
          "6435:         );",
          "6436:         raw_printf(pState->out, \"%s;\\n\", zPrint);",
          "6437:         sqlite3_free(zPrint);",
          "6438:       }else{",
          "6439:         raw_printf(pState->out, \"%s;\\n\", zSql);",
          "6440:       }",
          "6441:     }",
          "6442:     shellFinalize(&rc, pStmt);",
          "6443:   }",
          "6446:     raw_printf(pState->out, \"PRAGMA writable_schema = off;\\n\");",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test the shell tool \".ar\" command.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix recover",
          "19: ifcapable !vtab {",
          "20:   finish_test; return",
          "21: }",
          "22: set CLI [test_find_cli]",
          "24: proc compare_result {db1 db2 sql} {",
          "25:   set r1 [$db1 eval $sql]",
          "26:   set r2 [$db2 eval $sql]",
          "27:   if {$r1 != $r2} {",
          "28:   puts \"r1: $r1\"",
          "29:   puts \"r2: $r2\"",
          "30:     error \"mismatch for $sql\"",
          "31:   }",
          "32:   return \"\"",
          "33: }",
          "35: proc compare_dbs {db1 db2} {",
          "36:   compare_result $db1 $db2 \"SELECT sql FROM sqlite_master ORDER BY 1\"",
          "37:   foreach tbl [$db1 eval {SELECT name FROM sqlite_master WHERE type='table'}] {",
          "38:     compare_result $db1 $db2 \"SELECT * FROM $tbl\"",
          "39:   }",
          "40: }",
          "42: proc do_recover_test {tn} {",
          "43:   set fd [open \"|$::CLI test.db .recover\"]",
          "44:   fconfigure $fd -encoding binary",
          "45:   fconfigure $fd -translation binary",
          "46:   set sql [read $fd]",
          "47:   close $fd",
          "49:   forcedelete test.db2",
          "50:   sqlite3 db2 test.db2",
          "51:   breakpoint",
          "52:   execsql $sql db2",
          "53:   uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "54:   db2 close",
          "55: }",
          "57: set doc {",
          "58:   hello",
          "59:   world",
          "60: }",
          "61: do_execsql_test 1.1.1 {",
          "62:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "63:   INSERT INTO t1 VALUES(1, 4, X'1234567800');",
          "64:   INSERT INTO t1 VALUES(2, 'test', 8.1);",
          "65:   INSERT INTO t1 VALUES(3, $doc, 8.4);",
          "66: }",
          "67: do_recover_test 1.1.2",
          "69: do_execsql_test 1.2.1 \"",
          "70:   DELETE FROM t1;",
          "71:   INSERT INTO t1 VALUES(13, 'hello\\r\\nworld', 13);",
          "72: \"",
          "73: do_recover_test 1.2.2",
          "75: do_execsql_test 1.3.1 \"",
          "76:   CREATE TABLE t2(i INTEGER PRIMARY KEY AUTOINCREMENT, b, c);",
          "77:   INSERT INTO t2 VALUES(NULL, 1, 2);",
          "78:   INSERT INTO t2 VALUES(NULL, 3, 4);",
          "79:   INSERT INTO t2 VALUES(NULL, 5, 6);",
          "80:   CREATE TABLE t3(i INTEGER PRIMARY KEY AUTOINCREMENT, b, c);",
          "81:   INSERT INTO t3 VALUES(NULL, 1, 2);",
          "82:   INSERT INTO t3 VALUES(NULL, 3, 4);",
          "83:   INSERT INTO t3 VALUES(NULL, 5, 6);",
          "84:   DELETE FROM t2;",
          "85: \"",
          "86: do_recover_test 1.3.2",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}