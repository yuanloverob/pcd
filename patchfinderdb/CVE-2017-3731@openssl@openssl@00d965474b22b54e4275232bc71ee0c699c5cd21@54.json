{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f99bfed678b09110fda82bc6896fd45eb0b376c",
      "candidate_info": {
        "commit_hash": "3f99bfed678b09110fda82bc6896fd45eb0b376c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3f99bfed678b09110fda82bc6896fd45eb0b376c",
        "files": [
          "test/sslapitest.c"
        ],
        "message": "Add a read_ahead test\n\nThis test checks that read_ahead works correctly when dealing with large\nrecords.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 7856332e8c14fd1da1811a9d0afde243dd0f4669)",
        "before_after_code_files": [
          "test/sslapitest.c||test/sslapitest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define NUM_EXTRA_CERTS 40",
          "35: static int execute_test_large_message(const SSL_METHOD *smeth,",
          "37: {",
          "38:     SSL_CTX *cctx = NULL, *sctx = NULL;",
          "39:     SSL *clientssl = NULL, *serverssl = NULL;",
          "",
          "[Removed Lines]",
          "36:                                       const SSL_METHOD *cmeth)",
          "",
          "[Added Lines]",
          "36:                                       const SSL_METHOD *cmeth, int read_ahead)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         goto end;",
          "62:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     if(read_ahead) {",
          "69:         SSL_CTX_set_read_ahead(cctx, 1);",
          "70:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108: static int test_large_message_tls(void)",
          "109: {",
          "111: }",
          "113: #ifndef OPENSSL_NO_DTLS",
          "114: static int test_large_message_dtls(void)",
          "115: {",
          "116:     return execute_test_large_message(DTLS_server_method(),",
          "118: }",
          "119: #endif",
          "",
          "[Removed Lines]",
          "110:     return execute_test_large_message(TLS_server_method(), TLS_client_method());",
          "117:                                       DTLS_client_method());",
          "",
          "[Added Lines]",
          "118:     return execute_test_large_message(TLS_server_method(), TLS_client_method(),",
          "119:                                       0);",
          "120: }",
          "122: static int test_large_message_tls_read_ahead(void)",
          "123: {",
          "124:     return execute_test_large_message(TLS_server_method(), TLS_client_method(),",
          "125:                                       1);",
          "136:                                       DTLS_client_method(), 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "867:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);",
          "869:     ADD_TEST(test_large_message_tls);",
          "870: #ifndef OPENSSL_NO_DTLS",
          "871:     ADD_TEST(test_large_message_dtls);",
          "872: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:     ADD_TEST(test_large_message_tls_read_ahead);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "929cc3fa6bceba1c6d9c362c56b89cbf2acf40bc",
      "candidate_info": {
        "commit_hash": "929cc3fa6bceba1c6d9c362c56b89cbf2acf40bc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/929cc3fa6bceba1c6d9c362c56b89cbf2acf40bc",
        "files": [
          "doc/ssl/SSL_CTX_set_verify.pod",
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Partial revert of \"Fix client verify mode to check SSL_VERIFY_PEER\"\n\nThis partially reverts commit c636c1c47. It also tweaks the documentation\nand comments in this area. On the client side the documented interface for\nSSL_CTX_set_verify()/SSL_set_verify() is that setting the flag\nSSL_VERIFY_PEER causes verfication of the server certificate to take place.\nPreviously what was implemented was that if *any* flag was set then\nverification would take place. The above commit improved the semantics to\nbe as per the documented interface.\n\nHowever, we have had a report of at least one application where an\napplication was incorrectly using the interface and used *only*\nSSL_VERIFY_FAIL_IF_NO_PEER_CERT on the client side. In OpenSSL prior to\nthe above commit this still caused verification of the server certificate\nto take place. After this commit the application silently failed to verify\nthe server certificate.\n\nIdeally SSL_CTX_set_verify()/SSL_set_verify() could be modified to indicate\nif invalid flags were being used. However these are void functions!\n\nThe simplest short term solution is to revert to the previous behaviour\nwhich at least means we \"fail closed\" rather than \"fail open\".\n\nThanks to Cory Benfield for reporting this issue.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit c8e2f98c97ff3327784843946c2d62761572e5d5)",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1224:     }",
          "1226:     i = ssl_verify_cert_chain(s, sk);",
          "1228:         al = ssl_verify_alarm_type(s->verify_result);",
          "1229:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "1230:                SSL_R_CERTIFICATE_VERIFY_FAILED);",
          "",
          "[Removed Lines]",
          "1227:     if ((s->verify_mode & SSL_VERIFY_PEER) && i <= 0) {",
          "",
          "[Added Lines]",
          "1241:     if (s->verify_mode != SSL_VERIFY_NONE && i <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18ad46297dcd44c1ac6c9f7f2f966e19c4d45e91",
      "candidate_info": {
        "commit_hash": "18ad46297dcd44c1ac6c9f7f2f966e19c4d45e91",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/18ad46297dcd44c1ac6c9f7f2f966e19c4d45e91",
        "files": [
          "doc/CT_POLICY_EVAL_CTX_new.pod",
          "doc/SCT_validate.pod",
          "doc/SSL_CTX_set_ct_validation_callback.pod",
          "util/libcrypto.num"
        ],
        "message": "Cherry-pick doc updates from PR 1554\n\nAlso fix version in libcrypto.num, from backporting new\nfunctions.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit ebcb536858a271e8812fb9bbafbc0b825e5ece24)",
        "before_after_code_files": [
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_1 EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_1 EXIST::FUNCTION:CT",
          "",
          "[Added Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_0d EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_0d EXIST::FUNCTION:CT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1bbee13d9f4e55a8f5592c417dd336012cbeebe",
      "candidate_info": {
        "commit_hash": "b1bbee13d9f4e55a8f5592c417dd336012cbeebe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1bbee13d9f4e55a8f5592c417dd336012cbeebe",
        "files": [
          "test/recipes/03-test_ui.t"
        ],
        "message": "Add a test for the UI API\n\nThe best way to test the UI interface is currently by using an openssl\ncommand that uses password_callback.  The only one that does this is\n'genrsa'.\nSince password_callback uses a UI method derived from UI_OpenSSL(), it\nensures that one gets tested well enough as well.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2040)\n(cherry picked from commit 17ac8eaf611b588cca251ba63b187e7d9c7edb83)",
        "before_after_code_files": [
          "test/recipes/03-test_ui.t||test/recipes/03-test_ui.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/03-test_ui.t||test/recipes/03-test_ui.t": [
          "File: test/recipes/03-test_ui.t -> test/recipes/03-test_ui.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "9: use strict;",
          "10: use warnings;",
          "11: use OpenSSL::Test;",
          "13: setup(\"test_ui\");",
          "15: plan tests => 1;",
          "17: note <<\"EOF\";",
          "18: The best way to test the UI interface is currently by using an openssl",
          "19: command that uses password_callback.  The only one that does this is",
          "20: 'genrsa'.",
          "21: Since password_callback uses a UI method derived from UI_OpenSSL(), it",
          "22: ensures that one gets tested well enough as well.",
          "23: EOF",
          "25: my $outfile = \"rsa_$$.pem\";",
          "26: ok(run(app([\"openssl\", \"genrsa\", \"-passout\", \"pass:password\", \"-aes128\",",
          "27:             \"-out\", $outfile])),",
          "28:    \"Checking that genrsa with a password works properly\");",
          "30: unlink $outfile;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c62ee12574e661a111238954b07ea1d5f0786bec",
      "candidate_info": {
        "commit_hash": "c62ee12574e661a111238954b07ea1d5f0786bec",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c62ee12574e661a111238954b07ea1d5f0786bec",
        "files": [
          "crypto/mem.c"
        ],
        "message": "Removed ugly size_t less than zero check.\n\nCLA: trivial.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2674)\n\n(cherry picked from commit 5e1f879ab5a2bfdf2d58222f965f93fe1b511ce7)",
        "before_after_code_files": [
          "crypto/mem.c||crypto/mem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/mem.c||crypto/mem.c": [
          "File: crypto/mem.c -> crypto/mem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     if (malloc_impl != NULL && malloc_impl != CRYPTO_malloc)",
          "76:         return malloc_impl(num, file, line);",
          "79:         return NULL;",
          "81:     allow_customize = 0;",
          "",
          "[Removed Lines]",
          "78:     if (num <= 0)",
          "",
          "[Added Lines]",
          "78:     if (num == 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}