{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7ac2c462a2ce78f86f991ca1482b61a37fd6b8d",
      "candidate_info": {
        "commit_hash": "a7ac2c462a2ce78f86f991ca1482b61a37fd6b8d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a7ac2c462a2ce78f86f991ca1482b61a37fd6b8d",
        "files": [
          "include/uv.h",
          "src/uv-common.c",
          "test/test-fs-event.c",
          "test/test-list.h"
        ],
        "message": "unix, windows: add uv_fs_event_getpath",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2036: UV_EXTERN int uv_fs_event_stop(uv_fs_event_t* handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2043: UV_EXTERN int uv_fs_event_getpath(uv_fs_event_t* handle,",
          "2044:                                   char* buf,",
          "2045:                                   size_t* len);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:   abort();",
          "446: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448: int uv_fs_event_getpath(uv_fs_event_t* handle, char* buf, size_t* len) {",
          "449:   size_t required_len;",
          "451:   if (!uv__is_active(handle)) {",
          "453:     return UV_EINVAL;",
          "454:   }",
          "456:   required_len = strlen(handle->path) + 1;",
          "457:   if (required_len > *len) {",
          "459:     return UV_ENOBUFS;",
          "460:   }",
          "462:   memcpy(buf, handle->path, required_len);",
          "465:   return 0;",
          "466: }",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:   return 0;",
          "629: }",
          "631: #if defined(__APPLE__)",
          "633: static int fs_event_error_reported;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631: TEST_IMPL(fs_event_getpath) {",
          "632:   uv_loop_t* loop = uv_default_loop();",
          "633:   int r;",
          "634:   char buf[1024];",
          "635:   size_t len;",
          "637:   create_dir(loop, \"watch_dir\");",
          "639:   r = uv_fs_event_init(loop, &fs_event);",
          "640:   ASSERT(r == 0);",
          "641:   len = sizeof buf;",
          "642:   r = uv_fs_event_getpath(&fs_event, buf, &len);",
          "643:   ASSERT(r == UV_EINVAL);",
          "644:   r = uv_fs_event_start(&fs_event, fail_cb, \"watch_dir\", 0);",
          "645:   ASSERT(r == 0);",
          "646:   len = sizeof buf;",
          "647:   r = uv_fs_event_getpath(&fs_event, buf, &len);",
          "648:   ASSERT(r == 0);",
          "649:   ASSERT(memcmp(buf, \"watch_dir\", len) == 0);",
          "650:   r = uv_fs_event_stop(&fs_event);",
          "651:   ASSERT(r == 0);",
          "652:   uv_close((uv_handle_t*) &fs_event, close_cb);",
          "654:   uv_run(loop, UV_RUN_DEFAULT);",
          "656:   ASSERT(close_cb_called == 1);",
          "658:   remove(\"watch_dir/\");",
          "659:   MAKE_VALGRIND_HAPPY();",
          "660:   return 0;",
          "661: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: TEST_DECLARE   (fs_event_close_in_callback)",
          "208: TEST_DECLARE   (fs_event_start_and_close)",
          "209: TEST_DECLARE   (fs_event_error_reporting)",
          "210: TEST_DECLARE   (fs_readdir_empty_dir)",
          "211: TEST_DECLARE   (fs_readdir_file)",
          "212: TEST_DECLARE   (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: TEST_DECLARE   (fs_event_getpath)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:   TEST_ENTRY  (fs_event_close_in_callback)",
          "528:   TEST_ENTRY  (fs_event_start_and_close)",
          "529:   TEST_ENTRY  (fs_event_error_reporting)",
          "530:   TEST_ENTRY  (fs_readdir_empty_dir)",
          "531:   TEST_ENTRY  (fs_readdir_file)",
          "532:   TEST_ENTRY  (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:   TEST_ENTRY  (fs_event_getpath)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1920513735e437d766b087ccbc2ea6265ceae50a",
      "candidate_info": {
        "commit_hash": "1920513735e437d766b087ccbc2ea6265ceae50a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1920513735e437d766b087ccbc2ea6265ceae50a",
        "files": [
          "src/unix/fs.c",
          "src/unix/internal.h"
        ],
        "message": "sunos: remove futimes() macro\n\nRemove a macro from src/unix/internal.h that aliases futimes() to\nfutimesat(). Deal with the platform inconsistency in src/unix/fs.c.",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c",
          "src/unix/internal.h||src/unix/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   tv[0].tv_usec = (unsigned long)(req->atime * 1000000) % 1000000;",
          "177:   tv[1].tv_sec  = req->mtime;",
          "178:   tv[1].tv_usec = (unsigned long)(req->mtime * 1000000) % 1000000;",
          "179:   return futimes(req->file, tv);",
          "180: #else",
          "181:   errno = ENOSYS;",
          "182:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # if defined(__sun)",
          "180:   return futimesat(req->file, NULL, tv);",
          "181: # else",
          "183: # endif",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #if defined(__sun)",
          "40: # include <sys/port.h>",
          "41: # include <port.h>",
          "45: #if defined(__APPLE__) && !TARGET_OS_IPHONE",
          "",
          "[Removed Lines]",
          "42: # define futimes(fd, tv) futimesat(fd, (void*)0, tv)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5cd78ea05ff214314eeb54fe90350df1dd83b5e",
      "candidate_info": {
        "commit_hash": "b5cd78ea05ff214314eeb54fe90350df1dd83b5e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b5cd78ea05ff214314eeb54fe90350df1dd83b5e",
        "files": [
          "test/test-idle.c"
        ],
        "message": "test: reflect new idle semantics in test\n\nUpdate the `idle_starvation` test to verify not only that idle callbacks\nare called, but also that they are called once per loop iteration.",
        "before_after_code_files": [
          "test/test-idle.c||test/test-idle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-idle.c||test/test-idle.c": [
          "File: test/test-idle.c -> test/test-idle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "27: static uv_idle_t idle_handle;",
          "29: static int idle_cb_called = 0;",
          "30: static int timer_cb_called = 0;",
          "31: static int close_cb_called = 0;",
          "",
          "[Removed Lines]",
          "26: static uv_timer_t timer_handle;",
          "",
          "[Added Lines]",
          "27: static uv_check_t check_handle;",
          "28: static uv_timer_t timer_handle;",
          "31: static int check_cb_called = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   ASSERT(status == 0);",
          "43:   uv_close((uv_handle_t*) &idle_handle, close_cb);",
          "44:   uv_close((uv_handle_t*) &timer_handle, close_cb);",
          "46:   timer_cb_called++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   uv_close((uv_handle_t*) &check_handle, close_cb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: }",
          "60: TEST_IMPL(idle_starvation) {",
          "61:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: static void check_cb(uv_check_t* handle, int status) {",
          "64:   ASSERT(handle == &check_handle);",
          "65:   ASSERT(status == 0);",
          "67:   check_cb_called++;",
          "68:   LOGF(\"check_cb %d\\n\", check_cb_called);",
          "69: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:   r = uv_idle_start(&idle_handle, idle_cb);",
          "66:   ASSERT(r == 0);",
          "68:   r = uv_timer_init(uv_default_loop(), &timer_handle);",
          "69:   ASSERT(r == 0);",
          "70:   r = uv_timer_start(&timer_handle, timer_cb, 50, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   r = uv_check_init(uv_default_loop(), &check_handle);",
          "81:   ASSERT(r == 0);",
          "82:   r = uv_check_start(&check_handle, check_cb);",
          "83:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "76:   ASSERT(idle_cb_called > 0);",
          "77:   ASSERT(timer_cb_called == 1);",
          "80:   MAKE_VALGRIND_HAPPY();",
          "81:   return 0;",
          "",
          "[Removed Lines]",
          "78:   ASSERT(close_cb_called == 2);",
          "",
          "[Added Lines]",
          "95:   ASSERT(close_cb_called == 3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c02c4ee1ea17c630dffe0ac9e23b21b0d693a73",
      "candidate_info": {
        "commit_hash": "2c02c4ee1ea17c630dffe0ac9e23b21b0d693a73",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2c02c4ee1ea17c630dffe0ac9e23b21b0d693a73",
        "files": [
          "include/uv-sunos.h"
        ],
        "message": "sunos: support IPv6 qualified link-local addresses",
        "before_after_code_files": [
          "include/uv-sunos.h||include/uv-sunos.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-sunos.h||include/uv-sunos.h": [
          "File: include/uv-sunos.h -> include/uv-sunos.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4c1228d15edd642cbecb0106c0524e5185a3c6c",
      "candidate_info": {
        "commit_hash": "d4c1228d15edd642cbecb0106c0524e5185a3c6c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d4c1228d15edd642cbecb0106c0524e5185a3c6c",
        "files": [
          "include/uv.h",
          "test/test-getnameinfo.c",
          "test/test-threadpool-cancel.c"
        ],
        "message": "include: const-ify arguments to uv_getnameinfo_cb",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "test/test-getnameinfo.c||test/test-getnameinfo.c",
          "test/test-threadpool-cancel.c||test/test-threadpool-cancel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:                                   struct addrinfo* res);",
          "430: typedef void (*uv_getnameinfo_cb)(uv_getnameinfo_t* req,",
          "431:                                   int status,",
          "435: typedef struct {",
          "436:   long tv_sec;",
          "",
          "[Removed Lines]",
          "432:                                   char* hostname,",
          "433:                                   char* service);",
          "",
          "[Added Lines]",
          "432:                                   const char* hostname,",
          "433:                                   const char* service);",
          "",
          "---------------"
        ],
        "test/test-getnameinfo.c||test/test-getnameinfo.c": [
          "File: test/test-getnameinfo.c -> test/test-getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: static void getnameinfo_req(uv_getnameinfo_t* handle,",
          "38:                             int status,",
          "41:   ASSERT(handle != NULL);",
          "42:   ASSERT(status == 0);",
          "43:   ASSERT(hostname != NULL);",
          "",
          "[Removed Lines]",
          "39:                             char* hostname,",
          "40:                             char* service) {",
          "",
          "[Added Lines]",
          "39:                             const char* hostname,",
          "40:                             const char* service) {",
          "",
          "---------------"
        ],
        "test/test-threadpool-cancel.c||test/test-threadpool-cancel.c": [
          "File: test/test-threadpool-cancel.c -> test/test-threadpool-cancel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: static void getnameinfo_cb(uv_getnameinfo_t* handle,",
          "131:                            int status,",
          "134:   ASSERT(status == UV_EAI_CANCELED);",
          "135:   ASSERT(hostname == NULL);",
          "136:   ASSERT(service == NULL);",
          "",
          "[Removed Lines]",
          "132:                            char* hostname,",
          "133:                            char* service) {",
          "",
          "[Added Lines]",
          "132:                            const char* hostname,",
          "133:                            const char* service) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}