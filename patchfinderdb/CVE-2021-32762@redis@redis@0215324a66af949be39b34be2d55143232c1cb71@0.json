{
  "cve_id": "CVE-2021-32762",
  "cve_desc": "Redis is an open source, in-memory database that persists on disk. The redis-cli command line tool and redis-sentinel service may be vulnerable to integer overflow when parsing specially crafted large multi-bulk network replies. This is a result of a vulnerability in the underlying hiredis library which does not perform an overflow check before calling the calloc() heap allocation function. This issue only impacts systems with heap allocators that do not perform their own overflow checks. Most modern systems do and are therefore not likely to be affected. Furthermore, by default redis-sentinel uses the jemalloc allocator which is also not vulnerable. The problem is fixed in Redis versions 6.2.6, 6.0.16 and 5.0.14.",
  "repo": "redis/redis",
  "patch_hash": "0215324a66af949be39b34be2d55143232c1cb71",
  "patch_info": {
    "commit_hash": "0215324a66af949be39b34be2d55143232c1cb71",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/0215324a66af949be39b34be2d55143232c1cb71",
    "files": [
      "deps/hiredis/hiredis.c",
      "deps/hiredis/test.c"
    ],
    "message": "Fix redis-cli / redis-sential overflow on some platforms (CVE-2021-32762) (#9587)\n\nThe redis-cli command line tool and redis-sentinel service may be vulnerable\nto integer overflow when parsing specially crafted large multi-bulk network\nreplies. This is a result of a vulnerability in the underlying hiredis\nlibrary which does not perform an overflow check before calling the calloc()\nheap allocation function.\n\nThis issue only impacts systems with heap allocators that do not perform their\nown overflow checks. Most modern systems do and are therefore not likely to\nbe affected. Furthermore, by default redis-sentinel uses the jemalloc allocator\nwhich is also not vulnerable.\n\nCo-authored-by: Yossi Gottlieb <yossigo@gmail.com>",
    "before_after_code_files": [
      "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
      "deps/hiredis/test.c||deps/hiredis/test.c"
    ]
  },
  "patch_diff": {
    "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c": [
      "File: deps/hiredis/hiredis.c -> deps/hiredis/hiredis.c"
    ],
    "deps/hiredis/test.c||deps/hiredis/test.c": [
      "File: deps/hiredis/test.c -> deps/hiredis/test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "498:     freeReplyObject(reply);",
      "499:     redisReaderFree(reader);",
      "501: #if LLONG_MAX > SIZE_MAX",
      "502:     test(\"Set error when array > SIZE_MAX: \");",
      "503:     reader = redisReaderCreate();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "501:     test(\"Multi-bulk never overflows regardless of maxelements: \");",
      "502:     size_t bad_mbulk_len = (SIZE_MAX / sizeof(void *)) + 3;",
      "503:     char bad_mbulk_reply[100];",
      "504:     snprintf(bad_mbulk_reply, sizeof(bad_mbulk_reply), \"*%llu\\r\\n+asdf\\r\\n\",",
      "505:         (unsigned long long) bad_mbulk_len);",
      "507:     reader = redisReaderCreate();",
      "509:     redisReaderFeed(reader, bad_mbulk_reply, strlen(bad_mbulk_reply));",
      "510:     ret = redisReaderGetReply(reader,&reply);",
      "511:     test_cond(ret == REDIS_ERR && strcasecmp(reader->errstr, \"Out of memory\") == 0);",
      "512:     freeReplyObject(reply);",
      "513:     redisReaderFree(reader);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04ba485042c65e18a294a13202769cfa1f6714a3",
      "candidate_info": {
        "commit_hash": "04ba485042c65e18a294a13202769cfa1f6714a3",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/04ba485042c65e18a294a13202769cfa1f6714a3",
        "files": [
          "deps/hiredis/hiredis.c",
          "deps/hiredis/test.c"
        ],
        "message": "Fix redis-cli / redis-sential overflow on some platforms (CVE-2021-32762)\n\nThe redis-cli command line tool and redis-sentinel service may be vulnerable\nto integer overflow when parsing specially crafted large multi-bulk network\nreplies. This is a result of a vulnerability in the underlying hiredis\nlibrary which does not perform an overflow check before calling the calloc()\nheap allocation function.\n\nThis issue only impacts systems with heap allocators that do not perform their\nown overflow checks. Most modern systems do and are therefore not likely to\nbe affected. Furthermore, by default redis-sentinel uses the jemalloc allocator\nwhich is also not vulnerable.",
        "before_after_code_files": [
          "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
          "deps/hiredis/test.c||deps/hiredis/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
            "deps/hiredis/test.c||deps/hiredis/test.c"
          ],
          "candidate": [
            "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
            "deps/hiredis/test.c||deps/hiredis/test.c"
          ]
        }
      },
      "candidate_diff": {
        "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c": [
          "File: deps/hiredis/hiredis.c -> deps/hiredis/hiredis.c"
        ],
        "deps/hiredis/test.c||deps/hiredis/test.c": [
          "File: deps/hiredis/test.c -> deps/hiredis/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:     freeReplyObject(reply);",
          "499:     redisReaderFree(reader);",
          "501: #if LLONG_MAX > SIZE_MAX",
          "502:     test(\"Set error when array > SIZE_MAX: \");",
          "503:     reader = redisReaderCreate();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:     test(\"Multi-bulk never overflows regardless of maxelements: \");",
          "502:     size_t bad_mbulk_len = (SIZE_MAX / sizeof(void *)) + 3;",
          "503:     char bad_mbulk_reply[100];",
          "504:     snprintf(bad_mbulk_reply, sizeof(bad_mbulk_reply), \"*%llu\\r\\n+asdf\\r\\n\",",
          "505:         (unsigned long long) bad_mbulk_len);",
          "507:     reader = redisReaderCreate();",
          "509:     redisReaderFeed(reader, bad_mbulk_reply, strlen(bad_mbulk_reply));",
          "510:     ret = redisReaderGetReply(reader,&reply);",
          "511:     test_cond(ret == REDIS_ERR && strcasecmp(reader->errstr, \"Out of memory\") == 0);",
          "512:     freeReplyObject(reply);",
          "513:     redisReaderFree(reader);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb7597f46ee7798531e236a20f41729d5a056050",
      "candidate_info": {
        "commit_hash": "bb7597f46ee7798531e236a20f41729d5a056050",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/bb7597f46ee7798531e236a20f41729d5a056050",
        "files": [
          "deps/hiredis/hiredis.c",
          "deps/hiredis/test.c"
        ],
        "message": "Fix redis-cli / redis-sential overflow on some platforms (CVE-2021-32762)\n\nThe redis-cli command line tool and redis-sentinel service may be vulnerable\nto integer overflow when parsing specially crafted large multi-bulk network\nreplies. This is a result of a vulnerability in the underlying hiredis\nlibrary which does not perform an overflow check before calling the calloc()\nheap allocation function.\n\nThis issue only impacts systems with heap allocators that do not perform their\nown overflow checks. Most modern systems do and are therefore not likely to\nbe affected. Furthermore, by default redis-sentinel uses the jemalloc allocator\nwhich is also not vulnerable.",
        "before_after_code_files": [
          "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
          "deps/hiredis/test.c||deps/hiredis/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
            "deps/hiredis/test.c||deps/hiredis/test.c"
          ],
          "candidate": [
            "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
            "deps/hiredis/test.c||deps/hiredis/test.c"
          ]
        }
      },
      "candidate_diff": {
        "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c": [
          "File: deps/hiredis/hiredis.c -> deps/hiredis/hiredis.c"
        ],
        "deps/hiredis/test.c||deps/hiredis/test.c": [
          "File: deps/hiredis/test.c -> deps/hiredis/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     freeReplyObject(reply);",
          "401:     redisReaderFree(reader);",
          "403: #if LLONG_MAX > SIZE_MAX",
          "404:     test(\"Set error when array > SIZE_MAX: \");",
          "405:     reader = redisReaderCreate();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:     test(\"Multi-bulk never overflows regardless of maxelements: \");",
          "404:     size_t bad_mbulk_len = (SIZE_MAX / sizeof(void *)) + 3;",
          "405:     char bad_mbulk_reply[100];",
          "406:     snprintf(bad_mbulk_reply, sizeof(bad_mbulk_reply), \"*%llu\\r\\n+asdf\\r\\n\",",
          "407:         (unsigned long long) bad_mbulk_len);",
          "409:     reader = redisReaderCreate();",
          "411:     redisReaderFeed(reader, bad_mbulk_reply, strlen(bad_mbulk_reply));",
          "412:     ret = redisReaderGetReply(reader,&reply);",
          "413:     test_cond(ret == REDIS_ERR && strcasecmp(reader->errstr, \"Out of memory\") == 0);",
          "414:     freeReplyObject(reply);",
          "415:     redisReaderFree(reader);",
          "",
          "---------------"
        ]
      }
    }
  ]
}