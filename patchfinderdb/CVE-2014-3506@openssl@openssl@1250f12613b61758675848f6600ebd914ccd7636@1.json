{
  "cve_id": "CVE-2014-3506",
  "cve_desc": "d1_both.c in the DTLS implementation in OpenSSL 0.9.8 before 0.9.8zb, 1.0.0 before 1.0.0n, and 1.0.1 before 1.0.1i allows remote attackers to cause a denial of service (memory consumption) via crafted DTLS handshake messages that trigger memory allocations corresponding to large length values.",
  "repo": "openssl/openssl",
  "patch_hash": "1250f12613b61758675848f6600ebd914ccd7636",
  "patch_info": {
    "commit_hash": "1250f12613b61758675848f6600ebd914ccd7636",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/1250f12613b61758675848f6600ebd914ccd7636",
    "files": [
      "ssl/d1_both.c"
    ],
    "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "592:   return 0;",
      "593:  }",
      "596: static int",
      "597: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
      "599:  {",
      "600:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
      "601:  if (max_len < (unsigned long)s->max_cert_list)",
      "602:   return s->max_cert_list;",
      "603:  return max_len;",
      "604:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "600:  pitem *item = NULL;",
      "601:  int i = -1, is_complete;",
      "602:  unsigned char seq64be[8];",
      "617:   goto err;",
      "",
      "[Removed Lines]",
      "603:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
      "605:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
      "606:   goto err;",
      "611:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
      "612:   max_len = s->max_cert_list;",
      "613:  else",
      "614:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
      "616:  if ((msg_hdr->frag_off+frag_len) > max_len)",
      "",
      "[Added Lines]",
      "613:  unsigned long frag_len = msg_hdr->frag_len;",
      "615:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
      "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
      "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
      "757:   frag = dtls1_hm_fragment_new(frag_len, 0);",
      "758:   if ( frag == NULL)",
      "759:    goto err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
      "758:    goto err;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fc7804ec392fcf8051abe6bc9da9108744d2ae35",
      "candidate_info": {
        "commit_hash": "fc7804ec392fcf8051abe6bc9da9108744d2ae35",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fc7804ec392fcf8051abe6bc9da9108744d2ae35",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:   return 0;",
          "588:  }",
          "591: static int",
          "592: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
          "594:  {",
          "595:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "596:  if (max_len < (unsigned long)s->max_cert_list)",
          "597:   return s->max_cert_list;",
          "598:  return max_len;",
          "599:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:  pitem *item = NULL;",
          "596:  int i = -1, is_complete;",
          "597:  unsigned char seq64be[8];",
          "612:   goto err;",
          "",
          "[Removed Lines]",
          "598:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
          "600:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
          "601:   goto err;",
          "606:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
          "607:   max_len = s->max_cert_list;",
          "608:  else",
          "609:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "611:  if ((msg_hdr->frag_off+frag_len) > max_len)",
          "",
          "[Added Lines]",
          "608:  unsigned long frag_len = msg_hdr->frag_len;",
          "610:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
          "611:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "749:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "750:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "752:   frag = dtls1_hm_fragment_new(frag_len, 0);",
          "753:   if ( frag == NULL)",
          "754:    goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "753:    goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "338a5e7e5458edf4cf754fd831a451fb4b57d180",
      "candidate_info": {
        "commit_hash": "338a5e7e5458edf4cf754fd831a451fb4b57d180",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/338a5e7e5458edf4cf754fd831a451fb4b57d180",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:   return 0;",
          "582:  }",
          "585: static int",
          "586: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
          "588:  {",
          "589:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "590:  if (max_len < (unsigned long)s->max_cert_list)",
          "591:   return s->max_cert_list;",
          "592:  return max_len;",
          "593:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:  pitem *item = NULL;",
          "590:  int i = -1, is_complete;",
          "591:  PQ_64BIT seq64;",
          "606:   goto err;",
          "",
          "[Removed Lines]",
          "592:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
          "594:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
          "595:   goto err;",
          "600:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
          "601:   max_len = s->max_cert_list;",
          "602:  else",
          "603:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "605:  if ((msg_hdr->frag_off+frag_len) > max_len)",
          "",
          "[Added Lines]",
          "602:  unsigned long frag_len = msg_hdr->frag_len;",
          "604:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
          "605:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "743:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "744:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "746:   frag = dtls1_hm_fragment_new(frag_len, 0);",
          "747:   if ( frag == NULL)",
          "748:    goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "747:    goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0598468fc04fb0cf2438c4ee635b587aac1bcce6",
      "candidate_info": {
        "commit_hash": "0598468fc04fb0cf2438c4ee635b587aac1bcce6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0598468fc04fb0cf2438c4ee635b587aac1bcce6",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:   return 0;",
          "593:  }",
          "596: static int",
          "597: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
          "599:  {",
          "600:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "601:  if (max_len < (unsigned long)s->max_cert_list)",
          "602:   return s->max_cert_list;",
          "603:  return max_len;",
          "604:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "600:  pitem *item = NULL;",
          "601:  int i = -1, is_complete;",
          "602:  unsigned char seq64be[8];",
          "617:   goto err;",
          "",
          "[Removed Lines]",
          "603:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
          "605:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
          "606:   goto err;",
          "611:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
          "612:   max_len = s->max_cert_list;",
          "613:  else",
          "614:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "616:  if ((msg_hdr->frag_off+frag_len) > max_len)",
          "",
          "[Added Lines]",
          "613:  unsigned long frag_len = msg_hdr->frag_len;",
          "615:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
          "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "757:   frag = dtls1_hm_fragment_new(frag_len, 0);",
          "758:   if ( frag == NULL)",
          "759:    goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "758:    goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "934ca0714a686673695c055de86064f423984477",
      "candidate_info": {
        "commit_hash": "934ca0714a686673695c055de86064f423984477",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/934ca0714a686673695c055de86064f423984477",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:   return 0;",
          "588:  }",
          "591: static int",
          "592: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
          "594:  {",
          "595:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "596:  if (max_len < (unsigned long)s->max_cert_list)",
          "597:   return s->max_cert_list;",
          "598:  return max_len;",
          "599:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:  pitem *item = NULL;",
          "596:  int i = -1, is_complete;",
          "597:  unsigned char seq64be[8];",
          "612:   goto err;",
          "",
          "[Removed Lines]",
          "598:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
          "600:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
          "601:   goto err;",
          "606:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
          "607:   max_len = s->max_cert_list;",
          "608:  else",
          "609:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "611:  if ((msg_hdr->frag_off+frag_len) > max_len)",
          "",
          "[Added Lines]",
          "608:  unsigned long frag_len = msg_hdr->frag_len;",
          "610:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
          "611:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "749:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "750:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "752:   frag = dtls1_hm_fragment_new(frag_len, 0);",
          "753:   if ( frag == NULL)",
          "754:    goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "753:    goto err;",
          "",
          "---------------"
        ]
      }
    }
  ]
}