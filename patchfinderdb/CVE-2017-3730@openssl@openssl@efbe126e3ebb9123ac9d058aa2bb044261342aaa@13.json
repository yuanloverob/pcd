{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "695fea206b30d3c195dc95f8c1f8c5e29fc07113",
      "candidate_info": {
        "commit_hash": "695fea206b30d3c195dc95f8c1f8c5e29fc07113",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/695fea206b30d3c195dc95f8c1f8c5e29fc07113",
        "files": [
          "test/evp_test.c",
          "test/evptests.txt"
        ],
        "message": "Add function and reason checking to evp_test\n\nAdd options to check the function and reason code matches expected values.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 99f2f1dc3e5c95961f57ca41e9fbb76863e69e46)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:     const char *err, *aux_err;",
          "212:     char *expected_err;",
          "214:     int ntests;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     char *func;",
          "216:     char *reason;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296: {",
          "297:     OPENSSL_free(t->expected_err);",
          "298:     t->expected_err = NULL;",
          "299:     OPENSSL_free(t->out_expected);",
          "300:     OPENSSL_free(t->out_received);",
          "301:     t->out_expected = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     OPENSSL_free(t->func);",
          "304:     t->func = NULL;",
          "305:     OPENSSL_free(t->reason);",
          "306:     t->reason = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318: static int check_test_error(struct evp_test *t)",
          "319: {",
          "320:     if (!t->err && !t->expected_err)",
          "321:         return 1;",
          "322:     if (t->err && !t->expected_err) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     unsigned long err;",
          "329:     const char *func;",
          "330:     const char *reason;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:                 t->start_line, t->expected_err);",
          "336:         return 0;",
          "337:     }",
          "339:         return 1;",
          "343:     return 0;",
          "344: }",
          "",
          "[Removed Lines]",
          "338:     if (strcmp(t->err, t->expected_err) == 0)",
          "341:     fprintf(stderr, \"Test line %d: expecting %s got %s\\n\",",
          "342:             t->start_line, t->expected_err, t->err);",
          "",
          "[Added Lines]",
          "350:     if (strcmp(t->err, t->expected_err) != 0) {",
          "351:         fprintf(stderr, \"Test line %d: expecting %s got %s\\n\",",
          "352:                 t->start_line, t->expected_err, t->err);",
          "353:         return 0;",
          "354:     }",
          "356:     if (t->func == NULL && t->reason == NULL)",
          "357:         return 1;",
          "359:     if (t->func == NULL || t->reason == NULL) {",
          "360:         fprintf(stderr, \"Test line %d: missing function or reason code\\n\",",
          "361:                 t->start_line);",
          "362:         return 0;",
          "363:     }",
          "365:     err = ERR_peek_error();",
          "366:     if (err == 0) {",
          "367:         fprintf(stderr, \"Test line %d, expected error \\\"%s:%s\\\" not set\\n\",",
          "368:                 t->start_line, t->func, t->reason);",
          "369:         return 0;",
          "370:     }",
          "372:     func = ERR_func_error_string(err);",
          "373:     reason = ERR_reason_error_string(err);",
          "375:     if (strcmp(func, t->func) == 0 && strcmp(reason, t->reason) == 0)",
          "378:     fprintf(stderr, \"Test line %d: expected error \\\"%s:%s\\\", got \\\"%s:%s\\\"\\n\",",
          "379:             t->start_line, t->func, t->reason, func, reason);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:             return 0;",
          "495:         }",
          "496:         t->expected_err = OPENSSL_strdup(value);",
          "498:             return 0;",
          "499:     } else {",
          "",
          "[Removed Lines]",
          "497:         if (!t->expected_err)",
          "",
          "[Added Lines]",
          "535:         if (t->expected_err == NULL)",
          "536:             return 0;",
          "537:     } else if (strcmp(keyword, \"Function\") == 0) {",
          "538:         if (t->func != NULL) {",
          "539:             fprintf(stderr, \"Line %d: multiple function lines\\n\", t->line);",
          "540:             return 0;",
          "541:         }",
          "542:         t->func = OPENSSL_strdup(value);",
          "543:         if (t->func == NULL)",
          "544:             return 0;",
          "545:     } else if (strcmp(keyword, \"Reason\") == 0) {",
          "546:         if (t->reason != NULL) {",
          "547:             fprintf(stderr, \"Line %d: multiple reason lines\\n\", t->line);",
          "548:             return 0;",
          "549:         }",
          "550:         t->reason = OPENSSL_strdup(value);",
          "551:         if (t->reason == NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e97afdad659b6523a8f172097bf4f10ca2ce0867",
      "candidate_info": {
        "commit_hash": "e97afdad659b6523a8f172097bf4f10ca2ce0867",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e97afdad659b6523a8f172097bf4f10ca2ce0867",
        "files": [
          "crypto/asn1/a_type.c",
          "crypto/asn1/asn1_lib.c",
          "crypto/asn1/asn1_locl.h",
          "crypto/asn1/tasn_fre.c"
        ],
        "message": "Fix embedded string handling.\n\nDon't rely on embedded flag to free strings correctly: it wont be\nset if there is a malloc failure during initialisation.\n\nThanks to Guido Vranken for reporting this issue.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1725)\n(cherry picked from commit 6215f27a83c6b9089a217dd6deab1665e0ced516)",
        "before_after_code_files": [
          "crypto/asn1/a_type.c||crypto/asn1/a_type.c",
          "crypto/asn1/asn1_lib.c||crypto/asn1/asn1_lib.c",
          "crypto/asn1/asn1_locl.h||crypto/asn1/asn1_locl.h",
          "crypto/asn1/tasn_fre.c||crypto/asn1/tasn_fre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_type.c||crypto/asn1/a_type.c": [
          "File: crypto/asn1/a_type.c -> crypto/asn1/a_type.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: {",
          "26:     if (a->value.ptr != NULL) {",
          "27:         ASN1_TYPE **tmp_a = &a;",
          "29:     }",
          "30:     a->type = type;",
          "31:     if (type == V_ASN1_BOOLEAN)",
          "",
          "[Removed Lines]",
          "28:         asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL);",
          "",
          "[Added Lines]",
          "28:         asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL, 0);",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1_lib.c||crypto/asn1/asn1_lib.c": [
          "File: crypto/asn1/asn1_lib.c -> crypto/asn1/asn1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <limits.h>",
          "12: #include \"internal/cryptlib.h\"",
          "13: #include <openssl/asn1.h>",
          "15: static int asn1_get_length(const unsigned char **pp, int *inf, long *rl,",
          "16:                            long max);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"asn1_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:     return (ret);",
          "315: }",
          "318: {",
          "319:     if (a == NULL)",
          "320:         return;",
          "321:     if (!(a->flags & ASN1_STRING_FLAG_NDEF))",
          "322:         OPENSSL_free(a->data);",
          "324:         OPENSSL_free(a);",
          "325: }",
          "327: void ASN1_STRING_clear_free(ASN1_STRING *a)",
          "328: {",
          "329:     if (a == NULL)",
          "",
          "[Removed Lines]",
          "317: void ASN1_STRING_free(ASN1_STRING *a)",
          "323:     if (!(a->flags & ASN1_STRING_FLAG_EMBED))",
          "",
          "[Added Lines]",
          "318: void asn1_string_embed_free(ASN1_STRING *a, int embed)",
          "324:     if (embed == 0)",
          "328: void ASN1_STRING_free(ASN1_STRING *a)",
          "329: {",
          "330:     if (a == NULL)",
          "331:         return;",
          "332:     asn1_string_embed_free(a, a->flags & ASN1_STRING_FLAG_EMBED);",
          "333: }",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1_locl.h||crypto/asn1/asn1_locl.h": [
          "File: crypto/asn1/asn1_locl.h -> crypto/asn1/asn1_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: extern const char *_asn1_mon[12];",
          "48: int asn1_get_choice_selector(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "49: int asn1_set_choice_selector(ASN1_VALUE **pval, int value,",
          "50:                              const ASN1_ITEM *it);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: void asn1_string_embed_free(ASN1_STRING *a, int embed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: int asn1_enc_save(ASN1_VALUE **pval, const unsigned char *in, int inlen,",
          "64:                   const ASN1_ITEM *it);",
          "67: void asn1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);",
          "69: ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,",
          "",
          "[Removed Lines]",
          "66: void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it);",
          "",
          "[Added Lines]",
          "68: void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int embed);",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_fre.c||crypto/asn1/tasn_fre.c": [
          "File: crypto/asn1/tasn_fre.c -> crypto/asn1/tasn_fre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         if (it->templates)",
          "53:             asn1_template_free(pval, it->templates);",
          "54:         else",
          "56:         break;",
          "58:     case ASN1_ITYPE_MSTRING:",
          "60:         break;",
          "62:     case ASN1_ITYPE_CHOICE:",
          "",
          "[Removed Lines]",
          "55:             asn1_primitive_free(pval, it);",
          "59:         asn1_primitive_free(pval, it);",
          "",
          "[Added Lines]",
          "55:             asn1_primitive_free(pval, it, embed);",
          "59:         asn1_primitive_free(pval, it, embed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:     }",
          "148: }",
          "151: {",
          "152:     int utype;",
          "",
          "[Removed Lines]",
          "150: void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "",
          "[Added Lines]",
          "150: void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int embed)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:         break;",
          "197:     case V_ASN1_ANY:",
          "199:         OPENSSL_free(*pval);",
          "200:         break;",
          "202:     default:",
          "204:         break;",
          "205:     }",
          "",
          "[Removed Lines]",
          "198:         asn1_primitive_free(pval, NULL);",
          "203:         ASN1_STRING_free((ASN1_STRING *)*pval);",
          "",
          "[Added Lines]",
          "198:         asn1_primitive_free(pval, NULL, 0);",
          "203:         asn1_string_embed_free((ASN1_STRING *)*pval, embed);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d02309a1622a804668a22f9cfbe9c5e49dead9a",
      "candidate_info": {
        "commit_hash": "7d02309a1622a804668a22f9cfbe9c5e49dead9a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7d02309a1622a804668a22f9cfbe9c5e49dead9a",
        "files": [
          "apps/rehash.c"
        ],
        "message": "In apps/rehash.c, decorate the inclusion of internal/o_dir.h for VMS\n\nThe library files are built with symbol names as is, while the\napplication is built with the default uppercase-all-symbols mode.\nThat's fine for public APIs, because we have __DECC_INCLUDE_PROLOGUE.H\nand __DECC_INCLUDE_EPILOGUE.H automatically telling the compiler how\nto treat the public header files.  However, we don't have the same\nsetup for internal library APIs, since they are usually only used by\nthe libraries.\n\nBecause apps/rehash.c uses a library internal header file, we have to\nsurround that inclusion with the same kind of pragmas found in\n__DECC_INCLUDE_PROLOGUE.H and __DECC_INCLUDE_EPILOGUE.H, or we get\nunresolved symbols when building no-shared.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2725)\n(cherry picked from commit 2ac915f16218982f48dbc799b8308a07441d2e35)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: # include <ctype.h>",
          "26: # include <sys/stat.h>",
          "28: # include \"internal/o_dir.h\"",
          "29: # include <openssl/evp.h>",
          "30: # include <openssl/pem.h>",
          "31: # include <openssl/x509.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: # ifdef __VMS",
          "35: #  pragma names save",
          "36: #  pragma names as_is,shortened",
          "37: # endif",
          "41: # ifdef __VMS",
          "42: #  pragma names restore",
          "43: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5769b5421683293014ed91b292ea39915f5f1eff",
      "candidate_info": {
        "commit_hash": "5769b5421683293014ed91b292ea39915f5f1eff",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5769b5421683293014ed91b292ea39915f5f1eff",
        "files": [
          "test/evp_test.c"
        ],
        "message": "evp_test: when function and reason strings aren't available, just skip\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2093)\n(cherry picked from commit cd3fe0e09c97700005ed96c8113907cbdfc45edf)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:     func = ERR_func_error_string(err);",
          "373:     reason = ERR_reason_error_string(err);",
          "375:     if (strcmp(func, t->func) == 0 && strcmp(reason, t->reason) == 0)",
          "376:         return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:     if (func == NULL && reason == NULL) {",
          "376:         fprintf(stderr, \"Test line %d: expected error \\\"%s:%s\\\", no strings available.  Skipping...\\n\",",
          "377:                 t->start_line, t->func, t->reason);",
          "378:         return 1;",
          "379:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3cfc9962b883a1da7082735f77a9c4b4e4ffdd8",
      "candidate_info": {
        "commit_hash": "c3cfc9962b883a1da7082735f77a9c4b4e4ffdd8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c3cfc9962b883a1da7082735f77a9c4b4e4ffdd8",
        "files": [
          "Configurations/unix-Makefile.tmpl",
          "Configure",
          "util/build.info",
          "util/shlib_wrap.sh",
          "util/shlib_wrap.sh.in"
        ],
        "message": "Allow asan, msan and ubsan to be configured with shared libraries\n\nThe background story is that util/shlib_wrap.sh was setting LD_PRELOAD\nor similar platform dependent variables, just in case the shared\nlibraries were built with -rpath.  Unfortunately, this doesn't work\ntoo well with asan, msan or ubsan.\n\nSo, the solution is to forbid the combination of shared libraries,\n-rpath and any of the sanity analyzers we can configure.\n\nThis changes util/shlib_wrap.sh so it only contains the code that sets\nLD_PRELOAD when -rpath has been used when configuring.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 342a1a23793cb99921abeabe882adf8652ba715d)",
        "before_after_code_files": [
          "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl",
          "util/build.info||util/build.info",
          "util/shlib_wrap.sh||util/shlib_wrap.sh.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl": [
          "File: Configurations/unix-Makefile.tmpl -> Configurations/unix-Makefile.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "776: # Helper targets #####################################################",
          "780: $(BLDDIR)/util/opensslwrap.sh: configdata.pm",
          "781:  @if [ \"$(SRCDIR)\" != \"$(BLDDIR)\" ]; then \\",
          "782:      mkdir -p \"$(BLDDIR)/util\"; \\",
          "783:      ln -sf \"../$(SRCDIR)/util/opensslwrap.sh\" \"$(BLDDIR)/util\"; \\",
          "784:  fi",
          "790: FORCE:",
          "792: # Building targets ###################################################",
          "",
          "[Removed Lines]",
          "778: link-utils: $(BLDDIR)/util/opensslwrap.sh $(BLDDIR)/util/shlib_wrap.sh",
          "785: $(BLDDIR)/util/shlib_wrap.sh: configdata.pm",
          "786:  @if [ \"$(SRCDIR)\" != \"$(BLDDIR)\" ]; then \\",
          "787:      mkdir -p \"$(BLDDIR)/util\"; \\",
          "788:      ln -sf \"../$(SRCDIR)/util/shlib_wrap.sh\" \"$(BLDDIR)/util\"; \\",
          "789:  fi",
          "",
          "[Added Lines]",
          "778: link-utils: $(BLDDIR)/util/opensslwrap.sh",
          "",
          "---------------"
        ],
        "util/build.info||util/build.info": [
          "File: util/build.info -> util/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: SCRIPTS_NO_INST=shlib_wrap.sh",
          "2: SOURCE[shlib_wrap.sh]=shlib_wrap.sh.in",
          "",
          "---------------"
        ],
        "util/shlib_wrap.sh||util/shlib_wrap.sh.in": [
          "File: util/shlib_wrap.sh -> util/shlib_wrap.sh.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  ;;",
          "82: esac",
          "84: if [ -f \"$LIBCRYPTOSO\" -a -z \"$preload_var\" ]; then",
          "85:  # Following three lines are major excuse for isolating them into",
          "86:  # this wrapper script. Original reason for setting LD_PRELOAD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: {- output_off() if $config{ex_libs} !~ /(^|\\s)-Wl,-rpath,/; \"\"; -}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  DYLD_INSERT_LIBRARIES=\"$LIBCRYPTOSO:$LIBSSLSO\" # MacOS X",
          "97:  export LD_PRELOAD _RLD_LIST DYLD_INSERT_LIBRARIES",
          "98: fi",
          "100: cmd=\"$1\"; [ -x \"$cmd\" ] || cmd=\"$cmd${EXE_EXT}\"",
          "101: shift",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: {- output_on() if $config{ex_libs} !~ /(^|\\s)-Wl,-rpath,/; \"\"; -}",
          "",
          "---------------"
        ]
      }
    }
  ]
}