{
  "cve_id": "CVE-2012-2791",
  "cve_desc": "Multiple unspecified vulnerabilities in the (1) decode_band_hdr function in indeo4.c and (2) ff_ivi_decode_blocks function in ivi_common.c in libavcodec/ in FFmpeg before 0.11, and Libav 0.7.x before 0.7.7 and 0.8.x before 0.8.5, have unknown impact and attack vectors, related to the \"transform size.\"",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "0846719dd11ab3f7a7caee13e7af71f71d913389",
  "patch_info": {
    "commit_hash": "0846719dd11ab3f7a7caee13e7af71f71d913389",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0846719dd11ab3f7a7caee13e7af71f71d913389",
    "files": [
      "libavcodec/indeo4.c",
      "libavcodec/ivi_common.c",
      "libavcodec/ivi_common.h"
    ],
    "message": "indeo4: check transform size.\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/indeo4.c||libavcodec/indeo4.c",
      "libavcodec/ivi_common.c||libavcodec/ivi_common.c",
      "libavcodec/ivi_common.h||libavcodec/ivi_common.h"
    ]
  },
  "patch_diff": {
    "libavcodec/indeo4.c||libavcodec/indeo4.c": [
      "File: libavcodec/indeo4.c -> libavcodec/indeo4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "383:                 return AVERROR_PATCHWELCOME;",
      "384:             }",
      "386: #if IVI4_STREAM_ANALYSER",
      "387:             if ((transform_id >= 0 && transform_id <= 2) || transform_id == 10)",
      "388:                 ctx->uses_haar = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "386:             if (transform_id < 10 && band->blk_size < 8) {",
      "387:                 av_log(avctx, AV_LOG_ERROR, \"wrong transform size!\\n\");",
      "388:                 return AVERROR_INVALIDDATA;",
      "389:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "391:             band->inv_transform = transforms[transform_id].inv_trans;",
      "392:             band->dc_transform  = transforms[transform_id].dc_trans;",
      "393:             band->is_2d_trans   = transforms[transform_id].is_2d_trans;",
      "395:             scan_indx = get_bits(&ctx->gb, 4);",
      "396:             if ((scan_indx>4 && scan_indx<10) != (band->blk_size==4)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:             band->transform_size= (transform_id < 10) ? 8 : 4;",
      "",
      "---------------"
    ],
    "libavcodec/ivi_common.c||libavcodec/ivi_common.c": [
      "File: libavcodec/ivi_common.c -> libavcodec/ivi_common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "440:                     trvec[0]      = prev_dc;",
      "441:                     col_flags[0] |= !!prev_dc;",
      "442:                 }",
      "445:                 band->inv_transform(trvec, band->buf + buf_offs,",
      "446:                                     band->pitch, col_flags);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "443:                 if(band->transform_size > band->blk_size){",
      "444:                     av_log(0, AV_LOG_ERROR, \"Too large transform\\n\");",
      "445:                     return AVERROR_INVALIDDATA;",
      "446:                 }",
      "",
      "---------------"
    ],
    "libavcodec/ivi_common.h||libavcodec/ivi_common.h": [
      "File: libavcodec/ivi_common.h -> libavcodec/ivi_common.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "160:     InvTransformPtr *inv_transform;",
      "161:     DCTransformPtr  *dc_transform;",
      "162:     int             is_2d_trans;    ///< 1 indicates that the two-dimensional inverse transform is used",
      "163:     int32_t         checksum;       ///< for debug purposes",
      "164:     int             checksum_present;",
      "165:     int             bufsize;        ///< band buffer size in bytes",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:     int             transform_size; ///< block size of the transform",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0efcf16a3e6ea19abf65e86ef6116dc88892a670",
      "candidate_info": {
        "commit_hash": "0efcf16a3e6ea19abf65e86ef6116dc88892a670",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0efcf16a3e6ea19abf65e86ef6116dc88892a670",
        "files": [
          "cmdutils.c",
          "ffmpeg_opt.c",
          "libavcodec/bink.c",
          "libavcodec/dsicinav.c",
          "libavcodec/iff.c",
          "libavcodec/imgconvert.c",
          "libavcodec/ivi_common.c",
          "libavcodec/lzw.c",
          "libavcodec/mpegaudiodec.c",
          "libavcodec/qdm2.c",
          "libavfilter/avcodec.c",
          "libavfilter/formats.c",
          "libavformat/matroskadec.c",
          "libavformat/utils.c",
          "libavutil/imgutils.c",
          "libavutil/rational.c"
        ],
        "message": "replace av_log(0, by av_log(NULL,\n\nThe first parameter is a pointer and NULL is more correct\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "cmdutils.c||cmdutils.c",
          "ffmpeg_opt.c||ffmpeg_opt.c",
          "libavcodec/bink.c||libavcodec/bink.c",
          "libavcodec/dsicinav.c||libavcodec/dsicinav.c",
          "libavcodec/iff.c||libavcodec/iff.c",
          "libavcodec/imgconvert.c||libavcodec/imgconvert.c",
          "libavcodec/ivi_common.c||libavcodec/ivi_common.c",
          "libavcodec/lzw.c||libavcodec/lzw.c",
          "libavcodec/mpegaudiodec.c||libavcodec/mpegaudiodec.c",
          "libavcodec/qdm2.c||libavcodec/qdm2.c",
          "libavfilter/avcodec.c||libavfilter/avcodec.c",
          "libavfilter/formats.c||libavfilter/formats.c",
          "libavformat/matroskadec.c||libavformat/matroskadec.c",
          "libavformat/utils.c||libavformat/utils.c",
          "libavutil/imgutils.c||libavutil/imgutils.c",
          "libavutil/rational.c||libavutil/rational.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/ivi_common.c||libavcodec/ivi_common.c"
          ],
          "candidate": [
            "libavcodec/ivi_common.c||libavcodec/ivi_common.c"
          ]
        }
      },
      "candidate_diff": {
        "cmdutils.c||cmdutils.c": [
          "File: cmdutils.c -> cmdutils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "991:     while ((desc = avcodec_descriptor_next(desc)))",
          "992:         nb_codecs++;",
          "993:     if (!(codecs = av_calloc(nb_codecs, sizeof(*codecs)))) {",
          "995:         exit(1);",
          "996:     }",
          "997:     desc = NULL;",
          "",
          "[Removed Lines]",
          "994:         av_log(0, AV_LOG_ERROR, \"Out of memory\\n\");",
          "",
          "[Added Lines]",
          "994:         av_log(NULL, AV_LOG_ERROR, \"Out of memory\\n\");",
          "",
          "---------------"
        ],
        "ffmpeg_opt.c||ffmpeg_opt.c": [
          "File: ffmpeg_opt.c -> ffmpeg_opt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2251:         arg = \"pipe:\";",
          "2252:     ret = avio_open2(&avio, arg, AVIO_FLAG_WRITE, &int_cb, NULL);",
          "2253:     if (ret < 0) {",
          "2255:                arg, av_err2str(ret));",
          "2256:         return ret;",
          "2257:     }",
          "",
          "[Removed Lines]",
          "2254:         av_log(0, AV_LOG_ERROR, \"Failed to open progress URL \\\"%s\\\": %s\\n\",",
          "",
          "[Added Lines]",
          "2254:         av_log(NULL, AV_LOG_ERROR, \"Failed to open progress URL \\\"%s\\\": %s\\n\",",
          "",
          "---------------"
        ],
        "libavcodec/bink.c||libavcodec/bink.c": [
          "File: libavcodec/bink.c -> libavcodec/bink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "675:     } else {",
          "676:         quant_idx = q;",
          "677:         if (quant_idx > 15U) {",
          "679:             return AVERROR_INVALIDDATA;",
          "680:         }",
          "681:     }",
          "",
          "[Removed Lines]",
          "678:             av_log(0, AV_LOG_ERROR, \"quant_index %d out of range\\n\", quant_idx);",
          "",
          "[Added Lines]",
          "678:             av_log(NULL, AV_LOG_ERROR, \"quant_index %d out of range\\n\", quant_idx);",
          "",
          "---------------"
        ],
        "libavcodec/dsicinav.c||libavcodec/dsicinav.c": [
          "File: libavcodec/dsicinav.c -> libavcodec/dsicinav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         } else {",
          "213:             len = code + 1;",
          "214:             if (len > src_end-src) {",
          "216:                 return AVERROR_INVALIDDATA;",
          "217:             }",
          "218:             memcpy(dst, src, FFMIN(len, dst_end - dst));",
          "",
          "[Removed Lines]",
          "215:                 av_log(0, AV_LOG_ERROR, \"RLE overread\\n\");",
          "",
          "[Added Lines]",
          "215:                 av_log(NULL, AV_LOG_ERROR, \"RLE overread\\n\");",
          "",
          "---------------"
        ],
        "libavcodec/iff.c||libavcodec/iff.c": [
          "File: libavcodec/iff.c -> libavcodec/iff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: {",
          "373:     const uint64_t *lut = plane8_lut[plane];",
          "374:     if (plane >= 8) {",
          "376:         return;",
          "377:     }",
          "378:     do {",
          "",
          "[Removed Lines]",
          "375:         av_log(0, AV_LOG_WARNING, \"Ignoring extra planes beyond 8\\n\");",
          "",
          "[Added Lines]",
          "375:         av_log(NULL, AV_LOG_WARNING, \"Ignoring extra planes beyond 8\\n\");",
          "",
          "---------------"
        ],
        "libavcodec/imgconvert.c||libavcodec/imgconvert.c": [
          "File: libavcodec/imgconvert.c -> libavcodec/imgconvert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:             continue;",
          "644:         }",
          "645:         if (skip) {",
          "647:             skip = 0;",
          "648:         }",
          "650:         if ((!(desc->flags & PIX_FMT_ALPHA)) != (desc->nb_components != 2 && desc->nb_components != 4)) {",
          "652:             err = 1;",
          "653:         }",
          "654:     }",
          "",
          "[Removed Lines]",
          "646:             av_log(0, AV_LOG_INFO, \"%3d unused pixel format values\\n\", skip);",
          "649:         av_log(0, AV_LOG_INFO, \"pix fmt %s yuv_plan:%d avg_bpp:%d colortype:%d\\n\", desc->name, is_yuv_planar(desc), av_get_padded_bits_per_pixel(desc), get_color_type(desc));",
          "651:             av_log(0, AV_LOG_ERROR, \"Alpha flag mismatch\\n\");",
          "",
          "[Added Lines]",
          "646:             av_log(NULL, AV_LOG_INFO, \"%3d unused pixel format values\\n\", skip);",
          "649:         av_log(NULL, AV_LOG_INFO, \"pix fmt %s yuv_plan:%d avg_bpp:%d colortype:%d\\n\", desc->name, is_yuv_planar(desc), av_get_padded_bits_per_pixel(desc), get_color_type(desc));",
          "651:             av_log(NULL, AV_LOG_ERROR, \"Alpha flag mismatch\\n\");",
          "",
          "---------------"
        ],
        "libavcodec/ivi_common.c||libavcodec/ivi_common.c": [
          "File: libavcodec/ivi_common.c -> libavcodec/ivi_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:                         if (tile->num_MBs <= ref_tile->num_MBs) {",
          "312:                             tile->ref_mbs = ref_tile->mbs;",
          "313:                         }else",
          "315:                         ref_tile++;",
          "316:                     }",
          "",
          "[Removed Lines]",
          "314:                             av_log(0, AV_LOG_DEBUG, \"Cannot use ref_tile, too few mbs\\n\");",
          "",
          "[Added Lines]",
          "314:                             av_log(NULL, AV_LOG_DEBUG, \"Cannot use ref_tile, too few mbs\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:                     col_flags[0] |= !!prev_dc;",
          "467:                 }",
          "468:                 if(band->transform_size > band->blk_size){",
          "470:                     return AVERROR_INVALIDDATA;",
          "471:                 }",
          "",
          "[Removed Lines]",
          "469:                     av_log(0, AV_LOG_ERROR, \"Too large transform\\n\");",
          "",
          "[Added Lines]",
          "469:                     av_log(NULL, AV_LOG_ERROR, \"Too large transform\\n\");",
          "",
          "---------------"
        ],
        "libavcodec/lzw.c||libavcodec/lzw.c": [
          "File: libavcodec/lzw.c -> libavcodec/lzw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:                 goto the_end;",
          "193:         }",
          "194:         if (s->ebuf < s->pbuf) {",
          "196:             goto the_end;",
          "197:         }",
          "198:         c = lzw_get_code(s);",
          "",
          "[Removed Lines]",
          "195:             av_log(0, AV_LOG_ERROR, \"lzw overread\\n\");",
          "",
          "[Added Lines]",
          "195:             av_log(NULL, AV_LOG_ERROR, \"lzw overread\\n\");",
          "",
          "---------------"
        ],
        "libavcodec/mpegaudiodec.c||libavcodec/mpegaudiodec.c": [
          "File: libavcodec/mpegaudiodec.c -> libavcodec/mpegaudiodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     e -= exponent >> 2;",
          "269: #ifdef DEBUG",
          "270:     if(e < 1)",
          "272: #endif",
          "273:     if (e > 31)",
          "274:         return 0;",
          "",
          "[Removed Lines]",
          "271:         av_log(0, AV_LOG_WARNING, \"l3_unscale: e is %d\\n\", e);",
          "",
          "[Added Lines]",
          "271:         av_log(NULL, AV_LOG_WARNING, \"l3_unscale: e is %d\\n\", e);",
          "",
          "---------------"
        ],
        "libavcodec/qdm2.c||libavcodec/qdm2.c": [
          "File: libavcodec/qdm2.c -> libavcodec/qdm2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:         int tmp;",
          "349:         if (value >= 60) {",
          "351:             return 0;",
          "352:         }",
          "",
          "[Removed Lines]",
          "350:             av_log(0, AV_LOG_ERROR, \"value %d in qdm2_get_vlc too large\\n\", value);",
          "",
          "[Added Lines]",
          "350:             av_log(NULL, AV_LOG_ERROR, \"value %d in qdm2_get_vlc too large\\n\", value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360:             while ((n = qdm2_get_vlc(gb, &vlc_tab_fft_tone_offset[local_int_8], 1, 2)) < 2) {",
          "1361:                 if (get_bits_left(gb)<0) {",
          "1362:                     if(local_int_4 < q->group_size)",
          "1364:                     return;",
          "1365:                 }",
          "1366:                 offset = 1;",
          "",
          "[Removed Lines]",
          "1363:                         av_log(0, AV_LOG_ERROR, \"overread in qdm2_fft_decode_tones()\\n\");",
          "",
          "[Added Lines]",
          "1363:                         av_log(NULL, AV_LOG_ERROR, \"overread in qdm2_fft_decode_tones()\\n\");",
          "",
          "---------------"
        ],
        "libavfilter/avcodec.c||libavfilter/avcodec.c": [
          "File: libavfilter/avcodec.c -> libavfilter/avcodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         dst->audio->channel_layout      = src->channel_layout;",
          "63:         dst->audio->channels            = src->channels;",
          "64:         if(src->channels < av_get_channel_layout_nb_channels(src->channel_layout)) {",
          "66:             return AVERROR(EINVAL);",
          "67:         }",
          "68:         break;",
          "",
          "[Removed Lines]",
          "65:             av_log(0, AV_LOG_ERROR, \"libavfilter does not support this channel layout\\n\");",
          "",
          "[Added Lines]",
          "65:             av_log(NULL, AV_LOG_ERROR, \"libavfilter does not support this channel layout\\n\");",
          "",
          "---------------"
        ],
        "libavfilter/formats.c||libavfilter/formats.c": [
          "File: libavfilter/formats.c -> libavfilter/formats.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:             for (j = 0; j < b->nb; j++)                                         \\",
          "70:                 if (a->fmts[i] == b->fmts[j]) {                                 \\",
          "71:                     if(k >= FFMIN(a->nb, b->nb)){                               \\",
          "73:                         av_free(ret->fmts);                                     \\",
          "74:                         av_free(ret);                                           \\",
          "75:                         return NULL;                                            \\",
          "",
          "[Removed Lines]",
          "72:                         av_log(0, AV_LOG_ERROR, \"Duplicate formats in avfilter_merge_formats() detected\\n\"); \\",
          "",
          "[Added Lines]",
          "72:                         av_log(NULL, AV_LOG_ERROR, \"Duplicate formats in avfilter_merge_formats() detected\\n\"); \\",
          "",
          "---------------"
        ],
        "libavformat/matroskadec.c||libavformat/matroskadec.c": [
          "File: libavformat/matroskadec.c -> libavformat/matroskadec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062:         uint8_t *header = encodings[0].compression.settings.data;",
          "1064:         if (header_size && !header) {",
          "1066:             return -1;",
          "1067:         }",
          "",
          "[Removed Lines]",
          "1065:             av_log(0, AV_LOG_ERROR, \"Compression size but no data in headerstrip\\n\");",
          "",
          "[Added Lines]",
          "1065:             av_log(NULL, AV_LOG_ERROR, \"Compression size but no data in headerstrip\\n\");",
          "",
          "---------------"
        ],
        "libavformat/utils.c||libavformat/utils.c": [
          "File: libavformat/utils.c -> libavformat/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         }",
          "239:         if(s->maxsize>=0 && remaining+1 < size){",
          "241:             size= remaining+1;",
          "242:         }",
          "243:     }",
          "",
          "[Removed Lines]",
          "240:             av_log(0, remaining ? AV_LOG_ERROR : AV_LOG_DEBUG, \"Truncating packet of size %d to %\"PRId64\"\\n\", size, remaining+1);",
          "",
          "[Added Lines]",
          "240:             av_log(NULL, remaining ? AV_LOG_ERROR : AV_LOG_DEBUG, \"Truncating packet of size %d to %\"PRId64\"\\n\", size, remaining+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "547:     if (!s && !(s = avformat_alloc_context()))",
          "548:         return AVERROR(ENOMEM);",
          "549:     if (!s->av_class){",
          "551:         return AVERROR(EINVAL);",
          "552:     }",
          "553:     if (fmt)",
          "",
          "[Removed Lines]",
          "550:         av_log(0, AV_LOG_ERROR, \"Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\\n\");",
          "",
          "[Added Lines]",
          "550:         av_log(NULL, AV_LOG_ERROR, \"Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\\n\");",
          "",
          "---------------"
        ],
        "libavutil/imgutils.c||libavutil/imgutils.c": [
          "File: libavutil/imgutils.c -> libavutil/imgutils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:             int h = height;",
          "278:             int bwidth = av_image_get_linesize(pix_fmt, width, i);",
          "279:             if (bwidth < 0) {",
          "281:                 return;",
          "282:             }",
          "283:             if (i == 1 || i == 2) {",
          "",
          "[Removed Lines]",
          "280:                 av_log(0, AV_LOG_ERROR, \"av_image_get_linesize failed\\n\");",
          "",
          "[Added Lines]",
          "280:                 av_log(NULL, AV_LOG_ERROR, \"av_image_get_linesize failed\\n\");",
          "",
          "---------------"
        ],
        "libavutil/rational.c||libavutil/rational.c": [
          "File: libavutil/rational.c -> libavutil/rational.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:                     else if (d < 0)  d = -1;",
          "161:                     else if (d != d) d = INT_MIN;",
          "162:                     if (c != d)",
          "164:                                a.den, b.num, b.den, c,d);",
          "165:                     r = av_sub_q(av_add_q(b,a), b);",
          "166:                     if(b.den && (r.num*a.den != a.num*r.den || !r.num != !a.num || !r.den != !a.den))",
          "168:                 }",
          "169:             }",
          "170:         }",
          "",
          "[Removed Lines]",
          "163:                         av_log(0, AV_LOG_ERROR, \"%d/%d %d/%d, %d %f\\n\", a.num,",
          "167:                         av_log(0, AV_LOG_ERROR, \"%d/%d \", r.num, r.den);",
          "",
          "[Added Lines]",
          "163:                         av_log(NULL, AV_LOG_ERROR, \"%d/%d %d/%d, %d %f\\n\", a.num,",
          "167:                         av_log(NULL, AV_LOG_ERROR, \"%d/%d \", r.num, r.den);",
          "",
          "---------------"
        ]
      }
    }
  ]
}