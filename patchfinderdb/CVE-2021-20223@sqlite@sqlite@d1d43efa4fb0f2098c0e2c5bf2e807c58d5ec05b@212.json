{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a54e1b1fc88ecf0586de8d63a6287243097723dc",
      "candidate_info": {
        "commit_hash": "a54e1b1fc88ecf0586de8d63a6287243097723dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a54e1b1fc88ecf0586de8d63a6287243097723dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "The OP_SeekScan opcode is a no-op if the cursor is not pointing to a valid row upon entry.\n\nFossilOrigin-Name: 4afc96b5fe80bd192a23e0230edc207e641931c3bf48296b1a385c786386f1b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e57e758a6a33f54d28a546b4eebfb5cfacef30dc4e0207e43bb9d2c06fc3439",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4449:   assert( pC!=0 );",
          "4450:   assert( pC->eCurType==CURTYPE_BTREE );",
          "4451:   assert( !pC->isTable );",
          "4453: #ifdef SQLITE_DEBUG",
          "4454:      if( db->flags&SQLITE_VdbeTrace ){",
          "4456:      }",
          "4457: #endif",
          "4458:     break;",
          "",
          "[Removed Lines]",
          "4452:   if( pC->nullRow ){",
          "4455:        printf(\"... no prior seeks - fall through\\n\");",
          "",
          "[Added Lines]",
          "4450:   if( !sqlite3BtreeCursorIsValidNN(pC->uc.pCursor) ){",
          "4453:        printf(\"... cursor not valid - fall through\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6c947251bed7518f5c617892c8ff9d53c68c6a9",
      "candidate_info": {
        "commit_hash": "b6c947251bed7518f5c617892c8ff9d53c68c6a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6c947251bed7518f5c617892c8ff9d53c68c6a9",
        "files": [
          "ext/rtree/rtreeI.test",
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix to the rowvalue logic that avoids disabling rowvalue inequality contraints on a virtual table when the virtual table sets the omit flag. The logic has been incorrect since row-values were added.  However, this does not come up often as very few virtual tables implement inequality constraints using the omit flag.  Ticket [f096d191b6641daa]\n\nFossilOrigin-Name: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
        "before_after_code_files": [
          "ext/rtree/rtreeI.test||ext/rtree/rtreeI.test",
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtreeI.test||ext/rtree/rtreeI.test": [
          "File: ext/rtree/rtreeI.test -> ext/rtree/rtreeI.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-12-05",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Additional test cases",
          "13: if {![info exists testdir]} {",
          "14:   set testdir [file join [file dirname [info script]] .. .. test]",
          "15: }",
          "16: source [file join [file dirname [info script]] rtree_util.tcl]",
          "17: source $testdir/tester.tcl",
          "18: ifcapable !rtree { finish_test ; return }",
          "20: # The following is a test of rowvalue handling on virtual tables that",
          "21: # deal with inequalities and that set the OMIT flag on terms of the",
          "22: # WHERE clause.  This is not specific to rtree.  We just use rtree because",
          "23: # it is a convenient test platform since it has all the right",
          "24: # characteristics.",
          "25: #",
          "26: do_execsql_test rtreeI-1.10 {",
          "27:   CREATE TABLE t1(a);",
          "28:   INSERT INTO t1 VALUES(2);",
          "29:   CREATE VIRTUAL TABLE t2 USING rtree(id,x0,x1);",
          "30:   INSERT INTO t2(id,x0,x1) VALUES(1,2,3);",
          "31: } {}",
          "32: do_execsql_test rtreeI-1.20 {",
          "33:   SELECT 123 FROM t1, t2 WHERE (a,0)>(x0,0);",
          "34: } {}",
          "35: do_execsql_test rtreeI-1.21 {",
          "36:   SELECT 123 FROM t1, t2 WHERE (a,0.1)>(x0,0);",
          "37: } {123}",
          "38: do_execsql_test rtreeI-1.22 {",
          "39:   SELECT 123 FROM t1, t2 WHERE (a,0)>=(x0,0);",
          "40: } {123}",
          "41: do_execsql_test rtreeI-1.23 {",
          "42:   SELECT 123 FROM t1, t2 WHERE (a,0)<=(x0,0);",
          "43: } {123}",
          "44: do_execsql_test rtreeI-1.24 {",
          "45:   SELECT 123 FROM t1, t2 WHERE (a,0)<(x0,0);",
          "46: } {}",
          "47: do_execsql_test rtreeI-1.30 {",
          "48:   SELECT 123 FROM t1, t2 WHERE (x0,0)<(a,0);",
          "49: } {}",
          "50: do_execsql_test rtreeI-1.31 {",
          "51:   SELECT 123 FROM t1, t2 WHERE (x0,0)<(a,0.1);",
          "52: } {123}",
          "53: do_execsql_test rtreeI-1.40 {",
          "54:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)>(x0,0);",
          "55: } {}",
          "56: do_execsql_test rtreeI-1.41 {",
          "57:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0.5)>(x0,0);",
          "58: } {123}",
          "59: do_execsql_test rtreeI-1.42 {",
          "60:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)>=(x0,0);",
          "61: } {123}",
          "62: do_execsql_test rtreeI-1.43 {",
          "63:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)<(x0,0);",
          "64: } {}",
          "65: do_execsql_test rtreeI-1.50 {",
          "66:   SELECT 123 FROM t1, t2 WHERE 5>x1 AND 99>id AND (x0,0)<(a,0);",
          "67: } {}",
          "68: do_execsql_test rtreeI-1.51 {",
          "69:   SELECT 123 FROM t1, t2 WHERE 5>x1 AND 99>id AND (x0,0)<(a,0.5);",
          "70: } {123}",
          "74: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7d3e3f6e7e55da41bf776fab094df54fb6a33b2967881d3184cf854c8a637518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:       if( op & (WO_LT|WO_LE|WO_GT|WO_GE)",
          "1022:        && sqlite3ExprIsVector(pTerm->pExpr->pRight)",
          "1023:       ){",
          "1025:         if( op==WO_LT ) pIdxCons[j].op = WO_LE;",
          "1026:         if( op==WO_GT ) pIdxCons[j].op = WO_GE;",
          "1027:       }",
          "",
          "[Removed Lines]",
          "1024:         if( i<16 ) mNoOmit |= (1 << i);",
          "",
          "[Added Lines]",
          "1024:         testcase( j!=i );",
          "1025:         if( j<16 ) mNoOmit |= (1 << j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3202:       if( iTerm>mxTerm ) mxTerm = iTerm;",
          "3203:       testcase( iTerm==15 );",
          "3204:       testcase( iTerm==16 );",
          "3206:       if( (pTerm->eOperator & WO_IN)!=0 ){",
          "",
          "[Removed Lines]",
          "3205:       if( iTerm<16 && pUsage[i].omit ) pNew->u.vtab.omitMask |= 1<<iTerm;",
          "",
          "[Added Lines]",
          "3206:       if( iTerm<16 && pUsage[i].omit ){",
          "3207:         if( ((1<<i)&mNoOmit)==0 ){",
          "3208:           testcase( i!=iTerm );",
          "3209:           pNew->u.vtab.omitMask |= 1<<iTerm;",
          "3210:         }else{",
          "3211:           testcase( i!=iTerm );",
          "3212:         }",
          "3213:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3215:       }",
          "3216:     }",
          "3217:   }",
          "3220:   pNew->nLTerm = mxTerm+1;",
          "3221:   for(i=0; i<=mxTerm; i++){",
          "",
          "[Removed Lines]",
          "3218:   pNew->u.vtab.omitMask &= ~mNoOmit;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7a5ff45b92fbd2db1beba2411fdc0bf07874d0b",
      "candidate_info": {
        "commit_hash": "c7a5ff45b92fbd2db1beba2411fdc0bf07874d0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7a5ff45b92fbd2db1beba2411fdc0bf07874d0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/fuzzdata8.db"
        ],
        "message": "Backout the early VTable cursor close change from yesterday, as Yongheng and Rui have found a test case for which it fails.  The new test case is added to fuzzcheck.\n\nFossilOrigin-Name: ddb10f0374e66886d0681937b14cf0b4f100f03d3955b45b6c508dc6d9e36976",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bae060f382e4386c0793db4aa280fe9cd4893307d17a1801a17218ae4dc031c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5341:       continue;",
          "5342:     }",
          "5347: #ifdef SQLITE_ENABLE_EARLY_CURSOR_CLOSE",
          "5354:      && pTab->pSelect==0",
          "5355:      && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0",
          "5356:     ){",
          "",
          "[Removed Lines]",
          "5344:     if( IsVirtual(pTab) ){",
          "5345:       sqlite3VdbeAddOp1(v, OP_Close, pTabItem->iCursor);",
          "5346:     }",
          "5353:     else if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "[Added Lines]",
          "5350:     if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c903845cde6eee4fcd4c7ac7a952927819b6c45",
      "candidate_info": {
        "commit_hash": "6c903845cde6eee4fcd4c7ac7a952927819b6c45",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c903845cde6eee4fcd4c7ac7a952927819b6c45",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Documentation update:  Clarify that the sqlite3_index_info.aConstraintUsage.omit flag is a hint only and that the code generator is not obligated to follow the hint.\n\nFossilOrigin-Name: 7d3e3f6e7e55da41bf776fab094df54fb6a33b2967881d3184cf854c8a637518",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc72ec52c92ca6a953e765b48e21d52021fdb23a2cd84f737da4e43c642f6a5d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "3cdc8205440b0a0237704368611488985577e5fd",
      "candidate_info": {
        "commit_hash": "3cdc8205440b0a0237704368611488985577e5fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cdc8205440b0a0237704368611488985577e5fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqliteInt.h"
        ],
        "message": "Enable more detailed log messages in SQLITE_ENABLE_CORRUPT_PGNO builds if database corruption is encountered.\n\nFossilOrigin-Name: 57c36a293e16bb4d9652874124ee1447bef278e08664bc8dd0070a0ee2ef1173",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 29a969d6b1709b80d9cb88b60971e4eb021f7f5f8ee9a619be74b833a78a35ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3656:   testcase( sqlite3GlobalConfig.xLog!=0 );",
          "3657:   return sqlite3ReportError(SQLITE_CANTOPEN, lineno, \"cannot open file\");",
          "3658: }",
          "3660: int sqlite3CorruptPgnoError(int lineno, Pgno pgno){",
          "3661:   char zMsg[100];",
          "3662:   sqlite3_snprintf(sizeof(zMsg), zMsg, \"database corruption page %d\", pgno);",
          "3663:   testcase( sqlite3GlobalConfig.xLog!=0 );",
          "3664:   return sqlite3ReportError(SQLITE_CORRUPT, lineno, zMsg);",
          "3665: }",
          "3666: int sqlite3NomemError(int lineno){",
          "3667:   testcase( sqlite3GlobalConfig.xLog!=0 );",
          "3668:   return sqlite3ReportError(SQLITE_NOMEM, lineno, \"OOM\");",
          "",
          "[Removed Lines]",
          "3659: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "3659: #if defined(SQLITE_DEBUG) || defined(SQLITE_ENABLE_CORRUPT_PGNO)",
          "3666: #endif",
          "3667: #ifdef SQLITE_DEBUG",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3834: #ifdef SQLITE_DEBUG",
          "3835:   int sqlite3NomemError(int);",
          "3836:   int sqlite3IoerrnomemError(int);",
          "3838: # define SQLITE_NOMEM_BKPT sqlite3NomemError(__LINE__)",
          "3839: # define SQLITE_IOERR_NOMEM_BKPT sqlite3IoerrnomemError(__LINE__)",
          "3841: #else",
          "3842: # define SQLITE_NOMEM_BKPT SQLITE_NOMEM",
          "3843: # define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM",
          "3844: # define SQLITE_CORRUPT_PGNO(P) sqlite3CorruptError(__LINE__)",
          "3845: #endif",
          "",
          "[Removed Lines]",
          "3837:   int sqlite3CorruptPgnoError(int,Pgno);",
          "3840: # define SQLITE_CORRUPT_PGNO(P) sqlite3CorruptPgnoError(__LINE__,(P))",
          "",
          "[Added Lines]",
          "3842: #endif",
          "3843: #if defined(SQLITE_DEBUG) || defined(SQLITE_ENABLE_CORRUPT_PGNO)",
          "3844:   int sqlite3CorruptPgnoError(int,Pgno);",
          "3845: # define SQLITE_CORRUPT_PGNO(P) sqlite3CorruptPgnoError(__LINE__,(P))",
          "3846: #else",
          "",
          "---------------"
        ]
      }
    }
  ]
}