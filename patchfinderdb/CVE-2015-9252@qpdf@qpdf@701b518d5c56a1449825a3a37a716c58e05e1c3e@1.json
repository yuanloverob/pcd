{
  "cve_id": "CVE-2015-9252",
  "cve_desc": "An issue was discovered in QPDF before 7.0.0. Endless recursion causes stack exhaustion in QPDFTokenizer::resolveLiteral() in QPDFTokenizer.cc, related to the QPDF::resolve function in QPDF.cc.",
  "repo": "qpdf/qpdf",
  "patch_hash": "701b518d5c56a1449825a3a37a716c58e05e1c3e",
  "patch_info": {
    "commit_hash": "701b518d5c56a1449825a3a37a716c58e05e1c3e",
    "repo": "qpdf/qpdf",
    "commit_url": "https://github.com/qpdf/qpdf/commit/701b518d5c56a1449825a3a37a716c58e05e1c3e",
    "files": [
      "ChangeLog",
      "include/qpdf/QPDF.hh",
      "libqpdf/QPDF.cc",
      "qpdf/qpdf.testcov",
      "qpdf/qtest/qpdf.test",
      "qpdf/qtest/qpdf/issue-51.out",
      "qpdf/qtest/qpdf/issue-51.pdf"
    ],
    "message": "Detect recursion loops resolving objects (fixes #51)\n\nDuring parsing of an object, sometimes parts of the object have to be\nresolved. An example is stream lengths. If such an object directly or\nindirectly points to the object being parsed, it can cause an infinite\nloop. Guard against all cases of re-entrant resolution of objects.",
    "before_after_code_files": [
      "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
      "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
      "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
      "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
    ]
  },
  "patch_diff": {
    "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh": [
      "File: include/qpdf/QPDF.hh -> include/qpdf/QPDF.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "603:         int gen;",
      "604:     };",
      "606:     void parse(char const* password);",
      "607:     void warn(QPDFExc const& e);",
      "608:     void setTrailer(QPDFObjectHandle obj);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "606:     class ResolveRecorder",
      "607:     {",
      "608:       public:",
      "609:         ResolveRecorder(QPDF* qpdf, QPDFObjGen const& og) :",
      "610:             qpdf(qpdf),",
      "611:             og(og)",
      "612:         {",
      "613:             qpdf->resolving.insert(og);",
      "614:         }",
      "615:         virtual ~ResolveRecorder()",
      "616:         {",
      "617:             this->qpdf->resolving.erase(og);",
      "618:         }",
      "619:       private:",
      "620:         QPDF* qpdf;",
      "621:         QPDFObjGen og;",
      "622:     };",
      "623:     friend class ResolveRecorder;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1065:     std::map<QPDFObjGen, QPDFXRefEntry> xref_table;",
      "1066:     std::set<int> deleted_objects;",
      "1067:     std::map<QPDFObjGen, ObjCache> obj_cache;",
      "1068:     QPDFObjectHandle trailer;",
      "1069:     std::vector<QPDFObjectHandle> all_pages;",
      "1070:     std::map<QPDFObjGen, int> pageobj_to_pages_pos;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1087:     std::set<QPDFObjGen> resolving;",
      "",
      "---------------"
    ],
    "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
      "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1473:     QPDFObjGen og(objid, generation);",
      "1474:     if (! this->obj_cache.count(og))",
      "1475:     {",
      "1476:  if (! this->xref_table.count(og))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1474:     if (this->resolving.count(og))",
      "1475:     {",
      "1479:  QTC::TC(\"qpdf\", \"QPDF recursion loop in resolve\");",
      "1480:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
      "1481:        \"\", this->file->getLastOffset(),",
      "1482:        \"loop detected resolving object \" +",
      "1483:        QUtil::int_to_string(objid) + \" \" +",
      "1484:        QUtil::int_to_string(generation)));",
      "1485:         return new QPDF_Null;",
      "1486:     }",
      "1487:     ResolveRecorder rr(this, og);",
      "",
      "---------------"
    ],
    "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
      "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
      "--- Hunk 1 ---",
      "[Context before]",
      "276: QPDFObjectHandle indirect with 0 objid 0",
      "277: QPDF object id 0 0",
      "278: QPDF caught recursive xref reconstruction 0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "279: QPDF recursion loop in resolve 0",
      "",
      "---------------"
    ],
    "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
      "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "206: show_ntests();",
      "207: # ----------",
      "208: $td->notify(\"--- Miscellaneous Tests ---\");",
      "211: $td->runtest(\"qpdf version\",",
      "212:       {$td->COMMAND => \"qpdf --version\"},",
      "",
      "[Removed Lines]",
      "209: $n_tests += 81;",
      "",
      "[Added Lines]",
      "209: $n_tests += 82;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "221: # Files to reproduce various bugs",
      "222: foreach my $d (",
      "223:     [\"99\", \"object 0\"],",
      "224:     [\"99b\", \"object 0\"],",
      "225:     [\"100\",\"xref reconstruction loop\"],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     [\"51\", \"resolve loop\"],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "909daf9543a6e364a50568485278fdfd6c6abb7d",
      "candidate_info": {
        "commit_hash": "909daf9543a6e364a50568485278fdfd6c6abb7d",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/909daf9543a6e364a50568485278fdfd6c6abb7d",
        "files": [
          "ChangeLog",
          "qpdf/qpdf.cc",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/show-pages-pages.out"
        ],
        "message": "Move page spec processing earlier",
        "before_after_code_files": [
          "qpdf/qpdf.cc||qpdf/qpdf.cc",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "qpdf/qpdf.cc||qpdf/qpdf.cc": [
          "File: qpdf/qpdf.cc -> qpdf/qpdf.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1874: static void write_outfile(QPDF& pdf, Options& o)",
          "1875: {",
          "1876:     QPDF encryption_pdf;",
          "1883:     if (strcmp(o.outfilename, \"-\") == 0)",
          "1884:     {",
          "1885:         o.outfilename = 0;",
          "",
          "[Removed Lines]",
          "1877:     std::vector<PointerHolder<QPDF> > page_heap;",
          "1878:     if (! o.page_specs.empty())",
          "1879:     {",
          "1880:         handle_page_specs(pdf, o, page_heap);",
          "1881:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2020:             pdf.processFile(o.infilename, o.password);",
          "2021:         }",
          "2023:  if (o.outfilename == 0)",
          "2024:  {",
          "2025:             do_inspection(pdf, o);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2017:         std::vector<PointerHolder<QPDF> > page_heap;",
          "2018:         if (! o.page_specs.empty())",
          "2019:         {",
          "2020:             handle_page_specs(pdf, o, page_heap);",
          "2021:         }",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 94;",
          "",
          "[Added Lines]",
          "209: $n_tests += 95;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:              {$td->REGEXP => \"input file and output file are the same.*\",",
          "653:               $td->EXIT_STATUS => 2});",
          "655: show_ntests();",
          "656: # ----------",
          "657: $td->notify(\"--- Numeric range parsing tests ---\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: $td->runtest(\"combine show and --pages\",",
          "656:              {$td->COMMAND =>",
          "657:                   \"qpdf --empty --pages minimal.pdf -- --show-pages\"},",
          "658:              {$td->FILE => \"show-pages-pages.out\",",
          "659:               $td->EXIT_STATUS => 0},",
          "660:              $td->NORMALIZE_NEWLINES);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "315092dd98d5230ef0efa18b294d464d0e9f79d0",
      "candidate_info": {
        "commit_hash": "315092dd98d5230ef0efa18b294d464d0e9f79d0",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/315092dd98d5230ef0efa18b294d464d0e9f79d0",
        "files": [
          "ChangeLog",
          "include/qpdf/QPDF.hh",
          "libqpdf/QPDF.cc",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/issue-100.out",
          "qpdf/qtest/qpdf/issue-100.pdf"
        ],
        "message": "Avoid xref reconstruction infinite loop (fixes #100)\n\nThis is CVE-2017-9209.",
        "before_after_code_files": [
          "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
          "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh": [
          "File: include/qpdf/QPDF.hh -> include/qpdf/QPDF.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:     CopiedStreamDataProvider* copied_stream_data_provider;",
          "1077:     std::set<QPDFObjGen> attachment_streams;",
          "1080:     qpdf_offset_t first_xref_item_offset; // actual value from file",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:     bool reconstructed_xref;",
          "",
          "---------------"
        ],
        "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
          "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     cached_key_generation(0),",
          "94:     pushed_inherited_attributes_to_pages(false),",
          "95:     copied_stream_data_provider(0),",
          "96:     first_xref_item_offset(0),",
          "97:     uncompressed_after_compressed(false)",
          "98: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     reconstructed_xref(false),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331: void",
          "332: QPDF::reconstruct_xref(QPDFExc& e)",
          "333: {",
          "334:     PCRE obj_re(\"^\\\\s*(\\\\d+)\\\\s+(\\\\d+)\\\\s+obj\\\\b\");",
          "335:     PCRE endobj_re(\"^\\\\s*endobj\\\\b\");",
          "336:     PCRE trailer_re(\"^\\\\s*trailer\\\\b\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:     if (this->reconstructed_xref)",
          "336:     {",
          "338:         QTC::TC(\"qpdf\", \"QPDF caught recursive xref reconstruction\");",
          "339:         throw e;",
          "340:     }",
          "342:     this->reconstructed_xref = true;",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 78;",
          "",
          "[Added Lines]",
          "209: $n_tests += 79;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: # Files to reproduce various bugs",
          "222: foreach my $d (",
          "223:     [\"101\", \"resolve for exception text\"],",
          "224:     )",
          "225: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     [\"100\",\"xref reconstruction loop\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "603f222365252f1a1e20303b3dbe52466be3053b",
      "candidate_info": {
        "commit_hash": "603f222365252f1a1e20303b3dbe52466be3053b",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/603f222365252f1a1e20303b3dbe52466be3053b",
        "files": [
          "ChangeLog",
          "libqpdf/QPDFObjectHandle.cc",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/issue-101.out",
          "qpdf/qtest/qpdf/issue-101.pdf"
        ],
        "message": "Fix infinite loop while reporting an error (fixes #101)\n\nThis is CVE-2017-9210.\n\nThe description string for an error message included unparsing an\nobject, which is too complex of a thing to try to do while throwing an\nexception. There was only one example of this in the entire codebase,\nso it is not a pervasive problem. Fixing this eliminated one class of\ninfinite loop errors.",
        "before_after_code_files": [
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:   throw QPDFExc(",
          "1077:       qpdf_e_damaged_pdf,",
          "1078:       input->getName(), object_description, offset,",
          "1081:      }",
          "1082:      dict[key_obj.getName()] = val;",
          "1083:  }",
          "",
          "[Removed Lines]",
          "1079:       std::string(\"dictionary key not name (\") +",
          "1080:       key_obj.unparse() + \")\");",
          "",
          "[Added Lines]",
          "1079:       std::string(\"dictionary key is not not a name token\"));",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 77;",
          "",
          "[Added Lines]",
          "209: $n_tests += 78;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:        $td->EXIT_STATUS => 0},",
          "219:       $td->NORMALIZE_NEWLINES);",
          "221: foreach (my $i = 1; $i <= 3; ++$i)",
          "222: {",
          "223:     $td->runtest(\"misc tests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: # Files to reproduce various bugs",
          "222: foreach my $d (",
          "223:     [\"101\", \"resolve for exception text\"],",
          "224:     )",
          "225: {",
          "226:     my ($n, $description) = @$d;",
          "227:     $td->runtest($description,",
          "228:                  {$td->COMMAND => \"qpdf issue-$n.pdf a.pdf\"},",
          "229:                  {$td->FILE => \"issue-$n.out\",",
          "230:                   $td->EXIT_STATUS => 2},",
          "231:                  $td->NORMALIZE_NEWLINES);",
          "232: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afe0242b263a9e1a8d51dd81e42ab6de2e5127eb",
      "candidate_info": {
        "commit_hash": "afe0242b263a9e1a8d51dd81e42ab6de2e5127eb",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/afe0242b263a9e1a8d51dd81e42ab6de2e5127eb",
        "files": [
          "ChangeLog",
          "libqpdf/QPDF.cc",
          "libqpdf/QPDFObjectHandle.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/issue-99.out",
          "qpdf/qtest/qpdf/issue-99.pdf",
          "qpdf/qtest/qpdf/issue-99b.out",
          "qpdf/qtest/qpdf/issue-99b.pdf"
        ],
        "message": "Handle object ID 0 (fixes #99)\n\nThis is CVE-2017-9208.\n\nThe QPDF library uses object ID 0 internally as a sentinel to\nrepresent a direct object, but prior to this fix, was not blocking\nhandling of 0 0 obj or 0 0 R as a special case. Creating an object in\nthe file with 0 0 obj could cause various infinite loops. The PDF spec\ndoesn't allow for object 0. Having qpdf handle object 0 might be a\nbetter fix, but changing all the places in the code that assumes objid\n== 0 means direct would be risky.",
        "before_after_code_files": [
          "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
          "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1350:  objid = atoi(tobjid.getValue().c_str());",
          "1351:  generation = atoi(tgen.getValue().c_str());",
          "1353:  if ((exp_objid >= 0) &&",
          "1354:      (! ((objid == exp_objid) && (generation == exp_generation))))",
          "1355:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1353:         if (objid == 0)",
          "1354:         {",
          "1355:             QTC::TC(\"qpdf\", \"QPDF object id 0\");",
          "1356:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1357:                           this->last_object_description, offset,",
          "1358:                           \"object with ID 0\");",
          "1359:         }",
          "",
          "---------------"
        ],
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089: QPDFObjectHandle",
          "1090: QPDFObjectHandle::newIndirect(QPDF* qpdf, int objid, int generation)",
          "1091: {",
          "1092:     return QPDFObjectHandle(qpdf, objid, generation);",
          "1093: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092:     if (objid == 0)",
          "1093:     {",
          "1098:         QTC::TC(\"qpdf\", \"QPDFObjectHandle indirect with 0 objid\");",
          "1099:         return newNull();",
          "1100:     }",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "273: QPDFWriter linearized deterministic ID 1",
          "274: QPDFWriter deterministic with no data 0",
          "275: qpdf-c called qpdf_set_deterministic_ID 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: QPDFObjectHandle indirect with 0 objid 0",
          "277: QPDF object id 0 0",
          "278: QPDF caught recursive xref reconstruction 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 79;",
          "",
          "[Added Lines]",
          "209: $n_tests += 81;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: # Files to reproduce various bugs",
          "222: foreach my $d (",
          "223:     [\"100\",\"xref reconstruction loop\"],",
          "224:     [\"101\", \"resolve for exception text\"],",
          "225:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     [\"99\", \"object 0\"],",
          "224:     [\"99b\", \"object 0\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "428d96dfe19da96ac4759b190f5b25cf75ecdac6",
      "candidate_info": {
        "commit_hash": "428d96dfe19da96ac4759b190f5b25cf75ecdac6",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/428d96dfe19da96ac4759b190f5b25cf75ecdac6",
        "files": [
          "examples/qtest/bookmarks.test",
          "examples/qtest/npages.test",
          "libqpdf/QPDF.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/bad1-recover.out",
          "qpdf/qtest/qpdf/bad1.out",
          "qpdf/qtest/qpdf/bad22-recover.out",
          "qpdf/qtest/qpdf/bad22.out",
          "qpdf/qtest/qpdf/bad23-recover.out",
          "qpdf/qtest/qpdf/bad23.out",
          "qpdf/qtest/qpdf/bad24-recover.out",
          "qpdf/qtest/qpdf/bad24.out",
          "qpdf/qtest/qpdf/bad25.out",
          "qpdf/qtest/qpdf/bad26.out",
          "qpdf/qtest/qpdf/bad27.out",
          "qpdf/qtest/qpdf/bad32.out",
          "qpdf/qtest/qpdf/bad34.out",
          "qpdf/qtest/qpdf/bad35-recover.out",
          "qpdf/qtest/qpdf/bad35.out",
          "qpdf/qtest/qpdf/c-read-errors.out",
          "qpdf/qtest/qpdf/eof-reading-token.out",
          "qpdf/qtest/qpdf/heifer.out",
          "qpdf/qtest/qpdf/issue-100.out",
          "qpdf/qtest/qpdf/issue-101.out",
          "qpdf/qtest/qpdf/issue-117.out",
          "qpdf/qtest/qpdf/issue-118.out",
          "qpdf/qtest/qpdf/issue-120.out",
          "qpdf/qtest/qpdf/issue-51.out",
          "qpdf/qtest/qpdf/linearization-bounds-1.out",
          "qpdf/qtest/qpdf/linearization-bounds-2.out",
          "qpdf/qtest/qpdf/linearization-large-vector-alloc.out"
        ],
        "message": "Convert many more errors to warnings",
        "before_after_code_files": [
          "examples/qtest/bookmarks.test||examples/qtest/bookmarks.test",
          "examples/qtest/npages.test||examples/qtest/npages.test",
          "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "examples/qtest/bookmarks.test||examples/qtest/bookmarks.test": [
          "File: examples/qtest/bookmarks.test -> examples/qtest/bookmarks.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: $td->runtest(\"bad\",",
          "31:       {$td->COMMAND => \"pdf-bookmarks 3.pdf\"},",
          "34:     $td->EXIT_STATUS => 2},",
          "35:       $td->NORMALIZE_NEWLINES);",
          "",
          "[Removed Lines]",
          "32:       {$td->STRING => \"pdf-bookmarks processing file 3.pdf: \" .",
          "33:     \"3.pdf: not a PDF file\\n\",",
          "",
          "[Added Lines]",
          "32:       {$td->REGEXP => \"pdf-bookmarks processing file 3.pdf: \" .",
          "33:     \".*unable to find trailer.*\",",
          "",
          "---------------"
        ],
        "examples/qtest/npages.test||examples/qtest/npages.test": [
          "File: examples/qtest/npages.test -> examples/qtest/npages.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: $td->runtest(\"error\",",
          "18:       {$td->COMMAND => \"pdf-npages bad\"},",
          "20:        $td->EXIT_STATUS => 2},",
          "21:       $td->NORMALIZE_NEWLINES);",
          "",
          "[Removed Lines]",
          "19:       {$td->STRING => \"pdf-npages: bad: not a PDF file\\n\",",
          "",
          "[Added Lines]",
          "19:       {$td->REGEXP => \"pdf-npages: bad: unable to find trailer.*\",",
          "",
          "---------------"
        ],
        "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
          "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: void",
          "206: QPDF::parse(char const* password)",
          "207: {",
          "209:     PCRE eof_re(\"(?s:startxref\\\\s+(\\\\d+)\\\\s+%%EOF\\\\b)\");",
          "211:     if (password)",
          "",
          "[Removed Lines]",
          "208:     PCRE header_re(\"\\\\A((?s).*?)%PDF-(1.\\\\d+)\\\\b\");",
          "",
          "[Added Lines]",
          "208:     PCRE header_re(\"\\\\A((?s).*?)%PDF-(\\\\d+.\\\\d+)\\\\b\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:             this->file = new OffsetInputSource(this->file, global_offset);",
          "234:         }",
          "235:  this->pdf_version = m1.getMatch(2);",
          "240:     }",
          "241:     else",
          "242:     {",
          "243:  QTC::TC(\"qpdf\", \"QPDF not a pdf file\");",
          "246:     }",
          "",
          "[Removed Lines]",
          "236:  if (atof(this->pdf_version.c_str()) < 1.2)",
          "237:  {",
          "238:      this->tokenizer.allowPoundAnywhereInName();",
          "239:  }",
          "244:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "245:         \"\", 0, \"not a PDF file\");",
          "",
          "[Added Lines]",
          "240:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "241:                      \"\", 0, \"can't find PDF header\"));",
          "242:         this->pdf_version = \"1.0\";",
          "243:     }",
          "244:     if (atof(this->pdf_version.c_str()) < 1.2)",
          "245:     {",
          "246:         this->tokenizer.allowPoundAnywhereInName();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1152:             {",
          "1153:                 if (this->attempt_recovery)",
          "1154:                 {",
          "1156:                     length = recoverStreamLength(",
          "1157:                         input, objid, generation, stream_offset);",
          "1158:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1156:                     warn(e);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1289:     if (length == 0)",
          "1290:     {",
          "1294:     }",
          "1296:     QTC::TC(\"qpdf\", \"QPDF recovered stream length\");",
          "",
          "[Removed Lines]",
          "1291:  throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1292:         this->last_object_description, stream_offset,",
          "1293:         \"unable to recover stream data\");",
          "",
          "[Added Lines]",
          "1292:         warn(QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1293:                      this->last_object_description, stream_offset,",
          "1294:                      \"unable to recover stream data; treating stream as empty\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1309:     int exp_objid, int exp_generation,",
          "1310:     int& objid, int& generation)",
          "1311: {",
          "1312:     setLastObjectDescription(description, exp_objid, exp_generation);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1313:     if (! this->attempt_recovery)",
          "1314:     {",
          "1315:         try_recovery = false;",
          "1316:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1363:      (! ((objid == exp_objid) && (generation == exp_generation))))",
          "1364:  {",
          "1365:      QTC::TC(\"qpdf\", \"QPDF err wrong objid/generation\");",
          "1371:  }",
          "1372:     }",
          "1373:     catch (QPDFExc& e)",
          "1374:     {",
          "1376:  {",
          "1378:      reconstruct_xref(e);",
          "",
          "[Removed Lines]",
          "1366:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1367:      this->last_object_description, offset,",
          "1368:      std::string(\"expected \") +",
          "1369:      QUtil::int_to_string(exp_objid) + \" \" +",
          "1370:      QUtil::int_to_string(exp_generation) + \" obj\");",
          "1375:  if ((exp_objid >= 0) && try_recovery && this->attempt_recovery)",
          "",
          "[Added Lines]",
          "1371:      QPDFExc e(qpdf_e_damaged_pdf, this->file->getName(),",
          "1372:                       this->last_object_description, offset,",
          "1373:                       std::string(\"expected \") +",
          "1374:                       QUtil::int_to_string(exp_objid) + \" \" +",
          "1375:                       QUtil::int_to_string(exp_generation) + \" obj\");",
          "1376:             if (try_recovery)",
          "1377:             {",
          "1379:                 throw e;",
          "1380:             }",
          "1381:             else",
          "1382:             {",
          "1385:                 warn(e);",
          "1386:             }",
          "1391:  if ((exp_objid >= 0) && try_recovery)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1496:  }",
          "1498:  QPDFXRefEntry const& entry = this->xref_table[og];",
          "1524:     }",
          "1526:     return this->obj_cache[og].object;",
          "",
          "[Removed Lines]",
          "1499:  switch (entry.getType())",
          "1500:  {",
          "1501:    case 1:",
          "1502:      {",
          "1503:   qpdf_offset_t offset = entry.getOffset();",
          "1505:   int aobjid;",
          "1506:   int ageneration;",
          "1507:   QPDFObjectHandle oh =",
          "1508:       readObjectAtOffset(true, offset, \"\", objid, generation,",
          "1509:            aobjid, ageneration);",
          "1510:      }",
          "1511:      break;",
          "1513:    case 2:",
          "1514:      resolveObjectsInStream(entry.getObjStreamNumber());",
          "1515:      break;",
          "1517:    default:",
          "1518:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "1519:      \"object \" +",
          "1520:      QUtil::int_to_string(objid) + \"/\" +",
          "1521:      QUtil::int_to_string(generation) +",
          "1522:      \" has unexpected xref entry type\");",
          "1523:  }",
          "",
          "[Added Lines]",
          "1515:         try",
          "1516:         {",
          "1517:             switch (entry.getType())",
          "1518:             {",
          "1519:               case 1:",
          "1520:                 {",
          "1521:                     qpdf_offset_t offset = entry.getOffset();",
          "1523:                     int aobjid;",
          "1524:                     int ageneration;",
          "1525:                     QPDFObjectHandle oh =",
          "1526:                         readObjectAtOffset(true, offset, \"\", objid, generation,",
          "1527:                                            aobjid, ageneration);",
          "1528:                 }",
          "1529:                 break;",
          "1531:               case 2:",
          "1532:                 resolveObjectsInStream(entry.getObjStreamNumber());",
          "1533:                 break;",
          "1535:               default:",
          "1536:                 throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "1537:                               \"object \" +",
          "1538:                               QUtil::int_to_string(objid) + \"/\" +",
          "1539:                               QUtil::int_to_string(generation) +",
          "1540:                               \" has unexpected xref entry type\");",
          "1541:             }",
          "1542:         }",
          "1543:         catch (QPDFExc& e)",
          "1544:         {",
          "1545:             QTC::TC(\"qpdf\", \"QPDF resolve failure to null\");",
          "1546:             warn(e);",
          "1547:             QPDFObjectHandle oh = QPDFObjectHandle::newNull();",
          "1548:             this->obj_cache[og] =",
          "1549:                 ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh), -1, -1);",
          "1550:         }",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "278: QPDFObjectHandle treat word as string 0",
          "279: QPDFObjectHandle found fake 1",
          "280: QPDFObjectHandle no val for last key 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: QPDF resolve failure to null 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221: # Files to reproduce various bugs",
          "222: foreach my $d (",
          "224:     [\"99\", \"object 0\", 2],",
          "225:     [\"99b\", \"object 0\", 2],",
          "226:     [\"100\", \"xref reconstruction loop\", 2],",
          "",
          "[Removed Lines]",
          "223:     [\"51\", \"resolve loop\", 2],",
          "",
          "[Added Lines]",
          "223:     [\"51\", \"resolve loop\", 3],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     [\"117\", \"other infinite loop\", 2],",
          "229:     [\"118\", \"other infinite loop\", 2],",
          "230:     [\"119\", \"other infinite loop\", 3],",
          "232:     )",
          "233: {",
          "234:     my ($n, $description, $exit_status) = @$d;",
          "",
          "[Removed Lines]",
          "231:     [\"120\", \"other infinite loop\", 2],",
          "",
          "[Added Lines]",
          "231:     [\"120\", \"other infinite loop\", 3],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "464:              $td->NORMALIZE_NEWLINES);",
          "465: $td->runtest(\"EOF reading token\",",
          "466:              {$td->COMMAND => \"qpdf --check eof-reading-token.pdf\"},",
          "468:              $td->NORMALIZE_NEWLINES);",
          "469: $td->runtest(\"extra header text\",",
          "470:              {$td->COMMAND => \"test_driver 32 minimal.pdf\"},",
          "",
          "[Removed Lines]",
          "467:              {$td->FILE => \"eof-reading-token.out\", $td->EXIT_STATUS => 2},",
          "",
          "[Added Lines]",
          "467:              {$td->FILE => \"eof-reading-token.out\", $td->EXIT_STATUS => 3},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "794: # neither Acrobat nor other PDF viewers really care.  Tests 12 and 28",
          "795: # have error conditions that used to be fatal but are now considered",
          "796: # non-fatal.",
          "800: for (my $i = 1; $i <= scalar(@badfiles); ++$i)",
          "801: {",
          "802:     my $status = $badtest_overrides{$i};",
          "",
          "[Removed Lines]",
          "797: my %badtest_overrides = (6 => 0, 12 => 0, 13 => 0,",
          "798:                          14 => 0, 15 => 0, 17 => 0,",
          "799:                          28 => 0, 30 => 0, 31 => 0, 36 => 0);",
          "",
          "[Added Lines]",
          "797: my %badtest_overrides = ();",
          "798: for(6, 12..15, 17, 22..28, 30..32, 34, 36)",
          "799: {",
          "800:     $badtest_overrides{$_} = 0;",
          "801: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "835: # though in some cases it may.  Acrobat Reader would not be able to",
          "836: # recover any of these files any better.",
          "837: my %recover_failures = ();",
          "839: {",
          "840:     $recover_failures{$_} = 1;",
          "841: }",
          "",
          "[Removed Lines]",
          "838: for (1, 7, 16, 18..21, 24, 29, 35)",
          "",
          "[Added Lines]",
          "841: for (1, 7, 16, 18..21, 29, 35)",
          "",
          "---------------"
        ]
      }
    }
  ]
}