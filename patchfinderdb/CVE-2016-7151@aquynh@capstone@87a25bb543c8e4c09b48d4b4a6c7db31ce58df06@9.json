{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1e2b5b790926ffcabc720c1a2abe86e414b164c",
      "candidate_info": {
        "commit_hash": "e1e2b5b790926ffcabc720c1a2abe86e414b164c",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e1e2b5b790926ffcabc720c1a2abe86e414b164c",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "fix compiling error in MS VS2015 (#869)\n\nfor issue #868",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:  }",
          "1161:  if (MI->csh->detail) {",
          "1163:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "1164:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = v;",
          "1165:   MI->flat_insn->detail->arm.op_count++;",
          "",
          "[Removed Lines]",
          "1162:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((Imm & 0xff) << 2);",
          "",
          "[Added Lines]",
          "1162:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((((int)Imm) & 0xff) << 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08b0e46a4c253d5c3974f205f4576d163b18ac00",
      "candidate_info": {
        "commit_hash": "08b0e46a4c253d5c3974f205f4576d163b18ac00",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/08b0e46a4c253d5c3974f205f4576d163b18ac00",
        "files": [
          "arch/X86/X86GenAsmWriter.inc"
        ],
        "message": "x86: fix (AT&T) ROL instruction in issue #804",
        "before_after_code_files": [
          "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc": [
          "File: arch/X86/X86GenAsmWriter.inc -> arch/X86/X86GenAsmWriter.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "14171:   if (!X86_lockrep(MI, O)) {",
          "14172: #ifndef CAPSTONE_DIET",
          "14178: #endif",
          "14179:   }",
          "",
          "[Removed Lines]",
          "14174:     if (opcode == X86_MOV32sm) {",
          "14175:       SStream_concat0(O, \"movw\\t\");",
          "14176:     } else",
          "14177:       SStream_concat0(O, AsmStrs+(Bits & 16383)-1);",
          "",
          "[Added Lines]",
          "14174:     switch(opcode) {",
          "14175:       default:",
          "14176:         SStream_concat0(O, AsmStrs+(Bits & 16383)-1);",
          "14177:         break;",
          "14178:       case X86_MOV32sm:",
          "14179:         SStream_concat0(O, \"movw\\t\");",
          "14180:         break;",
          "14181:       case X86_ROL32r1:",
          "14182:         SStream_concat0(O, \"rol\\t$1, \");",
          "14183:         break;",
          "14184:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0afaabd2d5e8ebb54751cae2a7f86cd32db10e0",
      "candidate_info": {
        "commit_hash": "e0afaabd2d5e8ebb54751cae2a7f86cd32db10e0",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e0afaabd2d5e8ebb54751cae2a7f86cd32db10e0",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "Update X86Mapping.c",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2752:  { X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },",
          "2753: };",
          "2757: static int regs_cmp(const void *a, const void *b)",
          "2758: {",
          "",
          "[Removed Lines]",
          "2755: struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "",
          "[Added Lines]",
          "2755: static struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2761:  return (l - r);",
          "2762: }",
          "",
          "[Removed Lines]",
          "2764: static bool intel_resgs_sorted = false;",
          "",
          "[Added Lines]",
          "2764: static bool intel_regs_sorted = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2771:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
          "2772:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
          "2775:   memcpy (insn_regs_intel_sorted, insn_regs_intel,",
          "2776:     sizeof(insn_regs_intel_sorted));",
          "2777:   qsort (insn_regs_intel_sorted,",
          "2778:     ARR_SIZE(insn_regs_intel_sorted),",
          "2779:     sizeof(struct insn_reg), regs_cmp);",
          "2781:  }",
          "2783:  while (first <= last) {",
          "",
          "[Removed Lines]",
          "2774:  if (!intel_resgs_sorted) {",
          "2780:   intel_resgs_sorted = true;",
          "",
          "[Added Lines]",
          "2774:  if (!intel_regs_sorted) {",
          "2780:   intel_regs_sorted = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fb2b5362043b12d9fe69da547c5f71d4d4a8bf2",
      "candidate_info": {
        "commit_hash": "1fb2b5362043b12d9fe69da547c5f71d4d4a8bf2",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/1fb2b5362043b12d9fe69da547c5f71d4d4a8bf2",
        "files": [
          "arch/Mips/MipsDisassembler.c",
          "arch/Mips/MipsModule.c",
          "bindings/java/capstone/Capstone.java",
          "bindings/ocaml/capstone.ml",
          "bindings/ocaml/ocaml.c",
          "bindings/python/capstone/__init__.py",
          "include/capstone/capstone.h",
          "tests/test_mips.c"
        ],
        "message": "Add CS_MODE_MIPS2 to opt-in for COP3 instructions (#939)\n\n* Add CS_MODE_MIPS2 to opt-in for COP3 instructions\n\n* Fix indentation\n\n* Get rid of `+`",
        "before_after_code_files": [
          "arch/Mips/MipsDisassembler.c||arch/Mips/MipsDisassembler.c",
          "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c",
          "bindings/javcapstone/Capstone.java||bindings/java/capstone/Capstone.java",
          "bindings/ocaml/capstone.ml||bindings/ocaml/capstone.ml",
          "bindings/ocaml/ocaml.c||bindings/ocaml/ocaml.c",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "include/capstone/capstone.h||include/capstone/capstone.h",
          "tests/test_mips.c||tests/test_mips.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/Mips/MipsDisassembler.c||arch/Mips/MipsDisassembler.c": [
          "File: arch/Mips/MipsDisassembler.c -> arch/Mips/MipsDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:  readInstruction32((unsigned char*)code, &Insn, isBigEndian, false);",
          "456:   Result = decodeInstruction(DecoderTableCOP3_32, instr, Insn, Address, MRI, mode);",
          "457:   if (Result != MCDisassembler_Fail) {",
          "",
          "[Removed Lines]",
          "454:  if (((mode & CS_MODE_MIPS32) == 0) && ((mode & CS_MODE_MIPS3) == 0)) {",
          "",
          "[Added Lines]",
          "454:  if ((mode & CS_MODE_MIPS2) && ((mode & CS_MODE_MIPS3) == 0)) {",
          "",
          "---------------"
        ],
        "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c": [
          "File: arch/Mips/MipsModule.c -> arch/Mips/MipsModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_32 | CS_MODE_64 |",
          "19:   return CS_ERR_MODE;",
          "21:  mri = cs_mem_malloc(sizeof(*mri));",
          "",
          "[Removed Lines]",
          "18:     CS_MODE_MICRO | CS_MODE_MIPS32R6 | CS_MODE_BIG_ENDIAN))",
          "",
          "[Added Lines]",
          "18:     CS_MODE_MICRO | CS_MODE_MIPS32R6 | CS_MODE_BIG_ENDIAN |",
          "19:     CS_MODE_MIPS2 | CS_MODE_MIPS3))",
          "",
          "---------------"
        ],
        "bindings/javcapstone/Capstone.java||bindings/java/capstone/Capstone.java": [
          "File: bindings/javcapstone/Capstone.java -> bindings/java/capstone/Capstone.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:   public static final int CS_MODE_MIPS2 = 1 << 7;  // Mips II ISA",
          "",
          "---------------"
        ],
        "bindings/ocaml/capstone.ml||bindings/ocaml/capstone.ml": [
          "File: bindings/ocaml/capstone.ml -> bindings/ocaml/capstone.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   | CS_MODE_MICRO  (* MicroMips mode (MIPS architecture) *)",
          "36:   | CS_MODE_MIPS3  (* Mips3 mode (MIPS architecture) *)",
          "37:   | CS_MODE_MIPS32R6 (* Mips32-R6 mode (MIPS architecture) *)",
          "38:   | CS_MODE_V9   (* SparcV9 mode (Sparc architecture) *)",
          "39:   | CS_MODE_BIG_ENDIAN (* big-endian mode *)",
          "40:   | CS_MODE_MIPS32  (* Mips32 mode (for Mips) *)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   | CS_MODE_MIPS2     (* Mips2 mode (MIPS architecture) *)",
          "",
          "---------------"
        ],
        "bindings/ocaml/ocaml.c||bindings/ocaml/ocaml.c": [
          "File: bindings/ocaml/ocaml.c -> bindings/ocaml/ocaml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:     mode |= CS_MODE_MIPS32R6;",
          "701:     break;",
          "702:    case 11:",
          "704:     break;",
          "705:    case 12:",
          "707:     break;",
          "708:    case 13:",
          "710:     break;",
          "711:    case 14:",
          "713:     break;",
          "714:    case 15:",
          "715:     mode |= CS_MODE_QPX;",
          "716:     break;",
          "717:    default:",
          "",
          "[Removed Lines]",
          "703:     mode |= CS_MODE_V9;",
          "706:     mode |= CS_MODE_BIG_ENDIAN;",
          "709:     mode |= CS_MODE_MIPS32;",
          "712:     mode |= CS_MODE_MIPS64;",
          "",
          "[Added Lines]",
          "703:     mode |= CS_MODE_MIPS2;",
          "706:     mode |= CS_MODE_V9;",
          "709:     mode |= CS_MODE_BIG_ENDIAN;",
          "712:     mode |= CS_MODE_MIPS32;",
          "715:     mode |= CS_MODE_MIPS64;",
          "716:     break;",
          "717:    case 16:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:     mode |= CS_MODE_MIPS32R6;",
          "832:     break;",
          "833:    case 11:",
          "835:     break;",
          "836:    case 12:",
          "838:     break;",
          "839:    case 13:",
          "841:     break;",
          "842:    case 14:",
          "844:     break;",
          "845:    case 15:",
          "846:     mode |= CS_MODE_QPX;",
          "847:     break;",
          "848:    default:",
          "",
          "[Removed Lines]",
          "834:     mode |= CS_MODE_V9;",
          "837:     mode |= CS_MODE_BIG_ENDIAN;",
          "840:     mode |= CS_MODE_MIPS32;",
          "843:     mode |= CS_MODE_MIPS64;",
          "",
          "[Added Lines]",
          "837:     mode |= CS_MODE_MIPS2;",
          "840:     mode |= CS_MODE_V9;",
          "843:     mode |= CS_MODE_BIG_ENDIAN;",
          "846:     mode |= CS_MODE_MIPS32;",
          "849:     mode |= CS_MODE_MIPS64;",
          "850:     break;",
          "851:    case 16:",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     'CS_MODE_MICRO',",
          "47:     'CS_MODE_MIPS3',",
          "48:     'CS_MODE_MIPS32R6',",
          "49:     'CS_MODE_V8',",
          "50:     'CS_MODE_V9',",
          "51:     'CS_MODE_QPX',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     'CS_MODE_MIPS2',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: CS_MODE_MICRO = (1 << 4)       # MicroMips mode (MIPS architecture)",
          "152: CS_MODE_MIPS3 = (1 << 5)       # Mips III ISA",
          "153: CS_MODE_MIPS32R6 = (1 << 6)    # Mips32r6 ISA",
          "154: CS_MODE_V9 = (1 << 4)          # Sparc V9 mode (for Sparc)",
          "155: CS_MODE_QPX = (1 << 4)         # Quad Processing eXtensions mode (PPC)",
          "156: CS_MODE_M68K_000 = (1 << 1)    # M68K 68000 mode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: CS_MODE_MIPS2 = (1 << 7)       # Mips II ISA",
          "",
          "---------------"
        ],
        "include/capstone/capstone.h||include/capstone/capstone.h": [
          "File: include/capstone/capstone.h -> include/capstone/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  CS_MODE_MICRO = 1 << 4, // MicroMips mode (MIPS)",
          "110:  CS_MODE_MIPS3 = 1 << 5, // Mips III ISA",
          "111:  CS_MODE_MIPS32R6 = 1 << 6, // Mips32r6 ISA",
          "112:  CS_MODE_V9 = 1 << 4, // SparcV9 mode (Sparc)",
          "113:  CS_MODE_QPX = 1 << 4, // Quad Processing eXtensions mode (PPC)",
          "114:  CS_MODE_M68K_000 = 1 << 1, // M68K 68000 mode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  CS_MODE_MIPS2 = 1 << 7, // Mips II ISA",
          "",
          "---------------"
        ],
        "tests/test_mips.c||tests/test_mips.c": [
          "File: tests/test_mips.c -> tests/test_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #define MIPS_CODE2 \"\\x56\\x34\\x21\\x34\\xc2\\x17\\x01\\x00\"",
          "83: #define MIPS_32R6M \"\\x00\\x07\\x00\\x07\\x00\\x11\\x93\\x7c\\x01\\x8c\\x8b\\x7c\\x00\\xc7\\x48\\xd0\"",
          "84: #define MIPS_32R6 \"\\xec\\x80\\x00\\x19\\x7c\\x43\\x22\\xa0\"",
          "86:  struct platform platforms[] = {",
          "87:   {",
          "88:    CS_ARCH_MIPS,",
          "90:    (unsigned char *)MIPS_CODE,",
          "91:    sizeof(MIPS_CODE) - 1,",
          "92:    \"MIPS-32 (Big-endian)\"",
          "93:   },",
          "94:   {",
          "95:    CS_ARCH_MIPS,",
          "97:    (unsigned char *)MIPS_CODE2,",
          "98:    sizeof(MIPS_CODE2) - 1,",
          "99:    \"MIPS-64-EL (Little-endian)\"",
          "100:   },",
          "101:   {",
          "102:    CS_ARCH_MIPS,",
          "104:    (unsigned char*)MIPS_32R6M,",
          "105:    sizeof(MIPS_32R6M) - 1,",
          "106:    \"MIPS-32R6 | Micro (Big-endian)\"",
          "107:   },",
          "108:   {",
          "109:    CS_ARCH_MIPS,",
          "111:    (unsigned char*)MIPS_32R6,",
          "112:    sizeof(MIPS_32R6) - 1,",
          "113:    \"MIPS-32R6 (Big-endian)\"",
          "114:   },",
          "115:  };",
          "117:  uint64_t address = 0x1000;",
          "",
          "[Removed Lines]",
          "89:    (cs_mode)(CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN),",
          "96:    (cs_mode)(CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN),",
          "103:    (cs_mode)(CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN),",
          "110:    (cs_mode)(CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN),",
          "",
          "[Added Lines]",
          "85: #define MIPS_64SD \"\\x70\\x00\\xb2\\xff\"",
          "90:    (cs_mode)(CS_MODE_MIPS32 | CS_MODE_BIG_ENDIAN),",
          "97:    (cs_mode)(CS_MODE_MIPS64 | CS_MODE_LITTLE_ENDIAN),",
          "104:    (cs_mode)(CS_MODE_MIPS32R6 | CS_MODE_MICRO | CS_MODE_BIG_ENDIAN),",
          "111:    (cs_mode)(CS_MODE_MIPS32R6 | CS_MODE_BIG_ENDIAN),",
          "116:   {",
          "117:    CS_ARCH_MIPS,",
          "118:    (cs_mode)(CS_MODE_MIPS64 | CS_MODE_MIPS2 | CS_MODE_LITTLE_ENDIAN),",
          "119:    (unsigned char *)MIPS_64SD,",
          "120:    sizeof(MIPS_64SD) - 1,",
          "121:    \"MIPS-64-EL + Mips II (Little-endian)\"",
          "122:   },",
          "123:   {",
          "124:    CS_ARCH_MIPS,",
          "125:    (cs_mode)(CS_MODE_MIPS64 | CS_MODE_LITTLE_ENDIAN),",
          "126:    (unsigned char *)MIPS_64SD,",
          "127:    sizeof(MIPS_64SD) - 1,",
          "128:    \"MIPS-64-EL (Little-endian)\"",
          "129:   },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fab6cf7c44834aa8d139091cab879908380abac",
      "candidate_info": {
        "commit_hash": "6fab6cf7c44834aa8d139091cab879908380abac",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6fab6cf7c44834aa8d139091cab879908380abac",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: convert space to tab",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static uint8_t char_to_hexnum(char c)",
          "23: {",
          "24:  if (c >= '0' && c <= '9') {",
          "26:  }",
          "28:  if (c >= 'a' && c <= 'f') {",
          "",
          "[Removed Lines]",
          "25:         return (uint8_t)(c - '0');",
          "",
          "[Added Lines]",
          "25:   return (uint8_t)(c - '0');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: static uint8_t *preprocess(char *code, size_t *size)",
          "39: {",
          "41:  uint8_t high, low;",
          "42:  uint8_t *result;",
          "",
          "[Removed Lines]",
          "40:     size_t i = 0, j = 0;",
          "",
          "[Added Lines]",
          "40:  size_t i = 0, j = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:  uint64_t address = 0;",
          "124:  cs_insn *insn;",
          "125:  cs_err err;",
          "130:  if (argc != 3 && argc != 4 && argc != 5) {",
          "131:   usage(argv[0]);",
          "132:   return -1;",
          "133:  }",
          "175:  if (!strcmp(mode, \"arm\")) {",
          "178:  }",
          "180:  if (!strcmp(mode, \"armb\")) {",
          "183:  }",
          "185:  if (!strcmp(mode, \"arml\")) {",
          "188:  }",
          "190:  if (!strcmp(mode, \"thumb\")) {",
          "193:  }",
          "195:  if (!strcmp(mode, \"thumbbe\")) {",
          "198:  }",
          "200:  if (!strcmp(mode, \"thumble\")) {",
          "203:  }",
          "205:  if (!strcmp(mode, \"arm64\")) {",
          "208:  }",
          "210:  if (!strcmp(mode, \"mips\")) {",
          "213:  }",
          "215:  if (!strcmp(mode, \"mipsbe\")) {",
          "218:  }",
          "220:  if (!strcmp(mode, \"mips64\")) {",
          "223:  }",
          "225:  if (!strcmp(mode, \"mips64be\")) {",
          "228:  }",
          "230:  if (!strcmp(mode, \"x16\")) {",
          "234:  }",
          "236:  if (!strcmp(mode, \"x32\")) {",
          "240:  }",
          "242:  if (!strcmp(mode, \"x64\")) {",
          "245:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "246:  }",
          "248:  if (!strcmp(mode, \"x16att\")) {",
          "254:   }",
          "255:  }",
          "257:  if (!strcmp(mode,\"x32att\")) {",
          "260:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "261:   if (!err) {",
          "262:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "126:     cs_mode md;",
          "127:     char *arch;",
          "128:     bool debug_flag = false;",
          "135:     if (!strcmp(argv[1], \"-d\")) {",
          "136:         if (argc == 3) {",
          "137:             usage(argv[0]);",
          "138:             return -1;",
          "139:         }",
          "140:         debug_flag = true;",
          "141:         mode = argv[2];",
          "142:         assembly = preprocess(argv[3], &size);",
          "143:         if (argc == 5) {",
          "144:             char *temp;",
          "145:             address = strtoull(argv[4], &temp, 16);",
          "146:             if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "147:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "148:                 return -2;",
          "149:             }",
          "150:         }",
          "151:     } else {",
          "152:         if (argc == 5) {",
          "153:             usage(argv[0]);",
          "154:             return -1;",
          "155:         }",
          "157:         mode = argv[1];",
          "158:         assembly = preprocess(argv[2], &size);",
          "159:         if (assembly == NULL) {",
          "160:             printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "161:             return -3;",
          "162:         }",
          "164:         if (argc == 4) {",
          "166:             char *temp;",
          "167:             address = strtoull(argv[3], &temp, 16);",
          "168:             if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "169:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "170:                 return -2;",
          "171:             }",
          "172:         }",
          "173:     }",
          "176:         arch = \"arm\";",
          "177:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "181:         arch = \"arm\";",
          "182:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "186:         arch = \"arm\";",
          "187:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "191:         arch = \"arm\";",
          "192:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:         arch = \"arm\";",
          "197:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "201:         arch = \"arm\";",
          "202:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "206:         arch = \"arm64\";",
          "207:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "211:         arch = \"mips\";",
          "212:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:         arch = \"mips\";",
          "217:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "221:         arch = \"mips\";",
          "222:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "226:         arch = \"mips\";",
          "227:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:         md = CS_MODE_16;",
          "232:         arch = \"x86\";",
          "233:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "237:         md = CS_MODE_32;",
          "238:         arch = \"x86\";",
          "239:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "243:         md = CS_MODE_64;",
          "244:         arch = \"x86\";",
          "249:         md = CS_MODE_16;",
          "250:         arch = \"x86\";",
          "251:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:         if (!err) {",
          "253:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "258:         md = CS_MODE_32;",
          "259:         arch = \"x86\";",
          "",
          "[Added Lines]",
          "126:  cs_mode md;",
          "127:  char *arch;",
          "128:  bool debug_flag = false;",
          "135:  if (!strcmp(argv[1], \"-d\")) {",
          "136:    if (argc == 3) {",
          "137:     usage(argv[0]);",
          "138:     return -1;",
          "139:  }",
          "140:   debug_flag = true;",
          "141:   mode = argv[2];",
          "142:   assembly = preprocess(argv[3], &size);",
          "143:   if (argc == 5) {",
          "144:    char *temp;",
          "145:    address = strtoull(argv[4], &temp, 16);",
          "146:    if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "147:     printf(\"ERROR: invalid address argument, quit!\\n\");",
          "148:     return -2;",
          "149:    }",
          "150:   }",
          "151:  } else {",
          "152:   if (argc == 5) {",
          "153:    usage(argv[0]);",
          "154:    return -1;",
          "155:   }",
          "157:   mode = argv[1];",
          "158:   assembly = preprocess(argv[2], &size);",
          "159:   if (assembly == NULL) {",
          "160:    printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "161:    return -3;",
          "162:   }",
          "164:   if (argc == 4) {",
          "166:    char *temp;",
          "167:    address = strtoull(argv[3], &temp, 16);",
          "168:    if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "169:     printf(\"ERROR: invalid address argument, quit!\\n\");",
          "170:     return -2;",
          "171:    }",
          "172:   }",
          "173:  }",
          "176:   arch = \"arm\";",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "181:   arch = \"arm\";",
          "182:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "186:   arch = \"arm\";",
          "187:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "191:   arch = \"arm\";",
          "192:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:   arch = \"arm\";",
          "197:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "201:   arch = \"arm\";",
          "202:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "206:   arch = \"arm64\";",
          "207:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "211:   arch = \"mips\";",
          "212:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:   arch = \"mips\";",
          "217:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "221:   arch = \"mips\";",
          "222:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "226:   arch = \"mips\";",
          "227:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:   md = CS_MODE_16;",
          "232:   arch = \"x86\";",
          "233:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "237:   md = CS_MODE_32;",
          "238:   arch = \"x86\";",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "243:   md = CS_MODE_64;",
          "244:   arch = \"x86\";",
          "249:   md = CS_MODE_16;",
          "250:   arch = \"x86\";",
          "251:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:   if (!err) {",
          "253:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "258:   md = CS_MODE_32;",
          "259:   arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:  }",
          "266:  if (!strcmp(mode,\"x64att\")) {",
          "269:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "270:   if (!err) {",
          "271:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "267:         md = CS_MODE_64;",
          "268:         arch = \"x86\";",
          "",
          "[Added Lines]",
          "267:   md = CS_MODE_64;",
          "268:   arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:  }",
          "275:  if (!strcmp(mode,\"ppc64\")) {",
          "277:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "278:  }",
          "280:  if (!strcmp(mode,\"ppc64be\")) {",
          "283:  }",
          "285:  if (!strcmp(mode,\"sparc\")) {",
          "287:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "288:  }",
          "290:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "292:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "293:  }",
          "295:  if (!strcmp(mode,\"xcore\")) {",
          "297:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "298:  }",
          "",
          "[Removed Lines]",
          "276:         arch = \"ppc\";",
          "281:         arch = \"ppc\";",
          "282:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "286:         arch = \"sparc\";",
          "291:         arch = \"sysz\";",
          "296:         arch = \"xcore\";",
          "",
          "[Added Lines]",
          "276:   arch = \"ppc\";",
          "281:   arch = \"ppc\";",
          "282:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "286:   arch = \"sparc\";",
          "291:   arch = \"sysz\";",
          "296:   arch = \"xcore\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "303:   return -1;",
          "304:  }",
          "311:  if (count > 0) {",
          "312:   size_t i;",
          "",
          "[Removed Lines]",
          "306:     if (debug_flag) {",
          "307:         cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:     }",
          "310:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "[Added Lines]",
          "306:  if (debug_flag) {",
          "307:   cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:  }",
          "310:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325:     }",
          "326:    }",
          "327:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "361:   }",
          "362:   cs_free(insn, count);",
          "363:  } else {",
          "",
          "[Removed Lines]",
          "328:             if (debug_flag) {",
          "329:                 if (!strcmp(arch, \"x86\")) {",
          "330:                     print_insn_detail_x86(handle, md, &insn[i]);",
          "331:                 }",
          "333:                 if (!strcmp(arch, \"arm\")) {",
          "334:                     print_insn_detail_arm(handle, &insn[i]);",
          "335:                 }",
          "337:                 if (!strcmp(arch,\"arm64\")) {",
          "338:                     print_insn_detail_arm64(handle,&insn[i]);",
          "339:                 }",
          "341:                 if (!strcmp(arch, \"mips\")) {",
          "342:                     print_insn_detail_mips(handle, &insn[i]);",
          "343:                 }",
          "345:                 if (!strcmp(arch, \"ppc\")) {",
          "346:                     print_insn_detail_ppc(handle, &insn[i]);",
          "347:                 }",
          "349:                 if (!strcmp(arch, \"sparc\")) {",
          "350:                     print_insn_detail_sparc(handle, &insn[i]);",
          "351:                 }",
          "353:                 if (!strcmp(arch, \"sysz\")) {",
          "354:                     print_insn_detail_sysz(handle, &insn[i]);",
          "355:                 }",
          "357:                 if (!strcmp(arch, \"xcore\")) {",
          "358:                     print_insn_detail_xcore(handle, &insn[i]);",
          "359:                 }",
          "360:             }",
          "",
          "[Added Lines]",
          "328:    if (debug_flag) {",
          "329:     if (!strcmp(arch, \"x86\")) {",
          "330:      print_insn_detail_x86(handle, md, &insn[i]);",
          "331:     }",
          "333:     if (!strcmp(arch, \"arm\")) {",
          "334:      print_insn_detail_arm(handle, &insn[i]);",
          "335:     }",
          "337:     if (!strcmp(arch,\"arm64\")) {",
          "338:      print_insn_detail_arm64(handle,&insn[i]);",
          "339:     }",
          "341:     if (!strcmp(arch, \"mips\")) {",
          "342:      print_insn_detail_mips(handle, &insn[i]);",
          "343:     }",
          "345:     if (!strcmp(arch, \"ppc\")) {",
          "346:      print_insn_detail_ppc(handle, &insn[i]);",
          "347:     }",
          "349:     if (!strcmp(arch, \"sparc\")) {",
          "350:      print_insn_detail_sparc(handle, &insn[i]);",
          "351:     }",
          "353:     if (!strcmp(arch, \"sysz\")) {",
          "354:      print_insn_detail_sysz(handle, &insn[i]);",
          "355:     }",
          "357:     if (!strcmp(arch, \"xcore\")) {",
          "358:      print_insn_detail_xcore(handle, &insn[i]);",
          "359:     }",
          "360:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}