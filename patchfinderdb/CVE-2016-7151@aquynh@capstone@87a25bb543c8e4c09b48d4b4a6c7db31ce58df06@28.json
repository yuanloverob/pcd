{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6111dfd953f5c40f68add007ee2c6a3f852c022",
      "candidate_info": {
        "commit_hash": "a6111dfd953f5c40f68add007ee2c6a3f852c022",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a6111dfd953f5c40f68add007ee2c6a3f852c022",
        "files": [
          "arch/TMS320C64x/TMS320C64xMapping.c"
        ],
        "message": "Fixed group name getting function",
        "before_after_code_files": [
          "arch/TMS320C64x/TMS320C64xMapping.c||arch/TMS320C64x/TMS320C64xMapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/TMS320C64x/TMS320C64xMapping.c||arch/TMS320C64x/TMS320C64xMapping.c": [
          "File: arch/TMS320C64x/TMS320C64xMapping.c -> arch/TMS320C64x/TMS320C64xMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1766: const char *TMS320C64x_group_name(csh handle, unsigned int id)",
          "1767: {",
          "1768: #ifndef CAPSTONE_DIET",
          "1769:  if (id >= TMS320C64X_GRP_ENDING)",
          "1770:   return NULL;",
          "1772:  return group_name_maps[id].name;",
          "1773: #else",
          "1774:  return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1769:  unsigned int i;",
          "1774:  for (i = 0; i < ARR_SIZE(group_name_maps); i++) {",
          "1775:   if (group_name_maps[i].id == id)",
          "1776:    return group_name_maps[i].name;",
          "1777:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f49df92f144913767e9f538691055e4432d68e6b",
      "candidate_info": {
        "commit_hash": "f49df92f144913767e9f538691055e4432d68e6b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f49df92f144913767e9f538691055e4432d68e6b",
        "files": [
          "suite/disasm_mc.py",
          "suite/disasm_mc.sh"
        ],
        "message": "suite: add disasm_mc.{py,sh}",
        "before_after_code_files": [
          "suite/disasm_mc.py||suite/disasm_mc.py",
          "suite/disasm_mc.sh||suite/disasm_mc.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "suite/disasm_mc.py||suite/disasm_mc.py": [
          "File: suite/disasm_mc.py -> suite/disasm_mc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # Test tool to disassemble MC files. By Nguyen Anh Quynh, 2017",
          "3: import array, os.path, sys",
          "4: from capstone import *",
          "7: # convert all hex numbers to decimal numbers in a text",
          "8: def normalize_hex(a):",
          "9:     while(True):",
          "10:         i = a.find('0x')",
          "11:         if i == -1: # no more hex number",
          "12:             break",
          "13:         hexnum = '0x'",
          "14:         for c in a[i + 2:]:",
          "15:             if c in '0123456789abcdefABCDEF':",
          "16:                 hexnum += c",
          "17:             else:",
          "18:                 break",
          "19:         num = int(hexnum, 16)",
          "20:         a = a.replace(hexnum, str(num))",
          "21:     return a",
          "24: def test_file(fname):",
          "25:     print(\"Test %s\" %fname);",
          "26:     f = open(fname)",
          "27:     lines = f.readlines()",
          "28:     f.close()",
          "30:     if not lines[0].startswith('# '):",
          "31:         print(\"ERROR: decoding information is missing\")",
          "32:         return",
          "34:     # skip '# ' at the front, then split line to get out hexcode",
          "35:     # Note: option can be '', or 'None'",
          "36:     #print lines[0]",
          "37:     #print lines[0][2:].split(', ')",
          "38:     (arch, mode, option) = lines[0][2:].split(', ')",
          "39:     mode = mode.replace(' ', '')",
          "40:     option = option.strip()",
          "42:     archs = {",
          "43:         \"CS_ARCH_ARM\": CS_ARCH_ARM,",
          "44:         \"CS_ARCH_ARM64\": CS_ARCH_ARM64,",
          "45:         \"CS_ARCH_MIPS\": CS_ARCH_MIPS,",
          "46:         \"CS_ARCH_PPC\": CS_ARCH_PPC,",
          "47:         \"CS_ARCH_SPARC\": CS_ARCH_SPARC,",
          "48:         \"CS_ARCH_SYSZ\": CS_ARCH_SYSZ,",
          "49:         \"CS_ARCH_X86\": CS_ARCH_X86,",
          "50:         \"CS_ARCH_XCORE\": CS_ARCH_XCORE,",
          "51:         \"CS_ARCH_M68K\": CS_ARCH_M68K,",
          "52:     }",
          "54:     modes = {",
          "55:         \"CS_MODE_16\": CS_MODE_16,",
          "56:         \"CS_MODE_32\": CS_MODE_32,",
          "57:         \"CS_MODE_64\": CS_MODE_64,",
          "58:         \"CS_MODE_MIPS32\": CS_MODE_MIPS32,",
          "59:         \"CS_MODE_MIPS64\": CS_MODE_MIPS64,",
          "60:         \"0\": CS_MODE_ARM,",
          "61:         \"CS_MODE_ARM\": CS_MODE_ARM,",
          "62:         \"CS_MODE_THUMB\": CS_MODE_THUMB,",
          "63:         \"CS_MODE_ARM+CS_MODE_V8\": CS_MODE_ARM+CS_MODE_V8,",
          "64:         \"CS_MODE_THUMB+CS_MODE_V8\": CS_MODE_THUMB+CS_MODE_V8,",
          "65:         \"CS_MODE_THUMB+CS_MODE_MCLASS\": CS_MODE_THUMB+CS_MODE_MCLASS,",
          "66:         \"CS_MODE_LITTLE_ENDIAN\": CS_MODE_LITTLE_ENDIAN,",
          "67:         \"CS_MODE_BIG_ENDIAN\": CS_MODE_BIG_ENDIAN,",
          "68:         \"CS_MODE_64+CS_MODE_LITTLE_ENDIAN\": CS_MODE_64+CS_MODE_LITTLE_ENDIAN,",
          "69:         \"CS_MODE_64+CS_MODE_BIG_ENDIAN\": CS_MODE_64+CS_MODE_BIG_ENDIAN,",
          "70:         \"CS_MODE_MIPS32+CS_MODE_MICRO\": CS_MODE_MIPS32+CS_MODE_MICRO,",
          "71:         \"CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN\": CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN,",
          "72:         \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN+CS_MODE_MICRO\": CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN,",
          "73:         \"CS_MODE_BIG_ENDIAN+CS_MODE_V9\": CS_MODE_BIG_ENDIAN + CS_MODE_V9,",
          "74:         \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN\": CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN,",
          "75:         \"CS_MODE_MIPS32+CS_MODE_LITTLE_ENDIAN\": CS_MODE_MIPS32+CS_MODE_LITTLE_ENDIAN,",
          "76:         \"CS_MODE_MIPS64+CS_MODE_LITTLE_ENDIAN\": CS_MODE_MIPS64+CS_MODE_LITTLE_ENDIAN,",
          "77:         \"CS_MODE_MIPS64+CS_MODE_BIG_ENDIAN\": CS_MODE_MIPS64+CS_MODE_BIG_ENDIAN,",
          "78:     }",
          "80:     options = {",
          "81:         \"CS_OPT_SYNTAX_ATT\": CS_OPT_SYNTAX_ATT,",
          "82:         \"CS_OPT_SYNTAX_NOREGNAME\": CS_OPT_SYNTAX_NOREGNAME,",
          "83:     }",
          "85:     mc_modes = {",
          "86:         (\"CS_ARCH_X86\", \"CS_MODE_32\"): ['-triple=i386'],",
          "87:         (\"CS_ARCH_X86\", \"CS_MODE_64\"): ['-triple=x86_64'],",
          "88:         (\"CS_ARCH_ARM\", \"CS_MODE_ARM\"): ['-triple=armv7'],",
          "89:         (\"CS_ARCH_ARM\", \"CS_MODE_THUMB\"): ['-triple=thumbv7'],",
          "90:         (\"CS_ARCH_ARM\", \"CS_MODE_ARM+CS_MODE_V8\"): ['-triple=armv8'],",
          "91:         (\"CS_ARCH_ARM\", \"CS_MODE_THUMB+CS_MODE_V8\"): ['-triple=thumbv8'],",
          "92:         (\"CS_ARCH_ARM\", \"CS_MODE_THUMB+CS_MODE_MCLASS\"): ['-triple=thumbv7m'],",
          "93:         (\"CS_ARCH_ARM64\", \"0\"): ['-triple=aarch64'],",
          "94:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN\"): ['-triple=mips'],",
          "95:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_MICRO\"): ['-triple=mipsel', '-mattr=+micromips'],",
          "96:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS64\"): ['-triple=mips64el'],",
          "97:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32\"): ['-triple=mipsel'],",
          "98:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS64+CS_MODE_BIG_ENDIAN\"): ['-triple=mips64'],",
          "99:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN\"): ['-triple=mips', '-mattr=+micromips'],",
          "100:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN+CS_MODE_MICRO\"): ['-triple=mips', '-mattr=+micromips'],",
          "101:         (\"CS_ARCH_PPC\", \"CS_MODE_BIG_ENDIAN\"): ['-triple=powerpc64'],",
          "102:         ('CS_ARCH_SPARC', 'CS_MODE_BIG_ENDIAN'): ['-triple=sparc'],",
          "103:         ('CS_ARCH_SPARC', 'CS_MODE_BIG_ENDIAN+CS_MODE_V9'): ['-triple=sparcv9'],",
          "104:         ('CS_ARCH_SYSZ', '0'): ['-triple=s390x', '-mcpu=z196'],",
          "105:     }",
          "107:     #if not option in ('', 'None'):",
          "108:     #    print archs[arch], modes[mode], options[option]",
          "110:     #print(arch, mode, option)",
          "111:     md = Cs(archs[arch], modes[mode])",
          "113:     if arch == 'CS_ARCH_ARM' or arch == 'CS_ARCH_PPC' :",
          "114:         md.syntax = CS_OPT_SYNTAX_NOREGNAME",
          "116:     if fname.endswith('3DNow.s.cs'):",
          "117:         md.syntax = CS_OPT_SYNTAX_ATT",
          "119:     for line in lines[1:]:",
          "120:         # ignore all the input lines having # in front.",
          "121:         if line.startswith('#'):",
          "122:             continue",
          "123:         #print(\"Check %s\" %line)",
          "124:         code = line.split(' = ')[0]",
          "125:         asm  = ''.join(line.split(' = ')[1:])",
          "126:         hex_code = code.replace('0x', '')",
          "127:         hex_code = hex_code.replace(',', '')",
          "128:         hex_data = hex_code.decode('hex')",
          "129:         #hex_bytes = array.array('B', hex_data)",
          "131:         x = list(md.disasm(hex_data, 0))",
          "132:         if len(x) > 0:",
          "133:             if x[0].op_str != '':",
          "134:                 cs_output = \"%s %s\" %(x[0].mnemonic, x[0].op_str)",
          "135:             else:",
          "136:                 cs_output = x[0].mnemonic",
          "137:         else:",
          "138:             cs_output = 'FAILED to disassemble'",
          "140:         cs_output2 = normalize_hex(cs_output)",
          "141:         cs_output2 = cs_output2.replace(' ', '')",
          "143:         if arch == 'CS_ARCH_MIPS':",
          "144:             # normalize register alias names",
          "145:             cs_output2 = cs_output2.replace('$at', '$1')",
          "146:             cs_output2 = cs_output2.replace('$v0', '$2')",
          "147:             cs_output2 = cs_output2.replace('$v1', '$3')",
          "149:             cs_output2 = cs_output2.replace('$a0', '$4')",
          "150:             cs_output2 = cs_output2.replace('$a1', '$5')",
          "151:             cs_output2 = cs_output2.replace('$a2', '$6')",
          "152:             cs_output2 = cs_output2.replace('$a3', '$7')",
          "154:             cs_output2 = cs_output2.replace('$t0', '$8')",
          "155:             cs_output2 = cs_output2.replace('$t1', '$9')",
          "156:             cs_output2 = cs_output2.replace('$t2', '$10')",
          "157:             cs_output2 = cs_output2.replace('$t3', '$11')",
          "158:             cs_output2 = cs_output2.replace('$t4', '$12')",
          "159:             cs_output2 = cs_output2.replace('$t5', '$13')",
          "160:             cs_output2 = cs_output2.replace('$t6', '$14')",
          "161:             cs_output2 = cs_output2.replace('$t7', '$15')",
          "162:             cs_output2 = cs_output2.replace('$t8', '$24')",
          "163:             cs_output2 = cs_output2.replace('$t9', '$25')",
          "165:             cs_output2 = cs_output2.replace('$s0', '$16')",
          "166:             cs_output2 = cs_output2.replace('$s1', '$17')",
          "167:             cs_output2 = cs_output2.replace('$s2', '$18')",
          "168:             cs_output2 = cs_output2.replace('$s3', '$19')",
          "169:             cs_output2 = cs_output2.replace('$s4', '$20')",
          "170:             cs_output2 = cs_output2.replace('$s5', '$21')",
          "171:             cs_output2 = cs_output2.replace('$s6', '$22')",
          "172:             cs_output2 = cs_output2.replace('$s7', '$23')",
          "174:             cs_output2 = cs_output2.replace('$k0', '$26')",
          "175:             cs_output2 = cs_output2.replace('$k1', '$27')",
          "177:         print(\"\\t%s = %s\" %(hex_code, cs_output))",
          "180: if __name__ == '__main__':",
          "181:     if len(sys.argv) == 1:",
          "182:         fnames = sys.stdin.readlines()",
          "183:         for fname in fnames:",
          "184:             test_file(fname.strip())",
          "185:     else:",
          "186:         #print(\"Usage: ./test_mc.py <input-file.s.cs>\")",
          "187:         test_file(sys.argv[1])",
          "",
          "---------------"
        ],
        "suite/disasm_mc.sh||suite/disasm_mc.sh": [
          "File: suite/disasm_mc.sh -> suite/disasm_mc.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "3: # This script test all architectures by default.",
          "5: find MC/ -name *.cs | ./disasm_mc.py",
          "7: # To test just one architecture, specify the corresponsing dir:",
          "8: # $ find MC/X86 -name *.cs | ./disasm_mc.py",
          "10: # To test just one input file, run disasm_mc.py with that file:",
          "11: # $ ./disasm_mc.py MC/X86/x86-32-fma3.s.cs",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0c5436558dc6c82fe1de1c0018513201f591150",
      "candidate_info": {
        "commit_hash": "b0c5436558dc6c82fe1de1c0018513201f591150",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/b0c5436558dc6c82fe1de1c0018513201f591150",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "Python 3: CsError.__str__\n\nChoose `CsError.__str__` implementation based on Python version.",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:     def __init__(self, errno):",
          "320:         self.errno = errno",
          "326: # return the core's version",
          "",
          "[Removed Lines]",
          "322:     def __str__(self):",
          "323:         return _cs.cs_strerror(self.errno)",
          "",
          "[Added Lines]",
          "322:     if _python2:",
          "323:         def __str__(self):",
          "324:             return _cs.cs_strerror(self.errno)",
          "326:     else:",
          "327:         def __str__(self):",
          "328:             return _cs.cs_strerror(self.errno).decode()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52fa6009e4b6c220be5a1e4df26ddae87c4ec064",
      "candidate_info": {
        "commit_hash": "52fa6009e4b6c220be5a1e4df26ddae87c4ec064",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/52fa6009e4b6c220be5a1e4df26ddae87c4ec064",
        "files": [
          "include/capstone/platform.h"
        ],
        "message": "fix some warnings on VS2010 on redefining INTxx_MIN, INTxx_MAX",
        "before_after_code_files": [
          "include/capstone/platform.h||include/capstone/platform.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/platform.h||include/capstone/platform.h": [
          "File: include/capstone/platform.h -> include/capstone/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #if defined(CAPSTONE_HAS_OSXKERNEL) || (defined(_MSC_VER) && (_MSC_VER <= 1700 || defined(_KERNEL_MODE)))",
          "42: typedef signed char  int8_t;",
          "43: typedef signed short int16_t;",
          "",
          "[Removed Lines]",
          "40: #if defined(_MSC_VER) && (_MSC_VER <= 1700 || defined(_KERNEL_MODE))",
          "",
          "[Added Lines]",
          "40: #if defined(_MSC_VER) && (_MSC_VER < 1600 || defined(_KERNEL_MODE))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83af3b9ec0315c5d93653081c05a8dd93e4ccc82",
      "candidate_info": {
        "commit_hash": "83af3b9ec0315c5d93653081c05a8dd93e4ccc82",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/83af3b9ec0315c5d93653081c05a8dd93e4ccc82",
        "files": [
          "bindings/python/capstone/__init__.py",
          "bindings/python/capstone/arm.py",
          "bindings/python/capstone/arm64.py",
          "bindings/python/capstone/m68k.py",
          "bindings/python/capstone/mips.py",
          "bindings/python/capstone/ppc.py",
          "bindings/python/capstone/sparc.py",
          "bindings/python/capstone/systemz.py",
          "bindings/python/capstone/x86.py",
          "bindings/python/capstone/xcore.py"
        ],
        "message": "Re-apply changes from 16477206564745782854e0ec5c68defa02429dd8 on next branch, that's the commit that lets the python bindings run in pypy",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/capstone/arm.py||bindings/python/capstone/arm.py",
          "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py",
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py",
          "bindings/python/capstone/mips.py||bindings/python/capstone/mips.py",
          "bindings/python/capstone/ppc.py||bindings/python/capstone/ppc.py",
          "bindings/python/capstone/sparc.py||bindings/python/capstone/sparc.py",
          "bindings/python/capstone/systemz.py||bindings/python/capstone/systemz.py",
          "bindings/python/capstone/x86.py||bindings/python/capstone/x86.py",
          "bindings/python/capstone/xcore.py||bindings/python/capstone/xcore.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: _python2 = sys.version_info[0] < 3",
          "5: if _python2:",
          "6:     range = xrange",
          "9: __all__ = [",
          "10:     'Cs',",
          "",
          "[Removed Lines]",
          "7: from . import arm, arm64, m68k, mips, ppc, sparc, systemz, x86, xcore",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291: # low-level structure for C code",
          "292: class _cs_arch(ctypes.Union):",
          "293:     _fields_ = (",
          "294:         ('arm64', arm64.CsArm64),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: def copy_ctypes(src):",
          "293:     \"\"\"Returns a new ctypes object which is a bitwise copy of an existing one\"\"\"",
          "294:     dst = type(src)()",
          "295:     ctypes.memmove(ctypes.byref(dst), ctypes.byref(src), ctypes.sizeof(type(src)))",
          "296:     return dst",
          "298: def copy_ctypes_list(src):",
          "299:     return [copy_ctypes(n) for n in src]",
          "301: # Weird import placement because these modules are needed by the below code but need the above functions",
          "302: from . import arm, arm64, m68k, mips, ppc, sparc, systemz, x86, xcore",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     if status != CS_ERR_OK:",
          "480:         raise CsError(status)",
          "490: def _ascii_name_or_default(name, default):",
          "491:     return default if name is None else name.decode('ascii')",
          "493: # Python-style class to disasm code",
          "494: class CsInsn(object):",
          "495:     def __init__(self, cs, all_info):",
          "",
          "[Removed Lines]",
          "483: # alternately",
          "484: def copy_ctypes(src):",
          "485:     \"\"\"Returns a new ctypes object which is a bitwise copy of an existing one\"\"\"",
          "486:     dst = type(src)()",
          "487:     ctypes.pointer(dst)[0] = src",
          "488:     return dst",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm.py||bindings/python/capstone/arm.py": [
          "File: bindings/python/capstone/arm.py -> bindings/python/capstone/arm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .arm_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: def get_arch_info(a):",
          "79:     return (a.usermode, a.vector_size, a.vector_data, a.cps_mode, a.cps_flag, a.cc, a.update_flags, \\",
          "",
          "[Removed Lines]",
          "80:         a.writeback, a.mem_barrier, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "81:         a.writeback, a.mem_barrier, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py": [
          "File: bindings/python/capstone/arm64.py -> bindings/python/capstone/arm64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .arm64_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     )",
          "87: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "88:     return (a.cc, a.update_flags, a.writeback, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "89:     return (a.cc, a.update_flags, a.writeback, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nicolas PLANEL <nplanel@gmail.com>",
          "4: from .m68k_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     )",
          "76:     def get(a):",
          "79: class CsM68K(ctypes.Structure):",
          "80:     M68K_OPERAND_COUNT = 4",
          "",
          "[Removed Lines]",
          "77:         return copy.deepcopy(type, size)",
          "",
          "[Added Lines]",
          "78:         return copy_ctypes_list(type, size)",
          "",
          "---------------"
        ],
        "bindings/python/capstone/mips.py||bindings/python/capstone/mips.py": [
          "File: bindings/python/capstone/mips.py -> bindings/python/capstone/mips.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .mips_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     )",
          "45: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "46:     return copy.deepcopy(a.operands[:a.op_count])",
          "",
          "[Added Lines]",
          "47:     return copy_ctypes_list(a.operands[:a.op_count])",
          "",
          "---------------"
        ],
        "bindings/python/capstone/ppc.py||bindings/python/capstone/ppc.py": [
          "File: bindings/python/capstone/ppc.py -> bindings/python/capstone/ppc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .ppc_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     )",
          "60: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "61:     return (a.bc, a.bh, a.update_cr0, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "62:     return (a.bc, a.bh, a.update_cr0, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/sparc.py||bindings/python/capstone/sparc.py": [
          "File: bindings/python/capstone/sparc.py -> bindings/python/capstone/sparc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .sparc_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     )",
          "48: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "49:     return (a.cc, a.hint, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "50:     return (a.cc, a.hint, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/systemz.py||bindings/python/capstone/systemz.py": [
          "File: bindings/python/capstone/systemz.py -> bindings/python/capstone/systemz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .sysz_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     )",
          "48: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "49:     return (a.cc, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "50:     return (a.cc, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/x86.py||bindings/python/capstone/x86.py": [
          "File: bindings/python/capstone/x86.py -> bindings/python/capstone/x86.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .x86_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     return (a.prefix[:], a.opcode[:], a.rex, a.addr_size, \\",
          "70:             a.modrm, a.sib, a.disp, a.sib_index, a.sib_scale, \\",
          "71:             a.sib_base, a.xop_cc, a.sse_cc, a.avx_cc, a.avx_sae, a.avx_rm, a.eflags, \\",
          "",
          "[Removed Lines]",
          "72:             copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "73:             copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/xcore.py||bindings/python/capstone/xcore.py": [
          "File: bindings/python/capstone/xcore.py -> bindings/python/capstone/xcore.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .xcore_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     )",
          "47: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "48:     return (copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "49:     return (copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ]
      }
    }
  ]
}