{
  "cve_id": "CVE-2013-0869",
  "cve_desc": "The field_end function in libavcodec/h264.c in FFmpeg before 1.1.2 allows remote attackers to have an unspecified impact via crafted H.264 data, related to an SPS and slice mismatch and an out-of-bounds array access.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "695af8eed642ff0104834495652d1ee784a4c14d",
  "patch_info": {
    "commit_hash": "695af8eed642ff0104834495652d1ee784a4c14d",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/695af8eed642ff0104834495652d1ee784a4c14d",
    "files": [
      "libavcodec/h264.c"
    ],
    "message": "h264: skip error concealment when SPS and slices are mismatching\n\nFixes out of array accesses\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/h264.c||libavcodec/h264.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264.c||libavcodec/h264.c": [
      "File: libavcodec/h264.c -> libavcodec/h264.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2371:         ff_er_frame_end(s);",
      "2373:     ff_MPV_frame_end(s);",
      "",
      "[Removed Lines]",
      "2370:     if (!FIELD_PICTURE && h->current_slice)",
      "",
      "[Added Lines]",
      "2370:     if (!FIELD_PICTURE && h->current_slice && !h->sps.new)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf4d0f8328c8f64611ca44a6ffdc30ca4f028249",
      "candidate_info": {
        "commit_hash": "bf4d0f8328c8f64611ca44a6ffdc30ca4f028249",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/bf4d0f8328c8f64611ca44a6ffdc30ca4f028249",
        "files": [
          "libavcodec/h264.c",
          "libavcodec/h264.h",
          "libavcodec/h264_cabac.c",
          "libavcodec/h264_cavlc.c",
          "libavcodec/h264_direct.c",
          "libavcodec/h264_loopfilter.c",
          "libavcodec/h264_mb_template.c",
          "libavcodec/h264_mvpred.h",
          "libavcodec/h264_refs.c"
        ],
        "message": "Merge commit '7fa00653a550c0d24b3951c0f9fed6350ecf5ce4'\n\n* commit '7fa00653a550c0d24b3951c0f9fed6350ecf5ce4':\n  h264: add a parameter to the FIELD_PICTURE macro.\n  h264: add a parameter to the FRAME_MBAFF macro.\n\nConflicts:\n\tlibavcodec/h264.c\n\tlibavcodec/h264_loopfilter.c\n\tlibavcodec/h264_refs.c\n\nMerged-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/h264.h||libavcodec/h264.h",
          "libavcodec/h264_cabac.c||libavcodec/h264_cabac.c",
          "libavcodec/h264_cavlc.c||libavcodec/h264_cavlc.c",
          "libavcodec/h264_direct.c||libavcodec/h264_direct.c",
          "libavcodec/h264_loopfilter.c||libavcodec/h264_loopfilter.c",
          "libavcodec/h264_mb_template.c||libavcodec/h264_mb_template.c",
          "libavcodec/h264_mvpred.h||libavcodec/h264_mvpred.h",
          "libavcodec/h264_refs.c||libavcodec/h264_refs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "786:                 row <<= MB_MBAFF(h);",
          "787:                 nrefs[list]--;",
          "790:                     ff_thread_await_progress(&ref_pic->tf,",
          "791:                                              FFMIN((row >> 1) - !(row & 1),",
          "792:                                                    pic_height - 1),",
          "",
          "[Removed Lines]",
          "789:                 if (!FIELD_PICTURE && ref_field_picture) { // frame referencing two fields",
          "",
          "[Added Lines]",
          "789:                 if (!FIELD_PICTURE(h) && ref_field_picture) { // frame referencing two fields",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "794:                     ff_thread_await_progress(&ref_pic->tf,",
          "795:                                              FFMIN((row >> 1), pic_height - 1),",
          "796:                                              0);",
          "798:                     ff_thread_await_progress(&ref_pic->tf,",
          "799:                                              FFMIN(row * 2 + ref_field,",
          "800:                                                    pic_height - 1),",
          "801:                                              0);",
          "803:                     ff_thread_await_progress(&ref_pic->tf,",
          "804:                                              FFMIN(row, pic_height - 1),",
          "805:                                              ref_field);",
          "",
          "[Removed Lines]",
          "797:                 } else if (FIELD_PICTURE && !ref_field_picture) { // field referencing one field of a frame",
          "802:                 } else if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "797:                 } else if (FIELD_PICTURE(h) && !ref_field_picture) { // field referencing one field of a frame",
          "802:                 } else if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2096:     src_cb -= uvlinesize;",
          "2097:     src_cr -= uvlinesize;",
          "2100:         if (h->mb_y & 1) {",
          "2101:             if (!MB_MBAFF(h)) {",
          "2102:                 top_border = h->top_borders[0][h->mb_x];",
          "",
          "[Removed Lines]",
          "2099:     if (!simple && FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "2099:     if (!simple && FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2189:     uint8_t *top_border_m1;",
          "2190:     uint8_t *top_border;",
          "2193:         if (h->mb_y & 1) {",
          "2194:             if (!MB_MBAFF(h))",
          "2195:                 return;",
          "",
          "[Removed Lines]",
          "2192:     if (!simple && FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "2192:     if (!simple && FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2581:         } else {",
          "2582:             cur_poc = h->cur_pic_ptr->field_poc[h->picture_structure - 1];",
          "2583:         }",
          "2585:             h->ref_list[0][0].poc + h->ref_list[1][0].poc == 2 * cur_poc) {",
          "2586:             h->use_weight = 0;",
          "2587:             h->use_weight_chroma = 0;",
          "",
          "[Removed Lines]",
          "2584:         if (h->ref_count[0] == 1 && h->ref_count[1] == 1 && !FRAME_MBAFF &&",
          "",
          "[Added Lines]",
          "2584:         if (h->ref_count[0] == 1 && h->ref_count[1] == 1 && !FRAME_MBAFF(h) &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2865:     if (CONFIG_ERROR_RESILIENCE &&",
          "2867:         h->er.cur_pic  = h->cur_pic_ptr;",
          "2868:         ff_er_frame_end(&h->er);",
          "2869:     }",
          "",
          "[Removed Lines]",
          "2866:         !FIELD_PICTURE && h->current_slice && !h->sps.new) {",
          "",
          "[Added Lines]",
          "2866:         !FIELD_PICTURE(h) && h->current_slice && !h->sps.new) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3208:     first_mb_in_slice = get_ue_golomb_long(&h->gb);",
          "3210:     if (first_mb_in_slice == 0) { // FIXME better field boundary detection",
          "3212:             field_end(h, 1);",
          "3213:         }",
          "",
          "[Removed Lines]",
          "3211:         if (h0->current_slice && FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "3211:         if (h0->current_slice && FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3452:             }",
          "3458:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Removed Lines]",
          "3455:             if (!FIELD_PICTURE || h->picture_structure == last_pic_structure) {",
          "",
          "[Added Lines]",
          "3455:             if (!FIELD_PICTURE(h) || h->picture_structure == last_pic_structure) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3539:             assert(h0->cur_pic_ptr->reference != DELAYED_PIC_REF);",
          "3545:                 h0->cur_pic_ptr = NULL;",
          "3547:             } else {",
          "3548:                 if (h0->cur_pic_ptr->frame_num != h->frame_num) {",
          "3549:                     ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
          "",
          "[Removed Lines]",
          "3542:             if (!FIELD_PICTURE || h->picture_structure == last_pic_structure) {",
          "3546:                 h0->first_field = FIELD_PICTURE;",
          "",
          "[Added Lines]",
          "3542:             if (!FIELD_PICTURE(h) || h->picture_structure == last_pic_structure) {",
          "3546:                 h0->first_field = FIELD_PICTURE(h);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3560:             }",
          "3561:         } else {",
          "3564:         }",
          "3567:             if (h264_frame_start(h) < 0) {",
          "3568:                 h0->first_field = 0;",
          "3569:                 return -1;",
          "",
          "[Removed Lines]",
          "3563:             h0->first_field = FIELD_PICTURE;",
          "3566:         if (!FIELD_PICTURE || h0->first_field) {",
          "",
          "[Added Lines]",
          "3563:             h0->first_field = FIELD_PICTURE(h);",
          "3566:         if (!FIELD_PICTURE(h) || h0->first_field) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3700:         (h->avctx->err_recognition & AV_EF_EXPLODE))",
          "3701:         return AVERROR_INVALIDDATA;",
          "3704:         ff_h264_fill_mbaff_ref_list(h);",
          "3706:         if (h->pps.weighted_bipred_idc == 2 && h->slice_type_nos == AV_PICTURE_TYPE_B) {",
          "",
          "[Removed Lines]",
          "3703:     if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "3703:     if (FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3991:     left_xy[LBOT] = left_xy[LTOP] = mb_xy - 1;",
          "3993:         const int left_mb_field_flag = IS_INTERLACED(h->cur_pic.mb_type[mb_xy - 1]);",
          "3994:         const int curr_mb_field_flag = IS_INTERLACED(mb_type);",
          "3995:         if (h->mb_y & 1) {",
          "",
          "[Removed Lines]",
          "3992:     if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "3992:     if (FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4018:              ((qp + h->cur_pic.qscale_table[left_xy[LTOP]] + 1) >> 1) <= qp_thresh) &&",
          "4019:             (top_xy < 0 ||",
          "4020:              ((qp + h->cur_pic.qscale_table[top_xy] + 1) >> 1) <= qp_thresh)) {",
          "4022:                 return 1;",
          "4023:             if ((left_xy[LTOP] < 0 ||",
          "4024:                  ((qp + h->cur_pic.qscale_table[left_xy[LBOT]] + 1) >> 1) <= qp_thresh) &&",
          "",
          "[Removed Lines]",
          "4021:             if (!FRAME_MBAFF)",
          "",
          "[Added Lines]",
          "4021:             if (!FRAME_MBAFF(h))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4124: {",
          "4125:     uint8_t *dest_y, *dest_cb, *dest_cr;",
          "4126:     int linesize, uvlinesize, mb_x, mb_y;",
          "4128:     const int old_slice_type = h->slice_type;",
          "4129:     const int pixel_shift    = h->pixel_shift;",
          "4130:     const int block_h        = 16 >> h->chroma_y_shift;",
          "4132:     if (h->deblocking_filter) {",
          "4133:         for (mb_x = start_x; mb_x < end_x; mb_x++)",
          "4135:                 int mb_xy, mb_type;",
          "4136:                 mb_xy         = h->mb_xy = mb_x + mb_y * h->mb_stride;",
          "4137:                 h->slice_num  = h->slice_table[mb_xy];",
          "4138:                 mb_type       = h->cur_pic.mb_type[mb_xy];",
          "4139:                 h->list_count = h->list_counts[mb_xy];",
          "4142:                     h->mb_mbaff               =",
          "4143:                     h->mb_field_decoding_flag = !!IS_INTERLACED(mb_type);",
          "",
          "[Removed Lines]",
          "4127:     const int end_mb_y       = h->mb_y + FRAME_MBAFF;",
          "4134:             for (mb_y = end_mb_y - FRAME_MBAFF; mb_y <= end_mb_y; mb_y++) {",
          "4141:                 if (FRAME_MBAFF)",
          "",
          "[Added Lines]",
          "4127:     const int end_mb_y       = h->mb_y + FRAME_MBAFF(h);",
          "4134:             for (mb_y = end_mb_y - FRAME_MBAFF(h); mb_y <= end_mb_y; mb_y++) {",
          "4141:                 if (FRAME_MBAFF(h))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4173:                 h->chroma_qp[0] = get_chroma_qp(h, 0, h->cur_pic.qscale_table[mb_xy]);",
          "4174:                 h->chroma_qp[1] = get_chroma_qp(h, 1, h->cur_pic.qscale_table[mb_xy]);",
          "4177:                     ff_h264_filter_mb(h, mb_x, mb_y, dest_y, dest_cb, dest_cr,",
          "4178:                                       linesize, uvlinesize);",
          "4179:                 } else {",
          "",
          "[Removed Lines]",
          "4176:                 if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "4176:                 if (FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4184:     }",
          "4185:     h->slice_type   = old_slice_type;",
          "4186:     h->mb_x         = end_x;",
          "4188:     h->chroma_qp[0] = get_chroma_qp(h, 0, h->qscale);",
          "4189:     h->chroma_qp[1] = get_chroma_qp(h, 1, h->qscale);",
          "4190: }",
          "",
          "[Removed Lines]",
          "4187:     h->mb_y         = end_mb_y - FRAME_MBAFF;",
          "",
          "[Added Lines]",
          "4187:     h->mb_y         = end_mb_y - FRAME_MBAFF(h);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4205: static void decode_finish_row(H264Context *h)",
          "4206: {",
          "4212:     if (h->deblocking_filter) {",
          "4213:         if ((top + height) >= pic_height)",
          "",
          "[Removed Lines]",
          "4207:     int top            = 16 * (h->mb_y      >> FIELD_PICTURE);",
          "4208:     int pic_height     = 16 *  h->mb_height >> FIELD_PICTURE;",
          "4209:     int height         =  16      << FRAME_MBAFF;",
          "4210:     int deblock_border = (16 + 4) << FRAME_MBAFF;",
          "",
          "[Added Lines]",
          "4207:     int top            = 16 * (h->mb_y      >> FIELD_PICTURE(h));",
          "4208:     int pic_height     = 16 *  h->mb_height >> FIELD_PICTURE(h);",
          "4209:     int height         =  16      << FRAME_MBAFF(h);",
          "4210:     int deblock_border = (16 + 4) << FRAME_MBAFF(h);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4254:     av_assert0(h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * h->linesize * ((scan8[15] - scan8[0]) >> 3));",
          "4257:                     avctx->codec_id != AV_CODEC_ID_H264 ||",
          "4258:                     (CONFIG_GRAY && (h->flags & CODEC_FLAG_GRAY));",
          "",
          "[Removed Lines]",
          "4256:     h->is_complex = FRAME_MBAFF || h->picture_structure != PICT_FRAME ||",
          "",
          "[Added Lines]",
          "4256:     h->is_complex = FRAME_MBAFF(h) || h->picture_structure != PICT_FRAME ||",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4278:                 ff_h264_hl_decode_mb(h);",
          "4282:                 h->mb_y++;",
          "4284:                 ret = ff_h264_decode_mb_cabac(h);",
          "",
          "[Removed Lines]",
          "4281:             if (ret >= 0 && FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "4281:             if (ret >= 0 && FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4316:                 ++h->mb_y;",
          "4317:                 if (FIELD_OR_MBAFF_PICTURE) {",
          "4318:                     ++h->mb_y;",
          "4320:                         predict_field_decoding_flag(h);",
          "4321:                 }",
          "4322:             }",
          "",
          "[Removed Lines]",
          "4319:                     if (FRAME_MBAFF && h->mb_y < h->mb_height)",
          "",
          "[Added Lines]",
          "4319:                     if (FRAME_MBAFF(h) && h->mb_y < h->mb_height)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4339:                 ff_h264_hl_decode_mb(h);",
          "4343:                 h->mb_y++;",
          "4344:                 ret = ff_h264_decode_mb_cavlc(h);",
          "",
          "[Removed Lines]",
          "4342:             if (ret >= 0 && FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "4342:             if (ret >= 0 && FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4363:                 ++h->mb_y;",
          "4364:                 if (FIELD_OR_MBAFF_PICTURE) {",
          "4365:                     ++h->mb_y;",
          "4367:                         predict_field_decoding_flag(h);",
          "4368:                 }",
          "4369:                 if (h->mb_y >= h->mb_height) {",
          "",
          "[Removed Lines]",
          "4366:                     if (FRAME_MBAFF && h->mb_y < h->mb_height)",
          "",
          "[Added Lines]",
          "4366:                     if (FRAME_MBAFF(h) && h->mb_y < h->mb_height)",
          "",
          "---------------"
        ],
        "libavcodec/h264.h||libavcodec/h264.h": [
          "File: libavcodec/h264.h -> libavcodec/h264.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #ifdef ALLOW_INTERLACE",
          "64: #define MB_MBAFF(h)    h->mb_mbaff",
          "65: #define MB_FIELD(h)    h->mb_field_decoding_flag",
          "68: #define LEFT_MBS 2",
          "69: #define LTOP     0",
          "70: #define LBOT     1",
          "",
          "[Removed Lines]",
          "66: #define FRAME_MBAFF h->mb_aff_frame",
          "67: #define FIELD_PICTURE (h->picture_structure != PICT_FRAME)",
          "",
          "[Added Lines]",
          "66: #define FRAME_MBAFF(h) h->mb_aff_frame",
          "67: #define FIELD_PICTURE(h) (h->picture_structure != PICT_FRAME)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: #else",
          "73: #define MB_MBAFF(h)      0",
          "74: #define MB_FIELD(h)      0",
          "77: #undef  IS_INTERLACED",
          "78: #define IS_INTERLACED(mb_type) 0",
          "79: #define LEFT_MBS 1",
          "",
          "[Removed Lines]",
          "75: #define FRAME_MBAFF   0",
          "76: #define FIELD_PICTURE 0",
          "",
          "[Added Lines]",
          "75: #define FRAME_MBAFF(h)   0",
          "76: #define FIELD_PICTURE(h) 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81: #define LBOT     0",
          "82: #define LEFT(i)  0",
          "83: #endif",
          "86: #ifndef CABAC",
          "87: #define CABAC h->pps.cabac",
          "",
          "[Removed Lines]",
          "84: #define FIELD_OR_MBAFF_PICTURE (FRAME_MBAFF || FIELD_PICTURE)",
          "",
          "[Added Lines]",
          "84: #define FIELD_OR_MBAFF_PICTURE (FRAME_MBAFF(h) || FIELD_PICTURE(h))",
          "",
          "---------------"
        ],
        "libavcodec/h264_cabac.c||libavcodec/h264_cabac.c": [
          "File: libavcodec/h264_cabac.c -> libavcodec/h264_cabac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322:     int mba_xy, mbb_xy;",
          "1323:     int ctx = 0;",
          "1326:         int mb_xy = mb_x + (mb_y&~1)*h->mb_stride;",
          "1327:         mba_xy = mb_xy - 1;",
          "1328:         if( (mb_y&1)",
          "",
          "[Removed Lines]",
          "1325:     if(FRAME_MBAFF){ //FIXME merge with the stuff in fill_caches?",
          "",
          "[Added Lines]",
          "1325:     if (FRAME_MBAFF(h)) { //FIXME merge with the stuff in fill_caches?",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1340:     }else{",
          "1341:         int mb_xy = h->mb_xy;",
          "1342:         mba_xy = mb_xy - 1;",
          "1344:     }",
          "1346:     if( h->slice_table[mba_xy] == h->slice_num && !IS_SKIP(h->cur_pic.mb_type[mba_xy] ))",
          "",
          "[Removed Lines]",
          "1343:         mbb_xy = mb_xy - (h->mb_stride << FIELD_PICTURE);",
          "",
          "[Added Lines]",
          "1343:         mbb_xy = mb_xy - (h->mb_stride << FIELD_PICTURE(h));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1886:     if( h->slice_type_nos != AV_PICTURE_TYPE_I ) {",
          "1887:         int skip;",
          "1890:             skip = h->next_mb_skipped;",
          "1891:         else",
          "1892:             skip = decode_cabac_mb_skip( h, h->mb_x, h->mb_y );",
          "1894:         if( skip ) {",
          "1896:                 h->cur_pic.mb_type[mb_xy] = MB_TYPE_SKIP;",
          "1897:                 h->next_mb_skipped = decode_cabac_mb_skip( h, h->mb_x, h->mb_y+1 );",
          "1898:                 if(!h->next_mb_skipped)",
          "",
          "[Removed Lines]",
          "1889:         if( FRAME_MBAFF && (h->mb_y&1)==1 && h->prev_mb_skipped )",
          "1895:             if( FRAME_MBAFF && (h->mb_y&1)==0 ){",
          "",
          "[Added Lines]",
          "1889:         if (FRAME_MBAFF(h) && (h->mb_y & 1) == 1 && h->prev_mb_skipped)",
          "1895:             if (FRAME_MBAFF(h) && (h->mb_y & 1) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1910:         }",
          "1911:     }",
          "1913:         if( (h->mb_y&1) == 0 )",
          "1914:             h->mb_mbaff =",
          "1915:             h->mb_field_decoding_flag = decode_cabac_field_decoding_flag(h);",
          "",
          "[Removed Lines]",
          "1912:     if(FRAME_MBAFF){",
          "",
          "[Added Lines]",
          "1912:     if (FRAME_MBAFF(h)) {",
          "",
          "---------------"
        ],
        "libavcodec/h264_cavlc.c||libavcodec/h264_cavlc.c": [
          "File: libavcodec/h264_cavlc.c -> libavcodec/h264_cavlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:             h->mb_skip_run= get_ue_golomb(&h->gb);",
          "711:         if (h->mb_skip_run--) {",
          "713:                 if(h->mb_skip_run==0)",
          "714:                     h->mb_mbaff = h->mb_field_decoding_flag = get_bits1(&h->gb);",
          "715:             }",
          "",
          "[Removed Lines]",
          "712:             if(FRAME_MBAFF && (h->mb_y&1) == 0){",
          "",
          "[Added Lines]",
          "712:             if(FRAME_MBAFF(h) && (h->mb_y&1) == 0){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717:             return 0;",
          "718:         }",
          "719:     }",
          "721:         if( (h->mb_y&1) == 0 )",
          "722:             h->mb_mbaff = h->mb_field_decoding_flag = get_bits1(&h->gb);",
          "723:     }",
          "",
          "[Removed Lines]",
          "720:     if(FRAME_MBAFF){",
          "",
          "[Added Lines]",
          "720:     if (FRAME_MBAFF(h)) {",
          "",
          "---------------"
        ],
        "libavcodec/h264_direct.c||libavcodec/h264_direct.c": [
          "File: libavcodec/h264_direct.c -> libavcodec/h264_direct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     const int poc1 = h->ref_list[1][0].poc;",
          "54:     int i, field;",
          "57:         for (field = 0; field < 2; field++){",
          "58:             const int poc  = h->cur_pic_ptr->field_poc[field];",
          "59:             const int poc1 = h->ref_list[1][0].field_poc[field];",
          "",
          "[Removed Lines]",
          "56:     if (FRAME_MBAFF)",
          "",
          "[Added Lines]",
          "56:     if (FRAME_MBAFF(h))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:         memcpy(cur->ref_poc  [1], cur->ref_poc  [0], sizeof(cur->ref_poc  [0]));",
          "119:     }",
          "123:     h->col_fieldoff= 0;",
          "124:     if(h->picture_structure == PICT_FRAME){",
          "",
          "[Removed Lines]",
          "121:     cur->mbaff= FRAME_MBAFF;",
          "",
          "[Added Lines]",
          "121:     cur->mbaff = FRAME_MBAFF(h);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     for(list=0; list<2; list++){",
          "137:         fill_colmap(h, h->map_col_to_list0, list, sidx, ref1sidx, 0);",
          "139:         for(field=0; field<2; field++)",
          "140:             fill_colmap(h, h->map_col_to_list0_field[field], list, field, field, 1);",
          "141:     }",
          "",
          "[Removed Lines]",
          "138:         if(FRAME_MBAFF)",
          "",
          "[Added Lines]",
          "138:         if (FRAME_MBAFF(h))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "496:         const int *dist_scale_factor = h->dist_scale_factor;",
          "497:         int ref_offset;",
          "500:             map_col_to_list0[0] = h->map_col_to_list0_field[h->mb_y&1][0];",
          "501:             map_col_to_list0[1] = h->map_col_to_list0_field[h->mb_y&1][1];",
          "502:             dist_scale_factor   =h->dist_scale_factor_field[h->mb_y&1];",
          "",
          "[Removed Lines]",
          "499:         if(FRAME_MBAFF && IS_INTERLACED(*mb_type)){",
          "",
          "[Added Lines]",
          "499:         if (FRAME_MBAFF(h) && IS_INTERLACED(*mb_type)) {",
          "",
          "---------------"
        ],
        "libavcodec/h264_loopfilter.c||libavcodec/h264_loopfilter.c": [
          "File: libavcodec/h264_loopfilter.c -> libavcodec/h264_loopfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     if( IS_INTRA(mb_type) ) {",
          "269:         static const int16_t bS4[4] = {4,4,4,4};",
          "270:         static const int16_t bS3[4] = {3,3,3,3};",
          "272:         if(left_type)",
          "273:             filter_mb_edgev( &img_y[4*0<<pixel_shift], linesize, bS4, qp0, a, b, h, 1);",
          "274:         if( IS_8x8DCT(mb_type) ) {",
          "",
          "[Removed Lines]",
          "271:         const int16_t *bSH = FIELD_PICTURE ? bS3 : bS4;",
          "",
          "[Added Lines]",
          "271:         const int16_t *bSH = FIELD_PICTURE(h) ? bS3 : bS4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:             int step =  1+(mb_type>>24); //IS_8x8DCT(mb_type) ? 2 : 1;",
          "370:             edges = 4 - 3*((mb_type>>3) & !(h->cbp & 15)); //(mb_type & MB_TYPE_16x16) && !(h->cbp & 15) ? 1 : 4;",
          "371:             h->h264dsp.h264_loop_filter_strength( bS, h->non_zero_count_cache, h->ref_cache, h->mv_cache,",
          "373:         }",
          "374:         if( IS_INTRA(left_type) )",
          "375:             AV_WN64A(bS[0][0], 0x0004000400040004ULL);",
          "376:         if( IS_INTRA(top_type) )",
          "379: #define FILTER(hv,dir,edge,intra)\\",
          "380:         if(AV_RN64A(bS[dir][edge])) {                                   \\",
          "",
          "[Removed Lines]",
          "372:                                               h->list_count==2, edges, step, mask_edge0, mask_edge1, FIELD_PICTURE);",
          "377:             AV_WN64A(bS[1][0], FIELD_PICTURE ? 0x0003000300030003ULL : 0x0004000400040004ULL);",
          "",
          "[Added Lines]",
          "372:                                               h->list_count==2, edges, step, mask_edge0, mask_edge1, FIELD_PICTURE(h));",
          "377:             AV_WN64A(bS[1][0], FIELD_PICTURE(h) ? 0x0003000300030003ULL : 0x0004000400040004ULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414: }",
          "416: void ff_h264_filter_mb_fast( H264Context *h, int mb_x, int mb_y, uint8_t *img_y, uint8_t *img_cb, uint8_t *img_cr, unsigned int linesize, unsigned int uvlinesize) {",
          "418:     if(!h->h264dsp.h264_loop_filter_strength || h->pps.chroma_qp_diff) {",
          "419:         ff_h264_filter_mb(h, mb_x, mb_y, img_y, img_cb, img_cr, linesize, uvlinesize);",
          "420:         return;",
          "",
          "[Removed Lines]",
          "417:     av_assert2(!FRAME_MBAFF);",
          "",
          "[Added Lines]",
          "417:     av_assert2(!FRAME_MBAFF(h));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:     if(mbm_type && !first_vertical_edge_done){",
          "483:             && IS_INTERLACED(mbm_type&~mb_type)",
          "484:             ) {",
          "",
          "[Removed Lines]",
          "482:         if (FRAME_MBAFF && (dir == 1) && ((mb_y&1) == 0)",
          "",
          "[Added Lines]",
          "482:         if (FRAME_MBAFF(h) && (dir == 1) && ((mb_y&1) == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "535:             if( IS_INTRA(mb_type|mbm_type)) {",
          "536:                 AV_WN64A(bS, 0x0003000300030003ULL);",
          "537:                 if (   (!IS_INTERLACED(mb_type|mbm_type))",
          "539:                 )",
          "540:                     AV_WN64A(bS, 0x0004000400040004ULL);",
          "541:             } else {",
          "542:                 int i;",
          "543:                 int mv_done;",
          "546:                     AV_WN64A(bS, 0x0001000100010001ULL);",
          "547:                     mv_done = 1;",
          "548:                 }",
          "",
          "[Removed Lines]",
          "538:                     || ((FRAME_MBAFF || (h->picture_structure != PICT_FRAME)) && (dir == 0))",
          "545:                 if( dir && FRAME_MBAFF && IS_INTERLACED(mb_type ^ mbm_type)) {",
          "",
          "[Added Lines]",
          "538:                     || ((FRAME_MBAFF(h) || (h->picture_structure != PICT_FRAME)) && (dir == 0))",
          "545:                 if( dir && FRAME_MBAFF(h) && IS_INTERLACED(mb_type ^ mbm_type)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "712:     int a = h->slice_alpha_c0_offset - qp_bd_offset;",
          "713:     int b = h->slice_beta_offset - qp_bd_offset;",
          "717:             && IS_INTERLACED(mb_type^h->left_type[LTOP])",
          "",
          "[Removed Lines]",
          "715:     if (FRAME_MBAFF",
          "",
          "[Added Lines]",
          "715:     if (FRAME_MBAFF(h)",
          "",
          "---------------"
        ],
        "libavcodec/h264_mb_template.c||libavcodec/h264_mb_template.c": [
          "File: libavcodec/h264_mb_template.c -> libavcodec/h264_mb_template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:             dest_cb -= h->uvlinesize * (block_h - 1);",
          "74:             dest_cr -= h->uvlinesize * (block_h - 1);",
          "75:         }",
          "77:             int list;",
          "78:             for (list = 0; list < h->list_count; list++) {",
          "79:                 if (!USES_LIST(mb_type, list))",
          "",
          "[Removed Lines]",
          "76:         if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "76:         if (FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:         if (mb_y & 1) // FIXME move out of this function?",
          "296:             for (p = 0; p < 3; p++)",
          "297:                 dest[p] -= h->linesize * 15;",
          "299:             int list;",
          "300:             for (list = 0; list < h->list_count; list++) {",
          "301:                 if (!USES_LIST(mb_type, list))",
          "",
          "[Removed Lines]",
          "298:         if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "298:         if (FRAME_MBAFF(h)) {",
          "",
          "---------------"
        ],
        "libavcodec/h264_mvpred.h||libavcodec/h264_mvpred.h": [
          "File: libavcodec/h264_mvpred.h -> libavcodec/h264_mvpred.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define SET_DIAG_MV(MV_OP, REF_OP, XY, Y4)                              \\",
          "46:         const int xy = XY, y4 = Y4;                                     \\",
          "47:         const int mb_type = mb_types[xy + (y4 >> 2) * h->mb_stride];    \\",
          "",
          "[Removed Lines]",
          "44:     if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "44:     if (FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: }",
          "232: #define FIX_MV_MBAFF(type, refn, mvn, idx)      \\",
          "234:         if (MB_FIELD(h)) {                      \\",
          "235:             if (!IS_INTERLACED(type)) {         \\",
          "236:                 refn <<= 1;                     \\",
          "",
          "[Removed Lines]",
          "233:     if (FRAME_MBAFF) {                          \\",
          "",
          "[Added Lines]",
          "233:     if (FRAME_MBAFF(h)) {                       \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:     topright_xy   = top_xy + 1;",
          "369:     left_xy[LBOT] = left_xy[LTOP] = mb_xy - 1;",
          "370:     h->left_block = left_block_options[0];",
          "372:         const int left_mb_field_flag = IS_INTERLACED(h->cur_pic.mb_type[mb_xy - 1]);",
          "373:         const int curr_mb_field_flag = IS_INTERLACED(mb_type);",
          "374:         if (h->mb_y & 1) {",
          "",
          "[Removed Lines]",
          "371:     if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "371:     if (FRAME_MBAFF(h)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "677:                 }",
          "678:             }",
          "681:                 continue;",
          "683:             if (!(mb_type & (MB_TYPE_SKIP | MB_TYPE_DIRECT2))) {",
          "",
          "[Removed Lines]",
          "680:             if ((mb_type & (MB_TYPE_SKIP | MB_TYPE_DIRECT2)) && !FRAME_MBAFF)",
          "",
          "[Added Lines]",
          "680:             if ((mb_type & (MB_TYPE_SKIP | MB_TYPE_DIRECT2)) && !FRAME_MBAFF(h))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "759:     MAP_F2F(scan8[0] - 1 + 2 * 8, left_type[LBOT])                      \\",
          "760:     MAP_F2F(scan8[0] - 1 + 3 * 8, left_type[LBOT])",
          "763:                 if (MB_FIELD(h)) {",
          "765: #define MAP_F2F(idx, mb_type)                                           \\",
          "",
          "[Removed Lines]",
          "762:             if (FRAME_MBAFF) {",
          "",
          "[Added Lines]",
          "762:             if (FRAME_MBAFF(h)) {",
          "",
          "---------------"
        ],
        "libavcodec/h264_refs.c||libavcodec/h264_refs.c": [
          "File: libavcodec/h264_refs.c -> libavcodec/h264_refs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         int cur_poc, list;",
          "124:         int lens[2];",
          "127:             cur_poc = h->cur_pic_ptr->field_poc[h->picture_structure == PICT_BOTTOM_FIELD];",
          "128:         else",
          "129:             cur_poc = h->cur_pic_ptr->poc;",
          "",
          "[Removed Lines]",
          "126:         if (FIELD_PICTURE)",
          "",
          "[Added Lines]",
          "126:         if (FIELD_PICTURE(h))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192: static int pic_num_extract(H264Context *h, int pic_num, int *structure)",
          "193: {",
          "196:         if (!(pic_num & 1))",
          "",
          "[Removed Lines]",
          "195:     if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "195:     if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:                             COPY_PICTURE(&h->ref_list[list][i], &h->ref_list[list][i - 1]);",
          "293:                         }",
          "294:                         COPY_PICTURE(&h->ref_list[list][index], ref);",
          "296:                             pic_as_field(&h->ref_list[list][index], pic_structure);",
          "297:                         }",
          "298:                     }",
          "",
          "[Removed Lines]",
          "295:                         if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "295:                         if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306:     for (list = 0; list < h->list_count; list++) {",
          "307:         for (index = 0; index < h->ref_count[list]; index++) {",
          "308:             if (   !h->ref_list[list][index].f.data[0]",
          "310:                 int i;",
          "311:                 av_log(h->avctx, AV_LOG_ERROR, \"Missing reference picture, default is %d\\n\", h->default_ref_list[list][0].poc);",
          "312:                 for (i = 0; i < FF_ARRAY_ELEMS(h->last_pocs); i++)",
          "313:                     h->last_pocs[i] = INT_MIN;",
          "314:                 if (h->default_ref_list[list][0].f.data[0]",
          "316:                     COPY_PICTURE(&h->ref_list[list][index], &h->default_ref_list[list][0]);",
          "317:                 else",
          "318:                     return -1;",
          "",
          "[Removed Lines]",
          "309:                 || (!FIELD_PICTURE && (h->ref_list[list][index].reference&3) != 3)) {",
          "315:                     && !(!FIELD_PICTURE && (h->default_ref_list[list][0].reference&3) != 3))",
          "",
          "[Added Lines]",
          "309:                 || (!FIELD_PICTURE(h) && (h->ref_list[list][index].reference&3) != 3)) {",
          "315:                     && !(!FIELD_PICTURE(h) && (h->default_ref_list[list][0].reference&3) != 3))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "535:     if (h->short_ref_count &&",
          "536:         h->long_ref_count + h->short_ref_count >= h->sps.ref_frame_count &&",
          "538:         mmco[0].opcode        = MMCO_SHORT2UNUSED;",
          "539:         mmco[0].short_pic_num = h->short_ref[h->short_ref_count - 1]->frame_num;",
          "540:         mmco_index            = 1;",
          "542:             mmco[0].short_pic_num *= 2;",
          "543:             mmco[1].opcode         = MMCO_SHORT2UNUSED;",
          "544:             mmco[1].short_pic_num  = mmco[0].short_pic_num + 1;",
          "",
          "[Removed Lines]",
          "537:         !(FIELD_PICTURE && !h->first_field && h->cur_pic_ptr->reference)) {",
          "541:         if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "537:         !(FIELD_PICTURE(h) && !h->first_field && h->cur_pic_ptr->reference)) {",
          "541:         if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "769:                     if (long_arg >= 32 ||",
          "770:                         (long_arg >= 16 && !(opcode == MMCO_SET_MAX_LONG &&",
          "771:                                              long_arg == 16) &&",
          "773:                         av_log(h->avctx, AV_LOG_ERROR,",
          "774:                                \"illegal long ref in memory management control \"",
          "775:                                \"operation %d\\n\", opcode);",
          "",
          "[Removed Lines]",
          "772:                          !(opcode == MMCO_LONG2UNUSED && FIELD_PICTURE))) {",
          "",
          "[Added Lines]",
          "772:                          !(opcode == MMCO_LONG2UNUSED && FIELD_PICTURE(h)))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54974c62982ae827becdbdb9b620b7ba75d079a0",
      "candidate_info": {
        "commit_hash": "54974c62982ae827becdbdb9b620b7ba75d079a0",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/54974c62982ae827becdbdb9b620b7ba75d079a0",
        "files": [
          "libavcodec/error_resilience.c",
          "libavcodec/error_resilience.h",
          "libavcodec/h261dec.c",
          "libavcodec/h263dec.c",
          "libavcodec/h264.c",
          "libavcodec/intrax8.c",
          "libavcodec/mpeg12.c",
          "libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h",
          "libavcodec/mpegvideo_enc.c",
          "libavcodec/mss2.c",
          "libavcodec/rv10.c",
          "libavcodec/rv34.c",
          "libavcodec/vc1dec.c"
        ],
        "message": "error_resilience: decouple ER from MpegEncContext",
        "before_after_code_files": [
          "libavcodec/error_resilience.c||libavcodec/error_resilience.c",
          "libavcodec/error_resilience.h||libavcodec/error_resilience.h",
          "libavcodec/h261dec.c||libavcodec/h261dec.c",
          "libavcodec/h263dec.c||libavcodec/h263dec.c",
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/intrax8.c||libavcodec/intrax8.c",
          "libavcodec/mpeg12.c||libavcodec/mpeg12.c",
          "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h",
          "libavcodec/mpegvideo_enc.c||libavcodec/mpegvideo_enc.c",
          "libavcodec/mss2.c||libavcodec/mss2.c",
          "libavcodec/rv10.c||libavcodec/rv10.c",
          "libavcodec/rv34.c||libavcodec/rv34.c",
          "libavcodec/vc1dec.c||libavcodec/vc1dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/error_resilience.c||libavcodec/error_resilience.c": [
          "File: libavcodec/error_resilience.c -> libavcodec/error_resilience.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"avcodec.h\"",
          "31: #include \"dsputil.h\"",
          "32: #include \"mpegvideo.h\"",
          "34: #include \"rectangle.h\"",
          "35: #include \"thread.h\"",
          "78: {",
          "81:         assert(s->quarter_sample);",
          "84:     } else {",
          "",
          "[Removed Lines]",
          "33: #include \"h264.h\"",
          "41: #undef mb_intra",
          "43: static void decode_mb(MpegEncContext *s, int ref)",
          "44: {",
          "45:     s->dest[0] = s->current_picture.f.data[0] + (s->mb_y *  16                       * s->linesize)   + s->mb_x *  16;",
          "46:     s->dest[1] = s->current_picture.f.data[1] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "47:     s->dest[2] = s->current_picture.f.data[2] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "49:     if (CONFIG_H264_DECODER && s->codec_id == AV_CODEC_ID_H264) {",
          "50:         H264Context *h = (void*)s;",
          "51:         h->mb_xy = s->mb_x + s->mb_y * s->mb_stride;",
          "52:         memset(h->non_zero_count_cache, 0, sizeof(h->non_zero_count_cache));",
          "53:         assert(ref >= 0);",
          "58:         if (ref >= h->ref_count[0])",
          "59:             ref = 0;",
          "60:         fill_rectangle(&s->current_picture.f.ref_index[0][4 * h->mb_xy],",
          "61:                        2, 2, 2, ref, 1);",
          "62:         fill_rectangle(&h->ref_cache[0][scan8[0]], 4, 4, 8, ref, 1);",
          "63:         fill_rectangle(h->mv_cache[0][scan8[0]], 4, 4, 8,",
          "64:                        pack16to32(s->mv[0][0][0], s->mv[0][0][1]), 4);",
          "65:         assert(!FRAME_MBAFF);",
          "66:         ff_h264_hl_decode_mb(h);",
          "67:     } else {",
          "68:         assert(ref == 0);",
          "69:         ff_MPV_decode_mb(s, s->block);",
          "70:     }",
          "71: }",
          "77: static void set_mv_strides(MpegEncContext *s, int *mv_step, int *stride)",
          "79:     if (s->codec_id == AV_CODEC_ID_H264) {",
          "80:         H264Context *h = (void*)s;",
          "",
          "[Added Lines]",
          "32: #include \"error_resilience.h\"",
          "41: static void set_mv_strides(ERContext *s, int *mv_step, int *stride)",
          "43:     if (s->avctx->codec_id == AV_CODEC_ID_H264) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:                    uint8_t *dest_cr, int mb_x, int mb_y)",
          "95: {",
          "96:     int dc, dcu, dcv, y, i;",
          "97:     for (i = 0; i < 4; i++) {",
          "98:         dc = s->dc_val[0][mb_x * 2 + (i &  1) + (mb_y * 2 + (i >> 1)) * s->b8_stride];",
          "",
          "[Removed Lines]",
          "93: static void put_dc(MpegEncContext *s, uint8_t *dest_y, uint8_t *dest_cb,",
          "",
          "[Added Lines]",
          "56: static void put_dc(ERContext *s, uint8_t *dest_y, uint8_t *dest_cb,",
          "59:     int *linesize = s->cur_pic->f.linesize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         for (y = 0; y < 8; y++) {",
          "104:             int x;",
          "105:             for (x = 0; x < 8; x++)",
          "107:         }",
          "108:     }",
          "109:     dcu = s->dc_val[1][mb_x + mb_y * s->mb_stride];",
          "",
          "[Removed Lines]",
          "106:                 dest_y[x + (i &  1) * 8 + (y + (i >> 1) * 8) * s->linesize] = dc / 8;",
          "",
          "[Added Lines]",
          "70:                 dest_y[x + (i &  1) * 8 + (y + (i >> 1) * 8) * linesize[0]] = dc / 8;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:     for (y = 0; y < 8; y++) {",
          "120:         int x;",
          "121:         for (x = 0; x < 8; x++) {",
          "124:         }",
          "125:     }",
          "126: }",
          "",
          "[Removed Lines]",
          "122:             dest_cb[x + y * s->uvlinesize] = dcu / 8;",
          "123:             dest_cr[x + y * s->uvlinesize] = dcv / 8;",
          "",
          "[Added Lines]",
          "86:             dest_cb[x + y * linesize[1]] = dcu / 8;",
          "87:             dest_cr[x + y * linesize[2]] = dcv / 8;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:                      int h, int stride, int is_luma)",
          "171: {",
          "172:     int b_x, b_y;",
          "",
          "[Removed Lines]",
          "169: static void guess_dc(MpegEncContext *s, int16_t *dc, int w,",
          "",
          "[Added Lines]",
          "133: static void guess_dc(ERContext *s, int16_t *dc, int w,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "180:             mb_index = (b_x >> is_luma) + (b_y >> is_luma) * s->mb_stride;",
          "181:             error    = s->error_status_table[mb_index];",
          "184:                 continue; // inter",
          "185:             if (!(error & ER_DC_ERROR))",
          "186:                 continue; // dc-ok",
          "",
          "[Removed Lines]",
          "183:             if (IS_INTER(s->current_picture.f.mb_type[mb_index]))",
          "",
          "[Added Lines]",
          "147:             if (IS_INTER(s->cur_pic->f.mb_type[mb_index]))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "189:             for (j = b_x + 1; j < w; j++) {",
          "190:                 int mb_index_j = (j >> is_luma) + (b_y >> is_luma) * s->mb_stride;",
          "191:                 int error_j    = s->error_status_table[mb_index_j];",
          "193:                 if (intra_j == 0 || !(error_j & ER_DC_ERROR)) {",
          "194:                     color[0]    = dc[j + b_y * stride];",
          "195:                     distance[0] = j - b_x;",
          "",
          "[Removed Lines]",
          "192:                 int intra_j    = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "156:                 int intra_j    = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "201:             for (j = b_x - 1; j >= 0; j--) {",
          "202:                 int mb_index_j = (j >> is_luma) + (b_y >> is_luma) * s->mb_stride;",
          "203:                 int error_j    = s->error_status_table[mb_index_j];",
          "205:                 if (intra_j == 0 || !(error_j & ER_DC_ERROR)) {",
          "206:                     color[1]    = dc[j + b_y * stride];",
          "207:                     distance[1] = b_x - j;",
          "",
          "[Removed Lines]",
          "204:                 int intra_j    = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "168:                 int intra_j    = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "213:             for (j = b_y + 1; j < h; j++) {",
          "214:                 int mb_index_j = (b_x >> is_luma) + (j >> is_luma) * s->mb_stride;",
          "215:                 int error_j    = s->error_status_table[mb_index_j];",
          "218:                 if (intra_j == 0 || !(error_j & ER_DC_ERROR)) {",
          "219:                     color[2]    = dc[b_x + j * stride];",
          "",
          "[Removed Lines]",
          "216:                 int intra_j    = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "180:                 int intra_j    = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:             for (j = b_y - 1; j >= 0; j--) {",
          "227:                 int mb_index_j = (b_x >> is_luma) + (j >> is_luma) * s->mb_stride;",
          "228:                 int error_j    = s->error_status_table[mb_index_j];",
          "230:                 if (intra_j == 0 || !(error_j & ER_DC_ERROR)) {",
          "231:                     color[3]    = dc[b_x + j * stride];",
          "232:                     distance[3] = b_y - j;",
          "",
          "[Removed Lines]",
          "229:                 int intra_j    = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "193:                 int intra_j    = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "256:                            int h, int stride, int is_luma)",
          "257: {",
          "258:     int b_x, b_y, mvx_stride, mvy_stride;",
          "",
          "[Removed Lines]",
          "255: static void h_block_filter(MpegEncContext *s, uint8_t *dst, int w,",
          "",
          "[Added Lines]",
          "219: static void h_block_filter(ERContext *s, uint8_t *dst, int w,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "266:             int y;",
          "267:             int left_status  = s->error_status_table[( b_x      >> is_luma) + (b_y >> is_luma) * s->mb_stride];",
          "268:             int right_status = s->error_status_table[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s->mb_stride];",
          "271:             int left_damage  = left_status & ER_MB_ERROR;",
          "272:             int right_damage = right_status & ER_MB_ERROR;",
          "273:             int offset       = b_x * 8 + b_y * stride * 8;",
          "276:             if (!(left_damage || right_damage))",
          "277:                 continue; // both undamaged",
          "278:             if ((!left_intra) && (!right_intra) &&",
          "",
          "[Removed Lines]",
          "269:             int left_intra   = IS_INTRA(s->current_picture.f.mb_type[( b_x      >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "270:             int right_intra  = IS_INTRA(s->current_picture.f.mb_type[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "274:             int16_t *left_mv  = s->current_picture.f.motion_val[0][mvy_stride * b_y + mvx_stride *  b_x];",
          "275:             int16_t *right_mv = s->current_picture.f.motion_val[0][mvy_stride * b_y + mvx_stride * (b_x + 1)];",
          "",
          "[Added Lines]",
          "233:             int left_intra   = IS_INTRA(s->cur_pic->f.mb_type[( b_x      >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "234:             int right_intra  = IS_INTRA(s->cur_pic->f.mb_type[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "238:             int16_t *left_mv  = s->cur_pic->f.motion_val[0][mvy_stride * b_y + mvx_stride *  b_x];",
          "239:             int16_t *right_mv = s->cur_pic->f.motion_val[0][mvy_stride * b_y + mvx_stride * (b_x + 1)];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "324:                            int stride, int is_luma)",
          "325: {",
          "326:     int b_x, b_y, mvx_stride, mvy_stride;",
          "",
          "[Removed Lines]",
          "323: static void v_block_filter(MpegEncContext *s, uint8_t *dst, int w, int h,",
          "",
          "[Added Lines]",
          "287: static void v_block_filter(ERContext *s, uint8_t *dst, int w, int h,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "334:             int x;",
          "335:             int top_status    = s->error_status_table[(b_x >> is_luma) +  (b_y      >> is_luma) * s->mb_stride];",
          "336:             int bottom_status = s->error_status_table[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s->mb_stride];",
          "339:             int top_damage    = top_status & ER_MB_ERROR;",
          "340:             int bottom_damage = bottom_status & ER_MB_ERROR;",
          "341:             int offset        = b_x * 8 + b_y * stride * 8;",
          "346:             if (!(top_damage || bottom_damage))",
          "347:                 continue; // both undamaged",
          "",
          "[Removed Lines]",
          "337:             int top_intra     = IS_INTRA(s->current_picture.f.mb_type[(b_x >> is_luma) + ( b_y      >> is_luma) * s->mb_stride]);",
          "338:             int bottom_intra  = IS_INTRA(s->current_picture.f.mb_type[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s->mb_stride]);",
          "343:             int16_t *top_mv    = s->current_picture.f.motion_val[0][mvy_stride *  b_y      + mvx_stride * b_x];",
          "344:             int16_t *bottom_mv = s->current_picture.f.motion_val[0][mvy_stride * (b_y + 1) + mvx_stride * b_x];",
          "",
          "[Added Lines]",
          "301:             int top_intra     = IS_INTRA(s->cur_pic->f.mb_type[(b_x >> is_luma) + ( b_y      >> is_luma) * s->mb_stride]);",
          "302:             int bottom_intra  = IS_INTRA(s->cur_pic->f.mb_type[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s->mb_stride]);",
          "307:             int16_t *top_mv    = s->cur_pic->f.motion_val[0][mvy_stride *  b_y      + mvx_stride * b_x];",
          "308:             int16_t *bottom_mv = s->cur_pic->f.motion_val[0][mvy_stride * (b_y + 1) + mvx_stride * b_x];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "386:     }",
          "387: }",
          "390: {",
          "391:     uint8_t *fixed = s->er_temp_buffer;",
          "392: #define MV_FROZEN    3",
          "",
          "[Removed Lines]",
          "389: static void guess_mv(MpegEncContext *s)",
          "",
          "[Added Lines]",
          "353: static void guess_mv(ERContext *s)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "406:         int f = 0;",
          "407:         int error = s->error_status_table[mb_xy];",
          "410:             f = MV_FROZEN; // intra // FIXME check",
          "411:         if (!(error & ER_MV_ERROR))",
          "412:             f = MV_FROZEN; // inter with undamaged MV",
          "",
          "[Removed Lines]",
          "409:         if (IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "",
          "[Added Lines]",
          "373:         if (IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "419:     if ((!(s->avctx->error_concealment&FF_EC_GUESS_MVS)) ||",
          "420:         num_avail <= mb_width / 2) {",
          "421:         for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "425:             for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "426:                 const int mb_xy = mb_x + mb_y * s->mb_stride;",
          "431:                     continue;",
          "432:                 if (!(s->error_status_table[mb_xy] & ER_MV_ERROR))",
          "433:                     continue;",
          "445:                 s->mv[0][0][0] = 0;",
          "446:                 s->mv[0][0][1] = 0;",
          "448:             }",
          "449:         }",
          "450:         return;",
          "",
          "[Removed Lines]",
          "422:             s->mb_x = 0;",
          "423:             s->mb_y = mb_y;",
          "424:             ff_init_block_index(s);",
          "428:                 ff_update_block_index(s);",
          "430:                 if (IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "435:                 s->mv_dir     = s->last_picture.f.data[0] ? MV_DIR_FORWARD",
          "436:                                                           : MV_DIR_BACKWARD;",
          "437:                 s->mb_intra   = 0;",
          "438:                 s->mv_type    = MV_TYPE_16X16;",
          "439:                 s->mb_skipped = 0;",
          "441:                 s->dsp.clear_blocks(s->block[0]);",
          "443:                 s->mb_x        = mb_x;",
          "444:                 s->mb_y        = mb_y;",
          "447:                 decode_mb(s, 0);",
          "",
          "[Added Lines]",
          "388:                 int mv_dir = (s->last_pic && s->last_pic->f.data[0]) ? MV_DIR_FORWARD : MV_DIR_BACKWARD;",
          "390:                 if (IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "397:                 s->decode_mb(s->opaque, 0, mv_dir, MV_TYPE_16X16, &s->mv,",
          "398:                              mb_x, mb_y, 0, 0);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "462:             changed = 0;",
          "463:             for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "467:                 for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "468:                     const int mb_xy        = mb_x + mb_y * s->mb_stride;",
          "469:                     int mv_predictor[8][2] = { { 0 } };",
          "",
          "[Removed Lines]",
          "464:                 s->mb_x = 0;",
          "465:                 s->mb_y = mb_y;",
          "466:                 ff_init_block_index(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "475:                     const int mot_index    = (mb_x + mb_y * mot_stride) * mot_step;",
          "476:                     int prev_x, prev_y, prev_ref;",
          "480:                     if ((mb_x ^ mb_y ^ pass) & 1)",
          "481:                         continue;",
          "483:                     if (fixed[mb_xy] == MV_FROZEN)",
          "484:                         continue;",
          "488:                     j = 0;",
          "489:                     if (mb_x > 0             && fixed[mb_xy - 1]         == MV_FROZEN)",
          "",
          "[Removed Lines]",
          "478:                     ff_update_block_index(s);",
          "485:                     assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));",
          "486:                     assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);",
          "",
          "[Added Lines]",
          "431:                     assert(!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]));",
          "432:                     assert(s->last_pic && s->last_pic->f.data[0]);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "514:                     if (mb_x > 0 && fixed[mb_xy - 1]) {",
          "515:                         mv_predictor[pred_count][0] =",
          "517:                         mv_predictor[pred_count][1] =",
          "519:                         ref[pred_count] =",
          "521:                         pred_count++;",
          "522:                     }",
          "523:                     if (mb_x + 1 < mb_width && fixed[mb_xy + 1]) {",
          "524:                         mv_predictor[pred_count][0] =",
          "526:                         mv_predictor[pred_count][1] =",
          "528:                         ref[pred_count] =",
          "530:                         pred_count++;",
          "531:                     }",
          "532:                     if (mb_y > 0 && fixed[mb_xy - mb_stride]) {",
          "533:                         mv_predictor[pred_count][0] =",
          "535:                         mv_predictor[pred_count][1] =",
          "537:                         ref[pred_count] =",
          "539:                         pred_count++;",
          "540:                     }",
          "541:                     if (mb_y + 1<mb_height && fixed[mb_xy + mb_stride]) {",
          "542:                         mv_predictor[pred_count][0] =",
          "544:                         mv_predictor[pred_count][1] =",
          "546:                         ref[pred_count] =",
          "548:                         pred_count++;",
          "549:                     }",
          "550:                     if (pred_count == 0)",
          "",
          "[Removed Lines]",
          "516:                             s->current_picture.f.motion_val[0][mot_index - mot_step][0];",
          "518:                             s->current_picture.f.motion_val[0][mot_index - mot_step][1];",
          "520:                             s->current_picture.f.ref_index[0][4 * (mb_xy - 1)];",
          "525:                             s->current_picture.f.motion_val[0][mot_index + mot_step][0];",
          "527:                             s->current_picture.f.motion_val[0][mot_index + mot_step][1];",
          "529:                             s->current_picture.f.ref_index[0][4 * (mb_xy + 1)];",
          "534:                             s->current_picture.f.motion_val[0][mot_index - mot_stride * mot_step][0];",
          "536:                             s->current_picture.f.motion_val[0][mot_index - mot_stride * mot_step][1];",
          "538:                             s->current_picture.f.ref_index[0][4 * (mb_xy - s->mb_stride)];",
          "543:                             s->current_picture.f.motion_val[0][mot_index + mot_stride * mot_step][0];",
          "545:                             s->current_picture.f.motion_val[0][mot_index + mot_stride * mot_step][1];",
          "547:                             s->current_picture.f.ref_index[0][4 * (mb_xy + s->mb_stride)];",
          "",
          "[Added Lines]",
          "462:                             s->cur_pic->f.motion_val[0][mot_index - mot_step][0];",
          "464:                             s->cur_pic->f.motion_val[0][mot_index - mot_step][1];",
          "466:                             s->cur_pic->f.ref_index[0][4 * (mb_xy - 1)];",
          "471:                             s->cur_pic->f.motion_val[0][mot_index + mot_step][0];",
          "473:                             s->cur_pic->f.motion_val[0][mot_index + mot_step][1];",
          "475:                             s->cur_pic->f.ref_index[0][4 * (mb_xy + 1)];",
          "480:                             s->cur_pic->f.motion_val[0][mot_index - mot_stride * mot_step][0];",
          "482:                             s->cur_pic->f.motion_val[0][mot_index - mot_stride * mot_step][1];",
          "484:                             s->cur_pic->f.ref_index[0][4 * (mb_xy - s->mb_stride)];",
          "489:                             s->cur_pic->f.motion_val[0][mot_index + mot_stride * mot_step][0];",
          "491:                             s->cur_pic->f.motion_val[0][mot_index + mot_stride * mot_step][1];",
          "493:                             s->cur_pic->f.ref_index[0][4 * (mb_xy + s->mb_stride)];",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "602:                         if (s->avctx->codec_id == AV_CODEC_ID_H264) {",
          "604:                         } else {",
          "606:                                                      mb_y, 0);",
          "607:                         }",
          "610:                             goto skip_last_mv;",
          "614:                     } else {",
          "618:                     }",
          "",
          "[Removed Lines]",
          "605:                             ff_thread_await_progress(&s->last_picture_ptr->f,",
          "608:                         if (!s->last_picture.f.motion_val[0] ||",
          "609:                             !s->last_picture.f.ref_index[0])",
          "611:                         prev_x   = s->last_picture.f.motion_val[0][mot_index][0];",
          "612:                         prev_y   = s->last_picture.f.motion_val[0][mot_index][1];",
          "613:                         prev_ref = s->last_picture.f.ref_index[0][4 * mb_xy];",
          "615:                         prev_x   = s->current_picture.f.motion_val[0][mot_index][0];",
          "616:                         prev_y   = s->current_picture.f.motion_val[0][mot_index][1];",
          "617:                         prev_ref = s->current_picture.f.ref_index[0][4 * mb_xy];",
          "",
          "[Added Lines]",
          "551:                             ff_thread_await_progress(&s->last_pic->f,",
          "554:                         if (!s->last_pic->f.motion_val[0] ||",
          "555:                             !s->last_pic->f.ref_index[0])",
          "557:                         prev_x   = s->last_pic->f.motion_val[0][mot_index][0];",
          "558:                         prev_y   = s->last_pic->f.motion_val[0][mot_index][1];",
          "559:                         prev_ref = s->last_pic->f.ref_index[0][4 * mb_xy];",
          "561:                         prev_x   = s->cur_pic->f.motion_val[0][mot_index][0];",
          "562:                         prev_y   = s->cur_pic->f.motion_val[0][mot_index][1];",
          "563:                         prev_ref = s->cur_pic->f.ref_index[0][4 * mb_xy];",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "624:                     pred_count++;",
          "626: skip_last_mv:",
          "637:                     for (j = 0; j < pred_count; j++) {",
          "638:                         int score = 0;",
          "643:                             s->mv[0][0][0] = mv_predictor[j][0];",
          "645:                             s->mv[0][0][1] = mv_predictor[j][1];",
          "648:                         if (ref[j] < 0)",
          "649:                             continue;",
          "653:                         if (mb_x > 0 && fixed[mb_xy - 1]) {",
          "654:                             int k;",
          "655:                             for (k = 0; k < 16; k++)",
          "658:                         }",
          "659:                         if (mb_x + 1 < mb_width && fixed[mb_xy + 1]) {",
          "660:                             int k;",
          "661:                             for (k = 0; k < 16; k++)",
          "664:                         }",
          "665:                         if (mb_y > 0 && fixed[mb_xy - mb_stride]) {",
          "666:                             int k;",
          "667:                             for (k = 0; k < 16; k++)",
          "669:                         }",
          "670:                         if (mb_y + 1 < mb_height && fixed[mb_xy + mb_stride]) {",
          "671:                             int k;",
          "672:                             for (k = 0; k < 16; k++)",
          "675:                         }",
          "677:                         if (score <= best_score) { // <= will favor the last MV",
          "",
          "[Removed Lines]",
          "627:                     s->mv_dir     = MV_DIR_FORWARD;",
          "628:                     s->mb_intra   = 0;",
          "629:                     s->mv_type    = MV_TYPE_16X16;",
          "630:                     s->mb_skipped = 0;",
          "632:                     s->dsp.clear_blocks(s->block[0]);",
          "634:                     s->mb_x = mb_x;",
          "635:                     s->mb_y = mb_y;",
          "639:                         uint8_t *src = s->current_picture.f.data[0] +",
          "640:                                        mb_x * 16 + mb_y * 16 * s->linesize;",
          "642:                         s->current_picture.f.motion_val[0][mot_index][0] =",
          "644:                         s->current_picture.f.motion_val[0][mot_index][1] =",
          "651:                         decode_mb(s, ref[j]);",
          "656:                                 score += FFABS(src[k * s->linesize - 1] -",
          "657:                                                src[k * s->linesize]);",
          "662:                                 score += FFABS(src[k * s->linesize + 15] -",
          "663:                                                src[k * s->linesize + 16]);",
          "668:                                 score += FFABS(src[k - s->linesize] - src[k]);",
          "673:                                 score += FFABS(src[k + s->linesize * 15] -",
          "674:                                                src[k + s->linesize * 16]);",
          "",
          "[Added Lines]",
          "575:                         int *linesize = s->cur_pic->f.linesize;",
          "577:                         uint8_t *src = s->cur_pic->f.data[0] +",
          "578:                                        mb_x * 16 + mb_y * 16 * linesize[0];",
          "580:                         s->cur_pic->f.motion_val[0][mot_index][0] =",
          "582:                         s->cur_pic->f.motion_val[0][mot_index][1] =",
          "589:                         s->decode_mb(s->opaque, ref[j], MV_DIR_FORWARD,",
          "590:                                      MV_TYPE_16X16, &s->mv, mb_x, mb_y, 0, 0);",
          "595:                                 score += FFABS(src[k * linesize[0] - 1] -",
          "596:                                                src[k * linesize[0]]);",
          "601:                                 score += FFABS(src[k * linesize[0] + 15] -",
          "602:                                                src[k * linesize[0] + 16]);",
          "607:                                 score += FFABS(src[k - linesize[0]] - src[k]);",
          "612:                                 score += FFABS(src[k + linesize[0] * 15] -",
          "613:                                                src[k + linesize[0] * 16]);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "686:                     for (i = 0; i < mot_step; i++)",
          "687:                         for (j = 0; j < mot_step; j++) {",
          "690:                         }",
          "695:                     if (s->mv[0][0][0] != prev_x || s->mv[0][0][1] != prev_y) {",
          "",
          "[Removed Lines]",
          "688:                             s->current_picture.f.motion_val[0][mot_index + i + j * mot_stride][0] = s->mv[0][0][0];",
          "689:                             s->current_picture.f.motion_val[0][mot_index + i + j * mot_stride][1] = s->mv[0][0][1];",
          "692:                     decode_mb(s, ref[best_pred]);",
          "",
          "[Added Lines]",
          "627:                             s->cur_pic->f.motion_val[0][mot_index + i + j * mot_stride][0] = s->mv[0][0][0];",
          "628:                             s->cur_pic->f.motion_val[0][mot_index + i + j * mot_stride][1] = s->mv[0][0][1];",
          "631:                     s->decode_mb(s->opaque, ref[best_pred], MV_DIR_FORWARD,",
          "632:                                  MV_TYPE_16X16, &s->mv, mb_x, mb_y, 0, 0);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "712:     }",
          "713: }",
          "716: {",
          "717:     int is_intra_likely, i, j, undamaged_count, skip_amount, mb_x, mb_y;",
          "720:         return 1; // no previous frame available -> use spatial prediction",
          "722:     undamaged_count = 0;",
          "",
          "[Removed Lines]",
          "715: static int is_intra_more_likely(MpegEncContext *s)",
          "719:     if (!s->last_picture_ptr || !s->last_picture_ptr->f.data[0])",
          "",
          "[Added Lines]",
          "655: static int is_intra_more_likely(ERContext *s)",
          "659:     if (!s->last_pic || !s->last_pic->f.data[0])",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "727:             undamaged_count++;",
          "728:     }",
          "737:     if (undamaged_count < 5)",
          "738:         return 0; // almost all MBs damaged -> use temporal prediction",
          "",
          "[Removed Lines]",
          "730:     if (s->codec_id == AV_CODEC_ID_H264) {",
          "731:         H264Context *h = (void*) s;",
          "732:         if (h->list_count <= 0 || h->ref_count[0] <= 0 ||",
          "733:             !h->ref_list[0][0].f.data[0])",
          "734:             return 1;",
          "735:     }",
          "",
          "[Added Lines]",
          "670:     if (s->avctx->codec_id == AV_CODEC_ID_H264 && s->ref_count <= 0)",
          "671:         return 1;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "741:     if (CONFIG_MPEG_XVMC_DECODER    &&",
          "742:         s->avctx->xvmc_acceleration &&",
          "744:         return 1;",
          "746:     skip_amount     = FFMAX(undamaged_count / 50, 1); // check only up to 50 MBs",
          "",
          "[Removed Lines]",
          "743:         s->pict_type == AV_PICTURE_TYPE_I)",
          "",
          "[Added Lines]",
          "679:         s->cur_pic->f.pict_type == AV_PICTURE_TYPE_I)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "761:             if ((j % skip_amount) != 0)",
          "762:                 continue;",
          "770:                 if (s->avctx->codec_id == AV_CODEC_ID_H264) {",
          "772:                 } else {",
          "775:                 }",
          "781:             } else {",
          "783:                    is_intra_likely++;",
          "784:                 else",
          "785:                    is_intra_likely--;",
          "",
          "[Removed Lines]",
          "764:             if (s->pict_type == AV_PICTURE_TYPE_I) {",
          "765:                 uint8_t *mb_ptr      = s->current_picture.f.data[0] +",
          "766:                                        mb_x * 16 + mb_y * 16 * s->linesize;",
          "767:                 uint8_t *last_mb_ptr = s->last_picture.f.data[0] +",
          "768:                                        mb_x * 16 + mb_y * 16 * s->linesize;",
          "773:                     ff_thread_await_progress(&s->last_picture_ptr->f,",
          "774:                                              mb_y, 0);",
          "776:                 is_intra_likely += s->dsp.sad[0](NULL, last_mb_ptr, mb_ptr,",
          "777:                                                  s->linesize, 16);",
          "778:                 is_intra_likely -= s->dsp.sad[0](NULL, last_mb_ptr,",
          "779:                                                  last_mb_ptr + s->linesize * 16,",
          "780:                                                  s->linesize, 16);",
          "782:                 if (IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "",
          "[Added Lines]",
          "700:             if (s->cur_pic->f.pict_type == AV_PICTURE_TYPE_I) {",
          "701:                 int *linesize = s->cur_pic->f.linesize;",
          "702:                 uint8_t *mb_ptr      = s->cur_pic->f.data[0] +",
          "703:                                        mb_x * 16 + mb_y * 16 * linesize[0];",
          "704:                 uint8_t *last_mb_ptr = s->last_pic->f.data[0] +",
          "705:                                        mb_x * 16 + mb_y * 16 * linesize[0];",
          "710:                     ff_thread_await_progress(&s->last_pic->f, mb_y, 0);",
          "712:                 is_intra_likely += s->dsp->sad[0](NULL, last_mb_ptr, mb_ptr,",
          "713:                                                  linesize[0], 16);",
          "714:                 is_intra_likely -= s->dsp->sad[0](NULL, last_mb_ptr,",
          "715:                                                  last_mb_ptr + linesize[0] * 16,",
          "716:                                                  linesize[0], 16);",
          "718:                 if (IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "789:     return is_intra_likely > 0;",
          "790: }",
          "793: {",
          "795:         return;",
          "797:     memset(s->error_status_table, ER_MB_ERROR | VP_START | ER_MB_END,",
          "",
          "[Removed Lines]",
          "792: void ff_er_frame_start(MpegEncContext *s)",
          "794:     if (!s->err_recognition)",
          "",
          "[Added Lines]",
          "728: void ff_er_frame_start(ERContext *s)",
          "730:     if (!s->avctx->err_recognition)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "811:                      int endx, int endy, int status)",
          "812: {",
          "813:     const int start_i  = av_clip(startx + starty * s->mb_width, 0, s->mb_num - 1);",
          "",
          "[Removed Lines]",
          "810: void ff_er_add_slice(MpegEncContext *s, int startx, int starty,",
          "",
          "[Added Lines]",
          "746: void ff_er_add_slice(ERContext *s, int startx, int starty,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "825:         return;",
          "826:     }",
          "829:         return;",
          "831:     mask &= ~VP_START;",
          "",
          "[Removed Lines]",
          "828:     if (!s->err_recognition)",
          "",
          "[Added Lines]",
          "764:     if (!s->avctx->err_recognition)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "875:     }",
          "876: }",
          "879: {",
          "880:     int i, mb_x, mb_y, error, error_type, dc_error, mv_error, ac_error;",
          "881:     int distance;",
          "882:     int threshold_part[4] = { 100, 100, 100 };",
          "883:     int threshold = 50;",
          "884:     int is_intra_likely;",
          "885:     int size = s->b8_stride * 2 * s->mb_height;",
          "891:         s->avctx->hwaccel                                              ||",
          "892:         s->avctx->codec->capabilities&CODEC_CAP_HWACCEL_VDPAU          ||",
          "894:         s->error_count == 3 * s->mb_width *",
          "895:                           (s->avctx->skip_top + s->avctx->skip_bottom)) {",
          "896:         return;",
          "897:     };",
          "900:         av_log(s->avctx, AV_LOG_ERROR, \"Warning MVs not available\\n\");",
          "902:         for (i = 0; i < 2; i++) {",
          "906:         }",
          "909:     }",
          "911:     if (s->avctx->debug & FF_DEBUG_ER) {",
          "",
          "[Removed Lines]",
          "878: void ff_er_frame_end(MpegEncContext *s)",
          "886:     Picture *pic = s->current_picture_ptr;",
          "890:     if (!s->err_recognition || s->error_count == 0                     ||",
          "893:         s->picture_structure != PICT_FRAME                             ||",
          "899:     if (s->current_picture.f.motion_val[0] == NULL) {",
          "903:             pic->f.ref_index[i]     = av_mallocz(s->mb_stride * s->mb_height * 4 * sizeof(uint8_t));",
          "904:             pic->motion_val_base[i] = av_mallocz((size + 4) * 2 * sizeof(uint16_t));",
          "905:             pic->f.motion_val[i]    = pic->motion_val_base[i] + 4;",
          "907:         pic->f.motion_subsample_log2 = 3;",
          "908:         s->current_picture = *s->current_picture_ptr;",
          "",
          "[Added Lines]",
          "814: void ff_er_frame_end(ERContext *s)",
          "816:     int *linesize = s->cur_pic->f.linesize;",
          "826:     if (!s->avctx->err_recognition || s->error_count == 0              ||",
          "829:         !s->cur_pic || s->cur_pic->field_picture                               ||",
          "835:     if (s->cur_pic->f.motion_val[0] == NULL) {",
          "839:             s->cur_pic->f.ref_index[i]     = av_mallocz(s->mb_stride * s->mb_height * 4 * sizeof(uint8_t));",
          "840:             s->cur_pic->motion_val_base[i] = av_mallocz((size + 4) * 2 * sizeof(uint16_t));",
          "841:             s->cur_pic->f.motion_val[i]    = s->cur_pic->motion_val_base[i] + 4;",
          "843:         s->cur_pic->f.motion_subsample_log2 = 3;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "964:     }",
          "968:         int end_ok = 1;",
          "",
          "[Removed Lines]",
          "967:     if (s->err_recognition & AV_EF_EXPLODE) {",
          "",
          "[Added Lines]",
          "902:     if (s->avctx->err_recognition & AV_EF_EXPLODE) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1063:             continue;",
          "1065:         if (is_intra_likely)",
          "1067:         else",
          "1069:     }",
          "1073:         for (i = 0; i < s->mb_num; i++) {",
          "1074:             const int mb_xy = s->mb_index2xy[i];",
          "1077:         }",
          "1080:     for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "1084:         for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "1085:             const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1091:             error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1066:             s->current_picture.f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1068:             s->current_picture.f.mb_type[mb_xy] = MB_TYPE_16x16 | MB_TYPE_L0;",
          "1072:     if (!s->last_picture.f.data[0] && !s->next_picture.f.data[0])",
          "1075:             if (!IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "1076:                 s->current_picture.f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1081:         s->mb_x = 0;",
          "1082:         s->mb_y = mb_y;",
          "1083:         ff_init_block_index(s);",
          "1086:             const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "1087:             int dir           = !s->last_picture.f.data[0];",
          "1089:             ff_update_block_index(s);",
          "",
          "[Added Lines]",
          "1001:             s->cur_pic->f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1003:             s->cur_pic->f.mb_type[mb_xy] = MB_TYPE_16x16 | MB_TYPE_L0;",
          "1007:     if (!(s->last_pic && s->last_pic->f.data[0]) &&",
          "1008:         !(s->next_pic && s->next_pic->f.data[0]))",
          "1011:             if (!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "1012:                 s->cur_pic->f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1019:             const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "1020:             const int dir     = !(s->last_pic && s->last_pic->f.data[0]);",
          "1021:             const int mv_dir  = dir ? MV_DIR_BACKWARD : MV_DIR_FORWARD;",
          "1022:             int mv_type;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1097:             if (!(error & ER_AC_ERROR))",
          "1098:                 continue; // undamaged inter",
          "1103:             if (IS_8X8(mb_type)) {",
          "1104:                 int mb_index = mb_x * 2 + mb_y * 2 * s->b8_stride;",
          "1105:                 int j;",
          "1107:                 for (j = 0; j < 4; j++) {",
          "1110:                 }",
          "1111:             } else {",
          "1115:             }",
          "1122:         }",
          "1123:     }",
          "1127:         for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "1131:             for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "1132:                 int       xy      = mb_x * 2 + mb_y * 2 * s->b8_stride;",
          "1133:                 const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1138:                 error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1100:             s->mv_dir     = dir ? MV_DIR_BACKWARD : MV_DIR_FORWARD;",
          "1101:             s->mb_intra   = 0;",
          "1102:             s->mb_skipped = 0;",
          "1106:                 s->mv_type = MV_TYPE_8X8;",
          "1108:                     s->mv[0][j][0] = s->current_picture.f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][0];",
          "1109:                     s->mv[0][j][1] = s->current_picture.f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][1];",
          "1112:                 s->mv_type     = MV_TYPE_16X16;",
          "1113:                 s->mv[0][0][0] = s->current_picture.f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][0];",
          "1114:                 s->mv[0][0][1] = s->current_picture.f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][1];",
          "1117:             s->dsp.clear_blocks(s->block[0]);",
          "1119:             s->mb_x = mb_x;",
          "1120:             s->mb_y = mb_y;",
          "1121:             decode_mb(s, 0 /* FIXME h264 partitioned slices need this set */);",
          "1126:     if (s->pict_type == AV_PICTURE_TYPE_B) {",
          "1128:             s->mb_x = 0;",
          "1129:             s->mb_y = mb_y;",
          "1130:             ff_init_block_index(s);",
          "1134:                 const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "1136:                 ff_update_block_index(s);",
          "",
          "[Added Lines]",
          "1036:                 mv_type = MV_TYPE_8X8;",
          "1038:                     s->mv[0][j][0] = s->cur_pic->f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][0];",
          "1039:                     s->mv[0][j][1] = s->cur_pic->f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][1];",
          "1042:                 mv_type     = MV_TYPE_16X16;",
          "1043:                 s->mv[0][0][0] = s->cur_pic->f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][0];",
          "1044:                 s->mv[0][0][1] = s->cur_pic->f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][1];",
          "1047:             s->decode_mb(s->opaque, 0 /* FIXME h264 partitioned slices need this set */,",
          "1048:                          mv_dir, mv_type, &s->mv, mb_x, mb_y, 0, 0);",
          "1053:     if (s->cur_pic->f.pict_type == AV_PICTURE_TYPE_B) {",
          "1058:                 const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "1059:                 int mv_dir = MV_DIR_FORWARD | MV_DIR_BACKWARD;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1144:                 if (!(error & ER_AC_ERROR))",
          "1145:                     continue; // undamaged inter",
          "1156:                 if (s->pp_time) {",
          "1157:                     int time_pp = s->pp_time;",
          "1158:                     int time_pb = s->pb_time;",
          "1165:                 } else {",
          "1166:                     s->mv[0][0][0] = 0;",
          "1167:                     s->mv[0][0][1] = 0;",
          "",
          "[Removed Lines]",
          "1147:                 s->mv_dir = MV_DIR_FORWARD | MV_DIR_BACKWARD;",
          "1148:                 if (!s->last_picture.f.data[0])",
          "1149:                     s->mv_dir &= ~MV_DIR_FORWARD;",
          "1150:                 if (!s->next_picture.f.data[0])",
          "1151:                     s->mv_dir &= ~MV_DIR_BACKWARD;",
          "1152:                 s->mb_intra   = 0;",
          "1153:                 s->mv_type    = MV_TYPE_16X16;",
          "1154:                 s->mb_skipped = 0;",
          "1160:                     ff_thread_await_progress(&s->next_picture_ptr->f, mb_y, 0);",
          "1161:                     s->mv[0][0][0] = s->next_picture.f.motion_val[0][xy][0] *  time_pb            / time_pp;",
          "1162:                     s->mv[0][0][1] = s->next_picture.f.motion_val[0][xy][1] *  time_pb            / time_pp;",
          "1163:                     s->mv[1][0][0] = s->next_picture.f.motion_val[0][xy][0] * (time_pb - time_pp) / time_pp;",
          "1164:                     s->mv[1][0][1] = s->next_picture.f.motion_val[0][xy][1] * (time_pb - time_pp) / time_pp;",
          "",
          "[Added Lines]",
          "1070:                 if (!(s->last_pic && s->last_pic->f.data[0]))",
          "1071:                     mv_dir &= ~MV_DIR_FORWARD;",
          "1072:                 if (!(s->next_pic && s->next_pic->f.data[0]))",
          "1073:                     mv_dir &= ~MV_DIR_BACKWARD;",
          "1079:                     ff_thread_await_progress(&s->next_pic->f, mb_y, 0);",
          "1081:                     s->mv[0][0][0] = s->next_pic->f.motion_val[0][xy][0] *  time_pb            / time_pp;",
          "1082:                     s->mv[0][0][1] = s->next_pic->f.motion_val[0][xy][1] *  time_pb            / time_pp;",
          "1083:                     s->mv[1][0][0] = s->next_pic->f.motion_val[0][xy][0] * (time_pb - time_pp) / time_pp;",
          "1084:                     s->mv[1][0][1] = s->next_pic->f.motion_val[0][xy][1] * (time_pb - time_pp) / time_pp;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1169:                     s->mv[1][0][1] = 0;",
          "1170:                 }",
          "1176:             }",
          "1177:         }",
          "1178:     } else",
          "",
          "[Removed Lines]",
          "1172:                 s->dsp.clear_blocks(s->block[0]);",
          "1173:                 s->mb_x = mb_x;",
          "1174:                 s->mb_y = mb_y;",
          "1175:                 decode_mb(s, 0);",
          "",
          "[Added Lines]",
          "1092:                 s->decode_mb(s->opaque, 0, mv_dir, MV_TYPE_16X16, &s->mv,",
          "1093:                              mb_x, mb_y, 0, 0);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1188:             int16_t *dc_ptr;",
          "1189:             uint8_t *dest_y, *dest_cb, *dest_cr;",
          "1190:             const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1193:             error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1191:             const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "",
          "[Added Lines]",
          "1109:             const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1204:             dc_ptr = &s->dc_val[0][mb_x * 2 + mb_y * 2 * s->b8_stride];",
          "1205:             for (n = 0; n < 4; n++) {",
          "",
          "[Removed Lines]",
          "1200:             dest_y  = s->current_picture.f.data[0] + mb_x * 16 + mb_y * 16 * s->linesize;",
          "1201:             dest_cb = s->current_picture.f.data[1] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "1202:             dest_cr = s->current_picture.f.data[2] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "",
          "[Added Lines]",
          "1118:             dest_y  = s->cur_pic->f.data[0] + mb_x * 16 + mb_y * 16 * linesize[0];",
          "1119:             dest_cb = s->cur_pic->f.data[1] + mb_x *  8 + mb_y *  8 * linesize[1];",
          "1120:             dest_cr = s->cur_pic->f.data[2] + mb_x *  8 + mb_y *  8 * linesize[2];",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1208:                     int x;",
          "1209:                     for (x = 0; x < 8; x++)",
          "1210:                        dc += dest_y[x + (n & 1) * 8 +",
          "1212:                 }",
          "1213:                 dc_ptr[(n & 1) + (n >> 1) * s->b8_stride] = (dc + 4) >> 3;",
          "1214:             }",
          "",
          "[Removed Lines]",
          "1211:                              (y + (n >> 1) * 8) * s->linesize];",
          "",
          "[Added Lines]",
          "1129:                              (y + (n >> 1) * 8) * linesize[0]];",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1217:             for (y = 0; y < 8; y++) {",
          "1218:                 int x;",
          "1219:                 for (x = 0; x < 8; x++) {",
          "1222:                 }",
          "1223:             }",
          "1224:             s->dc_val[1][mb_x + mb_y * s->mb_stride] = (dcu + 4) >> 3;",
          "",
          "[Removed Lines]",
          "1220:                     dcu += dest_cb[x + y * s->uvlinesize];",
          "1221:                     dcv += dest_cr[x + y * s->uvlinesize];",
          "",
          "[Added Lines]",
          "1138:                     dcu += dest_cb[x + y * linesize[1]];",
          "1139:                     dcv += dest_cr[x + y * linesize[2]];",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1239:         for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "1240:             uint8_t *dest_y, *dest_cb, *dest_cr;",
          "1241:             const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1244:             error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1242:             const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "",
          "[Added Lines]",
          "1160:             const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1248:             if (!(error & ER_AC_ERROR))",
          "1249:                 continue; // undamaged",
          "1255:             put_dc(s, dest_y, dest_cb, dest_cr, mb_x, mb_y);",
          "1256:         }",
          "",
          "[Removed Lines]",
          "1251:             dest_y  = s->current_picture.f.data[0] + mb_x * 16 + mb_y * 16 * s->linesize;",
          "1252:             dest_cb = s->current_picture.f.data[1] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "1253:             dest_cr = s->current_picture.f.data[2] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "",
          "[Added Lines]",
          "1169:             dest_y  = s->cur_pic->f.data[0] + mb_x * 16 + mb_y * 16 * linesize[0];",
          "1170:             dest_cb = s->cur_pic->f.data[1] + mb_x *  8 + mb_y *  8 * linesize[1];",
          "1171:             dest_cr = s->cur_pic->f.data[2] + mb_x *  8 + mb_y *  8 * linesize[2];",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1259:     if (s->avctx->error_concealment & FF_EC_DEBLOCK) {",
          "1275:     }",
          "1277: ec_clean:",
          "",
          "[Removed Lines]",
          "1261:         h_block_filter(s, s->current_picture.f.data[0], s->mb_width * 2,",
          "1262:                        s->mb_height * 2, s->linesize, 1);",
          "1263:         h_block_filter(s, s->current_picture.f.data[1], s->mb_width,",
          "1264:                        s->mb_height  , s->uvlinesize, 0);",
          "1265:         h_block_filter(s, s->current_picture.f.data[2], s->mb_width,",
          "1266:                        s->mb_height  , s->uvlinesize, 0);",
          "1269:         v_block_filter(s, s->current_picture.f.data[0], s->mb_width * 2,",
          "1270:                        s->mb_height * 2, s->linesize, 1);",
          "1271:         v_block_filter(s, s->current_picture.f.data[1], s->mb_width,",
          "1272:                        s->mb_height  , s->uvlinesize, 0);",
          "1273:         v_block_filter(s, s->current_picture.f.data[2], s->mb_width,",
          "1274:                        s->mb_height  , s->uvlinesize, 0);",
          "",
          "[Added Lines]",
          "1179:         h_block_filter(s, s->cur_pic->f.data[0], s->mb_width * 2,",
          "1180:                        s->mb_height * 2, linesize[0], 1);",
          "1181:         h_block_filter(s, s->cur_pic->f.data[1], s->mb_width,",
          "1182:                        s->mb_height, linesize[1], 0);",
          "1183:         h_block_filter(s, s->cur_pic->f.data[2], s->mb_width,",
          "1184:                        s->mb_height, linesize[2], 0);",
          "1187:         v_block_filter(s, s->cur_pic->f.data[0], s->mb_width * 2,",
          "1188:                        s->mb_height * 2, linesize[0], 1);",
          "1189:         v_block_filter(s, s->cur_pic->f.data[1], s->mb_width,",
          "1190:                        s->mb_height, linesize[1], 0);",
          "1191:         v_block_filter(s, s->cur_pic->f.data[2], s->mb_width,",
          "1192:                        s->mb_height, linesize[2], 0);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1280:         const int mb_xy = s->mb_index2xy[i];",
          "1281:         int       error = s->error_status_table[mb_xy];",
          "1284:             (error & (ER_DC_ERROR | ER_MV_ERROR | ER_AC_ERROR))) {",
          "1285:             s->mbskip_table[mb_xy] = 0;",
          "1286:         }",
          "1287:         s->mbintra_table[mb_xy] = 1;",
          "1288:     }",
          "1289: }",
          "",
          "[Removed Lines]",
          "1283:         if (s->pict_type != AV_PICTURE_TYPE_B &&",
          "",
          "[Added Lines]",
          "1201:         if (s->cur_pic->f.pict_type != AV_PICTURE_TYPE_B &&",
          "1207:     s->cur_pic = NULL;",
          "1208:     s->next_pic    = NULL;",
          "1209:     s->last_pic    = NULL;",
          "",
          "---------------"
        ],
        "libavcodec/error_resilience.h||libavcodec/error_resilience.h": [
          "File: libavcodec/error_resilience.h -> libavcodec/error_resilience.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #ifndef AVCODEC_ERROR_RESILIENCE_H",
          "21: #define AVCODEC_ERROR_RESILIENCE_H",
          "24: #define VP_START               1",
          "25: #define ER_AC_ERROR            2",
          "26: #define ER_DC_ERROR            4",
          "27: #define ER_MV_ERROR            8",
          "28: #define ER_AC_END              16",
          "29: #define ER_DC_END              32",
          "30: #define ER_MV_END              64",
          "32: #define ER_MB_ERROR (ER_AC_ERROR|ER_DC_ERROR|ER_MV_ERROR)",
          "33: #define ER_MB_END   (ER_AC_END|ER_DC_END|ER_MV_END)",
          "35: typedef struct ERContext {",
          "36:     AVCodecContext *avctx;",
          "37:     DSPContext *dsp;",
          "39:     int *mb_index2xy;",
          "40:     int mb_num;",
          "41:     int mb_width, mb_height;",
          "42:     int mb_stride;",
          "43:     int b8_stride;",
          "45:     int error_count, error_occurred;",
          "46:     uint8_t *error_status_table;",
          "47:     uint8_t *er_temp_buffer;",
          "48:     int16_t *dc_val[3];",
          "49:     uint8_t *mbskip_table;",
          "50:     uint8_t *mbintra_table;",
          "51:     int mv[2][4][2];",
          "53:     struct Picture *cur_pic;",
          "54:     struct Picture *last_pic;",
          "55:     struct Picture *next_pic;",
          "57:     uint16_t pp_time;",
          "58:     uint16_t pb_time;",
          "59:     int quarter_sample;",
          "60:     int partitioned_frame;",
          "61:     int ref_count;",
          "63:     void (*decode_mb)(void *opaque, int ref, int mv_dir, int mv_type,",
          "64:                       int (*mv)[2][4][2],",
          "65:                       int mb_x, int mb_y, int mb_intra, int mb_skipped);",
          "66:     void *opaque;",
          "67: } ERContext;",
          "69: void ff_er_frame_start(ERContext *s);",
          "70: void ff_er_frame_end(ERContext *s);",
          "71: void ff_er_add_slice(ERContext *s, int startx, int starty, int endx, int endy,",
          "72:                      int status);",
          "",
          "---------------"
        ],
        "libavcodec/h261dec.c||libavcodec/h261dec.c": [
          "File: libavcodec/h261dec.c -> libavcodec/h261dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:     if(ff_MPV_frame_start(s, avctx) < 0)",
          "610:         return -1;",
          "615:     s->mb_x=0;",
          "",
          "[Removed Lines]",
          "612:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "612:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------"
        ],
        "libavcodec/h263dec.c||libavcodec/h263dec.c": [
          "File: libavcodec/h263dec.c -> libavcodec/h263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         if(s->msmpeg4_version){",
          "190:             if(s->resync_mb_y + s->slice_height == s->mb_y){",
          "193:                 return 0;",
          "194:             }",
          "",
          "[Removed Lines]",
          "191:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "191:                 ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:                     if(s->loop_filter)",
          "230:                         ff_h263_loop_filter(s);",
          "234:                     s->padding_bug_score--;",
          "",
          "[Removed Lines]",
          "232:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "[Added Lines]",
          "232:                     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:                     return 0;",
          "243:                 }else if(ret==SLICE_NOEND){",
          "244:                     av_log(s->avctx, AV_LOG_ERROR, \"Slice mismatch at MB: %d\\n\", xy);",
          "246:                     return -1;",
          "247:                 }",
          "248:                 av_log(s->avctx, AV_LOG_ERROR, \"Error at MB: %d\\n\", xy);",
          "251:                 return -1;",
          "252:             }",
          "",
          "[Removed Lines]",
          "245:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x+1, s->mb_y, ER_MB_END&part_mask);",
          "249:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR&part_mask);",
          "",
          "[Added Lines]",
          "245:                     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x+1, s->mb_y, ER_MB_END&part_mask);",
          "249:                 ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR&part_mask);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "325:         else if(left<0){",
          "326:             av_log(s->avctx, AV_LOG_ERROR, \"overreading %d bits\\n\", -left);",
          "327:         }else",
          "330:         return 0;",
          "331:     }",
          "",
          "[Removed Lines]",
          "328:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "328:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:             get_bits_left(&s->gb),",
          "335:             show_bits(&s->gb, 24), s->padding_bug_score);",
          "339:     return -1;",
          "340: }",
          "",
          "[Removed Lines]",
          "337:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "[Added Lines]",
          "337:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "638:             return -1;",
          "639:     }",
          "",
          "[Removed Lines]",
          "641:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "641:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "662:             if(ff_h263_resync(s)<0)",
          "663:                 break;",
          "664:             if (prev_y * s->mb_width + prev_x < s->mb_y * s->mb_width + s->mb_x)",
          "666:         }",
          "668:         if(s->msmpeg4_version<4 && s->h263_pred)",
          "",
          "[Removed Lines]",
          "665:                 s->error_occurred = 1;",
          "",
          "[Added Lines]",
          "665:                 s->er.error_occurred = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "674:     if (s->msmpeg4_version && s->msmpeg4_version<4 && s->pict_type==AV_PICTURE_TYPE_I)",
          "675:         if(!CONFIG_MSMPEG4_DECODER || ff_msmpeg4_decode_ext_header(s, buf_size) < 0){",
          "677:         }",
          "679:     assert(s->bitstream_buffer_size==0);",
          "",
          "[Removed Lines]",
          "676:             s->error_status_table[s->mb_num-1]= ER_MB_ERROR;",
          "",
          "[Added Lines]",
          "676:             s->er.error_status_table[s->mb_num - 1] = ER_MB_ERROR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "710:     }",
          "712: intrax8_decoded:",
          "715:     if (avctx->hwaccel) {",
          "716:         if (avctx->hwaccel->end_frame(avctx) < 0)",
          "",
          "[Removed Lines]",
          "713:     ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "713:     ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     AV_PIX_FMT_NONE",
          "79: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: static void h264_er_decode_mb(void *opaque, int ref, int mv_dir, int mv_type,",
          "82:                               int (*mv)[2][4][2],",
          "83:                               int mb_x, int mb_y, int mb_intra, int mb_skipped)",
          "84: {",
          "85:     H264Context    *h = opaque;",
          "86:     MpegEncContext *s = &h->s;",
          "88:     s->mb_x  = mb_x;",
          "89:     s->mb_y  = mb_y;",
          "90:     h->mb_xy = s->mb_x + s->mb_y * s->mb_stride;",
          "91:     memset(h->non_zero_count_cache, 0, sizeof(h->non_zero_count_cache));",
          "92:     assert(ref >= 0);",
          "97:     if (ref >= h->ref_count[0])",
          "98:         ref = 0;",
          "99:     fill_rectangle(&s->current_picture.f.ref_index[0][4 * h->mb_xy],",
          "100:                    2, 2, 2, ref, 1);",
          "101:     fill_rectangle(&h->ref_cache[0][scan8[0]], 4, 4, 8, ref, 1);",
          "102:     fill_rectangle(h->mv_cache[0][scan8[0]], 4, 4, 8,",
          "103:                    pack16to32(s->mv[0][0][0], s->mv[0][0][1]), 4);",
          "104:     assert(!FRAME_MBAFF);",
          "105:     ff_h264_hl_decode_mb(h);",
          "106: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960:     h->ref_cache[1][scan8[7]  + 1] =",
          "961:     h->ref_cache[1][scan8[13] + 1] = PART_NOT_AVAILABLE;",
          "963:     return 0;",
          "965: fail:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "990:     h->s.er.decode_mb = h264_er_decode_mb;",
          "991:     h->s.er.opaque    = h;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1300:     if (ff_MPV_frame_start(s, s->avctx) < 0)",
          "1301:         return -1;",
          "",
          "[Removed Lines]",
          "1302:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "1332:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2342:     if (!FIELD_PICTURE)",
          "2345:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "2343:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "2373:         ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3068:     if (h->slice_type_nos != AV_PICTURE_TYPE_I) {",
          "3069:         s->last_picture_ptr = &h->ref_list[0][0];",
          "3070:         s->last_picture_ptr->owner2 = s;",
          "3071:         ff_copy_picture(&s->last_picture, s->last_picture_ptr);",
          "3072:     }",
          "3073:     if (h->slice_type_nos == AV_PICTURE_TYPE_B) {",
          "3074:         s->next_picture_ptr = &h->ref_list[1][0];",
          "3075:         s->next_picture_ptr->owner2 = s;",
          "3076:         ff_copy_picture(&s->next_picture, s->next_picture_ptr);",
          "3077:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3101:         s->er.last_pic = s->last_picture_ptr;",
          "3107:         s->er.next_pic = s->next_picture_ptr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3639:                               s->picture_structure == PICT_BOTTOM_FIELD);",
          "3640: }",
          "3642: static int decode_slice(struct AVCodecContext *avctx, void *arg)",
          "3643: {",
          "3644:     H264Context *h = *(void **)arg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3674: static void er_add_slice(H264Context *h, int startx, int starty,",
          "3675:                          int endx, int endy, int status)",
          "3676: {",
          "3677:     ERContext *er = &h->s.er;",
          "3679:     er->ref_count = h->ref_count[0];",
          "3680:     ff_er_add_slice(er, startx, starty, endx, endy, status);",
          "3681: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3687:             if ((s->workaround_bugs & FF_BUG_TRUNCATED) &&",
          "3688:                 h->cabac.bytestream > h->cabac.bytestream_end + 2) {",
          "3690:                                 s->mb_y, ER_MB_END);",
          "3691:                 if (s->mb_x >= lf_x_start)",
          "3692:                     loop_filter(h, lf_x_start, s->mb_x + 1);",
          "",
          "[Removed Lines]",
          "3689:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "[Added Lines]",
          "3730:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3697:                        \"error while decoding MB %d %d, bytestream (%td)\\n\",",
          "3698:                        s->mb_x, s->mb_y,",
          "3699:                        h->cabac.bytestream_end - h->cabac.bytestream);",
          "3701:                                 s->mb_y, ER_MB_ERROR);",
          "3702:                 return -1;",
          "3703:             }",
          "",
          "[Removed Lines]",
          "3700:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "[Added Lines]",
          "3741:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3717:             if (eos || s->mb_y >= s->mb_height) {",
          "3718:                 tprintf(s->avctx, \"slice end %d %d\\n\",",
          "3719:                         get_bits_count(&s->gb), s->gb.size_in_bits);",
          "3721:                                 s->mb_y, ER_MB_END);",
          "3722:                 if (s->mb_x > lf_x_start)",
          "3723:                     loop_filter(h, lf_x_start, s->mb_x);",
          "",
          "[Removed Lines]",
          "3720:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "[Added Lines]",
          "3761:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3744:             if (ret < 0) {",
          "3745:                 av_log(h->s.avctx, AV_LOG_ERROR,",
          "3746:                        \"error while decoding MB %d %d\\n\", s->mb_x, s->mb_y);",
          "3748:                                 s->mb_y, ER_MB_ERROR);",
          "3749:                 return -1;",
          "3750:             }",
          "",
          "[Removed Lines]",
          "3747:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "[Added Lines]",
          "3788:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3764:                             get_bits_count(&s->gb), s->gb.size_in_bits);",
          "3766:                     if (get_bits_left(&s->gb) == 0) {",
          "3768:                                         s->mb_x - 1, s->mb_y,",
          "3769:                                         ER_MB_END);",
          "3771:                         return 0;",
          "3772:                     } else {",
          "3774:                                         s->mb_x - 1, s->mb_y,",
          "3775:                                         ER_MB_END);",
          "",
          "[Removed Lines]",
          "3767:                         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "3773:                         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "",
          "[Added Lines]",
          "3808:                         er_add_slice(h, s->resync_mb_x, s->resync_mb_y,",
          "3814:                         er_add_slice(h, s->resync_mb_x, s->resync_mb_y,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3783:                 tprintf(s->avctx, \"slice end %d %d\\n\",",
          "3784:                         get_bits_count(&s->gb), s->gb.size_in_bits);",
          "3785:                 if (get_bits_left(&s->gb) == 0) {",
          "3787:                                     s->mb_x - 1, s->mb_y,",
          "3788:                                     ER_MB_END);",
          "3789:                     if (s->mb_x > lf_x_start)",
          "",
          "[Removed Lines]",
          "3786:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "",
          "[Added Lines]",
          "3827:                     er_add_slice(h, s->resync_mb_x, s->resync_mb_y,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3792:                     return 0;",
          "3793:                 } else {",
          "3795:                                     s->mb_y, ER_MB_ERROR);",
          "3797:                     return -1;",
          "",
          "[Removed Lines]",
          "3794:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "[Added Lines]",
          "3835:                     er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3823:         for (i = 1; i < context_count; i++) {",
          "3824:             hx                    = h->thread_context[i];",
          "3825:             hx->s.err_recognition = avctx->err_recognition;",
          "3827:         }",
          "3829:         avctx->execute(avctx, decode_slice, h->thread_context,",
          "",
          "[Removed Lines]",
          "3826:             hx->s.error_count     = 0;",
          "",
          "[Added Lines]",
          "3867:             hx->s.er.error_count  = 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3836:         s->droppable         = hx->s.droppable;",
          "3837:         s->picture_structure = hx->s.picture_structure;",
          "3838:         for (i = 1; i < context_count; i++)",
          "3840:     }",
          "3842:     return 0;",
          "",
          "[Removed Lines]",
          "3839:             h->s.error_count += h->thread_context[i]->s.error_count;",
          "",
          "[Added Lines]",
          "3880:             h->s.er.error_count += h->thread_context[i]->s.er.error_count;",
          "",
          "---------------"
        ],
        "libavcodec/intrax8.c||libavcodec/intrax8.c": [
          "File: libavcodec/intrax8.c -> libavcodec/intrax8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:     }",
          "786: error:",
          "788:                         (s->mb_x>>1)-1, (s->mb_y>>1)-1,",
          "789:                         ER_MB_END );",
          "790:     return 0;",
          "",
          "[Removed Lines]",
          "787:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "",
          "[Added Lines]",
          "787:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y,",
          "",
          "---------------"
        ],
        "libavcodec/mpeg12.c||libavcodec/mpeg12.c": [
          "File: libavcodec/mpeg12.c -> libavcodec/mpeg12.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:         if (ff_MPV_frame_start(s, avctx) < 0)",
          "1566:             return -1;",
          "1571:         s->current_picture_ptr->f.repeat_pict = 0;",
          "",
          "[Removed Lines]",
          "1568:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "1568:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1856:     int mb_y            = s->start_mb_y;",
          "1857:     const int field_pic = s->picture_structure != PICT_FRAME;",
          "1861:     for (;;) {",
          "1862:         uint32_t start_code;",
          "",
          "[Removed Lines]",
          "1859:     s->error_count = (3 * (s->end_mb_y - s->start_mb_y) * s->mb_width) >> field_pic;",
          "",
          "[Added Lines]",
          "1859:     s->er.error_count = (3 * (s->end_mb_y - s->start_mb_y) * s->mb_width) >> field_pic;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1866:         emms_c();",
          "1867:         av_dlog(c, \"ret:%d resync:%d/%d mb:%d/%d ts:%d/%d ec:%d\\n\",",
          "1868:                 ret, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y,",
          "1870:         if (ret < 0) {",
          "1871:             if (c->err_recognition & AV_EF_EXPLODE)",
          "1872:                 return ret;",
          "1873:             if (s->resync_mb_x >= 0 && s->resync_mb_y >= 0)",
          "1875:         } else {",
          "1877:         }",
          "1879:         if (s->mb_y == s->end_mb_y)",
          "",
          "[Removed Lines]",
          "1869:                 s->start_mb_y, s->end_mb_y, s->error_count);",
          "1874:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "1876:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "[Added Lines]",
          "1869:                 s->start_mb_y, s->end_mb_y, s->er.error_count);",
          "1874:                 ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "1876:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1916:         s->current_picture_ptr->f.qscale_type = FF_QSCALE_TYPE_MPEG2;",
          "1920:         ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "1918:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1918:         ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2211:                     avctx->execute(avctx, slice_decode_thread,  &s2->thread_context[0], NULL, s->slice_count, sizeof(void*));",
          "2212:                     for (i = 0; i < s->slice_count; i++)",
          "2214:                 }",
          "2216:                 if (CONFIG_MPEG_VDPAU_DECODER && avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU)",
          "",
          "[Removed Lines]",
          "2213:                         s2->error_count += s2->thread_context[i]->error_count;",
          "",
          "[Added Lines]",
          "2213:                         s2->er.error_count += s2->thread_context[i]->er.error_count;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2252:                                s2->thread_context, NULL,",
          "2253:                                s->slice_count, sizeof(void*));",
          "2254:                 for (i = 0; i < s->slice_count; i++)",
          "2256:                 s->slice_count = 0;",
          "2257:             }",
          "2258:             if (last_code == 0 || last_code == SLICE_MIN_START_CODE) {",
          "",
          "[Removed Lines]",
          "2255:                     s2->error_count += s2->thread_context[i]->error_count;",
          "",
          "[Added Lines]",
          "2255:                     s2->er.error_count += s2->thread_context[i]->er.error_count;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2411:                         if (avctx->err_recognition & AV_EF_EXPLODE)",
          "2412:                             return ret;",
          "2413:                         if (s2->resync_mb_x >= 0 && s2->resync_mb_y >= 0)",
          "2415:                     } else {",
          "2417:                     }",
          "2418:                 }",
          "2419:             }",
          "",
          "[Removed Lines]",
          "2414:                             ff_er_add_slice(s2, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x, s2->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "2416:                         ff_er_add_slice(s2, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x-1, s2->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "[Added Lines]",
          "2414:                             ff_er_add_slice(&s2->er, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x, s2->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "2416:                         ff_er_add_slice(&s2->er, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x-1, s2->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c": [
          "File: libavcodec/mpeg4videodec.c -> libavcodec/mpeg4videodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:     mb_num= mpeg4_decode_partition_a(s);",
          "798:     if(mb_num<0){",
          "800:         return -1;",
          "801:     }",
          "803:     if(s->resync_mb_x + s->resync_mb_y*s->mb_width + mb_num > s->mb_num){",
          "804:         av_log(s->avctx, AV_LOG_ERROR, \"slice below monitor ...\\n\");",
          "806:         return -1;",
          "807:     }",
          "",
          "[Removed Lines]",
          "799:         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "805:         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "",
          "[Added Lines]",
          "799:         ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "805:         ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "823:             return -1;",
          "824:         }",
          "825:     }",
          "828:     if( mpeg4_decode_partition_b(s, mb_num) < 0){",
          "829:         if(s->pict_type==AV_PICTURE_TYPE_P)",
          "831:         return -1;",
          "832:     }else{",
          "833:         if(s->pict_type==AV_PICTURE_TYPE_P)",
          "835:     }",
          "837:     return 0;",
          "",
          "[Removed Lines]",
          "826:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, part_a_end);",
          "830:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_DC_ERROR);",
          "834:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_DC_END);",
          "",
          "[Added Lines]",
          "826:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, part_a_end);",
          "830:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_DC_ERROR);",
          "834:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_DC_END);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
          "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     AV_PIX_FMT_NONE",
          "148: };",
          "150: const uint8_t *avpriv_mpv_find_start_code(const uint8_t *restrict p,",
          "151:                                           const uint8_t *end,",
          "152:                                           uint32_t * restrict state)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: static void mpeg_er_decode_mb(void *opaque, int ref, int mv_dir, int mv_type,",
          "151:                               int (*mv)[2][4][2],",
          "152:                               int mb_x, int mb_y, int mb_intra, int mb_skipped)",
          "153: {",
          "154:     MpegEncContext *s = opaque;",
          "156:     s->mv_dir     = mv_dir;",
          "157:     s->mv_type    = mv_type;",
          "158:     s->mb_intra   = mb_intra;",
          "159:     s->mb_skipped = mb_skipped;",
          "160:     s->mb_x       = mb_x;",
          "161:     s->mb_y       = mb_y;",
          "162:     memcpy(s->mv, mv, sizeof(*mv));",
          "164:     ff_init_block_index(s);",
          "165:     ff_update_block_index(s);",
          "167:     s->dsp.clear_blocks(s->block[0]);",
          "169:     s->dest[0] = s->current_picture.f.data[0] + (s->mb_y *  16                       * s->linesize)   + s->mb_x *  16;",
          "170:     s->dest[1] = s->current_picture.f.data[1] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "171:     s->dest[2] = s->current_picture.f.data[2] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "173:     assert(ref == 0);",
          "174:     ff_MPV_decode_mb(s, s->block);",
          "175: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:     ff_MPV_common_defaults(s);",
          "724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753: static int init_er(MpegEncContext *s)",
          "754: {",
          "755:     ERContext *er = &s->er;",
          "756:     int mb_array_size = s->mb_height * s->mb_stride;",
          "757:     int i;",
          "759:     er->avctx       = s->avctx;",
          "760:     er->dsp         = &s->dsp;",
          "762:     er->mb_index2xy = s->mb_index2xy;",
          "763:     er->mb_num      = s->mb_num;",
          "764:     er->mb_width    = s->mb_width;",
          "765:     er->mb_height   = s->mb_height;",
          "766:     er->mb_stride   = s->mb_stride;",
          "767:     er->b8_stride   = s->b8_stride;",
          "769:     er->er_temp_buffer     = av_malloc(s->mb_height * s->mb_stride);",
          "770:     er->error_status_table = av_mallocz(mb_array_size);",
          "771:     if (!er->er_temp_buffer || !er->error_status_table)",
          "772:         goto fail;",
          "774:     er->mbskip_table  = s->mbskip_table;",
          "775:     er->mbintra_table = s->mbintra_table;",
          "777:     for (i = 0; i < FF_ARRAY_ELEMS(s->dc_val); i++)",
          "778:         er->dc_val[i] = s->dc_val[i];",
          "780:     er->decode_mb = mpeg_er_decode_mb;",
          "781:     er->opaque    = s;",
          "783:     return 0;",
          "784: fail:",
          "785:     av_freep(&er->er_temp_buffer);",
          "786:     av_freep(&er->error_status_table);",
          "787:     return AVERROR(ENOMEM);",
          "788: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "802:     }",
          "809:     if (s->codec_id == AV_CODEC_ID_MPEG4 ||",
          "810:         (s->flags & CODEC_FLAG_INTERLACED_ME)) {",
          "",
          "[Removed Lines]",
          "804:     FF_ALLOC_OR_GOTO(s->avctx, s->er_temp_buffer,",
          "805:                      mb_array_size * sizeof(uint8_t), fail);",
          "806:     FF_ALLOCZ_OR_GOTO(s->avctx, s->error_status_table,",
          "807:                       mb_array_size * sizeof(uint8_t), fail);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "873:                     2 * EDGE_WIDTH) * s->mb_height * 16 + 2 * EDGE_WIDTH);",
          "874:     }",
          "877: fail:",
          "878:     return AVERROR(ENOMEM);",
          "879: }",
          "",
          "[Removed Lines]",
          "876:     return 0;",
          "",
          "[Added Lines]",
          "935:     return init_er(s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1055:     av_freep(&s->mbskip_table);",
          "1059:     av_freep(&s->mb_index2xy);",
          "1060:     av_freep(&s->lambda_table);",
          "1061:     av_freep(&s->cplx_tab);",
          "",
          "[Removed Lines]",
          "1057:     av_freep(&s->error_status_table);",
          "1058:     av_freep(&s->er_temp_buffer);",
          "",
          "[Added Lines]",
          "1116:     av_freep(&s->er.error_status_table);",
          "1117:     av_freep(&s->er.er_temp_buffer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1590:     if (CONFIG_MPEG_XVMC_DECODER && s->avctx->xvmc_acceleration) {",
          "1591:         ff_xvmc_field_end(s);",
          "1593:               !s->avctx->hwaccel &&",
          "1594:               !(s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU) &&",
          "1595:               s->unrestricted_mv &&",
          "",
          "[Removed Lines]",
          "1592:    } else if ((s->error_count || s->encoding) &&",
          "",
          "[Added Lines]",
          "1651:    } else if ((s->er.error_count || s->encoding) &&",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2793: void ff_MPV_report_decode_progress(MpegEncContext *s)",
          "2794: {",
          "2796:         ff_thread_report_progress(&s->current_picture_ptr->f, s->mb_y, 0);",
          "2797: }",
          "",
          "[Removed Lines]",
          "2795:     if (s->pict_type != AV_PICTURE_TYPE_B && !s->partitioned_frame && !s->error_occurred)",
          "",
          "[Added Lines]",
          "2854:     if (s->pict_type != AV_PICTURE_TYPE_B && !s->partitioned_frame && !s->er.error_occurred)",
          "2858: void ff_mpeg_er_frame_start(MpegEncContext *s)",
          "2859: {",
          "2860:     ERContext *er = &s->er;",
          "2862:     er->cur_pic  = s->current_picture_ptr;",
          "2863:     er->last_pic = s->last_picture_ptr;",
          "2864:     er->next_pic = s->next_picture_ptr;",
          "2866:     er->pp_time           = s->pp_time;",
          "2867:     er->pb_time           = s->pb_time;",
          "2868:     er->quarter_sample    = s->quarter_sample;",
          "2869:     er->partitioned_frame = s->partitioned_frame;",
          "2871:     ff_er_frame_start(er);",
          "2872: }",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h": [
          "File: libavcodec/mpegvideo.h -> libavcodec/mpegvideo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"avcodec.h\"",
          "32: #include \"dsputil.h\"",
          "33: #include \"get_bits.h\"",
          "34: #include \"put_bits.h\"",
          "35: #include \"ratecontrol.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"error_resilience.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:     int last_bits; ///< temp var used for calculating the above vars",
          "500:     int resync_mb_x;                 ///< x position of last resync marker",
          "501:     int resync_mb_y;                 ///< y position of last resync marker",
          "502:     GetBitContext last_resync_gb;    ///< used to search for the next resync marker",
          "",
          "[Removed Lines]",
          "487:     int error_count, error_occurred;",
          "488:     uint8_t *error_status_table;       ///< table of the error status of each MB",
          "489: #define VP_START            1          ///< current MB is the first after a resync marker",
          "490: #define ER_AC_ERROR            2",
          "491: #define ER_DC_ERROR            4",
          "492: #define ER_MV_ERROR            8",
          "493: #define ER_AC_END              16",
          "494: #define ER_DC_END              32",
          "495: #define ER_MV_END              64",
          "497: #define ER_MB_ERROR (ER_AC_ERROR|ER_DC_ERROR|ER_MV_ERROR)",
          "498: #define ER_MB_END   (ER_AC_END|ER_DC_END|ER_MV_END)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "701:     int mpv_flags;      ///< flags set by private options",
          "702:     int quantizer_noise_shaping;",
          "708:     float *cplx_tab, *bits_tab;",
          "712:     int context_reinit;",
          "713: } MpegEncContext;",
          "715: #define REBASE_PICTURE(pic, new_ctx, old_ctx)             \\",
          "",
          "[Removed Lines]",
          "705:     uint8_t *er_temp_buffer;",
          "",
          "[Added Lines]",
          "699:     ERContext er;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "787: const uint8_t *avpriv_mpv_find_start_code(const uint8_t *p, const uint8_t *end, uint32_t *state);",
          "788: void ff_set_qscale(MpegEncContext * s, int qscale);",
          "794: int ff_dct_common_init(MpegEncContext *s);",
          "795: void ff_convert_matrix(DSPContext *dsp, int (*qmat)[64], uint16_t (*qmat16)[2][64],",
          "",
          "[Removed Lines]",
          "790: void ff_er_frame_start(MpegEncContext *s);",
          "791: void ff_er_frame_end(MpegEncContext *s);",
          "792: void ff_er_add_slice(MpegEncContext *s, int startx, int starty, int endx, int endy, int status);",
          "",
          "[Added Lines]",
          "777: void ff_mpeg_er_frame_start(MpegEncContext *s);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo_enc.c||libavcodec/mpegvideo_enc.c": [
          "File: libavcodec/mpegvideo_enc.c -> libavcodec/mpegvideo_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3037:     MERGE(b_count);",
          "3038:     MERGE(skip_count);",
          "3039:     MERGE(misc_bits);",
          "3041:     MERGE(padding_bug_score);",
          "3042:     MERGE(current_picture.f.error[0]);",
          "3043:     MERGE(current_picture.f.error[1]);",
          "",
          "[Removed Lines]",
          "3040:     MERGE(error_count);",
          "",
          "[Added Lines]",
          "3040:     MERGE(er.error_count);",
          "",
          "---------------"
        ],
        "libavcodec/mss2.c||libavcodec/mss2.c": [
          "File: libavcodec/mss2.c -> libavcodec/mss2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:         return ret;",
          "407:     }",
          "411:     v->bits = buf_size * 8;",
          "",
          "[Removed Lines]",
          "409:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "409:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:     ff_vc1_decode_blocks(v);",
          "424:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "422:     ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "422:     ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/rv10.c||libavcodec/rv10.c": [
          "File: libavcodec/rv10.c -> libavcodec/rv10.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:     if ((s->mb_x == 0 && s->mb_y == 0) || s->current_picture_ptr==NULL) {",
          "530:         if(s->current_picture_ptr){ //FIXME write parser so we always have complete frames?",
          "532:             ff_MPV_frame_end(s);",
          "533:             s->mb_x= s->mb_y = s->resync_mb_x = s->resync_mb_y= 0;",
          "534:         }",
          "535:         if(ff_MPV_frame_start(s, avctx) < 0)",
          "536:             return -1;",
          "538:     } else {",
          "539:         if (s->current_picture_ptr->f.pict_type != s->pict_type) {",
          "540:             av_log(s->avctx, AV_LOG_ERROR, \"Slice type mismatch\\n\");",
          "",
          "[Removed Lines]",
          "531:             ff_er_frame_end(s);",
          "537:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "531:             ff_er_frame_end(&s->er);",
          "537:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "626:         if(ret == SLICE_END) break;",
          "627:     }",
          "631:     return active_bits_size;",
          "632: }",
          "",
          "[Removed Lines]",
          "629:     ff_er_add_slice(s, start_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "629:     ff_er_add_slice(&s->er, start_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "697:     }",
          "699:     if(s->current_picture_ptr != NULL && s->mb_y>=s->mb_height){",
          "701:         ff_MPV_frame_end(s);",
          "703:         if (s->pict_type == AV_PICTURE_TYPE_B || s->low_delay) {",
          "",
          "[Removed Lines]",
          "700:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "700:         ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/rv34.c||libavcodec/rv34.c": [
          "File: libavcodec/rv34.c -> libavcodec/rv34.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1428:         else",
          "1429:             res = rv34_decode_intra_macroblock(r, r->intra_types + s->mb_x * 4 + 4);",
          "1430:         if(res < 0){",
          "1432:             return -1;",
          "1433:         }",
          "1434:         if (++s->mb_x == s->mb_width) {",
          "",
          "[Removed Lines]",
          "1431:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "1431:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1451:             s->first_slice_line=0;",
          "1452:         s->mb_num_left--;",
          "1453:     }",
          "1456:     return s->mb_y == s->mb_height;",
          "1457: }",
          "",
          "[Removed Lines]",
          "1454:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "1454:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1564:     MpegEncContext *s = &r->s;",
          "1565:     int got_picture = 0;",
          "1568:     ff_MPV_frame_end(s);",
          "1569:     s->mb_num_left = 0;",
          "",
          "[Removed Lines]",
          "1567:     ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1567:     ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1646:         if (s->mb_num_left > 0) {",
          "1647:             av_log(avctx, AV_LOG_ERROR, \"New frame but still %d MB left.\",",
          "1648:                    s->mb_num_left);",
          "1650:             ff_MPV_frame_end(s);",
          "1651:         }",
          "",
          "[Removed Lines]",
          "1649:             ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1649:             ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1667:         s->pict_type = si.type ? si.type : AV_PICTURE_TYPE_I;",
          "1668:         if (ff_MPV_frame_start(s, s->avctx) < 0)",
          "1669:             return -1;",
          "1671:         if (!r->tmp_b_block_base) {",
          "1672:             int i;",
          "",
          "[Removed Lines]",
          "1670:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "1670:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1766:             av_log(avctx, AV_LOG_INFO, \"marking unfished frame as finished\\n\");",
          "1770:             ff_MPV_frame_end(s);",
          "1771:             s->mb_num_left = 0;",
          "1772:             ff_thread_report_progress(&s->current_picture_ptr->f, INT_MAX, 0);",
          "",
          "[Removed Lines]",
          "1769:             ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1769:             ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/vc1dec.c||libavcodec/vc1dec.c": [
          "File: libavcodec/vc1dec.c -> libavcodec/vc1dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4434:             if (v->s.loop_filter) vc1_loop_filter_iblk(v, v->pq);",
          "4436:             if (get_bits_count(&s->gb) > v->bits) {",
          "4438:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i\\n\",",
          "4439:                        get_bits_count(&s->gb), v->bits);",
          "4440:                 return;",
          "",
          "[Removed Lines]",
          "4437:                 ff_er_add_slice(s, 0, 0, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4437:                 ff_er_add_slice(&s->er, 0, 0, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4456: }",
          "",
          "[Removed Lines]",
          "4455:     ff_er_add_slice(s, 0, 0, s->mb_width - 1, s->mb_height - 1, ER_MB_END);",
          "",
          "[Added Lines]",
          "4455:     ff_er_add_slice(&s->er, 0, 0, s->mb_width - 1, s->mb_height - 1, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4563:             if (get_bits_count(&s->gb) > v->bits) {",
          "4566:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i\\n\",",
          "4567:                        get_bits_count(&s->gb), v->bits);",
          "4568:                 return;",
          "",
          "[Removed Lines]",
          "4565:                 ff_er_add_slice(s, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4565:                 ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4586:     }",
          "4587:     if (v->s.loop_filter)",
          "4588:         ff_draw_horiz_band(s, (s->end_mb_y-1)*16, 16);",
          "4590:                     (s->end_mb_y << v->field_mode) - 1, ER_MB_END);",
          "4591: }",
          "",
          "[Removed Lines]",
          "4589:     ff_er_add_slice(s, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "[Added Lines]",
          "4589:     ff_er_add_slice(&s->er, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4638:                 vc1_apply_p_loop_filter(v);",
          "4639:             if (get_bits_count(&s->gb) > v->bits || get_bits_count(&s->gb) < 0) {",
          "4642:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i at %ix%i\\n\",",
          "4643:                        get_bits_count(&s->gb), v->bits, s->mb_x, s->mb_y);",
          "4644:                 return;",
          "",
          "[Removed Lines]",
          "4641:                 ff_er_add_slice(s, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4641:                 ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4661:     }",
          "4662:     if (s->end_mb_y >= s->start_mb_y)",
          "4663:         ff_draw_horiz_band(s, (s->end_mb_y - 1) * 16, 16);",
          "4665:                     (s->end_mb_y << v->field_mode) - 1, ER_MB_END);",
          "4666: }",
          "",
          "[Removed Lines]",
          "4664:     ff_er_add_slice(s, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "[Added Lines]",
          "4664:     ff_er_add_slice(&s->er, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4707:                 vc1_decode_b_mb(v);",
          "4708:             if (get_bits_count(&s->gb) > v->bits || get_bits_count(&s->gb) < 0) {",
          "4711:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i at %ix%i\\n\",",
          "4712:                        get_bits_count(&s->gb), v->bits, s->mb_x, s->mb_y);",
          "4713:                 return;",
          "",
          "[Removed Lines]",
          "4710:                 ff_er_add_slice(s, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4710:                 ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4722:     }",
          "4723:     if (v->s.loop_filter)",
          "4724:         ff_draw_horiz_band(s, (s->end_mb_y - 1) * 16, 16);",
          "4726:                     (s->end_mb_y << v->field_mode) - 1, ER_MB_END);",
          "4727: }",
          "",
          "[Removed Lines]",
          "4725:     ff_er_add_slice(s, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "[Added Lines]",
          "4725:     ff_er_add_slice(&s->er, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4730: {",
          "4731:     MpegEncContext *s = &v->s;",
          "4734:     s->first_slice_line = 1;",
          "4735:     for (s->mb_y = s->start_mb_y; s->mb_y < s->end_mb_y; s->mb_y++) {",
          "4736:         s->mb_x = 0;",
          "",
          "[Removed Lines]",
          "4733:     ff_er_add_slice(s, 0, s->start_mb_y, s->mb_width - 1, s->end_mb_y - 1, ER_MB_END);",
          "",
          "[Added Lines]",
          "4733:     ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_width - 1, s->end_mb_y - 1, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5558:         if (avctx->hwaccel->end_frame(avctx) < 0)",
          "5559:             goto err;",
          "5560:     } else {",
          "5563:         v->bits = buf_size * 8;",
          "5564:         v->end_mb_x = s->mb_width;",
          "",
          "[Removed Lines]",
          "5561:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "5561:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5635:                 get_bits_count(&s->gb), s->gb.size_in_bits);",
          "5639:     }",
          "5641:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "5638:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "5638:         ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fad547cefb4d2f3ed3d764b547ee16cf399e477",
      "candidate_info": {
        "commit_hash": "1fad547cefb4d2f3ed3d764b547ee16cf399e477",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1fad547cefb4d2f3ed3d764b547ee16cf399e477",
        "files": [
          "libavcodec/error_resilience.c",
          "libavcodec/error_resilience.h",
          "libavcodec/h261dec.c",
          "libavcodec/h263dec.c",
          "libavcodec/h264.c",
          "libavcodec/intrax8.c",
          "libavcodec/mpeg12.c",
          "libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h",
          "libavcodec/mpegvideo_enc.c",
          "libavcodec/mss2.c",
          "libavcodec/rv10.c",
          "libavcodec/rv34.c",
          "libavcodec/vc1dec.c"
        ],
        "message": "Merge commit '54974c62982ae827becdbdb9b620b7ba75d079a0'\n\n* commit '54974c62982ae827becdbdb9b620b7ba75d079a0':\n  error_resilience: decouple ER from MpegEncContext\n\nConflicts:\n\tlibavcodec/error_resilience.c\n\tlibavcodec/h263dec.c\n\tlibavcodec/h264.c\n\tlibavcodec/mpegvideo.c\n\tlibavcodec/vc1dec.c\n\nMerged-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/error_resilience.c||libavcodec/error_resilience.c",
          "libavcodec/error_resilience.h||libavcodec/error_resilience.h",
          "libavcodec/h261dec.c||libavcodec/h261dec.c",
          "libavcodec/h263dec.c||libavcodec/h263dec.c",
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/intrax8.c||libavcodec/intrax8.c",
          "libavcodec/mpeg12.c||libavcodec/mpeg12.c",
          "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h",
          "libavcodec/mpegvideo_enc.c||libavcodec/mpegvideo_enc.c",
          "libavcodec/mss2.c||libavcodec/mss2.c",
          "libavcodec/rv10.c||libavcodec/rv10.c",
          "libavcodec/rv34.c||libavcodec/rv34.c",
          "libavcodec/vc1dec.c||libavcodec/vc1dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/error_resilience.c||libavcodec/error_resilience.c": [
          "File: libavcodec/error_resilience.c -> libavcodec/error_resilience.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"avcodec.h\"",
          "31: #include \"dsputil.h\"",
          "32: #include \"mpegvideo.h\"",
          "34: #include \"rectangle.h\"",
          "35: #include \"thread.h\"",
          "92: {",
          "95:         av_assert0(s->quarter_sample);",
          "98:     } else {",
          "",
          "[Removed Lines]",
          "33: #include \"h264.h\"",
          "41: #undef mb_intra",
          "43: static void decode_mb(MpegEncContext *s, int ref)",
          "44: {",
          "45:     s->dest[0] = s->current_picture.f.data[0] + (s->mb_y *  16                       * s->linesize)   + s->mb_x *  16;",
          "46:     s->dest[1] = s->current_picture.f.data[1] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "47:     s->dest[2] = s->current_picture.f.data[2] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "49:     ff_init_block_index(s);",
          "50:     ff_update_block_index(s);",
          "51:     s->dest[1] += (16 >> s->chroma_x_shift) - 8;",
          "52:     s->dest[2] += (16 >> s->chroma_x_shift) - 8;",
          "54:     if (CONFIG_H264_DECODER && s->codec_id == AV_CODEC_ID_H264) {",
          "55:         H264Context *h = (void*)s;",
          "56:         h->mb_xy = s->mb_x + s->mb_y * s->mb_stride;",
          "57:         memset(h->non_zero_count_cache, 0, sizeof(h->non_zero_count_cache));",
          "58:         av_assert1(ref >= 0);",
          "63:         if (ref >= h->ref_count[0])",
          "64:             ref = 0;",
          "65:         if (!h->ref_list[0][ref].f.data[0]) {",
          "66:             av_log(s->avctx, AV_LOG_DEBUG, \"Reference not available for error concealing\\n\");",
          "67:             ref = 0;",
          "68:         }",
          "69:         if ((h->ref_list[0][ref].f.reference&3) != 3) {",
          "70:             av_log(s->avctx, AV_LOG_DEBUG, \"Reference invalid\\n\");",
          "71:             return;",
          "72:         }",
          "73:         fill_rectangle(&s->current_picture.f.ref_index[0][4 * h->mb_xy],",
          "74:                        2, 2, 2, ref, 1);",
          "75:         fill_rectangle(&h->ref_cache[0][scan8[0]], 4, 4, 8, ref, 1);",
          "76:         fill_rectangle(h->mv_cache[0][scan8[0]], 4, 4, 8,",
          "77:                        pack16to32(s->mv[0][0][0], s->mv[0][0][1]), 4);",
          "78:         h->mb_mbaff =",
          "79:         h->mb_field_decoding_flag = 0;",
          "80:         ff_h264_hl_decode_mb(h);",
          "81:     } else {",
          "82:         assert(ref == 0);",
          "83:         ff_MPV_decode_mb(s, s->block);",
          "84:     }",
          "85: }",
          "91: static void set_mv_strides(MpegEncContext *s, int *mv_step, int *stride)",
          "93:     if (s->codec_id == AV_CODEC_ID_H264) {",
          "94:         H264Context *h = (void*)s;",
          "",
          "[Added Lines]",
          "32: #include \"error_resilience.h\"",
          "41: static void set_mv_strides(ERContext *s, int *mv_step, int *stride)",
          "43:     if (s->avctx->codec_id == AV_CODEC_ID_H264) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:                    uint8_t *dest_cr, int mb_x, int mb_y)",
          "109: {",
          "110:     int dc, dcu, dcv, y, i;",
          "111:     for (i = 0; i < 4; i++) {",
          "112:         dc = s->dc_val[0][mb_x * 2 + (i &  1) + (mb_y * 2 + (i >> 1)) * s->b8_stride];",
          "",
          "[Removed Lines]",
          "107: static void put_dc(MpegEncContext *s, uint8_t *dest_y, uint8_t *dest_cb,",
          "",
          "[Added Lines]",
          "56: static void put_dc(ERContext *s, uint8_t *dest_y, uint8_t *dest_cb,",
          "59:     int *linesize = s->cur_pic->f.linesize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:         for (y = 0; y < 8; y++) {",
          "118:             int x;",
          "119:             for (x = 0; x < 8; x++)",
          "121:         }",
          "122:     }",
          "123:     dcu = s->dc_val[1][mb_x + mb_y * s->mb_stride];",
          "",
          "[Removed Lines]",
          "120:                 dest_y[x + (i &  1) * 8 + (y + (i >> 1) * 8) * s->linesize] = dc / 8;",
          "",
          "[Added Lines]",
          "70:                 dest_y[x + (i &  1) * 8 + (y + (i >> 1) * 8) * linesize[0]] = dc / 8;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     for (y = 0; y < 8; y++) {",
          "134:         int x;",
          "135:         for (x = 0; x < 8; x++) {",
          "138:         }",
          "139:     }",
          "140: }",
          "",
          "[Removed Lines]",
          "136:             dest_cb[x + y * s->uvlinesize] = dcu / 8;",
          "137:             dest_cr[x + y * s->uvlinesize] = dcv / 8;",
          "",
          "[Added Lines]",
          "86:             dest_cb[x + y * linesize[1]] = dcu / 8;",
          "87:             dest_cr[x + y * linesize[2]] = dcv / 8;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:                      int h, int stride, int is_luma)",
          "185: {",
          "186:     int b_x, b_y;",
          "",
          "[Removed Lines]",
          "183: static void guess_dc(MpegEncContext *s, int16_t *dc, int w,",
          "",
          "[Added Lines]",
          "133: static void guess_dc(ERContext *s, int16_t *dc, int w,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:         for(b_x=0; b_x<w; b_x++){",
          "199:             int mb_index_j= (b_x>>is_luma) + (b_y>>is_luma)*s->mb_stride;",
          "200:             int error_j= s->error_status_table[mb_index_j];",
          "202:             if(intra_j==0 || !(error_j&ER_DC_ERROR)){",
          "203:                 color= dc[b_x + b_y*stride];",
          "204:                 distance= b_x;",
          "",
          "[Removed Lines]",
          "201:             int intra_j = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "151:             int intra_j = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:         for(b_x=w-1; b_x>=0; b_x--){",
          "212:             int mb_index_j= (b_x>>is_luma) + (b_y>>is_luma)*s->mb_stride;",
          "213:             int error_j= s->error_status_table[mb_index_j];",
          "215:             if(intra_j==0 || !(error_j&ER_DC_ERROR)){",
          "216:                 color= dc[b_x + b_y*stride];",
          "217:                 distance= b_x;",
          "",
          "[Removed Lines]",
          "214:             int intra_j = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "164:             int intra_j = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "226:         for(b_y=0; b_y<h; b_y++){",
          "227:             int mb_index_j= (b_x>>is_luma) + (b_y>>is_luma)*s->mb_stride;",
          "228:             int error_j= s->error_status_table[mb_index_j];",
          "230:             if(intra_j==0 || !(error_j&ER_DC_ERROR)){",
          "231:                 color= dc[b_x + b_y*stride];",
          "232:                 distance= b_y;",
          "",
          "[Removed Lines]",
          "229:             int intra_j = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "179:             int intra_j = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "239:         for(b_y=h-1; b_y>=0; b_y--){",
          "240:             int mb_index_j= (b_x>>is_luma) + (b_y>>is_luma)*s->mb_stride;",
          "241:             int error_j= s->error_status_table[mb_index_j];",
          "243:             if(intra_j==0 || !(error_j&ER_DC_ERROR)){",
          "244:                 color= dc[b_x + b_y*stride];",
          "245:                 distance= b_y;",
          "",
          "[Removed Lines]",
          "242:             int intra_j = IS_INTRA(s->current_picture.f.mb_type[mb_index_j]);",
          "",
          "[Added Lines]",
          "192:             int intra_j = IS_INTRA(s->cur_pic->f.mb_type[mb_index_j]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "256:             mb_index = (b_x >> is_luma) + (b_y >> is_luma) * s->mb_stride;",
          "257:             error    = s->error_status_table[mb_index];",
          "260:                 continue; // inter",
          "261:             if (!(error & ER_DC_ERROR))",
          "262:                 continue; // dc-ok",
          "",
          "[Removed Lines]",
          "259:             if (IS_INTER(s->current_picture.f.mb_type[mb_index]))",
          "",
          "[Added Lines]",
          "209:             if (IS_INTER(s->cur_pic->f.mb_type[mb_index]))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "287:                            int h, int stride, int is_luma)",
          "288: {",
          "289:     int b_x, b_y, mvx_stride, mvy_stride;",
          "",
          "[Removed Lines]",
          "286: static void h_block_filter(MpegEncContext *s, uint8_t *dst, int w,",
          "",
          "[Added Lines]",
          "236: static void h_block_filter(ERContext *s, uint8_t *dst, int w,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "297:             int y;",
          "298:             int left_status  = s->error_status_table[( b_x      >> is_luma) + (b_y >> is_luma) * s->mb_stride];",
          "299:             int right_status = s->error_status_table[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s->mb_stride];",
          "302:             int left_damage  = left_status & ER_MB_ERROR;",
          "303:             int right_damage = right_status & ER_MB_ERROR;",
          "304:             int offset       = b_x * 8 + b_y * stride * 8;",
          "307:             if (!(left_damage || right_damage))",
          "308:                 continue; // both undamaged",
          "309:             if ((!left_intra) && (!right_intra) &&",
          "",
          "[Removed Lines]",
          "300:             int left_intra   = IS_INTRA(s->current_picture.f.mb_type[( b_x      >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "301:             int right_intra  = IS_INTRA(s->current_picture.f.mb_type[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "305:             int16_t *left_mv  = s->current_picture.f.motion_val[0][mvy_stride * b_y + mvx_stride *  b_x];",
          "306:             int16_t *right_mv = s->current_picture.f.motion_val[0][mvy_stride * b_y + mvx_stride * (b_x + 1)];",
          "",
          "[Added Lines]",
          "250:             int left_intra   = IS_INTRA(s->cur_pic->f.mb_type[( b_x      >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "251:             int right_intra  = IS_INTRA(s->cur_pic->f.mb_type[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s->mb_stride]);",
          "255:             int16_t *left_mv  = s->cur_pic->f.motion_val[0][mvy_stride * b_y + mvx_stride *  b_x];",
          "256:             int16_t *right_mv = s->cur_pic->f.motion_val[0][mvy_stride * b_y + mvx_stride * (b_x + 1)];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "355:                            int stride, int is_luma)",
          "356: {",
          "357:     int b_x, b_y, mvx_stride, mvy_stride;",
          "",
          "[Removed Lines]",
          "354: static void v_block_filter(MpegEncContext *s, uint8_t *dst, int w, int h,",
          "",
          "[Added Lines]",
          "304: static void v_block_filter(ERContext *s, uint8_t *dst, int w, int h,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "365:             int x;",
          "366:             int top_status    = s->error_status_table[(b_x >> is_luma) +  (b_y      >> is_luma) * s->mb_stride];",
          "367:             int bottom_status = s->error_status_table[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s->mb_stride];",
          "370:             int top_damage    = top_status & ER_MB_ERROR;",
          "371:             int bottom_damage = bottom_status & ER_MB_ERROR;",
          "372:             int offset        = b_x * 8 + b_y * stride * 8;",
          "377:             if (!(top_damage || bottom_damage))",
          "378:                 continue; // both undamaged",
          "",
          "[Removed Lines]",
          "368:             int top_intra     = IS_INTRA(s->current_picture.f.mb_type[(b_x >> is_luma) + ( b_y      >> is_luma) * s->mb_stride]);",
          "369:             int bottom_intra  = IS_INTRA(s->current_picture.f.mb_type[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s->mb_stride]);",
          "374:             int16_t *top_mv    = s->current_picture.f.motion_val[0][mvy_stride *  b_y      + mvx_stride * b_x];",
          "375:             int16_t *bottom_mv = s->current_picture.f.motion_val[0][mvy_stride * (b_y + 1) + mvx_stride * b_x];",
          "",
          "[Added Lines]",
          "318:             int top_intra     = IS_INTRA(s->cur_pic->f.mb_type[(b_x >> is_luma) + ( b_y      >> is_luma) * s->mb_stride]);",
          "319:             int bottom_intra  = IS_INTRA(s->cur_pic->f.mb_type[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s->mb_stride]);",
          "324:             int16_t *top_mv    = s->cur_pic->f.motion_val[0][mvy_stride *  b_y      + mvx_stride * b_x];",
          "325:             int16_t *bottom_mv = s->cur_pic->f.motion_val[0][mvy_stride * (b_y + 1) + mvx_stride * b_x];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "417:     }",
          "418: }",
          "421: {",
          "422:     uint8_t *fixed = s->er_temp_buffer;",
          "423: #define MV_FROZEN    3",
          "",
          "[Removed Lines]",
          "420: static void guess_mv(MpegEncContext *s)",
          "",
          "[Added Lines]",
          "370: static void guess_mv(ERContext *s)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "437:         int f = 0;",
          "438:         int error = s->error_status_table[mb_xy];",
          "441:             f = MV_FROZEN; // intra // FIXME check",
          "442:         if (!(error & ER_MV_ERROR))",
          "443:             f = MV_FROZEN; // inter with undamaged MV",
          "",
          "[Removed Lines]",
          "440:         if (IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "",
          "[Added Lines]",
          "390:         if (IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "445:         fixed[mb_xy] = f;",
          "446:         if (f == MV_FROZEN)",
          "447:             num_avail++;",
          "449:             const int mb_y= mb_xy / s->mb_stride;",
          "450:             const int mb_x= mb_xy % s->mb_stride;",
          "451:             const int mot_index= (mb_x + mb_y*mot_stride) * mot_step;",
          "455:         }",
          "456:     }",
          "",
          "[Removed Lines]",
          "448:         else if(s->last_picture.f.data[0] && s->last_picture.f.motion_val[0]){",
          "452:             s->current_picture.f.motion_val[0][mot_index][0]= s->last_picture.f.motion_val[0][mot_index][0];",
          "453:             s->current_picture.f.motion_val[0][mot_index][1]= s->last_picture.f.motion_val[0][mot_index][1];",
          "454:             s->current_picture.f.ref_index[0][4*mb_xy]      = s->last_picture.f.ref_index[0][4*mb_xy];",
          "",
          "[Added Lines]",
          "398:         else if(s->last_pic->f.data[0] && s->last_pic->f.motion_val[0]){",
          "402:             s->cur_pic->f.motion_val[0][mot_index][0]= s->last_pic->f.motion_val[0][mot_index][0];",
          "403:             s->cur_pic->f.motion_val[0][mot_index][1]= s->last_pic->f.motion_val[0][mot_index][1];",
          "404:             s->cur_pic->f.ref_index[0][4*mb_xy]      = s->last_pic->f.ref_index[0][4*mb_xy];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "460:         for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "461:             for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "462:                 const int mb_xy = mb_x + mb_y * s->mb_stride;",
          "465:                     continue;",
          "466:                 if (!(s->error_status_table[mb_xy] & ER_MV_ERROR))",
          "467:                     continue;",
          "479:                 s->mv[0][0][0] = 0;",
          "480:                 s->mv[0][0][1] = 0;",
          "482:             }",
          "483:         }",
          "484:         return;",
          "",
          "[Removed Lines]",
          "464:                 if (IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "469:                 s->mv_dir     = s->last_picture.f.data[0] ? MV_DIR_FORWARD",
          "470:                                                           : MV_DIR_BACKWARD;",
          "471:                 s->mb_intra   = 0;",
          "472:                 s->mv_type    = MV_TYPE_16X16;",
          "473:                 s->mb_skipped = 0;",
          "475:                 s->dsp.clear_blocks(s->block[0]);",
          "477:                 s->mb_x        = mb_x;",
          "478:                 s->mb_y        = mb_y;",
          "481:                 decode_mb(s, 0);",
          "",
          "[Added Lines]",
          "413:                 int mv_dir = (s->last_pic && s->last_pic->f.data[0]) ? MV_DIR_FORWARD : MV_DIR_BACKWARD;",
          "415:                 if (IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "422:                 s->decode_mb(s->opaque, 0, mv_dir, MV_TYPE_16X16, &s->mv,",
          "423:                              mb_x, mb_y, 0, 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "512:                     if (fixed[mb_xy] == MV_FROZEN)",
          "513:                         continue;",
          "517:                     j = 0;",
          "518:                     if (mb_x > 0             && fixed[mb_xy - 1]         == MV_FROZEN)",
          "",
          "[Removed Lines]",
          "514:                     av_assert1(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));",
          "515:                     av_assert1(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);",
          "",
          "[Added Lines]",
          "456:                     av_assert1(!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]));",
          "457:                     av_assert1(s->last_pic && s->last_pic->f.data[0]);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "543:                     if (mb_x > 0 && fixed[mb_xy - 1]) {",
          "544:                         mv_predictor[pred_count][0] =",
          "546:                         mv_predictor[pred_count][1] =",
          "548:                         ref[pred_count] =",
          "550:                         pred_count++;",
          "551:                     }",
          "552:                     if (mb_x + 1 < mb_width && fixed[mb_xy + 1]) {",
          "553:                         mv_predictor[pred_count][0] =",
          "555:                         mv_predictor[pred_count][1] =",
          "557:                         ref[pred_count] =",
          "559:                         pred_count++;",
          "560:                     }",
          "561:                     if (mb_y > 0 && fixed[mb_xy - mb_stride]) {",
          "562:                         mv_predictor[pred_count][0] =",
          "564:                         mv_predictor[pred_count][1] =",
          "566:                         ref[pred_count] =",
          "568:                         pred_count++;",
          "569:                     }",
          "570:                     if (mb_y + 1<mb_height && fixed[mb_xy + mb_stride]) {",
          "571:                         mv_predictor[pred_count][0] =",
          "573:                         mv_predictor[pred_count][1] =",
          "575:                         ref[pred_count] =",
          "577:                         pred_count++;",
          "578:                     }",
          "579:                     if (pred_count == 0)",
          "",
          "[Removed Lines]",
          "545:                             s->current_picture.f.motion_val[0][mot_index - mot_step][0];",
          "547:                             s->current_picture.f.motion_val[0][mot_index - mot_step][1];",
          "549:                             s->current_picture.f.ref_index[0][4 * (mb_xy - 1)];",
          "554:                             s->current_picture.f.motion_val[0][mot_index + mot_step][0];",
          "556:                             s->current_picture.f.motion_val[0][mot_index + mot_step][1];",
          "558:                             s->current_picture.f.ref_index[0][4 * (mb_xy + 1)];",
          "563:                             s->current_picture.f.motion_val[0][mot_index - mot_stride * mot_step][0];",
          "565:                             s->current_picture.f.motion_val[0][mot_index - mot_stride * mot_step][1];",
          "567:                             s->current_picture.f.ref_index[0][4 * (mb_xy - s->mb_stride)];",
          "572:                             s->current_picture.f.motion_val[0][mot_index + mot_stride * mot_step][0];",
          "574:                             s->current_picture.f.motion_val[0][mot_index + mot_stride * mot_step][1];",
          "576:                             s->current_picture.f.ref_index[0][4 * (mb_xy + s->mb_stride)];",
          "",
          "[Added Lines]",
          "487:                             s->cur_pic->f.motion_val[0][mot_index - mot_step][0];",
          "489:                             s->cur_pic->f.motion_val[0][mot_index - mot_step][1];",
          "491:                             s->cur_pic->f.ref_index[0][4 * (mb_xy - 1)];",
          "496:                             s->cur_pic->f.motion_val[0][mot_index + mot_step][0];",
          "498:                             s->cur_pic->f.motion_val[0][mot_index + mot_step][1];",
          "500:                             s->cur_pic->f.ref_index[0][4 * (mb_xy + 1)];",
          "505:                             s->cur_pic->f.motion_val[0][mot_index - mot_stride * mot_step][0];",
          "507:                             s->cur_pic->f.motion_val[0][mot_index - mot_stride * mot_step][1];",
          "509:                             s->cur_pic->f.ref_index[0][4 * (mb_xy - s->mb_stride)];",
          "514:                             s->cur_pic->f.motion_val[0][mot_index + mot_stride * mot_step][0];",
          "516:                             s->cur_pic->f.motion_val[0][mot_index + mot_stride * mot_step][1];",
          "518:                             s->cur_pic->f.ref_index[0][4 * (mb_xy + s->mb_stride)];",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "631:                         if (s->avctx->codec_id == AV_CODEC_ID_H264) {",
          "633:                         } else {",
          "635:                                                      mb_y, 0);",
          "636:                         }",
          "639:                             goto skip_last_mv;",
          "643:                     } else {",
          "647:                     }",
          "",
          "[Removed Lines]",
          "634:                             ff_thread_await_progress(&s->last_picture_ptr->f,",
          "637:                         if (!s->last_picture.f.motion_val[0] ||",
          "638:                             !s->last_picture.f.ref_index[0])",
          "640:                         prev_x   = s->last_picture.f.motion_val[0][mot_index][0];",
          "641:                         prev_y   = s->last_picture.f.motion_val[0][mot_index][1];",
          "642:                         prev_ref = s->last_picture.f.ref_index[0][4 * mb_xy];",
          "644:                         prev_x   = s->current_picture.f.motion_val[0][mot_index][0];",
          "645:                         prev_y   = s->current_picture.f.motion_val[0][mot_index][1];",
          "646:                         prev_ref = s->current_picture.f.ref_index[0][4 * mb_xy];",
          "",
          "[Added Lines]",
          "576:                             ff_thread_await_progress(&s->last_pic->f,",
          "579:                         if (!s->last_pic->f.motion_val[0] ||",
          "580:                             !s->last_pic->f.ref_index[0])",
          "582:                         prev_x   = s->last_pic->f.motion_val[0][mot_index][0];",
          "583:                         prev_y   = s->last_pic->f.motion_val[0][mot_index][1];",
          "584:                         prev_ref = s->last_pic->f.ref_index[0][4 * mb_xy];",
          "586:                         prev_x   = s->cur_pic->f.motion_val[0][mot_index][0];",
          "587:                         prev_y   = s->cur_pic->f.motion_val[0][mot_index][1];",
          "588:                         prev_ref = s->cur_pic->f.ref_index[0][4 * mb_xy];",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "653:                     pred_count++;",
          "655: skip_last_mv:",
          "666:                     for (j = 0; j < pred_count; j++) {",
          "667:                         int score = 0;",
          "672:                             s->mv[0][0][0] = mv_predictor[j][0];",
          "674:                             s->mv[0][0][1] = mv_predictor[j][1];",
          "677:                         if (ref[j] < 0)",
          "678:                             continue;",
          "682:                         if (mb_x > 0 && fixed[mb_xy - 1]) {",
          "683:                             int k;",
          "684:                             for (k = 0; k < 16; k++)",
          "687:                         }",
          "688:                         if (mb_x + 1 < mb_width && fixed[mb_xy + 1]) {",
          "689:                             int k;",
          "690:                             for (k = 0; k < 16; k++)",
          "693:                         }",
          "694:                         if (mb_y > 0 && fixed[mb_xy - mb_stride]) {",
          "695:                             int k;",
          "696:                             for (k = 0; k < 16; k++)",
          "698:                         }",
          "699:                         if (mb_y + 1 < mb_height && fixed[mb_xy + mb_stride]) {",
          "700:                             int k;",
          "701:                             for (k = 0; k < 16; k++)",
          "704:                         }",
          "706:                         if (score <= best_score) { // <= will favor the last MV",
          "",
          "[Removed Lines]",
          "656:                     s->mv_dir     = MV_DIR_FORWARD;",
          "657:                     s->mb_intra   = 0;",
          "658:                     s->mv_type    = MV_TYPE_16X16;",
          "659:                     s->mb_skipped = 0;",
          "661:                     s->dsp.clear_blocks(s->block[0]);",
          "663:                     s->mb_x = mb_x;",
          "664:                     s->mb_y = mb_y;",
          "668:                         uint8_t *src = s->current_picture.f.data[0] +",
          "669:                                        mb_x * 16 + mb_y * 16 * s->linesize;",
          "671:                         s->current_picture.f.motion_val[0][mot_index][0] =",
          "673:                         s->current_picture.f.motion_val[0][mot_index][1] =",
          "680:                         decode_mb(s, ref[j]);",
          "685:                                 score += FFABS(src[k * s->linesize - 1] -",
          "686:                                                src[k * s->linesize]);",
          "691:                                 score += FFABS(src[k * s->linesize + 15] -",
          "692:                                                src[k * s->linesize + 16]);",
          "697:                                 score += FFABS(src[k - s->linesize] - src[k]);",
          "702:                                 score += FFABS(src[k + s->linesize * 15] -",
          "703:                                                src[k + s->linesize * 16]);",
          "",
          "[Added Lines]",
          "600:                         int *linesize = s->cur_pic->f.linesize;",
          "602:                         uint8_t *src = s->cur_pic->f.data[0] +",
          "603:                                        mb_x * 16 + mb_y * 16 * linesize[0];",
          "605:                         s->cur_pic->f.motion_val[0][mot_index][0] =",
          "607:                         s->cur_pic->f.motion_val[0][mot_index][1] =",
          "614:                         s->decode_mb(s->opaque, ref[j], MV_DIR_FORWARD,",
          "615:                                      MV_TYPE_16X16, &s->mv, mb_x, mb_y, 0, 0);",
          "620:                                 score += FFABS(src[k * linesize[0] - 1] -",
          "621:                                                src[k * linesize[0]]);",
          "626:                                 score += FFABS(src[k * linesize[0] + 15] -",
          "627:                                                src[k * linesize[0] + 16]);",
          "632:                                 score += FFABS(src[k - linesize[0]] - src[k]);",
          "637:                                 score += FFABS(src[k + linesize[0] * 15] -",
          "638:                                                src[k + linesize[0] * 16]);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "715:                     for (i = 0; i < mot_step; i++)",
          "716:                         for (j = 0; j < mot_step; j++) {",
          "719:                         }",
          "724:                     if (s->mv[0][0][0] != prev_x || s->mv[0][0][1] != prev_y) {",
          "",
          "[Removed Lines]",
          "717:                             s->current_picture.f.motion_val[0][mot_index + i + j * mot_stride][0] = s->mv[0][0][0];",
          "718:                             s->current_picture.f.motion_val[0][mot_index + i + j * mot_stride][1] = s->mv[0][0][1];",
          "721:                     decode_mb(s, ref[best_pred]);",
          "",
          "[Added Lines]",
          "652:                             s->cur_pic->f.motion_val[0][mot_index + i + j * mot_stride][0] = s->mv[0][0][0];",
          "653:                             s->cur_pic->f.motion_val[0][mot_index + i + j * mot_stride][1] = s->mv[0][0][1];",
          "656:                     s->decode_mb(s->opaque, ref[best_pred], MV_DIR_FORWARD,",
          "657:                                  MV_TYPE_16X16, &s->mv, mb_x, mb_y, 0, 0);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "741:     }",
          "742: }",
          "745: {",
          "746:     int is_intra_likely, i, j, undamaged_count, skip_amount, mb_x, mb_y;",
          "749:         return 1; // no previous frame available -> use spatial prediction",
          "751:     undamaged_count = 0;",
          "",
          "[Removed Lines]",
          "744: static int is_intra_more_likely(MpegEncContext *s)",
          "748:     if (!s->last_picture_ptr || !s->last_picture_ptr->f.data[0])",
          "",
          "[Added Lines]",
          "680: static int is_intra_more_likely(ERContext *s)",
          "684:     if (!s->last_pic || !s->last_pic->f.data[0])",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "756:             undamaged_count++;",
          "757:     }",
          "766:     if (undamaged_count < 5)",
          "767:         return 0; // almost all MBs damaged -> use temporal prediction",
          "",
          "[Removed Lines]",
          "759:     if (s->codec_id == AV_CODEC_ID_H264) {",
          "760:         H264Context *h = (void*) s;",
          "761:         if (h->list_count <= 0 || h->ref_count[0] <= 0 ||",
          "762:             !h->ref_list[0][0].f.data[0])",
          "763:             return 1;",
          "764:     }",
          "",
          "[Added Lines]",
          "695:     if (s->avctx->codec_id == AV_CODEC_ID_H264 && s->ref_count <= 0)",
          "696:         return 1;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "770:     if (CONFIG_MPEG_XVMC_DECODER    &&",
          "771:         s->avctx->xvmc_acceleration &&",
          "773:         return 1;",
          "775:     skip_amount     = FFMAX(undamaged_count / 50, 1); // check only up to 50 MBs",
          "",
          "[Removed Lines]",
          "772:         s->pict_type == AV_PICTURE_TYPE_I)",
          "",
          "[Added Lines]",
          "704:         s->cur_pic->f.pict_type == AV_PICTURE_TYPE_I)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "790:             if ((j % skip_amount) != 0)",
          "791:                 continue;",
          "799:                 if (s->avctx->codec_id == AV_CODEC_ID_H264) {",
          "801:                 } else {",
          "804:                 }",
          "808:             } else {",
          "810:                    is_intra_likely++;",
          "811:                 else",
          "812:                    is_intra_likely--;",
          "",
          "[Removed Lines]",
          "793:             if (s->pict_type == AV_PICTURE_TYPE_I) {",
          "794:                 uint8_t *mb_ptr      = s->current_picture.f.data[0] +",
          "795:                                        mb_x * 16 + mb_y * 16 * s->linesize;",
          "796:                 uint8_t *last_mb_ptr = s->last_picture.f.data[0] +",
          "797:                                        mb_x * 16 + mb_y * 16 * s->linesize;",
          "802:                     ff_thread_await_progress(&s->last_picture_ptr->f,",
          "803:                                              mb_y, 0);",
          "805:                 is_intra_likely += s->dsp.sad[0](NULL, last_mb_ptr, mb_ptr                    , s->linesize, 16);",
          "807:                 is_intra_likely -= s->dsp.sad[0](NULL, last_mb_ptr, last_mb_ptr+s->linesize*16, s->linesize, 16);",
          "809:                 if (IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "",
          "[Added Lines]",
          "725:             if (s->cur_pic->f.pict_type == AV_PICTURE_TYPE_I) {",
          "726:                 int *linesize = s->cur_pic->f.linesize;",
          "727:                 uint8_t *mb_ptr      = s->cur_pic->f.data[0] +",
          "728:                                        mb_x * 16 + mb_y * 16 * linesize[0];",
          "729:                 uint8_t *last_mb_ptr = s->last_pic->f.data[0] +",
          "730:                                        mb_x * 16 + mb_y * 16 * linesize[0];",
          "735:                     ff_thread_await_progress(&s->last_pic->f, mb_y, 0);",
          "737:                 is_intra_likely += s->dsp->sad[0](NULL, last_mb_ptr, mb_ptr,",
          "738:                                                  linesize[0], 16);",
          "740:                 is_intra_likely -= s->dsp->sad[0](NULL, last_mb_ptr,",
          "741:                                                  last_mb_ptr + linesize[0] * 16,",
          "742:                                                  linesize[0], 16);",
          "744:                 if (IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "817:     return is_intra_likely > 0;",
          "818: }",
          "821: {",
          "823:         return;",
          "825:     memset(s->error_status_table, ER_MB_ERROR | VP_START | ER_MB_END,",
          "",
          "[Removed Lines]",
          "820: void ff_er_frame_start(MpegEncContext *s)",
          "822:     if (!s->err_recognition)",
          "",
          "[Added Lines]",
          "755: void ff_er_frame_start(ERContext *s)",
          "757:     if (!s->avctx->err_recognition)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "839:                      int endx, int endy, int status)",
          "840: {",
          "841:     const int start_i  = av_clip(startx + starty * s->mb_width, 0, s->mb_num - 1);",
          "",
          "[Removed Lines]",
          "838: void ff_er_add_slice(MpegEncContext *s, int startx, int starty,",
          "",
          "[Added Lines]",
          "773: void ff_er_add_slice(ERContext *s, int startx, int starty,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "853:         return;",
          "854:     }",
          "857:         return;",
          "859:     mask &= ~VP_START;",
          "",
          "[Removed Lines]",
          "856:     if (!s->err_recognition)",
          "",
          "[Added Lines]",
          "791:     if (!s->avctx->err_recognition)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "903:     }",
          "904: }",
          "907: {",
          "908:     int i, mb_x, mb_y, error, error_type, dc_error, mv_error, ac_error;",
          "909:     int distance;",
          "910:     int threshold_part[4] = { 100, 100, 100 };",
          "911:     int threshold = 50;",
          "912:     int is_intra_likely;",
          "913:     int size = s->b8_stride * 2 * s->mb_height;",
          "919:         s->avctx->hwaccel                                              ||",
          "920:         s->avctx->codec->capabilities&CODEC_CAP_HWACCEL_VDPAU          ||",
          "922:         s->error_count == 3 * s->mb_width *",
          "923:                           (s->avctx->skip_top + s->avctx->skip_bottom)) {",
          "924:         return;",
          "931:     }",
          "934:         av_log(s->avctx, AV_LOG_ERROR, \"Warning MVs not available\\n\");",
          "936:         for (i = 0; i < 2; i++) {",
          "940:         }",
          "943:     }",
          "945:     if (s->avctx->debug & FF_DEBUG_ER) {",
          "",
          "[Removed Lines]",
          "906: void ff_er_frame_end(MpegEncContext *s)",
          "914:     Picture *pic = s->current_picture_ptr;",
          "918:     if (!s->err_recognition || s->error_count == 0 || s->avctx->lowres ||",
          "921:         s->picture_structure != PICT_FRAME                             ||",
          "925:     };",
          "927:     if (   s->picture_structure == PICT_FRAME",
          "928:         && s->current_picture.f.linesize[0] != s->current_picture_ptr->f.linesize[0]) {",
          "929:         av_log(s->avctx, AV_LOG_ERROR, \"Error concealment not possible, frame not fully initialized\\n\");",
          "930:         return;",
          "933:     if (s->current_picture.f.motion_val[0] == NULL) {",
          "937:             pic->f.ref_index[i]     = av_mallocz(s->mb_stride * s->mb_height * 4 * sizeof(uint8_t));",
          "938:             pic->motion_val_base[i] = av_mallocz((size + 4) * 2 * sizeof(uint16_t));",
          "939:             pic->f.motion_val[i]    = pic->motion_val_base[i] + 4;",
          "941:         pic->f.motion_subsample_log2 = 3;",
          "942:         s->current_picture = *s->current_picture_ptr;",
          "",
          "[Added Lines]",
          "841: void ff_er_frame_end(ERContext *s)",
          "843:     int *linesize = s->cur_pic->f.linesize;",
          "853:     if (!s->avctx->err_recognition || s->error_count == 0              ||",
          "854:         s->avctx->lowres                                               ||",
          "857:         !s->cur_pic || s->cur_pic->field_picture                               ||",
          "863:     if (s->cur_pic->f.motion_val[0] == NULL) {",
          "867:             s->cur_pic->f.ref_index[i]     = av_mallocz(s->mb_stride * s->mb_height * 4 * sizeof(uint8_t));",
          "868:             s->cur_pic->motion_val_base[i] = av_mallocz((size + 4) * 2 * sizeof(uint16_t));",
          "869:             s->cur_pic->f.motion_val[i]    = s->cur_pic->motion_val_base[i] + 4;",
          "871:         s->cur_pic->f.motion_subsample_log2 = 3;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1000:     }",
          "1001: #endif",
          "1004:         int end_ok = 1;",
          "",
          "[Removed Lines]",
          "1003:     if (s->err_recognition & AV_EF_EXPLODE) {",
          "",
          "[Added Lines]",
          "932:     if (s->avctx->err_recognition & AV_EF_EXPLODE) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1090:             mv_error++;",
          "1091:     }",
          "1092:     av_log(s->avctx, AV_LOG_INFO, \"concealing %d DC, %d AC, %d MV errors in %c frame\\n\",",
          "1095:     is_intra_likely = is_intra_more_likely(s);",
          "",
          "[Removed Lines]",
          "1093:            dc_error, ac_error, mv_error, av_get_picture_type_char(s->pict_type));",
          "",
          "[Added Lines]",
          "1022:            dc_error, ac_error, mv_error, av_get_picture_type_char(s->cur_pic->f.pict_type));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1102:             continue;",
          "1104:         if (is_intra_likely)",
          "1106:         else",
          "1108:     }",
          "1112:         for (i = 0; i < s->mb_num; i++) {",
          "1113:             const int mb_xy = s->mb_index2xy[i];",
          "1116:         }",
          "1119:     for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "1120:         for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "1121:             const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1125:             error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1105:             s->current_picture.f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1107:             s->current_picture.f.mb_type[mb_xy] = MB_TYPE_16x16 | MB_TYPE_L0;",
          "1111:     if (!s->last_picture.f.data[0] && !s->next_picture.f.data[0])",
          "1114:             if (!IS_INTRA(s->current_picture.f.mb_type[mb_xy]))",
          "1115:                 s->current_picture.f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1122:             const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "1123:             int dir           = !s->last_picture.f.data[0];",
          "",
          "[Added Lines]",
          "1034:             s->cur_pic->f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1036:             s->cur_pic->f.mb_type[mb_xy] = MB_TYPE_16x16 | MB_TYPE_L0;",
          "1040:     if (!(s->last_pic && s->last_pic->f.data[0]) &&",
          "1041:         !(s->next_pic && s->next_pic->f.data[0]))",
          "1044:             if (!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]))",
          "1045:                 s->cur_pic->f.mb_type[mb_xy] = MB_TYPE_INTRA4x4;",
          "1052:             const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "1053:             const int dir     = !(s->last_pic && s->last_pic->f.data[0]);",
          "1054:             const int mv_dir  = dir ? MV_DIR_BACKWARD : MV_DIR_FORWARD;",
          "1055:             int mv_type;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1131:             if (!(error & ER_AC_ERROR))",
          "1132:                 continue; // undamaged inter",
          "1137:             if (IS_8X8(mb_type)) {",
          "1138:                 int mb_index = mb_x * 2 + mb_y * 2 * s->b8_stride;",
          "1139:                 int j;",
          "1141:                 for (j = 0; j < 4; j++) {",
          "1144:                 }",
          "1145:             } else {",
          "1149:             }",
          "1156:         }",
          "1157:     }",
          "1161:         for (mb_y = 0; mb_y < s->mb_height; mb_y++) {",
          "1162:             for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "1163:                 int       xy      = mb_x * 2 + mb_y * 2 * s->b8_stride;",
          "1164:                 const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1167:                 error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1134:             s->mv_dir     = dir ? MV_DIR_BACKWARD : MV_DIR_FORWARD;",
          "1135:             s->mb_intra   = 0;",
          "1136:             s->mb_skipped = 0;",
          "1140:                 s->mv_type = MV_TYPE_8X8;",
          "1142:                     s->mv[0][j][0] = s->current_picture.f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][0];",
          "1143:                     s->mv[0][j][1] = s->current_picture.f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][1];",
          "1146:                 s->mv_type     = MV_TYPE_16X16;",
          "1147:                 s->mv[0][0][0] = s->current_picture.f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][0];",
          "1148:                 s->mv[0][0][1] = s->current_picture.f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][1];",
          "1151:             s->dsp.clear_blocks(s->block[0]);",
          "1153:             s->mb_x = mb_x;",
          "1154:             s->mb_y = mb_y;",
          "1155:             decode_mb(s, 0 /* FIXME h264 partitioned slices need this set */);",
          "1160:     if (s->pict_type == AV_PICTURE_TYPE_B) {",
          "1165:                 const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "",
          "[Added Lines]",
          "1069:                 mv_type = MV_TYPE_8X8;",
          "1071:                     s->mv[0][j][0] = s->cur_pic->f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][0];",
          "1072:                     s->mv[0][j][1] = s->cur_pic->f.motion_val[dir][mb_index + (j & 1) + (j >> 1) * s->b8_stride][1];",
          "1075:                 mv_type     = MV_TYPE_16X16;",
          "1076:                 s->mv[0][0][0] = s->cur_pic->f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][0];",
          "1077:                 s->mv[0][0][1] = s->cur_pic->f.motion_val[dir][mb_x * 2 + mb_y * 2 * s->b8_stride][1];",
          "1080:             s->decode_mb(s->opaque, 0 /* FIXME h264 partitioned slices need this set */,",
          "1081:                          mv_dir, mv_type, &s->mv, mb_x, mb_y, 0, 0);",
          "1086:     if (s->cur_pic->f.pict_type == AV_PICTURE_TYPE_B) {",
          "1091:                 const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "1092:                 int mv_dir = MV_DIR_FORWARD | MV_DIR_BACKWARD;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1173:                 if (!(error & ER_AC_ERROR))",
          "1174:                     continue; // undamaged inter",
          "1185:                 if (s->pp_time) {",
          "1186:                     int time_pp = s->pp_time;",
          "1187:                     int time_pb = s->pb_time;",
          "1189:                     av_assert0(s->avctx->codec_id != AV_CODEC_ID_H264);",
          "1195:                 } else {",
          "1196:                     s->mv[0][0][0] = 0;",
          "1197:                     s->mv[0][0][1] = 0;",
          "",
          "[Removed Lines]",
          "1176:                 s->mv_dir = MV_DIR_FORWARD | MV_DIR_BACKWARD;",
          "1177:                 if (!s->last_picture.f.data[0])",
          "1178:                     s->mv_dir &= ~MV_DIR_FORWARD;",
          "1179:                 if (!s->next_picture.f.data[0])",
          "1180:                     s->mv_dir &= ~MV_DIR_BACKWARD;",
          "1181:                 s->mb_intra   = 0;",
          "1182:                 s->mv_type    = MV_TYPE_16X16;",
          "1183:                 s->mb_skipped = 0;",
          "1190:                     ff_thread_await_progress(&s->next_picture_ptr->f, mb_y, 0);",
          "1191:                     s->mv[0][0][0] = s->next_picture.f.motion_val[0][xy][0] *  time_pb            / time_pp;",
          "1192:                     s->mv[0][0][1] = s->next_picture.f.motion_val[0][xy][1] *  time_pb            / time_pp;",
          "1193:                     s->mv[1][0][0] = s->next_picture.f.motion_val[0][xy][0] * (time_pb - time_pp) / time_pp;",
          "1194:                     s->mv[1][0][1] = s->next_picture.f.motion_val[0][xy][1] * (time_pb - time_pp) / time_pp;",
          "",
          "[Added Lines]",
          "1103:                 if (!(s->last_pic && s->last_pic->f.data[0]))",
          "1104:                     mv_dir &= ~MV_DIR_FORWARD;",
          "1105:                 if (!(s->next_pic && s->next_pic->f.data[0]))",
          "1106:                     mv_dir &= ~MV_DIR_BACKWARD;",
          "1113:                     ff_thread_await_progress(&s->next_pic->f, mb_y, 0);",
          "1115:                     s->mv[0][0][0] = s->next_pic->f.motion_val[0][xy][0] *  time_pb            / time_pp;",
          "1116:                     s->mv[0][0][1] = s->next_pic->f.motion_val[0][xy][1] *  time_pb            / time_pp;",
          "1117:                     s->mv[1][0][0] = s->next_pic->f.motion_val[0][xy][0] * (time_pb - time_pp) / time_pp;",
          "1118:                     s->mv[1][0][1] = s->next_pic->f.motion_val[0][xy][1] * (time_pb - time_pp) / time_pp;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1199:                     s->mv[1][0][1] = 0;",
          "1200:                 }",
          "1206:             }",
          "1207:         }",
          "1208:     } else",
          "",
          "[Removed Lines]",
          "1202:                 s->dsp.clear_blocks(s->block[0]);",
          "1203:                 s->mb_x = mb_x;",
          "1204:                 s->mb_y = mb_y;",
          "1205:                 decode_mb(s, 0);",
          "",
          "[Added Lines]",
          "1126:                 s->decode_mb(s->opaque, 0, mv_dir, MV_TYPE_16X16, &s->mv,",
          "1127:                              mb_x, mb_y, 0, 0);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1218:             int16_t *dc_ptr;",
          "1219:             uint8_t *dest_y, *dest_cb, *dest_cr;",
          "1220:             const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1223:             error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1221:             const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "",
          "[Added Lines]",
          "1143:             const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1234:             dc_ptr = &s->dc_val[0][mb_x * 2 + mb_y * 2 * s->b8_stride];",
          "1235:             for (n = 0; n < 4; n++) {",
          "",
          "[Removed Lines]",
          "1230:             dest_y  = s->current_picture.f.data[0] + mb_x * 16 + mb_y * 16 * s->linesize;",
          "1231:             dest_cb = s->current_picture.f.data[1] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "1232:             dest_cr = s->current_picture.f.data[2] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "",
          "[Added Lines]",
          "1152:             dest_y  = s->cur_pic->f.data[0] + mb_x * 16 + mb_y * 16 * linesize[0];",
          "1153:             dest_cb = s->cur_pic->f.data[1] + mb_x *  8 + mb_y *  8 * linesize[1];",
          "1154:             dest_cr = s->cur_pic->f.data[2] + mb_x *  8 + mb_y *  8 * linesize[2];",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1238:                     int x;",
          "1239:                     for (x = 0; x < 8; x++)",
          "1240:                        dc += dest_y[x + (n & 1) * 8 +",
          "1242:                 }",
          "1243:                 dc_ptr[(n & 1) + (n >> 1) * s->b8_stride] = (dc + 4) >> 3;",
          "1244:             }",
          "",
          "[Removed Lines]",
          "1241:                              (y + (n >> 1) * 8) * s->linesize];",
          "",
          "[Added Lines]",
          "1163:                              (y + (n >> 1) * 8) * linesize[0]];",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1247:             for (y = 0; y < 8; y++) {",
          "1248:                 int x;",
          "1249:                 for (x = 0; x < 8; x++) {",
          "1252:                 }",
          "1253:             }",
          "1254:             s->dc_val[1][mb_x + mb_y * s->mb_stride] = (dcu + 4) >> 3;",
          "",
          "[Removed Lines]",
          "1250:                     dcu += dest_cb[x + y * s->uvlinesize];",
          "1251:                     dcv += dest_cr[x + y * s->uvlinesize];",
          "",
          "[Added Lines]",
          "1172:                     dcu += dest_cb[x + y * linesize[1]];",
          "1173:                     dcv += dest_cr[x + y * linesize[2]];",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1271:         for (mb_x = 0; mb_x < s->mb_width; mb_x++) {",
          "1272:             uint8_t *dest_y, *dest_cb, *dest_cr;",
          "1273:             const int mb_xy   = mb_x + mb_y * s->mb_stride;",
          "1276:             error = s->error_status_table[mb_xy];",
          "",
          "[Removed Lines]",
          "1274:             const int mb_type = s->current_picture.f.mb_type[mb_xy];",
          "",
          "[Added Lines]",
          "1196:             const int mb_type = s->cur_pic->f.mb_type[mb_xy];",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1280:             if (!(error & ER_AC_ERROR))",
          "1281:                 continue; // undamaged",
          "1287:             put_dc(s, dest_y, dest_cb, dest_cr, mb_x, mb_y);",
          "1288:         }",
          "",
          "[Removed Lines]",
          "1283:             dest_y  = s->current_picture.f.data[0] + mb_x * 16 + mb_y * 16 * s->linesize;",
          "1284:             dest_cb = s->current_picture.f.data[1] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "1285:             dest_cr = s->current_picture.f.data[2] + mb_x *  8 + mb_y *  8 * s->uvlinesize;",
          "",
          "[Added Lines]",
          "1205:             dest_y  = s->cur_pic->f.data[0] + mb_x * 16 + mb_y * 16 * linesize[0];",
          "1206:             dest_cb = s->cur_pic->f.data[1] + mb_x *  8 + mb_y *  8 * linesize[1];",
          "1207:             dest_cr = s->cur_pic->f.data[2] + mb_x *  8 + mb_y *  8 * linesize[2];",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1292:     if (s->avctx->error_concealment & FF_EC_DEBLOCK) {",
          "1308:     }",
          "1310: ec_clean:",
          "",
          "[Removed Lines]",
          "1294:         h_block_filter(s, s->current_picture.f.data[0], s->mb_width * 2,",
          "1295:                        s->mb_height * 2, s->linesize, 1);",
          "1296:         h_block_filter(s, s->current_picture.f.data[1], s->mb_width,",
          "1297:                        s->mb_height  , s->uvlinesize, 0);",
          "1298:         h_block_filter(s, s->current_picture.f.data[2], s->mb_width,",
          "1299:                        s->mb_height  , s->uvlinesize, 0);",
          "1302:         v_block_filter(s, s->current_picture.f.data[0], s->mb_width * 2,",
          "1303:                        s->mb_height * 2, s->linesize, 1);",
          "1304:         v_block_filter(s, s->current_picture.f.data[1], s->mb_width,",
          "1305:                        s->mb_height  , s->uvlinesize, 0);",
          "1306:         v_block_filter(s, s->current_picture.f.data[2], s->mb_width,",
          "1307:                        s->mb_height  , s->uvlinesize, 0);",
          "",
          "[Added Lines]",
          "1216:         h_block_filter(s, s->cur_pic->f.data[0], s->mb_width * 2,",
          "1217:                        s->mb_height * 2, linesize[0], 1);",
          "1218:         h_block_filter(s, s->cur_pic->f.data[1], s->mb_width,",
          "1219:                        s->mb_height, linesize[1], 0);",
          "1220:         h_block_filter(s, s->cur_pic->f.data[2], s->mb_width,",
          "1221:                        s->mb_height, linesize[2], 0);",
          "1224:         v_block_filter(s, s->cur_pic->f.data[0], s->mb_width * 2,",
          "1225:                        s->mb_height * 2, linesize[0], 1);",
          "1226:         v_block_filter(s, s->cur_pic->f.data[1], s->mb_width,",
          "1227:                        s->mb_height, linesize[1], 0);",
          "1228:         v_block_filter(s, s->cur_pic->f.data[2], s->mb_width,",
          "1229:                        s->mb_height, linesize[2], 0);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1313:         const int mb_xy = s->mb_index2xy[i];",
          "1314:         int       error = s->error_status_table[mb_xy];",
          "1317:             (error & (ER_DC_ERROR | ER_MV_ERROR | ER_AC_ERROR))) {",
          "1318:             s->mbskip_table[mb_xy] = 0;",
          "1319:         }",
          "1320:         s->mbintra_table[mb_xy] = 1;",
          "1321:     }",
          "1322: }",
          "",
          "[Removed Lines]",
          "1316:         if (s->pict_type != AV_PICTURE_TYPE_B &&",
          "",
          "[Added Lines]",
          "1238:         if (s->cur_pic->f.pict_type != AV_PICTURE_TYPE_B &&",
          "1244:     s->cur_pic = NULL;",
          "1245:     s->next_pic    = NULL;",
          "1246:     s->last_pic    = NULL;",
          "",
          "---------------"
        ],
        "libavcodec/error_resilience.h||libavcodec/error_resilience.h": [
          "File: libavcodec/error_resilience.h -> libavcodec/error_resilience.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #ifndef AVCODEC_ERROR_RESILIENCE_H",
          "21: #define AVCODEC_ERROR_RESILIENCE_H",
          "24: #define VP_START               1",
          "25: #define ER_AC_ERROR            2",
          "26: #define ER_DC_ERROR            4",
          "27: #define ER_MV_ERROR            8",
          "28: #define ER_AC_END              16",
          "29: #define ER_DC_END              32",
          "30: #define ER_MV_END              64",
          "32: #define ER_MB_ERROR (ER_AC_ERROR|ER_DC_ERROR|ER_MV_ERROR)",
          "33: #define ER_MB_END   (ER_AC_END|ER_DC_END|ER_MV_END)",
          "35: typedef struct ERContext {",
          "36:     AVCodecContext *avctx;",
          "37:     DSPContext *dsp;",
          "39:     int *mb_index2xy;",
          "40:     int mb_num;",
          "41:     int mb_width, mb_height;",
          "42:     int mb_stride;",
          "43:     int b8_stride;",
          "45:     int error_count, error_occurred;",
          "46:     uint8_t *error_status_table;",
          "47:     uint8_t *er_temp_buffer;",
          "48:     int16_t *dc_val[3];",
          "49:     uint8_t *mbskip_table;",
          "50:     uint8_t *mbintra_table;",
          "51:     int mv[2][4][2];",
          "53:     struct Picture *cur_pic;",
          "54:     struct Picture *last_pic;",
          "55:     struct Picture *next_pic;",
          "57:     uint16_t pp_time;",
          "58:     uint16_t pb_time;",
          "59:     int quarter_sample;",
          "60:     int partitioned_frame;",
          "61:     int ref_count;",
          "63:     void (*decode_mb)(void *opaque, int ref, int mv_dir, int mv_type,",
          "64:                       int (*mv)[2][4][2],",
          "65:                       int mb_x, int mb_y, int mb_intra, int mb_skipped);",
          "66:     void *opaque;",
          "67: } ERContext;",
          "69: void ff_er_frame_start(ERContext *s);",
          "70: void ff_er_frame_end(ERContext *s);",
          "71: void ff_er_add_slice(ERContext *s, int startx, int starty, int endx, int endy,",
          "72:                      int status);",
          "",
          "---------------"
        ],
        "libavcodec/h261dec.c||libavcodec/h261dec.c": [
          "File: libavcodec/h261dec.c -> libavcodec/h261dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:     if(ff_MPV_frame_start(s, avctx) < 0)",
          "618:         return -1;",
          "623:     s->mb_x=0;",
          "",
          "[Removed Lines]",
          "620:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "620:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------"
        ],
        "libavcodec/h263dec.c||libavcodec/h263dec.c": [
          "File: libavcodec/h263dec.c -> libavcodec/h263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:         if(s->msmpeg4_version){",
          "196:             if(s->resync_mb_y + s->slice_height == s->mb_y){",
          "199:                 return 0;",
          "200:             }",
          "",
          "[Removed Lines]",
          "197:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "197:                 ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:                     if(s->loop_filter)",
          "236:                         ff_h263_loop_filter(s);",
          "240:                     s->padding_bug_score--;",
          "",
          "[Removed Lines]",
          "238:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "[Added Lines]",
          "238:                     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:                     return 0;",
          "249:                 }else if(ret==SLICE_NOEND){",
          "250:                     av_log(s->avctx, AV_LOG_ERROR, \"Slice mismatch at MB: %d\\n\", xy);",
          "252:                     return AVERROR_INVALIDDATA;",
          "253:                 }",
          "254:                 av_log(s->avctx, AV_LOG_ERROR, \"Error at MB: %d\\n\", xy);",
          "257:                 return AVERROR_INVALIDDATA;",
          "258:             }",
          "",
          "[Removed Lines]",
          "251:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x+1, s->mb_y, ER_MB_END&part_mask);",
          "255:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR&part_mask);",
          "",
          "[Added Lines]",
          "251:                     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x+1, s->mb_y, ER_MB_END&part_mask);",
          "255:                 ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR&part_mask);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:         else if(left<0){",
          "332:             av_log(s->avctx, AV_LOG_ERROR, \"overreading %d bits\\n\", -left);",
          "333:         }else",
          "336:         return 0;",
          "337:     }",
          "",
          "[Removed Lines]",
          "334:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "334:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340:             get_bits_left(&s->gb),",
          "341:             show_bits(&s->gb, 24), s->padding_bug_score);",
          "345:     return AVERROR_INVALIDDATA;",
          "346: }",
          "",
          "[Removed Lines]",
          "343:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "[Added Lines]",
          "343:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_MB_END&part_mask);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "666:             return ret;",
          "667:     }",
          "",
          "[Removed Lines]",
          "669:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "669:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "690:             if(ff_h263_resync(s)<0)",
          "691:                 break;",
          "692:             if (prev_y * s->mb_width + prev_x < s->mb_y * s->mb_width + s->mb_x)",
          "694:         }",
          "696:         if(s->msmpeg4_version<4 && s->h263_pred)",
          "",
          "[Removed Lines]",
          "693:                 s->error_occurred = 1;",
          "",
          "[Added Lines]",
          "693:                 s->er.error_occurred = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "702:     if (s->msmpeg4_version && s->msmpeg4_version<4 && s->pict_type==AV_PICTURE_TYPE_I)",
          "703:         if(!CONFIG_MSMPEG4_DECODER || ff_msmpeg4_decode_ext_header(s, buf_size) < 0){",
          "705:         }",
          "707:     av_assert1(s->bitstream_buffer_size==0);",
          "",
          "[Removed Lines]",
          "704:             s->error_status_table[s->mb_num-1]= ER_MB_ERROR;",
          "",
          "[Added Lines]",
          "704:             s->er.error_status_table[s->mb_num - 1] = ER_MB_ERROR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "734:     }",
          "736: intrax8_decoded:",
          "739:     if (avctx->hwaccel) {",
          "740:         if ((ret = avctx->hwaccel->end_frame(avctx)) < 0)",
          "",
          "[Removed Lines]",
          "737:     ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "737:     ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     return h ? h->sps.num_reorder_frames : 0;",
          "92: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: static void h264_er_decode_mb(void *opaque, int ref, int mv_dir, int mv_type,",
          "95:                               int (*mv)[2][4][2],",
          "96:                               int mb_x, int mb_y, int mb_intra, int mb_skipped)",
          "97: {",
          "98:     H264Context    *h = opaque;",
          "99:     MpegEncContext *s = &h->s;",
          "101:     s->mb_x  = mb_x;",
          "102:     s->mb_y  = mb_y;",
          "103:     h->mb_xy = s->mb_x + s->mb_y * s->mb_stride;",
          "104:     memset(h->non_zero_count_cache, 0, sizeof(h->non_zero_count_cache));",
          "105:     av_assert1(ref >= 0);",
          "110:     if (ref >= h->ref_count[0])",
          "111:         ref = 0;",
          "112:     if (!h->ref_list[0][ref].f.data[0]) {",
          "113:         av_log(s->avctx, AV_LOG_DEBUG, \"Reference not available for error concealing\\n\");",
          "114:         ref = 0;",
          "115:     }",
          "116:     if ((h->ref_list[0][ref].f.reference&3) != 3) {",
          "117:         av_log(s->avctx, AV_LOG_DEBUG, \"Reference invalid\\n\");",
          "118:         return;",
          "119:     }",
          "120:     fill_rectangle(&s->current_picture.f.ref_index[0][4 * h->mb_xy],",
          "121:                    2, 2, 2, ref, 1);",
          "122:     fill_rectangle(&h->ref_cache[0][scan8[0]], 4, 4, 8, ref, 1);",
          "123:     fill_rectangle(h->mv_cache[0][scan8[0]], 4, 4, 8,",
          "124:                    pack16to32((*mv)[0][0][0], (*mv)[0][0][1]), 4);",
          "125:     h->mb_mbaff =",
          "126:     h->mb_field_decoding_flag = 0;",
          "127:     ff_h264_hl_decode_mb(h);",
          "128: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "977:     h->ref_cache[1][scan8[7]  + 1] =",
          "978:     h->ref_cache[1][scan8[13] + 1] = PART_NOT_AVAILABLE;",
          "980:     return 0;",
          "982: fail:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:     h->s.er.decode_mb = h264_er_decode_mb;",
          "1017:     h->s.er.opaque    = h;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1355:         return -1;",
          "1356:     if(!h->sync)",
          "1357:         avpriv_color_frame(&h->s.current_picture_ptr->f, c);",
          "",
          "[Removed Lines]",
          "1358:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "1398:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2380:     if (!FIELD_PICTURE && h->current_slice && !h->sps.new)",
          "2383:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "2381:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "2421:         ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3158:     if (h->slice_type_nos != AV_PICTURE_TYPE_I) {",
          "3159:         s->last_picture_ptr = &h->ref_list[0][0];",
          "3160:         s->last_picture_ptr->owner2 = s;",
          "3161:         ff_copy_picture(&s->last_picture, s->last_picture_ptr);",
          "3162:     }",
          "3163:     if (h->slice_type_nos == AV_PICTURE_TYPE_B) {",
          "3164:         s->next_picture_ptr = &h->ref_list[1][0];",
          "3165:         s->next_picture_ptr->owner2 = s;",
          "3166:         ff_copy_picture(&s->next_picture, s->next_picture_ptr);",
          "3167:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3201:         s->er.last_pic = s->last_picture_ptr;",
          "3207:         s->er.next_pic = s->next_picture_ptr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3734:                               s->picture_structure == PICT_BOTTOM_FIELD);",
          "3735: }",
          "3737: static int decode_slice(struct AVCodecContext *avctx, void *arg)",
          "3738: {",
          "3739:     H264Context *h = *(void **)arg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3779: static void er_add_slice(H264Context *h, int startx, int starty,",
          "3780:                          int endx, int endy, int status)",
          "3781: {",
          "3782:     ERContext *er = &h->s.er;",
          "3784:     er->ref_count = h->ref_count[0];",
          "3785:     ff_er_add_slice(er, startx, starty, endx, endy, status);",
          "3786: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3783:             if ((s->workaround_bugs & FF_BUG_TRUNCATED) &&",
          "3784:                 h->cabac.bytestream > h->cabac.bytestream_end + 2) {",
          "3786:                                 s->mb_y, ER_MB_END);",
          "3787:                 if (s->mb_x >= lf_x_start)",
          "3788:                     loop_filter(h, lf_x_start, s->mb_x + 1);",
          "",
          "[Removed Lines]",
          "3785:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "[Added Lines]",
          "3836:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3795:                        \"error while decoding MB %d %d, bytestream (%td)\\n\",",
          "3796:                        s->mb_x, s->mb_y,",
          "3797:                        h->cabac.bytestream_end - h->cabac.bytestream);",
          "3799:                                 s->mb_y, ER_MB_ERROR);",
          "3800:                 return -1;",
          "3801:             }",
          "",
          "[Removed Lines]",
          "3798:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "[Added Lines]",
          "3849:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3815:             if (eos || s->mb_y >= s->mb_height) {",
          "3816:                 tprintf(s->avctx, \"slice end %d %d\\n\",",
          "3817:                         get_bits_count(&s->gb), s->gb.size_in_bits);",
          "3819:                                 s->mb_y, ER_MB_END);",
          "3820:                 if (s->mb_x > lf_x_start)",
          "3821:                     loop_filter(h, lf_x_start, s->mb_x);",
          "",
          "[Removed Lines]",
          "3818:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "[Added Lines]",
          "3869:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x - 1,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3842:             if (ret < 0) {",
          "3843:                 av_log(h->s.avctx, AV_LOG_ERROR,",
          "3844:                        \"error while decoding MB %d %d\\n\", s->mb_x, s->mb_y);",
          "3846:                                 s->mb_y, ER_MB_ERROR);",
          "3847:                 return -1;",
          "3848:             }",
          "",
          "[Removed Lines]",
          "3845:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "[Added Lines]",
          "3896:                 er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3864:                     if (   get_bits_left(&s->gb) == 0",
          "3865:                         || get_bits_left(&s->gb) > 0 && !(s->avctx->err_recognition & AV_EF_AGGRESSIVE)) {",
          "3867:                                         s->mb_x - 1, s->mb_y,",
          "3868:                                         ER_MB_END);",
          "3870:                         return 0;",
          "3871:                     } else {",
          "3873:                                         s->mb_x, s->mb_y,",
          "3874:                                         ER_MB_END);",
          "",
          "[Removed Lines]",
          "3866:                         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "3872:                         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "",
          "[Added Lines]",
          "3917:                         er_add_slice(h, s->resync_mb_x, s->resync_mb_y,",
          "3923:                         er_add_slice(h, s->resync_mb_x, s->resync_mb_y,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3882:                 tprintf(s->avctx, \"slice end %d %d\\n\",",
          "3883:                         get_bits_count(&s->gb), s->gb.size_in_bits);",
          "3884:                 if (get_bits_left(&s->gb) == 0) {",
          "3886:                                     s->mb_x - 1, s->mb_y,",
          "3887:                                     ER_MB_END);",
          "3888:                     if (s->mb_x > lf_x_start)",
          "",
          "[Removed Lines]",
          "3885:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "",
          "[Added Lines]",
          "3936:                     er_add_slice(h, s->resync_mb_x, s->resync_mb_y,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3891:                     return 0;",
          "3892:                 } else {",
          "3894:                                     s->mb_y, ER_MB_ERROR);",
          "3896:                     return -1;",
          "",
          "[Removed Lines]",
          "3893:                     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "[Added Lines]",
          "3944:                     er_add_slice(h, s->resync_mb_x, s->resync_mb_y, s->mb_x,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3923:         for (i = 1; i < context_count; i++) {",
          "3924:             hx                    = h->thread_context[i];",
          "3925:             hx->s.err_recognition = avctx->err_recognition;",
          "3927:             hx->x264_build        = h->x264_build;",
          "3928:         }",
          "",
          "[Removed Lines]",
          "3926:             hx->s.error_count     = 0;",
          "",
          "[Added Lines]",
          "3977:             hx->s.er.error_count  = 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3937:         s->droppable         = hx->s.droppable;",
          "3938:         s->picture_structure = hx->s.picture_structure;",
          "3939:         for (i = 1; i < context_count; i++)",
          "3941:     }",
          "3943:     return 0;",
          "",
          "[Removed Lines]",
          "3940:             h->s.error_count += h->thread_context[i]->s.error_count;",
          "",
          "[Added Lines]",
          "3991:             h->s.er.error_count += h->thread_context[i]->s.er.error_count;",
          "",
          "---------------"
        ],
        "libavcodec/intrax8.c||libavcodec/intrax8.c": [
          "File: libavcodec/intrax8.c -> libavcodec/intrax8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:     }",
          "783: error:",
          "785:                         (s->mb_x>>1)-1, (s->mb_y>>1)-1,",
          "786:                         ER_MB_END );",
          "787:     return 0;",
          "",
          "[Removed Lines]",
          "784:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y,",
          "",
          "[Added Lines]",
          "784:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y,",
          "",
          "---------------"
        ],
        "libavcodec/mpeg12.c||libavcodec/mpeg12.c": [
          "File: libavcodec/mpeg12.c -> libavcodec/mpeg12.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1609:         if (ff_MPV_frame_start(s, avctx) < 0)",
          "1610:             return -1;",
          "1615:         s->current_picture_ptr->f.repeat_pict = 0;",
          "",
          "[Removed Lines]",
          "1612:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "1612:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1903:     int mb_y            = s->start_mb_y;",
          "1904:     const int field_pic = s->picture_structure != PICT_FRAME;",
          "1908:     for (;;) {",
          "1909:         uint32_t start_code;",
          "",
          "[Removed Lines]",
          "1906:     s->error_count = (3 * (s->end_mb_y - s->start_mb_y) * s->mb_width) >> field_pic;",
          "",
          "[Added Lines]",
          "1906:     s->er.error_count = (3 * (s->end_mb_y - s->start_mb_y) * s->mb_width) >> field_pic;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1913:         emms_c();",
          "1914:         av_dlog(c, \"ret:%d resync:%d/%d mb:%d/%d ts:%d/%d ec:%d\\n\",",
          "1915:                 ret, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y,",
          "1917:         if (ret < 0) {",
          "1918:             if (c->err_recognition & AV_EF_EXPLODE)",
          "1919:                 return ret;",
          "1920:             if (s->resync_mb_x >= 0 && s->resync_mb_y >= 0)",
          "1922:         } else {",
          "1924:         }",
          "1926:         if (s->mb_y == s->end_mb_y)",
          "",
          "[Removed Lines]",
          "1916:                 s->start_mb_y, s->end_mb_y, s->error_count);",
          "1921:                 ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "1923:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "[Added Lines]",
          "1916:                 s->start_mb_y, s->end_mb_y, s->er.error_count);",
          "1921:                 ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "1923:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1966:         s->current_picture_ptr->f.qscale_type = FF_QSCALE_TYPE_MPEG2;",
          "1970:         ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "1968:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1968:         ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2274:                     avctx->execute(avctx, slice_decode_thread,  &s2->thread_context[0], NULL, s->slice_count, sizeof(void*));",
          "2275:                     for (i = 0; i < s->slice_count; i++)",
          "2277:                 }",
          "2279:                 if (CONFIG_VDPAU && uses_vdpau(avctx))",
          "",
          "[Removed Lines]",
          "2276:                         s2->error_count += s2->thread_context[i]->error_count;",
          "",
          "[Added Lines]",
          "2276:                         s2->er.error_count += s2->thread_context[i]->er.error_count;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2326:                                s2->thread_context, NULL,",
          "2327:                                s->slice_count, sizeof(void*));",
          "2328:                 for (i = 0; i < s->slice_count; i++)",
          "2330:                 s->slice_count = 0;",
          "2331:             }",
          "2332:             if (last_code == 0 || last_code == SLICE_MIN_START_CODE) {",
          "",
          "[Removed Lines]",
          "2329:                     s2->error_count += s2->thread_context[i]->error_count;",
          "",
          "[Added Lines]",
          "2329:                     s2->er.error_count += s2->thread_context[i]->er.error_count;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2515:                         if (avctx->err_recognition & AV_EF_EXPLODE)",
          "2516:                             return ret;",
          "2517:                         if (s2->resync_mb_x >= 0 && s2->resync_mb_y >= 0)",
          "2519:                     } else {",
          "2521:                     }",
          "2522:                 }",
          "2523:             }",
          "",
          "[Removed Lines]",
          "2518:                             ff_er_add_slice(s2, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x, s2->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "2520:                         ff_er_add_slice(s2, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x-1, s2->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "[Added Lines]",
          "2518:                             ff_er_add_slice(&s2->er, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x, s2->mb_y, ER_AC_ERROR | ER_DC_ERROR | ER_MV_ERROR);",
          "2520:                         ff_er_add_slice(&s2->er, s2->resync_mb_x, s2->resync_mb_y, s2->mb_x-1, s2->mb_y, ER_AC_END | ER_DC_END | ER_MV_END);",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c": [
          "File: libavcodec/mpeg4videodec.c -> libavcodec/mpeg4videodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:     mb_num= mpeg4_decode_partition_a(s);",
          "800:     if(mb_num<0){",
          "802:         return -1;",
          "803:     }",
          "805:     if(s->resync_mb_x + s->resync_mb_y*s->mb_width + mb_num > s->mb_num){",
          "806:         av_log(s->avctx, AV_LOG_ERROR, \"slice below monitor ...\\n\");",
          "808:         return -1;",
          "809:     }",
          "",
          "[Removed Lines]",
          "801:         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "807:         ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "",
          "[Added Lines]",
          "801:         ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "807:         ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, part_a_error);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:             return -1;",
          "826:         }",
          "827:     }",
          "830:     if( mpeg4_decode_partition_b(s, mb_num) < 0){",
          "831:         if(s->pict_type==AV_PICTURE_TYPE_P)",
          "833:         return -1;",
          "834:     }else{",
          "835:         if(s->pict_type==AV_PICTURE_TYPE_P)",
          "837:     }",
          "839:     return 0;",
          "",
          "[Removed Lines]",
          "828:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, part_a_end);",
          "832:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_DC_ERROR);",
          "836:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_DC_END);",
          "",
          "[Added Lines]",
          "828:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, part_a_end);",
          "832:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x, s->mb_y, ER_DC_ERROR);",
          "836:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_DC_END);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
          "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     AV_PIX_FMT_NONE",
          "146: };",
          "148: const uint8_t *avpriv_mpv_find_start_code(const uint8_t *av_restrict p,",
          "149:                                           const uint8_t *end,",
          "150:                                           uint32_t *av_restrict state)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: static void mpeg_er_decode_mb(void *opaque, int ref, int mv_dir, int mv_type,",
          "149:                               int (*mv)[2][4][2],",
          "150:                               int mb_x, int mb_y, int mb_intra, int mb_skipped)",
          "151: {",
          "152:     MpegEncContext *s = opaque;",
          "154:     s->mv_dir     = mv_dir;",
          "155:     s->mv_type    = mv_type;",
          "156:     s->mb_intra   = mb_intra;",
          "157:     s->mb_skipped = mb_skipped;",
          "158:     s->mb_x       = mb_x;",
          "159:     s->mb_y       = mb_y;",
          "160:     memcpy(s->mv, mv, sizeof(*mv));",
          "162:     ff_init_block_index(s);",
          "163:     ff_update_block_index(s);",
          "165:     s->dsp.clear_blocks(s->block[0]);",
          "167:     s->dest[0] = s->current_picture.f.data[0] + (s->mb_y *  16                       * s->linesize)   + s->mb_x *  16;",
          "168:     s->dest[1] = s->current_picture.f.data[1] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "169:     s->dest[2] = s->current_picture.f.data[2] + (s->mb_y * (16 >> s->chroma_y_shift) * s->uvlinesize) + s->mb_x * (16 >> s->chroma_x_shift);",
          "171:     assert(ref == 0);",
          "172:     ff_MPV_decode_mb(s, s->block);",
          "173: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "734:     ff_MPV_common_defaults(s);",
          "735: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764: static int init_er(MpegEncContext *s)",
          "765: {",
          "766:     ERContext *er = &s->er;",
          "767:     int mb_array_size = s->mb_height * s->mb_stride;",
          "768:     int i;",
          "770:     er->avctx       = s->avctx;",
          "771:     er->dsp         = &s->dsp;",
          "773:     er->mb_index2xy = s->mb_index2xy;",
          "774:     er->mb_num      = s->mb_num;",
          "775:     er->mb_width    = s->mb_width;",
          "776:     er->mb_height   = s->mb_height;",
          "777:     er->mb_stride   = s->mb_stride;",
          "778:     er->b8_stride   = s->b8_stride;",
          "780:     er->er_temp_buffer     = av_malloc(s->mb_height * s->mb_stride);",
          "781:     er->error_status_table = av_mallocz(mb_array_size);",
          "782:     if (!er->er_temp_buffer || !er->error_status_table)",
          "783:         goto fail;",
          "785:     er->mbskip_table  = s->mbskip_table;",
          "786:     er->mbintra_table = s->mbintra_table;",
          "788:     for (i = 0; i < FF_ARRAY_ELEMS(s->dc_val); i++)",
          "789:         er->dc_val[i] = s->dc_val[i];",
          "791:     er->decode_mb = mpeg_er_decode_mb;",
          "792:     er->opaque    = s;",
          "794:     return 0;",
          "795: fail:",
          "796:     av_freep(&er->er_temp_buffer);",
          "797:     av_freep(&er->error_status_table);",
          "798:     return AVERROR(ENOMEM);",
          "799: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "801:     }",
          "810:         for (i = 0; i < 2; i++) {",
          "811:             int j, k;",
          "",
          "[Removed Lines]",
          "803:     FF_ALLOC_OR_GOTO(s->avctx, s->er_temp_buffer,",
          "804:                      mb_array_size * sizeof(uint8_t), fail);",
          "805:     FF_ALLOCZ_OR_GOTO(s->avctx, s->error_status_table,",
          "806:                       mb_array_size * sizeof(uint8_t), fail);",
          "808:     if (s->codec_id == AV_CODEC_ID_MPEG4 || (s->flags & CODEC_FLAG_INTERLACED_ME)) {",
          "",
          "[Added Lines]",
          "867:     if (s->codec_id == AV_CODEC_ID_MPEG4 ||",
          "868:         (s->flags & CODEC_FLAG_INTERLACED_ME)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "854:     FF_ALLOCZ_OR_GOTO(s->avctx, s->mbskip_table, mb_array_size + 2, fail);",
          "858: fail:",
          "859:     return AVERROR(ENOMEM);",
          "860: }",
          "",
          "[Removed Lines]",
          "857:     return 0;",
          "",
          "[Added Lines]",
          "917:     return init_er(s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1024:     av_freep(&s->mbskip_table);",
          "1028:     av_freep(&s->mb_index2xy);",
          "1029:     av_freep(&s->lambda_table);",
          "",
          "[Removed Lines]",
          "1026:     av_freep(&s->error_status_table);",
          "1027:     av_freep(&s->er_temp_buffer);",
          "",
          "[Added Lines]",
          "1086:     av_freep(&s->er.error_status_table);",
          "1087:     av_freep(&s->er.er_temp_buffer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1596:     if (CONFIG_MPEG_XVMC_DECODER && s->avctx->xvmc_acceleration) {",
          "1597:         ff_xvmc_field_end(s);",
          "1599:               !s->avctx->hwaccel &&",
          "1600:               !(s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU) &&",
          "1601:               s->unrestricted_mv &&",
          "",
          "[Removed Lines]",
          "1598:    } else if((s->error_count || s->encoding || !(s->avctx->codec->capabilities&CODEC_CAP_DRAW_HORIZ_BAND)) &&",
          "",
          "[Added Lines]",
          "1658:    } else if ((s->er.error_count || s->encoding || !(s->avctx->codec->capabilities&CODEC_CAP_DRAW_HORIZ_BAND)) &&",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3165: void ff_MPV_report_decode_progress(MpegEncContext *s)",
          "3166: {",
          "3168:         ff_thread_report_progress(&s->current_picture_ptr->f, s->mb_y, 0);",
          "3169: }",
          "",
          "[Removed Lines]",
          "3167:     if (s->pict_type != AV_PICTURE_TYPE_B && !s->partitioned_frame && !s->error_occurred)",
          "",
          "[Added Lines]",
          "3227:     if (s->pict_type != AV_PICTURE_TYPE_B && !s->partitioned_frame && !s->er.error_occurred)",
          "3231: void ff_mpeg_er_frame_start(MpegEncContext *s)",
          "3232: {",
          "3233:     ERContext *er = &s->er;",
          "3235:     er->cur_pic  = s->current_picture_ptr;",
          "3236:     er->last_pic = s->last_picture_ptr;",
          "3237:     er->next_pic = s->next_picture_ptr;",
          "3239:     er->pp_time           = s->pp_time;",
          "3240:     er->pb_time           = s->pb_time;",
          "3241:     er->quarter_sample    = s->quarter_sample;",
          "3242:     er->partitioned_frame = s->partitioned_frame;",
          "3244:     ff_er_frame_start(er);",
          "3245: }",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h": [
          "File: libavcodec/mpegvideo.h -> libavcodec/mpegvideo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"avcodec.h\"",
          "32: #include \"dsputil.h\"",
          "33: #include \"get_bits.h\"",
          "34: #include \"h264chroma.h\"",
          "35: #include \"put_bits.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"error_resilience.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     int last_bits; ///< temp var used for calculating the above vars",
          "510:     int resync_mb_x;                 ///< x position of last resync marker",
          "511:     int resync_mb_y;                 ///< y position of last resync marker",
          "512:     GetBitContext last_resync_gb;    ///< used to search for the next resync marker",
          "",
          "[Removed Lines]",
          "497:     int error_count, error_occurred;",
          "498:     uint8_t *error_status_table;       ///< table of the error status of each MB",
          "499: #define VP_START            1          ///< current MB is the first after a resync marker",
          "500: #define ER_AC_ERROR            2",
          "501: #define ER_DC_ERROR            4",
          "502: #define ER_MV_ERROR            8",
          "503: #define ER_AC_END              16",
          "504: #define ER_DC_END              32",
          "505: #define ER_MV_END              64",
          "507: #define ER_MB_ERROR (ER_AC_ERROR|ER_DC_ERROR|ER_MV_ERROR)",
          "508: #define ER_MB_END   (ER_AC_END|ER_DC_END|ER_MV_END)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "715:     int mpv_flags;      ///< flags set by private options",
          "716:     int quantizer_noise_shaping;",
          "722:     float *cplx_tab, *bits_tab;",
          "726:     int context_reinit;",
          "727: } MpegEncContext;",
          "729: #define REBASE_PICTURE(pic, new_ctx, old_ctx)             \\",
          "",
          "[Removed Lines]",
          "719:     uint8_t *er_temp_buffer;",
          "",
          "[Added Lines]",
          "713:     ERContext er;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "801: const uint8_t *avpriv_mpv_find_start_code(const uint8_t *p, const uint8_t *end, uint32_t *state);",
          "802: void ff_set_qscale(MpegEncContext * s, int qscale);",
          "808: int ff_dct_common_init(MpegEncContext *s);",
          "809: int ff_dct_encode_init(MpegEncContext *s);",
          "",
          "[Removed Lines]",
          "804: void ff_er_frame_start(MpegEncContext *s);",
          "805: void ff_er_frame_end(MpegEncContext *s);",
          "806: void ff_er_add_slice(MpegEncContext *s, int startx, int starty, int endx, int endy, int status);",
          "",
          "[Added Lines]",
          "791: void ff_mpeg_er_frame_start(MpegEncContext *s);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo_enc.c||libavcodec/mpegvideo_enc.c": [
          "File: libavcodec/mpegvideo_enc.c -> libavcodec/mpegvideo_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3172:     MERGE(b_count);",
          "3173:     MERGE(skip_count);",
          "3174:     MERGE(misc_bits);",
          "3176:     MERGE(padding_bug_score);",
          "3177:     MERGE(current_picture.f.error[0]);",
          "3178:     MERGE(current_picture.f.error[1]);",
          "",
          "[Removed Lines]",
          "3175:     MERGE(error_count);",
          "",
          "[Added Lines]",
          "3175:     MERGE(er.error_count);",
          "",
          "---------------"
        ],
        "libavcodec/mss2.c||libavcodec/mss2.c": [
          "File: libavcodec/mss2.c -> libavcodec/mss2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:         return ret;",
          "407:     }",
          "411:     v->bits = buf_size * 8;",
          "",
          "[Removed Lines]",
          "409:     ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "409:     ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:     ff_vc1_decode_blocks(v);",
          "424:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "422:     ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "422:     ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/rv10.c||libavcodec/rv10.c": [
          "File: libavcodec/rv10.c -> libavcodec/rv10.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:     if ((s->mb_x == 0 && s->mb_y == 0) || s->current_picture_ptr==NULL) {",
          "563:         if(s->current_picture_ptr){ //FIXME write parser so we always have complete frames?",
          "565:             ff_MPV_frame_end(s);",
          "566:             s->mb_x= s->mb_y = s->resync_mb_x = s->resync_mb_y= 0;",
          "567:         }",
          "568:         if(ff_MPV_frame_start(s, avctx) < 0)",
          "569:             return -1;",
          "571:     } else {",
          "572:         if (s->current_picture_ptr->f.pict_type != s->pict_type) {",
          "573:             av_log(s->avctx, AV_LOG_ERROR, \"Slice type mismatch\\n\");",
          "",
          "[Removed Lines]",
          "564:             ff_er_frame_end(s);",
          "570:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "564:             ff_er_frame_end(&s->er);",
          "570:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:         if(ret == SLICE_END) break;",
          "661:     }",
          "665:     return active_bits_size;",
          "666: }",
          "",
          "[Removed Lines]",
          "663:     ff_er_add_slice(s, start_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "663:     ff_er_add_slice(&s->er, start_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:     }",
          "735:     if(s->current_picture_ptr != NULL && s->mb_y>=s->mb_height){",
          "737:         ff_MPV_frame_end(s);",
          "739:         if (s->pict_type == AV_PICTURE_TYPE_B || s->low_delay) {",
          "",
          "[Removed Lines]",
          "736:         ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "736:         ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/rv34.c||libavcodec/rv34.c": [
          "File: libavcodec/rv34.c -> libavcodec/rv34.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433:         else",
          "1434:             res = rv34_decode_intra_macroblock(r, r->intra_types + s->mb_x * 4 + 4);",
          "1435:         if(res < 0){",
          "1437:             return -1;",
          "1438:         }",
          "1439:         if (++s->mb_x == s->mb_width) {",
          "",
          "[Removed Lines]",
          "1436:             ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "1436:             ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1456:             s->first_slice_line=0;",
          "1457:         s->mb_num_left--;",
          "1458:     }",
          "1461:     return s->mb_y == s->mb_height;",
          "1462: }",
          "",
          "[Removed Lines]",
          "1459:     ff_er_add_slice(s, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "[Added Lines]",
          "1459:     ff_er_add_slice(&s->er, s->resync_mb_x, s->resync_mb_y, s->mb_x-1, s->mb_y, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1569:     MpegEncContext *s = &r->s;",
          "1570:     int got_picture = 0;",
          "1573:     ff_MPV_frame_end(s);",
          "1574:     s->mb_num_left = 0;",
          "",
          "[Removed Lines]",
          "1572:     ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1572:     ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1651:         if (s->mb_num_left > 0) {",
          "1652:             av_log(avctx, AV_LOG_ERROR, \"New frame but still %d MB left.\\n\",",
          "1653:                    s->mb_num_left);",
          "1655:             ff_MPV_frame_end(s);",
          "1656:         }",
          "",
          "[Removed Lines]",
          "1654:             ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1654:             ff_er_frame_end(&s->er);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1675:         s->pict_type = si.type ? si.type : AV_PICTURE_TYPE_I;",
          "1676:         if (ff_MPV_frame_start(s, s->avctx) < 0)",
          "1677:             return -1;",
          "1679:         if (!r->tmp_b_block_base) {",
          "1680:             int i;",
          "",
          "[Removed Lines]",
          "1678:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "1678:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1774:             av_log(avctx, AV_LOG_INFO, \"marking unfished frame as finished\\n\");",
          "1778:             ff_MPV_frame_end(s);",
          "1779:             s->mb_num_left = 0;",
          "1780:             ff_thread_report_progress(&s->current_picture_ptr->f, INT_MAX, 0);",
          "",
          "[Removed Lines]",
          "1777:             ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "1777:             ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ],
        "libavcodec/vc1dec.c||libavcodec/vc1dec.c": [
          "File: libavcodec/vc1dec.c -> libavcodec/vc1dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4447:             if (v->s.loop_filter) vc1_loop_filter_iblk(v, v->pq);",
          "4449:             if (get_bits_count(&s->gb) > v->bits) {",
          "4451:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i\\n\",",
          "4452:                        get_bits_count(&s->gb), v->bits);",
          "4453:                 return;",
          "",
          "[Removed Lines]",
          "4450:                 ff_er_add_slice(s, 0, 0, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4450:                 ff_er_add_slice(&s->er, 0, 0, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4469: }",
          "",
          "[Removed Lines]",
          "4468:     ff_er_add_slice(s, 0, 0, s->mb_width - 1, s->mb_height - 1, ER_MB_END);",
          "",
          "[Added Lines]",
          "4468:     ff_er_add_slice(&s->er, 0, 0, s->mb_width - 1, s->mb_height - 1, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4576:             if (get_bits_count(&s->gb) > v->bits) {",
          "4579:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i\\n\",",
          "4580:                        get_bits_count(&s->gb), v->bits);",
          "4581:                 return;",
          "",
          "[Removed Lines]",
          "4578:                 ff_er_add_slice(s, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4578:                 ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4600:     }",
          "4601:     if (v->s.loop_filter)",
          "4602:         ff_draw_horiz_band(s, (s->end_mb_y-1)*16, 16);",
          "4604:                     (s->end_mb_y << v->field_mode) - 1, ER_MB_END);",
          "4605: }",
          "",
          "[Removed Lines]",
          "4603:     ff_er_add_slice(s, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "[Added Lines]",
          "4603:     ff_er_add_slice(&s->er, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4652:                 vc1_apply_p_loop_filter(v);",
          "4653:             if (get_bits_count(&s->gb) > v->bits || get_bits_count(&s->gb) < 0) {",
          "4656:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i at %ix%i\\n\",",
          "4657:                        get_bits_count(&s->gb), v->bits, s->mb_x, s->mb_y);",
          "4658:                 return;",
          "",
          "[Removed Lines]",
          "4655:                 ff_er_add_slice(s, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4655:                 ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4675:     }",
          "4676:     if (s->end_mb_y >= s->start_mb_y)",
          "4677:         ff_draw_horiz_band(s, (s->end_mb_y - 1) * 16, 16);",
          "4679:                     (s->end_mb_y << v->field_mode) - 1, ER_MB_END);",
          "4680: }",
          "",
          "[Removed Lines]",
          "4678:     ff_er_add_slice(s, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "[Added Lines]",
          "4678:     ff_er_add_slice(&s->er, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4721:                 vc1_decode_b_mb(v);",
          "4722:             if (get_bits_count(&s->gb) > v->bits || get_bits_count(&s->gb) < 0) {",
          "4725:                 av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption: %i > %i at %ix%i\\n\",",
          "4726:                        get_bits_count(&s->gb), v->bits, s->mb_x, s->mb_y);",
          "4727:                 return;",
          "",
          "[Removed Lines]",
          "4724:                 ff_er_add_slice(s, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "[Added Lines]",
          "4724:                 ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4736:     }",
          "4737:     if (v->s.loop_filter)",
          "4738:         ff_draw_horiz_band(s, (s->end_mb_y - 1) * 16, 16);",
          "4740:                     (s->end_mb_y << v->field_mode) - 1, ER_MB_END);",
          "4741: }",
          "",
          "[Removed Lines]",
          "4739:     ff_er_add_slice(s, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "[Added Lines]",
          "4739:     ff_er_add_slice(&s->er, 0, s->start_mb_y << v->field_mode, s->mb_width - 1,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4744: {",
          "4745:     MpegEncContext *s = &v->s;",
          "4748:     s->first_slice_line = 1;",
          "4749:     for (s->mb_y = s->start_mb_y; s->mb_y < s->end_mb_y; s->mb_y++) {",
          "4750:         s->mb_x = 0;",
          "",
          "[Removed Lines]",
          "4747:     ff_er_add_slice(s, 0, s->start_mb_y, s->mb_width - 1, s->end_mb_y - 1, ER_MB_END);",
          "",
          "[Added Lines]",
          "4747:     ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_width - 1, s->end_mb_y - 1, ER_MB_END);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5643:         if (v->fcm == ILACE_FRAME && s->pict_type == AV_PICTURE_TYPE_B)",
          "5644:             goto err; // This codepath is still incomplete thus it is disabled",
          "5648:         v->bits = buf_size * 8;",
          "5649:         v->end_mb_x = s->mb_width;",
          "",
          "[Removed Lines]",
          "5646:         ff_er_frame_start(s);",
          "",
          "[Added Lines]",
          "5646:         ff_mpeg_er_frame_start(s);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5733:                 get_bits_count(&s->gb), s->gb.size_in_bits);",
          "5737:             goto err;",
          "5738:         if(!v->field_mode)",
          "5740:     }",
          "5742:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "5736:         if(s->error_occurred && s->pict_type == AV_PICTURE_TYPE_B)",
          "5739:             ff_er_frame_end(s);",
          "",
          "[Added Lines]",
          "5736:         if(s->er.error_occurred && s->pict_type == AV_PICTURE_TYPE_B)",
          "5739:             ff_er_frame_end(&s->er);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60af6c3138dc501a647bc69b374d5d33d5d86ab5",
      "candidate_info": {
        "commit_hash": "60af6c3138dc501a647bc69b374d5d33d5d86ab5",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/60af6c3138dc501a647bc69b374d5d33d5d86ab5",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: Only apply error concealment if theres a frame\n\nWithout any correctly decoded slices, there can be no frame.\n\nFixes out of array reads\n\nFound-by: Rafa\u00ebl Carr\u00e9\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2364:         ff_er_frame_end(s);",
          "2366:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "2363:     if (!FIELD_PICTURE)",
          "",
          "[Added Lines]",
          "2363:     if (!FIELD_PICTURE && h->current_slice)",
          "",
          "---------------"
        ]
      }
    }
  ]
}