{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "74e1b861ad749a00966583c29f0e2d8dfb510c82",
      "candidate_info": {
        "commit_hash": "74e1b861ad749a00966583c29f0e2d8dfb510c82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74e1b861ad749a00966583c29f0e2d8dfb510c82",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Extra VDBE comments in the NULLS LAST logic provide landmarks to help understand the EXPLAIN output.\n\nFossilOrigin-Name: 649b08ead50f10a9ec0357a5e1ed020195d9f93be61ef703ea036a8e53f07a34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d3531f5be7d3769689e2cd8bdc9bab5608759de027d44cc123996f32a4a89583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5219:       if( pLevel->regBignull ){",
          "5220:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5221:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5222:         VdbeCoverage(v);",
          "5223:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5224:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5225:         sqlite3VdbeJumpHere(v, addr);",
          "5226:       }",
          "5227: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5222:         VdbeComment((v, \"If NULL-scan done\"));",
          "5226:         VdbeComment((v, \"Do the NULL-scan\"));",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1555:     pIdx = pLoop->u.btree.pIndex;",
          "1556:     iIdxCur = pLevel->iIdxCur;",
          "",
          "[Removed Lines]",
          "1553:     int regBignull = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1694:       }",
          "1696:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1694:         VdbeComment((v, \"NULL-scan flag\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1776:     if( nConstraint ){",
          "1777:       if( regBignull ){",
          "1778:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1779:         VdbeCoverage(v);",
          "1780:       }",
          "1781:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780:         VdbeComment((v, \"If in NULL-scan\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1787:     }",
          "1788:     if( regBignull ){",
          "1789:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1790:       VdbeCoverage(v);",
          "1791:       if( bStopAtNull ){",
          "1792:         op = aEndOp[bRev*2 + 0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792:       VdbeComment((v, \"If not in NULL-scan\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f57bea31bad6081613945a4a344e6859cd189de1",
      "candidate_info": {
        "commit_hash": "f57bea31bad6081613945a4a344e6859cd189de1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f57bea31bad6081613945a4a344e6859cd189de1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fix a problem in the .recover command with recovering WITHOUT ROWID tables where the PK columns are not the leftmost in the CREATE TABLE statement.\n\nFossilOrigin-Name: 91df4b8e0386105d01614921e8410994b621404a3d46ec4af8687b8743c52d52",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7221f6e33ed6a5a96ec61e25f2a1f70b84aae66e503d897eb7b7ff1aec42355d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6317:       i = 1;",
          "6318:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6319:           \"SELECT %Q || group_concat(name, ', ') \"",
          "6321:           \"FROM pragma_table_info(%Q)\",",
          "6323:       );",
          "6324:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6325:         const char *zText = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6320:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY cid) \"",
          "6322:           bIntkey ? \", \" : \"\", pTab->iPk, zName",
          "",
          "[Added Lines]",
          "6325:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6327:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "6328:           bIntkey ? \"\" : \"(CASE WHEN pk=0 THEN 1000000 ELSE pk END), \",",
          "6329:           zName",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: \"",
          "86: do_recover_test 1.3.2",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #-------------------------------------------------------------------------",
          "89: reset_db",
          "90: do_execsql_test 2.1.0 {",
          "91:   CREATE TABLE t1(a, b, c, PRIMARY KEY(b, c)) WITHOUT ROWID;",
          "92:   INSERT INTO t1 VALUES(1, 2, 3);",
          "93:   INSERT INTO t1 VALUES(4, 5, 6);",
          "94:   INSERT INTO t1 VALUES(7, 8, 9);",
          "95: }",
          "97: do_recover_test 2.1.1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d790c9a1613334e2fc6b92211911e032ecbf36cf",
      "candidate_info": {
        "commit_hash": "d790c9a1613334e2fc6b92211911e032ecbf36cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d790c9a1613334e2fc6b92211911e032ecbf36cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Tweak the shell tool \".recover\" command so that it can recover rows that consist of a rowid and no fields.\n\nFossilOrigin-Name: 279ac7fdec0b1409cd400b7b093f89089d93c49f596f378c6a3032434a85bf83",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd4bda73df3794eef424eb13e08fc7cc54347d1ac69febaeec41f6b6cb4a42bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6712:     \"    )\"",
          "6713:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6714:     \") \"",
          "6716:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6717:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6718:     \");\"",
          "",
          "[Removed Lines]",
          "6715:     \"FROM pages WHERE maxlen > 0 AND i NOT IN freelist;\"",
          "",
          "[Added Lines]",
          "6715:     \"FROM pages WHERE maxlen IS NOT NULL AND i NOT IN freelist;\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f88a24dc63ee8b5323c2236769517ad03d13926",
      "candidate_info": {
        "commit_hash": "7f88a24dc63ee8b5323c2236769517ad03d13926",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f88a24dc63ee8b5323c2236769517ad03d13926",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.30.0 for the next release cycle.\n\nFossilOrigin-Name: 2578e3c64b0a92ab92143f18d107a1a180bd6fa87243661930771c4c080f8098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d837ab0da52632699abc09320980606aef020df5020c253f99c97e24bf3c6d00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5f6243f6d851422dc643977cee096786eb0d0fd",
      "candidate_info": {
        "commit_hash": "b5f6243f6d851422dc643977cee096786eb0d0fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b5f6243f6d851422dc643977cee096786eb0d0fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/vdbe.c"
        ],
        "message": "Set the affinity of regular columns prior to computing the values of generated columns.  Ticket [d7c3f125c925c522]\n\nFossilOrigin-Name: d47d66e3d360d8aa6203a855228d2bc40d9a00d69c15f5066b7632d8fb1ed2cc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f065cf003bd2a3a580cb5b9fa2eacd8be075fe8c2bbc5688e9a9406abbfb3804",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   Walker w;",
          "230:   Column *pRedo;",
          "231:   int eProgress;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:   VdbeOp *pOp;",
          "234:   assert( pTab->tabFlags & TF_HasGenerated );",
          "235:   testcase( pTab->tabFlags & TF_HasVirtual );",
          "236:   testcase( pTab->tabFlags & TF_HasStored );",
          "241:   sqlite3TableAffinity(pParse->pVdbe, pTab, iRegStore);",
          "242:   if( (pTab->tabFlags & TF_HasStored)!=0",
          "243:    && (pOp = sqlite3VdbeGetOp(pParse->pVdbe,-1))->opcode==OP_Affinity",
          "244:   ){",
          "248:     int ii, jj;",
          "249:     char *zP4 = pOp->p4.z;",
          "250:     assert( zP4!=0 );",
          "251:     assert( pOp->p4type==P4_DYNAMIC );",
          "252:     for(ii=jj=0; zP4[jj]; ii++){",
          "253:       if( pTab->aCol[ii].colFlags & COLFLAG_VIRTUAL ){",
          "254:         continue;",
          "255:       }",
          "256:       if( pTab->aCol[ii].colFlags & COLFLAG_STORED ){",
          "257:         zP4[jj] = SQLITE_AFF_NONE;",
          "258:       }",
          "259:       jj++;",
          "260:     }",
          "261:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191:     if( pTab->tabFlags & TF_HasGenerated ){",
          "1194:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "1195:     }",
          "1196: #endif",
          "",
          "[Removed Lines]",
          "1192:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "1193:       testcase( pTab->tabFlags & TF_HasStored );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2818:   pIn1 = &aMem[pOp->p1];",
          "2819:   while( 1 /*exit-by-break*/ ){",
          "2820:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2822:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2823:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "",
          "[Removed Lines]",
          "2821:     assert( memIsValid(pIn1) );",
          "",
          "[Added Lines]",
          "2821:     assert( zAffinity[0]==SQLITE_AFF_NONE || memIsValid(pIn1) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}