{
  "cve_id": "CVE-2020-16588",
  "cve_desc": "A Null Pointer Deference issue exists in Academy Software Foundation OpenEXR 2.3.0 in generatePreview in makePreview.cpp that can cause a denial of service via a crafted EXR file.",
  "repo": "AcademySoftwareFoundation/openexr",
  "patch_hash": "74504503cff86e986bac441213c403b0ba28d58f",
  "patch_info": {
    "commit_hash": "74504503cff86e986bac441213c403b0ba28d58f",
    "repo": "AcademySoftwareFoundation/openexr",
    "commit_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/74504503cff86e986bac441213c403b0ba28d58f",
    "files": [
      "OpenEXR/exrmakepreview/makePreview.cpp"
    ],
    "message": "Fix logic for 1 pixel high/wide preview images (Fixes #493)",
    "before_after_code_files": [
      "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
    ]
  },
  "patch_diff": {
    "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp": [
      "File: OpenEXR/exrmakepreview/makePreview.cpp -> OpenEXR/exrmakepreview/makePreview.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:     previewHeight = max (int (h / (w * a) * previewWidth + .5f), 1);",
      "121:     previewPixels.resizeErase (previewHeight, previewWidth);",
      "125:     float m  = Math<float>::pow (2.f, IMATH_NAMESPACE::clamp (exposure + 2.47393f, -20.f, 20.f));",
      "127:     for (int y = 0; y < previewHeight; ++y)",
      "",
      "[Removed Lines]",
      "123:     float fx = (previewWidth  > 0)? (float (w - 1) / (previewWidth  - 1)): 1;",
      "124:     float fy = (previewHeight > 0)? (float (h - 1) / (previewHeight - 1)): 1;",
      "",
      "[Added Lines]",
      "123:     float fx = (previewWidth  > 1)? (float (w - 1) / (previewWidth  - 1)): 1;",
      "124:     float fy = (previewHeight > 1)? (float (h - 1) / (previewHeight - 1)): 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e79d2296496a50826a15c667bf92bdc5a05518b4",
      "candidate_info": {
        "commit_hash": "e79d2296496a50826a15c667bf92bdc5a05518b4",
        "repo": "AcademySoftwareFoundation/openexr",
        "commit_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/e79d2296496a50826a15c667bf92bdc5a05518b4",
        "files": [
          "OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp",
          "OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp",
          "OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp",
          "OpenEXR/IlmImf/ImfDwaCompressor.cpp",
          "OpenEXR/IlmImf/ImfFastHuf.cpp",
          "OpenEXR/IlmImf/ImfHeader.cpp",
          "OpenEXR/IlmImf/ImfHuf.cpp",
          "OpenEXR/IlmImf/ImfInputFile.cpp",
          "OpenEXR/IlmImf/ImfMisc.cpp",
          "OpenEXR/IlmImf/ImfPizCompressor.cpp",
          "OpenEXR/IlmImf/ImfRle.cpp",
          "OpenEXR/IlmImf/ImfScanLineInputFile.cpp",
          "OpenEXR/IlmImf/ImfTiledInputFile.cpp",
          "OpenEXR/IlmImf/ImfTiledMisc.cpp",
          "OpenEXR/IlmImfTest/testDeepTiledBasic.cpp",
          "OpenEXR/IlmImfTest/testMultiPartApi.cpp",
          "OpenEXR/IlmImfTest/testMultiPartThreading.cpp",
          "OpenEXR/exrmakepreview/makePreview.cpp"
        ],
        "message": "fix memory leaks and invalid memory accesses\n\nSigned-off-by: Peter Hillman <peterh@wetafx.co.nz>",
        "before_after_code_files": [
          "OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp||OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp",
          "OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp||OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp",
          "OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp||OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp",
          "OpenEXR/IlmImf/ImfDwaCompressor.cpp||OpenEXR/IlmImf/ImfDwaCompressor.cpp",
          "OpenEXR/IlmImf/ImfFastHuf.cpp||OpenEXR/IlmImf/ImfFastHuf.cpp",
          "OpenEXR/IlmImf/ImfHeader.cpp||OpenEXR/IlmImf/ImfHeader.cpp",
          "OpenEXR/IlmImf/ImfHuf.cpp||OpenEXR/IlmImf/ImfHuf.cpp",
          "OpenEXR/IlmImf/ImfInputFile.cpp||OpenEXR/IlmImf/ImfInputFile.cpp",
          "OpenEXR/IlmImf/ImfMisc.cpp||OpenEXR/IlmImf/ImfMisc.cpp",
          "OpenEXR/IlmImf/ImfPizCompressor.cpp||OpenEXR/IlmImf/ImfPizCompressor.cpp",
          "OpenEXR/IlmImf/ImfRle.cpp||OpenEXR/IlmImf/ImfRle.cpp",
          "OpenEXR/IlmImf/ImfScanLineInputFile.cpp||OpenEXR/IlmImf/ImfScanLineInputFile.cpp",
          "OpenEXR/IlmImf/ImfTiledInputFile.cpp||OpenEXR/IlmImf/ImfTiledInputFile.cpp",
          "OpenEXR/IlmImf/ImfTiledMisc.cpp||OpenEXR/IlmImf/ImfTiledMisc.cpp",
          "OpenEXR/IlmImfTest/testDeepTiledBasic.cpp||OpenEXR/IlmImfTest/testDeepTiledBasic.cpp",
          "OpenEXR/IlmImfTest/testMultiPartApi.cpp||OpenEXR/IlmImfTest/testMultiPartApi.cpp",
          "OpenEXR/IlmImfTest/testMultiPartThreading.cpp||OpenEXR/IlmImfTest/testMultiPartThreading.cpp",
          "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
          ],
          "candidate": [
            "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
          ]
        }
      },
      "candidate_diff": {
        "OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp||OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp": [
          "File: OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp -> OpenEXR/IlmImf/ImfCompositeDeepScanLine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include <Iex.h>",
          "46: #include <vector>",
          "47: OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_ENTER",
          "49: using std::vector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include <stddef.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:                                                     int start,",
          "180:                                                     int end)",
          "181: {",
          "183:     size_t pixelcount = width * (end-start+1);",
          "184:     pointers.resize(_channels.size());",
          "185:     counts.resize(pixelcount);",
          "",
          "[Removed Lines]",
          "182:     int width=_dataWindow.size().x+1;",
          "",
          "[Added Lines]",
          "183:     ptrdiff_t width=_dataWindow.size().x+1;",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp||OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp": [
          "File: OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp -> OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "914:     }",
          "915:     catch (...)",
          "916:     {",
          "919:         throw;",
          "920:     }",
          "921: }",
          "",
          "[Removed Lines]",
          "917:         delete _data;",
          "918:         _data=NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "931:     _data->memoryMapped = _data->_streamData->is->isMemoryMapped();",
          "932:     _data->version = part->version;",
          "936:     _data->lineOffsets = part->chunkOffsets;",
          "938:     _data->partNumber = part->partNumber;",
          "",
          "[Removed Lines]",
          "934:     initialize(part->header);",
          "",
          "[Added Lines]",
          "933:     try",
          "934:     {",
          "935:        initialize(part->header);",
          "936:     }",
          "937:     catch(...)",
          "938:     {",
          "939:         delete _data;",
          "940:         throw;",
          "941:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "944: :",
          "945:      _data (new Data (numThreads))",
          "946: {",
          "948:     _data->_deleteStream = true;",
          "949:     OPENEXR_IMF_INTERNAL_NAMESPACE::IStream* is = 0;",
          "",
          "[Removed Lines]",
          "947:     _data->_streamData = new InputStreamMutex();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "954:         readMagicNumberAndVersionField(*is, _data->version);",
          "958:         if (isMultiPart(_data->version))",
          "959:         {",
          "960:             compatibilityInitialize(*is);",
          "961:             return;",
          "962:         }",
          "963:         _data->_streamData->is = is;",
          "964:         _data->memoryMapped = is->isMemoryMapped();",
          "965:         _data->header.readFrom (*_data->_streamData->is, _data->version);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:     }",
          "969:     catch (IEX_NAMESPACE::BaseExc &e)",
          "970:     {",
          "971:         if (is)          delete is;",
          "972:         if (_data)       delete _data;",
          "974:         REPLACE_EXC (e, \"Cannot read image file \"",
          "975:                      \"\\\"\" << fileName << \"\\\". \" << e.what());",
          "976:         throw;",
          "977:     }",
          "982:     try",
          "983:     {",
          "984:         _data->_streamData = new InputStreamMutex();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "975:     catch (IEX_NAMESPACE::BaseExc &e)",
          "976:     {",
          "977:         if (is)          delete is;",
          "979:         if (_data)       delete _data;",
          "981:         REPLACE_EXC (e, \"Cannot read image file \"",
          "",
          "[Removed Lines]",
          "978:         if (_data && _data->_streamData) delete _data->_streamData;",
          "",
          "[Added Lines]",
          "1000:         if (_data && _data->_streamData)",
          "1001:         {",
          "1002:             delete _data->_streamData;",
          "1003:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "985:     catch (...)",
          "986:     {",
          "987:         if (is)          delete is;",
          "989:         if (_data)       delete _data;",
          "991:         throw;",
          "",
          "[Removed Lines]",
          "988:         if (_data && _data->_streamData) delete _data->_streamData;",
          "",
          "[Added Lines]",
          "1013:         if (_data && _data->_streamData)",
          "1014:         {",
          "1015:             delete _data->_streamData;",
          "1016:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1010:     _data->version =version;",
          "1014:     readLineOffsets (*_data->_streamData->is,",
          "1015:                      _data->lineOrder,",
          "",
          "[Removed Lines]",
          "1012:     initialize (header);",
          "",
          "[Added Lines]",
          "1040:     try",
          "1041:     {",
          "1042:         initialize (header);",
          "1043:     }",
          "1044:     catch (...)",
          "1045:     {",
          "1046:         if (_data && _data->_streamData)",
          "1047:         {",
          "1048:             delete _data->_streamData;",
          "1049:         }",
          "1050:         if (_data)       delete _data;",
          "1051:    }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1043:         if (_data->partNumber == -1 && _data->_streamData)",
          "1044:             delete _data->_streamData;",
          "1046:         delete _data;",
          "1047:     }",
          "1048: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1083:         {",
          "1085:         }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp||OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp": [
          "File: OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp -> OpenEXR/IlmImf/ImfDeepTiledInputFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     multiPartBackwardSupport(false),",
          "284:     numThreads(numThreads),",
          "285:     memoryMapped(false),",
          "287:     _deleteStream(false)",
          "288: {",
          "",
          "[Removed Lines]",
          "286:     _streamData(NULL),",
          "",
          "[Added Lines]",
          "286:     sampleCountTableComp(nullptr),",
          "287:     _streamData(nullptr),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     for (size_t i = 0; i < slices.size(); i++)",
          "310:         delete slices[i];",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:     delete sampleCountTableComp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "878:     _data (new Data (part->numThreads))",
          "879: {",
          "880:     _data->_deleteStream=false;",
          "882: }",
          "",
          "[Removed Lines]",
          "881:     multiPartInitialize(part);",
          "",
          "[Added Lines]",
          "884:     try",
          "885:     {",
          "886:        multiPartInitialize(part);",
          "887:     }",
          "888:     catch(...)",
          "889:     {",
          "890:         delete _data;",
          "891:         throw;",
          "892:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfDwaCompressor.cpp||OpenEXR/IlmImf/ImfDwaCompressor.cpp": [
          "File: OpenEXR/IlmImf/ImfDwaCompressor.cpp -> OpenEXR/IlmImf/ImfDwaCompressor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:                                 \" (truncated rule).\");",
          "268:         {",
          "271:             Xdr::read<CharPtrIO> (ptr, std::min(size, Name::SIZE-1), suffix);",
          "272:             _suffix = std::string(suffix);",
          "273:         }",
          "",
          "[Removed Lines]",
          "269:             char suffix[Name::SIZE];",
          "270:             memset (suffix, 0, Name::SIZE);",
          "",
          "[Added Lines]",
          "270:             char suffix[Name::SIZE+1];",
          "271:             memset (suffix, 0, Name::SIZE+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2419:         unsigned short ruleSize = 0;",
          "2420:         Xdr::read<CharPtrIO>(dataPtr, ruleSize);",
          "2423:             throw IEX_NAMESPACE::InputExc(\"Error uncompressing DWA data\"",
          "2424:                                 \" (corrupt header file).\");",
          "",
          "[Removed Lines]",
          "2422:         if (ruleSize < 0)",
          "",
          "[Added Lines]",
          "2423:         if (ruleSize < Xdr::size<unsigned short>() )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2814:                     if (IMATH_NAMESPACE::modp (y, cd->ySampling) != 0)",
          "2815:                         continue;",
          "2817:                     memcpy (rowPtrs[chan][row],",
          "2818:                             cd->planarUncBufferEnd,",
          "2819:                             dstScanlineSize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2821:                     if (cd->planarUncBufferEnd + dstScanlineSize - _planarUncBuffer[UNKNOWN] > _planarUncBufferSize[UNKNOWN] )",
          "2822:                     {",
          "2823:                         throw Iex::InputExc(\"DWA data corrupt\");",
          "2824:                     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfFastHuf.cpp||OpenEXR/IlmImf/ImfFastHuf.cpp": [
          "File: OpenEXR/IlmImf/ImfFastHuf.cpp -> OpenEXR/IlmImf/ImfFastHuf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:         int symbol  = *i >> 6;",
          "258:         if (mapping[codeLen] >= static_cast<Int64>(_numSymbols))",
          "259:             throw IEX_NAMESPACE::InputExc (\"Huffman decode error \"",
          "260:                                            \"(Invalid symbol in header).\");",
          "262:         _idToSymbol[mapping[codeLen]] = symbol;",
          "263:         mapping[codeLen]++;",
          "264:     }",
          "267: }",
          "",
          "[Removed Lines]",
          "266:     buildTables(base, offset);",
          "",
          "[Added Lines]",
          "259:         {",
          "260:             delete[] _idToSymbol;",
          "261:             _idToSymbol = NULL;",
          "264:         }",
          "273:     try",
          "274:     {",
          "275:       buildTables(base, offset);",
          "276:     }catch(...)",
          "277:     {",
          "278:             delete[] _idToSymbol;",
          "279:             _idToSymbol = NULL;",
          "280:             throw;",
          "281:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfHeader.cpp||OpenEXR/IlmImf/ImfHeader.cpp": [
          "File: OpenEXR/IlmImf/ImfHeader.cpp -> OpenEXR/IlmImf/ImfHeader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:         return;",
          "883:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "886:     bool isDeep = isDeepData(part_type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "903:  const TileDescription &tileDesc = tileDescription();",
          "906:      throw IEX_NAMESPACE::ArgExc (\"Invalid tile size in image header.\");",
          "908:  if (maxTileWidth > 0 &&",
          "",
          "[Removed Lines]",
          "905:  if (tileDesc.xSize <= 0 || tileDesc.ySize <= 0)",
          "",
          "[Added Lines]",
          "907:  if (tileDesc.xSize <= 0 || tileDesc.ySize <= 0 || tileDesc.xSize > INT_MAX || tileDesc.ySize > INT_MAX )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "953:     if (!isValidCompression (this->compression()))",
          "954:    throw IEX_NAMESPACE::ArgExc (\"Unknown compression type in image header.\");",
          "957:     {",
          "958:         if (!isValidDeepCompression (this->compression()))",
          "959:             throw IEX_NAMESPACE::ArgExc (\"Compression type in header not valid for deep data\");",
          "",
          "[Removed Lines]",
          "956:     if(isDeepData(part_type))",
          "",
          "[Added Lines]",
          "959:     if( isDeep )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "975:     const ChannelList &channels = this->channels();",
          "978:     {",
          "979:  for (ChannelList::ConstIterator i = channels.begin();",
          "980:       i != channels.end();",
          "",
          "[Removed Lines]",
          "977:     if (isTiled)",
          "",
          "[Added Lines]",
          "982:     if (isTiled || isDeep)",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfHuf.cpp||OpenEXR/IlmImf/ImfHuf.cpp": [
          "File: OpenEXR/IlmImf/ImfHuf.cpp -> OpenEXR/IlmImf/ImfHuf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052:         unsigned short raw[],",
          "1053:         int nRaw)",
          "1054: {",
          "1056:     {",
          "1057:  if (nRaw != 0)",
          "1058:      notEnoughData();",
          "",
          "[Removed Lines]",
          "1055:     if (nCompressed == 0)",
          "",
          "[Added Lines]",
          "1058:     if (nCompressed < 20 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1071:     const char *ptr = compressed + 20;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1076:     if ( ptr + (nBits+7 )/8 > compressed+nCompressed)",
          "1077:     {",
          "1078:         notEnoughData();",
          "1079:         return;",
          "1080:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfInputFile.cpp||OpenEXR/IlmImf/ImfInputFile.cpp": [
          "File: OpenEXR/IlmImf/ImfInputFile.cpp -> OpenEXR/IlmImf/ImfInputFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:     _data (new Data (part->numThreads))",
          "476: {",
          "477:     _data->_deleteStream=false;",
          "479: }",
          "",
          "[Removed Lines]",
          "478:     multiPartInitialize (part);",
          "",
          "[Added Lines]",
          "478:     try",
          "479:     {",
          "480:        multiPartInitialize (part);",
          "481:     }",
          "482:     catch(...)",
          "483:     {",
          "484:         delete _data;",
          "485:         throw;",
          "486:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfMisc.cpp||OpenEXR/IlmImf/ImfMisc.cpp": [
          "File: OpenEXR/IlmImf/ImfMisc.cpp -> OpenEXR/IlmImf/ImfMisc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   c != channels.end();",
          "115:   ++c)",
          "116:     {",
          "121:  for (int y = dataWindow.min.y, i = 0; y <= dataWindow.max.y; ++y, ++i)",
          "122:      if (modp (y, c.channel().ySampling) == 0)",
          "",
          "[Removed Lines]",
          "117:  int nBytes = pixelTypeSize (c.channel().type) *",
          "118:        (dataWindow.max.x - dataWindow.min.x + 1) /",
          "119:        c.channel().xSampling;",
          "",
          "[Added Lines]",
          "117:  size_t nBytes = size_t(pixelTypeSize (c.channel().type)) *",
          "118:        size_t(dataWindow.max.x - dataWindow.min.x + 1) /",
          "119:        size_t(c.channel().xSampling);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1842:     return false;",
          "1843: }",
          "1845: int",
          "1846: getScanlineChunkOffsetTableSize(const Header& header)",
          "1847: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1846: namespace",
          "1847: {",
          "1851: int",
          "1852: numLinesInBuffer(Compression comp)",
          "1853: {",
          "1854:     switch(comp)",
          "1855:     {",
          "1856:         case NO_COMPRESSION :",
          "1857:         case RLE_COMPRESSION:",
          "1858:         case ZIPS_COMPRESSION:",
          "1859:             return 1;",
          "1860:         case ZIP_COMPRESSION:",
          "1861:             return 16;",
          "1862:         case PIZ_COMPRESSION:",
          "1863:             return 32;",
          "1864:         case PXR24_COMPRESSION:",
          "1865:             return 16;",
          "1866:         case B44_COMPRESSION:",
          "1867:         case B44A_COMPRESSION:",
          "1868:         case DWAA_COMPRESSION:",
          "1869:             return 32;",
          "1870:         case DWAB_COMPRESSION:",
          "1871:             return 256;",
          "1873:         default:",
          "1874:          throw IEX_NAMESPACE::ArgExc (\"Unknown compression type\");",
          "1875:     }",
          "1876: }",
          "1877: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1851:     size_t maxBytesPerLine = bytesPerLineTable (header,",
          "1852:                                                 bytesPerLine);",
          "1860:     int lineOffsetSize = (dataWindow.max.y - dataWindow.min.y +",
          "1861:                           linesInBuffer) / linesInBuffer;",
          "1865:     return lineOffsetSize;",
          "1866: }",
          "",
          "[Removed Lines]",
          "1854:     Compressor* compressor = newCompressor(header.compression(),",
          "1855:                                            maxBytesPerLine,",
          "1856:                                            header);",
          "1858:     int linesInBuffer = numLinesInBuffer (compressor);",
          "1863:     delete compressor;",
          "",
          "[Added Lines]",
          "1888:     int linesInBuffer = numLinesInBuffer ( header.compression() );",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfPizCompressor.cpp||OpenEXR/IlmImf/ImfPizCompressor.cpp": [
          "File: OpenEXR/IlmImf/ImfPizCompressor.cpp -> OpenEXR/IlmImf/ImfPizCompressor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:     const char* inputEnd=inPtr+inSize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:     AutoArray <unsigned char, BITMAP_SIZE> bitmap;",
          "550:     memset (bitmap, 0, sizeof (unsigned char) * BITMAP_SIZE);",
          "552:     Xdr::read <CharPtrIO> (inPtr, minNonZero);",
          "553:     Xdr::read <CharPtrIO> (inPtr, maxNonZero);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:     if(inPtr + sizeof(unsigned short)*2 > inputEnd)",
          "557:     {",
          "558:        throw InputExc (\"PIZ compressed data too short\");",
          "559:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "561:     if (minNonZero <= maxNonZero)",
          "562:     {",
          "565:     }",
          "567:     AutoArray <unsigned short, USHORT_RANGE> lut;",
          "",
          "[Removed Lines]",
          "563:  Xdr::read <CharPtrIO> (inPtr, (char *) &bitmap[0] + minNonZero,",
          "564:           maxNonZero - minNonZero + 1);",
          "",
          "[Added Lines]",
          "572:         size_t bytesToRead = maxNonZero - minNonZero + 1;",
          "573:      if(inPtr + bytesToRead > inputEnd)",
          "574:         {",
          "575:           throw InputExc (\"PIZ compressed data too short\");",
          "576:         }",
          "578: Xdr::read <CharPtrIO> (inPtr, (char *) &bitmap[0] + minNonZero,",
          "579:           bytesToRead);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "574:     int length;",
          "575:     Xdr::read <CharPtrIO> (inPtr, length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:    if(inPtr + sizeof(int)> inputEnd)",
          "589:    {",
          "590:        throw InputExc (\"PIZ compressed data too short\");",
          "591:    }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfRle.cpp||OpenEXR/IlmImf/ImfRle.cpp": [
          "File: OpenEXR/IlmImf/ImfRle.cpp -> OpenEXR/IlmImf/ImfRle.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:      if (0 > (maxLength -= count))",
          "130:   return 0;",
          "132:         memcpy(out, in, count);",
          "133:         out += count;",
          "134:         in  += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:         if (inLength < 0)",
          "135:           return 0;",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfScanLineInputFile.cpp||OpenEXR/IlmImf/ImfScanLineInputFile.cpp": [
          "File: OpenEXR/IlmImf/ImfScanLineInputFile.cpp -> OpenEXR/IlmImf/ImfScanLineInputFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1098: void ScanLineInputFile::initialize(const Header& header)",
          "1099: {",
          "1102:         _data->header = header;",
          "1104:         _data->lineOrder = _data->header.lineOrder();",
          "",
          "[Removed Lines]",
          "1100:     try",
          "1101:     {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1113:         size_t maxBytesPerLine = bytesPerLineTable (_data->header,",
          "1114:                                                     _data->bytesPerLine);",
          "1116:         for (size_t i = 0; i < _data->lineBuffers.size(); i++)",
          "1117:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:         if(maxBytesPerLine > INT_MAX)",
          "1115:         {",
          "1116:             throw IEX_NAMESPACE::InputExc(\"maximum bytes per scanline exceeds maximum permissible size\");",
          "1117:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1143:                               _data->linesInBuffer) / _data->linesInBuffer;",
          "1145:         _data->lineOffsets.resize (lineOffsetSize);",
          "1153: }",
          "",
          "[Removed Lines]",
          "1146:     }",
          "1147:     catch (...)",
          "1148:     {",
          "1149:         delete _data;",
          "1150:         _data=NULL;",
          "1151:         throw;",
          "1152:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1165:     _data->version = part->version;",
          "1169:     _data->lineOffsets = part->chunkOffsets;",
          "1171:     _data->partNumber = part->partNumber;",
          "",
          "[Removed Lines]",
          "1167:     initialize(part->header);",
          "",
          "[Added Lines]",
          "1164:     try",
          "1165:     {",
          "1166:        initialize(part->header);",
          "1167:     }",
          "1168:     catch(...)",
          "1169:     {",
          "1170:         if (!_data->memoryMapped)",
          "1171:         {",
          "1172:             for (size_t i = 0; i < _data->lineBuffers.size(); i++)",
          "1173:             {",
          "1174:                 if( _data->lineBuffers[i] )",
          "1175:                 {",
          "1176:                    EXRFreeAligned(_data->lineBuffers[i]->buffer);",
          "1177:                    _data->lineBuffers[i]->buffer=nullptr;",
          "1178:                 }",
          "1179:             }",
          "1180:         }",
          "1182:         delete _data;",
          "1183:         throw;",
          "1184:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1188:     _streamData->is = is;",
          "1189:     _data->memoryMapped = is->isMemoryMapped();",
          "1204: }",
          "",
          "[Removed Lines]",
          "1191:     initialize(header);",
          "1199:     _data->version=0;",
          "1200:     readLineOffsets (*_streamData->is,",
          "1201:                      _data->lineOrder,",
          "1202:                      _data->lineOffsets,",
          "1203:                      _data->fileIsComplete);",
          "",
          "[Added Lines]",
          "1207:     try",
          "1208:     {",
          "1210:         initialize(header);",
          "1218:         _data->version=0;",
          "1219:         readLineOffsets (*_streamData->is,",
          "1220:                         _data->lineOrder,",
          "1221:                         _data->lineOffsets,",
          "1222:                         _data->fileIsComplete);",
          "1223:     }",
          "1224:     catch(...)",
          "1225:     {",
          "1226:         if(_data)",
          "1227:         {",
          "1228:            if (!_data->memoryMapped)",
          "1229:            {",
          "1230:               for (size_t i = 0; i < _data->lineBuffers.size(); i++)",
          "1231:               {",
          "1232:                  if( _data->lineBuffers[i] )",
          "1233:                  {",
          "1234:                    EXRFreeAligned(_data->lineBuffers[i]->buffer);",
          "1235:                    _data->lineBuffers[i]->buffer=nullptr;",
          "1236:                  }",
          "1237:               }",
          "1238:            }",
          "1239:         }",
          "1240:         delete _streamData;",
          "1241:         delete _data;",
          "1242:         throw;",
          "1243:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1423:                       break;",
          "1424:               }",
          "1425:               ++i;",
          "1426:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:               if (i.channel().xSampling!=1 || i.channel().ySampling!=1)",
          "1470:               {",
          "1471:                   optimizationPossible = false;",
          "1472:               }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfTiledInputFile.cpp||OpenEXR/IlmImf/ImfTiledInputFile.cpp": [
          "File: OpenEXR/IlmImf/ImfTiledInputFile.cpp -> OpenEXR/IlmImf/ImfTiledInputFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:     IStream* is = 0;",
          "704:     try",
          "705:     {",
          "729:         {",
          "731:             {",
          "734:             }",
          "737:         }",
          "745:     }",
          "746:     catch (...)",
          "747:     {",
          "749:         {",
          "751:             {",
          "754:             }",
          "756:             delete _data->_streamData;",
          "757:         }",
          "761:         throw;",
          "762:     }",
          "763: }",
          "",
          "[Removed Lines]",
          "706:         is = new StdIFStream (fileName);",
          "707:  readMagicNumberAndVersionField(*is, _data->version);",
          "712:  if (isMultiPart(_data->version))",
          "713:  {",
          "714:      compatibilityInitialize(*is);",
          "715:      return;",
          "716:  }",
          "718:  _data->_streamData = new InputStreamMutex();",
          "719:  _data->_streamData->is = is;",
          "720:  _data->header.readFrom (*_data->_streamData->is, _data->version);",
          "721:  initialize();",
          "723:         _data->tileOffsets.readFrom (*(_data->_streamData->is), _data->fileIsComplete,false,false);",
          "724:  _data->_streamData->currentPosition = _data->_streamData->is->tellg();",
          "725:     }",
          "726:     catch (IEX_NAMESPACE::BaseExc &e)",
          "727:     {",
          "728:         if (_data->_streamData != 0)",
          "730:             if (_data->_streamData->is != 0)",
          "732:                 delete _data->_streamData->is;",
          "733:                 _data->_streamData->is = is = 0;",
          "736:             delete _data->_streamData;",
          "739:         if (is != 0)",
          "740:             delete is;",
          "742:  REPLACE_EXC (e, \"Cannot open image file \"",
          "743:                  \"\\\"\" << fileName << \"\\\". \" << e.what());",
          "744:  throw;",
          "748:         if ( _data->_streamData != 0)",
          "750:             if ( _data->_streamData->is != 0)",
          "752:                 delete _data->_streamData->is;",
          "753:                 _data->_streamData->is = is = 0;",
          "759:         if (is != 0)",
          "760:             delete is;",
          "",
          "[Added Lines]",
          "706:         try",
          "708:             is = new StdIFStream (fileName);",
          "709:             readMagicNumberAndVersionField(*is, _data->version);",
          "714:             if (isMultiPart(_data->version))",
          "716:                 compatibilityInitialize(*is);",
          "717:                 return;",
          "720:             _data->_streamData = new InputStreamMutex();",
          "721:             _data->_streamData->is = is;",
          "722:             _data->header.readFrom (*_data->_streamData->is, _data->version);",
          "723:             initialize();",
          "725:             _data->tileOffsets.readFrom (*(_data->_streamData->is), _data->fileIsComplete,false,false);",
          "726:             _data->_streamData->currentPosition = _data->_streamData->is->tellg();",
          "727:         }",
          "728:         catch (IEX_NAMESPACE::BaseExc &e)",
          "729:         {",
          "730:             REPLACE_EXC (e, \"Cannot open image file \"",
          "731:                     \"\\\"\" << fileName << \"\\\". \" << e.what());",
          "732:             throw;",
          "737:         if (!_data->memoryMapped)",
          "739:             for (size_t i = 0; i < _data->tileBuffers.size(); i++)",
          "741:                 if(_data->tileBuffers[i])",
          "742:                 {",
          "743:                    delete [] _data->tileBuffers[i]->buffer;",
          "744:                 }",
          "746:         }",
          "747:         if ( _data->_streamData != 0)",
          "748:         {",
          "749:             delete _data->_streamData->is;",
          "750:             _data->_streamData->is = is = 0;",
          "754:         delete is;",
          "755:         delete _data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:     try",
          "778:     {",
          "785:         {",
          "808:     }",
          "809:     catch (...)",
          "810:     {",
          "811:         if (streamDataCreated) delete _data->_streamData;",
          "812:  delete _data;",
          "813:         throw;",
          "",
          "[Removed Lines]",
          "779:  readMagicNumberAndVersionField(is, _data->version);",
          "784:  if (isMultiPart(_data->version))",
          "786:      compatibilityInitialize(is);",
          "787:             return;",
          "788:         }",
          "790:  streamDataCreated = true;",
          "791:  _data->_streamData = new InputStreamMutex();",
          "792:  _data->_streamData->is = &is;",
          "793:  _data->header.readFrom (*_data->_streamData->is, _data->version);",
          "794:  initialize();",
          "796:         _data->tileOffsets.readFrom (*(_data->_streamData->is), _data->fileIsComplete,false,false);",
          "797:  _data->memoryMapped = _data->_streamData->is->isMemoryMapped();",
          "798:  _data->_streamData->currentPosition = _data->_streamData->is->tellg();",
          "799:     }",
          "800:     catch (IEX_NAMESPACE::BaseExc &e)",
          "801:     {",
          "802:         if (streamDataCreated) delete _data->_streamData;",
          "803:  delete _data;",
          "805:  REPLACE_EXC (e, \"Cannot open image file \"",
          "806:                  \"\\\"\" << is.fileName() << \"\\\". \" << e.what());",
          "807:  throw;",
          "",
          "[Added Lines]",
          "774:         try",
          "776:             readMagicNumberAndVersionField(is, _data->version);",
          "781:             if (isMultiPart(_data->version))",
          "782:             {",
          "783:                 compatibilityInitialize(is);",
          "784:                 return;",
          "785:             }",
          "787:             streamDataCreated = true;",
          "788:             _data->_streamData = new InputStreamMutex();",
          "789:             _data->_streamData->is = &is;",
          "790:             _data->header.readFrom (*_data->_streamData->is, _data->version);",
          "791:             initialize();",
          "793:             _data->tileOffsets.readFrom (*(_data->_streamData->is), _data->fileIsComplete,false,false);",
          "794:             _data->memoryMapped = _data->_streamData->is->isMemoryMapped();",
          "795:             _data->_streamData->currentPosition = _data->_streamData->is->tellg();",
          "796:         }",
          "797:         catch (IEX_NAMESPACE::BaseExc &e)",
          "798:         {",
          "799:             REPLACE_EXC (e, \"Cannot open image file \"",
          "800:                     \"\\\"\" << is.fileName() << \"\\\". \" << e.what());",
          "801:             throw;",
          "802:         }",
          "806:         if (!_data->memoryMapped)",
          "807:         {",
          "808:             for (size_t i = 0; i < _data->tileBuffers.size(); i++)",
          "809:             {",
          "810:                 delete [] _data->tileBuffers[i]->buffer;",
          "811:             }",
          "812:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841: }",
          "",
          "[Removed Lines]",
          "834:     _data->_streamData->is = is;",
          "835:     _data->header = header;",
          "836:     _data->version = version;",
          "837:     initialize();",
          "838:     _data->tileOffsets.readFrom (*(_data->_streamData->is),_data->fileIsComplete,false,false);",
          "839:     _data->memoryMapped = is->isMemoryMapped();",
          "840:     _data->_streamData->currentPosition = _data->_streamData->is->tellg();",
          "",
          "[Added Lines]",
          "836:     try",
          "837:     {",
          "838:         _data->_streamData->is = is;",
          "839:         _data->header = header;",
          "840:         _data->version = version;",
          "841:         initialize();",
          "842:         _data->tileOffsets.readFrom (*(_data->_streamData->is),_data->fileIsComplete,false,false);",
          "843:         _data->memoryMapped = is->isMemoryMapped();",
          "844:         _data->_streamData->currentPosition = _data->_streamData->is->tellg();",
          "845:     }",
          "846:     catch(...)",
          "847:     {",
          "848:         if (!_data->memoryMapped)",
          "849:         {",
          "850:             for (size_t i = 0; i < _data->tileBuffers.size(); i++)",
          "851:             {",
          "852:                 delete [] _data->tileBuffers[i]->buffer;",
          "853:             }",
          "854:         }",
          "855:         delete _data->_streamData;",
          "856:  delete _data;",
          "857:         throw;",
          "858:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "845: {",
          "846:     _data = new Data (part->numThreads);",
          "847:     _data->_deleteStream=false;",
          "849: }",
          "",
          "[Removed Lines]",
          "848:     multiPartInitialize(part);",
          "",
          "[Added Lines]",
          "866:     try",
          "867:     {",
          "868:       multiPartInitialize(part);",
          "869:     }",
          "870:     catch(...)",
          "871:     {",
          "872:         if (_data) delete _data;",
          "873:         throw;",
          "874:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImf/ImfTiledMisc.cpp||OpenEXR/IlmImf/ImfTiledMisc.cpp": [
          "File: OpenEXR/IlmImf/ImfTiledMisc.cpp -> OpenEXR/IlmImf/ImfTiledMisc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:     Int64 lineOffsetSize = 0;",
          "365:     const TileDescription &desc = header.tileDescription();",
          "367:     {",
          "374:                 {",
          "376:                 }",
          "383:                 {",
          "389:                 }",
          "394:     }",
          "400: }",
          "",
          "[Removed Lines]",
          "366:     switch (desc.mode)",
          "368:         case ONE_LEVEL:",
          "369:         case MIPMAP_LEVELS:",
          "370:             for (int i = 0; i < numXLevels; i++)",
          "371:             {",
          "372:                 lineOffsetSize += static_cast<Int64>(numXTiles[i]) * static_cast<Int64>(numYTiles[i]);",
          "373:                 if ( lineOffsetSize > static_cast<Int64>(std::numeric_limits<int>::max()) )",
          "375:                     throw IEX_NAMESPACE::LogicExc(\"Maximum number of tiles exceeded\");",
          "377:             }",
          "378:            break;",
          "379:         case RIPMAP_LEVELS:",
          "380:             for (int i = 0; i < numXLevels; i++)",
          "381:             {",
          "382:                 for (int j = 0; j < numYLevels; j++)",
          "384:                      lineOffsetSize += static_cast<Int64>(numXTiles[i]) * static_cast<Int64>(numYTiles[j]);",
          "385:                      if ( lineOffsetSize > static_cast<Int64>(std::numeric_limits<int>::max()) )",
          "386:                      {",
          "387:                         throw IEX_NAMESPACE::LogicExc(\"Maximum number of tiles exceeded\");",
          "388:                      }",
          "390:             }",
          "391:            break;",
          "392:         case NUM_LEVELMODES :",
          "393:             throw IEX_NAMESPACE::LogicExc(\"Bad level mode getting chunk offset table size\");",
          "396:     delete[] numXTiles;",
          "397:     delete[] numYTiles;",
          "399:     return static_cast<int>(lineOffsetSize);",
          "",
          "[Added Lines]",
          "366:     try",
          "368:         switch (desc.mode)",
          "369:         {",
          "370:             case ONE_LEVEL:",
          "371:             case MIPMAP_LEVELS:",
          "372:                 for (int i = 0; i < numXLevels; i++)",
          "374:                     lineOffsetSize += static_cast<Int64>(numXTiles[i]) * static_cast<Int64>(numYTiles[i]);",
          "375:                     if ( lineOffsetSize > static_cast<Int64>(std::numeric_limits<int>::max()) )",
          "376:                     {",
          "377:                         throw IEX_NAMESPACE::LogicExc(\"Maximum number of tiles exceeded\");",
          "378:                     }",
          "380:             break;",
          "381:             case RIPMAP_LEVELS:",
          "382:                 for (int i = 0; i < numXLevels; i++)",
          "384:                     for (int j = 0; j < numYLevels; j++)",
          "385:                     {",
          "386:                         lineOffsetSize += static_cast<Int64>(numXTiles[i]) * static_cast<Int64>(numYTiles[j]);",
          "387:                         if ( lineOffsetSize > static_cast<Int64>(std::numeric_limits<int>::max()) )",
          "388:                         {",
          "389:                             throw IEX_NAMESPACE::LogicExc(\"Maximum number of tiles exceeded\");",
          "390:                         }",
          "391:                     }",
          "393:             break;",
          "394:             case NUM_LEVELMODES :",
          "395:                 throw IEX_NAMESPACE::LogicExc(\"Bad level mode getting chunk offset table size\");",
          "396:         }",
          "397:         delete[] numXTiles;",
          "398:         delete[] numYTiles;",
          "400:         return static_cast<int>(lineOffsetSize);",
          "403:     catch(...)",
          "404:     {",
          "405:         delete[] numXTiles;",
          "406:         delete[] numYTiles;",
          "408:         throw;",
          "409:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImfTest/testDeepTiledBasic.cpp||OpenEXR/IlmImfTest/testDeepTiledBasic.cpp": [
          "File: OpenEXR/IlmImfTest/testDeepTiledBasic.cpp -> OpenEXR/IlmImfTest/testDeepTiledBasic.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:                     {",
          "755:                         for (int k = 0; k < channelCount; k++)",
          "756:                         {",
          "759:                                 if (channelTypes[k] == 0)",
          "760:                                     delete[] (unsigned int*) data[k][i][j];",
          "761:                                 if (channelTypes[k] == 1)",
          "762:                                     delete[] (half*) data[k][i][j];",
          "763:                                 if (channelTypes[k] == 2)",
          "764:                                     delete[] (float*) data[k][i][j];",
          "766:                         }",
          "767:                         for( int f = 0 ; f < fillChannels ; ++f )",
          "768:                         {",
          "",
          "[Removed Lines]",
          "757:                             if( !randomChannels || read_channel[k]==1)",
          "758:                             {",
          "765:                             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImfTest/testMultiPartApi.cpp||OpenEXR/IlmImfTest/testMultiPartApi.cpp": [
          "File: OpenEXR/IlmImfTest/testMultiPartApi.cpp -> OpenEXR/IlmImfTest/testMultiPartApi.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:         }",
          "464:     }",
          "466:     delete[] tiledHalfData;",
          "467:     delete[] tiledUintData;",
          "468:     delete[] tiledFloatData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     for (size_t i = 0 ; i < parts.size() ; ++i )",
          "467:     {",
          "468:         int partType = partTypes[i];",
          "470:         if (partType == 0)",
          "471:         {",
          "472:             delete (OutputPart*) parts[i];",
          "473:         }",
          "474:         else",
          "475:         {",
          "476:             delete (TiledOutputPart*) parts[i];",
          "477:         }",
          "479:     }",
          "",
          "---------------"
        ],
        "OpenEXR/IlmImfTest/testMultiPartThreading.cpp||OpenEXR/IlmImfTest/testMultiPartThreading.cpp": [
          "File: OpenEXR/IlmImfTest/testMultiPartThreading.cpp -> OpenEXR/IlmImfTest/testMultiPartThreading.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         }",
          "626:     }",
          "628:     delete threadPool;",
          "630:     delete[] tiledHalfData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:     for (int i = 0; i < partCount; i++)",
          "629:     {",
          "630:         if (partTypes[i] == 0)",
          "631:         {",
          "632:             delete (OutputPart*) parts[i];",
          "633:         }",
          "634:         else",
          "635:         {",
          "636:             delete (TiledOutputPart*) parts[i];",
          "637:         }",
          "638:     }",
          "",
          "---------------"
        ],
        "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp": [
          "File: OpenEXR/exrmakepreview/makePreview.cpp -> OpenEXR/exrmakepreview/makePreview.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     previewHeight = max (int (h / (w * a) * previewWidth + .5f), 1);",
          "121:     previewPixels.resizeErase (previewHeight, previewWidth);",
          "125:     float m  = Math<float>::pow (2.f, IMATH_NAMESPACE::clamp (exposure + 2.47393f, -20.f, 20.f));",
          "127:     for (int y = 0; y < previewHeight; ++y)",
          "",
          "[Removed Lines]",
          "123:     float fx = (previewWidth  > 1)? (float (w - 1) / (previewWidth  - 1)): 1;",
          "124:     float fy = (previewHeight > 1)? (float (h - 1) / (previewHeight - 1)): 1;",
          "",
          "[Added Lines]",
          "123:     double fx = (previewWidth  > 1)? (double (w - 1) / (previewWidth  - 1)): 1;",
          "124:     double fy = (previewHeight > 1)? (double (h - 1) / (previewHeight - 1)): 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "822e218c795e989abdf74112b924d0da8acc967b",
      "candidate_info": {
        "commit_hash": "822e218c795e989abdf74112b924d0da8acc967b",
        "repo": "AcademySoftwareFoundation/openexr",
        "commit_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/822e218c795e989abdf74112b924d0da8acc967b",
        "files": [
          "OpenEXR/exrmakepreview/makePreview.cpp"
        ],
        "message": "exrmakepreview: switch preview-to-full scaling vars from floats to doubles to prevent rounding causing overflows\n\nSigned-off-by: Peter Hillman <peterh@wetafx.co.nz>",
        "before_after_code_files": [
          "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
          ],
          "candidate": [
            "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp"
          ]
        }
      },
      "candidate_diff": {
        "OpenEXR/exrmakepreview/makePreview.cpp||OpenEXR/exrmakepreview/makePreview.cpp": [
          "File: OpenEXR/exrmakepreview/makePreview.cpp -> OpenEXR/exrmakepreview/makePreview.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     previewHeight = max (int (h / (w * a) * previewWidth + .5f), 1);",
          "121:     previewPixels.resizeErase (previewHeight, previewWidth);",
          "125:     float m  = Math<float>::pow (2.f, IMATH_NAMESPACE::clamp (exposure + 2.47393f, -20.f, 20.f));",
          "127:     for (int y = 0; y < previewHeight; ++y)",
          "",
          "[Removed Lines]",
          "123:     float fx = (previewWidth  > 1)? (float (w - 1) / (previewWidth  - 1)): 1;",
          "124:     float fy = (previewHeight > 1)? (float (h - 1) / (previewHeight - 1)): 1;",
          "",
          "[Added Lines]",
          "123:     double fx = (previewWidth  > 1)? (double (w - 1) / (previewWidth  - 1)): 1;",
          "124:     double fy = (previewHeight > 1)? (double (h - 1) / (previewHeight - 1)): 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}