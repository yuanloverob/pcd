{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
      "candidate_info": {
        "commit_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a407eccb6179ee033b8e83a6eab4734dd075664b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "If replace triggers are run during uniqueness checking, then rerun all uniqueness checks a second time using the ABORT algorithm. Fix for ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea068b099c96b8b9526114732d2a6be186cf381b7329d102778ad25b95510c9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:     }",
          "1484:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1513:   if( (db->flags & (SQLITE_RecTriggers|SQLITE_ForeignKeys))==0 ){",
          "1516:     pTrigger = 0;",
          "1517:     regTrigCnt = 0;",
          "1518:   }else{",
          "1519:     if( db->flags&SQLITE_RecTriggers ){",
          "1520:       pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1521:       regTrigCnt = pTrigger!=0 || sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1522:     }else{",
          "1523:       pTrigger = 0;",
          "1524:       regTrigCnt = sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1525:     }",
          "1526:     if( regTrigCnt ){",
          "1529:       regTrigCnt = ++pParse->nMem;",
          "1530:       sqlite3VdbeAddOp2(v, OP_Integer, 0, regTrigCnt);",
          "1531:       VdbeComment((v, \"trigger count\"));",
          "1532:       lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1533:       addrRecheck = lblRecheckOk;",
          "1534:     }",
          "1535:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1580:           sqlite3MultiWrite(pParse);",
          "1581:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1582:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1586:         }else{",
          "1587: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1588:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "1575:         Trigger *pTrigger = 0;",
          "1576:         if( db->flags&SQLITE_RecTriggers ){",
          "1577:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1578:         }",
          "1579:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1583:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1584:           VdbeCoverage(v);",
          "1585:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "[Added Lines]",
          "1626:         if( regTrigCnt ){",
          "1631:           nReplaceTrig++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:     sqlite3VdbeVerifyAbortable(v, onError);",
          "1752:     regR = (pIdx==pPk) ? regIdx : sqlite3GetTempRange(pParse, nPkField);",
          "",
          "[Removed Lines]",
          "1748:     sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1749:                          regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1795:     addrConflictCk =",
          "1796:       sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1797:                            regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1829:         break;",
          "1830:       }",
          "1831:       default: {",
          "1834:         assert( onError==OE_Replace );",
          "1839:           sqlite3MultiWrite(pParse);",
          "1841:         }",
          "1842:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1843:             regR, nPkField, 0, OE_Replace,",
          "1844:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1848:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1849:         }",
          "1850:         seenReplace = 1;",
          "1851:         break;",
          "",
          "[Removed Lines]",
          "1832:         Trigger *pTrigger = 0;",
          "1833:         int bRetryConstraintCheck = 0;",
          "1835:         if( db->flags&SQLITE_RecTriggers ){",
          "1836:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1837:         }",
          "1838:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1840:           bRetryConstraintCheck = 1;",
          "1845:         if( bRetryConstraintCheck ){",
          "1846:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1847:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1883:         nConflictCk = sqlite3VdbeCurrentAddr(v) - addrConflictCk;",
          "1884:         if( regTrigCnt ){",
          "1886:           nReplaceTrig++;",
          "1891:         if( regTrigCnt ){",
          "1898:           VdbeComment((v, \"bypass recheck\"));",
          "1903:           sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1904:           lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "1914:           pOp = sqlite3VdbeGetOp(v, addrConflictCk);",
          "1915:           while( nConflictCk>0 && !db->mallocFailed ){",
          "1916:             if( sqlite3OpcodeProperty[pOp->opcode]&OPFLG_JUMP ){",
          "1917:               p2 = lblRecheckOk;",
          "1918:             }else{",
          "1919:               p2 = pOp->p2;",
          "1920:             }",
          "1921:             if( pOp->opcode!=OP_IdxRowid ){",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "1928:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1867:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1868:   }",
          "1871:   if( HasRowid(pTab) ){",
          "1872:     int regRec = aRegIdx[ix];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1955:   testcase( regTrigCnt!=0 && nReplaceTrig==0 );",
          "1956:   if( nReplaceTrig ){",
          "1957:     sqlite3VdbeAddOp2(v, OP_IfNot, regTrigCnt, lblRecheckOk);VdbeCoverage(v);",
          "1958:     if( !pPk ){",
          "1959:       if( isUpdate ){",
          "1960:         sqlite3VdbeAddOp3(v, OP_Eq, regNewData, addrRecheck, regOldData);",
          "1961:         sqlite3VdbeChangeP5(v, SQLITE_NOTNULL);",
          "1962:         VdbeCoverage(v);",
          "1963:       }",
          "1964:       sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRecheck, regNewData);",
          "1965:       VdbeCoverage(v);",
          "1966:       sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1967:     }else{",
          "1968:       sqlite3VdbeGoto(v, addrRecheck);",
          "1969:     }",
          "1970:     sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1971:   }",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "526: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: # 2019-10-25 ticket c1e19e12046d23fe",
          "523: do_catchsql_test insert-17.1 {",
          "524:   PRAGMA temp.recursive_triggers = true;",
          "525:   DROP TABLE IF EXISTS t0;",
          "526:   CREATE TABLE t0(aa, bb);",
          "527:   CREATE UNIQUE INDEX t0bb ON t0(bb);",
          "528:   CREATE TRIGGER \"r17.1\" BEFORE DELETE ON t0",
          "529:     BEGIN INSERT INTO t0(aa,bb) VALUES(99,1);",
          "530:   END;",
          "531:   INSERT INTO t0(aa,bb) VALUES(10,20);",
          "532:   REPLACE INTO t0(aa,bb) VALUES(30,20);",
          "533: } {1 {UNIQUE constraint failed: t0.rowid}}",
          "534: integrity_check insert-17.2",
          "535: do_catchsql_test insert-17.3 {",
          "536:   DROP TABLE IF EXISTS t1;",
          "537:   CREATE TABLE t1(a, b UNIQUE, c UNIQUE);",
          "538:   INSERT INTO t1(a,b,c) VALUES(1,1,1),(2,2,2),(3,3,3),(4,4,4);",
          "539:   CREATE TRIGGER \"r17.3\" AFTER DELETE ON t1 WHEN OLD.c<>3 BEGIN",
          "540:     INSERT INTO t1(rowid,a,b,c) VALUES(100,100,100,3);",
          "541:   END;",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68748ec50924a77e19498766d5243851ca836d29",
      "candidate_info": {
        "commit_hash": "68748ec50924a77e19498766d5243851ca836d29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68748ec50924a77e19498766d5243851ca836d29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/fuzzdata8.db"
        ],
        "message": "Futher improvements to the IN operator for row-values on virtual tables.\n\nFossilOrigin-Name: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 344d9cb0c726078af6deb4a26bed3aded5b26914bb286d3446d3a4e9150840b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:     iIn = pLevel->u.in.nIn;",
          "1306:     for(j=nConstraint-1; j>=0; j--){",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:         assert( pLevel->u.in.aInLoop!=0 || db->mallocFailed );",
          "1322:         if( !db->mallocFailed ){",
          "1325:           assert( pOp->opcode==OP_Column || pOp->opcode==OP_Rowid );",
          "1326:           assert( pOp->opcode!=OP_Column || pOp->p3==iReg+j+2 );",
          "1327:           assert( pOp->opcode!=OP_Rowid || pOp->p2==iReg+j+2 );",
          "",
          "[Removed Lines]",
          "1323:           assert( iIn>0 );",
          "1324:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[--iIn].addrInTop);",
          "",
          "[Added Lines]",
          "1324:           assert( iIn>=0 && iIn<pLevel->u.in.nIn );",
          "1325:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[iIn].addrInTop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1345:         }",
          "1346:       }",
          "1347:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1349:     assert( iIn==0 || db->mallocFailed );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
      "candidate_info": {
        "commit_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Fix a false-postive in the sqlite3ExprImpliesNonNullRow() decision routine, that resulted in an incorrect LEFT JOIN strength reduction when the WHERE clause contained a row-value comparison. Ticket [02aa2bd02f97d0f2]\n\nFossilOrigin-Name: ea20068e6d97c9349ebcc7d0a01e99ebf08c6f44363f71a0218a1abea209adc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3be19e1151af1850b65991edb82420f9412a7798dd756c86eaa9ffdde573263a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5230:     case TK_NOTNULL:",
          "5231:     case TK_IS:",
          "5232:     case TK_OR:",
          "5233:     case TK_CASE:",
          "5234:     case TK_IN:",
          "5235:     case TK_FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5233:     case TK_VECTOR:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5239:       testcase( pExpr->op==TK_NOTNULL );",
          "5240:       testcase( pExpr->op==TK_IS );",
          "5241:       testcase( pExpr->op==TK_OR );",
          "5242:       testcase( pExpr->op==TK_CASE );",
          "5243:       testcase( pExpr->op==TK_IN );",
          "5244:       testcase( pExpr->op==TK_FUNCTION );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5243:       testcase( pExpr->op==TK_VECTOR );",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "620: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: # 2019-11-04 Ticket 02aa2bd02f97d0f2",
          "620: # The TK_VECTOR operator messes up sqlite3ExprImpliesNonNull() which",
          "621: # causes incorrect LEFT JOIN strength reduction.  TK_VECTOR should be",
          "622: # treated the same as TK_OR.",
          "623: #",
          "624: db close",
          "625: sqlite3 db :memory:",
          "626: do_execsql_test 26.10 {",
          "627:   CREATE TABLE t0(c0);",
          "628:   CREATE TABLE t1(c1);",
          "629:   INSERT INTO t1(c1) VALUES (0);",
          "630:   SELECT (c0, x'') != (NULL, 0) FROM t1 LEFT JOIN t0;",
          "631: } {1}",
          "632: do_execsql_test 26.20 {",
          "633:   SELECT 2 FROM t1 LEFT JOIN t0 ON (c0, x'') != (NULL, 0);",
          "634: } {2}",
          "635: do_execsql_test 26.30 {",
          "636:   SELECT 3 FROM t1 LEFT JOIN t0 WHERE (c0, x'') != (NULL, 0);",
          "637: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9912d1706610d77406d579450af50600cab2ea1",
      "candidate_info": {
        "commit_hash": "c9912d1706610d77406d579450af50600cab2ea1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c9912d1706610d77406d579450af50600cab2ea1",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.27.0\n\nFossilOrigin-Name: 97744701c3bd414e6c9d7182639d8c2ce7cf124c4fce625071ae65658ac61713",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f298328771d5aaba798d05f50c77ac239c7c72422ff35953463d6876a9659f74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a941ff712d465fe9eb6b7cf6fa7cf8264898dc7b",
      "candidate_info": {
        "commit_hash": "a941ff712d465fe9eb6b7cf6fa7cf8264898dc7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a941ff712d465fe9eb6b7cf6fa7cf8264898dc7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btreeInt.h"
        ],
        "message": "Change an assert() into a NEVER(), since the condition is difficult to prove with certainty.  Improved comment on the MemPage.nFree field.\n\nFossilOrigin-Name: fec071b89df2cbafda365077bb54bc9999e12086f36d6cea8d125662b36638dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f11b0ed47402034378ded2c60b82841b81cd1319cdb72d1ef052faef29a5294d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8295:     int iPage = pCur->iPage;",
          "8296:     MemPage *pPage = pCur->pPage;",
          "8299:     if( iPage==0 ){",
          "8300:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8298:     assert( pPage->nFree>=0 );",
          "",
          "[Added Lines]",
          "8298:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ]
      }
    }
  ]
}