{
  "cve_id": "CVE-2018-16597",
  "cve_desc": "An issue was discovered in the Linux kernel before 4.8. Incorrect access checking in overlayfs mounts could be used by local attackers to modify or truncate files in the underlying filesystem.",
  "repo": "torvalds/linux",
  "patch_hash": "c0ca3d70e8d3cf81e2255a217f7ca402f5ed0862",
  "patch_info": {
    "commit_hash": "c0ca3d70e8d3cf81e2255a217f7ca402f5ed0862",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c0ca3d70e8d3cf81e2255a217f7ca402f5ed0862",
    "files": [
      "fs/overlayfs/inode.c"
    ],
    "message": "ovl: modify ovl_permission() to do checks on two inodes\n\nRight now ovl_permission() calls __inode_permission(realinode), to do\npermission checks on real inode and no checks are done on overlay inode.\n\nModify it to do checks both on overlay inode as well as underlying inode.\nChecks on overlay inode will be done with the creds of calling task while\nchecks on underlying inode will be done with the creds of mounter.\n\nSigned-off-by: Vivek Goyal <vgoyal@redhat.com>\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>",
    "before_after_code_files": [
      "fs/overlayfs/inode.c||fs/overlayfs/inode.c"
    ]
  },
  "patch_diff": {
    "fs/overlayfs/inode.c||fs/overlayfs/inode.c": [
      "File: fs/overlayfs/inode.c -> fs/overlayfs/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113:  bool is_upper;",
      "114:  struct dentry *realdentry = ovl_entry_real(oe, &is_upper);",
      "115:  struct inode *realinode;",
      "116:  int err;",
      "118:  if (ovl_is_default_permissions(inode)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  const struct cred *old_cred;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "166:    return -EROFS;",
      "167:  }",
      "170: }",
      "172: static const char *ovl_get_link(struct dentry *dentry,",
      "",
      "[Removed Lines]",
      "169:  return __inode_permission(realinode, mask);",
      "",
      "[Added Lines]",
      "174:  err = generic_permission(inode, mask);",
      "175:  if (err)",
      "176:   return err;",
      "178:  old_cred = ovl_override_creds(inode->i_sb);",
      "179:  err = __inode_permission(realinode, mask);",
      "180:  revert_creds(old_cred);",
      "182:  return err;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "314: {",
      "315:  struct inode *realinode = ovl_inode_real(inode);",
      "320:  if (!IS_POSIXACL(realinode))",
      "321:   return NULL;",
      "",
      "[Removed Lines]",
      "317:  if (!realinode)",
      "318:   return ERR_PTR(-ENOENT);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9c630ebefeeee4363ffd29f2f9b18eddafc6479c",
      "candidate_info": {
        "commit_hash": "9c630ebefeeee4363ffd29f2f9b18eddafc6479c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9c630ebefeeee4363ffd29f2f9b18eddafc6479c",
        "files": [
          "fs/overlayfs/inode.c",
          "fs/overlayfs/overlayfs.h",
          "fs/overlayfs/super.c"
        ],
        "message": "ovl: simplify permission checking\n\nThe fact that we always do permission checking on the overlay inode and\nclear MAY_WRITE for checking access to the lower inode allows cruft to be\nremoved from ovl_permission().\n\n1) \"default_permissions\" option effectively did generic_permission() on the\noverlay inode with i_mode, i_uid and i_gid updated from underlying\nfilesystem.  This is what we do by default now.  It did the update using\nvfs_getattr() but that's only needed if the underlying filesystem can\nchange (which is not allowed).  We may later introduce a \"paranoia_mode\"\nthat verifies that mode/uid/gid are not changed.\n\n2) splitting out the IS_RDONLY() check from inode_permission() also becomes\nunnecessary once we remove the MAY_WRITE from the lower inode check.\n\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>",
        "before_after_code_files": [
          "fs/overlayfs/inode.c||fs/overlayfs/inode.c",
          "fs/overlayfs/overlayfs.h||fs/overlayfs/overlayfs.h",
          "fs/overlayfs/super.c||fs/overlayfs/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/overlayfs/inode.c||fs/overlayfs/inode.c"
          ],
          "candidate": [
            "fs/overlayfs/inode.c||fs/overlayfs/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/overlayfs/inode.c||fs/overlayfs/inode.c": [
          "File: fs/overlayfs/inode.c -> fs/overlayfs/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  const struct cred *old_cred;",
          "125:  int err;",
          "151:  realinode = d_inode_rcu(realdentry);",
          "152:  if (!realinode) {",
          "",
          "[Removed Lines]",
          "127:  if (ovl_is_default_permissions(inode)) {",
          "128:   struct kstat stat;",
          "129:   struct path realpath = { .dentry = realdentry };",
          "131:   if (mask & MAY_NOT_BLOCK)",
          "132:    return -ECHILD;",
          "134:   realpath.mnt = ovl_entry_mnt_real(oe, inode, is_upper);",
          "136:   err = vfs_getattr(&realpath, &stat);",
          "137:   if (err)",
          "138:    return err;",
          "140:   if ((stat.mode ^ inode->i_mode) & S_IFMT)",
          "141:    return -ESTALE;",
          "143:   inode->i_mode = stat.mode;",
          "144:   inode->i_uid = stat.uid;",
          "145:   inode->i_gid = stat.gid;",
          "147:   return generic_permission(inode, mask);",
          "148:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   return -ENOENT;",
          "155:  }",
          "",
          "[Removed Lines]",
          "157:  if (mask & MAY_WRITE) {",
          "158:   umode_t mode = realinode->i_mode;",
          "173:   if (is_upper && !IS_RDONLY(inode) && IS_RDONLY(realinode) &&",
          "174:       (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))",
          "175:    return -EROFS;",
          "176:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:  old_cred = ovl_override_creds(inode->i_sb);",
          "187:  if (!is_upper)",
          "188:   mask &= ~(MAY_WRITE | MAY_APPEND);",
          "190:  revert_creds(old_cred);",
          "192:  return err;",
          "",
          "[Removed Lines]",
          "189:  err = __inode_permission(realinode, mask);",
          "",
          "[Added Lines]",
          "145:  err = inode_permission(realinode, mask);",
          "",
          "---------------"
        ],
        "fs/overlayfs/overlayfs.h||fs/overlayfs/overlayfs.h": [
          "File: fs/overlayfs/overlayfs.h -> fs/overlayfs/overlayfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: struct vfsmount *ovl_entry_mnt_real(struct ovl_entry *oe, struct inode *inode,",
          "147:         bool is_upper);",
          "148: struct ovl_dir_cache *ovl_dir_cache(struct dentry *dentry);",
          "150: void ovl_set_dir_cache(struct dentry *dentry, struct ovl_dir_cache *cache);",
          "151: struct dentry *ovl_workdir(struct dentry *dentry);",
          "152: int ovl_want_write(struct dentry *dentry);",
          "",
          "[Removed Lines]",
          "149: bool ovl_is_default_permissions(struct inode *inode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/overlayfs/super.c||fs/overlayfs/super.c": [
          "File: fs/overlayfs/super.c -> fs/overlayfs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:  return oe->cache;",
          "186: }",
          "195: void ovl_set_dir_cache(struct dentry *dentry, struct ovl_dir_cache *cache)",
          "196: {",
          "197:  struct ovl_entry *oe = dentry->d_fsdata;",
          "",
          "[Removed Lines]",
          "188: bool ovl_is_default_permissions(struct inode *inode)",
          "189: {",
          "190:  struct ovl_fs *ofs = inode->i_sb->s_fs_info;",
          "192:  return ofs->config.default_permissions;",
          "193: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}