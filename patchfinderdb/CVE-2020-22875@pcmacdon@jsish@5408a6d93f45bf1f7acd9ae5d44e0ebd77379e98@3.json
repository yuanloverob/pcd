{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
      "candidate_info": {
        "commit_hash": "8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
        "files": [
          "lib/Cdata.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.42\": add Object.freeze and use in moduleOpts\n\nFossilOrigin-Name: 2a422416c84e10b15012de8195d1a9390b71533893631fe4d243cfdb2eb7965f",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         enumvals:{}, indata:'', infile:'', outFile:null, rootname:null,",
          "34:         lnstart:0, setCons:0, icode:[], outcode:'', addflags:'',",
          "35:         preface: '// DO NOT EDIT: file generated by ',",
          "37:     };",
          "38:     self.pkg = require('Cdata', 0);",
          "39:     self.version = self.pkg.version;",
          "",
          "[Removed Lines]",
          "36:         Trace       :false,",
          "",
          "[Added Lines]",
          "36:         Trace       :false, jscHeaderStr:'', parmFlags:'',",
          "37:         objOptCmdStr:'', objCmdStr:'', selfSuffix:'',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     var EV = { enum:[], struct:[], vars:[] };",
          "44:     moduleOpts(self, options, conf);",
          "46:     var defs = {structs:[], enums:[], types:[], vars:[], cmds:[]};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     Object.freeze(self, true, true);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 41",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 42",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     int traceCall;",
          "399:     bool coverage;",
          "400:     bool profile;",
          "401:     Jsi_Value *udata;",
          "402: } Jsi_ModuleConf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:     bool freeze;",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "858:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "859:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "860:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, freeze,  .help=\"Freeze self object: first arg to moduleOpts\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1085:             return JSI_ERROR;",
          "1086:         if (rc == JSI_OK) {",
          "1087:             Jsi_PkgOpts po = {};",
          "1088:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1089:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1090:                 rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1089:             po.conf.freeze = interp->subOpts.freeze;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1102:     return rc;",
          "1103: }",
          "1105: static Jsi_RC SysProvideCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1106:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1107:     return SysProvideCmdInt(interp, args, _this, ret, funcPtr, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107: #define FN_provide \"Default is the file tail-rootname\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4609: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4610:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4611: {",
          "4612:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "4613:     Jsi_TreeSearch search = {};",
          "4614:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4615:     bool freeze = interp->subOpts.freeze;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4764:             mo = &pf->pkg->popts.conf;",
          "4765:             pf->pkg->logmask = mo->logmask;",
          "4766:             pf->pkg->log = mo->log;",
          "4767:         }",
          "4768:         uint i;",
          "4769:         for (i=JSI_LOG_ASSERT; mo && i<=JSI_LOG_TEST; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4771:             freeze = mo->freeze;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4780:             }",
          "4781:         }",
          "4782:     }",
          "4783:     return rc;",
          "4784: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4788:     if (rc == JSI_OK && freeze) {",
          "4789:         Jsi_Obj *obj = v1->d.obj;",
          "4790:         obj->freeze = 1;",
          "4791:         obj->freezeModifyOk = 1;",
          "4792:         obj->freezeReadBad = 1;",
          "4793:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4943:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "4944:     { \"parseOpts\",  SysModuleOptsCmd,2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: same as moduleOpts\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "4945:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4947:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "4948:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "4949:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "",
          "[Removed Lines]",
          "4946:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, opts:object|function=void\", .help=\"Provide a package for use with require. Default is the file tail-rootname\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "4957:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object|function=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:                 Jsi_Value key = VALINIT, *kPtr = &key; // Note: a string key so no reset needed.",
          "865:                 Jsi_ValueMakeStringKey(interp, &kPtr, varname);",
          "866:                 v = jsi_ValueObjKeyAssign(interp, global_scope, &key, NULL, JSI_OM_DONTENUM);",
          "867:                 if (v->vt == JSI_VT_UNDEF) {",
          "868:                     v->d.lookupFail = varname;",
          "869:                     v->f.bits.lookupfailed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:                 if (!v)",
          "868:                     return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:         jsiPop(interp, 1);",
          "942:         return JSI_ERROR;",
          "943:     }",
          "944:     Jsi_String *str = jsi_ValueString(src);",
          "945:     if (str && Jsi_ValueIsNumber(interp, idx)) {",
          "946:         int bLen, cLen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:     int arrayindex = -1;",
          "948:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) {",
          "949:         arrayindex = (int)idx->d.num;",
          "950:     }",
          "952:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadBad) {",
          "953:         Jsi_Value *v;",
          "954:         char keyBuf[100], *keyStr = keyBuf;",
          "955:         if (arrayindex>=0)",
          "956:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "957:         else",
          "958:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "959:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "960:             return Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "961:         }",
          "962:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1227:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1228:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1229:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "1231:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1232:                     } else if (strict)",
          "1233:                         rc = Jsi_LogError(\"assign to a non-exist object\");",
          "",
          "[Removed Lines]",
          "1230:                         jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "",
          "[Added Lines]",
          "1250:                         if (!jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0))",
          "1251:                             rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2027:                 line = fp->child->filePtr->pkg->loadLine;",
          "2028:             }",
          "2029:         }",
          "2030:         if (fn && ((cp=Jsi_Strrchr(fn, '/'))))",
          "2031:             fn = cp +1;",
          "2032:         Jsi_DSPrintf(&dStr, \"#%d: %s:%d: \", fp->level, fn, line);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2051:         if (!line && fp->level == interp->framePtr->level)",
          "2052:             line = interp->curIp->Line;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:     uint isNoOp:1;",
          "523:     uint isBlob:1;",
          "526:         int val;",
          "527:         Jsi_Number num;",
          "",
          "[Removed Lines]",
          "524:     uint unused2:16;",
          "",
          "[Added Lines]",
          "524:     uint freeze:1;",
          "525:     uint freezeModifyOk:1;",
          "526:     uint freezeReadBad:1;",
          "527:     uint unused2:13;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:     bool outUndef;",
          "1028:     bool logAllowDups;",
          "1029:     bool logColNums;",
          "1030:     bool privKeys;",
          "1031:     bool compat;",
          "1032:     bool mutexUnlock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:     bool freeze;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     JSI_OPT(BOOL,  jsi_SubOptions, compat,      .help=\"Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser\" ),",
          "64:     JSI_OPT(INT,   jsi_SubOptions, dblPrec,     .help=\"Format precision of double where 0=max, -1=max-1, ... (max-1)\" ),",
          "65:     JSI_OPT(BOOL,  jsi_SubOptions, istty,       .help=\"Indicates interp is in interactive mode\", jsi_IIRO),",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, logColNums,  .help=\"Display column numbers in error messages\"),",
          "67:     JSI_OPT(BOOL,  jsi_SubOptions, logAllowDups,.help=\"Log should not filter out duplicate messages\"),",
          "68:     JSI_OPT(BOOL,  jsi_SubOptions, mutexUnlock, .help=\"Unlock own mutex when evaling in other interps (true)\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, freeze,      .help=\"Default freeze self object in: first arg to moduleOpts\" ),",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     return Jsi_FunctionCall(interp, args, _this, ret);",
          "363: }",
          "366: static Jsi_RC ObjectKeysCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "367:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static Jsi_RC ObjectFreezeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "372:     if (!val || !Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "373:         return Jsi_LogError(\"arg 1: expected object\");",
          "374:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "375:         return Jsi_LogError(\"arg 2: expected bool\");",
          "376:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "377:         return Jsi_LogError(\"arg 3: expected bool\");",
          "378:     bool bnum = 0, rnum = 0, fnum = 0;",
          "379:     if (bval)",
          "380:         Jsi_GetBoolFromValue(interp, bval, &bnum);",
          "381:     if (rval)",
          "382:         Jsi_GetBoolFromValue(interp, rval, &rnum);",
          "383:     if (fval)",
          "384:         Jsi_GetBoolFromValue(interp, fval, &fnum);",
          "385:     Jsi_Obj *obj = val->d.obj;",
          "386:     obj->freeze = !fnum;",
          "387:     obj->freezeModifyOk = bnum;",
          "388:     obj->freezeReadBad = rnum;",
          "389:     return JSI_OK;",
          "391: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:     { \"hasOwnProperty\", jsi_HasOwnPropertyCmd,  1, 1, \"name:string\", .help=\"Returns a true if object has the specified property\", .retType=(uint)JSI_TT_BOOLEAN },",
          "674:     { \"is\",             ObjectIsCmd, 2, 2, \"value1, value2\", .help=\"Tests if two values are equal\", .retType=(uint)JSI_TT_BOOLEAN },",
          "675:     { \"isPrototypeOf\",  ObjectIsPrototypeOfCmd, 1, 1, \"name\", .help=\"Tests for an object in another object's prototype chain\", .retType=(uint)JSI_TT_BOOLEAN },",
          "676:     { \"keys\",           ObjectKeysCmd,          0, 1, \"obj:object|function=void\", .help=\"Return the keys of an object or array\", .retType=(uint)JSI_TT_ARRAY },",
          "677:     { \"merge\",          ObjectMergeCmd,         1, 1, \"obj:object|function\", .help=\"Return new object containing merged values\", .retType=(uint)JSI_TT_OBJECT },",
          "678:     { \"propertyIsEnumerable\", ObjectPropertyIsEnumerableCmd,1, 1, \"name\", .help=\"Determine if a property is enumerable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false\", .help=\"Freeze an object optionally allowing modify (but not add)\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:     }",
          "1002:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "1003:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1004:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:     if (value && target->vt == JSI_VT_OBJECT && target->d.obj->ot == JSI_OT_OBJECT && target->d.obj->freeze) {",
          "1003:         Jsi_Obj *obj = target->d.obj;",
          "1004:         Jsi_Value *v;",
          "1005:         char keyBuf[100], *keyStr = keyBuf;",
          "1006:         if (arrayindex>=0)",
          "1007:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "1008:         else",
          "1009:             keyStr = Jsi_ValueString(interp, keyval, NULL);",
          "1010:         if (!obj->freezeModifyOk) {",
          "1011:             Jsi_LogError(\"frozen assign/modify key: %s\", keyStr);",
          "1012:             return NULL;",
          "1013:         }",
          "1014:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, target, keyStr, 0))) {",
          "1015:             Jsi_LogError(\"frozen assign key: %s\", keyStr);",
          "1016:             return NULL;",
          "1017:         }",
          "1018:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "220: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "221: Object.prototype.hasOwnProperty = function(name:string):boolean {};",
          "222: Object.prototype.is = function(value1, value2):boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: Object.prototype.freeze = function(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: System.prototype.parseInt = function(val:any, base:number=10):number {};",
          "315: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined=void):object {};",
          "316: System.prototype.printf = function(format:string, ...):void {};",
          "318: System.prototype.puts = function(val, ...):void {};",
          "319: System.prototype.quote = function(val:string):string {};",
          "320: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "317: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, opts:object|function=void):void {};",
          "",
          "[Added Lines]",
          "318: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, options:object|function=void):void {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408: var parseInt = function(val:any, base:number=10):number {};",
          "409: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined=void):object {};",
          "410: var printf = function(format:string, ...):void {};",
          "412: var puts = function(val, ...):void {};",
          "413: var quote = function(val:string):string {};",
          "414: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "411: var provide = function(name:string|null|function=void, version:number|string=void, opts:object|function=void):void {};",
          "",
          "[Added Lines]",
          "412: var provide = function(name:string|null|function=void, version:number|string=void, options:object|function=void):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "722: <tr><td>compat</td><td><i>BOOL</i></td><td>Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser.</td><td><i></i></td></tr>",
          "723: <tr><td>dblPrec</td><td><i>INT</i></td><td>Format precision of double where 0=max, -1=max-1, ... (max-1).</td><td><i></i></td></tr>",
          "724: <tr><td>istty</td><td><i>BOOL</i></td><td>Indicates interp is in interactive mode.</td><td><i>readOnly</i></td></tr>",
          "725: <tr><td>logColNums</td><td><i>BOOL</i></td><td>Display column numbers in error messages.</td><td><i></i></td></tr>",
          "726: <tr><td>logAllowDups</td><td><i>BOOL</i></td><td>Log should not filter out duplicate messages.</td><td><i></i></td></tr>",
          "727: <tr><td>mutexUnlock</td><td><i>BOOL</i></td><td>Unlock own mutex when evaling in other interps (true).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: <tr><td>freeze</td><td><i>BOOL</i></td><td>Default freeze self object in: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "964: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "965: <tr><td>Object</td><td>new Object(val:object|function|null=void):object </td><td>Object constructor.</td></tr>",
          "966: <tr><td>create</td><td>create(proto:null|object, properties:object=void):object </td><td>Create a new object with prototype object and properties.</td></tr>",
          "967: <tr><td>getPrototypeOf</td><td>getPrototypeOf(name:object|function):function|object </td><td>Return prototype of an object.</td></tr>",
          "968: <tr><td>hasOwnProperty</td><td>hasOwnProperty(name:string):boolean </td><td>Returns a true if object has the specified property.</td></tr>",
          "969: <tr><td>is</td><td>is(value1, value2):boolean </td><td>Tests if two values are equal.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void </td><td>Freeze an object optionally allowing modify (but not add).</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1372: <tr><td>parseInt</td><td>parseInt(val:any, base:number=10):number </td><td>Convert string to an integer.</td></tr>",
          "1373: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: same as moduleOpts.</td></tr>",
          "1374: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Formatted output to stdout.</td></tr>",
          "1376: <tr><td>puts</td><td>puts(val, ...):void </td><td>Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.</td></tr>",
          "1377: <tr><td>quote</td><td>quote(val:string):string </td><td>Return quoted string.</td></tr>",
          "1378: <tr><td>require</td><td>require(name:string=void, version:number|string=1, <a href='#System.requireOptions'>options</a>:object=void):number|array|object </td><td>Load/query packages. With no arguments, returns the list of all loaded packages.",
          "",
          "[Removed Lines]",
          "1375: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, opts:object|function=void):void </td><td>Provide a package for use with require. Default is the file tail-rootname.</td></tr>",
          "",
          "[Added Lines]",
          "1377: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, <a href='#System.provideOptions'>options</a>:object|function=void):void </td><td>Provide a package for use with require.. Default is the file tail-rootname</td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1421: </table>",
          "1424: <a name=\"System.requireOptions\"></a>",
          "1425: <a name=\"System.confOptions\"></a>",
          "1426: <h2>Options for \"System.require\"</h2>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1426: <a name=\"System.provideOptions\"></a>",
          "1427: <a name=\"System.confOptions\"></a>",
          "1428: <h2>Options for \"System.provide\"</h2>",
          "1429: <table border=\"1\" class=\"optstbl table\">",
          "1430: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1431: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1432: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1433: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1434: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "1435: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1436: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1437: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "1438: <tr><td>udata</td><td><i>OBJ</i></td><td>User data settable by require.</td><td><i></i></td></tr>",
          "1439: </table>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1429: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1430: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1431: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1432: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1433: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1434: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68c2141cdf979072b01ec5f6ff99796419a56d1f",
      "candidate_info": {
        "commit_hash": "68c2141cdf979072b01ec5f6ff99796419a56d1f",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/68c2141cdf979072b01ec5f6ff99796419a56d1f",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiValue.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.1.5\": refactor ObjInsert\n\nFossilOrigin-Name: c9ee31ce057502975b2f91ecb267d5ad74bab4f885d773549ebc059bb8f923b7",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3795:     #endif",
          "3799:         f = func->d.obj->d.fobj->func;",
          "3801:         if (cmdSpec->name)",
          "",
          "[Removed Lines]",
          "3798:         Jsi_ValueInsertFixed(interp, (iscons?NULL:proto), cmdSpec->name, func);",
          "",
          "[Added Lines]",
          "3798:         Jsi_ValueInsertFixed(interp, (iscons||!proto?interp->csc:proto), cmdSpec->name, func);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1037:     return JSI_OK;",
          "1038: }",
          "1040: Jsi_RC jsiEvalCodeSub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "1041:      jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1042:      Jsi_Value *_this, Jsi_Value *vret)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1041: static Jsi_RC jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int n)",
          "1042: {",
          "1043:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "1044:         return JSI_ERROR;",
          "1045:     if (value->vt == JSI_VT_OBJECT)",
          "1046:         jsi_ObjInsertObjCheck(interp, obj, value, 1);",
          "1048:     if (obj->arr[n])",
          "1049:     {",
          "1050:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "1051:         return JSI_OK;",
          "1052:     }",
          "1053:     Assert(obj->arrCnt<=obj->arrMaxSize);",
          "1054:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "1055:     int m;",
          "1056:     Jsi_ValueCopy(interp,v, value);",
          "1057:     obj->arr[n] = v;",
          "1058:     m = Jsi_ObjGetLength(interp, obj);",
          "1059:     if ((n+1) > m)",
          "1060:        Jsi_ObjSetLength(interp, obj, n+1);",
          "1061:     return JSI_OK;",
          "1062: }",
          "1065: static Jsi_RC jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *keyval, Jsi_Value *value, int flag)",
          "1066: {",
          "1068:     const char *kstr = NULL;",
          "1070:     int arrayindex = -1;",
          "1071:     if (keyval->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(keyval->d.num) && keyval->d.num >= 0) {",
          "1072:         arrayindex = (int)keyval->d.num;",
          "1073:         if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "1074:             target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1075:             return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1076:         }",
          "1077:     }",
          "1078:     Jsi_String *jstr = jsi_ValueString(keyval);",
          "1079:     if (jstr)",
          "1080:         kstr = jstr->str;",
          "1081:     else",
          "1082:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1084: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1085:     if (kstr[0] == '_' && Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "1086:         Jsi_Obj *obj = target->d.obj;",
          "1087:         obj->__proto__ = Jsi_ValueDup(interp, value);",
          "1089:         return JSI_OK;",
          "1090:     }",
          "1091: #endif",
          "1092:     Jsi_Value *v = Jsi_ValueDup(interp, value);",
          "1094:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "1095:         Jsi_DecrRefCount(interp, v);",
          "1096:         return JSI_ERROR;",
          "1097:     }",
          "1098:     Jsi_DecrRefCount(interp, v);",
          "1099:     return JSI_OK;",
          "1100: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1226:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1227:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1228:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "1233:                         rc = Jsi_LogError(\"assign to a non-exist object\");",
          "1234:                     jsiClearStack(interp,3);",
          "1235:                     Jsi_ValueCopy(interp,v3, sval);",
          "",
          "[Removed Lines]",
          "1229:                         if (!jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0))",
          "1230:                             rc = JSI_ERROR;",
          "1231:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1232:                     } else if (strict)",
          "",
          "[Added Lines]",
          "1292:                         if (rc == JSI_OK)",
          "1293:                             rc = jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "1294:                     } else",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1465: extern Jsi_Obj *jsi_UserObjFromName(Jsi_Interp *interp, const char *name);",
          "1467: extern Jsi_RC Zvfs_Mount( Jsi_Interp *interp, Jsi_Value *archive, Jsi_Value *mount, Jsi_Value **ret);",
          "1469: extern void jsi_ValueSubscriptLen(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret, int right_val);",
          "1470: extern Jsi_Value* jsi_ValueSubscript(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret);",
          "1472: extern void jsi_ValueObjGetKeys(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *ret, bool isof);",
          "1473: extern Jsi_Value* jsi_ObjArrayLookup(Jsi_Interp *interp, Jsi_Obj *obj, const char *key);",
          "1474: extern Jsi_Value* jsi_ProtoObjValueNew1(Jsi_Interp *interp, const char *name);",
          "",
          "[Removed Lines]",
          "1468: extern Jsi_Value* jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "1471: extern Jsi_Value* jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value *value, int flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:     return JSI_OK;",
          "403: }",
          "429: int Jsi_ObjIncrRefCount(Jsi_Interp *interp, Jsi_Obj *obj) {",
          "430:     jsi_DebugObj(obj,\"Incr\", jsi_DebugValueCallIdx(), interp);",
          "431:     SIGASSERT(obj,OBJ);",
          "",
          "[Removed Lines]",
          "406: Jsi_Value *jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int n)",
          "407: {",
          "408:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "409:         return NULL;",
          "410:     if (value->vt == JSI_VT_OBJECT)",
          "411:         jsi_ObjInsertObjCheck(interp, obj, value, 1);",
          "413:     if (obj->arr[n])",
          "414:     {",
          "415:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "416:         return obj->arr[n];",
          "417:     }",
          "418:     Assert(obj->arrCnt<=obj->arrMaxSize);",
          "419:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "420:     int m;",
          "421:     Jsi_ValueCopy(interp,v, value);",
          "422:     obj->arr[n] = v;",
          "423:     m = Jsi_ObjGetLength(interp, obj);",
          "424:     if ((n+1) > m)",
          "425:        Jsi_ObjSetLength(interp, obj, n+1);",
          "426:     return v;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     if (!v || v->vt != JSI_VT_OBJECT || v->d.obj->ot != JSI_OT_OBJECT)",
          "544:         return Jsi_LogError(\"arg1: expected object\");",
          "545:     Jsi_Obj *obj = v->d.obj;",
          "546:     Jsi_ValueMakeObject(interp, ret, obj);",
          "547:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "548:     for (i=1; i<argc; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:     Jsi_RC rc = JSI_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:         if (!vs || vs->vt != JSI_VT_OBJECT || vs->d.obj->ot != JSI_OT_OBJECT)",
          "553:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "554:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "556:             Jsi_Value *v2 = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "557:             if (v2 && v2->f.bits.dontenum == 0)",
          "559:         }",
          "560:         Jsi_TreeSearchDone(&search);",
          "561:     }",
          "563: }",
          "565: #if (JSI_HAS___PROTO__==1)",
          "",
          "[Removed Lines]",
          "555:             tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "558:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "562:     return JSI_OK;",
          "",
          "[Added Lines]",
          "556:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "559:                 rc = Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "563:     return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "662:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "663:             Jsi_Value *v = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "664:             if (v && v->f.bits.dontenum == 0)",
          "666:         }",
          "667:         Jsi_TreeSearchDone(&search);",
          "668:     }",
          "",
          "[Removed Lines]",
          "665:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v, 0);",
          "",
          "[Added Lines]",
          "666:                 rc = Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v, 0);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"10ffca3d3bdee8292c9eb47ab8422550\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"ddf4cf9ca32a54a3ab3b9a21ae172a78\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     const char*(*_Jsi_ObjTypeStr)(Jsi_Interp *interp, Jsi_Obj *obj);",
          "122:     Jsi_otype(*_Jsi_ObjTypeGet)(Jsi_Obj *obj);",
          "123:     void    (*_Jsi_ObjListifyArray)(Jsi_Interp *interp, Jsi_Obj *obj);",
          "127:     void   (*_Jsi_ObjFromDS)(Jsi_DString *dsPtr, Jsi_Obj *obj);",
          "128:     Jsi_Value*(*_Jsi_ValueNew)(Jsi_Interp *interp);",
          "129:     Jsi_Value*(*_Jsi_ValueNew1)(Jsi_Interp *interp);",
          "",
          "[Removed Lines]",
          "124:     Jsi_RC (*_Jsi_ObjArraySet)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "125:     Jsi_RC (*_Jsi_ObjArrayAdd)(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v);",
          "126:     Jsi_RC (*_Jsi_ObjInsert)(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags);",
          "",
          "[Added Lines]",
          "124:     Jsi_RC  (*_Jsi_ObjArraySet)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "125:     Jsi_RC  (*_Jsi_ObjArrayAdd)(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v);",
          "126:     Jsi_RC  (*_Jsi_ObjInsert)(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "976:     return nret;",
          "977: }",
          "1054: static Jsi_Value *jsi_ValueLookupBase(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret)",
          "1055: {",
          "1056:     if (!target)",
          "",
          "[Removed Lines]",
          "979: Jsi_Value *jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *keyval, Jsi_Value *value, int flag)",
          "980: {",
          "982:     Jsi_Obj *obj = target->d.obj;",
          "983:     const char *kstr = NULL;",
          "985:     int arrayindex = -1;",
          "986:     if (keyval->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(keyval->d.num) && keyval->d.num >= 0) {",
          "987:         arrayindex = (int)keyval->d.num;",
          "988:         if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "989:             target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "990:             return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "991:         }",
          "992:     }",
          "993:     Jsi_String *jstr = jsi_ValueString(keyval);",
          "994:     if (jstr)",
          "995:         kstr = jstr->str;",
          "996:     else",
          "997:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "998:     if (obj && obj->setters && value) {",
          "999:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1000:         if (v) {",
          "1001:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1002:             vargs[0] = value;",
          "1003:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1004:             Jsi_IncrRefCount(interp, value);",
          "1005:             Jsi_IncrRefCount(interp, vpargs);",
          "1006:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1007:             Jsi_DecrRefCount(interp, vpargs);",
          "1008:             Jsi_DecrRefCount(interp, value);",
          "1009:             Jsi_DecrRefCount(interp, retStr);",
          "1010:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1011:                 return NULL;",
          "1012:             return keyval;// TODO, should not return this!!!",
          "1013:         }",
          "1014:     }",
          "1016:     if (obj && value && target->d.obj->freeze) {",
          "1017:         Jsi_Obj *obj = target->d.obj;",
          "1018:         Jsi_Value *v;",
          "1019:         char keyBuf[100], *keyStr = keyBuf;",
          "1020:         if (arrayindex>=0)",
          "1021:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "1022:         else",
          "1023:             keyStr = Jsi_ValueString(interp, keyval, NULL);",
          "1024:         if (obj->freezeNoModify) {",
          "1025:             Jsi_LogError(\"frozen assign/modify key: %s\", keyStr);",
          "1026:             return NULL;",
          "1027:         }",
          "1028:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, target, keyStr, 0))) {",
          "1029:             Jsi_LogError(\"frozen assign key: %s\", keyStr);",
          "1030:             return NULL;",
          "1031:         }",
          "1032:     }",
          "1034: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1035:     if (Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "1036:         Jsi_Obj *obj = target->d.obj;",
          "1037:         obj->__proto__ = Jsi_ValueDup(interp, value);",
          "1039:         return obj->__proto__;",
          "1040:     }",
          "1041: #endif",
          "1042:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "1043:     if (value)",
          "1044:         Jsi_ValueCopy(interp, v, value);",
          "1046:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "1047:         Jsi_DecrRefCount(interp, v);",
          "1048:         return NULL;",
          "1049:     }",
          "1050:     Jsi_DecrRefCount(interp, v);",
          "1051:     return v;",
          "1052: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1354:     return res;",
          "1355: }",
          "1357: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1358: {",
          "1366:     target->f.flag |= flags;",
          "1370: }",
          "1372: Jsi_RC Jsi_ValueInsertArray(Jsi_Interp *interp, Jsi_Value *target, int key, Jsi_Value *val, int flags)",
          "1373: {",
          "1379:     Jsi_Obj *obj = target->d.obj;",
          "1381:     if (obj->isarrlist) {",
          "",
          "[Removed Lines]",
          "1359:     if (target == NULL)",
          "1360:         target = interp->csc;",
          "1361:     if (target->vt != JSI_VT_OBJECT) {",
          "1362:         if (interp->typeCheck.strict)",
          "1363:             Jsi_LogWarn(\"Target is not object\");",
          "1364:         return JSI_ERROR;",
          "1365:     }",
          "1367:     if (Jsi_ObjInsert(interp, target->d.obj, key, val, flags))",
          "1368:         return JSI_OK;",
          "1369:     return JSI_ERROR;",
          "1374:     if (target->vt != JSI_VT_OBJECT) {",
          "1375:         if (interp->typeCheck.strict)",
          "1376:             Jsi_LogWarn(\"Target is not object\");",
          "1377:         return JSI_ERROR;",
          "1378:     }",
          "",
          "[Added Lines]",
          "1285:     if (target->vt != JSI_VT_OBJECT)",
          "1286:         return Jsi_LogError(\"Target is not object\");",
          "1288:     return Jsi_ObjInsert(interp, target->d.obj, key, val, flags);",
          "1294:     if (target->vt != JSI_VT_OBJECT)",
          "1295:         return Jsi_LogError(\"Target is not object\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1387:     }",
          "1388:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "1389:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
          "1392: }",
          "",
          "[Removed Lines]",
          "1390:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "1391:     return JSI_OK;",
          "",
          "[Added Lines]",
          "1307:     return Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1420: {",
          "1421:     Jsi_TreeEntry *hPtr;",
          "1422:     SIGASSERT(val, VALUE);",
          "1423:     if (val->vt == JSI_VT_OBJECT)",
          "1424:         jsi_ObjInsertObjCheck(interp, obj, val, 1);",
          "1425:     hPtr = Jsi_TreeObjSetValue(obj, key, val, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     if (obj && obj->setters && val) {",
          "1341:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, key, 0);",
          "1342:         if (v) {",
          "1343:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1344:             vargs[0] = val;",
          "1345:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1346:             Jsi_IncrRefCount(interp, val);",
          "1347:             Jsi_IncrRefCount(interp, vpargs);",
          "1348:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1349:             Jsi_DecrRefCount(interp, vpargs);",
          "1350:             Jsi_DecrRefCount(interp, val);",
          "1351:             Jsi_DecrRefCount(interp, retStr);",
          "1352:             if (rc != JSI_OK || flags&JSI_OM_DONTENUM)",
          "1353:                 return JSI_ERROR;",
          "1354:             return JSI_OK;",
          "1355:         }",
          "1356:     }",
          "1358:     if (val && obj->freeze) {",
          "1359:         if (obj->freezeNoModify)",
          "1360:             return Jsi_LogError(\"frozen assign/modify key: %s\", key);",
          "1361:         if (!key || !(Jsi_TreeObjGetValue(obj, key, 0)))",
          "1362:             return Jsi_LogError(\"frozen assign key: %s\", key);",
          "1363:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "a14b026e6d908e567aa73f3a87b623908ca36ab9",
      "candidate_info": {
        "commit_hash": "a14b026e6d908e567aa73f3a87b623908ca36ab9",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a14b026e6d908e567aa73f3a87b623908ca36ab9",
        "files": [
          "js-demos/log/other.jsi",
          "js-demos/modDebug.jsi",
          "js-demos/module.jsi",
          "js-demos/warndemo.jsi",
          "lib/Testing.jsi",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFormat.c",
          "src/jsiFunc.c",
          "src/jsiHash.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiOptions.c",
          "src/jsiProto.c",
          "src/jsiPstate.c",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiValue.c",
          "tests/expr.jsi",
          "tests/strict.jsi",
          "tests/syntax.jsi"
        ],
        "message": "Release \"3.1.9\": Fix set/get issues, cleanup typeCheck\n\nFossilOrigin-Name: 349b99793c392c66eff1cd30219eec6cc6a6d077bb324703f31a0ec0240f49af",
        "before_after_code_files": [
          "js-demos/log/other.jsi||js-demos/log/other.jsi",
          "js-demos/modDebug.jsi||js-demos/modDebug.jsi",
          "js-demos/module.jsi||js-demos/module.jsi",
          "js-demos/warndemo.jsi||js-demos/warndemo.jsi",
          "lib/Testing.jsi||lib/Testing.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFormat.c||src/jsiFormat.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiHash.c||src/jsiHash.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiOptions.c||src/jsiOptions.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tests/expr.jsi||tests/expr.jsi",
          "tests/strict.jsi||tests/strict.jsi",
          "tests/syntax.jsi||tests/syntax.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/log/other.jsi||js-demos/log/other.jsi": [
          "File: js-demos/log/other.jsi -> js-demos/log/other.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: provide(other, 1);",
          "27: if (isMain()) {",
          "29:         return runModule(other);",
          "32: ;   other();",
          "33: ;// other('',{badArg:0});",
          "",
          "[Removed Lines]",
          "28:     if (!Interp.conf('unitTest'))",
          "31: ;'  other unit-test';",
          "",
          "[Added Lines]",
          "28:     if (!Interp.conf('testMode'))",
          "31: ;'  other test';",
          "",
          "---------------"
        ],
        "js-demos/modDebug.jsi||js-demos/modDebug.jsi": [
          "File: js-demos/modDebug.jsi -> js-demos/modDebug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: ;'\\n === Enabling LogDebug in fileSize.jsi only ===';",
          "4: ;require('fileSize');",
          "5: ;fileSize('fileSize.jsi');",
          "7: ;fileSize('fileSize.jsi');",
          "8: ;require('module');",
          "9: ;module([1]);",
          "11: ;module([2]);",
          "13: ;'\\n === Trace function calls in fileSize.jsi ===';",
          "15: ;fileSize('fileSize.jsi');",
          "16: ;module([2]);",
          "17: ;require('fileSize', 0, {traceCall:[]});",
          "",
          "[Removed Lines]",
          "6: ;require('fileSize', 0, {Debug:true, Test:true});",
          "10: ;require('module', 0, {Debug:true, Test:true});",
          "14: ;require('fileSize', 0, {Debug:false, traceCall:['funcs']});",
          "",
          "[Added Lines]",
          "6: ;require('fileSize', 0, {log:{Debug:true, Test:true}});",
          "10: ;require('module', 0, {log:{Debug:true, Test:true}});",
          "14: ;require('fileSize', 0, {log:{Debug:false}, traceCall:['funcs']});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  === Enabling LogDebug in fileSize.jsi only ==='",
          "34: require('fileSize') ==> 1",
          "35: fileSize('fileSize.jsi') ==> 907",
          "37: fileSize('fileSize.jsi') ==> \"TEST:  Starting\", fileSize.jsi:27, fileSize()",
          "38: \"DEBUG: Len [ \"fileSize.jsi\" ]\", fileSize.jsi:15, getLength()",
          "39: 907",
          "40: require('module') ==> 1",
          "41: module([1]) ==> undefined",
          "43: module([2]) ==> \"TEST:  Starting [ 2 ]\", module.jsi:14, main()",
          "44: \"DEBUG: Done\", module.jsi:23, main()",
          "45: undefined",
          "46: '",
          "47:  === Trace function calls in fileSize.jsi ==='",
          "49: fileSize('fileSize.jsi') ==>   #2: > fileSize() in modDebug.jsi:15",
          "50: \"TEST:  Starting\", fileSize.jsi:27, fileSize()",
          "51: 907",
          "",
          "[Removed Lines]",
          "36: require('fileSize', 0, {Debug:true, Test:true}) ==> 1",
          "42: require('module', 0, {Debug:true, Test:true}) ==> 1",
          "48: require('fileSize', 0, {Debug:false, traceCall:['funcs']}) ==> 1",
          "",
          "[Added Lines]",
          "36: require('fileSize', 0, {log:{Debug:true, Test:true}) ==> 1",
          "42: require('module', 0, {log:{Debug:true, Test:true}) ==> 1",
          "48: require('fileSize', 0, {log:{Debug:false, traceCall:['funcs']}) ==> 1",
          "",
          "---------------"
        ],
        "js-demos/module.jsi||js-demos/module.jsi": [
          "File: js-demos/module.jsi -> js-demos/module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: provide(module, 1);",
          "31: if (isMain()) {",
          "33:         return runModule(module);",
          "36: ;   module();",
          "37: ;// module('',{badArg:0});",
          "",
          "[Removed Lines]",
          "32:     if (!Interp.conf('unitTest'))",
          "35: ;'  module unit-test';",
          "",
          "[Added Lines]",
          "32:     if (!Interp.conf('testMode'))",
          "35: ;'  module test';",
          "",
          "---------------"
        ],
        "js-demos/warndemo.jsi||js-demos/warndemo.jsi": [
          "File: js-demos/warndemo.jsi -> js-demos/warndemo.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: function warndemoA() {",
          "10: }",
          "",
          "[Removed Lines]",
          "1: #!/usr/local/bin/jsish --I testMode=1 %s",
          "7: Interp.conf({logOpts:{ftail:true}});",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "5: Interp.conf({noError:true, logOpts:{ftail:true}});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: =!EXPECTSTART!=",
          "31: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "19: warndemo2.jsi:4: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)    (at or near \"warndemo2\")",
          "21: warndemo2.jsi:5: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)    (at or near \"warndemo2\")",
          "23: warndemo2.jsi:6: warn: got 3 args, expected 0, calling function warndemoA()    (at or near \"warndemo2\")",
          "25: warndemo2.jsi:7: warn: got 0 args, expected 1, calling function warndemoB(n:number)    (at or near \"warndemo2\")",
          "27: warndemo2.jsi:8: warn: got 3 args, expected 1, calling function warndemoB(n:number)    (at or near \"warndemo2\")",
          "29: warndemo2.jsi:9: error: type mismatch for argument arg 1 'warndemoB': expected \"number\" but got \"string\", in call to 'warndemoB' declared at warndemo.jsi:12.2    (at or near \"warndemo2\")",
          "",
          "[Added Lines]",
          "17: warndemo2.jsi:6: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "18: warndemo2.jsi:7: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "19: warndemo2.jsi:9: warn: got 0 args, expected 1, calling function warndemoB(n:number)",
          "20: warndemo2.jsi:10: warn: got 3 args, expected 1, calling function warndemoB(n:number)",
          "",
          "---------------"
        ],
        "lib/Testing.jsi||lib/Testing.jsi": [
          "File: lib/Testing.jsi -> lib/Testing.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:                 res = dres.trim();",
          "168:                 puts(res);",
          "169:             } else if (self.silent)",
          "171:             else",
          "172:                 puts('\\n'+res);",
          "173:             return 0;",
          "",
          "[Removed Lines]",
          "170:                 puts(res.trim());",
          "",
          "[Added Lines]",
          "170:                 puts(res?res.trim():res);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:     Jsi_Key_Type keyType; // Read-only",
          "746:     Jsi_Interp *interp;",
          "747:     Jsi_Wide flags;",
          "749:     void *user, *user2;",
          "750:     Jsi_MapFmtKeyProc *fmtKeyProc;",
          "751:     Jsi_RBCompareProc *compareTreeProc;",
          "",
          "[Removed Lines]",
          "748:     int refCnt;           // Shared map.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3819:     func->d.obj->d.fobj->func->parentName = parentName;",
          "3820:     func->d.obj->d.fobj->func->pkg = pkg;",
          "3821:     func->d.obj->d.fobj->func->parentSpec = cSpec;",
          "3823:         jsi_CommandArgCheck(interp, cmdSpec, f, parentName);",
          "3825:     f->retType = cmdSpec->retType;",
          "",
          "[Removed Lines]",
          "3822:     if (cmdSpec->argStr && interp->typeCheck.all)",
          "",
          "[Added Lines]",
          "3822:     if (cmdSpec->argStr && !interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4897:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Like System.puts, but goes to stderr and includes file:line.\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4898:     { \"logp\",   consoleLogPCmd,     1, -1, \"val, ...\", .help=\"Same as console.log, but first arg is string prefix and if second is a boolean it controls output\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4899:     { \"printf\", consolePrintfCmd,   1, -1, \"format:string, ...\", .help=\"Same as System.printf but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4901:     { \"warn\",   consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as log\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4902:     { NULL, 0,0,0,0,  .help=\"Console input and output to stderr\" }",
          "4903: };",
          "",
          "[Removed Lines]",
          "4900:     { \"puts\",   consolePutsCmd,     1, -1, \"val, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Added Lines]",
          "4900:     { \"puts\",   consolePutsCmd,     1, -1, \"val:any, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5050:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5051:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "5053:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "5054:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "5055:     { \"runModule\",  SysModuleRunCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain invokes function with same name as file. With no args will invoke provide\", .retType=(uint)JSI_TT_ANY, .flags=0},",
          "",
          "[Removed Lines]",
          "5052:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Added Lines]",
          "5052:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: {",
          "152:     Jsi_Value *v;",
          "153:     if (dst->vt != JSI_VT_VARIABLE) {",
          "155:             return Jsi_LogError(\"operand not a left value\");",
          "156:     } else {",
          "157:         v = dst->d.lval;",
          "158:         SIGASSERT(v, VALUE);",
          "160:         if (strict && lop == OP_PUSHFUN && interp->curIp[-1].local)",
          "161:             dst->f.bits.local = 1;",
          "162:         if (strict && dst->f.bits.local==0) {",
          "",
          "[Removed Lines]",
          "154:         if (interp->typeCheck.strict)",
          "159:         int strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "154:         if (!interp->noCheck)",
          "159:         int strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:             return JSI_OK;",
          "173:         bool ro = v->f.bits.readonly;",
          "174:         if (ro && v->vt != JSI_VT_UNDEF) {",
          "176:                 return Jsi_LogError(\"assign to readonly variable\");",
          "177:             return JSI_OK;",
          "178:         }",
          "",
          "[Removed Lines]",
          "175:             if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "175:             if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240: static Jsi_RC jsiLogicLess(Jsi_Interp* interp, int i1, int i2) {",
          "241:     Jsi_Value *v, *v1 = _jsi_STACK[interp->framePtr->Sp-i1], *v2 = _jsi_STACK[interp->framePtr->Sp-i2], *res = _jsi_TOQ;",
          "242:     int val = 0, l1 = 0, l2 = 0;",
          "244:     Jsi_RC rc = JSI_OK;",
          "245:     rc = _jsi_StrictUChk2(v1, v2);",
          "246:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "243:     bool strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "243:     bool strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1094:     jsi_TryList  *trylist = NULL;",
          "1095:     jsi_Frame *fp = interp->framePtr;",
          "1096:     Jsi_HashEntry *hPtrGet = NULL;",
          "1098:     const char *curFile = NULL, *throwStr;",
          "1100:     if (currentScope->vt != JSI_VT_OBJECT) {",
          "",
          "[Removed Lines]",
          "1097:     bool strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "1097:     bool strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1252:                         throwStr = \"fcall\";",
          "1253:                         rc = JSI_ERROR;",
          "1254:                 }",
          "1257:                 break;",
          "1258:             }",
          "",
          "[Removed Lines]",
          "1255:                 strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "1255:                 strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1690:                     t->d.num -= inc;",
          "1691:                 }",
          "1692:                 if (hPtrGet) {",
          "1695:                     hPtrGet = NULL;",
          "1696:                 }",
          "1697:                 break;",
          "",
          "[Removed Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, _jsi_TOQ, 0);",
          "",
          "[Added Lines]",
          "1694:                     Jsi_Value *v2 = (fp->Sp>1?_jsi_TOQ:_jsi_TOP);",
          "1695:                     jsi_SetterCall(interp, hPtrGet, v, v2, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2379:                     goto bail;",
          "2380:                 }",
          "2381:             }",
          "2383:             if (cp && !Jsi_Strcmp(cp, \".jsi\") && interp->isMain) {",
          "2384:                 interp->typeCheck.parse = interp->typeCheck.run = interp->typeCheck.all = 1;",
          "2387:             bool isNew;",
          "2388:             Jsi_HashEntry *hPtr;",
          "2389:             hPtr = Jsi_HashEntryNew(interp->fileTbl, fname, &isNew);",
          "",
          "[Removed Lines]",
          "2382:             cp = Jsi_Strrchr(fname, '.');",
          "2385:                 interp->typeCheck.strict = 1;",
          "2386:             }",
          "",
          "[Added Lines]",
          "2386:                 interp->noCheck = 0;",
          "",
          "---------------"
        ],
        "src/jsiFormat.c||src/jsiFormat.c": [
          "File: src/jsiFormat.c -> src/jsiFormat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:             goto doprec;",
          "279:         case 's':",
          "280:             v = Jsi_ValueArrayIndex(interp, args, argIndex);",
          "282:                 msg = \"expected string argument\";",
          "283:                 goto error;",
          "284:             } else",
          "",
          "[Removed Lines]",
          "281:             if (interp->typeCheck.strict && !Jsi_ValueIsString(interp, v)) {",
          "",
          "[Added Lines]",
          "281:             if (!interp->noCheck && !Jsi_ValueIsString(interp, v)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:                 p += sprintf(p, \".%ld\", precision);",
          "348:             }",
          "349:             v = Jsi_ValueArrayIndex(interp, args, argIndex);",
          "351:                 msg = \"expected number argument\";",
          "352:                 goto error;",
          "353:             }",
          "",
          "[Removed Lines]",
          "350:             if (interp->typeCheck.strict && !Jsi_ValueIsNumber(interp, v)) {",
          "",
          "[Added Lines]",
          "350:             if (!interp->noCheck && !Jsi_ValueIsNumber(interp, v)) {",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
          "200:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
          "201:     Jsi_RC rc = JSI_OK;",
          "203:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "204:     idxBuf[0] = 0;",
          "206:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "207:         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "202:     if (interp->typeCheck.none) return JSI_OK;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
          "",
          "[Added Lines]",
          "201:     if (interp->noCheck) return JSI_OK;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&(JSI_TT_UNDEFINED|JSI_TT_ANY))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:         return JSI_OK;",
          "224:         return JSI_OK;",
          "225:     if ((typ&JSI_TT_ANY)) return JSI_OK;",
          "226:     if (index == 0 && arg->vt == JSI_VT_UNDEF) {",
          "",
          "[Removed Lines]",
          "218:     if (interp->typeCheck.all==0) {",
          "219:         if (func ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))",
          "220:             return JSI_OK;",
          "221:     }",
          "222:     if (index == 0 && func && func->type == FC_BUILDIN &&",
          "223:         interp->typeCheck.all == 0) // Normally do not check return types for builtins.",
          "",
          "[Added Lines]",
          "218:     if (index == 0 && func && func->type == FC_BUILDIN && !interp->typeCheck.builtins) // BUILTIN returns",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:         const char *vtyp = jsi_ValueTypeName(interp, arg);",
          "251:         if (index>0)",
          "252:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "254:             rc = JSI_ERROR;",
          "255:         jsi_TypeMismatch(interp);",
          "256:         Jsi_DString fStr = {};",
          "",
          "[Removed Lines]",
          "253:         if (interp->typeCheck.error)",
          "",
          "[Added Lines]",
          "248:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263: }",
          "265: Jsi_RC jsi_StaticArgTypeCheck(Jsi_Interp *interp, int atyp, const char *p1, const char *p2, int index, Jsi_Func *func, jsi_Pline *line) {",
          "266:     Assert(index>0);",
          "267:     Jsi_RC rc;",
          "270:     int ai = index-1+func->callflags.bits.addargs;",
          "271:     if (func->argnames == NULL || ai>=func->argnames->count || ai<0)",
          "272:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "268:     if (interp->typeCheck.parse==0 && interp->typeCheck.all==0)",
          "269:         return JSI_OK;",
          "",
          "[Added Lines]",
          "261:     if (interp->noCheck) return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:     if (typ <= 0)",
          "275:         return JSI_OK;",
          "276:     if (index == 0 && func && func->type == FC_BUILDIN &&",
          "278:         return JSI_OK;",
          "279:     if ((typ&JSI_TT_ANY)) return JSI_OK;",
          "280:     if (index == 0 && atyp == JSI_VT_UNDEF) {",
          "",
          "[Removed Lines]",
          "277:         interp->typeCheck.all==0) // Normally do not check return types for builtins.",
          "",
          "[Added Lines]",
          "271:         interp->typeCheck.builtins==0) // Normally do not check return types for builtins.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "312:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "313:         if (line)",
          "314:             interp->parseLine = line;",
          "316:             rc = JSI_ERROR;",
          "317:         jsi_TypeMismatch(interp);",
          "318:         Jsi_DString fStr = {};",
          "",
          "[Removed Lines]",
          "315:         if (interp->typeCheck.error)",
          "",
          "[Added Lines]",
          "309:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "340: Jsi_RC jsi_RunFuncCallCheck(Jsi_Interp *interp, Jsi_Func *func, int argc, const char *name, jsi_Pline *line, Jsi_OpCodes *argCodes, bool isParse)",
          "341: {",
          "342:     Jsi_RC rc = JSI_OK;",
          "349:     Jsi_CmdSpec *spec = func->cmdSpec;",
          "350:     Jsi_ScopeStrs *ss = func->argnames;",
          "351:     if (ss==NULL && spec == NULL)",
          "",
          "[Removed Lines]",
          "343:     if (interp->typeCheck.none) return JSI_OK;",
          "344:     if (interp->typeCheck.all==0) {",
          "345:         if (!argCodes ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))",
          "346:             return JSI_OK;",
          "347:     }",
          "",
          "[Added Lines]",
          "336:     if (interp->noCheck) return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "361:         minArgs = (ss->firstDef>0 ? ss->firstDef-1 : ss->count);",
          "362:         maxArgs = ss->count;",
          "363:         mis = (argc != ss->count);",
          "365:             return JSI_OK;",
          "366:     }",
          "367:     if (varargs) {",
          "",
          "[Removed Lines]",
          "364:         if (func->retType == 0 && ss && ss->typeCnt == 0 && interp->typeCheck.all==0)",
          "",
          "[Added Lines]",
          "353:         if (func->retType == 0 && ss && ss->typeCnt == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "379:             snprintf(nbuf, sizeof(nbuf), \"%d\", maxArgs);",
          "380:         if (line)",
          "381:             interp->parseLine = line;",
          "383:             rc = JSI_ERROR;",
          "384:         Jsi_DString dStr = {};",
          "385:         Jsi_FuncObjToString(interp, func, &dStr, 2);",
          "390:         jsi_TypeMismatch(interp);",
          "391:         Jsi_DSFree(&dStr);",
          "392:         if (line)",
          "",
          "[Removed Lines]",
          "382:         if (interp->typeCheck.error)",
          "386:         if (isParse)",
          "387:             Jsi_LogWarn(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "388:         else",
          "389:             rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "",
          "[Added Lines]",
          "371:         if (!interp->noCheck)",
          "375:         rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "435: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "436: {",
          "437:     Jsi_Interp *interp = p->interp;",
          "440:         return;",
          "441:     if (name && isdigit(name[0]))",
          "442:         return;",
          "",
          "[Removed Lines]",
          "438:     if (interp->typeCheck.none) return;",
          "439:     if (name == NULL || !(interp->typeCheck.funcsig|interp->typeCheck.all|interp->typeCheck.parse))",
          "",
          "[Added Lines]",
          "424:     if (interp->noCheck) return;",
          "425:     if (name == NULL || interp->typeCheck.funcdecl)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "451:     }",
          "452:     if (f)",
          "453:         jsi_RunFuncCallCheck(interp, f, argc, name, line, argCodes, 1);",
          "455:         if (line)",
          "456:             interp->parseLine = line;",
          "457:         Jsi_LogWarn(\"called function '%s' with no previous definition\", name);",
          "",
          "[Removed Lines]",
          "454:     else if (interp->typeCheck.funcsig && (namePre==NULL || jsi_BuiltinCmd(interp, namePre))) {",
          "",
          "[Added Lines]",
          "440:     else if (interp->typeCheck.funcdecl && (namePre==NULL || jsi_BuiltinCmd(interp, namePre))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "459:         if (line)",
          "460:             interp->parseLine = NULL;",
          "461:     }",
          "462: }",
          "464: int jsi_FuncSigsMatch(jsi_Pstate *pstate, Jsi_Func *f1, Jsi_Func *f2)",
          "465: {",
          "467:     if (f1->retType==0 && f1->argnames->typeCnt==0 && f1->argnames->varargs==0 &&",
          "470:         return 1;",
          "471:     if (f1->retType != f2->retType)",
          "472:         return 0;",
          "",
          "[Removed Lines]",
          "468:         f2->retType==0 && f2->argnames->typeCnt==0 && f2->argnames->varargs==0 &&",
          "469:         pstate->interp->typeCheck.all==0)",
          "",
          "[Added Lines]",
          "456:         f2->retType==0 && f2->argnames->typeCnt==0 && f2->argnames->varargs==0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "521:         Jsi_LogWarn(\"invalid use of 'undefined' in a return type: %s\", name?name:\"\");",
          "523:     pstate->argType = 0;",
          "525:         int i, j;",
          "526:         for (i=0; i<args->count; i++) {",
          "527:             for (j=0; j<args->count; j++) {",
          "",
          "[Removed Lines]",
          "524:     if (localvar && args && (interp->typeCheck.strict)) {",
          "",
          "[Added Lines]",
          "511:     if (localvar && args && (!interp->noCheck)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "557:                 pstate->err_count++;",
          "558:         }",
          "559:         f->name = Jsi_KeyAdd(interp, name);",
          "562:             if (f->retType && !(f->retType&JSI_TT_VOID) && ops && ops->code_len && ops->codes[ops->code_len-1].op != OP_RET) {",
          "563:                 if (line)",
          "",
          "[Removed Lines]",
          "560:         if ((interp->typeCheck.run|interp->typeCheck.parse|interp->typeCheck.all|interp->typeCheck.funcsig)) {",
          "",
          "[Added Lines]",
          "547:         if (!interp->noCheck) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "570:             }",
          "573:                 Jsi_Func *fo = (Jsi_Func*)Jsi_HashGet(interp->staticFuncsTbl, (void*)name, 0);",
          "577:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "578:                         if (line)",
          "579:                             interp->parseLine = line;",
          "",
          "[Removed Lines]",
          "572:             if (interp->staticFuncsTbl) {",
          "576:                 if (interp->typeCheck.funcsig && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "",
          "[Added Lines]",
          "559:             if (interp->typeCheck.funcdecl) {",
          "563:                 if (interp->typeCheck.funcdecl && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "805: bool jsi_FuncArgCheck(Jsi_Interp *interp, Jsi_Func *f, const char *argStr)",
          "806: {",
          "807:     int i, atyp, ftyp, rc = 0, acnt;",
          "808:     Jsi_DString dStr;",
          "809:     Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:     if (interp->noCheck) return 1;",
          "",
          "---------------"
        ],
        "src/jsiHash.c||src/jsiHash.c": [
          "File: src/jsiHash.c -> src/jsiHash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:     tablePtr->opts.mapType = (Jsi_Map_Type)JSI_MAP_HASH;",
          "408:     tablePtr->typ = JSI_MAP_HASH;",
          "409:     tablePtr->opts.interp = interp;",
          "411:     tablePtr->buckets = tablePtr->staticBuckets;",
          "412: #if !(JSI_SMALL_HASH_TABLE && !(JSI_SMALL_HASH_TABLE & (JSI_SMALL_HASH_TABLE - 1)))",
          "413: #error \"small hash must be a power of two\"",
          "",
          "[Removed Lines]",
          "410:     tablePtr->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523: int",
          "524: Jsi_HashDelete(Jsi_Hash *tablePtr)",
          "525: {",
          "529:     Jsi_HashClear(tablePtr);",
          "530:     Jsi_Free(tablePtr);",
          "531:     return 0;",
          "",
          "[Removed Lines]",
          "526:     SIGASSERT(tablePtr, HASH);",
          "527:     if (--tablePtr->opts.refCnt>0) // Shared hash check.",
          "528:         return tablePtr->opts.refCnt;",
          "",
          "[Added Lines]",
          "525:     SIGASSERTRET(tablePtr, HASH, 0);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA, JSI_SIG_ACCESSOR",
          "260: } jsi_Sig;",
          "263: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->noError?JSI_LOG_WARN:(interp->inParse?JSI_LOG_PARSE:JSI_LOG_ERROR)), fmt, ##__VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960: } jsi_numUnion;",
          "962: typedef struct {",
          "969:     uint noundef:1;",
          "970:     uint nowith:1;",
          "973: } Jsi_TypeCheck;",
          "975: typedef enum {",
          "",
          "[Removed Lines]",
          "963:     uint none:1;",
          "964:     uint parse:1;",
          "965:     uint run:1;",
          "966:     uint all:1;",
          "967:     uint error:1;",
          "968:     uint strict:1;",
          "971:     uint funcsig:1;",
          "972:     uint unused:24;",
          "",
          "[Added Lines]",
          "963:     uint noreturn:1;",
          "966:     uint builtins:1;",
          "967:     uint funcdecl:1;",
          "968:     uint unused:27;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1154:     Jsi_Value *stdinStr;",
          "1155:     Jsi_Value *stdoutStr;",
          "1156:     Jsi_TypeCheck typeCheck;",
          "1157:     jsi_LogOptions logOpts;",
          "1158:     uint log;",
          "1159:     int typeWarnMax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1152:     bool noError;",
          "1153:     bool noCheck;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: };",
          "75: static const char *jsi_SafeModeStrs[] = { \"none\", \"read\", \"write\", \"writeRead\", \"lockdown\", NULL };",
          "77: const char *jsi_callTraceStrs[] = { \"funcs\", \"cmds\", \"new\", \"return\", \"args\", \"notrunc\", \"noparent\", \"full\", \"before\", NULL};",
          "78: const char *jsi_AssertModeStrs[] = { \"throw\", \"log\", \"puts\", NULL};",
          "",
          "[Removed Lines]",
          "76: static const char *jsi_TypeChkStrs[] = { \"none\", \"parse\", \"run\", \"all\", \"error\", \"strict\", \"noundef\", \"nowith\", \"funcsig\", NULL };",
          "",
          "[Added Lines]",
          "76: static const char *jsi_TypeChkStrs[] = { \"noreturn\", \"noundef\", \"nowith\", \"builtins\", \"funcdecl\", NULL };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     JSI_OPT(INT,   Jsi_Interp, memLeakCnt,  .help=\"Leak memory count due to object added to self\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "109:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "110:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noCheck,     .help=\"Disable type checking\", .flags=JSI_OPT_LOCKSAFE ),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noError,     .help=\"Type checks failures are warning\", .flags=JSI_OPT_LOCKSAFE ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1111:     interp->logOpts.file = 1;",
          "1112:     interp->logOpts.func = 1;",
          "1113:     interp->logOpts.before = 1;",
          "1115:     interp->log = Jsi_LogDefVal;",
          "1116:     int argc = interp->opts.argc;",
          "1117:     char **argv = interp->opts.argv;",
          "1118:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1114:     interp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1408:     interp->codesTbl = (interp == jsiIntData.mainInterp ? Jsi_HashNew(interp, JSI_KEYS_ONEWORD, NULL) : jsiIntData.mainInterp->codesTbl);",
          "1409: #endif",
          "1410:     interp->GetterValue = Jsi_ValueNew1(interp);",
          "1413:     if (!jsiIntData.isInit) {",
          "1414:         jsiIntData.isInit = 1;",
          "1415:         jsi_InitValue(interp, 0);",
          "",
          "[Removed Lines]",
          "1411:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
          "1412:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Added Lines]",
          "1413:     interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1666:         }",
          "1667:     }",
          "1668: }",
          "1670: void jsi_DebugDumpValues(Jsi_Interp *interp)",
          "1671: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670: #define Jsi_DecrRefCountIF(i,s) if (s) Jsi_DecrRefCount(i,s)",
          "1671: #define Jsi_HashDeleteIF(s) if (s) Jsi_HashDelete(s)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1773:                 fprintf(stderr, \"unfreed opcodes: %d\\n\", vp->id);",
          "1774:             }",
          "1775:     }",
          "1779:     bool isMainInt = (interp == jsiIntData.mainInterp);",
          "1780:     if (isMainInt && vdLev>3)",
          "1781:         _exit(1); // Avoid sanitize output.",
          "",
          "[Removed Lines]",
          "1776:     Jsi_HashDelete(interp->dbPtr->valueDebugTbl);",
          "1777:     Jsi_HashDelete(interp->dbPtr->objDebugTbl);",
          "1778:     Jsi_HashDelete(interp->codesTbl);",
          "",
          "[Added Lines]",
          "1779:     Jsi_HashDeleteIF(interp->dbPtr->valueDebugTbl);",
          "1780:     Jsi_HashDeleteIF(interp->dbPtr->objDebugTbl);",
          "1781:     Jsi_HashDeleteIF(interp->codesTbl);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1804:         Jsi_Free(interp->Stack);",
          "1805:         Jsi_Free(interp->Obj_this);",
          "1806:     }",
          "1821:     if (interp->profileCnt) { // TODO: resolve some values from dbPtr, others not.",
          "1822:         double endTime = jsi_GetTimestamp();",
          "1823:         double coverage = (int)(100.0*interp->coverHit/interp->coverAll);",
          "",
          "[Removed Lines]",
          "1808:     if (interp->argv0)",
          "1809:         Jsi_DecrRefCount(interp, interp->argv0);",
          "1810:     if (interp->console)",
          "1811:         Jsi_DecrRefCount(interp, interp->console);",
          "1812:     if (interp->lastSubscriptFail)",
          "1813:         Jsi_DecrRefCount(interp, interp->lastSubscriptFail);",
          "1814:     if (interp->nullFuncRet)",
          "1815:         Jsi_DecrRefCount(interp, interp->nullFuncRet);",
          "1816:     Jsi_HashDelete(interp->codeTbl);",
          "1817:     Jsi_MapDelete(interp->cmdSpecTbl);",
          "1818:     Jsi_HashDelete(interp->fileTbl);",
          "1819:     Jsi_HashDelete(interp->funcObjTbl);",
          "1820:     Jsi_HashDelete(interp->funcsTbl);",
          "",
          "[Added Lines]",
          "1810:     Jsi_DecrRefCountIF(interp, interp->argv0);",
          "1811:     Jsi_DecrRefCountIF(interp, interp->console);",
          "1812:     Jsi_DecrRefCountIF(interp, interp->lastSubscriptFail);",
          "1813:     Jsi_DecrRefCountIF(interp, interp->nullFuncRet);",
          "1814:     Jsi_HashDeleteIF(interp->codeTbl);",
          "1815:     if (interp->cmdSpecTbl) Jsi_MapDelete(interp->cmdSpecTbl);",
          "1816:     Jsi_HashDeleteIF(interp->funcObjTbl);",
          "1817:     Jsi_HashDeleteIF(interp->funcsTbl);",
          "1818:     Jsi_HashDeleteIF(interp->fileTbl);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1831:         Jsi_DSFree(&dStr);",
          "1832:     }",
          "1833:     if (isMainInt)",
          "1836:     if (interp->subthread)",
          "1837:         jsiIntData.mainInterp->threadCnt--;",
          "1838:     if (interp->subthread && interp->strKeyTbl == jsiIntData.mainInterp->strKeyTbl)",
          "",
          "[Removed Lines]",
          "1834:         Jsi_HashDelete(interp->lexkeyTbl);",
          "1835:     Jsi_HashDelete(interp->protoTbl);",
          "",
          "[Added Lines]",
          "1832:         Jsi_HashDeleteIF(interp->lexkeyTbl);",
          "1833:     Jsi_HashDeleteIF(interp->protoTbl);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1844:         jsiIntData.mainInterp->strKeyTbl->v.hash->opts.lockHashProc = NULL;",
          "1845: #endif",
          "1857:     if (interp->preserveTbl->numEntries!=0)",
          "1858:         Jsi_LogBug(\"Preserves unbalanced\");",
          "1860:     if (interp->curDir)",
          "1861:         Jsi_Free(interp->curDir);",
          "1862:     if (isMainInt) {",
          "",
          "[Removed Lines]",
          "1847:     Jsi_HashDelete(interp->thisTbl);",
          "1848:     Jsi_HashDelete(interp->varTbl);",
          "1849:     Jsi_HashDelete(interp->genValueTbl);",
          "1850:     Jsi_HashDelete(interp->genObjTbl);",
          "1851:     Jsi_HashDelete(interp->aliasHash);",
          "1852:     Jsi_DecrRefCount(interp, interp->GetterValue);",
          "1853:     if (interp->staticFuncsTbl)",
          "1854:         Jsi_HashDelete(interp->staticFuncsTbl);",
          "1855:     if (interp->breakpointHash)",
          "1856:         Jsi_HashDelete(interp->breakpointHash);",
          "1859:     Jsi_HashDelete(interp->preserveTbl);",
          "",
          "[Added Lines]",
          "1845:     Jsi_HashDeleteIF(interp->thisTbl);",
          "1846:     Jsi_HashDeleteIF(interp->varTbl);",
          "1847:     Jsi_HashDeleteIF(interp->genValueTbl);",
          "1848:     Jsi_HashDeleteIF(interp->genObjTbl);",
          "1849:     Jsi_HashDeleteIF(interp->aliasHash);",
          "1850:     Jsi_DecrRefCountIF(interp, interp->GetterValue);",
          "1851:     Jsi_HashDeleteIF(interp->staticFuncsTbl);",
          "1852:     Jsi_HashDeleteIF(interp->breakpointHash);",
          "1855:     Jsi_HashDeleteIF(interp->preserveTbl);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1887:         Jsi_MutexDelete(interp, interp->QMutex);",
          "1888:         Jsi_DSFree(&interp->interpEvalQ);",
          "1889:     }",
          "1894:     if (interp->Function_prototype_prototype) {",
          "1895:         if (interp->Function_prototype_prototype->refCnt>1)",
          "1901:     }",
          "1903:     Jsi_OptionsFree(interp, InterpOptions, interp, 0);",
          "1914:     for (i=0; interp->cleanObjs[i]; i++) {",
          "1915:         interp->cleanObjs[i]->tree->opts.freeHashProc = 0;",
          "1916:         Jsi_ObjFree(interp, interp->cleanObjs[i]);",
          "1917:     }",
          "1919:     for (i = 0; i <= interp->cur_scope; i++)",
          "1920:         jsi_ScopeStrsFree(interp, interp->scopes[i]);",
          "1921: #if JSI__ZVFS==1",
          "1922:     Jsi_InitZvfs(interp, mainFlag);",
          "1923: #endif",
          "1929:     interp->cleanup = 1;",
          "1931: #ifdef JSI_MEM_DEBUG",
          "",
          "[Removed Lines]",
          "1890:     if (interp->nullFuncArg)",
          "1891:         Jsi_DecrRefCount(interp, interp->nullFuncArg);",
          "1892:     if (interp->NullValue)",
          "1893:         Jsi_DecrRefCount(interp, interp->NullValue);",
          "1896:             Jsi_DecrRefCount(interp, interp->Function_prototype_prototype);",
          "1897:         Jsi_DecrRefCount(interp, interp->Function_prototype_prototype);",
          "1898:     }",
          "1899:     if (interp->Object_prototype) {",
          "1900:         Jsi_DecrRefCount(interp, interp->Object_prototype);",
          "1902:     Jsi_HashDelete(interp->regexpTbl);",
          "1904:     Jsi_HashDelete(interp->userdataTbl);",
          "1905:     Jsi_HashDelete(interp->eventTbl);",
          "1906:     if (interp->inopts)",
          "1907:         Jsi_DecrRefCount(interp, interp->inopts);",
          "1908:     if (interp->safeWriteDirs)",
          "1909:         Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1910:     if (interp->safeReadDirs)",
          "1911:         Jsi_DecrRefCount(interp, interp->safeReadDirs);",
          "1912:     if (interp->pkgDirs)",
          "1913:         Jsi_DecrRefCount(interp, interp->pkgDirs);",
          "1918:     Jsi_HashDelete(interp->bindTbl);",
          "1925:         Jsi_HashDelete(interp->loadTbl);",
          "1926:     if (interp->packageHash)",
          "1927:         Jsi_HashDelete(interp->packageHash);",
          "1928:     Jsi_HashDelete(interp->assocTbl);",
          "",
          "[Added Lines]",
          "1886:     Jsi_DecrRefCountIF(interp, interp->nullFuncArg);",
          "1887:     Jsi_DecrRefCountIF(interp, interp->NullValue);",
          "1890:             Jsi_DecrRefCountIF(interp, interp->Function_prototype_prototype);",
          "1891:         Jsi_DecrRefCountIF(interp, interp->Function_prototype_prototype);",
          "1893:     Jsi_DecrRefCountIF(interp, interp->Object_prototype);",
          "1894:     Jsi_HashDeleteIF(interp->regexpTbl);",
          "1896:     Jsi_HashDeleteIF(interp->userdataTbl);",
          "1897:     Jsi_HashDeleteIF(interp->eventTbl);",
          "1898:     Jsi_DecrRefCountIF(interp, interp->inopts);",
          "1899:     Jsi_DecrRefCountIF(interp, interp->safeWriteDirs);",
          "1900:     Jsi_DecrRefCountIF(interp, interp->safeReadDirs);",
          "1901:     Jsi_DecrRefCountIF(interp, interp->pkgDirs);",
          "1906:     Jsi_HashDeleteIF(interp->bindTbl);",
          "1913:     Jsi_HashDeleteIF(interp->loadTbl);",
          "1914:     Jsi_HashDeleteIF(interp->packageHash);",
          "1915:     Jsi_HashDeleteIF(interp->assocTbl);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2104:     }",
          "2105:     if (interp->subOpts.mutexUnlock) Jsi_MutexUnlock(interp, interp->Mutex);",
          "2106:     if (!isthrd) {",
          "2108:         if (interp->isSafe)",
          "2110:         sinterp->level++;",
          "2111:         if (interp->framePtr->tryDepth)",
          "2112:             sinterp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "2107:         int ostrict = sinterp->typeCheck.strict;",
          "2109:             sinterp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "2094:         int onoerror = sinterp->noCheck;",
          "2096:             sinterp->noCheck = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2126:         else {",
          "2127:             rc = (jsi_evalStrFile(sinterp, NULL, cp, 0, lev) == 0 ? JSI_OK : JSI_ERROR);",
          "2128:         }",
          "2130:         if (interp->framePtr->tryDepth) {",
          "2131:             sinterp->framePtr->tryDepth--;",
          "2132:             if (rc != JSI_OK && interp != sinterp) {",
          "",
          "[Removed Lines]",
          "2129:         sinterp->typeCheck.strict = ostrict;",
          "",
          "[Added Lines]",
          "2116:         sinterp->noCheck = onoerror;",
          "",
          "---------------"
        ],
        "src/jsiOptions.c||src/jsiOptions.c": [
          "File: src/jsiOptions.c -> src/jsiOptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:         switch (specPtr->id) {",
          "350: #define _JSI_OPTSETNTYP(typ, n, ptr) if (!argValue) *(typ*)ptr = 0; else { if (isIncr) n += *((typ *)ptr); \\",
          "351:             interp->cdataIncrVal = *((typ *)ptr) = (typ)(n); \\",
          "354:             case JSI_OPTION_NUMBER: _JSI_OPTSETNTYP(Jsi_Number, nv, ptr); break;",
          "355:             case JSI_OPTION_LDOUBLE: _JSI_OPTSETNTYP(ldouble, nv, ptr); break;",
          "",
          "[Removed Lines]",
          "352:             if (interp->typeCheck.strict && Jsi_NumberIsNaN((Jsi_Number)(*((typ *)ptr)))) return Jsi_LogError(\"not a number\"); }",
          "",
          "[Added Lines]",
          "352:             if (!interp->noCheck && Jsi_NumberIsNaN((Jsi_Number)(*((typ *)ptr)))) return Jsi_LogError(\"not a number\"); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:         _JSI_OPT_CHECKNULL(argValue);",
          "503:         if (argValue->vt != JSI_VT_OBJECT || argValue->d.obj->ot != JSI_OT_FUNCTION)",
          "504:             goto bail;",
          "509:         _JSI_OPT_ARGSET(argValue, ptr);",
          "510:         break;",
          "",
          "[Removed Lines]",
          "505:         if (specPtr->data && !interp->typeCheck.none && (interp->typeCheck.run|interp->typeCheck.all))",
          "506:             if (!jsi_FuncArgCheck(interp, argValue->d.obj->d.fobj->func, (char*)specPtr->data))",
          "507:                 return Jsi_LogError(\"failed setting func pointer for %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "505:         if (specPtr->data && !jsi_FuncArgCheck(interp, argValue->d.obj->d.fobj->func, (char*)specPtr->data))",
          "506:             return Jsi_LogError(\"failed setting func pointer for %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1808:         return Jsi_LogError(\"value not found in parent: %s\", s);",
          "1809:     if (!Jsi_ValueIsFunction(pinterp, val))",
          "1810:         return Jsi_LogError(\"expected a func value\");",
          "1812:         if (!jsi_FuncIsNoop(pinterp, val)",
          "1813:             && !jsi_FuncArgCheck(pinterp, val->d.obj->d.fobj->func, (char*)spec->data))",
          "1814:             return Jsi_LogError(\"failed setting func pointer for %s\", spec->name);",
          "",
          "[Removed Lines]",
          "1811:     if (spec->data && (interp->typeCheck.strict || pinterp->typeCheck.strict))",
          "",
          "[Added Lines]",
          "1810:     if (spec->data && (!interp->noCheck || !pinterp->noCheck))",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         func->argnames = jsi_ParseArgStr(interp, argStr);",
          "119:     argnames = func->argnames;",
          "120:     int argc = Jsi_ValueGetLength(interp, args);",
          "123:         nrc = JSI_ERROR;",
          "124:     if (!argnames)",
          "125:         return nrc;",
          "",
          "[Removed Lines]",
          "121:     if (alloc && (interp->typeCheck.all|interp->typeCheck.run) && jsi_RunFuncCallCheck(interp, func, argc, func->name, NULL, NULL, 0) != JSI_OK",
          "122:         && (interp->typeCheck.strict || interp->typeCheck.error))",
          "",
          "[Added Lines]",
          "121:     if (alloc && jsi_RunFuncCallCheck(interp, func, argc, func->name, NULL, NULL, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:                 dv = v = argnames->args[n].defValue;",
          "150:             if (v && rc == JSI_OK && i >= addargs) {",
          "151:                 int typ = argnames->args[n].type;",
          "154:             }",
          "155:             if (func->type == FC_BUILDIN)",
          "156:                 continue;",
          "",
          "[Removed Lines]",
          "152:                 if ((typ && interp->typeCheck.run) || interp->typeCheck.all)",
          "153:                     rc = jsi_ArgTypeCheck(interp, typ, v, \"for argument\", argkey, i+1, func, (dv!=NULL));",
          "",
          "[Added Lines]",
          "151:                 rc = jsi_ArgTypeCheck(interp, typ, v, \"for argument\", argkey, i+1, func, (dv!=NULL));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:         if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "263:             jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "265:             rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "266:         interp->callDepth--;",
          "267:     }",
          "",
          "[Removed Lines]",
          "264:         if (rc == JSI_OK && !as_cons && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "",
          "[Added Lines]",
          "262:         if (rc == JSI_OK && !as_cons && funcPtr->retType && !interp->typeCheck.noreturn)",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         if (atyp)",
          "113:             jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "114:     } else {",
          "117:     }",
          "118:     interp->parseLine = opl;",
          "119:     return a;",
          "",
          "[Removed Lines]",
          "115:         if (a->firstDef && (interp->typeCheck.run || interp->typeCheck.all) )",
          "116:             Jsi_LogWarn(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "[Added Lines]",
          "115:         if (a->firstDef && !interp->noCheck)",
          "116:             Jsi_LogType(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     for (i = 0; i < interp->scopes[interp->cur_scope]->count; ++i) {",
          "155:         if (Jsi_Strcmp(str, interp->scopes[interp->cur_scope]->args[i].name) == 0) {",
          "156:             Jsi_Interp *interp = ps->interp;",
          "158:                 interp->parseLine = line;",
          "159:                 Jsi_LogWarn(\"duplicate var: %s\", str);",
          "160:                 interp->parseLine = NULL;",
          "",
          "[Removed Lines]",
          "157:             if (interp && interp->typeCheck.strict) {",
          "",
          "[Added Lines]",
          "157:             if (interp && !interp->noCheck) {",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     treePtr->typ = (Jsi_Map_Type)JSI_MAP_TREE;",
          "452:     treePtr->root = NULL;",
          "453:     treePtr->opts.interp = interp;",
          "455:     treePtr->numEntries = 0;",
          "456:     treePtr->epoch = 0;",
          "457:     treePtr->opts.keyType = (Jsi_Key_Type)keyType;",
          "",
          "[Removed Lines]",
          "454:     treePtr->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "511: int Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "512: {",
          "513:     SIGASSERTV(treePtr, TREE);",
          "519:     treePtr->flags.destroyed = 1;",
          "520:     destroy_node(treePtr->opts.interp, treePtr->root);",
          "",
          "[Removed Lines]",
          "514:     if (--treePtr->opts.refCnt>0) // Shared tree check.",
          "515:         return treePtr->opts.refCnt;",
          "516:     if (treePtr->flags.destroyed)",
          "517:         return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     if (isHelp) mt = \"help\";",
          "204:     assert((JSI__LOGLAST+2) == (sizeof(jsi_LogCodes)/sizeof(jsi_LogCodes[0])));",
          "205:     if (!Jsi_Strchr(format,'\\n')) term = \"\\n\";",
          "207:         ss = (char*)Jsi_ValueToString(interp, interp->lastParseOpt, NULL);",
          "208:     if (isExt)",
          "209:         snprintf(pbuf, sizeof(pbuf), \"    (c-extn [%s])\", popts->cmdSpec->name);",
          "",
          "[Removed Lines]",
          "206:     if (interp->typeCheck.strict && interp->lastParseOpt)",
          "",
          "[Added Lines]",
          "206:     if (!interp->noCheck && interp->lastParseOpt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:                 lastCnt++;",
          "284:                 goto done;",
          "285:             } else if (lastMsg[0] && lastCnt>1 ) {",
          "287:             }",
          "288:             if (buf1[0] == 0 || (buf1[0] == '.' && buf1[1] == 0))",
          "289:                 goto done;",
          "",
          "[Removed Lines]",
          "286:                 fprintf(stderr, \"REPEAT: Last msg repeated %d times...\\\"\\n\" ,lastCnt);",
          "",
          "[Added Lines]",
          "286:                 fprintf(stderr, \"REPEAT: Last msg repeated %d times...\\\"\\n\" ,lastCnt-1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:     }",
          "316:     if ((code & jsi_fatalexit) && !interp->opts.no_exit)",
          "317:         jsi_DoExit(interp, 1);",
          "319: }",
          "321: const char* Jsi_KeyAdd(Jsi_Interp *interp, const char *str)",
          "",
          "[Removed Lines]",
          "318:     return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "",
          "[Added Lines]",
          "318:     return (code==JSI_LOG_ERROR||code==JSI_LOG_PARSE?JSI_ERROR:JSI_OK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1132: #if JSI__SIGNAL",
          "1133:   signal(SIGINT, jsi_InteractiveSignal);",
          "1134: #endif",
          "1137:     interp->isInteractive = 1;",
          "1138:     jsi_interactiveInterp = interp;",
          "1139:     interp->subOpts.istty = 1;",
          "",
          "[Removed Lines]",
          "1135:     interp->typeCheck.parse = interp->typeCheck.run = interp->typeCheck.all = 1;",
          "1136:     interp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1178:                  fprintf(stderr, \"abandoned input\");",
          "1179:             } else",
          "1180:                 Jsi_DSAppend(&dStr, buf, NULL);",
          "1182:         } else {",
          "1183:             done = 1;",
          "1184:         }",
          "",
          "[Removed Lines]",
          "1181:             free(buf);",
          "",
          "[Added Lines]",
          "1179:             Jsi_Free(buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1439:     list->opts.flags = flags;",
          "1440:     list->opts.freeHashProc = freeProc;",
          "1441:     list->opts.interp = interp;",
          "1443:     list->opts.mapType = JSI_MAP_LIST;",
          "1444:     list->opts.keyType = (Jsi_Key_Type)-1;",
          "1445:     return list;",
          "",
          "[Removed Lines]",
          "1442:     list->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1459: int Jsi_ListDelete(Jsi_List *list) {",
          "1460:     SIGASSERT(list, LIST);",
          "1463:     Jsi_ListClear(list);",
          "1465:     return 0;",
          "1466: }",
          "",
          "[Removed Lines]",
          "1461:     if (--list->opts.refCnt>0) // Shared hash check.",
          "1462:         return list->opts.refCnt;",
          "1464:     free(list);",
          "",
          "[Added Lines]",
          "1459:     Jsi_Free(list);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1650:     return r;",
          "1651: }",
          "1652: Jsi_MapEntry* Jsi_MapSet(Jsi_Map *mapPtr, const void *key, const void *value){",
          "1654:     Jsi_MapEntry* mptr = NULL;",
          "1655:     switch (mapPtr->typ) {",
          "1656:         case JSI_MAP_HASH: mptr = (Jsi_MapEntry*)Jsi_HashSet(mapPtr->v.hash, (void*)key, (void*)value); break;",
          "",
          "[Removed Lines]",
          "1653:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Added Lines]",
          "1648:     SIGASSERTRET(mapPtr, MAP,NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1665:     return mptr;",
          "1666: }",
          "1667: void* Jsi_MapGet(Jsi_Map *mapPtr, const void *key, int flags){",
          "1669:     switch (mapPtr->typ) {",
          "1670:         case JSI_MAP_HASH: return Jsi_HashGet(mapPtr->v.hash, (void*)key, flags);",
          "1671:         case JSI_MAP_TREE: return Jsi_TreeGet(mapPtr->v.tree, (void*)key, flags);",
          "",
          "[Removed Lines]",
          "1668:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Added Lines]",
          "1663:     SIGASSERTRET(mapPtr, MAP, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2646:     if (!value)",
          "2647:         return JSI_ERROR;",
          "2649:         jsi_ValueToOInt32(interp, value);",
          "2650:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2648:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2643:     if (interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2658: {",
          "2659:     if (!value)",
          "2660:         return JSI_ERROR;",
          "2662:         jsi_ValueToOInt32(interp, value);",
          "2663:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2661:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2656:     if (interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2672: {",
          "2673:     if (!value)",
          "2674:         return JSI_ERROR;",
          "2676:         Jsi_ValueToNumber(interp, value);",
          "2677:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2675:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2670:     if (interp->noCheck)",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: bool Jsi_IsShared(Jsi_Interp* interp, Jsi_Value *v)",
          "27: {",
          "29:     return (v->refCnt > 1);",
          "30: }",
          "32: int Jsi_IncrRefCount(Jsi_Interp* interp, Jsi_Value *v)",
          "33: {",
          "35:     assert(v->refCnt>=0);",
          "36:     jsi_DebugValue(v,\"Incr\", jsi_DebugValueCallIdx(), interp);",
          "37:     return ++(v->refCnt);",
          "38: }",
          "40: int Jsi_DecrRefCount(Jsi_Interp* interp, Jsi_Value *v) {",
          "42:     if (v->refCnt<=0) {",
          "43: #ifdef JSI_MEM_DEBUG",
          "44:         fprintf(stderr, \"Value decr with ref %d: VD.Idx=%d\\n\", v->refCnt, v->VD.Idx);",
          "",
          "[Removed Lines]",
          "28:     SIGASSERT(v,VALUE);",
          "34:     SIGASSERT(v,VALUE);",
          "41:     SIGASSERT(v,VALUE);",
          "",
          "[Added Lines]",
          "28:     SIGASSERTRET(v,VALUE,0);",
          "34:     SIGASSERTRET(v,VALUE,-1);",
          "41:     SIGASSERTRET(v,VALUE,0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:         }",
          "337:     }",
          "338:     if (target->vt != JSI_VT_OBJECT) {",
          "340:             Jsi_LogWarn(\"Target is not object: %d\", target->vt);",
          "341:         return NULL;",
          "342:     }",
          "",
          "[Removed Lines]",
          "339:         if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "339:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:     switch(v->vt) {",
          "700:         case JSI_VT_UNDEF:",
          "701:         case JSI_VT_NULL:",
          "703:                 rc = Jsi_LogError(\"converting a undefined/null value to object\");",
          "704:             o->d.num = 0;",
          "705:             o->ot = JSI_OT_NUMBER;",
          "",
          "[Removed Lines]",
          "702:             if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "702:             if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "992:     if (obj->getters) {",
          "993:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->getters, keyStr);",
          "994:         if (hPtr) {",
          "996:             if (rc == JSI_OK) {",
          "997:                 v = interp->GetterValue;",
          "998:                 v->f.bits.isgetter = 1;",
          "1001:                 return v;",
          "1002:             }",
          "",
          "[Removed Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, 0);",
          "999:                 if (obj->setters)",
          "1000:                     interp->hPtrGet = Jsi_HashEntryFind(obj->setters, keyStr);",
          "",
          "[Added Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, JSI_ACCESSOR_TOOBJECT);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1150:             io->isArrayList = 1;",
          "1151:             io->count = to->arrCnt;",
          "1152:         } else {",
          "1154:                 Jsi_LogWarn(\"non-array in 'for...of'\");",
          "1155:             Jsi_IterGetKeys(interp, target, io, 0);",
          "1156:         }",
          "",
          "[Removed Lines]",
          "1153:             if (isof &&interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "1151:             if (isof && !interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1371:     Jsi_Value *vcall = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "1372:     if (!vcall || !key)",
          "1373:         return Jsi_LogBug(\"bad getter\");",
          "1375:     Jsi_FuncObj *fobj = vcall->d.obj->d.fobj;",
          "1378:         vargs[i++] = Jsi_ValueNewStringDup(interp, key);",
          "1379:         Jsi_IncrRefCount(interp, vargs[0]);",
          "1380:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "",
          "[Removed Lines]",
          "1374:     Jsi_Value *vpargs = NULL, *vargs[2];",
          "1376:     int i = 0;",
          "1377:     if (!fobj->func->isGet) {",
          "",
          "[Added Lines]",
          "1372:     Jsi_Value *v, *vpargs = NULL, *vargs[2];",
          "1374:     int i = 0, isCext = !fobj->func->isGet;",
          "1375:     if (isCext) { // C-extension: add key name",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1386:         Jsi_DecrRefCount(interp, vargs[0]);",
          "1387:         Jsi_DecrRefCount(interp, vpargs);",
          "1388:     }",
          "1389:     return rc;",
          "1390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1387:     v = (*vres);",
          "1388:     Jsi_Obj *obj = _this->d.obj;",
          "1389:     if (rc == JSI_OK && flags&JSI_ACCESSOR_TOOBJECT) {",
          "1390:         if (obj->setters && v->vt != JSI_VT_OBJECT)",
          "1391:             interp->hPtrGet = Jsi_HashEntryFind(obj->setters, key);",
          "1394:             Jsi_ValueToObject(interp, v);",
          "1395:         else if (obj->setters && v->vt != JSI_VT_OBJECT)",
          "1397:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1446: {",
          "1447:     if (!target) return;",
          "1448:     if (target->vt != JSI_VT_OBJECT) {",
          "1450:             Jsi_LogWarn(\"operand is not a object\");",
          "1451:         return;",
          "1452:     }",
          "",
          "[Removed Lines]",
          "1449:         if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "1458:         if (!interp->noCheck)",
          "",
          "---------------"
        ],
        "tests/expr.jsi||tests/expr.jsi": [
          "File: tests/expr.jsi -> tests/expr.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: ;a.a += true;",
          "83: ;a.a += 'fock';",
          "86: ;-NaN;",
          "87: ;-Infinity;",
          "88: ;NaN + NaN;",
          "",
          "[Removed Lines]",
          "85: Interp.conf({typeCheck:{strict:false}});",
          "",
          "[Added Lines]",
          "85: Interp.conf({noCheck:true});",
          "",
          "---------------"
        ],
        "tests/strict.jsi||tests/strict.jsi": [
          "File: tests/strict.jsi -> tests/strict.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: Interp.conf({maxDumpStack:0});",
          "",
          "[Removed Lines]",
          "1: #!/usr/local/bin/jsish -u %s",
          "",
          "[Added Lines]",
          "1: #!/usr/local/bin/jsish",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: bar2() ==> e ==> function created global: \"j\"",
          "209: bar3() ==> e ==> function created global: \"k\"",
          "210: bar4() ==> e ==> function created global: \"l\"",
          "214: foo3() ==> e ==> got 0 args, expected 1, calling function foo3(n:string)",
          "215: foo3(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo3' declared at strict.jsi:78.2 <1>.",
          "216: foo4(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo4' declared at strict.jsi:91.2 <1>.",
          "",
          "[Removed Lines]",
          "211: foo1(1) ==> e ==> got 1 args, expected 0, calling function foo1()",
          "212: foo2() ==> e ==> got 0 args, expected 1, calling function foo2(n)",
          "213: foo2(1,2) ==> e ==> got 2 args, expected 1, calling function foo2(n)",
          "",
          "[Added Lines]",
          "211: foo1(1) ==> undefined",
          "212: foo2() ==> undefined",
          "213: foo2(1,2) ==> undefined",
          "",
          "---------------"
        ],
        "tests/syntax.jsi||tests/syntax.jsi": [
          "File: tests/syntax.jsi -> tests/syntax.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "4: function foo() {",
          "5:   var i = Info; // Prevents static type check detections.",
          "6:   i.cmds(1,2,3,4);",
          "",
          "[Removed Lines]",
          "3: Interp.conf({typeCheck:['error'], maxDumpStack:0});",
          "",
          "[Added Lines]",
          "3: ;Interp.conf({noError:true, maxDumpStack:0});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: =!EXPECTSTART!=",
          "17: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "16: foo() ==> e ==> got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "",
          "[Added Lines]",
          "16: Interp.conf({noError:true, maxDumpStack:0}) ==> undefined",
          "17: foo() ==> /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "18: /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: type mismatch for argument arg 1 'val': expected \"string|regexp\" but got \"number\", in call to 'cmds' declared at syntax.jsi:0.0 <1>.",
          "19: /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: type mismatch for argument arg 2 'options': expected \"object\" but got \"number\", in call to 'cmds' declared at syntax.jsi:0.0 <2>.",
          "20: e ==> extra args, expected \"cmds(val:string|regexp='*', options:object=void)\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a54d7da7a4643e2bc70caeac7cd81f966d28129",
      "candidate_info": {
        "commit_hash": "3a54d7da7a4643e2bc70caeac7cd81f966d28129",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/3a54d7da7a4643e2bc70caeac7cd81f966d28129",
        "files": [
          "Makefile",
          "lib/DebugUI/DebugUI.jsi",
          "lib/DebugUI/html/debugui.jsi",
          "lib/Wget.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiVfs.c",
          "src/jsiZvfs.c",
          "tests/info.jsi",
          "tests/utf.jsi",
          "tools/Make.jsi",
          "tools/mktoc.jsi",
          "tools/protos.jsi",
          "tools/structpp.jsi",
          "tools/testsys.sh",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.27\": add noEval to syntax check scripts\n\nFossilOrigin-Name: bede52013d8ee75a1843b98889d15d99bd3405198900edfead807a2d0d33c7d9",
        "before_after_code_files": [
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/DebugUI/html/debugui.jsi||lib/DebugUI/html/debugui.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiVfs.c||src/jsiVfs.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tests/info.jsi||tests/info.jsi",
          "tests/utf.jsi||tests/utf.jsi",
          "tools/Make.jsi||tools/Make.jsi",
          "tools/mktoc.jsi||tools/mktoc.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/structpp.jsi||tools/structpp.jsi",
          "tools/testsys.sh||tools/testsys.sh",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:         var file = self.curfile,",
          "601:             line = self.curline,",
          "602:             func = self.curfunc,",
          "604:             opstr = self.opstr,",
          "605:             bpId = self.bpId,",
          "606:             level = self.level;",
          "",
          "[Removed Lines]",
          "603:             level = self.curlevel,",
          "",
          "[Added Lines]",
          "603:             clevel = self.curlevel,",
          "",
          "---------------"
        ],
        "lib/DebugUI/html/debugui.jsi||lib/DebugUI/html/debugui.jsi": [
          "File: lib/DebugUI/html/debugui.jsi -> lib/DebugUI/html/debugui.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     if (self.uioptions.varTooltip)",
          "54:         id.title = '.';",
          "57: }",
          "",
          "[Removed Lines]",
          "56:     WsSend('varget', {name:word})",
          "",
          "[Added Lines]",
          "56:     WsSend('varget', {name:word});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     self.dbfile.onmousemove = function(e) {",
          "96:         if (self.uiddbfile) clearInterval(self.uiddbfile);",
          "97:         self.uiddbfile = setTimeout(function () { mouseStopped(e); }, 500);",
          "99:     TogglePanel(\"uibutton\", null);",
          "100: }",
          "",
          "[Removed Lines]",
          "98:     }",
          "",
          "[Added Lines]",
          "98:     };",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:             self.protocol = 'post';",
          "98:         if (self.sslDir) {",
          "101:             self.ssl = true;",
          "102:         }",
          "",
          "[Removed Lines]",
          "99:             if (self.sslFnKey != '') sself.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "100:             if (self.sslFnCert != '') sself.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "",
          "[Added Lines]",
          "99:             if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "100:             if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:             address:self.address,",
          "112:             protocol:self.protocol,",
          "113:             clientHost:self.address,",
          "116:             ssl:self.ssl,",
          "117:         };",
          "118:         for (var i in self.wsOpts)",
          "",
          "[Removed Lines]",
          "114:             sslCert:self.sslCert,",
          "115:             sslKey:self.sslKey,",
          "",
          "[Added Lines]",
          "114:             sslCert:self.sslcert,",
          "115:             sslKey:self.sslkey,",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 26",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 27",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1227:     { \"concat\",     jsi_ArrayConcatCmd,     0,-1, \"...\", .help=\"Return array with args appended\", .retType=(uint)JSI_TT_ARRAY },",
          "1228:     { \"every\",      jsi_ArrayEveryCmd,      1, 1, \"callback:function\", .help=\"Returns true if every value in array satisfies the test\", .retType=(uint)JSI_TT_ANY },",
          "1229:     { \"fill\",       jsi_ArrayFillCmd,       1, 3, \"value:any, start:number=0, end:number=-1\", .help=\"Fill an array with values\", .retType=(uint)JSI_TT_ARRAY },",
          "1231:     { \"find\",       jsi_ArrayFindCmd,       1, 1, \"callback:function\", .help=\"Returns the value of the first element in the array that satisfies the test\", .retType=(uint)JSI_TT_ANY },",
          "1232:     { \"findIndex\",  jsi_ArrayFindIndexCmd,  1, 1, \"callback:function\", .help=\"Returns the index of the first element in the array that satisfies the test\", .retType=(uint)JSI_TT_ANY },",
          "1233:     { \"flat\",       jsi_ArrayFlatCmd,       0, 1, \"depth:number=1\", .help=\"Flatten an arra\", .retType=(uint)JSI_TT_ARRAY },",
          "1235:     { \"includes\",   jsi_ArrayIncludesCmd,   1, 1, \"val:any\", .help=\"Returns true if array contains value\", .retType=(uint)JSI_TT_ANY },",
          "1236:     { \"indexOf\",    jsi_ArrayIndexOfCmd,    1, 2, \"str:any, startIdx:number=0\", .help=\"Return index of first occurrance in array\", .retType=(uint)JSI_TT_NUMBER },",
          "1237:     { \"isArray\",    jsi_ArrayIsArrayCmd,    0, 0, \"\", .help=\"True if val array\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1238:     { \"join\",       jsi_ArrayJoinCmd,       0, 1, \"sep:string=''\", .help=\"Return elements joined by char\", .retType=(uint)JSI_TT_STRING },",
          "1239:     { \"lastIndexOf\",jsi_ArrayLastindexOfCmd,1, 2, \"val:any, start:number=0\", .help=\"Return index of last occurence in array\", .retType=(uint)JSI_TT_NUMBER },",
          "1241:     { \"pop\",        jsi_ArrayPopCmd,        0, 0, \"\", .help=\"Remove and return last element of array\", .retType=(uint)JSI_TT_ANY },",
          "1242:     { \"push\",       jsi_ArrayPushCmd,       1,-1, \"val:any, ...\", .help=\"Push one or more elements onto array and return size\", .retType=(uint)JSI_TT_NUMBER },",
          "1243:     { \"reduce\",     jsi_ArrayReduceCmd,     1, 2, \"callback:function, initial:any\", .help=\"Return a reduced array\", .retType=(uint)JSI_TT_ANY },",
          "",
          "[Removed Lines]",
          "1230:     { \"filter\",     jsi_ArrayFilterCmd,     1, 2, \"callback:function, this:object=void\", .help=\"Return a filtered array\", .retType=(uint)JSI_TT_ARRAY },",
          "1234:     { \"forEach\",    jsi_ArrayForeachCmd,    1, 2, \"callback:function, this:object=void\", .help=\"Invoke function with each item in object\", .retType=(uint)JSI_TT_VOID },",
          "1240:     { \"map\",        jsi_ArrayMapCmd,        1, 2, \"callback:function, this:object=void\", .help=\"Creates a new array with the results of calling a provided function on every element in this array\", .retType=(uint)JSI_TT_ARRAY },",
          "",
          "[Added Lines]",
          "1230:     { \"filter\",     jsi_ArrayFilterCmd,     1, 2, \"callback:function, thisArg:object=void\", .help=\"Return a filtered array\", .retType=(uint)JSI_TT_ARRAY },",
          "1234:     { \"forEach\",    jsi_ArrayForeachCmd,    1, 2, \"callback:function, thisArg:object=void\", .help=\"Invoke function with each item in object\", .retType=(uint)JSI_TT_VOID },",
          "1240:     { \"map\",        jsi_ArrayMapCmd,        1, 2, \"callback:function, thisArg:object=void\", .help=\"Creates a new array with the results of calling a provided function on every element in this array\", .retType=(uint)JSI_TT_ARRAY },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1245:     { \"shift\",      jsi_ArrayShiftCmd,      0, 0, \"\", .help=\"Remove first element and shift downwards\", .retType=(uint)JSI_TT_ANY },",
          "1246:     { \"sizeOf\",     jsi_ArraySizeOfCmd,     0, 0, \"\", .help=\"Return size of array\", .retType=(uint)JSI_TT_NUMBER },",
          "1247:     { \"slice\",      jsi_ArraySliceCmd,      1, 2, \"start:number, end:number=void\", .help=\"Return sub-array\", .retType=(uint)JSI_TT_ARRAY },",
          "1249:     { \"sort\",       jsi_ArraySortCmd,       0, 1, \"options:function|object=void\", .help=\"Sort an array\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=0, .opts=jsi_ArraySortOptions },",
          "1250:     { \"splice\",     jsi_ArraySpliceCmd,     1,-1, \"start:number, howmany:number=void, ...\", .help=\"Change the content of an array, adding new elements while removing old elements\", .retType=(uint)JSI_TT_ARRAY },",
          "1251:     { \"reverse\",    jsi_ArrayReverseCmd,    0, 0, \"\", .help=\"Reverse order of all elements in an array\", .retType=(uint)JSI_TT_ARRAY },",
          "",
          "[Removed Lines]",
          "1248:     { \"some\",       jsi_ArraySomeCmd,       1, 2, \"callback:function, this:object=void\", .help=\"Return true if function returns true some element\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Added Lines]",
          "1248:     { \"some\",       jsi_ArraySomeCmd,       1, 2, \"callback:function, thisArg:object=void\", .help=\"Return true if function returns true some element\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4779:     { \"executable\", InfoExecutableCmd,  0,  0, \"\", .help=\"Return name of executable\", .retType=(uint)JSI_TT_STRING },",
          "4780:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4781:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4783:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "4784:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4785:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "4782:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "",
          "[Added Lines]",
          "4782:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"arg:string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4846:     { \"getenv\",     SysGetEnvCmd,    0,  1, \"name:string=void\", .help=\"Get one or all environment\", .retType=(uint)JSI_TT_STRING|JSI_TT_OBJECT|JSI_TT_VOID  },",
          "4847:     { \"getpid\",     SysGetPidCmd,    0,  1, \"parent:boolean=false\", .help=\"Get process/parent id\", .retType=(uint)JSI_TT_NUMBER },",
          "4848:     { \"getuser\",    SysGetUserCmd,   0,  0, \"\", .help=\"Get userid info\", .retType=(uint)JSI_TT_OBJECT },",
          "4850:     { \"setenv\",     SysSetEnvCmd,    1,  2, \"name:string, value:string=void\", .help=\"Set/get an environment var\"  },",
          "4852:     { \"times\",      SysTimesCmd,     1,  2, \"callback:function|boolean, count:number=1\", .help=\"Call function count times and return execution time in microseconds\", .retType=(uint)JSI_TT_NUMBER },",
          "4853:     { \"verConvert\", SysVerConvertCmd,1,  2, \"ver:string|number, zeroTrim:number=0\", .help=\"Convert a version to/from a string/number, or return null if not a version. For string output zeroTrim says how many trailing .0 to trim (0-2)\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_STRING|JSI_TT_NULL },",
          "4854:     { NULL, 0,0,0,0, .help=\"Utilities commands\"  }",
          "",
          "[Removed Lines]",
          "4849:     { \"hash\",       SysHashCmd,      1,  2, \"val:string, options|object=void\", .help=\"Return hash (default SHA256) of string/file\", .retType=(uint)JSI_TT_STRING, .flags=0, .info=0, .opts=HashOptions},",
          "4851:     { \"sqlValues\",  SysSqlValuesCmd, 1,  2, \"name:string, var:object=void\", .help=\"Get object values for SQL\"  },",
          "",
          "[Added Lines]",
          "4849:     { \"hash\",       SysHashCmd,      1,  2, \"val:string, options:object=void\", .help=\"Return hash (default SHA256) of string/file\", .retType=(uint)JSI_TT_STRING, .flags=0, .info=0, .opts=HashOptions},",
          "4851:     { \"sqlValues\",  SysSqlValuesCmd, 1,  2, \"name:string, obj:object=void\", .help=\"Get object values for SQL\"  },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2355:     interp->evalFlags = flags;",
          "2356:     if (!ps)",
          "2357:         rc = JSI_ERROR;",
          "2359:         Jsi_ValueMakeUndef(interp, &interp->retValue);",
          "2360:         interp->ps = ps;",
          "2361:         Jsi_Value *retValue = interp->retValue;",
          "",
          "[Removed Lines]",
          "2358:     else {",
          "",
          "[Added Lines]",
          "2358:     else if (!interp->noEval) {",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1281:     { \"executable\", FileExecutableCmd,  1,  1, \"file:string\",  .help=\"Return true if file is executable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1282:     { \"exists\",     FileExistsCmd,      1,  1, \"file:string\",  .help=\"Return true if file exists\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1283:     { \"extension\",  FileExtensionCmd,   1,  1, \"file:string\",  .help=\"Return file extension\", .retType=(uint)JSI_TT_STRING },",
          "1285:     { \"isdir\",      FileIsdirCmd,       1,  1, \"file:string\",  .help=\"Return true if file is a directory\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1286:     { \"isfile\",     FileIsfileCmd,      1,  1, \"file:string\",  .help=\"Return true if file is a normal file\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1287:     { \"isrelative\", FileIsRelativeCmd,  1,  1, \"file:string\",  .help=\"Return true if file path is relative\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "1284:     { \"join\",       FileJoinCmd,        2,  2, \"path:string, path:string\",  .help=\"Join two file realpaths, or just second if an absolute path\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "1284:     { \"join\",       FileJoinCmd,        2,  2, \"path1:string, path2:string\",  .help=\"Join two file realpaths, or just second if an absolute path\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117:     Jsi_Value *jsppCallback;",
          "1118:     bool noConfig;",
          "1119:     bool noLoad;",
          "1120:     bool noAutoLoad;",
          "1121:     bool noStderr;",
          "1122:     bool noSubInterps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:     bool noEval;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noNetwork,   .help=\"Disable new Socket/WebSocket, or load of builtin MySql\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1335:             bool bv = 1;",
          "1336:             char *aio2 = argv[iocnt+1], *aioc = Jsi_Strchr(aio2, ':'),",
          "1337:                 argNamS[50], *argNam = aio2;",
          "1338:             const char *argVal;",
          "1339:             if (!Jsi_Strcmp(\"traceCall\", aio2))",
          "1340:                 interp->traceCall |= (jsi_callTraceFuncs |jsi_callTraceArgs |jsi_callTraceReturn | jsi_callTraceBefore | jsi_callTraceFullPath);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1339:             if (!aioc)",
          "1340:                 aioc = Jsi_Strchr(aio2, '=');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2768:     { \"info\",   InterpInfoCmd,    0,  0, \"\", .help=\"Returns internal statistics about interp\", .retType=(uint)JSI_TT_OBJECT },",
          "2769:     { \"source\", InterpSourceCmd,  1,  2, \"file:string, async:boolean=false\", .help=\"Interpret file within sub-interp\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_interpeval },",
          "2770:     { \"uplevel\",InterpUplevelCmd, 2,  2, \"js:string, level:number=0\", .help=\"Interpret code at the given stack level\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_interpuplevel },",
          "2772:     { NULL,     0,0,0,0, .help=\"Commands for accessing interps\" }",
          "2773: };",
          "",
          "[Removed Lines]",
          "2771:     { \"value\",  InterpValueCmd,   1,  2, \"var:string, level:number=0\", .help=\"Lookup value of variable at stack level\", .retType=(uint)JSI_TT_ANY },",
          "",
          "[Added Lines]",
          "2774:     { \"value\",  InterpValueCmd,   1,  2, \"varName:string, level:number=0\", .help=\"Lookup value of variable at stack level\", .retType=(uint)JSI_TT_ANY },",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628: static Jsi_CmdSpec functionCmds[] = {",
          "629:     { \"Function\",  jsi_Function_constructor,   0, 0,  \"\", .help=\"Function constructor (unimplemented)\", .retType=(uint)JSI_TT_FUNCTION, .flags=JSI_CMD_IS_CONSTRUCTOR },",
          "630:     { \"apply\",     jsi_FunctionApplyCmd,       1, 2,  \"thisArg:null|object|function, args:array=void\", .help=\"Call function passing args array\", .retType=(uint)JSI_TT_ANY },",
          "632:     { \"call\",      jsi_FunctionCallCmd,        1, -1, \"thisArg:null|object|function, arg1, ...\", .help=\"Call function with args\", .retType=(uint)JSI_TT_ANY },",
          "633:     { NULL, 0,0,0,0, .help=\"Commands for accessing functions\" }",
          "634: };",
          "",
          "[Removed Lines]",
          "631:     { \"bind\",      jsi_FunctionBindCmd,        0, -1, \"thisArg:object|function=null,arg,...\", .help=\"Return function that calls bound function prepended with thisArg+arguments\", .retType=(uint)JSI_TT_ANY },",
          "",
          "[Added Lines]",
          "631:     { \"bind\",      jsi_FunctionBindCmd,        0, -1, \"thisArg:object|function=null,...\", .help=\"Return function that calls bound function prepended with thisArg+arguments\", .retType=(uint)JSI_TT_ANY },",
          "",
          "---------------"
        ],
        "src/jsiVfs.c||src/jsiVfs.c": [
          "File: src/jsiVfs.c -> src/jsiVfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: static Jsi_CmdSpec vfsCmds[] = {",
          "836:     { \"exec\",       VfsExecCmd,     1,  1, \"cmd:string\",  .help=\"Safe mode exec for VFS support cmds eg. fossil info/ls/cat\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=VfsFileOptions },",
          "837:     { \"fileconf\",   VfsFileConfCmd, 2,  3, \"mount:string, path:string, options:string|object=void\",  .help=\"Configure file info which is same info as in fileList\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=VfsFileOptions },",
          "838:     { \"list\",       VfsListCmd,     0,  0, \"\",  .help=\"Return list of all vfs mounts\", .retType=(uint)JSI_TT_ARRAY, .flags=0 },",
          "",
          "[Removed Lines]",
          "835:     { \"conf\",       VfsConfCmd,     1,  2, \"mount:string, string|options:object|string=void\",  .help=\"Configure mount\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=VfsOptions },",
          "",
          "[Added Lines]",
          "835:     { \"conf\",       VfsConfCmd,     1,  2, \"mount:string, options:string|object|string=void\",  .help=\"Configure mount\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=VfsOptions },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2346: }",
          "2348: static Jsi_CmdSpec zvfsCmds[] = {",
          "2351:     { \"list\",       ZvfsListCmd,        1,  1, \"archive:string\",  .help=\"List files in archive\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_list },",
          "2352:     { \"mount\",      ZvfsMountCmd,       1,  2, \"archive:string, mountdir:string=void\",  .help=\"Mount zip on mount point\", .retType=(uint)JSI_TT_STRING, .flags=0, .info=FN_mount },",
          "2353:     { \"names\",      ZvfsNamesCmd,       0,  1, \"mountdir:string=void\",  .help=\"Return all zvfs mounted zips, or archive for specified mount\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_info },",
          "",
          "[Removed Lines]",
          "2349:     { \"append\",     ZvfsAppendCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...\",  .help=\"Like 'create()', but appends to an existing archive (with no dup checking)\", .retType=(uint)JSI_TT_VOID },",
          "2350:     { \"create\",     ZvfsCreateCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...\",  .help=\"Create a zip with the given files in prefix path\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_create },",
          "",
          "[Added Lines]",
          "2349:     { \"append\",     ZvfsAppendCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...\",  .help=\"Like 'create()', but appends to an existing archive (with no dup checking)\", .retType=(uint)JSI_TT_VOID },",
          "2350:     { \"create\",     ZvfsCreateCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...\",  .help=\"Create a zip with the given files in prefix path\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_create },",
          "",
          "---------------"
        ],
        "tests/info.jsi||tests/info.jsi": [
          "File: tests/info.jsi -> tests/info.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: K = {} ==> {}",
          "58: K.f(1) ==> 'F'",
          "59: undefined",
          "61: Info.funcs(K) ==> [ \"f\", \"g\" ]",
          "62: File.tail(Info.script()) ==> info.jsi",
          "63: File.tail(Info.script(XX)) ==> info.jsi",
          "",
          "[Removed Lines]",
          "60: Info.funcs(K.f).argList ==> [ \"z\" ]",
          "",
          "[Added Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' <function (z) {...}>.    (at or near \"f\")",
          "62: [ \"z\" ]",
          "",
          "---------------"
        ],
        "tests/utf.jsi||tests/utf.jsi": [
          "File: tests/utf.jsi -> tests/utf.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: d[2] ==> c",
          "49: d[3] ==> undefined",
          "50: d[9] ==> undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/Make.jsi||tools/Make.jsi": [
          "File: tools/Make.jsi -> tools/Make.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/mktoc.jsi||tools/mktoc.jsi": [
          "File: tools/mktoc.jsi -> tools/mktoc.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     parseOpts(self, options, conf);",
          "15:     function mk1toc(fname:string) {",
          "17:         var id, lbl, intoc = false, sawtoc = false, line = 0, tpre = '', tpost = '', oldtoc = '';",
          "18:         var errs = 0, s, s0, fp = new Channel(fname);",
          "19:         while ((s0=fp.gets()) !== undefined) {",
          "",
          "[Removed Lines]",
          "16:         var rc = '', lst = [], idlst = [], lev = 0, prev = 0, cur = 0, res, lev, top = 0;",
          "",
          "[Added Lines]",
          "16:         var rc = '', lst = [], idlst = [], lev = 0, prev = 0, cur = 0, res, top = 0;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: Array.prototype.concat = function(...):array {};",
          "6: Array.prototype.every = function(callback:function):any {};",
          "7: Array.prototype.fill = function(value:any, start:number=0, end:number=-1):array {};",
          "9: Array.prototype.find = function(callback:function):any {};",
          "10: Array.prototype.findIndex = function(callback:function):any {};",
          "11: Array.prototype.flat = function(depth:number=1):array {};",
          "13: Array.prototype.includes = function(val:any):any {};",
          "14: Array.prototype.indexOf = function(str:any, startIdx:number=0):number {};",
          "15: Array.prototype.isArray = function():boolean {};",
          "16: Array.prototype.join = function(sep:string=''):string {};",
          "17: Array.prototype.lastIndexOf = function(val:any, start:number=0):number {};",
          "19: Array.prototype.pop = function():any {};",
          "20: Array.prototype.push = function(val:any, ...):number {};",
          "21: Array.prototype.reduce = function(callback:function, initial:any):any {};",
          "",
          "[Removed Lines]",
          "8: Array.prototype.filter = function(callback:function, this:object=void):array {};",
          "12: Array.prototype.forEach = function(callback:function, this:object=void):void {};",
          "18: Array.prototype.map = function(callback:function, this:object=void):array {};",
          "",
          "[Added Lines]",
          "8: Array.prototype.filter = function(callback:function, thisArg:object=void):array {};",
          "12: Array.prototype.forEach = function(callback:function, thisArg:object=void):void {};",
          "18: Array.prototype.map = function(callback:function, thisArg:object=void):array {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: Array.prototype.shift = function():any {};",
          "25: Array.prototype.sizeOf = function():number {};",
          "26: Array.prototype.slice = function(start:number, end:number=void):array {};",
          "28: Array.prototype.sort = function(options:function|object=void):array {};",
          "29: Array.prototype.splice = function(start:number, howmany:number=void, ...):array {};",
          "30: Array.prototype.unshift = function(...):number {};",
          "",
          "[Removed Lines]",
          "27: Array.prototype.some = function(callback:function, this:object=void):boolean {};",
          "",
          "[Added Lines]",
          "27: Array.prototype.some = function(callback:function, thisArg:object=void):boolean {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: File.prototype.isdir = function(file:string):boolean {};",
          "99: File.prototype.isfile = function(file:string):boolean {};",
          "100: File.prototype.isrelative = function(file:string):boolean {};",
          "102: File.prototype.link = function(src:string, dest:string, ishard:boolean=false):any {};",
          "103: File.prototype.lstat = function(file:string):object {};",
          "104: File.prototype.mkdir = function(file:string,force:boolean=false):any {};",
          "",
          "[Removed Lines]",
          "101: File.prototype.join = function(path:string, path:string):string {};",
          "",
          "[Added Lines]",
          "101: File.prototype.join = function(path1:string, path2:string):string {};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123: File.prototype.write = function(file:string, str:string, mode:string='wb+'):number {};",
          "124: var Function = function(cmd,args) {};",
          "125: Function.prototype.apply = function(thisArg:null|object|function, args:array=void):any {};",
          "127: Function.prototype.call = function(thisArg:null|object|function, arg1, ...):any {};",
          "128: var Info = function(cmd,args) {};",
          "129: Info.prototype.argv0 = function():string|void {};",
          "",
          "[Removed Lines]",
          "126: Function.prototype.bind = function(thisArg:object|function=null,arg,...):any {};",
          "",
          "[Added Lines]",
          "126: Function.prototype.bind = function(thisArg:object|function=null,...):any {};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135: Info.prototype.execZip = function():string|void {};",
          "136: Info.prototype.executable = function():string {};",
          "137: Info.prototype.files = function():array {};",
          "139: Info.prototype.interp = function(interp:userobj=void):object {};",
          "140: Info.prototype.isMain = function():boolean {};",
          "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
          "",
          "[Removed Lines]",
          "138: Info.prototype.funcs = function(string|regexp|object=void):array|object {};",
          "",
          "[Added Lines]",
          "138: Info.prototype.funcs = function(arg:string|regexp|object=void):array|object {};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159: Interp.prototype.info = function():object {};",
          "160: Interp.prototype.source = function(file:string, async:boolean=false):any {};",
          "161: Interp.prototype.uplevel = function(js:string, level:number=0):any {};",
          "163: var JSON = function(cmd,args) {};",
          "164: JSON.prototype.check = function(str:string, strict:boolean=true):boolean {};",
          "165: JSON.prototype.parse = function(str:string, strict:boolean=true):any {};",
          "",
          "[Removed Lines]",
          "162: Interp.prototype.value = function(var:string, level:number=0):any {};",
          "",
          "[Added Lines]",
          "162: Interp.prototype.value = function(varName:string, level:number=0):any {};",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325: Util.prototype.getenv = function(name:string=void):string|object|void {};",
          "326: Util.prototype.getpid = function(parent:boolean=false):number {};",
          "327: Util.prototype.getuser = function():object {};",
          "329: Util.prototype.hexStr = function(val:string, decode:boolean=false):string {};",
          "330: Util.prototype.setenv = function(name:string, value:string=void):any {};",
          "332: Util.prototype.times = function(callback:function|boolean, count:number=1):number {};",
          "333: Util.prototype.verConvert = function(ver:string|number, zeroTrim:number=0):number|string|null {};",
          "334: var Vfs = function(cmd,args) {};",
          "336: Vfs.prototype.exec = function(cmd:string):any {};",
          "337: Vfs.prototype.fileconf = function(mount:string, path:string, options:string|object=void):any {};",
          "338: Vfs.prototype.list = function():array {};",
          "",
          "[Removed Lines]",
          "328: Util.prototype.hash = function(val:string, options|object=void):string {};",
          "331: Util.prototype.sqlValues = function(name:string, var:object=void):any {};",
          "335: Vfs.prototype.conf = function(mount:string, string|options:object|string=void):any {};",
          "",
          "[Added Lines]",
          "328: Util.prototype.hash = function(val:string, options:object=void):string {};",
          "331: Util.prototype.sqlValues = function(name:string, obj:object=void):any {};",
          "335: Vfs.prototype.conf = function(mount:string, options:string|object|string=void):any {};",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "354: WebSocket.prototype.update = function():void {};",
          "355: WebSocket.prototype.version = function():string {};",
          "356: var Zvfs = function(cmd,args) {};",
          "359: Zvfs.prototype.deflate = function(data:string):string {};",
          "360: Zvfs.prototype.inflate = function(data:string):string {};",
          "361: Zvfs.prototype.list = function(archive:string):array {};",
          "",
          "[Removed Lines]",
          "357: Zvfs.prototype.append = function(archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...):void {};",
          "358: Zvfs.prototype.create = function(archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...):void {};",
          "",
          "[Added Lines]",
          "357: Zvfs.prototype.append = function(archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...):void {};",
          "358: Zvfs.prototype.create = function(archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...):void {};",
          "",
          "---------------"
        ],
        "tools/structpp.jsi||tools/structpp.jsi": [
          "File: tools/structpp.jsi -> tools/structpp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         pdq.pre += sc;",
          "157:         if (bsgets.length) {",
          "158:             rc = \"\\n/* A set/get bitfield function for the struct \\\"name\\\". */\\n\"",
          "160:                 + \"  int rc = JSI_OK, idx = spec->offset;\\n\"",
          "161:                 + \"  const char *fname=\\\"\\\";\\n\"",
          "162:                 + \"  struct \"+name+\" *p = (struct \"+name+\" *)data;\\n\"",
          "164:             for (var k in bsgets) {",
          "165:                 var i = bsgets[k][0];",
          "166:                 var j = bsgets[k][1];",
          "",
          "[Removed Lines]",
          "159:                 + \"static int pdq_bsget_\"+name+\"(Jsi_Interp *interp, Jsi_OptionSpec *spec, void *data, Jsi_Wide *s, int isSet) \\{\\n\"",
          "163:                 + \"  switch (idx) \\{\\n\";",
          "",
          "[Added Lines]",
          "159:                 + \"static int pdq_bsget_\"+name+\"(Jsi_Interp *interp, Jsi_OptionSpec *spec, void *data, Jsi_Wide *s, int isSet) {\\n\"",
          "163:                 + \"  switch (idx) {\\n\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:                 rc += \"\\n    case \"+k+\": {\\n\"+rr+\"    }\\n\";",
          "179:             }",
          "180:             rc += \"\\n    default: {Jsi_LogError(\\\"bad index: %d\\\", idx); return JSI_ERROR; }\\n\";",
          "182:                     + \"  if (rc != JSI_OK) Jsi_LogError(\\\"value %lld out of range for field '%s'\\\",*s, fname); return JSI_ERROR; }\\n\"",
          "184:             pdq.out += rc;",
          "185:         }",
          "186:         pdq.out += \"\\nstatic pdq_Field pdq_SF_\"+name+\"[] = {\\n\"+ fieldstr +\"  {0}\\n};\\n\\n\";",
          "",
          "[Removed Lines]",
          "181:             rc += \"  \\}\\n\"",
          "183:                 + \"  return rc;\\n\\}\\n\\n\";",
          "",
          "[Added Lines]",
          "181:             rc += \"  }\\n\"",
          "183:                 + \"  return rc;\\n}\\n\\n\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:         var name = self.name;",
          "236:         pdq.out = pdq.pre + \"\\n#ifdef _PDQSTATIC_C_\\n\"",
          "237:         + pdq.out",
          "239:         + pdq.types",
          "241:         + pdq.structs",
          "243:         + pdq.enums",
          "244:         + \"  { 0 }\\n};\\n\\n\"",
          "245:         + \"static pdq_static pdq_statics_\"+name+\" = { pdq_static_SIG, \\\"\"+name+\"\\\", pdq_SFL_\"+name",
          "",
          "[Removed Lines]",
          "238:         + \"static pdq_Type pdq_SFT_\"+name+\"\\[\\] = {\\n\"",
          "240:         + \"  { 0 }\\n};\\n\\nstatic pdq_Struct pdq_SFL_\"+name+\"\\[\\] = {\\n\"",
          "242:         + \"  { 0 }\\n};\\n\\nstatic pdq_Enum pdq_SFE_\"+name+\"\\[\\] = {\\n\"",
          "",
          "[Added Lines]",
          "238:         + \"static pdq_Type pdq_SFT_\"+name+\"[] = {\\n\"",
          "240:         + \"  { 0 }\\n};\\n\\nstatic pdq_Struct pdq_SFL_\"+name+\"[] = {\\n\"",
          "242:         + \"  { 0 }\\n};\\n\\nstatic pdq_Enum pdq_SFE_\"+name+\"[] = {\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:             dputs(\"IV:\", items.enums[i],'\\n');",
          "337:             GenEnum(items.enums[i], '', false);",
          "338:         }",
          "340:             dputs(\"IV:\", items.sigs[i],'\\n');",
          "341:             GenEnum(items.sigs[i], '_SIG', true);",
          "342:         }",
          "344:             dputs(\"IV:\", items.structs[i],'\\n');",
          "345:             GenStruct(items.structs[i]);",
          "346:         }",
          "348:             dputs(\"IV:\", items.vars[i],'\\n');",
          "349:             GenVars(items.vars[i]);",
          "350:         }",
          "",
          "[Removed Lines]",
          "339:         for (var i in items.sigs) {",
          "343:         for (var i in items.structs) {",
          "347:         for (var i in items.vars) {",
          "",
          "[Added Lines]",
          "339:         for (i in items.sigs) {",
          "343:         for (i in items.structs) {",
          "347:         for (i in items.vars) {",
          "",
          "---------------"
        ],
        "tools/testsys.sh||tools/testsys.sh": [
          "File: tools/testsys.sh -> tools/testsys.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "2: # Test all .jsi scripts in system.",
          "3: for i in `find . -name \"*.jsi\"`; do",
          "4:     if echo $i | fgrep -q /html/; then",
          "5:         #echo $i",
          "6:         continue",
          "7:     fi",
          "8:     if echo $i | fgrep -q /warn; then",
          "9:         #echo $i",
          "10:         continue",
          "11:     fi",
          "12:     if echo $i | fgrep -q /tests/; then",
          "13:         #echo $i",
          "14:         continue",
          "15:     fi",
          "16:     jsish --I noEval=true $i",
          "17: done",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: <tr><td>concat</td><td>concat(...):array </td><td>Return array with args appended.</td></tr>",
          "54: <tr><td>every</td><td>every(callback:function) </td><td>Returns true if every value in array satisfies the test.</td></tr>",
          "55: <tr><td>fill</td><td>fill(value:any, start:number=0, end:number=-1):array </td><td>Fill an array with values.</td></tr>",
          "57: <tr><td>find</td><td>find(callback:function) </td><td>Returns the value of the first element in the array that satisfies the test.</td></tr>",
          "58: <tr><td>findIndex</td><td>findIndex(callback:function) </td><td>Returns the index of the first element in the array that satisfies the test.</td></tr>",
          "59: <tr><td>flat</td><td>flat(depth:number=1):array </td><td>Flatten an arra.</td></tr>",
          "61: <tr><td>includes</td><td>includes(val:any) </td><td>Returns true if array contains value.</td></tr>",
          "62: <tr><td>indexOf</td><td>indexOf(str:any, startIdx:number=0):number </td><td>Return index of first occurrance in array.</td></tr>",
          "63: <tr><td>isArray</td><td>isArray():boolean </td><td>True if val array.</td></tr>",
          "64: <tr><td>join</td><td>join(sep:string=''):string </td><td>Return elements joined by char.</td></tr>",
          "65: <tr><td>lastIndexOf</td><td>lastIndexOf(val:any, start:number=0):number </td><td>Return index of last occurence in array.</td></tr>",
          "67: <tr><td>pop</td><td>pop() </td><td>Remove and return last element of array.</td></tr>",
          "68: <tr><td>push</td><td>push(val:any, ...):number </td><td>Push one or more elements onto array and return size.</td></tr>",
          "69: <tr><td>reduce</td><td>reduce(callback:function, initial:any) </td><td>Return a reduced array.</td></tr>",
          "",
          "[Removed Lines]",
          "56: <tr><td>filter</td><td>filter(callback:function, this:object=void):array </td><td>Return a filtered array.</td></tr>",
          "60: <tr><td>forEach</td><td>forEach(callback:function, this:object=void):void </td><td>Invoke function with each item in object.</td></tr>",
          "66: <tr><td>map</td><td>map(callback:function, this:object=void):array </td><td>Creates a new array with the results of calling a provided function on every element in this array.</td></tr>",
          "",
          "[Added Lines]",
          "56: <tr><td>filter</td><td>filter(callback:function, thisArg:object=void):array </td><td>Return a filtered array.</td></tr>",
          "60: <tr><td>forEach</td><td>forEach(callback:function, thisArg:object=void):void </td><td>Invoke function with each item in object.</td></tr>",
          "66: <tr><td>map</td><td>map(callback:function, thisArg:object=void):array </td><td>Creates a new array with the results of calling a provided function on every element in this array.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: <tr><td>shift</td><td>shift() </td><td>Remove first element and shift downwards.</td></tr>",
          "73: <tr><td>sizeOf</td><td>sizeOf():number </td><td>Return size of array.</td></tr>",
          "74: <tr><td>slice</td><td>slice(start:number, end:number=void):array </td><td>Return sub-array.</td></tr>",
          "76: <tr><td>sort</td><td>sort(<a href='#Array.sortOptions'>options</a>:function|object=void):array </td><td>Sort an array.</td></tr>",
          "77: <tr><td>splice</td><td>splice(start:number, howmany:number=void, ...):array </td><td>Change the content of an array, adding new elements while removing old elements.</td></tr>",
          "78: <tr><td>unshift</td><td>unshift(...):number </td><td>Add new elements to start of array and return size.</td></tr>",
          "",
          "[Removed Lines]",
          "75: <tr><td>some</td><td>some(callback:function, this:object=void):boolean </td><td>Return true if function returns true some element.</td></tr>",
          "",
          "[Added Lines]",
          "75: <tr><td>some</td><td>some(callback:function, thisArg:object=void):boolean </td><td>Return true if function returns true some element.</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "453: <tr><td>isdir</td><td>isdir(file:string):boolean </td><td>Return true if file is a directory.</td></tr>",
          "454: <tr><td>isfile</td><td>isfile(file:string):boolean </td><td>Return true if file is a normal file.</td></tr>",
          "455: <tr><td>isrelative</td><td>isrelative(file:string):boolean </td><td>Return true if file path is relative.</td></tr>",
          "457: <tr><td>link</td><td>link(src:string, dest:string, ishard:boolean=false) </td><td>Link a file. The second argument is the destination file to be created. If a third bool argument is true, a hard link is created.</td></tr>",
          "458: <tr><td>lstat</td><td>lstat(file:string):object </td><td>Return status info for file.</td></tr>",
          "459: <tr><td>mkdir</td><td>mkdir(file:string,force:boolean=false) </td><td>Create a directory: force creates subdirs.</td></tr>",
          "",
          "[Removed Lines]",
          "456: <tr><td>join</td><td>join(path:string, path:string):string </td><td>Join two file realpaths, or just second if an absolute path.</td></tr>",
          "",
          "[Added Lines]",
          "456: <tr><td>join</td><td>join(path1:string, path2:string):string </td><td>Join two file realpaths, or just second if an absolute path.</td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "517: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "518: <tr><td>Function</td><td>new Function():function </td><td>Function constructor (unimplemented).</td></tr>",
          "519: <tr><td>apply</td><td>apply(thisArg:null|object|function, args:array=void) </td><td>Call function passing args array.</td></tr>",
          "521: <tr><td>call</td><td>call(thisArg:null|object|function, arg1, ...) </td><td>Call function with args.</td></tr>",
          "522: </table>",
          "523: <a name=\"Functionend\"></a>",
          "",
          "[Removed Lines]",
          "520: <tr><td>bind</td><td>bind(thisArg:object|function=null,arg,...) </td><td>Return function that calls bound function prepended with thisArg+arguments.</td></tr>",
          "",
          "[Added Lines]",
          "520: <tr><td>bind</td><td>bind(thisArg:object|function=null,...) </td><td>Return function that calls bound function prepended with thisArg+arguments.</td></tr>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "546: <tr><td>execZip</td><td>execZip():string|void </td><td>If executing a .zip file, return file name.</td></tr>",
          "547: <tr><td>executable</td><td>executable():string </td><td>Return name of executable.</td></tr>",
          "548: <tr><td>files</td><td>files():array </td><td>Return list of all sourced files.</td></tr>",
          "550: <tr><td>interp</td><td>interp(interp:userobj=void):object </td><td>Return info on given or current interp.</td></tr>",
          "551: <tr><td>isMain</td><td>isMain():boolean </td><td>Return true if current script was the main script invoked from command-line.</td></tr>",
          "552: <tr><td>keywords</td><td>keywords(isSql=false, name:string=void):boolean|array </td><td>Return/lookup reserved keyword.</td></tr>",
          "",
          "[Removed Lines]",
          "549: <tr><td>funcs</td><td>funcs(string|regexp|object=void):array|object </td><td>Return details or list of matching functions.</td></tr>",
          "",
          "[Added Lines]",
          "549: <tr><td>funcs</td><td>funcs(arg:string|regexp|object=void):array|object </td><td>Return details or list of matching functions.</td></tr>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "607: <tr><td>info</td><td>info():object </td><td>Returns internal statistics about interp.</td></tr>",
          "608: <tr><td>source</td><td>source(file:string, async:boolean=false) </td><td>Interpret file within sub-interp. When the 'async' option is used on a threaded interp, the script is queued as an Event.</td></tr>",
          "609: <tr><td>uplevel</td><td>uplevel(js:string, level:number=0) </td><td>Interpret code at the given stack level. The level argument is as returned by Info.level().  Not supported with threads.</td></tr>",
          "611: </table>",
          "",
          "[Removed Lines]",
          "610: <tr><td>value</td><td>value(var:string, level:number=0) </td><td>Lookup value of variable at stack level.</td></tr>",
          "",
          "[Added Lines]",
          "610: <tr><td>value</td><td>value(varName:string, level:number=0) </td><td>Lookup value of variable at stack level.</td></tr>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "644: <tr><td>name</td><td><i>STRKEY</i></td><td>Optional text name for this interp.</td><td><i></i></td></tr>",
          "645: <tr><td>noAutoLoad</td><td><i>BOOL</i></td><td>Disable autoload.</td><td><i></i></td></tr>",
          "646: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of Interp.conf to change options after create.</td><td><i>initOnly</i></td></tr>",
          "647: <tr><td>noInput</td><td><i>BOOL</i></td><td>Disable use of console.input().</td><td><i></i></td></tr>",
          "648: <tr><td>noLoad</td><td><i>BOOL</i></td><td>Disable load of shared libs.</td><td><i></i></td></tr>",
          "649: <tr><td>noNetwork</td><td><i>BOOL</i></td><td>Disable new Socket/WebSocket, or load of builtin MySql.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647: <tr><td>noEval</td><td><i>BOOL</i></td><td>Disable eval: just parses file to check syntax.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1507: <tr><td>getenv</td><td>getenv(name:string=void):string|object|void </td><td>Get one or all environment.</td></tr>",
          "1508: <tr><td>getpid</td><td>getpid(parent:boolean=false):number </td><td>Get process/parent id.</td></tr>",
          "1509: <tr><td>getuser</td><td>getuser():object </td><td>Get userid info.</td></tr>",
          "1511: <tr><td>hexStr</td><td>hexStr(val:string, decode:boolean=false):string </td><td>Hex encode/decode a string.</td></tr>",
          "1512: <tr><td>setenv</td><td>setenv(name:string, value:string=void) </td><td>Set/get an environment var.</td></tr>",
          "1514: <tr><td>times</td><td>times(callback:function|boolean, count:number=1):number </td><td>Call function count times and return execution time in microseconds.</td></tr>",
          "1515: <tr><td>verConvert</td><td>verConvert(ver:string|number, zeroTrim:number=0):number|string|null </td><td>Convert a version to/from a string/number, or return null if not a version. For string output zeroTrim says how many trailing .0 to trim (0-2).</td></tr>",
          "1516: </table>",
          "",
          "[Removed Lines]",
          "1510: <tr><td>hash</td><td>hash(val:string, <a href='#Util.hashOptions'>options</a>|object=void):string </td><td>Return hash (default SHA256) of string/file.</td></tr>",
          "1513: <tr><td>sqlValues</td><td>sqlValues(name:string, var:object=void) </td><td>Get object values for SQL.</td></tr>",
          "",
          "[Added Lines]",
          "1511: <tr><td>hash</td><td>hash(val:string, <a href='#Util.hashOptions'>options</a>:object=void):string </td><td>Return hash (default SHA256) of string/file.</td></tr>",
          "1514: <tr><td>sqlValues</td><td>sqlValues(name:string, obj:object=void) </td><td>Get object values for SQL.</td></tr>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1543: <h2>Methods for \"Vfs\"</h2>",
          "1544: <table border=\"1\"class=\"cmdstbl table\">",
          "1545: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "1547: <tr><td>exec</td><td>exec(cmd:string) </td><td>Safe mode exec for VFS support cmds eg. fossil info/ls/cat.</td></tr>",
          "1548: <tr><td>fileconf</td><td>fileconf(mount:string, path:string, <a href='#Vfs.fileconfOptions'>options</a>:string|object=void) </td><td>Configure file info which is same info as in fileList.</td></tr>",
          "1549: <tr><td>list</td><td>list():array </td><td>Return list of all vfs mounts.</td></tr>",
          "",
          "[Removed Lines]",
          "1546: <tr><td>conf</td><td>conf(mount:string, string|<a href='#Vfs.confOptions'>options</a>:object|string=void) </td><td>Configure mount.</td></tr>",
          "",
          "[Added Lines]",
          "1547: <tr><td>conf</td><td>conf(mount:string, <a href='#Vfs.confOptions'>options</a>:string|object|string=void) </td><td>Configure mount.</td></tr>",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1802: <h2>Methods for \"Zvfs\"</h2>",
          "1803: <table border=\"1\"class=\"cmdstbl table\">",
          "1804: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "1807:    zvfs.create('foo.zip',['main.js', 'bar.js'], 'src', ['a.html', 'css/a.css'], 'html');</td></tr>",
          "1808: <tr><td>deflate</td><td>deflate(data:string):string </td><td>Compress string using zlib deflate.</td></tr>",
          "1809: <tr><td>inflate</td><td>inflate(data:string):string </td><td>Uncompress string using zlib inflate.</td></tr>",
          "",
          "[Removed Lines]",
          "1805: <tr><td>append</td><td>append(archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...):void </td><td>Like 'create()', but appends to an existing archive (with no dup checking).</td></tr>",
          "1806: <tr><td>create</td><td>create(archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...):void </td><td>Create a zip with the given files in prefix path. This command creates a zip archive and adds files to it. Files are relative the given 'path', or the current directory. If the destignation file already exist but is not an archive (eg. an executable), zip data is appended to the end of the file. If the existing file is already an archive, an error will be thrown. To truncate an existing archive, use zvfs.truncate(). Or use zvfs.append() instead.",
          "",
          "[Added Lines]",
          "1806: <tr><td>append</td><td>append(archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...):void </td><td>Like 'create()', but appends to an existing archive (with no dup checking).</td></tr>",
          "1807: <tr><td>create</td><td>create(archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...):void </td><td>Create a zip with the given files in prefix path. This command creates a zip archive and adds files to it. Files are relative the given 'path', or the current directory. If the destignation file already exist but is not an archive (eg. an executable), zip data is appended to the end of the file. If the existing file is already an archive, an error will be thrown. To truncate an existing archive, use zvfs.truncate(). Or use zvfs.append() instead.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e24266585df82650d614d4ef0be6b50698b8680e",
      "candidate_info": {
        "commit_hash": "e24266585df82650d614d4ef0be6b50698b8680e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/e24266585df82650d614d4ef0be6b50698b8680e",
        "files": [
          "md/Reference.md",
          "src/jsiEval.c",
          "tests/locals.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Fix help: use LogInfo\n\nFossilOrigin-Name: c71a4dc42dee41c73ca3fce5bb085214247d5e1292b5f28f3c2f8a2ef5788901",
        "before_after_code_files": [
          "src/jsiEval.c||src/jsiEval.c",
          "tests/locals.jsi||tests/locals.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/locals.jsi||tests/locals.jsi",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "tests/locals.jsi||tests/locals.jsi",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:             const char *str = (top?Jsi_ValueString(interp, top, NULL):\"\");",
          "358:             if (str) {",
          "359:                 if (!Jsi_Strcmp(nam, \"help\"))",
          "361:                 else",
          "362:                     Jsi_LogError(\"%s near %s\", nam, str);",
          "363:             }",
          "",
          "[Removed Lines]",
          "360:                     Jsi_LogError(\"...%s\", str);",
          "",
          "[Added Lines]",
          "360:                     Jsi_LogInfo(\"...%s\", str);",
          "",
          "---------------"
        ],
        "tests/locals.jsi||tests/locals.jsi": [
          "File: tests/locals.jsi -> tests/locals.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: =!EXPECTSTART!=",
          "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
          "18: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
          "17: Info.locals(true) ==> { x:1 }",
          "",
          "[Added Lines]",
          "16: Info.locals(false) ==> { x:1 }",
          "17: Info.locals(true) ==> { bar:\"function bar() {...}\" }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: Number.prototype.toPrecision = function(num:number):string {};",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "220: Object.prototype.freeze = function(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void {};",
          "221: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: Object.prototype.assign = function(obj:object,...):object {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: |isMain|():boolean |Return true if current script was the main script invoked from command-line.|",
          "390: |keywords|(isSql=false, name:string=void):boolean&#124;array |Return/lookup reserved keyword.|",
          "391: |level|(level:number=void):number&#124;array&#124;object |Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level. Otherwise returns details on the specified level. The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.|",
          "393: |lookup|(name:string) |Given string name, lookup and return value, eg: function.|",
          "394: |methods|(val:string&#124;regexp):array&#124;object |Return functions and commands.|",
          "395: |named|(name:string=void):array&#124;userobj |Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.|",
          "",
          "[Removed Lines]",
          "392: |locals|(filter:boolean=void):object |Return locals; use filter=true/false just vars/functions.|",
          "",
          "[Added Lines]",
          "392: |locals|(filter:boolean=void):object |Return locals; if filter=true/false omit vars/functions.|",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717: |Method|Function Argument Types|Description|",
          "718: |---|---|---|",
          "719: |Object|(val:object&#124;function&#124;null=void):object |Object constructor.|",
          "720: |create|(proto:null&#124;object, properties:object=void):object |Create a new object with prototype object and properties.|",
          "721: |freeze|(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void |Freeze/unfreeze an object with optionally.|",
          "722: |getPrototypeOf|(name:object&#124;function):function&#124;object |Return prototype of an object.|",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720: |assign|(obj:object,...):object |Return arg1 object with assigned values.|",
          "",
          "---------------"
        ]
      }
    }
  ]
}