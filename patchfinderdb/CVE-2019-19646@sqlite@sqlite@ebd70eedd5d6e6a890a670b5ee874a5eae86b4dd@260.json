{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
      "candidate_info": {
        "commit_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/gencol1.test"
        ],
        "message": "Add a few simple TCL test cases for generated columns.  (Full test coverage of the generated column logic is provided separately by TH3.)\n\nFossilOrigin-Name: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: foreach {tn schema} {",
          "28: 1 {",
          "29:    CREATE TABLE t1(",
          "30:      a INT,",
          "31:      b TEXT,",
          "32:      c ANY,",
          "33:      w INT GENERATED ALWAYS AS (a*10),",
          "34:      x TEXT AS (typeof(c)),",
          "35:      y TEXT AS (substr(b,a,a+2))",
          "36:    );",
          "37:   }",
          "38: 2 {",
          "39:    CREATE TABLE t1(",
          "40:      w INT GENERATED ALWAYS AS (a*10),",
          "41:      x TEXT AS (typeof(c)),",
          "42:      y TEXT AS (substr(b,a,a+2)),",
          "43:      a INT,",
          "44:      b TEXT,",
          "45:      c ANY",
          "46:    );",
          "47:   }",
          "48: 3 {",
          "49:    CREATE TABLE t1(",
          "50:      w INT GENERATED ALWAYS AS (a*10),",
          "51:      a INT,",
          "52:      x TEXT AS (typeof(c)) STORED,",
          "53:      b TEXT,",
          "54:      y TEXT AS (substr(b,a,a+2)),",
          "55:      c ANY",
          "56:    );",
          "57:   }",
          "58: 4 {",
          "59:    CREATE TABLE t1(",
          "60:      a INTEGER PRIMARY KEY,",
          "61:      w INT GENERATED ALWAYS AS (a*10),",
          "62:      b TEXT,",
          "63:      x TEXT AS (typeof(c)),",
          "64:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "65:      c ANY",
          "66:    );",
          "67:   }",
          "68: 5 {",
          "69:    CREATE TABLE t1(",
          "70:      w INT GENERATED ALWAYS AS (a*10),",
          "71:      a INT,",
          "72:      x TEXT AS (typeof(c)),",
          "73:      b TEXT,",
          "74:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "75:      c ANY,",
          "76:      PRIMARY KEY(a,b)",
          "77:    ) WITHOUT ROWID;",
          "78:   }",
          "79: 6 {",
          "80:    CREATE TABLE t1(",
          "81:      w INT GENERATED ALWAYS AS (m*5),",
          "82:      m INT AS (a*2) STORED,",
          "83:      a INT,",
          "84:      x TEXT AS (typeof(c)),",
          "85:      b TEXT,",
          "86:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "87:      c ANY,",
          "88:      PRIMARY KEY(a,b)",
          "89:    );",
          "90:   }",
          "91: 7 {",
          "92:    CREATE TABLE t1(",
          "93:      w INT GENERATED ALWAYS AS (m*5),",
          "94:      m INT AS (a*2) NOT NULL,",
          "95:      a INT,",
          "96:      x TEXT AS (typeof(c)) CHECK (x<>'blank'),",
          "97:      b TEXT,",
          "98:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "99:      c ANY,",
          "100:      PRIMARY KEY(b,a)",
          "101:    ) WITHOUT ROWID;",
          "102:   }",
          "103: } {",
          "104:   catch {db close}",
          "105:   sqlite3 db :memory:",
          "106:   db eval $schema",
          "107:   do_execsql_test gencol1-2.$tn.100 {",
          "108:     INSERT INTO t1(a,b,c) VALUES(1,'abcdef',5.5),(3,'cantaloupe',NULL);",
          "109:     SELECT w, x, y, '|' FROM t1 ORDER BY a;",
          "110:   } {10 real abc | 30 null ntalo |}",
          "111:   do_execsql_test gencol1-2.$tn.101 {",
          "112:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "113:   } {10 real abc | 30 null ntalo |}",
          "114:   do_execsql_test gencol1-2.$tn.102 {",
          "115:     SELECT a FROM t1 WHERE w=30;",
          "116:   } {3}",
          "117:   do_execsql_test gencol1-2.$tn.103 {",
          "118:     SELECT a FROM t1 WHERE x='real';",
          "119:   } {1}",
          "120:   do_execsql_test gencol1-2.$tn.104 {",
          "121:     SELECT a FROM t1 WHERE y LIKE '%tal%' OR x='real' ORDER BY b;",
          "122:   } {1 3}",
          "123:   do_execsql_test gencol1-2.$tn.110 {",
          "124:     CREATE INDEX t1w ON t1(w);",
          "125:     SELECT a FROM t1 WHERE w=10;",
          "126:   } {1}",
          "127:   do_execsql_test gencol1-2.$tn.120 {",
          "128:     CREATE INDEX t1x ON t1(x) WHERE w BETWEEN 20 AND 40;",
          "129:     SELECT a FROM t1 WHERE x='null' AND w BETWEEN 20 AND 40;",
          "130:   } {3}",
          "131:   do_execsql_test gencol1-2.$tn.121 {",
          "132:     SELECT a FROM t1 WHERE x='real';",
          "133:   } {1}",
          "134:   do_execsql_test gencol1-2.$tn.130 {",
          "135:     VACUUM;",
          "136:     PRAGMA integrity_check;",
          "137:   } {ok}",
          "138:   do_execsql_test gencol1-2.$tn.140 {",
          "139:     UPDATE t1 SET a=a+100 WHERE w<20;",
          "140:     SELECT a, w, '|' FROM t1 ORDER BY w;",
          "141:   } {3 30 | 101 1010 |}",
          "142:   do_execsql_test gencol1-2.$tn.150 {",
          "143:     INSERT INTO t1 VALUES(4,'jambalaya','Chef John'),(15,87719874135,0);",
          "144:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c310c53e01388c8477c9863767ab779cf941a59f",
      "candidate_info": {
        "commit_hash": "c310c53e01388c8477c9863767ab779cf941a59f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c310c53e01388c8477c9863767ab779cf941a59f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Always include OP_Explain opcodes in the bytecode when SQLITE_DEBUG is enabled.\n\nFossilOrigin-Name: d8c1235c02b745138ac2b12e8bbb00dda4cac321176be92a2fa9547be029b3d0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 883337ffdb434b6856ceaada121c0be67e2fdec7b447675f45e85568ef28d7d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: void sqlite3VdbeExplain(Parse *pParse, u8 bPush, const char *zFmt, ...){",
          "360:     char *zMsg;",
          "361:     Vdbe *v;",
          "362:     va_list ap;",
          "",
          "[Removed Lines]",
          "359:   if( pParse->explain==2 ){",
          "",
          "[Added Lines]",
          "359: #ifndef SQLITE_DEBUG",
          "362:   if( pParse->explain==2 )",
          "363: #endif",
          "364:   {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba9ee095984340d941c36d5d379312f5542998ad",
      "candidate_info": {
        "commit_hash": "ba9ee095984340d941c36d5d379312f5542998ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba9ee095984340d941c36d5d379312f5542998ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Fix harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 5be64ea8e33f632f9c337feac9b0663d8e6e59fc9a71e5d832d9fd905c06458e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7927b6b023502e990d23f30251b5b0918b547726b863bfb6747dcd7f1f71d19a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2586:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2587:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2588:   }else{",
          "2590:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2591:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "2592:       if( pMWin->eType==TK_RANGE ){",
          "2594:         addr = sqlite3VdbeCurrentAddr(v);",
          "2595:         if( regEnd ){",
          "2596:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "2589:     int addr;",
          "2593:         int lbl;",
          "",
          "[Added Lines]",
          "2589:     int addr = 0;",
          "2593:         int lbl = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
      "candidate_info": {
        "commit_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "files": [
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Sync up the autoconf makefile for MSVC.\n\nFossilOrigin-Name: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
        "before_after_code_files": [
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: # will run on the platform that is doing the build.",
          "434: #",
          "435: !IF $(USE_FULLWARN)!=0",
          "437: !ELSE",
          "439: !ENDIF",
          "441: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "436: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "436: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: # Command line prefixes for compiling code, compiling resources,",
          "809: # linking, etc.",
          "810: #",
          "812: LTRCOMPILE = $(RCC) -r",
          "813: LTLIB = lib.exe",
          "814: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 908c4c891fa7472b43d232bde7d3789105c5f5b2cfaf6652bf6d5829236933cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36c9301816ab0acb23db36517754f66295542e3b",
      "candidate_info": {
        "commit_hash": "36c9301816ab0acb23db36517754f66295542e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/36c9301816ab0acb23db36517754f66295542e3b",
        "files": [
          "ext/fts5/test/fts5corrupt4.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add new test file fts5corrupt4.test.\n\nFossilOrigin-Name: 5dfc4fe98a4821cbdbfd7dfddf221b00251b2a26bf58767a3956b64e9a4e92da",
        "before_after_code_files": [
          "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test": [
          "File: ext/fts5/test/fts5corrupt4.test -> ext/fts5/test/fts5corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 16",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: #",
          "14: source [file join [file dirname [info script]] fts5_common.tcl]",
          "15: set testprefix fts5corrupt4",
          "17: # If SQLITE_ENABLE_FTS5 is defined, omit this file.",
          "18: ifcapable !fts5 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "22: sqlite3_fts5_may_be_corrupt 1",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE ttt USING fts5(a, b);",
          "26:   INSERT INTO ttt",
          "27:      VALUES('e ee eee e ee eee e ee eee', 'eee ee e e e ee eee ee ee');",
          "28:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "29:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "30: }",
          "32: proc mutate {blob i} {",
          "33:   set o [expr {$i % [string length $blob]}]",
          "34:   set a [string range $blob 0 $o-1]",
          "35:   set b [string range $blob $o+1 end]",
          "36:   set v [expr int(rand()*255) - 127]",
          "37:   return \"$a[binary format c $v]$b\"",
          "38: }",
          "39: db func mutate mutate",
          "41: for {set j 1000} {$j <= 5000} {incr j 1000} {",
          "42:   do_test 1.$j {",
          "43:     for {set i 0} {$i < 1000} {incr i} {",
          "44:       execsql {",
          "45:         BEGIN;",
          "46:           UPDATE ttt_data SET block = mutate(block, $i) WHERE id>10;",
          "47:       }",
          "48:       foreach sql {",
          "49:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e*')}",
          "50:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e* NOT ee*')}",
          "51:       } {",
          "52:         catch { execsql $sql }",
          "53:       }",
          "54:       execsql ROLLBACK",
          "55:     }",
          "56:   } {}",
          "57: }",
          "59: sqlite3_fts5_may_be_corrupt 0",
          "60: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}