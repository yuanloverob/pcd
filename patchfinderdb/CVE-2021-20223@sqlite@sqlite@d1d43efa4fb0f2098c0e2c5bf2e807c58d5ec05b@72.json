{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d29fd85a34b6a555a39f0d01b03b20e8aa7739a",
      "candidate_info": {
        "commit_hash": "1d29fd85a34b6a555a39f0d01b03b20e8aa7739a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d29fd85a34b6a555a39f0d01b03b20e8aa7739a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a memory leak in the CLI when an unknown or unrecognized argument is given to the \".dump\" command.\n\nFossilOrigin-Name: 71bfbbcc1a8d0e02073a381a5b31a5ccd5477011b22904b9989b6129d81f02e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e1db8e9a9ee370a398f13fd8546a520111b8cfb84460389535b5bc5bd9f4f82",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7495:           raw_printf(stderr, \"The --preserve-rowids option is not compatible\"",
          "7496:                              \" with SQLITE_OMIT_VIRTUALTABLE\\n\");",
          "7497:           rc = 1;",
          "7498:           goto meta_command_exit;",
          "7499: #else",
          "7500:           ShellSetFlag(p, SHFLG_PreserveRowid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7498:           sqlite3_free(zLike);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7506:         {",
          "7507:           raw_printf(stderr, \"Unknown option \\\"%s\\\" on \\\".dump\\\"\\n\", azArg[i]);",
          "7508:           rc = 1;",
          "7509:           goto meta_command_exit;",
          "7510:         }",
          "7511:       }else if( zLike ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7510:           sqlite3_free(zLike);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a764709bf33a5d25013057804d391cbaac482293",
      "candidate_info": {
        "commit_hash": "a764709bf33a5d25013057804d391cbaac482293",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a764709bf33a5d25013057804d391cbaac482293",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Work around a bug (an incorrect warning) in Clang-8.\n\nFossilOrigin-Name: 067291143a63db924ead4810defb4bc6f195557412f5d1c22299f30d2d9f2a79",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7b2ee1edb108430454578c1623ba6aee1e2a7bc30cb2f9884ea3e21c3b75635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:     p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash, zName);",
          "338:     if( p==0 && sqlite3StrNICmp(zName, \"sqlite_\", 7)==0 ){",
          "339:       if( i==1 ){",
          "343:         ){",
          "344:           p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash,",
          "345:                               DFLT_TEMP_SCHEMA_TABLE);",
          "346:         }",
          "347:       }else{",
          "349:           p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash,",
          "350:                               DFLT_SCHEMA_TABLE);",
          "351:         }",
          "",
          "[Removed Lines]",
          "340:         if( sqlite3StrICmp(zName+7, ALT_TEMP_SCHEMA_TABLE+7)==0",
          "341:          || sqlite3StrICmp(zName+7, ALT_SCHEMA_TABLE+7)==0",
          "342:          || sqlite3StrICmp(zName+7, DFLT_SCHEMA_TABLE+7)==0",
          "348:         if( sqlite3StrICmp(zName+7, ALT_SCHEMA_TABLE+7)==0 ){",
          "",
          "[Added Lines]",
          "340:         if( sqlite3StrICmp(zName+7, &ALT_TEMP_SCHEMA_TABLE[7])==0",
          "341:          || sqlite3StrICmp(zName+7, &ALT_SCHEMA_TABLE[7])==0",
          "342:          || sqlite3StrICmp(zName+7, &DFLT_SCHEMA_TABLE[7])==0",
          "348:         if( sqlite3StrICmp(zName+7, &ALT_SCHEMA_TABLE[7])==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:       if( p ) break;",
          "366:     }",
          "367:     if( p==0 && sqlite3StrNICmp(zName, \"sqlite_\", 7)==0 ){",
          "369:         p = sqlite3HashFind(&db->aDb[0].pSchema->tblHash, DFLT_SCHEMA_TABLE);",
          "371:         p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash,",
          "372:                             DFLT_TEMP_SCHEMA_TABLE);",
          "373:       }",
          "",
          "[Removed Lines]",
          "368:       if( sqlite3StrICmp(zName+7, ALT_SCHEMA_TABLE+7)==0 ){",
          "370:       }else if( sqlite3StrICmp(zName+7, ALT_TEMP_SCHEMA_TABLE+7)==0 ){",
          "",
          "[Added Lines]",
          "368:       if( sqlite3StrICmp(zName+7, &ALT_SCHEMA_TABLE[7])==0 ){",
          "370:       }else if( sqlite3StrICmp(zName+7, &ALT_TEMP_SCHEMA_TABLE[7])==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
      "candidate_info": {
        "commit_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Disallow tables that have only virtual columns.\n\nFossilOrigin-Name: 591973217f1caf24cde91dc15b7edca2edda05dac8ae2b2cd8d71e7aa072f7d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2244:   if( p->tabFlags & TF_HasGenerated ){",
          "2246:     testcase( p->tabFlags & TF_HasVirtual );",
          "2247:     testcase( p->tabFlags & TF_HasStored );",
          "2248:     for(ii=0; ii<p->nCol; ii++){",
          "",
          "[Removed Lines]",
          "2245:     int ii;",
          "",
          "[Added Lines]",
          "2245:     int ii, nNV = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2253:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2254:                                     p->aCol[ii].pDflt, 0);",
          "2255:       }",
          "2256:     }",
          "2257:   }",
          "2258: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2256:       if( (colFlags & COLFLAG_VIRTUAL)==0 ) nNV++;",
          "2257:     }",
          "2258:     if( nNV==0 ){",
          "2259:       sqlite3ErrorMsg(pParse, \"must have at least one non-VIRTUAL column\");",
          "2260:       return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
      "candidate_info": {
        "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/wherecode.c",
          "test/gencol1.test"
        ],
        "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/wherecode.c||src/wherecode.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "3609:         if( aff>SQLITE_AFF_BLOB ){",
          "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3611:           assert( SQLITE_AFF_BLOB=='A' );",
          "",
          "[Removed Lines]",
          "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "",
          "[Added Lines]",
          "3608:         int aff;",
          "3609:         if( pExpr->y.pTab ){",
          "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3611:         }else{",
          "3612:           aff = pExpr->affExpr;",
          "3613:         }",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1141:   if( pExpr->op==TK_COLUMN ){",
          "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
          "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1144:       pExpr->iTable = pX->iIdxCur;",
          "1145:       pExpr->iColumn = pX->iIdxCol;",
          "1146:       pExpr->y.pTab = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144:       assert( pExpr->y.pTab!=0 );",
          "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   UPDATE t0 SET c0 = NULL;",
          "244: } {1 {generated column loop on \"c2\"}}",
          "247: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "249:   DROP TABLE IF EXISTS t1;",
          "250:   DROP TABLE IF EXISTS t2;",
          "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "252:   INSERT INTO t1 VALUES(17);",
          "253:   CREATE TABLE t2(cc);",
          "254:   INSERT INTO t2 VALUES(41);",
          "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
          "256: } {41 17 17}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c867026c084e6e50311ce3cb13feb747de0441c",
      "candidate_info": {
        "commit_hash": "3c867026c084e6e50311ce3cb13feb747de0441c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c867026c084e6e50311ce3cb13feb747de0441c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Documentation updates.  No changes to code.\n\nFossilOrigin-Name: cc0e0aa3a7d534b806cdf63200b32ab3b7f0e08dde717f043a36d2f91c8a046c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3e3c60d8124672ff72a57dfa2e51276316bcac8c8ae8a5739da358f26924b0fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    }
  ]
}