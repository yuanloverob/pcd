{
  "cve_id": "CVE-2015-8720",
  "cve_desc": "The dissect_ber_GeneralizedTime function in epan/dissectors/packet-ber.c in the BER dissector in Wireshark 1.12.x before 1.12.9 and 2.0.x before 2.0.1 improperly checks an sscanf return value, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "921bb07115fbffc081ec56a5022b4a9d58db6d39",
  "patch_info": {
    "commit_hash": "921bb07115fbffc081ec56a5022b4a9d58db6d39",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/921bb07115fbffc081ec56a5022b4a9d58db6d39",
    "files": [
      "epan/dissectors/packet-ber.c"
    ],
    "message": "Check *how many* fields sscanf() found.\n\nIn the code that parses a GeneralizedTime field, don't assume that all\nfields were found; check the return value from sscanf().\n\nThis should clean up a fuzz failure on the 2.0 buildbot:\n\nhttps://buildbot.wireshark.org/wireshark-2.0/builders/Fuzz%20Test/builds/13/steps/valgrind-wireshark/logs/stdio\n\nChange-Id: I431d7ed69ac1697bd42c22a37ca1451cfc85c94e\nReviewed-on: https://code.wireshark.org/review/12083\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
      "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3626:     ret = sscanf( tmpstr, \"%14d%1[.,+-Z]%4d%1[+-Z]%4d\", &tmp_int, first_delim, &first_digits, second_delim, &second_digits);",
      "3628:     if (ret < 1) {",
      "3639:     }",
      "3646:         case '+':",
      "3647:         case '-':",
      "3649:             break;",
      "3650:         case 'Z':",
      "3651:             g_snprintf(strptr, 7, \" (UTC)\");",
      "3652:             break;",
      "3655:         default:",
      "3657:             break;",
      "3658:         }",
      "3672:     }",
      "3674:     if (hf_id >= 0) {",
      "",
      "[Removed Lines]",
      "3629:         cause = proto_tree_add_string_format_value(",
      "3630:             tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
      "3631:             \"GeneralizedTime invalid format: %s\",",
      "3632:             tmpstr);",
      "3633:         expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
      "3634:         if (decode_unexpected) {",
      "3635:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
      "3636:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
      "3637:         }",
      "3638:         return end_offset;",
      "3641:     switch (first_delim[0]) {",
      "3642:     case '.':",
      "3643:     case ',':",
      "3644:         strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
      "3645:         switch (second_delim[0]) {",
      "3648:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
      "3653:         case 0:",
      "3654:             break;",
      "3659:         break;",
      "3660:     case '+':",
      "3661:     case '-':",
      "3662:         g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
      "3663:         break;",
      "3664:     case 'Z':",
      "3665:         g_snprintf(strptr, 7, \" (UTC)\");",
      "3666:         break;",
      "3667:     case 0:",
      "3668:         break;",
      "3669:     default:",
      "3671:         break;",
      "",
      "[Added Lines]",
      "3630:         goto invalid;",
      "3633:     if (ret >= 2) {",
      "3646:         switch (first_delim[0]) {",
      "3647:         case '.':",
      "3648:         case ',':",
      "3652:             if (ret == 2) {",
      "3656:                 goto invalid;",
      "3657:             }",
      "3658:             strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
      "3659:             if (ret >= 4) {",
      "3670:                 switch (second_delim[0]) {",
      "3671:                 case '+':",
      "3672:                 case '-':",
      "3673:                     if (ret == 4) {",
      "3678:                         goto invalid;",
      "3679:                     }",
      "3680:                     g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
      "3681:                     break;",
      "3682:                 case 'Z':",
      "3683:                     g_snprintf(strptr, 7, \" (UTC)\");",
      "3684:                     break;",
      "3685:                 default:",
      "3687:                     break;",
      "3688:                 }",
      "3689:             }",
      "3690:             break;",
      "3696:             if (ret == 2) {",
      "3700:                 goto invalid;",
      "3701:             }",
      "3702:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3678:     offset+=len;",
      "3679:     return offset;",
      "3680: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3720: invalid:",
      "3721:     cause = proto_tree_add_string_format_value(",
      "3722:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
      "3723:         \"GeneralizedTime invalid format: %s\",",
      "3724:         tmpstr);",
      "3725:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
      "3726:     if (decode_unexpected) {",
      "3727:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
      "3728:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
      "3729:     }",
      "3730:     return end_offset;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e52fad16a89afdf9eaea8e50ff982df5fd2b8bb",
      "candidate_info": {
        "commit_hash": "1e52fad16a89afdf9eaea8e50ff982df5fd2b8bb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1e52fad16a89afdf9eaea8e50ff982df5fd2b8bb",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "Check *how many* fields sscanf() found.\n\nIn the code that parses a GeneralizedTime field, don't assume that all\nfields were found; check the return value from sscanf().\n\nThis should clean up a fuzz failure on the 2.0 buildbot:\n\nhttps://buildbot.wireshark.org/wireshark-2.0/builders/Fuzz%20Test/builds/13/steps/valgrind-wireshark/logs/stdio\n\nChange-Id: I431d7ed69ac1697bd42c22a37ca1451cfc85c94e\nReviewed-on: https://code.wireshark.org/review/12083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 921bb07115fbffc081ec56a5022b4a9d58db6d39)\nReviewed-on: https://code.wireshark.org/review/12084",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3626:     ret = sscanf( tmpstr, \"%14d%1[.,+-Z]%4d%1[+-Z]%4d\", &tmp_int, first_delim, &first_digits, second_delim, &second_digits);",
          "3628:     if (ret < 1) {",
          "3639:     }",
          "3646:         case '+':",
          "3647:         case '-':",
          "3649:             break;",
          "3650:         case 'Z':",
          "3651:             g_snprintf(strptr, 7, \" (UTC)\");",
          "3652:             break;",
          "3655:         default:",
          "3657:             break;",
          "3658:         }",
          "3672:     }",
          "3674:     if (hf_id >= 0) {",
          "",
          "[Removed Lines]",
          "3629:         cause = proto_tree_add_string_format_value(",
          "3630:             tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3631:             \"GeneralizedTime invalid format: %s\",",
          "3632:             tmpstr);",
          "3633:         expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "3634:         if (decode_unexpected) {",
          "3635:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3636:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "3637:         }",
          "3638:         return end_offset;",
          "3641:     switch (first_delim[0]) {",
          "3642:     case '.':",
          "3643:     case ',':",
          "3644:         strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "3645:         switch (second_delim[0]) {",
          "3648:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "3653:         case 0:",
          "3654:             break;",
          "3659:         break;",
          "3660:     case '+':",
          "3661:     case '-':",
          "3662:         g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "3663:         break;",
          "3664:     case 'Z':",
          "3665:         g_snprintf(strptr, 7, \" (UTC)\");",
          "3666:         break;",
          "3667:     case 0:",
          "3668:         break;",
          "3669:     default:",
          "3671:         break;",
          "",
          "[Added Lines]",
          "3630:         goto invalid;",
          "3633:     if (ret >= 2) {",
          "3646:         switch (first_delim[0]) {",
          "3647:         case '.':",
          "3648:         case ',':",
          "3652:             if (ret == 2) {",
          "3656:                 goto invalid;",
          "3657:             }",
          "3658:             strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "3659:             if (ret >= 4) {",
          "3670:                 switch (second_delim[0]) {",
          "3671:                 case '+':",
          "3672:                 case '-':",
          "3673:                     if (ret == 4) {",
          "3678:                         goto invalid;",
          "3679:                     }",
          "3680:                     g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "3681:                     break;",
          "3682:                 case 'Z':",
          "3683:                     g_snprintf(strptr, 7, \" (UTC)\");",
          "3684:                     break;",
          "3685:                 default:",
          "3687:                     break;",
          "3688:                 }",
          "3689:             }",
          "3690:             break;",
          "3696:             if (ret == 2) {",
          "3700:                 goto invalid;",
          "3701:             }",
          "3702:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3678:     offset+=len;",
          "3679:     return offset;",
          "3680: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3720: invalid:",
          "3721:     cause = proto_tree_add_string_format_value(",
          "3722:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3723:         \"GeneralizedTime invalid format: %s\",",
          "3724:         tmpstr);",
          "3725:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "3726:     if (decode_unexpected) {",
          "3727:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3728:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "3729:     }",
          "3730:     return end_offset;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f51a73556bbab0fc60cb2a0c458792c315c97e2",
      "candidate_info": {
        "commit_hash": "2f51a73556bbab0fc60cb2a0c458792c315c97e2",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2f51a73556bbab0fc60cb2a0c458792c315c97e2",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "Check *how many* fields sscanf() found.\n\nIn the code that parses a GeneralizedTime field, don't assume that all\nfields were found; check the return value from sscanf().\n\nThis should clean up a fuzz failure on the 2.0 buildbot:\n\nhttps://buildbot.wireshark.org/wireshark-2.0/builders/Fuzz%20Test/builds/13/steps/valgrind-wireshark/logs/stdio\n\nChange-Id: I431d7ed69ac1697bd42c22a37ca1451cfc85c94e\nReviewed-on: https://code.wireshark.org/review/12083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 921bb07115fbffc081ec56a5022b4a9d58db6d39)\nReviewed-on: https://code.wireshark.org/review/12085\n(cherry picked from commit 2c5997060c1cc91dc3ba964d4494751b50f25470)\nReviewed-on: https://code.wireshark.org/review/13758\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3553:     ret = sscanf( tmpstr, \"%14d%1[.,+-Z]%4d%1[+-Z]%4d\", &tmp_int, first_delim, &first_digits, second_delim, &second_digits);",
          "3555:     if (ret < 1) {",
          "3566:     }",
          "3573:         case '+':",
          "3574:         case '-':",
          "3576:             break;",
          "3577:         case 'Z':",
          "3578:             g_snprintf(strptr, 7, \" (UTC)\");",
          "3579:             break;",
          "3582:         default:",
          "3584:             break;",
          "3585:         }",
          "3599:     }",
          "3601:     if (hf_id >= 0) {",
          "",
          "[Removed Lines]",
          "3556:         cause = proto_tree_add_string_format_value(",
          "3557:             tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3558:             \"GeneralizedTime invalid format: %s\",",
          "3559:             tmpstr);",
          "3560:         expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "3561:         if (decode_unexpected) {",
          "3562:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3563:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "3564:         }",
          "3565:         return end_offset;",
          "3568:     switch (first_delim[0]) {",
          "3569:     case '.':",
          "3570:     case ',':",
          "3571:         strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "3572:         switch (second_delim[0]) {",
          "3575:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "3580:         case 0:",
          "3581:             break;",
          "3586:         break;",
          "3587:     case '+':",
          "3588:     case '-':",
          "3589:         g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "3590:         break;",
          "3591:     case 'Z':",
          "3592:         g_snprintf(strptr, 7, \" (UTC)\");",
          "3593:         break;",
          "3594:     case 0:",
          "3595:         break;",
          "3596:     default:",
          "3598:         break;",
          "",
          "[Added Lines]",
          "3557:         goto invalid;",
          "3560:     if (ret >= 2) {",
          "3573:         switch (first_delim[0]) {",
          "3574:         case '.':",
          "3575:         case ',':",
          "3579:             if (ret == 2) {",
          "3583:                 goto invalid;",
          "3584:             }",
          "3585:             strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "3586:             if (ret >= 4) {",
          "3597:                 switch (second_delim[0]) {",
          "3598:                 case '+':",
          "3599:                 case '-':",
          "3600:                     if (ret == 4) {",
          "3605:                         goto invalid;",
          "3606:                     }",
          "3607:                     g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "3608:                     break;",
          "3609:                 case 'Z':",
          "3610:                     g_snprintf(strptr, 7, \" (UTC)\");",
          "3611:                     break;",
          "3612:                 default:",
          "3614:                     break;",
          "3615:                 }",
          "3616:             }",
          "3617:             break;",
          "3623:             if (ret == 2) {",
          "3627:                 goto invalid;",
          "3628:             }",
          "3629:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3605:     offset+=len;",
          "3606:     return offset;",
          "3607: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3647: invalid:",
          "3648:     cause = proto_tree_add_string_format_value(",
          "3649:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3650:         \"GeneralizedTime invalid format: %s\",",
          "3651:         tmpstr);",
          "3652:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "3653:     if (decode_unexpected) {",
          "3654:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3655:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "3656:     }",
          "3657:     return end_offset;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c5997060c1cc91dc3ba964d4494751b50f25470",
      "candidate_info": {
        "commit_hash": "2c5997060c1cc91dc3ba964d4494751b50f25470",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2c5997060c1cc91dc3ba964d4494751b50f25470",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "Check *how many* fields sscanf() found.\n\nIn the code that parses a GeneralizedTime field, don't assume that all\nfields were found; check the return value from sscanf().\n\nThis should clean up a fuzz failure on the 2.0 buildbot:\n\nhttps://buildbot.wireshark.org/wireshark-2.0/builders/Fuzz%20Test/builds/13/steps/valgrind-wireshark/logs/stdio\n\nChange-Id: I431d7ed69ac1697bd42c22a37ca1451cfc85c94e\nReviewed-on: https://code.wireshark.org/review/12083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 921bb07115fbffc081ec56a5022b4a9d58db6d39)\nReviewed-on: https://code.wireshark.org/review/12085",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3553:     ret = sscanf( tmpstr, \"%14d%1[.,+-Z]%4d%1[+-Z]%4d\", &tmp_int, first_delim, &first_digits, second_delim, &second_digits);",
          "3555:     if (ret < 1) {",
          "3566:     }",
          "3573:         case '+':",
          "3574:         case '-':",
          "3576:             break;",
          "3577:         case 'Z':",
          "3578:             g_snprintf(strptr, 7, \" (UTC)\");",
          "3579:             break;",
          "3582:         default:",
          "3584:             break;",
          "3585:         }",
          "3599:     }",
          "3601:     if (hf_id >= 0) {",
          "",
          "[Removed Lines]",
          "3556:         cause = proto_tree_add_string_format_value(",
          "3557:             tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3558:             \"GeneralizedTime invalid format: %s\",",
          "3559:             tmpstr);",
          "3560:         expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "3561:         if (decode_unexpected) {",
          "3562:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3563:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "3564:         }",
          "3565:         return end_offset;",
          "3568:     switch (first_delim[0]) {",
          "3569:     case '.':",
          "3570:     case ',':",
          "3571:         strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "3572:         switch (second_delim[0]) {",
          "3575:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "3580:         case 0:",
          "3581:             break;",
          "3586:         break;",
          "3587:     case '+':",
          "3588:     case '-':",
          "3589:         g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "3590:         break;",
          "3591:     case 'Z':",
          "3592:         g_snprintf(strptr, 7, \" (UTC)\");",
          "3593:         break;",
          "3594:     case 0:",
          "3595:         break;",
          "3596:     default:",
          "3598:         break;",
          "",
          "[Added Lines]",
          "3557:         goto invalid;",
          "3560:     if (ret >= 2) {",
          "3573:         switch (first_delim[0]) {",
          "3574:         case '.':",
          "3575:         case ',':",
          "3579:             if (ret == 2) {",
          "3583:                 goto invalid;",
          "3584:             }",
          "3585:             strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "3586:             if (ret >= 4) {",
          "3597:                 switch (second_delim[0]) {",
          "3598:                 case '+':",
          "3599:                 case '-':",
          "3600:                     if (ret == 4) {",
          "3605:                         goto invalid;",
          "3606:                     }",
          "3607:                     g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "3608:                     break;",
          "3609:                 case 'Z':",
          "3610:                     g_snprintf(strptr, 7, \" (UTC)\");",
          "3611:                     break;",
          "3612:                 default:",
          "3614:                     break;",
          "3615:                 }",
          "3616:             }",
          "3617:             break;",
          "3623:             if (ret == 2) {",
          "3627:                 goto invalid;",
          "3628:             }",
          "3629:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3605:     offset+=len;",
          "3606:     return offset;",
          "3607: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3647: invalid:",
          "3648:     cause = proto_tree_add_string_format_value(",
          "3649:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "3650:         \"GeneralizedTime invalid format: %s\",",
          "3651:         tmpstr);",
          "3652:     expert_add_info(actx->pinfo, cause, &ei_ber_invalid_format_generalized_time);",
          "3653:     if (decode_unexpected) {",
          "3654:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "3655:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "3656:     }",
          "3657:     return end_offset;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f4a7b1ffd56b4f4010fa2c41f8a5e827b38beb7",
      "candidate_info": {
        "commit_hash": "8f4a7b1ffd56b4f4010fa2c41f8a5e827b38beb7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8f4a7b1ffd56b4f4010fa2c41f8a5e827b38beb7",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "Check *how many* fields sscanf() found.\n\nIn the code that parses a GeneralizedTime field, don't assume that all\nfields were found; check the return value from sscanf().\n\nThis should clean up a fuzz failure on the 2.0 buildbot:\n\nhttps://buildbot.wireshark.org/wireshark-2.0/builders/Fuzz%20Test/builds/13/steps/valgrind-wireshark/logs/stdio\n\nConflicts:\n\tepan/dissectors/packet-ber.c\n\nChange-Id: I431d7ed69ac1697bd42c22a37ca1451cfc85c94e\nReviewed-on: https://code.wireshark.org/review/12083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 921bb07115fbffc081ec56a5022b4a9d58db6d39)\nReviewed-on: https://code.wireshark.org/review/12085\n(cherry picked from commit 2c5997060c1cc91dc3ba964d4494751b50f25470)\nReviewed-on: https://code.wireshark.org/review/13758\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nReviewed-on: https://code.wireshark.org/review/14248",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175:     ret = sscanf( tmpstr, \"%14d%1[.,+-Z]%4d%1[+-Z]%4d\", &tmp_int, first_delim, &first_digits, second_delim, &second_digits);",
          "4177:     if (ret < 1) {",
          "4185:     }",
          "4192:         case '+':",
          "4193:         case '-':",
          "4195:             break;",
          "4196:         case 'Z':",
          "4197:             g_snprintf(strptr, 7, \" (UTC)\");",
          "4198:             break;",
          "4201:         default:",
          "4203:             break;",
          "4204:         }",
          "4218:     }",
          "4220:     if(hf_id >= 0){",
          "",
          "[Removed Lines]",
          "4178:         cause = proto_tree_add_string_format(tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\", \"BER Error: GeneralizedTime invalid format: %s\", tmpstr);",
          "4179:         expert_add_info_format(actx->pinfo, cause, PI_MALFORMED, PI_WARN, \"BER Error: GeneralizedTime invalid format\");",
          "4180:         if (decode_unexpected) {",
          "4181:             proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "4182:             dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "4183:         }",
          "4184:         return end_offset;",
          "4187:     switch (first_delim[0]) {",
          "4188:     case '.':",
          "4189:     case ',':",
          "4190:         strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "4191:         switch (second_delim[0]) {",
          "4194:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "4199:         case 0:",
          "4200:             break;",
          "4205:         break;",
          "4206:     case '+':",
          "4207:     case '-':",
          "4208:         g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "4209:         break;",
          "4210:     case 'Z':",
          "4211:         g_snprintf(strptr, 7, \" (UTC)\");",
          "4212:         break;",
          "4213:     case 0:",
          "4214:         break;",
          "4215:     default:",
          "4217:         break;",
          "",
          "[Added Lines]",
          "4179:         goto invalid;",
          "4182:     if (ret >= 2) {",
          "4195:         switch (first_delim[0]) {",
          "4196:         case '.':",
          "4197:         case ',':",
          "4201:             if (ret == 2) {",
          "4205:                 goto invalid;",
          "4206:             }",
          "4207:             strptr += g_snprintf(strptr, 5, \"%c%.3d\", first_delim[0], first_digits);",
          "4208:             if (ret >= 4) {",
          "4219:                 switch (second_delim[0]) {",
          "4220:                 case '+':",
          "4221:                 case '-':",
          "4222:                     if (ret == 4) {",
          "4227:                         goto invalid;",
          "4228:                     }",
          "4229:                     g_snprintf(strptr, 12, \" (UTC%c%.4d)\", second_delim[0], second_digits);",
          "4230:                     break;",
          "4231:                 case 'Z':",
          "4232:                     g_snprintf(strptr, 7, \" (UTC)\");",
          "4233:                     break;",
          "4234:                 default:",
          "4236:                     break;",
          "4237:                 }",
          "4238:             }",
          "4239:             break;",
          "4245:             if (ret == 2) {",
          "4249:                 goto invalid;",
          "4250:             }",
          "4251:             g_snprintf(strptr, 12, \" (UTC%c%.4d)\", first_delim[0], first_digits);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4224:     offset+=len;",
          "4225:     return offset;",
          "4226: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4269: invalid:",
          "4270:     cause = proto_tree_add_string_format_value(",
          "4271:         tree, hf_ber_error, tvb, offset, len, \"invalid_generalized_time\",",
          "4272:         \"GeneralizedTime invalid format: %s\",",
          "4273:         tmpstr);",
          "4274:     if (decode_unexpected) {",
          "4275:         proto_tree *unknown_tree = proto_item_add_subtree(cause, ett_ber_unknown);",
          "4276:         dissect_unknown_ber(actx->pinfo, tvb, offset, unknown_tree);",
          "4277:     }",
          "4278:     return end_offset;",
          "",
          "---------------"
        ]
      }
    }
  ]
}