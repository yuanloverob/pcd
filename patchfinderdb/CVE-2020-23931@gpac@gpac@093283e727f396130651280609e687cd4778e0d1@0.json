{
  "cve_id": "CVE-2020-23931",
  "cve_desc": "An issue was discovered in gpac before 1.0.1. The abst_box_read function in box_code_adobe.c has a heap-based buffer over-read.",
  "repo": "gpac/gpac",
  "patch_hash": "093283e727f396130651280609e687cd4778e0d1",
  "patch_info": {
    "commit_hash": "093283e727f396130651280609e687cd4778e0d1",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/093283e727f396130651280609e687cd4778e0d1",
    "files": [
      "src/isomedia/box_code_adobe.c"
    ],
    "message": "fixed #1564",
    "before_after_code_files": [
      "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
      "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:  memset(tmp_str, 0, sizeof(char)*tmp_strsize);",
      "101:  while (tmp_strsize) {",
      "102:   tmp_str[i] = gf_bs_read_u8(bs);",
      "103:   tmp_strsize--;",
      "104:   if (!tmp_str[i])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:   ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "109:   ptr->movie_identifier = gf_strdup(tmp_str);",
      "110:  }",
      "112:  ptr->server_entry_count = gf_bs_read_u8(bs);",
      "113:  for (i=0; i<ptr->server_entry_count; i++) {",
      "114:   int j=0;",
      "116:   while (tmp_strsize) {",
      "117:    tmp_str[j] = gf_bs_read_u8(bs);",
      "118:    tmp_strsize--;",
      "119:    if (!tmp_str[j])",
      "",
      "[Removed Lines]",
      "115:   tmp_strsize=(u32)ptr->size-8;",
      "",
      "[Added Lines]",
      "113:  ISOM_DECREASE_SIZE(ptr, 1)",
      "117:   tmp_strsize=(u32)ptr->size;",
      "119:    ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "125:   }",
      "126:  }",
      "128:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
      "129:  for (i=0; i<ptr->quality_entry_count; i++) {",
      "130:   int j=0;",
      "132:   while (tmp_strsize) {",
      "133:    tmp_str[j] = gf_bs_read_u8(bs);",
      "134:    tmp_strsize--;",
      "135:    if (!tmp_str[j])",
      "",
      "[Removed Lines]",
      "131:   tmp_strsize=(u32)ptr->size-8;",
      "",
      "[Added Lines]",
      "131:  ISOM_DECREASE_SIZE(ptr, 1)",
      "135:   tmp_strsize=(u32)ptr->size;",
      "137:    ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "143:  }",
      "145:  i=0;",
      "147:  while (tmp_strsize) {",
      "148:   tmp_str[i] = gf_bs_read_u8(bs);",
      "149:   tmp_strsize--;",
      "150:   if (!tmp_str[i])",
      "",
      "[Removed Lines]",
      "146:  tmp_strsize=(u32)ptr->size-8;",
      "",
      "[Added Lines]",
      "151:  tmp_strsize=(u32)ptr->size;",
      "153:   ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "156:  }",
      "158:  i=0;",
      "160:  while (tmp_strsize) {",
      "161:   tmp_str[i] = gf_bs_read_u8(bs);",
      "162:   tmp_strsize--;",
      "163:   if (!tmp_str[i])",
      "",
      "[Removed Lines]",
      "159:  tmp_strsize=(u32)ptr->size-8;",
      "",
      "[Added Lines]",
      "165:  tmp_strsize=(u32)ptr->size;",
      "167:   ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "168:   ptr->meta_data = gf_strdup(tmp_str);",
      "169:  }",
      "171:  ptr->segment_run_table_count = gf_bs_read_u8(bs);",
      "172:  for (i=0; i<ptr->segment_run_table_count; i++) {",
      "173:   GF_AdobeSegmentRunTableBox *asrt = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "178:  ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "180:   gf_list_add(ptr->segment_run_table_entries, asrt);",
      "181:  }",
      "183:  ptr->fragment_run_table_count = gf_bs_read_u8(bs);",
      "184:  for (i=0; i<ptr->fragment_run_table_count; i++) {",
      "185:   GF_AdobeFragmentRunTableBox *afrt = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:  ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e74be5976a6fee059c638050a237893f7e9a3b23",
      "candidate_info": {
        "commit_hash": "e74be5976a6fee059c638050a237893f7e9a3b23",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/e74be5976a6fee059c638050a237893f7e9a3b23",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "src/isomedia/box_code_adobe.c"
        ],
        "message": "fixed #1753",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:   }\\",
          "600:   __ptr->size -= bytes; \\",
          "603: #define ISOM_DECREASE_SIZE_NO_ERR(__ptr, bytes) if (__ptr->size < (bytes) ) {\\",
          "604:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d), skipping box\\n\", gf_4cc_to_str(__ptr->type), (u32) __ptr->size, (bytes), __FILE__, __LINE__ )); \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602: #define ISOM_DECREASE_SIZE_GOTO_EXIT(__ptr, bytes) if (__ptr->size < (bytes) ) {\\",
          "603:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d)\\n\", gf_4cc_to_str(__ptr->type), (u32) __ptr->size, (bytes), __FILE__, __LINE__ )); \\",
          "604:    e = GF_ISOM_INVALID_FILE; \\",
          "605:    goto exit;\\",
          "606:   }\\",
          "607:   __ptr->size -= bytes; \\",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  u32 tmp_strsize;",
          "81:  char *tmp_str;",
          "82:  Bool zfound=GF_FALSE;",
          "85:  ISOM_DECREASE_SIZE(ptr, 25)",
          "86:  ptr->bootstrapinfo_version = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "83:  GF_Err e;",
          "",
          "[Added Lines]",
          "83:  GF_Err e = GF_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:  memset(tmp_str, 0, sizeof(char)*tmp_strsize);",
          "102:  while (tmp_strsize) {",
          "104:   tmp_str[i] = gf_bs_read_u8(bs);",
          "105:   tmp_strsize--;",
          "106:   if (!tmp_str[i]) {",
          "",
          "[Removed Lines]",
          "103:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "[Added Lines]",
          "103:   ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:   }",
          "110:   i++;",
          "111:  }",
          "114:  if (i) {",
          "115:   ptr->movie_identifier = gf_strdup(tmp_str);",
          "116:  }",
          "119:  ptr->server_entry_count = gf_bs_read_u8(bs);",
          "120:  for (i=0; i<ptr->server_entry_count; i++) {",
          "121:   int j=0;",
          "122:   zfound = GF_FALSE;",
          "123:   tmp_strsize=(u32)ptr->size;",
          "124:   while (tmp_strsize) {",
          "126:    tmp_str[j] = gf_bs_read_u8(bs);",
          "127:    tmp_strsize--;",
          "128:    if (!tmp_str[j]) {",
          "",
          "[Removed Lines]",
          "112:  if (!zfound)",
          "113:   return GF_ISOM_INVALID_FILE;",
          "118:  ISOM_DECREASE_SIZE(ptr, 1)",
          "125:    ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "[Added Lines]",
          "112:  if (!zfound) {",
          "113:   e = GF_ISOM_INVALID_FILE;",
          "114:   goto exit;",
          "115:  }",
          "120:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "127:    ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:    }",
          "132:    j++;",
          "133:   }",
          "136:   if (j) {",
          "137:    gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "138:   }",
          "139:  }",
          "142:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "143:  for (i=0; i<ptr->quality_entry_count; i++) {",
          "144:   int j=0;",
          "145:   zfound = GF_FALSE;",
          "146:   tmp_strsize=(u32)ptr->size;",
          "147:   while (tmp_strsize) {",
          "149:    tmp_str[j] = gf_bs_read_u8(bs);",
          "150:    tmp_strsize--;",
          "151:    if (!tmp_str[j]) {",
          "",
          "[Removed Lines]",
          "134:   if (!zfound)",
          "135:    return GF_ISOM_INVALID_FILE;",
          "141:  ISOM_DECREASE_SIZE(ptr, 1)",
          "148:    ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "[Added Lines]",
          "136:   if (!zfound) {",
          "137:    e = GF_ISOM_INVALID_FILE;",
          "138:    goto exit;",
          "139:   }",
          "144:  if (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {",
          "145:   e = GF_ISOM_INVALID_FILE;",
          "146:   goto exit;",
          "147:  }",
          "149:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "156:    ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:    j++;",
          "156:   }",
          "160:   if (j) {",
          "161:    gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "162:   }",
          "163:  }",
          "165:  i=0;",
          "166:  tmp_strsize=(u32)ptr->size;",
          "167:  zfound = GF_FALSE;",
          "168:  while (tmp_strsize) {",
          "170:   tmp_str[i] = gf_bs_read_u8(bs);",
          "171:   tmp_strsize--;",
          "172:   if (!tmp_str[i]) {",
          "",
          "[Removed Lines]",
          "158:   if (!zfound)",
          "159:    return GF_ISOM_INVALID_FILE;",
          "169:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "[Added Lines]",
          "166:   if (!zfound) {",
          "167:    e = GF_ISOM_INVALID_FILE;",
          "168:    goto exit;",
          "169:   }",
          "174:  if (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {",
          "175:   e = GF_ISOM_INVALID_FILE;",
          "176:   goto exit;",
          "177:  }",
          "183:   ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:   }",
          "176:   i++;",
          "177:  }",
          "180:  if (i) {",
          "181:   ptr->drm_data = gf_strdup(tmp_str);",
          "182:  }",
          "",
          "[Removed Lines]",
          "178:  if (!zfound)",
          "179:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "192:  if (!zfound) {",
          "193:   e = GF_ISOM_INVALID_FILE;",
          "194:   goto exit;",
          "195:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "185:  tmp_strsize=(u32)ptr->size;",
          "186:  zfound = GF_FALSE;",
          "187:  while (tmp_strsize) {",
          "189:   tmp_str[i] = gf_bs_read_u8(bs);",
          "190:   tmp_strsize--;",
          "191:   if (!tmp_str[i]) {",
          "",
          "[Removed Lines]",
          "188:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "[Added Lines]",
          "205:   ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "194:   }",
          "195:   i++;",
          "196:  }",
          "199:  if (i) {",
          "200:   ptr->meta_data = gf_strdup(tmp_str);",
          "201:  }",
          "204:  ptr->segment_run_table_count = gf_bs_read_u8(bs);",
          "205:  for (i=0; i<ptr->segment_run_table_count; i++) {",
          "206:   GF_AdobeSegmentRunTableBox *asrt = NULL;",
          "207:   e = gf_isom_box_parse((GF_Box **)&asrt, bs);",
          "208:   if (e) {",
          "209:    if (asrt) gf_isom_box_del((GF_Box*)asrt);",
          "212:   }",
          "213:   gf_list_add(ptr->segment_run_table_entries, asrt);",
          "214:  }",
          "217:  ptr->fragment_run_table_count = gf_bs_read_u8(bs);",
          "218:  for (i=0; i<ptr->fragment_run_table_count; i++) {",
          "219:   GF_AdobeFragmentRunTableBox *afrt = NULL;",
          "220:   e = gf_isom_box_parse((GF_Box **)&afrt, bs);",
          "221:   if (e) {",
          "222:    if (afrt) gf_isom_box_del((GF_Box*)afrt);",
          "225:   }",
          "226:   gf_list_add(ptr->fragment_run_table_entries, afrt);",
          "227:  }",
          "229:  gf_free(tmp_str);",
          "232: }",
          "234: GF_Box *abst_box_new()",
          "",
          "[Removed Lines]",
          "197:  if (!zfound)",
          "198:   return GF_ISOM_INVALID_FILE;",
          "203:  ISOM_DECREASE_SIZE(ptr, 1)",
          "210:    gf_free(tmp_str);",
          "211:    return e;",
          "216:  ISOM_DECREASE_SIZE(ptr, 1)",
          "223:    gf_free(tmp_str);",
          "224:    return e;",
          "231:  return GF_OK;",
          "",
          "[Added Lines]",
          "214:  if (!zfound) {",
          "215:   e = GF_ISOM_INVALID_FILE;",
          "216:   goto exit;",
          "217:  }",
          "223:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "230:    goto exit;",
          "234:  if (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {",
          "235:   e = GF_ISOM_INVALID_FILE;",
          "236:   goto exit;",
          "237:  }",
          "239:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
          "246:    goto exit;",
          "250:  if (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {",
          "251:   e = GF_ISOM_INVALID_FILE;",
          "252:   goto exit;",
          "253:  }",
          "255: exit:",
          "257:  return e;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bcca3f1d4605100bb27d3ed7be25b53cddbc75c",
      "candidate_info": {
        "commit_hash": "2bcca3f1d4605100bb27d3ed7be25b53cddbc75c",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/2bcca3f1d4605100bb27d3ed7be25b53cddbc75c",
        "files": [
          "src/isomedia/box_code_adobe.c"
        ],
        "message": "abst_Read: force last char of string to 0 for strdup (#1337)",
        "before_after_code_files": [
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: {",
          "77:  GF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;",
          "78:  int i;",
          "80:  char *tmp_str;",
          "81:  GF_Err e;",
          "",
          "[Removed Lines]",
          "79:  u32 tmp_strsize;",
          "",
          "[Added Lines]",
          "79:  u32 tmp_strsize, strsize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  i=0;",
          "93:  if (ptr->size<8) return GF_ISOM_INVALID_FILE;",
          "95:  tmp_str = gf_malloc(sizeof(char)*tmp_strsize);",
          "97:  while (tmp_strsize) {",
          "",
          "[Removed Lines]",
          "94:  tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Added Lines]",
          "94:  strsize = tmp_strsize=(u32)ptr->size-8;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:    break;",
          "102:   i++;",
          "103:  }",
          "105:   ptr->movie_identifier = gf_strdup(tmp_str);",
          "107:  ptr->server_entry_count = gf_bs_read_u8(bs);",
          "108:  for (i=0; i<ptr->server_entry_count; i++) {",
          "",
          "[Removed Lines]",
          "104:  if (i)",
          "",
          "[Added Lines]",
          "104:  if (i) {",
          "105:   tmp_str[strsize-1] = 0;",
          "107:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     break;",
          "116:    j++;",
          "117:   }",
          "118:   gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "119:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   tmp_str[strsize-1] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:     break;",
          "130:    j++;",
          "131:   }",
          "132:   gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "133:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:   tmp_str[strsize-1] = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:    break;",
          "142:   i++;",
          "143:  }",
          "145:   ptr->drm_data = gf_strdup(tmp_str);",
          "147:  i=0;",
          "148:  tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Removed Lines]",
          "144:  if (i)",
          "",
          "[Added Lines]",
          "148:  if (i) {",
          "149:   tmp_str[strsize-1] = 0;",
          "151:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153:    break;",
          "154:   i++;",
          "155:  }",
          "157:   ptr->meta_data = gf_strdup(tmp_str);",
          "159:  ptr->segment_run_table_count = gf_bs_read_u8(bs);",
          "160:  for (i=0; i<ptr->segment_run_table_count; i++) {",
          "",
          "[Removed Lines]",
          "156:  if (i)",
          "",
          "[Added Lines]",
          "162:  if (i) {",
          "163:   tmp_str[strsize-1] = 0;",
          "165:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbf947c4630fc6b67da3808d58f5e30fac138e41",
      "candidate_info": {
        "commit_hash": "dbf947c4630fc6b67da3808d58f5e30fac138e41",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/dbf947c4630fc6b67da3808d58f5e30fac138e41",
        "files": [
          "applications/mp4box/main.c",
          "include/gpac/internal/isomedia_dev.h",
          "include/gpac/tools.h",
          "src/filter_core/filter.c",
          "src/filters/mux_isom.c",
          "src/filters/reframe_nalu.c",
          "src/filters/write_generic.c",
          "src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/isom_intern.c",
          "src/isomedia/track.c",
          "src/media_tools/media_import.c",
          "src/utils/bitstream.c",
          "src/utils/error.c"
        ],
        "message": "fixed bugs from fuzzer",
        "before_after_code_files": [
          "applications/mp4box/main.c||applications/mp4box/main.c",
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "include/gpac/tools.h||include/gpac/tools.h",
          "src/filter_core/filter.c||src/filter_core/filter.c",
          "src/filters/mux_isom.c||src/filters/mux_isom.c",
          "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c",
          "src/filters/write_generic.c||src/filters/write_generic.c",
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c",
          "src/isomedia/track.c||src/isomedia/track.c",
          "src/media_tools/media_import.c||src/media_tools/media_import.c",
          "src/utils/bitstream.c||src/utils/bitstream.c",
          "src/utils/error.c||src/utils/error.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/main.c||applications/mp4box/main.c": [
          "File: applications/mp4box/main.c -> applications/mp4box/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4729:       gf_free(margs);",
          "4730:      }",
          "4738:      if (e) {",
          "4739:       fprintf(stderr, \"Error importing %s: %s\\n\", argv[i+1], gf_error_to_string(e));",
          "4740:       gf_isom_delete(file);",
          "",
          "[Removed Lines]",
          "4732:      if (sep) {",
          "4733:       sep[0] = '+';",
          "4734:       src = sep+1;",
          "4735:      } else {",
          "4736:       break;",
          "4737:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4742:        gf_fs_del(fs);",
          "4743:       return mp4box_cleanup(1);",
          "4744:      }",
          "4745:     }",
          "4746:     i++;",
          "4747:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4739:      if (sep) {",
          "4740:       sep[0] = '+';",
          "4741:       src = sep+1;",
          "4742:      } else {",
          "4743:       break;",
          "4744:      }",
          "",
          "---------------"
        ],
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4266: #define ERROR_ON_DUPLICATED_BOX(__abox, __parent) { \\",
          "4268:   strcpy(__ptype, gf_4cc_to_str(__parent->type) );\\",
          "4269:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] extra box %s found in %s, deleting\\n\", gf_4cc_to_str(__abox->type), __ptype)); \\",
          "4270:   gf_isom_box_del_parent(& (__parent->child_boxes), __abox);\\",
          "",
          "[Removed Lines]",
          "4267:   char __ptype[5];\\",
          "",
          "[Added Lines]",
          "4267:   char __ptype[GF_4CC_MSIZE];\\",
          "",
          "---------------"
        ],
        "include/gpac/tools.h||include/gpac/tools.h": [
          "File: include/gpac/tools.h -> include/gpac/tools.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #define GF_4CC(a,b,c,d) ((((u32)a)<<24)|(((u32)b)<<16)|(((u32)c)<<8)|((u32)d))",
          "74: #endif",
          "78: \\param type a four character code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #define GF_4CC_MSIZE 10",
          "",
          "---------------"
        ],
        "src/filter_core/filter.c||src/filter_core/filter.c": [
          "File: src/filter_core/filter.c -> src/filter_core/filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2985:      if (!(cap->flags & GF_CAPFLAG_INPUT)) continue;",
          "2986:      if (cap->code != GF_PROP_PID_FILE_EXT) continue;",
          "2987:      value = cap->val.value.string;",
          "2989:       const char *match = strstr(value, tmp_ext);",
          "2990:       if (!match) break;",
          "2991:       if (!match[ext_len] || (match[ext_len]=='|')) {",
          "",
          "[Removed Lines]",
          "2988:      while (value) {",
          "",
          "[Added Lines]",
          "2988:      while (value && ext_len) {",
          "",
          "---------------"
        ],
        "src/filters/mux_isom.c||src/filters/mux_isom.c": [
          "File: src/filters/mux_isom.c -> src/filters/mux_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3431:  if (!ctx->abs_offset) {",
          "3432:   u32 mval = ctx->dash_mode ? '6' : '5';",
          "3433:   u32 mbrand, mcount, found=0;",
          "3435:   gf_isom_set_fragment_option(ctx->file, 0, GF_ISOM_TFHD_FORCE_MOOF_BASE_OFFSET, 1);",
          "3437:   gf_isom_get_brand_info(ctx->file, &mbrand, NULL, &mcount);",
          "",
          "[Removed Lines]",
          "3434:   u8 szB[5];",
          "",
          "[Added Lines]",
          "3434:   u8 szB[GF_4CC_MSIZE];",
          "",
          "---------------"
        ],
        "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
          "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2919: static void naludmx_log_stats(GF_NALUDmxCtx *ctx)",
          "2920: {",
          "2921:  u32 i, count;",
          "2924:  if (ctx->nb_si || ctx->nb_sp) {",
          "2925:   GF_LOG(GF_LOG_INFO, GF_LOG_AUTHOR, (\"%s Import results: %d frames (%d NALUs) - Slices: %d I %d P %d B %d SP %d SI - %d SEI - %d IDR\\n\", ctx->log_name, nb_frames, ctx->nb_nalus, ctx->nb_i, ctx->nb_p, ctx->nb_b, ctx->nb_sp, ctx->nb_si, ctx->nb_sei, ctx->nb_idr ));",
          "",
          "[Removed Lines]",
          "2922:  u32 nb_frames = (u32) (ctx->dts / ctx->cur_fps.den);",
          "",
          "[Added Lines]",
          "2922:  u32 nb_frames = 0;",
          "2923:  if (ctx->cur_fps.den)",
          "2924:   nb_frames = (u32) (ctx->dts / ctx->cur_fps.den);",
          "",
          "---------------"
        ],
        "src/filters/write_generic.c||src/filters/write_generic.c": [
          "File: src/filters/write_generic.c -> src/filters/write_generic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: {",
          "76:  u32 cid, chan, sr, w, h, stype, pf, sfmt, av1mode, nb_bps;",
          "77:  const char *name, *mimetype;",
          "79:  const GF_PropertyValue *p;",
          "80:  GF_GenDumpCtx *ctx = gf_filter_get_udta(filter);",
          "",
          "[Removed Lines]",
          "78:  char szExt[10], szCodecExt[30], *sep;",
          "",
          "[Added Lines]",
          "78:  char szExt[GF_4CC_MSIZE], szCodecExt[30], *sep;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if (ptr->size<8) return GF_ISOM_INVALID_FILE;",
          "95:  strsize = tmp_strsize=(u32)ptr->size-8;",
          "96:  tmp_str = gf_malloc(sizeof(char)*tmp_strsize);",
          "98:  while (tmp_strsize) {",
          "99:   tmp_str[i] = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:  memset(tmp_str, 0, sizeof(char)*tmp_strsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   i++;",
          "104:  }",
          "105:  if (i) {",
          "107:   ptr->movie_identifier = gf_strdup(tmp_str);",
          "108:  }",
          "",
          "[Removed Lines]",
          "106:   tmp_str[strsize-1] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     break;",
          "119:    j++;",
          "120:   }",
          "123:  }",
          "125:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "121:   tmp_str[strsize-1] = 0;",
          "122:   gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "",
          "[Added Lines]",
          "121:   if (j) {",
          "122:    gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "123:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     break;",
          "134:    j++;",
          "135:   }",
          "138:  }",
          "140:  i=0;",
          "",
          "[Removed Lines]",
          "136:   tmp_str[strsize-1] = 0;",
          "137:   gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "",
          "[Added Lines]",
          "138:   if (j) {",
          "139:    gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "140:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:   i++;",
          "148:  }",
          "149:  if (i) {",
          "151:   ptr->drm_data = gf_strdup(tmp_str);",
          "152:  }",
          "",
          "[Removed Lines]",
          "150:   tmp_str[strsize-1] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:   i++;",
          "162:  }",
          "163:  if (i) {",
          "165:   ptr->meta_data = gf_strdup(tmp_str);",
          "166:  }",
          "",
          "[Removed Lines]",
          "164:   tmp_str[strsize-1] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  if (e) return e;",
          "165:  gf_bs_write_u32(bs, ptr->scheme_type);",
          "166:  gf_bs_write_u32(bs, ptr->scheme_version);",
          "168:  return GF_OK;",
          "169: }",
          "",
          "[Removed Lines]",
          "167:  if (ptr->flags & 0x000001) gf_bs_write_data(bs, ptr->URI, (u32) strlen(ptr->URI)+1);",
          "",
          "[Added Lines]",
          "167:  if (ptr->flags & 0x000001) {",
          "168:   if (ptr->URI)",
          "169:    gf_bs_write_data(bs, ptr->URI, (u32) strlen(ptr->URI)+1);",
          "170:   else",
          "171:    gf_bs_write_u8(bs, 0);",
          "172:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  GF_SchemeTypeBox *ptr = (GF_SchemeTypeBox *) s;",
          "174:  if (!s) return GF_BAD_PARAM;",
          "175:  ptr->size += 8;",
          "177:  return GF_OK;",
          "178: }",
          "",
          "[Removed Lines]",
          "176:  if (ptr->flags & 0x000001) ptr->size += strlen(ptr->URI)+1;",
          "",
          "[Added Lines]",
          "181:  if (ptr->flags & 0x000001) ptr->size += 1 + (ptr->URI ? strlen(ptr->URI) : 0);",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1516:     if (is_root_box) {",
          "1517:      GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown top-level box type %s\\n\", gf_4cc_to_str(boxType)));",
          "1518:     } else if (parentType) {",
          "1520:      strcpy(szName, gf_4cc_to_str(parentType));",
          "1521:      GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown box type %s in parent %s\\n\", gf_4cc_to_str(boxType), szName));",
          "1522:     } else {",
          "",
          "[Removed Lines]",
          "1519:      char szName[10];",
          "",
          "[Added Lines]",
          "1519:      char szName[GF_4CC_MSIZE];",
          "",
          "---------------"
        ],
        "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c": [
          "File: src/isomedia/isom_intern.c -> src/isomedia/isom_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   }",
          "116:  }",
          "120:  if (mov->moov->mvhd->duration < MaxDur) mov->moov->mvhd->duration = MaxDur;",
          "121:  return GF_OK;",
          "",
          "[Removed Lines]",
          "118:  mov->NextMoofNumber = moof->mfhd->sequence_number;",
          "",
          "[Added Lines]",
          "118:  mov->NextMoofNumber = moof->mfhd ? moof->mfhd->sequence_number : 0;",
          "",
          "---------------"
        ],
        "src/isomedia/track.c||src/isomedia/track.c": [
          "File: src/isomedia/track.c -> src/isomedia/track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:    ent->CTS_Offset = cts_offset;",
          "667:    stbl_AppendSize(trak->Media->information->sampleTable, size, ent->nb_pack);",
          "669:    stbl_AppendTime(trak->Media->information->sampleTable, duration, ent->nb_pack);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667:    if (!trak->Media->information->sampleTable->SampleSize) {",
          "668:     trak->Media->information->sampleTable->SampleSize = (GF_SampleSizeBox *) gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STSZ);",
          "669:     if (!trak->Media->information->sampleTable->SampleSize)",
          "670:      return GF_OUT_OF_MEM;",
          "671:    }",
          "675:    if (!trak->Media->information->sampleTable->TimeToSample) {",
          "676:     trak->Media->information->sampleTable->TimeToSample = (GF_TimeToSampleBox *) gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STTS);",
          "677:     if (!trak->Media->information->sampleTable->TimeToSample)",
          "678:      return GF_OUT_OF_MEM;",
          "679:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "706:     if (trak->moov->compressed_diff) {",
          "707:      final_offset += trak->moov->compressed_diff;",
          "708:     }",
          "709:     stbl_AppendChunk(trak->Media->information->sampleTable, final_offset);",
          "711:     stbl_AppendSampleToChunk(trak->Media->information->sampleTable,",
          "712:                              DescIndex, trun->sample_count);",
          "713:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721:     if (!trak->Media->information->sampleTable->ChunkOffset) {",
          "722:      trak->Media->information->sampleTable->ChunkOffset = gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STCO);",
          "723:      if (!trak->Media->information->sampleTable->ChunkOffset)",
          "724:       return GF_OUT_OF_MEM;",
          "725:     }",
          "728:     if (!trak->Media->information->sampleTable->SampleToChunk) {",
          "729:      trak->Media->information->sampleTable->SampleToChunk = (GF_SampleToChunkBox *) gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STSC);",
          "730:      if (!trak->Media->information->sampleTable->SampleToChunk)",
          "731:       return GF_OUT_OF_MEM;",
          "732:     }",
          "",
          "---------------"
        ],
        "src/media_tools/media_import.c||src/media_tools/media_import.c": [
          "File: src/media_tools/media_import.c -> src/media_tools/media_import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   break;",
          "447:  default:",
          "448:  {",
          "450:   mstype = gf_isom_get_mpeg4_subtype(import->orig, track_in, di);",
          "451:   if (!mstype) mstype = gf_isom_get_media_subtype(import->orig, track_in, di);",
          "452:   strcpy(szT, gf_4cc_to_str(mtype));",
          "",
          "[Removed Lines]",
          "449:   char szT[5];",
          "",
          "[Added Lines]",
          "449:   char szT[GF_4CC_MSIZE];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1412:   if (esd) gf_odf_desc_del((GF_Descriptor *) esd);",
          "1413:  }",
          "1416:  if (importer->print_stats_graph & 1) gf_fs_print_stats(fsess);",
          "1417:  if (importer->print_stats_graph & 2) gf_fs_print_connections(fsess);",
          "1418:  gf_fs_del(fsess);",
          "1419:  return GF_OK;",
          "1420: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1419:  if (!importer->final_trackID) {",
          "1420:   return gf_import_message(importer, GF_NOT_SUPPORTED, \"[Importer] No valid track to import in input file \\\"%s\\\"\", importer->in_name);",
          "1421:  }",
          "",
          "---------------"
        ],
        "src/utils/bitstream.c||src/utils/bitstream.c": [
          "File: src/utils/bitstream.c -> src/utils/bitstream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:  default:",
          "1206:   if (bs->buffer_io)",
          "1207:    bs_flush_cache(bs);",
          "1212:   return bs->size;",
          "1213:  }",
          "1214: }",
          "",
          "[Removed Lines]",
          "1208:   offset = gf_ftell(bs->stream);",
          "1209:   gf_fseek(bs->stream, 0, SEEK_END);",
          "1210:   bs->size = gf_ftell(bs->stream);",
          "1211:   gf_fseek(bs->stream, offset, SEEK_SET);",
          "",
          "[Added Lines]",
          "1208:   if (bs->stream) {",
          "1209:    offset = gf_ftell(bs->stream);",
          "1210:    gf_fseek(bs->stream, 0, SEEK_END);",
          "1211:    bs->size = gf_ftell(bs->stream);",
          "1212:    gf_fseek(bs->stream, offset, SEEK_SET);",
          "1213:   }",
          "",
          "---------------"
        ],
        "src/utils/error.c||src/utils/error.c": [
          "File: src/utils/error.c -> src/utils/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define NB_4CC_BUF 10",
          "32: static u32 buf_4cc_idx=0;",
          "34: GF_EXPORT",
          "",
          "[Removed Lines]",
          "31: static char szTYPE_BUF[NB_4CC_BUF][9];",
          "",
          "[Added Lines]",
          "31: static char szTYPE_BUF[NB_4CC_BUF][GF_4CC_MSIZE];",
          "",
          "---------------"
        ]
      }
    }
  ]
}