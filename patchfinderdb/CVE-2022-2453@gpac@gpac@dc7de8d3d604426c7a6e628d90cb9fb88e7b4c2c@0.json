{
  "cve_id": "CVE-2022-2453",
  "cve_desc": "Use After Free in GitHub repository gpac/gpac prior to 2.1-DEV.",
  "repo": "gpac/gpac",
  "patch_hash": "dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
  "patch_info": {
    "commit_hash": "dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
    "files": [
      "src/bifs/field_decode.c"
    ],
    "message": "fixed #2212",
    "before_after_code_files": [
      "src/bifs/field_decode.c||src/bifs/field_decode.c"
    ]
  },
  "patch_diff": {
    "src/bifs/field_decode.c||src/bifs/field_decode.c": [
      "File: src/bifs/field_decode.c -> src/bifs/field_decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "427:    e = gf_bifs_dec_sf_field(codec, bs, node, &sffield, GF_FALSE);",
      "428:    if (e) return e;",
      "429:   }",
      "459:       e = gf_node_list_add_child_last(field->far_ptr, new_node, &last);",
      "461:      }",
      "462:     }",
      "471:    }",
      "472:   }",
      "483:   }",
      "484:  }",
      "486:  if (qp_on) gf_bifs_dec_qp_remove(codec, GF_TRUE);",
      "488: }",
      "",
      "[Removed Lines]",
      "430:  } else {",
      "431:   last = NULL;",
      "432:   for (i=0; i<nbFields; i++) {",
      "433:    GF_Node *new_node = gf_bifs_dec_node(codec, bs, field->NDTtype);",
      "434:    if (new_node) {",
      "435:     e = gf_node_register(new_node, is_mem_com ? NULL : node);",
      "436:     if (e) return e;",
      "438:     if (node) {",
      "440:      if (gf_node_get_tag(new_node) == TAG_MPEG4_QuantizationParameter) {",
      "441:       qp_local = ((M_QuantizationParameter *)new_node)->isLocal;",
      "443:       NB: we assume this is the right behavior, the spec doesn't say",
      "445:       if (qp_on) gf_bifs_dec_qp_remove(codec, GF_FALSE);",
      "447:       e = gf_bifs_dec_qp_set(codec, new_node);",
      "448:       if (e) return e;",
      "449:       qp_on = 1;",
      "450:       if (qp_local) qp_local = 2;",
      "451:       if (codec->force_keep_qp) {",
      "452:        e = gf_node_list_add_child_last(field->far_ptr, new_node, &last);",
      "453:        if (e) return e;",
      "454:       } else {",
      "455:        gf_node_register(new_node, NULL);",
      "456:        gf_node_unregister(new_node, node);",
      "457:       }",
      "458:      } else {",
      "460:       if (e) return e;",
      "464:     else if (codec->pCurrentProto) {",
      "466:      e = gf_node_list_add_child_last( (GF_ChildNodeItem **)field->far_ptr, new_node, &last);",
      "467:      if (e) return e;",
      "468:     }",
      "469:    } else {",
      "470:     return codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;",
      "475:   if (qp_on && qp_local) {",
      "476:    if (qp_local == 2) {",
      "478:    } else {",
      "480:     gf_bifs_dec_qp_remove(codec, initial_qp);",
      "482:    }",
      "487:  return GF_OK;",
      "",
      "[Added Lines]",
      "430:   return GF_OK;",
      "431:  }",
      "433:  e = GF_OK;",
      "434:  last = NULL;",
      "435:  for (i=0; i<nbFields; i++) {",
      "436:   GF_Node *new_node = gf_bifs_dec_node(codec, bs, field->NDTtype);",
      "437:   if (new_node) {",
      "438:    e = gf_node_register(new_node, is_mem_com ? NULL : node);",
      "439:    if (e) goto exit;",
      "441:    if (node) {",
      "443:     if (gf_node_get_tag(new_node) == TAG_MPEG4_QuantizationParameter) {",
      "444:      qp_local = ((M_QuantizationParameter *)new_node)->isLocal;",
      "446:      NB: we assume this is the right behavior, the spec doesn't say",
      "448:      if (qp_on) gf_bifs_dec_qp_remove(codec, GF_FALSE);",
      "450:      e = gf_bifs_dec_qp_set(codec, new_node);",
      "451:      if (e) goto exit;",
      "452:      qp_on = 1;",
      "453:      if (qp_local) qp_local = 2;",
      "454:      if (codec->force_keep_qp) {",
      "456:       if (e) goto exit;",
      "457:      } else {",
      "458:       gf_node_register(new_node, NULL);",
      "459:       gf_node_unregister(new_node, node);",
      "461:     } else {",
      "462:      e = gf_node_list_add_child_last(field->far_ptr, new_node, &last);",
      "463:      if (e) goto exit;",
      "467:    else if (codec->pCurrentProto) {",
      "469:     e = gf_node_list_add_child_last( (GF_ChildNodeItem **)field->far_ptr, new_node, &last);",
      "470:     if (e)goto exit;",
      "471:    }",
      "472:   } else {",
      "473:    e = codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;",
      "474:    goto exit;",
      "476:  }",
      "478: exit:",
      "482:  if (qp_on && qp_local) {",
      "483:   if (qp_local == 2) {",
      "485:   } else {",
      "487:    gf_bifs_dec_qp_remove(codec, initial_qp);",
      "494:  return e;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a96df00059a0f4198790249cce13f308435e351a",
      "candidate_info": {
        "commit_hash": "a96df00059a0f4198790249cce13f308435e351a",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/a96df00059a0f4198790249cce13f308435e351a",
        "files": [
          "applications/mp4box/fileimport.c",
          "applications/mp4client/main.c",
          "applications/testapps/atscdmx/main.c",
          "modules/alsa/alsa.c",
          "modules/deprecated/oss_audio/oss.c",
          "modules/pulseaudio/pulseaudio.c",
          "src/bifs/field_decode.c",
          "src/bifs/field_encode.c",
          "src/compositor/media_object.c",
          "src/compositor/mpeg4_textures.c",
          "src/compositor/object_manager.c",
          "src/filters/dec_bifs.c",
          "src/filters/dec_laser.c",
          "src/filters/dec_odf.c",
          "src/filters/dec_ttml.c",
          "src/filters/dmx_ogg.c",
          "src/filters/ff_common.c",
          "src/filters/ff_enc.c",
          "src/filters/ff_rescale.c",
          "src/filters/filelist.c",
          "src/filters/in_file.c",
          "src/filters/in_http.c",
          "src/filters/in_rtp_rtsp.c",
          "src/filters/in_rtp_sdp.c"
        ],
        "message": "use compact ternary condition",
        "before_after_code_files": [
          "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c",
          "applications/mp4client/main.c||applications/mp4client/main.c",
          "applications/testapps/atscdmx/main.c||applications/testapps/atscdmx/main.c",
          "modules/alsa/alsa.c||modules/alsa/alsa.c",
          "modules/deprecated/oss_audio/oss.c||modules/deprecated/oss_audio/oss.c",
          "modules/pulseaudio/pulseaudio.c||modules/pulseaudio/pulseaudio.c",
          "src/bifs/field_decode.c||src/bifs/field_decode.c",
          "src/bifs/field_encode.c||src/bifs/field_encode.c",
          "src/compositor/media_object.c||src/compositor/media_object.c",
          "src/compositor/mpeg4_textures.c||src/compositor/mpeg4_textures.c",
          "src/compositor/object_manager.c||src/compositor/object_manager.c",
          "src/filters/dec_bifs.c||src/filters/dec_bifs.c",
          "src/filters/dec_laser.c||src/filters/dec_laser.c",
          "src/filters/dec_odf.c||src/filters/dec_odf.c",
          "src/filters/dec_ttml.c||src/filters/dec_ttml.c",
          "src/filters/dmx_ogg.c||src/filters/dmx_ogg.c",
          "src/filters/ff_common.c||src/filters/ff_common.c",
          "src/filters/ff_enc.c||src/filters/ff_enc.c",
          "src/filters/ff_rescale.c||src/filters/ff_rescale.c",
          "src/filters/filelist.c||src/filters/filelist.c",
          "src/filters/in_file.c||src/filters/in_file.c",
          "src/filters/in_http.c||src/filters/in_http.c",
          "src/filters/in_rtp_rtsp.c||src/filters/in_rtp_rtsp.c",
          "src/filters/in_rtp_sdp.c||src/filters/in_rtp_sdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bifs/field_decode.c||src/bifs/field_decode.c"
          ],
          "candidate": [
            "src/bifs/field_decode.c||src/bifs/field_decode.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c": [
          "File: applications/mp4box/fileimport.c -> applications/mp4box/fileimport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1722:    video_ref_dur /= gf_isom_get_media_timescale(dest, video_ref);",
          "1723:    e = gf_isom_set_last_sample_duration(dest, tmcd_tk, (u32) video_ref_dur);",
          "1724:   } else {",
          "1726:   }",
          "1727:   GOTO_EXIT(\"setting TMCD sample dur\")",
          "1728:  }",
          "",
          "[Removed Lines]",
          "1725:    e = gf_isom_set_last_sample_duration(dest, tmcd_tk, tc_fps_den ? tc_fps_den : 1);",
          "",
          "[Added Lines]",
          "1725:    e = gf_isom_set_last_sample_duration(dest, tmcd_tk, tc_fps_den ?: 1);",
          "",
          "---------------"
        ],
        "applications/mp4client/main.c||applications/mp4client/main.c": [
          "File: applications/mp4client/main.c -> applications/mp4client/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:   if ((forced_width && forced_height) || scale) {",
          "933:    GF_Event size;",
          "937:    if (scale != 1) {",
          "938:     nw  = (u32)(nw * scale);",
          "",
          "[Removed Lines]",
          "934:    u32 nw = forced_width ? forced_width : evt->size.width;",
          "935:    u32 nh = forced_height ? forced_height : evt->size.height;",
          "",
          "[Added Lines]",
          "934:    u32 nw = forced_width ?: evt->size.width;",
          "935:    u32 nh = forced_height ?: evt->size.height;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:  case GF_EVENT_QUIT:",
          "980:   if (evt->message.error<0)  {",
          "982:   } else {",
          "983:    ret_val = evt->message.error;",
          "984:   }",
          "",
          "[Removed Lines]",
          "981:    fprintf(stderr, \"A fatal error was encoutered: %s (%s) - exiting ...\\n\", evt->message.message ? evt->message.message : \"no details\", gf_error_to_string(evt->message.error) );",
          "",
          "[Added Lines]",
          "981:    fprintf(stderr, \"A fatal error was encoutered: %s (%s) - exiting ...\\n\", evt->message.message ?: \"no details\", gf_error_to_string(evt->message.error) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2424:  if (!title && !gf_list_count(descs)) {",
          "2425:   fprintf(stderr, \"No World Info available\\n\");",
          "2426:  } else {",
          "2428:   for (i=0; i<gf_list_count(descs); i++) {",
          "2429:    char *str = gf_list_get(descs, i);",
          "2430:    fprintf(stderr, \"%s\\n\", str);",
          "",
          "[Removed Lines]",
          "2427:   fprintf(stderr, \"\\t%s\\n\", title ? title : \"No title available\");",
          "",
          "[Added Lines]",
          "2427:   fprintf(stderr, \"\\t%s\\n\", title ?: \"No title available\");",
          "",
          "---------------"
        ],
        "applications/testapps/atscdmx/main.c||applications/testapps/atscdmx/main.c": [
          "File: applications/testapps/atscdmx/main.c -> applications/testapps/atscdmx/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static u64 last_log_time=0;",
          "39: static void on_atscd_log(void *cbk, GF_LOG_Level ll, GF_LOG_Tool lm, const char *fmt, va_list list)",
          "40: {",
          "42:  if (log_time_start) {",
          "43:   u64 now = gf_sys_clock_high_res();",
          "44:   fprintf(logs, \"At \"LLD\" (diff %d) - \", now - log_time_start, (u32) (now - last_log_time) );",
          "",
          "[Removed Lines]",
          "41:  FILE *logs = cbk ? cbk : stderr;",
          "",
          "[Added Lines]",
          "41:  FILE *logs = cbk ?: stderr;",
          "",
          "---------------"
        ],
        "modules/alsa/alsa.c||modules/alsa/alsa.c": [
          "File: modules/alsa/alsa.c -> modules/alsa/alsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   GF_LOG(GF_LOG_ERROR, GF_LOG_MMIO, (\"[ALSA] Cannot open audio device %s: %s\\n\", ctx->dev_name, snd_strerror (err)) );",
          "62:   return GF_IO_ERR;",
          "63:  }",
          "66:  return GF_OK;",
          "67: }",
          "",
          "[Removed Lines]",
          "64:  ctx->num_buffers = num_buffers ? num_buffers : 2;",
          "65:  ctx->total_duration = total_duration ? total_duration : 100;",
          "",
          "[Added Lines]",
          "64:  ctx->num_buffers = num_buffers ?: 2;",
          "65:  ctx->total_duration = total_duration ?: 100;",
          "",
          "---------------"
        ],
        "modules/deprecated/oss_audio/oss.c||modules/deprecated/oss_audio/oss.c": [
          "File: modules/deprecated/oss_audio/oss.c -> modules/deprecated/oss_audio/oss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  ctx->sr = (*SampleRate);",
          "141:  if(ioctl(ctx->audio_dev, SNDCTL_DSP_SPEED,&ctx->sr)==-1) return GF_IO_ERR;",
          "144:  ctx->buf_size = (*SampleRate * blockalign * ctx->total_duration) / (1000 * nb_bufs);",
          "145:  frag_spec = 4;",
          "146:  while (ctx->buf_size > (1<<(frag_spec+1)))",
          "",
          "[Removed Lines]",
          "143:  nb_bufs = ctx->num_buffers ? ctx->num_buffers : 8;",
          "",
          "[Added Lines]",
          "143:  nb_bufs = ctx->num_buffers ? : 8;",
          "",
          "---------------"
        ],
        "modules/pulseaudio/pulseaudio.c||modules/pulseaudio/pulseaudio.c": [
          "File: modules/pulseaudio/pulseaudio.c -> modules/pulseaudio/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  ctx->output_name = opt ? ctx->output_name : \"GPAC\";",
          "73:  opt = gf_opts_get_key(\"PulseAudio\", \"Description\");",
          "75:  return GF_OK;",
          "76: }",
          "",
          "[Removed Lines]",
          "74:  ctx->output_description = opt  ? opt  : \"GPAC Output\";",
          "",
          "[Added Lines]",
          "74:  ctx->output_description = opt ?: \"GPAC Output\";",
          "",
          "---------------"
        ],
        "src/bifs/field_decode.c||src/bifs/field_decode.c": [
          "File: src/bifs/field_decode.c -> src/bifs/field_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:      if (e) return e;",
          "441:     }",
          "442:    } else {",
          "444:    }",
          "445:   }",
          "",
          "[Removed Lines]",
          "443:     return codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "[Added Lines]",
          "443:     return codec->LastError ?: GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "---------------"
        ],
        "src/bifs/field_encode.c||src/bifs/field_encode.c": [
          "File: src/bifs/field_encode.c -> src/bifs/field_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:    FILE *f;",
          "101:    if (codec->src_url) res_src = gf_url_concatenate(codec->src_url, src);",
          "104:    if (!f) {",
          "106:     return GF_URL_ERROR;",
          "107:    }",
          "108:    if (res_src) gf_free(res_src);",
          "",
          "[Removed Lines]",
          "103:    f = gf_fopen(res_src ? res_src : src, \"rb\");",
          "105:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODEC, (\"[BIFS] Cannot open source file %s for encoding CacheTexture\\n\", res_src ? res_src : src));",
          "",
          "[Added Lines]",
          "103:    f = gf_fopen(res_src ?: src, \"rb\");",
          "105:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODEC, (\"[BIFS] Cannot open source file %s for encoding CacheTexture\\n\", res_src ?: src));",
          "",
          "---------------"
        ],
        "src/compositor/media_object.c||src/compositor/media_object.c": [
          "File: src/compositor/media_object.c -> src/compositor/media_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:  if (changed) {",
          "413:   GF_Event evt;",
          "415:   memset(&evt, 0, sizeof(GF_Event));",
          "416:   evt.type = GF_EVENT_QUALITY_SWITCHED;",
          "417:   gf_sc_send_event(scene->compositor, &evt);",
          "",
          "[Removed Lines]",
          "414:   GF_Scene *scene = mo->odm->subscene ? mo->odm->subscene : mo->odm->parentscene;",
          "",
          "[Added Lines]",
          "414:   GF_Scene *scene = mo->odm->subscene ?: mo->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/compositor/mpeg4_textures.c||src/compositor/mpeg4_textures.c": [
          "File: src/compositor/mpeg4_textures.c -> src/compositor/mpeg4_textures.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     ct->data = NULL;",
          "306:     ct->data_len = 0;",
          "309:     if (e) {",
          "311:     }",
          "312:     if (ct->image.buffer) gf_free(ct->image.buffer);",
          "313:     ct->image.buffer = NULL;",
          "",
          "[Removed Lines]",
          "308:     e = gf_file_load_data(src_url ? src_url : ct->image.buffer, &ct->data, &ct->data_len);",
          "310:      GF_LOG(GF_LOG_ERROR, GF_LOG_COMPOSE, (\"[Compositor] Failed to load CacheTexture data from file %s: %s\\n\", src_url ? src_url : ct->image.buffer, gf_error_to_string(e) ) );",
          "",
          "[Added Lines]",
          "308:     e = gf_file_load_data(src_url ?: ct->image.buffer, &ct->data, &ct->data_len);",
          "310:      GF_LOG(GF_LOG_ERROR, GF_LOG_COMPOSE, (\"[Compositor] Failed to load CacheTexture data from file %s: %s\\n\", src_url ?: ct->image.buffer, gf_error_to_string(e) ) );",
          "",
          "---------------"
        ],
        "src/compositor/object_manager.c||src/compositor/object_manager.c": [
          "File: src/compositor/object_manager.c -> src/compositor/object_manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:    return;",
          "308:   }",
          "311:   if (odm->scene_ns)",
          "312:    odm->scene_ns->nb_odm_users++;",
          "313:  }",
          "",
          "[Removed Lines]",
          "310:   odm->scene_ns = parent_ns ? parent_ns : odm->parentscene->root_od->scene_ns;",
          "",
          "[Added Lines]",
          "310:   odm->scene_ns = parent_ns ?: odm->parentscene->root_od->scene_ns;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "715:  if ((u32) dur > odm->duration) {",
          "716:   odm->duration = (u32) dur;",
          "719:  }",
          "721:  prop = gf_filter_pid_get_property(pid, GF_PROP_PID_HAS_TEMI);",
          "",
          "[Removed Lines]",
          "718:   gf_scene_set_duration(odm->subscene ? odm->subscene : odm->parentscene);",
          "",
          "[Added Lines]",
          "718:   gf_scene_set_duration(odm->subscene ?: odm->parentscene);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "759:  Bool start_range_is_clock = 0;",
          "760:  Double ck_time;",
          "761:  GF_Clock *clock = odm->ck;",
          "763: #ifndef GPAC_DISABLE_VRML",
          "764:  MediaControlStack *ctrl;",
          "765: #endif",
          "",
          "[Removed Lines]",
          "762:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "762:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:    gf_odm_service_media_event(root, GF_EVENT_MEDIA_ENDED);",
          "1173:   }",
          "1174:  } else {",
          "1176:   if (scene && odm->parentscene && gf_sc_check_end_of_scene(scene->compositor, 0)) {",
          "1177:    GF_Event evt;",
          "1178:    evt.type = GF_EVENT_EOS;",
          "",
          "[Removed Lines]",
          "1175:   GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1175:   GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1189:   return;",
          "1191:  odm->timeshift_depth = stream_timeshift;",
          "1195:  gf_scene_set_timeshift_depth(scene);",
          "",
          "[Removed Lines]",
          "1192:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1192:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221: #endif",
          "1222:  GF_ODMExtraPid *xpid;",
          "1223:  GF_FilterEvent com;",
          "1226:  if (odm->state != GF_ODM_STATE_PLAY) {",
          "1227:   odm->flags |= GF_ODM_PAUSE_QUEUED;",
          "",
          "[Removed Lines]",
          "1224:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1224:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1287:  MediaSensorStack *media_sens;",
          "1288:  MediaControlStack *ctrl;",
          "1289: #endif",
          "1291:  GF_ODMExtraPid *xpid;",
          "1292:  GF_FilterEvent com;",
          "",
          "[Removed Lines]",
          "1290:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1290:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1349:  u32 i;",
          "1350:  GF_ODMExtraPid *xpid;",
          "1351:  GF_FilterEvent com;",
          "1354:  if (odm->flags & GF_ODM_NO_TIME_CTRL) return;",
          "1355:  if (!odm->pid) return;",
          "",
          "[Removed Lines]",
          "1352:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1352:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1537:  if (!pid)",
          "1538:   pid = odm->pid;",
          "1541:  if (!scene) return GF_FALSE;",
          "1542:  pck = gf_filter_pid_get_packet(pid);",
          "1543:  ck_type = gf_filter_pid_get_clock_info(pid, &clock_reference, &timescale);",
          "",
          "[Removed Lines]",
          "1540:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1540:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1629:    if (diff_pck_old_clock > diff_pck_new_clock) {",
          "1630:     u32 i, count;",
          "1632:     GF_LOG(GF_LOG_INFO, GF_LOG_SYNC, (\"Clock %d (ODM %d) discontinuity detected \"LLU\" clock time %d - diff %d - type %d - pck time \"LLU\"\\n\", odm->ck->clock_id, odm->ID, clock_reference, clock_time, diff, ck_type, pck_time-1));",
          "1634:     count = gf_list_count(in_scene->resources);",
          "",
          "[Removed Lines]",
          "1631:     GF_Scene *in_scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1631:     GF_Scene *in_scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1727:  evt.media_event.bufferValid = GF_FALSE;",
          "1728:  evt.media_event.session_name = odm->scene_ns->url;",
          "1731:  if (!scene) return;",
          "1733:  if (!buffer_level_plus_one) {",
          "",
          "[Removed Lines]",
          "1730:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "1730:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2028:  odm->ck->media_time_at_init = (u32) (media_time * 1000);",
          "2029:  odm->ck->has_media_time_shift = GF_TRUE;",
          "2032:  if (!scene) return;",
          "2033:  if (scene->root_od)",
          "2034:   scene->root_od->media_current_time = 0;",
          "",
          "[Removed Lines]",
          "2031:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "[Added Lines]",
          "2031:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_bifs.c||src/filters/dec_bifs.c": [
          "File: src/filters/dec_bifs.c -> src/filters/dec_bifs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:   if (opid == com->attach_scene.on_pid) {",
          "252:    if (!ctx->odm) {",
          "253:     ctx->odm = com->attach_scene.object_manager;",
          "255:    }",
          "256:    bifs_dec_configure_bifs_dec(ctx, ipid);",
          "257:    gf_filter_pid_set_udta(opid, com->attach_scene.object_manager);",
          "",
          "[Removed Lines]",
          "254:     ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "254:     ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_laser.c||src/filters/dec_laser.c": [
          "File: src/filters/dec_laser.c -> src/filters/dec_laser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   if (opid == com->attach_scene.on_pid) {",
          "134:    if (!ctx->odm) {",
          "135:     ctx->odm = com->attach_scene.object_manager;",
          "138:     ctx->codec = gf_laser_decoder_new(ctx->scene->graph);",
          "",
          "[Removed Lines]",
          "136:     ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "136:     ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_odf.c||src/filters/dec_odf.c": [
          "File: src/filters/dec_odf.c -> src/filters/dec_odf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "489:   if (opid == com->attach_scene.on_pid) {",
          "490:    if (!ctx->odm) {",
          "491:     ctx->odm = com->attach_scene.object_manager;",
          "493:    }",
          "494:    gf_filter_pid_set_udta(opid, com->attach_scene.object_manager);",
          "495:    return GF_TRUE;",
          "",
          "[Removed Lines]",
          "492:     ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "492:     ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_ttml.c||src/filters/dec_ttml.c": [
          "File: src/filters/dec_ttml.c -> src/filters/dec_ttml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:  if (ctx->opid != com->attach_scene.on_pid) return GF_TRUE;",
          "227:  ctx->odm = com->attach_scene.object_manager;",
          "231:  if (ctx->odm->subscene) {",
          "",
          "[Removed Lines]",
          "228:  ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "228:  ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dmx_ogg.c||src/filters/dmx_ogg.c": [
          "File: src/filters/dmx_ogg.c -> src/filters/dmx_ogg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_STREAM_TYPE, &PROP_UINT(st->info.streamType) );",
          "218:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_CODECID, &PROP_UINT(st->info.type) );",
          "219:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_BITRATE, &PROP_UINT(st->info.bitrate) );",
          "221:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_PROFILE_LEVEL, &PROP_UINT(0xFE) );",
          "",
          "[Removed Lines]",
          "220:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(st->info.sample_rate ? st->info.sample_rate : st->info.frame_rate.den) );",
          "",
          "[Added Lines]",
          "220:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(st->info.sample_rate ?: st->info.frame_rate.den) );",
          "",
          "---------------"
        ],
        "src/filters/ff_common.c||src/filters/ff_common.c": [
          "File: src/filters/ff_common.c -> src/filters/ff_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1015:     caps[1].code = fmt->extensions ? GF_PROP_PID_FILE_EXT : GF_PROP_PID_MIME;",
          "1016:     caps[1].val.type = GF_PROP_NAME;",
          "1017: #if LIBAVCODEC_VERSION_MAJOR >= 58",
          "1019: #else",
          "1020:    caps[1].val.value.string = (char *) fmt->extensions;",
          "1021: #endif",
          "",
          "[Removed Lines]",
          "1018:    caps[1].val.value.string = (char *) ( fmt->extensions ? fmt->extensions : fmt->mime_type );",
          "",
          "[Added Lines]",
          "1018:    caps[1].val.value.string = (char *) ( fmt->extensions ?: fmt->mime_type );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1057:    caps[1].code = ofmt->extensions ? GF_PROP_PID_FILE_EXT : GF_PROP_PID_MIME;",
          "1058:    caps[1].val.type = GF_PROP_NAME;",
          "1059: #if LIBAVCODEC_VERSION_MAJOR >= 58",
          "1061: #else",
          "1062:    caps[1].val.value.string = (char *) ofmt->extensions;",
          "1063: #endif",
          "",
          "[Removed Lines]",
          "1060:    caps[1].val.value.string = (char *) ( ofmt->extensions ? ofmt->extensions : ofmt->mime_type );",
          "",
          "[Added Lines]",
          "1060:    caps[1].val.value.string = (char *) ( ofmt->extensions ?: ofmt->mime_type );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1298:      GF_FilterArgs an_arg = ffmpeg_arg_translate(opt);",
          "1299:      if (!(par_arg->flags & GF_FS_ARG_META_ALLOC)) {",
          "1302:       par_arg->flags |= GF_FS_ARG_META_ALLOC;",
          "1304:       if (par_arg->arg_default_val) {",
          "",
          "[Removed Lines]",
          "1301:       par_arg->arg_desc = gf_strdup(par_arg->arg_desc ? par_arg->arg_desc : \" \");",
          "",
          "[Added Lines]",
          "1301:       par_arg->arg_desc = gf_strdup(par_arg->arg_desc ?: \" \");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1311:       }",
          "1312:      }",
          "1313:      gf_dynstrcat((char **) &par_arg->arg_desc, an_arg.arg_name, \"\\n- \");",
          "1316:      if (an_arg.arg_default_val)",
          "1317:       gf_free((void *) an_arg.arg_default_val);",
          "",
          "[Removed Lines]",
          "1314:      gf_dynstrcat((char **) &par_arg->arg_desc, an_arg.arg_desc ? an_arg.arg_desc : \"\", \": \");",
          "",
          "[Added Lines]",
          "1314:      gf_dynstrcat((char **) &par_arg->arg_desc, an_arg.arg_desc ?: \"\", \": \");",
          "",
          "---------------"
        ],
        "src/filters/ff_enc.c||src/filters/ff_enc.c": [
          "File: src/filters/ff_enc.c -> src/filters/ff_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:  }",
          "250:  gf_filter_pid_set_property(ctx->out_pid, GF_PROP_PID_TARGET_RATE, NULL);",
          "",
          "[Removed Lines]",
          "248:  gf_filter_pid_set_property(ctx->out_pid, GF_PROP_PID_BITRATE, &PROP_UINT(ctx->target_rate ? ctx->target_rate : 100000));",
          "",
          "[Added Lines]",
          "248:  gf_filter_pid_set_property(ctx->out_pid, GF_PROP_PID_BITRATE, &PROP_UINT(ctx->target_rate ?: 100000));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1272:   ctx->out_pid = gf_filter_pid_new(filter);",
          "1276:   gf_filter_set_name(filter, szCodecName);",
          "1277:   gf_filter_pid_set_framing_mode(ctx->in_pid, GF_TRUE);",
          "1278:  }",
          "",
          "[Removed Lines]",
          "1275:   sprintf(szCodecName, \"ffenc:%s\", codec->name ? codec->name : \"unknown\");",
          "",
          "[Added Lines]",
          "1275:   sprintf(szCodecName, \"ffenc:%s\", codec->name ?: \"unknown\");",
          "",
          "---------------"
        ],
        "src/filters/ff_rescale.c||src/filters/ff_rescale.c": [
          "File: src/filters/ff_rescale.c -> src/filters/ff_rescale.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:  ctx->passthrough = GF_FALSE;",
          "275:  if ((ctx->w == w) && (ctx->h == h) && (ctx->s_pfmt == ofmt) && (ctx->stride == stride) && (ctx->fullrange==fullrange)) {",
          "277:  }",
          "",
          "[Removed Lines]",
          "273:  ctx->ow = ctx->osize.x ? ctx->osize.x : w;",
          "274:  ctx->oh = ctx->osize.y ? ctx->osize.y : h;",
          "",
          "[Added Lines]",
          "273:  ctx->ow = ctx->osize.x ?: w;",
          "274:  ctx->oh = ctx->osize.y ?: h;",
          "",
          "---------------"
        ],
        "src/filters/filelist.c||src/filters/filelist.c": [
          "File: src/filters/filelist.c -> src/filters/filelist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1221:    f_url = gf_url_concatenate(ctx->file_path, url);",
          "1222:    memset(&evt, 0, sizeof(GF_FilterEvent));",
          "1223:    evt.base.type = GF_FEVT_SOURCE_SWITCH;",
          "1225:    evt.seek.start_offset = ctx->start_range;",
          "1226:    evt.seek.end_offset = ctx->end_range;",
          "1227:    gf_filter_send_event(fsrc, &evt, GF_FALSE);",
          "",
          "[Removed Lines]",
          "1224:    evt.seek.source_switch = f_url ? f_url : url;",
          "",
          "[Added Lines]",
          "1224:    evt.seek.source_switch = f_url ?: url;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1373:  assert(ctx->splice_ctrl);",
          "1374:  assert(ctx->splice_state);",
          "1377:  is_raw_audio = ctx->splice_ctrl->splice_ipid ? ctx->splice_ctrl->splice_ra_info.is_raw : ctx->splice_ctrl->ra_info.is_raw;",
          "1379:  pck = gf_filter_pid_get_packet(ipid);",
          "",
          "[Removed Lines]",
          "1376:  ipid = ctx->splice_ctrl->splice_ipid ? ctx->splice_ctrl->splice_ipid : ctx->splice_ctrl->ipid;",
          "",
          "[Added Lines]",
          "1376:  ipid = ctx->splice_ctrl->splice_ipid ?: ctx->splice_ctrl->ipid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2248:     iopid = gf_list_get(ctx->io_pids, i);",
          "2249:     if (!iopid->ipid) continue;",
          "2250:     gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", NULL);",
          "2252:     gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", NULL);",
          "2253:     gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", &PROP_BOOL(GF_TRUE) );",
          "2254:    }",
          "",
          "[Removed Lines]",
          "2251:     gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ? ctx->dyn_period_id : \"\") );",
          "",
          "[Added Lines]",
          "2251:     gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ?: \"\") );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2285:     iopid = gf_list_get(ctx->io_pids, i);",
          "2286:     if (iopid->ipid) {",
          "2287:      filelist_configure_pid(filter, iopid->ipid, GF_FALSE);",
          "2289:     }",
          "2290:    }",
          "",
          "[Removed Lines]",
          "2288:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ? ctx->dyn_period_id : \"\") );",
          "",
          "[Added Lines]",
          "2288:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ?: \"\") );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2354:     iopid = gf_list_get(ctx->io_pids, i);",
          "2355:     if (iopid->ipid) {",
          "2356:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", NULL);",
          "2358:      gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", NULL);",
          "2359:      gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", &PROP_BOOL(GF_TRUE) );",
          "2360:     }",
          "",
          "[Removed Lines]",
          "2357:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ? ctx->dyn_period_id : \"\") );",
          "",
          "[Added Lines]",
          "2357:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ?: \"\") );",
          "",
          "---------------"
        ],
        "src/filters/in_file.c||src/filters/in_file.c": [
          "File: src/filters/in_file.c -> src/filters/in_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  ext_start = gf_file_ext_start(ctx->src);",
          "119:  if (frag_par) frag_par[0] = 0;",
          "120:  cgi_par = strchr(ctx->src, '?');",
          "121:  if (cgi_par) cgi_par[0] = 0;",
          "",
          "[Removed Lines]",
          "118:  frag_par = strchr(ext_start ? ext_start : ctx->src, '#');",
          "",
          "[Added Lines]",
          "118:  frag_par = strchr(ext_start ?: ctx->src, '#');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:  ext_start = gf_file_ext_start(url);",
          "236:  if (frag_par) frag_par[0] = 0;",
          "237:  cgi_par = strchr(url, '?');",
          "238:  if (cgi_par) cgi_par[0] = 0;",
          "",
          "[Removed Lines]",
          "235:  frag_par = strchr(ext_start ? ext_start : url, '#');",
          "",
          "[Added Lines]",
          "235:  frag_par = strchr(ext_start ?: url, '#');",
          "",
          "---------------"
        ],
        "src/filters/in_http.c||src/filters/in_http.c": [
          "File: src/filters/in_http.c -> src/filters/in_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "517:     }",
          "518:    }",
          "519:    ctx->block[nb_read] = 0;",
          "521:    if (cfg_e) return cfg_e;",
          "523:    gf_filter_pid_set_property(ctx->pid, GF_PROP_PID_FILE_CACHED, &PROP_BOOL(GF_FALSE) );",
          "",
          "[Removed Lines]",
          "520:    cfg_e = gf_filter_pid_raw_new(filter, ctx->src, cached, ctx->mime ? ctx->mime : gf_dm_sess_mime_type(ctx->sess), ctx->ext, ctx->block, nb_read, ctx->mime ? GF_TRUE : GF_FALSE, &ctx->pid);",
          "",
          "[Added Lines]",
          "520:    cfg_e = gf_filter_pid_raw_new(filter, ctx->src, cached, ctx->mime ?: gf_dm_sess_mime_type(ctx->sess), ctx->ext, ctx->block, nb_read, ctx->mime ? GF_TRUE : GF_FALSE, &ctx->pid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_SIZE, &PROP_LONGUINT(ctx->file_size) );",
          "545:   } else {",
          "546:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_BYTES, &PROP_LONGUINT(bytes_done) );",
          "548:   }",
          "549:  }",
          "",
          "[Removed Lines]",
          "547:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_SIZE, &PROP_LONGUINT(ctx->file_size ? ctx->file_size : bytes_done) );",
          "",
          "[Added Lines]",
          "547:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_SIZE, &PROP_LONGUINT(ctx->file_size ? : bytes_done) );",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_rtsp.c||src/filters/in_rtp_rtsp.c": [
          "File: src/filters/in_rtp_rtsp.c -> src/filters/in_rtp_rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   if (strnicmp(stream->control, \"rtsp://\", 7) && strnicmp(stream->control, \"rtspu://\", 8) && strnicmp(stream->control, \"satip://\", 8)) {",
          "277:    if (!in_session) in_session = rtpin_rtsp_new(rtp, session_control);",
          "",
          "[Removed Lines]",
          "275:    if (!in_session) in_session = rtpin_rtsp_check(rtp, session_control ? session_control : \"*\");",
          "",
          "[Added Lines]",
          "275:    if (!in_session) in_session = rtpin_rtsp_check(rtp, session_control ?: \"*\");",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_sdp.c||src/filters/in_rtp_sdp.c": [
          "File: src/filters/in_rtp_sdp.c -> src/filters/in_rtp_sdp.c"
        ]
      }
    },
    {
      "candidate_hash": "64b68cdafae5c1e381afca56ea12029df9716cf5",
      "candidate_info": {
        "commit_hash": "64b68cdafae5c1e381afca56ea12029df9716cf5",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/64b68cdafae5c1e381afca56ea12029df9716cf5",
        "files": [
          "applications/mp4box/fileimport.c",
          "applications/mp4client/main.c",
          "applications/testapps/atscdmx/main.c",
          "modules/alsa/alsa.c",
          "modules/deprecated/oss_audio/oss.c",
          "modules/pulseaudio/pulseaudio.c",
          "src/bifs/field_decode.c",
          "src/bifs/field_encode.c",
          "src/compositor/media_object.c",
          "src/compositor/mpeg4_textures.c",
          "src/compositor/object_manager.c",
          "src/filters/dec_bifs.c",
          "src/filters/dec_laser.c",
          "src/filters/dec_odf.c",
          "src/filters/dec_ttml.c",
          "src/filters/dmx_ogg.c",
          "src/filters/ff_common.c",
          "src/filters/ff_enc.c",
          "src/filters/ff_rescale.c",
          "src/filters/filelist.c",
          "src/filters/in_file.c",
          "src/filters/in_http.c",
          "src/filters/in_rtp_rtsp.c",
          "src/filters/in_rtp_sdp.c"
        ],
        "message": "Revert \"use compact ternary condition\"\n\nThis reverts commit a96df00059a0f4198790249cce13f308435e351a.",
        "before_after_code_files": [
          "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c",
          "applications/mp4client/main.c||applications/mp4client/main.c",
          "applications/testapps/atscdmx/main.c||applications/testapps/atscdmx/main.c",
          "modules/alsa/alsa.c||modules/alsa/alsa.c",
          "modules/deprecated/oss_audio/oss.c||modules/deprecated/oss_audio/oss.c",
          "modules/pulseaudio/pulseaudio.c||modules/pulseaudio/pulseaudio.c",
          "src/bifs/field_decode.c||src/bifs/field_decode.c",
          "src/bifs/field_encode.c||src/bifs/field_encode.c",
          "src/compositor/media_object.c||src/compositor/media_object.c",
          "src/compositor/mpeg4_textures.c||src/compositor/mpeg4_textures.c",
          "src/compositor/object_manager.c||src/compositor/object_manager.c",
          "src/filters/dec_bifs.c||src/filters/dec_bifs.c",
          "src/filters/dec_laser.c||src/filters/dec_laser.c",
          "src/filters/dec_odf.c||src/filters/dec_odf.c",
          "src/filters/dec_ttml.c||src/filters/dec_ttml.c",
          "src/filters/dmx_ogg.c||src/filters/dmx_ogg.c",
          "src/filters/ff_common.c||src/filters/ff_common.c",
          "src/filters/ff_enc.c||src/filters/ff_enc.c",
          "src/filters/ff_rescale.c||src/filters/ff_rescale.c",
          "src/filters/filelist.c||src/filters/filelist.c",
          "src/filters/in_file.c||src/filters/in_file.c",
          "src/filters/in_http.c||src/filters/in_http.c",
          "src/filters/in_rtp_rtsp.c||src/filters/in_rtp_rtsp.c",
          "src/filters/in_rtp_sdp.c||src/filters/in_rtp_sdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bifs/field_decode.c||src/bifs/field_decode.c"
          ],
          "candidate": [
            "src/bifs/field_decode.c||src/bifs/field_decode.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c": [
          "File: applications/mp4box/fileimport.c -> applications/mp4box/fileimport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1722:    video_ref_dur /= gf_isom_get_media_timescale(dest, video_ref);",
          "1723:    e = gf_isom_set_last_sample_duration(dest, tmcd_tk, (u32) video_ref_dur);",
          "1724:   } else {",
          "1726:   }",
          "1727:   GOTO_EXIT(\"setting TMCD sample dur\")",
          "1728:  }",
          "",
          "[Removed Lines]",
          "1725:    e = gf_isom_set_last_sample_duration(dest, tmcd_tk, tc_fps_den ?: 1);",
          "",
          "[Added Lines]",
          "1725:    e = gf_isom_set_last_sample_duration(dest, tmcd_tk, tc_fps_den ? tc_fps_den : 1);",
          "",
          "---------------"
        ],
        "applications/mp4client/main.c||applications/mp4client/main.c": [
          "File: applications/mp4client/main.c -> applications/mp4client/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:   if ((forced_width && forced_height) || scale) {",
          "933:    GF_Event size;",
          "937:    if (scale != 1) {",
          "938:     nw  = (u32)(nw * scale);",
          "",
          "[Removed Lines]",
          "934:    u32 nw = forced_width ?: evt->size.width;",
          "935:    u32 nh = forced_height ?: evt->size.height;",
          "",
          "[Added Lines]",
          "934:    u32 nw = forced_width ? forced_width : evt->size.width;",
          "935:    u32 nh = forced_height ? forced_height : evt->size.height;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:  case GF_EVENT_QUIT:",
          "980:   if (evt->message.error<0)  {",
          "982:   } else {",
          "983:    ret_val = evt->message.error;",
          "984:   }",
          "",
          "[Removed Lines]",
          "981:    fprintf(stderr, \"A fatal error was encoutered: %s (%s) - exiting ...\\n\", evt->message.message ?: \"no details\", gf_error_to_string(evt->message.error) );",
          "",
          "[Added Lines]",
          "981:    fprintf(stderr, \"A fatal error was encoutered: %s (%s) - exiting ...\\n\", evt->message.message ? evt->message.message : \"no details\", gf_error_to_string(evt->message.error) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2424:  if (!title && !gf_list_count(descs)) {",
          "2425:   fprintf(stderr, \"No World Info available\\n\");",
          "2426:  } else {",
          "2428:   for (i=0; i<gf_list_count(descs); i++) {",
          "2429:    char *str = gf_list_get(descs, i);",
          "2430:    fprintf(stderr, \"%s\\n\", str);",
          "",
          "[Removed Lines]",
          "2427:   fprintf(stderr, \"\\t%s\\n\", title ?: \"No title available\");",
          "",
          "[Added Lines]",
          "2427:   fprintf(stderr, \"\\t%s\\n\", title ? title : \"No title available\");",
          "",
          "---------------"
        ],
        "applications/testapps/atscdmx/main.c||applications/testapps/atscdmx/main.c": [
          "File: applications/testapps/atscdmx/main.c -> applications/testapps/atscdmx/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static u64 last_log_time=0;",
          "39: static void on_atscd_log(void *cbk, GF_LOG_Level ll, GF_LOG_Tool lm, const char *fmt, va_list list)",
          "40: {",
          "42:  if (log_time_start) {",
          "43:   u64 now = gf_sys_clock_high_res();",
          "44:   fprintf(logs, \"At \"LLD\" (diff %d) - \", now - log_time_start, (u32) (now - last_log_time) );",
          "",
          "[Removed Lines]",
          "41:  FILE *logs = cbk ?: stderr;",
          "",
          "[Added Lines]",
          "41:  FILE *logs = cbk ? cbk : stderr;",
          "",
          "---------------"
        ],
        "modules/alsa/alsa.c||modules/alsa/alsa.c": [
          "File: modules/alsa/alsa.c -> modules/alsa/alsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   GF_LOG(GF_LOG_ERROR, GF_LOG_MMIO, (\"[ALSA] Cannot open audio device %s: %s\\n\", ctx->dev_name, snd_strerror (err)) );",
          "62:   return GF_IO_ERR;",
          "63:  }",
          "66:  return GF_OK;",
          "67: }",
          "",
          "[Removed Lines]",
          "64:  ctx->num_buffers = num_buffers ?: 2;",
          "65:  ctx->total_duration = total_duration ?: 100;",
          "",
          "[Added Lines]",
          "64:  ctx->num_buffers = num_buffers ? num_buffers : 2;",
          "65:  ctx->total_duration = total_duration ? total_duration : 100;",
          "",
          "---------------"
        ],
        "modules/deprecated/oss_audio/oss.c||modules/deprecated/oss_audio/oss.c": [
          "File: modules/deprecated/oss_audio/oss.c -> modules/deprecated/oss_audio/oss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  ctx->sr = (*SampleRate);",
          "141:  if(ioctl(ctx->audio_dev, SNDCTL_DSP_SPEED,&ctx->sr)==-1) return GF_IO_ERR;",
          "144:  ctx->buf_size = (*SampleRate * blockalign * ctx->total_duration) / (1000 * nb_bufs);",
          "145:  frag_spec = 4;",
          "146:  while (ctx->buf_size > (1<<(frag_spec+1)))",
          "",
          "[Removed Lines]",
          "143:  nb_bufs = ctx->num_buffers ? : 8;",
          "",
          "[Added Lines]",
          "143:  nb_bufs = ctx->num_buffers ? ctx->num_buffers : 8;",
          "",
          "---------------"
        ],
        "modules/pulseaudio/pulseaudio.c||modules/pulseaudio/pulseaudio.c": [
          "File: modules/pulseaudio/pulseaudio.c -> modules/pulseaudio/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  ctx->output_name = opt ? ctx->output_name : \"GPAC\";",
          "73:  opt = gf_opts_get_key(\"PulseAudio\", \"Description\");",
          "75:  return GF_OK;",
          "76: }",
          "",
          "[Removed Lines]",
          "74:  ctx->output_description = opt ?: \"GPAC Output\";",
          "",
          "[Added Lines]",
          "74:  ctx->output_description = opt  ? opt  : \"GPAC Output\";",
          "",
          "---------------"
        ],
        "src/bifs/field_decode.c||src/bifs/field_decode.c": [
          "File: src/bifs/field_decode.c -> src/bifs/field_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:      if (e) return e;",
          "441:     }",
          "442:    } else {",
          "444:    }",
          "445:   }",
          "",
          "[Removed Lines]",
          "443:     return codec->LastError ?: GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "[Added Lines]",
          "443:     return codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "---------------"
        ],
        "src/bifs/field_encode.c||src/bifs/field_encode.c": [
          "File: src/bifs/field_encode.c -> src/bifs/field_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:    FILE *f;",
          "101:    if (codec->src_url) res_src = gf_url_concatenate(codec->src_url, src);",
          "104:    if (!f) {",
          "106:     return GF_URL_ERROR;",
          "107:    }",
          "108:    if (res_src) gf_free(res_src);",
          "",
          "[Removed Lines]",
          "103:    f = gf_fopen(res_src ?: src, \"rb\");",
          "105:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODEC, (\"[BIFS] Cannot open source file %s for encoding CacheTexture\\n\", res_src ?: src));",
          "",
          "[Added Lines]",
          "103:    f = gf_fopen(res_src ? res_src : src, \"rb\");",
          "105:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODEC, (\"[BIFS] Cannot open source file %s for encoding CacheTexture\\n\", res_src ? res_src : src));",
          "",
          "---------------"
        ],
        "src/compositor/media_object.c||src/compositor/media_object.c": [
          "File: src/compositor/media_object.c -> src/compositor/media_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:  if (changed) {",
          "413:   GF_Event evt;",
          "415:   memset(&evt, 0, sizeof(GF_Event));",
          "416:   evt.type = GF_EVENT_QUALITY_SWITCHED;",
          "417:   gf_sc_send_event(scene->compositor, &evt);",
          "",
          "[Removed Lines]",
          "414:   GF_Scene *scene = mo->odm->subscene ?: mo->odm->parentscene;",
          "",
          "[Added Lines]",
          "414:   GF_Scene *scene = mo->odm->subscene ? mo->odm->subscene : mo->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/compositor/mpeg4_textures.c||src/compositor/mpeg4_textures.c": [
          "File: src/compositor/mpeg4_textures.c -> src/compositor/mpeg4_textures.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     ct->data = NULL;",
          "306:     ct->data_len = 0;",
          "309:     if (e) {",
          "311:     }",
          "312:     if (ct->image.buffer) gf_free(ct->image.buffer);",
          "313:     ct->image.buffer = NULL;",
          "",
          "[Removed Lines]",
          "308:     e = gf_file_load_data(src_url ?: ct->image.buffer, &ct->data, &ct->data_len);",
          "310:      GF_LOG(GF_LOG_ERROR, GF_LOG_COMPOSE, (\"[Compositor] Failed to load CacheTexture data from file %s: %s\\n\", src_url ?: ct->image.buffer, gf_error_to_string(e) ) );",
          "",
          "[Added Lines]",
          "308:     e = gf_file_load_data(src_url ? src_url : ct->image.buffer, &ct->data, &ct->data_len);",
          "310:      GF_LOG(GF_LOG_ERROR, GF_LOG_COMPOSE, (\"[Compositor] Failed to load CacheTexture data from file %s: %s\\n\", src_url ? src_url : ct->image.buffer, gf_error_to_string(e) ) );",
          "",
          "---------------"
        ],
        "src/compositor/object_manager.c||src/compositor/object_manager.c": [
          "File: src/compositor/object_manager.c -> src/compositor/object_manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:    return;",
          "308:   }",
          "311:   if (odm->scene_ns)",
          "312:    odm->scene_ns->nb_odm_users++;",
          "313:  }",
          "",
          "[Removed Lines]",
          "310:   odm->scene_ns = parent_ns ?: odm->parentscene->root_od->scene_ns;",
          "",
          "[Added Lines]",
          "310:   odm->scene_ns = parent_ns ? parent_ns : odm->parentscene->root_od->scene_ns;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "715:  if ((u32) dur > odm->duration) {",
          "716:   odm->duration = (u32) dur;",
          "719:  }",
          "721:  prop = gf_filter_pid_get_property(pid, GF_PROP_PID_HAS_TEMI);",
          "",
          "[Removed Lines]",
          "718:   gf_scene_set_duration(odm->subscene ?: odm->parentscene);",
          "",
          "[Added Lines]",
          "718:   gf_scene_set_duration(odm->subscene ? odm->subscene : odm->parentscene);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "759:  Bool start_range_is_clock = 0;",
          "760:  Double ck_time;",
          "761:  GF_Clock *clock = odm->ck;",
          "763: #ifndef GPAC_DISABLE_VRML",
          "764:  MediaControlStack *ctrl;",
          "765: #endif",
          "",
          "[Removed Lines]",
          "762:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "762:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:    gf_odm_service_media_event(root, GF_EVENT_MEDIA_ENDED);",
          "1173:   }",
          "1174:  } else {",
          "1176:   if (scene && odm->parentscene && gf_sc_check_end_of_scene(scene->compositor, 0)) {",
          "1177:    GF_Event evt;",
          "1178:    evt.type = GF_EVENT_EOS;",
          "",
          "[Removed Lines]",
          "1175:   GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1175:   GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1189:   return;",
          "1191:  odm->timeshift_depth = stream_timeshift;",
          "1195:  gf_scene_set_timeshift_depth(scene);",
          "",
          "[Removed Lines]",
          "1192:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1192:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221: #endif",
          "1222:  GF_ODMExtraPid *xpid;",
          "1223:  GF_FilterEvent com;",
          "1226:  if (odm->state != GF_ODM_STATE_PLAY) {",
          "1227:   odm->flags |= GF_ODM_PAUSE_QUEUED;",
          "",
          "[Removed Lines]",
          "1224:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1224:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1287:  MediaSensorStack *media_sens;",
          "1288:  MediaControlStack *ctrl;",
          "1289: #endif",
          "1291:  GF_ODMExtraPid *xpid;",
          "1292:  GF_FilterEvent com;",
          "",
          "[Removed Lines]",
          "1290:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1290:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1349:  u32 i;",
          "1350:  GF_ODMExtraPid *xpid;",
          "1351:  GF_FilterEvent com;",
          "1354:  if (odm->flags & GF_ODM_NO_TIME_CTRL) return;",
          "1355:  if (!odm->pid) return;",
          "",
          "[Removed Lines]",
          "1352:  GF_Scene *scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1352:  GF_Scene *scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1537:  if (!pid)",
          "1538:   pid = odm->pid;",
          "1541:  if (!scene) return GF_FALSE;",
          "1542:  pck = gf_filter_pid_get_packet(pid);",
          "1543:  ck_type = gf_filter_pid_get_clock_info(pid, &clock_reference, &timescale);",
          "",
          "[Removed Lines]",
          "1540:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1540:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1629:    if (diff_pck_old_clock > diff_pck_new_clock) {",
          "1630:     u32 i, count;",
          "1632:     GF_LOG(GF_LOG_INFO, GF_LOG_SYNC, (\"Clock %d (ODM %d) discontinuity detected \"LLU\" clock time %d - diff %d - type %d - pck time \"LLU\"\\n\", odm->ck->clock_id, odm->ID, clock_reference, clock_time, diff, ck_type, pck_time-1));",
          "1634:     count = gf_list_count(in_scene->resources);",
          "",
          "[Removed Lines]",
          "1631:     GF_Scene *in_scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1631:     GF_Scene *in_scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1727:  evt.media_event.bufferValid = GF_FALSE;",
          "1728:  evt.media_event.session_name = odm->scene_ns->url;",
          "1731:  if (!scene) return;",
          "1733:  if (!buffer_level_plus_one) {",
          "",
          "[Removed Lines]",
          "1730:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "1730:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2028:  odm->ck->media_time_at_init = (u32) (media_time * 1000);",
          "2029:  odm->ck->has_media_time_shift = GF_TRUE;",
          "2032:  if (!scene) return;",
          "2033:  if (scene->root_od)",
          "2034:   scene->root_od->media_current_time = 0;",
          "",
          "[Removed Lines]",
          "2031:  scene = odm->subscene ?: odm->parentscene;",
          "",
          "[Added Lines]",
          "2031:  scene = odm->subscene ? odm->subscene : odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_bifs.c||src/filters/dec_bifs.c": [
          "File: src/filters/dec_bifs.c -> src/filters/dec_bifs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:   if (opid == com->attach_scene.on_pid) {",
          "252:    if (!ctx->odm) {",
          "253:     ctx->odm = com->attach_scene.object_manager;",
          "255:    }",
          "256:    bifs_dec_configure_bifs_dec(ctx, ipid);",
          "257:    gf_filter_pid_set_udta(opid, com->attach_scene.object_manager);",
          "",
          "[Removed Lines]",
          "254:     ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "254:     ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_laser.c||src/filters/dec_laser.c": [
          "File: src/filters/dec_laser.c -> src/filters/dec_laser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   if (opid == com->attach_scene.on_pid) {",
          "134:    if (!ctx->odm) {",
          "135:     ctx->odm = com->attach_scene.object_manager;",
          "138:     ctx->codec = gf_laser_decoder_new(ctx->scene->graph);",
          "",
          "[Removed Lines]",
          "136:     ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "136:     ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_odf.c||src/filters/dec_odf.c": [
          "File: src/filters/dec_odf.c -> src/filters/dec_odf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "489:   if (opid == com->attach_scene.on_pid) {",
          "490:    if (!ctx->odm) {",
          "491:     ctx->odm = com->attach_scene.object_manager;",
          "493:    }",
          "494:    gf_filter_pid_set_udta(opid, com->attach_scene.object_manager);",
          "495:    return GF_TRUE;",
          "",
          "[Removed Lines]",
          "492:     ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "492:     ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dec_ttml.c||src/filters/dec_ttml.c": [
          "File: src/filters/dec_ttml.c -> src/filters/dec_ttml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:  if (ctx->opid != com->attach_scene.on_pid) return GF_TRUE;",
          "227:  ctx->odm = com->attach_scene.object_manager;",
          "231:  if (ctx->odm->subscene) {",
          "",
          "[Removed Lines]",
          "228:  ctx->scene = ctx->odm->subscene ?: ctx->odm->parentscene;",
          "",
          "[Added Lines]",
          "228:  ctx->scene = ctx->odm->subscene ? ctx->odm->subscene : ctx->odm->parentscene;",
          "",
          "---------------"
        ],
        "src/filters/dmx_ogg.c||src/filters/dmx_ogg.c": [
          "File: src/filters/dmx_ogg.c -> src/filters/dmx_ogg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_STREAM_TYPE, &PROP_UINT(st->info.streamType) );",
          "218:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_CODECID, &PROP_UINT(st->info.type) );",
          "219:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_BITRATE, &PROP_UINT(st->info.bitrate) );",
          "221:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_PROFILE_LEVEL, &PROP_UINT(0xFE) );",
          "",
          "[Removed Lines]",
          "220:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(st->info.sample_rate ?: st->info.frame_rate.den) );",
          "",
          "[Added Lines]",
          "220:  gf_filter_pid_set_property(st->opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(st->info.sample_rate ? st->info.sample_rate : st->info.frame_rate.den) );",
          "",
          "---------------"
        ],
        "src/filters/ff_common.c||src/filters/ff_common.c": [
          "File: src/filters/ff_common.c -> src/filters/ff_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1015:     caps[1].code = fmt->extensions ? GF_PROP_PID_FILE_EXT : GF_PROP_PID_MIME;",
          "1016:     caps[1].val.type = GF_PROP_NAME;",
          "1017: #if LIBAVCODEC_VERSION_MAJOR >= 58",
          "1019: #else",
          "1020:    caps[1].val.value.string = (char *) fmt->extensions;",
          "1021: #endif",
          "",
          "[Removed Lines]",
          "1018:    caps[1].val.value.string = (char *) ( fmt->extensions ?: fmt->mime_type );",
          "",
          "[Added Lines]",
          "1018:    caps[1].val.value.string = (char *) ( fmt->extensions ? fmt->extensions : fmt->mime_type );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1057:    caps[1].code = ofmt->extensions ? GF_PROP_PID_FILE_EXT : GF_PROP_PID_MIME;",
          "1058:    caps[1].val.type = GF_PROP_NAME;",
          "1059: #if LIBAVCODEC_VERSION_MAJOR >= 58",
          "1061: #else",
          "1062:    caps[1].val.value.string = (char *) ofmt->extensions;",
          "1063: #endif",
          "",
          "[Removed Lines]",
          "1060:    caps[1].val.value.string = (char *) ( ofmt->extensions ?: ofmt->mime_type );",
          "",
          "[Added Lines]",
          "1060:    caps[1].val.value.string = (char *) ( ofmt->extensions ? ofmt->extensions : ofmt->mime_type );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1298:      GF_FilterArgs an_arg = ffmpeg_arg_translate(opt);",
          "1299:      if (!(par_arg->flags & GF_FS_ARG_META_ALLOC)) {",
          "1302:       par_arg->flags |= GF_FS_ARG_META_ALLOC;",
          "1304:       if (par_arg->arg_default_val) {",
          "",
          "[Removed Lines]",
          "1301:       par_arg->arg_desc = gf_strdup(par_arg->arg_desc ?: \" \");",
          "",
          "[Added Lines]",
          "1301:       par_arg->arg_desc = gf_strdup(par_arg->arg_desc ? par_arg->arg_desc : \" \");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1311:       }",
          "1312:      }",
          "1313:      gf_dynstrcat((char **) &par_arg->arg_desc, an_arg.arg_name, \"\\n- \");",
          "1316:      if (an_arg.arg_default_val)",
          "1317:       gf_free((void *) an_arg.arg_default_val);",
          "",
          "[Removed Lines]",
          "1314:      gf_dynstrcat((char **) &par_arg->arg_desc, an_arg.arg_desc ?: \"\", \": \");",
          "",
          "[Added Lines]",
          "1314:      gf_dynstrcat((char **) &par_arg->arg_desc, an_arg.arg_desc ? an_arg.arg_desc : \"\", \": \");",
          "",
          "---------------"
        ],
        "src/filters/ff_enc.c||src/filters/ff_enc.c": [
          "File: src/filters/ff_enc.c -> src/filters/ff_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:  }",
          "250:  gf_filter_pid_set_property(ctx->out_pid, GF_PROP_PID_TARGET_RATE, NULL);",
          "",
          "[Removed Lines]",
          "248:  gf_filter_pid_set_property(ctx->out_pid, GF_PROP_PID_BITRATE, &PROP_UINT(ctx->target_rate ?: 100000));",
          "",
          "[Added Lines]",
          "248:  gf_filter_pid_set_property(ctx->out_pid, GF_PROP_PID_BITRATE, &PROP_UINT(ctx->target_rate ? ctx->target_rate : 100000));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1272:   ctx->out_pid = gf_filter_pid_new(filter);",
          "1276:   gf_filter_set_name(filter, szCodecName);",
          "1277:   gf_filter_pid_set_framing_mode(ctx->in_pid, GF_TRUE);",
          "1278:  }",
          "",
          "[Removed Lines]",
          "1275:   sprintf(szCodecName, \"ffenc:%s\", codec->name ?: \"unknown\");",
          "",
          "[Added Lines]",
          "1275:   sprintf(szCodecName, \"ffenc:%s\", codec->name ? codec->name : \"unknown\");",
          "",
          "---------------"
        ],
        "src/filters/ff_rescale.c||src/filters/ff_rescale.c": [
          "File: src/filters/ff_rescale.c -> src/filters/ff_rescale.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:  ctx->passthrough = GF_FALSE;",
          "275:  if ((ctx->w == w) && (ctx->h == h) && (ctx->s_pfmt == ofmt) && (ctx->stride == stride) && (ctx->fullrange==fullrange)) {",
          "277:  }",
          "",
          "[Removed Lines]",
          "273:  ctx->ow = ctx->osize.x ?: w;",
          "274:  ctx->oh = ctx->osize.y ?: h;",
          "",
          "[Added Lines]",
          "273:  ctx->ow = ctx->osize.x ? ctx->osize.x : w;",
          "274:  ctx->oh = ctx->osize.y ? ctx->osize.y : h;",
          "",
          "---------------"
        ],
        "src/filters/filelist.c||src/filters/filelist.c": [
          "File: src/filters/filelist.c -> src/filters/filelist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1221:    f_url = gf_url_concatenate(ctx->file_path, url);",
          "1222:    memset(&evt, 0, sizeof(GF_FilterEvent));",
          "1223:    evt.base.type = GF_FEVT_SOURCE_SWITCH;",
          "1225:    evt.seek.start_offset = ctx->start_range;",
          "1226:    evt.seek.end_offset = ctx->end_range;",
          "1227:    gf_filter_send_event(fsrc, &evt, GF_FALSE);",
          "",
          "[Removed Lines]",
          "1224:    evt.seek.source_switch = f_url ?: url;",
          "",
          "[Added Lines]",
          "1224:    evt.seek.source_switch = f_url ? f_url : url;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1373:  assert(ctx->splice_ctrl);",
          "1374:  assert(ctx->splice_state);",
          "1377:  is_raw_audio = ctx->splice_ctrl->splice_ipid ? ctx->splice_ctrl->splice_ra_info.is_raw : ctx->splice_ctrl->ra_info.is_raw;",
          "1379:  pck = gf_filter_pid_get_packet(ipid);",
          "",
          "[Removed Lines]",
          "1376:  ipid = ctx->splice_ctrl->splice_ipid ?: ctx->splice_ctrl->ipid;",
          "",
          "[Added Lines]",
          "1376:  ipid = ctx->splice_ctrl->splice_ipid ? ctx->splice_ctrl->splice_ipid : ctx->splice_ctrl->ipid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2248:     iopid = gf_list_get(ctx->io_pids, i);",
          "2249:     if (!iopid->ipid) continue;",
          "2250:     gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", NULL);",
          "2252:     gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", NULL);",
          "2253:     gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", &PROP_BOOL(GF_TRUE) );",
          "2254:    }",
          "",
          "[Removed Lines]",
          "2251:     gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ?: \"\") );",
          "",
          "[Added Lines]",
          "2251:     gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ? ctx->dyn_period_id : \"\") );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2285:     iopid = gf_list_get(ctx->io_pids, i);",
          "2286:     if (iopid->ipid) {",
          "2287:      filelist_configure_pid(filter, iopid->ipid, GF_FALSE);",
          "2289:     }",
          "2290:    }",
          "",
          "[Removed Lines]",
          "2288:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ?: \"\") );",
          "",
          "[Added Lines]",
          "2288:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ? ctx->dyn_period_id : \"\") );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2354:     iopid = gf_list_get(ctx->io_pids, i);",
          "2355:     if (iopid->ipid) {",
          "2356:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", NULL);",
          "2358:      gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", NULL);",
          "2359:      gf_filter_pid_set_property_str(iopid->opid, \"period_switch\", &PROP_BOOL(GF_TRUE) );",
          "2360:     }",
          "",
          "[Removed Lines]",
          "2357:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ?: \"\") );",
          "",
          "[Added Lines]",
          "2357:      gf_filter_pid_set_property_str(iopid->opid, \"period_resume\", &PROP_STRING(ctx->dyn_period_id ? ctx->dyn_period_id : \"\") );",
          "",
          "---------------"
        ],
        "src/filters/in_file.c||src/filters/in_file.c": [
          "File: src/filters/in_file.c -> src/filters/in_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  ext_start = gf_file_ext_start(ctx->src);",
          "119:  if (frag_par) frag_par[0] = 0;",
          "120:  cgi_par = strchr(ctx->src, '?');",
          "121:  if (cgi_par) cgi_par[0] = 0;",
          "",
          "[Removed Lines]",
          "118:  frag_par = strchr(ext_start ?: ctx->src, '#');",
          "",
          "[Added Lines]",
          "118:  frag_par = strchr(ext_start ? ext_start : ctx->src, '#');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:  ext_start = gf_file_ext_start(url);",
          "236:  if (frag_par) frag_par[0] = 0;",
          "237:  cgi_par = strchr(url, '?');",
          "238:  if (cgi_par) cgi_par[0] = 0;",
          "",
          "[Removed Lines]",
          "235:  frag_par = strchr(ext_start ?: url, '#');",
          "",
          "[Added Lines]",
          "235:  frag_par = strchr(ext_start ? ext_start : url, '#');",
          "",
          "---------------"
        ],
        "src/filters/in_http.c||src/filters/in_http.c": [
          "File: src/filters/in_http.c -> src/filters/in_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "517:     }",
          "518:    }",
          "519:    ctx->block[nb_read] = 0;",
          "521:    if (cfg_e) return cfg_e;",
          "523:    gf_filter_pid_set_property(ctx->pid, GF_PROP_PID_FILE_CACHED, &PROP_BOOL(GF_FALSE) );",
          "",
          "[Removed Lines]",
          "520:    cfg_e = gf_filter_pid_raw_new(filter, ctx->src, cached, ctx->mime ?: gf_dm_sess_mime_type(ctx->sess), ctx->ext, ctx->block, nb_read, ctx->mime ? GF_TRUE : GF_FALSE, &ctx->pid);",
          "",
          "[Added Lines]",
          "520:    cfg_e = gf_filter_pid_raw_new(filter, ctx->src, cached, ctx->mime ? ctx->mime : gf_dm_sess_mime_type(ctx->sess), ctx->ext, ctx->block, nb_read, ctx->mime ? GF_TRUE : GF_FALSE, &ctx->pid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_SIZE, &PROP_LONGUINT(ctx->file_size) );",
          "545:   } else {",
          "546:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_BYTES, &PROP_LONGUINT(bytes_done) );",
          "548:   }",
          "549:  }",
          "",
          "[Removed Lines]",
          "547:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_SIZE, &PROP_LONGUINT(ctx->file_size ? : bytes_done) );",
          "",
          "[Added Lines]",
          "547:    gf_filter_pid_set_info(ctx->pid, GF_PROP_PID_DOWN_SIZE, &PROP_LONGUINT(ctx->file_size ? ctx->file_size : bytes_done) );",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_rtsp.c||src/filters/in_rtp_rtsp.c": [
          "File: src/filters/in_rtp_rtsp.c -> src/filters/in_rtp_rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   if (strnicmp(stream->control, \"rtsp://\", 7) && strnicmp(stream->control, \"rtspu://\", 8) && strnicmp(stream->control, \"satip://\", 8)) {",
          "277:    if (!in_session) in_session = rtpin_rtsp_new(rtp, session_control);",
          "",
          "[Removed Lines]",
          "275:    if (!in_session) in_session = rtpin_rtsp_check(rtp, session_control ?: \"*\");",
          "",
          "[Added Lines]",
          "275:    if (!in_session) in_session = rtpin_rtsp_check(rtp, session_control ? session_control : \"*\");",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_sdp.c||src/filters/in_rtp_sdp.c": [
          "File: src/filters/in_rtp_sdp.c -> src/filters/in_rtp_sdp.c"
        ]
      }
    }
  ]
}