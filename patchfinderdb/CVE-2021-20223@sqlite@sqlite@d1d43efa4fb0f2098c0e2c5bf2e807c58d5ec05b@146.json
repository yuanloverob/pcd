{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "79d5bc80c7d448955e7c1ee191e8f3a4b5920368",
      "candidate_info": {
        "commit_hash": "79d5bc80c7d448955e7c1ee191e8f3a4b5920368",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d5bc80c7d448955e7c1ee191e8f3a4b5920368",
        "files": [
          "ext/icu/icu.c",
          "ext/misc/json1.c",
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqliteInt.h",
          "test/pragma5.test",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Enhance PRAGMA function_list so that it shows all instances of each FuncDef, the number of arguments, the encoding, the type, and the flags.  Use this capability to locate and fix incorrect function flags in the standard build.\n\nFossilOrigin-Name: 9ca906d24a2e88eddb2fd067783512b66cfc49dce1596d816a1c38a09d128218",
        "before_after_code_files": [
          "ext/icu/icu.c||ext/icu/icu.c",
          "ext/misc/json1.c||ext/misc/json1.c",
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/pragma5.test||test/pragma5.test",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/icu/icu.c||ext/icu/icu.c": [
          "File: ext/icu/icu.c -> ext/icu/icu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501: int sqlite3IcuInit(sqlite3 *db){",
          "502:   static const struct IcuScalar {",
          "507:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);",
          "508:   } scalars[] = {",
          "510: #if !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_ICU)",
          "523:   };",
          "524:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "509:     {\"icu_load_collation\",  2, SQLITE_UTF8,                1, icuLoadCollation},",
          "511:     {\"regexp\", 2, SQLITE_ANY|SQLITE_DETERMINISTIC,         0, icuRegexpFunc},",
          "512:     {\"lower\",  1, SQLITE_UTF16|SQLITE_DETERMINISTIC,       0, icuCaseFunc16},",
          "513:     {\"lower\",  2, SQLITE_UTF16|SQLITE_DETERMINISTIC,       0, icuCaseFunc16},",
          "514:     {\"upper\",  1, SQLITE_UTF16|SQLITE_DETERMINISTIC,       1, icuCaseFunc16},",
          "515:     {\"upper\",  2, SQLITE_UTF16|SQLITE_DETERMINISTIC,       1, icuCaseFunc16},",
          "516:     {\"lower\",  1, SQLITE_UTF8|SQLITE_DETERMINISTIC,        0, icuCaseFunc16},",
          "517:     {\"lower\",  2, SQLITE_UTF8|SQLITE_DETERMINISTIC,        0, icuCaseFunc16},",
          "518:     {\"upper\",  1, SQLITE_UTF8|SQLITE_DETERMINISTIC,        1, icuCaseFunc16},",
          "519:     {\"upper\",  2, SQLITE_UTF8|SQLITE_DETERMINISTIC,        1, icuCaseFunc16},",
          "520:     {\"like\",   2, SQLITE_UTF8|SQLITE_DETERMINISTIC,        0, icuLikeFunc},",
          "521:     {\"like\",   3, SQLITE_UTF8|SQLITE_DETERMINISTIC,        0, icuLikeFunc},",
          "",
          "[Added Lines]",
          "502: # define SQLITEICU_EXTRAFLAGS (SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS)",
          "510:     {\"icu_load_collation\",2,SQLITE_UTF8|SQLITE_DIRECTONLY,1, icuLoadCollation},",
          "512:     {\"regexp\", 2, SQLITE_ANY|SQLITEICU_EXTRAFLAGS,         0, icuRegexpFunc},",
          "513:     {\"lower\",  1, SQLITE_UTF16|SQLITEICU_EXTRAFLAGS,       0, icuCaseFunc16},",
          "514:     {\"lower\",  2, SQLITE_UTF16|SQLITEICU_EXTRAFLAGS,       0, icuCaseFunc16},",
          "515:     {\"upper\",  1, SQLITE_UTF16|SQLITEICU_EXTRAFLAGS,       1, icuCaseFunc16},",
          "516:     {\"upper\",  2, SQLITE_UTF16|SQLITEICU_EXTRAFLAGS,       1, icuCaseFunc16},",
          "517:     {\"lower\",  1, SQLITE_UTF8|SQLITEICU_EXTRAFLAGS,        0, icuCaseFunc16},",
          "518:     {\"lower\",  2, SQLITE_UTF8|SQLITEICU_EXTRAFLAGS,        0, icuCaseFunc16},",
          "519:     {\"upper\",  1, SQLITE_UTF8|SQLITEICU_EXTRAFLAGS,        1, icuCaseFunc16},",
          "520:     {\"upper\",  2, SQLITE_UTF8|SQLITEICU_EXTRAFLAGS,        1, icuCaseFunc16},",
          "521:     {\"like\",   2, SQLITE_UTF8|SQLITEICU_EXTRAFLAGS,        0, icuLikeFunc},",
          "522:     {\"like\",   3, SQLITE_UTF8|SQLITEICU_EXTRAFLAGS,        0, icuLikeFunc},",
          "",
          "---------------"
        ],
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2581:     { \"json_tree\",            &jsonTreeModule               },",
          "2582:   };",
          "2583: #endif",
          "2584:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2587:                                  (void*)&aFunc[i].flag,",
          "2588:                                  aFunc[i].xFunc, 0, 0);",
          "2589:   }",
          "2590: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2591:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2592:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2594:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2595:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2596:   }",
          "",
          "[Removed Lines]",
          "2585:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2586:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2593:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2584:   static const int enc =",
          "2585:        SQLITE_UTF8 |",
          "2586:        SQLITE_DETERMINISTIC |",
          "2587:        SQLITE_INNOCUOUS;",
          "2589:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg, enc,",
          "2596:                                  SQLITE_SUBTYPE | enc, 0,",
          "",
          "---------------"
        ],
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1786:   };",
          "1787:   int i;",
          "1788:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "1790:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "1791:                                  enc, 0,",
          "1792:                                  aFunc[i].xFunc, 0, 0);",
          "1793:   }",
          "1794:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "1797:   }",
          "1798:   if( rc==SQLITE_OK ){",
          "1799:     rc = sqlite3_create_module_v2(db, \"geopoly\", &geopolyModule, 0, 0);",
          "",
          "[Removed Lines]",
          "1789:     int enc = aFunc[i].bPure ? SQLITE_UTF8|SQLITE_DETERMINISTIC : SQLITE_UTF8;",
          "1795:     rc = sqlite3_create_function(db, aAgg[i].zName, 1, SQLITE_UTF8, 0,",
          "1796:                                  0, aAgg[i].xStep, aAgg[i].xFinal);",
          "",
          "[Added Lines]",
          "1789:     int enc;",
          "1790:     if( aFunc[i].bPure ){",
          "1791:       enc = SQLITE_UTF8|SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS;",
          "1792:     }else{",
          "1793:       enc = SQLITE_UTF8|SQLITE_DIRECTONLY;",
          "1794:     }",
          "1800:     rc = sqlite3_create_function(db, aAgg[i].zName, 1,",
          "1801:               SQLITE_UTF8|SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS, 0,",
          "1802:               0, aAgg[i].xStep, aAgg[i].xFinal);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1c266cb3be46d26e640752a99979acb1a1809361ba70ca3fca981c42383c360e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1782:     enc = SQLITE_UTF16NATIVE;",
          "1783:   }else if( enc==SQLITE_ANY ){",
          "1784:     int rc;",
          "1786:          pUserData, xSFunc, xStep, xFinal, xValue, xInverse, pDestructor);",
          "1787:     if( rc==SQLITE_OK ){",
          "1790:     }",
          "1791:     if( rc!=SQLITE_OK ){",
          "1792:       return rc;",
          "",
          "[Removed Lines]",
          "1785:     rc = sqlite3CreateFunc(db, zFunctionName, nArg, SQLITE_UTF8|extraFlags,",
          "1788:       rc = sqlite3CreateFunc(db, zFunctionName, nArg, SQLITE_UTF16LE|extraFlags,",
          "1789:           pUserData, xSFunc, xStep, xFinal, xValue, xInverse, pDestructor);",
          "",
          "[Added Lines]",
          "1785:     rc = sqlite3CreateFunc(db, zFunctionName, nArg,",
          "1786:          (SQLITE_UTF8|extraFlags)^SQLITE_FUNC_UNSAFE,",
          "1789:       rc = sqlite3CreateFunc(db, zFunctionName, nArg,",
          "1790:            (SQLITE_UTF16LE|extraFlags)^SQLITE_FUNC_UNSAFE,",
          "1791:            pUserData, xSFunc, xStep, xFinal, xValue, xInverse, pDestructor);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   return lwr>upr ? 0 : &aPragmaName[mid];",
          "296: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: static void pragmaFunclistLine(Vdbe *v, FuncDef *p, int isBuiltin){",
          "303:   for(; p; p=p->pNext){",
          "304:     const char *zType;",
          "305:     const char *zEnc;",
          "306:     static const u32 mask =",
          "307:         SQLITE_DETERMINISTIC |",
          "308:         SQLITE_DIRECTONLY |",
          "309:         SQLITE_SUBTYPE |",
          "310:         SQLITE_INNOCUOUS",
          "311:     ;",
          "313:     if( p->xSFunc==0 ) continue;",
          "314:     if( p->xValue!=0 ){",
          "315:       zType = \"w\";",
          "316:     }else if( p->xFinalize!=0 ){",
          "317:       zType = \"a\";",
          "318:     }else{",
          "319:       zType = \"s\";",
          "320:     }",
          "321:     if( p->funcFlags & SQLITE_UTF8 ){",
          "322:       zEnc = \"utf8\";",
          "323:     }else if( p->funcFlags & SQLITE_UTF16BE ){",
          "324:       zEnc = \"utf16be\";",
          "325:     }else{",
          "326:       zEnc = \"utf16le\";",
          "327:     }",
          "328:     sqlite3VdbeMultiLoad(v, 1, \"sissii\",",
          "329:        p->zName, isBuiltin,",
          "330:        zType, zEnc,",
          "331:        p->nArg,",
          "332:        (p->funcFlags & mask) ^ SQLITE_INNOCUOUS",
          "333:     );",
          "334:   }",
          "335: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1259:     int i;",
          "1260:     HashElem *j;",
          "1261:     FuncDef *p;",
          "1263:     for(i=0; i<SQLITE_FUNC_HASH_SZ; i++){",
          "1264:       for(p=sqlite3BuiltinFunctions.a[i]; p; p=p->u.pHash ){",
          "1265:         if( p->funcFlags & SQLITE_FUNC_INTERNAL ) continue;",
          "1267:       }",
          "1268:     }",
          "1269:     for(j=sqliteHashFirst(&db->aFunc); j; j=sqliteHashNext(j)){",
          "1270:       p = (FuncDef*)sqliteHashData(j);",
          "1272:     }",
          "1273:   }",
          "1274:   break;",
          "",
          "[Removed Lines]",
          "1262:     pParse->nMem = 2;",
          "1266:         sqlite3VdbeMultiLoad(v, 1, \"si\", p->zName, 1);",
          "1271:       sqlite3VdbeMultiLoad(v, 1, \"si\", p->zName, 0);",
          "",
          "[Added Lines]",
          "1302:     pParse->nMem = 6;",
          "1306:         pragmaFunclistLine(v, p, 1);",
          "1311:       pragmaFunclistLine(v, p, 0);",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1844:   {nArg, SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "1845:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1846: #define SFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1848:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1849: #define INLINE_FUNC(zName, nArg, iArg, mFlags) \\",
          "1850:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "",
          "[Removed Lines]",
          "1847:   {nArg, SQLITE_UTF8|SQLITE_DIRECTONLY, \\",
          "",
          "[Added Lines]",
          "1847:   {nArg, SQLITE_UTF8|SQLITE_DIRECTONLY|SQLITE_FUNC_UNSAFE, \\",
          "",
          "---------------"
        ],
        "test/pragma5.test||test/pragma5.test": [
          "File: test/pragma5.test -> test/pragma5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: } {",
          "33:   0 name {} 0 {} 0",
          "34:   1 builtin {} 0 {} 0",
          "35: }",
          "36: do_execsql_test 1.1 {",
          "38: } {upper 1}",
          "39: do_execsql_test 1.2 {",
          "41: } {external 0}",
          "43: ifcapable fts5 {",
          "",
          "[Removed Lines]",
          "37:   SELECT * FROM pragma_function_list WHERE name='upper' AND builtin",
          "40:   SELECT * FROM pragma_function_list WHERE name LIKE 'exter%';",
          "",
          "[Added Lines]",
          "35:   2 type {} 0 {} 0",
          "36:   3 enc {} 0 {} 0",
          "37:   4 narg {} 0 {} 0",
          "38:   5 flags {} 0 {} 0",
          "41:   SELECT DISTINCT name, builtin",
          "42:     FROM pragma_function_list WHERE name='upper' AND builtin",
          "45:   SELECT DISTINCT name, builtin",
          "46:     FROM pragma_function_list WHERE name LIKE 'exter%';",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:   NAME: function_list",
          "259:   FLAG: Result0",
          "261:   IF:   !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "262:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "[Removed Lines]",
          "260:   COLS: name builtin",
          "",
          "[Added Lines]",
          "260:   COLS: name builtin type enc narg flags",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7edce5ecc0aa8dc146ffe07fb2bdbe814f125790",
      "candidate_info": {
        "commit_hash": "7edce5ecc0aa8dc146ffe07fb2bdbe814f125790",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7edce5ecc0aa8dc146ffe07fb2bdbe814f125790",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a shift-overflow problem in yesterday's check-in [36fdeb4f0a66970a] that OSSFuzz helpfully discovered overnight.  Thanks Google.\n\nFossilOrigin-Name: bff38e2b5318ed032aaf1d350903c3494b4531f2dc59a6997144ec8e23defef4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f347744e0d576f0250c29259cca755e57afded8956224114c01603c1bca5b3a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7734:   pMem = &aMem[pOp->p1];",
          "7735:   constMask = pOp->p3;",
          "7736:   for(i=0; i<pOp->p2; i++, pMem++){",
          "7738:       pMem->pScopyFrom = 0;",
          "7740:     }",
          "",
          "[Removed Lines]",
          "7737:     if( (constMask & MASKBIT32(i))==0 ){",
          "",
          "[Added Lines]",
          "7737:     if( i>=32 || (constMask & MASKBIT32(i))==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5281864f0ca2637ed0d92913709a244046c239a2",
      "candidate_info": {
        "commit_hash": "5281864f0ca2637ed0d92913709a244046c239a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5281864f0ca2637ed0d92913709a244046c239a2",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json105.test"
        ],
        "message": "Extend the json-path mechanism with array indexes of the form \"#\" or \"#-n\" for some positive number \"n\", to reference the end of an array.\n\nFossilOrigin-Name: 35ed68a651f4cf8740597433b0f1c3b345841868022e0904e9f342840ba0e502",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json105.test||test/json105.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       }",
          "1177:       return pNode;",
          "1178:     }",
          "1181:     i = 0;",
          "1182:     j = 1;",
          "1183:     while( safe_isdigit(zPath[j]) ){",
          "1184:       i = i*10 + zPath[j] - '0';",
          "1185:       j++;",
          "1186:     }",
          "1190:     }",
          "1191:     zPath += j + 1;",
          "1192:     j = 1;",
          "1193:     for(;;){",
          "",
          "[Removed Lines]",
          "1179:   }else if( zPath[0]=='[' && safe_isdigit(zPath[1]) ){",
          "1180:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1187:     if( zPath[j]!=']' ){",
          "1189:       return 0;",
          "",
          "[Added Lines]",
          "1179:   }else if( zPath[0]=='[' ){",
          "1186:     if( j<2 || zPath[j]!=']' ){",
          "1187:       if( zPath[1]=='#' ){",
          "1188:         JsonNode *pBase = pRoot;",
          "1189:         int iBase = iRoot;",
          "1190:         if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1191:         for(;;){",
          "1192:           while( j<=pBase->n ){",
          "1193:             if( (pBase[j].jnFlags & JNODE_REMOVE)==0 ) i++;",
          "1194:             j += jsonNodeSize(&pBase[j]);",
          "1195:           }",
          "1196:           if( (pBase->jnFlags & JNODE_APPEND)==0 ) break;",
          "1197:           iBase += pBase->u.iAppend;",
          "1198:           pBase = &pParse->aNode[iBase];",
          "1199:           j = 1;",
          "1200:         }",
          "1201:         j = 2;",
          "1202:         if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){",
          "1203:           unsigned int x = 0;",
          "1204:           j = 3;",
          "1205:           do{",
          "1206:             x = x*10 + zPath[j] - '0';",
          "1207:             j++;",
          "1208:           }while( safe_isdigit(zPath[j]) );",
          "1209:           if( x>i ) return 0;",
          "1210:           i -= x;",
          "1211:         }",
          "1212:         if( zPath[j]!=']' ){",
          "1214:           return 0;",
          "1215:         }",
          "1216:       }else{",
          "1218:         return 0;",
          "1219:       }",
          "1221:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json105.test||test/json105.test": [
          "File: test/json105.test -> test/json105.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-11-22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements tests for \"[#]\" extension to json-path",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix json104",
          "18: ifcapable !json1 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: # This is the example from pages 2 and 3 of RFC-7396",
          "24: db eval {",
          "25:   CREATE TABLE t1(j);",
          "26:   INSERT INTO t1(j) VALUES('{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}');",
          "27: }",
          "28: proc json_extract_test {testnum path result} {",
          "29:   do_execsql_test json105-1.$testnum \"SELECT quote(json_extract(j,$path)) FROM t1\" $result",
          "30: }",
          "31: json_extract_test 10 {'$.b[#]'}   NULL",
          "32: json_extract_test 20 {'$.b[#-1]'} 4",
          "33: json_extract_test 30 {'$.b[#-2]'} {'[2,3]'}",
          "34: json_extract_test 31 {'$.b[#-02]'} {'[2,3]'}",
          "35: json_extract_test 40 {'$.b[#-3]'} 1",
          "36: json_extract_test 50 {'$.b[#-4]'} NULL",
          "37: json_extract_test 60 {'$.b[#-2][#-1]'} 3",
          "38: json_extract_test 70 {'$.b[0]','$.b[#-1]'} {'[1,4]'}",
          "40: json_extract_test 100 {'$.a[#-1]'} NULL",
          "41: json_extract_test 110 {'$.b[#-000001]'} 4",
          "43: proc json_remove_test {testnum path result} {",
          "44:   do_execsql_test json105-2.$testnum \"SELECT quote(json_remove(j,$path)) FROM t1\" $result",
          "45: }",
          "46: json_remove_test 10 {'$.b[#]'}    {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "47: json_remove_test 20 {'$.b[#-0]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "48: json_remove_test 30 {'$.b[#-1]'}  {'{\"a\":1,\"b\":[1,[2,3]],\"c\":99}'}",
          "49: json_remove_test 40 {'$.b[#-2]'}  {'{\"a\":1,\"b\":[1,4],\"c\":99}'}",
          "50: json_remove_test 50 {'$.b[#-3]'}  {'{\"a\":1,\"b\":[[2,3],4],\"c\":99}'}",
          "51: json_remove_test 60 {'$.b[#-4]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "52: json_remove_test 70 {'$.b[#-2][#-1]'}  {'{\"a\":1,\"b\":[1,[2],4],\"c\":99}'}",
          "54: json_remove_test 100 {'$.b[0]','$.b[#-1]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "55: json_remove_test 110 {'$.b[#-1]','$.b[0]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "56: json_remove_test 120 {'$.b[#-1]','$.b[#-2]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "57: json_remove_test 130 {'$.b[#-1]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "58: json_remove_test 140 {'$.b[#-2]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "60: proc json_insert_test {testnum x result} {",
          "61:   do_execsql_test json105-3.$testnum \"SELECT quote(json_insert(j,$x)) FROM t1\" $result",
          "62: }",
          "63: json_insert_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "64: json_insert_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "65: json_insert_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "66:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "67: json_insert_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "68:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "70: proc json_set_test {testnum x result} {",
          "71:   do_execsql_test json105-4.$testnum \"SELECT quote(json_set(j,$x)) FROM t1\" $result",
          "72: }",
          "73: json_set_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "74: json_set_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "75: json_set_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "76:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "77: json_set_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "78:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "79: json_set_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "80: json_set_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "81: json_set_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "82:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "83: json_set_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "84:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "86: proc json_replace_test {testnum x result} {",
          "87:   do_execsql_test json105-5.$testnum \"SELECT quote(json_replace(j,$x)) FROM t1\" $result",
          "88: }",
          "89: json_replace_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "90: json_replace_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "91: json_replace_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "92:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "93: json_replace_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "94:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "95: json_replace_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "96: json_replace_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "97: json_replace_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "98:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "99: json_replace_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "100:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "102: do_catchsql_test json105-6.10 {",
          "103:   SELECT json_extract(j, '$.b[#-]') FROM t1;",
          "104: } {1 {JSON path error near '[#-]'}}",
          "105: do_catchsql_test json105-6.20 {",
          "106:   SELECT json_extract(j, '$.b[#9]') FROM t1;",
          "107: } {1 {JSON path error near '[#9]'}}",
          "108: do_catchsql_test json105-6.30 {",
          "109:   SELECT json_extract(j, '$.b[#+2]') FROM t1;",
          "110: } {1 {JSON path error near '[#+2]'}}",
          "111: do_catchsql_test json105-6.40 {",
          "112:   SELECT json_extract(j, '$.b[#-1') FROM t1;",
          "113: } {1 {JSON path error near '[#-1'}}",
          "114: do_catchsql_test json105-6.50 {",
          "115:   SELECT json_extract(j, '$.b[#-1x]') FROM t1;",
          "116: } {1 {JSON path error near '[#-1x]'}}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "599456f0ab888abf5979654f43ec872354f0a639",
      "candidate_info": {
        "commit_hash": "599456f0ab888abf5979654f43ec872354f0a639",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/599456f0ab888abf5979654f43ec872354f0a639",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/in.test"
        ],
        "message": "Correctly handle expressions like \"x IS (not) true/false\" within the rhs of IN() expressions. Fix for [f3ff1472].\n\nFossilOrigin-Name: 493a25949b9a6d0be82169b597133e491d8be4f4147b6eae135b06c1d810abd3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5f58dd3a19605b6f49b4364fa29892502eff35f12a7693a8694100e1844711ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "1079:         int rc = resolveExprStep(pWalker, pRight);",
          "1080:         if( rc==WRC_Abort ) return WRC_Abort;",
          "1081:         if( pRight->op==TK_TRUEFALSE ){",
          "",
          "[Removed Lines]",
          "1078:       if( pRight && pRight->op==TK_ID ){",
          "",
          "[Added Lines]",
          "1078:       if( pRight && (pRight->op==TK_ID || pRight->op==TK_TRUEFALSE) ){",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:   PRAGMA integrity_check;",
          "792: } {ok}",
          "794: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794: # Ticket f3ff1472887",
          "795: #",
          "796: do_execsql_test in-20.1 {",
          "797:   SELECT (1 IN (2 IS TRUE));",
          "798: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a43100afbdb0abd50ccf5b1e8fdb552616f7b2b",
      "candidate_info": {
        "commit_hash": "7a43100afbdb0abd50ccf5b1e8fdb552616f7b2b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a43100afbdb0abd50ccf5b1e8fdb552616f7b2b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the --bom option to the \".excel\", \".once\", and \".output\" commands of the CLI.  Also fix the \"--all\" option on \".help\" so that it works with two dashes in addition to just one.\n\nFossilOrigin-Name: d5b0def96ba6d90f47bc96fab1ccf9c501d84885d086744035b16fd96f3e248c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07752164c2bf00b6885808533bbdb2cefbf1bf281a887b0b4f6316649a6cb810",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408: static void outputModePush(ShellState *p){",
          "1409:   p->modePrior = p->mode;",
          "1410:   memcpy(p->colSepPrior, p->colSeparator, sizeof(p->colSeparator));",
          "1411:   memcpy(p->rowSepPrior, p->rowSeparator, sizeof(p->rowSeparator));",
          "1412: }",
          "1413: static void outputModePop(ShellState *p){",
          "1414:   p->mode = p->modePrior;",
          "1415:   memcpy(p->colSeparator, p->colSepPrior, sizeof(p->colSeparator));",
          "1416:   memcpy(p->rowSeparator, p->rowSepPrior, sizeof(p->rowSeparator));",
          "1417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1411:   p->priorShFlgs = p->shellFlgs;",
          "1417:   p->shellFlgs = p->priorShFlgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3580: #endif",
          "3581:   \"      trigger               Like \\\"full\\\" but also show trigger bytecode\",",
          "3582:   \".excel                   Display the output of next command in spreadsheet\",",
          "3583:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3584:   \".expert                  EXPERIMENTAL. Suggest indexes for queries\",",
          "3585:   \".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3586:   \"   --bom                   Put a UTF8 byte-order mark on intermediate file\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3631:   \"     tabs     Tab-separated values\",",
          "3632:   \"     tcl      TCL list elements\",",
          "3633:   \".nullvalue STRING        Use STRING in place of NULL values\",",
          "3635:   \"     If FILE begins with '|' then open as a pipe\",",
          "3639: #ifdef SQLITE_DEBUG",
          "3640:   \".oom [--repeat M] [N]    Simulate an OOM error on the N-th allocation\",",
          "3641: #endif",
          "",
          "[Removed Lines]",
          "3634:   \".once (-e|-x|FILE)       Output for the next SQL command only to FILE\",",
          "3636:   \"     Other options:\",",
          "3637:   \"       -e    Invoke system text editor\",",
          "3638:   \"       -x    Open in a spreadsheet\",",
          "",
          "[Added Lines]",
          "3638:   \".once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE\",",
          "3640:   \"       --bom  Put a UTF8 byte-order mark at the beginning\",",
          "3641:   \"       -e     Send output to the system text editor\",",
          "3642:   \"       -x     Send output as CSV to a spreadsheet (same as \\\".excel\\\")\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3652:   \"        --readonly      Open FILE readonly\",",
          "3653:   \"        --zip           FILE is a ZIP archive\",",
          "3654:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3656:   \".parameter CMD ...       Manage SQL parameter bindings\",",
          "3657:   \"   clear                   Erase all bindings\",",
          "3658:   \"   init                    Initialize the TEMP table that holds bindings\",",
          "",
          "[Removed Lines]",
          "3655:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "",
          "[Added Lines]",
          "3659:   \"   If FILE begins with '|' then open it as a pipe.\",",
          "3660:   \"   Options:\",",
          "3661:   \"     --bom                 Prefix output with a UTF8 byte-order mark\",",
          "3662:   \"     -e                    Send output to the system text editor\",",
          "3663:   \"     -x                    Send output as CSV to a spreadsheet\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3772:    || zPattern[0]=='0'",
          "3773:    || strcmp(zPattern,\"-a\")==0",
          "3774:    || strcmp(zPattern,\"-all\")==0",
          "3775:   ){",
          "3777:     if( zPattern==0 ) zPattern = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3783:    || strcmp(zPattern,\"--all\")==0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8307:         && (strncmp(azArg[0], \"output\", n)==0||strncmp(azArg[0], \"once\", n)==0))",
          "8308:    || (c=='e' && n==5 && strcmp(azArg[0],\"excel\")==0)",
          "8309:   ){",
          "8311:     int bTxtMode = 0;",
          "8323:     }",
          "8327:         rc = 1;",
          "8328:         goto meta_command_exit;",
          "8329:       }",
          "8330:       p->outCount = 2;",
          "8331:     }else{",
          "8332:       p->outCount = 0;",
          "8333:     }",
          "8334:     output_reset(p);",
          "8336: #ifndef SQLITE_NOHAVE_SYSTEM",
          "8338:       p->doXdgOpen = 1;",
          "8339:       outputModePush(p);",
          "8341:         newTempFile(p, \"csv\");",
          "8342:         p->mode = MODE_Csv;",
          "8343:         sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);",
          "8344:         sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_CrLf);",
          "8345:       }else{",
          "8346:         newTempFile(p, \"txt\");",
          "8347:         bTxtMode = 1;",
          "8348:       }",
          "",
          "[Removed Lines]",
          "8310:     const char *zFile = nArg>=2 ? azArg[1] : \"stdout\";",
          "8312:     if( azArg[0][0]=='e' ){",
          "8314:       nArg = 2;",
          "8315:       azArg[0] = \"once\";",
          "8316:       zFile = azArg[1] = \"-x\";",
          "8317:       n = 4;",
          "8318:     }",
          "8319:     if( nArg>2 ){",
          "8320:       utf8_printf(stderr, \"Usage: .%s [-e|-x|FILE]\\n\", azArg[0]);",
          "8321:       rc = 1;",
          "8322:       goto meta_command_exit;",
          "8324:     if( n>1 && strncmp(azArg[0], \"once\", n)==0 ){",
          "8325:       if( nArg<2 ){",
          "8326:         raw_printf(stderr, \"Usage: .once (-e|-x|FILE)\\n\");",
          "8335:     if( zFile[0]=='-' && zFile[1]=='-' ) zFile++;",
          "8337:     if( strcmp(zFile, \"-e\")==0 || strcmp(zFile, \"-x\")==0 ){",
          "8340:       if( zFile[1]=='x' ){",
          "",
          "[Added Lines]",
          "8319:     const char *zFile = 0;",
          "8321:     int i;",
          "8322:     int eMode = 0;",
          "8323:     int bBOM = 0;",
          "8324:     int bOnce;",
          "8326:     if( c=='e' ){",
          "8327:       eMode = 'x';",
          "8328:       bOnce = 2;",
          "8329:     }else if( strncmp(azArg[0],\"once\",n)==0 ){",
          "8330:       bOnce = 1;",
          "8332:     for(i=1; i<nArg; i++){",
          "8333:       char *z = azArg[i];",
          "8334:       if( z[0]=='-' ){",
          "8335:         if( z[1]=='-' ) z++;",
          "8336:         if( strcmp(z,\"-bom\")==0 ){",
          "8337:           bBOM = 1;",
          "8338:         }else if( c!='e' && strcmp(z,\"-x\")==0 ){",
          "8340:         }else if( c!='e' && strcmp(z,\"-e\")==0 ){",
          "8342:         }else{",
          "8343:           utf8_printf(p->out, \"ERROR: unknown option: \\\"%s\\\".  Usage:\\n\",",
          "8344:                       azArg[i]);",
          "8345:           showHelp(p->out, azArg[0]);",
          "8346:           rc = 1;",
          "8347:           goto meta_command_exit;",
          "8348:         }",
          "8349:       }else if( zFile==0 ){",
          "8350:         zFile = z;",
          "8351:       }else{",
          "8352:         utf8_printf(p->out,\"ERROR: extra parameter: \\\"%s\\\".  Usage:\\n\",",
          "8353:                     azArg[i]);",
          "8354:         showHelp(p->out, azArg[0]);",
          "8358:     }",
          "8359:     if( zFile==0 ) zFile = \"stdout\";",
          "8360:     if( bOnce ){",
          "8367:     if( eMode=='e' || eMode=='x' ){",
          "8370:       if( eMode=='x' ){",
          "8373:         ShellClearFlag(p, SHFLG_Echo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8361:         p->out = stdout;",
          "8362:         rc = 1;",
          "8363:       }else{",
          "8364:         sqlite3_snprintf(sizeof(p->outfile), p->outfile, \"%s\", zFile);",
          "8365:       }",
          "8366: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8397:         if( bBOM ) fprintf(p->out,\"\\357\\273\\277\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8373:         p->out = stdout;",
          "8374:         rc = 1;",
          "8375:       } else {",
          "8376:         sqlite3_snprintf(sizeof(p->outfile), p->outfile, \"%s\", zFile);",
          "8377:       }",
          "8378:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8410:         if( bBOM ) fprintf(p->out,\"\\357\\273\\277\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}