{
  "cve_id": "CVE-2018-14344",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.1, 2.4.0 to 2.4.7, and 2.2.0 to 2.2.15, the ISMP dissector could crash. This was addressed in epan/dissectors/packet-ismp.c by validating the IPX address length to avoid a buffer over-read.",
  "repo": "wireshark/wireshark",
  "patch_hash": "e67283ddca70a7652b7dd41ef8883ee3278501d0",
  "patch_info": {
    "commit_hash": "e67283ddca70a7652b7dd41ef8883ee3278501d0",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/e67283ddca70a7652b7dd41ef8883ee3278501d0",
    "files": [
      "epan/dissectors/packet-ismp.c"
    ],
    "message": "ISMP: fix tuple decoding\n\nEDP_TUPLE_HOLD dissection was broken due to a length parameter mixup in\nv1.99.1rc0-224-g6720c80bab. The TLV length calculation was changed in\ncommit ed5453d892, but the only pcap I could find for which it made a\ndifference includes the TL lengths in the length field.\n\nSince commit 067a076179, the IPXNET type was wrongly decoded, fixed now.\nCheck IPX address length to avoid a buffer overrun (read) in\nget_ether_name by at most 5 bytes.\n\nBug: 4943\nBug: 14672\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6451\nChange-Id: Ia99ab15578ecae6d5a3ec22989507d64f9926933\nReviewed-on: https://code.wireshark.org/review/27554\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c": [
      "File: epan/dissectors/packet-ismp.c -> epan/dissectors/packet-ismp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:  guint16 num_neighbors = 0;",
      "237:  guint16 num_tuples = 0;",
      "238:  guint16 tuple_type = 0;",
      "240:  gchar* ipx_addr_str;",
      "244:  proto_tree *edp_tree;",
      "246:  proto_item *edp_neighbors_ti;",
      "",
      "[Removed Lines]",
      "239:  guint16 tuple_length = 0;",
      "243:  proto_item *edp_ti, *ti;",
      "",
      "[Added Lines]",
      "239:  guint32 tuple_length = 0;",
      "243:  proto_item *edp_ti;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "429:    while ( (tuples_count < num_tuples) && (tvb_reported_length_remaining(tvb, offset) >= 4) )",
      "430:    {",
      "434:      ett_ismp_edp_tuples_leaf, NULL, \"Tuple%d\", tuples_count+1);",
      "436:     tuple_type = tvb_get_ntohs(tvb, offset);",
      "437:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "438:     offset += 2;",
      "440:     offset += 2;",
      "443:     {",
      "444:      switch (tuple_type)",
      "445:      {",
      "446:       case EDP_TUPLE_HOLD:",
      "449:        break;",
      "450:       case EDP_TUPLE_INT_NAME:",
      "451:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_interface_name, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
      "",
      "[Removed Lines]",
      "432:     tuple_length = tvb_get_ntohs(tvb, offset+2);",
      "433:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, tuple_length,",
      "439:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "442:     if (tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
      "447:        ti = proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, hf_ismp_hold_time, ENC_BIG_ENDIAN);",
      "448:                             proto_item_set_len(ti, tuple_length);",
      "",
      "[Added Lines]",
      "432:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, 4,",
      "438:     proto_tree_add_item_ret_uint(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN, &tuple_length);",
      "439:     if (tuple_length < 4) {",
      "440:      proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, 2);",
      "441:      return;",
      "442:     }",
      "444:     proto_item_set_len(edp_tuples_leaf_tree, tuple_length);",
      "445:     tuple_length -= 4;",
      "447:     if ((guint)tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
      "452:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, tuple_length, ENC_BIG_ENDIAN);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "456:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_system_description, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
      "457:        break;",
      "458:       case EDP_TUPLE_IPX_ADDR:",
      "461:        proto_tree_add_string(edp_tuples_leaf_tree, hf_ismp_interface_ipx_address ,tvb, offset, tuple_length, ipx_addr_str);",
      "462:        break;",
      "463:       case EDP_TUPLE_UNKNOWN:",
      "",
      "[Removed Lines]",
      "459:        ipx_addr_str = ipx_addr_to_str(tvb_get_ntohl(tvb, offset),",
      "460:         tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, tuple_length-4, ENC_ASCII));",
      "",
      "[Added Lines]",
      "463:        if (tuple_length != 4+6) {",
      "464:         proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, tuple_length);",
      "465:         return;",
      "466:        }",
      "467:        ipx_addr_str = ipx_addr_to_str(tvb_get_ntohl(tvb, offset), tvb_get_ptr(tvb, offset+4, tuple_length-4));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f7153685b39a164aea09ba7f96ebb648b8328ae",
      "candidate_info": {
        "commit_hash": "4f7153685b39a164aea09ba7f96ebb648b8328ae",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4f7153685b39a164aea09ba7f96ebb648b8328ae",
        "files": [
          "epan/dissectors/packet-ismp.c"
        ],
        "message": "ISMP: fix tuple decoding\n\nEDP_TUPLE_HOLD dissection was broken due to a length parameter mixup in\nv1.99.1rc0-224-g6720c80bab. The TLV length calculation was changed in\ncommit ed5453d892, but the only pcap I could find for which it made a\ndifference includes the TL lengths in the length field.\n\nSince commit 067a076179, the IPXNET type was wrongly decoded, fixed now.\nCheck IPX address length to avoid a buffer overrun (read) in\nget_ether_name by at most 5 bytes.\n\nBug: 4943\nBug: 14672\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6451\nChange-Id: Ia99ab15578ecae6d5a3ec22989507d64f9926933\nReviewed-on: https://code.wireshark.org/review/27554\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit e67283ddca70a7652b7dd41ef8883ee3278501d0)\nReviewed-on: https://code.wireshark.org/review/27925\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c": [
          "File: epan/dissectors/packet-ismp.c -> epan/dissectors/packet-ismp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:  guint16 num_neighbors = 0;",
          "249:  guint16 num_tuples = 0;",
          "250:  guint16 tuple_type = 0;",
          "255:  proto_tree *edp_tree;",
          "257:  proto_item *edp_neighbors_ti;",
          "",
          "[Removed Lines]",
          "251:  guint16 tuple_length = 0;",
          "254:  proto_item *edp_ti, *ti;",
          "",
          "[Added Lines]",
          "251:  guint32 tuple_length = 0;",
          "254:  proto_item *edp_ti;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:    while ( (tuples_count < num_tuples) && (tvb_reported_length_remaining(tvb, offset) >= 4) )",
          "441:    {",
          "445:      ett_ismp_edp_tuples_leaf, NULL, \"Tuple%d\", tuples_count+1);",
          "447:     tuple_type = tvb_get_ntohs(tvb, offset);",
          "448:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "449:     offset += 2;",
          "451:     offset += 2;",
          "454:     {",
          "455:      switch (tuple_type)",
          "456:      {",
          "457:       case EDP_TUPLE_HOLD:",
          "460:        break;",
          "461:       case EDP_TUPLE_INT_NAME:",
          "462:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_interface_name, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
          "",
          "[Removed Lines]",
          "443:     tuple_length = tvb_get_ntohs(tvb, offset+2);",
          "444:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, tuple_length,",
          "450:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "453:     if (tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
          "458:        ti = proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, hf_ismp_hold_time, ENC_BIG_ENDIAN);",
          "459:                             proto_item_set_len(ti, tuple_length);",
          "",
          "[Added Lines]",
          "443:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, 4,",
          "449:     proto_tree_add_item_ret_uint(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN, &tuple_length);",
          "450:     if (tuple_length < 4) {",
          "451:      proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, 2);",
          "452:      return;",
          "453:     }",
          "455:     proto_item_set_len(edp_tuples_leaf_tree, tuple_length);",
          "456:     tuple_length -= 4;",
          "458:     if ((guint)tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
          "463:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, tuple_length, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_system_description, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
          "468:        break;",
          "469:       case EDP_TUPLE_IPX_ADDR:",
          "470:        proto_tree_add_string(edp_tuples_leaf_tree, hf_ismp_interface_ipx_address ,tvb, offset, tuple_length,",
          "471:         ipx_addr_to_str(tvb_get_ntohl(tvb, offset),",
          "473:        break;",
          "474:       case EDP_TUPLE_UNKNOWN:",
          "475:       default:",
          "",
          "[Removed Lines]",
          "472:         tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, tuple_length-4, ENC_ASCII)));",
          "",
          "[Added Lines]",
          "474:        if (tuple_length != 4+6) {",
          "475:         proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, tuple_length);",
          "476:         return;",
          "477:        }",
          "480:         tvb_get_ptr(tvb, offset+4, tuple_length-4)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e0827cfb7468280dc20b472222e627690967ed7",
      "candidate_info": {
        "commit_hash": "2e0827cfb7468280dc20b472222e627690967ed7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2e0827cfb7468280dc20b472222e627690967ed7",
        "files": [
          "epan/dissectors/packet-ismp.c"
        ],
        "message": "ISMP: fix tuple decoding\n\nEDP_TUPLE_HOLD dissection was broken due to a length parameter mixup in\nv1.99.1rc0-224-g6720c80bab. The TLV length calculation was changed in\ncommit ed5453d892, but the only pcap I could find for which it made a\ndifference includes the TL lengths in the length field.\n\nSince commit 067a076179, the IPXNET type was wrongly decoded, fixed now.\nCheck IPX address length to avoid a buffer overrun (read) in\nget_ether_name by at most 5 bytes.\n\nBug: 4943\nBug: 14672\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6451\nChange-Id: Ia99ab15578ecae6d5a3ec22989507d64f9926933\nReviewed-on: https://code.wireshark.org/review/27554\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit e67283ddca70a7652b7dd41ef8883ee3278501d0)\nReviewed-on: https://code.wireshark.org/review/27924\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c": [
          "File: epan/dissectors/packet-ismp.c -> epan/dissectors/packet-ismp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:  guint16 num_neighbors = 0;",
          "249:  guint16 num_tuples = 0;",
          "250:  guint16 tuple_type = 0;",
          "252:  gchar* ipx_addr_str;",
          "256:  proto_tree *edp_tree;",
          "258:  proto_item *edp_neighbors_ti;",
          "",
          "[Removed Lines]",
          "251:  guint16 tuple_length = 0;",
          "255:  proto_item *edp_ti, *ti;",
          "",
          "[Added Lines]",
          "251:  guint32 tuple_length = 0;",
          "255:  proto_item *edp_ti;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:    while ( (tuples_count < num_tuples) && (tvb_reported_length_remaining(tvb, offset) >= 4) )",
          "442:    {",
          "446:      ett_ismp_edp_tuples_leaf, NULL, \"Tuple%d\", tuples_count+1);",
          "448:     tuple_type = tvb_get_ntohs(tvb, offset);",
          "449:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "450:     offset += 2;",
          "452:     offset += 2;",
          "455:     {",
          "456:      switch (tuple_type)",
          "457:      {",
          "458:       case EDP_TUPLE_HOLD:",
          "461:        break;",
          "462:       case EDP_TUPLE_INT_NAME:",
          "463:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_interface_name, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
          "",
          "[Removed Lines]",
          "444:     tuple_length = tvb_get_ntohs(tvb, offset+2);",
          "445:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, tuple_length,",
          "451:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "454:     if (tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
          "459:        ti = proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, hf_ismp_hold_time, ENC_BIG_ENDIAN);",
          "460:                             proto_item_set_len(ti, tuple_length);",
          "",
          "[Added Lines]",
          "444:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, 4,",
          "450:     proto_tree_add_item_ret_uint(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN, &tuple_length);",
          "451:     if (tuple_length < 4) {",
          "452:      proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, 2);",
          "453:      return;",
          "454:     }",
          "456:     proto_item_set_len(edp_tuples_leaf_tree, tuple_length);",
          "457:     tuple_length -= 4;",
          "459:     if ((guint)tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
          "464:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, tuple_length, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "468:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_system_description, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
          "469:        break;",
          "470:       case EDP_TUPLE_IPX_ADDR:",
          "473:        proto_tree_add_string(edp_tuples_leaf_tree, hf_ismp_interface_ipx_address ,tvb, offset, tuple_length, ipx_addr_str);",
          "474:        break;",
          "475:       case EDP_TUPLE_UNKNOWN:",
          "",
          "[Removed Lines]",
          "471:        ipx_addr_str = ipx_addr_to_str(tvb_get_ntohl(tvb, offset),",
          "472:         tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, tuple_length-4, ENC_ASCII));",
          "",
          "[Added Lines]",
          "475:        if (tuple_length != 4+6) {",
          "476:         proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, tuple_length);",
          "477:         return;",
          "478:        }",
          "479:        ipx_addr_str = ipx_addr_to_str(tvb_get_ntohl(tvb, offset), tvb_get_ptr(tvb, offset+4, tuple_length-4));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "320a890cd7a5c28a07132f4ff871009a5f4837bc",
      "candidate_info": {
        "commit_hash": "320a890cd7a5c28a07132f4ff871009a5f4837bc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/320a890cd7a5c28a07132f4ff871009a5f4837bc",
        "files": [
          "epan/dissectors/packet-ismp.c"
        ],
        "message": "ISMP: fix tuple decoding\n\nEDP_TUPLE_HOLD dissection was broken due to a length parameter mixup in\nv1.99.1rc0-224-g6720c80bab. The TLV length calculation was changed in\ncommit ed5453d892, but the only pcap I could find for which it made a\ndifference includes the TL lengths in the length field.\n\nSince commit 067a076179, the IPXNET type was wrongly decoded, fixed now.\nCheck IPX address length to avoid a buffer overrun (read) in\nget_ether_name by at most 5 bytes.\n\nBug: 4943\nBug: 14672\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6451\nChange-Id: Ia99ab15578ecae6d5a3ec22989507d64f9926933\nReviewed-on: https://code.wireshark.org/review/27554\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit e67283ddca70a7652b7dd41ef8883ee3278501d0)\nReviewed-on: https://code.wireshark.org/review/27923\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ismp.c||epan/dissectors/packet-ismp.c": [
          "File: epan/dissectors/packet-ismp.c -> epan/dissectors/packet-ismp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:  guint16 num_neighbors = 0;",
          "237:  guint16 num_tuples = 0;",
          "238:  guint16 tuple_type = 0;",
          "240:  gchar* ipx_addr_str;",
          "244:  proto_tree *edp_tree;",
          "246:  proto_item *edp_neighbors_ti;",
          "",
          "[Removed Lines]",
          "239:  guint16 tuple_length = 0;",
          "243:  proto_item *edp_ti, *ti;",
          "",
          "[Added Lines]",
          "239:  guint32 tuple_length = 0;",
          "243:  proto_item *edp_ti;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:    while ( (tuples_count < num_tuples) && (tvb_reported_length_remaining(tvb, offset) >= 4) )",
          "430:    {",
          "434:      ett_ismp_edp_tuples_leaf, NULL, \"Tuple%d\", tuples_count+1);",
          "436:     tuple_type = tvb_get_ntohs(tvb, offset);",
          "437:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "438:     offset += 2;",
          "440:     offset += 2;",
          "443:     {",
          "444:      switch (tuple_type)",
          "445:      {",
          "446:       case EDP_TUPLE_HOLD:",
          "449:        break;",
          "450:       case EDP_TUPLE_INT_NAME:",
          "451:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_interface_name, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
          "",
          "[Removed Lines]",
          "432:     tuple_length = tvb_get_ntohs(tvb, offset+2);",
          "433:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, tuple_length,",
          "439:     proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "442:     if (tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
          "447:        ti = proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, hf_ismp_hold_time, ENC_BIG_ENDIAN);",
          "448:                             proto_item_set_len(ti, tuple_length);",
          "",
          "[Added Lines]",
          "432:     edp_tuples_leaf_tree = proto_tree_add_subtree_format(edp_tuples_tree, tvb, offset, 4,",
          "438:     proto_tree_add_item_ret_uint(edp_tuples_leaf_tree, hf_ismp_tuple_length, tvb, offset, 2, ENC_BIG_ENDIAN, &tuple_length);",
          "439:     if (tuple_length < 4) {",
          "440:      proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, 2);",
          "441:      return;",
          "442:     }",
          "444:     proto_item_set_len(edp_tuples_leaf_tree, tuple_length);",
          "445:     tuple_length -= 4;",
          "447:     if ((guint)tvb_reported_length_remaining(tvb, offset) >= tuple_length)",
          "452:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_hold_time, tvb, offset, tuple_length, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:        proto_tree_add_item(edp_tuples_leaf_tree, hf_ismp_system_description, tvb, offset, tuple_length, ENC_NA|ENC_ASCII);",
          "457:        break;",
          "458:       case EDP_TUPLE_IPX_ADDR:",
          "461:        proto_tree_add_string(edp_tuples_leaf_tree, hf_ismp_interface_ipx_address ,tvb, offset, tuple_length, ipx_addr_str);",
          "462:        break;",
          "463:       case EDP_TUPLE_UNKNOWN:",
          "",
          "[Removed Lines]",
          "459:        ipx_addr_str = ipx_addr_to_str(tvb_get_ntohl(tvb, offset),",
          "460:         tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, tuple_length-4, ENC_ASCII));",
          "",
          "[Added Lines]",
          "463:        if (tuple_length != 4+6) {",
          "464:         proto_tree_add_expert(edp_tree, pinfo, &ei_ismp_malformed, tvb, offset, tuple_length);",
          "465:         return;",
          "466:        }",
          "467:        ipx_addr_str = ipx_addr_to_str(tvb_get_ntohl(tvb, offset), tvb_get_ptr(tvb, offset+4, tuple_length-4));",
          "",
          "---------------"
        ]
      }
    }
  ]
}