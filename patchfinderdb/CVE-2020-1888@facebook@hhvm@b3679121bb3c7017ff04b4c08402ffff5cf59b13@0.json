{
  "cve_id": "CVE-2020-1888",
  "cve_desc": "Insufficient boundary checks when decoding JSON in handleBackslash reads out of bounds memory, potentially leading to DOS. This issue affects HHVM 4.45.0, 4.44.0, 4.43.0, 4.42.0, 4.41.0, 4.40.0, 4.39.0, versions between 4.33.0 and 4.38.0 (inclusive), versions between 4.9.0 and 4.32.0 (inclusive), and versions prior to 4.8.7.",
  "repo": "facebook/hhvm",
  "patch_hash": "b3679121bb3c7017ff04b4c08402ffff5cf59b13",
  "patch_info": {
    "commit_hash": "b3679121bb3c7017ff04b4c08402ffff5cf59b13",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/b3679121bb3c7017ff04b4c08402ffff5cf59b13",
    "files": [
      "hphp/runtime/ext/json/JSON_parser.cpp",
      "hphp/test/slow/ext_json/decode_crash.php",
      "hphp/test/slow/ext_json/decode_crash.php.expect"
    ],
    "message": "Fix buffer overrun in SimpleParser::handleBackslash\n\nSummary:\nIt read 4 chars, then checked for validity, but any of them could have\nbeen the end of the string, so check after each one instead.\n\nReviewed By: oulgen\n\nDifferential Revision: D19611163\n\nfbshipit-source-id: 3da0a39555cb85a93f4fd98048368f17cf37e2e4",
    "before_after_code_files": [
      "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp": [
      "File: hphp/runtime/ext/json/JSON_parser.cpp -> hphp/runtime/ext/json/JSON_parser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "453:       case 'u': {",
      "454:         if (UNLIKELY(is_tsimplejson)) {",
      "455:           auto const ch1 = *p++;",
      "456:           auto const ch2 = *p++;",
      "457:           auto const dch3 = dehexchar(*p++);",
      "458:           auto const dch4 = dehexchar(*p++);",
      "462:           out = (dch3 << 4) | dch4;",
      "463:           return true;",
      "464:         } else {",
      "",
      "[Removed Lines]",
      "459:           if (UNLIKELY(ch1 != '0' || ch2 != '0' || dch3 < 0 || dch4 < 0)) {",
      "460:             return false;",
      "461:           }",
      "",
      "[Added Lines]",
      "456:           if (UNLIKELY(ch1 != '0')) return false;",
      "458:           if (UNLIKELY(ch2 != '0')) return false;",
      "460:           if (UNLIKELY(dch3 < 0)) return false;",
      "462:           if (UNLIKELY(dch4 < 0)) return false;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c1032cff675d628c1d3683ed856fd50c7ba4e96",
      "candidate_info": {
        "commit_hash": "6c1032cff675d628c1d3683ed856fd50c7ba4e96",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/6c1032cff675d628c1d3683ed856fd50c7ba4e96",
        "files": [
          "hphp/runtime/ext/json/JSON_parser.cpp"
        ],
        "message": "better string handling in SimpleJsonParser\n\nSummary:\nHHVM has two JSON parsers, SimpleJsonParser and a state-machine-based\nparser which I nicknamed the bulky parser. In most cases, it tries the simple parser\nfirst, and, if the simple parser rejects, falls back to the bulky parser.\n\nThe simple parser wasn't handling backslashes in string literals, and some profiling\nrevealed that most of the time we spend in the bulky parser was because the input\nhad a backslash. This is sad because backslashes aren't that hard to handle.\n\nAdd support for handling backslashes (when they're encoding ASCII characters,\nwhich is the common case.)\n\nPerflabs show this results in a roughly 0.9% reduction in instructions, as well\nas a reduction in loads and stores. After bolt, there's a roughly 1% reduction\nin instructions and between 0.5% and 0.9% reduction in cpu-time-us.\n\nReviewed By: markw65\n\nDifferential Revision: D14819100\n\nfbshipit-source-id: b12a026584facdd75baa0c266fadf0a795fef97d",
        "before_after_code_files": [
          "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp": [
          "File: hphp/runtime/ext/json/JSON_parser.cpp -> hphp/runtime/ext/json/JSON_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: namespace {",
          "304: NEVER_INLINE",
          "305: static void tvDecRefRange(TypedValue* begin, TypedValue* end) {",
          "306:   assertx(begin <= end);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: int dehexchar(char c) {",
          "305:   if (c >= '0' && c <= '9') return c - '0';",
          "306:   if (c >= 'A' && c <= 'F') return c - ('A' - 10);",
          "307:   if (c >= 'a' && c <= 'f') return c - ('a' - 10);",
          "308:   return -1;",
          "309: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:     return true;",
          "430:   }",
          "432:   bool parseString() {",
          "433:     int len = 0;",
          "434:     auto const charTop = reinterpret_cast<signed char*>(top);",
          "435:     for (signed char ch = *p++; ch != '\\\"'; ch = *p++) {",
          "439:     }",
          "440:     pushStringData(StringData::Make(",
          "441:       reinterpret_cast<char*>(charTop), len, CopyString));",
          "",
          "[Removed Lines]",
          "436:       charTop[len++] = ch;",
          "438:       if (ch < ' ' || ch == '\\\\' || ch == '\\'') return false;",
          "",
          "[Added Lines]",
          "439:   bool handleBackslash(signed char& out) {",
          "440:     char ch = *p++;",
          "441:     switch (ch) {",
          "442:       case 0: return false;",
          "443:       case '\"': out = ch; return true;",
          "444:       case '\\\\': out = ch; return true;",
          "445:       case '/': out = ch; return true;",
          "446:       case 'b': out = '\\b'; return true;",
          "447:       case 'f': out = '\\f'; return true;",
          "448:       case 'n': out = '\\n'; return true;",
          "449:       case 'r': out = '\\r'; return true;",
          "450:       case 't': out = '\\t'; return true;",
          "451:       case 'u': {",
          "452:         uint16_t u16cp = 0;",
          "453:         for (int i = 0; i < 4; i++) {",
          "454:           auto const hexv = dehexchar(*p++);",
          "455:           if (hexv < 0) return false; // includes check for end of string",
          "456:           u16cp <<= 4;",
          "457:           u16cp |= hexv;",
          "458:         }",
          "459:         if (u16cp > 0x7f) {",
          "460:           return false;",
          "461:         } else {",
          "462:           out = u16cp;",
          "463:           return true;",
          "464:         }",
          "465:       }",
          "466:       default: return false;",
          "467:     }",
          "468:   }",
          "473:     assertx(p[-1] == '\"'); // SimpleParser only handles \"-quoted strings",
          "475:       charTop[len++] = ch; // overwritten later if `ch == '\\\\'`",
          "476:       if (ch < ' ') {",
          "478:         return false;",
          "479:       }",
          "480:       if (ch == '\\\\') {",
          "481:         if (!handleBackslash(charTop[len - 1])) return false;",
          "482:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796:   return true;",
          "797: }",
          "806: static String copy_and_clear(UncheckedBuffer &buf) {",
          "807:   auto ret = buf.size() > 0 ? buf.copy() : empty_string();",
          "808:   buf.clear();",
          "",
          "[Removed Lines]",
          "799: static int dehexchar(char c) {",
          "800:   if (c >= '0' && c <= '9') return c - '0';",
          "801:   if (c >= 'A' && c <= 'F') return c - ('A' - 10);",
          "802:   if (c >= 'a' && c <= 'f') return c - ('a' - 10);",
          "803:   return -1;",
          "804: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "210e0e9f20ebcd5408e6550ebabf97bb2ae86ce0",
      "candidate_info": {
        "commit_hash": "210e0e9f20ebcd5408e6550ebabf97bb2ae86ce0",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/210e0e9f20ebcd5408e6550ebabf97bb2ae86ce0",
        "files": [
          "hphp/hack/hhi/stdlib/builtins_json.hhi",
          "hphp/runtime/ext/json/JSON_parser.cpp",
          "hphp/runtime/ext/json/ext_json.cpp",
          "hphp/runtime/ext/json/ext_json.h",
          "hphp/test/slow/ext_json/json_decode_thrift_simple_json.php",
          "hphp/test/slow/ext_json/json_decode_thrift_simple_json.php.expect"
        ],
        "message": "Support TSimpleJSONProtocol decoding in json_decode\n\nSummary:\nTSimpleJSONProtocol is an encoding format used by thrift to serialize data containing strings in binary formats that would otherwise not be supported by JSON encoding.\n\nThe transformation is simple: whenever a non-printable character is detected, its binary value is hex-encoded, and stored in the last two digits of a \\u escaped string. For example: `\"\\x80\\x81\"` is encoded as `\"\\u0080\\u0081\"`. This is crucially different from JSON for non-ASCII characters (`\"\\u{0080}\"` and up), since normal JSON deserialization would treat this differently (see `utf16_to_utf8`) and decode it to `\"\\xc2\\x80\"`, whereas TSimpleJSON would decode it to `\"\\x80\"`.\n\nReviewed By: billf\n\nDifferential Revision: D15571890\n\nfbshipit-source-id: da0583bb121426c403b2afcb9a1ec3f23f3becfb",
        "before_after_code_files": [
          "hphp/hack/hhi/stdlib/builtins_json.hhi||hphp/hack/hhi/stdlibuiltins_json.hhi",
          "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp",
          "hphp/runtime/ext/json/ext_json.cpp||hphp/runtime/ext/json/ext_json.cpp",
          "hphp/runtime/ext/json/ext_json.h||hphp/runtime/ext/json/ext_json.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/stdlib/builtins_json.hhi||hphp/hack/hhi/stdlibuiltins_json.hhi": [
          "File: hphp/hack/hhi/stdlib/builtins_json.hhi -> hphp/hack/hhi/stdlibuiltins_json.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: const int JSON_FB_WARN_VEC_LIKE_DARRAYS = 0;",
          "49: const int JSON_FB_WARN_DICT_LIKE_DARRAYS = 0;",
          "50: const int JSON_FB_IGNORE_LATEINIT = 0;",
          "52: <<__PHPStdLib>>",
          "53: function json_encode($value, int $options = 0, int $depth = 512);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp": [
          "File: hphp/runtime/ext/json/JSON_parser.cpp -> hphp/runtime/ext/json/JSON_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   static bool TryParse(const char* inp, int length,",
          "340:                        TypedValue* buf, Variant& out,",
          "343:     bool ok = parser.parseValue();",
          "344:     parser.skipSpace();",
          "345:     if (!ok || parser.p != inp + length) {",
          "",
          "[Removed Lines]",
          "341:                        JSONContainerType container_type) {",
          "342:     SimpleParser parser(inp, length, buf, container_type);",
          "",
          "[Added Lines]",
          "341:                        JSONContainerType container_type, bool is_tsimplejson) {",
          "342:     SimpleParser parser(inp, length, buf, container_type, is_tsimplejson);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:  private:",
          "355:   SimpleParser(const char* input, int length, TypedValue* buffer,",
          "357:     : p(input)",
          "358:     , top(buffer)",
          "360:     , container_type(container_type)",
          "361:   {",
          "362:     assertx(input[length] == 0);  // Parser relies on sentinel to avoid checks.",
          "363:   }",
          "",
          "[Removed Lines]",
          "356:                JSONContainerType container_type)",
          "",
          "[Added Lines]",
          "356:                JSONContainerType container_type, bool is_tsimplejson)",
          "361:     , is_tsimplejson(is_tsimplejson)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:       case 'r': out = '\\r'; return true;",
          "450:       case 't': out = '\\t'; return true;",
          "451:       case 'u': {",
          "463:           return true;",
          "464:         }",
          "465:       }",
          "466:       default: return false;",
          "",
          "[Removed Lines]",
          "452:         uint16_t u16cp = 0;",
          "453:         for (int i = 0; i < 4; i++) {",
          "454:           auto const hexv = dehexchar(*p++);",
          "455:           if (hexv < 0) return false; // includes check for end of string",
          "456:           u16cp <<= 4;",
          "457:           u16cp |= hexv;",
          "458:         }",
          "459:         if (u16cp > 0x7f) {",
          "460:           return false;",
          "461:         } else {",
          "462:           out = u16cp;",
          "",
          "[Added Lines]",
          "453:         if (UNLIKELY(is_tsimplejson)) {",
          "454:           auto const ch1 = *p++;",
          "455:           auto const ch2 = *p++;",
          "456:           auto const dch3 = dehexchar(*p++);",
          "457:           auto const dch4 = dehexchar(*p++);",
          "458:           if (UNLIKELY(ch1 != '0' || ch2 != '0' || dch3 < 0 || dch4 < 0)) {",
          "459:             return false;",
          "460:           }",
          "461:           out = (dch3 << 4) | dch4;",
          "463:         } else {",
          "464:           uint16_t u16cp = 0;",
          "465:           for (int i = 0; i < 4; i++) {",
          "466:             auto const hexv = dehexchar(*p++);",
          "467:             if (hexv < 0) return false; // includes check for end of string",
          "468:             u16cp <<= 4;",
          "469:             u16cp |= hexv;",
          "470:           }",
          "471:           if (u16cp > 0x7f) {",
          "472:             return false;",
          "473:           } else {",
          "474:             out = u16cp;",
          "475:             return true;",
          "476:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "661:   TypedValue* top;",
          "662:   int array_depth;",
          "663:   JSONContainerType container_type;",
          "664: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:   bool is_tsimplejson;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "975:   return utf16_to_utf8_tail(buf, utf16);",
          "976: }",
          "978: StaticString s__empty_(\"_empty_\");",
          "980: static void object_set(Variant &var,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "992: ALWAYS_INLINE",
          "993: void decode_escaped_bytes(UncheckedBuffer &buf, unsigned short bytes,",
          "994:                           bool is_tsimplejson) {",
          "995:   if (UNLIKELY(is_tsimplejson)) {",
          "996:     buf.append((char)bytes);",
          "997:   } else {",
          "998:     utf16_to_utf8(buf, bytes);",
          "999:   }",
          "1000: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1112:       options == (options & (k_JSON_FB_LOOSE |",
          "1113:                              k_JSON_FB_DARRAYS |",
          "1114:                              k_JSON_FB_DARRAYS_AND_VARRAYS |",
          "1116:       depth >= SimpleParser::kMaxArrayDepth &&",
          "1117:       length <= RuntimeOption::EvalSimpleJsonMaxLength &&",
          "1118:       SimpleParser::TryParse(p, length, json->tl_buffer.tv, z,",
          "1120:     return true;",
          "1121:   }",
          "",
          "[Removed Lines]",
          "1115:                              k_JSON_FB_HACK_ARRAYS)) &&",
          "1119:                              get_container_type_from_options(options))) {",
          "",
          "[Added Lines]",
          "1139:                              k_JSON_FB_HACK_ARRAYS |",
          "1140:                              k_JSON_FB_THRIFT_SIMPLE_JSON)) &&",
          "1144:                              get_container_type_from_options(options),",
          "1145:                              options & k_JSON_FB_THRIFT_SIMPLE_JSON)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1146:   static const int kMaxPersistentStringBufferCapacity = 256 * 1024;",
          "1148:   DataType type = kInvalidDataType;",
          "1151:   auto reset_type = [&] { type = kInvalidDataType; };",
          "",
          "[Removed Lines]",
          "1149:   unsigned short utf16 = 0;",
          "",
          "[Added Lines]",
          "1175:   unsigned short escaped_bytes = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1483:         Change the state and iterate.",
          "1485:       if (type == KindOfString) {",
          "1486:         if (/*<fb>*/(/*</fb>*/s == 3/*<fb>*/ || s == 30)/*</fb>*/ &&",
          "1487:             state != 8) {",
          "1488:           if (state != 4) {",
          "1490:           } else {",
          "1491:             switch (b) {",
          "1492:             case 'b': buf->append('\\b'); break;",
          "",
          "[Removed Lines]",
          "1489:             utf16_to_utf8(*buf, b);",
          "",
          "[Added Lines]",
          "1511:       bool is_tsimplejson = options & k_JSON_FB_THRIFT_SIMPLE_JSON;",
          "1516:             decode_escaped_bytes(*buf, b, is_tsimplejson);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1495:             case 'f': buf->append('\\f'); break;",
          "1496:             case 'r': buf->append('\\r'); break;",
          "1497:             default:",
          "1499:               break;",
          "1500:             }",
          "1501:           }",
          "1502:         } else if (s == 6) {",
          "1504:         } else if (s == 7) {",
          "1506:         } else if (s == 8) {",
          "1508:         } else if (s == 3 && state == 8) {",
          "1511:         }",
          "1512:       } else if ((type == kInvalidDataType || type == KindOfNull) &&",
          "1513:                  (c == S_DIG || c == S_ZER)) {",
          "",
          "[Removed Lines]",
          "1498:               utf16_to_utf8(*buf, b);",
          "1503:           utf16 = dehexchar(b) << 12;",
          "1505:           utf16 += dehexchar(b) << 8;",
          "1507:           utf16 += dehexchar(b) << 4;",
          "1509:           utf16 += dehexchar(b);",
          "1510:           utf16_to_utf8(*buf, utf16);",
          "",
          "[Added Lines]",
          "1525:               decode_escaped_bytes(*buf, b, is_tsimplejson);",
          "1530:           if (UNLIKELY(is_tsimplejson)) {",
          "1531:             if (UNLIKELY(b != '0'))  {",
          "1532:               s_json_parser->error_code = JSON_ERROR_SYNTAX;",
          "1533:               return false;",
          "1534:             }",
          "1535:             escaped_bytes = 0;",
          "1536:           } else {",
          "1537:             escaped_bytes = dehexchar(b) << 12;",
          "1538:           }",
          "1540:           if (UNLIKELY(is_tsimplejson)) {",
          "1541:             if (UNLIKELY(b != '0'))  {",
          "1542:               s_json_parser->error_code = JSON_ERROR_SYNTAX;",
          "1543:               return false;",
          "1544:             }",
          "1545:           } else {",
          "1546:             escaped_bytes += dehexchar(b) << 8;",
          "1547:           }",
          "1549:           escaped_bytes += dehexchar(b) << 4;",
          "1551:           escaped_bytes += dehexchar(b);",
          "1552:           decode_escaped_bytes(*buf, escaped_bytes, is_tsimplejson);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1532:       } else if (type == kInvalidDataType && state == 19 && s == 9) {",
          "1533:         type = KindOfNull;",
          "1534:       } else if (type != KindOfString && c > S_WSP) {",
          "1536:       }",
          "1538:       state = s;",
          "",
          "[Removed Lines]",
          "1535:         utf16_to_utf8(*buf, b);",
          "",
          "[Added Lines]",
          "1577:         decode_escaped_bytes(*buf, b, is_tsimplejson);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/json/ext_json.cpp||hphp/runtime/ext/json/ext_json.cpp": [
          "File: hphp/runtime/ext/json/ext_json.cpp -> hphp/runtime/ext/json/ext_json.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: const int64_t k_JSON_FB_WARN_VEC_LIKE_DARRAYS = 1ll << 31;",
          "65: const int64_t k_JSON_FB_WARN_DICT_LIKE_DARRAYS = 1ll << 32;",
          "66: const int64_t k_JSON_FB_IGNORE_LATEINIT = 1ll << 33;",
          "68: const int64_t k_JSON_ERROR_NONE",
          "69:   = json_error_codes::JSON_ERROR_NONE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: const int64_t k_JSON_FB_THRIFT_SIMPLE_JSON = 1ll << 34;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:     k_JSON_BIGINT_AS_STRING |",
          "167:     k_JSON_FB_HACK_ARRAYS |",
          "168:     k_JSON_FB_DARRAYS |",
          "170:   int64_t parser_options = options & supported_options;",
          "171:   Variant z;",
          "172:   const auto ok =",
          "",
          "[Removed Lines]",
          "169:     k_JSON_FB_DARRAYS_AND_VARRAYS;",
          "",
          "[Added Lines]",
          "170:     k_JSON_FB_DARRAYS_AND_VARRAYS |",
          "171:     k_JSON_FB_THRIFT_SIMPLE_JSON;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:     HHVM_RC_INT(JSON_FB_WARN_DICT_LIKE_DARRAYS,",
          "286:                 k_JSON_FB_WARN_DICT_LIKE_DARRAYS);",
          "287:     HHVM_RC_INT(JSON_FB_IGNORE_LATEINIT, k_JSON_FB_IGNORE_LATEINIT);",
          "289:     HHVM_RC_INT(JSON_ERROR_NONE, k_JSON_ERROR_NONE);",
          "290:     HHVM_RC_INT(JSON_ERROR_DEPTH, k_JSON_ERROR_DEPTH);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:     HHVM_RC_INT(JSON_FB_THRIFT_SIMPLE_JSON, k_JSON_FB_THRIFT_SIMPLE_JSON);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/json/ext_json.h||hphp/runtime/ext/json/ext_json.h": [
          "File: hphp/runtime/ext/json/ext_json.h -> hphp/runtime/ext/json/ext_json.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: extern const int64_t k_JSON_FB_STABLE_MAPS;",
          "51: extern const int64_t k_JSON_BIGINT_AS_STRING;",
          "52: extern const int64_t k_JSON_FB_DARRAYS_AND_VARRAYS;",
          "54: extern const int64_t k_JSON_ERROR_NONE;",
          "55: extern const int64_t k_JSON_ERROR_DEPTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: extern const int64_t k_JSON_FB_THRIFT_SIMPLE_JSON;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55d135c9e96475ec6ff237ff65ad87503d945e4f",
      "candidate_info": {
        "commit_hash": "55d135c9e96475ec6ff237ff65ad87503d945e4f",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/55d135c9e96475ec6ff237ff65ad87503d945e4f",
        "files": [
          "hphp/runtime/ext/json/JSON_parser.cpp",
          "hphp/test/slow/ext_json/decode_crash.php",
          "hphp/test/slow/ext_json/decode_crash.php.expect"
        ],
        "message": "Fix buffer overrun in SimpleParser::handleBackslash\n\nSummary:\nIt read 4 chars, then checked for validity, but any of them could have\nbeen the end of the string, so check after each one instead.\n\nReviewed By: oulgen\n\nDifferential Revision: D19611163",
        "before_after_code_files": [
          "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp": [
          "File: hphp/runtime/ext/json/JSON_parser.cpp -> hphp/runtime/ext/json/JSON_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:       case 'u': {",
          "454:         if (UNLIKELY(is_tsimplejson)) {",
          "455:           auto const ch1 = *p++;",
          "456:           auto const ch2 = *p++;",
          "457:           auto const dch3 = dehexchar(*p++);",
          "458:           auto const dch4 = dehexchar(*p++);",
          "462:           out = (dch3 << 4) | dch4;",
          "463:           return true;",
          "464:         } else {",
          "",
          "[Removed Lines]",
          "459:           if (UNLIKELY(ch1 != '0' || ch2 != '0' || dch3 < 0 || dch4 < 0)) {",
          "460:             return false;",
          "461:           }",
          "",
          "[Added Lines]",
          "456:           if (UNLIKELY(ch1 != '0')) return false;",
          "458:           if (UNLIKELY(ch2 != '0')) return false;",
          "460:           if (UNLIKELY(dch3 < 0)) return false;",
          "462:           if (UNLIKELY(dch4 < 0)) return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "816e5f41f64ae7e257f4cb63bf1d56443968854e",
      "candidate_info": {
        "commit_hash": "816e5f41f64ae7e257f4cb63bf1d56443968854e",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/816e5f41f64ae7e257f4cb63bf1d56443968854e",
        "files": [
          "hphp/runtime/ext/json/JSON_parser.cpp",
          "hphp/test/slow/ext_json/decode_crash.php",
          "hphp/test/slow/ext_json/decode_crash.php.expect"
        ],
        "message": "Fix buffer overrun in SimpleParser::handleBackslash\n\nSummary:\nIt read 4 chars, then checked for validity, but any of them could have\nbeen the end of the string, so check after each one instead.\n\nReviewed By: oulgen\n\nDifferential Revision: D19611163",
        "before_after_code_files": [
          "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp": [
          "File: hphp/runtime/ext/json/JSON_parser.cpp -> hphp/runtime/ext/json/JSON_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:       case 'u': {",
          "455:         if (UNLIKELY(is_tsimplejson)) {",
          "456:           auto const ch1 = *p++;",
          "457:           auto const ch2 = *p++;",
          "458:           auto const dch3 = dehexchar(*p++);",
          "459:           auto const dch4 = dehexchar(*p++);",
          "463:           out = (dch3 << 4) | dch4;",
          "464:           return true;",
          "465:         } else {",
          "",
          "[Removed Lines]",
          "460:           if (UNLIKELY(ch1 != '0' || ch2 != '0' || dch3 < 0 || dch4 < 0)) {",
          "461:             return false;",
          "462:           }",
          "",
          "[Added Lines]",
          "457:           if (UNLIKELY(ch1 != '0')) return false;",
          "459:           if (UNLIKELY(ch2 != '0')) return false;",
          "461:           if (UNLIKELY(dch3 < 0)) return false;",
          "463:           if (UNLIKELY(dch4 < 0)) return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f3d0d86cf53e33f6ed1fcdf80df6b11cd3ad98f",
      "candidate_info": {
        "commit_hash": "1f3d0d86cf53e33f6ed1fcdf80df6b11cd3ad98f",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/1f3d0d86cf53e33f6ed1fcdf80df6b11cd3ad98f",
        "files": [
          "hphp/runtime/ext/json/JSON_parser.cpp",
          "hphp/test/slow/ext_json/decode_crash.php",
          "hphp/test/slow/ext_json/decode_crash.php.expect"
        ],
        "message": "Fix buffer overrun in SimpleParser::handleBackslash\n\nSummary:\nIt read 4 chars, then checked for validity, but any of them could have\nbeen the end of the string, so check after each one instead.\n\nReviewed By: oulgen\n\nDifferential Revision: D19611163",
        "before_after_code_files": [
          "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/json/JSON_parser.cpp||hphp/runtime/ext/json/JSON_parser.cpp": [
          "File: hphp/runtime/ext/json/JSON_parser.cpp -> hphp/runtime/ext/json/JSON_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:       case 'u': {",
          "455:         if (UNLIKELY(is_tsimplejson)) {",
          "456:           auto const ch1 = *p++;",
          "457:           auto const ch2 = *p++;",
          "458:           auto const dch3 = dehexchar(*p++);",
          "459:           auto const dch4 = dehexchar(*p++);",
          "463:           out = (dch3 << 4) | dch4;",
          "464:           return true;",
          "465:         } else {",
          "",
          "[Removed Lines]",
          "460:           if (UNLIKELY(ch1 != '0' || ch2 != '0' || dch3 < 0 || dch4 < 0)) {",
          "461:             return false;",
          "462:           }",
          "",
          "[Added Lines]",
          "457:           if (UNLIKELY(ch1 != '0')) return false;",
          "459:           if (UNLIKELY(ch2 != '0')) return false;",
          "461:           if (UNLIKELY(dch3 < 0)) return false;",
          "463:           if (UNLIKELY(dch4 < 0)) return false;",
          "",
          "---------------"
        ]
      }
    }
  ]
}