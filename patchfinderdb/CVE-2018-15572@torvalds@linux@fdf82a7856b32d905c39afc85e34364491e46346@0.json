{
  "cve_id": "CVE-2018-15572",
  "cve_desc": "The spectre_v2_select_mitigation function in arch/x86/kernel/cpu/bugs.c in the Linux kernel before 4.18.1 does not always fill RSB upon a context switch, which makes it easier for attackers to conduct userspace-userspace spectreRSB attacks.",
  "repo": "torvalds/linux",
  "patch_hash": "fdf82a7856b32d905c39afc85e34364491e46346",
  "patch_info": {
    "commit_hash": "fdf82a7856b32d905c39afc85e34364491e46346",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/fdf82a7856b32d905c39afc85e34364491e46346",
    "files": [
      "arch/x86/kernel/cpu/bugs.c"
    ],
    "message": "x86/speculation: Protect against userspace-userspace spectreRSB\n\nThe article \"Spectre Returns! Speculation Attacks using the Return Stack \nBuffer\" [1] describes two new (sub-)variants of spectrev2-like attacks, \nmaking use solely of the RSB contents even on CPUs that don't fallback to \nBTB on RSB underflow (Skylake+).\n\nMitigate userspace-userspace attacks by always unconditionally filling RSB on\ncontext switch when the generic spectrev2 mitigation has been enabled.\n\n[1] https://arxiv.org/pdf/1807.07940.pdf\n\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>\nAcked-by: Tim Chen <tim.c.chen@linux.intel.com>\nCc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: Borislav Petkov <bp@suse.de>\nCc: David Woodhouse <dwmw@amazon.co.uk>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: stable@vger.kernel.org\nLink: https://lkml.kernel.org/r/nycvar.YFH.7.76.1807261308190.997@cbobk.fhfr.pm",
    "before_after_code_files": [
      "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
      "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "313:  return cmd;",
      "314: }",
      "333: static void __init spectre_v2_select_mitigation(void)",
      "334: {",
      "335:  enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();",
      "",
      "[Removed Lines]",
      "317: static bool __init is_skylake_era(void)",
      "318: {",
      "319:  if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL &&",
      "320:      boot_cpu_data.x86 == 6) {",
      "321:   switch (boot_cpu_data.x86_model) {",
      "322:   case INTEL_FAM6_SKYLAKE_MOBILE:",
      "323:   case INTEL_FAM6_SKYLAKE_DESKTOP:",
      "324:   case INTEL_FAM6_SKYLAKE_X:",
      "325:   case INTEL_FAM6_KABYLAKE_MOBILE:",
      "326:   case INTEL_FAM6_KABYLAKE_DESKTOP:",
      "327:    return true;",
      "328:   }",
      "329:  }",
      "330:  return false;",
      "331: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "390:  pr_info(\"%s\\n\", spectre_v2_strings[mode]);",
      "411:  if (boot_cpu_has(X86_FEATURE_IBPB)) {",
      "",
      "[Removed Lines]",
      "404:  if ((!boot_cpu_has(X86_FEATURE_PTI) &&",
      "405:       !boot_cpu_has(X86_FEATURE_SMEP)) || is_skylake_era()) {",
      "406:   setup_force_cpu_cap(X86_FEATURE_RSB_CTXSW);",
      "407:   pr_info(\"Spectre v2 mitigation: Filling RSB on context switch\\n\");",
      "408:  }",
      "",
      "[Added Lines]",
      "383:  setup_force_cpu_cap(X86_FEATURE_RSB_CTXSW);",
      "384:  pr_info(\"Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch\\n\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f9544b2b076ca90d887c5ae5d74fab4c21bb7c13",
      "candidate_info": {
        "commit_hash": "f9544b2b076ca90d887c5ae5d74fab4c21bb7c13",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f9544b2b076ca90d887c5ae5d74fab4c21bb7c13",
        "files": [
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/bugs: Make boot modes __ro_after_init\n\nThere's no reason for these to be changed after boot.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: #undef pr_fmt",
          "130: #define pr_fmt(fmt)     \"Spectre V2 : \" fmt",
          "134: void x86_spec_ctrl_set(u64 val)",
          "135: {",
          "",
          "[Removed Lines]",
          "132: static enum spectre_v2_mitigation spectre_v2_enabled = SPECTRE_V2_NONE;",
          "",
          "[Added Lines]",
          "132: static enum spectre_v2_mitigation spectre_v2_enabled __ro_after_init =",
          "133:  SPECTRE_V2_NONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407: #undef pr_fmt",
          "408: #define pr_fmt(fmt) \"Speculative Store Bypass: \" fmt",
          "413: enum ssb_mitigation_cmd {",
          "",
          "[Removed Lines]",
          "410: static enum ssb_mitigation ssb_mode = SPEC_STORE_BYPASS_NONE;",
          "",
          "[Added Lines]",
          "411: static enum ssb_mitigation ssb_mode __ro_after_init = SPEC_STORE_BYPASS_NONE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24f7fc83b9204d20f878c57cb77d261ae825e033",
      "candidate_info": {
        "commit_hash": "24f7fc83b9204d20f878c57cb77d261ae825e033",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/24f7fc83b9204d20f878c57cb77d261ae825e033",
        "files": [
          "Documentation/admin-guide/kernel-parameters.txt",
          "arch/x86/include/asm/cpufeatures.h",
          "arch/x86/include/asm/nospec-branch.h",
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation\n\nContemporary high performance processors use a common industry-wide\noptimization known as \"Speculative Store Bypass\" in which loads from\naddresses to which a recent store has occurred may (speculatively) see an\nolder value. Intel refers to this feature as \"Memory Disambiguation\" which\nis part of their \"Smart Memory Access\" capability.\n\nMemory Disambiguation can expose a cache side-channel attack against such\nspeculatively read values. An attacker can create exploit code that allows\nthem to read memory outside of a sandbox environment (for example,\nmalicious JavaScript in a web page), or to perform more complex attacks\nagainst code running within the same privilege level, e.g. via the stack.\n\nAs a first step to mitigate against such attacks, provide two boot command\nline control knobs:\n\n nospec_store_bypass_disable\n spec_store_bypass_disable=[off,auto,on]\n\nBy default affected x86 processors will power on with Speculative\nStore Bypass enabled. Hence the provided kernel parameters are written\nfrom the point of view of whether to enable a mitigation or not.\nThe parameters are as follows:\n\n - auto - Kernel detects whether your CPU model contains an implementation\n\t  of Speculative Store Bypass and picks the most appropriate\n\t  mitigation.\n\n - on   - disable Speculative Store Bypass\n - off  - enable Speculative Store Bypass\n\n[ tglx: Reordered the checks so that the whole evaluation is not done\n  \twhen the CPU does not support RDS ]\n\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Borislav Petkov <bp@suse.de>\nReviewed-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/include/asm/cpufeatures.h||arch/x86/include/asm/cpufeatures.h",
          "arch/x86/include/asm/nospec-branch.h||arch/x86/include/asm/nospec-branch.h",
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/cpufeatures.h||arch/x86/include/asm/cpufeatures.h": [
          "File: arch/x86/include/asm/cpufeatures.h -> arch/x86/include/asm/cpufeatures.h"
        ],
        "arch/x86/include/asm/nospec-branch.h||arch/x86/include/asm/nospec-branch.h": [
          "File: arch/x86/include/asm/nospec-branch.h -> arch/x86/include/asm/nospec-branch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: extern void x86_spec_ctrl_set_guest(u64);",
          "239: extern void x86_spec_ctrl_restore_host(u64);",
          "241: extern char __indirect_thunk_start[];",
          "242: extern char __indirect_thunk_end[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242: enum ssb_mitigation {",
          "243:  SPEC_STORE_BYPASS_NONE,",
          "244:  SPEC_STORE_BYPASS_DISABLE,",
          "245: };",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <asm/intel-family.h>",
          "29: static void __init spectre_v2_select_mitigation(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: static void __init ssb_select_mitigation(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  spectre_v2_select_mitigation();",
          "56: #ifdef CONFIG_X86_32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:  ssb_select_mitigation();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:  }",
          "358: }",
          "360: #undef pr_fmt",
          "362: #ifdef CONFIG_SYSFS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367: #undef pr_fmt",
          "368: #define pr_fmt(fmt) \"Speculative Store Bypass: \" fmt",
          "370: static enum ssb_mitigation ssb_mode = SPEC_STORE_BYPASS_NONE;",
          "373: enum ssb_mitigation_cmd {",
          "374:  SPEC_STORE_BYPASS_CMD_NONE,",
          "375:  SPEC_STORE_BYPASS_CMD_AUTO,",
          "376:  SPEC_STORE_BYPASS_CMD_ON,",
          "377: };",
          "379: static const char *ssb_strings[] = {",
          "380:  [SPEC_STORE_BYPASS_NONE] = \"Vulnerable\",",
          "381:  [SPEC_STORE_BYPASS_DISABLE] = \"Mitigation: Speculative Store Bypass disabled\"",
          "382: };",
          "384: static const struct {",
          "385:  const char *option;",
          "386:  enum ssb_mitigation_cmd cmd;",
          "387: } ssb_mitigation_options[] = {",
          "391: };",
          "393: static enum ssb_mitigation_cmd __init ssb_parse_cmdline(void)",
          "394: {",
          "395:  enum ssb_mitigation_cmd cmd = SPEC_STORE_BYPASS_CMD_AUTO;",
          "396:  char arg[20];",
          "397:  int ret, i;",
          "399:  if (cmdline_find_option_bool(boot_command_line, \"nospec_store_bypass_disable\")) {",
          "400:   return SPEC_STORE_BYPASS_CMD_NONE;",
          "401:  } else {",
          "402:   ret = cmdline_find_option(boot_command_line, \"spec_store_bypass_disable\",",
          "403:        arg, sizeof(arg));",
          "404:   if (ret < 0)",
          "405:    return SPEC_STORE_BYPASS_CMD_AUTO;",
          "407:   for (i = 0; i < ARRAY_SIZE(ssb_mitigation_options); i++) {",
          "408:    if (!match_option(arg, ret, ssb_mitigation_options[i].option))",
          "409:     continue;",
          "411:    cmd = ssb_mitigation_options[i].cmd;",
          "412:    break;",
          "413:   }",
          "415:   if (i >= ARRAY_SIZE(ssb_mitigation_options)) {",
          "416:    pr_err(\"unknown option (%s). Switching to AUTO select\\n\", arg);",
          "417:    return SPEC_STORE_BYPASS_CMD_AUTO;",
          "418:   }",
          "419:  }",
          "421:  return cmd;",
          "422: }",
          "424: static enum ssb_mitigation_cmd __init __ssb_select_mitigation(void)",
          "425: {",
          "426:  enum ssb_mitigation mode = SPEC_STORE_BYPASS_NONE;",
          "427:  enum ssb_mitigation_cmd cmd;",
          "429:  if (!boot_cpu_has(X86_FEATURE_RDS))",
          "430:   return mode;",
          "432:  cmd = ssb_parse_cmdline();",
          "433:  if (!boot_cpu_has_bug(X86_BUG_SPEC_STORE_BYPASS) &&",
          "434:      (cmd == SPEC_STORE_BYPASS_CMD_NONE ||",
          "435:       cmd == SPEC_STORE_BYPASS_CMD_AUTO))",
          "436:   return mode;",
          "438:  switch (cmd) {",
          "439:  case SPEC_STORE_BYPASS_CMD_AUTO:",
          "440:  case SPEC_STORE_BYPASS_CMD_ON:",
          "441:   mode = SPEC_STORE_BYPASS_DISABLE;",
          "442:   break;",
          "443:  case SPEC_STORE_BYPASS_CMD_NONE:",
          "444:   break;",
          "445:  }",
          "447:  if (mode != SPEC_STORE_BYPASS_NONE)",
          "448:   setup_force_cpu_cap(X86_FEATURE_SPEC_STORE_BYPASS_DISABLE);",
          "449:  return mode;",
          "450: }",
          "452: static void ssb_select_mitigation()",
          "453: {",
          "454:  ssb_mode = __ssb_select_mitigation();",
          "456:  if (boot_cpu_has_bug(X86_BUG_SPEC_STORE_BYPASS))",
          "457:   pr_info(\"%s\\n\", ssb_strings[ssb_mode]);",
          "458: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "383:           boot_cpu_has(X86_FEATURE_USE_IBRS_FW) ? \", IBRS_FW\" : \"\",",
          "384:           spectre_v2_module_string());",
          "386:  default:",
          "387:   break;",
          "388:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:  case X86_BUG_SPEC_STORE_BYPASS:",
          "487:   return sprintf(buf, \"%s\\n\", ssb_strings[ssb_mode]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da285121560e769cc31797bba6422eea71d473e0",
      "candidate_info": {
        "commit_hash": "da285121560e769cc31797bba6422eea71d473e0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/da285121560e769cc31797bba6422eea71d473e0",
        "files": [
          "Documentation/admin-guide/kernel-parameters.txt",
          "arch/x86/include/asm/nospec-branch.h",
          "arch/x86/kernel/cpu/bugs.c",
          "arch/x86/kernel/cpu/common.c"
        ],
        "message": "x86/spectre: Add boot time option to select Spectre v2 mitigation\n\nAdd a spectre_v2= option to select the mitigation used for the indirect\nbranch speculation vulnerability.\n\nCurrently, the only option available is retpoline, in its various forms.\nThis will be expanded to cover the new IBRS/IBPB microcode features.\n\nThe RETPOLINE_AMD feature relies on a serializing LFENCE for speculation\ncontrol. For AMD hardware, only set RETPOLINE_AMD if LFENCE is a\nserializing instruction, which is indicated by the LFENCE_RDTSC feature.\n\n[ tglx: Folded back the LFENCE/AMD fixes and reworked it so IBRS\n  \tintegration becomes simple ]\n\nSigned-off-by: David Woodhouse <dwmw@amazon.co.uk>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: gnomes@lxorguk.ukuu.org.uk\nCc: Rik van Riel <riel@redhat.com>\nCc: Andi Kleen <ak@linux.intel.com>\nCc: Josh Poimboeuf <jpoimboe@redhat.com>\nCc: thomas.lendacky@amd.com\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Jiri Kosina <jikos@kernel.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Dave Hansen <dave.hansen@intel.com>\nCc: Kees Cook <keescook@google.com>\nCc: Tim Chen <tim.c.chen@linux.intel.com>\nCc: Greg Kroah-Hartman <gregkh@linux-foundation.org>\nCc: Paul Turner <pjt@google.com>\nLink: https://lkml.kernel.org/r/1515707194-20531-5-git-send-email-dwmw@amazon.co.uk",
        "before_after_code_files": [
          "arch/x86/include/asm/nospec-branch.h||arch/x86/include/asm/nospec-branch.h",
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c",
          "arch/x86/kernel/cpu/common.c||arch/x86/kernel/cpu/common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/nospec-branch.h||arch/x86/include/asm/nospec-branch.h": [
          "File: arch/x86/include/asm/nospec-branch.h -> arch/x86/include/asm/nospec-branch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: # define THUNK_TARGET(addr) [thunk_target] \"rm\" (addr)",
          "125: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: enum spectre_v2_mitigation {",
          "129:  SPECTRE_V2_NONE,",
          "130:  SPECTRE_V2_RETPOLINE_MINIMAL,",
          "131:  SPECTRE_V2_RETPOLINE_MINIMAL_AMD,",
          "132:  SPECTRE_V2_RETPOLINE_GENERIC,",
          "133:  SPECTRE_V2_RETPOLINE_AMD,",
          "134:  SPECTRE_V2_IBRS,",
          "135: };",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <linux/init.h>",
          "12: #include <linux/utsname.h>",
          "13: #include <linux/cpu.h>",
          "14: #include <asm/bugs.h>",
          "15: #include <asm/processor.h>",
          "16: #include <asm/processor-flags.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <asm/nospec-branch.h>",
          "16: #include <asm/cmdline.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: #include <asm/pgtable.h>",
          "22: #include <asm/set_memory.h>",
          "24: void __init check_bugs(void)",
          "25: {",
          "26:  identify_boot_cpu();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: static void __init spectre_v2_select_mitigation(void);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:   print_cpu_info(&boot_cpu_data);",
          "31:  }",
          "33: #ifdef CONFIG_X86_32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  spectre_v2_select_mitigation();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62: #endif",
          "63: }",
          "65: #ifdef CONFIG_SYSFS",
          "66: ssize_t cpu_show_meltdown(struct device *dev,",
          "67:      struct device_attribute *attr, char *buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: enum spectre_v2_mitigation_cmd {",
          "75:  SPECTRE_V2_CMD_NONE,",
          "76:  SPECTRE_V2_CMD_AUTO,",
          "77:  SPECTRE_V2_CMD_FORCE,",
          "78:  SPECTRE_V2_CMD_RETPOLINE,",
          "79:  SPECTRE_V2_CMD_RETPOLINE_GENERIC,",
          "80:  SPECTRE_V2_CMD_RETPOLINE_AMD,",
          "81: };",
          "83: static const char *spectre_v2_strings[] = {",
          "84:  [SPECTRE_V2_NONE]   = \"Vulnerable\",",
          "85:  [SPECTRE_V2_RETPOLINE_MINIMAL]  = \"Vulnerable: Minimal generic ASM retpoline\",",
          "86:  [SPECTRE_V2_RETPOLINE_MINIMAL_AMD] = \"Vulnerable: Minimal AMD ASM retpoline\",",
          "87:  [SPECTRE_V2_RETPOLINE_GENERIC]  = \"Mitigation: Full generic retpoline\",",
          "88:  [SPECTRE_V2_RETPOLINE_AMD]  = \"Mitigation: Full AMD retpoline\",",
          "89: };",
          "91: #undef pr_fmt",
          "92: #define pr_fmt(fmt)     \"Spectre V2 mitigation: \" fmt",
          "94: static enum spectre_v2_mitigation spectre_v2_enabled = SPECTRE_V2_NONE;",
          "96: static void __init spec2_print_if_insecure(const char *reason)",
          "97: {",
          "98:  if (boot_cpu_has_bug(X86_BUG_SPECTRE_V2))",
          "99:   pr_info(\"%s\\n\", reason);",
          "100: }",
          "102: static void __init spec2_print_if_secure(const char *reason)",
          "103: {",
          "104:  if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2))",
          "105:   pr_info(\"%s\\n\", reason);",
          "106: }",
          "108: static inline bool retp_compiler(void)",
          "109: {",
          "110:  return __is_defined(RETPOLINE);",
          "111: }",
          "113: static inline bool match_option(const char *arg, int arglen, const char *opt)",
          "114: {",
          "115:  int len = strlen(opt);",
          "117:  return len == arglen && !strncmp(arg, opt, len);",
          "118: }",
          "120: static enum spectre_v2_mitigation_cmd __init spectre_v2_parse_cmdline(void)",
          "121: {",
          "122:  char arg[20];",
          "123:  int ret;",
          "125:  ret = cmdline_find_option(boot_command_line, \"spectre_v2\", arg,",
          "126:       sizeof(arg));",
          "127:  if (ret > 0)  {",
          "128:   if (match_option(arg, ret, \"off\")) {",
          "129:    goto disable;",
          "130:   } else if (match_option(arg, ret, \"on\")) {",
          "131:    spec2_print_if_secure(\"force enabled on command line.\");",
          "132:    return SPECTRE_V2_CMD_FORCE;",
          "133:   } else if (match_option(arg, ret, \"retpoline\")) {",
          "134:    spec2_print_if_insecure(\"retpoline selected on command line.\");",
          "135:    return SPECTRE_V2_CMD_RETPOLINE;",
          "136:   } else if (match_option(arg, ret, \"retpoline,amd\")) {",
          "137:    if (boot_cpu_data.x86_vendor != X86_VENDOR_AMD) {",
          "138:     pr_err(\"retpoline,amd selected but CPU is not AMD. Switching to AUTO select\\n\");",
          "139:     return SPECTRE_V2_CMD_AUTO;",
          "140:    }",
          "141:    spec2_print_if_insecure(\"AMD retpoline selected on command line.\");",
          "142:    return SPECTRE_V2_CMD_RETPOLINE_AMD;",
          "143:   } else if (match_option(arg, ret, \"retpoline,generic\")) {",
          "144:    spec2_print_if_insecure(\"generic retpoline selected on command line.\");",
          "145:    return SPECTRE_V2_CMD_RETPOLINE_GENERIC;",
          "146:   } else if (match_option(arg, ret, \"auto\")) {",
          "147:    return SPECTRE_V2_CMD_AUTO;",
          "148:   }",
          "149:  }",
          "151:  if (!cmdline_find_option_bool(boot_command_line, \"nospectre_v2\"))",
          "152:   return SPECTRE_V2_CMD_AUTO;",
          "153: disable:",
          "154:  spec2_print_if_insecure(\"disabled on command line.\");",
          "155:  return SPECTRE_V2_CMD_NONE;",
          "156: }",
          "158: static void __init spectre_v2_select_mitigation(void)",
          "159: {",
          "160:  enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();",
          "161:  enum spectre_v2_mitigation mode = SPECTRE_V2_NONE;",
          "167:  if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2) &&",
          "168:      (cmd == SPECTRE_V2_CMD_NONE || cmd == SPECTRE_V2_CMD_AUTO))",
          "169:   return;",
          "171:  switch (cmd) {",
          "172:  case SPECTRE_V2_CMD_NONE:",
          "173:   return;",
          "175:  case SPECTRE_V2_CMD_FORCE:",
          "177:  case SPECTRE_V2_CMD_AUTO:",
          "178:   goto retpoline_auto;",
          "180:  case SPECTRE_V2_CMD_RETPOLINE_AMD:",
          "181:   if (IS_ENABLED(CONFIG_RETPOLINE))",
          "182:    goto retpoline_amd;",
          "183:   break;",
          "184:  case SPECTRE_V2_CMD_RETPOLINE_GENERIC:",
          "185:   if (IS_ENABLED(CONFIG_RETPOLINE))",
          "186:    goto retpoline_generic;",
          "187:   break;",
          "188:  case SPECTRE_V2_CMD_RETPOLINE:",
          "189:   if (IS_ENABLED(CONFIG_RETPOLINE))",
          "190:    goto retpoline_auto;",
          "191:   break;",
          "192:  }",
          "193:  pr_err(\"kernel not compiled with retpoline; no mitigation available!\");",
          "194:  return;",
          "196: retpoline_auto:",
          "197:  if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD) {",
          "198:  retpoline_amd:",
          "199:   if (!boot_cpu_has(X86_FEATURE_LFENCE_RDTSC)) {",
          "200:    pr_err(\"LFENCE not serializing. Switching to generic retpoline\\n\");",
          "201:    goto retpoline_generic;",
          "202:   }",
          "203:   mode = retp_compiler() ? SPECTRE_V2_RETPOLINE_AMD :",
          "204:       SPECTRE_V2_RETPOLINE_MINIMAL_AMD;",
          "205:   setup_force_cpu_cap(X86_FEATURE_RETPOLINE_AMD);",
          "206:   setup_force_cpu_cap(X86_FEATURE_RETPOLINE);",
          "207:  } else {",
          "208:  retpoline_generic:",
          "209:   mode = retp_compiler() ? SPECTRE_V2_RETPOLINE_GENERIC :",
          "210:       SPECTRE_V2_RETPOLINE_MINIMAL;",
          "211:   setup_force_cpu_cap(X86_FEATURE_RETPOLINE);",
          "212:  }",
          "214:  spectre_v2_enabled = mode;",
          "215:  pr_info(\"%s\\n\", spectre_v2_strings[mode]);",
          "216: }",
          "218: #undef pr_fmt",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86: {",
          "87:  if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2))",
          "88:   return sprintf(buf, \"Not affected\\n\");",
          "90: }",
          "91: #endif",
          "",
          "[Removed Lines]",
          "89:  return sprintf(buf, \"Vulnerable\\n\");",
          "",
          "[Added Lines]",
          "245:  return sprintf(buf, \"%s\\n\", spectre_v2_strings[spectre_v2_enabled]);",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/common.c||arch/x86/kernel/cpu/common.c": [
          "File: arch/x86/kernel/cpu/common.c -> arch/x86/kernel/cpu/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:  setup_force_cpu_bug(X86_BUG_SPECTRE_V1);",
          "906:  setup_force_cpu_bug(X86_BUG_SPECTRE_V2);",
          "912:  fpu__init_system(c);",
          "914: #ifdef CONFIG_X86_32",
          "",
          "[Removed Lines]",
          "908: #ifdef CONFIG_RETPOLINE",
          "909:  setup_force_cpu_cap(X86_FEATURE_RETPOLINE);",
          "910: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}