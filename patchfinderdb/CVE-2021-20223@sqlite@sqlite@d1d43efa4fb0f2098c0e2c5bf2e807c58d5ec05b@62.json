{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42c2a04eb70c0c6a684be8884533d4c7266dc4bf",
      "candidate_info": {
        "commit_hash": "42c2a04eb70c0c6a684be8884533d4c7266dc4bf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42c2a04eb70c0c6a684be8884533d4c7266dc4bf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Remove a stray \"&amp;\" character in the CLI, detected by a clang warning.\n\nFossilOrigin-Name: 5865d2f2d0333024366ecf1d919535fd4ec05c637feff16d75028ccdc8db4b50",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9924c0456bfcd2058c9620a93dfbfd4c7d960c68910ce6aed7364dff42baba5c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4782: static void import_cleanup(ImportCtx *p){",
          "4784:     p->xCloser(p->in);",
          "4785:     p->in = 0;",
          "4786:   }",
          "",
          "[Removed Lines]",
          "4783:   if( p->in!=0 &&& p->xCloser!=0 ){",
          "",
          "[Added Lines]",
          "4783:   if( p->in!=0 && p->xCloser!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97bffe674f4d40e03a7bd72c07dc5f1a39858bfd",
      "candidate_info": {
        "commit_hash": "97bffe674f4d40e03a7bd72c07dc5f1a39858bfd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97bffe674f4d40e03a7bd72c07dc5f1a39858bfd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix a misworded comment.  No code changes.\n\nFossilOrigin-Name: ee0bc7ede0fbf3e54bb934c0d580c62d7393c984cbc374ece6d57fe9211dac26",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7d98d3dff2f0e0cfa5bb8be8e5fd2af5ab470be399eafe3d77b23ee1262f70d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c"
        ]
      }
    },
    {
      "candidate_hash": "e7cf8fdd17c50ab8e46fa8a39b336ed1b0cb9d58",
      "candidate_info": {
        "commit_hash": "e7cf8fdd17c50ab8e46fa8a39b336ed1b0cb9d58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7cf8fdd17c50ab8e46fa8a39b336ed1b0cb9d58",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/upfrom3.test"
        ],
        "message": "Add tests for UPDATE...FROM and foreign keys.\n\nFossilOrigin-Name: 6c3668f9ed898337e664bec95865f15688a6bba43f095358dda5d08abef2bbaa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/upfrom3.test||test/upfrom3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13224cbd75990615088f3e30ccba05d31b3099fae4300c9ab8f7663bc5f0eb6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/upfrom3.test||test/upfrom3.test": [
          "File: test/upfrom3.test -> test/upfrom3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #   3.*: Test that UPDATE ... FROM statements are not confused if there",
          "26: #        are multiple tables of the same name in attached databases.",
          "27: #",
          "29: foreach {tn wo} {",
          "30:   1 \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #   4.*: Tests for UPDATE ... FROM statements and foreign keys.",
          "29: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:   }]",
          "210: }",
          "212: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #-------------------------------------------------------------------------",
          "215: reset_db",
          "216: foreach {tn wo} {",
          "217:   1 \"\"",
          "218:   2 \"WITHOUT ROWID\"",
          "219: } {",
          "220:   reset_db",
          "221:   forcedelete test.db2",
          "222:   eval [string map [list %WO% $wo %TN% $tn] {",
          "224:     do_execsql_test 4.$tn.1 {",
          "225:       CREATE TABLE p1(a INTEGER PRIMARY KEY, b) %WO%;",
          "226:       CREATE TABLE c1(x PRIMARY KEY, y REFERENCES p1 ON UPDATE CASCADE) %WO%;",
          "227:       PRAGMA foreign_keys = 1;",
          "229:       INSERT INTO p1 VALUES(1, 'one');",
          "230:       INSERT INTO p1 VALUES(11, 'eleven');",
          "231:       INSERT INTO p1 VALUES(111, 'eleventyone');",
          "233:       INSERT INTO c1 VALUES('a', 1);",
          "234:       INSERT INTO c1 VALUES('b', 11);",
          "235:       INSERT INTO c1 VALUES('c', 111);",
          "236:     }",
          "238:     do_execsql_test 4.$tn.2 {",
          "239:       CREATE TABLE map(f, t);",
          "240:       INSERT INTO map VALUES('a', 111);",
          "241:       INSERT INTO map VALUES('c', 112);",
          "242:     }",
          "244:     do_catchsql_test 4.$tn.3 {",
          "245:       UPDATE c1 SET y=t FROM map WHERE x=f;",
          "246:     } {1 {FOREIGN KEY constraint failed}}",
          "248:     do_execsql_test 4.$tn.4 {",
          "249:       INSERT INTO map VALUES('eleven', 12);",
          "250:       INSERT INTO map VALUES('eleventyone', 112);",
          "251:       UPDATE p1 SET a=t FROM map WHERE b=f;",
          "252:     }",
          "254:     do_execsql_test 4.$tn.5 {",
          "255:       SELECT * FROM c1",
          "256:     } {a 1  b 12  c 112}",
          "258:   }]",
          "259: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a96a69b7dbbb9d933d27af8516cb7c5245956bb0",
      "candidate_info": {
        "commit_hash": "a96a69b7dbbb9d933d27af8516cb7c5245956bb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a96a69b7dbbb9d933d27af8516cb7c5245956bb0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add a test case to fuzzdata8.db for the recent Henry Liu bugs.\n\nFossilOrigin-Name: 42b02454b146ca1b04c0a5321465326435fc5b995f5498d3b1cf69c558a20f95",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a302b42c7bf5e11ddb5522ca999f74aba397d3a7eb91b1844bb02852f772441",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b14b65d20a2ba85bd90689772f605ba5a32bfed",
      "candidate_info": {
        "commit_hash": "7b14b65d20a2ba85bd90689772f605ba5a32bfed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b14b65d20a2ba85bd90689772f605ba5a32bfed",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/insert.c",
          "src/sqlite.h.in",
          "src/vdbe.c",
          "test/conflict3.test",
          "test/update.test"
        ],
        "message": "Do not allow triggers that run as part of REPLACE conflict resolution during an UPDATE to modify the the table being updated.  Otherwise, those triggers might delete content out from under the update operation, leading to all kinds of problems.  Ticket [314cc133e5ada126]\n\nFossilOrigin-Name: db4b7e1dc399c1f16b827ac087aa37c0815f4b2f41f1ffad59963eead2ab5562",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/insert.c||src/insert.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/vdbe.c||src/vdbe.c",
          "test/conflict3.test||test/conflict3.test",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 21ef6e99331210b80fa7c71b4f02e8f768a748d01aef884368af2f6b51a067e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "699:   assert( 0==pCur->pKey );",
          "700:   assert( cursorHoldsMutex(pCur) );",
          "702:   if( pCur->eState==CURSOR_SKIPNEXT ){",
          "703:     pCur->eState = CURSOR_VALID;",
          "704:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "702:   if( pCur->curFlags & BTCF_Pinned ){",
          "703:     return SQLITE_CONSTRAINT_PINNED;",
          "704:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4562:   return pCur->info.nKey;",
          "4563: }",
          "4565: #ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4571: void sqlite3BtreeCursorPin(BtCursor *pCur){",
          "4572:   assert( (pCur->curFlags & BTCF_Pinned)==0 );",
          "4573:   pCur->curFlags |= BTCF_Pinned;",
          "4574: }",
          "4575: void sqlite3BtreeCursorUnpin(BtCursor *pCur){",
          "4576:   assert( (pCur->curFlags & BTCF_Pinned)!=0 );",
          "4577:   pCur->curFlags &= ~BTCF_Pinned;",
          "4578: }",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: int sqlite3BtreeEof(BtCursor*);",
          "307: int sqlite3BtreePrevious(BtCursor*, int flags);",
          "308: i64 sqlite3BtreeIntegerKey(BtCursor*);",
          "309: #ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC",
          "310: i64 sqlite3BtreeOffset(BtCursor*);",
          "311: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: void sqlite3BtreeCursorPin(BtCursor*);",
          "310: void sqlite3BtreeCursorUnpin(BtCursor*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2129:           sqlite3MultiWrite(pParse);",
          "2130:           nReplaceTrig++;",
          "2131:         }",
          "2132:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "2133:             regR, nPkField, 0, OE_Replace,",
          "2134:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "2135:         if( regTrigCnt ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2132:         if( pTrigger && isUpdate ){",
          "2133:           sqlite3VdbeAddOp1(v, OP_CursorLock, iDataCur);",
          "2134:         }",
          "2138:         if( pTrigger && isUpdate ){",
          "2139:           sqlite3VdbeAddOp1(v, OP_CursorUnlock, iDataCur);",
          "2140:         }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "536: #define SQLITE_CONSTRAINT_UNIQUE       (SQLITE_CONSTRAINT | (8<<8))",
          "537: #define SQLITE_CONSTRAINT_VTAB         (SQLITE_CONSTRAINT | (9<<8))",
          "538: #define SQLITE_CONSTRAINT_ROWID        (SQLITE_CONSTRAINT |(10<<8))",
          "539: #define SQLITE_NOTICE_RECOVER_WAL      (SQLITE_NOTICE | (1<<8))",
          "540: #define SQLITE_NOTICE_RECOVER_ROLLBACK (SQLITE_NOTICE | (2<<8))",
          "541: #define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539: #define SQLITE_CONSTRAINT_PINNED       (SQLITE_CONSTRAINT |(11<<8))",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7025:   break;",
          "7026: }",
          "7028: #ifndef SQLITE_OMIT_SHARED_CACHE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7033: case OP_CursorLock: {",
          "7034:   VdbeCursor *pC;",
          "7035:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "7036:   pC = p->apCsr[pOp->p1];",
          "7037:   assert( pC!=0 );",
          "7038:   assert( pC->eCurType==CURTYPE_BTREE );",
          "7039:   sqlite3BtreeCursorPin(pC->uc.pCursor);",
          "7040:   break;",
          "7041: }",
          "7048: case OP_CursorUnlock: {",
          "7049:   VdbeCursor *pC;",
          "7050:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "7051:   pC = p->apCsr[pOp->p1];",
          "7052:   assert( pC!=0 );",
          "7053:   assert( pC->eCurType==CURTYPE_BTREE );",
          "7054:   sqlite3BtreeCursorUnpin(pC->uc.pCursor);",
          "7055:   break;",
          "7056: }",
          "",
          "---------------"
        ],
        "test/conflict3.test||test/conflict3.test": [
          "File: test/conflict3.test -> test/conflict3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:     INSERT INTO t0 VALUES(0, NULL);",
          "381:   }",
          "384:     UPDATE OR REPLACE t0 SET c1 = 1;",
          "387:   integrity_check 13.1.2",
          "389:   do_execsql_test 13.1.3 {",
          "390:     SELECT * FROM t0",
          "393:   do_execsql_test 13.2.0 {",
          "394:     CREATE TABLE t2 (a PRIMARY KEY, b UNIQUE, c UNIQUE) WITHOUT ROWID;",
          "",
          "[Removed Lines]",
          "383:   do_execsql_test 13.1.1 {",
          "385:   }",
          "391:   } {}",
          "",
          "[Added Lines]",
          "383:   do_catchsql_test 13.1.1 {",
          "385:   } {1 {constraint failed}}",
          "391:   } {1 {} 0 {}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:     INSERT INTO t2 VALUES(2, 2, 2);",
          "401:   }",
          "404:     UPDATE OR REPLACE t2 SET c = 0;",
          "407:   integrity_check 13.2.2",
          "409:   do_execsql_test 13.2.3 {",
          "410:     SELECT * FROM t2",
          "413:   do_execsql_test 13.3.0 {",
          "414:     CREATE TABLE t1(a, b);",
          "",
          "[Removed Lines]",
          "403:   do_execsql_test 13.2.1 {",
          "405:   }",
          "411:   } {}",
          "",
          "[Added Lines]",
          "403:   do_catchsql_test 13.2.1 {",
          "405:   } {1 {constraint failed}}",
          "411:   } {1 1 1 2 2 2}",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   SELECT * FROM t1;",
          "702: } {2 2}",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704: # 2019-12-29 ticket https://www.sqlite.org/src/info/314cc133e5ada126",
          "705: # REPLACE conflict resolution during an UPDATE causes a DELETE trigger",
          "706: # to fire.  If that DELETE trigger subsequently modifies the row",
          "707: # being updated, bad things can happen.  Prevent this by prohibiting",
          "708: # triggers from making changes to the table being updated while doing",
          "709: # REPLACE conflict resolution on the UPDATE.",
          "710: #",
          "711: # See also tickets:",
          "712: #   https://www.sqlite.org/src/info/c1e19e12046d23fe 2019-10-25",
          "713: #   https://www.sqlite.org/src/info/a8a4847a2d96f5de 2019-10-16",
          "714: #",
          "715: reset_db",
          "716: do_execsql_test update-20.10 {",
          "717:   PRAGMA recursive_triggers = true;",
          "718:   CREATE TABLE t1(a UNIQUE ON CONFLICT REPLACE, b);",
          "719:   INSERT INTO t1(a,b) VALUES(4,12),(9,13);",
          "720:   CREATE INDEX i0 ON t1(b);",
          "721:   CREATE TRIGGER tr0 DELETE ON t1 BEGIN",
          "722:     UPDATE t1 SET b = a;",
          "723:   END;",
          "724:   PRAGMA integrity_check;",
          "725: } {ok}",
          "726: do_catchsql_test update-20.20 {",
          "727:   UPDATE t1 SET a=0;",
          "728: } {1 {constraint failed}}",
          "729: do_execsql_test update-20.30 {",
          "730:   PRAGMA integrity_check;",
          "731: } {ok}",
          "",
          "---------------"
        ]
      }
    }
  ]
}