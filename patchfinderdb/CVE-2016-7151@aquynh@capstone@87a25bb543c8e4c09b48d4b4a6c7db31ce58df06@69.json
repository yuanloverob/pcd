{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "570db5f6797c27b4cb43f019ef2b4fd0a9daf340",
      "candidate_info": {
        "commit_hash": "570db5f6797c27b4cb43f019ef2b4fd0a9daf340",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/570db5f6797c27b4cb43f019ef2b4fd0a9daf340",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: use switch",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "358:    if (detail_flag) {",
          "393:     }",
          "394:    }",
          "395:   }",
          "396:   cs_free(insn, count);",
          "397:  } else {",
          "398:   printf(\"ERROR: invalid assembly code\\n\");",
          "",
          "[Removed Lines]",
          "359:     if (arch == CS_ARCH_X86) {",
          "360:      print_insn_detail_x86(handle, md, &insn[i]);",
          "361:     }",
          "363:     if (arch == CS_ARCH_ARM) {",
          "364:      print_insn_detail_arm(handle, &insn[i]);",
          "365:     }",
          "367:     if (arch == CS_ARCH_ARM64) {",
          "368:      print_insn_detail_arm64(handle,&insn[i]);",
          "369:     }",
          "371:     if (arch == CS_ARCH_MIPS) {",
          "372:      print_insn_detail_mips(handle, &insn[i]);",
          "373:     }",
          "375:     if (arch == CS_ARCH_PPC) {",
          "376:      print_insn_detail_ppc(handle, &insn[i]);",
          "377:     }",
          "379:     if (arch == CS_ARCH_SPARC) {",
          "380:      print_insn_detail_sparc(handle, &insn[i]);",
          "381:     }",
          "383:     if (arch == CS_ARCH_SYSZ) {",
          "384:      print_insn_detail_sysz(handle, &insn[i]);",
          "385:     }",
          "387:     if (arch == CS_ARCH_XCORE) {",
          "388:      print_insn_detail_xcore(handle, &insn[i]);",
          "389:     }",
          "391:     if (arch == CS_ARCH_M68K) {",
          "392:      print_insn_detail_m68k(handle, &insn[i]);",
          "",
          "[Added Lines]",
          "359:     switch(arch) {",
          "360:      default: break;",
          "362:      case CS_ARCH_X86:",
          "363:         print_insn_detail_x86(handle, md, &insn[i]);",
          "364:         break;",
          "366:      case CS_ARCH_ARM:",
          "367:         print_insn_detail_arm(handle, &insn[i]);",
          "368:         break;",
          "369:      case CS_ARCH_ARM64:",
          "370:         print_insn_detail_arm64(handle,&insn[i]);",
          "371:         break;",
          "372:      case CS_ARCH_MIPS:",
          "373:         print_insn_detail_mips(handle, &insn[i]);",
          "374:         break;",
          "375:      case CS_ARCH_PPC:",
          "376:         print_insn_detail_ppc(handle, &insn[i]);",
          "377:         break;",
          "378:      case CS_ARCH_SPARC:",
          "379:         print_insn_detail_sparc(handle, &insn[i]);",
          "380:         break;",
          "381:      case CS_ARCH_SYSZ:",
          "382:         print_insn_detail_sysz(handle, &insn[i]);",
          "383:         break;",
          "384:      case CS_ARCH_XCORE:",
          "385:         print_insn_detail_xcore(handle, &insn[i]);",
          "386:         break;",
          "387:      case CS_ARCH_M68K:",
          "388:         print_insn_detail_m68k(handle, &insn[i]);",
          "389:         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03de8c6a5c06b9f7b5d185e4e30e6a7d0c8c78ab",
      "candidate_info": {
        "commit_hash": "03de8c6a5c06b9f7b5d185e4e30e6a7d0c8c78ab",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/03de8c6a5c06b9f7b5d185e4e30e6a7d0c8c78ab",
        "files": [
          "arch/TMS320C64x/TMS320C64xInstPrinter.c"
        ],
        "message": "Corrected a bug\n\nCorrected a bug that would cause capstone to crash under certain invalid\ninstructions.",
        "before_after_code_files": [
          "arch/TMS320C64x/TMS320C64xInstPrinter.c||arch/TMS320C64x/TMS320C64xInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/TMS320C64x/TMS320C64xInstPrinter.c||arch/TMS320C64x/TMS320C64xInstPrinter.c": [
          "File: arch/TMS320C64x/TMS320C64xInstPrinter.c -> arch/TMS320C64x/TMS320C64xInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   SStream_concat0(&ss, insn_asm);",
          "70:   if((p != NULL) && (((p2 = strchr(p, '[')) != NULL) || ((p2 = strchr(p, '(')) != NULL))) {",
          "72:     p2--;",
          "77:   } else {",
          "78:    tmp[0] = '\\0';",
          "79:   }",
          "",
          "[Removed Lines]",
          "71:    while((*p2 != 'A') && (*p2 != 'B'))",
          "73:    if(*p2 == 'A')",
          "74:     strcpy(tmp, \"1T\");",
          "75:    else",
          "76:     strcpy(tmp, \"2T\");",
          "",
          "[Added Lines]",
          "71:    while((p2 > p) && ((*p2 != 'A') && (*p2 != 'B')))",
          "73:             if(p2 == p) {",
          "74:                 strcpy(insn_asm, \"Invalid!\");",
          "75:                 return;",
          "76:             } else {",
          "77:        if(*p2 == 'A')",
          "78:         strcpy(tmp, \"1T\");",
          "79:        else",
          "80:         strcpy(tmp, \"2T\");",
          "81:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a11c9472be1977a708b3c6b39e94050f0730a658",
      "candidate_info": {
        "commit_hash": "a11c9472be1977a708b3c6b39e94050f0730a658",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a11c9472be1977a708b3c6b39e94050f0730a658",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm: update imm in printOperand() to fix error reported by @trufae in PR #764",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:     address = (uint32_t)MI->address + 8;",
          "737:    }",
          "743:    else",
          "745:   } else {",
          "746:    switch(MI->flat_insn->id) {",
          "747:     default:",
          "",
          "[Removed Lines]",
          "739:    address += imm;",
          "741:    if (address > HEX_THRESHOLD)",
          "742:     SStream_concat(O, \"#0x%x\", address);",
          "744:     SStream_concat(O, \"#%u\", address);",
          "",
          "[Added Lines]",
          "739:    imm += address;",
          "741:    if (imm > HEX_THRESHOLD)",
          "742:     SStream_concat(O, \"#0x%x\", imm);",
          "744:     SStream_concat(O, \"#%u\", imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "568718bcabed7260109dadd3b52fe27f75f80588",
      "candidate_info": {
        "commit_hash": "568718bcabed7260109dadd3b52fe27f75f80588",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/568718bcabed7260109dadd3b52fe27f75f80588",
        "files": [
          "suite/arm/test_arm_regression.c"
        ],
        "message": "fix the last fix",
        "before_after_code_files": [
          "suite/arm/test_arm_regression.c||suite/arm/test_arm_regression.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "suite/arm/test_arm_regression.c||suite/arm/test_arm_regression.c": [
          "File: suite/arm/test_arm_regression.c -> suite/arm/test_arm_regression.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #ifdef _MSC_VER",
          "9: #include <stdio.h>",
          "10: #include <stdlib.h>",
          "11: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6239a984c7b0fbee31c44d2ae479987e268d8ba3",
      "candidate_info": {
        "commit_hash": "6239a984c7b0fbee31c44d2ae479987e268d8ba3",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6239a984c7b0fbee31c44d2ae479987e268d8ba3",
        "files": [
          "cstool/Makefile",
          "cstool/README",
          "cstool/cstool.c"
        ],
        "message": "cstool 1.0 (#788)\n\n* first cstool -- Segmentation fault: 11\n\n* Modify the format of output.\n\n* Preprocess the input from user. The result of converting looks right but the disassembly is not unsatisfactory.\n\n* Skip the character not in set A = {'a'~'f','A'~'F','0'~'9'}.\ni Please enter the commit message for your changes. Lines starting\n\n* delete cstool binary\n\n* using isxdigit() to tests for any hexadecimal-digit character\n\n* write README\n\n* final version 1.0 for cstool",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <stdio.h>",
          "3: #include <inttypes.h>",
          "4: #include <string.h>",
          "5: #include <ctype.h>",
          "6: #include <errno.h>",
          "8: #include <capstone/capstone.h>",
          "12: static uint8_t char_to_hexnum(char c)",
          "13: {",
          "14:     if (c >= '0' && c <= '9') {",
          "15:         return (uint8_t)(c - '0');",
          "16:     }",
          "18:     if (c >= 'a' && c <= 'f') {",
          "19:         return (uint8_t)(10 + c - 'a');",
          "20:     }",
          "23:     return (uint8_t)(10 + c - 'A');",
          "24: }",
          "27: static uint8_t *preprocess(char *code, size_t *size)",
          "28: {",
          "29:     size_t i, j = 0;",
          "30:     uint8_t high, low;",
          "31:     uint8_t *result;",
          "32:     result = (uint8_t *)malloc(strlen(code));",
          "34:     if (result != NULL) {",
          "35:         while (code[i] != '\\0') {",
          "36:             if (isxdigit(code[i]) && isxdigit(code[i+1])) {",
          "37:                 high = 16 * char_to_hexnum(code[i]);",
          "38:                 low = char_to_hexnum(code[i+1]);",
          "39:                 result[j] = high + low;",
          "40:                 i++;",
          "41:                 j++;",
          "42:             }",
          "43:             i++;",
          "44:         }",
          "46:     }",
          "48:     return result;",
          "49: }",
          "51: static void usage(char * prog)",
          "52: {",
          "53:     printf(\"Syntax: %s <arch+mode> <assembler-string> [start-address-in-hex-format]\\n\", prog);",
          "54:     printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "56:     if (cs_support(CS_ARCH_ARM)) {",
          "57:         printf(\"        arm:       arm\\n\");",
          "58:         printf(\"        armb:      arm + big endian\\n\");",
          "59:         printf(\"        arml:      arm + little endian\\n\");",
          "60:         printf(\"        thumb:     thumb mode\\n\");",
          "61:         printf(\"        thumbbe:   thumb + big endian\\n\");",
          "62:         printf(\"        thumble:   thumb + billtle endian\\n\");",
          "63:     }",
          "65:     if (cs_support(CS_ARCH_ARM64)) {",
          "66:          printf(\"        arm64:     aarch64 mode\\n\");",
          "67:     }",
          "69:     if (cs_support(CS_ARCH_MIPS)) {",
          "70:         printf(\"        mips:      mips32 + little endian\\n\");",
          "71:         printf(\"        mipsbe:    mips32 + big endian\\n\");",
          "72:         printf(\"        mips64:    mips64 + little endian\\n\");",
          "73:         printf(\"        mips64be:  mips64 + big endian\\n\");",
          "74:     }",
          "76:     if (cs_support(CS_ARCH_X86)) {",
          "77:          printf(\"        x16:       16-bit mode (X86)\\n\");",
          "78:          printf(\"        x32:       32-bit mode (X86)\\n\");",
          "79:          printf(\"        x64:       64-bit mode (X86)\\n\");",
          "80:          printf(\"        x16att:    16-bit mode (X86) syntax-att\\n\");",
          "81:          printf(\"        x32att:    32-bit mode (X86) syntax-att\\n\");",
          "82:          printf(\"        x64att:    64-bit mode (X86) syntax-att\\n\");",
          "83:     }",
          "85:     if (cs_support(CS_ARCH_PPC)) {",
          "86:         printf(\"        ppc64:     ppc64 + little endian\\n\");",
          "87:         printf(\"        ppc64be:   ppc64 + big endian\\n\");",
          "88:     }",
          "90:     if (cs_support(CS_ARCH_SPARC)) {",
          "91:         printf(\"        sparc:     sparc\\n\");",
          "92:     }",
          "94:     if (cs_support(CS_ARCH_SYSZ)) {",
          "95:        printf(\"        systemz:   systemz (s390x)\\n\");",
          "96:     }",
          "98:     if (cs_support(CS_ARCH_XCORE)) {",
          "99:         printf(\"        xcore:     xcore\\n\");",
          "100:     }",
          "102:     printf(\"\\n\");",
          "103: }",
          "105: int main(int argc, char **argv)",
          "106: {",
          "107:     csh handle;",
          "108:     char *mode;",
          "109:     uint8_t *assembly;",
          "110:     size_t count, size;",
          "111:     uint64_t address = 0;",
          "112:     cs_insn *insn;",
          "113:     cs_err err;",
          "115:     if (argc != 3 && argc != 4) {",
          "116:         usage(argv[0]);",
          "117:         return -1;",
          "118:     }",
          "120:     mode = argv[1];",
          "121:     assembly = preprocess(argv[2], &size);",
          "122:     if (assembly == NULL) {",
          "123:         printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "124:         return -3;",
          "125:     }",
          "127:     if (argc == 4) {",
          "129:         char *temp;",
          "130:         address = strtoull(argv[3], &temp, 16);",
          "131:         if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "132:             printf(\"ERROR: invalid address argument, quit!\\n\");",
          "133:             return -2;",
          "134:         }",
          "135:     }",
          "137:     if (!strcmp(mode, \"arm\")) {",
          "138:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "139:     }",
          "141:     if (!strcmp(mode, \"armb\")) {",
          "142:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "143:     }",
          "145:     if (!strcmp(mode, \"arml\")) {",
          "146:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "147:     }",
          "149:     if (!strcmp(mode, \"thumb\")) {",
          "150:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "151:     }",
          "153:     if (!strcmp(mode, \"thumbbe\")) {",
          "154:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "155:     }",
          "157:     if (!strcmp(mode, \"thumble\")) {",
          "158:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "159:     }",
          "161:     if (!strcmp(mode, \"arm64\")) {",
          "162:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "163:     }",
          "165:     if (!strcmp(mode, \"mips\")) {",
          "166:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "167:     }",
          "169:     if (!strcmp(mode, \"mipsbe\")) {",
          "170:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "171:     }",
          "173:     if (!strcmp(mode, \"mips64\")) {",
          "174:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "175:     }",
          "177:     if (!strcmp(mode, \"mips64be\")) {",
          "178:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "179:     }",
          "181:     if (!strcmp(mode, \"x16\")) {",
          "182:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "183:     }",
          "185:     if (!strcmp(mode, \"x32\")) {",
          "186:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "187:     }",
          "189:     if (!strcmp(mode, \"x64\")) {",
          "190:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "191:     }",
          "193:     if (!strcmp(mode, \"x16att\")) {",
          "194:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "195:         if (!err) {",
          "196:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "197:         }",
          "198:     }",
          "200:     if (!strcmp(mode,\"x32att\")) {",
          "201:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "202:         if (!err) {",
          "203:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "204:         }",
          "205:     }",
          "207:     if (!strcmp(mode,\"x64att\")) {",
          "208:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "209:         if (!err) {",
          "210:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "211:         }",
          "212:     }",
          "214:     if (!strcmp(mode,\"ppc64\")) {",
          "215:         err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:     }",
          "218:     if (!strcmp(mode,\"ppc64be\")) {",
          "219:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "220:     }",
          "222:     if (!strcmp(mode,\"sparc\")) {",
          "223:         err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "224:     }",
          "226:     if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "227:         err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "228:     }",
          "230:     if (!strcmp(mode,\"xcore\")) {",
          "231:         err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "232:     }",
          "234:     if (err) {",
          "235:         printf(\"ERROR: Failed on cs_open()\\n\");",
          "236:         usage(argv[0]);",
          "237:         return -1;",
          "238:     }",
          "240:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "241:     if (count > 0) {",
          "242:         size_t j;",
          "243:         int i;",
          "245:         printf(\"\\n\");",
          "246:         for (j = 0; j < count; j++) {",
          "247:             printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "248:             for (i = 0; i < insn[j].size; i++) {",
          "249:                 printf(\"%02x\", insn[j].bytes[i]);",
          "250:             }",
          "251:             printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "252:         }",
          "253:         cs_free(insn, count);",
          "254:     } else {",
          "255:         printf(\"ERROR: no any assembly instrution corresponding to your input, please check your input, quit!\\n\");",
          "256:         return(-4);",
          "257:     }",
          "259:     cs_close(&handle);",
          "260:     return 0;",
          "261: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}