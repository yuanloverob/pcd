{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b48ca33019356282f64c4fdf86902be8129877ea",
      "candidate_info": {
        "commit_hash": "b48ca33019356282f64c4fdf86902be8129877ea",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b48ca33019356282f64c4fdf86902be8129877ea",
        "files": [
          "src/unix/fs.c"
        ],
        "message": "fs: avoid using readv/writev where possible\n\nThe VirtualBox shared file system doesn't seem to be capable of\n`readv()` syscall. Since we don't need them in the most of the cases\nanyway, it won't hurt to just use `read()` and `write()` when we are\nreading just one buffer.\n\nsee https://github.com/joyent/node/issues/7343 for details.",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: static ssize_t uv__fs_read(uv_fs_t* req) {",
          "218:   ssize_t result;",
          "223: #if HAVE_PREADV",
          "224:     result = preadv(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "225: #else",
          "",
          "[Removed Lines]",
          "220:   if (req->off < 0)",
          "221:     result = readv(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "222:   else {",
          "",
          "[Added Lines]",
          "220:   if (req->off < 0) {",
          "221:     if (req->nbufs == 1)",
          "222:       result = read(req->file, req->bufs[0].base, req->bufs[0].len);",
          "223:     else",
          "224:       result = readv(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "225:   } else {",
          "226:     if (req->nbufs == 1) {",
          "227:       result = pread(req->file, req->bufs[0].base, req->bufs[0].len, req->off);",
          "228:       goto done;",
          "229:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265: # endif",
          "266: #endif",
          "267:   }",
          "268:   if (req->bufs != req->bufsml)",
          "269:     free(req->bufs);",
          "270:   return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: done:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "583:   pthread_mutex_lock(&lock);",
          "584: #endif",
          "589: #if HAVE_PREADV",
          "590:     r = pwritev(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "591: #else",
          "",
          "[Removed Lines]",
          "586:   if (req->off < 0)",
          "587:     r = writev(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "588:   else {",
          "",
          "[Added Lines]",
          "596:   if (req->off < 0) {",
          "597:     if (req->nbufs == 1)",
          "598:       r = write(req->file, req->bufs[0].base, req->bufs[0].len);",
          "599:     else",
          "600:       r = writev(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "601:   } else {",
          "602:     if (req->nbufs == 1) {",
          "603:       r = pwrite(req->file, req->bufs[0].base, req->bufs[0].len, req->off);",
          "604:       goto done;",
          "605:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "632: #endif",
          "633:   }",
          "635: #if defined(__APPLE__)",
          "636:   pthread_mutex_unlock(&lock);",
          "637: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652: done:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a442aa7643702f12b7037a89922838f9131d2424",
      "candidate_info": {
        "commit_hash": "a442aa7643702f12b7037a89922838f9131d2424",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a442aa7643702f12b7037a89922838f9131d2424",
        "files": [
          "README.md",
          "include/uv.h"
        ],
        "message": "doc: small fixes to comments and syntax",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "465: typedef void (*uv_fs_poll_cb)(uv_fs_poll_t* handle,",
          "466:                               int status,",
          "",
          "[Removed Lines]",
          "462: typedef void (*uv_fs_event_cb)(uv_fs_event_t* handle, const char* filename,",
          "463:     int events, int status);",
          "",
          "[Added Lines]",
          "462: typedef void (*uv_fs_event_cb)(uv_fs_event_t* handle,",
          "463:                                const char* filename,",
          "464:                                int events,",
          "465:                                int status);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516: struct uv_shutdown_s {",
          "517:   UV_REQ_FIELDS",
          "",
          "[Removed Lines]",
          "513: UV_EXTERN int uv_shutdown(uv_shutdown_t* req, uv_stream_t* handle,",
          "514:     uv_shutdown_cb cb);",
          "",
          "[Added Lines]",
          "515: UV_EXTERN int uv_shutdown(uv_shutdown_t* req,",
          "516:                           uv_stream_t* handle,",
          "517:                           uv_shutdown_cb cb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655: UV_EXTERN int uv_read_stop(uv_stream_t*);",
          "",
          "[Removed Lines]",
          "652: UV_EXTERN int uv_read_start(uv_stream_t*, uv_alloc_cb alloc_cb,",
          "653:     uv_read_cb read_cb);",
          "",
          "[Added Lines]",
          "654: UV_EXTERN int uv_read_start(uv_stream_t*,",
          "655:                             uv_alloc_cb alloc_cb,",
          "656:                             uv_read_cb read_cb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "955:                           const struct sockaddr* addr,",
          "956:                           unsigned int flags);",
          "",
          "[Removed Lines]",
          "958: UV_EXTERN int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name,",
          "959:     int* namelen);",
          "",
          "[Added Lines]",
          "961: UV_EXTERN int uv_udp_getsockname(uv_udp_t* handle,",
          "962:                                  struct sockaddr* name,",
          "963:                                  int* namelen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "974: UV_EXTERN int uv_udp_set_membership(uv_udp_t* handle,",
          "",
          "[Removed Lines]",
          "975:     const char* multicast_addr, const char* interface_addr,",
          "976:     uv_membership membership);",
          "",
          "[Added Lines]",
          "979:                                     const char* multicast_addr,",
          "980:                                     const char* interface_addr,",
          "981:                                     uv_membership membership);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1017: UV_EXTERN int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr);",
          "",
          "[Added Lines]",
          "1022: UV_EXTERN int uv_udp_set_multicast_interface(uv_udp_t* handle,",
          "1023:                                              const char* interface_addr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1081: UV_EXTERN int uv_udp_recv_start(uv_udp_t* handle, uv_alloc_cb alloc_cb,",
          "1082:     uv_udp_recv_cb recv_cb);",
          "",
          "[Added Lines]",
          "1088: UV_EXTERN int uv_udp_recv_start(uv_udp_t* handle,",
          "1089:                                 uv_alloc_cb alloc_cb,",
          "1090:                                 uv_udp_recv_cb recv_cb);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1185: UV_EXTERN void uv_pipe_connect(uv_connect_t* req, uv_pipe_t* handle,",
          "1186:     const char* name, uv_connect_cb cb);",
          "",
          "[Added Lines]",
          "1193: UV_EXTERN void uv_pipe_connect(uv_connect_t* req,",
          "1194:                                uv_pipe_t* handle,",
          "1195:                                const char* name,",
          "1196:                                uv_connect_cb cb);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1241: UV_EXTERN int uv_poll_init_socket(uv_loop_t* loop, uv_poll_t* handle,",
          "1242:     uv_os_sock_t socket);",
          "",
          "[Added Lines]",
          "1251: UV_EXTERN int uv_poll_init_socket(uv_loop_t* loop,",
          "1252:                                   uv_poll_t* handle,",
          "1253:                                   uv_os_sock_t socket);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1348: UV_EXTERN int uv_async_send(uv_async_t* async);",
          "",
          "[Removed Lines]",
          "1340: UV_EXTERN int uv_async_init(uv_loop_t*, uv_async_t* async,",
          "1341:     uv_async_cb async_cb);",
          "",
          "[Added Lines]",
          "1351: UV_EXTERN int uv_async_init(uv_loop_t*,",
          "1352:                             uv_async_t* async,",
          "1353:                             uv_async_cb async_cb);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1609: };",
          "",
          "[Removed Lines]",
          "1612: UV_EXTERN int uv_queue_work(uv_loop_t* loop, uv_work_t* req,",
          "1613:     uv_work_cb work_cb, uv_after_work_cb after_work_cb);",
          "",
          "[Added Lines]",
          "1622: UV_EXTERN int uv_queue_work(uv_loop_t* loop,",
          "1623:                             uv_work_t* req,",
          "1624:                             uv_work_cb work_cb,",
          "1625:                             uv_after_work_cb after_work_cb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e8fe45995e221e014fd95af3df040f54b56f19c",
      "candidate_info": {
        "commit_hash": "1e8fe45995e221e014fd95af3df040f54b56f19c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1e8fe45995e221e014fd95af3df040f54b56f19c",
        "files": [
          "include/uv.h"
        ],
        "message": "include: updated uv_udp_open documentation\n\nOn Unix, uv_udp_open can be used with any socket as long as the socket\nfollows the datagram contract (works in unconnected mode, supports\nsendmsg()/recvmsg(), etc.). This means that any datagram-socket, like\nfor example netlink or raw sockets, can be used with libuv. Added this\ninformation to the documentation.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "0f25560c8aed4fb9f40120750d0832ac415ce092",
      "candidate_info": {
        "commit_hash": "0f25560c8aed4fb9f40120750d0832ac415ce092",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0f25560c8aed4fb9f40120750d0832ac415ce092",
        "files": [
          "src/unix/tty.c"
        ],
        "message": "unix: use cfmakeraw() for setting raw TTY mode",
        "before_after_code_files": [
          "src/unix/tty.c||src/unix/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/tty.c||src/unix/tty.c": [
          "File: src/unix/tty.c -> src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     uv_spinlock_unlock(&termios_spinlock);",
          "125:     raw = tty->orig_termios;",
          "134:     if (tcsetattr(fd, TCSADRAIN, &raw))",
          "",
          "[Removed Lines]",
          "126:     raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);",
          "127:     raw.c_oflag |= (ONLCR);",
          "128:     raw.c_cflag |= (CS8);",
          "129:     raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);",
          "130:     raw.c_cc[VMIN] = 1;",
          "131:     raw.c_cc[VTIME] = 0;",
          "",
          "[Added Lines]",
          "126:     cfmakeraw(&raw);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcee403ed295c036cc716770d77019f78d6c954e",
      "candidate_info": {
        "commit_hash": "bcee403ed295c036cc716770d77019f78d6c954e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bcee403ed295c036cc716770d77019f78d6c954e",
        "files": [
          "include/uv.h",
          "src/uv-common.c",
          "test/benchmark-udp-pummel.c",
          "test/test-getsockname.c",
          "test/test-ref.c",
          "test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c",
          "test/test-udp-options.c",
          "test/test-udp-send-and-recv.c"
        ],
        "message": "include: merge uv_udp_bind and uv_udp_bind6\n\nMerge uv_udp_bind6() into uv_udp_bind().  uv_udp_bind() now takes a\nconst struct sockaddr*.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ref.c||test/test-ref.c",
          "test/test-udp-ipv6.c||test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c||test/test-udp-open.c",
          "test/test-udp-options.c||test/test-udp-options.c",
          "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "900: UV_EXTERN int uv_udp_bind(uv_udp_t* handle,",
          "919: UV_EXTERN int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name,",
          "920:     int* namelen);",
          "",
          "[Removed Lines]",
          "901:                           const struct sockaddr_in* addr,",
          "902:                           unsigned flags);",
          "915: UV_EXTERN int uv_udp_bind6(uv_udp_t* handle,",
          "916:                            const struct sockaddr_in6* addr,",
          "917:                            unsigned flags);",
          "",
          "[Added Lines]",
          "902:                           const struct sockaddr* addr,",
          "903:                           unsigned int flags);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: int uv_udp_bind(uv_udp_t* handle,",
          "213:                 unsigned int flags) {",
          "234: }",
          "",
          "[Removed Lines]",
          "212:                 const struct sockaddr_in* addr,",
          "214:   if (handle->type == UV_UDP && addr->sin_family == AF_INET) {",
          "215:     return uv__udp_bind(handle,",
          "216:                         (const struct sockaddr*) addr,",
          "217:                         sizeof(*addr),",
          "218:                         flags);",
          "219:   }",
          "220:   return UV_EINVAL;",
          "221: }",
          "224: int uv_udp_bind6(uv_udp_t* handle,",
          "225:                  const struct sockaddr_in6* addr,",
          "226:                  unsigned int flags) {",
          "227:   if (handle->type == UV_UDP && addr->sin6_family == AF_INET6) {",
          "228:     return uv__udp_bind(handle,",
          "229:                         (const struct sockaddr*) addr,",
          "230:                         sizeof(*addr),",
          "231:                         flags);",
          "232:   }",
          "233:   return UV_EINVAL;",
          "",
          "[Added Lines]",
          "212:                 const struct sockaddr* addr,",
          "214:   unsigned int addrlen;",
          "216:   if (handle->type != UV_UDP)",
          "217:     return UV_EINVAL;",
          "219:   if (addr->sa_family == AF_INET)",
          "220:     addrlen = sizeof(struct sockaddr_in);",
          "221:   else if (addr->sa_family == AF_INET6)",
          "222:     addrlen = sizeof(struct sockaddr_in6);",
          "223:   else",
          "224:     return UV_EINVAL;",
          "226:   return uv__udp_bind(handle, addr, addrlen, flags);",
          "",
          "---------------"
        ],
        "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c": [
          "File: test/benchmark-udp-pummel.c -> test/benchmark-udp-pummel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     struct sockaddr_in addr;",
          "175:     ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", BASE_PORT + i, &addr));",
          "176:     ASSERT(0 == uv_udp_init(loop, &s->udp_handle));",
          "178:     ASSERT(0 == uv_udp_recv_start(&s->udp_handle, alloc_cb, recv_cb));",
          "179:     uv_unref((uv_handle_t*)&s->udp_handle);",
          "180:   }",
          "",
          "[Removed Lines]",
          "177:     ASSERT(0 == uv_udp_bind(&s->udp_handle, &addr, 0));",
          "",
          "[Added Lines]",
          "177:     ASSERT(0 == uv_udp_bind(&s->udp_handle, (const struct sockaddr*) &addr, 0));",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     return 1;",
          "283:   }",
          "286:   if (r) {",
          "287:     fprintf(stderr, \"Bind error\\n\");",
          "288:     return 1;",
          "",
          "[Removed Lines]",
          "285:   r = uv_udp_bind(&udpServer, &addr, 0);",
          "",
          "[Added Lines]",
          "285:   r = uv_udp_bind(&udpServer, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:   uv_udp_t h;",
          "309:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "310:   uv_udp_init(uv_default_loop(), &h);",
          "312:   uv_udp_recv_start(&h, (uv_alloc_cb)fail_cb, (uv_udp_recv_cb)fail_cb);",
          "313:   uv_unref((uv_handle_t*)&h);",
          "314:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "311:   uv_udp_bind(&h, &addr, 0);",
          "",
          "[Added Lines]",
          "311:   uv_udp_bind(&h, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-ipv6.c||test/test-udp-ipv6.c": [
          "File: test/test-udp-ipv6.c -> test/test-udp-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   r = uv_udp_init(uv_default_loop(), &server);",
          "109:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_udp_recv_start(&server, alloc_cb, recv_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_udp_bind6(&server, &addr6, bind_flags);",
          "",
          "[Added Lines]",
          "111:   r = uv_udp_bind(&server, (const struct sockaddr*) &addr6, bind_flags);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c": [
          "File: test/test-udp-multicast-join.c -> test/test-udp-multicast-join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   ASSERT(r == 0);",
          "115:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "114:   r = uv_udp_bind(&client, &addr, 0);",
          "",
          "[Added Lines]",
          "114:   r = uv_udp_bind(&client, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c": [
          "File: test/test-udp-multicast-ttl.c -> test/test-udp-multicast-ttl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   ASSERT(r == 0);",
          "65:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", 0, &addr));",
          "67:   ASSERT(r == 0);",
          "69:   r = uv_udp_set_multicast_ttl(&server, 32);",
          "",
          "[Removed Lines]",
          "66:   r = uv_udp_bind(&server, &addr, 0);",
          "",
          "[Added Lines]",
          "66:   r = uv_udp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-open.c||test/test-udp-open.c": [
          "File: test/test-udp-open.c -> test/test-udp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   r = uv_udp_open(&client, sock);",
          "141:   ASSERT(r == 0);",
          "144:   ASSERT(r == 0);",
          "146:   r = uv_udp_recv_start(&client, alloc_cb, recv_cb);",
          "",
          "[Removed Lines]",
          "143:   r = uv_udp_bind(&client, &addr, 0);",
          "",
          "[Added Lines]",
          "143:   r = uv_udp_bind(&client, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-options.c||test/test-udp-options.c": [
          "File: test/test-udp-options.c -> test/test-udp-options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   ASSERT(r == 0);",
          "49:   r = uv_udp_set_broadcast(&h, 1);",
          "",
          "[Removed Lines]",
          "46:   r = uv_udp_bind(&h, &addr, 0);",
          "",
          "[Added Lines]",
          "46:   r = uv_udp_bind(&h, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c": [
          "File: test/test-udp-send-and-recv.c -> test/test-udp-send-and-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   r = uv_udp_init(uv_default_loop(), &server);",
          "176:   ASSERT(r == 0);",
          "179:   ASSERT(r == 0);",
          "181:   r = uv_udp_recv_start(&server, alloc_cb, sv_recv_cb);",
          "",
          "[Removed Lines]",
          "178:   r = uv_udp_bind(&server, &addr, 0);",
          "",
          "[Added Lines]",
          "178:   r = uv_udp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}