{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8bcc6866143ce2570c57e44f4868e0f8f6e1c4ed",
      "candidate_info": {
        "commit_hash": "8bcc6866143ce2570c57e44f4868e0f8f6e1c4ed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8bcc6866143ce2570c57e44f4868e0f8f6e1c4ed",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts4umlaut.test"
        ],
        "message": "The fts4umlaut.test module requires FTS5, so do not try to run it without that module.\n\nFossilOrigin-Name: dee3ae900129d39d69aff3ec6187376be100803ee6170bbf39529f37b4253260",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts4umlaut.test||test/fts4umlaut.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0bf4c70a6849da74797e8616a4f3730492ad02882ae67a0fe0f3b3cc3f1043b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4umlaut.test||test/fts4umlaut.test": [
          "File: test/fts4umlaut.test -> test/fts4umlaut.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4umlaut",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "",
          "[Removed Lines]",
          "19: ifcapable !fts3 {",
          "",
          "[Added Lines]",
          "19: ifcapable !fts3||!fts5 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "427db2d2452d52075feb28f4ae33e65978dc0dc4",
      "candidate_info": {
        "commit_hash": "427db2d2452d52075feb28f4ae33e65978dc0dc4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/427db2d2452d52075feb28f4ae33e65978dc0dc4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Make the testcase() macro added in the previous check-in reachable for testing.\n\nFossilOrigin-Name: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df58774e994bd306b1a2e1f259e7e4408f01c5b1dc104673698168bbf8a63ce5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   int nByte;",
          "303:   assert( pMem->flags & MEM_Zero );",
          "304:   assert( (pMem->flags&MEM_Blob)!=0 || MemNullNochng(pMem) );",
          "306:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "307:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "305:   testcase( MemNullNochng(pMem) )",
          "",
          "[Added Lines]",
          "305:   testcase( sqlite3_value_nochange(pMem) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "523fb53f72ad41bddfe02f1f5d667dfdd164240f",
      "candidate_info": {
        "commit_hash": "523fb53f72ad41bddfe02f1f5d667dfdd164240f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/523fb53f72ad41bddfe02f1f5d667dfdd164240f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Various fixes for the wapptest.tcl script.\n\nFossilOrigin-Name: cbf423656047f0cb5200be6981a205e0ae206eef8263aa686f4a3621fb07fb57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4af0c2fee05aaa2e95ae6a5c847ff2d363e24f325f4ffdcf51bc264b9bf5e2d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # \\",
          "3: exec wapptclsh \"$0\" ${1+\"$@\"}",
          "5: #",
          "9: # Variables set by the \"control\" form:",
          "10: #",
          "",
          "[Removed Lines]",
          "6: #",
          "7: #",
          "",
          "[Added Lines]",
          "5: # package required wapp",
          "6: source [file join [file dirname [info script]] wapp.tcl]",
          "8: # Read the data from the releasetest_data.tcl script.",
          "10: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: set G(tcl)      \"\"",
          "23: set G(jobs)     3",
          "48: # Check to see if there are uncommitted changes in the SQLite source",
          "49: # directory. Return true if there are, or false otherwise.",
          "",
          "[Removed Lines]",
          "25: set G(sqlite_version) unknown",
          "27: # The root of the SQLite source tree.",
          "28: #",
          "29: set G(srcdir)   [file dirname [file dirname [info script]]]",
          "31: # Either \"config\", \"running\", \"stopped\":",
          "32: #",
          "33: set G(state) \"config\"",
          "35: # releasetest.tcl script",
          "36: #",
          "37: set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "39: set G(cnt) 0",
          "41: # package required wapp",
          "42: source [file join [file dirname [info script]] wapp.tcl]",
          "44: # Read the data from the releasetest_data.tcl script.",
          "45: #",
          "46: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "[Added Lines]",
          "28: proc wapptest_init {} {",
          "29:   global G",
          "31:   set lSave [list platform test keep msvc tcl jobs]",
          "32:   foreach k $lSave { set A($k) $G($k) }",
          "33:   array unset G",
          "34:   foreach k $lSave { set G($k) $A($k) }",
          "36:   # The root of the SQLite source tree.",
          "37:   set G(srcdir)   [file dirname [file dirname [info script]]]",
          "39:   # releasetest.tcl script",
          "40:   set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "42:   set G(sqlite_version) \"unknown\"",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "46: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   }",
          "163: }",
          "165: proc slave_fileevent {name} {",
          "166:   global G",
          "167:   set fd $G(test.$name.channel)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: proc slave_test_done {name rc} {",
          "166:   global G",
          "167:   set G(test.$name.done) [clock seconds]",
          "168:   set G(test.$name.nError) 0",
          "169:   set G(test.$name.nTest) 0",
          "170:   set G(test.$name.errmsg) \"\"",
          "171:   if {$rc} {",
          "172:     incr G(test.$name.nError)",
          "173:   }",
          "174:   if {[file exists $G(test.$name.log)]} {",
          "175:     count_tests_and_errors $name $G(test.$name.log)",
          "176:   }",
          "177: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     fconfigure $fd -blocking 1",
          "171:     set rc [catch { close $fd }]",
          "172:     unset G(test.$name.channel)",
          "183:   } else {",
          "184:     set line [gets $fd]",
          "185:     if {[string trim $line] != \"\"} { puts \"Trace   : $name - \\\"$line\\\"\" }",
          "",
          "[Removed Lines]",
          "173:     set G(test.$name.done) [clock seconds]",
          "174:     set G(test.$name.nError) 0",
          "175:     set G(test.$name.nTest) 0",
          "176:     set G(test.$name.errmsg) \"\"",
          "177:     if {$rc} {",
          "178:       incr G(test.$name.nError)",
          "179:     }",
          "180:     if {[file exists $G(test.$name.log)]} {",
          "181:       count_tests_and_errors $name $G(test.$name.log)",
          "182:     }",
          "",
          "[Added Lines]",
          "187:     slave_test_done $name $rc",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "215:     catch {",
          "216:       append G(result) \" SQLite version $G(sqlite_version)\"",
          "217:     }",
          "218:   } else {",
          "219:     set nLaunch [expr $G(jobs) - $nRunning]",
          "220:     foreach j $G(test_array) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     set G(state) \"stopped\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:   }",
          "242: }",
          "244: proc generate_main_page {{extra {}}} {",
          "245:   global G",
          "246:   set_test_array",
          "248:   wapp-trim {",
          "249:     <html>",
          "250:     <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: proc generate_select_widget {label id lOpt opt} {",
          "251:   wapp-trim {",
          "252:     <label> %string($label) </label>",
          "253:     <select id=%string($id) name=%string($id)>",
          "254:   }",
          "255:   foreach o $lOpt {",
          "256:     set selected \"\"",
          "257:     if {$o==$opt} { set selected \" selected=1\" }",
          "258:     wapp-subst \"<option $selected>$o</option>\"",
          "259:   }",
          "260:   wapp-trim { </select> }",
          "261: }",
          "267:   # <meta http-equiv=\"refresh\" content=\"5; URL=/\">",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "266:   wapp-trim {",
          "267:       <div class=div id=controls>",
          "271:   }",
          "276:   }",
          "277:   wapp-trim {",
          "286:   }",
          "289:         <label> Tcl: </label>",
          "290:         <input id=\"control_tcl\" name=\"control_tcl\"></input>",
          "292:         <label> Keep files: </label>",
          "293:         <input id=\"control_keep\" name=\"control_keep\" type=checkbox value=1>",
          "294:         </input>",
          "295:         <label> Use MSVC: </label>",
          "296:         <input id=\"control_msvc\" name=\"control_msvc\" type=checkbox value=1>",
          "297:         </input>",
          "313:   }",
          "314:   wapp-trim {",
          "319:      </form>",
          "323:   }",
          "324:   foreach t $G(test_array) {",
          "325:     set config [dict get $t config]",
          "326:     set target [dict get $t target]",
          "",
          "[Removed Lines]",
          "268:         <form action=\"control\" method=\"post\" name=\"control\">",
          "269:         <label> Platform: </label>",
          "270:         <select id=\"control_platform\" name=\"control_platform\">",
          "272:   foreach platform [array names ::Platforms] {",
          "273:     set selected \"\"",
          "274:     if {$platform==$G(platform)} { set selected \" selected=1\" }",
          "275:     wapp-subst \"<option $selected>$platform</option>\"",
          "278:         </select>",
          "279:         <label> Test: </label>",
          "280:         <select id=\"control_test\" name=\"control_test\">",
          "281:   }",
          "282:   foreach test [list Normal Veryquick Smoketest Build-Only] {",
          "283:     set selected \"\"",
          "284:     if {$test==$G(test)} { set selected \" selected=1\" }",
          "285:     wapp-subst \"<option $selected>$test</option>\"",
          "287:   wapp-trim [subst -nocommands {",
          "288:         </select>",
          "298:         <hr>",
          "299:         <div class=right>",
          "300:           <label> Jobs: </label>",
          "301:           <select id=\"control_jobs\" name=\"control_jobs\">",
          "302:   }]",
          "303:   for {set i 1} {$i <= 8} {incr i} {",
          "304:     if {$G(jobs)==$i} {",
          "305:       wapp-trim {",
          "306:         <option selected=1>%string($i)</option>",
          "307:       }",
          "308:     } else {",
          "309:       wapp-trim {",
          "310:         <option>%string($i)</option>",
          "311:       }",
          "312:     }",
          "315:           </select>",
          "316:           <input id=control_go name=control_go type=submit value=\"Run Tests!\">",
          "317:           </input>",
          "318:         </div>",
          "320:       </div>",
          "321:       <div class=div id=tests>",
          "322:       <table>",
          "",
          "[Added Lines]",
          "288:       <form action=\"control\" method=\"post\" name=\"control\">",
          "291:   # Build the \"platform\" select widget.",
          "292:   set lOpt [array names ::Platforms]",
          "293:   generate_select_widget Platform control_platform $lOpt $G(platform)",
          "295:   # Build the \"test\" select widget.",
          "296:   set lOpt [list Normal Veryquick Smoketest Build-Only]",
          "297:   generate_select_widget Test control_test $lOpt $G(test)",
          "299:   # Build the \"jobs\" select widget. Options are 1 to 8.",
          "300:   generate_select_widget Jobs control_jobs {1 2 3 4 5 6 7 8} $G(jobs)",
          "302:   switch $G(state) {",
          "303:     config {",
          "304:       set txt \"Run Tests!\"",
          "305:       set id control_run",
          "306:     }",
          "307:     running {",
          "308:       set txt \"STOP Tests!\"",
          "309:       set id control_stop",
          "310:     }",
          "311:     stopped {",
          "312:       set txt \"Reset!\"",
          "313:       set id control_reset",
          "314:     }",
          "317:     <div class=right>",
          "318:     <input id=%string($id) name=%string($id) type=submit value=\"%string($txt)\">",
          "319:     </input>",
          "320:     </div>",
          "323:   wapp-trim {",
          "324:   <br><br>",
          "337:   wapp-trim {",
          "338:      </div>",
          "339:      <div class=div2 id=tests>",
          "340:   }",
          "341:   wapp-page-tests",
          "343:   set script \"script/$G(state).js\"",
          "344:   wapp-trim {",
          "345:     </div>",
          "346:       <script src=%string($script)></script>",
          "347:     </body>",
          "348:     </html>",
          "349:   }",
          "350: }",
          "352: proc wapp-default {} {",
          "353:   generate_main_page",
          "354: }",
          "356: proc wapp-page-tests {} {",
          "357:   global G",
          "358:   wapp-trim { <table> }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "371:     }",
          "372:   }",
          "378:   if {[info exists G(result)]} {",
          "379:     set res $G(result)",
          "380:     wapp-trim {",
          "382:     }",
          "383:   }",
          "394: }",
          "396: proc wapp-page-control {} {",
          "397:   global G",
          "399:     if {[wapp-param-exists control_$v]} {",
          "400:       set G($v) [wapp-param control_$v]",
          "403:     }",
          "404:   }",
          "409:     set_test_array",
          "410:     set ::G(state) \"running\"",
          "411:   }",
          "413:   if {$::G(state) == \"running\"} {",
          "414:     do_some_stuff",
          "415:   }",
          "417:   wapp-redirect /",
          "418: }",
          "420: proc wapp-page-style.css {} {",
          "421:   wapp-subst {",
          "422:     .div {",
          "",
          "[Removed Lines]",
          "374:   wapp-trim {",
          "375:       </table>",
          "376:       </div>",
          "377:   }",
          "381:       <div class=div id=log> %string($res) </div>",
          "384:   wapp-trim {",
          "385:     <script src=\"script.js\"></script>",
          "386:     </body>",
          "387:     </html>",
          "388:   }",
          "389:   incr G(cnt)",
          "390: }",
          "392: proc wapp-default {} {",
          "393:   generate_main_page",
          "398:   foreach v {platform test tcl jobs keep msvc} {",
          "401:     } else {",
          "402:       set G($v) 0",
          "406:   if {[wapp-param-exists control_go]} {",
          "407:     # This is an actual \"run test\" command, not just a change of",
          "408:     # configuration!",
          "",
          "[Added Lines]",
          "409:   wapp-trim { </table> }",
          "414:       <div class=border id=result> %string($res) </div>",
          "419: # URI: /control",
          "420: #",
          "421: # Whenever the form at the top of the application page is submitted, it",
          "422: # is submitted here.",
          "423: #",
          "426:   catch { puts [wapp-param control_msvc] }",
          "427:   if {$::G(state)==\"config\"} {",
          "428:     set lControls [list platform test tcl jobs keep msvc]",
          "429:     set G(msvc) 0",
          "430:     set G(keep) 0",
          "431:   } else {",
          "432:     set lControls [list jobs]",
          "433:   }",
          "434:   foreach v $lControls {",
          "440:   if {[wapp-param-exists control_run]} {",
          "441:     # This is a \"run test\" command.",
          "446:   if {[wapp-param-exists control_stop]} {",
          "447:     # A \"STOP tests\" command.",
          "448:     set G(state) \"stopped\"",
          "449:     set G(result) \"Test halted by user\"",
          "450:     foreach j $G(test_array) {",
          "451:       set name [dict get $j config]",
          "452:       if { [info exists G(test.$name.channel)] } {",
          "453:         close $G(test.$name.channel)",
          "454:         unset G(test.$name.channel)",
          "455:         slave_test_done $name 1",
          "456:       }",
          "457:     }",
          "458:   }",
          "460:   if {[wapp-param-exists control_reset]} {",
          "461:     # A \"reset app\" command.",
          "462:     set G(state) \"config\"",
          "463:     wapptest_init",
          "464:   }",
          "472: # URI: /style.css",
          "473: #",
          "474: # Return the stylesheet for the application main page.",
          "475: #",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "425:       padding: 1em;",
          "426:     }",
          "428:     .warning {",
          "429:       text-align:center;",
          "430:       color: red;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:     .border {",
          "485:       border: 3px groove #444444;",
          "486:       padding: 1em;",
          "487:       margin-top: 1em;",
          "488:       margin-bottom: 1em;",
          "489:     }",
          "491:     .div2 {",
          "492:       margin: 1em;",
          "493:     }",
          "495:     table {",
          "496:       padding: 1em;",
          "497:       width:100%;",
          "498:       border: 3px groove #444444;",
          "499:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "432:       font-weight: bold;",
          "433:     }",
          "438:     .testfield {",
          "439:       padding-right: 10ex;",
          "440:     }",
          "442:     .testwait {}",
          "443:     .testrunning { color: blue }",
          "444:     .testdone { color: green }",
          "445:     .testfail { color: red }",
          "446:   }",
          "447: }",
          "451:   set tcl $::G(tcl)",
          "452:   set keep $::G(keep)",
          "453:   set msvc $::G(msvc)",
          "455:   wapp-subst {",
          "457:     lElem.forEach(function(e) {",
          "458:       var elem = document.getElementById(e);",
          "459:       elem.addEventListener(\"change\", function() { control.submit() } );",
          "",
          "[Removed Lines]",
          "435:     .right {",
          "436:     }",
          "449: proc wapp-page-script.js {} {",
          "456:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\", \"control_jobs\"\\];",
          "",
          "[Added Lines]",
          "510:       white-space: nowrap;",
          "518:     .right { float: right; }",
          "523: # URI: /script/${state}.js",
          "524: #",
          "525: # The last part of this URI is always \"config.js\", \"running.js\" or",
          "526: # \"stopped.js\", depending on the state of the application. It returns",
          "527: # the javascript part of the front-end for the requested state to the",
          "528: # browser.",
          "529: #",
          "530: proc wapp-page-script {} {",
          "531:   regexp {[^/]*$} [wapp-param REQUEST_URI] script",
          "538:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\",",
          "539:         \"control_jobs\"",
          "540:     \\];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "469:     elem.checked = %string($msvc);",
          "470:   }",
          "473:     wapp-subst {",
          "474:       var lElem = \\[\"control_platform\", \"control_test\",",
          "476:       \\];",
          "477:       lElem.forEach(function(e) {",
          "478:         var elem = document.getElementById(e);",
          "",
          "[Removed Lines]",
          "472:   if {$::G(state)!=\"config\"} {",
          "475:           \"control_tcl\", \"control_keep\", \"control_msvc\", \"control_go\"",
          "",
          "[Added Lines]",
          "556:   if {$script != \"config.js\"} {",
          "559:           \"control_tcl\", \"control_keep\", \"control_msvc\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "480:       })",
          "481:     }",
          "482:   }",
          "483: }",
          "485: proc wapp-page-env {} {",
          "486:   wapp-allow-xorigin-params",
          "487:   wapp-trim {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:   if {$script == \"running.js\"} {",
          "569:     wapp-subst {",
          "570:       function reload_tests() {",
          "571:         fetch('tests')",
          "572:           .then( data => data.text() )",
          "573:           .then( data => {",
          "574:             document.getElementById(\"tests\").innerHTML = data;",
          "575:           })",
          "576:           .then( data => {",
          "577:             if( document.getElementById(\"result\") ){",
          "578:               document.location = document.location;",
          "579:             } else {",
          "580:               setTimeout(reload_tests, 1000)",
          "581:             }",
          "582:           });",
          "583:       }",
          "585:       setTimeout(reload_tests, 1000)",
          "586:     }",
          "587:   }",
          "590: # URI: /env",
          "591: #",
          "592: # This is for debugging only. Serves no other purpose.",
          "593: #",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "490:   }",
          "491: }",
          "493: proc wapp-page-log {} {",
          "494:   set log [string range [wapp-param REQUEST_URI] 5 end]",
          "495:   set fd [open $log]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602: # URI: /log/dirname/test.log",
          "603: #",
          "604: # This URI reads file \"dirname/test.log\" from disk, wraps it in a <pre>",
          "605: # block, and returns it to the browser. Use for viewing log files.",
          "606: #",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "502:   }",
          "503: }",
          "505: wapp-start $argv",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: wapptest_init",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
      "candidate_info": {
        "commit_hash": "87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
        "files": [
          "ext/misc/regexp.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add some static to the 'regexp' extension.\n\nFossilOrigin-Name: a21d1dde73f811244b5b43f9fed5877263a9c5061470221f417e501f5530edfa",
        "before_after_code_files": [
          "ext/misc/regexp.c||ext/misc/regexp.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/regexp.c||ext/misc/regexp.c": [
          "File: ext/misc/regexp.c -> ext/misc/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:   if( pRe ){",
          "615:     sqlite3_free(pRe->aOp);",
          "616:     sqlite3_free(pRe->aArg);",
          "",
          "[Removed Lines]",
          "613: void re_free(ReCompiled *pRe){",
          "",
          "[Added Lines]",
          "613: static void re_free(ReCompiled *pRe){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:   ReCompiled *pRe;",
          "629:   const char *zErr;",
          "630:   int i, j;",
          "",
          "[Removed Lines]",
          "627: const char *re_compile(ReCompiled **ppRe, const char *zIn, int noCase){",
          "",
          "[Added Lines]",
          "627: static const char *re_compile(ReCompiled **ppRe, const char *zIn, int noCase){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 408144a1832569ced8e04840f0dd36a3867405f36b13631b0f13c0f7b8a0fb01",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90294961da64434c4fbb495567b39bf560b9531b",
      "candidate_info": {
        "commit_hash": "90294961da64434c4fbb495567b39bf560b9531b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90294961da64434c4fbb495567b39bf560b9531b",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a segfault in fts3 prompted by a corrupted database.\n\nFossilOrigin-Name: 2d7b1d1d41ff69d5465fcb861420816ecb066c25a9015eefdab5fae15a2e1c9f",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2903:         sqlite3_int64 *pi = (isPrefix ? &iLeavesEndBlock : 0);",
          "2904:         rc = fts3SelectLeaf(p, zTerm, nTerm, zRoot, nRoot, &iStartBlock, pi);",
          "2905:         if( rc!=SQLITE_OK ) goto finished;",
          "",
          "[Removed Lines]",
          "2902:       if( iStartBlock && zTerm ){",
          "",
          "[Added Lines]",
          "2902:       if( iStartBlock && zTerm && zRoot ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bf811ea89a133d481a86407683a7518e909eccb7aa3aa02f7932bdb33387572",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "250: } {1 {malformed database schema (sqlite_autoindey_t1_segdir_1) - orphan index}}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #-------------------------------------------------------------------------",
          "254: reset_db",
          "255: do_execsql_test 6.0 {",
          "256:   CREATE VIRTUAL TABLE Table0 USING fts3();",
          "257:   INSERT INTO Table0_segdir VALUES(1,NULL,1,NULL,NULL,NULL);",
          "258: }",
          "260: do_catchsql_test 6.1 {",
          "261:   SELECT * FROM Table0 WHERE Table0 MATCH 'a';",
          "262: } {0 {}}",
          "264: do_catchsql_test 6.2 {",
          "265:   INSERT INTO Table0(Table0) VALUES('optimize');",
          "266: } {0 {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}