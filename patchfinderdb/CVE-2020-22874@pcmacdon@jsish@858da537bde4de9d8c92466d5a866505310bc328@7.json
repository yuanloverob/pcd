{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0396ea209e3faddcc2807d3d3daf0ebf340792a9",
      "candidate_info": {
        "commit_hash": "0396ea209e3faddcc2807d3d3daf0ebf340792a9",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0396ea209e3faddcc2807d3d3daf0ebf340792a9",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiLexer.c",
          "src/jsiPstate.c",
          "src/jsiUtils.c",
          "tests/info.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.29\": refactor file refs\n\nFossilOrigin-Name: d7399d5384c36db0153897075f9cd7123d013c2cd41ff1bb070f97ad6d037efe",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiLexer.c||src/jsiLexer.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tests/info.jsi||tests/info.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 28",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 29",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             goto done;",
          "689:     }",
          "692:         if ((cp = Jsi_Strrchr(path, '/'))) {",
          "693:             len = (cp-path);",
          "694:             rc = jsi_PkgLoadOne(interp, name, path, len, &fval, ver);",
          "",
          "[Removed Lines]",
          "691:     if ((path = interp->framePtr->fileName) || (interp->argv0 && (path = Jsi_ValueString(interp, interp->argv0, NULL)))) {",
          "",
          "[Added Lines]",
          "691:     if (*(path = interp->framePtr->filePtr->fileName) || (interp->argv0 && (path = Jsi_ValueString(interp, interp->argv0, NULL)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "991:             if (popts->info)",
          "992:                 Jsi_IncrRefCount(interp, popts->info);",
          "993:         }",
          "996:         Jsi_HashSet(interp->packageHash, (void*)name, ptr);",
          "997:         if (initProc && interp->parent) { // Provide C extensions to topInterp.",
          "998:             ptr = jsi_PkgGet(interp->topInterp, name);",
          "",
          "[Removed Lines]",
          "994:         if (interp->framePtr->fileName && !initProc)",
          "995:             ptr->loadFile = Jsi_KeyAdd(interp->topInterp, interp->framePtr->fileName);",
          "",
          "[Added Lines]",
          "994:         if (interp->framePtr->filePtr->fileName[0] && !initProc)",
          "995:             ptr->loadFile = Jsi_KeyAdd(interp->topInterp, interp->framePtr->filePtr->fileName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1554: void jsi_SysPutsCmdPrefix(Jsi_Interp *interp, jsi_LogOptions *popts,Jsi_DString *dStr, int* quote, const char **fnPtr) {",
          "1555:     int didx = 0;",
          "1556:     const char *cp;",
          "1558:     if (fn && !popts->full && (cp=Jsi_Strrchr(fn, '/')))",
          "1559:         fn = cp +1;",
          "1560:     if (popts->time || (didx=popts->date)) {",
          "",
          "[Removed Lines]",
          "1557:     const char *fn = interp->curIp->fname;",
          "",
          "[Added Lines]",
          "1557:     const char *fn = interp->curIp->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2379:     if (func->retType)",
          "2380:         Jsi_ObjInsert(interp, nobj, \"retType\", Jsi_ValueNewStringKey(interp, jsi_typeName(interp, func->retType, &dStr)), 0);",
          "2381:     Jsi_DSFree(&dStr);",
          "2384:         Jsi_ObjInsert(interp, nobj, \"script\", lval, 0);",
          "2386:         if (!func->opcodes) {",
          "2387:             ftype = (func->callback == jsi_AliasInvoke ? \"alias\" : \"builtin\");",
          "2388:         } else {",
          "",
          "[Removed Lines]",
          "2382:     if (func->script) {",
          "2383:         lval = Jsi_ValueNewStringKey(interp, func->script);",
          "2385:         const char *ftype = (func->scriptFile?\"script\":\"eval\");",
          "",
          "[Added Lines]",
          "2382:     if (func->scriptData) {",
          "2383:         lval = Jsi_ValueNewStringKey(interp, func->scriptData);",
          "2385:         const char *ftype = (func->scriptData?\"eval\":\"script\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2462:     int line = (f->line ? f->line : (interp->curIp ? interp->curIp->Line : 0));",
          "2463:     snprintf(buf, sizeof(buf), \"{funcName:\\\"%s\\\", fileName:\\\"%s\\\", line:%d, level:%d, tryDepth:%d, withDepth:%d}\",",
          "2465:         );",
          "2467:     Jsi_RC rc = Jsi_JSONParse(interp, buf, ret, 0);",
          "",
          "[Removed Lines]",
          "2464:         f->funcName?f->funcName:\"\", f->fileName?f->fileName:\"\", line, f->level, f->tryDepth, f->withDepth",
          "",
          "[Added Lines]",
          "2464:         f->funcName?f->funcName:\"\", f->filePtr->fileName, line, f->level, f->tryDepth, f->withDepth",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2632: static bool jsi_isMain(Jsi_Interp *interp) {",
          "2633:     int isi = (interp->isMain);",
          "2634:     if (isi == 0) {",
          "2636:         Jsi_Value *v1 = interp->argv0;",
          "2637:         if (c2 && v1 && Jsi_ValueIsString(interp, v1)) {",
          "2638:             char *c1 = Jsi_ValueString(interp, v1, NULL);",
          "",
          "[Removed Lines]",
          "2635:         const char *c2 = interp->curFile;",
          "",
          "[Added Lines]",
          "2635:         const char *c2 = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2679:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, 0);",
          "2680:     if (Jsi_ValueGetNumber(interp, v, &vnum) == JSI_OK) {",
          "2681:         bp.line = (int)vnum;",
          "2683:     } else {",
          "2684:         const char *val = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2685:         const char *cp;",
          "",
          "[Removed Lines]",
          "2682:         bp.file = interp->curFile;",
          "",
          "[Added Lines]",
          "2682:         bp.file = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2687:         if (isdigit(val[0])) {",
          "2688:             if (Jsi_GetInt(interp, val, &bp.line, 0) != JSI_OK)",
          "2689:                 return Jsi_LogError(\"bad number\");",
          "2691:         } else if ((cp = Jsi_Strchr(val, ':'))) {",
          "2692:             if (Jsi_GetInt(interp, cp+1, &bp.line, 0) != JSI_OK)",
          "2693:                 return Jsi_LogError(\"bad number\");",
          "",
          "[Removed Lines]",
          "2690:             bp.file = interp->curFile;",
          "",
          "[Added Lines]",
          "2690:             bp.file = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2802:     } else {",
          "2803:         if (arg->vt == JSI_VT_OBJECT) {",
          "2804:             switch (arg->d.obj->ot) {",
          "2806:                 case JSI_OT_REGEXP: isreg = 1; break;",
          "2807:                 default: break;",
          "2808:             }",
          "",
          "[Removed Lines]",
          "2805:                 case JSI_OT_FUNCTION: name = arg->d.obj->d.fobj->func->script; break;",
          "",
          "[Added Lines]",
          "2805:                 case JSI_OT_FUNCTION: name = arg->d.obj->d.fobj->func->filePtr->fileName; break;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3650:     }",
          "3651:     if (f->argnames==NULL && cmdSpec->argStr) {",
          "3654:         jsi_Pline *opl = interp->parseLine, pline;",
          "3655:         interp->parseLine = &pline;",
          "3656:         pline.first_line = 1;",
          "3658:         f->argnames = jsi_ParseArgStr(interp, cmdSpec->argStr);",
          "3660:         interp->parseLine = opl;",
          "3661:     }",
          "3662:     return rc;",
          "",
          "[Removed Lines]",
          "3653:         const char *ocfile = interp->curFile;",
          "3657:         interp->curFile = cmdSpec->name;",
          "3659:         interp->curFile = ocfile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4415:     if (v2 && !Jsi_ValueIsObjType(interp, v2, JSI_OT_ARRAY))",
          "4416:         return Jsi_LogError(\"arg 2: expected array|undefined\");",
          "4417:     if (!v1 || Jsi_ValueIsNull(interp, v1)) {",
          "4421:         mod++;",
          "4422:         cp = Jsi_Strrchr(mod, '.');",
          "4423:         int len = (cp?(cp-mod):(int)Jsi_Strlen(mod));",
          "",
          "[Removed Lines]",
          "4418:         mod = interp->framePtr->fileName;",
          "4419:         if (mod) mod = Jsi_Strrchr(mod, '/');",
          "4420:         if (!mod) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "4415:         mod = interp->framePtr->filePtr->fileName;",
          "4416:         if (*mod) mod = Jsi_Strrchr(mod, '/');",
          "4417:         if (!*mod) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4625:             if (cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "4626:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4628:                 Jsi_TreeSearchDone(&search);",
          "4629:                 if (fname) {",
          "4630:                     jsi_FileInfo  *fi = (typeof(fi))Jsi_HashGet(interp->fileTbl, fname, 0);",
          "",
          "[Removed Lines]",
          "4627:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = interp->framePtr->ip->fname;",
          "",
          "[Added Lines]",
          "4624:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = interp->framePtr->ip->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4640:                     help = Jsi_DSAppendLen(&hStr, fstr+1, es-fstr-1);",
          "4641:                     fstr = es;",
          "4642:                 }",
          "4644:                 if (mod && (mod = Jsi_Strrchr(mod, '/')))",
          "4645:                     mod++;",
          "4646:                 while (help && isspace(help[0])) help++;",
          "",
          "[Removed Lines]",
          "4643:                 const char *mod = (fname?fname:interp->framePtr->fileName);",
          "",
          "[Added Lines]",
          "4640:                 const char *mod = (fname?fname:interp->framePtr->filePtr->fileName);",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     c->codes[c->code_len].data = extra;",
          "156:     c->codes[c->code_len].Line = line->first_line;",
          "157:     c->codes[c->code_len].Lofs = line->first_column;",
          "159:     c->codes[c->code_len].alloc = doalloc;",
          "160:     c->code_len ++;",
          "161:     return 0;",
          "",
          "[Removed Lines]",
          "158:     c->codes[c->code_len].fname = jsi_PstateGetFilename(pstate);",
          "",
          "[Added Lines]",
          "158:     c->codes[c->code_len].filePtr = pstate->filePtr;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "24: {",
          "25:     bool isNew;",
          "26:     Jsi_HashEntry *hPtr = NULL;",
          "",
          "[Removed Lines]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval)",
          "",
          "[Added Lines]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval, jsi_FileInfo *fi)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         return ps;",
          "34:     }",
          "35:     ps = jsi_PstateNew(interp);",
          "36:     ps->eval_flag = iseval;",
          "37:     if (codeStr)",
          "38:         jsi_PstateSetString(ps, codeStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     ps->filePtr = fi;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:                        jsi_ScopeChain *scope, Jsi_Value *currentScope, Jsi_Value *_this, Jsi_Value **ret)",
          "65: {",
          "66:     Jsi_RC r = JSI_OK;",
          "68:     if (newps) {",
          "69:         int oef = newps->eval_flag;",
          "70:         newps->eval_flag = 1;",
          "",
          "[Removed Lines]",
          "67:     jsi_Pstate *newps = jsiNewParser(interp, program, NULL, 1);",
          "",
          "[Added Lines]",
          "68:     jsi_Pstate *newps = jsiNewParser(interp, program, NULL, 1, interp->framePtr->filePtr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "411:     }",
          "412:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "415:         if (cp) fn = cp+1;",
          "416:         Jsi_Printf(interp, jsi_Stderr, \", %s:%d\", fn, ip->Line);",
          "417:     }",
          "",
          "[Removed Lines]",
          "413:     if (ip->fname) {",
          "414:         const char *fn = ip->fname,  *cp = Jsi_Strrchr(fn, '/');",
          "",
          "[Added Lines]",
          "414:     if (ip->filePtr->fileName[0]) {",
          "415:         const char *fn = ip->filePtr->fileName,  *cp = Jsi_Strrchr(fn, '/');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "578:     Jsi_DString dStr = {};",
          "579:     Jsi_Value *v;",
          "580:     int i;",
          "583:     for (i=0; i<2; i++) {",
          "584:         Jsi_DSAppend(&dStr, \"Jsi_Auto.\", str, NULL);",
          "585:         Jsi_VarLookup(interp, Jsi_DSValue(&dStr));",
          "",
          "[Removed Lines]",
          "581:     const char *curFile = interp->curFile;",
          "582:     interp->curFile = \"<jsiLoadFunction>\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:             interp->autoLoaded++;",
          "619:         }",
          "620:     }",
          "622:     return tret;",
          "623: }",
          "",
          "[Removed Lines]",
          "621:     interp->curFile = curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "628:     jsi_OpCode *ip = (iPtr ? iPtr : interp->curIp);",
          "629:     if (!ip)",
          "630:         return;",
          "632:     if ((tc&jsi_callTraceFullPath)==0 && ((ff=Jsi_Strrchr(fname,'/'))))",
          "633:         fname = ff+1;",
          "634:     if (interp->traceHook)",
          "636:     else {",
          "637:         const char *fp = ((tc&jsi_callTraceNoParent)?NULL:fstatic->parentName);",
          "638:         if (fp && !*fp)",
          "",
          "[Removed Lines]",
          "631:     const char *ff, *fname = ip->fname?ip->fname:\"\";",
          "635:         (*interp->traceHook)(interp, fstatic->name, ip->fname, ip->Line, fstatic->cmdSpec, _this, args, ret);",
          "",
          "[Added Lines]",
          "632:     const char *ff, *fname = ip->filePtr->fileName;",
          "636:         (*interp->traceHook)(interp, fstatic->name, fname, ip->Line, fstatic->cmdSpec, _this, args, ret);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1141:             ip->Line = curLine;",
          "1142:         else",
          "1143:             curLine = ip->Line;",
          "1148:         if (interp->debugOpts.hook) {",
          "1150:             interp->framePtr->line = curLine;",
          "1151:             if ((rc = (*interp->debugOpts.hook)(interp, curFile, curLine, interp->framePtr->level, interp->curFunction, jsi_opcode_string(ip->op), ip, NULL)) != JSI_OK)",
          "1152:                 break;",
          "",
          "[Removed Lines]",
          "1144:         if (!ip->fname)",
          "1145:             ip->fname = curFile;",
          "1146:         else",
          "1147:             curFile = ip->fname;",
          "1149:             interp->framePtr->fileName = curFile;",
          "",
          "[Added Lines]",
          "1145:         if (!ip->filePtr)",
          "1146:             ip->filePtr = interp->framePtr->filePtr;",
          "1147:         curFile = ip->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2033:     frame.inthis = _this;",
          "2034:     frame.opcodes = opcodes;",
          "2035:     frame.filePtr = fi;",
          "2037:     frame.funcName = interp->curFunction;",
          "2038:     frame.dirName = interp->curDir;",
          "2039:     frame.level = frame.parent->level+1;",
          "",
          "[Removed Lines]",
          "2036:     frame.fileName = ((func && func->script)?func->script:interp->curFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2159:     int oldef = interp->evalFlags;",
          "2160:     jsi_Pstate *oldps = interp->ps;",
          "2161:     jsi_FileInfo *fi = interp->framePtr->filePtr;",
          "2163:     char *origFile = Jsi_ValueString(interp, path, &fnLen);",
          "2164:     const char *fname = origFile;",
          "2165:     char *oldDir = interp->curDir, *cp;",
          "",
          "[Removed Lines]",
          "2162:     const char *oldFile = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2266:                 }",
          "2267:                 fi = (jsi_FileInfo *)Jsi_HashValueGet(hPtr);",
          "2268:                 if (!fi) goto bail;",
          "2270:                 interp->curDir = fi->dirName;",
          "2272:             } else {",
          "",
          "[Removed Lines]",
          "2269:                 interp->curFile = fi->fileName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2274:                 if (!fi) goto bail;",
          "2275:                 Jsi_HashValueSet(hPtr, fi);",
          "2276:                 fi->origFile = (char*)Jsi_KeyAdd(interp, origFile);",
          "2278:                 char *dfname = Jsi_Strdup(fname);",
          "2279:                 if ((cp = Jsi_Strrchr(dfname,'/')))",
          "",
          "[Removed Lines]",
          "2277:                 interp->curFile = fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "",
          "[Added Lines]",
          "2278:                 fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2282:                 Jsi_Free(dfname);",
          "2283:             }",
          "2284:             if (!input->fname)",
          "2287:             int cnt = 0, noncmt = 0, jppOpts[4]={};",
          "2288:             uint ilen;",
          "",
          "[Removed Lines]",
          "2285:                 input->fname = interp->curFile;",
          "",
          "[Added Lines]",
          "2286:                 input->fname = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2348:     oldSp = interp->framePtr->Sp;",
          "2350:     rc = JSI_OK;",
          "2352:     interp->evalFlags = flags;",
          "2353:     if (!ps)",
          "2354:         rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "2351:     ps = jsiNewParser(interp, str, input, 0);",
          "",
          "[Added Lines]",
          "2352:     ps = jsiNewParser(interp, str, input, 0, fi);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2358:         Jsi_Value *retValue = interp->retValue;",
          "2359:         if (!interp->strict)",
          "2360:             interp->strict = (jsi_GetDirective(interp, ps->opcodes, \"use strict\")!=NULL);",
          "2363:         if (level <= 0)",
          "2364:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue, fi);",
          "",
          "[Removed Lines]",
          "2361:         const char *curFile = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2371:             else",
          "2372:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue, fi);",
          "2373:         }",
          "2375:         if (rc != JSI_OK)",
          "2376:             rc = (ignore?JSI_OK:JSI_ERROR);",
          "2377:         else if (ps->last_exception || oldps->last_exception)",
          "",
          "[Removed Lines]",
          "2374:         interp->curFile = curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2383:     }",
          "2385: bail:",
          "2387:     interp->curDir = oldDir;",
          "2388:     interp->framePtr->Sp = oldSp;",
          "2389:     interp->isMain = oisi;",
          "",
          "[Removed Lines]",
          "2386:     interp->curFile = oldFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:         Jsi_DSPrintf(dStr, \", in call to '%s'\", func->name);",
          "173:     else",
          "174:         Jsi_DSPrintf(dStr, \", in call to function\");",
          "177:         if (cp)",
          "178:             cp++;",
          "179:         else",
          "181:         Jsi_DSPrintf(dStr, \" declared at %s:%d.%d\", cp, func->bodyline.first_line, func->bodyline.first_column);",
          "182:     }",
          "184:         Jsi_DSAppend(dStr, \" <\", NULL);",
          "185:         Jsi_ValueGetDString(interp, arg, dStr, 0);",
          "186:         Jsi_DSAppend(dStr, \">.\", NULL);",
          "",
          "[Removed Lines]",
          "175:     if (func->script) {",
          "176:         const char *cp = Jsi_Strrchr(func->script, '/');",
          "180:             cp = func->script;",
          "183:         if (arg) {",
          "",
          "[Added Lines]",
          "175:     const char *file = interp->framePtr->filePtr->fileName;",
          "176:     if (file[0]) {",
          "177:         const char *cp = Jsi_Strrchr(file, '/');",
          "181:             cp = file;",
          "184:     if (arg) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:     f->opcodes = ops;",
          "509:     f->argnames = args;",
          "510:     f->localnames = localvar;",
          "512:     f->bodyline = *line;",
          "513:     f->retType = (Jsi_otype)args->retType;",
          "515:         f->scriptFile = f->script;",
          "517:     if (l->ltype == LT_STRING)",
          "518:         f->bodyStr = l->d.str;",
          "519:     f->endPos = l->cur;",
          "",
          "[Removed Lines]",
          "511:     f->script = interp->curFile;",
          "514:     if (!pstate->eval_flag) {",
          "516:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "579:                         if (line)",
          "580:                             interp->parseLine = line;",
          "582:                         if (line)",
          "583:                             interp->parseLine = NULL;",
          "584:                         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "581:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->script, fo->bodyline.first_line);",
          "",
          "[Added Lines]",
          "582:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->filePtr->fileName, fo->bodyline.first_line);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "719:         if (name)",
          "720:             f->cmdSpec->name = (char*)Jsi_KeyAdd(interp, name);",
          "721:     }",
          "723:     f->callback = callback;",
          "724:     return Jsi_ValueMakeObject(interp, toVal, o);",
          "725: }",
          "",
          "[Removed Lines]",
          "722:     f->script = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "734:     f->callback = cmdSpec->proc;",
          "735:     f->privData = privData;",
          "736:     f->f.flags = (cmdSpec->flags & JSI_CMD_MASK);",
          "738:     o->d.fobj = jsi_FuncObjNew(interp, f);",
          "739:     return Jsi_ValueMakeObject(interp, NULL, o);",
          "740: }",
          "",
          "[Removed Lines]",
          "737:     f->script = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "969:     if (profile || cover) {",
          "970:         Jsi_DString dStr;",
          "971:         Jsi_DSInit(&dStr);",
          "973:         if (!file)",
          "974:             file = \"\";",
          "975:         int line = func->bodyline.last_line;",
          "",
          "[Removed Lines]",
          "972:         const char *file = func->script;",
          "",
          "[Added Lines]",
          "973:         const char *file = func->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1076:      SIGINIT(func, FUNC);",
          "1077:      func->hPtr = Jsi_HashSet(interp->funcsTbl, func, func);",
          "1078:      func->refCnt = 1;",
          "1080:      interp->funcCnt++;",
          "1081:      return func;",
          "1082: }",
          "",
          "[Removed Lines]",
          "1079:      func->filePtr = interp->framePtr->filePtr;",
          "",
          "[Added Lines]",
          "1080:      func->filePtr = (interp->inParse? interp->parsePs->filePtr: interp->framePtr->filePtr);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: #endif",
          "340: } Jsi_InterpDebug;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: typedef struct {",
          "347:     int useCnt;",
          "348:     int logflag;",
          "349: } jsi_FileInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:     unsigned char isof:1;",
          "435:     unsigned char local:1;",
          "436:     jsi_OpLogFlags logflag:3;",
          "438: } jsi_OpCode;",
          "",
          "[Removed Lines]",
          "437:     const char *fname;",
          "",
          "[Added Lines]",
          "446:     jsi_FileInfo* filePtr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680:     int retType;",
          "681: } Jsi_ScopeStrs;",
          "693: typedef struct jsi_Frame {",
          "694:     int level;",
          "696:     const char *funcName;",
          "697:     const char *dirName;",
          "698:     jsi_FileInfo *filePtr;",
          "",
          "[Removed Lines]",
          "683: typedef struct {",
          "688:     int useCnt;",
          "689:     int logflag;",
          "690: } jsi_FileInfo;",
          "695:     const char *fileName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "731:     Jsi_Hash *strTbl;",
          "732:     int argType;                // Used during parsing to aggregate type.",
          "733:     Jsi_ScopeStrs *args;        // Last push.",
          "734: } jsi_Pstate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734:     jsi_FileInfo *filePtr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "849:     Jsi_CmdSpec *parentSpec;",
          "851:     int callCnt;",
          "854:     const char *bodyStr; // Non-builtin func script body.",
          "855:     int endPos, startPos;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     const char *scriptData;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1193:     const char *scriptStr;",
          "1194:     jsi_Frame topFrame;",
          "1195:     jsi_FileInfo topFile;",
          "1197:     const char *curFunction;",
          "1198:     const char *homeDir;",
          "1199:     const char *historyFile;",
          "",
          "[Removed Lines]",
          "1196:     const char *curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2835:     } else {",
          "2837:         if (sinterp->scriptStr != 0) {",
          "2840:             rc = Jsi_EvalString(sinterp, sinterp->scriptStr, JSI_EVAL_ISMAIN);",
          "2841:         } else if (sinterp->scriptFile && !sinterp->debugOpts.debugCallback) {",
          "2842:             int len;",
          "",
          "[Removed Lines]",
          "2838:             if (sinterp->scriptFile && !interp->curFile)",
          "2839:                 sinterp->curFile = Jsi_ValueString(sinterp, sinterp->scriptFile, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiLexer.c||src/jsiLexer.c": [
          "File: src/jsiLexer.c -> src/jsiLexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     Jsi_Interp *interp = ps->interp;",
          "515:     interp->errLine = yylloc->first_line;",
          "516:     interp->errCol = yylloc->first_column;",
          "518:         yylloc->first_column, msg);",
          "520:         fprintf(stderr, \"%s:%d.%d: %s\\n\",  interp->curFile, yylloc->first_line, yylloc->first_column, msg);",
          "",
          "[Removed Lines]",
          "517:     Jsi_LogParse(\"%s:%d.%d: error: %s\", interp->curFile?interp->curFile:\"@\", yylloc->first_line,",
          "",
          "[Added Lines]",
          "517:     Jsi_LogParse(\"%s:%d.%d: error: %s\", interp->framePtr->filePtr->fileName, yylloc->first_line,",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return ps;",
          "205: }",
          "213: void jsi_PstateClear(jsi_Pstate *ps)",
          "214: {",
          "215:     jsi_Lexer* l = ps->lexer;",
          "",
          "[Removed Lines]",
          "207: const char *jsi_PstateGetFilename(jsi_Pstate *ps)",
          "208: {",
          "209:     Jsi_Interp *interp = ps->interp;",
          "210:     return interp->curFile;",
          "211: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: int jsi_fatalexit = JSI_LOG_BUG;",
          "88: const char *jsi_GetCurFile(Jsi_Interp *interp)",
          "89: {",
          "91:     if (!interp)",
          "93:     if (interp->inParse)",
          "100: }",
          "101: extern void jsi_TypeMismatch(Jsi_Interp* interp)",
          "102: {",
          "",
          "[Removed Lines]",
          "90:     const char *curFile = NULL;",
          "92:         return NULL;",
          "94:         curFile = interp->curFile;",
          "95:     else",
          "96:         curFile = (interp->curIp && interp->curIp->fname? interp->curIp->fname:interp->curFile);",
          "97:     if (!curFile) curFile = interp->framePtr->fileName;",
          "98:     if (!curFile) curFile = \"\";",
          "99:     return curFile;",
          "",
          "[Added Lines]",
          "91:         return \"\";",
          "93:         return interp->parsePs->filePtr->fileName;",
          "94:     return interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:             jsi_Frame *fptr = interp->framePtr->parent;",
          "225:             line = fptr->line;",
          "226:             lofs = 0;",
          "228:         } else {",
          "229:             line = interp->curIp->Line;",
          "230:             lofs = interp->curIp->Lofs;",
          "",
          "[Removed Lines]",
          "227:             curFile = fptr->fileName;",
          "",
          "[Added Lines]",
          "222:             curFile = fptr->filePtr->fileName;",
          "",
          "---------------"
        ],
        "tests/info.jsi||tests/info.jsi": [
          "File: tests/info.jsi -> tests/info.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: K = {} ==> {}",
          "58: K.f(1) ==> 'F'",
          "59: undefined",
          "62: [ \"z\" ]",
          "63: Info.funcs(K) ==> [ \"f\", \"g\" ]",
          "",
          "[Removed Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' <function (z) {...}>.    (at or near \"f\")",
          "",
          "[Added Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' declared at info.jsi:0.0 <function (z) {...}>.    (at or near \"f\")",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "fa0ff924859c1df28e77268f359b1c2fa34e6edd",
      "candidate_info": {
        "commit_hash": "fa0ff924859c1df28e77268f359b1c2fa34e6edd",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/fa0ff924859c1df28e77268f359b1c2fa34e6edd",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/web/docs/app.css",
          "lib/web/docs/app.js",
          "lib/web/md/Builds.md",
          "lib/web/md/Index.md",
          "lib/web/md/Misc.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Start.md",
          "lib/web/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiProto.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.3\": Fix crash from issue #18\n\nFossilOrigin-Name: 930e210f5d990ed4953cf49cb9d7528247c0d55d19b9158d60cec49f46649986",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "23:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "24:         docs        :'',        // Display markdown docs from this directory.",
          "25:         ignoreExit  :false,     // Ignore exit request.",
          "26:         initArg     :[],        // List of app modules to run.",
          "27:         isFile      :false,     // Url is a file, so throw if not exists.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         onRecv      :null,      // Callback command to handle websocket msgs.",
          "35:         pageStr     :'',        // String to serve out as url.",
          "36:         port        :0,         // Start search for port.",
          "38:         query       :'',        // Query to append to url.",
          "39:         rootdir     :null,      // Base directory.",
          "40:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "37:         portMax     :1000,      // Max times to increment-retry port if busy.",
          "",
          "[Added Lines]",
          "38:         portMax     :999,       // Max times to increment-retry port if busy.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         sslFnCert   :'cert.pem',// File name in sslDir of cert.",
          "43:         sslFnKey    :'privkey.pem',// File name in sslDir of key.",
          "44:         srcFile     :'',        // File of code to source inside the Websrv function.",
          "47:         trace       :false,     // Tracing output.",
          "48:         udata       :{},        // Shortcut add of udata to wsOpts.",
          "49:         url         :\"\",        // The file/url to serve out and clears timeout.",
          "50:         urlPrefix   :'',        // Prefix for urls",
          "51:         urlUnknown  :'',        // Url to redirect 404 to.",
          "52:         useridPass  :'',        // USER:PASS for web GUI.",
          "53:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "54:         wsdebug     :0,         // Debug option for websockets.",
          "",
          "[Removed Lines]",
          "45:         uploadDir   :'/tmp',    // Upload files go here",
          "46:         timeout     :60000,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "",
          "[Added Lines]",
          "46:         timeout     :59999,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "49:         uploadDir   :'/tmp',    // Upload files go here",
          "53:         urlFallback :'',        // File-url to serve out if page not found.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:             if (!File.exists(self.wsinc))",
          "431:                 self.wsinc = '';",
          "432:         }",
          "434:             self.timeout = 0;",
          "435:     } if (self.docs) {",
          "436:         if (self.rootdir || self.zip)",
          "",
          "[Removed Lines]",
          "433:         if (self.timeout != options.timeout)",
          "",
          "[Added Lines]",
          "435:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "441:         else if (File.isdir(sd) && File.exists(sd+'/'+surl))",
          "442:             self.rootdir = self.docs;",
          "443:         else",
          "445:         if (!self.wsinc) {",
          "446:             self.wsinc = self.rootdir+'/docs/wsinc.jsi';",
          "447:             if (!File.exists(self.wsinc))",
          "448:                 self.wsinc = '';",
          "449:         }",
          "451:             self.timeout = 0;",
          "",
          "[Removed Lines]",
          "444:             throw('-docs must be a docs dir or \"/\"'+self.docs);",
          "450:         if (self.timeout != options.timeout)",
          "",
          "[Added Lines]",
          "446:             throw('expected docs dir or \"/\" in -docs '+self.docs);",
          "452:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "476:     }",
          "477:     if (!self.rootdir)",
          "478:         self.rootdir = '.';",
          "481:     var wopts = self.wsopts = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     if (self.hist && !self.urlFallback)",
          "482:         self.urlFallback = self.url;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "491:         onFilter:WsFilter,",
          "492:         port:self.port,",
          "493:         rootdir:self.rootdir,",
          "496:         sslCert:self.sslcert,",
          "497:         sslKey:self.sslkey,",
          "498:         ssl:self.ssl,",
          "",
          "[Removed Lines]",
          "494:         urlPrefix:self.urlPrefix,",
          "495:         urlUnknown:self.urlUnknown,",
          "",
          "[Added Lines]",
          "498:         urlPrefix:(self.urlPrefix?self.urlPrefix:null),",
          "499:         urlUnknown:(self.urlUnknown?self.urlUnknown:null),",
          "500:         urlFallback:(self.urlFallback?self.urlFallback:null),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "512:             if (!self.app && !self.docs)",
          "513:                 throw('mod \"'+self.mod+'\" not one of: admin, menu');",
          "514:     }",
          "516:         self.timeout = 0;",
          "517:     if (!self.app && !self.docs && !self.server && !self.pageStr && self.mod === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "518:         throw(\"url file empty or not found: \"+self.url);",
          "",
          "[Removed Lines]",
          "515:     if (urlOrig!=='' && self.timeout === 60000)",
          "",
          "[Added Lines]",
          "520:     if (urlOrig!=='' && self.timeout === options.timeout)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "523:         wopts.noCompress = true;",
          "524:     if (self.server) {",
          "525:         self.noGui = true;",
          "527:             self.timeout = 0;",
          "528:     } else if (!self.noReload)",
          "529:         wopts.onModify = onModify;",
          "",
          "[Removed Lines]",
          "526:         if (self.timeout !== options.timeout)",
          "",
          "[Added Lines]",
          "531:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "551:     OpenWebsock();",
          "556:     if (!self.noGui && self.url && self.url.length) {",
          "557:         OpenBrowser(self.url, self.anchor, self.query);",
          "",
          "[Removed Lines]",
          "554:     LogTrace(\"Listening on port:\",self.port);",
          "",
          "[Added Lines]",
          "559:     LogTrace(\"Listening on port:\",wsopts.port);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "972:     if (bsc == 0 && interp->lastSubscriptFail && interp->lastSubscriptFail->vt != JSI_VT_UNDEF)",
          "973:         Jsi_ValueReset(interp, &interp->lastSubscriptFail);",
          "975:     Jsi_Value res = VALINIT,",
          "",
          "[Removed Lines]",
          "974:         Jsi_ValueToObject(interp, src);",
          "",
          "[Added Lines]",
          "974:     rc = Jsi_ValueToObject(interp, src);",
          "975:     if (rc != JSI_OK)",
          "976:         return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1265:             }",
          "1266:             case OP_ASSIGN: {",
          "1267:                 Jsi_Value *sval = _jsi_TOP, *dval = _jsi_TOQ;",
          "1269:                 if ((uintptr_t)ip->data & 1) {",
          "1270:                     jsiVarDeref(interp,1);",
          "1271:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "",
          "[Removed Lines]",
          "1268:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1285:                     jsiClearStack(interp,3);",
          "1286:                     Jsi_ValueCopy(interp,v3, sval);",
          "1287:                     dval = v3;",
          "1294:                 }",
          "1295:                 break;",
          "1296:             }",
          "1297:             case OP_PUSHREG: {",
          "",
          "[Removed Lines]",
          "1288:                     jsiPop(interp, 2);",
          "1289:                 }",
          "1290:                 if (fp->level<=1 && globThis && rc == JSI_OK && dval && dval->vt == JSI_VT_VARIABLE) {",
          "1291:                     dval = dval->d.lval;",
          "1293:                     Jsi_HashSet(interp->genValueTbl, dval, dval);",
          "",
          "[Added Lines]",
          "1289:                     jsiPop(interp, 2);\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1352:                     if (v->vt == JSI_VT_VARIABLE) {",
          "1353:                         Jsi_ValueCopy(interp, v, v->d.lval);",
          "1354:                     }",
          "1356:                 }",
          "1357:                 break;",
          "1358:             }",
          "",
          "[Removed Lines]",
          "1355:                     Jsi_ValueToObject(interp, v);",
          "",
          "[Added Lines]",
          "1352:                     rc = Jsi_ValueToObject(interp, v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1587:                     break;",
          "1588:                 }",
          "1589:                 if (_jsi_TOP->vt != JSI_VT_UNDEF && _jsi_TOP->vt != JSI_VT_NULL)",
          "1591:                 Jsi_Value *spret = Jsi_ValueNew1(interp);",
          "1592:                 jsi_ValueObjGetKeys(interp, _jsi_TOP, spret, ip->isof);",
          "1593:                 Jsi_ValueReplace(interp, _jsi_STACK+fp->Sp, spret);",
          "",
          "[Removed Lines]",
          "1590:                     Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "[Added Lines]",
          "1587:                     rc = Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2024:                     break;",
          "2025:                 }",
          "2026:                 jsiVarDeref(interp,1);",
          "2029:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_WITH, scope, currentScope);",
          "",
          "[Removed Lines]",
          "2027:                 Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "[Added Lines]",
          "2024:                 rc = Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     int flags;",
          "143:     jsi_wsStatData stats;",
          "144:     char *iface;",
          "146:     const char *localhostName;",
          "147:     const char *clientName;",
          "148:     const char *clientIP;",
          "",
          "[Removed Lines]",
          "145:     const char* urlPrefix, *urlRedirect, *urlUnknown;",
          "",
          "[Added Lines]",
          "145:     const char* urlPrefix, *urlRedirect, *urlUnknown, *urlFallback;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     int recvBufMax;",
          "165:     int recvBufCnt;",
          "166:     int recvBufTimeout;",
          "167:     int lastRevCnt; // For update",
          "168:     time_t createLast;",
          "169:     time_t startTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     int sessFlag;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:     JSI_OPT(BOOL,   jsi_wsCmdObj, redirMax,   .help=\"Temporarily disable redirects when see more than this in 10 minutes\"),",
          "366:     JSI_OPT(STRING, jsi_wsCmdObj, rootdir,    .help=\"Directory to serve html from (\\\".\\\")\"),",
          "367:     JSI_OPT(STRKEY, jsi_wsCmdObj, server,     .help=\"String to send out int the header SERVER (jsiWebSocket)\"),",
          "368:     JSI_OPT(OBJ,    jsi_wsCmdObj, ssiExts,    .help=\"Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} \", jsi_IIOF),",
          "369:     JSI_OPT(BOOL,   jsi_wsCmdObj, ssl,        .help=\"Use https\", jsi_IIOF),",
          "370:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslCert,    .help=\"SSL certificate file\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     JSI_OPT(INT,    jsi_wsCmdObj, sessFlag,   .help=\"Flag to send in sessionJsi cookie\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "373:     JSI_OPT(TIME_T, jsi_wsCmdObj, startTime,  .help=\"Time of websocket start\", jsi_IIRO),",
          "374:     JSI_OPT(STRKEY, jsi_wsCmdObj, includeFile,.help=\"Default file when no extension given (include.shtml)\"),",
          "375:     JSI_OPT(OBJ,    jsi_wsCmdObj, udata,      .help=\"User data\"),",
          "376:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlPrefix,  .help=\"Prefix in url to strip from path; for reverse proxy.\"),",
          "377:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlRedirect,.help=\"Redirect when no url or /, and adds cookie sessionJsi.\"),",
          "379:     JSI_OPT(STRKEY, jsi_wsCmdObj, useridPass, .help=\"The USERID:PASSWORD to use for basic authentication\"),",
          "380:     JSI_OPT(OBJ,    jsi_wsCmdObj, version,    .help=\"WebSocket version info\", jsi_IIRO),",
          "381:     JSI_OPT_END(jsi_wsCmdObj, .help=\"Websocket options\")",
          "",
          "[Removed Lines]",
          "378:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlUnknown, .help=\"Redirect for unknown page or 404.\"),",
          "",
          "[Added Lines]",
          "378:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlFallback,.help=\"Fallback to serve when file not found.\"),",
          "381:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlUnknown, .help=\"Redirect for 404 unknown page.\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "402:     Jsi_DString *hStr);",
          "404: static void wss_MakeSessionKey( jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss) {",
          "406: }",
          "",
          "[Removed Lines]",
          "405:     snprintf(pss->key, sizeof(pss->key), \"sessionJsi=%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "",
          "[Added Lines]",
          "408:     int flag = (cmdPtr->urlFallback && cmdPtr->urlFallback[0]);",
          "409:     snprintf(pss->key, sizeof(pss->key), \"sessionJsi=%d%p%d.%d.%d\",",
          "410:         pss->wid, pss, (int)cmdPtr->startTime, flag, cmdPtr->sessFlag);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1463:     uchar *p = buffer, *end = &buffer[sizeof(buffer)-1];",
          "1464:     int n;",
          "1465:     Jsi_Value* fname = NULL;",
          "1467:     cmdPtr->stats.httpLast = now;",
          "1469:     if (inPtr[0] != '~')",
          "1470:         inPtr = Jsi_NormalPath(interp, inPtr, iStr);",
          "",
          "[Removed Lines]",
          "1466:     bool isJsiWeb = 0, isSSI = 0;",
          "",
          "[Added Lines]",
          "1471:     bool isJsiWeb = 0, isSSI = 0, fallbackTry = 0;",
          "1474: falltry:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485:         else",
          "1486:             cmdPtr->redirDisable--;",
          "1487:     }",
          "1491:     {",
          "1492:         cmdPtr->stats.redirCnt++;",
          "1494:         if (cmdPtr->redirMax>0 && !cmdPtr->redirDisable && cmdPtr->redirMax>0 && cmdPtr->stats.redirLast",
          "1495:             && difftime(now, cmdPtr->stats.redirLast)<600 && ++cmdPtr->redirAllCnt>cmdPtr->redirMax)",
          "1496:             cmdPtr->redirDisable = 100;",
          "1497:         cmdPtr->stats.redirLast = now;",
          "1499:         return (rc == 100 ? 0 : 1);",
          "1500:     }",
          "",
          "[Removed Lines]",
          "1489:     if ((cmdPtr->urlRedirect && (inPtr == 0 || *inPtr == 0 || !Jsi_Strcmp(inPtr, \"/\")) && !cmdPtr->redirDisable)",
          "1490:         && (inPtr = (char*)cmdPtr->urlRedirect) && inPtr[0])",
          "1498:         rc = lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "[Added Lines]",
          "1494:     int redirCode = 301;",
          "1496:     bool doRedir = (inPtr == 0 || *inPtr == 0 || (inPtr[0] =='/' && !inPtr[1]));",
          "1497:     if (doRedir && !cmdPtr->redirDisable && cmdPtr->urlRedirect && cmdPtr->urlRedirect[0])",
          "1499:         inPtr = (char*)cmdPtr->urlRedirect;",
          "1500: doredir:",
          "1507:         rc = lws_http_redirect(wsi, redirCode, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1791:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1792:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "1793: nofile:",
          "1797:         }",
          "1798:         if (cmdPtr->onUnknown || pss->onUnknown) {",
          "1799:             Jsi_Value *uk = (pss->onUnknown?pss->onUnknown:cmdPtr->onUnknown);",
          "",
          "[Removed Lines]",
          "1794:         if (cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1795:             rc = lws_http_redirect(wsi, 301, (uchar*)cmdPtr->urlUnknown, Jsi_Strlen(cmdPtr->urlUnknown), &p, end);",
          "1796:             goto done;",
          "",
          "[Added Lines]",
          "1803:         if (cmdPtr->urlFallback && cmdPtr->urlFallback[0] && !fallbackTry) {",
          "1804:             inPtr = (char*)cmdPtr->urlFallback;",
          "1805:             fallbackTry=1;",
          "1806:             goto falltry;",
          "1807:         }",
          "1808:         if (!cmdPtr->redirDisable && cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1809:             redirCode = 404;",
          "1810:             inPtr = (char*)cmdPtr->urlUnknown;",
          "1811:             goto doredir;",
          "1812:         }",
          "1813:         if (!cmdPtr->redirDisable && cmdPtr->urlRedirect && cmdPtr->urlRedirect[0]) {",
          "1814:             inPtr = (char*)cmdPtr->urlRedirect;",
          "1815:             goto doredir;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
      "candidate_info": {
        "commit_hash": "f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
        "files": [
          "Makefile",
          "jsiconfig.h",
          "src/jsi.h",
          "src/parser.h"
        ],
        "message": "Fix build.\n\nFossilOrigin-Name: 52166f80d322021729e28fd899f229f28435d41522291a173c0520436c259008",
        "before_after_code_files": [
          "jsiconfig.h||jsiconfig.h",
          "src/jsi.h||src/jsi.h",
          "src/parser.h||src/parser.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h"
          ]
        }
      },
      "candidate_diff": {
        "jsiconfig.h||jsiconfig.h": [
          "File: jsiconfig.h -> jsiconfig.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI__BASE64=1",
          "2: #define JSI__CDATA=1",
          "3: #define JSI__DEBUG=1",
          "4: #define JSI__ENCRYPT=1",
          "5: #define JSI__EVENT=1",
          "6: #define JSI__FILESYS=1",
          "7: #define JSI__INFO=1",
          "8: #define JSI__LOAD=1",
          "9: #define JSI__MARKDOWN=1",
          "10: #define JSI__MATH=1",
          "11: #define JSI__MD5=1",
          "12: #define JSI__READLINE=1",
          "13: #define JSI__SHA1=1",
          "14: #define JSI__SHA256=1",
          "15: #define JSI__SIGNAL=1",
          "16: #define JSI__STUBS=1",
          "17: #define JSI__THREADS=1",
          "18: #define JSI__ZVFS=1",
          "19: #define JSI__MEMDEBUG=0",
          "20: #define JSI__MINIZ=0",
          "21: #define JSI__REGEX=0",
          "22: #define JSI__SANITIZE=0",
          "23: #define JSI__SOCKET=1",
          "24: #define JSI__SQLITE=1",
          "25: #define JSI__WEBSOCKET=1",
          "26: #define JSI__MYSQL=1",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #ifndef __JSI_H__",
          "3: #define __JSI_H__",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "5: #define JSI_VERSION_MAJOR   2",
          "6: #define JSI_VERSION_MINOR   8",
          "7: #define JSI_VERSION_RELEASE 55",
          "",
          "[Added Lines]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------"
        ],
        "src/parser.h||src/parser.h": [
          "File: src/parser.h -> src/parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "12:    This program is distributed in the hope that it will be useful,",
          "13:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "15:    GNU General Public License for more details.",
          "17:    You should have received a copy of the GNU General Public License",
          "21:    part or all of the Bison parser skeleton and distribute that work",
          "22:    under terms of your choice, so long as that work isn't itself a",
          "23:    parser generator using the skeleton or a modified version thereof",
          "24:    as a parser skeleton.  Alternatively, if you modify or redistribute",
          "25:    the parser skeleton itself, you may (at your option) remove this",
          "26:    special exception, which will cause the skeleton and the resulting",
          "27:    Bison output files to be licensed under the GNU General Public",
          "28:    License without this special exception.",
          "30:    This special exception was added by the Free Software Foundation in",
          "33: #ifndef YY_YY_SRC_PARSER_H_INCLUDED",
          "34: # define YY_YY_SRC_PARSER_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int yydebug;",
          "41: #endif",
          "44: #ifndef YYTOKENTYPE",
          "45: # define YYTOKENTYPE",
          "46:   enum yytokentype",
          "47:   {",
          "48:     IDENTIFIER = 258,",
          "49:     STRING = 259,",
          "50:     IF = 260,",
          "51:     ELSE = 261,",
          "52:     FOR = 262,",
          "53:     IN = 263,",
          "54:     WHILE = 264,",
          "55:     DO = 265,",
          "56:     CONTINUE = 266,",
          "57:     SWITCH = 267,",
          "58:     CASE = 268,",
          "59:     DEFAULT = 269,",
          "60:     BREAK = 270,",
          "61:     FUNC = 271,",
          "62:     RETURN = 272,",
          "63:     LOCAL = 273,",
          "64:     OF = 274,",
          "65:     NEW = 275,",
          "66:     DELETE = 276,",
          "67:     TRY = 277,",
          "68:     CATCH = 278,",
          "69:     FINALLY = 279,",
          "70:     THROW = 280,",
          "71:     WITH = 281,",
          "72:     UNDEF = 282,",
          "73:     _TRUE = 283,",
          "74:     _FALSE = 284,",
          "75:     _THIS = 285,",
          "76:     ARGUMENTS = 286,",
          "77:     FNUMBER = 287,",
          "78:     REGEXP = 288,",
          "79:     TYPESTRING = 289,",
          "80:     TYPENUMBER = 290,",
          "81:     TYPENULL = 291,",
          "82:     TYPEOBJECT = 292,",
          "83:     TYPEBOOLEAN = 293,",
          "84:     TYPEUSEROBJ = 294,",
          "85:     TYPEITEROBJ = 295,",
          "86:     TYPEREGEXP = 296,",
          "87:     TYPEANY = 297,",
          "88:     TYPEARRAY = 298,",
          "89:     ELLIPSIS = 299,",
          "90:     ARROW = 300,",
          "91:     __DEBUG = 301,",
          "92:     MIN_PRI = 302,",
          "93:     ARGCOMMA = 303,",
          "94:     ADDAS = 304,",
          "95:     MNSAS = 305,",
          "96:     MULAS = 306,",
          "97:     MODAS = 307,",
          "98:     LSHFAS = 308,",
          "99:     RSHFAS = 309,",
          "100:     URSHFAS = 310,",
          "101:     BANDAS = 311,",
          "102:     BORAS = 312,",
          "103:     BXORAS = 313,",
          "104:     DIVAS = 314,",
          "105:     OR = 315,",
          "106:     AND = 316,",
          "107:     EQU = 317,",
          "108:     NEQ = 318,",
          "109:     EEQU = 319,",
          "110:     NNEQ = 320,",
          "111:     LEQ = 321,",
          "112:     GEQ = 322,",
          "113:     INSTANCEOF = 323,",
          "114:     LSHF = 324,",
          "115:     RSHF = 325,",
          "116:     URSHF = 326,",
          "117:     NEG = 327,",
          "118:     INC = 328,",
          "119:     DEC = 329,",
          "120:     TYPEOF = 330,",
          "121:     VOID = 331,",
          "122:     MAX_PRI = 332",
          "123:   };",
          "124: #endif",
          "127: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "129: union YYSTYPE",
          "130: {",
          "133:     Jsi_OpCodes *opcodes;",
          "134:     Jsi_Value *value;",
          "135:     const char *sstr;",
          "136:     Jsi_String *vstr;",
          "137:     Jsi_Regex* regex;",
          "138:     Jsi_Number *num;",
          "139:     Jsi_ScopeStrs *scopes;",
          "140:     int inum;",
          "141:     struct jsi_CaseExprStat* caseitem;",
          "142:     struct jsi_CaseList* caselist;",
          "145: };",
          "147: typedef union YYSTYPE YYSTYPE;",
          "148: # define YYSTYPE_IS_TRIVIAL 1",
          "149: # define YYSTYPE_IS_DECLARED 1",
          "150: #endif",
          "153: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED",
          "154: typedef struct YYLTYPE YYLTYPE;",
          "155: struct YYLTYPE",
          "156: {",
          "157:   int first_line;",
          "158:   int first_column;",
          "159:   int last_line;",
          "160:   int last_column;",
          "161: };",
          "162: # define YYLTYPE_IS_DECLARED 1",
          "163: # define YYLTYPE_IS_TRIVIAL 1",
          "164: #endif",
          "168: int yyparse (struct jsi_Pstate *pstate);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7142b2c27da2f0a16a526c579b6d379df369de8a",
      "candidate_info": {
        "commit_hash": "7142b2c27da2f0a16a526c579b6d379df369de8a",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/7142b2c27da2f0a16a526c579b6d379df369de8a",
        "files": [
          "lib/www/docs/app.js",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCode.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiLexer.c",
          "src/jsiRegexp.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.1\": Add noES6 option for checking .js web scripts, docs cleanup\n\nFossilOrigin-Name: d171926609d98202d4070878b013b6761a16f4d989ca9da3ed4d953c40825b3f",
        "before_after_code_files": [
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiLexer.c||src/jsiLexer.c",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     JSI_NEW_CODESLN(0,OP_PUSHSTR, str);",
          "220: }",
          "222: static Jsi_OpCodes *code_push_vstring(jsi_Pstate *p, jsi_Pline *line, Jsi_String *s) {",
          "223:     JSI_NEW_CODESLN(0,OP_PUSHVSTR, s);",
          "224: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: static void code_es6(jsi_Pstate *p) {",
          "223:     Jsi_Interp *interp = p->interp;",
          "224:     if (interp->noES6) {",
          "225:         Jsi_LogError(\"es6 feature\");",
          "226:         p->err_count++;",
          "227:     }",
          "228: }",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "424: {",
          "425:     Jsi_Interp *interp = p->interp;",
          "426:     if (interp->noCheck || name == NULL || (!interp->typeCheck.funcdecl && interp->inParse))",
          "427:         return;",
          "428:     if (name && isdigit(name[0]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     if (name && interp->noES6 && interp->noEval && (!Jsi_Strcmp(name, \"fetch\") || !Jsi_Strcmp(name, \"import\")))",
          "427:         Jsi_LogWarn(\"possible ES6 function call: %s\", name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:     Jsi_Func *f = jsi_FuncNew(interp);",
          "494:     jsi_Lexer *l = pstate->lexer;",
          "495:     f->isArrow = flags&1;",
          "496:     f->isSet = flags&2;",
          "497:     f->isGet = flags&4;",
          "498:     f->type = FC_NORMAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:     if (f->isArrow && interp->noES6) {",
          "499:         Jsi_LogError(\"Arrow function used in noES6 mode: %s\", name);",
          "500:         pstate->err_count++;",
          "501:     }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:     bool noConfig;",
          "1131:     bool noLoad;",
          "1132:     bool noEval;",
          "1133:     bool noAutoLoad;",
          "1134:     bool noStderr;",
          "1135:     bool noSubInterps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1133:     bool noES6;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noCheck,     .help=\"Disable type checking\", .flags=JSI_OPT_LOCKSAFE ),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noError,     .help=\"Type checks failures are warning\", .flags=JSI_OPT_LOCKSAFE ),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noES6,       .help=\"Warn/error when ES6 features are used, eg. arrow funcs or let/const\" ),",
          "",
          "---------------"
        ],
        "src/jsiLexer.c||src/jsiLexer.c": [
          "File: src/jsiLexer.c -> src/jsiLexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:             if (!regtxt)",
          "485:                 return 0;",
          "486:             Jsi_Regex *re = Jsi_RegExpNew(interp, regtxt, JSI_REG_STATIC);",
          "488:                  Jsi_Free(regtxt);",
          "489:                  return -1;",
          "490:             }",
          "",
          "[Removed Lines]",
          "487:             if (!(yylvalp->regex = re)) {",
          "",
          "[Added Lines]",
          "487:             if (!(yylvalp->regex = re) && !(interp->noEval && interp->noES6)) {",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: {",
          "38:     bool isNew;",
          "39:     Jsi_HashEntry *hPtr;",
          "41:     char c, *cm, *ce;",
          "42:     const char *cp;",
          "43:     Jsi_Regex *re;",
          "",
          "[Removed Lines]",
          "40:     int flag = REG_EXTENDED;",
          "",
          "[Added Lines]",
          "40:     int flag = REG_EXTENDED, rec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     }",
          "82:     regex_t reg;",
          "86:         return NULL;",
          "87:     }",
          "",
          "[Removed Lines]",
          "83:     if (!jsi_regexValid(cp) || regcomp(&reg, cp, flag)) {",
          "85:         Jsi_LogError(\"Invalid regex string '%s'\", cp);",
          "",
          "[Added Lines]",
          "83:     if (!jsi_regexValid(cp) || (rec=regcomp(&reg, cp, flag))) {",
          "84:         char errbuf[200];",
          "85:         errbuf[0] = 0;",
          "87:         if (rec) {",
          "88:             regerror(rec, &reg, errbuf, sizeof(errbuf)-20);",
          "89:             if (rec==REG_BADRPT && Jsi_Strstr(cp, \"(?:\"))",
          "90:                 strcat(errbuf, \" eg. (?:\");",
          "91:         }",
          "92:         bool iswarn = (interp->inParse && interp->noEval && interp->noES6);",
          "93:         Jsi_LogMsg(interp, NULL,(iswarn?JSI_LOG_WARN:JSI_LOG_ERROR), \"Invalid regex string '%s' : %s\", cp, errbuf);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: localvar:",
          "152:     LOCAL { $$ = LOCAL; }",
          "155: ;",
          "157: objexport:",
          "",
          "[Removed Lines]",
          "153:     | LOCALLET { $$ = LOCALLET; }",
          "154:     | LOCALCONST { $$ = LOCALCONST; }",
          "",
          "[Added Lines]",
          "153:     | LOCALLET { $$ = LOCALLET;  code_es6(pstate);}",
          "154:     | LOCALCONST { $$ = LOCALCONST; code_es6(pstate); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390: inof:",
          "391:     IN      { $$ = 0; }",
          "393: ;",
          "395: for_statement:",
          "",
          "[Removed Lines]",
          "392:     | OF    { $$ = 1; }",
          "",
          "[Added Lines]",
          "392:     | OF    { $$ = 1;  code_es6(pstate); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:     IDENTIFIER '(' args_opt ')' func_statement_block {",
          "847:         Jsi_OpCodes *lval = code_push_func(pstate, &@3, jsi_FuncMake(pstate, $3, $5, &@1, $1, 0));",
          "848:         lval->lvalue_flag = 1;",
          "850:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "851:         jsi_PstatePop(pstate);",
          "852:     }",
          "",
          "[Removed Lines]",
          "849:         lval->lvalue_name = $1;",
          "",
          "[Added Lines]",
          "849:         lval->lvalue_name = $1;",
          "850:         code_es6(pstate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "855: itemident:",
          "856:     itemfunc { $$ = $1; }",
          "857:     | IDENTIFIER  {",
          "858:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "859:         lval->lvalue_flag = 1;",
          "860:         lval->lvalue_name = $1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859:         code_es6(pstate);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "569037fbaee3fd29513bb9032a2594b8d007ddb5",
      "candidate_info": {
        "commit_hash": "569037fbaee3fd29513bb9032a2594b8d007ddb5",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/569037fbaee3fd29513bb9032a2594b8d007ddb5",
        "files": [
          "Makefile",
          "README.md",
          "c-demos/stubs/Makefile",
          "lib/Websrv.jsi",
          "lib/web/md/Builds.md",
          "lib/web/md/Misc.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Using.md",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFunc.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.1\": fixes and doc updates\n\nFossilOrigin-Name: 0871690a1be24808a31371f25ceb4afc9714fddd13d40f46dd9b20006b54cd4e",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     };",
          "18:     var options = { // Run a standalone web server, opening browser to serve out url.",
          "19:         anchor      :'',        // Anchor after url.",
          "20:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "21:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "23:         ignoreExit  :false,     // Ignore exit request.",
          "24:         initArg     :[],        // List of app modules to run.",
          "25:         isFile      :false,     // Url is a file, so throw if not exists.",
          "26:         local       :true,      // Accept only local connections.",
          "28:         mode        :'',        // Mode string: menu, admin",
          "29:         noCheck     :false,     // Disable function type-checking for .jsi files in browser.",
          "30:         noGui       :false,     // Disable starting local browser.",
          "",
          "[Removed Lines]",
          "22:         browser     :'',        // The browser to exec, eg. \"chrome-browser\"",
          "27:         maxPort     :1000,      // Max to add to above port.",
          "",
          "[Added Lines]",
          "20:         browser     :'',        // The browser to exec, eg. \"chrome-browser\"",
          "23:         docs        :'',        // Display markdown docs from this directory.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         onRecv      :null,      // Callback command to handle websocket msgs.",
          "34:         pageStr     :'',        // String to serve out as url.",
          "35:         port        :0,         // Start search for port.",
          "36:         query       :'',        // Query to append to url.",
          "37:         rootdir     :null,      // Base directory.",
          "38:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         portMax     :1000,      // Max times to increment-retry port if busy.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:         }",
          "219:         var i;",
          "221:             var err = null;",
          "222:             try {",
          "223:                 self.ws = new WebSocket(self.wsopts);",
          "",
          "[Removed Lines]",
          "220:         for (i=0; i<self.maxPort; i++) {",
          "",
          "[Added Lines]",
          "221:         for (i=0; i<self.portMax; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:             self.wsopts.port++;",
          "233:             LogTrace(\"ee:\", err);",
          "234:         }",
          "236:             console.log(\"Failed to get port\");",
          "237:             return false;",
          "238:         }",
          "",
          "[Removed Lines]",
          "235:         if (i>=self.maxPort) {",
          "",
          "[Added Lines]",
          "236:         if (i>=self.portMax) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:             }",
          "411:             self.url = urlarg;",
          "412:         }",
          "415:             self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "416:             if (!self.rootdir)",
          "417:                 self.rootdir = self.mnt;",
          "",
          "[Removed Lines]",
          "414:         if (self.zip) {",
          "",
          "[Added Lines]",
          "414:         if (self.docs) {",
          "415:             if (self.rootdir || self.zip)",
          "416:                 throw('can not use both rootdir/zip with docs');",
          "417:             self.rootdir = '/zvfs/lib/web';",
          "418:             self.url = 'Docs/Docs.html';",
          "419:             if (self.timeout != options.timeout)",
          "420:                 self.timeout = 0;",
          "423:         } else if (self.zip) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "419:                 self.rootdir = self.mnt + '/' + self.rootdir;",
          "420:             if (!self.url)",
          "421:                 self.url = getUrlInDir(self.mnt);",
          "424:             if (!self.url.length)",
          "425:                 self.rootdir = Info.scriptDir();",
          "426:             else",
          "",
          "[Removed Lines]",
          "422:         }",
          "423:         else if (!self.rootdir) {",
          "",
          "[Added Lines]",
          "432:         } else if (!self.rootdir) {",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1912:                 break;",
          "1913:             }",
          "1914:             case OP_SCATCH: {",
          "1915:                 if (trylist == NULL || trylist->type != jsi_TL_TRY)",
          "1916:                     Jsi_LogBug(\"Unexpected SCATCH opcode??\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:                 interp->curIpLastError = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1933:                         Jsi_Value *ple = ps->last_exception;",
          "1934:                         Jsi_ValueCopy(interp, excpt, ple);",
          "1935:                         Jsi_ValueReset(interp, &ps->last_exception);",
          "1937:                         Jsi_ValueMakeStringDup(interp, &excpt, interp->errMsgBuf);",
          "1938:                         interp->errMsgBuf[0] = 0;",
          "1939:                     }",
          "",
          "[Removed Lines]",
          "1936:                     } else if (interp->errMsgBuf[0]) {",
          "",
          "[Added Lines]",
          "1937:                     } else {",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:         Jsi_DecrRefCount(interp, rpPath);",
          "1158:     if (namelist) {",
          "1159:         while (--n >= 0)",
          "1162:     }",
          "1163:     return rc;",
          "1164: }",
          "",
          "[Removed Lines]",
          "1160:             Jsi_Free(namelist[n]);",
          "1161:         Jsi_Free(namelist);",
          "",
          "[Added Lines]",
          "1160:             free(namelist[n]);",
          "1161:         free(namelist);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     Jsi_RC rc = JSI_OK;",
          "203:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "204:     idxBuf[0] = 0;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&(JSI_TT_UNDEFINED|JSI_TT_ANY))) {",
          "206:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "207:         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     if (func && func->cmdSpec && func->cmdSpec->maxArgs==-1 && index>=func->cmdSpec->minArgs)",
          "206:         return JSI_OK;",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     bool isBinary, isFinal;",
          "118: } jsi_wsStatData;",
          "121:     uint sig;",
          "122:     Jsi_Interp *interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: static const char *wsIndexTypeStrs[] = { \"auto\", \"html\", \"json\", \"jsonp\", \"disabled\", NULL };",
          "122: typedef enum { ws_IndexAuto, ws_IndexHtml, ws_IndexJson, ws_IndexJsonp, ws_IndexDisabled } ws_IndexTypeE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     bool client, noUpdate, noWebsock, noWarn, ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "129:     Jsi_Value* version;",
          "130:     int idx;",
          "131:     int port;",
          "132:     uint modifySecs;",
          "133:     int maxUpload;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     ws_IndexTypeE dirIndex;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientHost, .help=\"Override host name for client\"),",
          "315:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientOrigin,.help=\"Override client origin (origin)\"),",
          "316:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max liblws log levels\"),",
          "317:     JSI_OPT(BOOL,   jsi_wsCmdObj, echo,       .help=\"LogInfo outputs all websock Send/Recv messages\"),",
          "318:     JSI_OPT(STRKEY, jsi_wsCmdObj, formParams, .help=\"Comma seperated list of upload form param names ('text,send,file,upload')\", jsi_IIRO),",
          "319:     JSI_OPT(BOOL,   jsi_wsCmdObj, extHandlers,.help=\"Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     JSI_OPT(CUSTOM, jsi_wsCmdObj, dirIndex,   .help=\"Enable listing directories\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=(void*)wsIndexTypeStrs),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUnknown,  .help=\"Function to call to server out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "348:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUpload,   .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "349:     JSI_OPT(FUNC,   jsi_wsCmdObj, onRecv,     .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "351:     JSI_OPT(INT,    jsi_wsCmdObj, port,       .help=\"Port for server to listen on (8080)\", jsi_IIOF),",
          "352:     JSI_OPT(STRING, jsi_wsCmdObj, post,       .help=\"Post string to serve\", jsi_IIOF),",
          "353:     JSI_OPT(STRKEY, jsi_wsCmdObj, protocol,   .help=\"Name of protocol (ws/wss)\"),",
          "",
          "[Removed Lines]",
          "350:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Path alias lookups\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "357:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Path alias object: /jsi builtin\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "563:     return (rc>=0?1:0);",
          "564: }",
          "566: static const char*",
          "567: jsi_wsHeader(jsi_wsPss *pss, const char *name, int *lenPtr)",
          "568: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574: static int jsi_wsServeDir(jsi_wsPss *pss, struct lws *wsi, Jsi_Value *fname, const char* fn, const char *mime)",
          "575: {",
          "576:     jsi_wsCmdObj *cmdPtr = pss->cmdPtr;",
          "577:     Jsi_Interp *interp = cmdPtr->interp;",
          "578:     bool jsauto = cmdPtr->dirIndex==ws_IndexAuto;",
          "579:     const char *callback = NULL;",
          "580:     int n, i, cnt = 0;",
          "581:     Jsi_RC rc = JSI_OK;",
          "582:     struct dirent **namelist = NULL;",
          "583:     if (cmdPtr->dirIndex == ws_IndexDisabled || (n=Jsi_Scandir(interp, fname, &namelist, 0, 0)) < 0) {",
          "584:         if (cmdPtr->noWarn==0)",
          "585:             fprintf(stderr, \"can not serve directory: %s\\n\", fn);",
          "586:         return jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve directory!</b>\", 404, NULL, NULL);",
          "587:     }",
          "588:     bool jsonp = cmdPtr->dirIndex==ws_IndexJsonp, json=(jsonp||cmdPtr->dirIndex==ws_IndexJson);",
          "589:     if (jsonp || jsauto) {",
          "590:         Jsi_Value *val;",
          "591:         if (pss->queryObj && ((val = Jsi_ValueObjLookup(interp, pss->queryObj, \"callback\", 0))))",
          "592:             callback = Jsi_ValueToString(interp, val, NULL);",
          "593:         if (!callback)",
          "594:             jsonp = 0;",
          "595:         else if (!Jsi_Strcmp(callback,\"null\")) {",
          "596:             if (jsauto)",
          "597:                 json = 1;",
          "598:             else",
          "599:                 json = jsonp = 0;",
          "600:         } else if (jsauto)",
          "601:             json = jsonp = 1;",
          "602:     }",
          "603:     const char *fnb = Jsi_ValueToString(interp, fname, NULL);",
          "604:     Jsi_DString dStr = {}, tStr = {};",
          "605:     int fnlen = Jsi_Strlen(fn);",
          "606:     bool isroot = (fn[0]=='/'&&!fn[1]);",
          "607:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\");",
          "608:     if (jsonp)",
          "609:         Jsi_DSAppend(&dStr, \"/* callback */\\n\", callback, \"([\", NULL);",
          "610:     else if (json)",
          "611:         Jsi_DSAppend(&dStr, \"[\", NULL);",
          "612:     else {",
          "613:         Jsi_DSPrintf(&dStr, \"<html>\\n<head><title>Index of %s%s</title></head>\\n<body bgcolor=\\\"white\\\">\"",
          "614:             \"<h1>Index of %s%s</h1><hr><pre>%s\", fn, fns, fn, fns,",
          "615:                 (isroot?\"\":\"<a href=\\\"../\\\">../</a>\\n\"));",
          "616:     }",
          "618:     for (i=0; i<n && rc == JSI_OK; i++)",
          "619:     {",
          "620:         int ftyp;",
          "621:         const char *z = namelist[i]->d_name;",
          "622:         if (*z == '.') {",
          "623:             if (!(cmdPtr->flags&JSI_FILE_TYPE_HIDDEN)) // TODO: own flag",
          "624:                 continue;",
          "625:             else if ((z[1] == 0 || (z[1] == '.' && z[2] == 0)))",
          "626:                 continue;",
          "627:         }",
          "628: #ifdef __WIN32",
          "630:         ftyp = (namelist[i]->d_ino? DT_DIR : DT_REG);",
          "631: #else",
          "632:         ftyp = namelist[i]->d_type;",
          "633: #endif",
          "634:         uint sz = 0;",
          "635:         char pbuf[PATH_MAX];",
          "636:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fne!='/' && fnb[0]?\"/\":\"\"),  z);",
          "637:         Jsi_StatBuf stat = {};",
          "638:         Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "639:         Jsi_IncrRefCount(interp, vpath);",
          "640:         int sc = Jsi_Stat(interp, vpath, &stat);",
          "641:         Jsi_DecrRefCount(interp, vpath);",
          "642:         if (!sc) sz = stat.st_size;",
          "643:         Jsi_DSSetLength(&tStr, 0);",
          "644:         Jsi_DatetimeFormat(interp, stat.st_mtime, \"%a, %d %b %Y %T GMT\", 1, &tStr);",
          "645:         const char *t = (ftyp == DT_DIR ? \"/\" : \"\");",
          "646:         int lz = Jsi_Strlen(z), ln = 50-lz-(t[0]?1:0), ln2 = 30 ;",
          "648:         if (json)",
          "649:             Jsi_DSPrintf(&dStr, \"%s\\n{ \\\"name\\\":\\\"%s\\\", \\\"type\\\":\\\"%s\\\", \\\"mtime\\\":\\\"%s\\\", \\\"size\\\":%d }\",",
          "650:                 (cnt?\",\":\"\"), z, (t[0]?\"directory\":\"file\"), Jsi_DSValue(&tStr), (uint)sz);",
          "651:         else",
          "652:             Jsi_DSPrintf(&dStr, \"<a href=\\\"%s/%s%s\\\">%s%s</a>%*s %*u\\n\",",
          "653:                 (isroot?\"\":fn), z, t, z, t, ln, Jsi_DSValue(&tStr), ln2, (uint)sz);",
          "654:         cnt++;",
          "655:     }",
          "656:     if (jsonp)",
          "657:         Jsi_DSAppend(&dStr, \"\\n]);\\n\", NULL);",
          "658:     else if (json)",
          "659:         Jsi_DSAppend(&dStr, \"\\n]\\n\", NULL);",
          "660:     else",
          "661:         Jsi_DSAppend(&dStr, \"</pre><hr></body></html>\", NULL);",
          "662:     if (json)",
          "663:         mime = \"application/json\";",
          "664:     int nrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&dStr), 200, NULL, mime);",
          "665:     Jsi_DSFree(&dStr);",
          "666:     Jsi_DSFree(&tStr);",
          "667:     if (namelist) {",
          "668:         while (--n >= 0)",
          "669:             free(namelist[n]);",
          "670:         free(namelist);",
          "671:     }",
          "672:     return nrc;",
          "673: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1154: }",
          "1156: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char **inPtr, Jsi_DString *dStr) {",
          "1157:     const char *ce, *cp = NULL;",
          "1158:     char *lcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265: static const char* jsi_wsGetJsiPath(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr) {",
          "1266:     if (!cmdPtr->jsishPathCache) {",
          "1267:         Jsi_PkgRequire(interp, \"Jsish\", 0);",
          "1268:         Jsi_PkgVersion(interp, \"Jsish\", &cmdPtr->jsishPathCache);",
          "1269:     }",
          "1270:     return cmdPtr->jsishPathCache;",
          "1271: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1175:     }",
          "1176:     if (!Jsi_Strncmp(*inPtr, \"/jsi/\", 5)) {",
          "1183:         if (cp) {",
          "1184:             Jsi_DSSetLength(dStr, 0);",
          "1185:             Jsi_DSAppend(dStr, cp, NULL);",
          "",
          "[Removed Lines]",
          "1178:         if (!(cp = cmdPtr->jsishPathCache)) {",
          "1179:             Jsi_PkgRequire(interp, \"Jsish\", 0);",
          "1180:             if (Jsi_PkgVersion(interp, \"Jsish\", &cp)>=0)",
          "1181:                 cmdPtr->jsishPathCache = cp;",
          "1182:         }",
          "",
          "[Added Lines]",
          "1295:         cp = jsi_wsGetJsiPath(interp, cmdPtr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1204:     if (!nstr)",
          "1205:         return Jsi_LogErrorExt(\"arg 1: expected string\");",
          "1206:     Jsi_Value *v, *a = cmdPtr->pathAliases;",
          "1223:     }",
          "1225:     return JSI_OK;",
          "1226: }",
          "",
          "[Removed Lines]",
          "1207:     if (!a|| !Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) return JSI_OK;",
          "1208:     Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "1209:     Jsi_IterGetKeys(interp, cmdPtr->pathAliases, io, 0);",
          "1210:     uint i;",
          "1211:     for (i=0; i<io->count; i++) {",
          "1212:         kstr = io->keys[i];",
          "1213:         v = Jsi_ValueObjLookup(interp, a, kstr, 1);",
          "1214:         if (!v) continue;",
          "1215:         vstr = Jsi_ValueToString(interp, v, &vlen);",
          "1216:         if (!vstr) continue;",
          "1217:         if (nlen<=vlen) continue;",
          "1218:         if (Jsi_Strncmp(vstr, nstr, vlen)) continue;",
          "1219:         Jsi_DString dStr = {};",
          "1220:         Jsi_DSAppend(&dStr, \"/\", kstr, nstr+vlen, NULL);",
          "1221:         Jsi_ValueFromDS(interp, &dStr, ret);",
          "1222:         break;",
          "1224:     Jsi_IterObjFree(io);",
          "",
          "[Added Lines]",
          "1320:     uint i=0, cnt=0;",
          "1321:     if (a && Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) {",
          "1322:         Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "1323:         Jsi_IterGetKeys(interp, cmdPtr->pathAliases, io, 0);",
          "1324:         uint i, cnt = io->count;",
          "1325:         for (i=0; i<cnt; i++) {",
          "1326:             kstr = io->keys[i];",
          "1327:             v = Jsi_ValueObjLookup(interp, a, kstr, 1);",
          "1328:             if (!v) continue;",
          "1329:             vstr = Jsi_ValueToString(interp, v, &vlen);",
          "1330:             if (!vstr) continue;",
          "1331:             if (nlen<=vlen) continue;",
          "1332:             if (Jsi_Strncmp(vstr, nstr, vlen)) continue;",
          "1333:             Jsi_DString dStr = {};",
          "1334:             Jsi_DSAppend(&dStr, \"/\", kstr, nstr+vlen, NULL);",
          "1335:             Jsi_ValueFromDS(interp, &dStr, ret);",
          "1336:             break;",
          "1337:         }",
          "1338:         Jsi_IterObjFree(io);",
          "1340:     const char *cp;",
          "1341:     if (i>=cnt && !Jsi_Strcmp(\"zvfs\", nstr) && ((cp = jsi_wsGetJsiPath(interp, cmdPtr))))",
          "1342:         Jsi_ValueMakeStringDup(interp, ret, cp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1652:         Jsi_DecrRefCount(interp, fname);",
          "1653:         goto done;",
          "1654:     }",
          "1657:     if (S_ISDIR(jsb.st_mode)) {",
          "1661:         Jsi_DecrRefCount(interp, fname);",
          "1662:         goto done;",
          "1663:     }",
          "1666:     n = 0;",
          "",
          "[Removed Lines]",
          "1655:     if (!ext || isSSI)",
          "1656:         goto serve;",
          "1658:         if (cmdPtr->noWarn==0)",
          "1659:             fprintf(stderr, \"can not serve directory: %s\\n\", buf);",
          "1660:         rc = jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve directory!</b>\", 404, NULL, NULL);",
          "1665: serve:",
          "",
          "[Added Lines]",
          "1775: serve:",
          "1777:         rc = jsi_wsServeDir(pss, wsi, fname, inPtr, mime);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2023:             fprintf(stderr, \"FILTER CONNECTION: %s\\n\", inPtr);",
          "2024:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 1);",
          "2025:         Jsi_DSSet(&pss->url, inPtr);",
          "2026:         jsi_wsgetUriArgValue(interp, wsi, &pss->query, &pss->queryObj);",
          "2028:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2142:         if (pss->query)",
          "2143:             Jsi_DecrRefCount(interp, pss->query);",
          "2144:         pss->query = NULL;",
          "2145:         if (pss->queryObj)",
          "2146:             Jsi_DecrRefCount(interp, pss->queryObj);",
          "2147:         pss->queryObj = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3086:     { \"query\",      WebSocketQueryCmd,    1,  2, \"id:number, name:string=void\",.help=\"Get one or all query values for connect id\", .retType=(uint)JSI_TT_STRING|JSI_TT_OBJECT|JSI_TT_VOID },",
          "3087:     { \"send\",       WebSocketSendCmd,     2,  2, \"id:number, data:any\", .help=\"Send a websocket message to id\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_wssend },",
          "3088:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return liblws server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "3090:     { \"update\",     WebSocketUpdateCmd,   0,  0, \"\", .help=\"Service events for just this websocket\", .retType=(uint)JSI_TT_VOID },",
          "3091:     { \"version\",    WebSocketVersionCmd,  0,  0, \"\", .help=\"Runtime library version string\", .retType=(uint)JSI_TT_STRING },",
          "3092:     { NULL, 0,0,0,0, .help=\"Commands for managing WebSocket server/client connections\"  }",
          "",
          "[Removed Lines]",
          "3089:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Return alias reverse lookup\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "",
          "[Added Lines]",
          "3211:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Lookup name-key with the given path in pathAlias object\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3274:         if (NULL == lws_client_connect_via_info(&lci))",
          "3275:         {",
          "3276:             Jsi_LogErrorExt(\"websock connect failed\");",
          "3279:         }",
          "3280:     } else if (cmdPtr->port == 0) {",
          "",
          "[Removed Lines]",
          "3277:             jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3278:             return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3399:             goto fail;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}