{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cbae3f8c7dee3406c310de19616b88de7c21b824",
      "candidate_info": {
        "commit_hash": "cbae3f8c7dee3406c310de19616b88de7c21b824",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbae3f8c7dee3406c310de19616b88de7c21b824",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/vdbe.c"
        ],
        "message": "In the typeof() optimization in OP_Column, expand the size of the bogus buffer provided for data so that it is big enough to cover the increased number of bytes displayed during register tracing from check-in [54553bf16fabd72d]. This is the correct fix for ticket [bbd55a97e66ff50d], though the earlier one does not hurt and is useful to retain.\n\nFossilOrigin-Name: e1154c39ba0f8caec70d330e6d5bec745c93ec9a7eafedb3e3730fadc8b8277c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69f6a7e42f42116d29514239575ee1dc381b5b673da012cb5f3e8cf17922d493",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: const unsigned char sqlite3CtypeMap[256] = {",
          "",
          "[Removed Lines]",
          "90: #ifdef SQLITE_ASCII",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: };",
          "",
          "[Removed Lines]",
          "128: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2838:     }else{",
          "2839:       rc = sqlite3VdbeMemFromBtree(pC->uc.pCursor, aOffset[p2], len, pDest);",
          "2840:       if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "2837:       sqlite3VdbeSerialGet(aZero, t, pDest);",
          "",
          "[Added Lines]",
          "2838:       sqlite3VdbeSerialGet((u8*)sqlite3CtypeMap, t, pDest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "219b8e7e7587df8669d96ce867cdd61ca1c05730",
      "candidate_info": {
        "commit_hash": "219b8e7e7587df8669d96ce867cdd61ca1c05730",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/219b8e7e7587df8669d96ce867cdd61ca1c05730",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3matchinfo2.test"
        ],
        "message": "Fix a null pointer deference that can occur on a strange matchinfo() query.\n\nFossilOrigin-Name: a4dd148928ea65bd4e1654dfacc3d8057d1f85b8c9939416991d50722e5a720e",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3matchinfo2.test||test/fts3matchinfo2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:     iStart = pExpr->iPhrase * ((p->nCol + 31) / 32);",
          "877:   }",
          "880:     int nHit = fts3ColumnlistCount(&pIter);",
          "881:     if( (pPhrase->iColumn>=pTab->nColumn || pPhrase->iColumn==iCol) ){",
          "882:       if( p->flag==FTS3_MATCHINFO_LHITS ){",
          "",
          "[Removed Lines]",
          "879:   while( 1 ){",
          "",
          "[Added Lines]",
          "879:   if( pIter ) while( 1 ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eca0ba2cf4c0fdf757bae19c6397a48245adb99e8017ddc28f01804072a30b2c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3matchinfo2.test||test/fts3matchinfo2.test": [
          "File: test/fts3matchinfo2.test -> test/fts3matchinfo2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020-05-14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for the FTS3 module. The focus",
          "12: # of this file is tables created with the \"matchinfo=fts3\" option.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If SQLITE_ENABLE_FTS3 is not defined, omit this file.",
          "19: ifcapable !fts3 { finish_test ; return }",
          "21: set sqlite_fts3_enable_parentheses 1",
          "23: # Crash case found by cyg0810 at gmail.com 2020-05-14.  Reported to",
          "24: # chromium (which is not vulnerable) who kindly referred it to us.",
          "25: #",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE TABLE t_content(col0 INTEGER);",
          "28:   CREATE VIRTUAL TABLE t0 USING fts3(col0 INTEGER PRIMARY KEY,col1 VARCHAR(8),col2 BINARY,col3 BINARY);",
          "29:   INSERT INTO t0 VALUES (1, '1234','aaaa','bbbb');",
          "30:   SELECT hex(matchinfo(t0,'yxy'))  FROM t0 WHERE t0 MATCH  x'2b0a312b0a312a312a2a0b5d0a0b0b0a312a0a0b0b0a312a0b310a392a0b0a27312a2a0b5d0a312a0b310a31315d0b310a312a316d2a0b313b15bceaa50a312a0b0a27312a2a0b5d0a312a0b310a312b0b2a310a312a0b2a0b2a0b2e5d0a0bff313336e34a2a312a0b0a3c310b0a0b4b4b0b4b2a4bec40322b2a0b310a0a312a0a0a0a0a0a0a0a0a0b310a312a2a2a0b5d0a0b0b0a312a0b310a312a0b0a4e4541530b310a5df5ced70a0a0a0a0a4f520a0a0a0a0a0a0a312a0b0a4e4541520b310a5d616161610a0a0a0a4f520a0a0a0a0a0a312b0a312a312a0a0a0a0a0a0a004a0b0a310b220a0b0a310a4a22310a0b0a7e6fe0e0e030e0e0e0e0e01176e02000e0e0e0e0e01131320226310a0b0a310a4a22310a0b0a310a766f8b8b4ee0e0300ae0090909090909090909090909090909090909090909090909090909090909090947aaaa540b09090909090909090909090909090909090909090909090909090909090909fae0e0f2f22164e0e0f273e07fefefef7d6dfafafafa6d6d6d6d';",
          "31: } {/000000.*0000000/}",
          "34: set sqlite_fts3_enable_parentheses 0",
          "35: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff01ee34c9298f6461e1b282eea2178c08b7d16a",
      "candidate_info": {
        "commit_hash": "ff01ee34c9298f6461e1b282eea2178c08b7d16a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff01ee34c9298f6461e1b282eea2178c08b7d16a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Fix the SQLITE_DESERIALIZE_FREEONCLOSE flag so that it works as it is documented to work. See [forum:/forumpost/ba1dff667a|forum post ba1dff667a]\n\nFossilOrigin-Name: d6fac8a1d3efeb2c4f03dae437b5b314765c93770a70603803a8039291dbcabb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 883da4dadc88809192e4ed2f753f8883471fb43aa330bc58b017c66e1acedc6c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: static int memdbClose(sqlite3_file *pFile){",
          "132:   MemFile *p = (MemFile *)pFile;",
          "134:   return SQLITE_OK;",
          "135: }",
          "",
          "[Removed Lines]",
          "133:   if( p->mFlags & SQLITE_DESERIALIZE_FREEONCLOSE ) sqlite3_free(p->aData);",
          "",
          "[Added Lines]",
          "134:   if( p->mFlags & SQLITE_DESERIALIZE_FREEONCLOSE ){",
          "135:     sqlite3_free(p->aData);",
          "136:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:     rc = SQLITE_ERROR;",
          "590:   }else{",
          "591:     p->aData = pData;",
          "592:     p->sz = szDb;",
          "593:     p->szAlloc = szBuf;",
          "594:     p->szMax = szBuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     pData = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602: end_deserialize:",
          "603:   sqlite3_finalize(pStmt);",
          "604:   sqlite3_mutex_leave(db->mutex);",
          "605:   return rc;",
          "606: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:   if( pData && (mFlags & SQLITE_DESERIALIZE_FREEONCLOSE)!=0 ){",
          "609:     sqlite3_free(pData);",
          "610:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7207be402d22473e34a954fdb79a5e60e04984cb",
      "candidate_info": {
        "commit_hash": "7207be402d22473e34a954fdb79a5e60e04984cb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7207be402d22473e34a954fdb79a5e60e04984cb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Enhanced documentation for sqlite3_vtab_nochange() to make it clear that it is an optimization and that virtual table implementations should be prepared for it to always return false.\n\nFossilOrigin-Name: 3e2643619d122616663688533977d6c60d45a269b4e2bdc330fd3ee5d39f2e03",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e17c2f4b7dc9b563d0b4da949bb134dc7c4fc9c86ce03891432a884ca6409d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "02ff747bc0a6039cddf6108719426d247026fa18",
      "candidate_info": {
        "commit_hash": "02ff747bc0a6039cddf6108719426d247026fa18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/02ff747bc0a6039cddf6108719426d247026fa18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/whereG.test"
        ],
        "message": "The OP_ResultRow opcode releases the SCopy dependences on all its registers, as the values in those registers will not be reused.\n\nFossilOrigin-Name: 1dc83c5d54ca2890112e735e336c209adb8d067d2f647e9f8ae5d58f84a52461",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f481636f1a0333c6e98906e5d4433bf1d046380bc29c760e8e7e2c2b3530b956",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1477:             || (pMem[i].flags & (MEM_Str|MEM_Blob))==0 );",
          "1478:     sqlite3VdbeMemNulTerminate(&pMem[i]);",
          "1479:     REGISTER_TRACE(pOp->p1+i, &pMem[i]);",
          "1480:   }",
          "1481:   if( db->mallocFailed ) goto no_mem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1480: #ifdef SQLITE_DEBUG",
          "1486:     pMem[i].pScopyFrom = 0;",
          "1487: #endif",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "312: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: # 2019-12-31: assertion fault discovered by Yongheng's fuzzer.",
          "310: # Harmless memIsValid() due to the code generators failure to",
          "311: # release the registers used by OP_ResultRow.",
          "312: #",
          "313: do_execsql_test 9.10 {",
          "314:   DROP TABLE IF EXISTS t1;",
          "315:   CREATE TABLE t1(a, b FLOAT);",
          "316:   INSERT INTO t1(a) VALUES(''),(NULL),('X'),(NULL);",
          "317:   SELECT coalesce(max(quote(a)),10) FROM t1 GROUP BY a;",
          "318: } {NULL '' 'X'}",
          "",
          "---------------"
        ]
      }
    }
  ]
}