{
  "cve_id": "CVE-2022-21734",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `MapStage` is vulnerable a `CHECK`-fail if the key tensor is not a scalar. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f57315566d7094f322b784947093406c2aea0d7d",
  "patch_info": {
    "commit_hash": "f57315566d7094f322b784947093406c2aea0d7d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f57315566d7094f322b784947093406c2aea0d7d",
    "files": [
      "tensorflow/core/kernels/map_stage_op.cc",
      "tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py"
    ],
    "message": "Add a check for Key being scalar tensor for MapStage and OrderedMapStage ops.\n\nAccording to documentation[1][2], key must be int64 value, but this wasn't enforced and the ops would fail with check failure for non-scalar key value.\n\n[1]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/ordered-map-stage\n[2]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/map-stage\n\nPiperOrigin-RevId: 413822112\nChange-Id: I9d118faf990e6361900aa32272eff486ad9f0e2e",
    "before_after_code_files": [
      "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc",
      "tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py||tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
      "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "536:     OP_REQUIRES(ctx, key_tensor->NumElements() > 0,",
      "537:                 errors::InvalidArgument(\"key must not be empty\"));",
      "540:     Tensor key(*key_tensor);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "539:     OP_REQUIRES(ctx, key_tensor->NumElements() == 1,",
      "540:                 errors::InvalidArgument(",
      "541:                     \"key must be an int64 scalar, got tensor with shape: \",",
      "542:                     key_tensor->shape()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py||tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py": [
      "File: tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py -> tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: # See the License for the specific language governing permissions and",
      "13: # limitations under the License.",
      "14: # ==============================================================================",
      "16: from tensorflow.python.framework import dtypes",
      "17: from tensorflow.python.framework import ops",
      "18: from tensorflow.python.framework import test_util",
      "19: from tensorflow.python.ops import array_ops",
      "",
      "[Removed Lines]",
      "15: from tensorflow.python.framework import errors",
      "",
      "[Added Lines]",
      "15: import numpy as np",
      "17: from tensorflow.python.framework import constant_op",
      "19: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:   @test_util.run_deprecated_v1",
      "30:   def testSimple(self):",
      "32:       with ops.device('/cpu:0'):",
      "33:         x = array_ops.placeholder(dtypes.float32)",
      "34:         pi = array_ops.placeholder(dtypes.int64)",
      "",
      "[Removed Lines]",
      "31:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "34:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "40:         k, y = stager.get(gi)",
      "41:         y = math_ops.reduce_max(math_ops.matmul(y, y))",
      "46:       sess.run(stage, feed_dict={x: -1, pi: 0})",
      "47:       for i in range(10):",
      "48:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
      "",
      "[Removed Lines]",
      "43:     G.finalize()",
      "45:     with self.session(graph=G) as sess:",
      "",
      "[Added Lines]",
      "46:     g.finalize()",
      "48:     with self.session(graph=g) as sess:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "51:   @test_util.run_deprecated_v1",
      "52:   def testMultiple(self):",
      "54:       with ops.device('/cpu:0'):",
      "55:         x = array_ops.placeholder(dtypes.float32)",
      "56:         pi = array_ops.placeholder(dtypes.int64)",
      "",
      "[Removed Lines]",
      "53:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "56:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "62:         k, (z, y) = stager.get(gi)",
      "63:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
      "68:       sess.run(stage, feed_dict={x: -1, pi: 0})",
      "69:       for i in range(10):",
      "70:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
      "",
      "[Removed Lines]",
      "65:     G.finalize()",
      "67:     with self.session(graph=G) as sess:",
      "",
      "[Added Lines]",
      "68:     g.finalize()",
      "70:     with self.session(graph=g) as sess:",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "74:   @test_util.run_deprecated_v1",
      "75:   def testDictionary(self):",
      "77:       with ops.device('/cpu:0'):",
      "78:         x = array_ops.placeholder(dtypes.float32)",
      "79:         pi = array_ops.placeholder(dtypes.int64)",
      "80:         gi = array_ops.placeholder(dtypes.int64)",
      "81:         v = 2. * (array_ops.zeros([128, 128]) + x)",
      "82:       with ops.device(test.gpu_device_name()):",
      "87:         stage = stager.put(pi, {'x': x, 'v': v})",
      "88:         key, ret = stager.get(gi)",
      "89:         z = ret['x']",
      "90:         y = ret['v']",
      "91:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
      "96:       sess.run(stage, feed_dict={x: -1, pi: 0})",
      "97:       for i in range(10):",
      "98:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
      "",
      "[Removed Lines]",
      "76:     with ops.Graph().as_default() as G:",
      "83:         stager = data_flow_ops.MapStagingArea(",
      "84:             [dtypes.float32, dtypes.float32],",
      "85:             shapes=[[], [128, 128]],",
      "86:             names=['x', 'v'])",
      "93:     G.finalize()",
      "95:     with self.session(graph=G) as sess:",
      "",
      "[Added Lines]",
      "79:     with ops.Graph().as_default() as g:",
      "86:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
      "87:                                               shapes=[[], [128, 128]],",
      "88:                                               names=['x', 'v'])",
      "95:     g.finalize()",
      "97:     with self.session(graph=g) as sess:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "102:   def testColocation(self):",
      "103:     gpu_dev = test.gpu_device_name()",
      "106:       with ops.device('/cpu:0'):",
      "107:         x = array_ops.placeholder(dtypes.float32)",
      "108:         v = 2. * (array_ops.zeros([128, 128]) + x)",
      "",
      "[Removed Lines]",
      "105:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "107:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "119:         self.assertEqual(y.device, '/device:CPU:0')",
      "120:         self.assertEqual(z[0].device, '/device:CPU:0')",
      "124:   @test_util.run_deprecated_v1",
      "125:   def testPeek(self):",
      "127:       with ops.device('/cpu:0'):",
      "128:         x = array_ops.placeholder(dtypes.int32, name='x')",
      "129:         pi = array_ops.placeholder(dtypes.int64)",
      "130:         gi = array_ops.placeholder(dtypes.int64)",
      "131:         p = array_ops.placeholder(dtypes.int32, name='p')",
      "132:       with ops.device(test.gpu_device_name()):",
      "137:         stage = stager.put(pi, [x], [0])",
      "138:         peek = stager.peek(gi)",
      "139:         size = stager.size()",
      "143:     n = 10",
      "146:       for i in range(n):",
      "147:         sess.run(stage, feed_dict={x: i, pi: i})",
      "149:       for i in range(n):",
      "154:   @test_util.run_deprecated_v1",
      "155:   def testSizeAndClear(self):",
      "157:       with ops.device('/cpu:0'):",
      "158:         x = array_ops.placeholder(dtypes.float32, name='x')",
      "159:         pi = array_ops.placeholder(dtypes.int64)",
      "160:         gi = array_ops.placeholder(dtypes.int64)",
      "161:         v = 2. * (array_ops.zeros([128, 128]) + x)",
      "162:       with ops.device(test.gpu_device_name()):",
      "167:         stage = stager.put(pi, {'x': x, 'v': v})",
      "168:         size = stager.size()",
      "169:         clear = stager.clear()",
      "174:       sess.run(stage, feed_dict={x: -1, pi: 3})",
      "175:       self.assertEqual(sess.run(size), 1)",
      "176:       sess.run(stage, feed_dict={x: -1, pi: 1})",
      "",
      "[Removed Lines]",
      "122:     G.finalize()",
      "126:     with ops.Graph().as_default() as G:",
      "133:         stager = data_flow_ops.MapStagingArea(",
      "134:             [",
      "135:                 dtypes.int32,",
      "136:             ], shapes=[[]])",
      "141:     G.finalize()",
      "145:     with self.session(graph=G) as sess:",
      "150:         self.assertTrue(sess.run(peek, feed_dict={gi: i})[0] == i)",
      "152:       self.assertTrue(sess.run(size) == 10)",
      "156:     with ops.Graph().as_default() as G:",
      "163:         stager = data_flow_ops.MapStagingArea(",
      "164:             [dtypes.float32, dtypes.float32],",
      "165:             shapes=[[], [128, 128]],",
      "166:             names=['x', 'v'])",
      "171:     G.finalize()",
      "173:     with self.session(graph=G) as sess:",
      "",
      "[Added Lines]",
      "124:     g.finalize()",
      "128:     with ops.Graph().as_default() as g:",
      "135:         stager = data_flow_ops.MapStagingArea([",
      "136:             dtypes.int32,",
      "137:         ], shapes=[[]])",
      "142:     g.finalize()",
      "146:     with self.session(graph=g) as sess:",
      "151:         self.assertEqual(sess.run(peek, feed_dict={gi: i})[0], i)",
      "153:       self.assertEqual(sess.run(size), 10)",
      "157:     with ops.Graph().as_default() as g:",
      "164:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
      "165:                                               shapes=[[], [128, 128]],",
      "166:                                               names=['x', 'v'])",
      "171:     g.finalize()",
      "173:     with self.session(graph=g) as sess:",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "182:   def testCapacity(self):",
      "183:     capacity = 3",
      "186:       with ops.device('/cpu:0'):",
      "187:         x = array_ops.placeholder(dtypes.int32, name='x')",
      "188:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
      "189:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
      "190:       with ops.device(test.gpu_device_name()):",
      "196:       stage = stager.put(pi, [x], [0])",
      "197:       get = stager.get()",
      "198:       size = stager.size()",
      "202:     from six.moves import queue as Queue",
      "203:     import threading",
      "",
      "[Removed Lines]",
      "185:     with ops.Graph().as_default() as G:",
      "191:         stager = data_flow_ops.MapStagingArea(",
      "192:             [",
      "193:                 dtypes.int32,",
      "194:             ], capacity=capacity, shapes=[[]])",
      "200:     G.finalize()",
      "",
      "[Added Lines]",
      "185:     with ops.Graph().as_default() as g:",
      "191:         stager = data_flow_ops.MapStagingArea([",
      "192:             dtypes.int32,",
      "193:         ],",
      "194:                                               capacity=capacity,",
      "195:                                               shapes=[[]])",
      "201:     g.finalize()",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "205:     queue = Queue.Queue()",
      "206:     n = 8",
      "209:       # Stage data in a separate thread which will block",
      "210:       # when it hits the staging area's capacity and thus",
      "211:       # not fill the queue with n tokens",
      "",
      "[Removed Lines]",
      "208:     with self.session(graph=G) as sess:",
      "",
      "[Added Lines]",
      "209:     with self.session(graph=g) as sess:",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "234:                                              capacity))",
      "236:       # Should have capacity elements in the staging area",
      "239:       # Clear the staging area completely",
      "240:       for i in range(n):",
      "241:         sess.run(get)",
      "245:   @test_util.run_deprecated_v1",
      "246:   def testMemoryLimit(self):",
      "",
      "[Removed Lines]",
      "237:       self.assertTrue(sess.run(size) == capacity)",
      "243:       self.assertTrue(sess.run(size) == 0)",
      "",
      "[Added Lines]",
      "238:       self.assertEqual(sess.run(size), capacity)",
      "244:       self.assertEqual(sess.run(size), 0)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "248:     chunk = 200 * 1024  # 256K",
      "249:     capacity = memory_limit // chunk",
      "252:       with ops.device('/cpu:0'):",
      "253:         x = array_ops.placeholder(dtypes.uint8, name='x')",
      "254:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
      "255:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
      "256:       with ops.device(test.gpu_device_name()):",
      "259:         stage = stager.put(pi, [x], [0])",
      "260:         get = stager.get()",
      "261:         size = stager.size()",
      "265:     from six.moves import queue as Queue",
      "266:     import threading",
      "269:     queue = Queue.Queue()",
      "270:     n = 8",
      "273:       # Stage data in a separate thread which will block",
      "274:       # when it hits the staging area's capacity and thus",
      "275:       # not fill the queue with n tokens",
      "",
      "[Removed Lines]",
      "251:     with ops.Graph().as_default() as G:",
      "257:         stager = data_flow_ops.MapStagingArea(",
      "258:             [dtypes.uint8], memory_limit=memory_limit, shapes=[[]])",
      "263:     G.finalize()",
      "267:     import numpy as np",
      "272:     with self.session(graph=G) as sess:",
      "",
      "[Added Lines]",
      "252:     with ops.Graph().as_default() as g:",
      "258:         stager = data_flow_ops.MapStagingArea([dtypes.uint8],",
      "259:                                               memory_limit=memory_limit,",
      "260:                                               shapes=[[]])",
      "265:     g.finalize()",
      "273:     with self.session(graph=g) as sess:",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "299:                                              capacity))",
      "301:       # Should have capacity elements in the staging area",
      "304:       # Clear the staging area completely",
      "305:       for i in range(n):",
      "306:         sess.run(get)",
      "310:   @test_util.run_deprecated_v1",
      "311:   def testOrdering(self):",
      "312:     import six",
      "313:     import random",
      "316:       with ops.device('/cpu:0'):",
      "317:         x = array_ops.placeholder(dtypes.int32, name='x')",
      "318:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
      "319:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
      "320:       with ops.device(test.gpu_device_name()):",
      "325:         stage = stager.put(pi, [x], [0])",
      "326:         get = stager.get()",
      "327:         size = stager.size()",
      "331:     n = 10",
      "334:       # Keys n-1..0",
      "335:       keys = list(reversed(six.moves.range(n)))",
      "337:       for i in keys:",
      "338:         sess.run(stage, feed_dict={pi: i, x: i})",
      "342:       # Check that key, values come out in ascending order",
      "343:       for i, k in enumerate(reversed(keys)):",
      "344:         get_key, values = sess.run(get)",
      "345:         self.assertTrue(i == k == get_key == values)",
      "349:   @test_util.run_deprecated_v1",
      "350:   def testPartialDictInsert(self):",
      "352:       with ops.device('/cpu:0'):",
      "353:         x = array_ops.placeholder(dtypes.float32)",
      "354:         f = array_ops.placeholder(dtypes.float32)",
      "",
      "[Removed Lines]",
      "302:       self.assertTrue(sess.run(size) == capacity)",
      "308:       self.assertTrue(sess.run(size) == 0)",
      "315:     with ops.Graph().as_default() as G:",
      "321:         stager = data_flow_ops.MapStagingArea(",
      "322:             [",
      "323:                 dtypes.int32,",
      "324:             ], shapes=[[]], ordered=True)",
      "329:     G.finalize()",
      "333:     with self.session(graph=G) as sess:",
      "340:       self.assertTrue(sess.run(size) == n)",
      "347:       self.assertTrue(sess.run(size) == 0)",
      "351:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "303:       self.assertEqual(sess.run(size), capacity)",
      "309:       self.assertEqual(sess.run(size), 0)",
      "316:     with ops.Graph().as_default() as g:",
      "322:         stager = data_flow_ops.MapStagingArea([",
      "323:             dtypes.int32,",
      "324:         ],",
      "325:                                               shapes=[[]],",
      "326:                                               ordered=True)",
      "331:     g.finalize()",
      "335:     with self.session(graph=g) as sess:",
      "342:       self.assertEqual(sess.run(size), n)",
      "349:       self.assertEqual(sess.run(size), 0)",
      "353:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "366:         size = stager.size()",
      "367:         isize = stager.incomplete_size()",
      "372:       # 0 complete and incomplete entries",
      "374:       # Stage key 0, x and f tuple entries",
      "375:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
      "377:       # Stage key 1, x and f tuple entries",
      "378:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
      "381:       # Now complete key 0 with tuple entry v",
      "382:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
      "383:       # 1 complete and 1 incomplete entry",
      "385:       # We can now obtain tuple associated with key 0",
      "390:               'x': 1,",
      "391:               'f': 2,",
      "392:               'v': 1",
      "393:           }])",
      "395:       # 0 complete and 1 incomplete entry",
      "397:       # Now complete key 1 with tuple entry v",
      "398:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
      "399:       # We can now obtain tuple associated with key 1",
      "404:               'x': 1,",
      "405:               'f': 2,",
      "406:               'v': 3",
      "",
      "[Removed Lines]",
      "369:     G.finalize()",
      "371:     with self.session(graph=G) as sess:",
      "373:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
      "376:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
      "379:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
      "384:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
      "386:       self.assertTrue(",
      "387:           sess.run([key, ret], feed_dict={",
      "388:               gi: 0",
      "389:           }) == [0, {",
      "396:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
      "400:       self.assertTrue(",
      "401:           sess.run([key, ret], feed_dict={",
      "402:               gi: 1",
      "403:           }) == [1, {",
      "",
      "[Added Lines]",
      "371:     g.finalize()",
      "373:     with self.session(graph=g) as sess:",
      "375:       self.assertEqual(sess.run([size, isize]), [0, 0])",
      "378:       self.assertEqual(sess.run([size, isize]), [0, 1])",
      "381:       self.assertEqual(sess.run([size, isize]), [0, 2])",
      "386:       self.assertEqual(sess.run([size, isize]), [1, 1])",
      "388:       self.assertEqual(",
      "389:           sess.run([key, ret], feed_dict={gi: 0}),",
      "390:           [0, {",
      "397:       self.assertEqual(sess.run([size, isize]), [0, 1])",
      "401:       self.assertEqual(",
      "402:           sess.run([key, ret], feed_dict={gi: 1}),",
      "403:           [1, {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "409:   @test_util.run_deprecated_v1",
      "410:   def testPartialIndexInsert(self):",
      "412:       with ops.device('/cpu:0'):",
      "413:         x = array_ops.placeholder(dtypes.float32)",
      "414:         f = array_ops.placeholder(dtypes.float32)",
      "",
      "[Removed Lines]",
      "411:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "411:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "424:         size = stager.size()",
      "425:         isize = stager.incomplete_size()",
      "430:       # 0 complete and incomplete entries",
      "432:       # Stage key 0, x and f tuple entries",
      "433:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
      "435:       # Stage key 1, x and f tuple entries",
      "436:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
      "439:       # Now complete key 0 with tuple entry v",
      "440:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
      "441:       # 1 complete and 1 incomplete entry",
      "443:       # We can now obtain tuple associated with key 0",
      "446:       # 0 complete and 1 incomplete entry",
      "448:       # Now complete key 1 with tuple entry v",
      "449:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
      "450:       # We can now obtain tuple associated with key 1",
      "453:   @test_util.run_deprecated_v1",
      "454:   def testPartialDictGetsAndPeeks(self):",
      "456:       with ops.device('/cpu:0'):",
      "457:         x = array_ops.placeholder(dtypes.float32)",
      "458:         f = array_ops.placeholder(dtypes.float32)",
      "",
      "[Removed Lines]",
      "427:     G.finalize()",
      "429:     with self.session(graph=G) as sess:",
      "431:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
      "434:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
      "437:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
      "442:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
      "444:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 0}) == [0, [1, 1, 2]])",
      "447:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
      "451:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 1}) == [1, [1, 3, 2]])",
      "455:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "427:     g.finalize()",
      "429:     with self.session(graph=g) as sess:",
      "431:       self.assertEqual(sess.run([size, isize]), [0, 0])",
      "434:       self.assertEqual(sess.run([size, isize]), [0, 1])",
      "437:       self.assertEqual(sess.run([size, isize]), [0, 2])",
      "442:       self.assertEqual(sess.run([size, isize]), [1, 1])",
      "444:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 0}), [0, [1, 1, 2]])",
      "447:       self.assertEqual(sess.run([size, isize]), [0, 1])",
      "451:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 1}), [1, [1, 3, 2]])",
      "455:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "476:         size = stager.size()",
      "477:         isize = stager.incomplete_size()",
      "482:       # 0 complete and incomplete entries",
      "484:       # Stage key 0, x and f tuple entries",
      "485:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
      "487:       # Stage key 1, x and f tuple entries",
      "488:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
      "491:       # Now complete key 0 with tuple entry v",
      "492:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
      "493:       # 1 complete and 1 incomplete entry",
      "496:       # We can now peek at 'x' and 'f' values associated with key 0",
      "498:       # Peek at 'v' value associated with key 0",
      "500:       # 1 complete and 1 incomplete entry",
      "503:       # We can now obtain 'x' and 'f' values associated with key 0",
      "508:               'x': 1,",
      "509:               'f': 2",
      "510:           }])",
      "511:       # Still have 1 complete and 1 incomplete entry",
      "514:       # We can no longer get 'x' and 'f' from key 0",
      "515:       with self.assertRaises(errors.InvalidArgumentError) as cm:",
      "",
      "[Removed Lines]",
      "479:     G.finalize()",
      "481:     with self.session(graph=G) as sess:",
      "483:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
      "486:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
      "489:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
      "494:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
      "497:       self.assertTrue(sess.run(peek_xf, feed_dict={pei: 0}) == {'x': 1, 'f': 2})",
      "499:       self.assertTrue(sess.run(peek_v, feed_dict={pei: 0}) == {'v': 1})",
      "501:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
      "504:       self.assertTrue(",
      "505:           sess.run([key_xf, get_xf], feed_dict={",
      "506:               gi: 0",
      "507:           }) == [0, {",
      "512:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
      "",
      "[Added Lines]",
      "479:     g.finalize()",
      "481:     with self.session(graph=g) as sess:",
      "483:       self.assertEqual(sess.run([size, isize]), [0, 0])",
      "486:       self.assertEqual(sess.run([size, isize]), [0, 1])",
      "489:       self.assertEqual(sess.run([size, isize]), [0, 2])",
      "494:       self.assertEqual(sess.run([size, isize]), [1, 1])",
      "497:       self.assertEqual(sess.run(peek_xf, feed_dict={pei: 0}), {'x': 1, 'f': 2})",
      "499:       self.assertEqual(sess.run(peek_v, feed_dict={pei: 0}), {'v': 1})",
      "501:       self.assertEqual(sess.run([size, isize]), [1, 1])",
      "504:       self.assertEqual(",
      "505:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, {",
      "510:       self.assertEqual(sess.run([size, isize]), [1, 1])",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "518:       exc_str = (\"Tensor at index '0' for key '0' \" 'has already been removed.')",
      "522:       # Obtain 'v' value associated with key 0",
      "527:               'v': 1",
      "528:           }])",
      "529:       # 0 complete and 1 incomplete entry",
      "532:       # Now complete key 1 with tuple entry v",
      "533:       sess.run(stage_v, feed_dict={pi: 1, v: 1})",
      "534:       # 1 complete and 1 incomplete entry",
      "537:       # Pop without key to obtain 'x' and 'f' values associated with key 1",
      "539:       # still 1 complete and 1 incomplete entry",
      "541:       # We can now obtain 'x' and 'f' values associated with key 1",
      "546:               'v': 1",
      "547:           }])",
      "548:       # Nothing is left",
      "551:   @test_util.run_deprecated_v1",
      "552:   def testPartialIndexGets(self):",
      "554:       with ops.device('/cpu:0'):",
      "555:         x = array_ops.placeholder(dtypes.float32)",
      "556:         f = array_ops.placeholder(dtypes.float32)",
      "",
      "[Removed Lines]",
      "520:       self.assertTrue(exc_str in cm.exception.message)",
      "523:       self.assertTrue(",
      "524:           sess.run([key_v, get_v], feed_dict={",
      "525:               gi: 0",
      "526:           }) == [0, {",
      "530:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
      "535:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
      "538:       self.assertTrue(sess.run([pop_key_xf, pop_xf]) == [1, {'x': 1, 'f': 2}])",
      "540:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
      "542:       self.assertTrue(",
      "543:           sess.run([pop_key_v, pop_v], feed_dict={",
      "544:               pi: 1",
      "545:           }) == [1, {",
      "549:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
      "553:     with ops.Graph().as_default() as G:",
      "",
      "[Added Lines]",
      "518:       self.assertIn(exc_str, cm.exception.message)",
      "521:       self.assertEqual(",
      "522:           sess.run([key_v, get_v], feed_dict={gi: 0}), [0, {",
      "526:       self.assertEqual(sess.run([size, isize]), [0, 1])",
      "531:       self.assertEqual(sess.run([size, isize]), [1, 0])",
      "534:       self.assertEqual(sess.run([pop_key_xf, pop_xf]), [1, {'x': 1, 'f': 2}])",
      "536:       self.assertEqual(sess.run([size, isize]), [1, 0])",
      "538:       self.assertEqual(",
      "539:           sess.run([pop_key_v, pop_v], feed_dict={pi: 1}), [1, {",
      "543:       self.assertEqual(sess.run([size, isize]), [0, 0])",
      "547:     with ops.Graph().as_default() as g:",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "568:         size = stager.size()",
      "569:         isize = stager.incomplete_size()",
      "574:       # Stage complete tuple",
      "575:       sess.run(stage_xvf, feed_dict={pi: 0, x: 1, f: 2, v: 3})",
      "579:       # Partial get using indices",
      "585:       # Still some of key 0 left",
      "588:       # Partial get of remaining index",
      "591:       # All gone",
      "595: if __name__ == '__main__':",
      "",
      "[Removed Lines]",
      "571:     G.finalize()",
      "573:     with self.session(graph=G) as sess:",
      "577:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
      "580:       self.assertTrue(",
      "581:           sess.run([key_xf, get_xf], feed_dict={",
      "582:               gi: 0",
      "583:           }) == [0, [1, 2]])",
      "586:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
      "589:       self.assertTrue(sess.run([key_v, get_v], feed_dict={gi: 0}) == [0, [3]])",
      "592:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
      "",
      "[Added Lines]",
      "565:     g.finalize()",
      "567:     with self.session(graph=g) as sess:",
      "571:       self.assertEqual(sess.run([size, isize]), [1, 0])",
      "574:       self.assertEqual(",
      "575:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, [1, 2]])",
      "578:       self.assertEqual(sess.run([size, isize]), [1, 0])",
      "581:       self.assertEqual(sess.run([key_v, get_v], feed_dict={gi: 0}), [0, [3]])",
      "584:       self.assertEqual(sess.run([size, isize]), [0, 0])",
      "586:   @test_util.run_deprecated_v1",
      "587:   def testNonScalarKeyOrderedMap(self):",
      "588:     with ops.Graph().as_default() as g:",
      "589:       x = array_ops.placeholder(dtypes.float32)",
      "590:       v = 2. * (array_ops.zeros([128, 128]) + x)",
      "591:       t = data_flow_ops.gen_data_flow_ops.ordered_map_stage(",
      "592:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
      "593:           indices=np.array([[6]]),",
      "594:           values=[x, v],",
      "595:           dtypes=[dtypes.int64],",
      "596:           capacity=0,",
      "597:           memory_limit=0,",
      "598:           container='container1',",
      "599:           shared_name='',",
      "600:           name=None)",
      "602:     g.finalize()",
      "604:     with self.session(graph=g) as sess:",
      "605:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "606:                                   'key must be an int64 scalar'):",
      "607:         sess.run(t, feed_dict={x: 1})",
      "609:   @test_util.run_deprecated_v1",
      "610:   def testNonScalarKeyUnorderedMap(self):",
      "611:     with ops.Graph().as_default() as g:",
      "612:       x = array_ops.placeholder(dtypes.float32)",
      "613:       v = 2. * (array_ops.zeros([128, 128]) + x)",
      "614:       t = data_flow_ops.gen_data_flow_ops.map_stage(",
      "615:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
      "616:           indices=np.array([[6]]),",
      "617:           values=[x, v],",
      "618:           dtypes=[dtypes.int64],",
      "619:           capacity=0,",
      "620:           memory_limit=0,",
      "621:           container='container1',",
      "622:           shared_name='',",
      "623:           name=None)",
      "625:     g.finalize()",
      "627:     with self.session(graph=g) as sess:",
      "628:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "629:                                   'key must be an int64 scalar'):",
      "630:         sess.run(t, feed_dict={x: 1})",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ca11ea1aed417eab49870b48243327f021b15ea",
      "candidate_info": {
        "commit_hash": "4ca11ea1aed417eab49870b48243327f021b15ea",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4ca11ea1aed417eab49870b48243327f021b15ea",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc",
          "tensorflow/python/kernel_tests/map_stage_op_test.py"
        ],
        "message": "Add a check for Key being scalar tensor for MapStage and OrderedMapStage ops.\n\nAccording to documentation[1][2], key must be int64 value, but this wasn't enforced and the ops would fail with check failure for non-scalar key value.\n\n[1]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/ordered-map-stage\n[2]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/map-stage\n\nPiperOrigin-RevId: 413822112\nChange-Id: I9d118faf990e6361900aa32272eff486ad9f0e2e",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc",
          "tensorflow/python/kernel_tests/map_stage_op_test.py||tensorflow/python/kernel_tests/map_stage_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:     OP_REQUIRES(ctx, key_tensor->NumElements() > 0,",
          "534:                 errors::InvalidArgument(\"key must not be empty\"));",
          "537:     Tensor key(*key_tensor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     OP_REQUIRES(ctx, key_tensor->NumElements() == 1,",
          "537:                 errors::InvalidArgument(",
          "538:                     \"key must be an int64 scalar, got tensor with shape: \",",
          "539:                     key_tensor->shape()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/map_stage_op_test.py||tensorflow/python/kernel_tests/map_stage_op_test.py": [
          "File: tensorflow/python/kernel_tests/map_stage_op_test.py -> tensorflow/python/kernel_tests/map_stage_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # See the License for the specific language governing permissions and",
          "13: # limitations under the License.",
          "14: # ==============================================================================",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import ops",
          "22: from tensorflow.python.framework import test_util",
          "23: from tensorflow.python.ops import array_ops",
          "",
          "[Removed Lines]",
          "15: from __future__ import absolute_import",
          "16: from __future__ import division",
          "17: from __future__ import print_function",
          "19: from tensorflow.python.framework import errors",
          "",
          "[Added Lines]",
          "15: import numpy as np",
          "17: from tensorflow.python.framework import constant_op",
          "19: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   @test_util.run_deprecated_v1",
          "34:   def testSimple(self):",
          "36:       with ops.device('/cpu:0'):",
          "37:         x = array_ops.placeholder(dtypes.float32)",
          "38:         pi = array_ops.placeholder(dtypes.int64)",
          "",
          "[Removed Lines]",
          "35:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "34:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         k, y = stager.get(gi)",
          "45:         y = math_ops.reduce_max(math_ops.matmul(y, y))",
          "50:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "51:       for i in range(10):",
          "52:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "47:     G.finalize()",
          "49:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "46:     g.finalize()",
          "48:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:   @test_util.run_deprecated_v1",
          "56:   def testMultiple(self):",
          "58:       with ops.device('/cpu:0'):",
          "59:         x = array_ops.placeholder(dtypes.float32)",
          "60:         pi = array_ops.placeholder(dtypes.int64)",
          "",
          "[Removed Lines]",
          "57:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "56:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:         k, (z, y) = stager.get(gi)",
          "67:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
          "72:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "73:       for i in range(10):",
          "74:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "69:     G.finalize()",
          "71:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "68:     g.finalize()",
          "70:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "78:   @test_util.run_deprecated_v1",
          "79:   def testDictionary(self):",
          "81:       with ops.device('/cpu:0'):",
          "82:         x = array_ops.placeholder(dtypes.float32)",
          "83:         pi = array_ops.placeholder(dtypes.int64)",
          "84:         gi = array_ops.placeholder(dtypes.int64)",
          "85:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "86:       with ops.device(test.gpu_device_name()):",
          "91:         stage = stager.put(pi, {'x': x, 'v': v})",
          "92:         key, ret = stager.get(gi)",
          "93:         z = ret['x']",
          "94:         y = ret['v']",
          "95:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
          "100:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "101:       for i in range(10):",
          "102:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "80:     with ops.Graph().as_default() as G:",
          "87:         stager = data_flow_ops.MapStagingArea(",
          "88:             [dtypes.float32, dtypes.float32],",
          "89:             shapes=[[], [128, 128]],",
          "90:             names=['x', 'v'])",
          "97:     G.finalize()",
          "99:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "79:     with ops.Graph().as_default() as g:",
          "86:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
          "87:                                               shapes=[[], [128, 128]],",
          "88:                                               names=['x', 'v'])",
          "95:     g.finalize()",
          "97:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "106:   def testColocation(self):",
          "107:     gpu_dev = test.gpu_device_name()",
          "110:       with ops.device('/cpu:0'):",
          "111:         x = array_ops.placeholder(dtypes.float32)",
          "112:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "",
          "[Removed Lines]",
          "109:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "107:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "123:         self.assertEqual(y.device, '/device:CPU:0')",
          "124:         self.assertEqual(z[0].device, '/device:CPU:0')",
          "128:   @test_util.run_deprecated_v1",
          "129:   def testPeek(self):",
          "131:       with ops.device('/cpu:0'):",
          "132:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "133:         pi = array_ops.placeholder(dtypes.int64)",
          "134:         gi = array_ops.placeholder(dtypes.int64)",
          "135:         p = array_ops.placeholder(dtypes.int32, name='p')",
          "136:       with ops.device(test.gpu_device_name()):",
          "141:         stage = stager.put(pi, [x], [0])",
          "142:         peek = stager.peek(gi)",
          "143:         size = stager.size()",
          "147:     n = 10",
          "150:       for i in range(n):",
          "151:         sess.run(stage, feed_dict={x: i, pi: i})",
          "153:       for i in range(n):",
          "158:   @test_util.run_deprecated_v1",
          "159:   def testSizeAndClear(self):",
          "161:       with ops.device('/cpu:0'):",
          "162:         x = array_ops.placeholder(dtypes.float32, name='x')",
          "163:         pi = array_ops.placeholder(dtypes.int64)",
          "164:         gi = array_ops.placeholder(dtypes.int64)",
          "165:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "166:       with ops.device(test.gpu_device_name()):",
          "171:         stage = stager.put(pi, {'x': x, 'v': v})",
          "172:         size = stager.size()",
          "173:         clear = stager.clear()",
          "178:       sess.run(stage, feed_dict={x: -1, pi: 3})",
          "179:       self.assertEqual(sess.run(size), 1)",
          "180:       sess.run(stage, feed_dict={x: -1, pi: 1})",
          "",
          "[Removed Lines]",
          "126:     G.finalize()",
          "130:     with ops.Graph().as_default() as G:",
          "137:         stager = data_flow_ops.MapStagingArea(",
          "138:             [",
          "139:                 dtypes.int32,",
          "140:             ], shapes=[[]])",
          "145:     G.finalize()",
          "149:     with self.session(graph=G) as sess:",
          "154:         self.assertTrue(sess.run(peek, feed_dict={gi: i})[0] == i)",
          "156:       self.assertTrue(sess.run(size) == 10)",
          "160:     with ops.Graph().as_default() as G:",
          "167:         stager = data_flow_ops.MapStagingArea(",
          "168:             [dtypes.float32, dtypes.float32],",
          "169:             shapes=[[], [128, 128]],",
          "170:             names=['x', 'v'])",
          "175:     G.finalize()",
          "177:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "124:     g.finalize()",
          "128:     with ops.Graph().as_default() as g:",
          "135:         stager = data_flow_ops.MapStagingArea([",
          "136:             dtypes.int32,",
          "137:         ], shapes=[[]])",
          "142:     g.finalize()",
          "146:     with self.session(graph=g) as sess:",
          "151:         self.assertEqual(sess.run(peek, feed_dict={gi: i})[0], i)",
          "153:       self.assertEqual(sess.run(size), 10)",
          "157:     with ops.Graph().as_default() as g:",
          "164:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
          "165:                                               shapes=[[], [128, 128]],",
          "166:                                               names=['x', 'v'])",
          "171:     g.finalize()",
          "173:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "186:   def testCapacity(self):",
          "187:     capacity = 3",
          "190:       with ops.device('/cpu:0'):",
          "191:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "192:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "193:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "194:       with ops.device(test.gpu_device_name()):",
          "200:       stage = stager.put(pi, [x], [0])",
          "201:       get = stager.get()",
          "202:       size = stager.size()",
          "206:     from six.moves import queue as Queue",
          "207:     import threading",
          "",
          "[Removed Lines]",
          "189:     with ops.Graph().as_default() as G:",
          "195:         stager = data_flow_ops.MapStagingArea(",
          "196:             [",
          "197:                 dtypes.int32,",
          "198:             ], capacity=capacity, shapes=[[]])",
          "204:     G.finalize()",
          "",
          "[Added Lines]",
          "185:     with ops.Graph().as_default() as g:",
          "191:         stager = data_flow_ops.MapStagingArea([",
          "192:             dtypes.int32,",
          "193:         ],",
          "194:                                               capacity=capacity,",
          "195:                                               shapes=[[]])",
          "201:     g.finalize()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "209:     queue = Queue.Queue()",
          "210:     n = 8",
          "213:       # Stage data in a separate thread which will block",
          "214:       # when it hits the staging area's capacity and thus",
          "215:       # not fill the queue with n tokens",
          "",
          "[Removed Lines]",
          "212:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "209:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "238:                                              capacity))",
          "240:       # Should have capacity elements in the staging area",
          "243:       # Clear the staging area completely",
          "244:       for i in range(n):",
          "245:         sess.run(get)",
          "249:   @test_util.run_deprecated_v1",
          "250:   def testMemoryLimit(self):",
          "",
          "[Removed Lines]",
          "241:       self.assertTrue(sess.run(size) == capacity)",
          "247:       self.assertTrue(sess.run(size) == 0)",
          "",
          "[Added Lines]",
          "238:       self.assertEqual(sess.run(size), capacity)",
          "244:       self.assertEqual(sess.run(size), 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "252:     chunk = 200 * 1024  # 256K",
          "253:     capacity = memory_limit // chunk",
          "256:       with ops.device('/cpu:0'):",
          "257:         x = array_ops.placeholder(dtypes.uint8, name='x')",
          "258:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "259:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "260:       with ops.device(test.gpu_device_name()):",
          "263:         stage = stager.put(pi, [x], [0])",
          "264:         get = stager.get()",
          "265:         size = stager.size()",
          "269:     from six.moves import queue as Queue",
          "270:     import threading",
          "273:     queue = Queue.Queue()",
          "274:     n = 8",
          "277:       # Stage data in a separate thread which will block",
          "278:       # when it hits the staging area's capacity and thus",
          "279:       # not fill the queue with n tokens",
          "",
          "[Removed Lines]",
          "255:     with ops.Graph().as_default() as G:",
          "261:         stager = data_flow_ops.MapStagingArea(",
          "262:             [dtypes.uint8], memory_limit=memory_limit, shapes=[[]])",
          "267:     G.finalize()",
          "271:     import numpy as np",
          "276:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "252:     with ops.Graph().as_default() as g:",
          "258:         stager = data_flow_ops.MapStagingArea([dtypes.uint8],",
          "259:                                               memory_limit=memory_limit,",
          "260:                                               shapes=[[]])",
          "265:     g.finalize()",
          "273:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "303:                                              capacity))",
          "305:       # Should have capacity elements in the staging area",
          "308:       # Clear the staging area completely",
          "309:       for i in range(n):",
          "310:         sess.run(get)",
          "314:   @test_util.run_deprecated_v1",
          "315:   def testOrdering(self):",
          "316:     import six",
          "317:     import random",
          "320:       with ops.device('/cpu:0'):",
          "321:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "322:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "323:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "324:       with ops.device(test.gpu_device_name()):",
          "329:         stage = stager.put(pi, [x], [0])",
          "330:         get = stager.get()",
          "331:         size = stager.size()",
          "335:     n = 10",
          "338:       # Keys n-1..0",
          "339:       keys = list(reversed(six.moves.range(n)))",
          "341:       for i in keys:",
          "342:         sess.run(stage, feed_dict={pi: i, x: i})",
          "346:       # Check that key, values come out in ascending order",
          "347:       for i, k in enumerate(reversed(keys)):",
          "348:         get_key, values = sess.run(get)",
          "349:         self.assertTrue(i == k == get_key == values)",
          "353:   @test_util.run_deprecated_v1",
          "354:   def testPartialDictInsert(self):",
          "356:       with ops.device('/cpu:0'):",
          "357:         x = array_ops.placeholder(dtypes.float32)",
          "358:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "306:       self.assertTrue(sess.run(size) == capacity)",
          "312:       self.assertTrue(sess.run(size) == 0)",
          "319:     with ops.Graph().as_default() as G:",
          "325:         stager = data_flow_ops.MapStagingArea(",
          "326:             [",
          "327:                 dtypes.int32,",
          "328:             ], shapes=[[]], ordered=True)",
          "333:     G.finalize()",
          "337:     with self.session(graph=G) as sess:",
          "344:       self.assertTrue(sess.run(size) == n)",
          "351:       self.assertTrue(sess.run(size) == 0)",
          "355:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "303:       self.assertEqual(sess.run(size), capacity)",
          "309:       self.assertEqual(sess.run(size), 0)",
          "316:     with ops.Graph().as_default() as g:",
          "322:         stager = data_flow_ops.MapStagingArea([",
          "323:             dtypes.int32,",
          "324:         ],",
          "325:                                               shapes=[[]],",
          "326:                                               ordered=True)",
          "331:     g.finalize()",
          "335:     with self.session(graph=g) as sess:",
          "342:       self.assertEqual(sess.run(size), n)",
          "349:       self.assertEqual(sess.run(size), 0)",
          "353:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "370:         size = stager.size()",
          "371:         isize = stager.incomplete_size()",
          "376:       # 0 complete and incomplete entries",
          "378:       # Stage key 0, x and f tuple entries",
          "379:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "381:       # Stage key 1, x and f tuple entries",
          "382:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "385:       # Now complete key 0 with tuple entry v",
          "386:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "387:       # 1 complete and 1 incomplete entry",
          "389:       # We can now obtain tuple associated with key 0",
          "394:               'x': 1,",
          "395:               'f': 2,",
          "396:               'v': 1",
          "397:           }])",
          "399:       # 0 complete and 1 incomplete entry",
          "401:       # Now complete key 1 with tuple entry v",
          "402:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
          "403:       # We can now obtain tuple associated with key 1",
          "408:               'x': 1,",
          "409:               'f': 2,",
          "410:               'v': 3",
          "",
          "[Removed Lines]",
          "373:     G.finalize()",
          "375:     with self.session(graph=G) as sess:",
          "377:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "380:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "383:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "388:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "390:       self.assertTrue(",
          "391:           sess.run([key, ret], feed_dict={",
          "392:               gi: 0",
          "393:           }) == [0, {",
          "400:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "404:       self.assertTrue(",
          "405:           sess.run([key, ret], feed_dict={",
          "406:               gi: 1",
          "407:           }) == [1, {",
          "",
          "[Added Lines]",
          "371:     g.finalize()",
          "373:     with self.session(graph=g) as sess:",
          "375:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "378:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "381:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "386:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "388:       self.assertEqual(",
          "389:           sess.run([key, ret], feed_dict={gi: 0}),",
          "390:           [0, {",
          "397:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "401:       self.assertEqual(",
          "402:           sess.run([key, ret], feed_dict={gi: 1}),",
          "403:           [1, {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "413:   @test_util.run_deprecated_v1",
          "414:   def testPartialIndexInsert(self):",
          "416:       with ops.device('/cpu:0'):",
          "417:         x = array_ops.placeholder(dtypes.float32)",
          "418:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "415:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "411:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "428:         size = stager.size()",
          "429:         isize = stager.incomplete_size()",
          "434:       # 0 complete and incomplete entries",
          "436:       # Stage key 0, x and f tuple entries",
          "437:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "439:       # Stage key 1, x and f tuple entries",
          "440:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "443:       # Now complete key 0 with tuple entry v",
          "444:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "445:       # 1 complete and 1 incomplete entry",
          "447:       # We can now obtain tuple associated with key 0",
          "450:       # 0 complete and 1 incomplete entry",
          "452:       # Now complete key 1 with tuple entry v",
          "453:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
          "454:       # We can now obtain tuple associated with key 1",
          "457:   @test_util.run_deprecated_v1",
          "458:   def testPartialDictGetsAndPeeks(self):",
          "460:       with ops.device('/cpu:0'):",
          "461:         x = array_ops.placeholder(dtypes.float32)",
          "462:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "431:     G.finalize()",
          "433:     with self.session(graph=G) as sess:",
          "435:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "438:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "441:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "446:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "448:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 0}) == [0, [1, 1, 2]])",
          "451:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "455:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 1}) == [1, [1, 3, 2]])",
          "459:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "427:     g.finalize()",
          "429:     with self.session(graph=g) as sess:",
          "431:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "434:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "437:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "442:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "444:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 0}), [0, [1, 1, 2]])",
          "447:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "451:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 1}), [1, [1, 3, 2]])",
          "455:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "480:         size = stager.size()",
          "481:         isize = stager.incomplete_size()",
          "486:       # 0 complete and incomplete entries",
          "488:       # Stage key 0, x and f tuple entries",
          "489:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "491:       # Stage key 1, x and f tuple entries",
          "492:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "495:       # Now complete key 0 with tuple entry v",
          "496:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "497:       # 1 complete and 1 incomplete entry",
          "500:       # We can now peek at 'x' and 'f' values associated with key 0",
          "502:       # Peek at 'v' value associated with key 0",
          "504:       # 1 complete and 1 incomplete entry",
          "507:       # We can now obtain 'x' and 'f' values associated with key 0",
          "512:               'x': 1,",
          "513:               'f': 2",
          "514:           }])",
          "515:       # Still have 1 complete and 1 incomplete entry",
          "518:       # We can no longer get 'x' and 'f' from key 0",
          "519:       with self.assertRaises(errors.InvalidArgumentError) as cm:",
          "",
          "[Removed Lines]",
          "483:     G.finalize()",
          "485:     with self.session(graph=G) as sess:",
          "487:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "490:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "493:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "498:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "501:       self.assertTrue(sess.run(peek_xf, feed_dict={pei: 0}) == {'x': 1, 'f': 2})",
          "503:       self.assertTrue(sess.run(peek_v, feed_dict={pei: 0}) == {'v': 1})",
          "505:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "508:       self.assertTrue(",
          "509:           sess.run([key_xf, get_xf], feed_dict={",
          "510:               gi: 0",
          "511:           }) == [0, {",
          "516:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "",
          "[Added Lines]",
          "479:     g.finalize()",
          "481:     with self.session(graph=g) as sess:",
          "483:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "486:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "489:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "494:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "497:       self.assertEqual(sess.run(peek_xf, feed_dict={pei: 0}), {'x': 1, 'f': 2})",
          "499:       self.assertEqual(sess.run(peek_v, feed_dict={pei: 0}), {'v': 1})",
          "501:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "504:       self.assertEqual(",
          "505:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, {",
          "510:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "522:       exc_str = (\"Tensor at index '0' for key '0' \" 'has already been removed.')",
          "526:       # Obtain 'v' value associated with key 0",
          "531:               'v': 1",
          "532:           }])",
          "533:       # 0 complete and 1 incomplete entry",
          "536:       # Now complete key 1 with tuple entry v",
          "537:       sess.run(stage_v, feed_dict={pi: 1, v: 1})",
          "538:       # 1 complete and 1 incomplete entry",
          "541:       # Pop without key to obtain 'x' and 'f' values associated with key 1",
          "543:       # still 1 complete and 1 incomplete entry",
          "545:       # We can now obtain 'x' and 'f' values associated with key 1",
          "550:               'v': 1",
          "551:           }])",
          "552:       # Nothing is left",
          "555:   @test_util.run_deprecated_v1",
          "556:   def testPartialIndexGets(self):",
          "558:       with ops.device('/cpu:0'):",
          "559:         x = array_ops.placeholder(dtypes.float32)",
          "560:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "524:       self.assertTrue(exc_str in cm.exception.message)",
          "527:       self.assertTrue(",
          "528:           sess.run([key_v, get_v], feed_dict={",
          "529:               gi: 0",
          "530:           }) == [0, {",
          "534:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "539:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "542:       self.assertTrue(sess.run([pop_key_xf, pop_xf]) == [1, {'x': 1, 'f': 2}])",
          "544:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "546:       self.assertTrue(",
          "547:           sess.run([pop_key_v, pop_v], feed_dict={",
          "548:               pi: 1",
          "549:           }) == [1, {",
          "553:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "557:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "518:       self.assertIn(exc_str, cm.exception.message)",
          "521:       self.assertEqual(",
          "522:           sess.run([key_v, get_v], feed_dict={gi: 0}), [0, {",
          "526:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "531:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "534:       self.assertEqual(sess.run([pop_key_xf, pop_xf]), [1, {'x': 1, 'f': 2}])",
          "536:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "538:       self.assertEqual(",
          "539:           sess.run([pop_key_v, pop_v], feed_dict={pi: 1}), [1, {",
          "543:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "547:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "572:         size = stager.size()",
          "573:         isize = stager.incomplete_size()",
          "578:       # Stage complete tuple",
          "579:       sess.run(stage_xvf, feed_dict={pi: 0, x: 1, f: 2, v: 3})",
          "583:       # Partial get using indices",
          "589:       # Still some of key 0 left",
          "592:       # Partial get of remaining index",
          "595:       # All gone",
          "599: if __name__ == '__main__':",
          "",
          "[Removed Lines]",
          "575:     G.finalize()",
          "577:     with self.session(graph=G) as sess:",
          "581:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "584:       self.assertTrue(",
          "585:           sess.run([key_xf, get_xf], feed_dict={",
          "586:               gi: 0",
          "587:           }) == [0, [1, 2]])",
          "590:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "593:       self.assertTrue(sess.run([key_v, get_v], feed_dict={gi: 0}) == [0, [3]])",
          "596:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "",
          "[Added Lines]",
          "565:     g.finalize()",
          "567:     with self.session(graph=g) as sess:",
          "571:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "574:       self.assertEqual(",
          "575:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, [1, 2]])",
          "578:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "581:       self.assertEqual(sess.run([key_v, get_v], feed_dict={gi: 0}), [0, [3]])",
          "584:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "586:   @test_util.run_deprecated_v1",
          "587:   def testNonScalarKeyOrderedMap(self):",
          "588:     with ops.Graph().as_default() as g:",
          "589:       x = array_ops.placeholder(dtypes.float32)",
          "590:       v = 2. * (array_ops.zeros([128, 128]) + x)",
          "591:       t = data_flow_ops.gen_data_flow_ops.ordered_map_stage(",
          "592:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
          "593:           indices=np.array([[6]]),",
          "594:           values=[x, v],",
          "595:           dtypes=[dtypes.int64],",
          "596:           capacity=0,",
          "597:           memory_limit=0,",
          "598:           container='container1',",
          "599:           shared_name='',",
          "600:           name=None)",
          "602:     g.finalize()",
          "604:     with self.session(graph=g) as sess:",
          "605:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "606:                                   'key must be an int64 scalar'):",
          "607:         sess.run(t, feed_dict={x: 1})",
          "609:   @test_util.run_deprecated_v1",
          "610:   def testNonScalarKeyUnorderedMap(self):",
          "611:     with ops.Graph().as_default() as g:",
          "612:       x = array_ops.placeholder(dtypes.float32)",
          "613:       v = 2. * (array_ops.zeros([128, 128]) + x)",
          "614:       t = data_flow_ops.gen_data_flow_ops.map_stage(",
          "615:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
          "616:           indices=np.array([[6]]),",
          "617:           values=[x, v],",
          "618:           dtypes=[dtypes.int64],",
          "619:           capacity=0,",
          "620:           memory_limit=0,",
          "621:           container='container1',",
          "622:           shared_name='',",
          "623:           name=None)",
          "625:     g.finalize()",
          "627:     with self.session(graph=g) as sess:",
          "628:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "629:                                   'key must be an int64 scalar'):",
          "630:         sess.run(t, feed_dict={x: 1})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0953c835645d70521ee8d3d19602553516494c0",
      "candidate_info": {
        "commit_hash": "d0953c835645d70521ee8d3d19602553516494c0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d0953c835645d70521ee8d3d19602553516494c0",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc",
          "tensorflow/python/kernel_tests/map_stage_op_test.py"
        ],
        "message": "Add a check for Key being scalar tensor for MapStage and OrderedMapStage ops.\n\nAccording to documentation[1][2], key must be int64 value, but this wasn't enforced and the ops would fail with check failure for non-scalar key value.\n\n[1]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/ordered-map-stage\n[2]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/map-stage\n\nPiperOrigin-RevId: 413822112\nChange-Id: I9d118faf990e6361900aa32272eff486ad9f0e2e",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc",
          "tensorflow/python/kernel_tests/map_stage_op_test.py||tensorflow/python/kernel_tests/map_stage_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:     OP_REQUIRES(ctx, key_tensor->NumElements() > 0,",
          "534:                 errors::InvalidArgument(\"key must not be empty\"));",
          "537:     Tensor key(*key_tensor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     OP_REQUIRES(ctx, key_tensor->NumElements() == 1,",
          "537:                 errors::InvalidArgument(",
          "538:                     \"key must be an int64 scalar, got tensor with shape: \",",
          "539:                     key_tensor->shape()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/map_stage_op_test.py||tensorflow/python/kernel_tests/map_stage_op_test.py": [
          "File: tensorflow/python/kernel_tests/map_stage_op_test.py -> tensorflow/python/kernel_tests/map_stage_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # See the License for the specific language governing permissions and",
          "13: # limitations under the License.",
          "14: # ==============================================================================",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import ops",
          "22: from tensorflow.python.framework import test_util",
          "23: from tensorflow.python.ops import array_ops",
          "",
          "[Removed Lines]",
          "15: from __future__ import absolute_import",
          "16: from __future__ import division",
          "17: from __future__ import print_function",
          "19: from tensorflow.python.framework import errors",
          "",
          "[Added Lines]",
          "15: import numpy as np",
          "17: from tensorflow.python.framework import constant_op",
          "19: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   @test_util.run_deprecated_v1",
          "34:   def testSimple(self):",
          "36:       with ops.device('/cpu:0'):",
          "37:         x = array_ops.placeholder(dtypes.float32)",
          "38:         pi = array_ops.placeholder(dtypes.int64)",
          "",
          "[Removed Lines]",
          "35:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "34:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         k, y = stager.get(gi)",
          "45:         y = math_ops.reduce_max(math_ops.matmul(y, y))",
          "50:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "51:       for i in range(10):",
          "52:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "47:     G.finalize()",
          "49:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "46:     g.finalize()",
          "48:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:   @test_util.run_deprecated_v1",
          "56:   def testMultiple(self):",
          "58:       with ops.device('/cpu:0'):",
          "59:         x = array_ops.placeholder(dtypes.float32)",
          "60:         pi = array_ops.placeholder(dtypes.int64)",
          "",
          "[Removed Lines]",
          "57:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "56:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:         k, (z, y) = stager.get(gi)",
          "67:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
          "72:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "73:       for i in range(10):",
          "74:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "69:     G.finalize()",
          "71:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "68:     g.finalize()",
          "70:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "78:   @test_util.run_deprecated_v1",
          "79:   def testDictionary(self):",
          "81:       with ops.device('/cpu:0'):",
          "82:         x = array_ops.placeholder(dtypes.float32)",
          "83:         pi = array_ops.placeholder(dtypes.int64)",
          "84:         gi = array_ops.placeholder(dtypes.int64)",
          "85:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "86:       with ops.device(test.gpu_device_name()):",
          "91:         stage = stager.put(pi, {'x': x, 'v': v})",
          "92:         key, ret = stager.get(gi)",
          "93:         z = ret['x']",
          "94:         y = ret['v']",
          "95:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
          "100:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "101:       for i in range(10):",
          "102:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "80:     with ops.Graph().as_default() as G:",
          "87:         stager = data_flow_ops.MapStagingArea(",
          "88:             [dtypes.float32, dtypes.float32],",
          "89:             shapes=[[], [128, 128]],",
          "90:             names=['x', 'v'])",
          "97:     G.finalize()",
          "99:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "79:     with ops.Graph().as_default() as g:",
          "86:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
          "87:                                               shapes=[[], [128, 128]],",
          "88:                                               names=['x', 'v'])",
          "95:     g.finalize()",
          "97:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "106:   def testColocation(self):",
          "107:     gpu_dev = test.gpu_device_name()",
          "110:       with ops.device('/cpu:0'):",
          "111:         x = array_ops.placeholder(dtypes.float32)",
          "112:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "",
          "[Removed Lines]",
          "109:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "107:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "123:         self.assertEqual(y.device, '/device:CPU:0')",
          "124:         self.assertEqual(z[0].device, '/device:CPU:0')",
          "128:   @test_util.run_deprecated_v1",
          "129:   def testPeek(self):",
          "131:       with ops.device('/cpu:0'):",
          "132:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "133:         pi = array_ops.placeholder(dtypes.int64)",
          "134:         gi = array_ops.placeholder(dtypes.int64)",
          "135:         p = array_ops.placeholder(dtypes.int32, name='p')",
          "136:       with ops.device(test.gpu_device_name()):",
          "141:         stage = stager.put(pi, [x], [0])",
          "142:         peek = stager.peek(gi)",
          "143:         size = stager.size()",
          "147:     n = 10",
          "150:       for i in range(n):",
          "151:         sess.run(stage, feed_dict={x: i, pi: i})",
          "153:       for i in range(n):",
          "158:   @test_util.run_deprecated_v1",
          "159:   def testSizeAndClear(self):",
          "161:       with ops.device('/cpu:0'):",
          "162:         x = array_ops.placeholder(dtypes.float32, name='x')",
          "163:         pi = array_ops.placeholder(dtypes.int64)",
          "164:         gi = array_ops.placeholder(dtypes.int64)",
          "165:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "166:       with ops.device(test.gpu_device_name()):",
          "171:         stage = stager.put(pi, {'x': x, 'v': v})",
          "172:         size = stager.size()",
          "173:         clear = stager.clear()",
          "178:       sess.run(stage, feed_dict={x: -1, pi: 3})",
          "179:       self.assertEqual(sess.run(size), 1)",
          "180:       sess.run(stage, feed_dict={x: -1, pi: 1})",
          "",
          "[Removed Lines]",
          "126:     G.finalize()",
          "130:     with ops.Graph().as_default() as G:",
          "137:         stager = data_flow_ops.MapStagingArea(",
          "138:             [",
          "139:                 dtypes.int32,",
          "140:             ], shapes=[[]])",
          "145:     G.finalize()",
          "149:     with self.session(graph=G) as sess:",
          "154:         self.assertTrue(sess.run(peek, feed_dict={gi: i})[0] == i)",
          "156:       self.assertTrue(sess.run(size) == 10)",
          "160:     with ops.Graph().as_default() as G:",
          "167:         stager = data_flow_ops.MapStagingArea(",
          "168:             [dtypes.float32, dtypes.float32],",
          "169:             shapes=[[], [128, 128]],",
          "170:             names=['x', 'v'])",
          "175:     G.finalize()",
          "177:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "124:     g.finalize()",
          "128:     with ops.Graph().as_default() as g:",
          "135:         stager = data_flow_ops.MapStagingArea([",
          "136:             dtypes.int32,",
          "137:         ], shapes=[[]])",
          "142:     g.finalize()",
          "146:     with self.session(graph=g) as sess:",
          "151:         self.assertEqual(sess.run(peek, feed_dict={gi: i})[0], i)",
          "153:       self.assertEqual(sess.run(size), 10)",
          "157:     with ops.Graph().as_default() as g:",
          "164:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
          "165:                                               shapes=[[], [128, 128]],",
          "166:                                               names=['x', 'v'])",
          "171:     g.finalize()",
          "173:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "186:   def testCapacity(self):",
          "187:     capacity = 3",
          "190:       with ops.device('/cpu:0'):",
          "191:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "192:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "193:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "194:       with ops.device(test.gpu_device_name()):",
          "200:       stage = stager.put(pi, [x], [0])",
          "201:       get = stager.get()",
          "202:       size = stager.size()",
          "206:     from six.moves import queue as Queue",
          "207:     import threading",
          "",
          "[Removed Lines]",
          "189:     with ops.Graph().as_default() as G:",
          "195:         stager = data_flow_ops.MapStagingArea(",
          "196:             [",
          "197:                 dtypes.int32,",
          "198:             ], capacity=capacity, shapes=[[]])",
          "204:     G.finalize()",
          "",
          "[Added Lines]",
          "185:     with ops.Graph().as_default() as g:",
          "191:         stager = data_flow_ops.MapStagingArea([",
          "192:             dtypes.int32,",
          "193:         ],",
          "194:                                               capacity=capacity,",
          "195:                                               shapes=[[]])",
          "201:     g.finalize()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "209:     queue = Queue.Queue()",
          "210:     n = 8",
          "213:       # Stage data in a separate thread which will block",
          "214:       # when it hits the staging area's capacity and thus",
          "215:       # not fill the queue with n tokens",
          "",
          "[Removed Lines]",
          "212:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "209:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "238:                                              capacity))",
          "240:       # Should have capacity elements in the staging area",
          "243:       # Clear the staging area completely",
          "244:       for i in range(n):",
          "245:         sess.run(get)",
          "249:   @test_util.run_deprecated_v1",
          "250:   def testMemoryLimit(self):",
          "",
          "[Removed Lines]",
          "241:       self.assertTrue(sess.run(size) == capacity)",
          "247:       self.assertTrue(sess.run(size) == 0)",
          "",
          "[Added Lines]",
          "238:       self.assertEqual(sess.run(size), capacity)",
          "244:       self.assertEqual(sess.run(size), 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "252:     chunk = 200 * 1024  # 256K",
          "253:     capacity = memory_limit // chunk",
          "256:       with ops.device('/cpu:0'):",
          "257:         x = array_ops.placeholder(dtypes.uint8, name='x')",
          "258:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "259:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "260:       with ops.device(test.gpu_device_name()):",
          "263:         stage = stager.put(pi, [x], [0])",
          "264:         get = stager.get()",
          "265:         size = stager.size()",
          "269:     from six.moves import queue as Queue",
          "270:     import threading",
          "273:     queue = Queue.Queue()",
          "274:     n = 8",
          "277:       # Stage data in a separate thread which will block",
          "278:       # when it hits the staging area's capacity and thus",
          "279:       # not fill the queue with n tokens",
          "",
          "[Removed Lines]",
          "255:     with ops.Graph().as_default() as G:",
          "261:         stager = data_flow_ops.MapStagingArea(",
          "262:             [dtypes.uint8], memory_limit=memory_limit, shapes=[[]])",
          "267:     G.finalize()",
          "271:     import numpy as np",
          "276:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "252:     with ops.Graph().as_default() as g:",
          "258:         stager = data_flow_ops.MapStagingArea([dtypes.uint8],",
          "259:                                               memory_limit=memory_limit,",
          "260:                                               shapes=[[]])",
          "265:     g.finalize()",
          "273:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "303:                                              capacity))",
          "305:       # Should have capacity elements in the staging area",
          "308:       # Clear the staging area completely",
          "309:       for i in range(n):",
          "310:         sess.run(get)",
          "314:   @test_util.run_deprecated_v1",
          "315:   def testOrdering(self):",
          "316:     import six",
          "317:     import random",
          "320:       with ops.device('/cpu:0'):",
          "321:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "322:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "323:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "324:       with ops.device(test.gpu_device_name()):",
          "329:         stage = stager.put(pi, [x], [0])",
          "330:         get = stager.get()",
          "331:         size = stager.size()",
          "335:     n = 10",
          "338:       # Keys n-1..0",
          "339:       keys = list(reversed(six.moves.range(n)))",
          "341:       for i in keys:",
          "342:         sess.run(stage, feed_dict={pi: i, x: i})",
          "346:       # Check that key, values come out in ascending order",
          "347:       for i, k in enumerate(reversed(keys)):",
          "348:         get_key, values = sess.run(get)",
          "349:         self.assertTrue(i == k == get_key == values)",
          "353:   @test_util.run_deprecated_v1",
          "354:   def testPartialDictInsert(self):",
          "356:       with ops.device('/cpu:0'):",
          "357:         x = array_ops.placeholder(dtypes.float32)",
          "358:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "306:       self.assertTrue(sess.run(size) == capacity)",
          "312:       self.assertTrue(sess.run(size) == 0)",
          "319:     with ops.Graph().as_default() as G:",
          "325:         stager = data_flow_ops.MapStagingArea(",
          "326:             [",
          "327:                 dtypes.int32,",
          "328:             ], shapes=[[]], ordered=True)",
          "333:     G.finalize()",
          "337:     with self.session(graph=G) as sess:",
          "344:       self.assertTrue(sess.run(size) == n)",
          "351:       self.assertTrue(sess.run(size) == 0)",
          "355:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "303:       self.assertEqual(sess.run(size), capacity)",
          "309:       self.assertEqual(sess.run(size), 0)",
          "316:     with ops.Graph().as_default() as g:",
          "322:         stager = data_flow_ops.MapStagingArea([",
          "323:             dtypes.int32,",
          "324:         ],",
          "325:                                               shapes=[[]],",
          "326:                                               ordered=True)",
          "331:     g.finalize()",
          "335:     with self.session(graph=g) as sess:",
          "342:       self.assertEqual(sess.run(size), n)",
          "349:       self.assertEqual(sess.run(size), 0)",
          "353:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "370:         size = stager.size()",
          "371:         isize = stager.incomplete_size()",
          "376:       # 0 complete and incomplete entries",
          "378:       # Stage key 0, x and f tuple entries",
          "379:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "381:       # Stage key 1, x and f tuple entries",
          "382:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "385:       # Now complete key 0 with tuple entry v",
          "386:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "387:       # 1 complete and 1 incomplete entry",
          "389:       # We can now obtain tuple associated with key 0",
          "394:               'x': 1,",
          "395:               'f': 2,",
          "396:               'v': 1",
          "397:           }])",
          "399:       # 0 complete and 1 incomplete entry",
          "401:       # Now complete key 1 with tuple entry v",
          "402:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
          "403:       # We can now obtain tuple associated with key 1",
          "408:               'x': 1,",
          "409:               'f': 2,",
          "410:               'v': 3",
          "",
          "[Removed Lines]",
          "373:     G.finalize()",
          "375:     with self.session(graph=G) as sess:",
          "377:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "380:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "383:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "388:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "390:       self.assertTrue(",
          "391:           sess.run([key, ret], feed_dict={",
          "392:               gi: 0",
          "393:           }) == [0, {",
          "400:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "404:       self.assertTrue(",
          "405:           sess.run([key, ret], feed_dict={",
          "406:               gi: 1",
          "407:           }) == [1, {",
          "",
          "[Added Lines]",
          "371:     g.finalize()",
          "373:     with self.session(graph=g) as sess:",
          "375:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "378:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "381:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "386:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "388:       self.assertEqual(",
          "389:           sess.run([key, ret], feed_dict={gi: 0}),",
          "390:           [0, {",
          "397:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "401:       self.assertEqual(",
          "402:           sess.run([key, ret], feed_dict={gi: 1}),",
          "403:           [1, {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "413:   @test_util.run_deprecated_v1",
          "414:   def testPartialIndexInsert(self):",
          "416:       with ops.device('/cpu:0'):",
          "417:         x = array_ops.placeholder(dtypes.float32)",
          "418:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "415:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "411:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "428:         size = stager.size()",
          "429:         isize = stager.incomplete_size()",
          "434:       # 0 complete and incomplete entries",
          "436:       # Stage key 0, x and f tuple entries",
          "437:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "439:       # Stage key 1, x and f tuple entries",
          "440:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "443:       # Now complete key 0 with tuple entry v",
          "444:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "445:       # 1 complete and 1 incomplete entry",
          "447:       # We can now obtain tuple associated with key 0",
          "450:       # 0 complete and 1 incomplete entry",
          "452:       # Now complete key 1 with tuple entry v",
          "453:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
          "454:       # We can now obtain tuple associated with key 1",
          "457:   @test_util.run_deprecated_v1",
          "458:   def testPartialDictGetsAndPeeks(self):",
          "460:       with ops.device('/cpu:0'):",
          "461:         x = array_ops.placeholder(dtypes.float32)",
          "462:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "431:     G.finalize()",
          "433:     with self.session(graph=G) as sess:",
          "435:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "438:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "441:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "446:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "448:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 0}) == [0, [1, 1, 2]])",
          "451:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "455:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 1}) == [1, [1, 3, 2]])",
          "459:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "427:     g.finalize()",
          "429:     with self.session(graph=g) as sess:",
          "431:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "434:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "437:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "442:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "444:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 0}), [0, [1, 1, 2]])",
          "447:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "451:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 1}), [1, [1, 3, 2]])",
          "455:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "480:         size = stager.size()",
          "481:         isize = stager.incomplete_size()",
          "486:       # 0 complete and incomplete entries",
          "488:       # Stage key 0, x and f tuple entries",
          "489:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "491:       # Stage key 1, x and f tuple entries",
          "492:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "495:       # Now complete key 0 with tuple entry v",
          "496:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "497:       # 1 complete and 1 incomplete entry",
          "500:       # We can now peek at 'x' and 'f' values associated with key 0",
          "502:       # Peek at 'v' value associated with key 0",
          "504:       # 1 complete and 1 incomplete entry",
          "507:       # We can now obtain 'x' and 'f' values associated with key 0",
          "512:               'x': 1,",
          "513:               'f': 2",
          "514:           }])",
          "515:       # Still have 1 complete and 1 incomplete entry",
          "518:       # We can no longer get 'x' and 'f' from key 0",
          "519:       with self.assertRaises(errors.InvalidArgumentError) as cm:",
          "",
          "[Removed Lines]",
          "483:     G.finalize()",
          "485:     with self.session(graph=G) as sess:",
          "487:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "490:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "493:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "498:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "501:       self.assertTrue(sess.run(peek_xf, feed_dict={pei: 0}) == {'x': 1, 'f': 2})",
          "503:       self.assertTrue(sess.run(peek_v, feed_dict={pei: 0}) == {'v': 1})",
          "505:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "508:       self.assertTrue(",
          "509:           sess.run([key_xf, get_xf], feed_dict={",
          "510:               gi: 0",
          "511:           }) == [0, {",
          "516:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "",
          "[Added Lines]",
          "479:     g.finalize()",
          "481:     with self.session(graph=g) as sess:",
          "483:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "486:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "489:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "494:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "497:       self.assertEqual(sess.run(peek_xf, feed_dict={pei: 0}), {'x': 1, 'f': 2})",
          "499:       self.assertEqual(sess.run(peek_v, feed_dict={pei: 0}), {'v': 1})",
          "501:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "504:       self.assertEqual(",
          "505:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, {",
          "510:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "522:       exc_str = (\"Tensor at index '0' for key '0' \" 'has already been removed.')",
          "526:       # Obtain 'v' value associated with key 0",
          "531:               'v': 1",
          "532:           }])",
          "533:       # 0 complete and 1 incomplete entry",
          "536:       # Now complete key 1 with tuple entry v",
          "537:       sess.run(stage_v, feed_dict={pi: 1, v: 1})",
          "538:       # 1 complete and 1 incomplete entry",
          "541:       # Pop without key to obtain 'x' and 'f' values associated with key 1",
          "543:       # still 1 complete and 1 incomplete entry",
          "545:       # We can now obtain 'x' and 'f' values associated with key 1",
          "550:               'v': 1",
          "551:           }])",
          "552:       # Nothing is left",
          "555:   @test_util.run_deprecated_v1",
          "556:   def testPartialIndexGets(self):",
          "558:       with ops.device('/cpu:0'):",
          "559:         x = array_ops.placeholder(dtypes.float32)",
          "560:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "524:       self.assertTrue(exc_str in cm.exception.message)",
          "527:       self.assertTrue(",
          "528:           sess.run([key_v, get_v], feed_dict={",
          "529:               gi: 0",
          "530:           }) == [0, {",
          "534:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "539:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "542:       self.assertTrue(sess.run([pop_key_xf, pop_xf]) == [1, {'x': 1, 'f': 2}])",
          "544:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "546:       self.assertTrue(",
          "547:           sess.run([pop_key_v, pop_v], feed_dict={",
          "548:               pi: 1",
          "549:           }) == [1, {",
          "553:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "557:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "518:       self.assertIn(exc_str, cm.exception.message)",
          "521:       self.assertEqual(",
          "522:           sess.run([key_v, get_v], feed_dict={gi: 0}), [0, {",
          "526:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "531:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "534:       self.assertEqual(sess.run([pop_key_xf, pop_xf]), [1, {'x': 1, 'f': 2}])",
          "536:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "538:       self.assertEqual(",
          "539:           sess.run([pop_key_v, pop_v], feed_dict={pi: 1}), [1, {",
          "543:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "547:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "572:         size = stager.size()",
          "573:         isize = stager.incomplete_size()",
          "578:       # Stage complete tuple",
          "579:       sess.run(stage_xvf, feed_dict={pi: 0, x: 1, f: 2, v: 3})",
          "583:       # Partial get using indices",
          "589:       # Still some of key 0 left",
          "592:       # Partial get of remaining index",
          "595:       # All gone",
          "599: if __name__ == '__main__':",
          "",
          "[Removed Lines]",
          "575:     G.finalize()",
          "577:     with self.session(graph=G) as sess:",
          "581:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "584:       self.assertTrue(",
          "585:           sess.run([key_xf, get_xf], feed_dict={",
          "586:               gi: 0",
          "587:           }) == [0, [1, 2]])",
          "590:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "593:       self.assertTrue(sess.run([key_v, get_v], feed_dict={gi: 0}) == [0, [3]])",
          "596:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "",
          "[Added Lines]",
          "565:     g.finalize()",
          "567:     with self.session(graph=g) as sess:",
          "571:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "574:       self.assertEqual(",
          "575:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, [1, 2]])",
          "578:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "581:       self.assertEqual(sess.run([key_v, get_v], feed_dict={gi: 0}), [0, [3]])",
          "584:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "586:   @test_util.run_deprecated_v1",
          "587:   def testNonScalarKeyOrderedMap(self):",
          "588:     with ops.Graph().as_default() as g:",
          "589:       x = array_ops.placeholder(dtypes.float32)",
          "590:       v = 2. * (array_ops.zeros([128, 128]) + x)",
          "591:       t = data_flow_ops.gen_data_flow_ops.ordered_map_stage(",
          "592:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
          "593:           indices=np.array([[6]]),",
          "594:           values=[x, v],",
          "595:           dtypes=[dtypes.int64],",
          "596:           capacity=0,",
          "597:           memory_limit=0,",
          "598:           container='container1',",
          "599:           shared_name='',",
          "600:           name=None)",
          "602:     g.finalize()",
          "604:     with self.session(graph=g) as sess:",
          "605:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "606:                                   'key must be an int64 scalar'):",
          "607:         sess.run(t, feed_dict={x: 1})",
          "609:   @test_util.run_deprecated_v1",
          "610:   def testNonScalarKeyUnorderedMap(self):",
          "611:     with ops.Graph().as_default() as g:",
          "612:       x = array_ops.placeholder(dtypes.float32)",
          "613:       v = 2. * (array_ops.zeros([128, 128]) + x)",
          "614:       t = data_flow_ops.gen_data_flow_ops.map_stage(",
          "615:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
          "616:           indices=np.array([[6]]),",
          "617:           values=[x, v],",
          "618:           dtypes=[dtypes.int64],",
          "619:           capacity=0,",
          "620:           memory_limit=0,",
          "621:           container='container1',",
          "622:           shared_name='',",
          "623:           name=None)",
          "625:     g.finalize()",
          "627:     with self.session(graph=g) as sess:",
          "628:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "629:                                   'key must be an int64 scalar'):",
          "630:         sess.run(t, feed_dict={x: 1})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cf28a8d128493641b59f7e143d44bf2a7b67afc",
      "candidate_info": {
        "commit_hash": "0cf28a8d128493641b59f7e143d44bf2a7b67afc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0cf28a8d128493641b59f7e143d44bf2a7b67afc",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc",
          "tensorflow/python/kernel_tests/map_stage_op_test.py"
        ],
        "message": "Add a check for Key being scalar tensor for MapStage and OrderedMapStage ops.\n\nAccording to documentation[1][2], key must be int64 value, but this wasn't enforced and the ops would fail with check failure for non-scalar key value.\n\n[1]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/ordered-map-stage\n[2]https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/map-stage\n\nPiperOrigin-RevId: 413822112\nChange-Id: I9d118faf990e6361900aa32272eff486ad9f0e2e",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc",
          "tensorflow/python/kernel_tests/map_stage_op_test.py||tensorflow/python/kernel_tests/map_stage_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     OP_REQUIRES(ctx, key_tensor->NumElements() > 0,",
          "537:                 errors::InvalidArgument(\"key must not be empty\"));",
          "540:     Tensor key(*key_tensor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:     OP_REQUIRES(ctx, key_tensor->NumElements() == 1,",
          "540:                 errors::InvalidArgument(",
          "541:                     \"key must be an int64 scalar, got tensor with shape: \",",
          "542:                     key_tensor->shape()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/map_stage_op_test.py||tensorflow/python/kernel_tests/map_stage_op_test.py": [
          "File: tensorflow/python/kernel_tests/map_stage_op_test.py -> tensorflow/python/kernel_tests/map_stage_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # See the License for the specific language governing permissions and",
          "13: # limitations under the License.",
          "14: # ==============================================================================",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import ops",
          "22: from tensorflow.python.framework import test_util",
          "23: from tensorflow.python.ops import array_ops",
          "",
          "[Removed Lines]",
          "15: from __future__ import absolute_import",
          "16: from __future__ import division",
          "17: from __future__ import print_function",
          "19: from tensorflow.python.framework import errors",
          "",
          "[Added Lines]",
          "15: import numpy as np",
          "17: from tensorflow.python.framework import constant_op",
          "19: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   @test_util.run_deprecated_v1",
          "34:   def testSimple(self):",
          "36:       with ops.device('/cpu:0'):",
          "37:         x = array_ops.placeholder(dtypes.float32)",
          "38:         pi = array_ops.placeholder(dtypes.int64)",
          "",
          "[Removed Lines]",
          "35:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "34:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         k, y = stager.get(gi)",
          "45:         y = math_ops.reduce_max(math_ops.matmul(y, y))",
          "50:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "51:       for i in range(10):",
          "52:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "47:     G.finalize()",
          "49:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "46:     g.finalize()",
          "48:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:   @test_util.run_deprecated_v1",
          "56:   def testMultiple(self):",
          "58:       with ops.device('/cpu:0'):",
          "59:         x = array_ops.placeholder(dtypes.float32)",
          "60:         pi = array_ops.placeholder(dtypes.int64)",
          "",
          "[Removed Lines]",
          "57:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "56:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:         k, (z, y) = stager.get(gi)",
          "67:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
          "72:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "73:       for i in range(10):",
          "74:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "69:     G.finalize()",
          "71:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "68:     g.finalize()",
          "70:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "78:   @test_util.run_deprecated_v1",
          "79:   def testDictionary(self):",
          "81:       with ops.device('/cpu:0'):",
          "82:         x = array_ops.placeholder(dtypes.float32)",
          "83:         pi = array_ops.placeholder(dtypes.int64)",
          "84:         gi = array_ops.placeholder(dtypes.int64)",
          "85:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "86:       with ops.device(test.gpu_device_name()):",
          "91:         stage = stager.put(pi, {'x': x, 'v': v})",
          "92:         key, ret = stager.get(gi)",
          "93:         z = ret['x']",
          "94:         y = ret['v']",
          "95:         y = math_ops.reduce_max(z * math_ops.matmul(y, y))",
          "100:       sess.run(stage, feed_dict={x: -1, pi: 0})",
          "101:       for i in range(10):",
          "102:         _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})",
          "",
          "[Removed Lines]",
          "80:     with ops.Graph().as_default() as G:",
          "87:         stager = data_flow_ops.MapStagingArea(",
          "88:             [dtypes.float32, dtypes.float32],",
          "89:             shapes=[[], [128, 128]],",
          "90:             names=['x', 'v'])",
          "97:     G.finalize()",
          "99:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "79:     with ops.Graph().as_default() as g:",
          "86:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
          "87:                                               shapes=[[], [128, 128]],",
          "88:                                               names=['x', 'v'])",
          "95:     g.finalize()",
          "97:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "106:   def testColocation(self):",
          "107:     gpu_dev = test.gpu_device_name()",
          "110:       with ops.device('/cpu:0'):",
          "111:         x = array_ops.placeholder(dtypes.float32)",
          "112:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "",
          "[Removed Lines]",
          "109:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "107:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "123:         self.assertEqual(y.device, '/device:CPU:0')",
          "124:         self.assertEqual(z[0].device, '/device:CPU:0')",
          "128:   @test_util.run_deprecated_v1",
          "129:   def testPeek(self):",
          "131:       with ops.device('/cpu:0'):",
          "132:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "133:         pi = array_ops.placeholder(dtypes.int64)",
          "134:         gi = array_ops.placeholder(dtypes.int64)",
          "135:         p = array_ops.placeholder(dtypes.int32, name='p')",
          "136:       with ops.device(test.gpu_device_name()):",
          "141:         stage = stager.put(pi, [x], [0])",
          "142:         peek = stager.peek(gi)",
          "143:         size = stager.size()",
          "147:     n = 10",
          "150:       for i in range(n):",
          "151:         sess.run(stage, feed_dict={x: i, pi: i})",
          "153:       for i in range(n):",
          "158:   @test_util.run_deprecated_v1",
          "159:   def testSizeAndClear(self):",
          "161:       with ops.device('/cpu:0'):",
          "162:         x = array_ops.placeholder(dtypes.float32, name='x')",
          "163:         pi = array_ops.placeholder(dtypes.int64)",
          "164:         gi = array_ops.placeholder(dtypes.int64)",
          "165:         v = 2. * (array_ops.zeros([128, 128]) + x)",
          "166:       with ops.device(test.gpu_device_name()):",
          "171:         stage = stager.put(pi, {'x': x, 'v': v})",
          "172:         size = stager.size()",
          "173:         clear = stager.clear()",
          "178:       sess.run(stage, feed_dict={x: -1, pi: 3})",
          "179:       self.assertEqual(sess.run(size), 1)",
          "180:       sess.run(stage, feed_dict={x: -1, pi: 1})",
          "",
          "[Removed Lines]",
          "126:     G.finalize()",
          "130:     with ops.Graph().as_default() as G:",
          "137:         stager = data_flow_ops.MapStagingArea(",
          "138:             [",
          "139:                 dtypes.int32,",
          "140:             ], shapes=[[]])",
          "145:     G.finalize()",
          "149:     with self.session(graph=G) as sess:",
          "154:         self.assertTrue(sess.run(peek, feed_dict={gi: i})[0] == i)",
          "156:       self.assertTrue(sess.run(size) == 10)",
          "160:     with ops.Graph().as_default() as G:",
          "167:         stager = data_flow_ops.MapStagingArea(",
          "168:             [dtypes.float32, dtypes.float32],",
          "169:             shapes=[[], [128, 128]],",
          "170:             names=['x', 'v'])",
          "175:     G.finalize()",
          "177:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "124:     g.finalize()",
          "128:     with ops.Graph().as_default() as g:",
          "135:         stager = data_flow_ops.MapStagingArea([",
          "136:             dtypes.int32,",
          "137:         ], shapes=[[]])",
          "142:     g.finalize()",
          "146:     with self.session(graph=g) as sess:",
          "151:         self.assertEqual(sess.run(peek, feed_dict={gi: i})[0], i)",
          "153:       self.assertEqual(sess.run(size), 10)",
          "157:     with ops.Graph().as_default() as g:",
          "164:         stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],",
          "165:                                               shapes=[[], [128, 128]],",
          "166:                                               names=['x', 'v'])",
          "171:     g.finalize()",
          "173:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "186:   def testCapacity(self):",
          "187:     capacity = 3",
          "190:       with ops.device('/cpu:0'):",
          "191:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "192:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "193:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "194:       with ops.device(test.gpu_device_name()):",
          "200:       stage = stager.put(pi, [x], [0])",
          "201:       get = stager.get()",
          "202:       size = stager.size()",
          "206:     from six.moves import queue as Queue",
          "207:     import threading",
          "",
          "[Removed Lines]",
          "189:     with ops.Graph().as_default() as G:",
          "195:         stager = data_flow_ops.MapStagingArea(",
          "196:             [",
          "197:                 dtypes.int32,",
          "198:             ], capacity=capacity, shapes=[[]])",
          "204:     G.finalize()",
          "",
          "[Added Lines]",
          "185:     with ops.Graph().as_default() as g:",
          "191:         stager = data_flow_ops.MapStagingArea([",
          "192:             dtypes.int32,",
          "193:         ],",
          "194:                                               capacity=capacity,",
          "195:                                               shapes=[[]])",
          "201:     g.finalize()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "209:     queue = Queue.Queue()",
          "210:     n = 8",
          "213:       # Stage data in a separate thread which will block",
          "214:       # when it hits the staging area's capacity and thus",
          "215:       # not fill the queue with n tokens",
          "",
          "[Removed Lines]",
          "212:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "209:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "238:                                              capacity))",
          "240:       # Should have capacity elements in the staging area",
          "243:       # Clear the staging area completely",
          "244:       for i in range(n):",
          "245:         sess.run(get)",
          "249:   @test_util.run_deprecated_v1",
          "250:   def testMemoryLimit(self):",
          "",
          "[Removed Lines]",
          "241:       self.assertTrue(sess.run(size) == capacity)",
          "247:       self.assertTrue(sess.run(size) == 0)",
          "",
          "[Added Lines]",
          "238:       self.assertEqual(sess.run(size), capacity)",
          "244:       self.assertEqual(sess.run(size), 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "252:     chunk = 200 * 1024  # 256K",
          "253:     capacity = memory_limit // chunk",
          "256:       with ops.device('/cpu:0'):",
          "257:         x = array_ops.placeholder(dtypes.uint8, name='x')",
          "258:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "259:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "260:       with ops.device(test.gpu_device_name()):",
          "263:         stage = stager.put(pi, [x], [0])",
          "264:         get = stager.get()",
          "265:         size = stager.size()",
          "269:     from six.moves import queue as Queue",
          "270:     import threading",
          "273:     queue = Queue.Queue()",
          "274:     n = 8",
          "277:       # Stage data in a separate thread which will block",
          "278:       # when it hits the staging area's capacity and thus",
          "279:       # not fill the queue with n tokens",
          "",
          "[Removed Lines]",
          "255:     with ops.Graph().as_default() as G:",
          "261:         stager = data_flow_ops.MapStagingArea(",
          "262:             [dtypes.uint8], memory_limit=memory_limit, shapes=[[]])",
          "267:     G.finalize()",
          "271:     import numpy as np",
          "276:     with self.session(graph=G) as sess:",
          "",
          "[Added Lines]",
          "252:     with ops.Graph().as_default() as g:",
          "258:         stager = data_flow_ops.MapStagingArea([dtypes.uint8],",
          "259:                                               memory_limit=memory_limit,",
          "260:                                               shapes=[[]])",
          "265:     g.finalize()",
          "273:     with self.session(graph=g) as sess:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "303:                                              capacity))",
          "305:       # Should have capacity elements in the staging area",
          "308:       # Clear the staging area completely",
          "309:       for i in range(n):",
          "310:         sess.run(get)",
          "314:   @test_util.run_deprecated_v1",
          "315:   def testOrdering(self):",
          "316:     import six",
          "317:     import random",
          "320:       with ops.device('/cpu:0'):",
          "321:         x = array_ops.placeholder(dtypes.int32, name='x')",
          "322:         pi = array_ops.placeholder(dtypes.int64, name='pi')",
          "323:         gi = array_ops.placeholder(dtypes.int64, name='gi')",
          "324:       with ops.device(test.gpu_device_name()):",
          "329:         stage = stager.put(pi, [x], [0])",
          "330:         get = stager.get()",
          "331:         size = stager.size()",
          "335:     n = 10",
          "338:       # Keys n-1..0",
          "339:       keys = list(reversed(six.moves.range(n)))",
          "341:       for i in keys:",
          "342:         sess.run(stage, feed_dict={pi: i, x: i})",
          "346:       # Check that key, values come out in ascending order",
          "347:       for i, k in enumerate(reversed(keys)):",
          "348:         get_key, values = sess.run(get)",
          "349:         self.assertTrue(i == k == get_key == values)",
          "353:   @test_util.run_deprecated_v1",
          "354:   def testPartialDictInsert(self):",
          "356:       with ops.device('/cpu:0'):",
          "357:         x = array_ops.placeholder(dtypes.float32)",
          "358:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "306:       self.assertTrue(sess.run(size) == capacity)",
          "312:       self.assertTrue(sess.run(size) == 0)",
          "319:     with ops.Graph().as_default() as G:",
          "325:         stager = data_flow_ops.MapStagingArea(",
          "326:             [",
          "327:                 dtypes.int32,",
          "328:             ], shapes=[[]], ordered=True)",
          "333:     G.finalize()",
          "337:     with self.session(graph=G) as sess:",
          "344:       self.assertTrue(sess.run(size) == n)",
          "351:       self.assertTrue(sess.run(size) == 0)",
          "355:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "303:       self.assertEqual(sess.run(size), capacity)",
          "309:       self.assertEqual(sess.run(size), 0)",
          "316:     with ops.Graph().as_default() as g:",
          "322:         stager = data_flow_ops.MapStagingArea([",
          "323:             dtypes.int32,",
          "324:         ],",
          "325:                                               shapes=[[]],",
          "326:                                               ordered=True)",
          "331:     g.finalize()",
          "335:     with self.session(graph=g) as sess:",
          "342:       self.assertEqual(sess.run(size), n)",
          "349:       self.assertEqual(sess.run(size), 0)",
          "353:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "370:         size = stager.size()",
          "371:         isize = stager.incomplete_size()",
          "376:       # 0 complete and incomplete entries",
          "378:       # Stage key 0, x and f tuple entries",
          "379:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "381:       # Stage key 1, x and f tuple entries",
          "382:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "385:       # Now complete key 0 with tuple entry v",
          "386:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "387:       # 1 complete and 1 incomplete entry",
          "389:       # We can now obtain tuple associated with key 0",
          "394:               'x': 1,",
          "395:               'f': 2,",
          "396:               'v': 1",
          "397:           }])",
          "399:       # 0 complete and 1 incomplete entry",
          "401:       # Now complete key 1 with tuple entry v",
          "402:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
          "403:       # We can now obtain tuple associated with key 1",
          "408:               'x': 1,",
          "409:               'f': 2,",
          "410:               'v': 3",
          "",
          "[Removed Lines]",
          "373:     G.finalize()",
          "375:     with self.session(graph=G) as sess:",
          "377:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "380:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "383:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "388:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "390:       self.assertTrue(",
          "391:           sess.run([key, ret], feed_dict={",
          "392:               gi: 0",
          "393:           }) == [0, {",
          "400:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "404:       self.assertTrue(",
          "405:           sess.run([key, ret], feed_dict={",
          "406:               gi: 1",
          "407:           }) == [1, {",
          "",
          "[Added Lines]",
          "371:     g.finalize()",
          "373:     with self.session(graph=g) as sess:",
          "375:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "378:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "381:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "386:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "388:       self.assertEqual(",
          "389:           sess.run([key, ret], feed_dict={gi: 0}),",
          "390:           [0, {",
          "397:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "401:       self.assertEqual(",
          "402:           sess.run([key, ret], feed_dict={gi: 1}),",
          "403:           [1, {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "413:   @test_util.run_deprecated_v1",
          "414:   def testPartialIndexInsert(self):",
          "416:       with ops.device('/cpu:0'):",
          "417:         x = array_ops.placeholder(dtypes.float32)",
          "418:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "415:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "411:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "428:         size = stager.size()",
          "429:         isize = stager.incomplete_size()",
          "434:       # 0 complete and incomplete entries",
          "436:       # Stage key 0, x and f tuple entries",
          "437:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "439:       # Stage key 1, x and f tuple entries",
          "440:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "443:       # Now complete key 0 with tuple entry v",
          "444:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "445:       # 1 complete and 1 incomplete entry",
          "447:       # We can now obtain tuple associated with key 0",
          "450:       # 0 complete and 1 incomplete entry",
          "452:       # Now complete key 1 with tuple entry v",
          "453:       sess.run(stage_v, feed_dict={pi: 1, v: 3})",
          "454:       # We can now obtain tuple associated with key 1",
          "457:   @test_util.run_deprecated_v1",
          "458:   def testPartialDictGetsAndPeeks(self):",
          "460:       with ops.device('/cpu:0'):",
          "461:         x = array_ops.placeholder(dtypes.float32)",
          "462:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "431:     G.finalize()",
          "433:     with self.session(graph=G) as sess:",
          "435:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "438:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "441:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "446:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "448:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 0}) == [0, [1, 1, 2]])",
          "451:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "455:       self.assertTrue(sess.run([key, ret], feed_dict={gi: 1}) == [1, [1, 3, 2]])",
          "459:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "427:     g.finalize()",
          "429:     with self.session(graph=g) as sess:",
          "431:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "434:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "437:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "442:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "444:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 0}), [0, [1, 1, 2]])",
          "447:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "451:       self.assertEqual(sess.run([key, ret], feed_dict={gi: 1}), [1, [1, 3, 2]])",
          "455:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "480:         size = stager.size()",
          "481:         isize = stager.incomplete_size()",
          "486:       # 0 complete and incomplete entries",
          "488:       # Stage key 0, x and f tuple entries",
          "489:       sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})",
          "491:       # Stage key 1, x and f tuple entries",
          "492:       sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})",
          "495:       # Now complete key 0 with tuple entry v",
          "496:       sess.run(stage_v, feed_dict={pi: 0, v: 1})",
          "497:       # 1 complete and 1 incomplete entry",
          "500:       # We can now peek at 'x' and 'f' values associated with key 0",
          "502:       # Peek at 'v' value associated with key 0",
          "504:       # 1 complete and 1 incomplete entry",
          "507:       # We can now obtain 'x' and 'f' values associated with key 0",
          "512:               'x': 1,",
          "513:               'f': 2",
          "514:           }])",
          "515:       # Still have 1 complete and 1 incomplete entry",
          "518:       # We can no longer get 'x' and 'f' from key 0",
          "519:       with self.assertRaises(errors.InvalidArgumentError) as cm:",
          "",
          "[Removed Lines]",
          "483:     G.finalize()",
          "485:     with self.session(graph=G) as sess:",
          "487:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "490:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "493:       self.assertTrue(sess.run([size, isize]) == [0, 2])",
          "498:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "501:       self.assertTrue(sess.run(peek_xf, feed_dict={pei: 0}) == {'x': 1, 'f': 2})",
          "503:       self.assertTrue(sess.run(peek_v, feed_dict={pei: 0}) == {'v': 1})",
          "505:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "508:       self.assertTrue(",
          "509:           sess.run([key_xf, get_xf], feed_dict={",
          "510:               gi: 0",
          "511:           }) == [0, {",
          "516:       self.assertTrue(sess.run([size, isize]) == [1, 1])",
          "",
          "[Added Lines]",
          "479:     g.finalize()",
          "481:     with self.session(graph=g) as sess:",
          "483:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "486:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "489:       self.assertEqual(sess.run([size, isize]), [0, 2])",
          "494:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "497:       self.assertEqual(sess.run(peek_xf, feed_dict={pei: 0}), {'x': 1, 'f': 2})",
          "499:       self.assertEqual(sess.run(peek_v, feed_dict={pei: 0}), {'v': 1})",
          "501:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "504:       self.assertEqual(",
          "505:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, {",
          "510:       self.assertEqual(sess.run([size, isize]), [1, 1])",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "522:       exc_str = (\"Tensor at index '0' for key '0' \" 'has already been removed.')",
          "526:       # Obtain 'v' value associated with key 0",
          "531:               'v': 1",
          "532:           }])",
          "533:       # 0 complete and 1 incomplete entry",
          "536:       # Now complete key 1 with tuple entry v",
          "537:       sess.run(stage_v, feed_dict={pi: 1, v: 1})",
          "538:       # 1 complete and 1 incomplete entry",
          "541:       # Pop without key to obtain 'x' and 'f' values associated with key 1",
          "543:       # still 1 complete and 1 incomplete entry",
          "545:       # We can now obtain 'x' and 'f' values associated with key 1",
          "550:               'v': 1",
          "551:           }])",
          "552:       # Nothing is left",
          "555:   @test_util.run_deprecated_v1",
          "556:   def testPartialIndexGets(self):",
          "558:       with ops.device('/cpu:0'):",
          "559:         x = array_ops.placeholder(dtypes.float32)",
          "560:         f = array_ops.placeholder(dtypes.float32)",
          "",
          "[Removed Lines]",
          "524:       self.assertTrue(exc_str in cm.exception.message)",
          "527:       self.assertTrue(",
          "528:           sess.run([key_v, get_v], feed_dict={",
          "529:               gi: 0",
          "530:           }) == [0, {",
          "534:       self.assertTrue(sess.run([size, isize]) == [0, 1])",
          "539:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "542:       self.assertTrue(sess.run([pop_key_xf, pop_xf]) == [1, {'x': 1, 'f': 2}])",
          "544:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "546:       self.assertTrue(",
          "547:           sess.run([pop_key_v, pop_v], feed_dict={",
          "548:               pi: 1",
          "549:           }) == [1, {",
          "553:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "557:     with ops.Graph().as_default() as G:",
          "",
          "[Added Lines]",
          "518:       self.assertIn(exc_str, cm.exception.message)",
          "521:       self.assertEqual(",
          "522:           sess.run([key_v, get_v], feed_dict={gi: 0}), [0, {",
          "526:       self.assertEqual(sess.run([size, isize]), [0, 1])",
          "531:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "534:       self.assertEqual(sess.run([pop_key_xf, pop_xf]), [1, {'x': 1, 'f': 2}])",
          "536:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "538:       self.assertEqual(",
          "539:           sess.run([pop_key_v, pop_v], feed_dict={pi: 1}), [1, {",
          "543:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "547:     with ops.Graph().as_default() as g:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "572:         size = stager.size()",
          "573:         isize = stager.incomplete_size()",
          "578:       # Stage complete tuple",
          "579:       sess.run(stage_xvf, feed_dict={pi: 0, x: 1, f: 2, v: 3})",
          "583:       # Partial get using indices",
          "589:       # Still some of key 0 left",
          "592:       # Partial get of remaining index",
          "595:       # All gone",
          "599: if __name__ == '__main__':",
          "",
          "[Removed Lines]",
          "575:     G.finalize()",
          "577:     with self.session(graph=G) as sess:",
          "581:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "584:       self.assertTrue(",
          "585:           sess.run([key_xf, get_xf], feed_dict={",
          "586:               gi: 0",
          "587:           }) == [0, [1, 2]])",
          "590:       self.assertTrue(sess.run([size, isize]) == [1, 0])",
          "593:       self.assertTrue(sess.run([key_v, get_v], feed_dict={gi: 0}) == [0, [3]])",
          "596:       self.assertTrue(sess.run([size, isize]) == [0, 0])",
          "",
          "[Added Lines]",
          "565:     g.finalize()",
          "567:     with self.session(graph=g) as sess:",
          "571:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "574:       self.assertEqual(",
          "575:           sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, [1, 2]])",
          "578:       self.assertEqual(sess.run([size, isize]), [1, 0])",
          "581:       self.assertEqual(sess.run([key_v, get_v], feed_dict={gi: 0}), [0, [3]])",
          "584:       self.assertEqual(sess.run([size, isize]), [0, 0])",
          "586:   @test_util.run_deprecated_v1",
          "587:   def testNonScalarKeyOrderedMap(self):",
          "588:     with ops.Graph().as_default() as g:",
          "589:       x = array_ops.placeholder(dtypes.float32)",
          "590:       v = 2. * (array_ops.zeros([128, 128]) + x)",
          "591:       t = data_flow_ops.gen_data_flow_ops.ordered_map_stage(",
          "592:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
          "593:           indices=np.array([[6]]),",
          "594:           values=[x, v],",
          "595:           dtypes=[dtypes.int64],",
          "596:           capacity=0,",
          "597:           memory_limit=0,",
          "598:           container='container1',",
          "599:           shared_name='',",
          "600:           name=None)",
          "602:     g.finalize()",
          "604:     with self.session(graph=g) as sess:",
          "605:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "606:                                   'key must be an int64 scalar'):",
          "607:         sess.run(t, feed_dict={x: 1})",
          "609:   @test_util.run_deprecated_v1",
          "610:   def testNonScalarKeyUnorderedMap(self):",
          "611:     with ops.Graph().as_default() as g:",
          "612:       x = array_ops.placeholder(dtypes.float32)",
          "613:       v = 2. * (array_ops.zeros([128, 128]) + x)",
          "614:       t = data_flow_ops.gen_data_flow_ops.map_stage(",
          "615:           key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),",
          "616:           indices=np.array([[6]]),",
          "617:           values=[x, v],",
          "618:           dtypes=[dtypes.int64],",
          "619:           capacity=0,",
          "620:           memory_limit=0,",
          "621:           container='container1',",
          "622:           shared_name='',",
          "623:           name=None)",
          "625:     g.finalize()",
          "627:     with self.session(graph=g) as sess:",
          "628:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "629:                                   'key must be an int64 scalar'):",
          "630:         sess.run(t, feed_dict={x: 1})",
          "",
          "---------------"
        ]
      }
    }
  ]
}