{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d69a58119d68653c045e1476af7fad5566bd3cf",
      "candidate_info": {
        "commit_hash": "8d69a58119d68653c045e1476af7fad5566bd3cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d69a58119d68653c045e1476af7fad5566bd3cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/permutations.test",
          "test/walvfs.test"
        ],
        "message": "Improve the coverage of wal.c provided by the \"coverage-wal\" test permutation.\n\nFossilOrigin-Name: 6231485114eb07b258cd0e6e163ca05f7e9cf5664e071808fcb1329b33e4c4f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/permutations.test||test/permutations.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb17fea4b9779fbd3adb6ff9500da83a6ca4fa7cba379aa70074e4328814a7f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     int eCode;",
          "229:     const char *zCode;",
          "230:   } aCode[] = {",
          "236:   };",
          "238:   const char *z;",
          "",
          "[Removed Lines]",
          "231:     { SQLITE_OK,     \"SQLITE_OK\"     },",
          "232:     { SQLITE_ERROR,  \"SQLITE_ERROR\"  },",
          "233:     { SQLITE_IOERR,  \"SQLITE_IOERR\"  },",
          "234:     { SQLITE_LOCKED, \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,   \"SQLITE_BUSY\"   },",
          "",
          "[Added Lines]",
          "231:     { SQLITE_OK,       \"SQLITE_OK\"     },",
          "232:     { SQLITE_ERROR,    \"SQLITE_ERROR\"  },",
          "233:     { SQLITE_IOERR,    \"SQLITE_IOERR\"  },",
          "234:     { SQLITE_LOCKED,   \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:   pFd->pNext = pBuffer->pFile;",
          "866:   pBuffer->pFile = pFd;",
          "867:   pFd->pShm = pBuffer;",
          "869: }",
          "871: static void tvfsAllocPage(TestvfsBuffer *p, int iPage, int pgsz){",
          "",
          "[Removed Lines]",
          "868:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "869:   return rc;",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430: test_suite \"coverage-wal\" -description {",
          "431:   Coverage tests for file wal.c.",
          "432: } -files {",
          "437: }",
          "439: test_suite \"coverage-pager\" -description {",
          "",
          "[Removed Lines]",
          "433:   wal.test       wal2.test     wal3.test       walmode.test",
          "434:   walbak.test    walhook.test  walcrash2.test  walcksum.test",
          "435:   walfault.test  walbig.test   walnoshm.test",
          "436:   wal5.test",
          "",
          "[Added Lines]",
          "433:   wal.test wal2.test wal3.test wal4.test wal5.test",
          "434:   wal64k.test wal6.test wal7.test wal8.test wal9.test",
          "435:   walbak.test walbig.test walblock.test walcksum.test walcrash2.test",
          "436:   walcrash3.test walcrash4.test walcrash.test walfault.test walhook.test",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/lock_common.tcl",
          "19: source $testdir/malloc_common.tcl",
          "20: source $testdir/wal_common.tcl",
          "21: set testprefix walvfs",
          "23: ifcapable !wal {finish_test ; return }",
          "25: db close",
          "26: testvfs tvfs",
          "27: tvfs script xSync",
          "28: tvfs filter xSync",
          "29: set ::sync_count 0",
          "30: proc xSync {method file args} {",
          "31:   if {[file tail $file]==\"test.db-wal\"} {",
          "32:     incr ::sync_count",
          "33:   }",
          "34: }",
          "36: #-------------------------------------------------------------------------",
          "37: # Test that if IOCAP_SEQUENTIAL is set, the wal-header is not synced to",
          "38: # disk immediately after it is written.",
          "39: #",
          "40: sqlite3 db test.db -vfs tvfs",
          "41: do_execsql_test 1.0 {",
          "42:   PRAGMA auto_vacuum = 0;",
          "43:   PRAGMA journal_mode = wal;",
          "44:   PRAGMA synchronous = normal;",
          "45:   CREATE TABLE t1(a, b, c);",
          "46:   INSERT INTO t1 VALUES(1, 2, 3);",
          "47:   INSERT INTO t1 VALUES(4, 5, 6);",
          "48:   INSERT INTO t1 VALUES(7, 8, 9);",
          "49:   PRAGMA wal_checkpoint;",
          "50: } {wal 0 5 5}",
          "52: set ::sync_count 0",
          "53: do_test 1.1 {",
          "54:   execsql { INSERT INTO t1 VALUES(10, 11, 12) }",
          "55:   set ::sync_count",
          "56: } 1",
          "58: db close",
          "59: tvfs devchar sequential",
          "60: sqlite3 db test.db -vfs tvfs",
          "61: do_execsql_test 1.2 {",
          "62:   PRAGMA synchronous = normal;",
          "63:   INSERT INTO t1 VALUES(13, 14, 15);",
          "64:   INSERT INTO t1 VALUES(16, 17, 18);",
          "65:   PRAGMA wal_checkpoint;",
          "66: } {0 4 4}",
          "68: set ::sync_count 0",
          "69: do_test 1.3 {",
          "70:   execsql { INSERT INTO t1 VALUES(10, 11, 12) }",
          "71:   set ::sync_count",
          "72: } 0",
          "74: #-------------------------------------------------------------------------",
          "75: # Test that \"PRAGMA journal_size_limit\" works in wal mode.",
          "76: #",
          "77: reset_db",
          "78: do_execsql_test 2.0 {",
          "79:   PRAGMA journal_size_limit = 10000;",
          "80:   CREATE TABLE t1(x);",
          "81:   PRAGMA journal_mode = wal;",
          "82:   WITH s(i) AS (",
          "83:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "84:   )",
          "85:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "86: } {10000 wal}",
          "87: do_test 2.1 {",
          "88:   expr [file size test.db-wal]>12000",
          "89: } {1}",
          "90: do_test 2.2 {",
          "91:   execsql {",
          "92:     PRAGMA wal_checkpoint;",
          "93:     INSERT INTO t1 VALUES(randomblob(750));",
          "94:   }",
          "95:   file size test.db-wal",
          "96: } {10000}",
          "97: do_test 2.3 {",
          "98:   execsql {",
          "99:     PRAGMA journal_size_limit = 8000;",
          "100:     PRAGMA wal_checkpoint;",
          "101:     INSERT INTO t1 VALUES(randomblob(750));",
          "102:   }",
          "103:   file size test.db-wal",
          "104: } {8000}",
          "106: #-------------------------------------------------------------------------",
          "107: # Test that a checkpoint may be interrupted using sqlite3_interrupt().",
          "108: #",
          "109: reset_db",
          "110: db close",
          "111: sqlite3 db test.db -vfs tvfs",
          "112: tvfs filter {}",
          "114: do_execsql_test 3.0 {",
          "115:   CREATE TABLE t1(x);",
          "116:   PRAGMA journal_mode = wal;",
          "117:   WITH s(i) AS (",
          "118:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "119:   )",
          "120:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "121: } {wal}",
          "123: tvfs filter xWrite",
          "124: tvfs script xWrite",
          "125: set ::cnt 2",
          "126: proc xWrite {method file args} {",
          "127:   if {[file tail $file]==\"test.db\"} {",
          "128:     incr ::cnt -1",
          "129:     if {$::cnt==0} {",
          "130:       sqlite3_interrupt db",
          "131:     }",
          "132:   }",
          "133:   return SQLITE_OK",
          "134: }",
          "136: do_catchsql_test 3.1 {",
          "137:   PRAGMA wal_checkpoint",
          "138: } {1 interrupted}",
          "140: #-------------------------------------------------------------------------",
          "141: #",
          "142: reset_db",
          "143: db close",
          "144: do_test 4.0 {",
          "145:   sqlite3 db test.db -vfs tvfs",
          "146:   execsql {",
          "147:     CREATE TABLE t1(x);",
          "148:     PRAGMA journal_mode = wal;",
          "149:     WITH s(i) AS (",
          "150:         SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "151:     )",
          "152:     INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "153:   } db",
          "154: } {wal}",
          "155: db close",
          "157: tvfs filter xShmMap",
          "158: tvfs script xShmMap",
          "159: proc xShmMap {method file args} {",
          "160:   return SQLITE_READONLY",
          "161: }",
          "162: sqlite3 db test.db -vfs tvfs",
          "163: do_catchsql_test 4.1 {",
          "164:   SELECT count(*) FROM t1",
          "165: } {1 {attempt to write a readonly database}}",
          "167: set ::cnt 5",
          "168: tvfs filter {xShmMap xShmLock}",
          "169: proc xShmMap {method file name args} {",
          "170:   switch -- $method {",
          "171:     xShmMap {  return SQLITE_READONLY }",
          "172:     xShmLock {",
          "173:       if {$args == \"{0 1 lock shared}\"} {",
          "174:         incr ::cnt -1",
          "175:         if {$::cnt>0} { return SQLITE_BUSY }",
          "176:       }",
          "177:     }",
          "178:   }",
          "179:   return SQLITE_OK",
          "180: }",
          "181: do_catchsql_test 4.2 {",
          "182:   SELECT count(*) FROM t1",
          "183: } {1 {attempt to write a readonly database}}",
          "185: db close",
          "186: tvfs delete",
          "187: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5281864f0ca2637ed0d92913709a244046c239a2",
      "candidate_info": {
        "commit_hash": "5281864f0ca2637ed0d92913709a244046c239a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5281864f0ca2637ed0d92913709a244046c239a2",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json105.test"
        ],
        "message": "Extend the json-path mechanism with array indexes of the form \"#\" or \"#-n\" for some positive number \"n\", to reference the end of an array.\n\nFossilOrigin-Name: 35ed68a651f4cf8740597433b0f1c3b345841868022e0904e9f342840ba0e502",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json105.test||test/json105.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       }",
          "1177:       return pNode;",
          "1178:     }",
          "1181:     i = 0;",
          "1182:     j = 1;",
          "1183:     while( safe_isdigit(zPath[j]) ){",
          "1184:       i = i*10 + zPath[j] - '0';",
          "1185:       j++;",
          "1186:     }",
          "1190:     }",
          "1191:     zPath += j + 1;",
          "1192:     j = 1;",
          "1193:     for(;;){",
          "",
          "[Removed Lines]",
          "1179:   }else if( zPath[0]=='[' && safe_isdigit(zPath[1]) ){",
          "1180:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1187:     if( zPath[j]!=']' ){",
          "1189:       return 0;",
          "",
          "[Added Lines]",
          "1179:   }else if( zPath[0]=='[' ){",
          "1186:     if( j<2 || zPath[j]!=']' ){",
          "1187:       if( zPath[1]=='#' ){",
          "1188:         JsonNode *pBase = pRoot;",
          "1189:         int iBase = iRoot;",
          "1190:         if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1191:         for(;;){",
          "1192:           while( j<=pBase->n ){",
          "1193:             if( (pBase[j].jnFlags & JNODE_REMOVE)==0 ) i++;",
          "1194:             j += jsonNodeSize(&pBase[j]);",
          "1195:           }",
          "1196:           if( (pBase->jnFlags & JNODE_APPEND)==0 ) break;",
          "1197:           iBase += pBase->u.iAppend;",
          "1198:           pBase = &pParse->aNode[iBase];",
          "1199:           j = 1;",
          "1200:         }",
          "1201:         j = 2;",
          "1202:         if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){",
          "1203:           unsigned int x = 0;",
          "1204:           j = 3;",
          "1205:           do{",
          "1206:             x = x*10 + zPath[j] - '0';",
          "1207:             j++;",
          "1208:           }while( safe_isdigit(zPath[j]) );",
          "1209:           if( x>i ) return 0;",
          "1210:           i -= x;",
          "1211:         }",
          "1212:         if( zPath[j]!=']' ){",
          "1214:           return 0;",
          "1215:         }",
          "1216:       }else{",
          "1218:         return 0;",
          "1219:       }",
          "1221:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json105.test||test/json105.test": [
          "File: test/json105.test -> test/json105.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-11-22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements tests for \"[#]\" extension to json-path",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix json104",
          "18: ifcapable !json1 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: # This is the example from pages 2 and 3 of RFC-7396",
          "24: db eval {",
          "25:   CREATE TABLE t1(j);",
          "26:   INSERT INTO t1(j) VALUES('{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}');",
          "27: }",
          "28: proc json_extract_test {testnum path result} {",
          "29:   do_execsql_test json105-1.$testnum \"SELECT quote(json_extract(j,$path)) FROM t1\" $result",
          "30: }",
          "31: json_extract_test 10 {'$.b[#]'}   NULL",
          "32: json_extract_test 20 {'$.b[#-1]'} 4",
          "33: json_extract_test 30 {'$.b[#-2]'} {'[2,3]'}",
          "34: json_extract_test 31 {'$.b[#-02]'} {'[2,3]'}",
          "35: json_extract_test 40 {'$.b[#-3]'} 1",
          "36: json_extract_test 50 {'$.b[#-4]'} NULL",
          "37: json_extract_test 60 {'$.b[#-2][#-1]'} 3",
          "38: json_extract_test 70 {'$.b[0]','$.b[#-1]'} {'[1,4]'}",
          "40: json_extract_test 100 {'$.a[#-1]'} NULL",
          "41: json_extract_test 110 {'$.b[#-000001]'} 4",
          "43: proc json_remove_test {testnum path result} {",
          "44:   do_execsql_test json105-2.$testnum \"SELECT quote(json_remove(j,$path)) FROM t1\" $result",
          "45: }",
          "46: json_remove_test 10 {'$.b[#]'}    {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "47: json_remove_test 20 {'$.b[#-0]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "48: json_remove_test 30 {'$.b[#-1]'}  {'{\"a\":1,\"b\":[1,[2,3]],\"c\":99}'}",
          "49: json_remove_test 40 {'$.b[#-2]'}  {'{\"a\":1,\"b\":[1,4],\"c\":99}'}",
          "50: json_remove_test 50 {'$.b[#-3]'}  {'{\"a\":1,\"b\":[[2,3],4],\"c\":99}'}",
          "51: json_remove_test 60 {'$.b[#-4]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "52: json_remove_test 70 {'$.b[#-2][#-1]'}  {'{\"a\":1,\"b\":[1,[2],4],\"c\":99}'}",
          "54: json_remove_test 100 {'$.b[0]','$.b[#-1]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "55: json_remove_test 110 {'$.b[#-1]','$.b[0]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "56: json_remove_test 120 {'$.b[#-1]','$.b[#-2]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "57: json_remove_test 130 {'$.b[#-1]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "58: json_remove_test 140 {'$.b[#-2]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "60: proc json_insert_test {testnum x result} {",
          "61:   do_execsql_test json105-3.$testnum \"SELECT quote(json_insert(j,$x)) FROM t1\" $result",
          "62: }",
          "63: json_insert_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "64: json_insert_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "65: json_insert_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "66:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "67: json_insert_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "68:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "70: proc json_set_test {testnum x result} {",
          "71:   do_execsql_test json105-4.$testnum \"SELECT quote(json_set(j,$x)) FROM t1\" $result",
          "72: }",
          "73: json_set_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "74: json_set_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "75: json_set_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "76:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "77: json_set_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "78:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "79: json_set_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "80: json_set_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "81: json_set_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "82:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "83: json_set_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "84:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "86: proc json_replace_test {testnum x result} {",
          "87:   do_execsql_test json105-5.$testnum \"SELECT quote(json_replace(j,$x)) FROM t1\" $result",
          "88: }",
          "89: json_replace_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "90: json_replace_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "91: json_replace_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "92:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "93: json_replace_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "94:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "95: json_replace_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "96: json_replace_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "97: json_replace_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "98:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "99: json_replace_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "100:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "102: do_catchsql_test json105-6.10 {",
          "103:   SELECT json_extract(j, '$.b[#-]') FROM t1;",
          "104: } {1 {JSON path error near '[#-]'}}",
          "105: do_catchsql_test json105-6.20 {",
          "106:   SELECT json_extract(j, '$.b[#9]') FROM t1;",
          "107: } {1 {JSON path error near '[#9]'}}",
          "108: do_catchsql_test json105-6.30 {",
          "109:   SELECT json_extract(j, '$.b[#+2]') FROM t1;",
          "110: } {1 {JSON path error near '[#+2]'}}",
          "111: do_catchsql_test json105-6.40 {",
          "112:   SELECT json_extract(j, '$.b[#-1') FROM t1;",
          "113: } {1 {JSON path error near '[#-1'}}",
          "114: do_catchsql_test json105-6.50 {",
          "115:   SELECT json_extract(j, '$.b[#-1x]') FROM t1;",
          "116: } {1 {JSON path error near '[#-1x]'}}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98c94e60d0b6a59c63cb0618be8307d34e3b97a6",
      "candidate_info": {
        "commit_hash": "98c94e60d0b6a59c63cb0618be8307d34e3b97a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/98c94e60d0b6a59c63cb0618be8307d34e3b97a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/rowvalue.test"
        ],
        "message": "Previous check-in to fix [b47e3627ecaadbde] was incomplete.  This check-in completes the fix and adds a test cases.\n\nFossilOrigin-Name: c7da1c01f1f239e68c2173ac5748b8c5798271e43bdcee68f51f97cd0ca92bd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ff80a9bf8fee776e2f282d0597215b77d48093ebc71d047ad1457da0582ddbc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "116:     pExpr->flags ^= EP_Commuted;",
          "117:   }",
          "118:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "",
          "[Removed Lines]",
          "114:   if( sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "115:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft) ){",
          "",
          "[Added Lines]",
          "114:   if( pExpr->pLeft->op==TK_VECTOR",
          "115:    || pExpr->pRight->op==TK_VECTOR",
          "116:    || sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "117:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft)",
          "118:   ){",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 5,6);",
          "571: } {1 0 1 0 0 1 0 1}",
          "573: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: # 2019-10-21 Ticket b47e3627ecaadbde",
          "574: #",
          "575: do_execsql_test 23.100 {",
          "576:   DROP TABLE IF EXISTS t0;",
          "577:   CREATE TABLE t0(aa COLLATE NOCASE, bb);",
          "578:   INSERT INTO t0 VALUES('a', 'A');",
          "579:   SELECT (+bb,1) >= (aa, 1), (aa,1)<=(+bb,1) FROM t0;",
          "580:   SELECT 2 FROM t0 WHERE (+bb,1) >= (aa,1);",
          "581:   SELECT 3 FROM t0 WHERE (aa,1) <= (+bb,1);",
          "582: } {0 1 3}",
          "583: do_execsql_test 23.110 {",
          "584:   SELECT (SELECT +bb,1) >= (aa, 1), (aa,1)<=(SELECT +bb,1) FROM t0;",
          "585:   SELECT 2 FROM t0 WHERE (SELECT +bb,1) >= (aa,1);",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e25007602b08bc237d828260514b4fe12b901ad4",
      "candidate_info": {
        "commit_hash": "e25007602b08bc237d828260514b4fe12b901ad4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e25007602b08bc237d828260514b4fe12b901ad4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Do not use the %lld printf conversion in the platform printf() as some legacy platforms do not support it.\n\nFossilOrigin-Name: f8696b60eec0dcacfe92d9a31cbf1436d674140e5447de0cd1c2f52bff6c2be4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eaa34626e497d3af132dd8f13eddbbda89365d369ed43212a5f788175b3d6198",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7396:       utf8_printf(p->out, \"Usage: .filectrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "7397:       rc = 1;",
          "7398:     }else if( isOk==1 ){",
          "7400:     }",
          "7401:   }else",
          "",
          "[Removed Lines]",
          "7399:       raw_printf(p->out, \"%lld\\n\", iRes);",
          "",
          "[Added Lines]",
          "7399:       char zBuf[100];",
          "7400:       sqlite3_snprintf(sizeof(zBuf), zBuf, \"%lld\", iRes);",
          "7401:       raw_printf(p->out, \"%s\\n\", zBuf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
      "candidate_info": {
        "commit_hash": "fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "src/vdbe.c",
          "test/shell1.test",
          "test/vacuum-into.test"
        ],
        "message": "Add support for the VACUUM INTO command.\n\nFossilOrigin-Name: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "test/shell1.test||test/shell1.test",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7bf3c9832bde26b359f4d58ebcf7788c500586d311387d022192ed65a126252",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368: %ifndef SQLITE_OMIT_VACUUM",
          "1369: %ifndef SQLITE_OMIT_ATTACH",
          "1372: %endif  SQLITE_OMIT_ATTACH",
          "1373: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Removed Lines]",
          "1370: cmd ::= VACUUM.                {sqlite3Vacuum(pParse,0);}",
          "1371: cmd ::= VACUUM nm(X).          {sqlite3Vacuum(pParse,&X);}",
          "",
          "[Added Lines]",
          "1370: %type vinto {Expr*}",
          "1371: %destructor vinto {sqlite3ExprDelete(pParse->db, $$);}",
          "1372: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,Y);}",
          "1373: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,Y);}",
          "1374: vinto(A) ::= INTO expr(X).              {A = X;}",
          "1375: vinto(A) ::= .                          {A = 0;}",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3377: #endif",
          "3378:   \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",",
          "3379:   \"       --append            Use the appendvfs\",",
          "3380:   \".bail on|off             Stop after hitting an error.  Default OFF\",",
          "3381:   \".binary on|off           Turn binary output on or off.  Default OFF\",",
          "3382:   \".cd DIRECTORY            Change the working directory to DIRECTORY\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3380:   \"       --async             Write to FILE without a journal and without fsync()\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5840:     sqlite3 *pDest;",
          "5841:     sqlite3_backup *pBackup;",
          "5842:     int j;",
          "5843:     const char *zVfs = 0;",
          "5844:     for(j=1; j<nArg; j++){",
          "5845:       const char *z = azArg[j];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5844:     int bAsync = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5848:         if( strcmp(z, \"-append\")==0 ){",
          "5849:           zVfs = \"apndvfs\";",
          "5850:         }else",
          "5851:         {",
          "5852:           utf8_printf(stderr, \"unknown option: %s\\n\", azArg[j]);",
          "5853:           return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5853:         if( strcmp(z, \"-async\")==0 ){",
          "5854:           bAsync = 1;",
          "5855:         }else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5858:         zDb = zDestFile;",
          "5859:         zDestFile = azArg[j];",
          "5860:       }else{",
          "5862:         return 1;",
          "5863:       }",
          "5864:     }",
          "",
          "[Removed Lines]",
          "5861:         raw_printf(stderr, \"Usage: .backup ?DB? ?--append? FILENAME\\n\");",
          "",
          "[Added Lines]",
          "5866:         raw_printf(stderr, \"Usage: .backup ?DB? ?OPTIONS? FILENAME\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5874:       close_db(pDest);",
          "5875:       return 1;",
          "5876:     }",
          "5877:     open_db(p, 0);",
          "5878:     pBackup = sqlite3_backup_init(pDest, \"main\", p->db, zDb);",
          "5879:     if( pBackup==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5882:     if( bAsync ){",
          "5883:       sqlite3_exec(pDest, \"PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;\",",
          "5884:                    0, 0, 0);",
          "5885:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3985: Index *sqlite3FindIndex(sqlite3*,const char*, const char*);",
          "3986: void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);",
          "3987: void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);",
          "3990: char *sqlite3NameFromToken(sqlite3*, Token*);",
          "3991: int sqlite3ExprCompare(Parse*,Expr*, Expr*, int);",
          "3992: int sqlite3ExprCompareSkip(Expr*, Expr*, int);",
          "",
          "[Removed Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int);",
          "",
          "[Added Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Expr*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, sqlite3_value*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "107:   int iDb = 0;",
          "109:   if( pNm ){",
          "110: #ifndef SQLITE_BUG_COMPATIBLE_20160819",
          "113:     iDb = sqlite3TwoPartName(pParse, pNm, pNm, &pNm);",
          "115: #else",
          "",
          "[Removed Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm){",
          "108:   if( v==0 ) return;",
          "114:     if( iDb<0 ) return;",
          "",
          "[Added Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Expr *pInto){",
          "108:   if( v==0 ) goto build_vacuum_end;",
          "114:     if( iDb<0 ) goto build_vacuum_end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: #endif",
          "124:   }",
          "125:   if( iDb!=1 ){",
          "127:     sqlite3VdbeUsesBtree(v, iDb);",
          "128:   }",
          "129:   return;",
          "130: }",
          "",
          "[Removed Lines]",
          "126:     sqlite3VdbeAddOp1(v, OP_Vacuum, iDb);",
          "135: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){",
          "",
          "[Added Lines]",
          "126:     int iIntoReg = 0;",
          "127:     if( pInto ){",
          "128:       iIntoReg = ++pParse->nMem;",
          "129:       sqlite3ExprCode(pParse, pInto, iIntoReg);",
          "130:     }",
          "131:     sqlite3VdbeAddOp2(v, OP_Vacuum, iDb, iIntoReg);",
          "134: build_vacuum_end:",
          "135:   sqlite3ExprDelete(pParse->db, pInto);",
          "142: int sqlite3RunVacuum(",
          "147: ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     sqlite3SetString(pzErrMsg, db,\"cannot VACUUM - SQL statements in progress\");",
          "156:     return SQLITE_ERROR;",
          "157:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   if( pOut ){",
          "172:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "173:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "174:       return SQLITE_ERROR;",
          "175:     }",
          "176:     zOut = (const char*)sqlite3_value_text(pOut);",
          "177:   }else{",
          "178:     zOut = \"\";",
          "179:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   nDb = db->nDb;",
          "193:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "194:   assert( (db->nDb-1)==nDb );",
          "195:   pDb = &db->aDb[nDb];",
          "196:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "197:   pTemp = pDb->pBt;",
          "198:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "192:   rc = execSql(db, pzErrMsg, \"ATTACH''AS vacuum_db\");",
          "",
          "[Added Lines]",
          "214:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut);",
          "220:   if( pOut ){",
          "221:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "222:     i64 sz = 0;",
          "223:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "224:       rc = SQLITE_ERROR;",
          "225:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "226:       goto end_of_vacuum;",
          "227:     }",
          "228:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:   rc = execSql(db, pzErrMsg, \"BEGIN\");",
          "220:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "222:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "221:   rc = sqlite3BtreeBeginTrans(pMain, 2, 0);",
          "",
          "[Added Lines]",
          "252:   rc = sqlite3BtreeBeginTrans(pMain, pOut==0 ? 2 : 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "313:     };",
          "315:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "319:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "316:     assert( 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "347:     assert( pOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "324:       if( NEVER(rc!=SQLITE_OK) ) goto end_of_vacuum;",
          "325:     }",
          "328:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "329:     rc = sqlite3BtreeCommit(pTemp);",
          "330:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "331: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "333: #endif",
          "334:   }",
          "336:   assert( rc==SQLITE_OK );",
          "339: end_of_vacuum:",
          "",
          "[Removed Lines]",
          "327:     rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "332:     sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "337:   rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "",
          "[Added Lines]",
          "358:     if( pOut==0 ){",
          "359:       rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "360:     }",
          "365:     if( pOut==0 ){",
          "366:       sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "367:     }",
          "372:   if( pOut==0 ){",
          "373:     rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "374:   }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6686: #if !defined(SQLITE_OMIT_VACUUM) && !defined(SQLITE_OMIT_ATTACH)",
          "6692: case OP_Vacuum: {",
          "6693:   assert( p->readOnly==0 );",
          "6695:   if( rc ) goto abort_due_to_error;",
          "6696:   break;",
          "6697: }",
          "",
          "[Removed Lines]",
          "6694:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1);",
          "",
          "[Added Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1,",
          "6699:                         pOp->p2 ? &aMem[pOp->p2] : 0);",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_test shell1-3.1.4 {",
          "257:   # too many arguments",
          "258:   catchcmd \"test.db\" \".backup FOO BAR BAD\"",
          "261: # .bail ON|OFF           Stop after hitting an error.  Default OFF",
          "262: do_test shell1-3.2.1 {",
          "",
          "[Removed Lines]",
          "259: } {1 {Usage: .backup ?DB? ?--append? FILENAME}}",
          "",
          "[Added Lines]",
          "259: } {1 {Usage: .backup ?DB? ?OPTIONS? FILENAME}}",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-07",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the VACUUM INTO statement.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If the VACUUM statement is disabled in the current build, skip all",
          "19: # the tests in this file.",
          "20: #",
          "21: ifcapable {!vacuum} {",
          "22:   omit_test vacuum.test {Compiled with SQLITE_OMIT_VACUUM}",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: forcedelete out.db",
          "28: do_execsql_test vacuum-into-100 {",
          "29:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "30:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<100)",
          "31:   INSERT INTO t1(a,b) SELECT x, randomblob(600) FROM c;",
          "32:   CREATE INDEX t1b ON t1(b);",
          "33:   DELETE FROM t1 WHERE a%2;",
          "34:   SELECT count(*), sum(a), sum(length(b)) FROM t1;",
          "35: } {50 2550 30000}",
          "36: do_execsql_test vacuum-into-110 {",
          "37:   VACUUM main INTO 'out.db';",
          "38: } {}",
          "39: sqlite3 db2 out.db",
          "40: do_test vacuum-into-120 {",
          "41:   db2 eval {SELECT count(*), sum(a), sum(length(b)) FROM t1}",
          "42: } {50 2550 30000}",
          "43: do_catchsql_test vacuum-into-130 {",
          "44:   VACUUM INTO 'out.db';",
          "45: } {1 {output file already exists}}",
          "46: forcedelete out2.db",
          "47: do_catchsql_test vacuum-into-140 {",
          "48:   VACUUM INTO 'out2.db';",
          "49: } {0 {}}",
          "50: do_catchsql_test vacuum-into-150 {",
          "51:   VACUUM INTO 'out2.db';",
          "52: } {1 {output file already exists}}",
          "54: do_catchsql_test vacuum-into-200 {",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: # The INTO argument can be an arbitrary expression.",
          "59: #",
          "60: do_execsql_test vacuum-into-300 {",
          "61:   CREATE TABLE t2(name TEXT);",
          "62:   INSERT INTO t2 VALUES(':memory:');",
          "63:   VACUUM main INTO (SELECT name FROM t2);",
          "64: } {}",
          "65: do_catchsql_test vacuum-into-310 {",
          "66:   VACUUM INTO null;",
          "67: } {1 {non-text filename}}",
          "69: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}