{
  "cve_id": "CVE-2017-13767",
  "cve_desc": "In Wireshark 2.4.0, 2.2.0 to 2.2.8, and 2.0.0 to 2.0.14, the MSDP dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-msdp.c by adding length validation.",
  "repo": "wireshark/wireshark",
  "patch_hash": "33b95883aa4ef7391c05e563243992d35846a633",
  "patch_info": {
    "commit_hash": "33b95883aa4ef7391c05e563243992d35846a633",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/33b95883aa4ef7391c05e563243992d35846a633",
    "files": [
      "epan/dissectors/packet-msdp.c"
    ],
    "message": "Clean up MSDP dissection.\n\nIt's now an RFC; mention the RFC number.\n\nThere are no message types in MSDP; the message consists solely of a\nsequence of TLVs.  Don't speak of TLV types as message types.\n\nWhen dissecting a TLV, don't go past the end of the TLV.  (We should add\na bunch of expert infos for length errors.)\n\nNote that the Notification TLV was in an I-D but isn't in the RFC.\n\nDon't use tvb_new_subset_length_caplen() - tvb_new_subset_length()\nsuffices; let *it* check for the captured length.\n\nClean up dissection of the Notification TLV.\n\nBug: 13933\nChange-Id: Ia39b98f061957085c9f15fe6b31cd9c18058df35\nReviewed-on: https://code.wireshark.org/review/22868\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c": [
      "File: epan/dissectors/packet-msdp.c -> epan/dissectors/packet-msdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: static int hf_msdp_tlv_contents = -1;",
      "159: static int hf_msdp_trailing_junk = -1;",
      "161: static int hf_msdp_unknown_data = -1;",
      "163: static gint ett_msdp = -1;",
      "",
      "[Removed Lines]",
      "160: static int hf_msdp_unknown_encap = -1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "191:         col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(tvb_get_guint8(tvb, 0),",
      "192:                                                                      msdp_types,",
      "195:         ti = proto_tree_add_item(tree, proto_msdp, tvb, 0, -1, ENC_NA);",
      "196:         msdp_tree = proto_item_add_subtree(ti, ett_msdp);",
      "",
      "[Removed Lines]",
      "193:                                                                      \"<Unknown MSDP message type>\"));",
      "",
      "[Added Lines]",
      "192:                                                                      \"<Unknown MSDP TLV type>\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "213:                                         length);",
      "214:                         break;",
      "215:                 case MSDP_SA_REQ:",
      "216:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_res, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "219:                         break;",
      "220:                 case MSDP_NOTIFICATION:",
      "221:                         dissect_msdp_notification(tvb, pinfo, msdp_tree, &offset, length);",
      "222:                         break;",
      "223:                 default:",
      "",
      "[Removed Lines]",
      "217:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset + 1, 4, ENC_BIG_ENDIAN);",
      "218:                         offset += 5;",
      "",
      "[Added Lines]",
      "215:                         if (length < 1)",
      "216:                                 break;",
      "218:                         offset += 1;",
      "219:                         length -= 1;",
      "220:                         if (length < 4) {",
      "221:                                 offset += length;",
      "222:                                 break;",
      "223:                         }",
      "224:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset, 4, ENC_BIG_ENDIAN);",
      "225:                         offset += 4;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "294:         if (length > 0) {",
      "295:                 proto_tree *enc_tree;",
      "297:                 tvbuff_t *next_tvb;",
      "299:                 enc_tree = proto_tree_add_subtree_format(tree, tvb, *offset, length,",
      "300:                                          ett_msdp_sa_enc_data, NULL, \"Encapsulated IPv4 packet: %u bytes\",",
      "301:                                          length);",
      "304:                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
      "306:                 DISSECTOR_ASSERT(reported_length >= 0);",
      "311:                 if (reported_length > length)",
      "312:                         reported_length = length;",
      "",
      "[Removed Lines]",
      "296:                 gint available_length, reported_length;",
      "303:                 available_length = tvb_captured_length_remaining(tvb, *offset);",
      "305:                 DISSECTOR_ASSERT(available_length >= 0);",
      "307:                 if (available_length > reported_length)",
      "308:                         available_length = reported_length;",
      "309:                 if (available_length > length)",
      "310:                         available_length = length;",
      "314:                 next_tvb = tvb_new_subset_length_caplen(tvb, *offset, available_length,",
      "315:                                           reported_length);",
      "",
      "[Added Lines]",
      "307:                 gint reported_length;",
      "319:                 next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "340: {",
      "341:         guint8              error, error_sub;",
      "342:         const value_string *vals;",
      "344:         proto_tree_add_item(tree, hf_msdp_not_o, tvb, *offset, 1, ENC_BIG_ENDIAN);",
      "345:         proto_tree_add_item(tree, hf_msdp_not_error, tvb, *offset, 1, ENC_BIG_ENDIAN);",
      "346:         error = tvb_get_guint8(tvb, *offset);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "347:         gint reported_length;",
      "348:         tvbuff_t *next_tvb;",
      "350:         if (tlv_len < 1)",
      "351:                 return;",
      "357:         tlv_len -= 1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "373:                 break;",
      "374:         }",
      "376:         error_sub = tvb_get_guint8(tvb, *offset);",
      "377:         proto_tree_add_uint_format_value(tree, hf_msdp_not_error_sub, tvb, *offset, 1,",
      "378:                                    error_sub, \"%s (%u)\",",
      "379:                                    val_to_str_const(error_sub, vals, \"<Unknown Error subcode>\"),",
      "380:                                    error_sub);",
      "386:         switch (error) {",
      "387:         case SA_REQUEST_ERROR:",
      "388:                 add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
      "389:                 break;",
      "390:         case SA_MESSAGE_SA_RESPONSE_ERROR:",
      "391:                 if (error_sub == 0) {",
      "392:                         break;",
      "393:                 } else if (error_sub == 1) {",
      "394:                         proto_tree_add_item(tree, hf_msdp_not_entry_count, tvb, *offset, 1, ENC_BIG_ENDIAN);",
      "396:                         break;",
      "397:                 } else if (error_sub == 2) {",
      "398:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_rp_address);",
      "399:                         break;",
      "400:                 } else if (error_sub == 3 || error_sub == 8) {",
      "401:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
      "402:                         break;",
      "403:                 } else if (error_sub == 4) {",
      "404:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_source_address);",
      "405:                         break;",
      "406:                 } else if (error_sub == 5) {",
      "407:                         proto_tree_add_item(tree, hf_msdp_not_sprefix_len, tvb, *offset, 1, ENC_BIG_ENDIAN);",
      "409:                         break;",
      "410:                 } else if (error_sub == 6) {",
      "412:                 } else if (error_sub == 7) {",
      "415:                         break;",
      "416:                 } else {",
      "419:                         break;",
      "420:                 }",
      "422:         case MESSAGE_HEADER_ERROR:",
      "432:                 }",
      "433:                 break;",
      "434:         case FSM_ERROR:",
      "435:         case HOLD_TIMER_EXPIRED:",
      "",
      "[Removed Lines]",
      "413:                         proto_tree_add_item(tree, hf_msdp_unknown_encap, tvb, *offset, tlv_len - 5, ENC_NA);",
      "417:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
      "423:         case NOTIFICATION: {",
      "424:                 tvbuff_t *next_tvb;",
      "430:                 next_tvb = tvb_new_subset_remaining(tvb, *offset);",
      "431:                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
      "",
      "[Added Lines]",
      "385:         if (tlv_len < 1)",
      "386:                 return;",
      "393:         tlv_len -= 1;",
      "400:                 if (tlv_len < 7) {",
      "402:                         return;",
      "403:                 }",
      "405:                 tlv_len -= 7;",
      "411:                         if (tlv_len < 1)",
      "412:                                 return;",
      "415:                         tlv_len -= 1;",
      "418:                         if (tlv_len < 7) {",
      "420:                                 return;",
      "421:                         }",
      "423:                         tlv_len -= 7;",
      "426:                         if (tlv_len < 7) {",
      "428:                                 return;",
      "429:                         }",
      "431:                         tlv_len -= 7;",
      "434:                         if (tlv_len < 7) {",
      "436:                                 return;",
      "437:                         }",
      "439:                         tlv_len -= 7;",
      "442:                         if (tlv_len < 1)",
      "443:                                 return;",
      "446:                         tlv_len -= 1;",
      "449:                         if (tlv_len > 0) {",
      "450:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
      "451:                                 DISSECTOR_ASSERT(reported_length >= 0);",
      "452:                                 if (reported_length > tlv_len)",
      "453:                                         reported_length = tlv_len;",
      "454:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
      "455:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
      "456:                         }",
      "458:                         tlv_len = 0;",
      "460:                         if (tlv_len > 0) {",
      "461:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
      "462:                                 DISSECTOR_ASSERT(reported_length >= 0);",
      "463:                                 if (reported_length > tlv_len)",
      "464:                                         reported_length = tlv_len;",
      "465:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
      "466:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
      "467:                         }",
      "469:                         tlv_len = 0;",
      "472:                         if (tlv_len > 0)",
      "473:                                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
      "475:                         tlv_len = 0;",
      "478:                 break;",
      "480:         case NOTIFICATION:",
      "486:                 if (tlv_len > 0) {",
      "487:                         reported_length = tvb_reported_length_remaining(tvb, *offset);",
      "488:                         DISSECTOR_ASSERT(reported_length >= 0);",
      "489:                         if (reported_length > tlv_len)",
      "490:                                 reported_length = tlv_len;",
      "491:                         next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
      "492:                         dissect_msdp(next_tvb, pinfo, tree, NULL);",
      "495:                 tlv_len = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "438:                 break;",
      "439:         default:",
      "443:                 break;",
      "444:         }",
      "446:         return;",
      "447: }",
      "",
      "[Removed Lines]",
      "440:                 if (tlv_len - 5 > 0)",
      "441:                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
      "",
      "[Added Lines]",
      "503:                 if (tlv_len > 0)",
      "504:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
      "506:                 tlv_len = 0;",
      "509:         if (tlv_len != 0) {",
      "510:                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, *offset, tlv_len, ENC_NA);",
      "512:         }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "555:                         FT_BYTES, BASE_NONE, NULL, 0,",
      "556:                         NULL, HFILL }",
      "557:                 },",
      "563:                 { &hf_msdp_unknown_data,",
      "564:                         { \"Unknown data\",           \"msdp.unknown_data\",",
      "565:                         FT_BYTES, BASE_NONE, NULL, 0,",
      "",
      "[Removed Lines]",
      "558:                 { &hf_msdp_unknown_encap,",
      "559:                         { \"Packet with unknown encapsulation\",           \"msdp.unknown_encap\",",
      "560:                         FT_BYTES, BASE_NONE, NULL, 0,",
      "561:                         NULL, HFILL }",
      "562:                 },",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f18ace2a2683418a9368a8dfd92da6bd8213e15",
      "candidate_info": {
        "commit_hash": "6f18ace2a2683418a9368a8dfd92da6bd8213e15",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6f18ace2a2683418a9368a8dfd92da6bd8213e15",
        "files": [
          "epan/dissectors/packet-msdp.c"
        ],
        "message": "Clean up MSDP dissection.\n\nIt's now an RFC; mention the RFC number.\n\nThere are no message types in MSDP; the message consists solely of a\nsequence of TLVs.  Don't speak of TLV types as message types.\n\nWhen dissecting a TLV, don't go past the end of the TLV.  (We should add\na bunch of expert infos for length errors.)\n\nNote that the Notification TLV was in an I-D but isn't in the RFC.\n\nDon't use tvb_new_subset() - tvb_new_subset_length() suffices; let *it*\ncheck for the captured length.\n\nClean up dissection of the Notification TLV.\n\nBug: 13933\nChange-Id: Ia39b98f061957085c9f15fe6b31cd9c18058df35\nReviewed-on: https://code.wireshark.org/review/22868\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 33b95883aa4ef7391c05e563243992d35846a633)\nReviewed-on: https://code.wireshark.org/review/22870\n(cherry picked from commit 5ade15dbd675ff88ea177173bf373bfff26bba44)\nReviewed-on: https://code.wireshark.org/review/22871",
        "before_after_code_files": [
          "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c": [
          "File: epan/dissectors/packet-msdp.c -> epan/dissectors/packet-msdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: static int hf_msdp_tlv_contents = -1;",
          "158: static int hf_msdp_trailing_junk = -1;",
          "160: static int hf_msdp_unknown_data = -1;",
          "162: static gint ett_msdp = -1;",
          "",
          "[Removed Lines]",
          "159: static int hf_msdp_unknown_encap = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:         col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(tvb_get_guint8(tvb, 0),",
          "191:                                                                      msdp_types,",
          "194:         ti = proto_tree_add_item(tree, proto_msdp, tvb, 0, -1, ENC_NA);",
          "195:         msdp_tree = proto_item_add_subtree(ti, ett_msdp);",
          "",
          "[Removed Lines]",
          "192:                                                                      \"<Unknown MSDP message type>\"));",
          "",
          "[Added Lines]",
          "191:                                                                      \"<Unknown MSDP TLV type>\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:                                         length);",
          "213:                         break;",
          "214:                 case MSDP_SA_REQ:",
          "215:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_res, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "218:                         break;",
          "219:                 case MSDP_NOTIFICATION:",
          "220:                         dissect_msdp_notification(tvb, pinfo, msdp_tree, &offset, length);",
          "221:                         break;",
          "222:                 default:",
          "",
          "[Removed Lines]",
          "216:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset + 1, 4, ENC_BIG_ENDIAN);",
          "217:                         offset += 5;",
          "",
          "[Added Lines]",
          "214:                         if (length < 1)",
          "215:                                 break;",
          "217:                         offset += 1;",
          "218:                         length -= 1;",
          "219:                         if (length < 4) {",
          "220:                                 offset += length;",
          "221:                                 break;",
          "222:                         }",
          "223:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "224:                         offset += 4;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "293:         if (length > 0) {",
          "294:                 proto_tree *enc_tree;",
          "296:                 tvbuff_t *next_tvb;",
          "298:                 enc_tree = proto_tree_add_subtree_format(tree, tvb, *offset, length,",
          "299:                                          ett_msdp_sa_enc_data, NULL, \"Encapsulated IPv4 packet: %u bytes\",",
          "300:                                          length);",
          "303:                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "305:                 DISSECTOR_ASSERT(reported_length >= 0);",
          "310:                 if (reported_length > length)",
          "311:                         reported_length = length;",
          "",
          "[Removed Lines]",
          "295:                 gint available_length, reported_length;",
          "302:                 available_length = tvb_captured_length_remaining(tvb, *offset);",
          "304:                 DISSECTOR_ASSERT(available_length >= 0);",
          "306:                 if (available_length > reported_length)",
          "307:                         available_length = reported_length;",
          "308:                 if (available_length > length)",
          "309:                         available_length = length;",
          "313:                 next_tvb = tvb_new_subset(tvb, *offset, available_length,",
          "314:                                           reported_length);",
          "",
          "[Added Lines]",
          "306:                 gint reported_length;",
          "318:                 next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339: {",
          "340:         guint8              error, error_sub;",
          "341:         const value_string *vals;",
          "343:         proto_tree_add_item(tree, hf_msdp_not_o, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "344:         proto_tree_add_item(tree, hf_msdp_not_error, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "345:         error = tvb_get_guint8(tvb, *offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:         gint reported_length;",
          "347:         tvbuff_t *next_tvb;",
          "349:         if (tlv_len < 1)",
          "350:                 return;",
          "356:         tlv_len -= 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:                 break;",
          "373:         }",
          "375:         error_sub = tvb_get_guint8(tvb, *offset);",
          "376:         proto_tree_add_uint_format_value(tree, hf_msdp_not_error_sub, tvb, *offset, 1,",
          "377:                                    error_sub, \"%s (%u)\",",
          "378:                                    val_to_str_const(error_sub, vals, \"<Unknown Error subcode>\"),",
          "379:                                    error_sub);",
          "385:         switch (error) {",
          "386:         case SA_REQUEST_ERROR:",
          "387:                 add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
          "388:                 break;",
          "389:         case SA_MESSAGE_SA_RESPONSE_ERROR:",
          "390:                 if (error_sub == 0) {",
          "391:                         break;",
          "392:                 } else if (error_sub == 1) {",
          "393:                         proto_tree_add_item(tree, hf_msdp_not_entry_count, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "395:                         break;",
          "396:                 } else if (error_sub == 2) {",
          "397:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_rp_address);",
          "398:                         break;",
          "399:                 } else if (error_sub == 3 || error_sub == 8) {",
          "400:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
          "401:                         break;",
          "402:                 } else if (error_sub == 4) {",
          "403:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_source_address);",
          "404:                         break;",
          "405:                 } else if (error_sub == 5) {",
          "406:                         proto_tree_add_item(tree, hf_msdp_not_sprefix_len, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "408:                         break;",
          "409:                 } else if (error_sub == 6) {",
          "411:                 } else if (error_sub == 7) {",
          "414:                         break;",
          "415:                 } else {",
          "418:                         break;",
          "419:                 }",
          "421:         case MESSAGE_HEADER_ERROR:",
          "431:                 }",
          "432:                 break;",
          "433:         case FSM_ERROR:",
          "434:         case HOLD_TIMER_EXPIRED:",
          "",
          "[Removed Lines]",
          "412:                         proto_tree_add_item(tree, hf_msdp_unknown_encap, tvb, *offset, tlv_len - 5, ENC_NA);",
          "416:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
          "422:         case NOTIFICATION: {",
          "423:                 tvbuff_t *next_tvb;",
          "429:                 next_tvb = tvb_new_subset_remaining(tvb, *offset);",
          "430:                 dissect_msdp(next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "384:         if (tlv_len < 1)",
          "385:                 return;",
          "392:         tlv_len -= 1;",
          "399:                 if (tlv_len < 7) {",
          "401:                         return;",
          "402:                 }",
          "404:                 tlv_len -= 7;",
          "410:                         if (tlv_len < 1)",
          "411:                                 return;",
          "414:                         tlv_len -= 1;",
          "417:                         if (tlv_len < 7) {",
          "419:                                 return;",
          "420:                         }",
          "422:                         tlv_len -= 7;",
          "425:                         if (tlv_len < 7) {",
          "427:                                 return;",
          "428:                         }",
          "430:                         tlv_len -= 7;",
          "433:                         if (tlv_len < 7) {",
          "435:                                 return;",
          "436:                         }",
          "438:                         tlv_len -= 7;",
          "441:                         if (tlv_len < 1)",
          "442:                                 return;",
          "445:                         tlv_len -= 1;",
          "448:                         if (tlv_len > 0) {",
          "449:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "450:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "451:                                 if (reported_length > tlv_len)",
          "452:                                         reported_length = tlv_len;",
          "453:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "454:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "455:                         }",
          "457:                         tlv_len = 0;",
          "459:                         if (tlv_len > 0) {",
          "460:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "461:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "462:                                 if (reported_length > tlv_len)",
          "463:                                         reported_length = tlv_len;",
          "464:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "465:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "466:                         }",
          "468:                         tlv_len = 0;",
          "471:                         if (tlv_len > 0)",
          "472:                                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
          "474:                         tlv_len = 0;",
          "477:                 break;",
          "479:         case NOTIFICATION:",
          "485:                 if (tlv_len > 0) {",
          "486:                         reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "487:                         DISSECTOR_ASSERT(reported_length >= 0);",
          "488:                         if (reported_length > tlv_len)",
          "489:                                 reported_length = tlv_len;",
          "490:                         next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "491:                         dissect_msdp(next_tvb, pinfo, tree);",
          "494:                 tlv_len = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "437:                 break;",
          "438:         default:",
          "442:                 break;",
          "443:         }",
          "445:         return;",
          "446: }",
          "",
          "[Removed Lines]",
          "439:                 if (tlv_len - 5 > 0)",
          "440:                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
          "",
          "[Added Lines]",
          "502:                 if (tlv_len > 0)",
          "503:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
          "505:                 tlv_len = 0;",
          "508:         if (tlv_len != 0) {",
          "509:                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, *offset, tlv_len, ENC_NA);",
          "511:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "554:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "555:                         NULL, HFILL }",
          "556:                 },",
          "562:                 { &hf_msdp_unknown_data,",
          "563:                         { \"Unknown data\",           \"msdp.unknown_data\",",
          "564:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "557:                 { &hf_msdp_unknown_encap,",
          "558:                         { \"Packet with unknown encapsulation\",           \"msdp.unknown_encap\",",
          "559:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "560:                         NULL, HFILL }",
          "561:                 },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6d312cce1370f60ea9febcd59665453d7e35bfa",
      "candidate_info": {
        "commit_hash": "a6d312cce1370f60ea9febcd59665453d7e35bfa",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a6d312cce1370f60ea9febcd59665453d7e35bfa",
        "files": [
          "epan/dissectors/packet-msdp.c"
        ],
        "message": "Clean up MSDP dissection.\n\nIt's now an RFC; mention the RFC number.\n\nThere are no message types in MSDP; the message consists solely of a\nsequence of TLVs.  Don't speak of TLV types as message types.\n\nWhen dissecting a TLV, don't go past the end of the TLV.  (We should add\na bunch of expert infos for length errors.)\n\nNote that the Notification TLV was in an I-D but isn't in the RFC.\n\nDon't use tvb_new_subset_length_caplen() - tvb_new_subset_length()\nsuffices; let *it* check for the captured length.\n\nClean up dissection of the Notification TLV.\n\nBug: 13933\nChange-Id: Ia39b98f061957085c9f15fe6b31cd9c18058df35\nReviewed-on: https://code.wireshark.org/review/22868\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 33b95883aa4ef7391c05e563243992d35846a633)\nReviewed-on: https://code.wireshark.org/review/22869",
        "before_after_code_files": [
          "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c": [
          "File: epan/dissectors/packet-msdp.c -> epan/dissectors/packet-msdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: static int hf_msdp_tlv_contents = -1;",
          "159: static int hf_msdp_trailing_junk = -1;",
          "161: static int hf_msdp_unknown_data = -1;",
          "163: static gint ett_msdp = -1;",
          "",
          "[Removed Lines]",
          "160: static int hf_msdp_unknown_encap = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:         col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(tvb_get_guint8(tvb, 0),",
          "192:                                                                      msdp_types,",
          "195:         ti = proto_tree_add_item(tree, proto_msdp, tvb, 0, -1, ENC_NA);",
          "196:         msdp_tree = proto_item_add_subtree(ti, ett_msdp);",
          "",
          "[Removed Lines]",
          "193:                                                                      \"<Unknown MSDP message type>\"));",
          "",
          "[Added Lines]",
          "192:                                                                      \"<Unknown MSDP TLV type>\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:                                         length);",
          "214:                         break;",
          "215:                 case MSDP_SA_REQ:",
          "216:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_res, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "219:                         break;",
          "220:                 case MSDP_NOTIFICATION:",
          "221:                         dissect_msdp_notification(tvb, pinfo, msdp_tree, &offset, length);",
          "222:                         break;",
          "223:                 default:",
          "",
          "[Removed Lines]",
          "217:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset + 1, 4, ENC_BIG_ENDIAN);",
          "218:                         offset += 5;",
          "",
          "[Added Lines]",
          "215:                         if (length < 1)",
          "216:                                 break;",
          "218:                         offset += 1;",
          "219:                         length -= 1;",
          "220:                         if (length < 4) {",
          "221:                                 offset += length;",
          "222:                                 break;",
          "223:                         }",
          "224:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "225:                         offset += 4;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "294:         if (length > 0) {",
          "295:                 proto_tree *enc_tree;",
          "297:                 tvbuff_t *next_tvb;",
          "299:                 enc_tree = proto_tree_add_subtree_format(tree, tvb, *offset, length,",
          "300:                                          ett_msdp_sa_enc_data, NULL, \"Encapsulated IPv4 packet: %u bytes\",",
          "301:                                          length);",
          "304:                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "306:                 DISSECTOR_ASSERT(reported_length >= 0);",
          "311:                 if (reported_length > length)",
          "312:                         reported_length = length;",
          "",
          "[Removed Lines]",
          "296:                 gint available_length, reported_length;",
          "303:                 available_length = tvb_captured_length_remaining(tvb, *offset);",
          "305:                 DISSECTOR_ASSERT(available_length >= 0);",
          "307:                 if (available_length > reported_length)",
          "308:                         available_length = reported_length;",
          "309:                 if (available_length > length)",
          "310:                         available_length = length;",
          "314:                 next_tvb = tvb_new_subset_length_caplen(tvb, *offset, available_length,",
          "315:                                           reported_length);",
          "",
          "[Added Lines]",
          "307:                 gint reported_length;",
          "319:                 next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340: {",
          "341:         guint8              error, error_sub;",
          "342:         const value_string *vals;",
          "344:         proto_tree_add_item(tree, hf_msdp_not_o, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "345:         proto_tree_add_item(tree, hf_msdp_not_error, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "346:         error = tvb_get_guint8(tvb, *offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:         gint reported_length;",
          "348:         tvbuff_t *next_tvb;",
          "350:         if (tlv_len < 1)",
          "351:                 return;",
          "357:         tlv_len -= 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "373:                 break;",
          "374:         }",
          "376:         error_sub = tvb_get_guint8(tvb, *offset);",
          "377:         proto_tree_add_uint_format_value(tree, hf_msdp_not_error_sub, tvb, *offset, 1,",
          "378:                                    error_sub, \"%s (%u)\",",
          "379:                                    val_to_str_const(error_sub, vals, \"<Unknown Error subcode>\"),",
          "380:                                    error_sub);",
          "386:         switch (error) {",
          "387:         case SA_REQUEST_ERROR:",
          "388:                 add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
          "389:                 break;",
          "390:         case SA_MESSAGE_SA_RESPONSE_ERROR:",
          "391:                 if (error_sub == 0) {",
          "392:                         break;",
          "393:                 } else if (error_sub == 1) {",
          "394:                         proto_tree_add_item(tree, hf_msdp_not_entry_count, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "396:                         break;",
          "397:                 } else if (error_sub == 2) {",
          "398:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_rp_address);",
          "399:                         break;",
          "400:                 } else if (error_sub == 3 || error_sub == 8) {",
          "401:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
          "402:                         break;",
          "403:                 } else if (error_sub == 4) {",
          "404:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_source_address);",
          "405:                         break;",
          "406:                 } else if (error_sub == 5) {",
          "407:                         proto_tree_add_item(tree, hf_msdp_not_sprefix_len, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "409:                         break;",
          "410:                 } else if (error_sub == 6) {",
          "412:                 } else if (error_sub == 7) {",
          "415:                         break;",
          "416:                 } else {",
          "419:                         break;",
          "420:                 }",
          "422:         case MESSAGE_HEADER_ERROR:",
          "432:                 }",
          "433:                 break;",
          "434:         case FSM_ERROR:",
          "435:         case HOLD_TIMER_EXPIRED:",
          "",
          "[Removed Lines]",
          "413:                         proto_tree_add_item(tree, hf_msdp_unknown_encap, tvb, *offset, tlv_len - 5, ENC_NA);",
          "417:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
          "423:         case NOTIFICATION: {",
          "424:                 tvbuff_t *next_tvb;",
          "430:                 next_tvb = tvb_new_subset_remaining(tvb, *offset);",
          "431:                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "",
          "[Added Lines]",
          "385:         if (tlv_len < 1)",
          "386:                 return;",
          "393:         tlv_len -= 1;",
          "400:                 if (tlv_len < 7) {",
          "402:                         return;",
          "403:                 }",
          "405:                 tlv_len -= 7;",
          "411:                         if (tlv_len < 1)",
          "412:                                 return;",
          "415:                         tlv_len -= 1;",
          "418:                         if (tlv_len < 7) {",
          "420:                                 return;",
          "421:                         }",
          "423:                         tlv_len -= 7;",
          "426:                         if (tlv_len < 7) {",
          "428:                                 return;",
          "429:                         }",
          "431:                         tlv_len -= 7;",
          "434:                         if (tlv_len < 7) {",
          "436:                                 return;",
          "437:                         }",
          "439:                         tlv_len -= 7;",
          "442:                         if (tlv_len < 1)",
          "443:                                 return;",
          "446:                         tlv_len -= 1;",
          "449:                         if (tlv_len > 0) {",
          "450:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "451:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "452:                                 if (reported_length > tlv_len)",
          "453:                                         reported_length = tlv_len;",
          "454:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "455:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "456:                         }",
          "458:                         tlv_len = 0;",
          "460:                         if (tlv_len > 0) {",
          "461:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "462:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "463:                                 if (reported_length > tlv_len)",
          "464:                                         reported_length = tlv_len;",
          "465:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "466:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "467:                         }",
          "469:                         tlv_len = 0;",
          "472:                         if (tlv_len > 0)",
          "473:                                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
          "475:                         tlv_len = 0;",
          "478:                 break;",
          "480:         case NOTIFICATION:",
          "486:                 if (tlv_len > 0) {",
          "487:                         reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "488:                         DISSECTOR_ASSERT(reported_length >= 0);",
          "489:                         if (reported_length > tlv_len)",
          "490:                                 reported_length = tlv_len;",
          "491:                         next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "492:                         dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "495:                 tlv_len = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "438:                 break;",
          "439:         default:",
          "443:                 break;",
          "444:         }",
          "446:         return;",
          "447: }",
          "",
          "[Removed Lines]",
          "440:                 if (tlv_len - 5 > 0)",
          "441:                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
          "",
          "[Added Lines]",
          "503:                 if (tlv_len > 0)",
          "504:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
          "506:                 tlv_len = 0;",
          "509:         if (tlv_len != 0) {",
          "510:                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, *offset, tlv_len, ENC_NA);",
          "512:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "555:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "556:                         NULL, HFILL }",
          "557:                 },",
          "563:                 { &hf_msdp_unknown_data,",
          "564:                         { \"Unknown data\",           \"msdp.unknown_data\",",
          "565:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "558:                 { &hf_msdp_unknown_encap,",
          "559:                         { \"Packet with unknown encapsulation\",           \"msdp.unknown_encap\",",
          "560:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "561:                         NULL, HFILL }",
          "562:                 },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ade15dbd675ff88ea177173bf373bfff26bba44",
      "candidate_info": {
        "commit_hash": "5ade15dbd675ff88ea177173bf373bfff26bba44",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5ade15dbd675ff88ea177173bf373bfff26bba44",
        "files": [
          "epan/dissectors/packet-msdp.c"
        ],
        "message": "Clean up MSDP dissection.\n\nIt's now an RFC; mention the RFC number.\n\nThere are no message types in MSDP; the message consists solely of a\nsequence of TLVs.  Don't speak of TLV types as message types.\n\nWhen dissecting a TLV, don't go past the end of the TLV.  (We should add\na bunch of expert infos for length errors.)\n\nNote that the Notification TLV was in an I-D but isn't in the RFC.\n\nDon't use tvb_new_subset() - tvb_new_subset_length() suffices; let *it*\ncheck for the captured length.\n\nClean up dissection of the Notification TLV.\n\nBug: 13933\nChange-Id: Ia39b98f061957085c9f15fe6b31cd9c18058df35\nReviewed-on: https://code.wireshark.org/review/22868\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 33b95883aa4ef7391c05e563243992d35846a633)\nReviewed-on: https://code.wireshark.org/review/22870",
        "before_after_code_files": [
          "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c": [
          "File: epan/dissectors/packet-msdp.c -> epan/dissectors/packet-msdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: static int hf_msdp_tlv_contents = -1;",
          "158: static int hf_msdp_trailing_junk = -1;",
          "160: static int hf_msdp_unknown_data = -1;",
          "162: static gint ett_msdp = -1;",
          "",
          "[Removed Lines]",
          "159: static int hf_msdp_unknown_encap = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:         col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(tvb_get_guint8(tvb, 0),",
          "191:                                                                      msdp_types,",
          "194:         ti = proto_tree_add_item(tree, proto_msdp, tvb, 0, -1, ENC_NA);",
          "195:         msdp_tree = proto_item_add_subtree(ti, ett_msdp);",
          "",
          "[Removed Lines]",
          "192:                                                                      \"<Unknown MSDP message type>\"));",
          "",
          "[Added Lines]",
          "191:                                                                      \"<Unknown MSDP TLV type>\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:                                         length);",
          "213:                         break;",
          "214:                 case MSDP_SA_REQ:",
          "215:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_res, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "218:                         break;",
          "219:                 case MSDP_NOTIFICATION:",
          "220:                         dissect_msdp_notification(tvb, pinfo, msdp_tree, &offset, length);",
          "221:                         break;",
          "222:                 default:",
          "",
          "[Removed Lines]",
          "216:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset + 1, 4, ENC_BIG_ENDIAN);",
          "217:                         offset += 5;",
          "",
          "[Added Lines]",
          "214:                         if (length < 1)",
          "215:                                 break;",
          "217:                         offset += 1;",
          "218:                         length -= 1;",
          "219:                         if (length < 4) {",
          "220:                                 offset += length;",
          "221:                                 break;",
          "222:                         }",
          "223:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_group, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "224:                         offset += 4;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "293:         if (length > 0) {",
          "294:                 proto_tree *enc_tree;",
          "296:                 tvbuff_t *next_tvb;",
          "298:                 enc_tree = proto_tree_add_subtree_format(tree, tvb, *offset, length,",
          "299:                                          ett_msdp_sa_enc_data, NULL, \"Encapsulated IPv4 packet: %u bytes\",",
          "300:                                          length);",
          "303:                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "305:                 DISSECTOR_ASSERT(reported_length >= 0);",
          "310:                 if (reported_length > length)",
          "311:                         reported_length = length;",
          "",
          "[Removed Lines]",
          "295:                 gint available_length, reported_length;",
          "302:                 available_length = tvb_captured_length_remaining(tvb, *offset);",
          "304:                 DISSECTOR_ASSERT(available_length >= 0);",
          "306:                 if (available_length > reported_length)",
          "307:                         available_length = reported_length;",
          "308:                 if (available_length > length)",
          "309:                         available_length = length;",
          "313:                 next_tvb = tvb_new_subset(tvb, *offset, available_length,",
          "314:                                           reported_length);",
          "",
          "[Added Lines]",
          "306:                 gint reported_length;",
          "318:                 next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339: {",
          "340:         guint8              error, error_sub;",
          "341:         const value_string *vals;",
          "343:         proto_tree_add_item(tree, hf_msdp_not_o, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "344:         proto_tree_add_item(tree, hf_msdp_not_error, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "345:         error = tvb_get_guint8(tvb, *offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:         gint reported_length;",
          "347:         tvbuff_t *next_tvb;",
          "349:         if (tlv_len < 1)",
          "350:                 return;",
          "356:         tlv_len -= 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:                 break;",
          "373:         }",
          "375:         error_sub = tvb_get_guint8(tvb, *offset);",
          "376:         proto_tree_add_uint_format_value(tree, hf_msdp_not_error_sub, tvb, *offset, 1,",
          "377:                                    error_sub, \"%s (%u)\",",
          "378:                                    val_to_str_const(error_sub, vals, \"<Unknown Error subcode>\"),",
          "379:                                    error_sub);",
          "385:         switch (error) {",
          "386:         case SA_REQUEST_ERROR:",
          "387:                 add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
          "388:                 break;",
          "389:         case SA_MESSAGE_SA_RESPONSE_ERROR:",
          "390:                 if (error_sub == 0) {",
          "391:                         break;",
          "392:                 } else if (error_sub == 1) {",
          "393:                         proto_tree_add_item(tree, hf_msdp_not_entry_count, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "395:                         break;",
          "396:                 } else if (error_sub == 2) {",
          "397:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_rp_address);",
          "398:                         break;",
          "399:                 } else if (error_sub == 3 || error_sub == 8) {",
          "400:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_group_address);",
          "401:                         break;",
          "402:                 } else if (error_sub == 4) {",
          "403:                         add_notification_data_ipv4addr(tvb, tree, offset, hf_msdp_not_source_address);",
          "404:                         break;",
          "405:                 } else if (error_sub == 5) {",
          "406:                         proto_tree_add_item(tree, hf_msdp_not_sprefix_len, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "408:                         break;",
          "409:                 } else if (error_sub == 6) {",
          "411:                 } else if (error_sub == 7) {",
          "414:                         break;",
          "415:                 } else {",
          "418:                         break;",
          "419:                 }",
          "421:         case MESSAGE_HEADER_ERROR:",
          "431:                 }",
          "432:                 break;",
          "433:         case FSM_ERROR:",
          "434:         case HOLD_TIMER_EXPIRED:",
          "",
          "[Removed Lines]",
          "412:                         proto_tree_add_item(tree, hf_msdp_unknown_encap, tvb, *offset, tlv_len - 5, ENC_NA);",
          "416:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
          "422:         case NOTIFICATION: {",
          "423:                 tvbuff_t *next_tvb;",
          "429:                 next_tvb = tvb_new_subset_remaining(tvb, *offset);",
          "430:                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "",
          "[Added Lines]",
          "384:         if (tlv_len < 1)",
          "385:                 return;",
          "392:         tlv_len -= 1;",
          "399:                 if (tlv_len < 7) {",
          "401:                         return;",
          "402:                 }",
          "404:                 tlv_len -= 7;",
          "410:                         if (tlv_len < 1)",
          "411:                                 return;",
          "414:                         tlv_len -= 1;",
          "417:                         if (tlv_len < 7) {",
          "419:                                 return;",
          "420:                         }",
          "422:                         tlv_len -= 7;",
          "425:                         if (tlv_len < 7) {",
          "427:                                 return;",
          "428:                         }",
          "430:                         tlv_len -= 7;",
          "433:                         if (tlv_len < 7) {",
          "435:                                 return;",
          "436:                         }",
          "438:                         tlv_len -= 7;",
          "441:                         if (tlv_len < 1)",
          "442:                                 return;",
          "445:                         tlv_len -= 1;",
          "448:                         if (tlv_len > 0) {",
          "449:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "450:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "451:                                 if (reported_length > tlv_len)",
          "452:                                         reported_length = tlv_len;",
          "453:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "454:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "455:                         }",
          "457:                         tlv_len = 0;",
          "459:                         if (tlv_len > 0) {",
          "460:                                 reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "461:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "462:                                 if (reported_length > tlv_len)",
          "463:                                         reported_length = tlv_len;",
          "464:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "465:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "466:                         }",
          "468:                         tlv_len = 0;",
          "471:                         if (tlv_len > 0)",
          "472:                                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
          "474:                         tlv_len = 0;",
          "477:                 break;",
          "479:         case NOTIFICATION:",
          "485:                 if (tlv_len > 0) {",
          "486:                         reported_length = tvb_reported_length_remaining(tvb, *offset);",
          "487:                         DISSECTOR_ASSERT(reported_length >= 0);",
          "488:                         if (reported_length > tlv_len)",
          "489:                                 reported_length = tlv_len;",
          "490:                         next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "491:                         dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "494:                 tlv_len = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "437:                 break;",
          "438:         default:",
          "442:                 break;",
          "443:         }",
          "445:         return;",
          "446: }",
          "",
          "[Removed Lines]",
          "439:                 if (tlv_len - 5 > 0)",
          "440:                 proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len - 5, ENC_NA);",
          "",
          "[Added Lines]",
          "502:                 if (tlv_len > 0)",
          "503:                         proto_tree_add_item(tree, hf_msdp_unknown_data, tvb, *offset, tlv_len, ENC_NA);",
          "505:                 tlv_len = 0;",
          "508:         if (tlv_len != 0) {",
          "509:                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, *offset, tlv_len, ENC_NA);",
          "511:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "554:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "555:                         NULL, HFILL }",
          "556:                 },",
          "562:                 { &hf_msdp_unknown_data,",
          "563:                         { \"Unknown data\",           \"msdp.unknown_data\",",
          "564:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "557:                 { &hf_msdp_unknown_encap,",
          "558:                         { \"Packet with unknown encapsulation\",           \"msdp.unknown_encap\",",
          "559:                         FT_BYTES, BASE_NONE, NULL, 0,",
          "560:                         NULL, HFILL }",
          "561:                 },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe29cb3bb0b291ef354996b2e32fa3bdb724b152",
      "candidate_info": {
        "commit_hash": "fe29cb3bb0b291ef354996b2e32fa3bdb724b152",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/fe29cb3bb0b291ef354996b2e32fa3bdb724b152",
        "files": [
          "epan/dissectors/packet-msdp.c"
        ],
        "message": "Add expert infos for too-long or too-short TLVs.\n\nAlso, process the packet to the end, even if there are fewer than 3\nbytes left; we'll throw an exception if we can't fetch the type and\nlength, which will report the packet as malformed (which it is).\n\nChange-Id: Iddd5be4be635553ac77bdb7fe232c2edb0e4404c\nReviewed-on: https://code.wireshark.org/review/22882\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c": [
          "File: epan/dissectors/packet-msdp.c -> epan/dissectors/packet-msdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <epan/packet.h>",
          "29: #include <epan/to_str.h>",
          "31: void proto_register_msdp(void);",
          "32: void proto_reg_handoff_msdp(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: static gint ett_msdp_sa_enc_data = -1;",
          "165: static gint ett_msdp_not_data = -1;",
          "168: static dissector_handle_t ip_handle;",
          "171: static void",
          "172: dissect_msdp_sa(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "174: static void",
          "178: static int",
          "",
          "[Removed Lines]",
          "173:     int *offset, int len);",
          "175: dissect_msdp_notification(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int *offset, guint16 tlv_len);",
          "",
          "[Added Lines]",
          "168: static expert_field ei_msdp_tlv_len_too_short = EI_INIT;",
          "169: static expert_field ei_msdp_tlv_len_too_long = EI_INIT;",
          "176:     int *offset, int length, proto_item *length_item);",
          "178: dissect_msdp_notification(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "179:     int *offset, guint16 tlv_len, proto_item *length_item);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180: {",
          "181:         proto_item *ti;",
          "182:         proto_tree *msdp_tree;",
          "183:         int         offset;",
          "184:         guint8      type;",
          "185:         guint16     length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         proto_item *length_item;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:         msdp_tree = proto_item_add_subtree(ti, ett_msdp);",
          "197:         offset = 0;",
          "199:                 type = tvb_get_guint8(tvb, offset);",
          "200:                 length = tvb_get_ntohs(tvb, offset + 1);",
          "203:                 proto_tree_add_uint(msdp_tree, hf_msdp_type, tvb, offset, 1, type);",
          "205:                 offset += 3;",
          "206:                 length -= 3;",
          "208:                 switch (type) {",
          "209:                 case MSDP_SA:",
          "210:                         dissect_msdp_sa(tvb, pinfo, msdp_tree, &offset,",
          "212:                         break;",
          "213:                 case MSDP_SA_REQ:",
          "219:                                 break;",
          "220:                         proto_tree_add_item(msdp_tree, hf_msdp_sa_req_res, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "221:                         offset += 1;",
          "222:                         length -= 1;",
          "223:                         if (length < 4) {",
          "224:                                 offset += length;",
          "225:                                 break;",
          "226:                         }",
          "",
          "[Removed Lines]",
          "198:         while (tvb_reported_length_remaining(tvb, offset) >= 3) {",
          "201:                 if (length < 3)",
          "202:                         break;",
          "204:                 proto_tree_add_uint(msdp_tree, hf_msdp_length, tvb, offset + 1, 2, length);",
          "211:                                         length);",
          "218:                         if (length < 1)",
          "",
          "[Added Lines]",
          "203:         while (tvb_reported_length_remaining(tvb, offset) != 0) {",
          "207:                 length_item = proto_tree_add_uint(msdp_tree, hf_msdp_length, tvb, offset + 1, 2, length);",
          "208:                 if (length < 3) {",
          "209:                         expert_add_info_format(pinfo, length_item,",
          "210:                             &ei_msdp_tlv_len_too_short,",
          "211:                             \"TLV length < 3\");",
          "212:                         break;",
          "213:                 }",
          "220:                                         length, length_item);",
          "227:                         if (length < 1) {",
          "228:                                 expert_add_info_format(pinfo, length_item,",
          "229:                                     &ei_msdp_tlv_len_too_short,",
          "230:                                     \"TLV length for IPv4 Source-Active Request < 8\");",
          "232:                         }",
          "237:                                 expert_add_info_format(pinfo, length_item,",
          "238:                                     &ei_msdp_tlv_len_too_short,",
          "239:                                     \"TLV length for IPv4 Source-Active Request < 8\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "228:                         offset += 4;",
          "229:                         length -= 4;",
          "230:                         if (length > 0) {",
          "231:                                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, offset, length, ENC_NA);",
          "232:                                 offset += length;",
          "233:                         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:                                 expert_add_info_format(pinfo, length_item,",
          "248:                                     &ei_msdp_tlv_len_too_long,",
          "249:                                     \"TLV length for KeepAlive > 8\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "240:                         dissect_msdp_sa(tvb, pinfo, msdp_tree, &offset,",
          "242:                         break;",
          "243:                 case MSDP_KEEP_ALIVE:",
          "244:                         if (length > 0) {",
          "245:                                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, offset, length, ENC_NA);",
          "246:                                 offset += length;",
          "247:                         }",
          "",
          "[Removed Lines]",
          "241:                                         length);",
          "",
          "[Added Lines]",
          "260:                                         length, length_item);",
          "264:                                 expert_add_info_format(pinfo, length_item,",
          "265:                                     &ei_msdp_tlv_len_too_long,",
          "266:                                     \"TLV length for KeepAlive > 3\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "255:                         break;",
          "256:                 default:",
          "257:                         if (length > 0)",
          "",
          "[Removed Lines]",
          "254:                         dissect_msdp_notification(tvb, pinfo, msdp_tree, &offset, length);",
          "",
          "[Added Lines]",
          "276:                         dissect_msdp_notification(tvb, pinfo, msdp_tree, &offset, length, length_item);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "261:                 }",
          "262:         }",
          "267:         return tvb_captured_length(tvb);",
          "268: }",
          "",
          "[Removed Lines]",
          "264:         if (tvb_reported_length_remaining(tvb, offset) > 0)",
          "265:                 proto_tree_add_item(msdp_tree, hf_msdp_trailing_junk, tvb, offset, -1, ENC_NA);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "274: static void dissect_msdp_sa(tvbuff_t *tvb, packet_info *pinfo,",
          "276: {",
          "277:         guint8 entries;",
          "280:                 return;",
          "281:         entries = tvb_get_guint8(tvb, *offset);",
          "282:         proto_tree_add_uint(tree, hf_msdp_sa_entry_count, tvb, *offset, 1, entries);",
          "284:         length -= 1;",
          "286:         if (length < 4) {",
          "288:                 return;",
          "289:         }",
          "",
          "[Removed Lines]",
          "275:     proto_tree *tree, int *offset, int length)",
          "279:         if (length < 1)",
          "",
          "[Added Lines]",
          "294:     proto_tree *tree, int *offset, int length, proto_item *length_item)",
          "298:         if (length < 1) {",
          "299:                 expert_add_info_format(pinfo, length_item,",
          "300:                     &ei_msdp_tlv_len_too_short,",
          "301:                     \"TLV length for IPv4 Source-Active or Source-Active Response < 5\");",
          "303:         }",
          "310:                 expert_add_info_format(pinfo, length_item,",
          "311:                     &ei_msdp_tlv_len_too_short,",
          "312:                     \"TLV length for IPv4 Source-Active or Source-Active Response < 5\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "298:                 proto_tree *entry_tree;",
          "300:                 if (length < 12) {",
          "302:                         return;",
          "303:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:                         expert_add_info_format(pinfo, length_item,",
          "328:                             &ei_msdp_tlv_len_too_short,",
          "329:                             \"TLV length for IPv4 Source-Active or Source-Active Response too short\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "363:         return;",
          "364: }",
          "367: {",
          "368:         guint8              error, error_sub;",
          "369:         const value_string *vals;",
          "370:         gint reported_length;",
          "371:         tvbuff_t *next_tvb;",
          "374:                 return;",
          "375:         proto_tree_add_item(tree, hf_msdp_not_o, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "376:         proto_tree_add_item(tree, hf_msdp_not_error, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "377:         error = tvb_get_guint8(tvb, *offset);",
          "",
          "[Removed Lines]",
          "366: static void dissect_msdp_notification(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int *offset, guint16 tlv_len)",
          "373:         if (tlv_len < 1)",
          "",
          "[Added Lines]",
          "395: static void dissect_msdp_notification(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int *offset, guint16 tlv_len, proto_item *length_item)",
          "402:         if (tlv_len < 1) {",
          "403:                 expert_add_info_format(pinfo, length_item,",
          "404:                     &ei_msdp_tlv_len_too_short,",
          "405:                     \"TLV length for Notification < 4\");",
          "407:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "405:                 break;",
          "406:         }",
          "409:                 return;",
          "410:         error_sub = tvb_get_guint8(tvb, *offset);",
          "411:         proto_tree_add_uint_format_value(tree, hf_msdp_not_error_sub, tvb, *offset, 1,",
          "412:                                    error_sub, \"%s (%u)\",",
          "",
          "[Removed Lines]",
          "408:         if (tlv_len < 1)",
          "",
          "[Added Lines]",
          "441:         if (tlv_len < 1) {",
          "442:                 expert_add_info_format(pinfo, length_item,",
          "443:                     &ei_msdp_tlv_len_too_short,",
          "444:                     \"TLV length for Notification < 5\");",
          "446:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "421:         switch (error) {",
          "422:         case SA_REQUEST_ERROR:",
          "423:                 if (tlv_len < 7) {",
          "425:                         return;",
          "426:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:                         expert_add_info_format(pinfo, length_item,",
          "462:                             &ei_msdp_tlv_len_too_short,",
          "463:                             \"TLV length for Notification SA-Request Error < 12\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "431:                 if (error_sub == 0) {",
          "432:                         break;",
          "433:                 } else if (error_sub == 1) {",
          "435:                                 return;",
          "436:                         proto_tree_add_item(tree, hf_msdp_not_entry_count, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "438:                         tlv_len -= 1;",
          "439:                         break;",
          "440:                 } else if (error_sub == 2) {",
          "441:                         if (tlv_len < 7) {",
          "443:                                 return;",
          "444:                         }",
          "",
          "[Removed Lines]",
          "434:                         if (tlv_len < 1)",
          "",
          "[Added Lines]",
          "474:                         if (tlv_len < 1) {",
          "475:                                 expert_add_info_format(pinfo, length_item,",
          "476:                                     &ei_msdp_tlv_len_too_short,",
          "477:                                     \"TLV length for Notification SA-Response Invalid Entry Count Error < 6\");",
          "479:                         }",
          "486:                                 expert_add_info_format(pinfo, length_item,",
          "487:                                     &ei_msdp_tlv_len_too_short,",
          "488:                                     \"TLV length for Notification SA-Response Invalid RP Address Error < 12\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "447:                         break;",
          "448:                 } else if (error_sub == 3 || error_sub == 8) {",
          "449:                         if (tlv_len < 7) {",
          "451:                                 return;",
          "452:                         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:                                 expert_add_info_format(pinfo, length_item,",
          "498:                                     &ei_msdp_tlv_len_too_short,",
          "499:                                     \"TLV length for Notification SA-Response %s Error < 12\",",
          "500:                                     (error_sub == 3) ? \"Invalid Group Address\"",
          "501:                                                      : \"Administrative Scope Boundary Violated\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "455:                         break;",
          "456:                 } else if (error_sub == 4) {",
          "457:                         if (tlv_len < 7) {",
          "459:                                 return;",
          "460:                         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:                                 expert_add_info_format(pinfo, length_item,",
          "511:                                     &ei_msdp_tlv_len_too_short,",
          "512:                                     \"TLV length for Notification SA-Response Invalid Source Address Error < 12\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "462:                         tlv_len -= 7;",
          "463:                         break;",
          "464:                 } else if (error_sub == 5) {",
          "466:                                 return;",
          "467:                         proto_tree_add_item(tree, hf_msdp_not_sprefix_len, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "469:                         tlv_len -= 1;",
          "",
          "[Removed Lines]",
          "465:                         if (tlv_len < 1)",
          "",
          "[Added Lines]",
          "520:                         if (tlv_len < 1) {",
          "521:                                 expert_add_info_format(pinfo, length_item,",
          "522:                                     &ei_msdp_tlv_len_too_short,",
          "523:                                     \"TLV length for Notification SA-Response Invalid Invalid Sprefix Length Error < 6\");",
          "525:                         }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "530:                 break;",
          "531:         }",
          "532:         if (tlv_len != 0) {",
          "533:                 proto_tree_add_item(tree, hf_msdp_trailing_junk, tvb, *offset, tlv_len, ENC_NA);",
          "535:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:                 expert_add_info_format(pinfo, length_item,",
          "593:                     &ei_msdp_tlv_len_too_long,",
          "594:                     \"TLV length too long\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "660:                 &ett_msdp_not_data,",
          "661:         };",
          "663:         proto_msdp = proto_register_protocol(\"Multicast Source Discovery Protocol\",",
          "664:             \"MSDP\", \"msdp\");",
          "666:         proto_register_field_array(proto_msdp, hf, array_length(hf));",
          "667:         proto_register_subtree_array(ett, array_length(ett));",
          "668: }",
          "670: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:         static ei_register_info ei[] = {",
          "726:                 { &ei_msdp_tlv_len_too_long,",
          "727:                     { \"msdp.tlv_len.too_long\", PI_PROTOCOL, PI_WARN,",
          "728:                       \"TLV length too long\", EXPFILL }",
          "729:                 },",
          "730:                 { &ei_msdp_tlv_len_too_short,",
          "731:                     { \"msdp.tlv_len.too_short\", PI_MALFORMED, PI_ERROR,",
          "732:                       \"TLV length too short\", EXPFILL }",
          "733:                 },",
          "734:         };",
          "736:         expert_module_t *expert_msdp;",
          "743:         expert_msdp = expert_register_protocol(proto_msdp);",
          "744:         expert_register_field_array(expert_msdp, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e02ca799d966ed2054bbd78742fd0a61f8bd959e",
      "candidate_info": {
        "commit_hash": "e02ca799d966ed2054bbd78742fd0a61f8bd959e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e02ca799d966ed2054bbd78742fd0a61f8bd959e",
        "files": [
          "epan/dissectors/packet-msdp.c"
        ],
        "message": "msdp: Fix Dead Store (Dead assignement/Dead increment) Warning found by Clang\n\nChange-Id: Ie98f0c70190206b4682bf1b1b13add51c52303db\nReviewed-on: https://code.wireshark.org/review/23009\nReviewed-by: Anders Broman <a.broman58@gmail.com>\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-msdp.c||epan/dissectors/packet-msdp.c": [
          "File: epan/dissectors/packet-msdp.c -> epan/dissectors/packet-msdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "531:                                 if (reported_length > tlv_len)",
          "532:                                         reported_length = tlv_len;",
          "534:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "535:                         }",
          "",
          "[Removed Lines]",
          "533:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "",
          "[Added Lines]",
          "533:                                 next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:                                 DISSECTOR_ASSERT(reported_length >= 0);",
          "542:                                 if (reported_length > tlv_len)",
          "543:                                         reported_length = tlv_len;",
          "545:                                 dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "546:                         }",
          "",
          "[Removed Lines]",
          "544:                                 next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "",
          "[Added Lines]",
          "544:                                 next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "567:                         DISSECTOR_ASSERT(reported_length >= 0);",
          "568:                         if (reported_length > tlv_len)",
          "569:                                 reported_length = tlv_len;",
          "571:                         dissect_msdp(next_tvb, pinfo, tree, NULL);",
          "572:                 }",
          "",
          "[Removed Lines]",
          "570:                         next_tvb = tvb_new_subset_length(tvb, *offset, tlv_len);",
          "",
          "[Added Lines]",
          "570:                         next_tvb = tvb_new_subset_length(tvb, *offset, reported_length);",
          "",
          "---------------"
        ]
      }
    }
  ]
}