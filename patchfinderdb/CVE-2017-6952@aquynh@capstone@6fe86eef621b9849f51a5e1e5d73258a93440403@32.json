{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83af3b9ec0315c5d93653081c05a8dd93e4ccc82",
      "candidate_info": {
        "commit_hash": "83af3b9ec0315c5d93653081c05a8dd93e4ccc82",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/83af3b9ec0315c5d93653081c05a8dd93e4ccc82",
        "files": [
          "bindings/python/capstone/__init__.py",
          "bindings/python/capstone/arm.py",
          "bindings/python/capstone/arm64.py",
          "bindings/python/capstone/m68k.py",
          "bindings/python/capstone/mips.py",
          "bindings/python/capstone/ppc.py",
          "bindings/python/capstone/sparc.py",
          "bindings/python/capstone/systemz.py",
          "bindings/python/capstone/x86.py",
          "bindings/python/capstone/xcore.py"
        ],
        "message": "Re-apply changes from 16477206564745782854e0ec5c68defa02429dd8 on next branch, that's the commit that lets the python bindings run in pypy",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/capstone/arm.py||bindings/python/capstone/arm.py",
          "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py",
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py",
          "bindings/python/capstone/mips.py||bindings/python/capstone/mips.py",
          "bindings/python/capstone/ppc.py||bindings/python/capstone/ppc.py",
          "bindings/python/capstone/sparc.py||bindings/python/capstone/sparc.py",
          "bindings/python/capstone/systemz.py||bindings/python/capstone/systemz.py",
          "bindings/python/capstone/x86.py||bindings/python/capstone/x86.py",
          "bindings/python/capstone/xcore.py||bindings/python/capstone/xcore.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: _python2 = sys.version_info[0] < 3",
          "5: if _python2:",
          "6:     range = xrange",
          "9: __all__ = [",
          "10:     'Cs',",
          "",
          "[Removed Lines]",
          "7: from . import arm, arm64, m68k, mips, ppc, sparc, systemz, x86, xcore",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291: # low-level structure for C code",
          "292: class _cs_arch(ctypes.Union):",
          "293:     _fields_ = (",
          "294:         ('arm64', arm64.CsArm64),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: def copy_ctypes(src):",
          "293:     \"\"\"Returns a new ctypes object which is a bitwise copy of an existing one\"\"\"",
          "294:     dst = type(src)()",
          "295:     ctypes.memmove(ctypes.byref(dst), ctypes.byref(src), ctypes.sizeof(type(src)))",
          "296:     return dst",
          "298: def copy_ctypes_list(src):",
          "299:     return [copy_ctypes(n) for n in src]",
          "301: # Weird import placement because these modules are needed by the below code but need the above functions",
          "302: from . import arm, arm64, m68k, mips, ppc, sparc, systemz, x86, xcore",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     if status != CS_ERR_OK:",
          "480:         raise CsError(status)",
          "490: def _ascii_name_or_default(name, default):",
          "491:     return default if name is None else name.decode('ascii')",
          "493: # Python-style class to disasm code",
          "494: class CsInsn(object):",
          "495:     def __init__(self, cs, all_info):",
          "",
          "[Removed Lines]",
          "483: # alternately",
          "484: def copy_ctypes(src):",
          "485:     \"\"\"Returns a new ctypes object which is a bitwise copy of an existing one\"\"\"",
          "486:     dst = type(src)()",
          "487:     ctypes.pointer(dst)[0] = src",
          "488:     return dst",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm.py||bindings/python/capstone/arm.py": [
          "File: bindings/python/capstone/arm.py -> bindings/python/capstone/arm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .arm_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: def get_arch_info(a):",
          "79:     return (a.usermode, a.vector_size, a.vector_data, a.cps_mode, a.cps_flag, a.cc, a.update_flags, \\",
          "",
          "[Removed Lines]",
          "80:         a.writeback, a.mem_barrier, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "81:         a.writeback, a.mem_barrier, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py": [
          "File: bindings/python/capstone/arm64.py -> bindings/python/capstone/arm64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .arm64_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     )",
          "87: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "88:     return (a.cc, a.update_flags, a.writeback, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "89:     return (a.cc, a.update_flags, a.writeback, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nicolas PLANEL <nplanel@gmail.com>",
          "4: from .m68k_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     )",
          "76:     def get(a):",
          "79: class CsM68K(ctypes.Structure):",
          "80:     M68K_OPERAND_COUNT = 4",
          "",
          "[Removed Lines]",
          "77:         return copy.deepcopy(type, size)",
          "",
          "[Added Lines]",
          "78:         return copy_ctypes_list(type, size)",
          "",
          "---------------"
        ],
        "bindings/python/capstone/mips.py||bindings/python/capstone/mips.py": [
          "File: bindings/python/capstone/mips.py -> bindings/python/capstone/mips.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .mips_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     )",
          "45: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "46:     return copy.deepcopy(a.operands[:a.op_count])",
          "",
          "[Added Lines]",
          "47:     return copy_ctypes_list(a.operands[:a.op_count])",
          "",
          "---------------"
        ],
        "bindings/python/capstone/ppc.py||bindings/python/capstone/ppc.py": [
          "File: bindings/python/capstone/ppc.py -> bindings/python/capstone/ppc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .ppc_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     )",
          "60: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "61:     return (a.bc, a.bh, a.update_cr0, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "62:     return (a.bc, a.bh, a.update_cr0, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/sparc.py||bindings/python/capstone/sparc.py": [
          "File: bindings/python/capstone/sparc.py -> bindings/python/capstone/sparc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .sparc_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     )",
          "48: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "49:     return (a.cc, a.hint, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "50:     return (a.cc, a.hint, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/systemz.py||bindings/python/capstone/systemz.py": [
          "File: bindings/python/capstone/systemz.py -> bindings/python/capstone/systemz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .sysz_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     )",
          "48: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "49:     return (a.cc, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "50:     return (a.cc, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/x86.py||bindings/python/capstone/x86.py": [
          "File: bindings/python/capstone/x86.py -> bindings/python/capstone/x86.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .x86_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     return (a.prefix[:], a.opcode[:], a.rex, a.addr_size, \\",
          "70:             a.modrm, a.sib, a.disp, a.sib_index, a.sib_scale, \\",
          "71:             a.sib_base, a.xop_cc, a.sse_cc, a.avx_cc, a.avx_sae, a.avx_rm, a.eflags, \\",
          "",
          "[Removed Lines]",
          "72:             copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "73:             copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/xcore.py||bindings/python/capstone/xcore.py": [
          "File: bindings/python/capstone/xcore.py -> bindings/python/capstone/xcore.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .xcore_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     )",
          "47: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "48:     return (copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "49:     return (copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a0f327b0fabdc501602322c72750c346d6c0fa4",
      "candidate_info": {
        "commit_hash": "4a0f327b0fabdc501602322c72750c346d6c0fa4",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/4a0f327b0fabdc501602322c72750c346d6c0fa4",
        "files": [
          "include/arm.h",
          "include/arm64.h",
          "include/capstone.h",
          "include/mips.h",
          "include/ppc.h",
          "include/sparc.h",
          "include/systemz.h",
          "include/x86.h",
          "include/xcore.h"
        ],
        "message": "replace stdint.h in API headers",
        "before_after_code_files": [
          "include/arm.h||include/arm.h",
          "include/arm64.h||include/arm64.h",
          "include/capstone.h||include/capstone.h",
          "include/mips.h||include/mips.h",
          "include/ppc.h||include/ppc.h",
          "include/sparc.h||include/sparc.h",
          "include/systemz.h||include/systemz.h",
          "include/x86.h||include/x86.h",
          "include/xcore.h||include/xcore.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/arm.h||include/arm.h": [
          "File: include/arm.h -> include/arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "14: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/arm64.h||include/arm64.h": [
          "File: include/arm64.h -> include/arm64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "14: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/capstone.h||include/capstone.h": [
          "File: include/capstone.h -> include/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include <stdarg.h>",
          "13: #if defined(CAPSTONE_HAS_OSXKERNEL)",
          "14: #include <libkern/libkern.h>",
          "15: #else",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/mips.h||include/mips.h": [
          "File: include/mips.h -> include/mips.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/ppc.h||include/ppc.h": [
          "File: include/ppc.h -> include/ppc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "14: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/sparc.h||include/sparc.h": [
          "File: include/sparc.h -> include/sparc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/systemz.h||include/systemz.h": [
          "File: include/systemz.h -> include/systemz.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "14: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/x86.h||include/x86.h": [
          "File: include/x86.h -> include/x86.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "14: #define X86_REL_ADDR(insn) (insn.address + insn.size + insn.detail->x86.disp)",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ],
        "include/xcore.h||include/xcore.h": [
          "File: include/xcore.h -> include/xcore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include \"platform.h\"",
          "14: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "[Added Lines]",
          "11: #include <stdint.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c19af63e538d9d18d5029c9d36c11538fe4fa1d0",
      "candidate_info": {
        "commit_hash": "c19af63e538d9d18d5029c9d36c11538fe4fa1d0",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c19af63e538d9d18d5029c9d36c11538fe4fa1d0",
        "files": [
          "arch/X86/X86GenAsmWriter.inc"
        ],
        "message": "x86: fix (AT&T) instruction lgs for issue #805",
        "before_after_code_files": [
          "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc": [
          "File: arch/X86/X86GenAsmWriter.inc -> arch/X86/X86GenAsmWriter.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "14181:       case X86_ROL32r1:",
          "14182:         SStream_concat0(O, \"rol\\t$1, \");",
          "14183:         break;",
          "14184:     }",
          "14185: #endif",
          "14186:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14184:       case X86_LGS64rm:",
          "14185:         SStream_concat0(O, \"lgs\\t\");",
          "14186:         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10e8323f26cea5f07cfa579616877ecfdd2303c3",
      "candidate_info": {
        "commit_hash": "10e8323f26cea5f07cfa579616877ecfdd2303c3",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/10e8323f26cea5f07cfa579616877ecfdd2303c3",
        "files": [
          "arch/X86/X86Disassembler.c"
        ],
        "message": "Bugfix : setting all fields to insns cache (#899)\n\n* Bugfix : setting all fields to insns cache\n\n* Bugfix\nFixing root cause, not setting opcode to 0 in default case\n\n* Not resetting opcode to 0 in this case as well\n\n* Finalizing bugfix",
        "before_after_code_files": [
          "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c": [
          "File: arch/X86/X86Disassembler.c -> arch/X86/X86Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     case X86_CMPSSrr:  NewOpc = X86_CMPSSrr_alt;  break;",
          "231:    }",
          "234:   }",
          "235: #endif",
          "236:  } else if (type == TYPE_IMM5) {",
          "",
          "[Removed Lines]",
          "233:    MCInst_setOpcode(mcInst, NewOpc);",
          "",
          "[Added Lines]",
          "233:    if (NewOpc != 0) {",
          "234:     MCInst_setOpcode(mcInst, NewOpc);",
          "235:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:     case X86_VCMPSSZrr:  NewOpc = X86_VCMPSSZrri_alt; break;",
          "264:    }",
          "267:   }",
          "268: #endif",
          "269:  }",
          "",
          "[Removed Lines]",
          "266:    MCInst_setOpcode(mcInst, NewOpc);",
          "",
          "[Added Lines]",
          "268:    if (NewOpc != 0) {",
          "269:     MCInst_setOpcode(mcInst, NewOpc);",
          "270:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10a9c3ac86260f4e361b8b0a30d81e21b4aa1968",
      "candidate_info": {
        "commit_hash": "10a9c3ac86260f4e361b8b0a30d81e21b4aa1968",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/10a9c3ac86260f4e361b8b0a30d81e21b4aa1968",
        "files": [
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "Python: remove special case for cygwin build",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         # Do not build tests & static library",
          "100:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "101:         os.system(\"nmake\")",
          "108:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "110:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "102:     elif SYSTEM == \"cygwin\":",
          "103:         if IS_64BITS:",
          "104:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "105:         else:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "107:     else:   # Unix",
          "",
          "[Added Lines]",
          "102:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         # Do not build tests & static library",
          "91:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "92:         os.system(\"nmake\")",
          "100:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "102:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "93:     elif SYSTEM == \"cygwin\":",
          "94:         if IS_64BITS:",
          "95:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "96:         else:",
          "97:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "99:     else:   # Unix",
          "",
          "[Added Lines]",
          "93:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ]
      }
    }
  ]
}