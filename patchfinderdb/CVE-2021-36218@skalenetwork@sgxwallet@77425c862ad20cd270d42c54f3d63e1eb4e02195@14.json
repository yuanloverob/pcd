{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "325db7d6ac023f49c6d5c900bb0d0b20154c4b60",
      "candidate_info": {
        "commit_hash": "325db7d6ac023f49c6d5c900bb0d0b20154c4b60",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/325db7d6ac023f49c6d5c900bb0d0b20154c4b60",
        "files": [
          ".github/workflows/dockerimagesim.yml",
          ".gitignore",
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "CMakeLists.txt",
          "CSRManagerServer.cpp",
          "CSRManagerServer.h",
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "Dockerfile",
          "DockerfileSimulation",
          "LevelDB.cpp",
          "LevelDB.h",
          "README.md",
          "SEKManager.cpp",
          "SGXRegistrationServer.cpp",
          "SGXRegistrationServer.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "ServerDataChecker.cpp",
          "ServerInit.cpp",
          "ServerInit.h",
          "abstractCSRManagerServer.h",
          "abstractregserver.h",
          "abstractstubserver.h",
          "aclocal.m4",
          "cert_util.cpp",
          "common.h",
          "compile",
          "depcomp",
          "install-sh",
          "missing",
          "run_sgx/docker-compose.yml",
          "run_sgx_sim/docker-compose.yml",
          "scripts/docker_test.py",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "Merge branch 'develop' into enhancement/SKALE-2003-Create-backup-key",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "CSRManagerServer.cpp||CSRManagerServer.cpp",
          "CSRManagerServer.h||CSRManagerServer.h",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "LevelDB.cpp||LevelDB.cpp",
          "LevelDB.h||LevelDB.h",
          "SEKManager.cpp||SEKManager.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "SGXRegistrationServer.h||SGXRegistrationServer.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "ServerInit.h||ServerInit.h",
          "abstractCSRManagerServer.h||abstractCSRManagerServer.h",
          "abstractregserver.h||abstractregserver.h",
          "abstractstubserver.h||abstractstubserver.h",
          "aclocal.m4||aclocal.m4",
          "cert_util.cpp||cert_util.cpp",
          "common.h||common.h",
          "scripts/docker_test.py||scripts/docker_test.py",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include \"RPCException.h\"",
          "53: #include \"spdlog/spdlog.h\"",
          "55: int char2int(char _input) {",
          "56:   if (_input >= '0' && _input <= '9')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: bool sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "136:     char* _sig) {",
          "144:   uint64_t binLen;",
          "",
          "[Removed Lines]",
          "140:   auto keyStr = std::make_shared<std::string>(_encryptedKeyHex);",
          "142:   auto hash = std::make_shared<std::array<uint8_t, 32>>();",
          "",
          "[Added Lines]",
          "141:   auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "143:   auto hash = make_shared<array<uint8_t, 32>>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:     auto sigShare = keyShare->signWithHelperSGX(hash, _signerIndex);",
          "",
          "[Removed Lines]",
          "153:   auto keyShare = std::make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "",
          "[Added Lines]",
          "154:   auto keyShare = make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   @date 2019",
          "26: #include \"BLSSigShare.h\"",
          "27: #include \"BLSSignature.h\"",
          "",
          "[Removed Lines]",
          "24: using namespace std;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: #include \"BLSCrypto.h\"",
          "35: #include \"ServerInit.h\"",
          "37: #include \"BLSPrivateKeyShareSGX.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"common.h\"",
          "",
          "---------------"
        ],
        "CSRManagerServer.cpp||CSRManagerServer.cpp": [
          "File: CSRManagerServer.cpp -> CSRManagerServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <jsonrpccpp/server/connectors/httpserver.h>",
          "14: #include \"spdlog/spdlog.h\"",
          "17: CSRManagerServer *cs = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     serverVersion_t type):abstractCSRManagerServer(connector, type){}",
          "27:   Json::Value result;",
          "28:   result[\"status\"] = 0;",
          "29:   result[\"errorMessage\"] = \"\";",
          "32:   try{",
          "35:       result[\"hashes\"][i] = hashes_vect.at(i);",
          "36:     }",
          "37:   } catch (RPCException &_e) {",
          "39:     result[\"status\"] = _e.status;",
          "40:     result[\"errorMessage\"] = _e.errString;",
          "",
          "[Removed Lines]",
          "25: Json::Value GetUnsignedCSRsImpl(){",
          "26:   spdlog::info(\"Enter GetUnsignedCSRsImpl\");",
          "33:     std::vector<std::string> hashes_vect = csrDb->writeKeysToVector1(MAX_CSR_NUM);",
          "34:     for (int i = 0; i < hashes_vect.size(); i++){",
          "38:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "26: Json::Value getUnsignedCSRsImpl(){",
          "27:   spdlog::info(\"Enter getUnsignedCSRsImpl\");",
          "33:     vector<string> hashes_vect = LevelDB::getCsrDb()->writeKeysToVector1(MAX_CSR_NUM);",
          "34:     for (int i = 0; i < (int) hashes_vect.size(); i++){",
          "38:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   return result;",
          "45: }",
          "48:   Json::Value result;",
          "49:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "47: Json::Value SignByHashImpl(const std::string& hash, int status){",
          "",
          "[Added Lines]",
          "47: Json::Value signByHashImpl(const string& hash, int status){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:       throw RPCException(-111, \"Invalid csr status\");",
          "54:     }",
          "58:     if (csr_ptr == nullptr){",
          "59:       throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"HASH DOES NOT EXIST IN DB\");",
          "60:     }",
          "62:     if (status == 0) {",
          "66:       outfile.close();",
          "67:       if (access(csr_name.c_str(), F_OK) != 0) {",
          "69:         throw RPCException(FILE_NOT_FOUND, \"Csr does not exist\");",
          "70:       }",
          "74:       if (system(signClientCert.c_str()) == 0) {",
          "75:         spdlog::info(\"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "76:       } else {",
          "77:         spdlog::info(\"CLIENT CERTIFICATE GENERATION FAILED\");",
          "82:         throw RPCException(FAIL_TO_CREATE_CERTIFICATE, \"CLIENT CERTIFICATE GENERATION FAILED\");",
          "84:       }",
          "85:     }",
          "92:     result[\"status\"] = status;",
          "94:   } catch (RPCException &_e) {",
          "96:     result[\"status\"] = _e.status;",
          "97:     result[\"errorMessage\"] = _e.errString;",
          "98:   }",
          "",
          "[Removed Lines]",
          "56:     std::string csr_db_key = \"CSR:HASH:\" + hash;",
          "57:     std::shared_ptr<std::string> csr_ptr = csrDb->readString(csr_db_key);",
          "63:       std::string csr_name = \"sgx_data/cert/\" + hash + \".csr\";",
          "64:       std::ofstream outfile(csr_name);",
          "65:       outfile << *csr_ptr << std::endl;",
          "68:         csrDb->deleteKey(csr_db_key);",
          "72:       std::string signClientCert = \"cd sgx_data/cert && ./create_client_cert \" + hash;",
          "78:         csrDb->deleteKey(csr_db_key);",
          "79:         std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "80:         csrStatusDb->deleteKey(status_db_key);",
          "81:         csrStatusDb->writeDataUnique(status_db_key, \"-1\");",
          "87:     csrDb->deleteKey(csr_db_key);",
          "88:     std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "89:     csrStatusDb->deleteKey(status_db_key);",
          "90:     csrStatusDb->writeDataUnique(status_db_key, std::to_string(status));",
          "95:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "56:     string csr_db_key = \"CSR:HASH:\" + hash;",
          "57:     shared_ptr<string> csr_ptr = LevelDB::getCsrDb()->readString(csr_db_key);",
          "63:       string csr_name = \"sgx_data/cert/\" + hash + \".csr\";",
          "64:       ofstream outfile(csr_name);",
          "65:       outfile << *csr_ptr << endl;",
          "68:         LevelDB::getCsrDb()->deleteKey(csr_db_key);",
          "72:       string signClientCert = \"cd sgx_data/cert && ./create_client_cert \" + hash;",
          "78:         LevelDB::getCsrDb()->deleteKey(csr_db_key);",
          "79:         string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "80:         LevelDB::getCsrStatusDb()->deleteKey(status_db_key);",
          "81:         LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, \"-1\");",
          "87:     LevelDB::getCsrDb()->deleteKey(csr_db_key);",
          "88:     string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "89:     LevelDB::getCsrStatusDb()->deleteKey(status_db_key);",
          "90:     LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, to_string(status));",
          "95:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101: }",
          "107: }",
          "112: }",
          "114: int init_csrmanager_server(){",
          "",
          "[Removed Lines]",
          "104: Json::Value CSRManagerServer::GetUnsignedCSRs(){",
          "105:   std::lock_guard<std::recursive_mutex> lock(m);",
          "106:   return GetUnsignedCSRsImpl();",
          "109: Json::Value CSRManagerServer::SignByHash(const std::string& hash, int status){",
          "110:    std::lock_guard<std::recursive_mutex> lock(m);",
          "111:    return SignByHashImpl(hash, status);",
          "",
          "[Added Lines]",
          "104: Json::Value CSRManagerServer::getUnsignedCSRs(){",
          "105:   lock_guard<recursive_mutex> lock(m);",
          "106:   return getUnsignedCSRsImpl();",
          "109: Json::Value CSRManagerServer::signByHash(const string& hash, int status){",
          "110:    lock_guard<recursive_mutex> lock(m);",
          "111:    return signByHashImpl(hash, status);",
          "",
          "---------------"
        ],
        "CSRManagerServer.h||CSRManagerServer.h": [
          "File: CSRManagerServer.h -> CSRManagerServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   CSRManagerServer(AbstractServerConnector &connector, serverVersion_t type);",
          "25: };",
          "27: extern int init_csrmanager_server();",
          "",
          "[Removed Lines]",
          "23:   virtual Json::Value GetUnsignedCSRs();",
          "24:   virtual Json::Value SignByHash(const std::string& hash, int status);",
          "",
          "[Added Lines]",
          "23:   virtual Json::Value getUnsignedCSRs();",
          "24:   virtual Json::Value signByHash(const std::string& hash, int status);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "36: #include \"spdlog/spdlog.h\"",
          "41:   delim.push_back(symbol);",
          "43:   size_t prev = 0, pos = 0;",
          "44:   do",
          "45:   {",
          "46:     pos = str.find(delim, prev);",
          "49:     if (!token.empty()) {",
          "51:       G2_strings.push_back(koef);",
          "52:     }",
          "53:     prev = pos + delim.length();",
          "",
          "[Removed Lines]",
          "38: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "39:   std::string str(koefs);",
          "40:   std::string delim;",
          "42:   std::vector<std::string> G2_strings;",
          "47:     if (pos == std::string::npos) pos = str.length();",
          "48:     std::string token = str.substr(prev, pos-prev);",
          "50:       std::string koef(token.c_str());",
          "",
          "[Added Lines]",
          "37: #include \"common.h\"",
          "39: vector<string> SplitString(const char* koefs, const char symbol){",
          "40:   string str(koefs);",
          "41:   string delim;",
          "43:   vector<string> G2_strings;",
          "48:     if (pos == string::npos) pos = str.length();",
          "49:     string token = str.substr(prev, pos-prev);",
          "51:       string koef(token.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: }",
          "60: template<class T>",
          "62:   mpz_t t;",
          "63:   mpz_init(t);",
          "",
          "[Removed Lines]",
          "61: std::string ConvertToString(T field_elem, int base = 10) {",
          "",
          "[Added Lines]",
          "62: string ConvertToString(T field_elem, int base = 10) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   char * tmp = mpz_get_str(arr, base, t);",
          "70:   mpz_clear(t);",
          "74:   return output;",
          "75: }",
          "79:     int err_status = 0;",
          "82:     uint32_t enc_len = 0;",
          "85:     if ( err_status != 0){",
          "87:     }",
          "89:     if (DEBUG_PRINT) {",
          "96:       spdlog::info(\"in DKGCrypto encr len is {}\", enc_len);",
          "97:     }",
          "110:     return result;",
          "111: }",
          "115:   char* errMsg1 = (char*) calloc(1024,1);",
          "116:   int err_status = 0;",
          "118:   if (DEBUG_PRINT) {",
          "121:   }",
          "123:   char* public_shares = (char*)calloc(10000, 1);",
          "",
          "[Removed Lines]",
          "72:   std::string output = tmp;",
          "77: std::string gen_dkg_poly( int _t){",
          "78:     char *errMsg = (char *)calloc(1024, 1);",
          "80:     uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);;",
          "84:     status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, _t);",
          "86:         throw RPCException(-666, errMsg ) ;",
          "90:       spdlog::info(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg);",
          "93:          for ( int i = 0 ; i < 3050; i++)",
          "99:     char *hexEncrPoly = (char *) calloc(DKG_MAX_SEALED_LEN * 2 + 1, 1);//(4*BUF_LEN, 1);",
          "101:     carray2Hex(encrypted_dkg_secret, DKG_MAX_SEALED_LEN, hexEncrPoly);",
          "102:     std::string result(hexEncrPoly);",
          "106:     free(errMsg);",
          "107:     free(encrypted_dkg_secret);",
          "108:     free(hexEncrPoly);",
          "113: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int t, int n){",
          "120:     spdlog::info(\"got encr poly size {}\", std::char_traits<char>::length(encryptedPolyHex));",
          "",
          "[Added Lines]",
          "73:   string output = tmp;",
          "78: string gen_dkg_poly( int _t){",
          "79:     vector<char> errMsg(1024, 0);",
          "81:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 0);",
          "85:     if (!is_aes)",
          "86:       status = gen_dkg_secret (eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "87:     else",
          "88:       status = gen_dkg_secret_aes (eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "90:         throw RPCException(-666, errMsg.data() ) ;",
          "94:       spdlog::info(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg.data());",
          "98:     vector<char> hexEncrPoly(DKG_MAX_SEALED_LEN * 2 + 1, 0);//(4*BUF_LEN, 1);",
          "100:     carray2Hex(encrypted_dkg_secret.data(), DKG_MAX_SEALED_LEN, hexEncrPoly.data());",
          "101:     string result(hexEncrPoly.data());",
          "106: vector <vector<string>> get_verif_vect(const char* encryptedPolyHex, int t, int n){",
          "113:     spdlog::info(\"got encr poly size {}\", char_traits<char>::length(encryptedPolyHex));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   if (DEBUG_PRINT) {",
          "133:     spdlog::info(\"enc len {}\", enc_len);",
          "135:     for ( int i = 0 ; i < 3050; i++)",
          "137:   }",
          "140:   status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "141:   if ( err_status != 0){",
          "142:     throw RPCException(-666, errMsg1 );",
          "",
          "[Removed Lines]",
          "139:   uint32_t len;",
          "",
          "[Added Lines]",
          "132:   uint32_t len = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:     spdlog::info(\"public_shares:\");",
          "149:     spdlog::info(\"{}\", public_shares);",
          "152:     spdlog::info(\"get_public_shares status: {}\", err_status);",
          "154:   }",
          "158:   for ( int i = 0; i < G2_strings.size(); i++){",
          "160:     pub_shares_vect.push_back(koef_str);",
          "161:   }",
          "",
          "[Removed Lines]",
          "156:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "157:   std::vector <std::vector <std::string>> pub_shares_vect;",
          "159:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "[Added Lines]",
          "149:   vector <string> G2_strings = SplitString( public_shares, ',');",
          "150:   vector <vector <string>> pub_shares_vect;",
          "152:     vector <string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:   return pub_shares_vect;",
          "168: }",
          "171:   char* errMsg1 = (char*) calloc(1024,1);",
          "172:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "170: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::vector<std::string>& publicKeys, int t, int n){",
          "",
          "[Added Lines]",
          "163: string get_secret_shares(const string& polyName, const char* encryptedPolyHex, const vector<string>& publicKeys, int t, int n){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "178:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "179:   }",
          "183:     throw RPCException(-666, errMsg1 );",
          "184:   }",
          "187:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "189:   for ( int i = 0; i < n; i++){",
          "",
          "[Removed Lines]",
          "181:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "182:   if ( status != SGX_SUCCESS || err_status!=0){",
          "186:   std::string result;",
          "",
          "[Added Lines]",
          "174:   if (!is_aes)",
          "175:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "176:   else",
          "177:     status = set_encrypted_dkg_poly_aes(eid, &err_status, errMsg1, encr_dkg_poly, &enc_len);",
          "179:   if ( status != SGX_SUCCESS || err_status != 0){",
          "183:   string result;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "193:     char cur_share[193];",
          "194:     char s_shareG2[320];",
          "196:     if (DEBUG_PRINT) {",
          "197:       spdlog::info(\"pub_keyB is {}\", pub_keyB);",
          "198:     }",
          "",
          "[Removed Lines]",
          "195:     std::string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "",
          "[Added Lines]",
          "192:     string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "213:     }",
          "214:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "219:     writeDataToDB(DHKey_name, hexEncrKey);",
          "222:     if (DEBUG_PRINT) {",
          "223:       spdlog::info(\"name to write to db is {}\", DHKey_name);",
          "224:       spdlog::info(\"name to write to db is {}\", shareG2_name);",
          "",
          "[Removed Lines]",
          "216:     std::string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "221:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "",
          "[Added Lines]",
          "213:     string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + to_string(i) + \":\";",
          "218:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "253:     }",
          "254:     int result;",
          "255:     if (DEBUG_PRINT) {",
          "262:     }",
          "263:     char pshares[8193];",
          "264:     strncpy(pshares, publicShares, strlen(publicShares) + 1);",
          "268:     dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "[Removed Lines]",
          "261:       spdlog::info(\"publicShares length is {}\", std::char_traits<char>::length(publicShares));",
          "",
          "[Added Lines]",
          "258:       spdlog::info(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "280:     return result;",
          "281: }",
          "284:   if (DEBUG_PRINT) {",
          "285:     spdlog::info(\"ENTER CreateBLSShare\");",
          "286:   }",
          "",
          "[Removed Lines]",
          "283: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "",
          "[Added Lines]",
          "280: bool CreateBLSShare( const string& blsKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "297:   uint32_t enc_bls_len = 0;",
          "300:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "302:   if ( err_status != 0){",
          "303:      spdlog::info(\"ERROR IN ENCLAVE\");",
          "304:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "305:   }",
          "306:   else {",
          "307:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "310:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "313:     if (DEBUG_PRINT) {",
          "316:     }",
          "317:     free(hexBLSKey);",
          "318:     return true;",
          "",
          "[Removed Lines]",
          "312:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "314:       spdlog::info(\"hexBLSKey length is {}\", std::char_traits<char>::length(hexBLSKey));",
          "315:       spdlog::info(\"bls key {}\", BLSKeyName, \" is \", hexBLSKey );",
          "",
          "[Added Lines]",
          "309:     writeDataToDB(blsKeyName, hexBLSKey);",
          "311:       spdlog::info(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "312:       spdlog::info(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "321: }",
          "324:     char* errMsg1 = (char*) calloc(1024,1);",
          "325:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "323: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex){",
          "",
          "[Added Lines]",
          "320: vector<string> GetBLSPubKey(const char * encryptedKeyHex){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "341:     if ( err_status != 0){",
          "342:       throw RPCException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "343:     }",
          "346:     if (DEBUG_PRINT) {",
          "347:       spdlog::info(\"errMsg1 is {}\", errMsg1);",
          "",
          "[Removed Lines]",
          "344:     std::vector<std::string> pub_key_vect = SplitString(pub_key, ':');",
          "",
          "[Added Lines]",
          "339:     vector<string> pub_key_vect = SplitString(pub_key, ':');",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "352:     return pub_key_vect;",
          "353: }",
          "358:   int err_status = 0;",
          "362:   if (DEBUG_PRINT) {",
          "363:     spdlog::info(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "364:   }",
          "368:   uint64_t DH_enc_len = 0;",
          "369:   uint8_t encrypted_DHkey[BUF_LEN];",
          "",
          "[Removed Lines]",
          "355: std::string decrypt_DHKey(const std::string& polyName, int ind){",
          "357:   char* errMsg1 = (char*) calloc(1024,1);",
          "360:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "361:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "366:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "350: string decrypt_DHKey(const string& polyName, int ind){",
          "352:   vector<char> errMsg1(1024,0);",
          "355:   string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "356:   shared_ptr<string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "361:   vector<char> hexEncrKey(2 * BUF_LEN, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "374:   char DHKey[ECDSA_SKEY_LEN];",
          "377:   if (err_status != 0){",
          "379:     throw RPCException(ERROR_IN_ENCLAVE, \"decrypt key failed in enclave\");",
          "380:   }",
          "385:   return DHKey;",
          "386: }",
          "390:     libff::init_alt_bn128_params();",
          "391:     libff::alt_bn128_Fr el(x.c_str());",
          "392:     libff::alt_bn128_G2 elG2 = el * libff::alt_bn128_G2::one();",
          "",
          "[Removed Lines]",
          "376:   decrypt_key(eid, &err_status, errMsg1, encrypted_DHkey, DH_enc_len, DHKey);",
          "378:     free(hexEncrKey);",
          "382:   free(errMsg1);",
          "383:   free(hexEncrKey);",
          "388: std::vector<std::string> mult_G2(const std::string& x){",
          "389:     std::vector<std::string> result(4);",
          "",
          "[Added Lines]",
          "371:   decrypt_key(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "379: vector<string> mult_G2(const string& x){",
          "380:     vector<string> result(4);",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: std::string decrypt_DHKey(const std::string& polyName, int ind);",
          "44: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "42: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "[Added Lines]",
          "42: bool CreateBLSShare( const std::string& blsKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"ServerInit.h\"",
          "39: #include \"spdlog/spdlog.h\"",
          "41: using namespace leveldb;",
          "44: static WriteOptions writeOptions;",
          "45: static ReadOptions readOptions;",
          "55:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "59:     if (db == nullptr) {",
          "60:         throw RPCException(NULL_DATABASE, \"Null db\");",
          "",
          "[Removed Lines]",
          "48: LevelDB* levelDb = nullptr;",
          "49: LevelDB* csrDb = nullptr;",
          "50: LevelDB* csrStatusDb = nullptr;",
          "53: std::shared_ptr<std::string> LevelDB::readString(const std::string &_key) {",
          "57:     auto result = std::make_shared<std::string>();",
          "",
          "[Added Lines]",
          "40: #include \"common.h\"",
          "53: std::shared_ptr<string> LevelDB::readString(const string &_key) {",
          "57:     auto result = std::make_shared<string>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     return result;",
          "76: }",
          "80:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "",
          "[Removed Lines]",
          "78: void LevelDB::writeString(const std::string &_key, const std::string &_value) {",
          "",
          "[Added Lines]",
          "78: void LevelDB::writeString(const string &_key, const string &_value) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: }",
          "95:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "99:     auto status = db->Delete(writeOptions, Slice(_key));",
          "",
          "[Removed Lines]",
          "93: void LevelDB::deleteDHDKGKey (const std::string &_key) {",
          "97:     std::string full_key = \"DKG_DH_KEY_\" + _key;",
          "",
          "[Added Lines]",
          "93: void LevelDB::deleteDHDKGKey (const string &_key) {",
          "97:     string full_key = \"DKG_DH_KEY_\" + _key;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     }",
          "107: }",
          "111:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "114:     if (prefix != \"tmp_NEK:\") {",
          "115:       return;",
          "116:     }",
          "",
          "[Removed Lines]",
          "109: void LevelDB::deleteTempNEK(const std::string &_key){",
          "113:     std::string prefix = _key.substr(0,8);",
          "",
          "[Added Lines]",
          "109: void LevelDB::deleteTempNEK(const string &_key){",
          "113:     string prefix = _key.substr(0,8);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:     std::cerr << \"key deleted \" << _key << std::endl;",
          "123: }",
          "127:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "",
          "[Removed Lines]",
          "125: void LevelDB::deleteKey(const std::string &_key){",
          "",
          "[Added Lines]",
          "125: void LevelDB::deleteKey(const string &_key){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149: }",
          "153:                              size_t _valueLen) {",
          "155:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "",
          "[Removed Lines]",
          "152: void LevelDB::writeByteArray(std::string &_key, const char *value,",
          "",
          "[Added Lines]",
          "152: void LevelDB::writeByteArray(string &_key, const char *value,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:     return readCounter;",
          "189: }",
          "192:   uint64_t readCounter = 0;",
          "195:   leveldb::Iterator *it = db->NewIterator(readOptions);",
          "196:   for (it->SeekToFirst(); it->Valid(); it->Next()) {",
          "198:     keys.push_back(cur_key);",
          "200:     readCounter++;",
          "",
          "[Removed Lines]",
          "191: std::vector<std::string> LevelDB::writeKeysToVector1(uint64_t _maxKeysToVisit){",
          "193:   std::vector<std::string> keys;",
          "197:     std::string cur_key(it->key().data(), it->key().size());",
          "",
          "[Added Lines]",
          "191: std::vector<string> LevelDB::writeKeysToVector1(uint64_t _maxKeysToVisit){",
          "193:   std::vector<string> keys;",
          "197:     string cur_key(it->key().data(), it->key().size());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "208:   return keys;",
          "209: }",
          "213:   auto key = Name;",
          "",
          "[Removed Lines]",
          "211: void LevelDB::writeDataUnique(const std::string & Name, const std::string &value) {",
          "",
          "[Added Lines]",
          "211: void LevelDB::writeDataUnique(const string & Name, const string &value) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "226: }",
          "232:     leveldb::Options options;",
          "",
          "[Removed Lines]",
          "229: LevelDB::LevelDB(std::string &filename) {",
          "",
          "[Added Lines]",
          "229: LevelDB::LevelDB(string &filename) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "243: }",
          "245: LevelDB::~LevelDB() {",
          "248: }",
          "",
          "[Removed Lines]",
          "246:     if (db != nullptr)",
          "247:         delete db;",
          "",
          "[Added Lines]",
          "248: const std::shared_ptr<LevelDB> &LevelDB::getLevelDb() {",
          "249:     CHECK_STATE(levelDb)",
          "250:     return levelDb;",
          "251: }",
          "253: const std::shared_ptr<LevelDB> &LevelDB::getCsrDb() {",
          "254:     CHECK_STATE(csrDb)",
          "255:     return csrDb;",
          "256: }",
          "258: const std::shared_ptr<LevelDB> &LevelDB::getCsrStatusDb() {",
          "259:     CHECK_STATE(csrStatusDb)",
          "260:     return csrStatusDb;",
          "261: }",
          "264: std::shared_ptr<LevelDB> LevelDB::levelDb = nullptr;",
          "266: std::shared_ptr<LevelDB> LevelDB::csrDb = nullptr;",
          "268: std::shared_ptr<LevelDB> LevelDB::csrStatusDb = nullptr;",
          "270: string LevelDB::sgx_data_folder;",
          "272: bool LevelDB::isInited = false;",
          "274: void LevelDB::initDataFolderAndDBs() {",
          "276:     if (isInited)",
          "277:         return;",
          "279:     char cwd[PATH_MAX];",
          "280:     if (getcwd(cwd, sizeof(cwd)) == NULL) {",
          "281:         spdlog::error(\"could not get cwd\");",
          "282:         exit(-1);",
          "283:     }",
          "286:     sgx_data_folder = string(cwd) + \"/\" + SGXDATA_FOLDER;",
          "288:     struct stat info;",
          "289:     if (stat(sgx_data_folder.c_str(), &info) !=0 ){",
          "290:         spdlog::info(\"going to create sgx_data folder\");",
          "291:         std::string make_sgx_data_folder = \"mkdir \" + sgx_data_folder;",
          "292:         if (system(make_sgx_data_folder.c_str()) == 0){",
          "293:             spdlog::info(\"sgx_data folder was created\");",
          "294:         }",
          "295:         else{",
          "296:             spdlog::error(\"creating sgx_data folder failed\");",
          "297:             exit(-1);",
          "298:         }",
          "299:     }",
          "302:     auto dbName = sgx_data_folder +  WALLETDB_NAME;",
          "303:     levelDb = make_shared<LevelDB>(dbName);",
          "305:     auto csr_dbname = sgx_data_folder + \"CSR_DB\";",
          "306:     csrDb = make_shared<LevelDB>(csr_dbname);",
          "308:     auto csr_status_dbname = sgx_data_folder + \"CSR_STATUS_DB\";",
          "309:     csrStatusDb = make_shared<LevelDB>(csr_status_dbname);",
          "311: }",
          "313: const string &LevelDB::getSgxDataFolder() {",
          "314:     return sgx_data_folder;",
          "315: }",
          "",
          "---------------"
        ],
        "LevelDB.h||LevelDB.h": [
          "File: LevelDB.h -> LevelDB.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <string>",
          "30: #include <mutex>",
          "31: #include <vector>",
          "33: namespace leveldb {",
          "34:     class DB;",
          "35:     class Status;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: class LevelDB {",
          "45: public:",
          "55:     void writeByteArray(const char *_key, size_t _keyLen, const char *value,",
          "56:                         size_t _valueLen);",
          "60:                         size_t _valueLen);",
          "68: public:",
          "",
          "[Removed Lines]",
          "41:     std::recursive_mutex mutex;",
          "43:     leveldb::DB* db;",
          "48:     std::shared_ptr<std::string> readString(const std::string& _key);",
          "51:     void writeString(const std::string &key1, const std::string &value1);",
          "53:     void writeDataUnique(const std::string & Name, const std::string &value);",
          "59:     void writeByteArray(std::string& _key, const char *value,",
          "62:     void deleteDHDKGKey (const std::string &_key);",
          "64:     void deleteTempNEK (const std::string &_key);",
          "66:     void deleteKey(const std::string &_key);",
          "",
          "[Added Lines]",
          "41:     recursive_mutex mutex;",
          "43:     shared_ptr<leveldb::DB> db;",
          "45:     static bool isInited;",
          "47:     static shared_ptr<LevelDB> levelDb;",
          "49:     static shared_ptr<LevelDB> csrDb;",
          "51:     static shared_ptr<LevelDB> csrStatusDb;",
          "53:     static string sgx_data_folder;",
          "56: public:",
          "59:     static void initDataFolderAndDBs();",
          "61:     static const shared_ptr<LevelDB> &getLevelDb();",
          "63:     static const shared_ptr<LevelDB> &getCsrDb();",
          "65:     static const shared_ptr<LevelDB> &getCsrStatusDb();",
          "70:     shared_ptr<string> readString(const string& _key);",
          "73:     void writeString(const string &key1, const string &value1);",
          "75:     void writeDataUnique(const string & Name, const string &value);",
          "81:     void writeByteArray(string& _key, const char *value,",
          "84:     void deleteDHDKGKey (const string &_key);",
          "86:     void deleteTempNEK (const string &_key);",
          "88:     void deleteKey(const string &_key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     void throwExceptionOnError(leveldb::Status result);",
          "",
          "[Removed Lines]",
          "74:     LevelDB(std::string& filename);",
          "",
          "[Added Lines]",
          "96:     LevelDB(string& filename);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:     class KeyVisitor {",
          "80:     public:",
          "81:         virtual void visitDBKey(const char* _data) = 0;",
          "83:     };",
          "85:     uint64_t visitKeys(KeyVisitor* _visitor, uint64_t _maxKeysToVisit);",
          "89:     virtual ~LevelDB();",
          "101: #endif",
          "",
          "[Removed Lines]",
          "82:         virtual void writeDBKeysToVector(const char* _data, std::vector<const char*> & keys_vect) {}",
          "87:     std::vector<std::string> writeKeysToVector1(uint64_t _maxKeysToVisit);",
          "92: };",
          "95: extern LevelDB* levelDb;",
          "97: extern LevelDB* csrDb;",
          "99: extern LevelDB* csrStatusDb;",
          "",
          "[Added Lines]",
          "104:         virtual void writeDBKeysToVector(const char* _data, vector<const char*> & keys_vect) {}",
          "109:     vector<string> writeKeysToVector1(uint64_t _maxKeysToVisit);",
          "113:     static const string &getSgxDataFolder();",
          "116: };",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <iostream>",
          "31: #include \"sgxwallet_common.h\"",
          "32: #include \"sgxwallet.h\"",
          "34: void generate_SEK(){",
          "37:   int err_status = 0;",
          "39:   uint32_t enc_len = 0;",
          "42:   if ( err_status != 0 ){",
          "45:   }",
          "57: }",
          "",
          "[Removed Lines]",
          "36:   char *errMsg = (char *)calloc(1024, 1);",
          "38:   uint8_t* encr_SEK = (uint8_t *)calloc(1024, 1);",
          "41:   status = generate_SEK(eid, &err_status, errMsg, encr_SEK, &enc_len);",
          "43:     std::cerr << \"RPCException thrown\" << std::endl;",
          "44:     throw RPCException(-666, errMsg) ;",
          "47:   char *hexEncrKey = (char *) calloc(2*enc_len + 1, 1);",
          "48:   carray2Hex(encr_SEK, enc_len, hexEncrKey);",
          "50:   std::cerr << \"key is \" << errMsg << std::endl;",
          "52:   levelDb->writeDataUnique(\"SEK\", hexEncrKey);",
          "54:   free(errMsg);",
          "55:   free(encr_SEK);",
          "56:   free(hexEncrKey);",
          "",
          "[Added Lines]",
          "32: #include \"common.h\"",
          "37:   vector<char> errMsg(1024,0);",
          "39:   vector<uint8_t> encr_SEK(1024, 0);",
          "42:   status = generate_SEK(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len);",
          "44:     cerr << \"RPCException thrown\" << endl;",
          "45:     throw RPCException(-666, errMsg.data()) ;",
          "48:   vector<char> hexEncrKey(2*enc_len + 1, 0);",
          "50:   carray2Hex(encr_SEK.data(), enc_len, hexEncrKey.data());",
          "52:   cerr << \"key is \" << errMsg.data() << endl;",
          "54:   LevelDB::getLevelDb()->writeDataUnique(\"SEK\", hexEncrKey.data());",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"LevelDB.h\"",
          "46: #include \"spdlog/spdlog.h\"",
          "48: int DEBUG_PRINT = 0;",
          "49: int is_sgx_https = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     : AbstractRegServer(connector, type), is_cert_created(false), cert_auto_sign(auto_sign) {}",
          "68:   Json::Value result;",
          "69:   result[\"status\"] = 0;",
          "70:   result[\"errorMessage\"] = \"\";",
          "71:   try{",
          "76:     if ( !auto_sign) {",
          "79:     }",
          "81:     if (auto_sign) {",
          "85:       outfile.close();",
          "86:       if (access(csr_name.c_str(), F_OK) != 0) {",
          "87:         throw RPCException(FILE_NOT_FOUND, \"Csr does not exist\");",
          "88:       }",
          "92:       if (system(genCert.c_str()) == 0){",
          "93:           spdlog::info(\"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "",
          "[Removed Lines]",
          "67: Json::Value SignCertificateImpl(const std::string& csr, bool auto_sign = false){",
          "72:     spdlog::info(\"enter SignCertificateImpl\");",
          "74:     std::string status = \"1\";",
          "75:     std::string hash = cryptlite::sha256::hash_hex(csr);",
          "77:       std::string db_key = \"CSR:HASH:\" + hash;",
          "78:       csrDb->writeDataUnique(db_key, csr);",
          "82:       std::string csr_name = \"cert/\" + hash + \".csr\";",
          "83:       std::ofstream outfile(csr_name);",
          "84:       outfile << csr << std::endl;",
          "90:       std::string genCert = \"cd cert && ./create_client_cert \" + hash;",
          "",
          "[Added Lines]",
          "68: Json::Value signCertificateImpl(const string& csr, bool auto_sign = false){",
          "73:     spdlog::info(\"enter signCertificateImpl\");",
          "75:     string status = \"1\";",
          "76:     string hash = cryptlite::sha256::hash_hex(csr);",
          "78:       string db_key = \"CSR:HASH:\" + hash;",
          "79:       LevelDB::getCsrStatusDb()->writeDataUnique(db_key, csr);",
          "83:       string csr_name = \"cert/\" + hash + \".csr\";",
          "84:       ofstream outfile(csr_name);",
          "85:       outfile << csr << endl;",
          "91:       string genCert = \"cd cert && ./create_client_cert \" + hash;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:       }",
          "96:       else{",
          "97:           spdlog::info(\"CLIENT CERTIFICATE GENERATION FAILED\");",
          "100:           throw RPCException(FAIL_TO_CREATE_CERTIFICATE, \"CLIENT CERTIFICATE GENERATION FAILED\");",
          "102:       }",
          "",
          "[Removed Lines]",
          "98:           std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "99:           csrStatusDb->writeDataUnique(status_db_key, std::to_string(FAIL_TO_CREATE_CERTIFICATE));",
          "",
          "[Added Lines]",
          "99:           string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "100:           LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, to_string(FAIL_TO_CREATE_CERTIFICATE));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:     result[\"result\"] = true;",
          "106:     result[\"hash\"] = hash;",
          "111:   } catch (RPCException &_e) {",
          "113:     result[\"status\"] = _e.status;",
          "114:     result[\"errorMessage\"] = _e.errString;",
          "115:     result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "108:     std::string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "109:     csrStatusDb->writeDataUnique(db_key, status);",
          "112:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "109:     string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "110:     LevelDB::getCsrStatusDb()->writeDataUnique(db_key, status);",
          "113:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:   return result;",
          "119: }",
          "122:   Json::Value result;",
          "125:   try{",
          "128:     if (status_str_ptr == nullptr){",
          "129:        throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Data with this name does not exist in csr db\");",
          "130:     }",
          "133:     if ( status == 0){",
          "137:         if (!infile.is_open()) {",
          "141:           throw RPCException(FILE_NOT_FOUND, \"Certificate does not exist\");",
          "142:         } else {",
          "143:           ostringstream ss;",
          "",
          "[Removed Lines]",
          "121: Json::Value GetSertificateImpl(const std::string& hash){",
          "124:   std::string cert;",
          "126:     std::string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "127:     std::shared_ptr<string> status_str_ptr = csrStatusDb->readString(db_key);",
          "131:     int status = std::atoi(status_str_ptr->c_str());",
          "134:       std::string crt_name = \"cert/\" + hash + \".crt\";",
          "136:         std::ifstream infile(crt_name);",
          "138:           std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "139:           csrStatusDb->deleteKey(status_db_key);",
          "140:           csrStatusDb->writeDataUnique(status_db_key, std::to_string(FILE_NOT_FOUND));",
          "",
          "[Added Lines]",
          "122: Json::Value GetSertificateImpl(const string& hash){",
          "125:   string cert;",
          "127:     string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "128:     shared_ptr<string> status_str_ptr = LevelDB::getCsrStatusDb()->readString(db_key);",
          "132:     int status = atoi(status_str_ptr->c_str());",
          "135:       string crt_name = \"cert/\" + hash + \".crt\";",
          "137:         ifstream infile(crt_name);",
          "139:           string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "140:           LevelDB::getCsrStatusDb()->deleteKey(status_db_key);",
          "141:           LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, to_string(FILE_NOT_FOUND));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "145:           cert = ss.str();",
          "147:           infile.close();",
          "149:           if(system(remove_crt.c_str()) == 0){",
          "151:               spdlog::info(\" cert removed \");",
          "153:           }",
          "",
          "[Removed Lines]",
          "148:           std::string remove_crt = \"cd cert && rm -rf \" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "",
          "[Added Lines]",
          "149:           string remove_crt = \"cd cert && rm -rf \" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:     result[\"cert\"] = cert;",
          "164:   } catch (RPCException &_e) {",
          "166:     result[\"status\"] = _e.status;",
          "167:     result[\"errorMessage\"] = _e.errString;",
          "168:   }",
          "",
          "[Removed Lines]",
          "165:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "166:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "171: }",
          "176:   lock_guard<recursive_mutex> lock(m);",
          "178: }",
          "181:   lock_guard<recursive_mutex> lock(m);",
          "182:   return GetSertificateImpl(hash);",
          "183: }",
          "",
          "[Removed Lines]",
          "174: Json::Value SGXRegistrationServer::SignCertificate(const std::string& csr){",
          "175:   spdlog::info(\"Enter SignCertificate \");",
          "177:   return SignCertificateImpl(csr, cert_auto_sign);",
          "180: Json::Value SGXRegistrationServer::GetCertificate(const std::string& hash){",
          "",
          "[Added Lines]",
          "175: Json::Value SGXRegistrationServer::signCertificate(const string& csr){",
          "176:   spdlog::info(\"Enter signCertificate \");",
          "178:   return signCertificateImpl(csr, cert_auto_sign);",
          "181: Json::Value SGXRegistrationServer::getCertificate(const string& hash){",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.h||SGXRegistrationServer.h": [
          "File: SGXRegistrationServer.h -> SGXRegistrationServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   void set_cert_created(bool b);",
          "50: };",
          "",
          "[Removed Lines]",
          "47:   virtual Json::Value SignCertificate(const std::string& csr);",
          "48:   virtual Json::Value GetCertificate(const std::string& hash);",
          "",
          "[Added Lines]",
          "47:   virtual Json::Value signCertificate(const std::string& csr);",
          "48:   virtual Json::Value getCertificate(const std::string& hash);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"spdlog/spdlog.h\"",
          "57:   });",
          "58:   return !str.empty() && res == str.end();",
          "59: }",
          "",
          "[Removed Lines]",
          "54: bool isStringDec( std::string & str){",
          "55:   auto res = std::find_if_not(str.begin(), str.end(), [](char c)->bool{",
          "56:     return std::isdigit(c);",
          "",
          "[Added Lines]",
          "46: #include \"common.h\"",
          "50: bool isStringDec( string & str){",
          "51:   auto res = find_if_not(str.begin(), str.end(), [](char c)->bool{",
          "52:     return isdigit(c);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         : AbstractStubServer(connector, type) {}",
          "69: void debug_print(){",
          "71:   class MyVisitor: public LevelDB::KeyVisitor {",
          "72:   public:",
          "73:     virtual void visitDBKey(const char* _data){",
          "75:     }",
          "76:   };",
          "78:   MyVisitor v;",
          "81: }",
          "83: int init_https_server(bool check_certs) {",
          "88:   if (access(rootCAPath.c_str(), F_OK) != 0 || access(keyCAPath.c_str(), F_OK) != 0){",
          "89:     spdlog::info(\"YOU DO NOT HAVE ROOT CA CERTIFICATE\");",
          "90:     spdlog::info(\"ROOT CA CERTIFICATE IS GOING TO BE CREATED\");",
          "94:     if (system(genRootCACert.c_str()) == 0){",
          "95:       spdlog::info(\"ROOT CA CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "",
          "[Removed Lines]",
          "70:   std::cout << \"HERE ARE YOUR KEYS: \" << std::endl;",
          "74:       std::cout << _data << std::endl;",
          "80:   levelDb->visitKeys(&v, 100000000);",
          "85:   std::string rootCAPath = std::string(SGXDATA_FOLDER) + \"cert_data/rootCA.pem\";",
          "86:   std::string keyCAPath = std::string(SGXDATA_FOLDER) + \"cert_data/rootCA.key\";",
          "92:     std::string genRootCACert = \"cd cert && ./create_CA\";",
          "",
          "[Added Lines]",
          "66:   cout << \"HERE ARE YOUR KEYS: \" << endl;",
          "70:       cout << _data << endl;",
          "76:   LevelDB::getLevelDb()->visitKeys(&v, 100000000);",
          "81:   string rootCAPath = string(SGXDATA_FOLDER) + \"cert_data/rootCA.pem\";",
          "82:   string keyCAPath = string(SGXDATA_FOLDER) + \"cert_data/rootCA.key\";",
          "88:     string genRootCACert = \"cd cert && ./create_CA\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     }",
          "101:   }",
          "106:   if (access(certPath.c_str(), F_OK) != 0 || access(certPath.c_str(), F_OK) != 0){",
          "107:     spdlog::info(\"YOU DO NOT HAVE SERVER CERTIFICATE\");",
          "108:     spdlog::info(\"SERVER CERTIFICATE IS GOING TO BE CREATED\");",
          "112:     if (system(genCert.c_str()) == 0){",
          "113:       spdlog::info(\"SERVER CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "",
          "[Removed Lines]",
          "103:   std::string certPath = std::string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.crt\";",
          "104:   std::string keyPath = std::string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.key\";",
          "110:     std::string genCert = \"cd cert && ./create_server_cert\";",
          "",
          "[Added Lines]",
          "99:   string certPath = string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.crt\";",
          "100:   string keyPath = string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.key\";",
          "106:     string genCert = \"cd cert && ./create_server_cert\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146: }",
          "148: Json::Value",
          "150:     Json::Value result;",
          "152:     int errStatus = UNKNOWN_ERROR;",
          "",
          "[Removed Lines]",
          "149: importBLSKeyShareImpl(const std::string &_keyShare, const std::string &_keyShareName, int t, int n, int index) {",
          "",
          "[Added Lines]",
          "145: importBLSKeyShareImpl(const string &_keyShare, const string &_keyShareName, int t, int n, int index) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:     return result;",
          "183: }",
          "186:     Json::Value result;",
          "187:     result[\"status\"] = -1;",
          "188:     result[\"errorMessage\"] = \"Unknown server error\";",
          "",
          "[Removed Lines]",
          "185: Json::Value blsSignMessageHashImpl(const std::string &keyShareName, const std::string &messageHash,int t, int n, int signerIndex) {",
          "",
          "[Added Lines]",
          "181: Json::Value blsSignMessageHashImpl(const string &keyShareName, const string &messageHash,int t, int n, int signerIndex) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:     char *signature = (char *) calloc(BUF_LEN, 1);",
          "195:     try {",
          "196:       if ( !checkName(keyShareName, \"BLS_KEY\")){",
          "197:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "198:       }",
          "200:       if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "201:         cutHash.erase(cutHash.begin(), cutHash.begin() + 2);",
          "202:       }",
          "",
          "[Removed Lines]",
          "193:     shared_ptr <std::string> value = nullptr;",
          "199:       std::string cutHash = messageHash;",
          "",
          "[Added Lines]",
          "189:     shared_ptr <string> value = nullptr;",
          "195:       string cutHash = messageHash;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:         result[\"errorMessage\"] = _e.errString;",
          "215:         return result;",
          "216:     } catch (...) {",
          "218:         printf(\"Exception %s \\n\", p.__cxa_exception_type()->name());",
          "219:         result[\"status\"] = -1;",
          "220:         result[\"errorMessage\"] = \"Read key share has thrown exception:\";",
          "",
          "[Removed Lines]",
          "217:         std::exception_ptr p = std::current_exception();",
          "",
          "[Added Lines]",
          "213:         exception_ptr p = current_exception();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240: }",
          "244:     Json::Value result;",
          "245:     result[\"status\"] = 0;",
          "246:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "243: Json::Value importECDSAKeyImpl(const std::string &key, const std::string &keyName) {",
          "",
          "[Added Lines]",
          "239: Json::Value importECDSAKeyImpl(const string &key, const string &keyName) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "259:     spdlog::info(\"Calling method generateECDSAKey\");",
          "263:     try {",
          "264:         keys = gen_ecdsa_key();",
          "",
          "[Removed Lines]",
          "261:     std::vector<std::string>keys;",
          "",
          "[Added Lines]",
          "257:     vector<string>keys;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "267:             throw RPCException(UNKNOWN_ERROR, \"key was not generated\");",
          "268:         }",
          "272:         if (DEBUG_PRINT) {",
          "273:           spdlog::info(\"write encr key {}\", keys.at(0));",
          "",
          "[Removed Lines]",
          "270:         std::string keyName = \"NEK:\" + keys.at(2);",
          "",
          "[Added Lines]",
          "266:         string keyName = \"NEK:\" + keys.at(2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "278:         writeDataToDB(keyName, keys.at(0));",
          "280:         result[\"encryptedKey\"] = keys.at(0);",
          "284:     } catch (RPCException &_e) {",
          "286:         result[\"status\"] = _e.status;",
          "287:         result[\"errorMessage\"] = _e.errString;",
          "288:     }",
          "",
          "[Removed Lines]",
          "281:         result[\"PublicKey\"] = keys.at(1);",
          "282:         result[\"KeyName\"] = keyName;",
          "285:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "277:         result[\"publicKey\"] = keys.at(1);",
          "278:         result[\"keyName\"] = keyName;",
          "281:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "290:     return result;",
          "291: }",
          "294:   Json::Value result;",
          "295:   result[\"status\"] = 0;",
          "296:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "293: Json::Value renameECDSAKeyImpl(const std::string& KeyName, const std::string& tempKeyName){",
          "",
          "[Added Lines]",
          "289: Json::Value renameECDSAKeyImpl(const string& KeyName, const string& tempKeyName){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "299:   try {",
          "302:     if (prefix != \"tmp_NEK:\") {",
          "303:      throw RPCException(UNKNOWN_ERROR, \"wrong temp key name\");",
          "304:     }",
          "",
          "[Removed Lines]",
          "301:     std::string prefix = tempKeyName.substr(0,8);",
          "",
          "[Added Lines]",
          "297:     string prefix = tempKeyName.substr(0,8);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "306:     if (prefix != \"NEK_NODE_ID:\") {",
          "307:       throw RPCException(UNKNOWN_ERROR, \"wrong key name\");",
          "308:     }",
          "310:     if (!isStringDec(postfix)){",
          "311:       throw RPCException(UNKNOWN_ERROR, \"wrong key name\");",
          "312:     }",
          "316:     writeDataToDB(KeyName, *key_ptr);",
          "319:   } catch (RPCException &_e) {",
          "321:     result[\"status\"] = _e.status;",
          "322:     result[\"errorMessage\"] = _e.errString;",
          "323:   }",
          "",
          "[Removed Lines]",
          "309:     std::string postfix = KeyName.substr(12, KeyName.length());",
          "314:     std::shared_ptr<std::string> key_ptr = readFromDb(tempKeyName);",
          "315:     std::cerr << \"new key name is \" << KeyName <<std::endl;",
          "317:     levelDb->deleteTempNEK(tempKeyName);",
          "320:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "305:     string postfix = KeyName.substr(12, KeyName.length());",
          "310:     shared_ptr<string> key_ptr = readFromDb(tempKeyName);",
          "311:     cerr << \"new key name is \" << KeyName <<endl;",
          "313:     LevelDB::getLevelDb()->deleteTempNEK(tempKeyName);",
          "316:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "326: }",
          "330:     Json::Value result;",
          "331:     result[\"status\"] = 0;",
          "332:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "329: Json::Value ecdsaSignMessageHashImpl(int base, const std::string &_keyName, const std::string &messageHash) {",
          "",
          "[Added Lines]",
          "325: Json::Value ecdsaSignMessageHashImpl(int base, const string &_keyName, const string &messageHash) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "334:     result[\"signature_r\"] = \"\";",
          "335:     result[\"signature_s\"] = \"\";",
          "339:     if (DEBUG_PRINT) {",
          "340:       spdlog::info(\"entered ecdsaSignMessageHashImpl {}\", messageHash, \"length {}\", messageHash.length());",
          "",
          "[Removed Lines]",
          "337:     std::vector<std::string> sign_vect(3);",
          "",
          "[Added Lines]",
          "333:     vector<string> sign_vect(3);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "343:     try {",
          "346:       if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "347:         cutHash.erase(cutHash.begin(), cutHash.begin() + 2);",
          "348:       }",
          "",
          "[Removed Lines]",
          "345:       std::string cutHash = messageHash;",
          "",
          "[Added Lines]",
          "341:       string cutHash = messageHash;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "364:         throw RPCException(-22, \"Invalid base\");",
          "365:       }",
          "369:       sign_vect = ecdsa_sign_hash(key_ptr->c_str(), cutHash.c_str(), base);",
          "370:       if (sign_vect.size() != 3 ){",
          "",
          "[Removed Lines]",
          "367:       std::shared_ptr<std::string> key_ptr = readFromDb(_keyName,\"\");",
          "",
          "[Added Lines]",
          "363:       shared_ptr<string> key_ptr = readFromDb(_keyName,\"\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "380:       result[\"signature_s\"] = sign_vect.at(2);",
          "382:     } catch (RPCException &_e) {",
          "384:         result[\"status\"] = _e.status;",
          "385:         result[\"errorMessage\"] = _e.errString;",
          "386:     }",
          "",
          "[Removed Lines]",
          "383:         std::cerr << \"err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "379:         cerr << \"err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "388:     return result;",
          "389: }",
          "392:     Json::Value result;",
          "393:     result[\"status\"] = 0;",
          "394:     result[\"errorMessage\"] = \"\";",
          "397:     spdlog::info(\"Calling method getPublicECDSAKey\");",
          "401:     try {",
          "402:          if ( !checkECDSAKeyName(keyName)){",
          "403:            throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "404:          }",
          "406:          Pkey = get_ecdsa_pubkey( key_ptr->c_str());",
          "407:          if (DEBUG_PRINT) {",
          "408:            spdlog::info(\"PublicKey {}\", Pkey);",
          "409:            spdlog::info(\"PublicKey length {}\", Pkey.length());",
          "410:          }",
          "413:     } catch (RPCException &_e) {",
          "414:         result[\"status\"] = _e.status;",
          "",
          "[Removed Lines]",
          "391: Json::Value getPublicECDSAKeyImpl(const std::string& keyName){",
          "395:     result[\"PublicKey\"] = \"\";",
          "399:     std::string Pkey;",
          "405:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName);",
          "411:          result[\"PublicKey\"] = Pkey;",
          "",
          "[Added Lines]",
          "387: Json::Value getPublicECDSAKeyImpl(const string& keyName){",
          "391:     result[\"publicKey\"] = \"\";",
          "395:     string Pkey;",
          "401:          shared_ptr<string> key_ptr = readFromDb(keyName);",
          "407:          result[\"publicKey\"] = Pkey;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "418:     return result;",
          "419: }",
          "423:     Json::Value result;",
          "424:     result[\"status\"] = 0;",
          "425:     result[\"errorMessage\"] = \"\";",
          "430:     try {",
          "431:       if ( !checkName(polyName, \"POLY\")){",
          "",
          "[Removed Lines]",
          "421: Json::Value generateDKGPolyImpl(const std::string& polyName, int t) {",
          "428:     std::string encrPolyHex;",
          "",
          "[Added Lines]",
          "417: Json::Value generateDKGPolyImpl(const string& polyName, int t) {",
          "424:     string encrPolyHex;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "441:     } catch (RPCException &_e) {",
          "443:         result[\"status\"] = _e.status;",
          "444:         result[\"errorMessage\"] = _e.errString;",
          "445:     }",
          "",
          "[Removed Lines]",
          "442:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "438:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "447:     return result;",
          "448: }",
          "452:   Json::Value result;",
          "453:   result[\"status\"] = 0;",
          "454:   result[\"errorMessage\"] = \"\";",
          "457:   try {",
          "458:     if ( !checkName(polyName, \"POLY\")){",
          "459:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "",
          "[Removed Lines]",
          "450: Json::Value getVerificationVectorImpl(const std::string& polyName, int t, int n) {",
          "456:   std::vector <std::vector<std::string>> verifVector;",
          "",
          "[Added Lines]",
          "446: Json::Value getVerificationVectorImpl(const string& polyName, int t, int n) {",
          "452:   vector <vector<string>> verifVector;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "462:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");",
          "463:     }",
          "467:     verifVector = get_verif_vect(encr_poly_ptr->c_str(), t, n);",
          "470:     for ( int i = 0; i < t; i++){",
          "472:       for ( int j = 0; j < 4; j++ ){",
          "473:         result[\"Verification Vector\"][i][j] = cur_coef.at(j);",
          "474:       }",
          "475:     }",
          "477:   } catch (RPCException &_e) {",
          "479:     result[\"status\"] = _e.status;",
          "480:     result[\"errorMessage\"] = _e.errString;",
          "481:     result[\"Verification Vector\"] = \"\";",
          "",
          "[Removed Lines]",
          "465:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "471:       std::vector<std::string> cur_coef = verifVector.at(i);",
          "478:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "461:     shared_ptr<string> encr_poly_ptr = readFromDb(polyName);",
          "467:       vector<string> cur_coef = verifVector.at(i);",
          "474:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "484:   return result;",
          "485: }",
          "488:     spdlog::info(\"enter getSecretShareImpl\");",
          "489:     Json::Value result;",
          "490:     result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "487: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "",
          "[Added Lines]",
          "483: Json::Value getSecretShareImpl(const string& polyName, const Json::Value& publicKeys, int t, int n){",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "501:           throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "502:         }",
          "507:         for ( int i = 0; i < n ; i++) {",
          "508:             if ( !checkHex(publicKeys[i].asString(), 64)){",
          "509:               throw RPCException(INVALID_HEX, \"Invalid public key\");",
          "",
          "[Removed Lines]",
          "504:         std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "506:         std::vector<std::string> pubKeys_vect;",
          "",
          "[Added Lines]",
          "500:         shared_ptr<string> encr_poly_ptr = readFromDb(polyName);",
          "502:         vector<string> pubKeys_vect;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "511:             pubKeys_vect.push_back(publicKeys[i].asString());",
          "512:         }",
          "518:     } catch (RPCException &_e) {",
          "520:         result[\"status\"] = _e.status;",
          "521:         result[\"errorMessage\"] = _e.errString;",
          "523:     }",
          "525:     return result;",
          "526: }",
          "533:   Json::Value result;",
          "534:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "514:         std::string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, t, n);",
          "516:         result[\"SecretShare\"] = s;",
          "522:         result[\"SecretShare\"] = \"\";",
          "528: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName,",
          "529:                                   const std::string& SecretShare, int t, int n, int ind){",
          "531:   spdlog::info(\"enter DKGVerificationImpl\");",
          "",
          "[Added Lines]",
          "510:         string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, t, n);",
          "512:         result[\"secretShare\"] = s;",
          "518:         result[\"secretShare\"] = \"\";",
          "524: Json::Value dkgVerificationImpl(const string& publicShares, const string& ethKeyName,",
          "525:                                   const string& SecretShare, int t, int n, int ind){",
          "527:   spdlog::info(\"enter dkgVerificationImpl\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "538:   try {",
          "541:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "542:     }",
          "543:     if( !check_n_t(t, n) || ind > n || ind < 0){",
          "",
          "[Removed Lines]",
          "540:     if ( !checkECDSAKeyName(EthKeyName)){",
          "",
          "[Added Lines]",
          "536:     if ( !checkECDSAKeyName(ethKeyName)){",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "550:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid length of public shares\");",
          "551:     }",
          "555:     if ( !VerifyShares(publicShares.c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(), t, n, ind )){",
          "556:       result[\"result\"] = false;",
          "557:     }",
          "559:   } catch (RPCException &_e) {",
          "561:     result[\"status\"] = _e.status;",
          "562:     result[\"errorMessage\"] = _e.errString;",
          "563:     result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "553:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "[Added Lines]",
          "549:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(ethKeyName);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "566:   return result;",
          "567: }",
          "573:   Json::Value result;",
          "574:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "569: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n){",
          "571:   spdlog::info(\"CreateBLSPrivateKeyImpl entered\");",
          "",
          "[Added Lines]",
          "565: Json::Value createBLSPrivateKeyImpl(const string & blsKeyName, const string& ethKeyName, const string& polyName, const string & SecretShare, int t, int n){",
          "567:   spdlog::info(\"createBLSPrivateKeyImpl entered\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "581:       spdlog::info(\"secret shares - {}\", SecretShare);",
          "582:       throw RPCException(INVALID_SECRET_SHARES_LENGTH, \"Invalid secret share length\");",
          "583:     }",
          "585:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "586:     }",
          "587:     if ( !checkName(polyName, \"POLY\")){",
          "588:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "589:     }",
          "591:       throw RPCException(INVALID_POLY_NAME, \"Invalid BLS key name\");",
          "592:     }",
          "593:     if( !check_n_t(t, n)){",
          "594:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "595:     }",
          "597:     if (DEBUG_PRINT) {",
          "598:       spdlog::info(\"secret shares from json are - {}\", SecretShare);",
          "599:     }",
          "604:      if (res){",
          "605:          spdlog::info(\"BLS KEY SHARE CREATED \");",
          "606:      }",
          "",
          "[Removed Lines]",
          "584:     if ( !checkECDSAKeyName(EthKeyName)){",
          "590:     if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "596:     std::vector<std::string> sshares_vect;",
          "601:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "603:     bool res = CreateBLSShare(BLSKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "",
          "[Added Lines]",
          "580:     if ( !checkECDSAKeyName(ethKeyName)){",
          "586:     if ( !checkName(blsKeyName, \"BLS_KEY\")){",
          "592:     vector<string> sshares_vect;",
          "597:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(ethKeyName);",
          "599:     bool res = CreateBLSShare(blsKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "609:      }",
          "611:      for ( int i = 0; i < n; i++){",
          "616:      }",
          "618:   } catch (RPCException &_e) {",
          "620:     result[\"status\"] = _e.status;",
          "621:     result[\"errorMessage\"] = _e.errString;",
          "",
          "[Removed Lines]",
          "612:        std::string name = polyName + \"_\" + std::to_string(i) + \":\";",
          "613:        levelDb -> deleteDHDKGKey(name);",
          "614:        std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "615:        levelDb -> deleteKey(shareG2_name);",
          "",
          "[Added Lines]",
          "608:        string name = polyName + \"_\" + to_string(i) + \":\";",
          "609:        LevelDB::getLevelDb() -> deleteDHDKGKey(name);",
          "610:        string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "611:        LevelDB::getLevelDb() -> deleteKey(shareG2_name);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "625:   return result;",
          "626: }",
          "630:     Json::Value result;",
          "631:     result[\"status\"] = 0;",
          "632:     result[\"errorMessage\"] = \"\";",
          "634:     try {",
          "636:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "637:       }",
          "639:       if (DEBUG_PRINT) {",
          "640:         spdlog::info(\"encr_bls_key_share is {}\", *encryptedKeyHex_ptr);",
          "641:         spdlog::info(\"length is {}\", encryptedKeyHex_ptr->length());",
          "644:       }",
          "646:       for ( uint8_t i = 0; i < 4; i++) {",
          "647:         result[\"BLSPublicKeyShare\"][i] = public_key_vect.at(i);",
          "648:       }",
          "650:     } catch (RPCException &_e) {",
          "652:         result[\"status\"] = _e.status;",
          "653:         result[\"errorMessage\"] = _e.errString;",
          "654:     }",
          "",
          "[Removed Lines]",
          "628: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName){",
          "635:       if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "638:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "645:       std::vector<std::string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "651:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "624: Json::Value getBLSPublicKeyShareImpl(const string & blsKeyName){",
          "631:       if ( !checkName(blsKeyName, \"BLS_KEY\")){",
          "634:       shared_ptr<string> encryptedKeyHex_ptr = readFromDb(blsKeyName);",
          "641:       vector<string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "647:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "658:     return result;",
          "659: }",
          "662:   Json::Value result;",
          "663:   result[\"status\"] = 0;",
          "664:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "661: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind){",
          "",
          "[Added Lines]",
          "657: Json::Value complaintResponseImpl(const string& polyName, int ind){",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "666:     if ( !checkName(polyName, \"POLY\")){",
          "667:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "668:     }",
          "674:     result[\"share*G2\"] = *shareG2_ptr;",
          "675:     result[\"DHKey\"] = DHKey;",
          "677:   } catch (RPCException &_e) {",
          "679:     result[\"status\"] = _e.status;",
          "680:     result[\"errorMessage\"] = _e.errString;",
          "681:   }",
          "",
          "[Removed Lines]",
          "669:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(ind) + \":\";",
          "670:     std::shared_ptr<std::string> shareG2_ptr = readFromDb(shareG2_name);",
          "672:     std::string DHKey = decrypt_DHKey(polyName, ind);",
          "678:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "665:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(ind) + \":\";",
          "666:     shared_ptr<string> shareG2_ptr = readFromDb(shareG2_name);",
          "668:     string DHKey = decrypt_DHKey(polyName, ind);",
          "674:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "685: }",
          "688:     Json::Value result;",
          "689:     result[\"status\"] = 0;",
          "690:     result[\"errorMessage\"] = \"\";",
          "691:     try {",
          "694:         for ( uint8_t i = 0; i < 4; i++) {",
          "695:             result[\"x*G2\"][i] = xG2_vect.at(i);",
          "696:         }",
          "698:     } catch (RPCException &_e) {",
          "700:         result[\"status\"] = _e.status;",
          "701:         result[\"errorMessage\"] = _e.errString;",
          "702:     }",
          "",
          "[Removed Lines]",
          "687: Json::Value MultG2Impl(const std::string& x){",
          "692:         spdlog::info(\"MultG2Impl try \");",
          "693:         std::vector<std::string> xG2_vect = mult_G2(x);",
          "699:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "683: Json::Value multG2Impl(const string& x){",
          "688:         spdlog::info(\"multG2Impl try \");",
          "689:         vector<string> xG2_vect = mult_G2(x);",
          "695:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "704:     return result;",
          "705: }",
          "708:     Json::Value result;",
          "709:     try {",
          "711:     result[\"IsExist\"] = true;",
          "712:     result[\"status\"] = 0;",
          "713:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "707: Json::Value IsPolyExistsImpl(const std::string& polyName){",
          "710:     std::shared_ptr<std::string> poly_str_ptr = levelDb->readString(polyName);",
          "",
          "[Added Lines]",
          "703: Json::Value isPolyExistsImpl(const string& polyName){",
          "706:     std::shared_ptr<std::string> poly_str_ptr = LevelDB::getLevelDb()->readString(polyName);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "736: }",
          "740:   spdlog::info(\"entered generateDKGPoly\");",
          "741:   lock_guard<recursive_mutex> lock(m);",
          "742:   return generateDKGPolyImpl(polyName, t);",
          "743: }",
          "746:   lock_guard<recursive_mutex> lock(m);",
          "747:   return getVerificationVectorImpl(polyName, t, n);",
          "748: }",
          "751:     lock_guard<recursive_mutex> lock(m);",
          "752:     return getSecretShareImpl(polyName, publicKeys, t, n);",
          "753: }",
          "756:   lock_guard<recursive_mutex> lock(m);",
          "758: }",
          "761:   lock_guard<recursive_mutex> lock(m);",
          "763: }",
          "766:     lock_guard<recursive_mutex> lock(m);",
          "768: }",
          "",
          "[Removed Lines]",
          "739: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "745: Json::Value SGXWalletServer::getVerificationVector(const std::string& polyName, int t, int n){",
          "750: Json::Value SGXWalletServer::getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "755: Json::Value  SGXWalletServer::DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index){",
          "757:   return DKGVerificationImpl(publicShares, EthKeyName, SecretShare, t, n, index);",
          "760: Json::Value SGXWalletServer::CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n){",
          "762:   return CreateBLSPrivateKeyImpl(BLSKeyName, EthKeyName, polyName, SecretShare, t, n);",
          "765: Json::Value SGXWalletServer::GetBLSPublicKeyShare(const std::string & BLSKeyName){",
          "767:     return GetBLSPublicKeyShareImpl(BLSKeyName);",
          "",
          "[Added Lines]",
          "735: Json::Value SGXWalletServer::generateDKGPoly(const string& polyName, int t){",
          "741: Json::Value SGXWalletServer::getVerificationVector(const string& polyName, int t, int n){",
          "746: Json::Value SGXWalletServer::getSecretShare(const string& polyName, const Json::Value& publicKeys, int t, int n){",
          "751: Json::Value  SGXWalletServer::dkgVerification( const string& publicShares, const string& ethKeyName, const string& SecretShare, int t, int n, int index){",
          "753:   return dkgVerificationImpl(publicShares, ethKeyName, SecretShare, t, n, index);",
          "756: Json::Value SGXWalletServer::createBLSPrivateKey(const string & blsKeyName, const string& ethKeyName, const string& polyName, const string& SecretShare, int t, int n){",
          "758:   return createBLSPrivateKeyImpl(blsKeyName, ethKeyName, polyName, SecretShare, t, n);",
          "761: Json::Value SGXWalletServer::getBLSPublicKeyShare(const string & blsKeyName){",
          "763:     return getBLSPublicKeyShareImpl(blsKeyName);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "774:     return generateECDSAKeyImpl();",
          "775: }",
          "778:   lock_guard<recursive_mutex> lock(m);",
          "779:   return renameECDSAKeyImpl(KeyName, tempKeyName);",
          "780: }",
          "783:   lock_guard<recursive_mutex> lock(m);",
          "784:   return getPublicECDSAKeyImpl(_keyName);",
          "785: }",
          "789:   lock_guard<recursive_mutex> lock(m);",
          "790:   spdlog::info(\"entered ecdsaSignMessageHash\");",
          "791:   if (DEBUG_PRINT) {",
          "",
          "[Removed Lines]",
          "777: Json::Value SGXWalletServer::renameECDSAKey(const std::string& KeyName, const std::string& tempKeyName){",
          "782: Json::Value SGXWalletServer::getPublicECDSAKey(const std::string &_keyName) {",
          "788: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "",
          "[Added Lines]",
          "773: Json::Value SGXWalletServer::renameECDSAKey(const string& KeyName, const string& tempKeyName){",
          "778: Json::Value SGXWalletServer::getPublicECDSAKey(const string &_keyName) {",
          "784: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const string &_keyName, const string &messageHash ) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "798: Json::Value",
          "800:                                     int index) {",
          "801:     lock_guard<recursive_mutex> lock(m);",
          "802:     return importBLSKeyShareImpl(_keyShare, _keyShareName, t, n, index );",
          "803: }",
          "806:                                         int signerIndex) {",
          "807:     lock_guard<recursive_mutex> lock(m);",
          "808:     return blsSignMessageHashImpl(keyShareName, messageHash, t, n, signerIndex);",
          "809: }",
          "812:   lock_guard<recursive_mutex> lock(m);",
          "813:   return importECDSAKeyImpl(key, keyName);",
          "814: }",
          "817:   lock_guard<recursive_mutex> lock(m);",
          "819: }",
          "822:     lock_guard<recursive_mutex> lock(m);",
          "824: }",
          "827:     lock_guard<recursive_mutex> lock(m);",
          "829: }",
          "831: Json::Value SGXWalletServer::getServerStatus() {",
          "",
          "[Removed Lines]",
          "799: SGXWalletServer::importBLSKeyShare(const std::string &_keyShare, const std::string &_keyShareName, int t, int n,",
          "805: Json::Value SGXWalletServer::blsSignMessageHash(const std::string &keyShareName, const std::string &messageHash, int t, int n,",
          "811: Json::Value SGXWalletServer::importECDSAKey(const std::string &key, const std::string &keyName) {",
          "816: Json::Value SGXWalletServer::ComplaintResponse(const std::string& polyName, int ind){",
          "818:   return ComplaintResponseImpl(polyName, ind);",
          "821: Json::Value SGXWalletServer::MultG2(const std::string& x){",
          "823:     return MultG2Impl(x);",
          "826: Json::Value SGXWalletServer::IsPolyExists(const std::string& polyName){",
          "828:     return IsPolyExistsImpl(polyName);",
          "",
          "[Added Lines]",
          "795: SGXWalletServer::importBLSKeyShare(const string &_keyShare, const string &_keyShareName, int t, int n,",
          "801: Json::Value SGXWalletServer::blsSignMessageHash(const string &keyShareName, const string &messageHash, int t, int n,",
          "807: Json::Value SGXWalletServer::importECDSAKey(const string &key, const string &keyName) {",
          "812: Json::Value SGXWalletServer::complaintResponse(const string& polyName, int ind){",
          "814:   return complaintResponseImpl(polyName, ind);",
          "817: Json::Value SGXWalletServer::multG2(const string& x){",
          "819:     return multG2Impl(x);",
          "822: Json::Value SGXWalletServer::isPolyExists(const string& polyName){",
          "824:     return isPolyExistsImpl(polyName);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "836: shared_ptr<string> readFromDb(const string & name, const string & prefix) {",
          "840:   if (dataStr == nullptr) {",
          "841:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Data with this name does not exist\");",
          "",
          "[Removed Lines]",
          "838:   auto dataStr = levelDb->readString(prefix + name);",
          "",
          "[Added Lines]",
          "834:   auto dataStr = LevelDB::getLevelDb()->readString(prefix + name);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "847: shared_ptr<string> readKeyShare(const string &_keyShareName) {",
          "851:     if (keyShareStr == nullptr) {",
          "852:         throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key share with this name does not exist\");",
          "",
          "[Removed Lines]",
          "849:     auto keyShareStr = levelDb->readString(\"BLSKEYSHARE:\" + _keyShareName);",
          "",
          "[Added Lines]",
          "845:     auto keyShareStr = LevelDB::getLevelDb()->readString(\"BLSKEYSHARE:\" + _keyShareName);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "866:     val[\"index\"] = index;",
          "867:     val[\"n'\"] = n;",
          "871:     auto key = \"BLSKEYSHARE:\" + _keyShareName;",
          "874:         throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Key share with this name already exists\");",
          "875:     }",
          "878: }",
          "880: void writeDataToDB(const string & Name, const string &value) {",
          "",
          "[Removed Lines]",
          "869:     std::string json = writer.write(val);",
          "873:     if (levelDb->readString(_keyShareName) != nullptr) {",
          "877:     levelDb->writeString(key, value);",
          "",
          "[Added Lines]",
          "865:     string json = writer.write(val);",
          "869:     if (LevelDB::getLevelDb()->readString(_keyShareName) != nullptr) {",
          "873:     LevelDB::getLevelDb()->writeString(key, value);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "882:   Json::FastWriter writer;",
          "884:   val[\"value\"] = value;",
          "887:   auto key = Name;",
          "890:     spdlog::info(\"name {}\", Name, \" already exists\");",
          "891:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "892:   }",
          "895:   if (DEBUG_PRINT) {",
          "896:     spdlog::info(\"{} \", Name, \" is written to db \");",
          "897:   }",
          "",
          "[Removed Lines]",
          "885:   std::string json = writer.write(val);",
          "889:   if (levelDb->readString(Name) != nullptr) {",
          "894:   levelDb->writeString(key, value);",
          "",
          "[Added Lines]",
          "881:   string json = writer.write(val);",
          "885:   if (LevelDB::getLevelDb()->readString(Name) != nullptr) {",
          "890:   LevelDB::getLevelDb()->writeString(key, value);",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     virtual Json::Value generateDKGPoly(const std::string& polyName, int t);",
          "57:     virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n);",
          "58:     virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n);",
          "66:     virtual Json::Value getServerStatus();",
          "68: };",
          "",
          "[Removed Lines]",
          "59:     virtual Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "60:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "61:     virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName);",
          "62:     virtual Json::Value ComplaintResponse(const std::string& polyName, int ind);",
          "63:     virtual Json::Value MultG2(const std::string & x);",
          "64:     virtual Json::Value IsPolyExists(const std::string& polyName);",
          "",
          "[Added Lines]",
          "59:     virtual Json::Value dkgVerification(const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index);",
          "60:     virtual Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "61:     virtual Json::Value getBLSPublicKeyShare(const std::string & blsKeyName);",
          "62:     virtual Json::Value complaintResponse(const std::string& polyName, int ind);",
          "63:     virtual Json::Value multG2(const std::string & x);",
          "64:     virtual Json::Value isPolyExists(const std::string& polyName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: Json::Value generateDKGPolyImpl(const std::string& polyName, int t);",
          "86: Json::Value getVerificationVectorImpl(const std::string& polyName, int t, int n);",
          "87: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n);",
          "95: Json::Value getServerStatusImpl();",
          "",
          "[Removed Lines]",
          "88: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "89: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "90: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName);",
          "91: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind);",
          "92: Json::Value MultG2Impl(const std::string & x);",
          "93: Json::Value IsPolyExistsImpl(const std::string& polyName);",
          "",
          "[Added Lines]",
          "87: Json::Value dkgVerificationImpl(const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index);",
          "88: Json::Value createBLSPrivateKeyImpl(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "89: Json::Value getBLSPublicKeyShareImpl(const std::string & blsKeyName);",
          "90: Json::Value complaintResponseImpl(const std::string& polyName, int ind);",
          "91: Json::Value multG2Impl(const std::string & x);",
          "92: Json::Value isPolyExistsImpl(const std::string& polyName);",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <iostream>",
          "30: #include \"spdlog/spdlog.h\"",
          "34:     size_t prev = 0, pos = 0;",
          "35:     do {",
          "36:         pos = str.find(delim, prev);",
          "39:         if (!token.empty()) tokens.push_back(token);",
          "40:         prev = pos + delim.length();",
          "41:     } while (pos < str.length() && prev < str.length());",
          "",
          "[Removed Lines]",
          "32: std::vector<std::string> SplitString(const std::string& str, const std::string& delim = \":\"){",
          "33:     std::vector<std::string> tokens;",
          "37:         if (pos == std::string::npos) pos = str.length();",
          "38:         std::string token = str.substr(prev, pos-prev);",
          "",
          "[Added Lines]",
          "31: #include \"common.h\"",
          "33: vector<string> SplitString(const string& str, const string& delim = \":\"){",
          "34:     vector<string> tokens;",
          "38:         if (pos == string::npos) pos = str.length();",
          "39:         string token = str.substr(prev, pos-prev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     return tokens;",
          "44: }",
          "48:   if (parts.size() != 2) {",
          "49:     spdlog::info(\"ECDSAKeyName num parts != 2\");",
          "50:     return false;",
          "",
          "[Removed Lines]",
          "46: bool checkECDSAKeyName(const std::string& keyName) {",
          "47:   std::vector<std::string> parts = SplitString(keyName);",
          "",
          "[Added Lines]",
          "47: bool checkECDSAKeyName(const string& keyName) {",
          "48:   vector<string> parts = SplitString(keyName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   return true;",
          "70: }",
          "73:   if ( hex.length() > sizeInBytes * 2 || hex.length() == 0){",
          "74:     return false;",
          "75:   }",
          "",
          "[Removed Lines]",
          "72: bool checkHex(const std::string& hex, const uint32_t sizeInBytes){",
          "",
          "[Added Lines]",
          "73: bool checkHex(const string& hex, const uint32_t sizeInBytes){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:   return true;",
          "87: }",
          "91:     if ( parts.size() != 7) {",
          "92:         spdlog::info(\"parts.size() != 7\");",
          "93:         return false;",
          "",
          "[Removed Lines]",
          "89: bool checkName (const std::string& Name, const std::string& prefix){",
          "90:     std::vector<std::string> parts = SplitString(Name);",
          "",
          "[Added Lines]",
          "90: bool checkName (const string& Name, const string& prefix){",
          "91:     vector<string> parts = SplitString(Name);",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     libff::init_alt_bn128_params();",
          "106:     if (encr_SEK_ptr == nullptr){",
          "107:       spdlog::info(\"SEK was not created yet\");",
          "108:       generate_SEK();",
          "",
          "[Removed Lines]",
          "75:     char cwd[PATH_MAX];",
          "76:     if (getcwd(cwd, sizeof(cwd)) == NULL) {",
          "77:         spdlog::error(\"could not get cwd\");",
          "78:         exit(-1);",
          "79:     }",
          "82:     std::string sgx_data_folder = string(cwd) + \"/\" + SGXDATA_FOLDER;",
          "83:     struct stat info;",
          "84:     if (stat(sgx_data_folder.c_str(), &info) !=0 ){",
          "85:       spdlog::info(\"going to create sgx_data folder\");",
          "86:       std::string make_sgx_data_folder = \"mkdir \" + sgx_data_folder;",
          "87:       if (system(make_sgx_data_folder.c_str()) == 0){",
          "88:         spdlog::info(\"sgx_data folder was created\");",
          "89:       }",
          "90:       else{",
          "91:         spdlog::error(\"creating sgx_data folder failed\");",
          "92:         exit(-1);",
          "93:       }",
          "94:     }",
          "96:     static std::string dbName = sgx_data_folder +  WALLETDB_NAME;",
          "97:     levelDb = new LevelDB(dbName);",
          "99:     static std::string csr_dbname = sgx_data_folder + \"CSR_DB\";",
          "100:     csrDb = new LevelDB(csr_dbname);",
          "102:     static std::string csr_status_dbname = sgx_data_folder + \"CSR_STATUS_DB\";",
          "103:     csrStatusDb = new LevelDB(csr_status_dbname);",
          "105:     std::shared_ptr<std::string> encr_SEK_ptr = levelDb->readString(\"SEK\");",
          "",
          "[Added Lines]",
          "75:     LevelDB::initDataFolderAndDBs();",
          "78:     std::shared_ptr<std::string> encr_SEK_ptr = LevelDB::getLevelDb()->readString(\"SEK\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:     eid = 0;",
          "117:     updated = 0;",
          "121: #ifndef SGX_HW_SIM",
          "122:     support = get_sgx_support();",
          "123:     if (!SGX_OK(support)) {",
          "124:         sgx_support_perror(support);",
          "",
          "[Removed Lines]",
          "119:     unsigned long support;",
          "",
          "[Added Lines]",
          "95:     unsigned long support;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     sgxServerInited = 1;",
          "175:     if (is_sgx_https) {",
          "176:       init_https_server(check_cert);",
          "177:       init_registration_server(sign_automatically);",
          "",
          "[Removed Lines]",
          "173:     init_daemon();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ServerInit.h||ServerInit.h": [
          "File: ServerInit.h -> ServerInit.h"
        ],
        "abstractCSRManagerServer.h||abstractCSRManagerServer.h": [
          "File: abstractCSRManagerServer.h -> abstractCSRManagerServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: public:",
          "13:     abstractCSRManagerServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<abstractCSRManagerServer>(conn, type)",
          "14:     {",
          "17:     }",
          "20:     {",
          "21:     (void)request;",
          "23:     }",
          "25:     {",
          "27:     }",
          "32: };",
          "",
          "[Removed Lines]",
          "15:         this->bindAndAddMethod(jsonrpc::Procedure(\"GetUnsignedCSRs\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, NULL), &abstractCSRManagerServer::GetUnsignedCSRsI);",
          "16:         this->bindAndAddMethod(jsonrpc::Procedure(\"SignByHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"hash\",jsonrpc::JSON_STRING, \"status\", jsonrpc::JSON_INTEGER, NULL), &abstractCSRManagerServer::SignByHashI);",
          "19:     inline virtual void GetUnsignedCSRsI(const Json::Value &request, Json::Value &response)",
          "22:     response = this->GetUnsignedCSRs();",
          "24:     inline virtual void SignByHashI(const Json::Value &request, Json::Value &response)",
          "26:         response = this->SignByHash( request[\"hash\"].asString(), request[\"status\"].asInt());",
          "29:     virtual Json::Value GetUnsignedCSRs() = 0;",
          "30:     virtual Json::Value SignByHash(const std::string& hash, int status) = 0;",
          "",
          "[Added Lines]",
          "15:         this->bindAndAddMethod(jsonrpc::Procedure(\"getUnsignedCSRs\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, NULL), &abstractCSRManagerServer::getUnsignedCSRsI);",
          "16:         this->bindAndAddMethod(jsonrpc::Procedure(\"signByHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"hash\",jsonrpc::JSON_STRING, \"status\", jsonrpc::JSON_INTEGER, NULL), &abstractCSRManagerServer::signByHashI);",
          "19:     inline virtual void getUnsignedCSRsI(const Json::Value &request, Json::Value &response)",
          "22:     response = this->getUnsignedCSRs();",
          "24:     inline virtual void signByHashI(const Json::Value &request, Json::Value &response)",
          "26:         response = this->signByHash( request[\"hash\"].asString(), request[\"status\"].asInt());",
          "29:     virtual Json::Value getUnsignedCSRs() = 0;",
          "30:     virtual Json::Value signByHash(const std::string& hash, int status) = 0;",
          "",
          "---------------"
        ],
        "abstractregserver.h||abstractregserver.h": [
          "File: abstractregserver.h -> abstractregserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: public:",
          "33:   AbstractRegServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractRegServer>(conn, type)",
          "34:   {",
          "37:   }",
          "40:   {",
          "43:   }",
          "45:   {",
          "47:   }",
          "53: };",
          "",
          "[Removed Lines]",
          "35:     this->bindAndAddMethod(jsonrpc::Procedure(\"SignCertificate\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"certificate\",jsonrpc::JSON_STRING, NULL), &AbstractRegServer::SignCertificateI);",
          "36:     this->bindAndAddMethod(jsonrpc::Procedure(\"GetCertificate\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"hash\",jsonrpc::JSON_STRING, NULL), &AbstractRegServer::GetCertificateI);",
          "39:   inline virtual void SignCertificateI(const Json::Value &request, Json::Value &response)",
          "41:       std::cerr << \"SignCertificateI in abstr server \" << std::endl;",
          "42:       response = this->SignCertificate( request[\"certificate\"].asString());",
          "44:   inline virtual void GetCertificateI(const Json::Value &request, Json::Value &response)",
          "46:     response = this->GetCertificate( request[\"hash\"].asString());",
          "50:   virtual Json::Value SignCertificate(const std::string& cert) = 0;",
          "51:   virtual Json::Value GetCertificate(const std::string& hash) = 0;",
          "",
          "[Added Lines]",
          "35:     this->bindAndAddMethod(jsonrpc::Procedure(\"signCertificate\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"certificate\",jsonrpc::JSON_STRING, NULL), &AbstractRegServer::signCertificateI);",
          "36:     this->bindAndAddMethod(jsonrpc::Procedure(\"getCertificate\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"hash\",jsonrpc::JSON_STRING, NULL), &AbstractRegServer::getCertificateI);",
          "39:   inline virtual void signCertificateI(const Json::Value &request, Json::Value &response)",
          "41:       std::cerr << \"signCertificateI in abstr server \" << std::endl;",
          "42:       response = this->signCertificate( request[\"certificate\"].asString());",
          "44:   inline virtual void getCertificateI(const Json::Value &request, Json::Value &response)",
          "46:     response = this->getCertificate( request[\"hash\"].asString());",
          "50:   virtual Json::Value signCertificate(const std::string& cert) = 0;",
          "51:   virtual Json::Value getCertificate(const std::string& hash) = 0;",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:           this->bindAndAddMethod(jsonrpc::Procedure(\"importECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"key\",jsonrpc::JSON_STRING,\"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::importECDSAKeyI);",
          "19:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::generateECDSAKeyI);",
          "21:           this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "22:           this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "24:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "25:           this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"t\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "26:           this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_ARRAY, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "34:           this->bindAndAddMethod(jsonrpc::Procedure(\"getServerStatus\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::getServerStatusI);",
          "35:         }",
          "",
          "[Removed Lines]",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"renameECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"KeyName\",jsonrpc::JSON_STRING,\"tempKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::renameECDSAKeyI);",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"GetBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::GetBLSPublicKeyShareI);",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"ComplaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::ComplaintResponseI);",
          "31:           this->bindAndAddMethod(jsonrpc::Procedure(\"MultG2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"x\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::MultG2I);",
          "32:           this->bindAndAddMethod(jsonrpc::Procedure(\"IsPolyExists\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::IsPolyExistsI);",
          "",
          "[Added Lines]",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"renameECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING,\"tempKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::renameECDSAKeyI);",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"dkgVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"ethKeyName\",jsonrpc::JSON_STRING, \"secretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::dkgVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"createBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"blsKeyName\",jsonrpc::JSON_STRING, \"ethKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"secretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::createBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"getBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"blsKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getBLSPublicKeyShareI);",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"complaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::complaintResponseI);",
          "31:           this->bindAndAddMethod(jsonrpc::Procedure(\"multG2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"x\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::multG2I);",
          "32:           this->bindAndAddMethod(jsonrpc::Procedure(\"isPolyExists\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::isPolyExistsI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         }",
          "55:         inline virtual void renameECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "56:         {",
          "58:         }",
          "59:          inline virtual void getPublicECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "60:         {",
          "",
          "[Removed Lines]",
          "57:           response = this->renameECDSAKey(request[\"KeyName\"].asString(), request[\"tempKeyName\"].asString());",
          "",
          "[Added Lines]",
          "57:           response = this->renameECDSAKey(request[\"keyName\"].asString(), request[\"tempKeyName\"].asString());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         {",
          "78:             response = this->getSecretShare(request[\"polyName\"].asString(), request[\"publicKeys\"], request[\"t\"].asInt(),request[\"n\"].asInt());",
          "79:         }",
          "81:         {",
          "83:         }",
          "85:         {",
          "87:         }",
          "89:         {",
          "91:         }",
          "93:         {",
          "95:         }",
          "97:         {",
          "99:         }",
          "101:         {",
          "103:         }",
          "",
          "[Removed Lines]",
          "80:         inline virtual void DKGVerificationI(const Json::Value &request, Json::Value &response)",
          "82:             response = this->DKGVerification(request[\"publicShares\"].asString(), request[\"EthKeyName\"].asString(), request[\"SecretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "84:         inline virtual void CreateBLSPrivateKeyI(const Json::Value &request, Json::Value &response)",
          "86:             response = this->CreateBLSPrivateKey(request[\"BLSKeyName\"].asString(), request[\"EthKeyName\"].asString(), request[\"polyName\"].asString(),request[\"SecretShare\"].asString(),request[\"t\"].asInt(), request[\"n\"].asInt());",
          "88:         inline virtual void GetBLSPublicKeyShareI(const Json::Value &request, Json::Value &response)",
          "90:           response = this->GetBLSPublicKeyShare(request[\"BLSKeyName\"].asString());",
          "92:         inline virtual void ComplaintResponseI(const Json::Value &request, Json::Value &response)",
          "94:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "96:         inline virtual void MultG2I(const Json::Value &request, Json::Value &response)",
          "98:             response = this->MultG2(request[\"x\"].asString());",
          "100:         inline virtual void IsPolyExistsI(const Json::Value &request, Json::Value &response)",
          "102:             response = this->IsPolyExists(request[\"polyName\"].asString());",
          "",
          "[Added Lines]",
          "80:         inline virtual void dkgVerificationI(const Json::Value &request, Json::Value &response)",
          "82:             response = this->dkgVerification(request[\"publicShares\"].asString(), request[\"ethKeyName\"].asString(), request[\"secretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "84:         inline virtual void createBLSPrivateKeyI(const Json::Value &request, Json::Value &response)",
          "86:             response = this->createBLSPrivateKey(request[\"blsKeyName\"].asString(), request[\"ethKeyName\"].asString(), request[\"polyName\"].asString(),request[\"secretShare\"].asString(),request[\"t\"].asInt(), request[\"n\"].asInt());",
          "88:         inline virtual void getBLSPublicKeyShareI(const Json::Value &request, Json::Value &response)",
          "90:           response = this->getBLSPublicKeyShare(request[\"blsKeyName\"].asString());",
          "92:         inline virtual void complaintResponseI(const Json::Value &request, Json::Value &response)",
          "94:           response = this->complaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "96:         inline virtual void multG2I(const Json::Value &request, Json::Value &response)",
          "98:             response = this->multG2(request[\"x\"].asString());",
          "100:         inline virtual void isPolyExistsI(const Json::Value &request, Json::Value &response)",
          "102:             response = this->isPolyExists(request[\"polyName\"].asString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "121:         virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n) = 0;",
          "122:         virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n) = 0;",
          "130:         virtual Json::Value getServerStatus() = 0;",
          "131: };",
          "",
          "[Removed Lines]",
          "123:         virtual Json::Value DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "124:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "125:         virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) = 0;",
          "126:         virtual Json::Value ComplaintResponse(const std::string& polyName, int ind) = 0;",
          "127:         virtual Json::Value MultG2(const std::string & x) = 0;",
          "128:         virtual Json::Value IsPolyExists(const std::string& polyName) = 0;",
          "",
          "[Added Lines]",
          "123:         virtual Json::Value dkgVerification( const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "124:         virtual Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "125:         virtual Json::Value getBLSPublicKeyShare(const std::string & blsKeyName) = 0;",
          "126:         virtual Json::Value complaintResponse(const std::string& polyName, int ind) = 0;",
          "127:         virtual Json::Value multG2(const std::string & x) = 0;",
          "128:         virtual Json::Value isPolyExists(const std::string& polyName) = 0;",
          "",
          "---------------"
        ],
        "aclocal.m4||aclocal.m4": [
          "File: aclocal.m4 -> aclocal.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cert_util.cpp||cert_util.cpp": [
          "File: cert_util.cpp -> cert_util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   jsonrpc::HttpClient client(\"http://localhost:1028\");",
          "14:   StubClient c(client, jsonrpc::JSONRPC_CLIENT_V2);",
          "15:   std::cout << \"Client inited\" << std::endl;",
          "17:   exit(0);",
          "18: }",
          "",
          "[Removed Lines]",
          "16:   std::cout << c.GetUnsignedCSRs() << std::endl;",
          "",
          "[Added Lines]",
          "16:   std::cout << c.getUnsignedCSRs() << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:   jsonrpc::HttpClient client(\"http://localhost:1028\");",
          "22:   StubClient c(client, jsonrpc::JSONRPC_CLIENT_V2);",
          "23:   std::cout << \"Client inited\" << std::endl;",
          "25:   exit(0);",
          "26: }",
          "",
          "[Removed Lines]",
          "24:   std::cout << c.SignByHash(hash, status) << std::endl;",
          "",
          "[Added Lines]",
          "24:   std::cout << c.signByHash(hash, status) << std::endl;",
          "",
          "---------------"
        ],
        "common.h||common.h": [
          "File: common.h -> common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef SGXWALLET_COMMON_H",
          "6: #define SGXWALLET_COMMON_H",
          "8: using namespace std;",
          "10: #include <stdlib.h>",
          "11: #include <iostream>",
          "12: #include <map>",
          "13: #include <memory>",
          "15: #define CHECK_ARGUMENT(_EXPRESSION_) \\",
          "16:     if (!(_EXPRESSION_)) { \\",
          "17:         auto __msg__ = string(\"Argument Check failed:\") + #_EXPRESSION_ + \"\\n\" + __CLASS_NAME__ + \":\" + __FUNCTION__ +  \\",
          "18:         + \" \" + string(__FILE__) + \":\" + to_string(__LINE__); \\",
          "19:         throw runtime_error(__msg__);}",
          "21: #define CHECK_STATE(_EXPRESSION_) \\",
          "22:     if (!(_EXPRESSION_)) { \\",
          "23:         auto __msg__ = string(\"State check failed::\") + #_EXPRESSION_ +  \" \" + string(__FILE__) + \":\" + to_string(__LINE__); \\",
          "24:         throw runtime_error(__msg__);}",
          "26: #endif //SGXWALLET_COMMON_H",
          "",
          "---------------"
        ],
        "scripts/docker_test.py||scripts/docker_test.py": [
          "File: scripts/docker_test.py -> scripts/docker_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "3: #",
          "4: #    @file  docker_test.py",
          "5: #    @author Stan Kladko",
          "6: #    @date 2020",
          "7: #",
          "9: import sys",
          "10: import os",
          "11: import subprocess",
          "12: import socket",
          "14: assert os.path.isdir('sgx_data/sgxwallet.db')",
          "15: assert os.path.isdir('sgx_data/cert_data');",
          "16: assert os.path.isdir('sgx_data/CSR_DB');",
          "17: assert os.path.isdir('sgx_data/CSR_STATUS_DB');",
          "18: assert os.path.isfile('sgx_data/cert_data/SGXServerCert.crt')",
          "19: assert os.path.isfile('sgx_data/cert_data/SGXServerCert.key')",
          "20: assert os.path.isfile('sgx_data/cert_data/rootCA.pem')",
          "21: assert os.path.isfile('sgx_data/cert_data/rootCA.key')",
          "23: s1 = socket.socket()",
          "24: s2 = socket.socket()",
          "25: s3 = socket.socket()",
          "26: address = '127.0.0.1'",
          "27: s1.connect((address, 1026))",
          "28: s2.connect((address, 1027))",
          "29: s3.connect((address, 1028))",
          "31: s1.close()",
          "32: s2.close()",
          "33: s3.close()",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1301:   free(dkg_secret);",
          "1302: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1305: void decrypt_dkg_secret_aes (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t* dec_len){",
          "1307:   int status = AES_decrypt(encrypted_dkg_secret, dec_len, decrypted_dkg_secret);",
          "1309:   if (status != SGX_SUCCESS) {",
          "1310:     snprintf(err_string, BUF_LEN,\"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "1312:     return;",
          "1313:   }",
          "1316: }",
          "1318: void set_encrypted_dkg_poly_aes(int *err_status, char *err_string, uint8_t* encrypted_poly,  uint64_t* enc_len){",
          "1320:   uint32_t decr_len;",
          "1321:   int status = AES_decrypt(encrypted_poly, enc_len, Decrypted_dkg_poly);",
          "1323:   if (status != SGX_SUCCESS) {",
          "1325:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "1326:     return;",
          "1327:   }",
          "1329: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:                                 [user_check] uint32_t * enc_len,",
          "222:                                         size_t _t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:         public void decrypt_dkg_secret_aes (",
          "225:                                 [user_check] int *err_status,",
          "226:                                 [out, count = 1024] char* err_string,",
          "227:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "228:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "229:                                 [user_check] uint32_t* dec_len);",
          "231:         public void set_encrypted_dkg_poly_aes( [user_check] int *err_status,",
          "232:                               [out, count = 1024] char* err_string,",
          "233:                               [in, count = 3050] uint8_t* encrypted_poly,",
          "234:                               [user_check] uint64_t* enc_len);",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         Json::Value renameECDSAKey(const std::string& KeyName, const std::string& tempKeyName) throw (jsonrpc::JsonRpcException)",
          "69:         {",
          "70:           Json::Value p;",
          "72:           p[\"tempKeyName\"] = tempKeyName;",
          "73:           Json::Value result = this->CallMethod(\"renameECDSAKey\",p);",
          "74:           if (result.isObject())",
          "",
          "[Removed Lines]",
          "71:           p[\"KeyName\"] = KeyName;",
          "",
          "[Added Lines]",
          "71:           p[\"keyName\"] = KeyName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "141:         }",
          "144:         {",
          "145:             Json::Value p;",
          "148:             p[\"index\"] = index;",
          "149:             p[\"n\"] = n;",
          "150:             p[\"publicShares\"] = publicShares;",
          "151:             p[\"t\"] = t;",
          "153:             if (result.isObject())",
          "154:               return result;",
          "155:             else",
          "156:               throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "157:         }",
          "160:         {",
          "161:           Json::Value p;",
          "164:           p[\"polyName\"] = polyName;",
          "166:           p[\"n\"] = n;",
          "167:           p[\"t\"] = t;",
          "169:           if (result.isObject())",
          "170:            return result;",
          "171:           else",
          "172:            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "173:         }",
          "176:         {",
          "177:             Json::Value p;",
          "181:             if (result.isObject())",
          "182:                 return result;",
          "183:             else",
          "184:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "185:         }",
          "188:         {",
          "189:           Json::Value p;",
          "190:           p[\"polyName\"] = polyName;",
          "191:           p[\"ind\"] = ind;",
          "193:           if (result.isObject())",
          "194:             return result;",
          "195:           else",
          "196:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "197:         }",
          "200:         {",
          "201:             Json::Value p;",
          "202:             p[\"x\"] = x;",
          "205:             if (result.isObject())",
          "206:                 return result;",
          "207:             else",
          "208:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "209:         }",
          "212:         {",
          "213:             Json::Value p;",
          "214:             p[\"polyName\"] = polyName;",
          "217:             if (result.isObject())",
          "218:                 return result;",
          "219:             else",
          "",
          "[Removed Lines]",
          "143:         Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "146:             p[\"EthKeyName\"] = EthKeyName;",
          "147:             p[\"SecretShare\"] = SecretShare;",
          "152:             Json::Value result = this->CallMethod(\"DKGVerification\",p);",
          "159:         Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n) throw (jsonrpc::JsonRpcException)",
          "162:           p[\"BLSKeyName\"] = BLSKeyName;",
          "163:           p[\"EthKeyName\"] = EthKeyName;",
          "165:           p[\"SecretShare\"] = SecretShare;",
          "168:           Json::Value result = this->CallMethod(\"CreateBLSPrivateKey\",p);",
          "175:         Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) throw (jsonrpc::JsonRpcException)",
          "178:             p[\"BLSKeyName\"] = BLSKeyName;",
          "180:             Json::Value result = this->CallMethod(\"GetBLSPublicKeyShare\",p);",
          "187:         Json::Value ComplaintResponse(const std::string& polyName, int ind) throw (jsonrpc::JsonRpcException)",
          "192:           Json::Value result = this->CallMethod(\"ComplaintResponse\",p);",
          "199:         Json::Value MultG2(const std::string & x) throw (jsonrpc::JsonRpcException)",
          "204:             Json::Value result = this->CallMethod(\"MultG2\",p);",
          "211:         Json::Value IsPolyExists(const std::string & polyName) throw (jsonrpc::JsonRpcException)",
          "216:             Json::Value result = this->CallMethod(\"IsPolyExists\",p);",
          "",
          "[Added Lines]",
          "143:         Json::Value dkgVerification(const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "146:             p[\"ethKeyName\"] = ethKeyName;",
          "147:             p[\"secretShare\"] = SecretShare;",
          "152:             Json::Value result = this->CallMethod(\"dkgVerification\",p);",
          "159:         Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n) throw (jsonrpc::JsonRpcException)",
          "162:           p[\"blsKeyName\"] = blsKeyName;",
          "163:           p[\"ethKeyName\"] = ethKeyName;",
          "165:           p[\"secretShare\"] = SecretShare;",
          "168:           Json::Value result = this->CallMethod(\"reateBLSPrivateKey\",p);",
          "175:         Json::Value getBLSPublicKeyShare(const std::string & blsKeyName) throw (jsonrpc::JsonRpcException)",
          "178:             p[\"blsKeyName\"] = blsKeyName;",
          "180:             Json::Value result = this->CallMethod(\"getBLSPublicKeyShare\",p);",
          "187:         Json::Value complaintResponse(const std::string& polyName, int ind) throw (jsonrpc::JsonRpcException)",
          "192:           Json::Value result = this->CallMethod(\"complaintResponse\",p);",
          "199:         Json::Value multG2(const std::string & x) throw (jsonrpc::JsonRpcException)",
          "204:             Json::Value result = this->CallMethod(\"multG2\",p);",
          "211:         Json::Value isPolyExists(const std::string & polyName) throw (jsonrpc::JsonRpcException)",
          "216:             Json::Value result = this->CallMethod(\"isPolyExists\",p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   {",
          "228:     Json::Value p;",
          "229:     p = Json::nullValue;",
          "231:     if (result.isObject())",
          "232:       return result;",
          "233:     else",
          "",
          "[Removed Lines]",
          "226:   Json::Value GetUnsignedCSRs() throw (jsonrpc::JsonRpcException)",
          "230:     Json::Value result = this->CallMethod(\"GetUnsignedCSRs\",p);",
          "",
          "[Added Lines]",
          "226:   Json::Value getUnsignedCSRs() throw (jsonrpc::JsonRpcException)",
          "230:     Json::Value result = this->CallMethod(\"getUnsignedCSRs\",p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:     {",
          "241:         Json::Value p;",
          "242:         p[\"hash\"] = hash;",
          "243:         p[\"status\"] = status;",
          "245:         if (result.isObject())",
          "246:             return result;",
          "247:         else",
          "",
          "[Removed Lines]",
          "239:     Json::Value SignByHash(const std::string& hash, int status) throw (jsonrpc::JsonRpcException)",
          "244:         Json::Value result = this->CallMethod(\"SignByHash\",p);",
          "",
          "[Added Lines]",
          "239:     Json::Value signByHash(const std::string& hash, int status) throw (jsonrpc::JsonRpcException)",
          "244:         Json::Value result = this->CallMethod(\"signByHash\",p);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: #include \"BLSPublicKey.h\"",
          "81: #include <thread>",
          "87:     mpz_t t;",
          "88:     mpz_init(t);",
          "",
          "[Removed Lines]",
          "85: std::string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "[Added Lines]",
          "82: #include \"common.h\"",
          "86: string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     char *tmp = mpz_get_str(arr, 10, t);",
          "95:     mpz_clear(t);",
          "98: }",
          "",
          "[Removed Lines]",
          "97:     return std::string(tmp);",
          "",
          "[Added Lines]",
          "98:     return string(tmp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:   sgx_destroy_enclave(eid);",
          "314: }",
          "319:   delim.push_back(symbol);",
          "321:   size_t prev = 0, pos = 0;",
          "322:   do",
          "323:   {",
          "324:     pos = str.find(delim, prev);",
          "327:     if (!token.empty()) {",
          "328:       libff::alt_bn128_Fr koef(token.c_str());",
          "329:       tokens.push_back(koef);",
          "",
          "[Removed Lines]",
          "316: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "317:   std::string str(koefs);",
          "318:   std::string delim;",
          "320:   std::vector<libff::alt_bn128_Fr> tokens;",
          "325:     if (pos == std::string::npos) pos = str.length();",
          "326:     std::string token = str.substr(prev, pos-prev);",
          "",
          "[Added Lines]",
          "317: vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "318:   string str(koefs);",
          "319:   string delim;",
          "321:   vector<libff::alt_bn128_Fr> tokens;",
          "326:     if (pos == string::npos) pos = str.length();",
          "327:     string token = str.substr(prev, pos-prev);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:   return tokens;",
          "336: }",
          "339:   libff::init_alt_bn128_params();",
          "342:   delim.push_back(symbol);",
          "344:   size_t prev = 0, pos = 0;",
          "345:   do",
          "346:   {",
          "347:     pos = str.find(delim, prev);",
          "350:     if (!token.empty()) {",
          "352:       G2_strings.push_back(koef);",
          "353:     }",
          "354:     prev = pos + delim.length();",
          "",
          "[Removed Lines]",
          "338: std::vector<std::string> SplitStringTest(const char* koefs, const char symbol){",
          "340:   std::string str(koefs);",
          "341:   std::string delim;",
          "343:   std::vector<std::string> G2_strings;",
          "348:     if (pos == std::string::npos) pos = str.length();",
          "349:     std::string token = str.substr(prev, pos-prev);",
          "351:       std::string koef(token.c_str());",
          "",
          "[Added Lines]",
          "339: vector<string> SplitStringTest(const char* koefs, const char symbol){",
          "341:   string str(koefs);",
          "342:   string delim;",
          "344:   vector<string> G2_strings;",
          "349:     if (pos == string::npos) pos = str.length();",
          "350:     string token = str.substr(prev, pos-prev);",
          "352:       string koef(token.c_str());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:   return G2_strings;",
          "359: }",
          "362:   libff::init_alt_bn128_params();",
          "363:   libff::alt_bn128_G2 koef = libff::alt_bn128_G2::zero();",
          "364:   koef.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "",
          "[Removed Lines]",
          "361: libff::alt_bn128_G2 VectStringToG2(const std::vector<std::string>& G2_str_vect){",
          "",
          "[Added Lines]",
          "362: libff::alt_bn128_G2 VectStringToG2(const vector<string>& G2_str_vect){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "406:   printf(\"\\nget_secret_shares status: %d %s \\n\", err_status, errMsg1);",
          "407:   printf(\"secret shares %s \\n\\n\", secret_shares);",
          "411:  char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "412:  status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "",
          "[Removed Lines]",
          "409:   std::vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "",
          "[Added Lines]",
          "410:   vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "416:  signatures::Dkg dkg_obj(t,n);",
          "420:  printf(\"calculated secret length %d : \\n\", s_shares_dkg.size());",
          "421:  for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "422:    libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "",
          "[Removed Lines]",
          "418:  std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "419:  std::vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "",
          "[Added Lines]",
          "419:  vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "420:  vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:   printf(\" LEN: %d \\n\", strlen(public_shares));",
          "468:   printf(\" result: %s \\n\", public_shares);",
          "472:   for ( int i = 0; i < G2_strings.size(); i++){",
          "474:     libff::alt_bn128_G2 el = VectStringToG2(koef_str);",
          "477:     pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "478:   }",
          "",
          "[Removed Lines]",
          "470:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "471:   std::vector <libff::alt_bn128_G2> pub_shares_G2;",
          "473:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "[Added Lines]",
          "471:   vector <string> G2_strings = SplitString( public_shares, ',');",
          "472:   vector <libff::alt_bn128_G2> pub_shares_G2;",
          "474:     vector <string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "485:   signatures::Dkg dkg_obj(t,n);",
          "489:   printf(\"calculated public shares (X.c0): \\n\");",
          "490:   for ( int  i = 0; i < pub_shares_dkg.size(); i++){",
          "491:     libff::alt_bn128_G2 el = pub_shares_dkg.at(i);",
          "",
          "[Removed Lines]",
          "487:   std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "488:   std::vector < libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "",
          "[Added Lines]",
          "488:   vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "489:   vector < libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "530:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "531:   REQUIRE(status == SGX_SUCCESS);",
          "534:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "535:   REQUIRE(status == SGX_SUCCESS);",
          "538:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "539:   char *pub_key_x = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "532:   std::cerr << \" poly generated\" << std::endl;",
          "536:   std::cerr << \" poly set\" << std::endl;",
          "",
          "[Added Lines]",
          "533:   cerr << \" poly generated\" << endl;",
          "537:   cerr << \" poly set\" << endl;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "546:   REQUIRE(status == SGX_SUCCESS);",
          "547:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "550: }",
          "552: TEST_CASE( \"DKG verification test\", \"[dkg-verify]\" ) {",
          "",
          "[Removed Lines]",
          "549:   std::cerr << \"secret share is \" << result << std::endl;",
          "",
          "[Added Lines]",
          "550:   cerr << \"secret share is \" << result << endl;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "568:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "569:   REQUIRE(status == SGX_SUCCESS);",
          "572:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "573:   REQUIRE(status == SGX_SUCCESS);",
          "576:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "577:   char *pub_key_x = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "570:   std::cerr << \" poly generated\" << std::endl;",
          "574:   std::cerr << \" poly set\" << std::endl;",
          "",
          "[Added Lines]",
          "571:   cerr << \" poly generated\" << endl;",
          "575:   cerr << \" poly set\" << endl;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "585:   REQUIRE(status == SGX_SUCCESS);",
          "586:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "589: }",
          "",
          "[Removed Lines]",
          "588:   std::cerr << \"secret share is \" << result << std::endl;",
          "",
          "[Added Lines]",
          "589:   cerr << \"secret share is \" << result << endl;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "723:   char *encryptedKeyHex =",
          "724:       \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000813f8390f6228a568e181a4dadb6508e3e66f5247175d65dbd0d8c7fbfa4df45000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000008000000000000000000000000000000000dc044ae0cd79faaf41e8a7abb412790476738a98b5b6ce95fa1a32db5551b0a0d867305f4de558c64fee730a1f62394633c7d4ca65e3a40b7883e89c2801c61918b01c5de8624a52963df6f4de8581bcbdd2f9b69720d4cc764e03a04c7a99314bfdb5d2d55deda2ca40cd691f093fb2ecbae24cdacdd4d5de93189c6dfd6792d7b95bd5e330aec3538e7a85d15793\"; // encryptTestKey();",
          "728:   sgx_destroy_enclave(eid);",
          "729: }",
          "",
          "[Removed Lines]",
          "726:   std::vector<std::string> result = GetBLSPubKey(encryptedKeyHex);",
          "",
          "[Added Lines]",
          "727:   vector<string> result = GetBLSPubKey(encryptedKeyHex);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "734: using namespace jsonrpc;",
          "735: using namespace std;",
          "738:   mpz_t num;",
          "739:   mpz_init(num);",
          "740:   mpz_set_str(num, dec.c_str(), 10);",
          "",
          "[Removed Lines]",
          "737: std::string ConvertDecToHex(std::string dec, int numBytes = 32){",
          "",
          "[Added Lines]",
          "738: string ConvertDecToHex(string dec, int numBytes = 32){",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "742:   char tmp[mpz_sizeinbase (num, 16) + 2];",
          "743:   char * hex = mpz_get_str(tmp, 16, num);",
          "746:   int n_zeroes = numBytes * 2 - result.length();",
          "747:   result.insert(0, n_zeroes, '0');",
          "",
          "[Removed Lines]",
          "745:   std::string result = hex;",
          "",
          "[Added Lines]",
          "746:   string result = hex;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "753: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "754:   is_sgx_https = 0;",
          "755:   DEBUG_PRINT = 1;",
          "757:   init_all(false, false);",
          "758:   cerr << \"Server inited\" << endl;",
          "759:   HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "756:   std::cerr<< \"test started\" << std::endl;",
          "",
          "[Added Lines]",
          "757:   cerr<< \"test started\" << endl;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "770:   Json::Value secretShares[n];",
          "771:   Json::Value pubBLSKeys[n];",
          "772:   Json::Value BLSSigShares[n];",
          "776:   for ( uint8_t i = 0; i < n; i++){",
          "777:     EthKeys[i] = c.generateECDSAKey();",
          "779:     c.generateDKGPoly(polyName, t);",
          "780:     poly_names[i] = polyName;",
          "781:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "784:   }",
          "",
          "[Removed Lines]",
          "773:   std::vector<std::string> pubShares(n);",
          "774:   std::vector<std::string> poly_names(n);",
          "778:     std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:\" + std::to_string(i) + \":DKG_ID:0\";",
          "782:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << std::endl;",
          "783:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "",
          "[Added Lines]",
          "774:   vector<string> pubShares(n);",
          "775:   vector<string> poly_names(n);",
          "779:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:\" + to_string(i) + \":DKG_ID:0\";",
          "783:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "784:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "788:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "789:     for ( uint8_t k = 0; k < t; k++ ) {",
          "790:       for (uint8_t j = 0; j < 4; j++) {",
          "792:         pubShares[i] += ConvertDecToHex(pubShare);",
          "793:       }",
          "794:     }",
          "797:   }",
          "803:   int k = 0;",
          "809:   for ( int i = 0; i < n; i++)",
          "810:     for ( int j = 0; j < n; j++){",
          "816:        k++;",
          "818:        REQUIRE(res);",
          "820:        pSharesBad[i][0] = 'q';",
          "822:        res = wrongVerif[\"result\"].asBool();",
          "823:        REQUIRE(!res);",
          "826:     }",
          "828:   BLSSigShareSet sigShareSet(t, n);",
          "833:   uint64_t binLen;",
          "834:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "835:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "836:   }",
          "841:   for ( int i = 0; i < t; i++){",
          "850:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "853:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "857:     for ( uint8_t j = 0; j < 4; j++){",
          "858:         pubKey_vect.push_back(pubBLSKeys[i][\"BLSPublicKeyShare\"][j].asString());",
          "859:     }",
          "865:   }",
          "869:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "875: }",
          "",
          "[Removed Lines]",
          "791:         std::string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "799:   Json::Value ComplaintResponse = c.ComplaintResponse(poly_names[1], 0);",
          "800:   std::cerr << \"share * G2 is \" << ComplaintResponse[\"share*G2\"].asString();",
          "801:   std::cerr << \"DHKey is \" << ComplaintResponse[\"DHKey\"].asString();",
          "805:   std::vector < std::string> secShares_vect(n);",
          "807:   std::vector <std::string> pSharesBad(pubShares);",
          "812:        std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "813:        std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192);",
          "814:        secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192);",
          "815:        bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "817:        std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "821:        Json::Value wrongVerif = c.DKGVerification(pSharesBad[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j);",
          "824:        std::cerr << \"wrong verification \" << wrongVerif << std::endl;",
          "830:   std::string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "832:   auto hash_arr = std::make_shared<std::array<uint8_t, 32>>();",
          "839:   std::map<size_t, std::shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "842:     std::string endName = poly_names[i].substr(4);",
          "843:     std::string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "844:     std::string secretShare = secretShares[i][\"SecretShare\"].asString();",
          "846:     cout << c.CreateBLSPrivateKey(blsName, EthKeys[i][\"KeyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "847:     pubBLSKeys[i] = c.GetBLSPublicKeyShare(blsName);",
          "848:     std::cerr << \"BLS KEY SHARE NAME IS \" << blsName << std::endl;",
          "851:     std::cerr << i << \" sig share is created \" << std::endl;",
          "852:     std::shared_ptr<std::string> sig_share_ptr = std::make_shared<std::string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "854:     sigShareSet.addSigShare(std::make_shared<BLSSigShare>(sig));",
          "856:     std::vector<std::string> pubKey_vect;",
          "860:     BLSPublicKeyShare pubKey(std::make_shared<std::vector<std::string>>(pubKey_vect), t, n);",
          "861:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, std::make_shared<BLSSigShare>(sig) , t, n));",
          "863:     koefs_pkeys_map[i+1] = std::make_shared<BLSPublicKeyShare>(pubKey);",
          "867:   std::shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "868:   BLSPublicKey common_public(std::make_shared<std::map<size_t, std::shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "871:   std::cout << \"try to get bls public key\" << std::endl;",
          "872:   std::cout << c.GetBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "[Added Lines]",
          "792:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "800:   Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "801:   cerr << \"share * G2 is \" << complaintResponse[\"share*G2\"].asString();",
          "802:   cerr << \"DHKey is \" << complaintResponse[\"DHKey\"].asString();",
          "806:   vector < string> secShares_vect(n);",
          "808:   vector <string> pSharesBad(pubShares);",
          "813:        cerr << \"secretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "814:        string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192);",
          "815:        secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192);",
          "816:        bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "818:        cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "822:        Json::Value wrongVerif = c.dkgVerification(pSharesBad[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "825:        cerr << \"wrong verification \" << wrongVerif << endl;",
          "831:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "833:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "840:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "843:     string endName = poly_names[i].substr(4);",
          "844:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "845:     string secretShare = secretShares[i][\"secretShare\"].asString();",
          "847:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "848:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "849:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "852:     cerr << i << \" sig share is created \" << endl;",
          "853:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "855:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "857:     vector<string> pubKey_vect;",
          "861:     BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "862:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig) , t, n));",
          "864:     koefs_pkeys_map[i+1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "868:   shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "869:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "872:   cout << \"try to get bls public key\" << endl;",
          "873:   cout << c.getBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "893:     try {",
          "904:         Json::Value genKey = c.generateECDSAKey();",
          "905:         cout << genKey << endl;",
          "",
          "[Removed Lines]",
          "906:         cout << c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "907:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "908:         cout << getPubKey << std::endl;",
          "",
          "[Added Lines]",
          "907:         cout << c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "908:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "909:         cout << getPubKey << endl;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "949:       Json::Value SecretShare;",
          "950:       SecretShare.append(share_big0);",
          "951:       SecretShare.append(share_big);",
          "974:     } catch (JsonRpcException &e) {",
          "975:         cerr << e.what() << endl;",
          "",
          "[Removed Lines]",
          "940:       std::string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "941:       std::string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "942:       std::string share = share_big.substr(0, 192);",
          "944:       std::string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "956:      std::string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "961:       std::string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "962:       std::string EthKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "",
          "[Added Lines]",
          "941:       string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "942:       string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "943:       string share = share_big.substr(0, 192);",
          "945:       string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "957:      string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "962:       string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "963:       string ethKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "986:   sgx_destroy_enclave(eid);",
          "987: }",
          "991: void SendRPCRequest(){",
          "993:     HttpClient client(\"http://localhost:1029\");",
          "994:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "995:   reset_db();",
          "",
          "[Removed Lines]",
          "989: std::default_random_engine rand_gen((unsigned int) time(0));",
          "992:     std::cout << \"Hello from thread \" << std::this_thread::get_id() << std::endl;",
          "",
          "[Added Lines]",
          "990: default_random_engine rand_gen((unsigned int) time(0));",
          "993:     cout << \"Hello from thread \" << this_thread::get_id() << endl;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1002:   Json::Value secretShares[n];",
          "1003:   Json::Value pubBLSKeys[n];",
          "1004:   Json::Value BLSSigShares[n];",
          "1008:   int schain_id = rand_gen();",
          "1009:   int dkg_id = rand_gen();",
          "1010:   for ( uint8_t i = 0; i < n; i++){",
          "1011:     EthKeys[i] = c.generateECDSAKey();",
          "1013:     c.generateDKGPoly(polyName, t);",
          "1014:     poly_names[i] = polyName;",
          "1015:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1018:   }",
          "1020:   for ( uint8_t i = 0; i < n; i++){",
          "1021:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1022:     for ( uint8_t k = 0; k < t; k++ ) {",
          "1023:       for (uint8_t j = 0; j < 4; j++) {",
          "1025:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1026:       }",
          "1027:     }",
          "1030:   }",
          "1036:   int k = 0;",
          "1040:   for ( int i = 0; i < n; i++)",
          "1041:     for ( int j = 0; j < n; j++){",
          "1042:       if ( i != j ){",
          "1047:         k++;",
          "1049:         REQUIRE( res );",
          "1050:       }",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1005:   std::vector<std::string> pubShares(n);",
          "1006:   std::vector<std::string> poly_names(n);",
          "1012:     std::string polyName = \"POLY:SCHAIN_ID:\" + std::to_string(schain_id) + \":NODE_ID:\" + std::to_string(i) + \":DKG_ID:\" + std::to_string(dkg_id);",
          "1016:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << std::endl;",
          "1017:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "1024:         std::string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "1038:   std::vector <std::string> secShares_vect(n);",
          "1043:         std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "1044:         std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 );",
          "1045:         secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192 );",
          "1046:         bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "1048:         std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "",
          "[Added Lines]",
          "1006:   vector<string> pubShares(n);",
          "1007:   vector<string> poly_names(n);",
          "1013:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "1017:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "1018:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "1025:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "1039:   vector <string> secShares_vect(n);",
          "1044:         cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1045:         string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192 );",
          "1046:         secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192 );",
          "1047:         bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "1049:         cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1055:   is_sgx_https = 0;",
          "1056:   init_all( false, false );",
          "1059:   int num_threads = 16;",
          "1060:   for (int i = 0; i < num_threads; i++){",
          "1062:   }",
          "1064:   for(auto& thread : threads){",
          "",
          "[Removed Lines]",
          "1058:   std::vector<std::thread> threads;",
          "1061:     threads.push_back(std::thread(SendRPCRequest));",
          "",
          "[Added Lines]",
          "1059:   vector<thread> threads;",
          "1062:     threads.push_back(thread(SendRPCRequest));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1071: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "1072:   DEBUG_PRINT = 1;",
          "1073:   is_sgx_https = 0;",
          "1076:   cerr << \"ecdsa_api_test started\" << endl;",
          "1077:   init_all(false, false);",
          "",
          "[Removed Lines]",
          "1074:   is_aes = 0;",
          "",
          "[Added Lines]",
          "1075:   is_aes = 1;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1086:   cout << genKey << endl;",
          "1087:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1091:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1096:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "1118:   sgx_destroy_enclave(eid);",
          "",
          "[Removed Lines]",
          "1089:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "1090:   cout << getPubKey << std::endl;",
          "1092:   REQUIRE(getPubKey[\"PublicKey\"].asString() == genKey[\"PublicKey\"].asString());",
          "1094:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1095:   cout << ecdsaSign << std::endl;",
          "",
          "[Added Lines]",
          "1090:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "1091:   cout << getPubKey << endl;",
          "1093:   REQUIRE(getPubKey[\"publicKey\"].asString() == genKey[\"publicKey\"].asString());",
          "1095:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1096:   cout << ecdsaSign << endl;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1134:   reset_db();",
          "1137:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1139:   Json::Value publicKeys;",
          "",
          "[Removed Lines]",
          "1136:   std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "",
          "[Added Lines]",
          "1137:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1186:   Json::Value Skeys = c.getSecretShare(polyName, publicKeys, 2, 2);",
          "1187:   Json::Value verifVect = c.getVerificationVector(polyName, 2, 2);",
          "1189:   REQUIRE(verificationWrongSkeys[\"status\"].asInt() != 0);",
          "1190:   cout << verificationWrongSkeys << endl;",
          "1192:   sgx_destroy_enclave(eid);",
          "1193: }",
          "1196:   DEBUG_PRINT = 1;",
          "1197:   is_sgx_https = 0;",
          "",
          "[Removed Lines]",
          "1188:   Json::Value verificationWrongSkeys = c.DKGVerification(\"\",\"\",\"\",2, 2, 1);",
          "1195: TEST_CASE(\"IsPolyExists test\", \"[is_poly_test]\") {",
          "",
          "[Added Lines]",
          "1189:   Json::Value verificationWrongSkeys = c.dkgVerification(\"\",\"\",\"\",2, 2, 1);",
          "1196: TEST_CASE(\"isPolyExists test\", \"[is_poly_test]\") {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1208:   reset_db();",
          "1211:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1215:   REQUIRE(polyExists[\"IsExist\"].asBool());",
          "1219:   REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "1221: }",
          "",
          "[Removed Lines]",
          "1210:   std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1212:   cout << genPoly << std::endl;",
          "1213:   Json::Value polyExists = c.IsPolyExists(polyName);",
          "1214:   cout << polyExists << std::endl;",
          "1217:   Json::Value polyDoesNotExist = c.IsPolyExists(\"Vasya\");",
          "1218:   cout << polyDoesNotExist << std::endl;",
          "",
          "[Added Lines]",
          "1211:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1213:   cout << genPoly << endl;",
          "1214:   Json::Value polyExists = c.isPolyExists(polyName);",
          "1215:   cout << polyExists << endl;",
          "1218:   Json::Value polyDoesNotExist = c.isPolyExists(\"Vasya\");",
          "1219:   cout << polyDoesNotExist << endl;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1223: TEST_CASE(\"AES_DKG test\", \"[aes_dkg]\") {",
          "1224:   is_sgx_https = 0;",
          "1225:   DEBUG_PRINT = 1;",
          "1227:   std::cerr << \"test started\" << std::endl;",
          "1228:   init_all(false, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227:   is_aes = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb8325c28dd97ccb25368e0302d2c9b68ae36547",
      "candidate_info": {
        "commit_hash": "eb8325c28dd97ccb25368e0302d2c9b68ae36547",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/eb8325c28dd97ccb25368e0302d2c9b68ae36547",
        "files": [
          "Makefile.am",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in",
          "secure_enclave/drive_key_dkg.c",
          "secure_enclave/drive_key_dkg.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "secure_enclave/signature.c",
          "testw.cpp",
          "trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp"
        ],
        "message": "SKALE-1512 Merge",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/Makefile.am||secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in||secure_enclave/Makefile.in",
          "secure_enclave/drive_key_dkg.c||secure_enclave/drive_key_dkg.c",
          "secure_enclave/drive_key_dkg.h||secure_enclave/drive_key_dkg.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "secure_enclave/signature.c||secure_enclave/signature.c",
          "testw.cpp||testw.cpp",
          "trusted_libff/libff/algebrcurves/alt_bn128/alt_bn128_init.cpp||trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: COMMON_SRC = sgx_stub.c sgx_detect_linux.c create_enclave.c oc_alloc.c",
          "66: COMMON_ENCLAVE_SRC = secure_enclave_u.c secure_enclave_u.h",
          "70: nodist_sgxwallet_SOURCES = $(COMMON_ENCLAVE_SRC)",
          "71: EXTRA_sgxwallet_DEPENDENCIES = secure_enclave.signed.so",
          "",
          "[Removed Lines]",
          "68: sgxwallet_SOURCES = sgxwallet.c SGXWalletServer.cpp RPCException.cpp  BLSCrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "68: sgxwallet_SOURCES = sgxwallet.c SGXWalletServer.cpp RPCException.cpp  BLSCrypto.cpp ECDSACrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp $(COMMON_SRC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: ## Use the variables, not the actual library names to ensure these",
          "89: ## targets work on simulation builds.",
          "94: nodist_testw_SOURCES=${nodist_sgxwallet_SOURCES}",
          "95: EXTRA_testw_DEPENDENCIES=${EXTRA_sgxwallet_DEPENDENCIES}",
          "",
          "[Removed Lines]",
          "91: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -Lleveldb/build -LlibBLS/build  -LlibBLS/build/libff/libff -l:libbls.a -l:libleveldb.a -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a   -ljsonrpccpp-stub -lpthread -ljsonrpccpp-common -ljsonrpccpp-server -ljsoncpp -lprocps",
          "93: testw_SOURCES=testw.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp BLSPrivateKeyShareSGX.cpp $(COMMON_SRC)",
          "96: testw_LDADD= ${sgxwallet_LDADD}",
          "",
          "[Added Lines]",
          "92: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -Lleveldb/build -LlibBLS/build  -LlibBLS/build/libff/libff -l:libbls.a -l:libleveldb.a \\",
          "93:    -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a   -ljsonrpccpp-stub -lpthread -ljsonrpccpp-common \\",
          "94:    -ljsonrpccpp-server -ljsonrpccpp-client -ljsoncpp -lcurl -lprocps intel-sgx-ssl/Linux/package/lib64/libsgx_usgxssl.a \\",
          "95:    intel-sgx-ssl/Linux/package/lib64/libsgx_tsgxssl_crypto.a",
          "99: testw_SOURCES=testw.cpp stubclient.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp \\",
          "100:     BLSPrivateKeyShareSGX.cpp ECDSACrypto.cpp $(COMMON_SRC)",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   return output;",
          "48: }",
          "51:     std::string str(koefs);",
          "53:     std::vector<libff::alt_bn128_Fr> tokens;",
          "54:     size_t prev = 0, pos = 0;",
          "55:     do",
          "",
          "[Removed Lines]",
          "50: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char* symbol){",
          "52:     std::string delim(symbol);",
          "",
          "[Added Lines]",
          "50: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "52:     std::string delim;",
          "53:     delim.push_back(symbol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   libff::alt_bn128_Fr pow = libff::alt_bn128_Fr::one();",
          "91:   for (size_t i = 0; i < _t; ++i) {",
          "92:     if (i == _t - 1 && pol[i] == libff::alt_bn128_Fr::zero()) {",
          "94:     }",
          "95:     value += pol[i] * pow;",
          "96:     pow *= point;",
          "",
          "[Removed Lines]",
          "93:       throw std::runtime_error(\"Error, incorrect degree of a polynomial\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   std::string result;",
          "106:   char symbol = ':';",
          "109:     libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(i + 1), _t);",
          "111:     result += \":\";",
          "112:   }",
          "114: }",
          "116: void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "",
          "[Removed Lines]",
          "107:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, &symbol);",
          "108:   for (size_t i = 0; i < _n; ++i) {",
          "110:     result += stringFromFr(secret_share);",
          "113:   strncpy(secret_shares, result.c_str(), result.length());",
          "",
          "[Added Lines]",
          "108:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "109:     for (size_t i = 0; i < _n; ++i) {",
          "111:     result += ConvertToString(secret_share);//stringFromFr(secret_share);",
          "114:   strncpy(secret_shares, result.c_str(), 2000);//result.length());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   std::string result;",
          "120:   char symbol = ':';",
          "122:   for (size_t i = 0; i < _t; ++i) {",
          "124:     pub_share.to_affine_coordinates();",
          "125:     result += ConvertToString(pub_share.X.c0);",
          "126:     result += \":\";",
          "",
          "[Removed Lines]",
          "121:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, &symbol);",
          "123:     libff::alt_bn128_G2 pub_share =  poly.at(i) * libff::alt_bn128_G2::one();",
          "",
          "[Added Lines]",
          "122:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "123:   libff::alt_bn128_Fr three = 3;",
          "125:     libff::alt_bn128_G2 pub_share = poly.at(i) * libff::alt_bn128_G2::one() ;",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.am||secure_enclave/Makefile.am": [
          "File: secure_enclave/Makefile.am -> secure_enclave/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "87:  secure_enclave.c \\",
          "89:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.cpp \\",
          "90:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.cpp $(ENCLAVE_KEY) $(ENCLAVE_CONFIG)",
          "",
          "[Removed Lines]",
          "88:     DKGUtils.cpp   BLSUtils.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "",
          "[Added Lines]",
          "88:  curves.c domain_parameters.c numbertheory.c point.c signature.c drive_key_dkg.c \\",
          "89:     DKGUtils.cpp   BLSEnclave.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.in||secure_enclave/Makefile.in": [
          "File: secure_enclave/Makefile.in -> secure_enclave/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: PROGRAMS = $(libexec_PROGRAMS)",
          "108: am__objects_1 =",
          "109: am_secure_enclave_OBJECTS = secure_enclave_t.$(OBJEXT) \\",
          "111:  alt_bn128_init.$(OBJEXT) alt_bn128_g2.$(OBJEXT) \\",
          "112:  alt_bn128_g1.$(OBJEXT) $(am__objects_1) $(am__objects_1)",
          "113: secure_enclave_OBJECTS = $(am_secure_enclave_OBJECTS)",
          "",
          "[Removed Lines]",
          "110:  secure_enclave.$(OBJEXT) DKGUtils.$(OBJEXT) BLSUtils.$(OBJEXT) \\",
          "",
          "[Added Lines]",
          "110:  secure_enclave.$(OBJEXT) curves.$(OBJEXT) \\",
          "111:  domain_parameters.$(OBJEXT) numbertheory.$(OBJEXT) \\",
          "112:  point.$(OBJEXT) signature.$(OBJEXT) drive_key_dkg.$(OBJEXT) \\",
          "113:  DKGUtils.$(OBJEXT) BLSEnclave.$(OBJEXT) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: DEFAULT_INCLUDES = -I.@am__isrc@",
          "136: depcomp = $(SHELL) $(top_srcdir)/depcomp",
          "137: am__maybe_remake_depfiles = depfiles",
          "142:  ./$(DEPDIR)/signed_enclave_debug.Po \\",
          "143:  ./$(DEPDIR)/signed_enclave_rel.Po",
          "144: am__mv = mv -f",
          "",
          "[Removed Lines]",
          "138: am__depfiles_remade = ./$(DEPDIR)/BLSUtils.Po ./$(DEPDIR)/DKGUtils.Po \\",
          "139:  ./$(DEPDIR)/alt_bn128_g1.Po ./$(DEPDIR)/alt_bn128_g2.Po \\",
          "140:  ./$(DEPDIR)/alt_bn128_init.Po ./$(DEPDIR)/secure_enclave.Po \\",
          "141:  ./$(DEPDIR)/secure_enclave_t.Po \\",
          "",
          "[Added Lines]",
          "141: am__depfiles_remade = ./$(DEPDIR)/BLSEnclave.Po \\",
          "142:  ./$(DEPDIR)/DKGUtils.Po ./$(DEPDIR)/alt_bn128_g1.Po \\",
          "143:  ./$(DEPDIR)/alt_bn128_g2.Po ./$(DEPDIR)/alt_bn128_init.Po \\",
          "144:  ./$(DEPDIR)/curves.Po ./$(DEPDIR)/domain_parameters.Po \\",
          "145:  ./$(DEPDIR)/drive_key_dkg.Po ./$(DEPDIR)/numbertheory.Po \\",
          "146:  ./$(DEPDIR)/point.Po ./$(DEPDIR)/secure_enclave.Po \\",
          "147:  ./$(DEPDIR)/secure_enclave_t.Po ./$(DEPDIR)/signature.Po \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338: ENCLAVE_KEY = $(ENCLAVE)_private.pem",
          "339: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "340:  secure_enclave.c \\",
          "342:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.cpp \\",
          "343:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.cpp $(ENCLAVE_KEY) $(ENCLAVE_CONFIG)",
          "",
          "[Removed Lines]",
          "341:     DKGUtils.cpp   BLSUtils.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "",
          "[Added Lines]",
          "347:  curves.c domain_parameters.c numbertheory.c point.c signature.c drive_key_dkg.c \\",
          "348:     DKGUtils.cpp   BLSEnclave.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "431: distclean-compile:",
          "432:  -rm -f *.tab.c",
          "435: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DKGUtils.Po@am__quote@ # am--include-marker",
          "436: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alt_bn128_g1.Po@am__quote@ # am--include-marker",
          "437: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alt_bn128_g2.Po@am__quote@ # am--include-marker",
          "438: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alt_bn128_init.Po@am__quote@ # am--include-marker",
          "439: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/secure_enclave.Po@am__quote@ # am--include-marker",
          "440: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/secure_enclave_t.Po@am__quote@ # am--include-marker",
          "441: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signed_enclave_debug.Po@am__quote@ # am--include-marker",
          "442: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signed_enclave_rel.Po@am__quote@ # am--include-marker",
          "",
          "[Removed Lines]",
          "434: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BLSUtils.Po@am__quote@ # am--include-marker",
          "",
          "[Added Lines]",
          "441: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BLSEnclave.Po@am__quote@ # am--include-marker",
          "446: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/curves.Po@am__quote@ # am--include-marker",
          "447: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/domain_parameters.Po@am__quote@ # am--include-marker",
          "448: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/drive_key_dkg.Po@am__quote@ # am--include-marker",
          "449: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/numbertheory.Po@am__quote@ # am--include-marker",
          "450: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/point.Po@am__quote@ # am--include-marker",
          "453: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signature.Po@am__quote@ # am--include-marker",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "645: clean-am: clean-generic clean-libexecPROGRAMS mostlyclean-am",
          "647: distclean: distclean-am",
          "649:  -rm -f ./$(DEPDIR)/DKGUtils.Po",
          "650:  -rm -f ./$(DEPDIR)/alt_bn128_g1.Po",
          "651:  -rm -f ./$(DEPDIR)/alt_bn128_g2.Po",
          "652:  -rm -f ./$(DEPDIR)/alt_bn128_init.Po",
          "653:  -rm -f ./$(DEPDIR)/secure_enclave.Po",
          "654:  -rm -f ./$(DEPDIR)/secure_enclave_t.Po",
          "655:  -rm -f ./$(DEPDIR)/signed_enclave_debug.Po",
          "656:  -rm -f ./$(DEPDIR)/signed_enclave_rel.Po",
          "657:  -rm -f Makefile",
          "",
          "[Removed Lines]",
          "648:   -rm -f ./$(DEPDIR)/BLSUtils.Po",
          "",
          "[Added Lines]",
          "661:   -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "666:  -rm -f ./$(DEPDIR)/curves.Po",
          "667:  -rm -f ./$(DEPDIR)/domain_parameters.Po",
          "668:  -rm -f ./$(DEPDIR)/drive_key_dkg.Po",
          "669:  -rm -f ./$(DEPDIR)/numbertheory.Po",
          "670:  -rm -f ./$(DEPDIR)/point.Po",
          "673:  -rm -f ./$(DEPDIR)/signature.Po",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "699: installcheck-am:",
          "701: maintainer-clean: maintainer-clean-am",
          "703:  -rm -f ./$(DEPDIR)/DKGUtils.Po",
          "704:  -rm -f ./$(DEPDIR)/alt_bn128_g1.Po",
          "705:  -rm -f ./$(DEPDIR)/alt_bn128_g2.Po",
          "706:  -rm -f ./$(DEPDIR)/alt_bn128_init.Po",
          "707:  -rm -f ./$(DEPDIR)/secure_enclave.Po",
          "708:  -rm -f ./$(DEPDIR)/secure_enclave_t.Po",
          "709:  -rm -f ./$(DEPDIR)/signed_enclave_debug.Po",
          "710:  -rm -f ./$(DEPDIR)/signed_enclave_rel.Po",
          "711:  -rm -f Makefile",
          "",
          "[Removed Lines]",
          "702:   -rm -f ./$(DEPDIR)/BLSUtils.Po",
          "",
          "[Added Lines]",
          "721:   -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "726:  -rm -f ./$(DEPDIR)/curves.Po",
          "727:  -rm -f ./$(DEPDIR)/domain_parameters.Po",
          "728:  -rm -f ./$(DEPDIR)/drive_key_dkg.Po",
          "729:  -rm -f ./$(DEPDIR)/numbertheory.Po",
          "730:  -rm -f ./$(DEPDIR)/point.Po",
          "733:  -rm -f ./$(DEPDIR)/signature.Po",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "747: %_t.h %_t.c: %.edl",
          "749: @ENCLAVE_RELEASE_SIGN_TRUE@.PHONY: signed_enclave_rel",
          "750: @ENCLAVE_RELEASE_SIGN_FALSE@.PHONY: signed_enclave_debug",
          "",
          "[Removed Lines]",
          "748:  $(SGX_EDGER8R) --search-path $(SGXSDK_INCDIR) $(SGX_EDGER8R_FLAGS) --trusted $<",
          "",
          "[Added Lines]",
          "773:  $(SGX_EDGER8R) --search-path $(SGXSDK_INCDIR):${PWD}/../intel-sgx-ssl/Linux/package/include $(SGX_EDGER8R_FLAGS) --trusted $<",
          "",
          "---------------"
        ],
        "secure_enclave/drive_key_dkg.c||secure_enclave/drive_key_dkg.c": [
          "File: secure_enclave/drive_key_dkg.c -> secure_enclave/drive_key_dkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <stdlib.h>",
          "6: #include <../tgmp-build/include/sgx_tgmp.h>",
          "7: #include <stdbool.h>",
          "8: #include \"domain_parameters.h\"",
          "9: #include \"curves.h\"",
          "10: #include \"point.h\"",
          "11: #include \"numbertheory.h\"",
          "13: void gen_session_keys(mpz_t skey, char* pb_key){",
          "15:     domain_parameters curve = domain_parameters_init();",
          "16:     domain_parameters_load_curve(curve, secp256k1);",
          "18:     unsigned char* rand_char = (unsigned char*)malloc(32);",
          "19:     sgx_read_rand( rand_char, 32);",
          "21:     mpz_t seed;",
          "22:     mpz_init(seed);",
          "23:     mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "24:     free(rand_char);",
          "26:     mpz_t skey_mpz;",
          "27:     mpz_init(skey_mpz);",
          "28:     mpz_mod(skey_mpz, seed, curve->p);",
          "29:     mpz_clear(seed);",
          "31:     char arr[mpz_sizeinbase (skey_mpz, 16) + 2];",
          "32:     char* sk = mpz_get_str(arr, 16, skey_mpz);",
          "36:     mpz_set(skey, skey_mpz);",
          "38:     point pub_key = point_init();",
          "39:     point_multiplication(pub_key, skey, curve->G, curve);",
          "41:     mpz_clear(skey_mpz);",
          "42:     point_clear(pub_key);",
          "43:     domain_parameters_clear(curve);",
          "44: }",
          "",
          "---------------"
        ],
        "secure_enclave/drive_key_dkg.h||secure_enclave/drive_key_dkg.h": [
          "File: secure_enclave/drive_key_dkg.h -> secure_enclave/drive_key_dkg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef SGXD_DRIVE_KEY_DKG_H",
          "6: #define SGXD_DRIVE_KEY_DKG_H",
          "8: void gen_session_keys(mpz_t skey, char* pub_key);",
          "12: #endif //SGXD_DRIVE_KEY_DKG_H",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"secure_enclave_t.h\"",
          "35: #include \"sgx_tcrypto.h\"",
          "36: #include \"sgx_tseal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <openssl/ec.h>",
          "36: #include <openssl/bn.h>",
          "37: #include <openssl/evp.h>",
          "38: #include <openssl/err.h>",
          "39: #include <openssl/rand.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: #include <string.h>",
          "42: #include <stdio.h>",
          "51: #include \"../sgxwallet_common.h\"",
          "",
          "[Removed Lines]",
          "44: #include <openssl/ec.h>",
          "45: #include <openssl/bn.h>",
          "46: #include <openssl/evp.h>",
          "47: #include <openssl/err.h>",
          "48: #include <openssl/rand.h>",
          "49: #include \"tSgxSSL_api.h\"",
          "",
          "[Added Lines]",
          "52: #include <stdbool.h>",
          "53: #include \"domain_parameters.h\"",
          "54: #include \"point.h\"",
          "55: #include \"signature.h\"",
          "56: #include \"curves.h\"",
          "57: #include \"drive_key_dkg.h\"",
          "58: #include <string.h>",
          "60: #include <sgx_tcrypto.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: void generate_ecdsa_key(int *err_status, char *err_string,",
          "121: }",
          "",
          "[Removed Lines]",
          "120:                         uint8_t *encrypted_key, uint32_t *enc_len) {",
          "",
          "[Added Lines]",
          "131:                         uint8_t *encrypted_key, uint32_t *enc_len, char * pub_key_x, char * pub_key_y) {",
          "133:   domain_parameters curve = domain_parameters_init();",
          "134:   domain_parameters_load_curve(curve, secp256k1);",
          "136:   unsigned char* rand_char = (unsigned char*)malloc(32);",
          "137:   sgx_read_rand( rand_char, 32);",
          "139:   mpz_t seed;",
          "140:   mpz_init(seed);",
          "141:   mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "143:   free(rand_char);",
          "145:   mpz_t skey;",
          "146:   mpz_init(skey);",
          "147:   mpz_mod(skey, seed, curve->p);",
          "148:   mpz_clear(seed);",
          "157:   point Pkey = point_init();",
          "159:   signature_generate_key(Pkey, skey, curve);",
          "161:   uint8_t base = 16;",
          "163:   int len = mpz_sizeinbase (Pkey->x, base) + 2;",
          "165:   char arr_x[len];",
          "166:   char* px = mpz_get_str(arr_x, base, Pkey->x);",
          "168:   int n_zeroes = 64 - strlen(arr_x);",
          "169:   for ( int i = 0; i < n_zeroes; i++){",
          "170:     pub_key_x[i] = '0';",
          "171:   }",
          "173:   strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "175:   char arr_y[mpz_sizeinbase (Pkey->y, base) + 2];",
          "176:   char* py = mpz_get_str(arr_y, base, Pkey->y);",
          "177:   n_zeroes = 64 - strlen(arr_y);",
          "178:   for ( int i = 0; i < n_zeroes; i++){",
          "179:     pub_key_y[i] = '0';",
          "180:   }",
          "181:   strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "182:   char skey_str[mpz_sizeinbase (skey, ECDSA_SKEY_BASE) + 2];",
          "183:   char* s  = mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "184:    snprintf(err_string, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "186:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "188:   sgx_status_t status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *)skey_str, sealedLen,(sgx_sealed_data_t*)encrypted_key);",
          "189:   if( status !=  SGX_SUCCESS) {",
          "190:     snprintf(err_string, BUF_LEN,\"seal ecsdsa private key failed\");",
          "191:     return;",
          "192:   }",
          "196:   mpz_clear(skey);",
          "197:   domain_parameters_clear(curve);",
          "198:   point_clear(Pkey);",
          "199: }",
          "202: void get_public_ecdsa_key(int *err_status, char *err_string,",
          "203:     uint8_t *encrypted_key, uint32_t dec_len, char * pub_key_x, char * pub_key_y) {",
          "207:   domain_parameters curve = domain_parameters_init();",
          "208:   domain_parameters_load_curve(curve, secp256k1);",
          "210:   char skey[ECDSA_SKEY_LEN];",
          "212:   sgx_status_t status = sgx_unseal_data(",
          "213:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t *)skey, &dec_len);",
          "215:   if (status != SGX_SUCCESS) {",
          "216:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "217:     return;",
          "218:   }",
          "222:   mpz_t skey_mpz;",
          "223:   mpz_init(skey_mpz);",
          "225:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "226:     snprintf(err_string, BUF_LEN,\"wrong string to init private key\");",
          "227:   }",
          "230:   point Pkey = point_init();",
          "232:   signature_generate_key(Pkey, skey_mpz, curve);",
          "234:   point Pkey_test = point_init();",
          "235:   point_multiplication(Pkey_test, skey_mpz, curve->G, curve);",
          "237:   if (!point_cmp(Pkey, Pkey_test)){",
          "238:     snprintf(err_string, BUF_LEN,\"Points are not equal\");",
          "239:   }",
          "241:   int base = 16;",
          "243:   int len = mpz_sizeinbase (Pkey->x, base) + 2;",
          "245:   char arr_x[len];",
          "246:   char* px = mpz_get_str(arr_x, base, Pkey->x);",
          "248:   int n_zeroes = 64 - strlen(arr_x);",
          "249:   for ( int i = 0; i < n_zeroes; i++){",
          "250:     pub_key_x[i] = '0';",
          "251:   }",
          "253:   strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "255:   char arr_y[mpz_sizeinbase (Pkey->y, base) + 2];",
          "256:   char* py = mpz_get_str(arr_y, base, Pkey->y);",
          "257:   n_zeroes = 64 - strlen(arr_y);",
          "258:   for ( int i = 0; i < n_zeroes; i++){",
          "259:     pub_key_y[i] = '0';",
          "260:   }",
          "261:   strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "263:   mpz_clear(skey_mpz);",
          "264:   domain_parameters_clear(curve);",
          "265:   point_clear(Pkey);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268: }",
          "343: void gen_dkg_secret (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "345:   char* dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "271: void ecdsa_sign_message(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "272:                         uint32_t enc_len, uint8_t *message, char *signature) {",
          "276:     char key[BUF_LEN];",
          "278:     decrypt_key(err_status, err_string, encrypted_key, enc_len, key);",
          "280:     if (err_status != 0) {",
          "281:         return;",
          "282:     }",
          "291:     unsigned char entropy_buf[ADD_ENTROPY_SIZE] = {0};",
          "293:     RAND_add(entropy_buf, sizeof(entropy_buf), ADD_ENTROPY_SIZE);",
          "294:     RAND_seed(entropy_buf, sizeof(entropy_buf));",
          "297:     OPENSSL_init_crypto(0, NULL);",
          "299:     RAND_add(entropy_buf, sizeof(entropy_buf), ADD_ENTROPY_SIZE);",
          "300:     RAND_seed(entropy_buf, sizeof(entropy_buf));",
          "302:     EC_KEY *ec = NULL;",
          "303:     int eccgroup;",
          "304:     eccgroup = OBJ_txt2nid(\"secp384r1\");",
          "305:     ec = EC_KEY_new_by_curve_name(eccgroup);",
          "306:     if (ec == NULL) {",
          "307:         return;",
          "308:     }",
          "310:     EC_KEY_set_asn1_flag(ec, OPENSSL_EC_NAMED_CURVE);",
          "312:     int ret = EC_KEY_generate_key(ec);",
          "313:     if (!ret) {",
          "314:         return;",
          "315:     }",
          "317:     EVP_PKEY *ec_pkey = EVP_PKEY_new();",
          "318:     if (ec_pkey == NULL) {",
          "319:         return;",
          "320:     }",
          "321:     EVP_PKEY_assign_EC_KEY(ec_pkey, ec);",
          "325:     char buffer[100];",
          "326:     unsigned char sig;",
          "327:     unsigned int siglen;",
          "328:     int i;",
          "329:     for (i = 0; i < 1000; i++) {",
          "332:         EVP_MD_CTX *context = EVP_MD_CTX_new();",
          "334:         EVP_SignInit_ex(context, EVP_sha1(), NULL);",
          "335:         EVP_SignUpdate(context, &buffer, 100);",
          "336:         EVP_SignFinal(context, &sig, &siglen, ec_pkey);",
          "337:     }",
          "341: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:   }",
          "358: }",
          "360: void decrypt_dkg_secret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:   free(dkg_secret);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "380: void get_public_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "381:                        unsigned _t, unsigned _n){",
          "385: }",
          "",
          "[Removed Lines]",
          "382:     char* decrypted_dkg_secret = (char*)malloc(DKG_MAX_SEALED_LEN);",
          "383:     decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "384:     calc_public_shares(decrypted_dkg_secret, public_shares, _t);",
          "",
          "[Added Lines]",
          "455:   char* decrypted_dkg_secret = (char*)malloc(DKG_MAX_SEALED_LEN);",
          "456:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "457:   strncpy(err_string, decrypted_dkg_secret, 1024);",
          "458:   calc_public_shares(decrypted_dkg_secret, public_shares, _t);",
          "459: }",
          "461: void ecdsa_sign1(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "462:                          unsigned char* hash, char * sig_r, char * sig_s, uint8_t* sig_v, int base) {",
          "464:   domain_parameters curve = domain_parameters_init();",
          "465:   domain_parameters_load_curve(curve, secp256k1);",
          "467:   char skey[ECDSA_SKEY_LEN];",
          "469:   sgx_status_t status = sgx_unseal_data(",
          "470:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, skey, &dec_len);",
          "472:   if (status != SGX_SUCCESS) {",
          "473:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "474:     return;",
          "475:   }",
          "477:   snprintf(err_string, BUF_LEN,\"pr key is %s length %d \", skey, strlen(skey));",
          "478:   mpz_t skey_mpz;",
          "479:   mpz_init(skey_mpz);",
          "480:   mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE);",
          "483:   mpz_init(test_skey);",
          "484:   mpz_set_str(test_skey, \"4160780231445160889237664391382223604184857153814275770598791864649971919844\", 10);",
          "486:   if(!mpz_cmp(skey,test_skey)){",
          "487:     snprintf(err_string, BUF_LEN,\"keys are not equal \");",
          "490:   mpz_t msg_mpz;",
          "491:   mpz_init(msg_mpz);",
          "492:   mpz_set_str(msg_mpz, hash, 16);",
          "495:   signature sign = signature_init();",
          "498:   signature_sign( sign, msg_mpz, skey_mpz, curve);",
          "500:   point Pkey = point_init();",
          "502:   signature_generate_key(Pkey, skey_mpz, curve);",
          "504:   if ( !signature_verify(msg_mpz, sign, Pkey, curve) ){",
          "505:     snprintf(err_string, BUF_LEN,\"signature is not verified! \");",
          "506:     return;",
          "507:   }",
          "513:   char arr_m[mpz_sizeinbase (msg_mpz, 16) + 2];",
          "514:   char* msg = mpz_get_str(arr_m, 16, msg_mpz);",
          "515:   snprintf(err_string, BUF_LEN,\"message is %s \", arr_m);",
          "517:   char arr_r[mpz_sizeinbase (sign->r, base) + 2];",
          "518:   char* r = mpz_get_str(arr_r, base, sign->r);",
          "519:   strncpy(sig_r, arr_r, 1024);",
          "521:   char arr_s[mpz_sizeinbase (sign->s, base) + 2];",
          "522:   char* s = mpz_get_str(arr_s, base, sign->s);",
          "523:   strncpy(sig_s, arr_s, 1024);",
          "527:   mpz_clear(skey_mpz);",
          "528:   mpz_clear(msg_mpz);",
          "529:   domain_parameters_clear(curve);",
          "530:   signature_clear(sign);",
          "531:   point_clear(Pkey);",
          "533: }",
          "535: void drive_key(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t* enc_len, char* result_str, char* pub_keyB ){",
          "538:   char* pub_key = (char*)malloc(1024);",
          "540:   mpz_t skey;",
          "541:   mpz_init(skey);",
          "543:   gen_session_keys(skey, pub_key);",
          "544:   char arr_sk[mpz_sizeinbase (skey, 16) + 2];",
          "545:   char* sk = mpz_get_str(arr_sk, 16, skey);",
          "546:   snprintf(err_string, BUF_LEN,\"skey is %s length %d\", arr_sk, strlen(arr_sk));",
          "548:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "549:   sgx_status_t status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t*)arr_sk, sealedLen,(sgx_sealed_data_t*)encrypted_skey);",
          "551:   if(  status !=  SGX_SUCCESS) {",
          "552:     snprintf(err_string, BUF_LEN,\"SGX seal data failed\");",
          "553:   }",
          "556:   char* r = mpz_get_str(arr_r, base, sign->r);",
          "557:   strncpy(sig_r, arr_r, 1024);",
          "559:   char arr_s[mpz_sizeinbase (sign->s, base) + 2];",
          "560:   char* s = mpz_get_str(arr_s, base, sign->s);",
          "564:   mpz_clear(skey);",
          "566:  free(pub_key);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: enclave {",
          "3:  trusted {",
          "4:   include \"sgx_tgmp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from \"sgx_tsgxssl.edl\" import *;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   public void generate_ecdsa_key (",
          "25:       [user_check] int *err_status,",
          "26:       [out, count = 1024] char* err_string,",
          "30:   public void encrypt_key (",
          "31:       [user_check] int *err_status,",
          "",
          "[Removed Lines]",
          "27:       [out, count = 1024] uint8_t* encrypted_key, [user_check] uint32_t *enc_len);",
          "",
          "[Added Lines]",
          "29:       [out, count = 1024] uint8_t* encrypted_key,",
          "30:       [user_check] uint32_t *enc_len,",
          "31:       [out, count = 1024] char * pub_key_x,",
          "32:       [out, count = 1024] char * pub_key_y);",
          "34:   public void get_public_ecdsa_key (",
          "35:               [user_check] int *err_status,",
          "36:               [out, count = 1024] char* err_string,",
          "37:               [in, count = 1024] uint8_t* encrypted_key,",
          "38:               uint32_t dec_len,",
          "39:               [out, count = 1024] char * pub_key_x,",
          "40:               [out, count = 1024] char * pub_key_y);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:                   [in, count = 1024] char* hashY ,",
          "50:                   [out, count = 1024] char* signature);",
          "60:         public void gen_dkg_secret (",
          "61:                      [user_check] int *err_status,",
          "62:                      [out, count = 1024] char* err_string,",
          "",
          "[Removed Lines]",
          "52:   public void ecdsa_sign_message (",
          "53:                   [user_check] int *err_status,",
          "54:                   [out, count = 1024] char* err_string,",
          "55:                   [in, count = 1024] uint8_t* encrypted_key,",
          "56:                   uint32_t enc_len,",
          "57:                   [in, count = 1024] uint8_t* hash,",
          "58:                   [out, count = 1024] char* signature);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:         public void get_secret_shares (",
          "75:                                 [user_check] int *err_status,",
          "76:                                 [out, count = 1024] char* err_string,",
          "78:                                 uint32_t enc_len,",
          "79:                                 [out, count = 2000] char* secret_shares,",
          "80:                                 unsigned _t,",
          "",
          "[Removed Lines]",
          "77:                                 [in, count = 2000] uint8_t* decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "81:                                 [in, count = 2000] uint8_t* encrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:                                 [out, count = 4000] char* public_shares,",
          "89:                                 unsigned _t,",
          "90:                                 unsigned _n);",
          "91:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:          public void ecdsa_sign1(",
          "97:                                  [user_check] int *err_status,",
          "98:                                  [out, count = 1024] char* err_string,",
          "99:                                  [in, count = 1024] uint8_t* encrypted_key,",
          "100:                                  uint32_t enc_len,",
          "101:                                  [in, count = 1024] unsigned char* hash,",
          "102:                                  [out, count = 1024] char* sig_r,",
          "103:                                  [out, count = 1024] char* sig_s,",
          "104:                                  [user_check] uint8_t* sig_v,",
          "105:                                  int base);",
          "107:          public void drive_key(",
          "108:                                 [user_check]int *err_status,",
          "109:                                 [out, count = 1024] char *err_string,",
          "110:                                 [out, count = 1024] uint8_t *encrypted_skey,",
          "111:                                 [user_check]uint32_t* enc_len,",
          "112:                                 [out, count = 1024] char* result_str,",
          "113:                                 [out, count = 1024] char* pub_keyB );",
          "",
          "---------------"
        ],
        "secure_enclave/signature.c||secure_enclave/signature.c": [
          "File: secure_enclave/signature.c -> secure_enclave/signature.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdlib.h>",
          "2: #include <stdio.h>",
          "3: #include <../tgmp-build/include/sgx_tgmp.h>",
          "4: #include <stdbool.h>",
          "5: #include <assert.h>",
          "6: #include \"domain_parameters.h\"",
          "7: #include \"point.h\"",
          "8: #include \"signature.h\"",
          "9: #include \"numbertheory.h\"",
          "13: signature signature_init()",
          "14: {",
          "15:  signature sig;",
          "16:  sig = malloc(sizeof(struct signature_s));",
          "17:  mpz_init(sig->r);",
          "18:  mpz_init(sig->s);",
          "19:  sig->v = 0;",
          "20:  return sig;",
          "21: }",
          "24: void signature_print(signature sig)",
          "25: {",
          "27:  mpz_out_str(stdout, 10, sig->r);",
          "28:  printf(\",\\n\\t\");",
          "29:  mpz_out_str(stdout, 10, sig->s);",
          "31: }",
          "34: void signature_set_str(signature sig, char *r, char *s, int base)",
          "35: {",
          "36:  mpz_set_str(sig->r, r, base);",
          "37:  mpz_set_str(sig->s, s, base);",
          "38: }",
          "41: void signature_set_hex(signature sig, char *r, char *s)",
          "42: {",
          "43:  signature_set_str(sig,r,s,16);",
          "44: }",
          "47: void signature_set_ui(signature sig, unsigned long int r, unsigned long int s)",
          "48: {",
          "49:  mpz_set_ui(sig->r, r);",
          "50:  mpz_set_ui(sig->s, s);",
          "51: }",
          "54: void signature_copy(signature R, signature sig)",
          "55: {",
          "56:  mpz_set(R->r, sig->r);",
          "57:  mpz_set(R->s, sig->s);",
          "58: }",
          "62: bool signature_cmp(signature sig1, signature sig2)",
          "63: {",
          "64:  return !mpz_cmp(sig1->r,sig2->r) && !mpz_cmp(sig1->s,sig2->s);",
          "65: }",
          "68: void signature_generate_key(point public_key, mpz_t private_key, domain_parameters curve)",
          "69: {",
          "70:  point_multiplication(public_key, private_key, curve->G, curve);",
          "71: }",
          "74: void signature_sign(signature sig, mpz_t message, mpz_t private_key, domain_parameters curve)",
          "75: {",
          "78:  assert(mpz_sizeinbase(message, 2) <= mpz_sizeinbase(curve->n, 2));",
          "81:  mpz_t k;mpz_init(k);",
          "82:  mpz_t x;mpz_init(x);",
          "83:  point Q = point_init();",
          "84:  mpz_t r;mpz_init(r);",
          "85:  mpz_t t1;mpz_init(t1);",
          "86:  mpz_t t2;mpz_init(t2);",
          "87:  mpz_t t3;mpz_init(t3);",
          "88:  mpz_t s;mpz_init(s);",
          "90:     unsigned char* rand_char = (unsigned char*)malloc(32);",
          "91:     sgx_read_rand( rand_char, 32);",
          "93:  gmp_randstate_t r_state;",
          "95:  signature_sign_start:",
          "98:     sgx_read_rand( rand_char, 32);",
          "99:     mpz_t seed;",
          "100:     mpz_init(seed);",
          "101:     mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "102:     free(rand_char);",
          "105:     mpz_mod(k, seed, curve->p);",
          "106:     mpz_clear(seed);",
          "113:  point_multiplication(Q, k, curve->G, curve);",
          "114:  mpz_set(x, Q->x);",
          "117:  mpz_mod(r, x, curve->n);",
          "118:  if(!mpz_sgn(r)) //Start over if r=0, note haven't been tested memory might die :)",
          "119:   goto signature_sign_start;",
          "120:  mpz_clear(x);",
          "125:  mpz_invert(t1, k, curve->n);",
          "126:  mpz_mul(t2, private_key, r);    //t2 = d*r",
          "127:  mpz_add(t3, message, t2); //t3 = e+t2",
          "128:  mpz_clear(t2);",
          "129:  mpz_init(t2);",
          "130:  mpz_mod(t2, t3, curve->n); //t2 = t3 mod n",
          "131:  mpz_clear(t3);",
          "132:         mpz_init(t3);",
          "133:  mpz_mul(t3, t2, t1);  //t3 = t2 * t1",
          "134:  mpz_mod(s, t3, curve->n); //s = t3 mod n",
          "138:   mpz_t rem;",
          "139:   mpz_init(rem);",
          "140:   mpz_mod_ui(rem, Q->y, 2);",
          "142:   mpz_t s_mul_2;",
          "143:   mpz_init(s_mul_2);",
          "144:   mpz_mul_ui(s_mul_2, s, 2);",
          "146:   unsigned b = 0;",
          "147:   if (mpz_cmp(s_mul_2, curve->n) > 0) {",
          "148:     b = 1;",
          "149:   }",
          "150:   sig->v = mpz_get_ui(rem) ^ b ;",
          "152:   point_clear(Q);",
          "153:   mpz_clear(rem);",
          "154:   mpz_clear(s_mul_2);",
          "158:   mpz_t n_div_2;",
          "159:  mpz_init(n_div_2);",
          "160:         mpz_cdiv_q_ui(n_div_2, curve->n , 2);",
          "162:  if (mpz_cmp(s, n_div_2) > 0) {",
          "163:    mpz_t neg;",
          "164:    mpz_init(neg);",
          "165:    mpz_sub(neg, curve->n, s);",
          "167:    mpz_clear(s);",
          "168:    mpz_init(s);",
          "169:    mpz_set(s, neg);",
          "171:    mpz_clear(neg);",
          "172:  }",
          "174:  mpz_clear(n_div_2);",
          "176:  mpz_clear(t1);",
          "177:  mpz_clear(t2);",
          "178:  mpz_clear(t3);",
          "182:  mpz_set(sig->r, r);",
          "183:  mpz_set(sig->s, s);",
          "186:  mpz_clear(k);",
          "187:  mpz_clear(r);",
          "188:  mpz_clear(s);",
          "189: }",
          "192: bool signature_verify(mpz_t message, signature sig, point public_key, domain_parameters curve)",
          "193: {",
          "195:  mpz_t one;mpz_init(one);",
          "196:  mpz_set_ui(one, 1);",
          "197:  if( mpz_cmp(sig->r,one) < 0 &&",
          "198:   mpz_cmp(curve->n,sig->r) <= 0 &&",
          "199:   mpz_cmp(sig->s,one) < 0 &&",
          "200:   mpz_cmp(curve->n,sig->s) <= 0)",
          "201:  {",
          "202:   mpz_clear(one);",
          "203:   return false;",
          "204:  }",
          "206:  mpz_clear(one);",
          "209:  mpz_t w;mpz_init(w);",
          "210:  mpz_t u1;mpz_init(u1);",
          "211:  mpz_t u2;mpz_init(u2);",
          "212:  mpz_t t;mpz_init(t);",
          "213:  mpz_t tt2;mpz_init(tt2);",
          "214:  point x = point_init();",
          "215:  point t1 = point_init();",
          "216:  point t2 = point_init();",
          "219:  number_theory_inverse(w, sig->s, curve->n);",
          "222:  mpz_mod(tt2, message, curve->n);",
          "223:  mpz_mul(t, tt2, w);",
          "224:  mpz_mod(u1, t, curve->n);",
          "227:  mpz_mul(t, sig->r, w);",
          "228:  mpz_mod(u2, t, curve->n);",
          "231:  point_multiplication(t1, u1, curve->G, curve);",
          "232:  point_multiplication(t2, u2, public_key, curve);",
          "233:  point_addition(x, t1, t2, curve);",
          "236:  bool result = mpz_cmp(sig->r, x->x) == 0 && !x->infinity;",
          "239:  point_clear(x);",
          "240:  point_clear(t1);",
          "241:  point_clear(t2);",
          "242:  mpz_clear(w);",
          "243:  mpz_clear(u1);",
          "244:  mpz_clear(u2);",
          "245:  mpz_clear(t);",
          "246:  mpz_clear(tt2);",
          "249:  return result;",
          "250: }",
          "253: void signature_clear(signature sig)",
          "254: {",
          "255:  mpz_clear(sig->r);",
          "256:  mpz_clear(sig->s);",
          "257:  free(sig);",
          "258: }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "35: #include <jsonrpccpp/server/connectors/httpserver.h>",
          "37: #include \"sgxwallet_common.h\"",
          "38: #include \"create_enclave.h\"",
          "39: #include \"secure_enclave_u.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <libff/algebra/fields/fp.hpp>",
          "34: #include <dkg/dkg.h>",
          "41: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "42: #include <libff/algebra/exponentiation/exponentiation.hpp>",
          "44: #include <libff/algebra/fields/fp.hpp>",
          "46: #include <dkg/dkg.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: #include \"SGXWalletServer.hpp\"",
          "54: #define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file",
          "56: #include \"catch.hpp\"",
          "58: std::string stringFromFr(libff::alt_bn128_Fr& el) {",
          "60:     mpz_t t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: #include <sgx_tcrypto.h>",
          "71: #include \"stubclient.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:   free(errMsg1);",
          "278:   free(encrypted_dkg_secret);",
          "279:   free(secret);",
          "280: }",
          "283:   std::string str(koefs);",
          "285:   std::vector<libff::alt_bn128_Fr> tokens;",
          "286:   size_t prev = 0, pos = 0;",
          "287:   do",
          "",
          "[Removed Lines]",
          "282: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char* symbol){",
          "284:   std::string delim(symbol);",
          "",
          "[Added Lines]",
          "289:   sgx_destroy_enclave(eid);",
          "292: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "294:   std::string delim;",
          "295:   delim.push_back(symbol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:   return tokens;",
          "301: }",
          "307:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "309:   char* errMsg = (char*) calloc(1024,1);",
          "",
          "[Removed Lines]",
          "303: TEST_CASE( \"DKG auto secret shares test\", \"[dkg-s_shares]\" ) {",
          "305:   init_all();",
          "",
          "[Added Lines]",
          "314: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "315:   libff::init_alt_bn128_params();",
          "316:   std::string str(koefs);",
          "317:   std::string delim;",
          "318:   delim.push_back(symbol);",
          "319:   std::vector<std::string> G2_strings;",
          "320:   size_t prev = 0, pos = 0;",
          "321:   do",
          "322:   {",
          "323:     pos = str.find(delim, prev);",
          "324:     if (pos == std::string::npos) pos = str.length();",
          "325:     std::string token = str.substr(prev, pos-prev);",
          "326:     if (!token.empty()) {",
          "327:       std::string koef(token.c_str());",
          "328:       G2_strings.push_back(koef);",
          "329:     }",
          "330:     prev = pos + delim.length();",
          "331:   }",
          "332:   while (pos < str.length() && prev < str.length());",
          "334:   return G2_strings;",
          "335: }",
          "337: libff::alt_bn128_G2 VectStringToG2(const std::vector<std::string>& G2_str_vect){",
          "338:   libff::init_alt_bn128_params();",
          "339:   libff::alt_bn128_G2 koef = libff::alt_bn128_G2::zero();",
          "340:   koef.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "341:   koef.X.c1 = libff::alt_bn128_Fq(G2_str_vect.at(1).c_str());",
          "342:   koef.Y.c0 = libff::alt_bn128_Fq(G2_str_vect.at(2).c_str());",
          "343:   koef.Y.c1 = libff::alt_bn128_Fq(G2_str_vect.at(3).c_str());",
          "344:   koef.Z.c0 = libff::alt_bn128_Fq::one();",
          "345:   koef.Z.c1 = libff::alt_bn128_Fq::zero();",
          "347:   return koef;",
          "348: }",
          "352:  TEST_CASE( \"DKG secret shares test\", \"[dkg-s_shares]\" ) {",
          "353:   libff::init_alt_bn128_params();",
          "355:   init_enclave();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:   unsigned t = 3, n = 4;",
          "316:   REQUIRE(status == SGX_SUCCESS);",
          "317:   printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg);",
          "318:   printf(\"\\n Length: %d \\n\", enc_len);",
          "321:   char* errMsg1 = (char*) calloc(1024,1);",
          "323:   char colon = ':';",
          "325:   status = get_secret_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, enc_len, secret_shares, t, n);",
          "326:   REQUIRE(status == SGX_SUCCESS);",
          "328:   printf(\"secret shares %s \\n\\n\", secret_shares);",
          "332:   char* secret = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "333:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, enc_len);",
          "334:   REQUIRE(status == SGX_SUCCESS);",
          "338:   signatures::Dkg dkg_obj(t,n);",
          "343:   REQUIRE(s_shares == s_shares_dkg);",
          "",
          "[Removed Lines]",
          "315:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 3);",
          "324:   char* secret_shares = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "327:   printf(\"\\nget_secret_shares: %d %s \\n\", err_status, errMsg1);",
          "330:   std::vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, &colon);",
          "335:   printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1);",
          "336:   printf(\"decrypted secret %s \\n\\n\", secret);",
          "340:   std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, &colon);",
          "341:   std::vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, &colon));",
          "",
          "[Added Lines]",
          "364:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, n);",
          "372:   char* secret_shares = (char*)calloc(DKG_MAX_SEALED_LEN, 1);",
          "375:   printf(\"\\nget_secret_shares status: %d %s \\n\", err_status, errMsg1);",
          "378:   std::vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "387:   std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "388:   std::vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "390:   for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "391:     libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "392:     mpz_t(sshare);",
          "393:     mpz_init(sshare);",
          "394:     cur_share.as_bigint().to_mpz(sshare);",
          "395:     char arr[mpz_sizeinbase (sshare, 10) + 2];",
          "396:     char* share_str = mpz_get_str(arr, 10, sshare);",
          "397:     printf(\" %s \\n\", share_str);",
          "398:     mpz_clear(sshare);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:   free(encrypted_dkg_secret);",
          "348:   free(secret_shares);",
          "350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:   sgx_destroy_enclave(eid);",
          "410: }",
          "412: TEST_CASE( \"DKG public shares test\", \"[dkg-pub_shares]\" ) {",
          "415:   init_enclave();",
          "416:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "418:   char* errMsg = (char*) calloc(1024,1);",
          "419:   int err_status = 0;",
          "420:   uint32_t enc_len = 0;",
          "422:   unsigned t = 3, n = 4;",
          "424:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, n);",
          "425:   REQUIRE(status == SGX_SUCCESS);",
          "429:   char* errMsg1 = (char*) calloc(1024,1);",
          "431:   char colon = ':';",
          "432:   char* public_shares = (char*)calloc(4000, 1);",
          "433:   status = get_public_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, enc_len, public_shares, t, n);",
          "434:   REQUIRE(status == SGX_SUCCESS);",
          "437:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "438:   std::vector <libff::alt_bn128_G2> pub_shares_G2;",
          "439:   for ( int i = 0; i < G2_strings.size(); i++){",
          "440:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "441:     libff::alt_bn128_G2 el = VectStringToG2(koef_str);",
          "444:     pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "445:   }",
          "447:   char* secret = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "448:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, enc_len);",
          "449:   REQUIRE(status == SGX_SUCCESS);",
          "452:   signatures::Dkg dkg_obj(t,n);",
          "454:   std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "455:   std::vector < libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "457:   for ( int  i = 0; i < pub_shares_dkg.size(); i++){",
          "458:     libff::alt_bn128_G2 el = pub_shares_dkg.at(i);",
          "459:     el.to_affine_coordinates();",
          "460:     libff::alt_bn128_Fq x_c0_el = el.X.c0;",
          "461:     mpz_t x_c0;",
          "462:     mpz_init(x_c0);",
          "463:     x_c0_el.as_bigint().to_mpz(x_c0);",
          "464:     char arr[mpz_sizeinbase (x_c0, 10) + 2];",
          "465:     char* share_str = mpz_get_str(arr, 10, x_c0);",
          "466:     printf(\" %s \\n\", share_str);",
          "467:     mpz_clear(x_c0);",
          "470:   bool res = (pub_shares_G2 == pub_shares_dkg);",
          "471:   REQUIRE( res == true);",
          "473:   free(errMsg);",
          "474:   free(errMsg1);",
          "475:   free(encrypted_dkg_secret);",
          "476:   free(public_shares);",
          "478:   sgx_destroy_enclave(eid);",
          "479: }",
          "481: TEST_CASE( \"DKG drive key test\", \"[dkg-drive-key]\" ) {",
          "484:   init_enclave();",
          "485:   uint8_t *encrypted_key = (uint8_t *) calloc(BUF_LEN, 1);",
          "487:   char *errMsg = (char *)calloc(1024, 1);",
          "488:   char *result = (char *)calloc(1024, 1);",
          "489:   char *pub_key = (char *)calloc(1024, 1);",
          "490:   int err_status = 0;",
          "491:   uint32_t enc_len = 0;",
          "493:   unsigned t = 3, n = 4;",
          "495:   status = drive_key(eid, &err_status, errMsg, encrypted_key, &enc_len, result,",
          "496:                      pub_key);",
          "498:   REQUIRE(status == SGX_SUCCESS);",
          "499:   printf(\" drive_key completed with status: %d %s \\n\", err_status, errMsg);",
          "500: }",
          "503: TEST_CASE(\"ECDSA keygen and signature test\", \"[ecdsa_test]\") {",
          "505:   init_enclave();",
          "507:   char *errMsg = (char *)calloc(1024, 1);",
          "508:   int err_status = 0;",
          "509:   uint8_t *encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "511:   char *pub_key_x = (char *)calloc(1024, 1);",
          "512:   char *pub_key_y = (char *)calloc(1024, 1);",
          "513:   uint32_t enc_len = 0;",
          "517:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "518:   printf(\"\\nerrMsg %s\\n\", errMsg );",
          "519:   REQUIRE(status == SGX_SUCCESS);",
          "521:   printf(\"\\nwas pub_key_x %s: \\n\", pub_key_x);",
          "522:   printf(\"\\nwas pub_key_y %s: \\n\", pub_key_y);",
          "524:   for ( int i = 0; i < 1024 ; i++)",
          "528:   char* hex = \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "529:   printf(\"hash length %d \", strlen(hex));",
          "530:   char* signature_r = (char *)calloc(1024, 1);",
          "531:   char* signature_s = (char *)calloc(1024, 1);",
          "532:   uint8_t signature_v = 0;",
          "534:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_pr_key, enc_len, (unsigned char*)hex, signature_r, signature_s, &signature_v, 16);",
          "535:   REQUIRE(status == SGX_SUCCESS);",
          "536:   printf(\"\\nsignature r : %s  \", signature_r);",
          "537:   printf(\"\\nsignature s: %s  \", signature_s);",
          "538:   printf(\"\\nsignature v: %u  \", signature_v);",
          "539:   printf(\"\\n %s  \\n\", errMsg);",
          "541:   free(errMsg);",
          "542:   sgx_destroy_enclave(eid);",
          "543:   printf(\"the end of ecdsa test\\n\");",
          "544: }",
          "546: TEST_CASE(\"Test test\", \"[test_test]\") {",
          "548:   init_enclave();",
          "550:   char *errMsg = (char *)calloc(1024, 1);",
          "551:   int err_status = 0;",
          "552:   uint8_t *encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "554:   char *pub_key_x = (char *)calloc(1024, 1);",
          "555:   char *pub_key_y = (char *)calloc(1024, 1);",
          "556:   uint32_t enc_len = 0;",
          "558:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "560:   REQUIRE(status == SGX_SUCCESS);",
          "573:   sgx_destroy_enclave(eid);",
          "576: }",
          "578: TEST_CASE(\"get public ECDSA key\", \"[get_pub_ecdsa_key_test]\") {",
          "581:   init_enclave();",
          "583:   char *errMsg = (char *)calloc(1024, 1);",
          "584:   int err_status = 0;",
          "585:   uint8_t *encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "587:   char *pub_key_x = (char *)calloc(1024, 1);",
          "588:   char *pub_key_y = (char *)calloc(1024, 1);",
          "589:   uint32_t enc_len = 0;",
          "593:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "594:   printf(\"\\nerrMsg %s\\n\", errMsg );",
          "595:   REQUIRE(status == SGX_SUCCESS);",
          "597:   printf(\"\\nwas pub_key_x %s length %d: \\n\", pub_key_x, strlen(pub_key_x));",
          "598:   printf(\"\\nwas pub_key_y %s length %d: \\n\", pub_key_y, strlen(pub_key_y));",
          "601:   for ( int i = 0; i < 1024 ; i++)",
          "604:   char *got_pub_key_x = (char *)calloc(1024, 1);",
          "605:   char *got_pub_key_y = (char *)calloc(1024, 1);",
          "607:   status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, got_pub_key_x,  got_pub_key_y);",
          "608:   REQUIRE(status == SGX_SUCCESS);",
          "609:   printf(\"\\nnow pub_key_x %s: \\n\", got_pub_key_x);",
          "610:   printf(\"\\nnow pub_key_y %s: \\n\", got_pub_key_y);",
          "611:   printf(\"\\n pr key  %s  \\n\", errMsg);",
          "613:   free(errMsg);",
          "614:   sgx_destroy_enclave(eid);",
          "615: }",
          "617: #include \"stubclient.h\"",
          "618: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "620: using namespace jsonrpc;",
          "621: using namespace std;",
          "623: TEST_CASE(\"API test\", \"[api_test]\") {",
          "624:     cerr << \"API test started\" << endl;",
          "625:     init_all();",
          "631:     cerr << \"Server inited\" << endl;",
          "632:     HttpClient client(\"http://localhost:1025\");",
          "633:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "635:     cerr << \"Client inited\" << endl;",
          "637:     try {",
          "640:         cout << c.ecdsaSignMessageHash(16, \"known_key1\",\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "641:     } catch (JsonRpcException &e) {",
          "642:         cerr << e.what() << endl;",
          "643:     }",
          "",
          "---------------"
        ],
        "trusted_libff/libff/algebrcurves/alt_bn128/alt_bn128_init.cpp||trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp": [
          "File: trusted_libff/libff/algebrcurves/alt_bn128/alt_bn128_init.cpp -> trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <libff/algebra/curves/alt_bn128/alt_bn128_g2.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     alt_bn128_G2::G2_zero = alt_bn128_G2(alt_bn128_Fq2::zero(),",
          "171:                                          alt_bn128_Fq2::one(),",
          "172:                                          alt_bn128_Fq2::zero());",
          "174:     alt_bn128_G2::G2_one = alt_bn128_G2(alt_bn128_Fq2(alt_bn128_Fq(\"10857046999023057135944570762232829481370756359578518086990519993285655852781\"),",
          "175:                                                       alt_bn128_Fq(\"11559732032986387107991004021392285783925812861821192530917403151452391805634\")),",
          "176:                                         alt_bn128_Fq2(alt_bn128_Fq(\"8495653923123431417604973247489272438418190587263600148770280649306958101930\"),",
          "177:                                                       alt_bn128_Fq(\"4082367875863433681332203403145435568316851327593401208105741076214120093531\")),",
          "178:                                         alt_bn128_Fq2::one());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a43f76aeb95b6eceec5ffc1fc81eb5fb0d8d3e4",
      "candidate_info": {
        "commit_hash": "9a43f76aeb95b6eceec5ffc1fc81eb5fb0d8d3e4",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/9a43f76aeb95b6eceec5ffc1fc81eb5fb0d8d3e4",
        "files": [
          "DKGCrypto.cpp",
          "SGXWalletServer.cpp",
          "ServerDataChecker.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-2074 Fix memory leaks in SGXServer",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   }",
          "116:   char* public_shares = (char*)calloc(10000, 1);",
          "118:   uint64_t enc_len = 0;",
          "121:   if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "122:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "123:   }",
          "",
          "[Removed Lines]",
          "120:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "",
          "[Added Lines]",
          "124:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN * 2, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:   }",
          "134:   if ( err_status != 0){",
          "135:     throw RPCException(-666, errMsg1 );",
          "136:   }",
          "",
          "[Removed Lines]",
          "132:   uint32_t len = 0;",
          "133:   status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "",
          "[Added Lines]",
          "138:   uint32_t len;",
          "139:   if (!is_aes)",
          "140:     status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "141:   else {",
          "142:     status = get_public_shares_aes(eid, &err_status, errMsg1, encr_dkg_poly, enc_len, public_shares, t, n);",
          "143:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161: }",
          "163: string get_secret_shares(const string& polyName, const char* encryptedPolyHex, const vector<string>& publicKeys, int t, int n){",
          "165:   int err_status = 0;",
          "167:   uint64_t enc_len = 0;",
          "170:   if(!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "171:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "172:   }",
          "",
          "[Removed Lines]",
          "164:   char* errMsg1 = (char*) calloc(1024,1);",
          "169:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "",
          "[Added Lines]",
          "175:   char errMsg1[BUF_LEN];",
          "181:   uint8_t encr_dkg_poly[DKG_MAX_SEALED_LEN];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:   }",
          "183:   string result;",
          "186:   for ( int i = 0; i < n; i++){",
          "187:     uint8_t encrypted_skey[BUF_LEN];",
          "",
          "[Removed Lines]",
          "184:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "197:   char hexEncrKey[2 * BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:     char pubKeyB[129];",
          "197:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "198:     pubKeyB[128] = 0;",
          "200:                    cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "201:     if (err_status != 0){",
          "202:       throw RPCException(-666, errMsg1);",
          "203:     }",
          "205:     result += cur_share;",
          "",
          "[Removed Lines]",
          "199:     get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "",
          "[Added Lines]",
          "212:     if (DEBUG_PRINT) {",
          "213:       spdlog::info(\"pubKeyB is {}\", pub_keyB);",
          "214:     }",
          "216:     if (!is_aes)",
          "217:       get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "219:     else",
          "220:       get_encr_sshare_aes(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "221:                       cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "225:     if (DEBUG_PRINT) {",
          "226:       spdlog::info(\"cur_share is {}\", cur_share);",
          "227:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "232:   }",
          "239:   return result;",
          "240: }",
          "242: bool VerifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex, int t, int n, int ind ){",
          "244:     int err_status = 0;",
          "246:     uint64_t dec_key_len ;",
          "",
          "[Removed Lines]",
          "235:   free(encr_dkg_poly);",
          "236:   free(errMsg1);",
          "237:   free(hexEncrKey);",
          "243:     char* errMsg1 = (char*) calloc(1024,1);",
          "",
          "[Added Lines]",
          "268:     char errMsg1[BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "272:       spdlog::info(\"result is: {}\", result);",
          "273:     }",
          "277:     return result;",
          "278: }",
          "",
          "[Removed Lines]",
          "275:     free(errMsg1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "281:   if (DEBUG_PRINT) {",
          "282:     spdlog::info(\"ENTER CreateBLSShare\");",
          "283:   }",
          "285:   int err_status = 0;",
          "287:   uint64_t dec_key_len ;",
          "",
          "[Removed Lines]",
          "284:   char* errMsg1 = (char*) calloc(1024,1);",
          "",
          "[Added Lines]",
          "311:   char errMsg1[BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "301:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "302:   }",
          "303:   else {",
          "307:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "",
          "[Removed Lines]",
          "304:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "332:     char hexBLSKey[2 * BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311:       spdlog::info(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "312:       spdlog::info(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "313:     }",
          "315:     return true;",
          "316:   }",
          "318: }",
          "320: vector<string> GetBLSPubKey(const char * encryptedKeyHex){",
          "322:     int err_status = 0;",
          "324:     uint64_t dec_key_len ;",
          "",
          "[Removed Lines]",
          "314:     free(hexBLSKey);",
          "321:     char* errMsg1 = (char*) calloc(1024,1);",
          "",
          "[Added Lines]",
          "351:     char errMsg1[BUF_LEN];",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     }",
          "115:   }",
          "118:   s = new SGXWalletServer(*hs,",
          "119:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "",
          "[Removed Lines]",
          "117:   hs = new HttpServer(BASE_PORT, certPath, keyPath, rootCAPath, check_certs, 10);",
          "",
          "[Added Lines]",
          "117:   hs = new HttpServer(BASE_PORT, certPath, keyPath, rootCAPath, check_certs, 64);",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: bool checkHex(const string& hex, const uint32_t sizeInBytes){",
          "74:   if ( hex.length() > sizeInBytes * 2 || hex.length() == 0){",
          "75:     return false;",
          "76:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     spdlog::error(\"public key is too long or zero - \", hex.length());",
          "76:     std::cerr << \"public key length is \" << hex.length() << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   mpz_init(num);",
          "81:   if ( mpz_set_str(num, hex.c_str(), 16) == -1){",
          "82:     mpz_clear(num);",
          "83:     return false;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     spdlog::error(\"public key is not hex {}\", hex);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   domain_parameters curve = domain_parameters_init();",
          "132:   domain_parameters_load_curve(curve, secp256k1);",
          "135:   sgx_read_rand( rand_char, 32);",
          "137:   mpz_t seed;",
          "",
          "[Removed Lines]",
          "134:   unsigned char* rand_char = (unsigned char*)malloc(32);",
          "",
          "[Added Lines]",
          "134:   unsigned char* rand_char= (unsigned char*)malloc(32);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:         return;",
          "505:     }",
          "508: }",
          "510: void gen_dkg_secret (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "514:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "",
          "[Removed Lines]",
          "512:   char* dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "508:    free(sig);",
          "513:   char dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:   }",
          "533: }",
          "535: void decrypt_dkg_secret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t* dec_len){",
          "",
          "[Removed Lines]",
          "532:   free(dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551: void get_secret_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t* dec_len, char* secret_shares,",
          "552:     unsigned _t, unsigned _n){",
          "557:   uint32_t decr_len ;",
          "",
          "[Removed Lines]",
          "554:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "555:   char decrypted_dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571:  calc_secret_shares(decrypted_dkg_secret, secret_shares, _t, _n);",
          "573: }",
          "575: void get_public_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "576:                        unsigned _t, unsigned _n){",
          "577:   char* decrypted_dkg_secret = (char*)malloc(DKG_MAX_SEALED_LEN);",
          "578:   uint32_t decr_len ;",
          "579:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "",
          "[Removed Lines]",
          "572:  free(decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "588:     snprintf(err_string, BUF_LEN,\"t does not match polynomial in db\");",
          "589:     return;",
          "590:   }",
          "591: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:   free(decrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "609:     char* result_str, char * s_shareG2, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "611:   char skey[ECDSA_SKEY_LEN];",
          "615:   uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "612:   char *pub_key_x = (char *)calloc(1024, 1);",
          "613:   char *pub_key_y = (char *)calloc(1024, 1);",
          "",
          "[Added Lines]",
          "616:   char pub_key_x[BUF_LEN];",
          "617:   memset(pub_key_x, 0, BUF_LEN);",
          "618:   char pub_key_y[BUF_LEN];",
          "619:   memset(pub_key_y, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "632:   }",
          "633:   snprintf(err_string, BUF_LEN,\"unsealed random skey is %s\\n\", skey);",
          "636:   gen_session_key(skey, pub_keyB, common_key);",
          "643:   if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0){",
          "",
          "[Removed Lines]",
          "635:   char * common_key = (char *)malloc(65);",
          "640:   char* s_share = (char *)malloc(65);",
          "",
          "[Added Lines]",
          "643:   char * common_key[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "648:   char* s_share[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "653:     return;",
          "654:   }",
          "657:   xor_encrypt(common_key, s_share, cypher);",
          "658:   if (cypher == NULL){",
          "",
          "[Removed Lines]",
          "656:   char* cypher = (char *)malloc(65);",
          "",
          "[Added Lines]",
          "664:   char* cypher[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "678: }",
          "680: void complaint_response(int *err_status, char *err_string, uint8_t *encrypted_DHkey, uint8_t *encrypted_dkg_secret, uint32_t* dec_len,",
          "",
          "[Removed Lines]",
          "673:   free(common_key);",
          "674:   free(pub_key_x);",
          "675:   free(pub_key_y);",
          "676:   free(s_share);",
          "677:   free(cypher);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "693:   uint32_t decr_len;",
          "694:   decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t*)decrypted_dkg_secret, &decr_len);",
          "695:   if (*err_status != 0) {",
          "",
          "[Removed Lines]",
          "692:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "700:   char decrypted_dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "707: }",
          "709: void dkg_verification(int *err_status, char* err_string, const char * public_shares, const char* s_share,",
          "",
          "[Removed Lines]",
          "706:   free(decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "719:     return;",
          "720:   }",
          "724:   encr_sshare[64] = 0;",
          "728:   session_key_recover(skey, s_share, common_key);",
          "730:   if (common_key == NULL){",
          "732:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "",
          "[Removed Lines]",
          "722:   char encr_sshare[65];",
          "723:   strncpy(encr_sshare, s_share, 64);",
          "726:   char common_key[65];",
          "727:   char decr_sshare[65];",
          "729:   common_key[64] = 0;",
          "",
          "[Added Lines]",
          "730:   char encr_sshare[ECDSA_SKEY_LEN];",
          "731:   strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
          "734:   char common_key[ECDSA_SKEY_LEN];",
          "735:   char decr_sshare[ECDSA_SKEY_LEN];",
          "737:   common_key[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1258:   char key[BUF_LEN];",
          "1261:   init();",
          "",
          "[Removed Lines]",
          "1259:   char* sig = (char*) calloc(BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "1264:   char sig[BUF_LEN];// = (char*) calloc(BUF_LEN, 1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1282: void gen_dkg_secret_aes (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "1286:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "",
          "[Removed Lines]",
          "1284:   char* dkg_secret = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "",
          "[Added Lines]",
          "1289:   char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1299:   }",
          "1303: }",
          "1305: void decrypt_dkg_secret_aes (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t* dec_len){",
          "",
          "[Removed Lines]",
          "1302:   free(dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1325:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "1326:     return;",
          "1327:   }",
          "1329: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1333: }",
          "1335: void get_encr_sshare_aes(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t* dec_len,",
          "1336:                      char* result_str, char * s_shareG2, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "1338:   char skey[ECDSA_SKEY_LEN];",
          "1339:   char pub_key_x[BUF_LEN];",
          "1340:   memset(pub_key_x, 0, BUF_LEN);",
          "1341:   char pub_key_y[BUF_LEN];",
          "1342:   memset(pub_key_y, 0, BUF_LEN);",
          "1346:   uint32_t enc_len;",
          "1348:   generate_ecdsa_key_aes(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "1349:   if ( *err_status != 0){",
          "1350:     return;",
          "1351:   }",
          "1354:   int status = AES_decrypt(encrypted_skey, enc_len, skey);",
          "1355:   skey[ECDSA_SKEY_LEN -1] = 0;",
          "1357:   if (status != SGX_SUCCESS) {",
          "1358:     snprintf(err_string, BUF_LEN,\"AES_decrypt failed (in get_encr_sshare_aes)  with status %d\", status);",
          "1360:     return;",
          "1361:   }",
          "1362:   snprintf(err_string, BUF_LEN,\"unsealed random skey is %s\\n\", skey);",
          "1364:   char * common_key[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1365:   gen_session_key(skey, pub_keyB, common_key);",
          "1369:   char* s_share[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1372:   if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0){",
          "1374:     snprintf(err_string, BUF_LEN,\"\\nt does not match poly degree\\n\");",
          "1375:     return;",
          "1376:   }",
          "1377:   snprintf(err_string + 88, BUF_LEN,\"\\nsecret share is %s\", s_share);",
          "1379:   if (calc_secret_shareG2(s_share, s_shareG2) != 0){",
          "1381:     snprintf(err_string, BUF_LEN,\"invalid decr secret share\\n\");",
          "1382:     return;",
          "1383:   }",
          "1385:   char* cypher[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1386:   xor_encrypt(common_key, s_share, cypher);",
          "1387:   if (cypher == NULL){",
          "1389:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "1390:     return;",
          "1391:   }",
          "1394:   strncpy(result_str, cypher, strlen(cypher));",
          "1395:   strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));",
          "1396:   strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));",
          "1409: void get_public_shares_aes(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "1410:                        unsigned _t, unsigned _n){",
          "1411:   char decrypted_dkg_secret[DKG_MAX_SEALED_LEN]; //= (char*)malloc(DKG_MAX_SEALED_LEN);",
          "1413:   decrypt_dkg_secret_aes(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "1414:   if(  *err_status != 0 ){",
          "1415:     snprintf(err_string, BUF_LEN,\"decrypt_dkg_secret failed with status %d\", *err_status);",
          "1416:     return;",
          "1417:   }",
          "1420:   if ( calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0 ){",
          "1422:     snprintf(err_string, BUF_LEN,\"t does not match polynomial in db\");",
          "1423:     return;",
          "1424:   }",
          "1425: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:                               [in, count = 3050] uint8_t* encrypted_poly,",
          "234:                               [user_check] uint64_t* enc_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:         public void get_encr_sshare_aes(",
          "237:                             [user_check]int *err_status,",
          "238:                             [out, count = 1024] char *err_string,",
          "239:                             [out, count = 1024] uint8_t *encrypted_skey,",
          "240:                             [user_check] uint32_t* dec_len,",
          "241:                             [out, count = 193] char* result_str,",
          "242:                             [out, count = 320] char* s_shareG2,",
          "243:                             [in, count = 129] char* pub_keyB,",
          "244:                             uint8_t _t,",
          "245:                             uint8_t _n,",
          "246:                             uint8_t ind);",
          "248:         public void get_public_shares_aes (",
          "249:                           [user_check] int *err_status,",
          "250:                           [out, count = 1024] char* err_string,",
          "251:                           [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "252:                           uint32_t enc_len,",
          "253:                           [out, count = 10000] char* public_shares,",
          "254:                           unsigned _t,",
          "255:                           unsigned _n);",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:           p[\"secretShare\"] = SecretShare;",
          "166:           p[\"n\"] = n;",
          "167:           p[\"t\"] = t;",
          "169:           if (result.isObject())",
          "170:            return result;",
          "171:           else",
          "",
          "[Removed Lines]",
          "168:           Json::Value result = this->CallMethod(\"reateBLSPrivateKey\",p);",
          "",
          "[Added Lines]",
          "168:           Json::Value result = this->CallMethod(\"createBLSPrivateKey\",p);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     }",
          "183: }",
          "",
          "[Removed Lines]",
          "185: TEST_CASE(\"BLS key import\", \"[bls-key-import]\") {",
          "186:     reset_db();",
          "187:     init_all(false, false);",
          "191:     auto result = importBLSKeyShareImpl(TEST_BLS_KEY_SHARE, TEST_BLS_KEY_NAME, 2, 2, 1);",
          "193:     REQUIRE(result[\"status\"] == 0);",
          "195:     REQUIRE(result[\"encryptedKeyShare\"] != \"\");",
          "197: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:   return koef;",
          "373: }",
          "443: TEST_CASE( \"DKG public shares test\", \"[dkg-pub_shares]\" ) {",
          "",
          "[Removed Lines]",
          "377:  TEST_CASE( \"DKG secret shares test\", \"[dkg-s_shares]\" ) {",
          "380:   init_enclave();",
          "381:   libff::init_alt_bn128_params();",
          "383:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "385:   char* errMsg = (char*) calloc(1024,1);",
          "386:   int err_status = 0;",
          "387:   uint32_t enc_len = 0;",
          "389:   unsigned t = 32, n = 32;",
          "391:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, n);",
          "392:   REQUIRE(status == SGX_SUCCESS);",
          "393:   printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg);",
          "394:   printf(\"\\n Length: %d \\n\", enc_len);",
          "396:   for ( int i = 0 ; i < enc_len; i++)",
          "399:   char* errMsg1 = (char*) calloc(1024,1);",
          "401:   char colon = ':';",
          "402:   char* secret_shares = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "403:   uint32_t dec_len = enc_len;",
          "405:   status = get_secret_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, &dec_len, secret_shares, t, n);",
          "406:   REQUIRE(status == SGX_SUCCESS);",
          "407:   printf(\"\\nget_secret_shares status: %d %s \\n\", err_status, errMsg1);",
          "408:   printf(\"secret shares %s \\n\\n\", secret_shares);",
          "410:   vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "412:  char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "413:  status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "414:  REQUIRE(status == SGX_SUCCESS);",
          "417:  signatures::Dkg dkg_obj(t,n);",
          "419:  vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "420:  vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "421:  printf(\"calculated secret length %d : \\n\", s_shares_dkg.size());",
          "422:  for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "423:    libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "424:    mpz_t(sshare);",
          "425:    mpz_init(sshare);",
          "426:    cur_share.as_bigint().to_mpz(sshare);",
          "427:    char arr[mpz_sizeinbase (sshare, 10) + 2];",
          "428:    char* share_str = mpz_get_str(arr, 10, sshare);",
          "429:    printf(\" %s \\n\", share_str);",
          "430:    mpz_clear(sshare);",
          "431:  }",
          "433:  REQUIRE(s_shares == s_shares_dkg);",
          "435:   free(errMsg);",
          "436:   free(errMsg1);",
          "437:   free(encrypted_dkg_secret);",
          "438:   free(secret_shares);",
          "440:   sgx_destroy_enclave(eid);",
          "441: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "548:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "550:   cerr << \"secret share is \" << result << endl;",
          "551: }",
          "553: TEST_CASE( \"DKG verification test\", \"[dkg-verify]\" ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:   sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "587:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "589:   cerr << \"secret share is \" << result << endl;",
          "590: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:   sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "732: #include \"stubclient.h\"",
          "733: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "",
          "[Removed Lines]",
          "721: TEST_CASE( \"pub_bls_key\", \"[pub_bls]\" ) {",
          "722:   init_daemon();",
          "723:   init_enclave();",
          "724:   char *encryptedKeyHex =",
          "725:       \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000813f8390f6228a568e181a4dadb6508e3e66f5247175d65dbd0d8c7fbfa4df45000000fdc044ae0cd79faaf41e8a7abb412790476738a98b5b6ce95fa1a32db5551b0a0d867305f4de558c64fee730a1f62394633c7d4ca65e3a40b7883e89c2801c61918b01c5de8624a52963df6f4de8581bcbdd2f9b69720d4cc764e03a04c7a99314bfdb5d2d55deda2ca40cd691f093fb2ecbae24cdacdd4d5de93189c6dfd6792d7b95bd5e330aec3538e7a85d15793\"; // encryptTestKey();",
          "727:   vector<string> result = GetBLSPubKey(encryptedKeyHex);",
          "729:   sgx_destroy_enclave(eid);",
          "730: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "993:     cout << \"Hello from thread \" << this_thread::get_id() << endl;",
          "994:     HttpClient client(\"http://localhost:1029\");",
          "995:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1000:   Json::Value EthKeys[n];",
          "1001:   Json::Value VerifVects[n];",
          "1002:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "996:   reset_db();",
          "999:   int n = 2, t = 2;",
          "",
          "[Added Lines]",
          "918:     reset_db();",
          "921:   int n = 8, t = 8;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1014:     c.generateDKGPoly(polyName, t);",
          "1015:     poly_names[i] = polyName;",
          "1016:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1017:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "1018:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "1019:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "939:     REQUIRE( VerifVects[i][\"status\"] == 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1022:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1023:     for ( uint8_t k = 0; k < t; k++ ) {",
          "1024:       for (uint8_t j = 0; j < 4; j++) {",
          "1026:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1027:       }",
          "1028:     }",
          "",
          "[Removed Lines]",
          "1025:         string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "",
          "[Added Lines]",
          "948:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1041:   for ( int i = 0; i < n; i++)",
          "1042:     for ( int j = 0; j < n; j++){",
          "1044:         cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1045:         string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192 );",
          "1046:         secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192 );",
          "1048:         k++;",
          "1049:         cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "1052:     }",
          "1053:  }",
          "1055: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "1056:   is_sgx_https = 0;",
          "1057:   init_all( false, false );",
          "1059:   vector<thread> threads;",
          "1061:   for (int i = 0; i < num_threads; i++){",
          "1062:     threads.push_back(thread(SendRPCRequest));",
          "1063:   }",
          "",
          "[Removed Lines]",
          "1043:       if ( i != j ){",
          "1047:         bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "1050:         REQUIRE( res );",
          "1051:       }",
          "1060:   int num_threads = 16;",
          "",
          "[Added Lines]",
          "967:         Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "968:         cout << verif;",
          "969:         bool res = verif[\"result\"].asBool();",
          "974:     }",
          "978:   BLSSigShareSet sigShareSet(t, n);",
          "980:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "982:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "983:   uint64_t binLen;",
          "984:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "985:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "986:   }",
          "988:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "991:   for ( int i = 0; i < t ; i++){",
          "992:     string endName = poly_names[i].substr(4);",
          "993:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "994:     string secretShare = secretShares[i][\"secretShare\"].asString();",
          "996:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "997:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "998:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "1000:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "1001:     REQUIRE(BLSSigShares[i][\"status\"] == 0);",
          "1002:     cerr << i << \" sig share is created \" << endl;",
          "1003:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "1004:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "1005:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "1007:     vector<string> pubKey_vect;",
          "1008:     for ( uint8_t j = 0; j < 4; j++){",
          "1009:         pubKey_vect.push_back(pubBLSKeys[i][\"blsPublicKeyShare\"][j].asString());",
          "1011:     BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "1012:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig) , t, n));",
          "1014:     koefs_pkeys_map[i+1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "1016:   }",
          "1018:   shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1019:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "1020:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "1027:   DEBUG_PRINT = 1;",
          "1032:   int num_threads = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1248:   for (uint8_t i = 0; i < n; i++) {",
          "1249:     EthKeys[i] = c.generateECDSAKey();",
          "1250:     std::string polyName =",
          "1251:         \"POLY:SCHAIN_ID:1:NODE_ID:\" + std::to_string(i) + \":DKG_ID:0\";",
          "1252:     cout << c.generateDKGPoly(polyName, t);",
          "1258:   }",
          "1259: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222:     REQUIRE(EthKeys[i][\"status\"] == 0);",
          "1228:     poly_names[i] = polyName;",
          "1229:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1230:     cout << \"VV \" << i << \" \" << VerifVects[i] << std::endl;",
          "1231:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13ade9bec895d415289b09490cda3fecabacc836",
      "candidate_info": {
        "commit_hash": "13ade9bec895d415289b09490cda3fecabacc836",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/13ade9bec895d415289b09490cda3fecabacc836",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "903:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "905:     sgx_status_t status = sgx_unseal_data(",
          "906:             (const sgx_sealed_data_t *) encryptedPrivateKey, NULL, 0, (uint8_t *) skey, &key_len);",
          "907:     if (status != SGX_SUCCESS) {",
          "909:         snprintf(errString, BUF_LEN, \"sgx_unseal_key failed with status %d\", status);",
          "911:     }",
          "913:     int num_shares = strlen(s_shares) / 192;",
          "919:     for (int i = 0; i < num_shares; i++) {",
          "",
          "[Removed Lines]",
          "910:         return;",
          "915:     mpz_t sum;",
          "916:     mpz_init(sum);",
          "917:     mpz_set_ui(sum, 0);",
          "",
          "[Added Lines]",
          "905:     mpz_t sum;",
          "906:     mpz_init(sum);",
          "907:     mpz_set_ui(sum, 0);",
          "909:     mpz_t q;",
          "910:     mpz_init(q);",
          "911:     mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "913:     mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "915:     mpz_t bls_key;",
          "916:     mpz_init(bls_key);",
          "923:         LOG_ERROR(errString);",
          "924:         goto clean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "940:         if (mpz_set_str(decr_secret_share, decr_sshare, 16) == -1) {",
          "942:             snprintf(errString, BUF_LEN, \"invalid decrypted secret share\");",
          "943:             mpz_clear(decr_secret_share);",
          "946:         }",
          "948:         mpz_addmul_ui(sum, decr_secret_share, 1);",
          "949:         mpz_clear(decr_secret_share);",
          "950:     }",
          "959:     mpz_mod(bls_key, sum, q);",
          "961:     SAFE_CHAR_BUF(key_share, BUF_LEN);",
          "",
          "[Removed Lines]",
          "944:             mpz_clear(sum);",
          "945:             return;",
          "952:     mpz_t q;",
          "953:     mpz_init(q);",
          "954:     mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "956:     mpz_t bls_key;",
          "957:     mpz_init(bls_key);",
          "",
          "[Added Lines]",
          "955:             LOG_ERROR(errString);",
          "957:             goto clean;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "968:     if (status != SGX_SUCCESS) {",
          "970:         snprintf(errString, BUF_LEN, \"seal bls private key failed with status %d \", status);",
          "975:     }",
          "980:     mpz_clear(bls_key);",
          "981:     mpz_clear(sum);",
          "982:     mpz_clear(q);",
          "",
          "[Removed Lines]",
          "971:         mpz_clear(bls_key);",
          "972:         mpz_clear(sum);",
          "973:         mpz_clear(q);",
          "974:         return;",
          "",
          "[Added Lines]",
          "976:         LOG_ERROR(errString);",
          "977:         goto clean;",
          "983:     clean:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1005:     if (status != SGX_SUCCESS) {",
          "1007:         snprintf(errString, BUF_LEN, \"sgx_unseal_data failed with status %d\", status);",
          "1009:     }",
          "1011:     if (calc_bls_public_key(skey_hex, bls_pub_key) != 0) {",
          "1013:         snprintf(errString, BUF_LEN, \"could not calculate bls public key\");",
          "1015:     }",
          "1018: }",
          "1020: void trustedGenerateSEK(int *errStatus, char *errString,",
          "",
          "[Removed Lines]",
          "1008:         return;",
          "1014:         return;",
          "",
          "[Added Lines]",
          "1013:         LOG_ERROR(errString);",
          "1014:         goto clean;",
          "1020:         LOG_ERROR(errString);",
          "1021:         goto clean;",
          "1026:     clean:",
          "1027:     ;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1046:     if (status != SGX_SUCCESS) {",
          "1047:         snprintf(errString, BUF_LEN, \"seal SEK failed\");",
          "1050:     }",
          "1055: }",
          "1057: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "",
          "[Removed Lines]",
          "1049:         return;",
          "",
          "[Added Lines]",
          "1059:         LOG_ERROR(errString);",
          "1060:         goto clean;",
          "1066:     clean:",
          "1067:     ;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1063:     CHECK_STATE(encrypted_SEK);",
          "1066:     SAFE_CHAR_BUF(aes_key_hex, BUF_LEN);",
          "1069:     sgx_status_t status = sgx_unseal_data(",
          "1070:             (const sgx_sealed_data_t *) encrypted_SEK, NULL, 0, aes_key_hex, &encr_len);",
          "1071:     if (status != SGX_SUCCESS) {",
          "1073:         snprintf(errString, BUF_LEN, \"sgx unseal SEK failed with status %d\", status);",
          "1075:     }",
          "1077:     uint64_t len;",
          "1078:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key);",
          "1081: }",
          "1083: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "",
          "[Removed Lines]",
          "1074:         return;",
          "",
          "[Added Lines]",
          "1085:         LOG_ERROR(errString);",
          "1086:         goto clean;",
          "1094:     clean:",
          "1095:     ;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1100:     if (status != SGX_SUCCESS) {",
          "1101:         snprintf(errString, BUF_LEN, \"seal SEK failed with status %d\", status);",
          "1104:     }",
          "1109: }",
          "1111: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "",
          "[Removed Lines]",
          "1103:         return;",
          "",
          "[Added Lines]",
          "1118:         LOG_ERROR(errString);",
          "1119:         goto clean;",
          "1126:     clean:",
          "1127:     ;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1169:     if (stat != 0) {",
          "1170:         snprintf(errString, BUF_LEN, \"ecdsa private key encryption failed\");",
          "1178:     }",
          "",
          "[Removed Lines]",
          "1173:         mpz_clear(skey);",
          "1175:         point_clear(Pkey);",
          "1177:         return;",
          "",
          "[Added Lines]",
          "1190:         LOG_ERROR(errString);",
          "1191:         goto clean;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1182:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
          "1184:     if (stat != 0) {",
          "1193:     }",
          "1197:     mpz_clear(skey);",
          "1199:     point_clear(Pkey);",
          "1200: }",
          "",
          "[Removed Lines]",
          "1185:         snprintf(errString + 19 + strlen(skey_str), BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "1188:         mpz_clear(skey);",
          "1190:         point_clear(Pkey);",
          "1192:         return;",
          "",
          "[Added Lines]",
          "1199:         snprintf(errString, BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "1201:         LOG_ERROR(errString);",
          "1202:         goto clean;",
          "1207:     clean:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1214:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "1216:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "1217:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "1219:     if (status != 0) {",
          "1220:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "1225:     }",
          "1227:     strncpy(errString, skey, 1024);",
          "1231:     if (mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "1232:         snprintf(errString, BUF_LEN, \"wrong string to init private key\");",
          "1239:     }",
          "1244:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "",
          "[Removed Lines]",
          "1224:         return;",
          "1229:     mpz_t privateKeyMpz;",
          "1230:     mpz_init(privateKeyMpz);",
          "1235:         mpz_clear(privateKeyMpz);",
          "1238:         return;",
          "1242:     point Pkey = point_init();",
          "",
          "[Added Lines]",
          "1227:     mpz_t privateKeyMpz;",
          "1228:     mpz_init(privateKeyMpz);",
          "1230:     point Pkey = point_init();",
          "1239:         LOG_ERROR(errString);",
          "1240:         goto clean;",
          "1247:         LOG_ERROR(errString);",
          "1249:         goto clean;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1249:     if (!point_cmp(Pkey, Pkey_test)) {",
          "1250:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "1259:     }",
          "1263:     SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "1264:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "",
          "[Removed Lines]",
          "1253:         mpz_clear(privateKeyMpz);",
          "1255:         point_clear(Pkey);",
          "1256:         point_clear(Pkey_test);",
          "1258:         return;",
          "1261:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "",
          "[Added Lines]",
          "1260:         LOG_ERROR(errString);",
          "1262:         goto clean;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1271:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "1274:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "1275:     n_zeroes = 64 - strlen(arr_y);",
          "1276:     for (int i = 0; i < n_zeroes; i++) {",
          "1277:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "1273:     SAFE_CHAR_BUF(arr_y, mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2);",
          "",
          "[Added Lines]",
          "1275:     SAFE_CHAR_BUF(arr_y, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1283:     mpz_clear(privateKeyMpz);",
          "1285:     point_clear(Pkey);",
          "1286:     point_clear(Pkey_test);",
          "1287: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:     clean:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0e21a53ac32ecf93deb0b8350adc91dfbcdd226",
      "candidate_info": {
        "commit_hash": "f0e21a53ac32ecf93deb0b8350adc91dfbcdd226",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/f0e21a53ac32ecf93deb0b8350adc91dfbcdd226",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/.deps/DKGUtils.Po",
          "secure_enclave/DH_dkg.c",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1512-add-DKG-to-SGX Add create bls key",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/.deps/DKGUtils.Po||secure_enclave/.deps/DKGUtils.Po",
          "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     std::cerr << \"result is \" << result << std::endl;",
          "178:     return result;",
          "179: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: }",
          "181: bool CreateBLSShare( const char * s_shares, const char * encryptedKeyHex){",
          "183:   char* errMsg1 = (char*) calloc(1024,1);",
          "184:   int err_status = 0;",
          "186:   uint64_t dec_key_len ;",
          "187:   uint8_t encr_bls_key[BUF_LEN];",
          "188:   uint8_t encr_key[BUF_LEN];",
          "189:   hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "191:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key);",
          "192:   if ( err_status != 0){",
          "193:      return false;",
          "194:   }",
          "195:   else return true;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: bool VerifyShares(const char* encryptedPolyHex, const char* encr_sshare, const char * encryptedKeyHex,  int t, int n, int ind);",
          "21: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: bool CreateBLSShare( const char * s_shares, const char * encryptedKeyHex);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   try {",
          "328:     std::shared_ptr<std::string> encryptedPolyHex_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "333:     if ( !VerifyShares(encryptedPolyHex_ptr->c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(),  t, n, ind )){",
          "334:       result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "329:     std::string keyName = polyName + \"_\" + std::to_string(ind);",
          "331:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readECDSAKey(\"test_key1\");",
          "",
          "[Added Lines]",
          "331:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readECDSAKey(EthKeyName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:   return result;",
          "346: }",
          "348: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "349:   lock_guard<recursive_mutex> lock(m);",
          "350:   return generateDKGPolyImpl(polyName, t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const Json::Value& SecretShare, int t, int n){",
          "349:   std::cerr << \"CreateBLSPrivateKeyImpl entered\" << std::endl;",
          "351:   Json::Value result;",
          "352:   result[\"status\"] = 0;",
          "353:   result[\"errorMessage\"] = \"\";",
          "355:   try {",
          "357:     if (SecretShare.size() != n){",
          "358:       result[\"errorMessage\"] = \"wrong number of secret shares\";",
          "359:       return result;",
          "360:     }",
          "361:     std::vector<std::string> sshares_vect;",
          "362:     std::cerr << \"sshares are \" << std::endl;",
          "363:     char sshares[192 * n + 1];",
          "364:     for ( int i = 0; i < n ; i++){",
          "365:       sshares_vect.push_back(SecretShare[i].asString());",
          "367:       strncpy(sshares + i * 192, SecretShare[i].asString().c_str(), 192);",
          "368:     }",
          "369:     sshares[192 * n ] = 0;",
          "370:     std::cerr << sshares << std::endl;",
          "371:     std::cerr << \"length is \" << strlen(sshares);",
          "373:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readECDSAKey(EthKeyName);",
          "375:     bool res = CreateBLSShare(sshares, encryptedKeyHex_ptr->c_str());",
          "376:      if ( res){",
          "377:          std::cerr << \"key created \" << std::endl;",
          "378:      }",
          "379:      else {",
          "380:          std::cerr << \"error \" << std::endl;",
          "381:      }",
          "383:   } catch (RPCException &_e) {",
          "384:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "385:     result[\"status\"] = _e.status;",
          "386:     result[\"errorMessage\"] = _e.errString;",
          "388:   }",
          "390:   return result;",
          "391: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:   return DKGVerificationImpl(polyName, EthKeyName, SecretShare, t, n, index);",
          "366: }",
          "369: Json::Value SGXWalletServer::generateECDSAKey(const std::string &_keyName) {",
          "370:   lock_guard<recursive_mutex> lock(m);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413: Json::Value SGXWalletServer::CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const Json::Value& SecretShare, int t, int n){",
          "414:   lock_guard<recursive_mutex> lock(m);",
          "415:   return CreateBLSPrivateKeyImpl(BLSKeyName, EthKeyName, SecretShare, t, n);",
          "416: }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t);",
          "33:     virtual Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t);",
          "34:     virtual Json::Value DKGVerification(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "37: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const Json::Value& SecretShare, int t, int n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t);",
          "61: Json::Value getSecretShareImpl(const std::string& polyName, const std::string& publicKeys, int n, int t);",
          "62: Json::Value DKGVerificationImpl(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "64: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const Json::Value& SecretShare, int t, int n);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:           this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "25:           this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "26:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "27:        }",
          "29:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING,\"SecretShare\",jsonrpc::JSON_ARRAY,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         {",
          "67:             response = this->DKGVerification(request[\"polyName\"].asString(), request[\"EthKeyName\"].asString(), request[\"SecretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "68:         }",
          "69:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "70:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "71:         virtual Json::Value importECDSAKey(const std::string& key, const std::string& keyName) = 0;",
          "72:         virtual Json::Value generateECDSAKey(const std::string& keyName) = 0;",
          "73:         virtual Json::Value getPublicECDSAKey(const std::string& keyName) = 0;",
          "74:         virtual Json::Value ecdsaSignMessageHash(int base, const std::string& keyName, const std::string& messageHash) = 0;",
          "75:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "76:         virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t) = 0;",
          "77:         virtual Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t) = 0;",
          "78:         virtual Json::Value DKGVerification( const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "79: };",
          "81: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         inline virtual void CreateBLSPrivateKeyI(const Json::Value &request, Json::Value &response)",
          "71:         {",
          "72:             response = this->CreateBLSPrivateKey(request[\"BLSKeyName\"].asString(), request[\"EthKeyName\"].asString(), request[\"SecretShare\"],request[\"t\"].asInt(), request[\"n\"].asInt());",
          "73:         }",
          "86:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const Json::Value& SecretShare, int t, int n) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/.deps/DKGUtils.Po||secure_enclave/.deps/DKGUtils.Po": [
          "File: secure_enclave/.deps/DKGUtils.Po -> secure_enclave/.deps/DKGUtils.Po",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  ../sgxwallet_common.h \\",
          "95:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/unistd.h \\",
          "96:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/types.h \\",
          "99: DKGUtils.h:",
          "",
          "[Removed Lines]",
          "97:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdbool.h",
          "",
          "[Added Lines]",
          "97:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdbool.h \\",
          "98:  DH_dkg.h",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/types.h:",
          "291: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdbool.h:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: DH_dkg.h:",
          "",
          "---------------"
        ],
        "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c": [
          "File: secure_enclave/DH_dkg.c -> secure_enclave/DH_dkg.c"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"DKGUtils.h\"",
          "8: #include <../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "9: #include <../trusted_libff/libff/algebra/fields/fp.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <sgx_tgmp.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: #include <cstdio>",
          "16: #include <stdio.h>",
          "20: std::string stringFromFr(libff::alt_bn128_Fr& _el) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"DH_dkg.h\"",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   free(decrypted_dkg_secret);",
          "660: }",
          "",
          "[Removed Lines]",
          "657:   snprintf(err_string, BUF_LEN,\"val is %s\", decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "662: void create_bls_key(int *err_status, char* err_string, const char* s_shares,",
          "663:                       uint8_t* encrypted_key, uint64_t key_len, uint8_t * encr_bls_key){",
          "666:   char skey[ECDSA_SKEY_LEN];",
          "667:   sgx_status_t status = sgx_unseal_data(",
          "668:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t*)skey, &key_len);",
          "669:   if (status != SGX_SUCCESS) {",
          "670:     snprintf(err_string, BUF_LEN,\"sgx_unseal_key failed with status %d\", status);",
          "671:     return;",
          "672:   }",
          "674:   int num_shares = strlen(s_shares)/192;",
          "676:   mpz_t sum;",
          "677:   mpz_init(sum);",
          "678:   mpz_set_ui(sum, 0);",
          "680:   for ( int i = 0; i < num_shares; i++) {",
          "681:     char encr_sshare[65];",
          "682:     strncpy(encr_sshare, s_shares + 192 * i, 64);",
          "683:     encr_sshare[64] = 0;",
          "685:     char s_share[193];",
          "686:     strncpy(s_share, s_share + 192 * i, 192);",
          "687:     s_share[192] = 0;",
          "688:     char common_key[65];",
          "689:     session_key_recover(skey, s_share, common_key);",
          "690:     common_key[64] = 0;",
          "692:     char decr_sshare[65];",
          "693:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "695:     mpz_t decr_secret_share;",
          "696:     mpz_init(decr_secret_share);",
          "697:     mpz_set_str(decr_secret_share, decr_sshare, 16);",
          "699:     mpz_addmul_ui(sum, decr_secret_share, 1);",
          "700:     mpz_clear(decr_secret_share);",
          "701:   }",
          "703:    mpz_t q;",
          "704:    mpz_init(q);",
          "705:    mpz_set_str(q, \"21888242871839275222246405745257275088696311157297823662689037894645226208583\", 10);",
          "707:    mpz_t bls_key;",
          "708:    mpz_init(bls_key);",
          "710:    mpz_mod(bls_key, sum, q);",
          "712:    char arr[mpz_sizeinbase(bls_key, 10) + 2];",
          "713:    char *key = mpz_get_str(arr, 10, bls_key);",
          "715:    uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "717:    status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *)key, sealedLen,(sgx_sealed_data_t*)encr_bls_key);",
          "718:    if( status !=  SGX_SUCCESS) {",
          "719:     snprintf(err_string, BUF_LEN,\"seal bls private key failed\");",
          "720:     return;",
          "721:    }",
          "738:   mpz_clear(bls_key);",
          "739:   mpz_clear(sum);",
          "740: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:                                 unsigned _t,",
          "129:                                 int _ind,",
          "130:                                 [user_check] int* result);",
          "131:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:          public void create_bls_key(",
          "133:                                 [user_check]int *err_status,",
          "134:                                 [out, count = 1024] char* err_string,",
          "135:                                 [in, count = 6145] const char* s_shares,",
          "136:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "137:                                 uint64_t key_len,",
          "138:                                 [out, count = 1024] uint8_t * encr_bls_key);",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         else",
          "120:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "121:     }",
          "137: };",
          "139: #endif //JSONRPC_CPP_STUB_STUBCLIENT_H_",
          "",
          "[Removed Lines]",
          "122:         Json::Value DKGVerification(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "123:         {",
          "124:             Json::Value p;",
          "125:             p[\"EthKeyName\"] = EthKeyName;",
          "126:             p[\"SecretShare\"] = SecretShare;",
          "127:             p[\"index\"] = index;",
          "128:             p[\"n\"] = n;",
          "129:             p[\"polyName\"] = polyName;",
          "130:             p[\"t\"] = t;",
          "131:             Json::Value result = this->CallMethod(\"DKGVerification\",p);",
          "132:             if (result.isObject())",
          "133:                 return result;",
          "134:             else",
          "135:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "136:         }",
          "",
          "[Added Lines]",
          "122:     Json::Value DKGVerification(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "123:     {",
          "124:         Json::Value p;",
          "125:         p[\"EthKeyName\"] = EthKeyName;",
          "126:         p[\"SecretShare\"] = SecretShare;",
          "127:         p[\"index\"] = index;",
          "128:         p[\"n\"] = n;",
          "129:         p[\"polyName\"] = polyName;",
          "130:         p[\"t\"] = t;",
          "131:         Json::Value result = this->CallMethod(\"DKGVerification\",p);",
          "132:         if (result.isObject())",
          "133:           return result;",
          "134:         else",
          "135:           throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "136:     }",
          "137:     Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const Json::Value& SecretShare, int n, int t) throw (jsonrpc::JsonRpcException)",
          "138:     {",
          "139:       Json::Value p;",
          "140:       p[\"BLSKeyName\"] = BLSKeyName;",
          "141:       p[\"EthKeyName\"] = EthKeyName;",
          "142:       p[\"SecretShare\"] = SecretShare;",
          "143:       p[\"n\"] = n;",
          "144:       p[\"t\"] = t;",
          "145:       Json::Value result = this->CallMethod(\"CreateBLSPrivateKey\",p);",
          "146:       if (result.isObject())",
          "147:        return result;",
          "148:       else",
          "149:        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "150:     }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "718:         cout << c.getSecretShare(\"p2\",",
          "719:               \"669aa790e1c5f5199af82ab0b6f1965c382d23a2ebdda581454adba3fd082a30edab62b545f78f1e402ceef7340a0364a7046633d6151fe7e657d8b8a6352378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25e6e\",",
          "720:               2,2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:       std::string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "730:       std::string share = share_big.substr(0, 192);",
          "735:     } catch (JsonRpcException &e) {",
          "736:         cerr << e.what() << endl;",
          "",
          "[Removed Lines]",
          "732:       cout << c.DKGVerification(\"p2\", \"test_key1\", share, 2, 2, 0);",
          "",
          "[Added Lines]",
          "728:       std::string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "734:       Json::Value SecretShare;",
          "735:       SecretShare.append(share_big0);",
          "736:       SecretShare.append(share_big);",
          "738:       cout << c.CreateBLSPrivateKey( \"test_bls_key\",\"test_key1\", SecretShare, 2, 2 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}