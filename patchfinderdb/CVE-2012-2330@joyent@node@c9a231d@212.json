{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f4261276e31e615b32a8bb7c07fc0c177fd3951",
      "candidate_info": {
        "commit_hash": "3f4261276e31e615b32a8bb7c07fc0c177fd3951",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3f4261276e31e615b32a8bb7c07fc0c177fd3951",
        "files": [
          "src/node.cc"
        ],
        "message": "node: don't check return value of unsetenv()\n\nIt returns void on some platforms, notably FreeBSD.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1880:   HandleScope scope;",
          "1881: #ifdef __POSIX__",
          "1882:   String::Utf8Value key(property);",
          "1889: #else",
          "1890:   String::Value key(property);",
          "1891:   WCHAR* key_ptr = reinterpret_cast<WCHAR*>(*key);",
          "",
          "[Removed Lines]",
          "1884:   if (unsetenv(*key) < 0) {",
          "1887:     return scope.Close(Boolean::New(getenv(*key) == NULL));",
          "1888:   };",
          "",
          "[Added Lines]",
          "1883:   if (!getenv(*key)) return False();",
          "1884:   unsetenv(*key); // can't check return value, it's void on some platforms",
          "1885:   return True();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1896:               GetLastError() != ERROR_SUCCESS;",
          "1897:     return scope.Close(Boolean::New(rv));",
          "1898:   }",
          "1899: #endif",
          "1902: }",
          "",
          "[Removed Lines]",
          "1901:   return v8::True();",
          "",
          "[Added Lines]",
          "1896:   return True();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22e23473ea7fd1a083c43aa33fe4d09c1b6bd34e",
      "candidate_info": {
        "commit_hash": "22e23473ea7fd1a083c43aa33fe4d09c1b6bd34e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/22e23473ea7fd1a083c43aa33fe4d09c1b6bd34e",
        "files": [
          "deps/uv/src/unix/udp.c"
        ],
        "message": "uv: upgrade to 16124bb",
        "before_after_code_files": [
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:   }",
          "530: X(multicast_loop, IPPROTO_IP, IP_MULTICAST_LOOP)",
          "532: X(broadcast, SOL_SOCKET, SO_BROADCAST)",
          "535: #undef X",
          "538: int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name, int* namelen) {",
          "539:   socklen_t socklen;",
          "540:   int saved_errno;",
          "",
          "[Removed Lines]",
          "531: X(multicast_ttl, IPPROTO_IP, IP_MULTICAST_TTL)",
          "533: X(ttl, IPPROTO_IP, IP_TTL)",
          "",
          "[Added Lines]",
          "536: static int uv__udp_set_ttl(uv_udp_t* handle, int option, int ttl) {",
          "537: #if __sun",
          "538:   char arg = ttl;",
          "539: #else",
          "540:   int arg = ttl;",
          "541: #endif",
          "543: #if __sun",
          "544:   if (ttl < 0 || ttl > 255) {",
          "545:     uv__set_sys_error(handle->loop, EINVAL);",
          "546:     return -1;",
          "547:   }",
          "548: #endif",
          "550:   if (setsockopt(handle->fd, IPPROTO_IP, option, &arg, sizeof(arg))) {",
          "551:     uv__set_sys_error(handle->loop, errno);",
          "552:     return -1;",
          "553:   }",
          "555:   return 0;",
          "556: }",
          "559: int uv_udp_set_ttl(uv_udp_t* handle, int ttl) {",
          "560:   return uv__udp_set_ttl(handle, IP_TTL, ttl);",
          "561: }",
          "564: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "565:   return uv__udp_set_ttl(handle, IP_MULTICAST_TTL, ttl);",
          "566: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e3ca981556c305830553d006b76d5dcaaf49276",
      "candidate_info": {
        "commit_hash": "5e3ca981556c305830553d006b76d5dcaaf49276",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5e3ca981556c305830553d006b76d5dcaaf49276",
        "files": [
          "lib/querystring.js"
        ],
        "message": "Make QueryString.parse() even faster",
        "before_after_code_files": [
          "lib/querystring.js||liquerystring.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/querystring.js||liquerystring.js": [
          "File: lib/querystring.js -> liquerystring.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     return obj;",
          "176:   }",
          "178:   qs = qs.split(sep);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     qs = qs.slice(0, maxKeys);",
          "183:   }",
          "187:     try {",
          "196:     }",
          "198:     if (!hasOwnProperty(obj, k)) {",
          "",
          "[Removed Lines]",
          "185:   qs.forEach(function(kvp) {",
          "186:     var x = kvp.split(eq), k, v, useQS = false;",
          "188:       if (kvp.match(/\\+/)) { // decodeURIComponent does not decode + to space",
          "189:         throw 'has +';",
          "190:       }",
          "191:       k = decodeURIComponent(x[0]);",
          "192:       v = decodeURIComponent(x.slice(1).join(eq) || '');",
          "193:     } catch (e) {",
          "194:       k = QueryString.unescape(x[0], true);",
          "195:       v = QueryString.unescape(x.slice(1).join(eq), true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:     } else {",
          "203:       obj[k].push(v);",
          "204:     }",
          "207:   return obj;",
          "208: };",
          "",
          "[Removed Lines]",
          "205:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50122fed8ae29c982fa4c806136c4b24dd2de382",
      "candidate_info": {
        "commit_hash": "50122fed8ae29c982fa4c806136c4b24dd2de382",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/50122fed8ae29c982fa4c806136c4b24dd2de382",
        "files": [
          "lib/tls.js",
          "test/simple/test-tls-client-verify.js"
        ],
        "message": "tls: fix 'hostless' tls connection verification\n\nAnd fix last failing tests",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "test/simple/test-tls-client-verify.js||test/simple/test-tls-client-verify.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1208:   var sslcontext = crypto.createCredentials(options);",
          "1210:   convertNPNProtocols(options.NPNProtocols, this);",
          "1212:       pair = new SecurePair(sslcontext, false, true,",
          "1213:                             options.rejectUnauthorized === true ? true : false,",
          "1214:                             {",
          "",
          "[Removed Lines]",
          "1211:   var hostname = options.servername || options.host,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-client-verify.js||test/simple/test-tls-client-verify.js": [
          "File: test/simple/test-tls-client-verify.js -> test/simple/test-tls-client-verify.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: }",
          "28: var testCases =",
          "29:     [{ ca: ['ca1-cert'],",
          "30:        key: 'agent2-key',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: var hosterr = 'Hostname/IP doesn\\'t match certificate\\'s altnames';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     console.error('connecting...');",
          "103:     var client = tls.connect(clientOptions, function() {",
          "108:       server.close();",
          "109:     });",
          "",
          "[Removed Lines]",
          "105:       console.error('expected: ' + ok + ' authed: ' + client.authorized);",
          "107:       assert.equal(ok, client.authorized);",
          "",
          "[Added Lines]",
          "105:       var authorized = client.authorized ||",
          "106:                        client.authorizationError === hosterr;",
          "108:       console.error('expected: ' + ok + ' authed: ' + authorized);",
          "110:       assert.equal(ok, authorized);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf682afb987f15e7522c74453a8f3165f001ca02",
      "candidate_info": {
        "commit_hash": "bf682afb987f15e7522c74453a8f3165f001ca02",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bf682afb987f15e7522c74453a8f3165f001ca02",
        "files": [
          "deps/v8/src/mips/macro-assembler-mips.cc"
        ],
        "message": "MIPS: Fix packed-element.js test on ARM with no snap\n\nPort r11826 (5be3568a)\n\nBUG=\nTEST=\n\nReview URL: https://chromiumcodereview.appspot.com/10559002\nPatch from Akos Palfi <palfia@homejinni.com>.\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@11840 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/mips/macro-assembler-mips.cc||deps/v8/src/mips/macro-assembler-mips.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/mips/macro-assembler-mips.cc||deps/v8/src/mips/macro-assembler-mips.cc": [
          "File: deps/v8/src/mips/macro-assembler-mips.cc -> deps/v8/src/mips/macro-assembler-mips.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4459:                 Context::SlotOffset(Context::JS_ARRAY_MAPS_INDEX)));",
          "4460:   size_t offset = expected_kind * kPointerSize +",
          "4461:       FixedArrayBase::kHeaderSize;",
          "4465:   offset = transitioned_kind * kPointerSize +",
          "",
          "[Removed Lines]",
          "4462:   Branch(no_map_match, ne, map_in_out, Operand(scratch));",
          "",
          "[Added Lines]",
          "4462:   lw(at, FieldMemOperand(scratch, offset));",
          "4463:   Branch(no_map_match, ne, map_in_out, Operand(at));",
          "",
          "---------------"
        ]
      }
    }
  ]
}