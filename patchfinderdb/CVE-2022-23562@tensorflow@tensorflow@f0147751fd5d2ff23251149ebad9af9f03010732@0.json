{
  "cve_id": "CVE-2022-23562",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `Range` suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f0147751fd5d2ff23251149ebad9af9f03010732",
  "patch_info": {
    "commit_hash": "f0147751fd5d2ff23251149ebad9af9f03010732",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f0147751fd5d2ff23251149ebad9af9f03010732",
    "files": [
      "tensorflow/core/kernels/sequence_ops.cc",
      "tensorflow/core/ops/math_ops.cc",
      "tensorflow/python/kernel_tests/array_ops/init_ops_test.py"
    ],
    "message": "Merge pull request #52707 from elfringham:init_ops_test_fix\n\nPiperOrigin-RevId: 416941851\nChange-Id: Iefa5a9b841b053b36f6b105cd82c9d32d5e47850",
    "before_after_code_files": [
      "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
      "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
      "tensorflow/python/kernel_tests/array_ops/init_ops_test.py||tensorflow/python/kernel_tests/array_ops/init_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc": [
      "File: tensorflow/core/kernels/sequence_ops.cc -> tensorflow/core/kernels/sequence_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:           errors::InvalidArgument(",
      "92:               \"Requires start >= limit when delta < 0: \", start, \"/\", limit));",
      "93:     }",
      "101:     TensorShape shape;",
      "102:     OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));",
      "103:     Tensor* out = nullptr;",
      "",
      "[Removed Lines]",
      "94:     int64_t size = 0;",
      "95:     if (std::is_integral<T>::value) {",
      "96:       size = static_cast<int64_t>(",
      "97:           (std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta));",
      "98:     } else {",
      "99:       size = static_cast<int64_t>(std::ceil(std::abs((limit - start) / delta)));",
      "100:     }",
      "",
      "[Added Lines]",
      "94:     auto size_auto = (std::is_integral<T>::value",
      "95:                           ? (Eigen::numext::abs(limit - start) +",
      "96:                              Eigen::numext::abs(delta) - T(1)) /",
      "97:                                 Eigen::numext::abs(delta)",
      "98:                           : Eigen::numext::ceil(",
      "99:                                 Eigen::numext::abs((limit - start) / delta)));",
      "100:     OP_REQUIRES(",
      "101:         context, size_auto <= std::numeric_limits<int64_t>::max(),",
      "102:         errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
      "103:                                 std::numeric_limits<int64_t>::max()));",
      "105:     int64_t size = static_cast<int64_t>(size_auto);",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
      "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1489:                       Eigen::numext::abs(delta))",
      "1490:                    : (Eigen::numext::ceil(",
      "1491:                          Eigen::numext::abs((limit - start) / delta))));",
      "1492:   c->set_output(0, c->Vector(static_cast<int64_t>(size)));",
      "1493:   return Status::OK();",
      "1494: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1494:   if (size > std::numeric_limits<int64_t>::max()) {",
      "1495:     return errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
      "1496:                                    std::numeric_limits<int64_t>::max());",
      "1497:   }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/array_ops/init_ops_test.py||tensorflow/python/kernel_tests/array_ops/init_ops_test.py": [
      "File: tensorflow/python/kernel_tests/array_ops/init_ops_test.py -> tensorflow/python/kernel_tests/array_ops/init_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "548:   def testLargeStarts(self):",
      "549:     # Test case for GitHub issue 46899.",
      "550:     with self.session():",
      "552:         v = math_ops.range(start=-1e+38, limit=1)",
      "553:         self.evaluate(v)",
      "",
      "[Removed Lines]",
      "551:       with self.assertRaises(errors_impl.InvalidArgumentError):",
      "",
      "[Added Lines]",
      "551:       with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55deb9b27620d8c5ef2f61a32520cb035079d0da",
      "candidate_info": {
        "commit_hash": "55deb9b27620d8c5ef2f61a32520cb035079d0da",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/55deb9b27620d8c5ef2f61a32520cb035079d0da",
        "files": [
          "tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/array_ops/init_ops_test.py"
        ],
        "message": "Test for case that would lead to undefined behaviour and throw error if found",
        "before_after_code_files": [
          "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/array_ops/init_ops_test.py||tensorflow/python/kernel_tests/array_ops/init_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/tensorflow/tensorflow/pull/52707"
        ],
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
            "tensorflow/python/kernel_tests/array_ops/init_ops_test.py||tensorflow/python/kernel_tests/array_ops/init_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
            "tensorflow/python/kernel_tests/array_ops/init_ops_test.py||tensorflow/python/kernel_tests/array_ops/init_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc": [
          "File: tensorflow/core/kernels/sequence_ops.cc -> tensorflow/core/kernels/sequence_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:           errors::InvalidArgument(",
          "72:               \"Requires start >= limit when delta < 0: \", start, \"/\", limit));",
          "73:     }",
          "81:     TensorShape shape;",
          "82:     OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));",
          "83:     Tensor* out = nullptr;",
          "",
          "[Removed Lines]",
          "74:     int64_t size = 0;",
          "75:     if (std::is_integral<T>::value) {",
          "76:       size = static_cast<int64_t>(",
          "77:           (std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta));",
          "78:     } else {",
          "79:       size = static_cast<int64_t>(std::ceil(std::abs((limit - start) / delta)));",
          "80:     }",
          "",
          "[Added Lines]",
          "74:     auto size_auto = (std::is_integral<T>::value",
          "75:      ? (Eigen::numext::abs(limit - start) +",
          "76:       Eigen::numext::abs(delta) - T(1)) /",
          "77:       Eigen::numext::abs(delta)",
          "78:      : Eigen::numext::ceil(",
          "79:       Eigen::numext::abs((limit - start) / delta)));",
          "80:     OP_REQUIRES(context, size_auto <= std::numeric_limits<int64_t>::max(),",
          "81:           errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "82:       std::numeric_limits<int64_t>::max()));",
          "84:     int64_t size = static_cast<int64_t>(size_auto);",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1489:                       Eigen::numext::abs(delta))",
          "1490:                    : (Eigen::numext::ceil(",
          "1491:                          Eigen::numext::abs((limit - start) / delta))));",
          "1492:   c->set_output(0, c->Vector(static_cast<int64_t>(size)));",
          "1493:   return Status::OK();",
          "1494: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1494:   if (size > std::numeric_limits<int64_t>::max()) {",
          "1495:     return errors::InvalidArgument(",
          "1496:         \"Requires ((limit - start) / delta) <= \", std::numeric_limits<int64_t>::max());",
          "1497:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/init_ops_test.py||tensorflow/python/kernel_tests/array_ops/init_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/init_ops_test.py -> tensorflow/python/kernel_tests/array_ops/init_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:   def testLargeStarts(self):",
          "549:     # Test case for GitHub issue 46899.",
          "550:     with self.session():",
          "552:         v = math_ops.range(start=-1e+38, limit=1)",
          "553:         self.evaluate(v)",
          "",
          "[Removed Lines]",
          "551:       with self.assertRaises(errors_impl.InvalidArgumentError):",
          "",
          "[Added Lines]",
          "551:       with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e2582d998b48b7567366b4a3542b6b74ef09c2a",
      "candidate_info": {
        "commit_hash": "5e2582d998b48b7567366b4a3542b6b74ef09c2a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5e2582d998b48b7567366b4a3542b6b74ef09c2a",
        "files": [
          "tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/init_ops_test.py"
        ],
        "message": "Merge pull request #52707 from elfringham:init_ops_test_fix\n\nPiperOrigin-RevId: 416941851\nChange-Id: Iefa5a9b841b053b36f6b105cd82c9d32d5e47850",
        "before_after_code_files": [
          "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/init_ops_test.py||tensorflow/python/kernel_tests/init_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc": [
          "File: tensorflow/core/kernels/sequence_ops.cc -> tensorflow/core/kernels/sequence_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:           errors::InvalidArgument(",
          "72:               \"Requires start >= limit when delta < 0: \", start, \"/\", limit));",
          "73:     }",
          "81:     TensorShape shape;",
          "82:     OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));",
          "83:     Tensor* out = nullptr;",
          "",
          "[Removed Lines]",
          "74:     int64_t size = 0;",
          "75:     if (std::is_integral<T>::value) {",
          "76:       size = static_cast<int64>(",
          "77:           (std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta));",
          "78:     } else {",
          "79:       size = static_cast<int64>(std::ceil(std::abs((limit - start) / delta)));",
          "80:     }",
          "",
          "[Added Lines]",
          "74:     auto size_auto = (std::is_integral<T>::value",
          "75:                           ? (Eigen::numext::abs(limit - start) +",
          "76:                              Eigen::numext::abs(delta) - T(1)) /",
          "77:                                 Eigen::numext::abs(delta)",
          "78:                           : Eigen::numext::ceil(",
          "79:                                 Eigen::numext::abs((limit - start) / delta)));",
          "80:     OP_REQUIRES(",
          "81:         context, size_auto <= std::numeric_limits<int64>::max(),",
          "82:         errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "83:                                 std::numeric_limits<int64>::max()));",
          "85:     int64 size = static_cast<int64>(size_auto);",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1481:                       Eigen::numext::abs(delta))",
          "1482:                    : (Eigen::numext::ceil(",
          "1483:                          Eigen::numext::abs((limit - start) / delta))));",
          "1484:   c->set_output(0, c->Vector(static_cast<int64_t>(size)));",
          "1485:   return Status::OK();",
          "1486: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:   if (size > std::numeric_limits<int64_t>::max()) {",
          "1487:     return errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "1488:                                    std::numeric_limits<int64_t>::max());",
          "1489:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/init_ops_test.py||tensorflow/python/kernel_tests/init_ops_test.py": [
          "File: tensorflow/python/kernel_tests/init_ops_test.py -> tensorflow/python/kernel_tests/init_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   def testLargeStarts(self):",
          "554:     # Test case for GitHub issue 46899.",
          "555:     with self.session():",
          "557:         v = math_ops.range(start=-1e+38, limit=1)",
          "558:         self.evaluate(v)",
          "",
          "[Removed Lines]",
          "556:       with self.assertRaises(errors_impl.InvalidArgumentError):",
          "",
          "[Added Lines]",
          "556:       with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e896767551abe2876db91d2b9daeb03df2c0dc3d",
      "candidate_info": {
        "commit_hash": "e896767551abe2876db91d2b9daeb03df2c0dc3d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e896767551abe2876db91d2b9daeb03df2c0dc3d",
        "files": [
          "tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/init_ops_test.py"
        ],
        "message": "Merge pull request #52707 from elfringham:init_ops_test_fix\n\nPiperOrigin-RevId: 416941851\nChange-Id: Iefa5a9b841b053b36f6b105cd82c9d32d5e47850",
        "before_after_code_files": [
          "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/init_ops_test.py||tensorflow/python/kernel_tests/init_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc": [
          "File: tensorflow/core/kernels/sequence_ops.cc -> tensorflow/core/kernels/sequence_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:           errors::InvalidArgument(",
          "72:               \"Requires start >= limit when delta < 0: \", start, \"/\", limit));",
          "73:     }",
          "81:     TensorShape shape;",
          "82:     OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));",
          "83:     Tensor* out = nullptr;",
          "",
          "[Removed Lines]",
          "74:     int64 size = 0;",
          "75:     if (std::is_integral<T>::value) {",
          "76:       size = static_cast<int64>(",
          "77:           (std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta));",
          "78:     } else {",
          "79:       size = static_cast<int64>(std::ceil(std::abs((limit - start) / delta)));",
          "80:     }",
          "",
          "[Added Lines]",
          "74:     auto size_auto = (std::is_integral<T>::value",
          "75:                           ? (Eigen::numext::abs(limit - start) +",
          "76:                              Eigen::numext::abs(delta) - T(1)) /",
          "77:                                 Eigen::numext::abs(delta)",
          "78:                           : Eigen::numext::ceil(",
          "79:                                 Eigen::numext::abs((limit - start) / delta)));",
          "80:     OP_REQUIRES(",
          "81:         context, size_auto <= std::numeric_limits<int64>::max(),",
          "82:         errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "83:                                 std::numeric_limits<int64>::max()));",
          "85:     int64 size = static_cast<int64>(size_auto);",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1481:                       Eigen::numext::abs(delta))",
          "1482:                    : (Eigen::numext::ceil(",
          "1483:                          Eigen::numext::abs((limit - start) / delta))));",
          "1484:   c->set_output(0, c->Vector(static_cast<int64>(size)));",
          "1485:   return Status::OK();",
          "1486: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:   if (size > std::numeric_limits<int64_t>::max()) {",
          "1487:     return errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "1488:                                    std::numeric_limits<int64_t>::max());",
          "1489:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/init_ops_test.py||tensorflow/python/kernel_tests/init_ops_test.py": [
          "File: tensorflow/python/kernel_tests/init_ops_test.py -> tensorflow/python/kernel_tests/init_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:   def testLargeStarts(self):",
          "547:     # Test case for GitHub issue 46899.",
          "548:     with self.session():",
          "550:         v = math_ops.range(start=-1e+38, limit=1)",
          "551:         self.evaluate(v)",
          "",
          "[Removed Lines]",
          "549:       with self.assertRaises(errors_impl.InvalidArgumentError):",
          "",
          "[Added Lines]",
          "549:       with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0539b693d2c6d393f1360b833b1caa27805045d0",
      "candidate_info": {
        "commit_hash": "0539b693d2c6d393f1360b833b1caa27805045d0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0539b693d2c6d393f1360b833b1caa27805045d0",
        "files": [
          "tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/init_ops_test.py"
        ],
        "message": "Merge pull request #52707 from elfringham:init_ops_test_fix\n\nPiperOrigin-RevId: 416941851\nChange-Id: Iefa5a9b841b053b36f6b105cd82c9d32d5e47850",
        "before_after_code_files": [
          "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/init_ops_test.py||tensorflow/python/kernel_tests/init_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sequence_ops.cc||tensorflow/core/kernels/sequence_ops.cc": [
          "File: tensorflow/core/kernels/sequence_ops.cc -> tensorflow/core/kernels/sequence_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:           errors::InvalidArgument(",
          "72:               \"Requires start >= limit when delta < 0: \", start, \"/\", limit));",
          "73:     }",
          "81:     TensorShape shape;",
          "82:     OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));",
          "83:     Tensor* out = nullptr;",
          "",
          "[Removed Lines]",
          "74:     int64 size = 0;",
          "75:     if (std::is_integral<T>::value) {",
          "76:       size = static_cast<int64>(",
          "77:           (std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta));",
          "78:     } else {",
          "79:       size = static_cast<int64>(std::ceil(std::abs((limit - start) / delta)));",
          "80:     }",
          "",
          "[Added Lines]",
          "74:     auto size_auto = (std::is_integral<T>::value",
          "75:                           ? (Eigen::numext::abs(limit - start) +",
          "76:                              Eigen::numext::abs(delta) - T(1)) /",
          "77:                                 Eigen::numext::abs(delta)",
          "78:                           : Eigen::numext::ceil(",
          "79:                                 Eigen::numext::abs((limit - start) / delta)));",
          "80:     OP_REQUIRES(",
          "81:         context, size_auto <= std::numeric_limits<int64>::max(),",
          "82:         errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "83:                                 std::numeric_limits<int64>::max()));",
          "85:     int64 size = static_cast<int64>(size_auto);",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1449:                       Eigen::numext::abs(delta))",
          "1450:                    : (Eigen::numext::ceil(",
          "1451:                          Eigen::numext::abs((limit - start) / delta))));",
          "1452:   c->set_output(0, c->Vector(static_cast<int64>(size)));",
          "1453:   return Status::OK();",
          "1454: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1454:   if (size > std::numeric_limits<int64_t>::max()) {",
          "1455:     return errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "1456:                                    std::numeric_limits<int64_t>::max());",
          "1457:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/init_ops_test.py||tensorflow/python/kernel_tests/init_ops_test.py": [
          "File: tensorflow/python/kernel_tests/init_ops_test.py -> tensorflow/python/kernel_tests/init_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:   def testLargeStarts(self):",
          "547:     # Test case for GitHub issue 46899.",
          "548:     with self.session():",
          "550:         v = math_ops.range(start=-1e+38, limit=1)",
          "551:         self.evaluate(v)",
          "",
          "[Removed Lines]",
          "549:       with self.assertRaises(errors_impl.InvalidArgumentError):",
          "",
          "[Added Lines]",
          "549:       with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "",
          "---------------"
        ]
      }
    }
  ]
}