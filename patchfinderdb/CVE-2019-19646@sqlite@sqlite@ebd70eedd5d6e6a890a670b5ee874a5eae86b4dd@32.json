{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22e6f67c51175cbde19fa108b124f227775bc319",
      "candidate_info": {
        "commit_hash": "22e6f67c51175cbde19fa108b124f227775bc319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22e6f67c51175cbde19fa108b124f227775bc319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Avoid computing a zero offset of a null pointer, which though this is technically harmless, is upsetting to pedantic run-time checkers.\n\nFossilOrigin-Name: 3ce804e99bbef83d49ec309157448a7c1422725606516cef904e6122aadd3922",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4066a34da7bcdcece6c438c27f3a11bc49b8c8373b7e1603f30f6225e2bc800a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:     return pMem->u.i;",
          "591:   }else if( flags & MEM_Real ){",
          "592:     return doubleToInt64(pMem->u.r);",
          "595:     return memIntValue(pMem);",
          "596:   }else{",
          "597:     return 0;",
          "",
          "[Removed Lines]",
          "593:   }else if( flags & (MEM_Str|MEM_Blob) ){",
          "594:     assert( pMem->z || pMem->n==0 );",
          "",
          "[Added Lines]",
          "593:   }else if( (flags & (MEM_Str|MEM_Blob))!=0 && pMem->z!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
      "candidate_info": {
        "commit_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a231b49738d82582d9f4c31da18da90928d6f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(X IS FALSE) BETWEEN FALSE AND TRUE\" does not implie that X is not NULL.  Ticket [fba33c8b1df6a915]\n\nFossilOrigin-Name: 057fb8b1809b8b9c8fff0fd0804153b9644f0545c23c6ddc4758bda3381094b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45ff2b1f2693bb0231a864a511bb82cf2a5945ab3d806a5bbaf1517ecb287883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4999:       assert( pList!=0 );",
          "5000:       assert( pList->nExpr==2 );",
          "5001:       if( seenNot ) return 0;",
          "5004:       ){",
          "5005:         return 1;",
          "5006:       }",
          "5008:     }",
          "5009:     case TK_EQ:",
          "5010:     case TK_NE:",
          "",
          "[Removed Lines]",
          "5002:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, seenNot)",
          "5003:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, seenNot)",
          "5007:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "5005:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, 1)",
          "5006:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, 1)",
          "5010:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: #",
          "443: do_execsql_test index6-15.1 {",
          "444:   DROP TABLE t0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: # Ticket https://www.sqlite.org/src/info/fba33c8b1df6a915",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:   CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
          "448:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE;",
          "449: } {1}",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: do_execsql_test index6-15.2 {",
          "452:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) BETWEEN FALSE AND TRUE;",
          "453: } {1}",
          "454: do_execsql_test index6-15.3 {",
          "455:   SELECT 1 FROM t0 WHERE TRUE BETWEEN (t0.c0 IS FALSE) AND TRUE;",
          "456: } {1}",
          "457: do_execsql_test index6-15.4 {",
          "458:   SELECT 1 FROM t0 WHERE FALSE BETWEEN FALSE AND (t0.c0 IS FALSE);",
          "459: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
      "candidate_info": {
        "commit_hash": "e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the writefile() SQL function implemented by ext/misc/fileio.c such that any directories created have standard umask permissions, not permissions of the file that is to be written.\n\nFossilOrigin-Name: f11c89595dc65f89be6df62830c8cddd3933acfd4baaecd348ecd99e71db5831",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: static int makeDirectory(",
          "305: ){",
          "306:   char *zCopy = sqlite3_mprintf(\"%s\", zFile);",
          "307:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "303:   const char *zFile,",
          "304:   mode_t mode",
          "",
          "[Added Lines]",
          "304:   const char *zFile",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:       rc2 = fileStat(zCopy, &sStat);",
          "324:       if( rc2!=0 ){",
          "326:       }else{",
          "327:         if( !S_ISDIR(sStat.st_mode) ) rc = SQLITE_ERROR;",
          "328:       }",
          "",
          "[Removed Lines]",
          "325:         if( mkdir(zCopy, mode & 0777) ) rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "325:         if( mkdir(zCopy, 0777) ) rc = SQLITE_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:   res = writeFile(context, zFile, argv[1], mode, mtime);",
          "482:   if( res==1 && errno==ENOENT ){",
          "484:       res = writeFile(context, zFile, argv[1], mode, mtime);",
          "485:     }",
          "486:   }",
          "",
          "[Removed Lines]",
          "483:     if( makeDirectory(zFile, mode)==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "483:     if( makeDirectory(zFile)==SQLITE_OK ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 191a023ae708490eca61b3a42a3df41bb6709079f3905881abb82ebd46182607",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
      "candidate_info": {
        "commit_hash": "4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add casts to shell.c.in to avoid warnings on systems where size_t is 32 bits.\n\nFossilOrigin-Name: fe014288ac03cdf0dc5410b7d45cad4768759b52746c0a22bce2fc03779c5d5a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e66458592d40fbd96ea5f21339573110ca1cfe328238a020c9420a87d35dd72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   }",
          "1257:   sz = sqlite3_value_bytes(argv[0]);",
          "1258:   if( bBin ){",
          "1260:   }else{",
          "1261:     const char *z = (const char*)sqlite3_value_text(argv[0]);",
          "1263:     if( z && strstr(z,\"\\r\\n\")!=0 ) hasCRNL = 1;",
          "1265:   }",
          "1266:   fclose(f);",
          "1267:   f = 0;",
          "",
          "[Removed Lines]",
          "1259:     x = fwrite(sqlite3_value_blob(argv[0]), 1, sz, f);",
          "1264:     x = fwrite(sqlite3_value_text(argv[0]), 1, sz, f);",
          "",
          "[Added Lines]",
          "1259:     x = fwrite(sqlite3_value_blob(argv[0]), 1, (size_t)sz, f);",
          "1264:     x = fwrite(sqlite3_value_text(argv[0]), 1, (size_t)sz, f);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1294:     sqlite3_result_error_nomem(context);",
          "1295:     goto edit_func_end;",
          "1296:   }",
          "1298:   fclose(f);",
          "1299:   f = 0;",
          "1300:   if( x!=sz ){",
          "",
          "[Removed Lines]",
          "1297:   x = fread(p, 1, sz, f);",
          "",
          "[Added Lines]",
          "1297:   x = fread(p, 1, (size_t)sz, f);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb0e04f9295fa954559b5893484b0e23c48d63a6",
      "candidate_info": {
        "commit_hash": "cb0e04f9295fa954559b5893484b0e23c48d63a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb0e04f9295fa954559b5893484b0e23c48d63a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzz4.test"
        ],
        "message": "Fix another problem found by Matthew Denton's new fuzzer.\n\nFossilOrigin-Name: 2b690dbdffe144bd69ca0aa291c230faf3d9d73f7a2985d50f016fe54003f9a9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/fuzz4.test||test/fuzz4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c7dab85535ac42c021977dbd4a39cef5a72e3d9dccff1c5ca5570a1780516cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   while( p ){",
          "142:     int op = p->op;",
          "143:     if( p->flags & EP_Generic ) break;",
          "146:      && p->y.pTab!=0",
          "147:     ){",
          "",
          "[Removed Lines]",
          "144:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN",
          "145:           || op==TK_REGISTER || op==TK_TRIGGER)",
          "",
          "[Added Lines]",
          "144:     if( op==TK_REGISTER ) op = p->op2;",
          "145:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN || op==TK_TRIGGER)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:       p = p->pLeft;",
          "159:       continue;",
          "160:     }",
          "162:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "163:       break;",
          "164:     }",
          "",
          "[Removed Lines]",
          "161:     if( op==TK_COLLATE || (op==TK_REGISTER && p->op2==TK_COLLATE) ){",
          "",
          "[Added Lines]",
          "161:     if( op==TK_COLLATE ){",
          "",
          "---------------"
        ],
        "test/fuzz4.test||test/fuzz4.test": [
          "File: test/fuzz4.test -> test/fuzz4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-12",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases found by Matthew Denton's fuzzer at Chrome.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "19: do_execsql_test fuzz4-100 {",
          "20:   CREATE TABLE Table0 (Col0  NOT NULL DEFAULT (CURRENT_TIME IS 1 > 1));",
          "21:   INSERT OR REPLACE INTO Table0 DEFAULT VALUES ;",
          "22:   SELECT * FROM Table0;",
          "23: } {0}",
          "25: do_execsql_test fuzz4-110 {",
          "26:   CREATE TABLE Table1(",
          "27:     Col0 TEXT DEFAULT (CASE WHEN 1 IS 3530822107858468864",
          "28:                             THEN 1 ELSE quote(1) IS 3530822107858468864 END)",
          "29:   );",
          "30:   INSERT INTO Table1 DEFAULT VALUES;",
          "31:   SELECT * FROM Table1;",
          "32: } {0}",
          "34: do_execsql_test fuzz4-200 {",
          "35:   CREATE TABLE Table2a(",
          "36:      Col0  NOT NULL   DEFAULT (CURRENT_TIME IS 1  IS NOT 1  > 1)",
          "37:   );",
          "38:   INSERT OR REPLACE INTO Table2a DEFAULT VALUES;",
          "39:   SELECT * FROM Table2a;",
          "40: } {0}",
          "42: do_execsql_test fuzz4-210 {",
          "43:   CREATE TABLE Table2b (Col0  NOT NULL  DEFAULT (CURRENT_TIME  IS NOT FALSE)) ;",
          "44:   INSERT OR REPLACE INTO Table2b DEFAULT VALUES ;",
          "45:   SELECT * FROM Table2b;",
          "46: } {1}",
          "48: do_execsql_test fuzz4-300 {",
          "49:   CREATE TABLE Table3 (Col0 DEFAULT (CURRENT_TIMESTAMP BETWEEN 1 AND 1));",
          "50:   INSERT INTO Table3 DEFAULT VALUES;",
          "51:   SELECT * FROM Table3;",
          "52: } {0}",
          "54: do_execsql_test fuzz4-400 {",
          "55:   CREATE TABLE Table4 (Col0 DEFAULT (1 BETWEEN CURRENT_TIMESTAMP AND 1));",
          "56:   INSERT INTO Table4 DEFAULT VALUES;",
          "57:   SELECT * FROM Table4;",
          "58: } {0}",
          "60: do_execsql_test fuzz4-500 {",
          "61:   CREATE TABLE Table5 (Col0 DEFAULT (1 BETWEEN 1 AND CURRENT_TIMESTAMP));",
          "62:   INSERT INTO Table5 DEFAULT VALUES;",
          "63:   SELECT * FROM Table5;",
          "64: } {1}",
          "66: do_execsql_test fuzz4-600 {",
          "67:   CREATE TEMPORARY TABLE Table6(",
          "68:     Col0 DEFAULT (CASE x'5d' WHEN 1 THEN",
          "69:         CASE CURRENT_TIMESTAMP WHEN 1 THEN 1 ELSE 1 END",
          "70:         ELSE CASE WHEN 1 THEN FALSE END  END )",
          "71:   );",
          "72:   INSERT INTO temp.Table6 DEFAULT VALUES ;",
          "73:   SELECT * FROM Table6;",
          "74: } {0}",
          "75: do_execsql_test fuzz4-610 {",
          "76:   WITH TableX AS (SELECT DISTINCT * ORDER BY 1  , 1 COLLATE RTRIM)",
          "77:       DELETE FROM Table6  WHERE Col0 || +8388608  ;",
          "78:   SELECT * FROM Table6;",
          "79: } {}",
          "82: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}