{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b12bcfd35410b77d16e08197a823120c740ddac",
      "candidate_info": {
        "commit_hash": "1b12bcfd35410b77d16e08197a823120c740ddac",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1b12bcfd35410b77d16e08197a823120c740ddac",
        "files": [
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "ServerDataChecker.cpp",
          "ServerDataChecker.h",
          "ServerInit.cpp",
          "abstractstubserver.h",
          "secure_enclave/BLSEnclave.cpp",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h",
          "spec.json",
          "stubclient.h",
          "testw.cpp",
          "trusted_libff/libff/algebra/fields/bigint.hpp"
        ],
        "message": "SKALE-1795 GetPublicBLSKey fixed",
        "before_after_code_files": [
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerDataChecker.h||ServerDataChecker.h",
          "ServerInit.cpp||ServerInit.cpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp",
          "trusted_libff/libff/algebrfields/bigint.hpp||trusted_libff/libff/algebra/fields/bigint.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "168:   printf(\"---: %s\\n\", signature);",
          "",
          "[Added Lines]",
          "168:   printf(\"sig is: %s\\n\", signature);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <memory>",
          "11: #include \"SGXWalletServer.hpp\"",
          "13: #include <../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "14: #include <../trusted_libff/libff/algebra/fields/fp.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"RPCException.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     uint32_t dec_len;",
          "130:     char cur_share[193];",
          "131:     std::string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "132:     std::cerr << \"pub_keyB is \" << pub_keyB << std::endl;",
          "133:     char pubKeyB[129];",
          "134:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "135:     pubKeyB[128] = 0;",
          "136:     get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "139:     result += cur_share;",
          "141:     uint32_t enc_len = BUF_LEN;",
          "142:     carray2Hex(encrypted_skey, enc_len, hexEncrKey);",
          "145:     std::string name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "148:     std::cerr << errMsg1 << std::endl << std::endl;",
          "",
          "[Removed Lines]",
          "137:                    cur_share, pubKeyB, t, n, i + 1 );",
          "",
          "[Added Lines]",
          "132:     char s_shareG2[320];",
          "139:                    cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "148:     std::cerr << \"name to write to db is \" << name << std::endl;",
          "149:     std::cerr << \"hexEncrKey: \" << hexEncrKey << std::endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   uint8_t encr_bls_key[BUF_LEN];",
          "198:   uint8_t encr_key[BUF_LEN];",
          "199:   hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "204:   std::cerr << \"er msg is \" << errMsg1 << std::endl;",
          "205:   if ( err_status != 0){",
          "",
          "[Removed Lines]",
          "202:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key);",
          "",
          "[Added Lines]",
          "205:   uint32_t enc_bls_len = 0;",
          "207:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:   }",
          "208:   else {",
          "209:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "213:     free(hexBLSKey);",
          "214:     return true;",
          "215:   }",
          "217: }",
          "220:     char* errMsg1 = (char*) calloc(1024,1);",
          "221:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "210:     uint32_t enc_len = BUF_LEN;",
          "211:     carray2Hex(encr_bls_key, enc_len, hexBLSKey);",
          "212:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "219: std::string GetBLSPubKey(const char * encryptedKeyHex){",
          "",
          "[Added Lines]",
          "216:       std::cerr << \"enc_bls_len \" << enc_bls_len << std::endl;",
          "217:       carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "218:       writeDataToDB(BLSKeyName, hexBLSKey);",
          "219:     std::cerr << \"hexBLSKey length is \" << strlen(hexBLSKey) << std::endl;",
          "220:     std::cerr << \"bls key \" << BLSKeyName << \" is \" << hexBLSKey << std::endl;",
          "227: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:     uint8_t encr_bls_key[BUF_LEN];",
          "225:     uint8_t encr_key[BUF_LEN];",
          "226:     hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "228:     char pub_key[320];",
          "229:     get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "232: }",
          "234: std::pair<std::string, std::string> response_to_complaint(const std::string& polyName, const char* encryptedPolyHex, int n, int t, int ind){",
          "",
          "[Removed Lines]",
          "231:     std::string result = pub_key;",
          "",
          "[Added Lines]",
          "239:     std::cerr << \"dec_key_len is \" << dec_key_len << std::endl;",
          "241:     std::cerr << \"errMsg1 is \" << errMsg1 << std::endl;",
          "242:     std::vector<std::string> pub_key_vect = SplitString(pub_key, ':');",
          "243:     std::cerr << \"pub key is\" << std::endl;",
          "244:     for ( int i = 0; i < 4; i++)",
          "245:       std::cerr << pub_key_vect.at(i) << std::endl;",
          "246:     return pub_key_vect;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "242:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "246:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "247:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "249:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "244:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "",
          "[Added Lines]",
          "263:   std::cerr << \"encr DH key is \" << hexEncrKey_ptr << std::endl;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "256:   uint32_t dec_len;",
          "257:   char decrpyted_DHkey[ECDSA_SKEY_LEN];",
          "260:   status = complaint_response(eid, &err_status, errMsg1, encrypted_DHkey, encr_dkg_poly, &dec_len,",
          "263:   std::pair<std::string, std::string> result;",
          "264:   result.first = decrpyted_DHkey;",
          "265:   result.second = s_shareG2;",
          "274:   free(encr_dkg_poly);",
          "275:   free(errMsg1);",
          "276:   free(hexEncrKey);",
          "278:   return result;",
          "",
          "[Removed Lines]",
          "258:   char s_shareG2[257];",
          "261:                        decrpyted_DHkey, s_shareG2, t, n, ind);",
          "279: }",
          "",
          "[Added Lines]",
          "274:   char s_shareG2[320];//[257];",
          "277:                       decrpyted_DHkey, s_shareG2, t, n, ind);",
          "283:   std::cerr << errMsg1 << std::endl << std::endl;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "29: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "25: std::string GetBLSPubKey(const char * encryptedKeyHex);",
          "",
          "[Added Lines]",
          "25: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     try {",
          "119:     } catch (RPCException _e) {",
          "120:         result[\"status\"] = _e.status;",
          "121:         result[\"errorMessage\"] = _e.errString;",
          "",
          "[Removed Lines]",
          "118:         value = readKeyShare(keyShareName);",
          "",
          "[Added Lines]",
          "118:         value = readFromDb(keyShareName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:             throw RPCException(UNKNOWN_ERROR, \"\");",
          "175:         }",
          "179:         writeDataToDB(keyName, keys.at(0));",
          "",
          "[Removed Lines]",
          "177:         std::string keyName = \"tmp_NEK:\" + keys.at(2);",
          "",
          "[Added Lines]",
          "177:         std::cerr << \"encr key length is\" << keys.at(0).length() << std::endl;",
          "178:         std::string keyName = \"NEK:\" + keys.at(2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n){",
          "410:   std::cerr << \"CreateBLSPrivateKeyImpl entered\" << std::endl;",
          "414:   Json::Value result;",
          "415:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "412:   std::cerr << \" enter DKGVerificationImpl\" << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "422:       return result;",
          "423:     }",
          "424:     std::vector<std::string> sshares_vect;",
          "426:     char sshares[192 * n + 1];",
          "427:     for ( int i = 0; i < n ; i++){",
          "428:       std::string cur_share = SecretShare.substr(192*i, 192*i + 192);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:     std::cerr << \"sshares are \" << SecretShare << std::endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "470:     try {",
          "471:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName, \"\");",
          "475:     } catch (RPCException &_e) {",
          "476:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Removed Lines]",
          "472:       std::string public_key = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "473:       result[\"BLSPublicKeyShare\"] = public_key;",
          "",
          "[Added Lines]",
          "472:       std::cerr << \"encr_bls_key_share is \" << *encryptedKeyHex_ptr << std::endl;",
          "473:       std::cerr << \"length is \" << encryptedKeyHex_ptr->length()<< std::endl;",
          "474:       std::vector<std::string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "475:       for ( uint8_t i = 0; i < 4; i++) {",
          "476:         result[\"BLSPublicKeyShare\"][i] = public_key_vect.at(i);",
          "477:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "487:   result[\"errorMessage\"] = \"\";",
          "488:   try {",
          "489:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "490:     std::pair<std::string, std::string> response = response_to_complaint(polyName, encr_poly_ptr->c_str(), n, t, ind);",
          "492:     result[\"share*G2\"] = response.second;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     std::cerr << \"encr_poly is \" << *encr_poly_ptr << std::endl;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "622:     auto key = \"BLSKEYSHARE:\" + _keyShareName;",
          "624:     if (levelDb->readString(_keyShareName) != nullptr) {",
          "626:     }",
          "628:     levelDb->writeString(key, value);",
          "",
          "[Removed Lines]",
          "625:         throw new RPCException(KEY_SHARE_ALREADY_EXISTS, \"Key share with this name already exists\");",
          "",
          "[Added Lines]",
          "630:         throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Key share with this name already exists\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "648:     auto key = \"ECDSAKEY:\" + _keyName;",
          "650:     if (levelDb->readString(_keyName) != nullptr) {",
          "652:     }",
          "654:     levelDb->writeString(key, value);",
          "",
          "[Removed Lines]",
          "651:         throw new RPCException(KEY_SHARE_ALREADY_EXISTS, \"Key with this name already exists\");",
          "",
          "[Added Lines]",
          "656:         throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Key with this name already exists\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664:   auto key = \"DKGPoly:\" + _polyName;",
          "666:   if (levelDb->readString(_polyName) != nullptr) {",
          "668:   }",
          "670:   levelDb->writeString(key, value);",
          "",
          "[Removed Lines]",
          "667:     throw new RPCException(KEY_SHARE_ALREADY_EXISTS, \"Poly with this name already exists\");",
          "",
          "[Added Lines]",
          "672:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Poly with this name already exists\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "682:   if (levelDb->readString(Name) != nullptr) {",
          "683:     std::cerr << \"name \" << Name << \" already exists\" << std::endl;",
          "685:   }",
          "687:   levelDb->writeString(key, value);",
          "",
          "[Removed Lines]",
          "684:     throw new RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "",
          "[Added Lines]",
          "689:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: std::vector<std::string> BLSutils::SplitString(std::string& str, const std::string& delim){",
          "6:     std::vector<std::string> tokens;",
          "7:     size_t prev = 0, pos = 0;",
          "8:     do {",
          "9:         pos = str.find(delim, prev);",
          "10:         if (pos == std::string::npos) pos = str.length();",
          "11:         std::string token = str.substr(prev, pos-prev);",
          "12:         if (!token.empty()) tokens.push_back(token);",
          "13:         prev = pos + delim.length();",
          "14:     } while (pos < str.length() && prev < str.length());",
          "16:     return tokens;",
          "17: }",
          "19: bool checkPolyName (std::string polyName){",
          "21: }",
          "",
          "---------------"
        ],
        "ServerDataChecker.h||ServerDataChecker.h": [
          "File: ServerDataChecker.h -> ServerDataChecker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef SGXD_SERVERDATACHECKER_H",
          "6: #define SGXD_SERVERDATACHECKER_H",
          "8: #endif // SGXD_SERVERDATACHECKER_H",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"BLSCrypto.h\"",
          "31: #include \"ServerInit.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <iostream>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     }",
          "64: #endif",
          "66:     status = sgx_create_enclave_search(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token,",
          "67:                                        &updated, &eid, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     std::cerr << \"SGX_DEBUG_FLAG = \" << SGX_DEBUG_FLAG << std::endl;",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"GetBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::GetBLSPublicKeyShareI);",
          "33:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "34:         {",
          "",
          "[Removed Lines]",
          "31:        }",
          "",
          "[Added Lines]",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"ComplaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, \"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::ComplaintResponseI);",
          "32:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         }",
          "37:         inline virtual void blsSignMessageHashI(const Json::Value &request, Json::Value &response)",
          "38:         {",
          "40:         }",
          "41:         inline virtual void importECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "42:         {",
          "",
          "[Removed Lines]",
          "39:             response = this->blsSignMessageHash(request[\"keyShareName\"].asString(), request[\"messageHash\"].asString(), request[\"n\"].asInt(), request[\"signerIndex\"].asInt(), request[\"t\"].asInt());",
          "",
          "[Added Lines]",
          "40:             response = this->blsSignMessageHash(request[\"keyShareName\"].asString(), request[\"messageHash\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt(), request[\"signerIndex\"].asInt());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:         {",
          "84:           response = this->GetBLSPublicKeyShare(request[\"BLSKeyName\"].asString());",
          "85:         }",
          "87:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "88:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         inline virtual void ComplaintResponseI(const Json::Value &request, Json::Value &response)",
          "88:         {",
          "89:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt(),request[\"ind\"].asInt());",
          "90:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:         virtual Json::Value DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "99:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "100:         virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) = 0;",
          "101: };",
          "103: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:         virtual Json::Value ComplaintResponse(const std::string& polyName, int n, int t, int ind) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp": [
          "File: secure_enclave/BLSEnclave.cpp -> secure_enclave/BLSEnclave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: }",
          "67: }",
          "",
          "[Removed Lines]",
          "64: libff::alt_bn128_Fr *keyFromString(const char *_keyString) {",
          "66:     return new libff::alt_bn128_Fr(_keyString);",
          "",
          "[Added Lines]",
          "64: libff::alt_bn128_Fr *keyFromString(const char *_keyStringHex) {",
          "65:     mpz_t skey;",
          "66:     mpz_init(skey);",
          "67:     mpz_set_str(skey, _keyStringHex, 16);",
          "69:     char skey_dec[mpz_sizeinbase (skey, 10) + 2];",
          "70:     char * skey_str = mpz_get_str(skey_dec, 10, skey);",
          "72:     return new libff::alt_bn128_Fr(skey_dec);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: libff::alt_bn128_Fr PolynomialValue(const std::vector<libff::alt_bn128_Fr>& pol, libff::alt_bn128_Fr point, unsigned _t) {",
          "107:   libff::alt_bn128_Fr value = libff::alt_bn128_Fr::zero();",
          "109:   libff::alt_bn128_Fr pow = libff::alt_bn128_Fr::one();",
          "116:   }",
          "118:   return value;",
          "",
          "[Removed Lines]",
          "110:   for (size_t i = 0; i < _t; ++i) {",
          "111:     if (i == _t - 1 && pol[i] == libff::alt_bn128_Fr::zero()) {",
          "113:     }",
          "114:     value += pol[i] * pow;",
          "115:     pow *= point;",
          "",
          "[Added Lines]",
          "111:   for (unsigned i = 0; i < pol.size(); ++i) {",
          "115:      value += pol[i] * pow;",
          "116:      pow *= point;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: }",
          "153:                                             unsigned _t, unsigned ind){",
          "154:   libff::init_alt_bn128_params();",
          "155:   char symbol = ':';",
          "156:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "158:   libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);",
          "",
          "[Removed Lines]",
          "152: void calc_secret_shareG2(const char* decrypted_koefs, char * s_shareG2,",
          "",
          "[Added Lines]",
          "153: void calc_secret_shareG2_old(const char* decrypted_koefs, char * s_shareG2,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   std::string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "165: }",
          "167: void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "",
          "[Removed Lines]",
          "164:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length());",
          "",
          "[Added Lines]",
          "170:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "172: }",
          "174: void calc_secret_shareG2(const char* s_share, char * s_shareG2){",
          "175:   libff::init_alt_bn128_params();",
          "177:   mpz_t share;",
          "178:   mpz_init(share);",
          "179:   mpz_set_str(share, s_share, 16);",
          "181:   char arr[mpz_sizeinbase (share, 10) + 2];",
          "182:   char * share_str = mpz_get_str(arr, 10, share);",
          "184:   libff::alt_bn128_Fr secret_share(share_str);",
          "186:   libff::alt_bn128_G2 secret_shareG2 = secret_share * libff::alt_bn128_G2::one();",
          "188:   std::string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "190:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274: }",
          "279:   libff::alt_bn128_G2 public_key = bls_skey * libff::alt_bn128_G2::one();",
          "280:   public_key.to_affine_coordinates();",
          "",
          "[Removed Lines]",
          "276: void calc_bls_public_key(char* skey, char* pub_key){",
          "277:   libff::alt_bn128_Fr bls_skey(skey);",
          "",
          "[Added Lines]",
          "297: void calc_bls_public_key(char* skey_hex, char* pub_key){",
          "298:   libff::init_alt_bn128_params();",
          "300:   mpz_t skey;",
          "301:   mpz_init(skey);",
          "302:   mpz_set_str(skey, skey_hex, 16);",
          "304:   char skey_dec[mpz_sizeinbase (skey, 10) + 2];",
          "305:   char * skey_str = mpz_get_str(skey_dec, 10, skey);",
          "308:   libff::alt_bn128_Fr bls_skey(skey_dec);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h": [
          "File: secure_enclave/DKGUtils.h -> secure_enclave/DKGUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: EXTERNC void calc_bls_public_key(char* skey, char* pub_key);",
          "32:                                  unsigned _t, unsigned ind);",
          "33: #endif //SGXD_DKGUTILS_H",
          "",
          "[Removed Lines]",
          "31: EXTERNC void calc_secret_shareG2(const char* public_shares, char * s_shareG2,",
          "",
          "[Added Lines]",
          "31: EXTERNC void calc_secret_shareG2_old(const char* public_shares, char * s_shareG2,",
          "34: EXTERNC void calc_secret_shareG2(const char* s_share, char * s_shareG2);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:         return;",
          "346:     }",
          "351:         return;",
          "352:     }",
          "",
          "[Removed Lines]",
          "349:     if (decLen != MAX_KEY_LENGTH) {",
          "350:         snprintf(err_string, BUF_LEN, \"decLen != MAX_KEY_LENGTH\");",
          "",
          "[Added Lines]",
          "349:     if (decLen > MAX_KEY_LENGTH) {",
          "350:         snprintf(err_string, BUF_LEN, \"wrong decLen\");//\"decLen != MAX_KEY_LENGTH\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     return;",
          "",
          "[Removed Lines]",
          "367:     for (int i = keyLen; i < MAX_KEY_LENGTH; i++) {",
          "368:         if (key[i] != 0) {",
          "369:             snprintf(err_string, BUF_LEN, \"Unpadded key\");",
          "370:             return;",
          "371:         }",
          "372:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:     decrypt_key(err_status, err_string, encrypted_key, enc_len, key);",
          "394:     if (*err_status != 0) {",
          "395:         return;",
          "396:     }",
          "398:     enclave_sign(key, _hashX, _hashY, sig);",
          "400:     strncpy(signature, sig, BUF_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:         strncpy(signature, err_string, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:       (const sgx_sealed_data_t *)encrypted_dkg_secret, NULL, 0, decrypted_dkg_secret, &decr_len);",
          "437:   if (status != SGX_SUCCESS) {",
          "439:     return;",
          "440:   }",
          "",
          "[Removed Lines]",
          "438:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "",
          "[Added Lines]",
          "443:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", status);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "457:   if (*err_status != 0) {",
          "459:     return;",
          "460:   }",
          "",
          "[Removed Lines]",
          "458:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", *err_status);",
          "",
          "[Added Lines]",
          "463:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *err_status);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "493:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, skey, &dec_len);",
          "495:   if (status != SGX_SUCCESS) {",
          "497:     return;",
          "498:   }",
          "",
          "[Removed Lines]",
          "496:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "",
          "[Added Lines]",
          "501:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed - encrypted_key with status %d\", status);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "561:       (const sgx_sealed_data_t *)encrypted_poly, NULL, 0, Decrypted_dkg_poly, &decr_len);",
          "563:   if (status != SGX_SUCCESS) {",
          "565:     return;",
          "566:   }",
          "568: }",
          "570: void get_encr_sshare(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t* dec_len,",
          "573:   char skey[ECDSA_SKEY_LEN];",
          "574:   char *pub_key_x = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "564:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "571:     char* result_str, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "",
          "[Added Lines]",
          "569:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "576:     char* result_str, char * s_shareG2, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "583:       (const sgx_sealed_data_t *)encrypted_skey, NULL, 0, (uint8_t *)skey, &enc_len);",
          "585:   if (status != SGX_SUCCESS) {",
          "587:     return;",
          "588:   }",
          "589:   snprintf(err_string, BUF_LEN,\"unsealed random skey is %s\\n\", skey);",
          "",
          "[Removed Lines]",
          "586:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "",
          "[Added Lines]",
          "591:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed - encrypted_skey with status %d\", status);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "599:   calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind);",
          "600:   snprintf(err_string + 88, BUF_LEN,\"\\nsecret share is %s\", s_share);",
          "602:   char* cypher = (char *)malloc(65);",
          "603:   xor_encrypt(common_key, s_share, cypher);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:   calc_secret_shareG2(s_share, s_shareG2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "624:   uint32_t enc_len;",
          "633:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "634:   uint32_t decr_len;",
          "635:   decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t*)decrypted_dkg_secret, &decr_len);",
          "636:   if (*err_status != 0) {",
          "638:     return;",
          "639:   }",
          "642:   free(decrypted_dkg_secret);",
          "643: }",
          "",
          "[Removed Lines]",
          "626:   sgx_status_t status = sgx_unseal_data(",
          "627:       (const sgx_sealed_data_t *)encrypted_DHkey, NULL, 0, (uint8_t *)DH_key, &enc_len);",
          "628:   if (status != SGX_SUCCESS) {",
          "629:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "630:     return;",
          "631:   }",
          "637:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", *err_status);",
          "641:   calc_secret_shareG2(decrypted_dkg_secret, s_shareG2, _t, ind1);",
          "",
          "[Added Lines]",
          "644:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *err_status);",
          "648:   calc_secret_shareG2_old(decrypted_dkg_secret, s_shareG2, _t, ind1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686: }",
          "688: void create_bls_key(int *err_status, char* err_string, const char* s_shares,",
          "692:   char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "689:                       uint8_t* encrypted_key, uint64_t key_len, uint8_t * encr_bls_key){",
          "",
          "[Added Lines]",
          "701:                       uint8_t* encrypted_key, uint64_t key_len, uint8_t * encr_bls_key, uint32_t *enc_bls_key_len){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "763:    mpz_mod(bls_key, sum, q);",
          "767:    snprintf(err_string, BUF_LEN,\"bls private key is %s\", key_share);",
          "768:    uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "770:    status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *)key_share, sealedLen,(sgx_sealed_data_t*)encr_bls_key);",
          "771:    if( status !=  SGX_SUCCESS) {",
          "773:     snprintf(err_string, BUF_LEN,\"seal bls private key failed with status %d \", status);",
          "774:     return;",
          "775:    }",
          "",
          "[Removed Lines]",
          "765:    char key_share[mpz_sizeinbase(bls_key, 10) + 2];",
          "766:    char *key = mpz_get_str(key_share, 10, bls_key);",
          "",
          "[Added Lines]",
          "777:    char key_share[mpz_sizeinbase(bls_key, 16) + 2];",
          "778:    char *key = mpz_get_str(key_share, 16, bls_key);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "794: void get_bls_pub_key(int *err_status, char* err_string, uint8_t* encrypted_key, uint64_t key_len, char* bls_pub_key){",
          "801:   if (status != SGX_SUCCESS) {",
          "802:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "803:     return;",
          "804:   }",
          "808: }",
          "",
          "[Removed Lines]",
          "796:   char skey[ECDSA_SKEY_LEN];",
          "798:   sgx_status_t status = sgx_unseal_data(",
          "799:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t *)skey, &key_len);",
          "806:   calc_bls_public_key(skey, bls_pub_key);",
          "",
          "[Added Lines]",
          "809:   char skey_hex[ECDSA_SKEY_LEN];",
          "811:   uint32_t len = key_len;",
          "813:   sgx_status_t status = sgx_unseal_data(",
          "814:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t *)skey_hex, &len);",
          "820:   calc_bls_public_key(skey_hex, bls_pub_key);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:                                 [out, count = 1024] uint8_t *encrypted_skey,",
          "114:                                 [user_check] uint32_t* dec_len,",
          "115:                                 [out, count = 193] char* result_str,",
          "116:                                 [in, count = 129] char* pub_keyB,",
          "117:                                 uint8_t _t,",
          "118:                                 uint8_t _n,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:                                 [out, count = 320] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:                                 [in, count = 6145] const char* s_shares,",
          "136:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "137:                                 uint64_t key_len,",
          "140:          public void get_bls_pub_key(",
          "141:                                 [user_check]int *err_status,",
          "",
          "[Removed Lines]",
          "138:                                 [out, count = 1024] uint8_t * encr_bls_key);",
          "",
          "[Added Lines]",
          "139:                                 [out, count = 1024] uint8_t * encr_bls_key,",
          "140:                                 [user_check] uint32_t *enc_bls_key_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:                                 [in, count = 3050] uint8_t *encrypted_dkg_secret,",
          "152:                                 [user_check] uint32_t* dec_len,",
          "153:                                 [out, count = 65] char* DH_key,",
          "155:                                 uint8_t _t,",
          "156:                                 uint8_t _n,",
          "157:                                 uint8_t ind1);",
          "",
          "[Removed Lines]",
          "154:                                 [out, count = 257] char* s_shareG2,",
          "",
          "[Added Lines]",
          "156:                                 [out, count = 320] char* s_shareG2,",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define COULD_NOT_ACCESS_DATABASE -9",
          "47: #define NULL_DATABASE -10",
          "51: #define ENCLAVE_NAME \"secure_enclave.signed.so\"",
          "",
          "[Removed Lines]",
          "49: #define WALLETDB_NAME \"sgxwallet.db\"",
          "",
          "[Added Lines]",
          "49: #define WALLETDB_NAME  \"sgxwallet.db\" //\"test_sgxwallet.db\"//",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:             else",
          "27:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "28:         }",
          "30:         {",
          "31:             Json::Value p;",
          "32:             p[\"keyShareName\"] = keyShareName;",
          "",
          "[Removed Lines]",
          "29:         Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) throw (jsonrpc::JsonRpcException)",
          "",
          "[Added Lines]",
          "29:         Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "174:     }",
          "176: };",
          "178: #endif //JSONRPC_CPP_STUB_STUBCLIENT_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     Json::Value ComplaintResponse(const std::string& polyName, int n, int t, int ind) throw (jsonrpc::JsonRpcException)",
          "177:     {",
          "178:       Json::Value p;",
          "179:       p[\"polyName\"] = polyName;",
          "180:       p[\"n\"] = n;",
          "181:       p[\"t\"] = t;",
          "182:       p[\"ind\"] = ind;",
          "183:       Json::Value result = this->CallMethod(\"ComplaintResponse\",p);",
          "184:       if (result.isObject())",
          "185:         return result;",
          "186:       else",
          "187:         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "188:     }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:   char *pub_key_y = (char *)calloc(1024, 1);",
          "526:   char *pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "529:                      pub_keyB, 2, 2, 1);",
          "530:   REQUIRE(status == SGX_SUCCESS);",
          "531:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "",
          "[Removed Lines]",
          "528:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result,",
          "",
          "[Added Lines]",
          "527:   char s_shareG2[320];",
          "528:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result, s_shareG2,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:   char *pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "567:                            pub_keyB, 2, 2, 1);",
          "568:   REQUIRE(status == SGX_SUCCESS);",
          "569:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "",
          "[Removed Lines]",
          "566:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result,",
          "",
          "[Added Lines]",
          "566:   char s_shareG2[320];",
          "567:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result, s_shareG2,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "703: #include \"stubclient.h\"",
          "704: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704: TEST_CASE( \"dkg_complaint test1\", \"[dkgc]\" ) {",
          "705:   init_daemon();",
          "706:   init_enclave();",
          "707:   char* encr_poly = \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000877a3884976af70f3de0ed7ad82b16cad2b5e69bf9976f3012a421ee7025c4b5000000fba090000000000000000000000000000ba090000000000000000000000000000426594165b64a693699c19f0efcbe2b1e7bde98de433a929f8fcdbc093e5f490d3f17674667de6160945584897077c401f3fa0bc05b26dc6ffea9a3d38bbcedaccb45bc39858050e97a5ae98f02ecd17ac32784d2cda930481805c1b9db38443ccef23a3c0bcc3f010a562bfc7b9d9db73fa412273ff884fdb8c0b9e72dfb114707f930bee9d44241fcfb7fd455d68b5cdf2b687afcf9fa8b568a7b17ea60258d821fbdeafdc8524db14165530836216eaccd3d7f9e03762db61d0c506f4fbb4f6d21336c8fd1e59cf6c57d91046cd0a4b0e044daab39371bb9dcbf11aa652246b6a93ff536629c8b54fa7e8074795190edc702ca162386f1c26c3601c2ea27a677194a2c183396ecad15c0d5da95a8137c4e7967c2b3f829a6d80d4fa13a53058e7aa3b807ca665770ba6495e38526f92479aac823e8224ca633982722424dc2498929bd076daea93a73d4ad60e4924496bcca55a95977139801cb7407caf4bba76ac972ea91cbee2661d18d404cd652b0df6ef09736f473d4cead9a218809e0a726bfcf2823006375d25b07c514eab9249a4d17da0f2a3f05886dc3698bba6de7b2e32beb96386a69385274dac607e2e7f7e68fa7673b83c99798298e44d64c118c42ce8a0102cb45cb892283c5d201c19ae12a38890e18ef610f87fd63c3571b8e9ba782ebd62282e14cc4bf5cb9eb4280a5cb63b4b31a88720c043fd1e0c3b916016cc46c480bab1e7fdf5a2960df8babdbe19083e17bd65c58482affb3dd549f5674eb761be49b80c16ded7f41bc1993d5af5d27a55b9be24fa20d288087978c70119bed4c441f0e109baf95d80df7623ff6ad31f28e906413d12ebeb4669f96c34931511b37b6a5be5935c905c893ed9b0518275bd5cf241c73f6d06169f30a74e65e6f240f8e2ed696a9964851fb18b827bbc15ea20738891a7a69312d85e47b42bd24dca3285876ad41a1750d53e5f919a453a91ddb11943292ced0130828dfa08c9d3cea0a50a2619af4735770df386074c72cd60b87ede0fe53885340b907c9c02d8a7fc4c7bf509c169b049ef627c33926c9247d9e1a44c27b86b722385d8e61af40919e96ed8feb2b781bfa68095d07966381bfaac7389010b45db671e3d5e7f488ad7ff69ac6fc599fb4f259c9cb9d1ee7265312ecc4dc4ad89b9850445a7e094a7a9f7e7cf71a159f4db849d0b7f9346065ac8e509fc3f7932db1f91c3a1e34604cbedd071772bbd414d4b96328aedf372ff4e4170ca0c23bbadd447b49eff0ae2c37b51052c6e1cf2a0ef0106fa892a4a18165bfeea92c565ae5aecfa8163aa12c762f40135664b467bd58470216b1124413a2a723a358a759425cf293a6cf0b42662892f42d62e6a446016365c22ab26ca4e7dbd1c404a3f2f515fb4fd2e33efc82cca453b63d6d9e8fc0369c0192684731314ab2d684f948171c1917f99603667367b8fa69d207e3bf9c05b13b4720f493642a497b403934dbb7865dd0d0c893483b5c2986baac9d7f50612abe37f2274531ad80aba90d76117d81f99cf7459097cd7a90c441339b581dcd0bf2e74a912415918546bb5c645362dd4424631588a95a0945cd723df229b1b6da93142de12084ef56c93e2f342ba524a15c94b6334ad3f8baaa05e5e55888559a0b73be9116ed2bb713eb01f188ac86ab6ff4b0228eeb7bf481369fad1b5dc8d1718e62f65eb2c4a2906539526cfd45d4ae6f1a903f88ae4cf7f9a4fb290a14db3595ac581d70daf5b020864b315c17a99d23f19f7aa255372fd5b709eacf27503e3ab8fba5785944158aeb73c5b432c65286ae05d1ee95b5c922e24a83ecef7f4d96bfe86bd7990c13db918dbba8977f3cbfe1854a8cdcc63ea73ce3f93757ef6cb77e8144c2df51a0de62eaa982a803b35f24c6f5edf2bbacce988bfe37e394ef2acb2f364c8939365c38c56d32d8c9e1600c8b521ed80f5ad82334e915b862ff3dbf343b914170be3b881a4696c6f97100b005435cbdbb7dd7ff7bec17b179ab7645166dacf59544d7cf7cfcb94ac35acde7311d2213f9aeb5734ccbd1ad800d517c0218b92310ebd9d76b96908aba2c8779111b5ed6acfa15817b4e7bbee845b1b4eb9b8daa4cdf0a0349dfde69f63355b2a32197fb2c4a504721d6857a97da303b14dc58831cbdccba06f4bb3616bc1f33e77e1df9a5419cf7613f4d363297a1c1b6f2010f5029c48fc6909076d1883ee7b21254753f9f420bd6602d49a359719a89c5a8d3c0a93337a1c937161e1490598c3b00cac95f1240b69b4080a81942e8f1900f978b16daac1c732b37083e800ca03bf8dc38d5e2cc45aac155d169050ec49070de42e1f7cdf59556788576366930f444b310e9c16ab39c0c704eabb135935dcc218ecf3327b78256674b5b43a6886ee3099d96c5a9d6d00a65b620986abed68eaafcab311da531847e9da30276ca398fee82c77293ce55c41e562cda9801bf76eac8d41345fa6b13e31dafbf774046a21e00fa07e882133b70a0853c51ab329e8c0ff5b6c93e385609a295a8d380c33e1ee9e69e812ad404d1252d56bc3ba583aaf4581f81f7ea2b34666eca35883922dde55007a0f0049149fea6d4a0911a001e48dc105020ffd84a45a7db78dd5b1e78a14a47d1ecb6d9ffc12e5183a3dc06f03e74a449e89b46ef91a74462938e6898fed3fb72b17a5a207da6ae04c1859da383a9a300ff31f3e5a668027e4f38cc35bd6c0a5a7532f8d33ee4ea2b77dd6b0d51475b263d26c3fde0ff79ccdca8b386bcf586384f18b95cc73b834d2969da753acc42c81ac171fa19be22652d5e0eadb37445dcbcf9bd3fc4220ac1977191a38cba9ced7b5a3c8defd07a1ff68dc85f2f8c88d3314ddf4f135aaf459127715de101943988add0333e38b7b85449111a6b72fa6965d1369a897508a4990d8150da9cd68f5c60f612dafb598463d23cfb6a3369418197d16709ec9b4f15dd9e85f7a4ae86152600d6bc7c1ba30516bc17e8852f087c3ef390ab05f6c57a4ab405fedbc04849a163ed292c45bb02afc2e059ca08adf3d51e2f9a79637f6cf5e222f9ea27ec37c67849c937a99e270f1d05add89ab42b6fe1648f02fcbfbefb2f176597df1e23c41c39c29ba2d48c2788ea95327657fdb41ec24aff3259631046f5a62c07288181453942a1f24f495d087522569eef5b117477349720adde22136fdceb92173741ed0ba4252ee7332e5f835a18f6708cf429167e328a8ed33518610ccea3b750c1460a140f2645bf28fa6bad57d298463e117426ea1b8b944e04032df3413391653805149ef7dba49fb4221bc64f40c039bbaf4ecaac256084402699a89bd440539e565582f2cfb0e35ab41f70326cd3f24168a3c2816553aa8ed19facb6d3a07af5ec7a5f9f80e96c9e41adbd6fa0d44bda9cb954fed933912ec9d320cf5c2fc687bd89a5c5a1ddd87b7e3db33c0138aaaa92dd4f4619c8f9dfcc269aa8fbeb7ede7e05c2f778b05d8339fa175e2447844cd86dd886b40cb3badc4ce986aa93a3d973d1c4a76b6bdc0\";",
          "708:   std::pair<std::string, std::string> result = response_to_complaint(\"pp2\", encr_poly, 2, 2, 0);",
          "709: }",
          "711: TEST_CASE( \"pub_bls_key\", \"[pub_bls]\" ) {",
          "712:   init_daemon();",
          "713:   init_enclave();",
          "714:   char *encryptedKeyHex =",
          "715:       \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000813f8390f6228a568e181a4dadb6508e3e66f5247175d65dbd0d8c7fbfa4df45000000fdc044ae0cd79faaf41e8a7abb412790476738a98b5b6ce95fa1a32db5551b0a0d867305f4de558c64fee730a1f62394633c7d4ca65e3a40b7883e89c2801c61918b01c5de8624a52963df6f4de8581bcbdd2f9b69720d4cc764e03a04c7a99314bfdb5d2d55deda2ca40cd691f093fb2ecbae24cdacdd4d5de93189c6dfd6792d7b95bd5e330aec3538e7a85d15793\"; // encryptTestKey();",
          "717:   std::vector<std::string> result = GetBLSPubKey(encryptedKeyHex);",
          "719:   sgx_destroy_enclave(eid);",
          "720: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "722:     try {",
          "",
          "[Removed Lines]",
          "725:         levelDb->deleteDHDKGKey(\"p2_0:\");",
          "726:       levelDb->deleteDHDKGKey(\"p2_1:\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "745:       Json::Value publicKeys;",
          "746:       publicKeys.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "747:       publicKeys.append(\"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25e6e\");",
          "",
          "[Removed Lines]",
          "748:       cout << c.getSecretShare(\"p2\", publicKeys, 2, 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "772:      std::string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "777:     } catch (JsonRpcException &e) {",
          "778:         cerr << e.what() << endl;",
          "779:     }",
          "781: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:       std::string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "797:       std::string EthKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "801:       cout << c.blsSignMessageHash(\"dOsRY\",\"38433e5ce087dcc1be82fcc834eae83c256b3db87d34f84440d0b708daa0c6f7\", 2, 2, 1);",
          "808:   sgx_destroy_enclave(eid);",
          "",
          "---------------"
        ],
        "trusted_libff/libff/algebrfields/bigint.hpp||trusted_libff/libff/algebra/fields/bigint.hpp": [
          "File: trusted_libff/libff/algebrfields/bigint.hpp -> trusted_libff/libff/algebra/fields/bigint.hpp"
        ]
      }
    },
    {
      "candidate_hash": "0e2db9b4da92a02f8ce42ef0af17b767e54cbb20",
      "candidate_info": {
        "commit_hash": "0e2db9b4da92a02f8ce42ef0af17b767e54cbb20",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/0e2db9b4da92a02f8ce42ef0af17b767e54cbb20",
        "files": [
          "BLSCrypto.cpp",
          "BLSCrypto.h",
          "testw.cpp"
        ],
        "message": "Fixes",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSCrypto.h||BLSCrypto.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: char *encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key) {",
          "115:     char *keyArray = (char *) calloc(BUF_LEN, 1);",
          "116:     uint8_t *encryptedKey = (uint8_t *) calloc(BUF_LEN, 1);",
          "117:     char *errMsg = (char *) calloc(BUF_LEN, 1);",
          "118:     strncpy((char *) keyArray, (char *) _key, BUF_LEN);",
          "122:     unsigned int encryptedLen = 0;",
          "124:     status = encrypt_key(eid, errStatus, errMsg, keyArray, encryptedKey, &encryptedLen);",
          "126:     if (status != SGX_SUCCESS) {",
          "128:         return nullptr;",
          "129:     }",
          "131:     if (*errStatus != 0) {",
          "132:         return nullptr;",
          "133:     }",
          "136:     char *result = (char *) calloc(2 * BUF_LEN, 1);",
          "138:     carray2Hex(encryptedKey, encryptedLen, result);",
          "140:     return result;",
          "141: }",
          "143: char *decryptBLSKeyShareFromHex(int *errStatus, char *errMsg, const char *_encryptedKey) {",
          "148:     uint64_t decodedLen = 0;",
          "150:     uint8_t decoded[BUF_LEN];",
          "152:     if (!(hex2carray(_encryptedKey, &decodedLen, decoded))) {",
          "153:         return nullptr;",
          "154:     }",
          "156:     char *plaintextKey = (char *) calloc(BUF_LEN, 1);",
          "158:     status = decrypt_key(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "160:     if (status != SGX_SUCCESS) {",
          "161:         return nullptr;",
          "162:     }",
          "164:     if (*errStatus != 0) {",
          "165:         return nullptr;",
          "166:     }",
          "168:     return plaintextKey;",
          "170: }",
          "",
          "---------------"
        ],
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #endif //SGXWALLET_BLSCRYPTO_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: EXTERNC  char *encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key);",
          "34: EXTERNC char *decryptBLSKeyShareFromHex(int *errStatus, char *errMsg, const char *_encryptedKey);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: sgx_status_t status;",
          "66: int updated;",
          "127: #define  TEST_KEY \"4160780231445160889237664391382223604184857153814275770598791864649971919844\"",
          "",
          "[Removed Lines]",
          "68: char *encryptKey2Hex(int *errStatus, char *err_string, const char *_key) {",
          "69:     char *keyArray = (char *) calloc(BUF_LEN, 1);",
          "70:     uint8_t *encryptedKey = (uint8_t *) calloc(BUF_LEN, 1);",
          "71:     char *errMsg = (char *) calloc(BUF_LEN, 1);",
          "72:     strncpy((char *) keyArray, (char *) _key, BUF_LEN);",
          "76:     unsigned int encryptedLen = 0;",
          "78:     status = encrypt_key(eid, errStatus, errMsg, keyArray, encryptedKey, &encryptedLen);",
          "80:     if (status != SGX_SUCCESS) {",
          "82:         return nullptr;",
          "83:     }",
          "85:     if (*errStatus != 0) {",
          "86:         return nullptr;",
          "87:     }",
          "90:     char *result = (char *) calloc(2 * BUF_LEN, 1);",
          "92:     carray2Hex(encryptedKey, encryptedLen, result);",
          "94:     return result;",
          "95: }",
          "97: char *decryptKeyFromHex(int *errStatus, char *errMsg, const char *_encryptedKey) {",
          "102:         uint64_t decodedLen = 0;",
          "104:         uint8_t decoded[BUF_LEN];",
          "106:         if (!(hex2carray(_encryptedKey, &decodedLen, decoded))) {",
          "107:             return nullptr;",
          "108:         }",
          "110:         char *plaintextKey = (char *) calloc(BUF_LEN, 1);",
          "112:         status = decrypt_key(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "114:         if (status != SGX_SUCCESS) {",
          "115:             return nullptr;",
          "116:         }",
          "118:         if (*errStatus != 0) {",
          "119:             return nullptr;",
          "120:         }",
          "122:     return plaintextKey;",
          "124: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     char *errMsg = (char *) calloc(BUF_LEN, 1);",
          "144:     REQUIRE(encryptedKeyHex != nullptr);",
          "145:     REQUIRE(errStatus == 0);",
          "",
          "[Removed Lines]",
          "142:     char *encryptedKeyHex = encryptKey2Hex(&errStatus, errMsg, key);",
          "",
          "[Added Lines]",
          "85:     char *encryptedKeyHex = encryptBLSKeyShare2Hex(&errStatus, errMsg, key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:         char* encryptedKey = encryptTestKey();",
          "177:         REQUIRE(encryptedKey != nullptr);",
          "181:         REQUIRE(errStatus == 0);",
          "",
          "[Removed Lines]",
          "179:         char* plaintextKey = decryptKeyFromHex(&errStatus, errMsg, encryptedKey);",
          "",
          "[Added Lines]",
          "122:         char* plaintextKey = decryptBLSKeyShareFromHex(&errStatus, errMsg, encryptedKey);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fa379bea75179e9385b7908b1566ec89d185cb2",
      "candidate_info": {
        "commit_hash": "1fa379bea75179e9385b7908b1566ec89d185cb2",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1fa379bea75179e9385b7908b1566ec89d185cb2",
        "files": [
          "SGXRegistrationServer.cpp",
          "ServerInit.cpp",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-2345 Cleaning testst",
        "before_after_code_files": [
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"spdlog/spdlog.h\"",
          "47: #include \"common.h\"",
          "54: SGXRegistrationServer *registrationServer = nullptr;",
          "55: HttpServer *httpServer2 = nullptr;",
          "",
          "[Removed Lines]",
          "49: int printDebugInfo = 0;",
          "50: int useHTTPS = 1;",
          "51: int encryptKeys = 0;",
          "52: bool autoconfirm = false;",
          "",
          "[Added Lines]",
          "49: int printDebugInfo = -1;",
          "50: int useHTTPS = -1;",
          "51: int encryptKeys = -1;",
          "52: int autoconfirm = -1;",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:             fprintf(stderr, \"sgx_create_enclave: %s: file not found\\n\", ENCLAVE_NAME);",
          "109:             fprintf(stderr, \"Did you forget to set LD_LIBRARY_PATH?\\n\");",
          "110:         } else {",
          "111:             fprintf(stderr, \"%s: 0x%04x\\n\", ENCLAVE_NAME, status);",
          "112:         }",
          "113:         exit(1);",
          "114:     }",
          "119:     status = tgmp_init(eid);",
          "120:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "117:     spdlog::info( \"Enclave launched\");",
          "",
          "[Added Lines]",
          "110:             spdlog::error(\"sgx_create_enclave_search failed\");",
          "117:     spdlog::error( \"Enclave created and started successfully\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         exit(1);",
          "123:     }",
          "129: }",
          "",
          "[Removed Lines]",
          "125:     if (printDebugInfo) {",
          "126:       spdlog::info(\"libtgmp initialized\");",
          "128:     }",
          "",
          "[Added Lines]",
          "125:     spdlog::info(\"Enclave libtgmp library initialized successfully\");",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: }",
          "67: int main(int argc, char *argv[]) {",
          "68:     void (*SEK_initializer)();",
          "69:     SEK_initializer = init_SEK;",
          "72:     int opt;",
          "74:     if (argc > 1 && strlen(argv[1]) == 1) {",
          "76:         exit(1);",
          "77:     }",
          "81:     while ((opt = getopt(argc, argv, \"cshd0aby\")) != -1) {",
          "82:         switch (opt) {",
          "",
          "[Removed Lines]",
          "70:     bool checkClientCert = true;",
          "71:     bool sign_automatically = false;",
          "75:         fprintf(stderr, \"option is too short %s\\n\", argv[1]);",
          "79:     encryptKeys = 0;",
          "",
          "[Added Lines]",
          "69:     bool encryptKeysOption  = false;",
          "70:     bool useHTTPSOption = true;",
          "71:     bool printDebugInfoOption = false;",
          "72:     bool autoconfirmOption = false;",
          "73:     bool checkClientCertOption = true;",
          "74:     bool autoSignClientCertOption = false;",
          "81:         printUsage();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:                     exit(1);",
          "91:                 }",
          "92:             case 'c':",
          "94:                 break;",
          "95:             case 's':",
          "97:                 break;",
          "98:             case 'd':",
          "100:                 break;",
          "101:             case '0':",
          "103:                 break;",
          "104:             case 'a':",
          "106:                 break;",
          "107:             case 'b':",
          "108:                 SEK_initializer = enter_SEK;",
          "109:                 break;",
          "110:             case 'y':",
          "112:                 break;",
          "113:             case '?':",
          "114:                 printUsage();",
          "",
          "[Removed Lines]",
          "93:                 checkClientCert = false;",
          "96:                 sign_automatically = true;",
          "99:                 printDebugInfo = 1;",
          "102:                 useHTTPS = 0;",
          "105:                 encryptKeys = 0;",
          "111:                 autoconfirm = true;",
          "",
          "[Added Lines]",
          "100:                 checkClientCertOption = false;",
          "103:                 autoSignClientCertOption = true;",
          "106:                 printDebugInfoOption = true;",
          "109:                 useHTTPSOption = false;",
          "112:                 encryptKeysOption = false;",
          "118:                 autoconfirmOption = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:                 break;",
          "118:         }",
          "119:     }",
          "122:     while (true) {",
          "123:         sleep(10);",
          "",
          "[Removed Lines]",
          "120:     initAll(checkClientCert, sign_automatically, SEK_initializer);",
          "",
          "[Added Lines]",
          "128:     setFullOptions(printDebugInfoOption, useHTTPSOption, autoconfirmOption, encryptKeysOption);",
          "130:     initAll(checkClientCertOption, autoSignClientCertOption, SEK_initializer);",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: extern int printDebugInfo;",
          "40: extern int useHTTPS;",
          "41: extern int encryptKeys;",
          "44: #define BUF_LEN 1024",
          "",
          "[Removed Lines]",
          "42: extern bool autoconfirm;",
          "",
          "[Added Lines]",
          "42: extern int autoconfirm;",
          "46: inline void setFullOptions(int _printDebugInfo, int _useHTTPS, int _autoconfirm, int _encryptKeys) {",
          "47:     printDebugInfo = _printDebugInfo;",
          "48:     useHTTPS = _useHTTPS;",
          "49:     autoconfirm = _autoconfirm;",
          "50:     encryptKeys = _encryptKeys;",
          "51: }",
          "54: inline void setOptions(int _printDebugInfo, int _useHTTPS, int _autoconfirm) {",
          "55:     setFullOptions(_printDebugInfo, _useHTTPS, _autoconfirm, false);",
          "56: }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: }",
          "91: sgx_launch_token_t token = {0};",
          "93: sgx_status_t status;",
          "94: int updated;",
          "96: #define  TEST_BLS_KEY_SHARE \"4160780231445160889237664391382223604184857153814275770598791864649971919844\"",
          "97: #define TEST_BLS_KEY_NAME \"SCHAIN:17:INDEX:5:KEY:1\"",
          "101:     REQUIRE(system(\"rm -rf \"",
          "102:                     WALLETDB_NAME) == 0);",
          "",
          "[Removed Lines]",
          "92: sgx_enclave_id_t eid;",
          "99: void reset_db() {",
          "",
          "[Added Lines]",
          "92: sgx_enclave_id_t eid = 0;",
          "99: void resetDB() {",
          "100:     sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: TEST_CASE(\"BLS key encrypt\", \"[bls-key-encrypt]\") {",
          "127:     initAll(false, true, init_SEK);",
          "128:     auto key = encryptTestKey();",
          "129:     REQUIRE(key != nullptr);",
          "130:     free(key);",
          "131: }",
          "134: TEST_CASE(\"BLS key encrypt/decrypt\", \"[bls-key-encrypt-decrypt]\") {",
          "162:         sgx_destroy_enclave(eid);",
          "164:     }",
          "165: }",
          "168: TEST_CASE(\"DKG gen test\", \"[dkg-gen]\") {",
          "173:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 0);",
          "174:     vector<char> errMsg(1024, 0);",
          "",
          "[Removed Lines]",
          "124:     printDebugInfo = 1;",
          "125:     useHTTPS = 0;",
          "126:     autoconfirm = true;",
          "135:     {",
          "137:         printDebugInfo = 1;",
          "138:         useHTTPS = 0;",
          "139:         autoconfirm = true;",
          "141:         initAll(false, true, init_SEK);",
          "145:         int errStatus = -1;",
          "147:         vector<char> errMsg(BUF_LEN, 0);",
          "149:         char *encryptedKey = encryptTestKey();",
          "150:         REQUIRE(encryptedKey != nullptr);",
          "151:         char *plaintextKey = decryptBLSKeyShareFromHex(&errStatus, errMsg.data(), encryptedKey);",
          "152:         free(encryptedKey);",
          "154:         REQUIRE(errStatus == 0);",
          "155:         REQUIRE(strcmp(plaintextKey, TEST_BLS_KEY_SHARE) == 0);",
          "157:         printf(\"Decrypt key completed with status: %d %s \\n\", errStatus, errMsg.data());",
          "158:         printf(\"Decrypted key len %d\\n\", (int) strlen(plaintextKey));",
          "159:         printf(\"Decrypted key: %s\\n\", plaintextKey);",
          "160:         free(plaintextKey);",
          "170:     autoconfirm = true;",
          "172:     initEnclave();",
          "",
          "[Added Lines]",
          "125:     resetDB();",
          "126:     setOptions(true, false, true);",
          "131:     sgx_destroy_enclave(eid);",
          "136:     resetDB();",
          "137:     setOptions(true, false, true);",
          "138:     initAll(false, true, init_SEK);",
          "142:     int errStatus = -1;",
          "144:     vector<char> errMsg(BUF_LEN, 0);",
          "146:     char *encryptedKey = encryptTestKey();",
          "147:     REQUIRE(encryptedKey != nullptr);",
          "148:     char *plaintextKey = decryptBLSKeyShareFromHex(&errStatus, errMsg.data(), encryptedKey);",
          "149:     free(encryptedKey);",
          "151:     REQUIRE(errStatus == 0);",
          "152:     REQUIRE(strcmp(plaintextKey, TEST_BLS_KEY_SHARE) == 0);",
          "154:     printf(\"Decrypt key completed with status: %d %s \\n\", errStatus, errMsg.data());",
          "155:     printf(\"Decrypted key len %d\\n\", (int) strlen(plaintextKey));",
          "156:     printf(\"Decrypted key: %s\\n\", plaintextKey);",
          "157:     free(plaintextKey);",
          "159:     sgx_destroy_enclave(eid);",
          "161: }",
          "163: void destroyEnclave() {",
          "164:     if (eid != 0) {",
          "166:         eid = 0;",
          "172:     resetDB();",
          "173:     setOptions(true, false, true);",
          "174:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254: }",
          "256: TEST_CASE(\"DKG public shares test\", \"[dkg-pub_shares]\") {",
          "259:     libff::init_alt_bn128_params();",
          "261:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 0);",
          "262:     vector<char> errMsg(1024, 0);",
          "",
          "[Removed Lines]",
          "257:     autoconfirm = true;",
          "260:     initEnclave();",
          "",
          "[Added Lines]",
          "261:     resetDB();",
          "262:     setOptions(true, false, true);",
          "263:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "325: }",
          "327: TEST_CASE(\"DKG encrypted secret shares test\", \"[dkg-encr_sshares]\") {",
          "332:     vector<char> errMsg(1024, 1);",
          "333:     vector<char> result(130, 1);",
          "",
          "[Removed Lines]",
          "328:     autoconfirm = true;",
          "330:     initEnclave();",
          "",
          "[Added Lines]",
          "335:     resetDB();",
          "336:     setOptions(true, false, true);",
          "337:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:     string pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "355:     REQUIRE(status == SGX_SUCCESS);",
          "358:     cerr << \"secret share is \" << result.data() << endl;",
          "",
          "[Removed Lines]",
          "351:     vector<char> s_shareG2(320,0);",
          "352:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(), s_shareG2.data(),",
          "353:                              (char*) pub_keyB.data(), 2, 2, 1);",
          "356:     printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg.data());",
          "",
          "[Added Lines]",
          "359:     vector<char> s_shareG2(320, 0);",
          "360:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(),",
          "361:                              s_shareG2.data(),",
          "362:                              (char *) pub_keyB.data(), 2, 2, 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "361: }",
          "363: TEST_CASE(\"DKG verification test\", \"[dkg-verify]\") {",
          "368:     vector<char> errMsg(1024, 0);",
          "369:     vector<char> result(130, 0);",
          "",
          "[Removed Lines]",
          "364:     autoconfirm = true;",
          "366:     initEnclave();",
          "",
          "[Added Lines]",
          "372:     resetDB();",
          "373:     setOptions(true, false, true);",
          "374:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386:     string pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "392:     REQUIRE(status == SGX_SUCCESS);",
          "393:     printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg.data());",
          "",
          "[Removed Lines]",
          "388:     vector<char> s_shareG2(320,0);",
          "390:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(), s_shareG2.data(),",
          "391:                              (char*) pub_keyB.data(), 2, 2, 1);",
          "",
          "[Added Lines]",
          "397:     vector<char> s_shareG2(320, 0);",
          "399:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(),",
          "400:                              s_shareG2.data(),",
          "401:                              (char *) pub_keyB.data(), 2, 2, 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "402: TEST_CASE(\"ECDSA keygen and signature test\", \"[ecdsa_test]\") {",
          "406:     vector<char> errMsg(1024, 0);",
          "407:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "403:     autoconfirm = true;",
          "404:     initEnclave();",
          "",
          "[Added Lines]",
          "413:     resetDB();",
          "414:     setOptions(true, false, true);",
          "415:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "421:     printf(\"\\nwas pub_key_x %s: \\n\", pub_key_x.data());",
          "422:     printf(\"\\nwas pub_key_y %s: \\n\", pub_key_y.data());",
          "427:     string hex = \"3F891FDA3704F0368DAB65FA81EBE616F4AA2A0854995DA4DC0B59D2CADBD64F\";",
          "429:     printf(\"hash length %d \", (int) hex.size());",
          "430:     vector<char> signature_r(1024, 0);",
          "431:     vector<char> signature_s(1024, 0);",
          "",
          "[Removed Lines]",
          "424:     for ( int i = 0; i < 1024 ; i++)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "443:     sgx_destroy_enclave(eid);",
          "444:     printf(\"the end of ecdsa test\\n\");",
          "445: }",
          "447: TEST_CASE(\"Test test\", \"[test_test]\") {",
          "451:     vector<char> errMsg(1024, 0);",
          "452:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "448:     autoconfirm = true;",
          "449:     initEnclave();",
          "",
          "[Added Lines]",
          "457:     resetDB();",
          "458:     setOptions(true, false, true);",
          "459:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "458:     status = generate_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "459:                                 pub_key_y.data());",
          "471:     sgx_destroy_enclave(eid);",
          "",
          "[Removed Lines]",
          "461:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Added Lines]",
          "471:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "474: }",
          "476: TEST_CASE(\"get public ECDSA key\", \"[get_pub_ecdsa_key_test]\") {",
          "481:     int err_status = 0;",
          "482:     vector<char> errMsg(1024, 0);",
          "",
          "[Removed Lines]",
          "477:     autoconfirm = true;",
          "479:     initEnclave();",
          "",
          "[Added Lines]",
          "479:     resetDB();",
          "480:     setOptions(true, false, true);",
          "481:     initAll(false, true, init_SEK);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "551: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "555:     initAll(false, true, init_SEK);",
          "557:     HttpClient client(\"http://localhost:1029\");",
          "558:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "559:     cerr << \"Client inited\" << endl;",
          "564:     int n = 16, t = 16;",
          "565:     Json::Value EthKeys[n];",
          "",
          "[Removed Lines]",
          "552:     useHTTPS = 0;",
          "553:     printDebugInfo = 1;",
          "554:     cerr << \"test started\" << endl;",
          "556:     cerr << \"Server inited\" << endl;",
          "561:     reset_db();",
          "",
          "[Added Lines]",
          "554:     resetDB();",
          "555:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "678:     BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "679:     REQUIRE(common_public.VerifySigWithHelper(hash_arr, commonSig, t, n));",
          "681: }",
          "683: TEST_CASE(\"API test\", \"[api_test]\") {",
          "689:     initAll(false, true, init_SEK);",
          "695:     HttpClient client(\"http://localhost:1029\");",
          "696:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "684:     autoconfirm = true;",
          "686:     useHTTPS = 0;",
          "688:     cerr << \"API test started\" << endl;",
          "694:     cerr << \"Server inited\" << endl;",
          "",
          "[Added Lines]",
          "680:     sgx_destroy_enclave(eid);",
          "685:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "788: }",
          "790: TEST_CASE(\"getServerStatus test\", \"[getServerStatus_test]\") {",
          "793:     initAll(false, true, init_SEK);",
          "794:     HttpClient client(\"http://localhost:1029\");",
          "795:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "791:     autoconfirm = true;",
          "792:     useHTTPS = 0;",
          "",
          "[Added Lines]",
          "789:     resetDB();",
          "790:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "802:     cout << \"Hello from thread \" << this_thread::get_id() << endl;",
          "803:     HttpClient client(\"http://localhost:1029\");",
          "804:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "808:     int n = 16, t = 16;",
          "",
          "[Removed Lines]",
          "805:     reset_db();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "910: }",
          "912: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "918:     initAll(false, true, init_SEK);",
          "",
          "[Removed Lines]",
          "913:     autoconfirm = true;",
          "914:     useHTTPS = 0;",
          "915:     printDebugInfo = 1;",
          "916:     encryptKeys = 1;",
          "",
          "[Added Lines]",
          "910:     resetDB();",
          "911:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "931: }",
          "933: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "940:     initAll(false, true, init_SEK);",
          "943:     HttpClient client(\"http://localhost:1029\");",
          "944:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "934:     autoconfirm = true;",
          "935:     printDebugInfo = 1;",
          "936:     useHTTPS = 0;",
          "937:     encryptKeys = 1;",
          "939:     cerr << \"ecdsa_api_test started\" << endl;",
          "942:     cerr << \"Server inited\" << endl;",
          "",
          "[Added Lines]",
          "929:     resetDB();",
          "930:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "983: }",
          "985: TEST_CASE(\"dkg API test\", \"[dkg_api_test]\") {",
          "991:     initAll(false, true, init_SEK);",
          "994:     HttpClient client(\"http://localhost:1029\");",
          "995:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1001:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1002:     Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "",
          "[Removed Lines]",
          "986:     autoconfirm = true;",
          "987:     printDebugInfo = 1;",
          "988:     useHTTPS = 0;",
          "990:     cerr << \"dkg_api_test started\" << endl;",
          "993:     cerr << \"Server inited\" << endl;",
          "997:     cerr << \"Client inited\" << endl;",
          "999:     reset_db();",
          "",
          "[Added Lines]",
          "977:     resetDB();",
          "978:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1061: }",
          "1063: TEST_CASE(\"isPolyExists test\", \"[is_poly_test]\") {",
          "1069:     initAll(false, true, init_SEK);",
          "1072:     HttpClient client(\"http://localhost:1029\");",
          "1073:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1075:     cerr << \"Client inited\" << endl;",
          "1079:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1080:     Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1081:     cout << genPoly << endl;",
          "",
          "[Removed Lines]",
          "1064:     autoconfirm = true;",
          "1065:     printDebugInfo = 1;",
          "1066:     useHTTPS = 0;",
          "1068:     cerr << \"is_poly_test started\" << endl;",
          "1071:     cerr << \"Server inited\" << endl;",
          "1077:     reset_db();",
          "",
          "[Added Lines]",
          "1049:     resetDB();",
          "1050:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1087:     cout << polyDoesNotExist << endl;",
          "1088:     REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "1090: }",
          "1092: TEST_CASE(\"AES_DKG test\", \"[aes_dkg]\") {",
          "1100:     cerr << \"test started\" << endl;",
          "1101:     initAll(false, true, init_SEK);",
          "1103:     HttpClient client(\"http://localhost:1029\");",
          "1104:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1105:     cerr << \"Client inited\" << endl;",
          "",
          "[Removed Lines]",
          "1093:     autoconfirm = true;",
          "1094:     useHTTPS = 0;",
          "1095:     printDebugInfo = 1;",
          "1096:     encryptKeys = 1;",
          "1098:     reset_db();",
          "1102:     cerr << \"Server inited\" << endl;",
          "",
          "[Added Lines]",
          "1070:     sgx_destroy_enclave(eid);",
          "1075:     resetDB();",
          "1076:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1222: }",
          "1224: TEST_CASE(\"bls_sign_api test\", \"[bls_sign]\") {",
          "1231:     initAll(false, true, init_SEK);",
          "1233:     HttpClient client(\"http://localhost:1029\");",
          "1234:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1235:     cerr << \"Client inited\" << endl;",
          "",
          "[Removed Lines]",
          "1225:     autoconfirm = true;",
          "1226:     useHTTPS = 0;",
          "1227:     printDebugInfo = 1;",
          "1228:     encryptKeys = 1;",
          "1230:     cerr << \"test started\" << endl;",
          "1232:     cerr << \"Server inited\" << endl;",
          "",
          "[Added Lines]",
          "1202:     resetDB();",
          "1203:     setOptions(true, false, true);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1256: }",
          "1258: TEST_CASE(\"AES encrypt/decrypt\", \"[AES-encrypt-decrypt]\") {",
          "1288: }",
          "",
          "[Removed Lines]",
          "1259:     {",
          "1260:         autoconfirm = true;",
          "1261:         printDebugInfo = 1;",
          "1262:         useHTTPS = 0;",
          "1264:         initAll(false, true, init_SEK);",
          "1267:         int errStatus = -1;",
          "1268:         vector<char> errMsg(BUF_LEN, 0);;",
          "1269:         uint32_t enc_len;",
          "1270:         string key = \"123456789\";",
          "1271:         vector<uint8_t> encrypted_key(BUF_LEN,0);",
          "1273:         status = encrypt_key_aes(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &enc_len);",
          "1275:         REQUIRE(status == 0);",
          "1276:         cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg.data() << endl;",
          "1278:         vector<char> decr_key(BUF_LEN, 0);",
          "1279:         status = decrypt_key_aes(eid, &errStatus, errMsg.data(), encrypted_key.data(), enc_len, decr_key.data());",
          "1281:         REQUIRE(status == 0);",
          "1282:         cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg.data() << endl;",
          "1283:         cerr << \"decrypted key is \" << decr_key.data() << endl;",
          "1285:         REQUIRE(key.compare(decr_key.data()) == 0);",
          "1286:         sgx_destroy_enclave(eid);",
          "1287:     }",
          "",
          "[Added Lines]",
          "1229:     sgx_destroy_enclave(eid);",
          "1234:     resetDB();",
          "1235:     setOptions(true, false, true);",
          "1236:     initAll(false, true, init_SEK);",
          "1239:     int errStatus = -1;",
          "1240:     vector<char> errMsg(BUF_LEN, 0);;",
          "1241:     uint32_t enc_len;",
          "1242:     string key = \"123456789\";",
          "1243:     vector<uint8_t> encrypted_key(BUF_LEN, 0);",
          "1245:     status = encrypt_key_aes(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &enc_len);",
          "1247:     REQUIRE(status == 0);",
          "1248:     cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg.data() << endl;",
          "1250:     vector<char> decr_key(BUF_LEN, 0);",
          "1251:     status = decrypt_key_aes(eid, &errStatus, errMsg.data(), encrypted_key.data(), enc_len, decr_key.data());",
          "1253:     REQUIRE(status == 0);",
          "1254:     cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg.data() << endl;",
          "1255:     cerr << \"decrypted key is \" << decr_key.data() << endl;",
          "1257:     REQUIRE(key.compare(decr_key.data()) == 0);",
          "1258:     sgx_destroy_enclave(eid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c1dc3a93f02cf8120b308e9a23da1a0962a4742",
      "candidate_info": {
        "commit_hash": "9c1dc3a93f02cf8120b308e9a23da1a0962a4742",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/9c1dc3a93f02cf8120b308e9a23da1a0962a4742",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2794 add logs",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1003:     char skey[ECDSA_SKEY_LEN];",
          "1005:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey);",
          "1007:     if (status != 0) {",
          "1008:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1006:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "1007:     LOG_INFO(\"ENCRYPTED SKEY\");",
          "1008:     LOG_INFO(skey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1013:         return;",
          "1014:     }",
          "1018:     strncpy(errString, skey, 1024);",
          "1020:     mpz_t privateKeyMpz;",
          "",
          "[Removed Lines]",
          "1016:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1029:         return;",
          "1030:     }",
          "1033:     point Pkey = point_init();",
          "1035:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "1037:     point Pkey_test = point_init();",
          "1038:     point_multiplication(Pkey_test, privateKeyMpz, curve->G, curve);",
          "1040:     if (!point_cmp(Pkey, Pkey_test)) {",
          "1041:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:     LOG_INFO(\"SET STR SUCCESS\");",
          "1038:     LOG_INFO(\"SIGNATURE EXTRACT PK SUCCESS\");",
          "1042:     LOG_INFO(\"POINT MULTIPLICATION SUCCESS\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1049:         return;",
          "1050:     }",
          "1052:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "1054:     char arr_x[len];",
          "1055:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "1057:     int n_zeroes = 64 - strlen(arr_x);",
          "1058:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1055:     LOG_INFO(\"POINTS CMP SUCCESS\");",
          "1061:     LOG_INFO(\"GET STR X SUCCESS\");",
          "1062:     LOG_INFO(arr_x);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1064:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "1065:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "1066:     n_zeroes = 64 - strlen(arr_y);",
          "1067:     for (int i = 0; i < n_zeroes; i++) {",
          "1068:         pub_key_y[i] = '0';",
          "1069:     }",
          "1072:     mpz_clear(privateKeyMpz);",
          "1073:     domain_parameters_clear(curve);",
          "",
          "[Removed Lines]",
          "1070:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "",
          "[Added Lines]",
          "1073:     LOG_INFO(\"GET STR Y SUCCESS\");",
          "1074:     LOG_INFO(arr_y);",
          "1079:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes); // ??????????????????????????????????? SIGSEGV",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5aa4500c3e2907b5f47ffb37f30615207eb19fcf",
      "candidate_info": {
        "commit_hash": "5aa4500c3e2907b5f47ffb37f30615207eb19fcf",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/5aa4500c3e2907b5f47ffb37f30615207eb19fcf",
        "files": [
          ".github/workflows/dockerimage.yml",
          ".gitmodules",
          "Dockerfile",
          "DockerfileBase",
          "DockerfileSimulation",
          "ECDSACrypto.cpp",
          "README.md",
          "SGXRegistrationServer.cpp",
          "ServerInit.cpp",
          "docker/start.sh",
          "github-markdown-toc",
          "run_sgx/docker-compose.yml",
          "run_sgx_sim/docker-compose.yml",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgx_enable",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "Merge branch 'develop' into enhancement/SKALE-2003-Create-backup-key",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "docker/start.sh||docker/start.sh",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   char *pub_key_y = (char *)calloc(1024, 1);",
          "52:   uint32_t enc_len = 0;",
          "56:   if ( err_status != 0 ){",
          "57:     std::cerr << \"RPCException thrown\" << std::endl;",
          "58:     throw RPCException(-666, errMsg) ;",
          "",
          "[Removed Lines]",
          "55:   status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "",
          "[Added Lines]",
          "54:   if ( !is_aes)",
          "55:      status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "56:   else status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   }",
          "69:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "70:   keys.at(0) = hexEncrKey;",
          "71:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "",
          "[Removed Lines]",
          "68:   char *hexEncrKey = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "70:   char *hexEncrKey = (char *) calloc(BUF_LEN * 2, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:     throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "120:   }",
          "124:   if (err_status != 0){",
          "125:     throw RPCException(-666, errMsg) ;",
          "126:   }",
          "",
          "[Removed Lines]",
          "123:   status = get_public_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "",
          "[Added Lines]",
          "124:   if ( !is_aes)",
          "125:    status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "126:   else status = get_public_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     spdlog::info(\"encrypted len: {}\", dec_len);",
          "165:   }",
          "169:   if ( err_status != 0){",
          "170:     throw RPCException(-666, errMsg ) ;",
          "171:   }",
          "",
          "[Removed Lines]",
          "168:   status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "[Added Lines]",
          "170:   if (!is_aes)",
          "171:    status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "172:   else status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: int DEBUG_PRINT = 0;",
          "49: int is_sgx_https = 1;",
          "51: SGXRegistrationServer *regs = nullptr;",
          "52: HttpServer *hs2 = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: int is_aes = 0;",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"spdlog/spdlog.h\"",
          "61: #include <sys/types.h>",
          "62: #include <sys/stat.h>",
          "65: void init_daemon() {",
          "67:     libff::init_alt_bn128_params();",
          "70:     struct stat info;",
          "71:     if (stat(sgx_data_folder.c_str(), &info) !=0 ){",
          "72:       spdlog::info(\"going to create sgx_data folder\");",
          "",
          "[Removed Lines]",
          "69:     std::string sgx_data_folder = SGXDATA_FOLDER;",
          "",
          "[Added Lines]",
          "61: #include <unistd.h>",
          "62: #include <stdio.h>",
          "63: #include <limits.h>",
          "75:     char cwd[PATH_MAX];",
          "76:     if (getcwd(cwd, sizeof(cwd)) == NULL) {",
          "77:         spdlog::error(\"could not get cwd\");",
          "78:         exit(-1);",
          "79:     }",
          "82:     std::string sgx_data_folder = string(cwd) + \"/\" + SGXDATA_FOLDER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         spdlog::info(\"sgx_data folder was created\");",
          "76:       }",
          "77:       else{",
          "79:         exit(-1);",
          "80:       }",
          "81:     }",
          "",
          "[Removed Lines]",
          "78:         spdlog::info(\"creating sgx_data folder failed\");",
          "",
          "[Added Lines]",
          "91:         spdlog::error(\"creating sgx_data folder failed\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:     if (sgxServerInited == 1)",
          "154:         return;",
          "156:     sgxServerInited = 1;",
          "158:     if (is_sgx_https) {",
          "159:       init_https_server(check_cert);",
          "160:       init_registration_server(sign_automatically);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:     init_daemon();",
          "173:     init_daemon();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:     }",
          "166:     init_enclave();",
          "169: }",
          "",
          "[Removed Lines]",
          "168:     init_daemon();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "docker/start.sh||docker/start.sh": [
          "File: docker/start.sh -> docker/start.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: pid=$!",
          "10: sleep 2",
          "",
          "[Removed Lines]",
          "11: /usr/src/sdk/sgxwallet $1",
          "",
          "[Added Lines]",
          "11: cd /usr/src/sdk; ./sgxwallet $1 $2 $3 $4",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249: }",
          "1252:                       uint32_t enc_len, char *_hashX,",
          "1253:                       char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "1251: void bls_sign_message_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1251: void bls_sign_message_test(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:                                 [out, count = 1024] char* key );",
          "226:         public void gen_dkg_secret_aes (",
          "227:                                 [user_check] int *err_status,",
          "228:                                 [out, count = 1024] char* err_string,",
          "",
          "[Removed Lines]",
          "217:         public void bls_sign_message_aes (",
          "218:                                 [user_check] int *err_status,",
          "219:                                 [out, count = 1024] char* err_string,",
          "220:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "221:                                 uint32_t enc_len,",
          "222:                                 [in, count = 1024] char* hashX ,",
          "223:                                 [in, count = 1024] char* hashY ,",
          "224:                                 [out, count = 1024] char* signature);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     exit(1);",
          "63:   }",
          "66:     switch (opt) {",
          "67:     case 'h':",
          "68:       if (strlen(argv[1]) == 2 ) {",
          "",
          "[Removed Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd0\")) != -1) {",
          "",
          "[Added Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd0a\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     case '0':",
          "88:       is_sgx_https = 0;",
          "89:      break;",
          "90:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "91:       exit(1);",
          "92:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     case 'a':",
          "91:       is_aes = 1;",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: extern int DEBUG_PRINT;",
          "39: extern int is_sgx_https;",
          "41: #define BUF_LEN 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: extern int is_aes;",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:   reset_db();",
          "767:   Json::Value EthKeys[n];",
          "768:   Json::Value VerifVects[n];",
          "769:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "766:   int n = 4, t = 4;",
          "",
          "[Added Lines]",
          "766:   int n = 16, t = 16;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1071: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "1072:   DEBUG_PRINT = 1;",
          "1073:   is_sgx_https = 0;",
          "1075:   cerr << \"ecdsa_api_test started\" << endl;",
          "1076:   init_all(false, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:   is_aes = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}