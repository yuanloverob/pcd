{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
      "candidate_info": {
        "commit_hash": "1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains an invocation of a currently unregistered aggregate with a FILTER clause.\n\nFossilOrigin-Name: bd37ce3fb8dee8d538f6afc0bfc13cdc3ebdd504e6461f0130c6ecc8af585f68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:         }",
          "893:       }",
          "894: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "896:         is_agg = 1;",
          "897:       }",
          "898: #endif",
          "",
          "[Removed Lines]",
          "895:       else if( pWin ){",
          "",
          "[Added Lines]",
          "895:       else if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:   ALTER TABLE t1 RENAME TO t1x;",
          "332: }",
          "334: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: #-------------------------------------------------------------------------",
          "335: reset_db",
          "336: do_execsql_test 14.1 {",
          "337:   CREATE TABLE t1(a);",
          "338:   CREATE TABLE t2(b);",
          "339:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "340:     SELECT sum() FILTER (WHERE (SELECT sum() FILTER (WHERE 0)) AND a);",
          "341:   END;",
          "342: }",
          "344: do_catchsql_test 14.2 {",
          "345:   ALTER TABLE t1 RENAME TO t1x;",
          "346: } {1 {error in trigger AFTER: no such column: a}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c6a92982ff68cdbace6527e817adbe5a0628ea0",
      "candidate_info": {
        "commit_hash": "9c6a92982ff68cdbace6527e817adbe5a0628ea0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c6a92982ff68cdbace6527e817adbe5a0628ea0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: f0ebea35d9d6b69a7bb4242fb79ff3db4267e429855fa6969f9f52ffee1c7a99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b47513d2b32b61ba42c1e9b59287d28f6fee231e6c65de2a3aa19effbbaf1e7f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:         Vdbe *v = sqlite3GetVdbe(pParse);",
          "933:         int iJump = sqlite3VdbeCurrentAddr(v) + pFKey->nCol + 1;",
          "934:         for(i=0; i<pFKey->nCol; i++){",
          "938:           sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iJump); VdbeCoverage(v);",
          "939:         }",
          "940:         sqlite3VdbeAddOp2(v, OP_FkCounter, pFKey->isDeferred, -1);",
          "",
          "[Removed Lines]",
          "935:           int iCol, iReg;",
          "936:           iCol = pFKey->aCol[i].iFrom;",
          "937:           iReg = sqlite3TableColumnToStorage(pFKey->pFrom,iCol) + regOld + 1;",
          "",
          "[Added Lines]",
          "935:           int iFromCol, iReg;",
          "936:           iFromCol = pFKey->aCol[i].iFrom;",
          "937:           iReg = sqlite3TableColumnToStorage(pFKey->pFrom,iFromCol) + regOld+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30fdb45da018bb37d4a97a1b68e5b6d99b427332",
      "candidate_info": {
        "commit_hash": "30fdb45da018bb37d4a97a1b68e5b6d99b427332",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30fdb45da018bb37d4a97a1b68e5b6d99b427332",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ensure that the variable-length integer decoder in FTS3 never tries to left-shift a negative number.\n\nFossilOrigin-Name: 10ffc1fe006a1766ff2f1ffc6129786afb86b6b1f8d3a17334e8ecb838d37b9c",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(const unsigned char*)(ptr++)) << shift );  \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 835e2cc55feea2f2426c99816c27f9c35d2fd4cdd9bf1c7f46f889ecfd222778",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "328c84f1e9933701bf6dff61dc9024dafff979f7",
      "candidate_info": {
        "commit_hash": "328c84f1e9933701bf6dff61dc9024dafff979f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/328c84f1e9933701bf6dff61dc9024dafff979f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts3varint.test"
        ],
        "message": "Fix the fts3varint.test script so that it works even on versions of TCL for which Tcl_GetWideIntFromObj() does not work.\n\nFossilOrigin-Name: 53f787ad298756027f630bfefade98b46f01539eb152f7e359b280335c77379e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts3varint.test||test/fts3varint.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 858f62274eb727109d0452ad2d80c0e0acab0f569494b1218c404501e103ed39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3varint.test||test/fts3varint.test": [
          "File: test/fts3varint.test -> test/fts3varint.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     2305843009213693951 2305843009213693952 2305843009213693953 }",
          "111: do_fts3_varint_test 2.62 {",
          "112:     4611686018427387903 4611686018427387904 4611686018427387905 }",
          "118: finish_test",
          "",
          "[Removed Lines]",
          "113: do_fts3_varint_test 2.63 {",
          "114:     9223372036854775807 9223372036854775808 9223372036854775809 }",
          "116: do_fts3_varint_test 3.0 { 18446744073709551615 -18446744073709551615 }",
          "",
          "[Added Lines]",
          "114: if {![catch {fts3_test_varint 18446744073709551615}]} {",
          "115:   do_fts3_varint_test 2.63 {",
          "116:       9223372036854775807 9223372036854775808 9223372036854775809 }",
          "118:   do_fts3_varint_test 3.0 { 18446744073709551615 -18446744073709551615 }",
          "119: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
      "candidate_info": {
        "commit_hash": "95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Make indexes on CAST(...) expressions work.\n\nFossilOrigin-Name: 3ef711d98fb239cf24472f124e7b36b0dde33355de5a2c9a3a978bbdd042a735",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:       pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    }
  ]
}