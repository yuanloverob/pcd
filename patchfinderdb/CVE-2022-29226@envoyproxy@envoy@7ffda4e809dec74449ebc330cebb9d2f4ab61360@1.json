{
  "cve_id": "CVE-2022-29226",
  "cve_desc": "Envoy is a cloud-native high-performance proxy. In versions prior to 1.22.1 the OAuth filter implementation does not include a mechanism for validating access tokens, so by design when the HMAC signed cookie is missing a full authentication flow should be triggered. However, the current implementation assumes that access tokens are always validated thus allowing access in the presence of any access token attached to the request. Users are advised to upgrade. There is no known workaround for this issue.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "7ffda4e809dec74449ebc330cebb9d2f4ab61360",
  "patch_info": {
    "commit_hash": "7ffda4e809dec74449ebc330cebb9d2f4ab61360",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/7ffda4e809dec74449ebc330cebb9d2f4ab61360",
    "files": [
      "source/extensions/filters/http/oauth2/filter.cc",
      "source/extensions/filters/http/oauth2/filter.h",
      "source/extensions/filters/http/oauth2/oauth_client.cc",
      "test/extensions/filters/http/oauth2/filter_test.cc"
    ],
    "message": "oauth2: do not blindly accept requests with a token in the Authorization headera (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "before_after_code_files": [
      "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
      "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
      "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
      "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
    ]
  },
  "patch_diff": {
    "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
      "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
      "204: }",
      "",
      "[Removed Lines]",
      "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
      "207:   ASSERT(headers.Path() != nullptr);",
      "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
      "211:   if (authorization != nullptr) {",
      "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
      "213:     const auto& bearer_prefix = bearerPrefix();",
      "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
      "215:       const size_t start = bearer_prefix.length();",
      "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
      "217:     }",
      "218:   }",
      "221:   const auto path = headers.Path()->value().getStringView();",
      "222:   const auto params = Http::Utility::parseQueryString(path);",
      "223:   const auto param = params.find(\"token\");",
      "224:   if (param != params.end()) {",
      "225:     return param->second;",
      "226:   }",
      "228:   return EMPTY_STRING;",
      "229: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:   headers.removeInline(authorization_handle.handle());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "290:     request_headers_ = &headers;",
      "291:   }",
      "",
      "[Removed Lines]",
      "296:   access_token_ = extractAccessToken(headers);",
      "297:   if (!access_token_.empty()) {",
      "298:     found_bearer_token_ = true;",
      "299:     finishFlow();",
      "300:     return Http::FilterHeadersStatus::Continue;",
      "301:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439: }",
      "441: void OAuth2Filter::finishFlow() {",
      "454:   std::string token_payload;",
      "455:   if (config_->forwardBearerToken()) {",
      "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
      "",
      "[Removed Lines]",
      "445:   if (found_bearer_token_) {",
      "446:     if (config_->forwardBearerToken()) {",
      "447:       setBearerToken(*request_headers_, access_token_);",
      "448:     }",
      "449:     config_->stats().oauth_success_.inc();",
      "450:     decoder_callbacks_->continueDecoding();",
      "451:     return;",
      "452:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
      "511:   config_->stats().oauth_success_.inc();",
      "513: }",
      "515: void OAuth2Filter::sendUnauthorizedResponse() {",
      "",
      "[Removed Lines]",
      "512:   decoder_callbacks_->continueDecoding();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
      "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   std::string new_expires_;",
      "244:   absl::string_view host_;",
      "245:   std::string state_;",
      "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
      "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
      "",
      "[Removed Lines]",
      "246:   bool found_bearer_token_{false};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
      "259:   const std::string& bearerPrefix() const;",
      "261: };",
      "263: } // namespace Oauth2",
      "",
      "[Removed Lines]",
      "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
      "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: namespace Oauth2 {",
      "23: namespace {",
      "27: constexpr const char* GetAccessTokenBodyFormatString =",
      "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
      "",
      "[Removed Lines]",
      "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
      "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
      "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:   }",
      "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
      "100:     auto* endpoint = p.mutable_token_endpoint();",
      "101:     endpoint->set_cluster(\"auth.example.com\");",
      "",
      "[Removed Lines]",
      "98:   FilterConfigSharedPtr getConfig() {",
      "",
      "[Added Lines]",
      "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
      "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
      "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
      "109:     p.add_auth_scopes(\"user\");",
      "110:     p.add_auth_scopes(\"openid\");",
      "111:     p.add_auth_scopes(\"email\");",
      "",
      "[Removed Lines]",
      "108:     p.set_forward_bearer_token(true);",
      "",
      "[Added Lines]",
      "108:     p.set_forward_bearer_token(forward_bearer_token);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
      "434:   init(getConfig(false /* forward_bearer_token */));",
      "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
      "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
      "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
      "442:   };",
      "444:   Http::TestRequestHeaderMapImpl expected_headers{",
      "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
      "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "449:   };",
      "452:   EXPECT_CALL(*validator_, setParams(_, _));",
      "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
      "456:   std::string legit_token{\"legit_token\"};",
      "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
      "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
      "460:             filter_->decodeHeaders(mock_request_headers, false));",
      "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
      "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
      "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
      "467: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "791:   EXPECT_CALL(decoder_callbacks_,",
      "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
      "795:   filter_->finishFlow();",
      "796: }",
      "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
      "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
      "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "",
      "[Removed Lines]",
      "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
      "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
      "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
      "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
      "805:   };",
      "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
      "",
      "[Added Lines]",
      "842:   Http::TestRequestHeaderMapImpl request_headers{",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
      "813:   };",
      "816:   EXPECT_CALL(*validator_, setParams(_, _));",
      "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
      "824: }",
      "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
      "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
      "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "839:   };",
      "842:   EXPECT_CALL(*validator_, setParams(_, _));",
      "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
      "850: }",
      "852: } // namespace Oauth2",
      "",
      "[Removed Lines]",
      "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
      "820:             filter_->decodeHeaders(request_headers_before, false));",
      "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
      "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
      "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
      "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "832:   };",
      "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
      "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
      "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
      "846:             filter_->decodeHeaders(request_headers_before, false));",
      "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
      "",
      "[Added Lines]",
      "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
      "855:             filter_->decodeHeaders(request_headers, false));",
      "859:   Http::TestRequestHeaderMapImpl request_headers{",
      "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
      "871:             filter_->decodeHeaders(request_headers, false));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4d22cae6287bbad93d8ef2cc82a6e8db6eccc6b",
      "candidate_info": {
        "commit_hash": "a4d22cae6287bbad93d8ef2cc82a6e8db6eccc6b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/a4d22cae6287bbad93d8ef2cc82a6e8db6eccc6b",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization header (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "204: }",
          "",
          "[Removed Lines]",
          "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "207:   ASSERT(headers.Path() != nullptr);",
          "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "211:   if (authorization != nullptr) {",
          "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "213:     const auto& bearer_prefix = bearerPrefix();",
          "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "215:       const size_t start = bearer_prefix.length();",
          "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "217:     }",
          "218:   }",
          "221:   const auto path = headers.Path()->value().getStringView();",
          "222:   const auto params = Http::Utility::parseQueryString(path);",
          "223:   const auto param = params.find(\"token\");",
          "224:   if (param != params.end()) {",
          "225:     return param->second;",
          "226:   }",
          "228:   return EMPTY_STRING;",
          "229: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     request_headers_ = &headers;",
          "291:   }",
          "",
          "[Removed Lines]",
          "296:   access_token_ = extractAccessToken(headers);",
          "297:   if (!access_token_.empty()) {",
          "298:     found_bearer_token_ = true;",
          "299:     finishFlow();",
          "300:     return Http::FilterHeadersStatus::Continue;",
          "301:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439: }",
          "441: void OAuth2Filter::finishFlow() {",
          "454:   std::string token_payload;",
          "455:   if (config_->forwardBearerToken()) {",
          "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
          "",
          "[Removed Lines]",
          "445:   if (found_bearer_token_) {",
          "446:     if (config_->forwardBearerToken()) {",
          "447:       setBearerToken(*request_headers_, access_token_);",
          "448:     }",
          "449:     config_->stats().oauth_success_.inc();",
          "450:     decoder_callbacks_->continueDecoding();",
          "451:     return;",
          "452:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "511:   config_->stats().oauth_success_.inc();",
          "513: }",
          "515: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "512:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   std::string new_expires_;",
          "244:   absl::string_view host_;",
          "245:   std::string state_;",
          "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "246:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "259:   const std::string& bearerPrefix() const;",
          "261: };",
          "263: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace Oauth2 {",
          "23: namespace {",
          "27: constexpr const char* GetAccessTokenBodyFormatString =",
          "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "423: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "434:   init(getConfig(false /* forward_bearer_token */));",
          "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "442:   };",
          "444:   Http::TestRequestHeaderMapImpl expected_headers{",
          "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "449:   };",
          "452:   EXPECT_CALL(*validator_, setParams(_, _));",
          "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "456:   std::string legit_token{\"legit_token\"};",
          "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "460:             filter_->decodeHeaders(mock_request_headers, false));",
          "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "467: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:   EXPECT_CALL(decoder_callbacks_,",
          "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "795:   filter_->finishFlow();",
          "796: }",
          "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "805:   };",
          "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "842:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "813:   };",
          "816:   EXPECT_CALL(*validator_, setParams(_, _));",
          "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "824: }",
          "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "839:   };",
          "842:   EXPECT_CALL(*validator_, setParams(_, _));",
          "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "850: }",
          "852: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "820:             filter_->decodeHeaders(request_headers_before, false));",
          "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "832:   };",
          "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "846:             filter_->decodeHeaders(request_headers_before, false));",
          "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "855:             filter_->decodeHeaders(request_headers, false));",
          "859:   Http::TestRequestHeaderMapImpl request_headers{",
          "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "871:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b1fb93d5da933d681744ae484c8dbfaa7f56e85",
      "candidate_info": {
        "commit_hash": "6b1fb93d5da933d681744ae484c8dbfaa7f56e85",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/6b1fb93d5da933d681744ae484c8dbfaa7f56e85",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization header (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "182: }",
          "",
          "[Removed Lines]",
          "184: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "185:   ASSERT(headers.Path() != nullptr);",
          "188:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "189:   if (authorization != nullptr) {",
          "190:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "191:     const auto& bearer_prefix = bearerPrefix();",
          "192:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "193:       const size_t start = bearer_prefix.length();",
          "194:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "195:     }",
          "196:   }",
          "199:   const auto path = headers.Path()->value().getStringView();",
          "200:   const auto params = Http::Utility::parseQueryString(path);",
          "201:   const auto param = params.find(\"token\");",
          "202:   if (param != params.end()) {",
          "203:     return param->second;",
          "204:   }",
          "206:   return EMPTY_STRING;",
          "207: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:     request_headers_ = &headers;",
          "269:   }",
          "",
          "[Removed Lines]",
          "274:   access_token_ = extractAccessToken(headers);",
          "275:   if (!access_token_.empty()) {",
          "276:     found_bearer_token_ = true;",
          "277:     finishFlow();",
          "278:     return Http::FilterHeadersStatus::Continue;",
          "279:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408: }",
          "410: void OAuth2Filter::finishFlow() {",
          "423:   std::string token_payload;",
          "424:   if (config_->forwardBearerToken()) {",
          "425:     token_payload = absl::StrCat(host_, new_expires_, access_token_);",
          "",
          "[Removed Lines]",
          "414:   if (found_bearer_token_) {",
          "415:     if (config_->forwardBearerToken()) {",
          "416:       setBearerToken(*request_headers_, access_token_);",
          "417:     }",
          "418:     config_->stats().oauth_success_.inc();",
          "419:     decoder_callbacks_->continueDecoding();",
          "420:     return;",
          "421:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "468:   config_->stats().oauth_success_.inc();",
          "470: }",
          "472: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "469:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   std::string new_expires_;",
          "215:   absl::string_view host_;",
          "216:   std::string state_;",
          "218:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "220:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "217:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "230:   const std::string& bearerPrefix() const;",
          "232: };",
          "234: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "231:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: namespace Oauth2 {",
          "22: namespace {",
          "26: constexpr const char* GetAccessTokenBodyFormatString =",
          "27:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "23: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "24:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3alpha::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "381: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "392:   init(getConfig(false /* forward_bearer_token */));",
          "394:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "395:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "396:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "397:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "398:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "399:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "400:   };",
          "402:   Http::TestRequestHeaderMapImpl expected_headers{",
          "403:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "404:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "405:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "406:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "407:   };",
          "410:   EXPECT_CALL(*validator_, setParams(_, _));",
          "411:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "414:   std::string legit_token{\"legit_token\"};",
          "415:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "417:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "418:             filter_->decodeHeaders(mock_request_headers, false));",
          "421:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "423:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "424:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "425: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774:   EXPECT_CALL(decoder_callbacks_,",
          "775:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "778:   filter_->finishFlow();",
          "779: }",
          "781: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "791:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "792:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "793:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "776:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "782:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "783:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "784:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "785:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "786:       {Http::Headers::get().ForwardedProto.get(), \"https\"},",
          "787:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "788:   };",
          "790:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "825:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "795:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "796:   };",
          "799:   EXPECT_CALL(*validator_, setParams(_, _));",
          "800:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "807: }",
          "809: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "817:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "818:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "819:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "820:       {Http::Headers::get().ForwardedProto.get(), \"https\"},",
          "822:   };",
          "825:   EXPECT_CALL(*validator_, setParams(_, _));",
          "826:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "833: }",
          "835: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "802:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "803:             filter_->decodeHeaders(request_headers_before, false));",
          "806:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "810:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "811:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "812:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "813:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "814:       {Http::Headers::get().ForwardedProto.get(), \"https\"},",
          "815:   };",
          "816:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "821:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "828:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "829:             filter_->decodeHeaders(request_headers_before, false));",
          "832:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "837:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "838:             filter_->decodeHeaders(request_headers, false));",
          "842:   Http::TestRequestHeaderMapImpl request_headers{",
          "852:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "853:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be83c8c6d59afbd9957616774ae6c9a9dd8cf308",
      "candidate_info": {
        "commit_hash": "be83c8c6d59afbd9957616774ae6c9a9dd8cf308",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/be83c8c6d59afbd9957616774ae6c9a9dd8cf308",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization header (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "204: }",
          "",
          "[Removed Lines]",
          "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "207:   ASSERT(headers.Path() != nullptr);",
          "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "211:   if (authorization != nullptr) {",
          "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "213:     const auto& bearer_prefix = bearerPrefix();",
          "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "215:       const size_t start = bearer_prefix.length();",
          "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "217:     }",
          "218:   }",
          "221:   const auto path = headers.Path()->value().getStringView();",
          "222:   const auto params = Http::Utility::parseQueryString(path);",
          "223:   const auto param = params.find(\"token\");",
          "224:   if (param != params.end()) {",
          "225:     return param->second;",
          "226:   }",
          "228:   return EMPTY_STRING;",
          "229: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     request_headers_ = &headers;",
          "291:   }",
          "",
          "[Removed Lines]",
          "296:   access_token_ = extractAccessToken(headers);",
          "297:   if (!access_token_.empty()) {",
          "298:     found_bearer_token_ = true;",
          "299:     finishFlow();",
          "300:     return Http::FilterHeadersStatus::Continue;",
          "301:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439: }",
          "441: void OAuth2Filter::finishFlow() {",
          "454:   std::string token_payload;",
          "455:   if (config_->forwardBearerToken()) {",
          "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
          "",
          "[Removed Lines]",
          "445:   if (found_bearer_token_) {",
          "446:     if (config_->forwardBearerToken()) {",
          "447:       setBearerToken(*request_headers_, access_token_);",
          "448:     }",
          "449:     config_->stats().oauth_success_.inc();",
          "450:     decoder_callbacks_->continueDecoding();",
          "451:     return;",
          "452:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "511:   config_->stats().oauth_success_.inc();",
          "513: }",
          "515: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "512:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   std::string new_expires_;",
          "244:   absl::string_view host_;",
          "245:   std::string state_;",
          "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "246:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "259:   const std::string& bearerPrefix() const;",
          "261: };",
          "263: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace Oauth2 {",
          "23: namespace {",
          "27: constexpr const char* GetAccessTokenBodyFormatString =",
          "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "423: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "434:   init(getConfig(false /* forward_bearer_token */));",
          "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "442:   };",
          "444:   Http::TestRequestHeaderMapImpl expected_headers{",
          "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "449:   };",
          "452:   EXPECT_CALL(*validator_, setParams(_, _));",
          "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "456:   std::string legit_token{\"legit_token\"};",
          "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "460:             filter_->decodeHeaders(mock_request_headers, false));",
          "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "467: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:   EXPECT_CALL(decoder_callbacks_,",
          "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "795:   filter_->finishFlow();",
          "796: }",
          "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "805:   };",
          "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "842:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "813:   };",
          "816:   EXPECT_CALL(*validator_, setParams(_, _));",
          "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "824: }",
          "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "839:   };",
          "842:   EXPECT_CALL(*validator_, setParams(_, _));",
          "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "850: }",
          "852: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "820:             filter_->decodeHeaders(request_headers_before, false));",
          "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "832:   };",
          "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "846:             filter_->decodeHeaders(request_headers_before, false));",
          "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "855:             filter_->decodeHeaders(request_headers, false));",
          "859:   Http::TestRequestHeaderMapImpl request_headers{",
          "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "871:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    }
  ]
}