{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed82eae13a8254d38b88e480cc14b92b26ea266a",
      "candidate_info": {
        "commit_hash": "ed82eae13a8254d38b88e480cc14b92b26ea266a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ed82eae13a8254d38b88e480cc14b92b26ea266a",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: make uv_spawn() failure more predictable\n\n* It will now report some types of errors synchronously, to bring it on\n  par with uv-unix. Fixes #865.\n\n* Failure to find the target executable will now set up stdio pipes\n  correctly, so the user can assume that when uv_spawn() returns 0 these\n  pipes will never trigger asserts in libuv's guts.",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:   err = uv_utf8_to_utf16_alloc(options.file, &application);",
          "838:   if (err)",
          "841:   err = make_program_args(options.args,",
          "842:                           options.flags & UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS,",
          "843:                           &arguments);",
          "844:   if (err)",
          "847:   if (options.env) {",
          "848:      err = make_program_env(options.env, &env);",
          "851:   }",
          "853:   if (options.cwd) {",
          "855:     err = uv_utf8_to_utf16_alloc(options.cwd, &cwd);",
          "856:     if (err)",
          "859:   } else {",
          "",
          "[Removed Lines]",
          "839:     goto done;",
          "845:     goto done;",
          "849:       if (err)",
          "850:        goto done;",
          "857:       goto done;",
          "",
          "[Added Lines]",
          "839:     goto immediate_failure;",
          "845:     goto immediate_failure;",
          "849:      if (err)",
          "850:        goto immediate_failure;",
          "857:       goto immediate_failure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "863:     cwd_len = GetCurrentDirectoryW(0, NULL);",
          "864:     if (!cwd_len) {",
          "865:       err = GetLastError();",
          "867:     }",
          "869:     cwd = (WCHAR*) malloc(cwd_len * sizeof(WCHAR));",
          "870:     if (cwd == NULL) {",
          "871:       err = ERROR_OUTOFMEMORY;",
          "873:     }",
          "875:     r = GetCurrentDirectoryW(cwd_len, cwd);",
          "876:     if (r == 0 || r >= cwd_len) {",
          "877:       err = GetLastError();",
          "879:     }",
          "880:   }",
          "883:   {",
          "884:     DWORD path_len, r;",
          "886:     path_len = GetEnvironmentVariableW(L\"PATH\", NULL, 0);",
          "887:     if (path_len == 0) {",
          "888:       err = GetLastError();",
          "890:     }",
          "893:     path = (WCHAR*) malloc(path_len * sizeof(WCHAR));",
          "894:     if (path == NULL) {",
          "895:       err = ERROR_OUTOFMEMORY;",
          "897:     }",
          "899:     r = GetEnvironmentVariableW(L\"PATH\", path, path_len);",
          "900:     if (r == 0 || r >= path_len) {",
          "901:       err = GetLastError();",
          "903:     }",
          "904:   }",
          "906:   application_path = search_path(application,",
          "907:                                  cwd,",
          "908:                                  path);",
          "909:   if (application_path == NULL) {",
          "911:     err = ERROR_FILE_NOT_FOUND;",
          "913:   }",
          "919:   startup.cb = sizeof(startup);",
          "920:   startup.lpReserved = NULL;",
          "921:   startup.lpDesktop = NULL;",
          "",
          "[Removed Lines]",
          "866:       goto done;",
          "872:       goto done;",
          "878:       goto done;",
          "889:       goto done;",
          "896:       goto done;",
          "902:       goto done;",
          "912:     goto done;",
          "915:   err = uv__stdio_create(loop, &options, &process->child_stdio_buffer);",
          "916:   if (err)",
          "917:     goto done;",
          "",
          "[Added Lines]",
          "866:       goto immediate_failure;",
          "872:       goto immediate_failure;",
          "878:       goto immediate_failure;",
          "889:       goto immediate_failure;",
          "895:       goto immediate_failure;",
          "901:       goto immediate_failure;",
          "905:   err = uv__stdio_create(loop, &options, &process->child_stdio_buffer);",
          "906:   if (err)",
          "907:     goto immediate_failure;",
          "917:     goto success_or_async_failure;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     err = GetLastError();",
          "1014:   }",
          "1017:   free(application);",
          "1018:   free(application_path);",
          "1019:   free(arguments);",
          "",
          "[Removed Lines]",
          "1016: done:",
          "",
          "[Added Lines]",
          "1019:  success_or_async_failure:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1040:   }",
          "1042:   return 0;",
          "1043: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1049:  immediate_failure:",
          "1050:   free(application);",
          "1051:   free(application_path);",
          "1052:   free(arguments);",
          "1053:   free(cwd);",
          "1054:   free(env);",
          "1055:   free(path);",
          "1057:   assert(process->child_stdio_buffer == NULL);",
          "1059:   return uv_translate_sys_error(err);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70c42563c1df750ca4700582c9904806f30836ed",
      "candidate_info": {
        "commit_hash": "70c42563c1df750ca4700582c9904806f30836ed",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/70c42563c1df750ca4700582c9904806f30836ed",
        "files": [
          "Makefile.am",
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/getnameinfo.c",
          "src/unix/threadpool.c",
          "src/win/getnameinfo.c",
          "src/win/internal.h",
          "src/win/req-inl.h",
          "test/test-getnameinfo.c",
          "test/test-list.h",
          "uv.gyp"
        ],
        "message": "unix, windows: getnameinfo implementation\n\nCloses #852",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/getnameinfo.c||src/unix/getnameinfo.c",
          "src/unix/threadpool.c||src/unix/threadpool.c",
          "src/win/getnameinfo.c||src/win/getnameinfo.c",
          "src/win/internal.h||src/win/internal.h",
          "src/win/req-inl.h||src/win/req-inl.h",
          "test/test-getnameinfo.c||test/test-getnameinfo.c",
          "test/test-list.h||test/test-list.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:                     src/win/fs-event.c \\",
          "52:                     src/win/fs.c \\",
          "53:                     src/win/getaddrinfo.c \\",
          "54:                     src/win/handle.c \\",
          "55:                     src/win/handle-inl.h \\",
          "56:                     src/win/internal.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:                     src/win/getnameinfo.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:                    src/unix/dl.c \\",
          "87:                    src/unix/fs.c \\",
          "88:                    src/unix/getaddrinfo.c \\",
          "89:                    src/unix/internal.h \\",
          "90:                    src/unix/loop-watcher.c \\",
          "91:                    src/unix/loop.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:                    src/unix/getnameinfo.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:                          test/test-get-loadavg.c \\",
          "139:                          test/test-get-memory.c \\",
          "140:                          test/test-getaddrinfo.c \\",
          "141:                          test/test-getsockname.c \\",
          "142:                          test/test-hrtime.c \\",
          "143:                          test/test-idle.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:                          test/test-getnameinfo.c \\",
          "",
          "---------------"
        ],
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:   struct addrinfo* res;                                                       \\",
          "282:   int retcode;",
          "284: #define UV_PROCESS_PRIVATE_FIELDS                                             \\",
          "285:   void* queue[2];                                                             \\",
          "286:   int status;                                                                 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: #define UV_GETNAMEINFO_PRIVATE_FIELDS                                         \\",
          "285:   struct uv__work work_req;                                                   \\",
          "286:   uv_getnameinfo_cb getnameinfo_cb;                                           \\",
          "287:   struct sockaddr_storage storage;                                            \\",
          "288:   int flags;                                                                  \\",
          "289:   char host[NI_MAXHOST];                                                      \\",
          "290:   char service[NI_MAXSERV];                                                   \\",
          "291:   int retcode;",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:   struct addrinfoW* res;                                                      \\",
          "529:   int retcode;",
          "531: #define UV_PROCESS_PRIVATE_FIELDS                                             \\",
          "532:   struct uv_process_exit_s {                                                  \\",
          "533:     UV_REQ_FIELDS                                                             \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531: #define UV_GETNAMEINFO_PRIVATE_FIELDS                                         \\",
          "532:   uv_getnameinfo_cb getnameinfo_cb;                                           \\",
          "533:   struct sockaddr_storage storage;                                            \\",
          "534:   int flags;                                                                  \\",
          "535:   char host[NI_MAXHOST];                                                      \\",
          "536:   char service[NI_MAXSERV];                                                   \\",
          "537:   int retcode;",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   XX(FS, fs)                                                                  \\",
          "168:   XX(WORK, work)                                                              \\",
          "169:   XX(GETADDRINFO, getaddrinfo)                                                \\",
          "171: typedef enum {",
          "172: #define XX(code, _) UV_ ## code = UV__ ## code,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   XX(GETNAMEINFO, getnameinfo)                                                \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217: typedef struct uv_req_s uv_req_t;",
          "218: typedef struct uv_getaddrinfo_s uv_getaddrinfo_t;",
          "219: typedef struct uv_shutdown_s uv_shutdown_t;",
          "220: typedef struct uv_write_s uv_write_t;",
          "221: typedef struct uv_connect_s uv_connect_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: typedef struct uv_getnameinfo_s uv_getnameinfo_t;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "419: typedef void (*uv_getaddrinfo_cb)(uv_getaddrinfo_t* req,",
          "420:                                   int status,",
          "421:                                   struct addrinfo* res);",
          "423: typedef struct {",
          "424:   long tv_sec;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424: typedef void (*uv_getnameinfo_cb)(uv_getnameinfo_t* req,",
          "425:                                   int status,",
          "426:                                   char* hostname,",
          "427:                                   char* service);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1451: UV_EXTERN void uv_freeaddrinfo(struct addrinfo* ai);",
          "1455: typedef enum {",
          "1456:   UV_IGNORE         = 0x00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1465: struct uv_getnameinfo_s {",
          "1466:   UV_REQ_FIELDS",
          "1468:   uv_loop_t* loop;",
          "1469:   UV_GETNAMEINFO_PRIVATE_FIELDS",
          "1470: };",
          "1480: UV_EXTERN int uv_getnameinfo(uv_loop_t* loop,",
          "1481:                              uv_getnameinfo_t* req,",
          "1482:                              uv_getnameinfo_cb getnameinfo_cb,",
          "1483:                              const struct sockaddr* addr,",
          "1484:                              int flags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2252: #undef UV_ASYNC_PRIVATE_FIELDS",
          "2253: #undef UV_TIMER_PRIVATE_FIELDS",
          "2254: #undef UV_GETADDRINFO_PRIVATE_FIELDS",
          "2255: #undef UV_FS_REQ_PRIVATE_FIELDS",
          "2256: #undef UV_WORK_PRIVATE_FIELDS",
          "2257: #undef UV_FS_EVENT_PRIVATE_FIELDS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2288: #undef UV_GETNAMEINFO_PRIVATE_FIELDS",
          "",
          "---------------"
        ],
        "src/unix/getnameinfo.c||src/unix/getnameinfo.c": [
          "File: src/unix/getnameinfo.c -> src/unix/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <assert.h>",
          "23: #include <stdlib.h>",
          "24: #include <stdio.h>",
          "25: #include <string.h>",
          "27: #include \"uv.h\"",
          "28: #include \"internal.h\"",
          "31: static void uv__getnameinfo_work(struct uv__work* w) {",
          "32:   uv_getnameinfo_t* req;",
          "33:   int err;",
          "34:   socklen_t salen;",
          "36:   req = container_of(w, uv_getnameinfo_t, work_req);",
          "38:   if (req->storage.ss_family == AF_INET)",
          "39:     salen = sizeof(struct sockaddr_in);",
          "40:   else if (req->storage.ss_family == AF_INET6)",
          "41:     salen = sizeof(struct sockaddr_in6);",
          "42:   else",
          "43:     abort();",
          "45:   err = getnameinfo((struct sockaddr*) &req->storage,",
          "46:                     salen,",
          "47:                     req->host,",
          "48:                     sizeof(req->host),",
          "49:                     req->service,",
          "50:                     sizeof(req->service),",
          "51:                     req->flags);",
          "52:   req->retcode = uv__getaddrinfo_translate_error(err);",
          "53: }",
          "55: static void uv__getnameinfo_done(struct uv__work* w, int status) {",
          "56:   uv_getnameinfo_t* req;",
          "57:   char* host;",
          "58:   char* service;",
          "60:   req = container_of(w, uv_getnameinfo_t, work_req);",
          "61:   uv__req_unregister(req->loop, req);",
          "63:   if (req->retcode == 0) {",
          "64:     host = req->host;",
          "65:     service = req->service;",
          "66:   } else {",
          "67:     host = NULL;",
          "68:     service = NULL;",
          "69:   }",
          "71:   req->getnameinfo_cb(req, req->retcode, host, service);",
          "72: }",
          "79: int uv_getnameinfo(uv_loop_t* loop,",
          "80:                    uv_getnameinfo_t* req,",
          "81:                    uv_getnameinfo_cb getnameinfo_cb,",
          "82:                    const struct sockaddr* addr,",
          "83:                    int flags) {",
          "84:   if (req == NULL || getnameinfo_cb == NULL || addr == NULL)",
          "85:     return UV_EINVAL;",
          "87:   if (addr->sa_family == AF_INET) {",
          "88:     memcpy(&req->storage,",
          "89:            addr,",
          "90:            sizeof(struct sockaddr_in));",
          "91:   } else if (addr->sa_family == AF_INET6) {",
          "92:     memcpy(&req->storage,",
          "93:            addr,",
          "94:            sizeof(struct sockaddr_in6));",
          "95:   } else {",
          "96:     return UV_EINVAL;",
          "97:   }",
          "99:   uv__req_init(loop, (uv_req_t*)req, UV_GETNAMEINFO);",
          "101:   req->getnameinfo_cb = getnameinfo_cb;",
          "102:   req->flags = flags;",
          "103:   req->type = UV_GETNAMEINFO;",
          "104:   req->loop = loop;",
          "106:   uv__work_submit(loop,",
          "107:                   &req->work_req,",
          "108:                   uv__getnameinfo_work,",
          "109:                   uv__getnameinfo_done);",
          "111:   return 0;",
          "112: }",
          "",
          "---------------"
        ],
        "src/unix/threadpool.c||src/unix/threadpool.c": [
          "File: src/unix/threadpool.c -> src/unix/threadpool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     loop =  ((uv_getaddrinfo_t*) req)->loop;",
          "269:     wreq = &((uv_getaddrinfo_t*) req)->work_req;",
          "270:     break;",
          "271:   case UV_WORK:",
          "272:     loop =  ((uv_work_t*) req)->loop;",
          "273:     wreq = &((uv_work_t*) req)->work_req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   case UV_GETNAMEINFO:",
          "272:     loop = ((uv_getnameinfo_t*) req)->loop;",
          "273:     wreq = &((uv_getnameinfo_t*) req)->work_req;",
          "274:     break;",
          "",
          "---------------"
        ],
        "src/win/getnameinfo.c||src/win/getnameinfo.c": [
          "File: src/win/getnameinfo.c -> src/win/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <assert.h>",
          "23: #include <malloc.h>",
          "24: #include <stdio.h>",
          "26: #include \"uv.h\"",
          "27: #include \"internal.h\"",
          "28: #include \"req-inl.h\"",
          "32: static DWORD WINAPI getnameinfo_thread_proc(void* parameter) {",
          "33:   uv_getnameinfo_t* req = (uv_getnameinfo_t*)parameter;",
          "34:   uv_loop_t* loop = req->loop;",
          "35:   WCHAR host[NI_MAXHOST];",
          "36:   WCHAR service[NI_MAXSERV];",
          "37:   int ret = 0;",
          "39:   assert(req != NULL);",
          "41:   ret = GetNameInfoW((struct sockaddr*)&req->storage,",
          "42:                      sizeof(req->storage),",
          "43:                      host,",
          "44:                      sizeof(host),",
          "45:                      service,",
          "46:                      sizeof(service),",
          "47:                      req->flags);",
          "48:   req->retcode = uv__getaddrinfo_translate_error(ret);",
          "51:   WideCharToMultiByte(CP_UTF8,",
          "52:                       0,",
          "53:                       host,",
          "54:                       -1,",
          "55:                       req->host,",
          "56:                       sizeof(req->host),",
          "57:                       NULL,",
          "58:                       NULL);",
          "60:   WideCharToMultiByte(CP_UTF8,",
          "61:                       0,",
          "62:                       service,",
          "63:                       -1,",
          "64:                       req->service,",
          "65:                       sizeof(req->service),",
          "66:                       NULL,",
          "67:                       NULL);",
          "70:   POST_COMPLETION_FOR_REQ(loop, req);",
          "72:   return 0;",
          "73: }",
          "79: void uv_process_getnameinfo_req(uv_loop_t* loop, uv_getnameinfo_t* req) {",
          "80:   char* host;",
          "81:   char* service;",
          "83:   if (req->retcode == 0) {",
          "84:     host = req->host;",
          "85:     service = req->service;",
          "86:   } else {",
          "87:     host = NULL;",
          "88:     service = NULL;",
          "89:   }",
          "91:   uv__req_unregister(loop, req);",
          "92:   req->getnameinfo_cb(req, req->retcode, host, service);",
          "93: }",
          "101: int uv_getnameinfo(uv_loop_t* loop,",
          "102:                    uv_getnameinfo_t* req,",
          "103:                    uv_getnameinfo_cb getnameinfo_cb,",
          "104:                    const struct sockaddr* addr,",
          "105:                    int flags) {",
          "106:   if (req == NULL || getnameinfo_cb == NULL || addr == NULL)",
          "107:     return UV_EINVAL;",
          "109:   if (addr->sa_family == AF_INET) {",
          "110:     memcpy(&req->storage,",
          "111:            addr,",
          "112:            sizeof(struct sockaddr_in));",
          "113:   } else if (addr->sa_family == AF_INET6) {",
          "114:     memcpy(&req->storage,",
          "115:            addr,",
          "116:            sizeof(struct sockaddr_in6));",
          "117:   } else {",
          "118:     return UV_EINVAL;",
          "119:   }",
          "121:   uv_req_init(loop, (uv_req_t*)req);",
          "123:   req->getnameinfo_cb = getnameinfo_cb;",
          "124:   req->flags = flags;",
          "125:   req->type = UV_GETNAMEINFO;",
          "126:   req->loop = loop;",
          "129:   if (QueueUserWorkItem(&getnameinfo_thread_proc,",
          "130:                         req,",
          "131:                         WT_EXECUTELONGFUNCTION) == 0) {",
          "132:     return uv_translate_sys_error(GetLastError());",
          "133:   }",
          "135:   uv__req_register(loop, req);",
          "137:   return 0;",
          "138: }",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: void uv_process_getaddrinfo_req(uv_loop_t* loop, uv_getaddrinfo_t* req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: void uv_process_getnameinfo_req(uv_loop_t* loop, uv_getnameinfo_t* req);",
          "",
          "---------------"
        ],
        "src/win/req-inl.h||src/win/req-inl.h": [
          "File: src/win/req-inl.h -> src/win/req-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:         uv_process_getaddrinfo_req(loop, (uv_getaddrinfo_t*) req);",
          "200:         break;",
          "202:       case UV_PROCESS_EXIT:",
          "203:         uv_process_proc_exit(loop, (uv_process_t*) req->data);",
          "204:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:       case UV_GETNAMEINFO:",
          "203:         uv_process_getnameinfo_req(loop, (uv_getnameinfo_t*)req);",
          "204:         break;",
          "",
          "---------------"
        ],
        "test/test-getnameinfo.c||test/test-getnameinfo.c": [
          "File: test/test-getnameinfo.c -> test/test-getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "24: #include <stdio.h>",
          "25: #include <stdlib.h>",
          "26: #include <string.h>",
          "29: static const char* address_ip4 = \"127.0.0.1\";",
          "30: static const char* address_ip6 = \"::1\";",
          "31: static const int port = 80;",
          "33: static struct sockaddr_in addr4;",
          "34: static struct sockaddr_in6 addr6;",
          "35: static uv_getnameinfo_t req;",
          "37: static void getnameinfo_req(uv_getnameinfo_t* handle,",
          "38:                             int status,",
          "39:                             char* hostname,",
          "40:                             char* service) {",
          "41:   ASSERT(handle != NULL);",
          "42:   ASSERT(status == 0);",
          "43:   ASSERT(hostname != NULL);",
          "44:   ASSERT(service != NULL);",
          "45: }",
          "47: TEST_IMPL(getnameinfo_basic_ip4) {",
          "48:   int r;",
          "50:   r = uv_ip4_addr(address_ip4, port, &addr4);",
          "51:   ASSERT(r == 0);",
          "53:   r = uv_getnameinfo(uv_default_loop(),",
          "54:                      &req,",
          "55:                      &getnameinfo_req,",
          "56:                      (const struct sockaddr*)&addr4,",
          "57:                      0);",
          "58:   ASSERT(r == 0);",
          "60:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "62:   MAKE_VALGRIND_HAPPY();",
          "63:   return 0;",
          "64: }",
          "66: TEST_IMPL(getnameinfo_basic_ip6) {",
          "67:   int r;",
          "69:   r = uv_ip6_addr(address_ip6, port, &addr6);",
          "70:   ASSERT(r == 0);",
          "72:   r = uv_getnameinfo(uv_default_loop(),",
          "73:                      &req,",
          "74:                      &getnameinfo_req,",
          "75:                      (const struct sockaddr*)&addr6,",
          "76:                      0);",
          "77:   ASSERT(r == 0);",
          "79:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "81:   MAKE_VALGRIND_HAPPY();",
          "82:   return 0;",
          "83: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: TEST_DECLARE   (getaddrinfo_fail)",
          "164: TEST_DECLARE   (getaddrinfo_basic)",
          "165: TEST_DECLARE   (getaddrinfo_concurrent)",
          "166: TEST_DECLARE   (getsockname_tcp)",
          "167: TEST_DECLARE   (getsockname_udp)",
          "168: TEST_DECLARE   (fail_always)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166: TEST_DECLARE   (getnameinfo_basic_ip4)",
          "167: TEST_DECLARE   (getnameinfo_basic_ip6)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:   TEST_ENTRY  (getaddrinfo_basic)",
          "473:   TEST_ENTRY  (getaddrinfo_concurrent)",
          "475:   TEST_ENTRY  (getsockname_tcp)",
          "476:   TEST_ENTRY  (getsockname_udp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:   TEST_ENTRY  (getnameinfo_basic_ip4)",
          "478:   TEST_ENTRY  (getnameinfo_basic_ip6)",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:             'src/win/fs.c',",
          "87:             'src/win/fs-event.c',",
          "88:             'src/win/getaddrinfo.c',",
          "89:             'src/win/handle.c',",
          "90:             'src/win/handle-inl.h',",
          "91:             'src/win/internal.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:             'src/win/getnameinfo.c',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:             'src/unix/dl.c',",
          "142:             'src/unix/fs.c',",
          "143:             'src/unix/getaddrinfo.c',",
          "144:             'src/unix/internal.h',",
          "145:             'src/unix/loop.c',",
          "146:             'src/unix/loop-watcher.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:             'src/unix/getnameinfo.c',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:         'test/test-get-currentexe.c',",
          "319:         'test/test-get-memory.c',",
          "320:         'test/test-getaddrinfo.c',",
          "321:         'test/test-getsockname.c',",
          "322:         'test/test-hrtime.c',",
          "323:         'test/test-idle.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:         'test/test-getnameinfo.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd0c19b1d3c56acf0ade7687006e12e75fbda36d",
      "candidate_info": {
        "commit_hash": "cd0c19b1d3c56acf0ade7687006e12e75fbda36d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/cd0c19b1d3c56acf0ade7687006e12e75fbda36d",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "include/uv-version.h"
        ],
        "message": "2014.03.11, Version 0.11.22 (Unstable)\n\nChanges since version 0.11.21:\n\n* unix, windows: map ERANGE errno (Sa\u00fal Ibarra Corretg\u00e9)\n\n* unix, windows: make uv_cwd be consistent with uv_exepath (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* process: remove debug perror() prints (Fedor Indutny)\n\n* windows: fall back for volume info query (Isaiah Norton)\n\n* pipe: allow queueing pending handles (Fedor Indutny)\n\n* windows: fix winsock status codes for address errors (Raul Martins)\n\n* windows: Remove unused variable from uv__pipe_insert_pending_socket\n  (David Capello)\n\n* unix: workaround broken pthread_sigmask on Android (Paul Tan)\n\n* error: add ENXIO for O_NONBLOCK FIFO open() (Fedor Indutny)\n\n* freebsd: use accept4, introduced in version 10 (Sa\u00fal Ibarra Corretg\u00e9)\n\n* windows: fix warnings of MinGW -Wall -O3 (StarWing)\n\n* openbsd, osx: fix compilation warning on scandir (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* linux: always deregister closing fds from epoll (Geoffry Song)\n\n* unix: reopen tty as /dev/tty (Sa\u00fal Ibarra Corretg\u00e9)\n\n* kqueue: invalidate fd in uv_fs_event_t (Fedor Indutny)",
        "before_after_code_files": [
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "35: #define UV_VERSION_PATCH 22",
          "",
          "[Removed Lines]",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84ed98e88ed41b5694a39a4840a61404681c6d7c",
      "candidate_info": {
        "commit_hash": "84ed98e88ed41b5694a39a4840a61404681c6d7c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/84ed98e88ed41b5694a39a4840a61404681c6d7c",
        "files": [
          "test/test-udp-ipv6.c"
        ],
        "message": "test: skip UDP dualstack test on BSDs\n\nAs of right now Linux comes with bindv6only=0 by default but BSDs use\nbindv6only=1. It can be changed systemwide with sysctl, but it's not\nnice to depend on the environment for running tests, so disable it just\non BSDs.",
        "before_after_code_files": [
          "test/test-udp-ipv6.c||test/test-udp-ipv6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-udp-ipv6.c||test/test-udp-ipv6.c": [
          "File: test/test-udp-ipv6.c -> test/test-udp-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: TEST_IMPL(udp_dual_stack) {",
          "150:   do_test(ipv6_recv_ok, 0);",
          "152:   ASSERT(recv_cb_called == 1);",
          "153:   ASSERT(send_cb_called == 1);",
          "155:   return 0;",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #if defined(__DragonFly__)  || \\",
          "151:     defined(__FreeBSD__)    || \\",
          "152:     defined(__OpenBSD__)    || \\",
          "153:     defined(__NetBSD__)",
          "154:   RETURN_SKIP(\"dual stack not enabled by default in this OS.\");",
          "155: #else",
          "162: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a284b90c03735095763523a7c63f80140dc6a03a",
      "candidate_info": {
        "commit_hash": "a284b90c03735095763523a7c63f80140dc6a03a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a284b90c03735095763523a7c63f80140dc6a03a",
        "files": [
          "Makefile.am",
          "src/unix/stream.c",
          "test/test-list.h",
          "test/test-shutdown-twice.c",
          "uv.gyp"
        ],
        "message": "unix: correct error when calling uv_shutdown twice\n\nBefore this one of the requests was left as a ghost in the system.\nSee https://github.com/JuliaLang/julia/issues/5793",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/stream.c||src/unix/stream.c",
          "test/test-list.h||test/test-list.h",
          "test/test-shutdown-twice.c||test/test-shutdown-twice.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:                          test/test-semaphore.c \\",
          "167:                          test/test-shutdown-close.c \\",
          "168:                          test/test-shutdown-eof.c \\",
          "169:                          test/test-signal-multiple-loops.c \\",
          "170:                          test/test-signal.c \\",
          "171:                          test/test-spawn.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:                          test/test-shutdown-twice.c \\",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:   if (!(stream->flags & UV_STREAM_WRITABLE) ||",
          "1110:       stream->flags & UV_STREAM_SHUT ||",
          "1111:       stream->flags & UV_CLOSED ||",
          "1112:       stream->flags & UV_CLOSING) {",
          "1113:     return -ENOTCONN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111:       stream->flags & UV_STREAM_SHUTTING ||",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: TEST_DECLARE   (shutdown_close_tcp)",
          "100: TEST_DECLARE   (shutdown_close_pipe)",
          "101: TEST_DECLARE   (shutdown_eof)",
          "102: TEST_DECLARE   (callback_stack)",
          "103: TEST_DECLARE   (error_message)",
          "104: TEST_DECLARE   (timer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: TEST_DECLARE   (shutdown_twice)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:   TEST_ENTRY  (shutdown_eof)",
          "364:   TEST_HELPER (shutdown_eof, tcp4_echo_server)",
          "366:   TEST_ENTRY  (callback_stack)",
          "367:   TEST_HELPER (callback_stack, tcp4_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:   TEST_ENTRY  (shutdown_twice)",
          "368:   TEST_HELPER (shutdown_twice, tcp4_echo_server)",
          "",
          "---------------"
        ],
        "test/test-shutdown-twice.c||test/test-shutdown-twice.c": [
          "File: test/test-shutdown-twice.c -> test/test-shutdown-twice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"uv.h\"",
          "28: #include \"task.h\"",
          "30: static uv_shutdown_t req1;",
          "31: static uv_shutdown_t req2;",
          "33: static int shutdown_cb_called = 0;",
          "35: static void close_cb(uv_handle_t* handle) {",
          "37: }",
          "39: static void shutdown_cb(uv_shutdown_t* req, int status) {",
          "40:   ASSERT(req == &req1);",
          "41:   ASSERT(status == 0);",
          "42:   shutdown_cb_called++;",
          "43:   uv_close((uv_handle_t*) req->handle, close_cb);",
          "44: }",
          "46: static void connect_cb(uv_connect_t* req, int status) {",
          "47:   int r;",
          "49:   ASSERT(status == 0);",
          "51:   r = uv_shutdown(&req1, req->handle, shutdown_cb);",
          "52:   ASSERT(r == 0);",
          "53:   r = uv_shutdown(&req2, req->handle, shutdown_cb);",
          "54:   ASSERT(r != 0);",
          "56: }",
          "58: TEST_IMPL(shutdown_twice) {",
          "59:   struct sockaddr_in addr;",
          "60:   uv_loop_t* loop;",
          "61:   int r;",
          "62:   uv_tcp_t h;",
          "64:   uv_connect_t connect_req;",
          "66:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "67:   loop = uv_default_loop();",
          "69:   r = uv_tcp_init(loop, &h);",
          "71:   r = uv_tcp_connect(&connect_req,",
          "72:                      &h,",
          "73:                      (const struct sockaddr*) &addr,",
          "74:                      connect_cb);",
          "75:   ASSERT(r == 0);",
          "77:   r = uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "78:   ASSERT(r == 0);",
          "80:   ASSERT(shutdown_cb_called == 1);",
          "82:   MAKE_VALGRIND_HAPPY();",
          "83:   return 0;",
          "84: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:         'test/test-semaphore.c',",
          "346:         'test/test-shutdown-close.c',",
          "347:         'test/test-shutdown-eof.c',",
          "348:         'test/test-signal.c',",
          "349:         'test/test-signal-multiple-loops.c',",
          "350:         'test/test-spawn.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:         'test/test-shutdown-twice.c',",
          "",
          "---------------"
        ]
      }
    }
  ]
}