{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
      "candidate_info": {
        "commit_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_devsym.c",
          "test/permutations.test"
        ],
        "message": "As it requires wal mode support, do not run test file chunksize.test as part of the \"journaltest\" permutation.\n\nFossilOrigin-Name: acd2df36c2876ff3cc477889fc99f493cdf53a656bdb84bde6121676c9eeed1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_devsym.c||src/test_devsym.c",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
      "candidate_info": {
        "commit_hash": "e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7476115ad9c9090cc3be93fb5bfc42bcd60961e",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the writefile() SQL function implemented by ext/misc/fileio.c such that any directories created have standard umask permissions, not permissions of the file that is to be written.\n\nFossilOrigin-Name: f11c89595dc65f89be6df62830c8cddd3933acfd4baaecd348ecd99e71db5831",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: static int makeDirectory(",
          "305: ){",
          "306:   char *zCopy = sqlite3_mprintf(\"%s\", zFile);",
          "307:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "303:   const char *zFile,",
          "304:   mode_t mode",
          "",
          "[Added Lines]",
          "304:   const char *zFile",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:       rc2 = fileStat(zCopy, &sStat);",
          "324:       if( rc2!=0 ){",
          "326:       }else{",
          "327:         if( !S_ISDIR(sStat.st_mode) ) rc = SQLITE_ERROR;",
          "328:       }",
          "",
          "[Removed Lines]",
          "325:         if( mkdir(zCopy, mode & 0777) ) rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "325:         if( mkdir(zCopy, 0777) ) rc = SQLITE_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:   res = writeFile(context, zFile, argv[1], mode, mtime);",
          "482:   if( res==1 && errno==ENOENT ){",
          "484:       res = writeFile(context, zFile, argv[1], mode, mtime);",
          "485:     }",
          "486:   }",
          "",
          "[Removed Lines]",
          "483:     if( makeDirectory(zFile, mode)==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "483:     if( makeDirectory(zFile)==SQLITE_OK ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 191a023ae708490eca61b3a42a3df41bb6709079f3905881abb82ebd46182607",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce5752cd1f748e9449afc3fcfa6e1e9f1670d1e9",
      "candidate_info": {
        "commit_hash": "ce5752cd1f748e9449afc3fcfa6e1e9f1670d1e9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ce5752cd1f748e9449afc3fcfa6e1e9f1670d1e9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add some missing VdbeCoverage() macros.\n\nFossilOrigin-Name: d03b611302f68483770d49b113b4ed685ba03526d2007647c306f8ec7ae697d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10ee9e337e5f8a846dc827f6deb07930a790ac9d290b62f73de59454e465d5a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "1324:   }",
          "1325:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1331:   sqlite3MayAbort(pParse);",
          "1332:   sqlite3VdbeAddOp2(v, OP_Halt, SQLITE_ERROR, OE_Abort);",
          "1333:   sqlite3VdbeAppendP4(v, (void*)azErr[eCond], P4_STATIC);",
          "",
          "[Removed Lines]",
          "1326:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1327:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "1328:   VdbeCoverageNeverNullIf(v, eCond==2);",
          "1329:   VdbeCoverageNeverNullIf(v, eCond==3);",
          "1330:   VdbeCoverageNeverNullIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1326:   VdbeCoverageIf(v, eCond==0);",
          "1327:   VdbeCoverageIf(v, eCond==1);",
          "1328:   VdbeCoverageIf(v, eCond==2);",
          "1329:   VdbeCoverageIf(v, eCond==3);",
          "1330:   VdbeCoverageIf(v, eCond==4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1578:   if( pMWin->eExclude==TK_CURRENT ){",
          "1579:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1580:   }else if( pMWin->eExclude!=TK_NO ){",
          "1581:     int addr;",
          "1582:     int addrEq = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580:     VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1587:     }",
          "1588:     if( pMWin->eExclude==TK_TIES ){",
          "1589:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, 0, regRowid);",
          "1590:     }",
          "1591:     if( pKeyInfo ){",
          "1592:       windowReadPeerValues(p, csr, regPeer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:       VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "583521fbb0bd28c45931aff6bdaddc9e7b6836dc",
      "candidate_info": {
        "commit_hash": "583521fbb0bd28c45931aff6bdaddc9e7b6836dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/583521fbb0bd28c45931aff6bdaddc9e7b6836dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts4umlaut.test"
        ],
        "message": "Fix cut-and-paste error in test file fts4umlaut.test.\n\nFossilOrigin-Name: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts4umlaut.test||test/fts4umlaut.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db8d1d12f5c1673404b2afb5426d5ea3afe3b69d01f8f2bc47ffdf70684fdf24",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4umlaut.test||test/fts4umlaut.test": [
          "File: test/fts4umlaut.test -> test/fts4umlaut.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4umlaut",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "26:   CREATE VIRTUAL TABLE t2 USING fts4(",
          "27:       x,",
          "28:       tokenize=unicode61 \"remove_diacritics=2\"",
          "",
          "[Removed Lines]",
          "19: ifcapable !fts3||!fts5 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "",
          "[Added Lines]",
          "19: ifcapable !fts3 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts4(x, tokenize=unicode61);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     SELECT count(*) FROM t1 WHERE t1 MATCH 'Ha Noi'",
          "50:   } $res1",
          "53:     DELETE FROM t2;",
          "54:     INSERT INTO t2(rowid, x) VALUES (1, 'Ha Noi');",
          "55:     SELECT count(*) FROM t2 WHERE t2 MATCH $q",
          "56:   } $res2",
          "58:     DELETE FROM t2;",
          "59:     INSERT INTO t2(rowid, x) VALUES (1, $q);",
          "60:     SELECT count(*) FROM t2 WHERE t2 MATCH 'Ha Noi'",
          "",
          "[Removed Lines]",
          "52:   do_execsql_test 1.$tn.2 {",
          "57:   do_execsql_test 1.$tn.2 {",
          "",
          "[Added Lines]",
          "52:   do_execsql_test 1.$tn.3 {",
          "57:   do_execsql_test 1.$tn.4 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17df761a84c39af3ff7de311b872cfce59b7fb37",
      "candidate_info": {
        "commit_hash": "17df761a84c39af3ff7de311b872cfce59b7fb37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17df761a84c39af3ff7de311b872cfce59b7fb37",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix harmless compiler warning in lemon.\n\nFossilOrigin-Name: 2da0eea02d128c37f2fbe764227ac526d3e993284516544adc0a216a035c5676",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e95138f5f4febde598f39e031d6e4f4d5ad0adbd8dcdd34fd0baaa78ab393417",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #define MAXRHS 1000",
          "49: #endif",
          "51: static int showPrecedenceConflict = 0;",
          "52: static char *msort(char*,char**,int(*)(const char*,const char*));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: extern void memory_error();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4919:   char *s;",
          "4920:   s = (char*)calloc( size, 1);",
          "4921:   if( s==0 ){",
          "4923:     memory_error();",
          "4924:   }",
          "4925:   return s;",
          "",
          "[Removed Lines]",
          "4922:     extern void memory_error();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}