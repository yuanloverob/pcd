{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "997be125eb0228c5b1b6dd278f617791e71192c6",
      "candidate_info": {
        "commit_hash": "997be125eb0228c5b1b6dd278f617791e71192c6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/997be125eb0228c5b1b6dd278f617791e71192c6",
        "files": [
          "ext/mbstring/php_mbregex.c"
        ],
        "message": "Fixed bug #67199\tmb_regex_encoding mishmash",
        "before_after_code_files": [
          "ext/mbstring/php_mbregex.c||ext/mbstring/php_mbregex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/mbstring/php_mbregex.c||ext/mbstring/php_mbregex.c": [
          "File: ext/mbstring/php_mbregex.c -> ext/mbstring/php_mbregex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: static int _php_mb_regex_globals_ctor(zend_mb_regex_globals *pglobals TSRMLS_DC)",
          "66: {",
          "69:  zend_hash_init(&(pglobals->ht_rc), 0, NULL, (void (*)(void *)) php_mb_regex_free_cache, 1);",
          "70:  pglobals->search_str = (zval*) NULL;",
          "71:  pglobals->search_re = (php_mb_regex_t*)NULL;",
          "",
          "[Removed Lines]",
          "67:  pglobals->default_mbctype = ONIG_ENCODING_EUC_JP;",
          "68:  pglobals->current_mbctype = ONIG_ENCODING_EUC_JP;",
          "",
          "[Added Lines]",
          "67:  pglobals->default_mbctype = ONIG_ENCODING_UTF8;",
          "68:  pglobals->current_mbctype = ONIG_ENCODING_UTF8;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e2a4a67dd4608e00a5cd548840fc92940cf9f45",
      "candidate_info": {
        "commit_hash": "1e2a4a67dd4608e00a5cd548840fc92940cf9f45",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/1e2a4a67dd4608e00a5cd548840fc92940cf9f45",
        "files": [
          "ext/tokenizer/tokenizer_data.c"
        ],
        "message": "use ./tokenizer_data_gen.sh to for adding T_POW & T_POW_EQUAL",
        "before_after_code_files": [
          "ext/tokenizer/tokenizer_data.c||ext/tokenizer/tokenizer_data.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/tokenizer/tokenizer_data.c||ext/tokenizer/tokenizer_data.c": [
          "File: ext/tokenizer/tokenizer_data.c -> ext/tokenizer/tokenizer_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  REGISTER_LONG_CONSTANT(\"T_LOGICAL_AND\", T_LOGICAL_AND, CONST_CS | CONST_PERSISTENT);",
          "40:  REGISTER_LONG_CONSTANT(\"T_PRINT\", T_PRINT, CONST_CS | CONST_PERSISTENT);",
          "41:  REGISTER_LONG_CONSTANT(\"T_YIELD\", T_YIELD, CONST_CS | CONST_PERSISTENT);",
          "42:  REGISTER_LONG_CONSTANT(\"T_SR_EQUAL\", T_SR_EQUAL, CONST_CS | CONST_PERSISTENT);",
          "43:  REGISTER_LONG_CONSTANT(\"T_SL_EQUAL\", T_SL_EQUAL, CONST_CS | CONST_PERSISTENT);",
          "44:  REGISTER_LONG_CONSTANT(\"T_XOR_EQUAL\", T_XOR_EQUAL, CONST_CS | CONST_PERSISTENT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:  REGISTER_LONG_CONSTANT(\"T_POW_EQUAL\", T_POW_EQUAL, CONST_CS | CONST_PERSISTENT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  REGISTER_LONG_CONSTANT(\"T_INT_CAST\", T_INT_CAST, CONST_CS | CONST_PERSISTENT);",
          "71:  REGISTER_LONG_CONSTANT(\"T_DEC\", T_DEC, CONST_CS | CONST_PERSISTENT);",
          "72:  REGISTER_LONG_CONSTANT(\"T_INC\", T_INC, CONST_CS | CONST_PERSISTENT);",
          "73:  REGISTER_LONG_CONSTANT(\"T_CLONE\", T_CLONE, CONST_CS | CONST_PERSISTENT);",
          "74:  REGISTER_LONG_CONSTANT(\"T_NEW\", T_NEW, CONST_CS | CONST_PERSISTENT);",
          "75:  REGISTER_LONG_CONSTANT(\"T_EXIT\", T_EXIT, CONST_CS | CONST_PERSISTENT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  REGISTER_LONG_CONSTANT(\"T_POW\", T_POW, CONST_CS | CONST_PERSISTENT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:  REGISTER_LONG_CONSTANT(\"T_NS_SEPARATOR\", T_NS_SEPARATOR, CONST_CS | CONST_PERSISTENT);",
          "161:  REGISTER_LONG_CONSTANT(\"T_ELLIPSIS\", T_ELLIPSIS, CONST_CS | CONST_PERSISTENT);",
          "162:  REGISTER_LONG_CONSTANT(\"T_DOUBLE_COLON\", T_PAAMAYIM_NEKUDOTAYIM, CONST_CS | CONST_PERSISTENT);",
          "165: }",
          "167: char *get_token_type_name(int token_type)",
          "",
          "[Removed Lines]",
          "163:  REGISTER_LONG_CONSTANT(\"T_POW\", T_POW, CONST_CS | CONST_PERSISTENT);",
          "164:  REGISTER_LONG_CONSTANT(\"T_POW_EQUAL\", T_POW_EQUAL, CONST_CS | CONST_PERSISTENT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:   case T_LOGICAL_AND: return \"T_LOGICAL_AND\";",
          "179:   case T_PRINT: return \"T_PRINT\";",
          "180:   case T_YIELD: return \"T_YIELD\";",
          "181:   case T_SR_EQUAL: return \"T_SR_EQUAL\";",
          "182:   case T_SL_EQUAL: return \"T_SL_EQUAL\";",
          "183:   case T_XOR_EQUAL: return \"T_XOR_EQUAL\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:   case T_POW_EQUAL: return \"T_POW_EQUAL\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:   case T_INT_CAST: return \"T_INT_CAST\";",
          "210:   case T_DEC: return \"T_DEC\";",
          "211:   case T_INC: return \"T_INC\";",
          "212:   case T_CLONE: return \"T_CLONE\";",
          "213:   case T_NEW: return \"T_NEW\";",
          "214:   case T_EXIT: return \"T_EXIT\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:   case T_POW: return \"T_POW\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "298:   case T_DIR: return \"T_DIR\";",
          "299:   case T_NS_SEPARATOR: return \"T_NS_SEPARATOR\";",
          "300:   case T_ELLIPSIS: return \"T_ELLIPSIS\";",
          "304:  }",
          "305:  return \"UNKNOWN\";",
          "",
          "[Removed Lines]",
          "301:   case T_POW: return \"T_POW\";",
          "302:   case T_POW_EQUAL: return \"T_POW_EQUAL\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0b7db6c4e22b1e8e1794c0e66bb68532b0083ba",
      "candidate_info": {
        "commit_hash": "f0b7db6c4e22b1e8e1794c0e66bb68532b0083ba",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f0b7db6c4e22b1e8e1794c0e66bb68532b0083ba",
        "files": [
          "sapi/litespeed/lsapi_main.c",
          "sapi/litespeed/lsapilib.c"
        ],
        "message": "update to LSAPI 6.6\n\nConflicts:\n\tsapi/litespeed/lsapi_main.c",
        "before_after_code_files": [
          "sapi/litespeed/lsapi_main.c||sapi/litespeed/lsapi_main.c",
          "sapi/litespeed/lsapilib.c||sapi/litespeed/lsapilib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sapi/litespeed/lsapi_main.c||sapi/litespeed/lsapi_main.c": [
          "File: sapi/litespeed/lsapi_main.c -> sapi/litespeed/lsapi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370: static sapi_module_struct lsapi_sapi_module =",
          "371: {",
          "372:     \"litespeed\",",
          "",
          "[Removed Lines]",
          "373:     \"LiteSpeed V6.4\",",
          "",
          "[Added Lines]",
          "373:     \"LiteSpeed V6.6\",",
          "",
          "---------------"
        ],
        "sapi/litespeed/lsapilib.c||sapi/litespeed/lsapilib.c": [
          "File: sapi/litespeed/lsapilib.c -> sapi/litespeed/lsapilib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1230: int LSAPI_InitRequest( LSAPI_Request * pReq, int fd )",
          "1231: {",
          "1232:     if ( !pReq )",
          "1233:         return -1;",
          "1234:     memset( pReq, 0, sizeof( LSAPI_Request ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1232:     int newfd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:     pReq->m_respPktHeaderEnd = &pReq->m_respPktHeader[5];",
          "1243:     if ( allocateRespHeaderBuf( pReq, LSAPI_INIT_RESP_HEADER_LEN ) == -1 )",
          "1244:         return -1;",
          "1246:     if ( isPipe( fd ) )",
          "1247:     {",
          "1248:         pReq->m_fdListen = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1247:     if ( fd == STDIN_FILENO )",
          "1248:     {",
          "1249:         fd = dup( fd );",
          "1250:         newfd = open( \"/dev/null\", O_RDWR );",
          "1251:         dup2( newfd, STDIN_FILENO );",
          "1252:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2404:     int m_iAvoidFork;",
          "2406:     lsapi_child_status * m_pChildrenStatus;",
          "2408: }lsapi_prefork_server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2415:     lsapi_child_status * m_pChildrenStatusCur;",
          "2416:     lsapi_child_status * m_pChildrenStatusEnd;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2492: static lsapi_child_status * find_child_status( int pid )",
          "2493: {",
          "2494:     lsapi_child_status * pStatus = g_prefork_server->m_pChildrenStatus;",
          "2496:     while( pStatus < pEnd )",
          "2497:     {",
          "2498:         if ( pStatus->m_pid == pid )",
          "2499:             return pStatus;",
          "2500:         ++pStatus;",
          "2501:     }",
          "2502:     return NULL;",
          "",
          "[Removed Lines]",
          "2495:     lsapi_child_status * pEnd = g_prefork_server->m_pChildrenStatus + g_prefork_server->m_iMaxChildren * 2;",
          "",
          "[Added Lines]",
          "2505:     lsapi_child_status * pEnd = g_prefork_server->m_pChildrenStatusEnd;",
          "2509:         {",
          "2510:             if ( pStatus + 1 > g_prefork_server->m_pChildrenStatusCur )",
          "2511:                 g_prefork_server->m_pChildrenStatusCur = pStatus + 1;",
          "2513:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2531:         {",
          "2532:             child_status->m_pid = 0;",
          "2533:             --g_prefork_server->m_iCurChildren;",
          "2534:         }",
          "2535:     }",
          "2537: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2551:     while(( g_prefork_server->m_pChildrenStatusCur > g_prefork_server->m_pChildrenStatus )",
          "2552:             &&( g_prefork_server->m_pChildrenStatusCur[-1].m_pid == 0 ))",
          "2553:         --g_prefork_server->m_pChildrenStatusCur;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2541:     int size = 4096;",
          "2543:     char * pBuf;",
          "2545:     size = (size + 4095 ) / 4096 * 4096;",
          "2546:     pBuf =( char*) mmap( NULL, size, PROT_READ | PROT_WRITE,",
          "2547:         MAP_ANON | MAP_SHARED, -1, 0 );",
          "",
          "[Removed Lines]",
          "2544:     size = g_prefork_server->m_iMaxChildren * sizeof( lsapi_child_status ) * 2;",
          "",
          "[Added Lines]",
          "2562:     size = (g_prefork_server->m_iMaxChildren + g_prefork_server->m_iExtraChildren ) * sizeof( lsapi_child_status ) * 2;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2551:         return -1;",
          "2552:     }",
          "2553:     memset( pBuf, 0, size );",
          "2555:     return 0;",
          "2556: }",
          "",
          "[Removed Lines]",
          "2554:     g_prefork_server->m_pChildrenStatus = (lsapi_child_status *)pBuf;",
          "",
          "[Added Lines]",
          "2572:     g_prefork_server->m_pChildrenStatus = (lsapi_child_status *)pBuf;",
          "2573:     g_prefork_server->m_pChildrenStatusCur = (lsapi_child_status *)pBuf;",
          "2574:     g_prefork_server->m_pChildrenStatusEnd = (lsapi_child_status *)pBuf + size / sizeof( lsapi_child_status );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2581:     int dying = 0;",
          "2582:     int count = 0;",
          "2583:     lsapi_child_status * pStatus = g_prefork_server->m_pChildrenStatus;",
          "2585:     while( pStatus < pEnd )",
          "2586:     {",
          "2587:         tobekilled = 0;",
          "",
          "[Removed Lines]",
          "2584:     lsapi_child_status * pEnd = g_prefork_server->m_pChildrenStatus + g_prefork_server->m_iMaxChildren * 2;",
          "",
          "[Added Lines]",
          "2604:     lsapi_child_status * pEnd = g_prefork_server->m_pChildrenStatusCur;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2594:                 if (( g_prefork_server->m_iCurChildren - dying > g_prefork_server->m_iMaxChildren)||",
          "2595:                     ( idle > g_prefork_server->m_iMaxIdleChildren ))",
          "2596:                 {",
          "2598:                 }",
          "2599:                 else",
          "2600:                 {",
          "2601:                     if (( s_max_idle_secs> 0)&&(tmCur - pStatus->m_tmWaitBegin > s_max_idle_secs + 5 ))",
          "2602:                     {",
          "2604:                     }",
          "2605:                 }",
          "2606:                 if ( !tobekilled )",
          "",
          "[Removed Lines]",
          "2597:                     tobekilled = SIGUSR1;",
          "2603:                         tobekilled = SIGUSR1;",
          "",
          "[Added Lines]",
          "2617:                     ++pStatus->m_iKillSent;",
          "2624:                         ++pStatus->m_iKillSent;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2735:         if ( pServer->m_iCurChildren >= (pServer->m_iMaxChildren + pServer->m_iExtraChildren ) )",
          "2736:         {",
          "2737:             usleep( 100000 );",
          "2738:             continue;",
          "2739:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2759:             fprintf( stderr, \"Reached max children process limit: %d, extra: %d, current: %d, please increase LSAPI_CHILDREN.\\n\",",
          "2760:                                 pServer->m_iMaxChildren, pServer->m_iExtraChildren, pServer->m_iCurChildren );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2894:         {",
          "2895:             if ( !g_running )",
          "2896:                 return -1;",
          "2898:                 return -1;",
          "2899:             FD_ZERO( &readfds );",
          "2900:             FD_SET( fd, &readfds );",
          "",
          "[Removed Lines]",
          "2897:             if (( s_pChildStatus )&&( s_pChildStatus->m_iKillSent ))",
          "",
          "[Added Lines]",
          "2921:             if ((s_req_processed)&&( s_pChildStatus )&&( s_pChildStatus->m_iKillSent ))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2922:             }",
          "2923:             else if ( ret >= 1 )",
          "2924:             {",
          "2926:                     return -1;",
          "2927:                 if ( fd == pReq->m_fdListen )",
          "2928:                 {",
          "",
          "[Removed Lines]",
          "2925:                 if (( s_pChildStatus )&&( s_pChildStatus->m_iKillSent ))",
          "",
          "[Added Lines]",
          "2949:                 if (s_req_processed && ( s_pChildStatus )&&( s_pChildStatus->m_iKillSent ))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3084:         {",
          "3085:             if ( g_prefork_server->m_iMaxChildren < 100 )",
          "3086:                 g_prefork_server->m_iMaxChildren = 100;",
          "3087:         }",
          "3088:     }",
          "3089:     if ( !s_defaultUid || !s_defaultGid )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3111:             if ( g_prefork_server->m_iExtraChildren < 1000 )",
          "3112:                 g_prefork_server->m_iExtraChildren = 1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e6a3874541bb63604636440ffd5f00e47107f52",
      "candidate_info": {
        "commit_hash": "3e6a3874541bb63604636440ffd5f00e47107f52",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3e6a3874541bb63604636440ffd5f00e47107f52",
        "files": [
          "phpdbg_lexer.c",
          "phpdbg_lexer.l"
        ],
        "message": "use a portable strndup implementation",
        "before_after_code_files": [
          "phpdbg_lexer.c||phpdbg_lexer.c",
          "phpdbg_lexer.l||phpdbg_lexer.l"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_lexer.c||phpdbg_lexer.c": [
          "File: phpdbg_lexer.c -> phpdbg_lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1026: #line 78 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1027: {",
          "1028:   phpdbg_init_param(yylval, STR_PARAM);",
          "1030:   yylval->len = yyleng;",
          "1031:   return T_PROTO;",
          "1032:  }",
          "",
          "[Removed Lines]",
          "1029:   yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "1029:   yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1087: #line 108 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1088: {",
          "1089:   phpdbg_init_param(yylval, OP_PARAM);",
          "1091:   yylval->len = yyleng;",
          "1092:   return T_OPCODE;",
          "1093:  }",
          "",
          "[Removed Lines]",
          "1090:   yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "1090:   yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1097: #line 114 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1098: {",
          "1099:   phpdbg_init_param(yylval, STR_PARAM);",
          "1101:   yylval->len = yyleng;",
          "1102:   return T_ID;",
          "1103:  }",
          "",
          "[Removed Lines]",
          "1100:   yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "1100:   yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1108: #line 122 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1109: {",
          "1110:  phpdbg_init_param(yylval, STR_PARAM);",
          "1112:  yylval->len = yyleng;",
          "1113:  BEGIN(INITIAL);",
          "1114:  return T_INPUT;",
          "",
          "[Removed Lines]",
          "1111:  yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "1111:  yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------"
        ],
        "phpdbg_lexer.l||phpdbg_lexer.l": [
          "File: phpdbg_lexer.l -> phpdbg_lexer.l",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: <INITIAL,NORMAL>{",
          "78:  {ID}[:]{1}[//]{2} {",
          "79:   phpdbg_init_param(yylval, STR_PARAM);",
          "81:   yylval->len = yyleng;",
          "82:   return T_PROTO;",
          "83:  }",
          "",
          "[Removed Lines]",
          "80:   yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "80:   yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:  }",
          "108:  {OPCODE} {",
          "109:   phpdbg_init_param(yylval, OP_PARAM);",
          "111:   yylval->len = yyleng;",
          "112:   return T_OPCODE;",
          "113:  }",
          "114:  {ID}   {",
          "115:   phpdbg_init_param(yylval, STR_PARAM);",
          "117:   yylval->len = yyleng;",
          "118:   return T_ID;",
          "119:  }",
          "",
          "[Removed Lines]",
          "110:   yylval->str = strndup(yytext, yyleng);",
          "116:   yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "110:   yylval->str = zend_strndup(yytext, yyleng);",
          "116:   yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122: <RAW>{INPUT}  {",
          "123:  phpdbg_init_param(yylval, STR_PARAM);",
          "125:  yylval->len = yyleng;",
          "126:  BEGIN(INITIAL);",
          "127:  return T_INPUT;",
          "",
          "[Removed Lines]",
          "124:  yylval->str = strndup(yytext, yyleng);",
          "",
          "[Added Lines]",
          "124:  yylval->str = zend_strndup(yytext, yyleng);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84f9fe0fdcc660d7f2b479b4cd5dd4216e3bc5ff",
      "candidate_info": {
        "commit_hash": "84f9fe0fdcc660d7f2b479b4cd5dd4216e3bc5ff",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/84f9fe0fdcc660d7f2b479b4cd5dd4216e3bc5ff",
        "files": [
          "ext/standard/info.c",
          "ext/standard/tests/general_functions/bug67498.phpt"
        ],
        "message": "Fix bug #67498 - phpinfo() Type Confusion Information Leak Vulnerability",
        "before_after_code_files": [
          "ext/standard/info.c||ext/standard/info.c",
          "ext/standard/tests/general_functions/bug67498.phpt||ext/standard/tests/general_functions/bug67498.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/info.c||ext/standard/info.c": [
          "File: ext/standard/info.c -> ext/standard/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "867:   php_info_print_table_start();",
          "868:   php_info_print_table_header(2, \"Variable\", \"Value\");",
          "870:    php_info_print_table_row(2, \"PHP_SELF\", Z_STRVAL_PP(data));",
          "871:   }",
          "873:    php_info_print_table_row(2, \"PHP_AUTH_TYPE\", Z_STRVAL_PP(data));",
          "874:   }",
          "876:    php_info_print_table_row(2, \"PHP_AUTH_USER\", Z_STRVAL_PP(data));",
          "877:   }",
          "879:    php_info_print_table_row(2, \"PHP_AUTH_PW\", Z_STRVAL_PP(data));",
          "880:   }",
          "881:   php_print_gpcse_array(ZEND_STRL(\"_REQUEST\") TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "869:   if (zend_hash_find(&EG(symbol_table), \"PHP_SELF\", sizeof(\"PHP_SELF\"), (void **) &data) != FAILURE) {",
          "872:   if (zend_hash_find(&EG(symbol_table), \"PHP_AUTH_TYPE\", sizeof(\"PHP_AUTH_TYPE\"), (void **) &data) != FAILURE) {",
          "875:   if (zend_hash_find(&EG(symbol_table), \"PHP_AUTH_USER\", sizeof(\"PHP_AUTH_USER\"), (void **) &data) != FAILURE) {",
          "878:   if (zend_hash_find(&EG(symbol_table), \"PHP_AUTH_PW\", sizeof(\"PHP_AUTH_PW\"), (void **) &data) != FAILURE) {",
          "",
          "[Added Lines]",
          "869:   if (zend_hash_find(&EG(symbol_table), \"PHP_SELF\", sizeof(\"PHP_SELF\"), (void **) &data) != FAILURE && Z_TYPE_PP(data) == IS_STRING) {",
          "872:   if (zend_hash_find(&EG(symbol_table), \"PHP_AUTH_TYPE\", sizeof(\"PHP_AUTH_TYPE\"), (void **) &data) != FAILURE && Z_TYPE_PP(data) == IS_STRING) {",
          "875:   if (zend_hash_find(&EG(symbol_table), \"PHP_AUTH_USER\", sizeof(\"PHP_AUTH_USER\"), (void **) &data) != FAILURE && Z_TYPE_PP(data) == IS_STRING) {",
          "878:   if (zend_hash_find(&EG(symbol_table), \"PHP_AUTH_PW\", sizeof(\"PHP_AUTH_PW\"), (void **) &data) != FAILURE && Z_TYPE_PP(data) == IS_STRING) {",
          "",
          "---------------"
        ],
        "ext/standard/tests/general_functions/bug67498.phpt||ext/standard/tests/general_functions/bug67498.phpt": [
          "File: ext/standard/tests/general_functions/bug67498.phpt -> ext/standard/tests/general_functions/bug67498.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: phpinfo() Type Confusion Information Leak Vulnerability",
          "3: --FILE--",
          "4: <?php",
          "5: $PHP_SELF = 1;",
          "6: phpinfo(INFO_VARIABLES);",
          "8: ?>",
          "9: ==DONE==",
          "10: --EXPECTF--",
          "11: phpinfo()",
          "13: PHP Variables",
          "14: %A",
          "15: ==DONE==",
          "",
          "---------------"
        ]
      }
    }
  ]
}