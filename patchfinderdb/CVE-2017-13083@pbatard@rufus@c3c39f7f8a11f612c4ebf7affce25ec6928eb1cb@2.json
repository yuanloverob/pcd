{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a83d4318b8fdbb092c9b62a2be06d7df5bb2b0e3",
      "candidate_info": {
        "commit_hash": "a83d4318b8fdbb092c9b62a2be06d7df5bb2b0e3",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/a83d4318b8fdbb092c9b62a2be06d7df5bb2b0e3",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Simplified Chinese translation to latest\n\n* Closes #1099",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1911: ################################################################################",
          "1912: l \"zh-CN\" \"Chinese Simplified (\u7b80\u4f53\u4e2d\u6587)\" 0x0804, 0x1004",
          "1914: b \"en-US\"",
          "1916: # Main dialog",
          "1917: g IDD_DIALOG",
          "1918: t IDS_DEVICE_TXT \"\u8bbe\u5907\"",
          "1921: t IDS_FILE_SYSTEM_TXT \"\u6587\u4ef6\u7cfb\u7edf\"",
          "1922: t IDS_CLUSTER_SIZE_TXT \"\u7c07\u5927\u5c0f\"",
          "1924: t IDS_FORMAT_OPTIONS_TXT \"\u683c\u5f0f\u5316\u9009\u9879\"",
          "1925: # \u6ce8: \u51fa\u73b0\u5728 \"Format Options\" \u65c1\u8fb9\u7684\u6309\u94ae (IDC_ADVANCED) \u662f\u81ea\u52a8\u91cd\u65b0\u5b9a\u4f4d\u7684\u3002\u3002",
          "1926: t IDC_BAD_BLOCKS \"\u68c0\u67e5\u8bbe\u5907\u574f\u5757\"",
          "1927: t IDC_QUICK_FORMAT \"\u5feb\u901f\u683c\u5f0f\u5316\"",
          "1928: t IDC_EXTENDED_LABEL \"\u521b\u5efa\u6269\u5c55\u7684\u6807\u7b7e\u548c\u56fe\u6807\u6587\u4ef6\"",
          "1929: t IDCANCEL \"\u5173\u95ed\"",
          "1930: t IDC_START \"\u5f00\u59cb\"",
          "1931: t IDC_LIST_USB_HDD \"\u663e\u793a USB \u5916\u7f6e\u786c\u76d8\"",
          "",
          "[Removed Lines]",
          "1913: v 1.0.22",
          "1919: t IDS_BOOT_SELECTION_TXT \"\u5f15\u5bfc\u7c7b\u578b\"",
          "1920: t IDS_PARTITION_TYPE_TXT \"\u5206\u533a\u65b9\u6848\u548c\u76ee\u6807\u7cfb\u7edf\u7c7b\u578b\"",
          "1923: t IDS_LABEL_TXT \"\u65b0\u5377\u6807\"",
          "",
          "[Added Lines]",
          "1913: v 1.0.23",
          "1918: t IDS_DRIVE_PROPERTIES_TXT \"\u8bbe\u5907\u9009\u9879\"",
          "1920: t IDS_BOOT_SELECTION_TXT \"\u5f15\u5bfc\u7c7b\u578b\u9009\u62e9\"",
          "1921: t IDC_SELECT \"\u9009\u62e9\"",
          "1922: t IDS_IMAGE_OPTION_TXT \"\u955c\u50cf\u9009\u9879\"",
          "1923: t IDS_PARTITION_TYPE_TXT \"\u5206\u533a\u7c7b\u578b\"",
          "1924: t IDS_TARGET_SYSTEM_TXT \"\u76ee\u6807\u7cfb\u7edf\u7c7b\u578b\"",
          "1927: t IDS_LABEL_TXT \"\u5377\u6807\"",
          "1933: t IDS_STATUS_TXT \"\u72b6\u6001\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2017: t MSG_029 \"\u9ed8\u8ba4\"",
          "2018: # The following gets appended to the file system, cluster size, etc.",
          "2019: t MSG_030 \"%s (\u9ed8\u8ba4)\"",
          "2023: # Number of bad block check passes (singular for 1 pass, plural for 2 or more passes)",
          "2024: t MSG_034 \"%d \u904d\"",
          "2025: t MSG_035 \"%d \u904d\"",
          "",
          "[Removed Lines]",
          "2020: #t MSG_031 \"%s \u5206\u533a\u65b9\u6848 \u7528\u4e8e BIOS \u6216 %s \u7684\u8ba1\u7b97\u673a\"",
          "2021: #t MSG_032 \"\u7528\u4e8e BIOS \u8ba1\u7b97\u673a\u7684 %s \u5206\u533a\u65b9\u6848\"",
          "2022: #t MSG_033 \"\u7528\u4e8e UEFI \u8ba1\u7b97\u673a\u7684 %s \u5206\u533a\u65b9\u6848\"",
          "",
          "[Added Lines]",
          "2025: t MSG_031 \"BIOS (\u6216 UEFI-CSM)\"",
          "2026: t MSG_032 \"UEFI (\u975e CSM)\"",
          "2027: t MSG_033 \"BIOS \u6216 UEFI\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2156:  \"- \u9009\u62e9\u3010\u53d6\u6d88\u3011\u5219\u653e\u5f03\u64cd\u4f5c\\n\\n\"",
          "2157:  \"\u6ce8\u610f: \u6587\u4ef6\u5c06\u4f1a\u5728\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\u4e0b\u8f7d\uff0c\u800c\u5982\u679c\u5b58\u5728\u7684\u8bdd\u5219\u5c06\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u3002\"",
          "2158:  \"\u5982\u679c\u5728\u7ebf\u627e\u4e0d\u5230\u5339\u914d\u7684\uff0c\u90a3\u4e48\u5c06\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u7684\u7248\u672c\u3002\"",
          "2159: # Tooltips",
          "2160: # Partition Scheme and Target Type",
          "2164: t MSG_153 \"\u6d4b\u8bd5\u6a21\u5f0f\uff1a0x%02X\"",
          "2165: t MSG_154 \"\u6d4b\u8bd5\u6a21\u5f0f\uff1a0x%02X, 0x%02X\"",
          "2166: t MSG_155 \"\u6d4b\u8bd5\u6a21\u5f0f\uff1a0x%02X, 0x%02X, 0x%02X\"",
          "",
          "[Removed Lines]",
          "2161: t MSG_150 \"\u901a\u5e38\u6700\u5b89\u5168\u7684\u9009\u62e9\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a UEFI \u7684\u8ba1\u7b97\u673a\u5e76\u60f3\u4f7f\u7528\u539f\u751f EFI \u6a21\u5f0f\u5b89\u88c5\u7cfb\u7edf\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u9009\u62e9\u5176\u4ed6\u9009\u9879\u4e4b\u4e00\u3002\"",
          "2162: t MSG_151 \"\u82e5\u60f3\u4f7f\u7528\u539f\u751f EFI \u6a21\u5f0f\u5b89\u88c5\u7cfb\u7edf\u5374\u987b\u4f7f\u7528 Windows XP \u8bbf\u95ee\u78c1\u76d8\u5185\u5bb9\u3002\u5219\u4f7f\u7528\u672c\u9009\u9879\"",
          "2163: t MSG_152 \"\u82e5\u60f3\u4f7f\u7528\u539f\u751f EFI \u6a21\u5f0f\u5b89\u88c5\u7cfb\u7edf\u800c\u65e0\u987b Windows XP \u8bbf\u95ee USB \u78c1\u76d8\u5185\u5bb9\uff0c\u5219\u63a8\u8350\u672c\u9009\u9879\u3002\"",
          "",
          "[Added Lines]",
          "2164: t MSG_117 \"\u6807\u51c6 Windows \u5b89\u88c5\"",
          "2165: t MSG_119 \"\u9ad8\u7ea7\u8bbe\u5907\u9009\u9879\"",
          "2166: t MSG_120 \"\u9ad8\u7ea7\u683c\u5f0f\u5316\u9009\u9879\"",
          "2167: t MSG_121 \"\u663e\u793a%s\"",
          "2168: t MSG_122 \"\u9690\u85cf%s\"",
          "2171: t MSG_150 \"\u8bf7\u9009\u62e9\u60a8\u8ba1\u7b97\u673a\u652f\u6301\u7684\u542f\u52a8\u7c7b\u578b\uff0c\u5982 BIOS \u6216 UEFI\uff0c\u5426\u5219\u542f\u52a8\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\"",
          "2172: t MSG_151 \"'UEFI-CSM' \u6307\u8bbe\u5907\u53ea\u4f1a\u5728 UEFI \u7cfb\u7edf\u7684\u7ecf\u5178\u6a21\u5f0f(Legacy Mode)\u4e0b\u542f\u52a8\uff0c\u4e0d\u4f1a\u5728\u539f\u751f\u6a21\u5f0f(UEFI Mode)\u4e0b\u542f\u52a8\u3002\"",
          "2173: t MSG_152 \"'\u975e CSM' \u6307\u8bbe\u5907\u53ea\u4f1a\u5728 UEFI \u7cfb\u7edf\u7684\u539f\u751f\u6a21\u5f0f(UEFI Mode)\u4e0b\u542f\u52a8\uff0c\u4e0d\u4f1a\u5728\u7ecf\u5178\u6a21\u5f0f(Legacy Mode)\u4e0b\u542f\u52a8\u3002\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2171: t MSG_160 \"\u5207\u6362\u9ad8\u7ea7\u9009\u9879\"",
          "2172: t MSG_161 \"\u4f7f\u7528\u6d4b\u8bd5\u6a21\u5f0f\u68c0\u67e5\u8bbe\u5907\u574f\u5757\"",
          "2173: t MSG_162 \"\u53d6\u6d88\u672c\u590d\u9009\u6846\u4f7f\u7528\\\"\u6162\u901f\\\"\u5b8c\u5168\u683c\u5f0f\u5316\u65b9\u5f0f\"",
          "2174: t MSG_164 \"\u7528\u4e8e\u4f7f\u9a71\u52a8\u5668\u53ef\u5f15\u5bfc\u7684\u65b9\u6cd5\"",
          "2175: t MSG_165 \"\u70b9\u51fb\u9009\u62e9\u955c\u50cf...\"",
          "2176: t MSG_166 \"\u52fe\u9009\u672c\u6846\u5141\u8bb8\u56fd\u9645\u5377\u6807\u7684\u663e\u793a\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u8bbe\u5907\u56fe\u6807(\u521b\u5efa\u4e00\u4e2a autorun.inf)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2184: t MSG_163 \"\u7528\u4e8e\u521b\u5efa\u5206\u533a\u7684\u65b9\u6cd5\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2308: t MSG_269 \"\u4fdd\u7559\u65f6\u95f4\u6807\u8bb0\"",
          "2309: t MSG_270 \"USB \u8c03\u8bd5\"",
          "2310: t MSG_271 \"\u6b63\u5728\u8ba1\u7b97\u955c\u50cf\u6821\u9a8c\u548c: \u5df2\u5b8c\u6210 %0.1f%%\"",
          "2313: t MSG_274 \"\u68c0\u6d4b\u5230 ISOHybrid \u955c\u50cf\"",
          "2314: t MSG_275 \"\u60a8\u9009\u62e9\u7684\u955c\u50cf\u662f\u4e00\u4e2a 'ISOHybrid' (\u6df7\u5408\u5f0f)\u955c\u50cf\u3002\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u4ee5\"",
          "2315:  \"%s (\u6587\u4ef6\u590d\u5236) \u6a21\u5f0f\u6216 %s (\u78c1\u76d8) \u955c\u50cf\u6a21\u5f0f\u5199\u5165\u3002\\n\"",
          "",
          "[Removed Lines]",
          "2311: t MSG_272 \"\u6b63\u5728\u8ba1\u7b97\u9009\u62e9\u955c\u50cf\u7684 MD5, SHA1 \u548c SHA256 \u7684\u6821\u9a8c\u548c\"",
          "2312: t MSG_273 \"\u66f4\u6539\u5e94\u7528\u7a0b\u5e8f\u7684\u8bed\u8a00\"",
          "",
          "[Added Lines]",
          "2322: t MSG_272 \"\u8ba1\u7b97\u6240\u9009\u955c\u50cf\u7684 MD5, SHA1 \u548c SHA256 \u7684\u6821\u9a8c\u548c\"",
          "2323: t MSG_273 \"\u8bed\u8a00\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2318:  \"\u8bf7\u9009\u62e9\u60a8\u60f3\u7528\u4e8e\u5199\u5165\u8fd9\u4e2a\u955c\u50cf\u6240\u4f7f\u7528\u7684\u6a21\u5f0f:\"",
          "2319: t MSG_276 \"\u4ee5 %s \u6a21\u5f0f\u5199\u5165(\u63a8\u8350)\"",
          "2320: t MSG_277 \"\u4ee5 %s \u6a21\u5f0f\u5199\u5165\"",
          "2321: t MSG_279 \"\u975e\u53ef\u5f15\u5bfc\"",
          "2324: t MSG_282 \"\u72ec\u5360 USB \u9a71\u52a8\u5668\u9501\u5b9a\"",
          "2325: t MSG_283 \"\u65e0\u6548\u7b7e\u540d\"",
          "2326: t MSG_284 \"\u5df2\u4e0b\u8f7d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7f3a\u5c11\u4e00\u4e2a\u6570\u5b57\u7b7e\u540d\u3002\"",
          "",
          "[Removed Lines]",
          "2322: t MSG_280 \"\u955c\u50cf\u9009\u62e9\"",
          "2323: t MSG_281 \"(\u8bf7\u9009\u62e9\u4e00\u4e2a\u955c\u50cf)\"",
          "",
          "[Added Lines]",
          "2332: t MSG_278 \"\u68c0\u6d4b\u51b2\u7a81\u8fdb\u7a0b\u4e2d...\"",
          "2334: t MSG_280 \"\u955c\u50cf\u6587\u4ef6\"",
          "2335: t MSG_281 \"%s (\u8bf7\u9009\u62e9)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2340: t MSG_298 \"\u60a8\u9009\u62e9\u7684\u955c\u50cf\u6587\u4ef6\u5927\u5c0f\u4e0e\u5176\u671f\u671b\u5927\u5c0f\u4e0d\u7b26\uff1a %s \u6570\u636e\u7f3a\u5931\uff01\\n\\n\"",
          "2341:  \"\u5982\u679c\u6b64\u955c\u50cf\u6587\u4ef6\u4e0b\u8f7d\u81ea\u4e92\u8054\u7f51\uff0c\u8bf7\u91cd\u65b0\u4e0b\u8f7d\u5e76\u6821\u9a8c\u5176 MD5 \u6216 SHA \u6821\u9a8c\u548c\u3002\\n\\n\"",
          "2342:  \"\u60a8\u53ef\u5728 Rufus \u4e2d\u70b9\u51fb '#' \u952e\u6765\u8ba1\u7b97 MD5 \u6216 SHA \u6821\u9a8c\u548c\u3002\"",
          "2345: ################################################################################",
          "2346: l \"zh-TW\" \"Chinese Traditional (\u6b63\u9ad4\u4e2d\u6587)\" 0x0404, 0x0c04, 0x1404, 0x7c04",
          "",
          "[Removed Lines]",
          "2343: t MSG_117 \"\u6807\u51c6 Windows \u5b89\u88c5\"",
          "",
          "[Added Lines]",
          "2355: t MSG_299 \"\u65f6\u95f4\u6233\u6821\u9a8c\u9519\u8bef\"",
          "2356: t MSG_300 \"Rufus \u4e0b\u8f7d\u7684\u66f4\u65b0\u6bd4\u5f53\u524d\u7a0b\u5e8f\u66f4\u65e7\u3002\\n\\n\"",
          "2357:  \"\u4e3a\u907f\u514d\u53ef\u80fd\u7684\u653b\u51fb\uff0c\u66f4\u65b0\u5df2\u88ab\u963b\u6b62\uff0c\u4e0b\u8f7d\u7684\u66f4\u65b0\u6587\u4ef6\u5df2\u88ab\u5220\u9664\u3002\u5982\u9700\u4e86\u89e3\u66f4\u591a\uff0c\u8bf7\u67e5\u770b\u8f6f\u4ef6\u65e5\u5fd7\u3002\"",
          "2358: t MSG_301 \"\u8bbe\u7f6e\"",
          "2359: t MSG_302 \"\u5173\u4e8e\"",
          "2360: t MSG_303 \"\u65e5\u5fd7\"",
          "2361: t MSG_304 \"\u521b\u5efa\u6240\u9009\u8bbe\u5907\u7684\u955c\u50cf\"",
          "2362: t MSG_305 \"\u8bf7\u9009\u62e9\u60a8\u5e0c\u671b\u5c06 Windows \u5b89\u88c5\u81f3\u5176\u4ed6\u9a71\u52a8\u5668\uff0c\u8fd8\u662f\u76f4\u63a5\u4ece\u6b64\u9a71\u52a8\u5668\u8fd0\u884c(\u5373 Windows To Go)\u3002\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1230\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1231\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373: VS_VERSION_INFO VERSIONINFO",
          "376:  FILEFLAGSMASK 0x3fL",
          "377: #ifdef _DEBUG",
          "378:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "374:  FILEVERSION 2,18,1230,0",
          "375:  PRODUCTVERSION 2,18,1230,0",
          "",
          "[Added Lines]",
          "374:  FILEVERSION 2,18,1231,0",
          "375:  PRODUCTVERSION 2,18,1231,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:         BEGIN",
          "390:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "391:             VALUE \"FileDescription\", \"Rufus\"",
          "393:             VALUE \"InternalName\", \"Rufus\"",
          "394:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "395:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "396:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "397:             VALUE \"ProductName\", \"Rufus\"",
          "399:         END",
          "400:     END",
          "401:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "392:             VALUE \"FileVersion\", \"2.18.1230\"",
          "398:             VALUE \"ProductVersion\", \"2.18.1230\"",
          "",
          "[Added Lines]",
          "392:             VALUE \"FileVersion\", \"2.18.1231\"",
          "398:             VALUE \"ProductVersion\", \"2.18.1231\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "150be524791dcb9fd70b53be1528b62d9ab02786",
      "candidate_info": {
        "commit_hash": "150be524791dcb9fd70b53be1528b62d9ab02786",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/150be524791dcb9fd70b53be1528b62d9ab02786",
        "files": [
          "res/localization/rufus.loc",
          "src/iso.c",
          "src/msapi_utf8.h",
          "src/net.c",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdlg.c"
        ],
        "message": "[iso] notify if the file size on disk is smaller than expected ISO size\n\n* Closes #963\n* Also fix a potential issue with Notification()",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/iso.c||src/iso.c",
          "src/msapi_utf8.h||src/msapi_utf8.h",
          "src/net.c||src/net.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdlg.c||src/stdlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "559: t MSG_294 \"This version of Windows is no longer supported by Rufus.\"",
          "560: t MSG_295 \"Warning: Unofficial version\"",
          "561: t MSG_296 \"This version of Rufus was NOT produced by its official developer(s).\\n\\nAre you sure you want to run it?\"",
          "563: ################################################################################",
          "564: ############################# TRANSLATOR END COPY ##############################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562: t MSG_297 \"Truncated ISO detected\"",
          "563: t MSG_298 \"The ISO file you have selected does not match its declared size: %s of data is missing!\\n\\nIf you obtained \"",
          "564:  \"this file from the Internet, you should try to download a new copy and verify that the MD5 or SHA checksums match \"",
          "565:  \"the official ones.\\n\\nNote that you can compute the MD5 or SHA in Rufus by clicking the '#' button.\"",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:  FILE* fd;",
          "652:  int r = 1;",
          "653:  iso9660_t* p_iso = NULL;",
          "654:  udf_t* p_udf = NULL;",
          "655:  udf_dirent_t* p_udf_root;",
          "656:  char *tmp, *buf, *ext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654:  iso9660_pvd_t pvd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705:  if (scan_only) {",
          "706:   if (udf_get_logical_volume_id(p_udf, img_report.label, sizeof(img_report.label)) <= 0)",
          "707:    img_report.label[0] = 0;",
          "708:  }",
          "709:  r = udf_extract_files(p_udf, p_udf_root, \"\");",
          "710:  goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:   p_iso = iso9660_open(src_iso);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746: out:",
          "747:  iso_blocking_status = -1;",
          "748:  if (scan_only) {",
          "750:   for (j=safe_strlen(img_report.label)-1; ((j>0)&&(isspaceU(img_report.label[j]))); j--)",
          "751:    img_report.label[j] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:   struct __stat64 stat;",
          "754:   if ((iso9660_ifs_read_pvd(p_iso, &pvd)) && (_stat64U(src_iso, &stat) == 0))",
          "755:    img_report.mismatch_size = (int64_t)(iso9660_get_pvd_space_size(&pvd)) * ISO_BLOCKSIZE - stat.st_size;",
          "",
          "---------------"
        ],
        "src/msapi_utf8.h||src/msapi_utf8.h": [
          "File: src/msapi_utf8.h -> src/msapi_utf8.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <share.h>",
          "32: #include <fcntl.h>",
          "33: #include <io.h>",
          "34: #if !defined(DDKBUILD)",
          "35: #include <psapi.h>",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <sys/types.h>",
          "35: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "924: }",
          "925: #endif",
          "928: static __inline char* getenvU(const char* varname)",
          "929: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "929: static __inline int _stat64U(const char *path, struct __stat64 *buffer)",
          "930: {",
          "931:  int ret;",
          "932:  wconvert(path);",
          "933:  ret = _wstat64(wpath, buffer);",
          "934:  wfree(path);",
          "935:  return ret;",
          "936: }",
          "",
          "---------------"
        ],
        "src/net.c||src/net.c": [
          "File: src/net.c -> src/net.c"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:  uprintf(\"ISO label: '%s'\", img_report.label);",
          "975:  uprintf(\"  Size: %s (Projected)\", SizeToHumanReadable(img_report.projected_size, FALSE, FALSE));",
          "976:  PRINT_ISO_PROP(img_report.has_4GB_file, \"  Has a >4GB file\");",
          "977:  PRINT_ISO_PROP(img_report.has_long_filename, \"  Has a >64 chars filename\");",
          "978:  PRINT_ISO_PROP(HAS_SYSLINUX(img_report), \"  Uses: Syslinux/Isolinux v%s\", img_report.sl_version_str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "976:  if (img_report.mismatch_size > 0) {",
          "977:   uprintf(\"  ERROR: Detected that file on disk has been truncated by %s!\",",
          "978:    SizeToHumanReadable(img_report.mismatch_size, FALSE, FALSE));",
          "979:   MessageBoxU(hMainDialog, lmprintf(MSG_298, SizeToHumanReadable(img_report.mismatch_size, FALSE, FALSE)),",
          "980:    lmprintf(MSG_297), MB_ICONWARNING);",
          "981:  } else if (img_report.mismatch_size < 0) {",
          "983:   uprintf(\"  Note: File on disk is larger than reported ISO size by %s...\",",
          "984:    SizeToHumanReadable(-img_report.mismatch_size, FALSE, FALSE));",
          "985:  }",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:  uint64_t image_size;",
          "281:  uint64_t projected_size;",
          "282:  uint32_t install_wim_version;",
          "283:  BOOLEAN is_iso;",
          "284:  BOOLEAN is_bootable_img;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:  int64_t mismatch_size;",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.15.1119\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.15.1120\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,15,1119,0",
          "338:  PRODUCTVERSION 2,15,1119,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,15,1120,0",
          "338:  PRODUCTVERSION 2,15,1120,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1119\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1119\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1120\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1120\"",
          "",
          "---------------"
        ],
        "src/stdlg.c||src/stdlg.c": [
          "File: src/stdlg.c -> src/stdlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "813:  dialog_showing++;",
          "814:  szMessageText = (char*)malloc(MAX_PATH);",
          "815:  if (szMessageText == NULL) return FALSE;",
          "817:  va_start(args, format);",
          "818:  safe_vsnprintf(szMessageText, MAX_PATH-1, format, args);",
          "819:  va_end(args);",
          "",
          "[Removed Lines]",
          "816:  szMessageTitle = title;",
          "",
          "[Added Lines]",
          "816:  szMessageTitle = safe_strdup(title);",
          "817:  if (szMessageTitle == NULL) return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "839:  }",
          "840:  ret = (MyDialogBox(hMainInstance, IDD_NOTIFICATION, hMainDialog, NotificationCallback) == IDYES);",
          "841:  safe_free(szMessageText);",
          "842:  dialog_showing--;",
          "843:  return ret;",
          "844: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843:  safe_free(szMessageTitle);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1004a6e066800692b21c45a268217b8c347f3968",
      "candidate_info": {
        "commit_hash": "1004a6e066800692b21c45a268217b8c347f3968",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/1004a6e066800692b21c45a268217b8c347f3968",
        "files": [
          "res/loc/ChangeLog.txt",
          "res/loc/rufus.loc",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/ui.c",
          "src/ui.h"
        ],
        "message": "[ui] update persistence size controls\n\n* Also refactor ToggleImageOptions()",
        "before_after_code_files": [
          "res/loc/rufus.loc||res/loc/rufus.loc",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/ui.c||src/ui.c",
          "src/ui.h||src/ui.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/loc/rufus.loc||res/loc/rufus.loc": [
          "File: res/loc/rufus.loc -> res/loc/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "308: t MSG_120 \"advanced format options\"",
          "309: t MSG_121 \"Show %s\"",
          "310: t MSG_122 \"Hide %s\"",
          "311: t MSG_150 \"Type of computer you plan to use this bootable drive with. It is your responsibility to determine whether \"",
          "312:  \"your target is of BIOS or UEFI type before you start creating the drive, as it may fail to boot otherwise.\"",
          "313: # You shouldn't translate 'Legacy Mode' as this is an option that usually appears in English in the UEFI settings.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: t MSG_123 \"Persistent partition size\"",
          "312: t MSG_124 \"No persistence\"",
          "313: t MSG_125 \"Use this slider to set the size of the persistent partition. Setting the size to 0 disables the persistent partition.\"",
          "314: t MSG_126 \"Use this field to enter the size of the persistent partition. Setting the size to 0 disables the persistent partition.\"",
          "315: t MSG_127 \"Set the persistent partition size unit.\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372: t MSG_197 \"Nonstandard sector size detected\"",
          "373: t MSG_198 \"'Windows To Go' can only be installed on a GPT partitioned drive if it has \"",
          "374:  \"the FIXED attribute set. The current drive was not detected as FIXED.\"",
          "377: t MSG_201 \"Cancelling - Please wait...\"",
          "378: t MSG_202 \"Scanning image...\"",
          "",
          "[Removed Lines]",
          "375: t MSG_199 \"Persistent partition size\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: HINSTANCE hMainInstance;",
          "91: HWND hMainDialog, hMultiToolbar, hSaveToolbar, hHashToolbar, hAdvancedDeviceToolbar, hAdvancedFormatToolbar, hUpdatesDlg = NULL;",
          "92: HFONT hInfoFont;",
          "94: uint16_t rufus_version[3], embedded_sl_version[2];",
          "95: uint32_t dur_mins, dur_secs, DrivePort[MAX_DRIVES];;",
          "96: loc_cmd* selected_locale = NULL;",
          "",
          "[Removed Lines]",
          "93: uint8_t image_options = 0x00;",
          "",
          "[Added Lines]",
          "93: uint8_t image_options = IMOP_WINTOGO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: BOOL iso_op_in_progress = FALSE, format_op_in_progress = FALSE, right_to_left_mode = FALSE, has_uefi_csm;",
          "103: BOOL enable_HDDs = FALSE, force_update = FALSE, enable_ntfs_compression = FALSE, no_confirmation_on_cancel = FALSE, lock_drive = TRUE;",
          "104: BOOL advanced_mode_device, advanced_mode_format, allow_dual_uefi_bios, detect_fakes, enable_vmdk, force_large_fat32, usb_debug;",
          "106: BOOL zero_drive = FALSE, list_non_usb_removable_drives = FALSE, enable_file_indexing, large_drive = FALSE, write_as_image = FALSE;",
          "107: float fScale = 1.0f;",
          "108: int dialog_showing = 0, selection_default = BT_IMAGE, windows_to_go_selection = 0, persistence_unit_selection = -1;",
          "109: int default_fs, fs, bt, pt, tt; // file system, boot type, partition type, target type",
          "",
          "[Removed Lines]",
          "105: BOOL use_fake_units, preserve_timestamps = FALSE, fast_zeroing = FALSE;",
          "",
          "[Added Lines]",
          "105: BOOL use_fake_units, preserve_timestamps = FALSE, fast_zeroing = FALSE, app_changed_size = FALSE;",
          "107: uint64_t persistence_size = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: char embedded_sl_version_ext[2][32];",
          "113: char ClusterSizeLabel[MAX_CLUSTER_SIZES][64];",
          "114: char msgbox[1024], msgbox_title[32], *ini_file = NULL, *image_path = NULL, *short_image_path;",
          "115: StrArray DriveID, DriveLabel, DriveHub, BlockingProcess, ImageList;",
          "117: const int nb_steps[FS_MAX] = { 5, 5, 12, 1, 10 };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: char image_option_txt[128];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "600:  IGNORE_RETVAL(ComboBox_SetCurSel(hDiskID, needs_masquerading?1:0));",
          "601: }",
          "623: static void SetProposedLabel(int ComboIndex)",
          "624: {",
          "625:  const char no_label[] = STR_NO_LABEL, empty[] = \"\";",
          "",
          "[Removed Lines]",
          "603: static void SetImageOptions(void)",
          "604: {",
          "605:  if ((bt != BT_IMAGE) || (image_path == NULL)) {",
          "606:   if (image_options & IMOP_WINTOGO)",
          "607:    ToggleImageOption(IMOP_WINTOGO);",
          "608:   if (image_options & IMOP_PERSISTENCE)",
          "609:    ToggleImageOption(IMOP_PERSISTENCE);",
          "610:   return;",
          "611:  }",
          "613:  if ( (!HAS_WINTOGO(img_report) && ( (image_options & IMOP_WINTOGO))) ||",
          "614:    ( HAS_WINTOGO(img_report) && (!(image_options & IMOP_WINTOGO))) ) {",
          "615:   ToggleImageOption(IMOP_WINTOGO);",
          "616:  }",
          "617:  if ( (!HAS_PERSISTENCE(img_report) && ( (image_options & IMOP_PERSISTENCE))) ||",
          "618:    ( HAS_PERSISTENCE(img_report) && (!(image_options & IMOP_PERSISTENCE))) ) {",
          "619:   ToggleImageOption(IMOP_PERSISTENCE);",
          "620:  }",
          "621: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "732:  EnableWindow(GetDlgItem(hMainDialog, IDC_IMAGE_OPTION), actual_enable);",
          "733:  EnableWindow(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SLIDER), actual_enable);",
          "736:  EnableMBRBootOptions(actual_enable, remove_checkboxes);",
          "738:  EnableWindow(GetDlgItem(hMainDialog, IDC_LABEL), actual_enable);",
          "",
          "[Removed Lines]",
          "734:  EnableWindow(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), actual_enable);",
          "735:  EnableWindow(GetDlgItem(hMainDialog, IDC_PERSISTENCE_UNITS), actual_enable);",
          "",
          "[Added Lines]",
          "716:  EnableWindow(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), (persistence_size != 0) && actual_enable);",
          "717:  EnableWindow(GetDlgItem(hMainDialog, IDC_PERSISTENCE_UNITS), (persistence_size != 0) && actual_enable);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1001:  }",
          "1002:  PRINT_ISO_PROP(img_report.has_symlinks, \"  Note: This ISO uses symbolic links, which will not be replicated due to file system limitations.\");",
          "1003:  PRINT_ISO_PROP(img_report.has_symlinks, \"  Because of this, some features from this image may not work...\");",
          "1006: }",
          "",
          "[Removed Lines]",
          "1005:  SetImageOptions();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1084:    UpdateImage();",
          "1085:    uprintf(\"Using image: %s (%s)\", short_image_path, SizeToHumanReadable(img_report.image_size, FALSE, FALSE));",
          "1086:   }",
          "1087:   EnableControls(TRUE);",
          "1089:   if (img_report.is_iso) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1067:   ToggleImageOptions();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1643:  CreateTooltip(hTargetSystem, lmprintf(MSG_150), 30000);",
          "1644:  CreateTooltip(GetDlgItem(hDlg, IDS_CSM_HELP_TXT), lmprintf(MSG_151), 30000);",
          "1645:  CreateTooltip(GetDlgItem(hDlg, IDC_IMAGE_OPTION), lmprintf(MSG_305), 30000);",
          "1647:  if (!advanced_mode_device) // Hide as needed, since we display the advanced controls by default",
          "1648:   ToggleAdvancedDeviceOptions(FALSE);",
          "1649:  if (!advanced_mode_format)",
          "1650:   ToggleAdvancedFormatOptions(FALSE);",
          "1654:  if (iso_provided) {",
          "",
          "[Removed Lines]",
          "1651:  ToggleImageOption(0);",
          "",
          "[Added Lines]",
          "1627:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_SLIDER), lmprintf(MSG_125), 30000);",
          "1628:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_SIZE), lmprintf(MSG_126), 30000);",
          "1629:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS), lmprintf(MSG_127), 30000);",
          "1635:  ToggleImageOptions();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1860: static INT_PTR CALLBACK MainCallback(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)",
          "1861: {",
          "1862:  static DWORD DeviceNum = 0;",
          "1864:  static BOOL first_log_display = TRUE, isMarquee = FALSE, queued_hotplug_event = FALSE;",
          "1865:  static ULONG ulRegister = 0;",
          "1867:  static LPITEMIDLIST pidlDesktop = NULL;",
          "1868:  static SHChangeNotifyEntry NotifyEntry;",
          "1869:  static DWORD_PTR thread_affinity[4];",
          "1870:  static HFONT hyperlink_font = NULL;",
          "1871:  BOOL set_selected_fs;",
          "1872:  DRAWITEMSTRUCT* pDI;",
          "1873:  LPTOOLTIPTEXT lpttt;",
          "",
          "[Removed Lines]",
          "1863:  static uint64_t LastRefresh = 0, pos;",
          "1866:  static LONG lPos;",
          "",
          "[Added Lines]",
          "1847:  static uint64_t LastRefresh = 0;",
          "1854:  LONG lPos;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2044:    SetFileSystemAndClusterSize(NULL);",
          "2045:    windows_to_go_selection = ComboBox_GetCurSel(GetDlgItem(hDlg, IDC_IMAGE_OPTION));",
          "2046:    break;",
          "2047:   case IDC_PERSISTENCE_UNITS:",
          "2048:    if (HIWORD(wParam) != CBN_SELCHANGE)",
          "2049:     break;",
          "2050:    if (ComboBox_GetCurSel(GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS)) == persistence_unit_selection)",
          "2051:     break;",
          "2052:    GetWindowTextA(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp, sizeof(tmp));",
          "2054:    for (i = 0; i < persistence_unit_selection; i++)",
          "2056:    persistence_unit_selection = ComboBox_GetCurSel(GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS));",
          "2059:    break;",
          "2060:   case IDC_NB_PASSES:",
          "2061:    if (HIWORD(wParam) != CBN_SELCHANGE)",
          "",
          "[Removed Lines]",
          "2053:    pos = atol(tmp) * MB;",
          "2055:     pos *= 1024;",
          "2058:    SetPersistenceSize(pos, SelectedDrive.DiskSize - 4 * GB);",
          "",
          "[Added Lines]",
          "2031:   case IDC_PERSISTENCE_SIZE:",
          "2032:    if (HIWORD(wParam) == EN_CHANGE) {",
          "2033:     uint64_t pos;",
          "2035:     if (app_changed_size) {",
          "2036:      app_changed_size = FALSE;",
          "2037:      break;",
          "2038:     }",
          "2039:     GetWindowTextA(GetDlgItem(hDlg, IDC_PERSISTENCE_SIZE), tmp, sizeof(tmp));",
          "2040:     lPos = atol(tmp);",
          "2041:     persistence_unit_selection = ComboBox_GetCurSel(GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS));",
          "2042:     persistence_size = lPos * MB;",
          "2043:     for (i = 0; i < persistence_unit_selection; i++)",
          "2044:      persistence_size *= 1024;",
          "2045:     if (persistence_size > SelectedDrive.DiskSize - img_report.projected_size)",
          "2046:      persistence_size = SelectedDrive.DiskSize - img_report.projected_size;",
          "2047:     pos = persistence_size / MB;",
          "2048:     for (i = 0; i < persistence_unit_selection; i++)",
          "2049:      pos /= 1024;",
          "2050:     lPos = (LONG)pos;",
          "2051:     SendMessage(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SLIDER), TBM_SETPOS, TRUE, lPos);",
          "2052:     if (persistence_size >= (SelectedDrive.DiskSize - img_report.projected_size)) {",
          "2053:      static_sprintf(tmp, \"%d\", lPos);",
          "2054:      app_changed_size = TRUE;",
          "2055:      SetWindowTextU(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "2056:     }",
          "2057:    } else if (HIWORD(wParam) == EN_KILLFOCUS) {",
          "2058:     if (persistence_size == 0) {",
          "2059:      TogglePersistenceControls(FALSE);",
          "2060:      static_sprintf(tmp, \"0 (%s)\", lmprintf(MSG_124));",
          "2061:      app_changed_size = TRUE;",
          "2062:      SetWindowTextU(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "2063:     }",
          "2064:    }",
          "2065:    break;",
          "2072:    persistence_size = atol(tmp) * MB;",
          "2074:     persistence_size *= 1024;",
          "2076:    SetPersistenceSize(persistence_size, SelectedDrive.DiskSize - img_report.projected_size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2115:    if ((selected_fs == -1) && (SelectedDrive.DeviceNumber != 0))",
          "2116:     GetDrivePartitionData(SelectedDrive.DeviceNumber, tmp, sizeof(tmp), TRUE);",
          "2117:    SetFileSystemAndClusterSize(tmp);",
          "2119:    SetProposedLabel(ComboBox_GetCurSel(hDeviceList));",
          "2120:    EnableControls(TRUE);",
          "2121:    tt = (int)ComboBox_GetItemData(hPartitionScheme, ComboBox_GetCurSel(hPartitionScheme));",
          "",
          "[Removed Lines]",
          "2118:    SetImageOptions();",
          "",
          "[Added Lines]",
          "2136:    ToggleImageOptions();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2400:  case WM_HSCROLL:",
          "2401:   lPos = (LONG)SendMessage(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SLIDER), TBM_GETPOS, 0, 0);",
          "2404:   break;",
          "2406:  case WM_DROPFILES:",
          "",
          "[Removed Lines]",
          "2402:   sprintf(tmp, \"%ld\", lPos);",
          "2403:   SetWindowTextA(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "",
          "[Added Lines]",
          "2420:   if (lPos != 0) {",
          "2421:    if (persistence_size == 0)",
          "2422:     TogglePersistenceControls(TRUE);",
          "2423:    sprintf(tmp, \"%ld\", lPos);",
          "2424:   } else {",
          "2425:    TogglePersistenceControls(FALSE);",
          "2426:    static_sprintf(tmp, \"0 (%s)\", lmprintf(MSG_124));",
          "2427:   }",
          "2428:   persistence_size = lPos * MB;",
          "2429:   for (i = 0; i < persistence_unit_selection; i++)",
          "2430:    persistence_size *= 1024;",
          "2431:   app_changed_size = TRUE;",
          "2432:   SetWindowTextU(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3012: relaunch:",
          "3013:  ubprintf(\"Localization set to '%s'\", selected_locale->txt[0]);",
          "3014:  right_to_left_mode = ((selected_locale->ctrl_id) & LOC_RIGHT_TO_LEFT);",
          "3015:  SetProcessDefaultLayout(right_to_left_mode?LAYOUT_RTL:0);",
          "3016:  if (get_loc_data_file(loc_file, selected_locale))",
          "3017:   WriteSettingStr(SETTING_LOCALE, selected_locale->txt[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3045:  image_options = IMOP_WINTOGO;",
          "3046:  image_option_txt[0] = 0;",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: };",
          "232: enum boot_type {",
          "234:  BT_FREEDOS,",
          "235:  BT_IMAGE,",
          "236:  BT_SYSLINUX_V4,  // Start of indexes that only display in advanced mode",
          "",
          "[Removed Lines]",
          "233:  BT_MSDOS = 0,",
          "",
          "[Added Lines]",
          "233:  BT_NON_BOOTABLE = 0,",
          "234:  BT_MSDOS,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:  BT_GRUB4DOS,",
          "240:  BT_GRUB2,",
          "241:  BT_UEFI_NTFS,",
          "243:  BT_MAX",
          "244: };",
          "",
          "[Removed Lines]",
          "242:  BT_NON_BOOTABLE,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.2.1341\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.2.1342\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: VS_VERSION_INFO VERSIONINFO",
          "397:  FILEFLAGSMASK 0x3fL",
          "398: #ifdef _DEBUG",
          "399:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "395:  FILEVERSION 3,2,1341,0",
          "396:  PRODUCTVERSION 3,2,1341,0",
          "",
          "[Added Lines]",
          "395:  FILEVERSION 3,2,1342,0",
          "396:  PRODUCTVERSION 3,2,1342,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:             VALUE \"Comments\", \"https://akeo.ie\"",
          "412:             VALUE \"CompanyName\", \"Akeo Consulting\"",
          "413:             VALUE \"FileDescription\", \"Rufus\"",
          "415:             VALUE \"InternalName\", \"Rufus\"",
          "416:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "417:             VALUE \"LegalTrademarks\", \"https://www.gnu.org/copyleft/gpl.html\"",
          "418:             VALUE \"OriginalFilename\", \"rufus-3.2.exe\"",
          "419:             VALUE \"ProductName\", \"Rufus\"",
          "421:         END",
          "422:     END",
          "423:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "414:             VALUE \"FileVersion\", \"3.2.1341\"",
          "420:             VALUE \"ProductVersion\", \"3.2.1341\"",
          "",
          "[Added Lines]",
          "414:             VALUE \"FileVersion\", \"3.2.1342\"",
          "420:             VALUE \"ProductVersion\", \"3.2.1342\"",
          "",
          "---------------"
        ],
        "src/ui.c||src/ui.c": [
          "File: src/ui.c -> src/ui.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:  bsw = max(bsw, GetTextSize(hBootType, lmprintf(MSG_281, lmprintf(MSG_280))).cx + ddw);",
          "241:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "242:  fw = rc.right - rc.left - ddw;",
          "",
          "[Removed Lines]",
          "240:  GetWindowRect(GetDlgItem(hDlg, IDC_IMAGE_OPTION), &rc);",
          "",
          "[Added Lines]",
          "240:  GetWindowRect(GetDlgItem(hDlg, IDS_DEVICE_TXT), &rc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:  hCtrl = GetDlgItem(hDlg, IDC_PERSISTENCE_SLIDER);",
          "400:  GetWindowRect(hCtrl, &rc);",
          "401:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "405:  hCtrl = GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS);",
          "406:  GetWindowRect(hCtrl, &rc);",
          "407:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "408:  sz.cx = fw - (rc.right - rc.left);",
          "412:  hCtrl = GetDlgItem(hDlg, IDC_PERSISTENCE_SIZE);",
          "413:  GetWindowRect(hCtrl, &rc);",
          "414:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "418:  hCtrl = GetDlgItem(hDlg, IDS_CSM_HELP_TXT);",
          "",
          "[Removed Lines]",
          "402:  SetWindowPos(hCtrl, hTargetSystem, mw, rc.top, bsw, rc.bottom - rc.top, 0);",
          "409:  SetWindowPos(hCtrl, hTargetSystem, mw + sz.cx, rc.top, rc.right - rc.left, rc.bottom - rc.top, 0);",
          "415:  SetWindowPos(hCtrl, hTargetSystem, mw + bsw + ssw, rc.top, sz.cx - bsw - 2*ssw, rc.bottom - rc.top, 0);",
          "",
          "[Added Lines]",
          "402:  SetWindowPos(hCtrl, GetDlgItem(hDlg, IDC_IMAGE_OPTION), mw, rc.top, bsw, rc.bottom - rc.top, 0);",
          "409:  SetWindowPos(hCtrl, GetDlgItem(hDlg, IDC_PERSISTENCE_SIZE), mw + sz.cx, rc.top, rc.right - rc.left, rc.bottom - rc.top, 0);",
          "410:  ShowWindow(hCtrl, SW_HIDE);",
          "416:  SetWindowPos(hCtrl, GetDlgItem(hDlg, IDC_PERSISTENCE_SLIDER), mw + bsw + ssw, rc.top, fw - bsw - ssw, rc.bottom - rc.top, 0);",
          "417:  EnableWindow(hCtrl, FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "635:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "636: }",
          "638: void SetPersistenceSize(uint64_t pos, uint64_t max)",
          "639: {",
          "641:  int i, proposed_unit_selection = 0;",
          "642:  LONGLONG base_unit = MB;",
          "643:  HWND hCtrl;",
          "",
          "[Removed Lines]",
          "640:  char tmp[12];",
          "",
          "[Added Lines]",
          "641: void TogglePersistenceControls(BOOL display)",
          "642: {",
          "643:  RECT rc;",
          "644:  HWND hSize, hUnits;",
          "645:  LONG style, width = fw - bsw - ssw;",
          "646:  hSize = GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE);",
          "647:  hUnits = GetDlgItem(hMainDialog, IDC_PERSISTENCE_UNITS);",
          "649:  style = GetWindowLong(hSize, GWL_EXSTYLE);",
          "650:  if (display)",
          "651:   style |= WS_EX_RIGHT;",
          "652:  else",
          "653:   style &= ~WS_EX_RIGHT;",
          "654:  SetWindowLong(hSize, GWL_EXSTYLE, style);",
          "656:  if (display) {",
          "657:   GetWindowRect(hUnits, &rc);",
          "658:   MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "659:   width -= (rc.right - rc.left) + ssw;",
          "660:  }",
          "662:  GetWindowRect(hSize, &rc);",
          "663:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "664:  SetWindowPos(hSize, GetDlgItem(hMainDialog, IDC_PERSISTENCE_SLIDER), mw + bsw + ssw, rc.top, width, rc.bottom - rc.top, 0);",
          "666:  EnableWindow(hSize, display ? TRUE : FALSE);",
          "667:  EnableWindow(hUnits, display ? TRUE : FALSE);",
          "668:  ShowWindow(hUnits, display ? SW_SHOW : SW_HIDE);",
          "669: }",
          "673:  char tmp[64];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670:  SendMessage(hCtrl, TBM_SETRANGEMIN, (WPARAM)FALSE, (LPARAM)0);",
          "671:  SendMessage(hCtrl, TBM_SETRANGEMAX, (WPARAM)FALSE, (LPARAM)max);",
          "672:  SendMessage(hCtrl, TBM_SETPOS, (WPARAM)TRUE, (LPARAM)pos);",
          "675: }",
          "679: {",
          "701:   image_options ^= IMOP_WINTOGO;",
          "703:   IGNORE_RETVAL(ComboBox_SetCurSel(GetDlgItem(hMainDialog, IDC_IMAGE_OPTION), windows_to_go_selection));",
          "705:   image_options ^= IMOP_PERSISTENCE;",
          "706:  }",
          "709:   shift = 0;",
          "711:  if (shift != 0) {",
          "713:    shift = -shift;",
          "714:   section_vpos[1] += shift;",
          "715:   section_vpos[2] += shift;",
          "725:  }",
          "729:  for (i = 0; i < ARRAYSIZE(image_option_toggle_ids); i++) {",
          "730:   ShowWindow(GetDlgItem(hMainDialog, image_option_toggle_ids[i][0]),",
          "",
          "[Removed Lines]",
          "673:  static_sprintf(tmp, \"%ld\", (LONG)pos);",
          "674:  SetWindowTextA(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "678: void ToggleImageOption(uint8_t mask)",
          "680:  static BOOL relaunch = FALSE;",
          "681:  static char image_option_txt[128] = \"\";",
          "682:  int i, shift = (popcnt8(image_options) >= 2) ? 0 : rh;",
          "684:  assert(popcnt8(mask) <= 1);",
          "687:  if (mask == 0) {",
          "688:   if (relaunch) {",
          "689:    if ((selection_default == BT_IMAGE) && (image_path != NULL))",
          "690:     goto skip;",
          "691:   } else {",
          "692:    relaunch = TRUE;",
          "694:    GetWindowTextU(GetDlgItem(hMainDialog, IDS_IMAGE_OPTION_TXT), image_option_txt, sizeof(image_option_txt));",
          "695:   }",
          "696:  }",
          "698:  if (mask & IMOP_WINTOGO) {",
          "699:   if (nWindowsVersion < WINDOWS_8)",
          "700:    return;",
          "704:  } else if (mask & IMOP_PERSISTENCE) {",
          "708:  if (popcnt8(image_options) >= 2)",
          "712:   if ((mask == 0) || (image_options == 0))",
          "717:   if (popcnt8(image_options) <= 1) {",
          "719:    for (i = 0; i < ARRAYSIZE(image_option_move_ids); i++)",
          "720:     MoveCtrlY(hMainDialog, image_option_move_ids[i], shift);",
          "723:    ResizeDialogs(shift);",
          "724:   }",
          "727: skip:",
          "",
          "[Added Lines]",
          "706:  if (pos != 0) {",
          "707:   static_sprintf(tmp, \"%ld\", (LONG)pos);",
          "708:  } else {",
          "709:   static_sprintf(tmp, \"0 (%s)\", lmprintf(MSG_124));",
          "710:  }",
          "711:  app_changed_size = TRUE;",
          "712:  SetWindowTextU(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "716: void ToggleImageOptions(void)",
          "718:  BOOL has_wintogo, has_persistence;",
          "719:  uint8_t entry_image_options = image_options;",
          "720:  int i, shift = rh;",
          "722:  has_wintogo = ((bt == BT_IMAGE) && (image_path != NULL) && (img_report.is_iso) && (nWindowsVersion >= WINDOWS_8) && (HAS_WINTOGO(img_report)));",
          "723:  has_persistence = ((bt == BT_IMAGE) && (image_path != NULL) && (img_report.is_iso) && (HAS_PERSISTENCE(img_report)));",
          "725:  assert(popcnt8(image_options) <= 1);",
          "728:  if (image_option_txt[0] == 0)",
          "729:   GetWindowTextU(GetDlgItem(hMainDialog, IDS_IMAGE_OPTION_TXT), image_option_txt, sizeof(image_option_txt));",
          "731:  if ( ((has_wintogo) && !(image_options & IMOP_WINTOGO)) ||",
          "732:    ((!has_wintogo) && (image_options & IMOP_WINTOGO)) ) {",
          "736:  }",
          "738:  if (((has_persistence) && !(image_options & IMOP_PERSISTENCE)) ||",
          "739:   ((!has_persistence) && (image_options & IMOP_PERSISTENCE))) {",
          "743:  if ( ((entry_image_options != 0) && (has_wintogo || has_persistence)) ||",
          "744:    ((entry_image_options == 0) && !(has_wintogo || has_persistence)) )",
          "748:   if (entry_image_options != 0)",
          "753:   for (i = 0; i < ARRAYSIZE(image_option_move_ids); i++)",
          "754:    MoveCtrlY(hMainDialog, image_option_move_ids[i], shift);",
          "757:   ResizeDialogs(shift);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "735:   SetWindowTextU(GetDlgItem(hMainDialog, IDS_IMAGE_OPTION_TXT), image_option_txt);",
          "736:   IGNORE_RETVAL(ComboBox_SetCurSel(GetDlgItem(hMainDialog, IDC_IMAGE_OPTION), windows_to_go_selection));",
          "737:  } else if (image_options & IMOP_PERSISTENCE) {",
          "742:  }",
          "744:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "",
          "[Removed Lines]",
          "738:   SetWindowTextU(GetDlgItem(hMainDialog, IDS_IMAGE_OPTION_TXT), lmprintf(MSG_199));",
          "740:   uint64_t max_size = SelectedDrive.DiskSize - 4 * GB;",
          "741:   SetPersistenceSize(max_size / 2, max_size);",
          "",
          "[Added Lines]",
          "770:   SetWindowTextU(GetDlgItem(hMainDialog, IDS_IMAGE_OPTION_TXT), lmprintf(MSG_123));",
          "771:   TogglePersistenceControls(persistence_size != 0);",
          "772:   SetPersistenceSize(persistence_size, SelectedDrive.DiskSize - img_report.projected_size);",
          "",
          "---------------"
        ],
        "src/ui.h||src/ui.h": [
          "File: src/ui.h -> src/ui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: extern HWND hMultiToolbar, hSaveToolbar, hHashToolbar, hAdvancedDeviceToolbar, hAdvancedFormatToolbar;",
          "47: extern HFONT hInfoFont;",
          "48: extern UINT_PTR UM_LANGUAGE_MENU_MAX;",
          "50: extern loc_cmd* selected_locale;",
          "51: extern const char *sfd_name, *flash_type[BADLOCKS_PATTERN_TYPES];",
          "53: extern int advanced_device_section_height, advanced_format_section_height;",
          "54: extern int windows_to_go_selection, persistence_unit_selection;",
          "55: extern int selection_default, cbw, ddw, ddbh, bh;",
          "",
          "[Removed Lines]",
          "49: extern BOOL advanced_mode_device, advanced_mode_format, force_large_fat32;",
          "52: extern char *short_image_path;",
          "",
          "[Added Lines]",
          "49: extern BOOL advanced_mode_device, advanced_mode_format, force_large_fat32, app_changed_size;",
          "51: extern uint64_t persistence_size;",
          "53: extern char *short_image_path, image_option_txt[128];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: extern void AdjustForLowDPI(HWND hDlg);",
          "64: extern void SetSectionHeaders(HWND hDlg);",
          "65: extern void SetPersistenceSize(uint64_t pos, uint64_t max);",
          "66: extern void ToggleAdvancedDeviceOptions(BOOL enable);",
          "67: extern void ToggleAdvancedFormatOptions(BOOL enable);",
          "69: extern void CreateSmallButtons(HWND hDlg);",
          "70: extern void CreateAdditionalControls(HWND hDlg);",
          "71: extern void InitProgress(BOOL bOnlyFormat);",
          "",
          "[Removed Lines]",
          "68: extern void ToggleImageOption(uint8_t mask);",
          "",
          "[Added Lines]",
          "67: extern void TogglePersistenceControls(BOOL display);",
          "70: extern void ToggleImageOptions(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1612064c66e2892f9ef362943d61c3d76d75f3d4",
      "candidate_info": {
        "commit_hash": "1612064c66e2892f9ef362943d61c3d76d75f3d4",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/1612064c66e2892f9ef362943d61c3d76d75f3d4",
        "files": [
          "res/loc/ChangeLog.txt",
          "res/loc/pollock/Pollock.cs",
          "res/loc/rufus.loc",
          "src/rufus.c",
          "src/rufus.rc"
        ],
        "message": "[loc] finalize new translations for 3.2\n\n* Also fix a MinGW warning",
        "before_after_code_files": [
          "res/loc/pollock/Pollock.cs||res/loc/pollock/Pollock.cs",
          "res/loc/rufus.loc||res/loc/rufus.loc",
          "src/rufus.c||src/rufus.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/loc/pollock/Pollock.cs||res/loc/pollock/Pollock.cs": [
          "File: res/loc/pollock/Pollock.cs -> res/loc/pollock/Pollock.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "959:         [STAThread]",
          "960:         static void Main(string[] args)",
          "961:         {",
          "962:             Console.OutputEncoding = System.Text.Encoding.UTF8;",
          "963:             Console.CancelKeyPress += delegate (object sender, ConsoleCancelEventArgs e) {",
          "964:                 e.Cancel = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962:             bool use_local_loc = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "966:             };",
          "967:             Console.WriteLine($\"{app_name} {version_str} - Poedit to rufus.loc conversion utility\");",
          "968:             Console.WriteLine();",
          "970:             if (AppDomain.CurrentDomain.FriendlyName.Contains('m'))",
          "971:                 goto Maintainer_Mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "970:             foreach (var arg in args)",
          "971:             {",
          "972:                 if (arg.Contains(\"l\"))",
          "973:                     use_local_loc = true;",
          "974:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "986:             if (ver == null)",
          "987:             {",
          "988:                 Console.WriteLine(\"ERROR: Could not access application data.\");",
          "990:             }",
          "991:             foreach (var line in ver.Split('\\n'))",
          "992:             {",
          "",
          "[Removed Lines]",
          "989:                 goto Exit;",
          "",
          "[Added Lines]",
          "995:                 goto Error;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1010:             if ((download_url == null) || (rufus_url == null) || (update_version[0] == 0))",
          "1011:             {",
          "1012:                 Console.WriteLine(\"FAILED\");",
          "1014:             }",
          "1015:             Console.WriteLine(\"DONE\");",
          "",
          "[Removed Lines]",
          "1013:                 goto Exit;",
          "",
          "[Added Lines]",
          "1019:                 goto Error;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1023:                     if (DownloadFile(download_url))",
          "1024:                     {",
          "1025:                         Console.WriteLine(\"Now re-launch this program using the latest version.\");",
          "1027:                     }",
          "1028:                     Console.WriteLine(\"Download failed.\");",
          "1029:                 }",
          "",
          "[Removed Lines]",
          "1026:                         goto Exit;",
          "",
          "[Added Lines]",
          "1032:                         goto Error;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1051:                 }",
          "1052:             }",
          "1059:             var loc_file = loc_url.Split('/').Last();",
          "",
          "[Removed Lines]",
          "1055:             Console.Write(\"Downloading the latest loc file... \");",
          "1056:             if (!DownloadFile(loc_url))",
          "1057:                 goto Exit;",
          "",
          "[Added Lines]",
          "1060:             if (!use_local_loc)",
          "1061:             {",
          "1063:                 Console.Write(\"Downloading the latest loc file... \");",
          "1064:                 if (!DownloadFile(loc_url))",
          "1065:                     goto Error;",
          "1066:             }",
          "1067:             else",
          "1068:             {",
          "1069:                 var local_loc = @\"C:\\rufus\\res\\loc\\rufus.loc\";",
          "1070:                 Console.Write($\"Copying loc file from '{local_loc}'... \");",
          "1071:                 File.Copy(local_loc, \"rufus.loc\", true);",
          "1072:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1109:             Console.WriteLine($\"{list[index][0]} was selected.\");",
          "1110:             Console.WriteLine();",
          "1111:             po_file = $\"{list[index][1]}.po\";",
          "1113:             Language old_en_US = null;",
          "1114:             if (list[index][2] == list[0][2])",
          "1115:             {",
          "1116:                 Console.WriteLine(\"Note: This language is already at the most recent version!\");",
          "1117:                 if (!PromptForQuestion(\"Do you still want to edit it?\"))",
          "1119:             }",
          "1120:             else",
          "1121:             {",
          "",
          "[Removed Lines]",
          "1118:                     goto Exit;",
          "",
          "[Added Lines]",
          "1127:             if (File.Exists(po_file))",
          "1128:             {",
          "1129:                 if (!PromptForQuestion($\"A '{po_file}' file already exists. Do you want to overwrite it? (If unsure, answer 'y')\"))",
          "1130:                     goto Error;",
          "1131:             }",
          "1138:                     goto Error;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1133:                     var url = \"https://github.com/pbatard/rufus/releases/tag/v\" + list[index][2];",
          "1134:                     var str = DownloadString(url);",
          "1135:                     if (str == null)",
          "1140:                     var sha = str.Substring(str.IndexOf(\"/pbatard/rufus/commit/\") + 22, 40);",
          "1142:                     string loc_dir = ((list[index][2][0] == '2') || ((list[index][2][0] == '3') && (list[index][2][2] == '0'))) ? \"localization\" : \"loc\";",
          "1143:                     url = \"https://github.com/pbatard/rufus/raw/\" + sha + \"/res/\" + loc_dir + \"/rufus.loc\";",
          "1144:                     if (!DownloadFile(url, old_loc_file))",
          "1149:                 }",
          "1150:                 var old_langs = ParseLocFile(old_loc_file, \"en-US\");",
          "1151:                 if ((old_langs == null) || (old_langs.Count != 1))",
          "1152:                 {",
          "1153:                     Console.WriteLine(\"Error: Unable to get en-US data from previous loc file.\");",
          "1156:                 }",
          "1157:                 old_en_US = old_langs[0];",
          "1158:             }",
          "",
          "[Removed Lines]",
          "1136:                     {",
          "1137:                         index = -1;",
          "1138:                         goto Exit;",
          "1139:                     }",
          "1145:                     {",
          "1146:                         index = -1;",
          "1147:                         goto Exit;",
          "1148:                     }",
          "1154:                     index = -1;",
          "1155:                     goto Exit;",
          "",
          "[Added Lines]",
          "1156:                         goto Error;",
          "1162:                         goto Error;",
          "1168:                     goto Error;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1160:             if (CreatePoFiles(ParseLocFile(loc_file, list[index][1]), old_en_US) != 1)",
          "1161:             {",
          "1162:                 Console.WriteLine(\"Failed to create PO file\");",
          "1165:             }",
          "",
          "[Removed Lines]",
          "1163:                 index = -1;",
          "1164:                 goto Exit;",
          "",
          "[Added Lines]",
          "1176:                 goto Error;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1182:                 Console.WriteLine($\"* The {list[index][0]} translation file ({list[index][1]}) is now ready to be edited in Poedit.\");",
          "1183:                 Console.WriteLine(\"* Please look for entries highlited in orange - they are the ones requiring an update.\");",
          "1184:                 Console.WriteLine(\"*\");",
          "1187:                 Console.WriteLine(\"*\");",
          "1188:                 Console.WriteLine(\"* PLEASE DO NOT CLOSE THIS CONSOLE APPLICATION - IT NEEDS TO RUN IN THE BACKGROUND!\");",
          "1189:                 Console.WriteLine(\"* Instead, when you are done editing your translation, simply close Poedit.\");",
          "1190:                 Console.WriteLine(\"*************************************************************************************\");",
          "1193:                 Process process = new Process();",
          "1194:                 process.StartInfo.FileName = poedit;",
          "1195:                 process.StartInfo.WorkingDirectory = app_dir;",
          "1197:                 process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;",
          "1198:                 if (!process.Start())",
          "1199:                 {",
          "",
          "[Removed Lines]",
          "1185:                 Console.WriteLine(\"* Whenever you save your changes in Poedit, an new 'rufus.loc' will be generated so\");",
          "1186:                 Console.WriteLine($\"* that you can test your changes using '{rufus_file}' in the same directory.\");",
          "1191:                 WaitForKey(\"Press any key to launch Poedit...\");",
          "1196:                 process.StartInfo.Arguments = $\"{list[index][1]}.po\";",
          "",
          "[Added Lines]",
          "1197:                 Console.WriteLine(\"* Whenever you save your changes in Poedit, a new 'rufus.loc' will be generated so\");",
          "1198:                 Console.WriteLine($\"* that you can test it with '{rufus_file}' in the same directory.\");",
          "1203:                 WaitForKey($\"Press any key to open '{po_file}' in Poedit...\");",
          "1208:                 process.StartInfo.Arguments = po_file;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1201:                     goto Exit;",
          "1202:                 }",
          "1203:                 Console.SetCursorPosition(0, Console.CursorTop - 1);",
          "1205:                 DateTime launch_date = DateTime.Now;",
          "1206:                 process.WaitForExit();",
          "1207:                 Console.WriteLine($\"Poedit {((DateTime.Now - launch_date).Milliseconds < 100? \"is already running (?)...\" : \"was closed.\")}\");",
          "",
          "[Removed Lines]",
          "1204:                 Console.WriteLine(\"Running Poedit...                \");",
          "",
          "[Added Lines]",
          "1216:                 Console.WriteLine(\"Running Poedit...                                 \");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1213:             else",
          "1214:             {",
          "1215:                 Console.WriteLine(\"Poedit was not found. You will have to launch it and open the\");",
          "1217:             }",
          "1219: Exit:",
          "",
          "[Removed Lines]",
          "1216:                 Console.WriteLine($\"'{app_dir + list[index][1]}.po' file manually.\");",
          "",
          "[Added Lines]",
          "1228:                 Console.WriteLine($\"'{po_file}' file manually.\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1223:             {",
          "1224:                 Process.Start($\"mailto:pete@akeo.ie?subject=Rufus {list[index][0]} translation v{list[0][2]} update\" +",
          "1225:                     $\"&body=Hi Pete,%0D%0A%0D%0APlease find attached the latest {list[index][0]} translation.\" +",
          "1227:                     $\"%0D%0A%0D%0ARegards,\");",
          "1228:             }",
          "1229:             return;",
          "1231: Maintainer_Mode:",
          "1232:             string file_name;",
          "1233:             OpenFileDialog file_dialog = new OpenFileDialog();",
          "",
          "[Removed Lines]",
          "1226:                     $\"%0D%0A%0D%0A<PLEASE ATTACH '{app_dir + list[index][1]}.po' AND REMOVE THIS LINE>\" +",
          "",
          "[Added Lines]",
          "1238:                     $\"%0D%0A%0D%0A<PLEASE ATTACH '{app_dir}{po_file}' AND REMOVE THIS LINE>\" +",
          "1243: Error:",
          "1244:             WaitForKey(\"Press any key to exit...\");",
          "1245:             return;",
          "",
          "---------------"
        ],
        "res/loc/rufus.loc||res/loc/rufus.loc": [
          "File: res/loc/rufus.loc -> res/loc/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: t MSG_033 \"BIOS or UEFI\"",
          "158: # Number of bad block check passes (singular for 1 pass)",
          "159: t MSG_034 \"%d pass\"",
          "161: t MSG_035 \"%d passes %s\"",
          "162: t MSG_036 \"ISO Image\"",
          "163: t MSG_037 \"Application\"",
          "",
          "[Removed Lines]",
          "160: # Number of bad block check passes (plural for 2 or more passes)",
          "",
          "[Added Lines]",
          "160: # Number of bad block check passes (plural for 2 or more passes).",
          "161: # See MSG_087 for the message that %s gets replaced with.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:  \"'%s' exists there, it will be reused automatically.\"",
          "226: t MSG_085 \"Downloading '%s'\"",
          "227: t MSG_086 \"No image selected\"",
          "228: t MSG_087 \"for %s devices\"",
          "229: t MSG_088 \"Image is too big\"",
          "230: t MSG_089 \"The image is too big for the selected target.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: # This message appears in Advanced format options \u2192 Check device for bad blocks \u2192 dropdown menu",
          "230: # %s will be replaced with SLC, MLC or TLC, which is a type of flash memory. In other words, this",
          "231: # message should mean \"for a flash memory device of type %s\". *Please* try to keep the translation",
          "232: # as short as possible so that it won't result in an overly large dropdown... It's okay to use a",
          "233: # translation for \"type\" instead of \"device\"  (e.g. \"for TLC type\"). See also MSG_035.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308: t MSG_120 \"advanced format options\"",
          "309: t MSG_121 \"Show %s\"",
          "310: t MSG_122 \"Hide %s\"",
          "311: t MSG_123 \"Persistent partition size\"",
          "312: t MSG_124 \"No persistence\"",
          "316: t MSG_150 \"Type of computer you plan to use this bootable drive with. It is your responsibility to determine whether \"",
          "317:  \"your target is of BIOS or UEFI type before you start creating the drive, as it may fail to boot otherwise.\"",
          "318: # You shouldn't translate 'Legacy Mode' as this is an option that usually appears in English in the UEFI settings.",
          "",
          "[Removed Lines]",
          "313: t MSG_125 \"Use this slider to set the size of the persistent partition. Setting the size to 0 disables the persistent partition.\"",
          "314: t MSG_126 \"Use this field to enter the size of the persistent partition. Setting the size to 0 disables the persistent partition.\"",
          "315: t MSG_127 \"Set the persistent partition size unit.\"",
          "",
          "[Added Lines]",
          "317: # A persistent partitions can be used with \"Live\" USB media to store data.",
          "318: # It means that data can be preserved across reboots on \"Live\" USB drives.",
          "319: # To test this feature, please download and select 'casper_test.iso' from:",
          "320: # https://github.com/pbatard/rufus/raw/master/res/loc/test/casper_test.iso",
          "322: # This message appears in the persistence 'Size' control when the slider is set to 0.",
          "323: # If running out of space, it is okay to use \"No partition\" or \"None\" to indicate that a persistent",
          "324: # partition will not be created (because the 'Size' edit control is *not* adjusted for width).",
          "326: # Tooltips used for the peristence size slider and edit control",
          "327: t MSG_125 \"Set the size of the persistent partition for live USB media. Setting the size to 0 disables the persistent partition.\"",
          "328: t MSG_126 \"Set the partition size units.\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "340:  \"This can improve boot detection for older BIOSes\"",
          "341: t MSG_170 \"Enable the listing of USB Hard Drive enclosures. USE AT YOUR OWN RISKS!!!\"",
          "342: t MSG_171 \"Start the formatting operation.\\nThis will DESTROY any data on the target!\"",
          "343: t MSG_172 \"Invalid download signature\"",
          "344: t MSG_173 \"Click to select...\"",
          "345: t MSG_174 \"Rufus - The Reliable USB Formatting Utility\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356: # As of Rufus 3.2, *ALL* downloads from the servers are digitally signed, and their signature is validated using the",
          "357: # public key that is embedded in the application. This message appears in an error dialog if the validation fails.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437: # Example: \"Partitioning (MBR)...\"",
          "438: t MSG_238 \"Partitioning (%s)...\"",
          "439: t MSG_239 \"Deleting partitions...\"",
          "440: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
          "441:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
          "442:  \"The download will be deleted. Please check the log for more details.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455: # This message has to do with the signature validation that Rufus uses when downloading an update.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521: t MSG_304 \"Create a disk image of the selected device\"",
          "522: t MSG_305 \"Use this option to indicate whether you want to use this device to install Windows on another disk, \"",
          "523:  \"or if you want to run Windows directly from this drive (Windows To Go).\"",
          "524: t MSG_306 \"Fast-zeroing drive: %0.1f%% completed\"",
          "526: #########################################################################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540: # You can see this status message by pressing <Ctrl>-<Alt>-<Z> and then selecting START.",
          "541: # It's the same as MSG_286 but with a process that *may* be faster, hence the name.",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1625:  CreateTooltip(GetDlgItem(hDlg, IDS_CSM_HELP_TXT), lmprintf(MSG_151), 30000);",
          "1626:  CreateTooltip(GetDlgItem(hDlg, IDC_IMAGE_OPTION), lmprintf(MSG_305), 30000);",
          "1627:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_SLIDER), lmprintf(MSG_125), 30000);",
          "1631:  if (!advanced_mode_device) // Hide as needed, since we display the advanced controls by default",
          "1632:   ToggleAdvancedDeviceOptions(FALSE);",
          "",
          "[Removed Lines]",
          "1628:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_SIZE), lmprintf(MSG_126), 30000);",
          "1629:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS), lmprintf(MSG_127), 30000);",
          "",
          "[Added Lines]",
          "1628:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_SIZE), lmprintf(MSG_125), 30000);",
          "1629:  CreateTooltip(GetDlgItem(hDlg, IDC_PERSISTENCE_UNITS), lmprintf(MSG_126), 30000);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2050:     lPos = (LONG)pos;",
          "2051:     SendMessage(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SLIDER), TBM_SETPOS, TRUE, lPos);",
          "2052:     if (persistence_size >= (SelectedDrive.DiskSize - img_report.projected_size)) {",
          "2054:      app_changed_size = TRUE;",
          "2055:      SetWindowTextU(GetDlgItem(hMainDialog, IDC_PERSISTENCE_SIZE), tmp);",
          "2056:     }",
          "",
          "[Removed Lines]",
          "2053:      static_sprintf(tmp, \"%d\", lPos);",
          "",
          "[Added Lines]",
          "2053:      static_sprintf(tmp, \"%ld\", lPos);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2420:   if (lPos != 0) {",
          "2421:    if (persistence_size == 0)",
          "2422:     TogglePersistenceControls(TRUE);",
          "2424:   } else {",
          "2425:    TogglePersistenceControls(FALSE);",
          "2426:    static_sprintf(tmp, \"0 (%s)\", lmprintf(MSG_124));",
          "",
          "[Removed Lines]",
          "2423:    sprintf(tmp, \"%ld\", lPos);",
          "",
          "[Added Lines]",
          "2423:    static_sprintf(tmp, \"%ld\", lPos);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.2.1342\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.2.1343\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: VS_VERSION_INFO VERSIONINFO",
          "397:  FILEFLAGSMASK 0x3fL",
          "398: #ifdef _DEBUG",
          "399:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "395:  FILEVERSION 3,2,1342,0",
          "396:  PRODUCTVERSION 3,2,1342,0",
          "",
          "[Added Lines]",
          "395:  FILEVERSION 3,2,1343,0",
          "396:  PRODUCTVERSION 3,2,1343,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:             VALUE \"Comments\", \"https://akeo.ie\"",
          "412:             VALUE \"CompanyName\", \"Akeo Consulting\"",
          "413:             VALUE \"FileDescription\", \"Rufus\"",
          "415:             VALUE \"InternalName\", \"Rufus\"",
          "416:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "417:             VALUE \"LegalTrademarks\", \"https://www.gnu.org/copyleft/gpl.html\"",
          "418:             VALUE \"OriginalFilename\", \"rufus-3.2.exe\"",
          "419:             VALUE \"ProductName\", \"Rufus\"",
          "421:         END",
          "422:     END",
          "423:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "414:             VALUE \"FileVersion\", \"3.2.1342\"",
          "420:             VALUE \"ProductVersion\", \"3.2.1342\"",
          "",
          "[Added Lines]",
          "414:             VALUE \"FileVersion\", \"3.2.1343\"",
          "420:             VALUE \"ProductVersion\", \"3.2.1343\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ab67c03d69b79c48b9da102e059950297f7b043",
      "candidate_info": {
        "commit_hash": "5ab67c03d69b79c48b9da102e059950297f7b043",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/5ab67c03d69b79c48b9da102e059950297f7b043",
        "files": [
          "ChangeLog.txt",
          "src/dev.c",
          "src/format.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdio.c"
        ],
        "message": "[core] improve write retry handling\n\n* Add a proper delay before retrying a write operation and increase retry count to 4\n* Add retries when clearing boot records or when zeroing a drive\n* Also improve log output from USB device reset",
        "before_after_code_files": [
          "src/dev.c||src/dev.c",
          "src/format.c||src/format.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdio.c||src/stdio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   return FALSE;",
          "142:  }",
          "145:   return FALSE;",
          "147:  LastReset = GetTickCount64();",
          "",
          "[Removed Lines]",
          "144:  if (DriveHub.String[index] == NULL)",
          "",
          "[Added Lines]",
          "144:  if (DriveHub.String[index] == NULL) {",
          "145:   uprintf(\"The device you are trying to reset does not appear to be a USB device...\");",
          "147:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   uprintf(\"  Failed to cycle port: %s\", WindowsErrorString());",
          "163:   goto out;",
          "164:  }",
          "165:  r = TRUE;",
          "167: out:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  uprintf(\"Please wait for the device to re-appear...\");",
          "",
          "---------------"
        ],
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "815: static BOOL ClearMBRGPT(HANDLE hPhysicalDrive, LONGLONG DiskSize, DWORD SectorSize, BOOL add1MB)",
          "816: {",
          "817:  BOOL r = FALSE;",
          "819:  unsigned char* pBuf = (unsigned char*) calloc(SectorSize, 1);",
          "821:  PrintInfoDebug(0, MSG_224);",
          "",
          "[Removed Lines]",
          "818:  uint64_t i, last_sector = DiskSize/SectorSize, num_sectors_to_clear;",
          "",
          "[Added Lines]",
          "818:  uint64_t i, j, last_sector = DiskSize/SectorSize, num_sectors_to_clear;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "840:  uprintf(\"Erasing %d sectors\", num_sectors_to_clear);",
          "841:  for (i=0; i<num_sectors_to_clear; i++) {",
          "844:   }",
          "845:  }",
          "849:   }",
          "850:  }",
          "851:  r = TRUE;",
          "",
          "[Removed Lines]",
          "842:   if ((IS_ERROR(FormatStatus)) || (write_sectors(hPhysicalDrive, SectorSize, i, 1, pBuf) != SectorSize)) {",
          "843:    goto out;",
          "846:  for (i=last_sector-MAX_SECTORS_TO_CLEAR; i<last_sector; i++) {",
          "847:   if ((IS_ERROR(FormatStatus)) || (write_sectors(hPhysicalDrive, SectorSize, i, 1, pBuf) != SectorSize)) {",
          "848:    goto out;",
          "",
          "[Added Lines]",
          "842:   for (j = 1; j <= WRITE_RETRIES; j++) {",
          "843:    if (IS_ERROR(FormatStatus))",
          "844:     goto out;",
          "845:    if (write_sectors(hPhysicalDrive, SectorSize, i, 1, pBuf) != SectorSize) {",
          "846:     if (j < WRITE_RETRIES) {",
          "847:      uprintf(\"Retrying in %d seconds...\", WRITE_TIMEOUT / 1000);",
          "848:      Sleep(WRITE_TIMEOUT);",
          "849:     } else",
          "850:      goto out;",
          "851:    }",
          "854:  for (i = last_sector - MAX_SECTORS_TO_CLEAR; i < last_sector; i++) {",
          "855:   for (j = 1; j <= WRITE_RETRIES; j++) {",
          "856:    if (IS_ERROR(FormatStatus))",
          "857:     goto out;",
          "858:    if (write_sectors(hPhysicalDrive, SectorSize, i, 1, pBuf) != SectorSize) {",
          "859:     if (j < WRITE_RETRIES) {",
          "860:      uprintf(\"Retrying in %d seconds...\", WRITE_TIMEOUT / 1000);",
          "861:      Sleep(WRITE_TIMEOUT);",
          "862:     } else",
          "863:      goto out;",
          "864:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1583:     s = ReadFile(hSourceImage, buffer, BufSize, &rSize, NULL);",
          "1584:     if (!s) {",
          "1585:      FormatStatus = ERROR_SEVERITY_ERROR | FAC(FACILITY_STORAGE) | ERROR_READ_FAULT;",
          "1587:      goto out;",
          "1588:     }",
          "1589:     if (rSize == 0)",
          "",
          "[Removed Lines]",
          "1586:      uprintf(\"read error: %s\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "1602:      uprintf(\"Read error: %s\", WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1598:    if (rSize % SelectedDrive.SectorSize != 0)",
          "1599:     rSize = ((rSize + SelectedDrive.SectorSize - 1) / SelectedDrive.SectorSize) * SelectedDrive.SectorSize;",
          "1601:     CHECK_FOR_USER_CANCEL;",
          "1602:     s = WriteFile(hPhysicalDrive, buffer, rSize, &wSize, NULL);",
          "1603:     if ((s) && (wSize == rSize))",
          "1604:      break;",
          "1605:     if (s)",
          "1607:     else",
          "1610:      li.QuadPart = wb;",
          "1612:      if (!SetFilePointerEx(hPhysicalDrive, li, NULL, FILE_BEGIN)) {",
          "1614:       goto out;",
          "1615:      }",
          "1616:     } else {",
          "",
          "[Removed Lines]",
          "1600:    for (i = 0; i < WRITE_RETRIES; i++) {",
          "1606:      uprintf(\"write error: Wrote %d bytes, expected %d bytes\", wSize, rSize);",
          "1608:      uprintf(\"write error at sector %\" PRIi64 \": %s\", wb / SelectedDrive.SectorSize, WindowsErrorString());",
          "1609:     if (i < WRITE_RETRIES - 1) {",
          "1611:      uprintf(\"  RETRYING...\\n\");",
          "1613:       uprintf(\"write error: could not reset position - %s\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "1616:    for (i = 1; i <= WRITE_RETRIES; i++) {",
          "1622:      uprintf(\"Write error: Wrote %d bytes, expected %d bytes\", wSize, rSize);",
          "1624:      uprintf(\"Write error at sector %\" PRIi64 \": %s\", wb / SelectedDrive.SectorSize, WindowsErrorString());",
          "1625:     if (i < WRITE_RETRIES) {",
          "1627:      uprintf(\"Retrying in %d seconds...\", WRITE_TIMEOUT / 1000);",
          "1628:      Sleep(WRITE_TIMEOUT);",
          "1630:       uprintf(\"Write error: Could not reset position - %s\", WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1619:     }",
          "1620:     Sleep(200);",
          "1621:    }",
          "1623:   }",
          "1624:  }",
          "1625:  RefreshDriveLayout(hPhysicalDrive);",
          "",
          "[Removed Lines]",
          "1622:    if (i >= WRITE_RETRIES) goto out;",
          "",
          "[Added Lines]",
          "1639:    if (i > WRITE_RETRIES)",
          "1640:     goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2105:    NULL, OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN, NULL);",
          "2106:   break;",
          "2107:  default:",
          "2109:  }",
          "2110:  if (hPhysicalDrive == INVALID_HANDLE_VALUE) {",
          "2111:   FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_OPEN_FAILED;",
          "",
          "[Removed Lines]",
          "2108:   uprintf(\"invalid image type\");",
          "",
          "[Added Lines]",
          "2126:   uprintf(\"Invalid image type\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2149:    (DWORD)MIN(img_save->BufSize, img_save->DeviceSize - wb), &rSize, NULL);",
          "2150:   if (!s) {",
          "2151:    FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_READ_FAULT;",
          "2153:    goto out;",
          "2154:   }",
          "2155:   if (rSize == 0)",
          "",
          "[Removed Lines]",
          "2152:    uprintf(\"read error: %s\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "2170:    uprintf(\"Read error: %s\", WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2160:    PrintInfo(0, MSG_261, format_percent);",
          "2161:    UpdateProgress(OP_FORMAT, format_percent);",
          "2162:   }",
          "2164:    CHECK_FOR_USER_CANCEL;",
          "2165:    s = WriteFile(hDestImage, buffer, rSize, &wSize, NULL);",
          "2166:    if ((s) && (wSize == rSize))",
          "2167:     break;",
          "2168:    if (s)",
          "2170:    else",
          "2173:     li.QuadPart = wb;",
          "2175:     if (!SetFilePointerEx(hDestImage, li, NULL, FILE_BEGIN)) {",
          "2177:      goto out;",
          "2178:     }",
          "2179:    } else {",
          "",
          "[Removed Lines]",
          "2163:   for (i=0; i<WRITE_RETRIES; i++) {",
          "2169:     uprintf(\"write error: Wrote %d bytes, expected %d bytes\\n\", wSize, rSize);",
          "2171:     uprintf(\"write error: %s\", WindowsErrorString());",
          "2172:    if (i < WRITE_RETRIES-1) {",
          "2174:     uprintf(\"  RETRYING...\\n\");",
          "2176:      uprintf(\"write error: could not reset position - %s\", WindowsErrorString());",
          "",
          "[Added Lines]",
          "2181:   for (i = 1; i <= WRITE_RETRIES; i++) {",
          "2187:     uprintf(\"Write error: Wrote %d bytes, expected %d bytes\", wSize, rSize);",
          "2189:     uprintf(\"Write error: %s\", WindowsErrorString());",
          "2190:    if (i < WRITE_RETRIES) {",
          "2192:     uprintf(\"Retrying in %d seconds...\", WRITE_TIMEOUT / 1000);",
          "2193:     Sleep(WRITE_TIMEOUT);",
          "2195:      uprintf(\"Write error: Could not reset position - %s\", WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2182:    }",
          "2183:    Sleep(200);",
          "2184:   }",
          "2186:  }",
          "2187:  if (wb != img_save->DeviceSize) {",
          "2188:   uprintf(\"Error: wrote %s, expected %s\", SizeToHumanReadable(wb, FALSE, FALSE),",
          "",
          "[Removed Lines]",
          "2185:   if (i >= WRITE_RETRIES) goto out;",
          "",
          "[Added Lines]",
          "2204:   if (i > WRITE_RETRIES)",
          "2205:    goto out;",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #define MAX_SECTORS_TO_CLEAR        128   // nb sectors to zap when clearing the MBR/GPT (must be >34)",
          "63: #define MBR_UEFI_MARKER             0x49464555 // 'U', 'E', 'F', 'I', as a 32 bit little endian longword",
          "64: #define STATUS_MSG_TIMEOUT          3500  // How long should cheat mode messages appear for on the status bar",
          "66: #define MARQUEE_TIMER_REFRESH       10   // Time between progress bar marquee refreshes, in ms",
          "67: #define FS_DEFAULT                  FS_FAT32",
          "68: #define SINGLE_CLUSTERSIZE_DEFAULT  0x00000100",
          "",
          "[Removed Lines]",
          "65: #define WRITE_RETRIES               3",
          "",
          "[Added Lines]",
          "65: #define WRITE_RETRIES               4",
          "66: #define WRITE_TIMEOUT               5000  // How long we should wait between write retries",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.1.1316\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.1.1317\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: VS_VERSION_INFO VERSIONINFO",
          "394:  FILEFLAGSMASK 0x3fL",
          "395: #ifdef _DEBUG",
          "396:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "392:  FILEVERSION 3,1,1316,0",
          "393:  PRODUCTVERSION 3,1,1316,0",
          "",
          "[Added Lines]",
          "392:  FILEVERSION 3,1,1317,0",
          "393:  PRODUCTVERSION 3,1,1317,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         BEGIN",
          "408:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "409:             VALUE \"FileDescription\", \"Rufus\"",
          "411:             VALUE \"InternalName\", \"Rufus\"",
          "412:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "413:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "414:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "415:             VALUE \"ProductName\", \"Rufus\"",
          "417:         END",
          "418:     END",
          "419:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "410:             VALUE \"FileVersion\", \"3.1.1316\"",
          "416:             VALUE \"ProductVersion\", \"3.1.1316\"",
          "",
          "[Added Lines]",
          "410:             VALUE \"FileVersion\", \"3.1.1317\"",
          "416:             VALUE \"ProductVersion\", \"3.1.1317\"",
          "",
          "---------------"
        ],
        "src/stdio.c||src/stdio.c": [
          "File: src/stdio.c -> src/stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:  DWORD nTry;",
          "340:  BOOL readFilePointer;",
          "341:  LARGE_INTEGER liFilePointer, liZero = { { 0,0 } };",
          "345:  readFilePointer = SetFilePointerEx(hFile, liZero, &liFilePointer, FILE_CURRENT);",
          "346:  if (!readFilePointer)",
          "349:  if (nNumRetries == 0)",
          "350:   nNumRetries = 1;",
          "351:  for (nTry = 1; nTry <= nNumRetries; nTry++) {",
          "353:   if ((nTry > 1) && (!SetFilePointerEx(hFile, liFilePointer, NULL, FILE_BEGIN))) {",
          "355:    break;",
          "356:   }",
          "357:   if (WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, NULL)) {",
          "",
          "[Removed Lines]",
          "342:  static char* retry_msg = \" - retrying...\";",
          "347:   uprintf(\"  Warning - Could not read file pointer: %s\", WindowsErrorString());",
          "354:    uprintf(\"  Could not set file pointer - aborting\");",
          "",
          "[Added Lines]",
          "346:   uprintf(\"Warning: Could not read file pointer: %s\", WindowsErrorString());",
          "353:    uprintf(\"Could not set file pointer - Aborting\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:     uprintf(\"Warning: Possible short write\");",
          "363:     return TRUE;",
          "364:    }",
          "367:   } else {",
          "369:   }",
          "371:   if (!readFilePointer)",
          "372:    break;",
          "374:  }",
          "375:  if (SCODE_CODE(GetLastError()) == ERROR_SUCCESS)",
          "376:   SetLastError(ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_WRITE_FAULT);",
          "",
          "[Removed Lines]",
          "365:    uprintf(\"  Wrote %d bytes but requested %d%s\", *lpNumberOfBytesWritten,",
          "366:     nNumberOfBytesToWrite, nTry < nNumRetries ? retry_msg : \"\");",
          "368:    uprintf(\"  Write error [0x%08X]%s\", GetLastError(), nTry < nNumRetries ? retry_msg : \"\");",
          "373:   Sleep(200);",
          "",
          "[Added Lines]",
          "364:    uprintf(\"Wrote %d bytes but requested %d\", *lpNumberOfBytesWritten, nNumberOfBytesToWrite);",
          "366:    uprintf(\"Write error [0x%08X]\", GetLastError());",
          "371:   if (nTry < nNumRetries) {",
          "372:    uprintf(\"Retrying in %d seconds...\", WRITE_TIMEOUT / 1000);",
          "373:    Sleep(WRITE_TIMEOUT);",
          "374:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}