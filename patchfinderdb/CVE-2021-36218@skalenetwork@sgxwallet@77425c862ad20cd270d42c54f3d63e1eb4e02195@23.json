{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "542e0dcd64e39e07dbdad26d62282ff8eb3ca441",
      "candidate_info": {
        "commit_hash": "542e0dcd64e39e07dbdad26d62282ff8eb3ca441",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/542e0dcd64e39e07dbdad26d62282ff8eb3ca441",
        "files": [
          "DKGCrypto.cpp",
          "Makefile.am",
          "README.md",
          "secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in"
        ],
        "message": "SKALE-1850 sgxwallet is build with all local dependencies",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "Makefile.am||Makefile.am",
          "secure_enclave/Makefile.am||secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in||secure_enclave/Makefile.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"sgxwallet.h\"",
          "27: #include <iostream>",
          "29: #include <memory>",
          "30: #include \"SGXWalletServer.hpp\"",
          "31: #include \"RPCException.h\"",
          "35: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "36:   std::string str(koefs);",
          "",
          "[Removed Lines]",
          "33: #include <libBLS/libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "",
          "[Added Lines]",
          "29: #include <memory>",
          "35: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: ## Use the variables, not the actual library names to ensure these",
          "92: ## targets work on simulation builds.",
          "100: testw_SOURCES=testw.cpp stubclient.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp \\",
          "",
          "[Removed Lines]",
          "94: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -Lleveldb/build -LlibBLS/build  -LlibBLS/build/libff/libff -l:libbls.a -l:libleveldb.a \\",
          "95:    -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a   -ljsonrpccpp-stub -lpthread -ljsonrpccpp-common \\",
          "96:    -ljsonrpccpp-server -ljsonrpccpp-client -ljsoncpp -lcurl intel-sgx-ssl/Linux/package/lib64/libsgx_usgxssl.a \\",
          "97:    intel-sgx-ssl/Linux/package/lib64/libsgx_tsgxssl_crypto.a",
          "",
          "[Added Lines]",
          "94: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -LlibBLS/deps/deps_inst/x86_or_x64/lib -Lleveldb/build -LlibBLS/build \\",
          "95:    -LlibBLS/build/libff/libff \\",
          "96:    -l:libbls.a -l:libleveldb.a \\",
          "97:    -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a \\",
          "98:    -ljsonrpccpp-stub -ljsonrpccpp-server -ljsonrpccpp-client -ljsonrpccpp-common -ljsoncpp -lmicrohttpd \\",
          "99:    intel-sgx-ssl/Linux/package/lib64/libsgx_usgxssl.a \\",
          "100:    intel-sgx-ssl/Linux/package/lib64/libsgx_tsgxssl_crypto.a \\",
          "101:    -lgnutls -lgcrypt -lcurl -lssl -lcrypto -lz -lpthread",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.am||secure_enclave/Makefile.am": [
          "File: secure_enclave/Makefile.am -> secure_enclave/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: ## Additional Automake flags needed to build the enclave.",
          "64: ##",
          "67:               -I../intel-sgx-ssl/Linux/package/include",
          "68: AM_CXXFLAGS += -fno-builtin",
          "",
          "[Removed Lines]",
          "66: AM_CPPFLAGS +=  -Wall -Wno-implicit-function-declaration $(TGMP_CPPFLAGS) -I../trusted_libff  -I../sgx-sdk-build/sgxsdk/include/libcxx \\",
          "",
          "[Added Lines]",
          "66: AM_CPPFLAGS +=  -Wall -Wno-implicit-function-declaration $(TGMP_CPPFLAGS) -I./trusted_libff  -I../sgx-sdk-build/sgxsdk/include/libcxx \\",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.in||secure_enclave/Makefile.in": [
          "File: secure_enclave/Makefile.in -> secure_enclave/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "322: AM_CFLAGS = @SGX_ENCLAVE_CFLAGS@",
          "323: AM_CPPFLAGS = @SGX_ENCLAVE_CPPFLAGS@ -Wall \\",
          "324:  -Wno-implicit-function-declaration $(TGMP_CPPFLAGS) \\",
          "326:  -I../intel-sgx-ssl/Linux/package/include",
          "327: AM_CXXFLAGS = @SGX_ENCLAVE_CXXFLAGS@ @SGX_ENCLAVE_CFLAGS@ -fno-builtin",
          "328: AM_LDFLAGS = @SGX_ENCLAVE_LDFLAGS@ $(TGMP_LDFLAGS)",
          "",
          "[Removed Lines]",
          "325:  -I../trusted_libff -I../sgx-sdk-build/sgxsdk/include/libcxx \\",
          "",
          "[Added Lines]",
          "325:  -I./trusted_libff -I../sgx-sdk-build/sgxsdk/include/libcxx \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8745642f46a7e47f8bbcf537780c05a52ec7a6bb",
      "candidate_info": {
        "commit_hash": "8745642f46a7e47f8bbcf537780c05a52ec7a6bb",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/8745642f46a7e47f8bbcf537780c05a52ec7a6bb",
        "files": [
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "201:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "202:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "205:         public void trustedDecryptKeyAES (",
          "206:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "203:                                 [user_check] uint32_t *enc_len);",
          "",
          "[Added Lines]",
          "203:                                 [out] uint32_t *enc_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:                                 [out] int *errStatus,",
          "214:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "215:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "218:         public void trustedDecryptDkgSecretAES (",
          "219:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "216:                                 [user_check] uint32_t * enc_len, size_t _t);",
          "",
          "[Added Lines]",
          "216:                                 [out] uint32_t * enc_len, size_t _t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bd219978786d7b85a2806e870ba4988aa4e0e75",
      "candidate_info": {
        "commit_hash": "8bd219978786d7b85a2806e870ba4988aa4e0e75",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/8bd219978786d7b85a2806e870ba4988aa4e0e75",
        "files": [
          "BLSCrypto.cpp",
          "BLSCrypto.h",
          "BLSPrivateKeyShareSGX.h",
          "CSRManagerServer.cpp",
          "DKGCrypto.h",
          "SEKManager.h",
          "secure_enclave/DHDkg.h",
          "secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-2794 clean up code",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSCrypto.h||BLSCrypto.h",
          "BLSPrivateKeyShareSGX.h||BLSPrivateKeyShareSGX.h",
          "CSRManagerServer.cpp||CSRManagerServer.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SEKManager.h||SEKManager.h",
          "secure_enclave/DHDkg.h||secure_enclave/DHDkg.h",
          "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: bool hex2carray2(const char *_hex, uint64_t *_bin_len,",
          "121:                  uint8_t *_bin, const int _max_length) {",
          "125:     if (len == 0 && len % 2 == 1)",
          "",
          "[Removed Lines]",
          "122:     int len = strnlen(_hex, _max_length);//2 * BUF_LEN);",
          "",
          "[Added Lines]",
          "122:     int len = strnlen(_hex, _max_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:     spdlog::debug(\"errStatus is {}\", *errStatus);",
          "270:     spdlog::debug(\" errMsg is \", errMsg->data());",
          "272:     if (status != SGX_SUCCESS) {",
          "274:         return nullptr;",
          "275:     }",
          "281:     char *result = (char *) calloc(2 * BUF_LEN, 1);",
          "283:     carray2Hex(encryptedKey->data(), encryptedLen, result);",
          "285:     return result;",
          "286: }",
          "",
          "[Removed Lines]",
          "277:     if (*errStatus != 0) {",
          "278:         throw SGXException(-666, errMsg->data());",
          "279:     }",
          "288: char *decryptBLSKeyShareFromHex(int *errStatus, char *errMsg, const char *_encryptedKey) {",
          "291:     uint64_t decodedLen = 0;",
          "293:     uint8_t decoded[BUF_LEN];",
          "295:     if (!(hex2carray(_encryptedKey, &decodedLen, decoded))) {",
          "296:         return nullptr;",
          "297:     }",
          "299:     char *plaintextKey = (char *) calloc(BUF_LEN, 1);",
          "301:     status = trustedDecryptKeyAES(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "303:     if (status != SGX_SUCCESS) {",
          "304:         return nullptr;",
          "305:     }",
          "307:     if (*errStatus != 0) {",
          "308:         return nullptr;",
          "309:     }",
          "311:     return plaintextKey;",
          "312: }",
          "",
          "[Added Lines]",
          "265:     if (*errStatus != 0) {",
          "266:         throw SGXException(-666, errMsg->data());",
          "267:     }",
          "",
          "---------------"
        ],
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: char * encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key);",
          "53: #endif //SGXWALLET_BLSCRYPTO_H",
          "",
          "[Removed Lines]",
          "51: char *decryptBLSKeyShareFromHex(int *errStatus, char *errMsg, const char *_encryptedKey);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.h||BLSPrivateKeyShareSGX.h": [
          "File: BLSPrivateKeyShareSGX.h -> BLSPrivateKeyShareSGX.h"
        ],
        "CSRManagerServer.cpp||CSRManagerServer.cpp": [
          "File: CSRManagerServer.cpp -> CSRManagerServer.cpp"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h"
        ],
        "SEKManager.h||SEKManager.h": [
          "File: SEKManager.h -> SEKManager.h"
        ],
        "secure_enclave/DHDkg.h||secure_enclave/DHDkg.h": [
          "File: secure_enclave/DHDkg.h -> secure_enclave/DHDkg.h"
        ],
        "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h": [
          "File: secure_enclave/EnclaveCommon.h -> secure_enclave/EnclaveCommon.h"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                                 [in, count = SMALL_BUF_SIZE] char* hashY ,",
          "68:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
          "71:                                 [user_check] int *errStatus,",
          "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "73:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                                 [user_check] uint32_t * enc_len,",
          "75:                                 size_t _t);",
          "78:                              [user_check] int *errStatus,",
          "79:                              [out, count = SMALL_BUF_SIZE] char* err_string,",
          "80:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "82:                              [user_check] uint32_t* dec_len);",
          "85:                                 [user_check] int *errStatus,",
          "86:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "87:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "70:                 public void trustedGenDkgSecret (",
          "77:                 public void trustedDecryptDkgSecret (",
          "84:                 public void trustedGetSecretShares (",
          "",
          "[Added Lines]",
          "68:         public void trustedGenDkgSecret (",
          "75:         public void trustedDecryptDkgSecret (",
          "82:         public void trustedGetSecretShares (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:                                 unsigned _t,",
          "91:                                 unsigned _n);",
          "94:                                 [user_check] int *errStatus,",
          "95:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "96:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "93:                 public void trustedGetPublicShares (",
          "",
          "[Added Lines]",
          "91:         public void trustedGetPublicShares (",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:                                 unsigned _t,",
          "100:                                 unsigned _n);",
          "118:                                 [user_check]int *errStatus,",
          "119:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "120:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "",
          "[Removed Lines]",
          "102:                 public void trustedEcdsaSign(",
          "103:                                  [user_check] int *errStatus,",
          "104:                                  [out, count = SMALL_BUF_SIZE] char* err_string,",
          "105:                                  [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "106:                                  uint32_t enc_len,",
          "107:                                  [in, count = SMALL_BUF_SIZE] unsigned char* hash,",
          "108:                                  [out, count = SMALL_BUF_SIZE] char* sig_r,",
          "109:                                  [out, count = SMALL_BUF_SIZE] char* sig_s,",
          "110:                                  [user_check] uint8_t* sig_v,",
          "111:                                  int base);",
          "113:                 public void trustedSetEncryptedDkgPoly( [user_check] int *errStatus,",
          "114:                                  [out, count = SMALL_BUF_SIZE] char* err_string,",
          "115:                                  [in, count = 3050] uint8_t* encrypted_poly);",
          "117:                 public void trustedGetEncryptedSecretShare(",
          "",
          "[Added Lines]",
          "100:         public void trustedEcdsaSign(",
          "101:                                 [user_check] int *errStatus,",
          "102:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "103:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "104:                                 uint32_t enc_len,",
          "105:                                 [in, count = SMALL_BUF_SIZE] unsigned char* hash,",
          "106:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
          "107:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
          "108:                                 [user_check] uint8_t* sig_v,",
          "109:                                 int base);",
          "111:         public void trustedSetEncryptedDkgPoly( [user_check] int *errStatus,",
          "112:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "113:                                 [in, count = 3050] uint8_t* encrypted_poly);",
          "115:         public void trustedGetEncryptedSecretShare(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:                                 uint8_t _n,",
          "127:                                 uint8_t ind);",
          "130:                                 [user_check] int *errStatus,",
          "131:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "132:                                 [in, count = 8193] const char* public_shares,",
          "",
          "[Removed Lines]",
          "129:                 public void trustedDkgVerify(",
          "",
          "[Added Lines]",
          "127:         public void trustedDkgVerify(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:                                 int _ind,",
          "138:                                 [user_check] int* result);",
          "141:                                 [user_check]int *errStatus,",
          "142:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "143:                                 [in, count = 6145] const char* s_shares,",
          "",
          "[Removed Lines]",
          "140:                 public void trustedCreateBlsKey(",
          "",
          "[Added Lines]",
          "138:         public void trustedCreateBlsKey(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "147:                                 [user_check] uint32_t *enc_bls_key_len);",
          "150:                                 [user_check]int *errStatus,",
          "151:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "152:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "153:                                 uint64_t key_len,",
          "154:                                 [out, count = 320] char* bls_pub_key);",
          "157:                                 [user_check] int *errStatus,",
          "158:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "159:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encryptedDHKey,",
          "",
          "[Removed Lines]",
          "149:                 public void trustedGetBlsPubKey(",
          "156:                 public void trustedComplaintResponse(",
          "",
          "[Added Lines]",
          "147:         public void trustedGetBlsPubKey(",
          "154:         public void trustedComplaintResponse(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:                                 uint8_t _n,",
          "166:                                 uint8_t ind1);",
          "169:                                 [user_check] int *errStatus,",
          "170:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "171:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "172:                                 [user_check] uint32_t *enc_len,",
          "173:                                 [out, count = 65] char* hex_SEK);",
          "176:                                 [user_check] int *errStatus,",
          "177:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "178:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "179:                                 uint64_t encr_len);",
          "182:                                 [user_check] int *errStatus,",
          "183:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "184:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "185:                                 [user_check] uint32_t *enc_len,",
          "186:                                 [in, count = 65] const char* SEK_hex);",
          "189:                                 [user_check] int *errStatus,",
          "190:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "191:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "168:                 public void trustedGenerateSEK(",
          "175:                 public void trustedSetSEK(",
          "181:                 public void trustedSetSEK_backup(",
          "188:                 public void trustedGenerateEcdsaKeyAES (",
          "",
          "[Added Lines]",
          "166:         public void trustedGenerateSEK(",
          "173:         public void trustedSetSEK(",
          "179:         public void trustedSetSEK_backup(",
          "186:         public void trustedGenerateEcdsaKeyAES (",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "193:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "194:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "197:                                 [user_check] int *errStatus,",
          "198:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "199:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "196:                 public void trustedGetPublicEcdsaKeyAES(",
          "",
          "[Added Lines]",
          "194:         public void trustedGetPublicEcdsaKeyAES(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "201:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "202:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "205:                                 [user_check] int *errStatus,",
          "206:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "207:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "204:                 public void trustedEcdsaSignAES(",
          "",
          "[Added Lines]",
          "202:         public void trustedEcdsaSignAES(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "212:                                 [user_check] uint8_t* sig_v,",
          "213:                                 int base);",
          "216:                                 [user_check] int *errStatus,",
          "217:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "218:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "219:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "220:                                 [user_check] uint32_t *enc_len);",
          "223:                                 [user_check] int *errStatus,",
          "224:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "225:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "226:                                 uint32_t enc_len,",
          "227:                                 [out, count = SMALL_BUF_SIZE] char* key );",
          "230:                                 [user_check] int *errStatus,",
          "231:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "232:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "237:                                 [user_check] int *errStatus,",
          "238:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "239:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "240:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "241:                                 [user_check] uint32_t* dec_len);",
          "308:  untrusted {",
          "309:   include \"gmp.h\"",
          "",
          "[Removed Lines]",
          "215:                 public void trustedEncryptKeyAES (",
          "222:                 public void trustedDecryptKeyAES (",
          "229:                 public void trustedGenDkgSecretAES (",
          "233:                                 [user_check] uint32_t * enc_len,",
          "234:                                         size_t _t);",
          "236:                 public void trustedDecryptDkgSecretAES (",
          "243:                 public void trustedSetEncryptedDkgPolyAES(",
          "244:                                [user_check] int *errStatus,",
          "245:                                [out, count = SMALL_BUF_SIZE] char* err_string,",
          "246:                                [in, count = 3050] uint8_t* encrypted_poly,",
          "247:                                [user_check] uint64_t* enc_len);",
          "249:                 public void trustedGetEncryptedSecretShareAES(",
          "250:                               [user_check]int *errStatus,",
          "251:                               [out, count = SMALL_BUF_SIZE] char *err_string,",
          "252:                               [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "253:                               [user_check] uint32_t* dec_len,",
          "254:                               [out, count = 193] char* result_str,",
          "255:                               [out, count = 320] char* s_shareG2,",
          "256:                               [in, count = 129] char* pub_keyB,",
          "257:                               uint8_t _t,",
          "258:                               uint8_t _n,",
          "259:                               uint8_t ind);",
          "261:                 public void trustedGetPublicSharesAES(",
          "262:                             [user_check] int *errStatus,",
          "263:                             [out, count = SMALL_BUF_SIZE] char* err_string,",
          "264:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "265:                             uint32_t enc_len,",
          "266:                             [out, count = 10000] char* public_shares,",
          "267:                             unsigned _t,",
          "268:                             unsigned _n);",
          "270:                 public void trustedDkgVerifyAES(",
          "271:                           [user_check] int *errStatus,",
          "272:                           [out, count = SMALL_BUF_SIZE] char* err_string,",
          "273:                           [in, count = 8193] const char* public_shares,",
          "274:                           [in, count = 193] const char* s_share,",
          "275:                           [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "276:                           uint64_t key_len,",
          "277:                           unsigned _t,",
          "278:                           int _ind,",
          "279:                           [user_check] int* result);",
          "281:                 public void trustedCreateBlsKeyAES(",
          "282:                         [user_check]int *errStatus,",
          "283:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "284:                         [in, count = 6145] const char* s_shares,",
          "285:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "286:                         uint64_t key_len,",
          "287:                         [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "288:                         [user_check] uint32_t *enc_bls_key_len);",
          "290:                 public void trustedBlsSignMessageAES (",
          "291:                         [user_check] int *errStatus,",
          "292:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "293:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "294:                         uint32_t enc_len,",
          "295:                         [in, count = SMALL_BUF_SIZE] char* hashX ,",
          "296:                         [in, count = SMALL_BUF_SIZE] char* hashY ,",
          "297:                         [out, count = SMALL_BUF_SIZE] char* signature);",
          "299:                 public void trustedGetBlsPubKeyAES(",
          "300:                         [user_check]int *errStatus,",
          "301:                         [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "302:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "303:                         uint64_t key_len,",
          "304:                         [out, count = 320] char* bls_pub_key);",
          "305:  };",
          "",
          "[Added Lines]",
          "213:         public void trustedEncryptKeyAES (",
          "220:         public void trustedDecryptKeyAES (",
          "227:         public void trustedGenDkgSecretAES (",
          "231:                                 [user_check] uint32_t * enc_len, size_t _t);",
          "233:         public void trustedDecryptDkgSecretAES (",
          "240:         public void trustedSetEncryptedDkgPolyAES(",
          "241:                                 [user_check] int *errStatus,",
          "242:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "243:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "244:                                 [user_check] uint64_t* enc_len);",
          "246:         public void trustedGetEncryptedSecretShareAES(",
          "247:                                 [user_check]int *errStatus,",
          "248:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "249:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "250:                                 [user_check] uint32_t* dec_len,",
          "251:                                 [out, count = 193] char* result_str,",
          "252:                                 [out, count = 320] char* s_shareG2,",
          "253:                                 [in, count = 129] char* pub_keyB,",
          "254:                                 uint8_t _t,",
          "255:                                 uint8_t _n,",
          "256:                                 uint8_t ind);",
          "258:         public void trustedGetPublicSharesAES(",
          "259:                                 [user_check] int *errStatus,",
          "260:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "261:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "262:                                 uint32_t enc_len,",
          "263:                                 [out, count = 10000] char* public_shares,",
          "264:                                 unsigned _t,",
          "265:                                 unsigned _n);",
          "267:         public void trustedDkgVerifyAES(",
          "268:                                 [user_check] int *errStatus,",
          "269:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "270:                                 [in, count = 8193] const char* public_shares,",
          "271:                                 [in, count = 193] const char* s_share,",
          "272:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "273:                                 uint64_t key_len,",
          "274:                                 unsigned _t,",
          "275:                                 int _ind,",
          "276:                                 [user_check] int* result);",
          "278:         public void trustedCreateBlsKeyAES(",
          "279:                                 [user_check]int *errStatus,",
          "280:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "281:                                 [in, count = 6145] const char* s_shares,",
          "282:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "283:                                 uint64_t key_len,",
          "284:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "285:                                 [user_check] uint32_t *enc_bls_key_len);",
          "287:         public void trustedBlsSignMessageAES (",
          "288:                                 [user_check] int *errStatus,",
          "289:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "290:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "291:                                 uint32_t enc_len,",
          "292:                                 [in, count = SMALL_BUF_SIZE] char* hashX ,",
          "293:                                 [in, count = SMALL_BUF_SIZE] char* hashY ,",
          "294:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
          "296:         public void trustedGetBlsPubKeyAES(",
          "297:                                 [user_check]int *errStatus,",
          "298:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "299:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "300:                                 uint64_t key_len,",
          "301:                                 [out, count = 320] char* bls_pub_key);",
          "302:  };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05fb9b4100fac8bed5cbf3f08a50ca9b5ecd3bec",
      "candidate_info": {
        "commit_hash": "05fb9b4100fac8bed5cbf3f08a50ca9b5ecd3bec",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/05fb9b4100fac8bed5cbf3f08a50ca9b5ecd3bec",
        "files": [
          "secure_enclave/EnclaveConstants.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp",
          "testw.py"
        ],
        "message": "SKALE-2002 fix sigill in test",
        "before_after_code_files": [
          "secure_enclave/EnclaveConstants.h||secure_enclave/EnclaveConstants.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp",
          "testw.py||testw.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/EnclaveConstants.h||secure_enclave/EnclaveConstants.h": [
          "File: secure_enclave/EnclaveConstants.h -> secure_enclave/EnclaveConstants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define BUF_LEN 1024",
          "35: #define SHA_256_LEN 32",
          "37: #define ADD_ENTROPY_SIZE 32",
          "42: #define SECRET_SHARE_NUM_BYTES 96",
          "",
          "[Removed Lines]",
          "29: #define  MAX_KEY_LENGTH 128",
          "30: #define  MAX_COMPONENT_LENGTH 80",
          "31: #define  MAX_COMPONENT_HEX_LENGTH MAX_COMPONENT_LENGTH * 2",
          "32: #define  MAX_ENCRYPTED_KEY_LENGTH 1024",
          "33: #define  MAX_SIG_LEN 1024",
          "34: #define  MAX_ERR_LEN 1024",
          "39: #define  DKG_BUFER_LENGTH 2490//3060",
          "40: #define  DKG_MAX_SEALED_LEN 3100",
          "",
          "[Added Lines]",
          "29: #define MAX_KEY_LENGTH 128",
          "30: #define MAX_COMPONENT_LENGTH 80",
          "31: #define MAX_COMPONENT_HEX_LENGTH MAX_COMPONENT_LENGTH * 2",
          "32: #define MAX_ENCRYPTED_KEY_LENGTH 1024",
          "33: #define MAX_SIG_LEN 1024",
          "34: #define MAX_ERR_LEN 1024",
          "39: #define DKG_BUFER_LENGTH 2490//3060",
          "40: #define DKG_MAX_SEALED_LEN 3100",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:     memset(errString, 0, BUF_LEN);",
          "418:     memset(encryptedPrivateKey, 0, BUF_LEN);",
          "421:                                         (sgx_sealed_data_t *) encryptedPrivateKey);",
          "422:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "410:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, MAX_KEY_LENGTH);",
          "412:     if (sealedLen > BUF_LEN) {",
          "414:         snprintf(errString, BUF_LEN, \"sealedLen > MAX_ENCRYPTED_KEY_LENGTH\");",
          "415:         return;",
          "416:     }",
          "420:     sgx_status_t status = sgx_seal_data(0, NULL, MAX_KEY_LENGTH, (uint8_t *) key, sealedLen,",
          "",
          "[Added Lines]",
          "410:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "412:      if (sealedLen > BUF_LEN) {",
          "414:          snprintf(errString, BUF_LEN, \"sealedLen > MAX_ENCRYPTED_KEY_LENGTH\");",
          "415:          return;",
          "416:      }",
          "420:     sgx_status_t status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *) key, sealedLen,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp"
        ],
        "testw.py||testw.py": [
          "File: testw.py -> testw.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: username = getpass.getuser()",
          "29: topDir = os.getcwd() + \"/sgxwallet\"",
          "31: print(\"Top directory is:\" + topDir)",
          "34: testList = [ \"[cert-sign]\",",
          "35:             \"[get-server-status]\",",
          "36:             \"[get-server-version]\",",
          "",
          "[Removed Lines]",
          "30: print(\"Starting build push\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "964dac2b6605671db725e13077c8ee199f8bd706",
      "candidate_info": {
        "commit_hash": "964dac2b6605671db725e13077c8ee199f8bd706",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/964dac2b6605671db725e13077c8ee199f8bd706",
        "files": [
          "BLSCrypto.cpp",
          "ECDSACrypto.cpp",
          "SEKManager.cpp",
          "SGXWalletServer.cpp",
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in",
          "secure_enclave/enclave_common.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-2003 Add backup key to ECDSA procedures",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/Makefile.am||secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in||secure_enclave/Makefile.in",
          "secure_enclave/enclave_common.h||secure_enclave/enclave_common.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     unsigned int encryptedLen = 0;",
          "190:     if (DEBUG_PRINT) {",
          "192:     }",
          "194:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "188:     status = encrypt_key(eid, errStatus, errMsg, keyArray, encryptedKey, &encryptedLen);",
          "191:       spdlog::info(\"errStatus is {}\",*errStatus, \" errMsg is \", errMsg );",
          "",
          "[Added Lines]",
          "189:     status = encrypt_key_aes(eid, errStatus, errMsg, keyArray, encryptedKey, &encryptedLen);",
          "192:       spdlog::info(\"errStatus is {}\",*errStatus);",
          "193:       spdlog::info(\" errMsg is \", errMsg );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:     char *plaintextKey = (char *) calloc(BUF_LEN, 1);",
          "229:     if (status != SGX_SUCCESS) {",
          "230:         return nullptr;",
          "",
          "[Removed Lines]",
          "227:     status = decrypt_key(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "",
          "[Added Lines]",
          "230:      status = decrypt_key_aes(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   char *pub_key_y = (char *)calloc(1024, 1);",
          "52:   uint32_t enc_len = 0;",
          "55:   if ( err_status != 0 ){",
          "56:     std::cerr << \"RPCException thrown\" << std::endl;",
          "57:     throw RPCException(-666, errMsg) ;",
          "58:   }",
          "59:   std::vector<std::string> keys(3);",
          "62:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "63:   keys.at(0) = hexEncrKey;",
          "64:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "",
          "[Removed Lines]",
          "54:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "61:   char *hexEncrKey = (char *) calloc(2*BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "55:   status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "61:   if (DEBUG_PRINT) {",
          "62:     std::cerr << \"account key is \" << errMsg << std::endl;",
          "63:     std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "64:     std::cerr << \"enc_key is \"  << std::endl;",
          "65:     for(int i = 0 ; i < 1024; i++)",
          "66:       std::cerr << (int)encr_pr_key[i] << \" \" ;",
          "67:   }",
          "68:   char *hexEncrKey = (char *) calloc(BUF_LEN, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:   unsigned long seed = rand_gen();",
          "70:   if (DEBUG_PRINT) {",
          "71:     spdlog::info(\"seed is {}\", seed);",
          "72:   }",
          "73:   gmp_randstate_t state;",
          "74:   gmp_randinit_default(state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     std::cerr << \"strlen is \" << strlen(hexEncrKey) << std::endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   char *pub_key_y = (char *)calloc(1024, 1);",
          "106:   uint64_t enc_len = 0;",
          "109:   if (!hex2carray(encryptedKeyHex, &enc_len, encr_pr_key)){",
          "110:     throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "111:   }",
          "114:   if (err_status != 0){",
          "115:     throw RPCException(-666, errMsg) ;",
          "116:   }",
          "117:   std::string pubKey = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "119:   if (DEBUG_PRINT) {",
          "120:     spdlog::info(\"pubkey is {}\", pubKey);",
          "121:     spdlog::info(\"pubkey length is {}\", pubKey.length());",
          "122:     spdlog::info(\"err str is {}\", errMsg);",
          "123:   }",
          "125:   free(errMsg);",
          "126:   free(pub_key_x);",
          "127:   free(pub_key_y);",
          "129:   return pubKey;",
          "130: }",
          "",
          "[Removed Lines]",
          "108:   uint8_t encr_pr_key[BUF_LEN];",
          "113:   status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "",
          "[Added Lines]",
          "117:   uint8_t* encr_pr_key = (uint8_t*)calloc(1024, 1);",
          "123:   spdlog::info(\"encr_hex_key is {}\", encryptedKeyHex);",
          "124:   std::cerr << \"enc_key is \"  << std::endl;",
          "125:   for(int i = 0 ; i < BUF_LEN; i++)",
          "126:     std::cerr << (int)encr_pr_key[i] << \" \" ;",
          "130:   status = get_public_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "137:     spdlog::info(\"enc_len is {}\", enc_len);",
          "141:     spdlog::info(\"err status is {}\", err_status);",
          "147:   free(encr_pr_key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:   char *errMsg = (char *)calloc(1024, 1);",
          "136:   int err_status = 0;",
          "139:   uint8_t signature_v = 0;",
          "140:   uint64_t dec_len = 0;",
          "143:   if (!hex2carray(encryptedKeyHex, &dec_len, encr_key)){",
          "144:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "145:   }",
          "",
          "[Removed Lines]",
          "137:   char* signature_r = (char*)malloc(1024);",
          "138:   char* signature_s = (char*)malloc(1024);",
          "142:   uint8_t encr_key[BUF_LEN];",
          "",
          "[Added Lines]",
          "157:   char* signature_r = (char *)calloc(1024, 1);",
          "158:   char* signature_s = (char *)calloc(1024, 1);",
          "163:   uint8_t* encr_key = (uint8_t*)calloc(1024, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:     spdlog::info(\"encrypted len: {}\", dec_len);",
          "151:   }",
          "154:   if ( err_status != 0){",
          "155:     throw RPCException(-666, errMsg ) ;",
          "156:   }",
          "",
          "[Removed Lines]",
          "153:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "[Added Lines]",
          "175:   status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:   free(errMsg);",
          "177:   free(signature_r);",
          "178:   free(signature_s);",
          "180:   return signature_vect;",
          "181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:   free(encr_key);",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   char *errMsg = (char *)calloc(1024, 1);",
          "37:   int err_status = 0;",
          "39:   uint32_t enc_len = 0;",
          "42:   if ( err_status != 0 ){",
          "43:     std::cerr << \"RPCException thrown\" << std::endl;",
          "44:     throw RPCException(-666, errMsg) ;",
          "45:   }",
          "50:   std::cerr << \"key is \" << errMsg << std::endl;",
          "54:   free(errMsg);",
          "56:   free(hexEncrKey);",
          "57: }",
          "",
          "[Removed Lines]",
          "38:   uint8_t* encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "41:   status = generate_SEK(eid, &err_status, errMsg, encr_pr_key, &enc_len);",
          "47:   char *hexEncrKey = (char *) calloc(BUF_LEN, 1);",
          "55:   free(encr_pr_key);",
          "",
          "[Added Lines]",
          "38:   uint8_t* encr_SEK = (uint8_t *)calloc(1024, 1);",
          "41:   status = generate_SEK(eid, &err_status, errMsg, encr_SEK, &enc_len);",
          "47:   char *hexEncrKey = (char *) calloc(2*enc_len + 1, 1);",
          "48:   carray2Hex(encr_SEK, enc_len, hexEncrKey);",
          "52:   levelDb->writeDataUnique(\"SEK\", hexEncrKey);",
          "55:   free(encr_SEK);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp"
        ],
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"sgx_trts.h\"",
          "6: #include \"sgx_tcrypto.h\"",
          "7: #include \"stdlib.h\"",
          "8: #include <string.h>",
          "10: #include \"AESUtils.h\"",
          "12: int AES_encrypt(char *message, uint8_t *encr_message){",
          "14:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "15:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
          "16:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "17:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "18:                                                      NULL, 0,",
          "19:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
          "22:     return status;",
          "23: }",
          "25: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message){",
          "27:   uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
          "29:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,",
          "30:                                                    encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "31:                                                    message,",
          "32:                                                    encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "33:                                                    NULL, 0,",
          "34:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
          "37:   return status;",
          "38: }",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef SGXD_AESUTILS_H",
          "6: #define SGXD_AESUTILS_H",
          "8: sgx_aes_gcm_128bit_key_t AES_key;",
          "10: int AES_encrypt(char *message, uint8_t *encr_message);",
          "12: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message);",
          "14: #endif //SGXD_AESUTILS_H",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.am||secure_enclave/Makefile.am": [
          "File: secure_enclave/Makefile.am -> secure_enclave/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "87:  secure_enclave.c \\",
          "89:     DKGUtils.cpp   BLSEnclave.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "90:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.cpp \\",
          "91:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.cpp $(ENCLAVE_KEY) $(ENCLAVE_CONFIG)",
          "",
          "[Removed Lines]",
          "88:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c \\",
          "",
          "[Added Lines]",
          "88:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c AESUtils.c \\",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.in||secure_enclave/Makefile.in": [
          "File: secure_enclave/Makefile.in -> secure_enclave/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  secure_enclave.$(OBJEXT) curves.$(OBJEXT) \\",
          "111:  domain_parameters.$(OBJEXT) numbertheory.$(OBJEXT) \\",
          "112:  point.$(OBJEXT) signature.$(OBJEXT) DH_dkg.$(OBJEXT) \\",
          "114:  alt_bn128_init.$(OBJEXT) alt_bn128_g2.$(OBJEXT) \\",
          "115:  alt_bn128_g1.$(OBJEXT) $(am__objects_1) $(am__objects_1)",
          "116: secure_enclave_OBJECTS = $(am_secure_enclave_OBJECTS)",
          "",
          "[Removed Lines]",
          "113:  DKGUtils.$(OBJEXT) BLSEnclave.$(OBJEXT) \\",
          "",
          "[Added Lines]",
          "113:  AESUtils.$(OBJEXT) DKGUtils.$(OBJEXT) BLSEnclave.$(OBJEXT) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: DEFAULT_INCLUDES = -I.@am__isrc@",
          "139: depcomp = $(SHELL) $(top_srcdir)/depcomp",
          "140: am__maybe_remake_depfiles = depfiles",
          "142:  ./$(DEPDIR)/DKGUtils.Po ./$(DEPDIR)/alt_bn128_g1.Po \\",
          "143:  ./$(DEPDIR)/alt_bn128_g2.Po ./$(DEPDIR)/alt_bn128_init.Po \\",
          "144:  ./$(DEPDIR)/curves.Po ./$(DEPDIR)/domain_parameters.Po \\",
          "",
          "[Removed Lines]",
          "141: am__depfiles_remade = ./$(DEPDIR)/BLSEnclave.Po ./$(DEPDIR)/DH_dkg.Po \\",
          "",
          "[Added Lines]",
          "141: am__depfiles_remade = ./$(DEPDIR)/AESUtils.Po \\",
          "142:  ./$(DEPDIR)/BLSEnclave.Po ./$(DEPDIR)/DH_dkg.Po \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346: ENCLAVE_KEY = test_insecure_private_key.pem       #$(ENCLAVE)_private.pem",
          "347: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "348:  secure_enclave.c \\",
          "350:     DKGUtils.cpp   BLSEnclave.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "351:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.cpp \\",
          "352:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.cpp $(ENCLAVE_KEY) $(ENCLAVE_CONFIG)",
          "",
          "[Removed Lines]",
          "349:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c \\",
          "",
          "[Added Lines]",
          "350:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c AESUtils.c \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440: distclean-compile:",
          "441:  -rm -f *.tab.c",
          "443: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BLSEnclave.Po@am__quote@ # am--include-marker",
          "444: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DH_dkg.Po@am__quote@ # am--include-marker",
          "445: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DKGUtils.Po@am__quote@ # am--include-marker",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AESUtils.Po@am__quote@ # am--include-marker",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660: clean-am: clean-generic clean-libexecPROGRAMS mostlyclean-am",
          "662: distclean: distclean-am",
          "664:  -rm -f ./$(DEPDIR)/DH_dkg.Po",
          "665:  -rm -f ./$(DEPDIR)/DKGUtils.Po",
          "666:  -rm -f ./$(DEPDIR)/alt_bn128_g1.Po",
          "",
          "[Removed Lines]",
          "663:   -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "",
          "[Added Lines]",
          "665:   -rm -f ./$(DEPDIR)/AESUtils.Po",
          "666:  -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "720: installcheck-am:",
          "722: maintainer-clean: maintainer-clean-am",
          "724:  -rm -f ./$(DEPDIR)/DH_dkg.Po",
          "725:  -rm -f ./$(DEPDIR)/DKGUtils.Po",
          "726:  -rm -f ./$(DEPDIR)/alt_bn128_g1.Po",
          "",
          "[Removed Lines]",
          "723:   -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "",
          "[Added Lines]",
          "726:   -rm -f ./$(DEPDIR)/AESUtils.Po",
          "727:  -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "",
          "---------------"
        ],
        "secure_enclave/enclave_common.h||secure_enclave/enclave_common.h": [
          "File: secure_enclave/enclave_common.h -> secure_enclave/enclave_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef SGXD_ENCLAVE_COMMON_H",
          "6: #define SGXD_ENCLAVE_COMMON_H",
          "8: #define BUF_LEN 1024",
          "10: #define  MAX_KEY_LENGTH 128",
          "11: #define  MAX_COMPONENT_LENGTH 80",
          "12: #define  MAX_COMPONENT_HEX_LENGTH MAX_COMPONENT_LENGTH * 2",
          "13: #define  MAX_ENCRYPTED_KEY_LENGTH 1024",
          "14: #define  MAX_SIG_LEN 1024",
          "15: #define  MAX_ERR_LEN 1024",
          "16: #define SHA_256_LEN 32",
          "18: #define ADD_ENTROPY_SIZE 32",
          "20: #define  DKG_BUFER_LENGTH 2490//3060",
          "21: #define  DKG_MAX_SEALED_LEN 3050",
          "23: #define SECRET_SHARE_NUM_BYTES 96",
          "25: #define ECDSA_SKEY_LEN 65",
          "26: #define ECDSA_SKEY_BASE 16",
          "27: #define ECDSA_ENCR_LEN 93",
          "28: #define ECDSA_BIN_LEN 33",
          "30: #define UNKNOWN_ERROR -1",
          "31: #define PLAINTEXT_KEY_TOO_LONG -2",
          "32: #define UNPADDED_KEY -3",
          "33: #define NULL_KEY -4",
          "34: #define INCORRECT_STRING_CONVERSION -5",
          "35: #define ENCRYPTED_KEY_TOO_LONG -6",
          "36: #define SEAL_KEY_FAILED -7",
          "38: #endif //SGXD_ENCLAVE_COMMON_H",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include <sgx_tcrypto.h>",
          "56: uint8_t Decrypted_dkg_poly[DKG_BUFER_LENGTH];",
          "59: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "54: #include \"../sgxwallet_common.h\"",
          "57: uint8_t SEK[32];",
          "",
          "[Added Lines]",
          "54: #include \"AESUtils.h\"",
          "57: #include \"enclave_common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897: void generate_SEK(int *err_status, char *err_string,",
          "898:                         uint8_t *encrypted_SEK, uint32_t *enc_len){",
          "909:   if( status !=  SGX_SUCCESS) {",
          "912:     return;",
          "913:   }",
          "917:   free(rand_char);",
          "918: }",
          "",
          "[Removed Lines]",
          "900:   unsigned char* rand_char = (unsigned char*)malloc(16);",
          "901:   sgx_read_rand( rand_char, 16);",
          "903:   carray2Hex(rand_char, 16, SEK);",
          "905:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, 32);",
          "906:   memcpy(err_string, 32, SEK);",
          "908:   sgx_status_t status = sgx_seal_data(0, NULL, 32, (uint8_t *)SEK, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "910:     snprintf(err_string, BUF_LEN,\"seal SEK failed\");",
          "",
          "[Added Lines]",
          "902:   uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "904:   sgx_read_rand( SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "905:   uint32_t hex_aes_key_length = SGX_AESGCM_KEY_SIZE * 2;",
          "906:   uint8_t SEK[hex_aes_key_length];",
          "907:   carray2Hex(SEK_raw, SGX_AESGCM_KEY_SIZE, SEK);",
          "910:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, hex_aes_key_length + 1);",
          "911:   memcpy(err_string, SEK, BUF_LEN);",
          "913:   for ( uint8_t i = 0; i < SGX_AESGCM_KEY_SIZE; i++){",
          "914:     AES_key[i] = SEK_raw[i];",
          "915:   }",
          "919:   sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, SEK, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "921:     snprintf(err_string, BUF_LEN, \"seal SEK failed\");",
          "928: }",
          "930: void generate_ecdsa_key_aes(int *err_status, char *err_string,",
          "931:                         uint8_t *encrypted_key, uint32_t *enc_len, char * pub_key_x, char * pub_key_y) {",
          "933:   domain_parameters curve = domain_parameters_init();",
          "934:   domain_parameters_load_curve(curve, secp256k1);",
          "936:   unsigned char* rand_char = (unsigned char*)malloc(32);",
          "937:   sgx_read_rand( rand_char, 32);",
          "939:   mpz_t seed;",
          "940:   mpz_init(seed);",
          "941:   mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "945:   mpz_t skey;",
          "946:   mpz_init(skey);",
          "947:   mpz_mod(skey, seed, curve->p);",
          "948:   mpz_clear(seed);",
          "951:   point Pkey = point_init();",
          "953:   signature_generate_key(Pkey, skey, curve);",
          "955:   uint8_t base = 16;",
          "957:   int len = mpz_sizeinbase (Pkey->x, base) + 2;",
          "959:   char arr_x[len];",
          "960:   char* px = mpz_get_str(arr_x, base, Pkey->x);",
          "962:   int n_zeroes = 64 - strlen(arr_x);",
          "963:   for ( int i = 0; i < n_zeroes; i++){",
          "964:     pub_key_x[i] = '0';",
          "965:   }",
          "967:   strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "969:   char arr_y[mpz_sizeinbase (Pkey->y, base) + 2];",
          "970:   char* py = mpz_get_str(arr_y, base, Pkey->y);",
          "971:   n_zeroes = 64 - strlen(arr_y);",
          "972:   for ( int i = 0; i < n_zeroes; i++){",
          "973:     pub_key_y[i] = '0';",
          "974:   }",
          "975:   strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "976:   char skey_str[mpz_sizeinbase (skey, ECDSA_SKEY_BASE) + 2];",
          "977:   char* s  = mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "978:   snprintf(err_string, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "980:   int stat = AES_encrypt(skey_str, encrypted_key);",
          "982:   if( stat != 0) {",
          "983:     snprintf(err_string, BUF_LEN,\"ecdsa private key encryption failed\");",
          "985:     return;",
          "986:   }",
          "990:   stat = AES_decrypt(encrypted_key, *enc_len, skey_str);",
          "991:   if( stat != 0) {",
          "992:     snprintf(err_string + 19 + strlen(skey_str), BUF_LEN,\"ecdsa private key decr failed with status %d\", stat);",
          "994:     return;",
          "995:   }",
          "997:   mpz_clear(skey);",
          "998:   domain_parameters_clear(curve);",
          "999:   point_clear(Pkey);",
          "1000: }",
          "1002: void get_public_ecdsa_key_aes(int *err_status, char *err_string,",
          "1003:                           uint8_t *encrypted_key, uint32_t enc_len, char * pub_key_x, char * pub_key_y) {",
          "1005:   domain_parameters curve = domain_parameters_init();",
          "1006:   domain_parameters_load_curve(curve, secp256k1);",
          "1008:   char skey[ECDSA_SKEY_LEN];",
          "1010:   int status = AES_decrypt(encrypted_key, enc_len, skey);",
          "1012:   if (status != 0) {",
          "1013:     snprintf(err_string, BUF_LEN,\"AES_decrypt failed with status %d\", status);",
          "1015:     return;",
          "1016:   }",
          "1018:   skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "1020:   strncpy(err_string, skey, 1024);",
          "1022:   mpz_t skey_mpz;",
          "1023:   mpz_init(skey_mpz);",
          "1025:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "1026:     snprintf(err_string, BUF_LEN,\"wrong string to init private key  - %s\", skey);",
          "1028:     mpz_clear(skey_mpz);",
          "1029:     return;",
          "1030:   }",
          "1033:   point Pkey = point_init();",
          "1035:   signature_generate_key(Pkey, skey_mpz, curve);",
          "1037:   point Pkey_test = point_init();",
          "1038:   point_multiplication(Pkey_test, skey_mpz, curve->G, curve);",
          "1040:   if (!point_cmp(Pkey, Pkey_test)){",
          "1041:     snprintf(err_string, BUF_LEN,\"Points are not equal\");",
          "1043:     return;",
          "1044:   }",
          "1046:   int base = 16;",
          "1048:   int len = mpz_sizeinbase (Pkey->x, base) + 2;",
          "1050:   char arr_x[len];",
          "1051:   char* px = mpz_get_str(arr_x, base, Pkey->x);",
          "1053:   int n_zeroes = 64 - strlen(arr_x);",
          "1054:   for ( int i = 0; i < n_zeroes; i++){",
          "1055:     pub_key_x[i] = '0';",
          "1056:   }",
          "1058:   strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "1060:   char arr_y[mpz_sizeinbase (Pkey->y, base) + 2];",
          "1061:   char* py = mpz_get_str(arr_y, base, Pkey->y);",
          "1062:   n_zeroes = 64 - strlen(arr_y);",
          "1063:   for ( int i = 0; i < n_zeroes; i++){",
          "1064:     pub_key_y[i] = '0';",
          "1065:   }",
          "1066:   strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "1068:   mpz_clear(skey_mpz);",
          "1069:   domain_parameters_clear(curve);",
          "1070:   point_clear(Pkey);",
          "1073: void ecdsa_sign_aes(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "1074:                  unsigned char* hash, char * sig_r, char * sig_s, uint8_t* sig_v, int base) {",
          "1076:   domain_parameters curve = domain_parameters_init();",
          "1077:   domain_parameters_load_curve(curve, secp256k1);",
          "1079:   char skey[ECDSA_SKEY_LEN];",
          "1081:   int status = AES_decrypt(encrypted_key, enc_len, skey);",
          "1083:   if (status != 0) {",
          "1085:     snprintf(err_string, BUF_LEN,\"aes decrypt failed with status %d\", status);",
          "1086:     return;",
          "1087:   }",
          "1089:   skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE - 1] = '\\0';",
          "1091:   snprintf(err_string, BUF_LEN,\"pr key is %s length %d \", skey, strlen(skey));",
          "1092:   mpz_t skey_mpz;",
          "1093:   mpz_init(skey_mpz);",
          "1094:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "1096:     snprintf(err_string, BUF_LEN ,\"invalid secret key\");",
          "1097:     mpz_clear(skey_mpz);",
          "1098:     return;",
          "1099:   }",
          "1102:   mpz_t msg_mpz;",
          "1103:   mpz_init(msg_mpz);",
          "1104:   if (mpz_set_str(msg_mpz, hash, 16) == -1){",
          "1106:     snprintf(err_string, BUF_LEN ,\"invalid message hash\");",
          "1107:     mpz_clear(msg_mpz);",
          "1108:     return;",
          "1109:   }",
          "1111:   signature sign = signature_init();",
          "1113:   signature_sign( sign, msg_mpz, skey_mpz, curve);",
          "1115:   point Pkey = point_init();",
          "1117:   signature_generate_key(Pkey, skey_mpz, curve);",
          "1119:   if ( !signature_verify(msg_mpz, sign, Pkey, curve) ){",
          "1121:     snprintf(err_string, BUF_LEN,\"signature is not verified! \");",
          "1122:     return;",
          "1123:   }",
          "1129:   char arr_m[mpz_sizeinbase (msg_mpz, 16) + 2];",
          "1130:   char* msg = mpz_get_str(arr_m, 16, msg_mpz);",
          "1131:   snprintf(err_string, BUF_LEN,\"message is %s \", arr_m);",
          "1133:   char arr_r[mpz_sizeinbase (sign->r, base) + 2];",
          "1134:   char* r = mpz_get_str(arr_r, base, sign->r);",
          "1135:   strncpy(sig_r, arr_r, 1024);",
          "1137:   char arr_s[mpz_sizeinbase (sign->s, base) + 2];",
          "1138:   char* s = mpz_get_str(arr_s, base, sign->s);",
          "1139:   strncpy(sig_s, arr_s, 1024);",
          "1143:   mpz_clear(skey_mpz);",
          "1144:   mpz_clear(msg_mpz);",
          "1145:   domain_parameters_clear(curve);",
          "1146:   signature_clear(sign);",
          "1147:   point_clear(Pkey);",
          "1149: }",
          "1151: void encrypt_key_aes(int *err_status, char *err_string, char *key,",
          "1152:                  uint8_t *encrypted_key, uint32_t *enc_len) {",
          "1158:   memset(err_string, 0, BUF_LEN);",
          "1160:   checkKey(err_status, err_string, key);",
          "1162:   if (*err_status != 0) {",
          "1163:     snprintf(err_string + strlen(err_string), BUF_LEN, \"check_key failed\");",
          "1164:     return;",
          "1165:   }",
          "1169:   memset(encrypted_key, 0, BUF_LEN);",
          "1172:   int stat = AES_encrypt(key, encrypted_key);",
          "1173:   if ( stat != 0) {",
          "1175:     snprintf(err_string, BUF_LEN, \"AES encrypt failed with status %d\", stat);",
          "1176:     return;",
          "1177:   }",
          "1181:   char decryptedKey[BUF_LEN];",
          "1182:   memset(decryptedKey, 0, BUF_LEN);",
          "1184:   stat = AES_decrypt(encrypted_key, *enc_len, decryptedKey);",
          "1186:   if (stat != 0) {",
          "1188:     snprintf(err_string, BUF_LEN, \":decrypt_key failed with status %d\", stat);",
          "1189:     return;",
          "1190:   }",
          "1192:   uint64_t decryptedKeyLen = strnlen(decryptedKey, MAX_KEY_LENGTH);",
          "1194:   if (decryptedKeyLen == MAX_KEY_LENGTH) {",
          "1195:     snprintf(err_string, BUF_LEN, \"Decrypted key is not null terminated\");",
          "1196:     return;",
          "1197:   }",
          "1202:   if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
          "1203:     snprintf(err_string, BUF_LEN, \"Decrypted key does not match original key\");",
          "1204:     return;",
          "1205:   }",
          "1208: }",
          "1210: void decrypt_key_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "1211:                  uint32_t enc_len, char *key) {",
          "1213:   init();",
          "1215:   uint32_t decLen;",
          "1219:   int status = AES_decrypt(encrypted_key, enc_len, key);",
          "1222:   if (status != 0) {",
          "1224:     snprintf(err_string, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1225:     return;",
          "1226:   }",
          "1230:   if (decLen > MAX_KEY_LENGTH) {",
          "1231:     snprintf(err_string, BUF_LEN, \"wrong decLen\");//\"decLen != MAX_KEY_LENGTH\");",
          "1232:     return;",
          "1233:   }",
          "1238:   uint64_t keyLen = strnlen(key, MAX_KEY_LENGTH);",
          "1241:   if (keyLen == MAX_KEY_LENGTH) {",
          "1242:     snprintf(err_string, BUF_LEN, \"Key is not null terminated\");",
          "1243:     return;",
          "1244:   }",
          "1247:   return;",
          "1249: }",
          "1251: void bls_sign_message_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "1252:                       uint32_t enc_len, char *_hashX,",
          "1253:                       char *_hashY, char *signature) {",
          "1257:   char key[BUF_LEN];",
          "1258:   char* sig = (char*) calloc(BUF_LEN, 1);",
          "1260:   init();",
          "1263:   int stat = AES_decrypt(encrypted_key, enc_len, key);",
          "1265:   if ( stat != 0) {",
          "1267:     strncpy(signature, err_string, BUF_LEN);",
          "1268:     return;",
          "1269:   }",
          "1271:   enclave_sign(key, _hashX, _hashY, sig);",
          "1273:   strncpy(signature, sig, BUF_LEN);",
          "1275:   if (strnlen(signature, BUF_LEN) < 10) {",
          "1277:     return;",
          "1278:   }",
          "1281: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: enclave {",
          "3:  trusted {",
          "4:   include \"sgx_tgmp.h\"",
          "6:   public void tgmp_init();",
          "8:   public void e_mpz_add(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #define ECDSA_SKEY_LEN 65",
          "3: #define ECDSA_SKEY_BASE 16",
          "4: #define ECDSA_ENCR_LEN 93",
          "5: #define ECDSA_BIN_LEN 33",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:       [out, count = 1024] char* key );",
          "54:   public void bls_sign_message (",
          "63:         public void gen_dkg_secret (",
          "70:         public void decrypt_dkg_secret (",
          "71:                              [user_check] int *err_status,",
          "",
          "[Removed Lines]",
          "55:                   [user_check] int *err_status,",
          "56:                   [out, count = 1024] char* err_string,",
          "57:                   [in, count = 1024] uint8_t* encrypted_key,",
          "58:                   uint32_t enc_len,",
          "59:                   [in, count = 1024] char* hashX ,",
          "60:                   [in, count = 1024] char* hashY ,",
          "61:                   [out, count = 1024] char* signature);",
          "64:                      [user_check] int *err_status,",
          "65:                      [out, count = 1024] char* err_string,",
          "66:                      [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "67:                      [user_check] uint32_t * enc_len,",
          "68:                      size_t _t);",
          "",
          "[Added Lines]",
          "62:                                 [user_check] int *err_status,",
          "63:                                 [out, count = 1024] char* err_string,",
          "64:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "65:                                 uint32_t enc_len,",
          "66:                                 [in, count = 1024] char* hashX ,",
          "67:                                 [in, count = 1024] char* hashY ,",
          "68:                                 [out, count = 1024] char* signature);",
          "71:                                 [user_check] int *err_status,",
          "72:                                 [out, count = 1024] char* err_string,",
          "73:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                                 [user_check] uint32_t * enc_len,",
          "75:                                 size_t _t);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:                                 [out, count = 1024] char *err_string,",
          "164:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "165:                                 [user_check] uint32_t *enc_len);",
          "166:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:          public void generate_ecdsa_key_aes (",
          "176:                                 [user_check] int *err_status,",
          "177:                                 [out, count = 1024] char* err_string,",
          "178:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "179:                                 [user_check] uint32_t *enc_len,",
          "180:                                 [out, count = 1024] char * pub_key_x,",
          "181:                                 [out, count = 1024] char * pub_key_y);",
          "183:          public void get_public_ecdsa_key_aes(",
          "184:                                 [user_check] int *err_status,",
          "185:                                 [out, count = 1024] char* err_string,",
          "186:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "187:                                 uint32_t dec_len,",
          "188:                                 [out, count = 1024] char * pub_key_x,",
          "189:                                 [out, count = 1024] char * pub_key_y);",
          "191:          public void ecdsa_sign_aes(",
          "192:                                 [user_check] int *err_status,",
          "193:                                 [out, count = 1024] char* err_string,",
          "194:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "195:                                 uint32_t enc_len,",
          "196:                                 [in, count = 1024] unsigned char* hash,",
          "197:                                 [out, count = 1024] char* sig_r,",
          "198:                                 [out, count = 1024] char* sig_s,",
          "199:                                 [user_check] uint8_t* sig_v,",
          "200:                                 int base);",
          "202:          public void encrypt_key_aes (",
          "203:                                 [user_check] int *err_status,",
          "204:                                 [out, count = 1024] char* err_string,",
          "205:                                 [in, count = 1024] char* key,",
          "206:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "207:                                 [user_check] uint32_t *enc_len);",
          "209:         public void decrypt_key_aes (",
          "210:                                 [user_check] int *err_status,",
          "211:                                 [out, count = 1024] char* err_string,",
          "212:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "213:                                 uint32_t enc_len,",
          "214:                                 [out, count = 1024] char* key );",
          "216:         public void bls_sign_message_aes (",
          "217:                                 [user_check] int *err_status,",
          "218:                                 [out, count = 1024] char* err_string,",
          "219:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "220:                                 uint32_t enc_len,",
          "221:                                 [in, count = 1024] char* hashX ,",
          "222:                                 [in, count = 1024] char* hashY ,",
          "223:                                 [out, count = 1024] char* signature);",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #define ECDSA_SKEY_LEN 65",
          "59: #define ECDSA_SKEY_BASE 16",
          "61: #define ECDSA_BIN_LEN 33",
          "63: #define UNKNOWN_ERROR -1",
          "",
          "[Removed Lines]",
          "60: #define ECDSA_ENCR_LEN 625",
          "",
          "[Added Lines]",
          "60: #define ECDSA_ENCR_LEN 93",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: TEST_CASE(\"BLS key encrypt\", \"[bls-key-encrypt]\") {",
          "143:     init_all(false, false);",
          "144:     char* key = encryptTestKey();",
          "145:     REQUIRE(key != nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:    DEBUG_PRINT = 1;",
          "143:    is_sgx_https = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: TEST_CASE(\"BLS key encrypt/decrypt\", \"[bls-key-encrypt-decrypt]\") {",
          "151:     {",
          "156:         int errStatus =  -1;",
          "157:         char* errMsg = (char*) calloc(BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "154:         init_all(false, false);",
          "",
          "[Added Lines]",
          "154:       DEBUG_PRINT = 1;",
          "155:       is_sgx_https = 0;",
          "157:       init_all(false, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:         printf(\"Decrypted key len %d\\n\", (int) strlen(plaintextKey));",
          "172:         printf(\"Decrypted key: %s\\n\", plaintextKey);",
          "175:     }",
          "176: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:       sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1076:   cerr << \"Client inited\" << endl;",
          "1078:   Json::Value genKey = c.generateECDSAKey();",
          "1080:   cout << genKey << endl;",
          "1084:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "1086:   cout << getPubKey << std::endl;",
          "1106:   sgx_destroy_enclave(eid);",
          "1107: }",
          "",
          "[Removed Lines]",
          "1079:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1081:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1082:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "1083:   cout << ecdsaSign << std::endl;",
          "1085:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1089:   Json::Value ecdsaSignWrongBase = c.ecdsaSignMessageHash(0, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1090:   cout << ecdsaSignWrongBase << std::endl;",
          "1091:   REQUIRE(ecdsaSignWrongBase[\"status\"].asInt() != 0);",
          "1094:   Json::Value ecdsaSignWrongKeyName  = c.ecdsaSignMessageHash(0, \"\", \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1095:   cout << ecdsaSignWrongKeyName << std::endl;",
          "1096:   REQUIRE(ecdsaSignWrongKeyName[\"status\"].asInt() != 0);",
          "1097:   Json::Value getPubKeyWrongKeyName = c.getPublicECDSAKey(\"keyName\");",
          "1098:   REQUIRE(getPubKeyWrongKeyName[\"status\"].asInt() != 0);",
          "1099:   cout << getPubKeyWrongKeyName << std::endl;",
          "1102:   Json::Value ecdsaSignWrongHash = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"\");",
          "1103:   cout << ecdsaSignWrongHash << std::endl;",
          "1104:   REQUIRE(ecdsaSignWrongHash[\"status\"].asInt() != 0);",
          "",
          "[Added Lines]",
          "1086:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1090:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1091:   REQUIRE(getPubKey[\"PublicKey\"].asString() == genKey[\"PublicKey\"].asString());",
          "1093:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1094:   cout << ecdsaSign << std::endl;",
          "1095:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}