{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
      "candidate_info": {
        "commit_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Ensure that the nProgressLimit variable is always initialized in sqlite3VdbeExec(), even if the routine jumps to its exit processing early.\n\nFossilOrigin-Name: 167b91df77fff1a84791f6ab5f72239b90475475be690a838248119b6dd312f0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   sqlite3VdbeEnter(p);",
          "625:   if( p->rc==SQLITE_NOMEM ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "626:   if( db->xProgress ){",
          "627:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "628:     assert( 0 < db->nProgressOps );",
          "629:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "630:   }else{",
          "631:     nProgressLimit = 0xffffffff;",
          "632:   }",
          "633: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:   db->busyHandler.nBusy = 0;",
          "636:   if( db->u1.isInterrupted ) goto abort_due_to_interrupt;",
          "637:   sqlite3VdbeIOTraceSql(p);",
          "647: #ifdef SQLITE_DEBUG",
          "648:   sqlite3BeginBenignMalloc();",
          "649:   if( p->pc==0",
          "",
          "[Removed Lines]",
          "638: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "639:   if( db->xProgress ){",
          "640:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "641:     assert( 0 < db->nProgressOps );",
          "642:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "643:   }else{",
          "644:     nProgressLimit = 0xffffffff;",
          "645:   }",
          "646: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38cefc83c81842f4d4c1c92958e688c3bac14b79",
      "candidate_info": {
        "commit_hash": "38cefc83c81842f4d4c1c92958e688c3bac14b79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38cefc83c81842f4d4c1c92958e688c3bac14b79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(x IS FALSE) IS FALSE\" does not imply that X is not NULL. Ticket [a6408d42b9f44462]\n\nFossilOrigin-Name: 45ff2b1f2693bb0231a864a511bb82cf2a5945ab3d806a5bbaf1517ecb287883",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80124ae55246b79023d23d3f55487ac3c0b40e8ff301c5daf4dd0631de8ddb29",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5036:     case TK_TRUTH: {",
          "5037:       if( seenNot ) return 0;",
          "5038:       if( p->op2!=TK_IS ) return 0;",
          "5040:     }",
          "5041:     case TK_BITNOT:",
          "5042:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "5039:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "5039:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   SELECT * FROM t0 WHERE CASE c0 WHEN 0 THEN 0 ELSE 1 END;",
          "438: } {{} row}",
          "440: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: #",
          "443: do_execsql_test index6-15.1 {",
          "444:   DROP TABLE t0;",
          "445:   CREATE TABLE t0(c0);",
          "446:   INSERT INTO t0(c0) VALUES (NULL);",
          "447:   CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
          "448:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE;",
          "449: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01d1801cab06d9ea35f07a530868cb79391a49a8",
      "candidate_info": {
        "commit_hash": "01d1801cab06d9ea35f07a530868cb79391a49a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01d1801cab06d9ea35f07a530868cb79391a49a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to fuzzdata8.db.\n\nFossilOrigin-Name: 5baffcda7d5a42a99fa905faa834f14b94b1e2a26b5221f15d8ae8f1f5e3236a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6bd1871d1c0c63df9a0482b07477380eb55200d",
      "candidate_info": {
        "commit_hash": "a6bd1871d1c0c63df9a0482b07477380eb55200d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a6bd1871d1c0c63df9a0482b07477380eb55200d",
        "files": [
          "ext/fts5/fts5_config.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Disallow fts5 page sizes greater than 65536 bytes - as there are 16-bit offsets used in the page header.\n\nFossilOrigin-Name: 75775c5ab44e497cb19be10397229637f1374f05c3244e8f92d6c54fcea94f5f",
        "before_after_code_files": [
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define FTS5_DEFAULT_HASHSIZE    (1024*1024)",
          "28: static int fts5_iswhitespace(char x){",
          "29:   return (x==' ');",
          "",
          "[Removed Lines]",
          "26: #define FTS5_MAX_PAGE_SIZE (128*1024)",
          "",
          "[Added Lines]",
          "26: #define FTS5_MAX_PAGE_SIZE (64*1024)",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "151: }",
          "154: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: #-------------------------------------------------------------------------",
          "154: # Ticket [81a7f7b9].",
          "155: #",
          "156: reset_db",
          "157: do_execsql_test 5.0 {",
          "158:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
          "159:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '65536');",
          "160:   WITH s(i) AS (",
          "161:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<1236",
          "162:   )",
          "163:   INSERT INTO vt0(c0) SELECT '0' FROM s;",
          "164: } {}",
          "166: do_execsql_test 5.1 {",
          "167:   UPDATE vt0 SET c1 = 'T,D&p^y/7#3*v<b<4j7|f';",
          "168: }",
          "170: do_execsql_test 5.2 {",
          "171:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "172: }",
          "174: do_catchsql_test 5.3 {",
          "175:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '65537');",
          "176: } {1 {SQL logic error}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e17571c789db31123642d0ed1f3d8764e070019e0deb8b88cce58d2183551cdf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba7bd0200231c41f7683f123da019180ac371930",
      "candidate_info": {
        "commit_hash": "ba7bd0200231c41f7683f123da019180ac371930",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba7bd0200231c41f7683f123da019180ac371930",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Fix an off-by-one error when parsing the names of indexes that do not have arguments in the index_usage utility.\n\nFossilOrigin-Name: dc794d8f518ed46536928a77a560d46e4f9365c30a00cd108f000d8556a66c00",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a5e6be7cbc5d931308ddcc073c9cd6275c9711cae055d72a7c4aa71c1d15914c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:         z1 = strstr(zExplain, \" USING INDEX \");",
          "187:         if( z1==0 ) continue;",
          "188:         z1 += 13;",
          "190:         n = z2 - z1;",
          "191:         if( zUsing && sqlite3_strnicmp(zUsing, z1, n)==0 ){",
          "192:           printf(\"Using %s:\\n%s\\n\", zUsing, zLog);",
          "",
          "[Removed Lines]",
          "189:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "",
          "[Added Lines]",
          "189:         for(z2=z1+1; z2[0] && z2[1]!='('; z2++){}",
          "",
          "---------------"
        ]
      }
    }
  ]
}