{
  "cve_id": "CVE-2018-6560",
  "cve_desc": "In dbus-proxy/flatpak-proxy.c in Flatpak before 0.8.9, and 0.9.x and 0.10.x before 0.10.3, crafted D-Bus messages to the host can be used to break out of the sandbox, because whitespace handling in the proxy is not identical to whitespace handling in the daemon.",
  "repo": "flatpak/flatpak",
  "patch_hash": "52346bf187b5a7f1c0fe9075b328b7ad6abe78f6",
  "patch_info": {
    "commit_hash": "52346bf187b5a7f1c0fe9075b328b7ad6abe78f6",
    "repo": "flatpak/flatpak",
    "commit_url": "https://github.com/flatpak/flatpak/commit/52346bf187b5a7f1c0fe9075b328b7ad6abe78f6",
    "files": [
      "dbus-proxy/flatpak-proxy.c"
    ],
    "message": "Fix vulnerability in dbus proxy\n\nDuring the authentication all client data is directly forwarded\nto the dbus daemon as is, until we detect the BEGIN command after\nwhich we start filtering the binary dbus protocol.\n\nUnfortunately the detection of the BEGIN command in the proxy\ndid not exactly match the detection in the dbus daemon. A BEGIN\nfollowed by a space or tab was considered ok in the daemon but\nnot by the proxy. This could be exploited to send arbitrary\ndbus messages to the host, which can be used to break out of\nthe sandbox.\n\nThis was noticed by Gabriel Campana of The Google Security Team.\n\nThis fix makes the detection of the authentication phase end\nmatch the dbus code. In addition we duplicate the authentication\nline validation from dbus, which includes ensuring all data is\nASCII, and limiting the size of a line to 16k. In fact, we add\nsome extra stringent checks, disallowing ASCII control chars and\nrequiring that auth lines start with a capital letter.",
    "before_after_code_files": [
      "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
    ]
  },
  "patch_diff": {
    "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c": [
      "File: dbus-proxy/flatpak-proxy.c -> dbus-proxy/flatpak-proxy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "174: typedef struct FlatpakProxyClient FlatpakProxyClient;",
      "181: typedef enum {",
      "182:   EXPECTED_REPLY_NONE,",
      "",
      "[Removed Lines]",
      "178: #define AUTH_END_INIT_OFFSET 2",
      "179: #define AUTH_END_STRING \"\\r\\nBEGIN\\r\\n\"",
      "",
      "[Added Lines]",
      "176: #define FIND_AUTH_END_CONTINUE -1",
      "177: #define FIND_AUTH_END_ABORT -2",
      "179: #define AUTH_LINE_SENTINEL \"\\r\\n\"",
      "180: #define AUTH_BEGIN \"BEGIN\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "258:   FlatpakProxy *proxy;",
      "260:   gboolean      authenticated;",
      "263:   ProxySide     client_side;",
      "264:   ProxySide     bus_side;",
      "",
      "[Removed Lines]",
      "261:   int           auth_end_offset;",
      "",
      "[Added Lines]",
      "262:   GByteArray   *auth_buffer;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "372:   client->proxy->clients = g_list_remove (client->proxy->clients, client);",
      "373:   g_clear_object (&client->proxy);",
      "375:   g_hash_table_destroy (client->rewrite_reply);",
      "376:   g_hash_table_destroy (client->get_owner_reply);",
      "377:   g_hash_table_destroy (client->unique_id_policy);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "376:   g_byte_array_free (client->auth_buffer, TRUE);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "407:   init_side (client, &client->client_side);",
      "408:   init_side (client, &client->bus_side);",
      "411:   client->rewrite_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_object_unref);",
      "412:   client->get_owner_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_free);",
      "413:   client->unique_id_policy = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);",
      "",
      "[Removed Lines]",
      "410:   client->auth_end_offset = AUTH_END_INIT_OFFSET;",
      "",
      "[Added Lines]",
      "412:   client->auth_buffer = g_byte_array_new ();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2315:     got_buffer_from_bus (client, side, buffer);",
      "2316: }",
      "2318: static gssize",
      "2319: find_auth_end (FlatpakProxyClient *client, Buffer *buffer)",
      "2320: {",
      "2326:     {",
      "2331:         {",
      "2359:         }",
      "2360:     }",
      "2363: }",
      "2365: static gboolean",
      "",
      "[Removed Lines]",
      "2321:   guchar *match;",
      "2322:   int i;",
      "2325:   if (client->auth_end_offset > 0)",
      "2327:       gsize left = strlen (AUTH_END_STRING) - client->auth_end_offset;",
      "2328:       gsize to_match = MIN (left, buffer->pos);",
      "2330:       if (memcmp (buffer->data, &AUTH_END_STRING[client->auth_end_offset], to_match) == 0)",
      "2332:           client->auth_end_offset += to_match;",
      "2335:           if (client->auth_end_offset == strlen (AUTH_END_STRING))",
      "2336:             return to_match;",
      "2339:           return -1;",
      "2340:         }",
      "2343:       client->auth_end_offset = -1;",
      "2344:     }",
      "2347:   match = memmem (buffer, buffer->pos,",
      "2348:                   AUTH_END_STRING, strlen (AUTH_END_STRING));",
      "2349:   if (match != NULL)",
      "2350:     return match - buffer->data + strlen (AUTH_END_STRING);",
      "2353:   for (i = MIN (strlen (AUTH_END_STRING) - 1, buffer->pos); i > 0; i--)",
      "2354:     {",
      "2355:       if (memcmp (buffer->data + buffer->pos - i, AUTH_END_STRING, i) == 0)",
      "2356:         {",
      "2357:           client->auth_end_offset = i;",
      "2358:           break;",
      "2362:   return -1;",
      "",
      "[Added Lines]",
      "2320: #define _DBUS_ISASCII(c) ((c) != '\\0' && (((c) & ~0x7f) == 0))",
      "2322: static gboolean",
      "2323: auth_line_is_valid (guint8 *line, guint8 *line_end)",
      "2324: {",
      "2325:   guint8 *p;",
      "2327:   for (p = line; p < line_end; p++)",
      "2328:     {",
      "2329:       if (!_DBUS_ISASCII(*p))",
      "2330:         return FALSE;",
      "2333:          fail if we see any control characters. Such low values will appear in  potential attacks,",
      "2335:       if (*p < ' ')",
      "2336:         return FALSE;",
      "2337:     }",
      "2340:      This is not technically required by the dbus spec, but all commands are upper",
      "2341:      case, and there is no provisioning for whitespace before the command, so in practice",
      "2343:   if (line[0] < 'A' || line[0] > 'Z')",
      "2344:     return FALSE;",
      "2346:   return TRUE;",
      "2347: }",
      "2349: static gboolean",
      "2350: auth_line_is_begin (guint8 *line)",
      "2351: {",
      "2352:   guint8 next_char;",
      "2354:   if (!g_str_has_prefix ((char *)line, AUTH_BEGIN))",
      "2355:     return FALSE;",
      "2358:   next_char = line[strlen (AUTH_BEGIN)];",
      "2359:   return (next_char == 0 ||",
      "2360:           next_char == ' ' ||",
      "2361:           next_char == '\\t');",
      "2362: }",
      "2367:   goffset offset = 0;",
      "2368:   gsize original_size = client->auth_buffer->len;",
      "2371:   g_byte_array_append (client->auth_buffer, buffer->data, buffer->pos);",
      "2373:   while (TRUE)",
      "2375:       guint8 *line_start = client->auth_buffer->data + offset;",
      "2376:       gsize remaining_data = client->auth_buffer->len - offset;",
      "2377:       guint8 *line_end;",
      "2379:       line_end = memmem (line_start, remaining_data,",
      "2380:                          AUTH_LINE_SENTINEL, strlen (AUTH_LINE_SENTINEL));",
      "2383:           offset = (line_end + strlen (AUTH_LINE_SENTINEL) - line_start);",
      "2385:           if (!auth_line_is_valid (line_start, line_end))",
      "2386:             return FIND_AUTH_END_ABORT;",
      "2389:           if (auth_line_is_begin (line_start))",
      "2390:             return offset - original_size;",
      "2393:         }",
      "2394:       else",
      "2395:         {",
      "2397:           g_byte_array_remove_range (client->auth_buffer, 0, offset);",
      "2400:           if (client->auth_buffer->len >= 16*1024)",
      "2401:             return FIND_AUTH_END_ABORT;",
      "2403:           return FIND_AUTH_END_CONTINUE;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2418:                       if (extra_data > 0)",
      "2419:                         side->extra_input_data = g_bytes_new (buffer->data + buffer->size, extra_data);",
      "2420:                     }",
      "2421:                 }",
      "2423:               got_buffer_from_side (side, buffer);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2464:                   else if (auth_end == FIND_AUTH_END_ABORT)",
      "2465:                     {",
      "2466:                       buffer_unref (buffer);",
      "2467:                       if (client->proxy->log_messages)",
      "2468:                         g_print (\"Invalid AUTH line, aborting\\n\");",
      "2469:                       side_closed (side);",
      "2470:                       break;",
      "2471:                     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a406918ca88da2d487507863847b2f2cd69d4823",
      "candidate_info": {
        "commit_hash": "a406918ca88da2d487507863847b2f2cd69d4823",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/a406918ca88da2d487507863847b2f2cd69d4823",
        "files": [
          "dbus-proxy/flatpak-proxy.c"
        ],
        "message": "Fix vulnerability in dbus proxy\n\nDuring the authentication all client data is directly forwarded\nto the dbus daemon as is, until we detect the BEGIN command after\nwhich we start filtering the binary dbus protocol.\n\nUnfortunately the detection of the BEGIN command in the proxy\ndid not exactly match the detection in the dbus daemon. A BEGIN\nfollowed by a space or tab was considered ok in the daemon but\nnot by the proxy. This could be exploited to send arbitrary\ndbus messages to the host, which can be used to break out of\nthe sandbox.\n\nThis was noticed by Gabriel Campana of The Google Security Team.\n\nThis fix makes the detection of the authentication phase end\nmatch the dbus code. In addition we duplicate the authentication\nline validation from dbus, which includes ensuring all data is\nASCII, and limiting the size of a line to 16k. In fact, we add\nsome extra stringent checks, disallowing ASCII control chars and\nrequiring that auth lines start with a capital letter.",
        "before_after_code_files": [
          "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
          ],
          "candidate": [
            "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
          ]
        }
      },
      "candidate_diff": {
        "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c": [
          "File: dbus-proxy/flatpak-proxy.c -> dbus-proxy/flatpak-proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: typedef struct FlatpakProxyClient FlatpakProxyClient;",
          "181: typedef enum {",
          "182:   EXPECTED_REPLY_NONE,",
          "",
          "[Removed Lines]",
          "178: #define AUTH_END_INIT_OFFSET 2",
          "179: #define AUTH_END_STRING \"\\r\\nBEGIN\\r\\n\"",
          "",
          "[Added Lines]",
          "176: #define FIND_AUTH_END_CONTINUE -1",
          "177: #define FIND_AUTH_END_ABORT -2",
          "179: #define AUTH_LINE_SENTINEL \"\\r\\n\"",
          "180: #define AUTH_BEGIN \"BEGIN\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   FlatpakProxy *proxy;",
          "260:   gboolean      authenticated;",
          "263:   ProxySide     client_side;",
          "264:   ProxySide     bus_side;",
          "",
          "[Removed Lines]",
          "261:   int           auth_end_offset;",
          "",
          "[Added Lines]",
          "262:   GByteArray   *auth_buffer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:   client->proxy->clients = g_list_remove (client->proxy->clients, client);",
          "373:   g_clear_object (&client->proxy);",
          "375:   g_hash_table_destroy (client->rewrite_reply);",
          "376:   g_hash_table_destroy (client->get_owner_reply);",
          "377:   g_hash_table_destroy (client->unique_id_policy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:   g_byte_array_free (client->auth_buffer, TRUE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "407:   init_side (client, &client->client_side);",
          "408:   init_side (client, &client->bus_side);",
          "411:   client->rewrite_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_object_unref);",
          "412:   client->get_owner_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_free);",
          "413:   client->unique_id_policy = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);",
          "",
          "[Removed Lines]",
          "410:   client->auth_end_offset = AUTH_END_INIT_OFFSET;",
          "",
          "[Added Lines]",
          "412:   client->auth_buffer = g_byte_array_new ();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2315:     got_buffer_from_bus (client, side, buffer);",
          "2316: }",
          "2318: static gssize",
          "2319: find_auth_end (FlatpakProxyClient *client, Buffer *buffer)",
          "2320: {",
          "2326:     {",
          "2331:         {",
          "2359:         }",
          "2360:     }",
          "2363: }",
          "2365: static gboolean",
          "",
          "[Removed Lines]",
          "2321:   guchar *match;",
          "2322:   int i;",
          "2325:   if (client->auth_end_offset > 0)",
          "2327:       gsize left = strlen (AUTH_END_STRING) - client->auth_end_offset;",
          "2328:       gsize to_match = MIN (left, buffer->pos);",
          "2330:       if (memcmp (buffer->data, &AUTH_END_STRING[client->auth_end_offset], to_match) == 0)",
          "2332:           client->auth_end_offset += to_match;",
          "2335:           if (client->auth_end_offset == strlen (AUTH_END_STRING))",
          "2336:             return to_match;",
          "2339:           return -1;",
          "2340:         }",
          "2343:       client->auth_end_offset = -1;",
          "2344:     }",
          "2347:   match = memmem (buffer, buffer->pos,",
          "2348:                   AUTH_END_STRING, strlen (AUTH_END_STRING));",
          "2349:   if (match != NULL)",
          "2350:     return match - buffer->data + strlen (AUTH_END_STRING);",
          "2353:   for (i = MIN (strlen (AUTH_END_STRING) - 1, buffer->pos); i > 0; i--)",
          "2354:     {",
          "2355:       if (memcmp (buffer->data + buffer->pos - i, AUTH_END_STRING, i) == 0)",
          "2356:         {",
          "2357:           client->auth_end_offset = i;",
          "2358:           break;",
          "2362:   return -1;",
          "",
          "[Added Lines]",
          "2320: #define _DBUS_ISASCII(c) ((c) != '\\0' && (((c) & ~0x7f) == 0))",
          "2322: static gboolean",
          "2323: auth_line_is_valid (guint8 *line, guint8 *line_end)",
          "2324: {",
          "2325:   guint8 *p;",
          "2327:   for (p = line; p < line_end; p++)",
          "2328:     {",
          "2329:       if (!_DBUS_ISASCII(*p))",
          "2330:         return FALSE;",
          "2333:          fail if we see any control characters. Such low values will appear in  potential attacks,",
          "2335:       if (*p < ' ')",
          "2336:         return FALSE;",
          "2337:     }",
          "2340:      This is not technically required by the dbus spec, but all commands are upper",
          "2341:      case, and there is no provisioning for whitespace before the command, so in practice",
          "2343:   if (line[0] < 'A' || line[0] > 'Z')",
          "2344:     return FALSE;",
          "2346:   return TRUE;",
          "2347: }",
          "2349: static gboolean",
          "2350: auth_line_is_begin (guint8 *line)",
          "2351: {",
          "2352:   guint8 next_char;",
          "2354:   if (!g_str_has_prefix ((char *)line, AUTH_BEGIN))",
          "2355:     return FALSE;",
          "2358:   next_char = line[strlen (AUTH_BEGIN)];",
          "2359:   return (next_char == 0 ||",
          "2360:           next_char == ' ' ||",
          "2361:           next_char == '\\t');",
          "2362: }",
          "2367:   goffset offset = 0;",
          "2368:   gsize original_size = client->auth_buffer->len;",
          "2371:   g_byte_array_append (client->auth_buffer, buffer->data, buffer->pos);",
          "2373:   while (TRUE)",
          "2375:       guint8 *line_start = client->auth_buffer->data + offset;",
          "2376:       gsize remaining_data = client->auth_buffer->len - offset;",
          "2377:       guint8 *line_end;",
          "2379:       line_end = memmem (line_start, remaining_data,",
          "2380:                          AUTH_LINE_SENTINEL, strlen (AUTH_LINE_SENTINEL));",
          "2383:           offset = (line_end + strlen (AUTH_LINE_SENTINEL) - line_start);",
          "2385:           if (!auth_line_is_valid (line_start, line_end))",
          "2386:             return FIND_AUTH_END_ABORT;",
          "2389:           if (auth_line_is_begin (line_start))",
          "2390:             return offset - original_size;",
          "2393:         }",
          "2394:       else",
          "2395:         {",
          "2397:           g_byte_array_remove_range (client->auth_buffer, 0, offset);",
          "2400:           if (client->auth_buffer->len >= 16*1024)",
          "2401:             return FIND_AUTH_END_ABORT;",
          "2403:           return FIND_AUTH_END_CONTINUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2418:                       if (extra_data > 0)",
          "2419:                         side->extra_input_data = g_bytes_new (buffer->data + buffer->size, extra_data);",
          "2420:                     }",
          "2421:                 }",
          "2423:               got_buffer_from_side (side, buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2464:                   else if (auth_end == FIND_AUTH_END_ABORT)",
          "2465:                     {",
          "2466:                       buffer_unref (buffer);",
          "2467:                       if (client->proxy->log_messages)",
          "2468:                         g_print (\"Invalid AUTH line, aborting\\n\");",
          "2469:                       side_closed (side);",
          "2470:                       break;",
          "2471:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e00ded769dcdddea0169dd813c5878c915a63f6a",
      "candidate_info": {
        "commit_hash": "e00ded769dcdddea0169dd813c5878c915a63f6a",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/e00ded769dcdddea0169dd813c5878c915a63f6a",
        "files": [
          "dbus-proxy/flatpak-proxy.c"
        ],
        "message": "Fix vulnerability in dbus proxy\n\nDuring the authentication all client data is directly forwarded\nto the dbus daemon as is, until we detect the BEGIN command after\nwhich we start filtering the binary dbus protocol.\n\nUnfortunately the detection of the BEGIN command in the proxy\ndid not exactly match the detection in the dbus daemon. A BEGIN\nfollowed by a space or tab was considered ok in the daemon but\nnot by the proxy. This could be exploited to send arbitrary\ndbus messages to the host, which can be used to break out of\nthe sandbox.\n\nThis was noticed by Gabriel Campana of The Google Security Team.\n\nThis fix makes the detection of the authentication phase end\nmatch the dbus code. In addition we duplicate the authentication\nline validation from dbus, which includes ensuring all data is\nASCII, and limiting the size of a line to 16k. In fact, we add\nsome extra stringent checks, disallowing ASCII control chars and\nrequiring that auth lines start with a capital letter.",
        "before_after_code_files": [
          "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
          ],
          "candidate": [
            "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c"
          ]
        }
      },
      "candidate_diff": {
        "dbus-proxy/flatpak-proxy.c||dbus-proxy/flatpak-proxy.c": [
          "File: dbus-proxy/flatpak-proxy.c -> dbus-proxy/flatpak-proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: FlatpakPolicy flatpak_proxy_get_policy (FlatpakProxy *proxy,",
          "174:                                         const char   *name);",
          "181: typedef enum {",
          "182:   EXPECTED_REPLY_NONE,",
          "",
          "[Removed Lines]",
          "178: #define AUTH_END_INIT_OFFSET 2",
          "179: #define AUTH_END_STRING \"\\r\\nBEGIN\\r\\n\"",
          "",
          "[Added Lines]",
          "176: #define FIND_AUTH_END_CONTINUE -1",
          "177: #define FIND_AUTH_END_ABORT -2",
          "179: #define AUTH_LINE_SENTINEL \"\\r\\n\"",
          "180: #define AUTH_BEGIN \"BEGIN\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   FlatpakProxy *proxy;",
          "253:   gboolean      authenticated;",
          "256:   ProxySide     client_side;",
          "257:   ProxySide     bus_side;",
          "",
          "[Removed Lines]",
          "254:   int           auth_end_offset;",
          "",
          "[Added Lines]",
          "255:   GByteArray   *auth_buffer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:   client->proxy->clients = g_list_remove (client->proxy->clients, client);",
          "364:   g_clear_object (&client->proxy);",
          "366:   g_hash_table_destroy (client->rewrite_reply);",
          "367:   g_hash_table_destroy (client->get_owner_reply);",
          "368:   g_hash_table_destroy (client->unique_id_policy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:   g_byte_array_free (client->auth_buffer, TRUE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "398:   init_side (client, &client->client_side);",
          "399:   init_side (client, &client->bus_side);",
          "402:   client->rewrite_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_object_unref);",
          "403:   client->get_owner_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_free);",
          "404:   client->unique_id_policy = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);",
          "",
          "[Removed Lines]",
          "401:   client->auth_end_offset = AUTH_END_INIT_OFFSET;",
          "",
          "[Added Lines]",
          "403:   client->auth_buffer = g_byte_array_new ();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2203:     got_buffer_from_bus (client, side, buffer);",
          "2204: }",
          "2206: static gssize",
          "2207: find_auth_end (FlatpakProxyClient *client, Buffer *buffer)",
          "2208: {",
          "2214:     {",
          "2219:         {",
          "2247:         }",
          "2248:     }",
          "2251: }",
          "2253: static gboolean",
          "",
          "[Removed Lines]",
          "2209:   guchar *match;",
          "2210:   int i;",
          "2213:   if (client->auth_end_offset > 0)",
          "2215:       gsize left = strlen (AUTH_END_STRING) - client->auth_end_offset;",
          "2216:       gsize to_match = MIN (left, buffer->pos);",
          "2218:       if (memcmp (buffer->data, &AUTH_END_STRING[client->auth_end_offset], to_match) == 0)",
          "2220:           client->auth_end_offset += to_match;",
          "2223:           if (client->auth_end_offset == strlen (AUTH_END_STRING))",
          "2224:             return to_match;",
          "2227:           return -1;",
          "2228:         }",
          "2231:       client->auth_end_offset = -1;",
          "2232:     }",
          "2235:   match = memmem (buffer, buffer->pos,",
          "2236:                   AUTH_END_STRING, strlen (AUTH_END_STRING));",
          "2237:   if (match != NULL)",
          "2238:     return match - buffer->data + strlen (AUTH_END_STRING);",
          "2241:   for (i = MIN (strlen (AUTH_END_STRING) - 1, buffer->pos); i > 0; i--)",
          "2242:     {",
          "2243:       if (memcmp (buffer->data + buffer->pos - i, AUTH_END_STRING, i) == 0)",
          "2244:         {",
          "2245:           client->auth_end_offset = i;",
          "2246:           break;",
          "2250:   return -1;",
          "",
          "[Added Lines]",
          "2208: #define _DBUS_ISASCII(c) ((c) != '\\0' && (((c) & ~0x7f) == 0))",
          "2210: static gboolean",
          "2211: auth_line_is_valid (guint8 *line, guint8 *line_end)",
          "2212: {",
          "2213:   guint8 *p;",
          "2215:   for (p = line; p < line_end; p++)",
          "2216:     {",
          "2217:       if (!_DBUS_ISASCII(*p))",
          "2218:         return FALSE;",
          "2221:          fail if we see any control characters. Such low values will appear in  potential attacks,",
          "2223:       if (*p < ' ')",
          "2224:         return FALSE;",
          "2225:     }",
          "2228:      This is not technically required by the dbus spec, but all commands are upper",
          "2229:      case, and there is no provisioning for whitespace before the command, so in practice",
          "2231:   if (line[0] < 'A' || line[0] > 'Z')",
          "2232:     return FALSE;",
          "2234:   return TRUE;",
          "2235: }",
          "2237: static gboolean",
          "2238: auth_line_is_begin (guint8 *line)",
          "2239: {",
          "2240:   guint8 next_char;",
          "2242:   if (!g_str_has_prefix ((char *)line, AUTH_BEGIN))",
          "2243:     return FALSE;",
          "2246:   next_char = line[strlen (AUTH_BEGIN)];",
          "2247:   return (next_char == 0 ||",
          "2248:           next_char == ' ' ||",
          "2249:           next_char == '\\t');",
          "2250: }",
          "2255:   goffset offset = 0;",
          "2256:   gsize original_size = client->auth_buffer->len;",
          "2259:   g_byte_array_append (client->auth_buffer, buffer->data, buffer->pos);",
          "2261:   while (TRUE)",
          "2263:       guint8 *line_start = client->auth_buffer->data + offset;",
          "2264:       gsize remaining_data = client->auth_buffer->len - offset;",
          "2265:       guint8 *line_end;",
          "2267:       line_end = memmem (line_start, remaining_data,",
          "2268:                          AUTH_LINE_SENTINEL, strlen (AUTH_LINE_SENTINEL));",
          "2271:           offset = (line_end + strlen (AUTH_LINE_SENTINEL) - line_start);",
          "2273:           if (!auth_line_is_valid (line_start, line_end))",
          "2274:             return FIND_AUTH_END_ABORT;",
          "2277:           if (auth_line_is_begin (line_start))",
          "2278:             return offset - original_size;",
          "2281:         }",
          "2282:       else",
          "2283:         {",
          "2285:           g_byte_array_remove_range (client->auth_buffer, 0, offset);",
          "2288:           if (client->auth_buffer->len >= 16*1024)",
          "2289:             return FIND_AUTH_END_ABORT;",
          "2291:           return FIND_AUTH_END_CONTINUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2306:                       if (extra_data > 0)",
          "2307:                         side->extra_input_data = g_bytes_new (buffer->data + buffer->size, extra_data);",
          "2308:                     }",
          "2309:                 }",
          "2311:               got_buffer_from_side (side, buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2352:                   else if (auth_end == FIND_AUTH_END_ABORT)",
          "2353:                     {",
          "2354:                       buffer_unref (buffer);",
          "2355:                       if (client->proxy->log_messages)",
          "2356:                         g_print (\"Invalid AUTH line, aborting\\n\");",
          "2357:                       side_closed (side);",
          "2358:                       break;",
          "2359:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}