{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "856408abf447129df8e5345dc1673b2afba5f9ae",
      "candidate_info": {
        "commit_hash": "856408abf447129df8e5345dc1673b2afba5f9ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/856408abf447129df8e5345dc1673b2afba5f9ae",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add the SQLITE_ENABLE_FTS3_PARENTHESIS option to fuzzcheck.  Add a new test case that uses that option.\n\nFossilOrigin-Name: c49a33db954f1a3fbc1889bbe9f3f3fdb8fb00e31aafb91cd6f5d1602db5c2b9",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "622: #FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS5",
          "623: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "624: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS3_PARENTHESIS",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4dd148928ea65bd4e1654dfacc3d8057d1f85b8c9939416991d50722e5a720e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9f2e5f7774cee2282c2b0980bc29233e643200f",
      "candidate_info": {
        "commit_hash": "b9f2e5f7774cee2282c2b0980bc29233e643200f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9f2e5f7774cee2282c2b0980bc29233e643200f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Minor change for compatibility with the s390 architecture.\n\nFossilOrigin-Name: 04885763c4cd00cbca26d048f2b19316bfc93e8edebeceaa171ebfc6c563d53e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3bfa9cc97da10598521b342961df8f5f68c7388fa117345eeb516eaa837bb4d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2170:             x = *sqlite3VdbeGetOp(v, addrConflictCk);",
          "2171:             if( x.opcode!=OP_IdxRowid ){",
          "2173:               if( sqlite3OpcodeProperty[x.opcode]&OPFLG_JUMP ){",
          "2174:                 p2 = lblRecheckOk;",
          "2175:               }else{",
          "2176:                 p2 = x.p2;",
          "2177:               }",
          "2179:               sqlite3VdbeChangeP5(v, x.p5);",
          "2180:               VdbeCoverageIf(v, p2!=x.p2);",
          "2181:             }",
          "",
          "[Removed Lines]",
          "2178:               sqlite3VdbeAddOp4(v, x.opcode, x.p1, p2, x.p3, x.p4.z, x.p4type);",
          "",
          "[Added Lines]",
          "2173:               const char *zP4;",
          "2179:               zP4 = x.p4type==P4_INT32 ? SQLITE_INT_TO_PTR(x.p4.i) : x.p4.z;",
          "2180:               sqlite3VdbeAddOp4(v, x.opcode, x.p1, p2, x.p3, zP4, x.p4type);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "607dd6e6080c260e73dbacf777cf43d9cd22bd18",
      "candidate_info": {
        "commit_hash": "607dd6e6080c260e73dbacf777cf43d9cd22bd18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/607dd6e6080c260e73dbacf777cf43d9cd22bd18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/orderby1.test"
        ],
        "message": "Fix a possible NULL pointer dereference caused by using a \"VALUES(...)\" as a component of a compound SELECT with non-integer ORDER BY clause terms.\n\nFossilOrigin-Name: 9d791116420f4e3f613775569e0a0cba2fc22da568b2fb2df920bcf9c9002938",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/orderby1.test||test/orderby1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b36126c1889e323c9a8f04b4f4884576993c845e7d393e5e73aaa6ab5158c1f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:       for(j=0; j<pEList->nExpr; j++){",
          "454:         char *zAs = pEList->a[j].zEName;",
          "455:         if( pEList->a[j].eEName==ENAME_NAME",
          "458:         ){",
          "459:           Expr *pOrig;",
          "460:           assert( pExpr->pLeft==0 && pExpr->pRight==0 );",
          "",
          "[Removed Lines]",
          "456:          && ALWAYS(zAs!=0)",
          "457:          && sqlite3StrICmp(zAs, zCol)==0",
          "",
          "[Added Lines]",
          "456:          && sqlite3_stricmp(zAs, zCol)==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1123:   if( pE->op==TK_ID ){",
          "1124:     char *zCol = pE->u.zToken;",
          "1125:     for(i=0; i<pEList->nExpr; i++){",
          "1127:       if( pEList->a[i].eEName==ENAME_NAME",
          "1130:       ){",
          "1131:         return i+1;",
          "1132:       }",
          "",
          "[Removed Lines]",
          "1126:       char *zAs = pEList->a[i].zEName;",
          "1128:        && ALWAYS(zAs!=0)",
          "1129:        && sqlite3StrICmp(zAs, zCol)==0",
          "",
          "[Added Lines]",
          "1126:        && sqlite3_stricmp(pEList->a[i].zEName, zCol)==0",
          "",
          "---------------"
        ],
        "test/orderby1.test||test/orderby1.test": [
          "File: test/orderby1.test -> test/orderby1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:   SELECT b, rowid, '^' FROM t10 ORDER BY b, a LIMIT 4;",
          "559: } {2 1 ^ 4 3 ^ 4 4 ^ 7 5 ^}",
          "562: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561: do_catchsql_test 11.0 {",
          "562:   VALUES(2) EXCEPT SELECT '' ORDER BY abc",
          "563: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac9e184e1f35154cd710c5fe8bbd280dc7a2aedc",
      "candidate_info": {
        "commit_hash": "ac9e184e1f35154cd710c5fe8bbd280dc7a2aedc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac9e184e1f35154cd710c5fe8bbd280dc7a2aedc",
        "files": [
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an infinite recursion on an illegal recursive definition of an fts5vocab table.\n\nFossilOrigin-Name: 109ee07433b274a39954cef62bf67d47bcda960df9bef56127210ebf1c3c104c",
        "before_after_code_files": [
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:   sqlite3_stmt *pStmt = 0;",
          "333:   char *zSql = 0;",
          "335:   zSql = sqlite3Fts5Mprintf(&rc,",
          "336:       \"SELECT t.%Q FROM %Q.%Q AS t WHERE t.%Q MATCH '*id'\",",
          "337:       pTab->zFts5Tbl, pTab->zFts5Db, pTab->zFts5Tbl, pTab->zFts5Tbl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   if( pTab->bBusy ){",
          "337:     pVTab->zErrMsg = sqlite3_mprintf(",
          "338:        \"recursive definition for %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "339:     );",
          "340:     return SQLITE_ERROR;",
          "341:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:   assert( rc==SQLITE_OK || pStmt==0 );",
          "344:   if( rc==SQLITE_ERROR ) rc = SQLITE_OK;",
          "346:   if( pStmt && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "347:     i64 iId = sqlite3_column_int64(pStmt, 0);",
          "348:     pFts5 = sqlite3Fts5TableFromCsrid(pTab->pGlobal, iId);",
          "349:   }",
          "351:   if( rc==SQLITE_OK ){",
          "352:     if( pFts5==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:   pTab->bBusy = 1;",
          "358:   pTab->bBusy = 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:   SELECT * FROM t2 WHERE term=?;",
          "543: }",
          "",
          "[Removed Lines]",
          "545: finish_test",
          "",
          "[Added Lines]",
          "545: # 2020-02-16  Detect recursively define fts5vocab() tables.",
          "546: # Error found by dbsqlfuzz.",
          "547: #",
          "548: reset_db",
          "549: do_execsql_test 11.100 {",
          "550:   CREATE VIRTUAL TABLE t3 USING fts5vocab(rowid , 'col');",
          "551:   CREATE VIRTUAL TABLE rowid USING fts5vocab(rowid , 'instance');",
          "552: } {}",
          "553: do_catchsql_test 11.110 {",
          "554:   SELECT rowid+1,rowid, * FROM t3 WHERE null>rowid ;",
          "555: } {1 {SQL logic error}}",
          "557: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9a8defcef35a1fee6bcbb88252a2d0076dabe8381b0128b2257b5b5cc494e0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40d1db8d20ed664abd7303f9ed1cd15f437ddd54",
      "candidate_info": {
        "commit_hash": "40d1db8d20ed664abd7303f9ed1cd15f437ddd54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/40d1db8d20ed664abd7303f9ed1cd15f437ddd54",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a problem with the byte-code decompiler that was inserted by the enhancements at [4248980a356f659b]\n\nFossilOrigin-Name: af63e95dcdd6e9741cdddc3698e857e3b8be40048d3036f939f3583e517c4eff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ea2dbfc9088561d62c3456803cb08d357e4e60f1d21f6ed37315564be4957d3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1489:             }",
          "1490:           }else if( strncmp(zSynopsis+ii+1, \"@NP\", 3)==0 ){",
          "1491:             sqlite3_context *pCtx = pOp->p4.pCtx;",
          "1494:               sqlite3_str_appendf(&x, \"%d\", v1);",
          "1495:             }else if( pCtx->argc>1 ){",
          "1496:               sqlite3_str_appendf(&x, \"%d..%d\", v1, v1+pCtx->argc-1);",
          "",
          "[Removed Lines]",
          "1492:             assert( pOp->p4type==P4_FUNCCTX );",
          "1493:             if( pCtx->argc==1 ){",
          "",
          "[Added Lines]",
          "1492:             if( pOp->p4type!=P4_FUNCCTX || pCtx->argc==1 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}