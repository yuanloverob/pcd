{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e65b9c6a5e2ff7a1de7bed378fe09157ce8e8525",
      "candidate_info": {
        "commit_hash": "e65b9c6a5e2ff7a1de7bed378fe09157ce8e8525",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e65b9c6a5e2ff7a1de7bed378fe09157ce8e8525",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Separate makefile targets for \"dbfuzz2\", \"dbfuzz2-asan\", and \"dbfuzz2-msan\".\n\nFossilOrigin-Name: ea119641a7edcd0e1ec14371d93e35f860971888bd98cb0019253358a2ef123b",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "683:   -DSQLITE_ENABLE_RTREE \\",
          "684:   -DSQLITE_ENABLE_FTS4 \\",
          "688:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "691:  mkdir -p dbfuzz2-dir",
          "692:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "",
          "[Removed Lines]",
          "685:   -DSQLITE_EANBLE_FTS5",
          "687: dbfuzz2: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "689:   -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "690:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c",
          "",
          "[Added Lines]",
          "685:   -DSQLITE_ENABLE_FTS5",
          "687: dbfuzz2$(TEXE): $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "688:  $(CC) $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "689:   -DSTANDALONE -o dbfuzz2 \\",
          "690:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(TLIBS)",
          "691:  mkdir -p dbfuzz2-dir",
          "692:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "694: dbfuzz2-asan: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "695:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "696:   -fsanitize=fuzzer,undefined,address -o dbfuzz2-asan \\",
          "697:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(TLIBS)",
          "698:  mkdir -p dbfuzz2-dir",
          "699:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "701: dbfuzz2-msan: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "703:   -fsanitize=fuzzer,undefined,memory -o dbfuzz2-msan \\",
          "704:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(TLIBS)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 240f1c0c92cad8a1c19438b38489aedb831f62a4603c53f22367e876d8f644ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   return 0;",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: #ifdef STANDALONE",
          "146: static unsigned char *readFile(const char *zName, int *pnByte){",
          "147:   FILE *in = fopen(zName, \"rb\");",
          "148:   long nIn;",
          "149:   size_t nRead;",
          "150:   unsigned char *pBuf;",
          "151:   if( in==0 ) return 0;",
          "152:   fseek(in, 0, SEEK_END);",
          "153:   nIn = ftell(in);",
          "154:   rewind(in);",
          "155:   pBuf = malloc( nIn+1 );",
          "156:   if( pBuf==0 ){ fclose(in); return 0; }",
          "157:   nRead = fread(pBuf, nIn, 1, in);",
          "158:   fclose(in);",
          "159:   if( nRead!=1 ){",
          "160:     free(pBuf);",
          "161:     return 0;",
          "162:   }",
          "163:   pBuf[nIn] = 0;",
          "164:   if( pnByte ) *pnByte = nIn;",
          "165:   return pBuf;",
          "166: }",
          "169: #ifdef STANDALONE",
          "170: int main(int argc, char **argv){",
          "171:   int i;",
          "172:   int prevAmt = -1;",
          "173:   LLVMFuzzerInitialize(&argc, &argv);",
          "174:   for(i=1; i<argc; i++){",
          "175:     unsigned char *pIn;",
          "176:     int nIn;",
          "177:     pIn = readFile(argv[i], &nIn);",
          "178:     if( pIn ){",
          "179:       LLVMFuzzerTestOneInput((const uint8_t*)pIn, (size_t)nIn);",
          "180:       free(pIn);",
          "181:     }",
          "182:   }",
          "183:   return 0;",
          "184: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21f6daa2cd32c5773a606981320c3a5e956a7726",
      "candidate_info": {
        "commit_hash": "21f6daa2cd32c5773a606981320c3a5e956a7726",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21f6daa2cd32c5773a606981320c3a5e956a7726",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/vdbe.c"
        ],
        "message": "Faster response to sqlite3_interrupt() in the OP_IntegrityCk and OP_Count opcodes.\n\nFossilOrigin-Name: bf875dc59909f9c22f7c1fc843bc4d9e5d97af5cb4ef43c4fa1d566ddfdeaacb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9455643eecb74c8ac93ad3b3566f30e380dd912cdce3de993da5af42973ac59c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9462: int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){",
          "",
          "[Added Lines]",
          "9462: int sqlite3BtreeCount(sqlite3 *db, BtCursor *pCur, i64 *pnEntry){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9475:   while( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "9475:   while( rc==SQLITE_OK && !db->u1.isInterrupted ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9598:     checkAppendMsg(pCheck, \"2nd reference to page %d\", iPage);",
          "9599:     return 1;",
          "9600:   }",
          "9601:   setPageReferenced(pCheck, iPage);",
          "9602:   return 0;",
          "9603: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9601:   if( pCheck->db->u1.isInterrupted ) return 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10058:   assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );",
          "10059:   VVA_ONLY( nRef = sqlite3PagerRefcount(pBt->pPager) );",
          "10060:   assert( nRef>=0 );",
          "10061:   sCheck.pBt = pBt;",
          "10062:   sCheck.pPager = pBt->pPager;",
          "10063:   sCheck.nPage = btreePagecount(sCheck.pBt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10063:   sCheck.db = db;",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: u32 sqlite3BtreePayloadSize(BtCursor*);",
          "315: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor*);",
          "318: struct Pager *sqlite3BtreePager(Btree*);",
          "319: i64 sqlite3BtreeRowCountEst(BtCursor*);",
          "",
          "[Removed Lines]",
          "317: char *sqlite3BtreeIntegrityCheck(Btree*, int *aRoot, int nRoot, int, int*);",
          "",
          "[Added Lines]",
          "317: char *sqlite3BtreeIntegrityCheck(sqlite3*,Btree*,int*aRoot,int nRoot,int,int*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335: int sqlite3BtreeCursorIsValidNN(BtCursor*);",
          "337: #ifndef SQLITE_OMIT_BTREECOUNT",
          "339: #endif",
          "341: #ifdef SQLITE_TEST",
          "",
          "[Removed Lines]",
          "338: int sqlite3BtreeCount(BtCursor *, i64 *);",
          "",
          "[Added Lines]",
          "338: int sqlite3BtreeCount(sqlite3*, BtCursor*, i64*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3143:   pCrsr = p->apCsr[pOp->p1]->uc.pCursor;",
          "3144:   assert( pCrsr );",
          "3147:   if( rc ) goto abort_due_to_error;",
          "3148:   pOut = out2Prerelease(p, pOp);",
          "3149:   pOut->u.i = nEntry;",
          "3151: }",
          "3152: #endif",
          "",
          "[Removed Lines]",
          "3146:   rc = sqlite3BtreeCount(pCrsr, &nEntry);",
          "3150:   break;",
          "",
          "[Added Lines]",
          "3146:   rc = sqlite3BtreeCount(db, pCrsr, &nEntry);",
          "3150:   goto check_for_interrupt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6104:   pIn1 = &aMem[pOp->p1];",
          "6105:   assert( pOp->p5<db->nDb );",
          "6106:   assert( DbMaskTest(p->btreeMask, pOp->p5) );",
          "6108:                                  (int)pnErr->u.i+1, &nErr);",
          "6109:   sqlite3VdbeMemSetNull(pIn1);",
          "6110:   if( nErr==0 ){",
          "",
          "[Removed Lines]",
          "6107:   z = sqlite3BtreeIntegrityCheck(db->aDb[pOp->p5].pBt, &aRoot[1], nRoot,",
          "",
          "[Added Lines]",
          "6107:   z = sqlite3BtreeIntegrityCheck(db, db->aDb[pOp->p5].pBt, &aRoot[1], nRoot,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6117:   }",
          "6118:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "6119:   sqlite3VdbeChangeEncoding(pIn1, encoding);",
          "6121: }",
          "",
          "[Removed Lines]",
          "6120:   break;",
          "",
          "[Added Lines]",
          "6120:   goto check_for_interrupt;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
      "candidate_info": {
        "commit_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Change the COLFLAG_NOTAVAIL bitmask so that it fits in the single-byte Walker.eCode field.\n\nFossilOrigin-Name: 53847f5c28bdecfbc7b08685d4dcd0565526f6191491b4827c3c966a4b8d4a85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18c3a17dc8c07b12427e372ff86668d5bcb6b34d653c46c48561ed576acefa5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
      "candidate_info": {
        "commit_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "test/distinct2.test"
        ],
        "message": "When using an index for both DISTINCT and ORDER BY, do not confuse the number of columns required for distinctness with the number required to get the correct sort order. Fix for [6749cb3c].\n\nFossilOrigin-Name: 6ac0f822450b26c7d67c33cdb2a90189cd3cf65a052af8497b795c3f71a23813",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3695:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3696:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "3697:       break;",
          "3700:     }",
          "3701:     iCur = pWInfo->pTabList->a[pLoop->iTab].iCursor;",
          "",
          "[Removed Lines]",
          "3698:     }else{",
          "3699:       pLoop->u.btree.nIdxCol = 0;",
          "",
          "[Added Lines]",
          "3698:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3699:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3838:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3839:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "3840:           }",
          "3842:           isMatch = 1;",
          "3843:           break;",
          "3844:         }",
          "",
          "[Removed Lines]",
          "3841:           pLoop->u.btree.nIdxCol = j+1;",
          "",
          "[Added Lines]",
          "3841:           if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3842:             pLoop->u.btree.nDistinctCol = j+1;",
          "3843:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5160:        && (pLoop->wsFlags & WHERE_INDEXED)!=0",
          "5161:        && (pIdx = pLoop->u.btree.pIndex)->hasStat1",
          "5163:        && pIdx->aiRowLogEst[n]>=36",
          "5164:       ){",
          "5165:         int r1 = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "5162:        && (n = pLoop->u.btree.nIdxCol)>0",
          "",
          "[Added Lines]",
          "5164:        && (n = pLoop->u.btree.nDistinctCol)>0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   SELECT DISTINCT a FROM t1, t2 WHERE x=b;",
          "230: } {1 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #-------------------------------------------------------------------------",
          "233: reset_db",
          "235: do_execsql_test 2000 {",
          "236:   CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
          "237:   CREATE TABLE t1 (c2);",
          "238:   INSERT INTO t0(c2) VALUES (0),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11);",
          "239:   INSERT INTO t0(c1) VALUES ('a');",
          "240:   INSERT INTO t1(c2) VALUES (0);",
          "241: }",
          "242: do_execsql_test 2010 {",
          "243:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "244: } {{} 1 {} {} 1 a}",
          "245: do_execsql_test 1.2 {",
          "246:   ANALYZE;",
          "247: }",
          "248: do_execsql_test 2020 {",
          "249:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "250: } {{} 1 {} {} 1 a}",
          "253: do_execsql_test 2030 {",
          "254:   CREATE TABLE t2(a, b, c);",
          "255:   CREATE INDEX t2ab ON t2(a, b);",
          "257:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "258:     INSERT INTO t2 SELECT 'one', i%2, 'one' FROM c;",
          "260:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "261:     INSERT INTO t2 SELECT 'two', i%2, 'two' FROM c;",
          "263:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "264:   INSERT INTO t3 VALUES(1);",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "273:   two 0 1",
          "274:   two 1 1",
          "275: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eb2ca839185e9bd5ef57da7078adecbd2e56994",
      "candidate_info": {
        "commit_hash": "2eb2ca839185e9bd5ef57da7078adecbd2e56994",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2eb2ca839185e9bd5ef57da7078adecbd2e56994",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbesort.c"
        ],
        "message": "Avoid a sanitizer error (pointer arithmatic overflow) in vdbesort.c.\n\nFossilOrigin-Name: af61a2fc45a0fa1277d7453779238b77de4c298a9f60714b7dc62ddca5874f80",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbesort.c||src/vdbesort.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1829:     if( nMin>pSorter->nMemory ){",
          "1830:       u8 *aNew;",
          "1832:       sqlite3_int64 nNew = 2 * (sqlite3_int64)pSorter->nMemory;",
          "1833:       while( nNew < nMin ) nNew = nNew*2;",
          "1834:       if( nNew > pSorter->mxPmaSize ) nNew = pSorter->mxPmaSize;",
          "1835:       if( nNew < nMin ) nNew = nMin;",
          "1837:       aNew = sqlite3Realloc(pSorter->list.aMemory, nNew);",
          "1838:       if( !aNew ) return SQLITE_NOMEM_BKPT;",
          "1840:       pSorter->list.aMemory = aNew;",
          "1841:       pSorter->nMemory = nNew;",
          "1842:     }",
          "",
          "[Removed Lines]",
          "1831:       int iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1839:       pSorter->list.pList = (SorterRecord*)&aNew[iListOff];",
          "",
          "[Added Lines]",
          "1832:       int iListOff = -1;",
          "1833:       if( pSorter->list.pList ){",
          "1834:         iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1835:       }",
          "1841:       if( iListOff>=0 ){",
          "1842:         pSorter->list.pList = (SorterRecord*)&aNew[iListOff];",
          "1843:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}