{
  "cve_id": "CVE-2011-4364",
  "cve_desc": "Buffer overflow in the Sierra VMD decoder in libavcodec in FFmpeg 0.5.x before 0.5.7, 0.6.x before 0.6.4, 0.7.x before 0.7.9 and 0.8.x before 0.8.8; and in Libav 0.5.x before 0.5.6, 0.6.x before 0.6.4, and 0.7.x before 0.7.3 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a crafted VMD file, related to corrupted streams.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "c0cbe36b18ab3eb13a53fe684ec1f63a00df2c86",
  "patch_info": {
    "commit_hash": "c0cbe36b18ab3eb13a53fe684ec1f63a00df2c86",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/c0cbe36b18ab3eb13a53fe684ec1f63a00df2c86",
    "files": [
      "libavcodec/vmdav.c"
    ],
    "message": "vmd: fix segfaults on corruped streams\n\nSigned-off-by: Janne Grunau <janne-libav@jannau.net>",
    "before_after_code_files": [
      "libavcodec/vmdav.c||libavcodec/vmdav.c"
    ]
  },
  "patch_diff": {
    "libavcodec/vmdav.c||libavcodec/vmdav.c": [
      "File: libavcodec/vmdav.c -> libavcodec/vmdav.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "72: #define QUEUE_SIZE 0x1000",
      "73: #define QUEUE_MASK 0x0FFF",
      "76: {",
      "77:     const unsigned char *s;",
      "78:     unsigned char *d;",
      "79:     unsigned char *d_end;",
      "80:     unsigned char queue[QUEUE_SIZE];",
      "",
      "[Removed Lines]",
      "75: static void lz_unpack(const unsigned char *src, unsigned char *dest, int dest_len)",
      "",
      "[Added Lines]",
      "75: static void lz_unpack(const unsigned char *src, int src_len,",
      "76:                       unsigned char *dest, int dest_len)",
      "79:     unsigned int s_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:     unsigned int i, j;",
      "89:     s = src;",
      "90:     d = dest;",
      "91:     d_end = d + dest_len;",
      "92:     dataleft = AV_RL32(s);",
      "94:     memset(queue, 0x20, QUEUE_SIZE);",
      "95:     if (AV_RL32(s) == 0x56781234) {",
      "97:         qpos = 0x111;",
      "98:         speclen = 0xF + 3;",
      "99:     } else {",
      "",
      "[Removed Lines]",
      "93:     s += 4;",
      "96:         s += 4;",
      "",
      "[Added Lines]",
      "92:     s_len = src_len;",
      "96:     s += 4; s_len -= 4;",
      "98:     if (s_len < 4)",
      "99:         return;",
      "101:         s += 4; s_len -= 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "102:     }",
      "106:         if ((tag == 0xFF) && (dataleft > 8)) {",
      "108:                 return;",
      "109:             for (i = 0; i < 8; i++) {",
      "110:                 queue[qpos++] = *d++ = *s++;",
      "111:                 qpos &= QUEUE_MASK;",
      "112:             }",
      "113:             dataleft -= 8;",
      "114:         } else {",
      "115:             for (i = 0; i < 8; i++) {",
      "116:                 if (dataleft == 0)",
      "117:                     break;",
      "118:                 if (tag & 0x01) {",
      "120:                         return;",
      "121:                     queue[qpos++] = *d++ = *s++;",
      "122:                     qpos &= QUEUE_MASK;",
      "123:                     dataleft--;",
      "124:                 } else {",
      "125:                     chainofs = *s++;",
      "126:                     chainofs |= ((*s & 0xF0) << 4);",
      "127:                     chainlen = (*s++ & 0x0F) + 3;",
      "129:                         chainlen = *s++ + 0xF + 3;",
      "130:                     if (d + chainlen > d_end)",
      "131:                         return;",
      "132:                     for (j = 0; j < chainlen; j++) {",
      "",
      "[Removed Lines]",
      "104:     while (dataleft > 0) {",
      "105:         tag = *s++;",
      "107:             if (d + 8 > d_end)",
      "119:                     if (d + 1 > d_end)",
      "128:                     if (chainlen == speclen)",
      "",
      "[Added Lines]",
      "109:     while (dataleft > 0 && s_len > 0) {",
      "110:         tag = *s++; s_len--;",
      "112:             if (d + 8 > d_end || s_len < 8)",
      "118:             s_len -= 8;",
      "125:                     if (d + 1 > d_end || s_len < 1)",
      "130:                     s_len--;",
      "132:                     if (s_len < 2)",
      "133:                         return;",
      "137:                     s_len -= 2;",
      "138:                     if (chainlen == speclen) {",
      "139:                         if (s_len < 1)",
      "140:                             return;",
      "142:                         s_len--;",
      "143:                     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "143: }",
      "145: static int rle_unpack(const unsigned char *src, unsigned char *dest,",
      "147: {",
      "148:     const unsigned char *ps;",
      "149:     unsigned char *pd;",
      "",
      "[Removed Lines]",
      "146:     int src_len, int dest_len)",
      "",
      "[Added Lines]",
      "160:     int src_count, int src_size, int dest_len)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "153:     ps = src;",
      "154:     pd = dest;",
      "159:     i = 0;",
      "160:     do {",
      "161:         l = *ps++;",
      "162:         if (l & 0x80) {",
      "163:             l = (l & 0x7F) * 2;",
      "165:                 return ps - src;",
      "166:             memcpy(pd, ps, l);",
      "167:             ps += l;",
      "168:             pd += l;",
      "169:         } else {",
      "171:                 return ps - src;",
      "172:             for (i = 0; i < l; i++) {",
      "175:             }",
      "176:             ps += 2;",
      "177:         }",
      "178:         i += l;",
      "181:     return ps - src;",
      "182: }",
      "",
      "[Removed Lines]",
      "155:     if (src_len & 1)",
      "158:     src_len >>= 1;",
      "164:             if (pd + l > dest_end)",
      "170:             if (pd + i > dest_end)",
      "179:     } while (i < src_len);",
      "",
      "[Added Lines]",
      "169:     if (src_count & 1) {",
      "170:         if (src_size < 1)",
      "171:             return 0;",
      "173:         src_size--;",
      "174:     }",
      "176:     src_count >>= 1;",
      "179:         if (src_size < 1)",
      "180:             break;",
      "182:         src_size--;",
      "185:             if (pd + l > dest_end || src_size < l)",
      "189:             src_size -= l;",
      "192:             if (pd + i > dest_end || src_size < 2)",
      "199:             src_size -= 2;",
      "202:     } while (i < src_count);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "191:     const unsigned char *p = s->buf + 16;",
      "193:     const unsigned char *pb;",
      "194:     unsigned char meth;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:     unsigned int pb_size;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "204:     frame_y = AV_RL16(&s->buf[8]);",
      "205:     frame_width = AV_RL16(&s->buf[10]) - frame_x + 1;",
      "206:     frame_height = AV_RL16(&s->buf[12]) - frame_y + 1;",
      "208:     if ((frame_width == s->avctx->width && frame_height == s->avctx->height) &&",
      "209:         (frame_x || frame_y)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:     if (frame_x < 0 || frame_width < 0 ||",
      "232:         frame_x >= s->avctx->width ||",
      "233:         frame_width > s->avctx->width ||",
      "234:         frame_x + frame_width > s->avctx->width)",
      "235:         return;",
      "236:     if (frame_y < 0 || frame_height < 0 ||",
      "237:         frame_y >= s->avctx->height ||",
      "238:         frame_height > s->avctx->height ||",
      "239:         frame_y + frame_height > s->avctx->height)",
      "240:         return;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "222:         memcpy(s->frame.data[0], s->prev_frame.data[0],",
      "223:             s->avctx->height * s->frame.linesize[0]);",
      "",
      "[Removed Lines]",
      "219:     if (frame_x || frame_y || (frame_width != s->avctx->width) ||",
      "220:         (frame_height != s->avctx->height)) {",
      "",
      "[Added Lines]",
      "253:     if (s->prev_frame.data[0] &&",
      "254:         (frame_x || frame_y || (frame_width != s->avctx->width) ||",
      "255:         (frame_height != s->avctx->height))) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "235:         }",
      "236:         s->size -= (256 * 3 + 2);",
      "237:     }",
      "240:         pb = p;",
      "242:         if (meth & 0x80) {",
      "244:             meth &= 0x7F;",
      "245:             pb = s->unpack_buffer;",
      "246:         }",
      "248:         dp = &s->frame.data[0][frame_y * s->frame.linesize[0] + frame_x];",
      "",
      "[Removed Lines]",
      "238:     if (s->size >= 0) {",
      "241:         meth = *pb++;",
      "243:             lz_unpack(pb, s->unpack_buffer, s->unpack_buffer_size);",
      "",
      "[Added Lines]",
      "273:     if (s->size > 0) {",
      "276:         pb_size = s->buf + s->size - pb;",
      "277:         if (pb_size < 1)",
      "278:             return;",
      "279:         meth = *pb++; pb_size--;",
      "281:             lz_unpack(pb, pb_size,",
      "282:                       s->unpack_buffer, s->unpack_buffer_size);",
      "285:             pb_size = s->unpack_buffer_size;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "252:             for (i = 0; i < frame_height; i++) {",
      "253:                 ofs = 0;",
      "254:                 do {",
      "255:                     len = *pb++;",
      "256:                     if (len & 0x80) {",
      "257:                         len = (len & 0x7F) + 1;",
      "259:                             return;",
      "260:                         memcpy(&dp[ofs], pb, len);",
      "261:                         pb += len;",
      "262:                         ofs += len;",
      "263:                     } else {",
      "266:                             return;",
      "267:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
      "268:                         ofs += len + 1;",
      "",
      "[Removed Lines]",
      "258:                         if (ofs + len > frame_width)",
      "265:                         if (ofs + len + 1 > frame_width)",
      "",
      "[Added Lines]",
      "295:                     if (pb_size < 1)",
      "296:                         return;",
      "298:                     pb_size--;",
      "301:                         if (ofs + len > frame_width || pb_size < len)",
      "305:                         pb_size -= len;",
      "309:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "281:         case 2:",
      "282:             for (i = 0; i < frame_height; i++) {",
      "283:                 memcpy(dp, pb, frame_width);",
      "284:                 pb += frame_width;",
      "285:                 dp += s->frame.linesize[0];",
      "286:                 pp += s->prev_frame.linesize[0];",
      "287:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "327:                 if (pb_size < frame_width)",
      "328:                     return;",
      "331:                 pb_size -= frame_width;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "291:             for (i = 0; i < frame_height; i++) {",
      "292:                 ofs = 0;",
      "293:                 do {",
      "294:                     len = *pb++;",
      "295:                     if (len & 0x80) {",
      "296:                         len = (len & 0x7F) + 1;",
      "297:                         if (*pb++ == 0xFF)",
      "300:                             memcpy(&dp[ofs], pb, len);",
      "301:                         pb += len;",
      "302:                         ofs += len;",
      "303:                     } else {",
      "306:                             return;",
      "307:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
      "308:                         ofs += len + 1;",
      "",
      "[Removed Lines]",
      "298:                             len = rle_unpack(pb, &dp[ofs], len, frame_width - ofs);",
      "299:                         else",
      "305:                         if (ofs + len + 1 > frame_width)",
      "",
      "[Added Lines]",
      "341:                     if (pb_size < 1)",
      "342:                         return;",
      "344:                     pb_size--;",
      "347:                         if (pb_size < 1)",
      "348:                             return;",
      "350:                             len = rle_unpack(pb, &dp[ofs], len, pb_size, frame_width - ofs);",
      "351:                         else {",
      "352:                             if (pb_size < len)",
      "353:                                 return;",
      "355:                         }",
      "357:                         pb_size -= 1 + len;",
      "361:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b99366faef3a1ed4a34c9b37107f2c8c24702813",
      "candidate_info": {
        "commit_hash": "b99366faef3a1ed4a34c9b37107f2c8c24702813",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b99366faef3a1ed4a34c9b37107f2c8c24702813",
        "files": [
          "libavcodec/vmdav.c"
        ],
        "message": "vmd: fix segfaults on corruped streams\n\nSigned-off-by: Janne Grunau <janne-libav@jannau.net>\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit 494cfacdb9ba3f0549e37f76b3a2f86a7aeeac3c)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/vmdav.c||libavcodec/vmdav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ],
          "candidate": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vmdav.c||libavcodec/vmdav.c": [
          "File: libavcodec/vmdav.c -> libavcodec/vmdav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #define QUEUE_SIZE 0x1000",
          "73: #define QUEUE_MASK 0x0FFF",
          "76: {",
          "77:     const unsigned char *s;",
          "78:     unsigned char *d;",
          "79:     unsigned char *d_end;",
          "80:     unsigned char queue[QUEUE_SIZE];",
          "",
          "[Removed Lines]",
          "75: static void lz_unpack(const unsigned char *src, unsigned char *dest, int dest_len)",
          "",
          "[Added Lines]",
          "75: static void lz_unpack(const unsigned char *src, int src_len,",
          "76:                       unsigned char *dest, int dest_len)",
          "79:     unsigned int s_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     unsigned int i, j;",
          "89:     s = src;",
          "90:     d = dest;",
          "91:     d_end = d + dest_len;",
          "92:     dataleft = AV_RL32(s);",
          "94:     memset(queue, 0x20, QUEUE_SIZE);",
          "95:     if (AV_RL32(s) == 0x56781234) {",
          "97:         qpos = 0x111;",
          "98:         speclen = 0xF + 3;",
          "99:     } else {",
          "",
          "[Removed Lines]",
          "93:     s += 4;",
          "96:         s += 4;",
          "",
          "[Added Lines]",
          "92:     s_len = src_len;",
          "96:     s += 4; s_len -= 4;",
          "98:     if (s_len < 4)",
          "99:         return;",
          "101:         s += 4; s_len -= 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     }",
          "106:         if ((tag == 0xFF) && (dataleft > 8)) {",
          "108:                 return;",
          "109:             for (i = 0; i < 8; i++) {",
          "110:                 queue[qpos++] = *d++ = *s++;",
          "111:                 qpos &= QUEUE_MASK;",
          "112:             }",
          "113:             dataleft -= 8;",
          "114:         } else {",
          "115:             for (i = 0; i < 8; i++) {",
          "116:                 if (dataleft == 0)",
          "117:                     break;",
          "118:                 if (tag & 0x01) {",
          "120:                         return;",
          "121:                     queue[qpos++] = *d++ = *s++;",
          "122:                     qpos &= QUEUE_MASK;",
          "123:                     dataleft--;",
          "124:                 } else {",
          "125:                     chainofs = *s++;",
          "126:                     chainofs |= ((*s & 0xF0) << 4);",
          "127:                     chainlen = (*s++ & 0x0F) + 3;",
          "129:                         chainlen = *s++ + 0xF + 3;",
          "130:                     if (d + chainlen > d_end)",
          "131:                         return;",
          "132:                     for (j = 0; j < chainlen; j++) {",
          "",
          "[Removed Lines]",
          "104:     while (dataleft > 0) {",
          "105:         tag = *s++;",
          "107:             if (d + 8 > d_end)",
          "119:                     if (d + 1 > d_end)",
          "128:                     if (chainlen == speclen)",
          "",
          "[Added Lines]",
          "109:     while (dataleft > 0 && s_len > 0) {",
          "110:         tag = *s++; s_len--;",
          "112:             if (d + 8 > d_end || s_len < 8)",
          "118:             s_len -= 8;",
          "125:                     if (d + 1 > d_end || s_len < 1)",
          "130:                     s_len--;",
          "132:                     if (s_len < 2)",
          "133:                         return;",
          "137:                     s_len -= 2;",
          "138:                     if (chainlen == speclen) {",
          "139:                         if (s_len < 1)",
          "140:                             return;",
          "142:                         s_len--;",
          "143:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: }",
          "145: static int rle_unpack(const unsigned char *src, unsigned char *dest,",
          "147: {",
          "148:     const unsigned char *ps;",
          "149:     unsigned char *pd;",
          "",
          "[Removed Lines]",
          "146:     int src_len, int dest_len)",
          "",
          "[Added Lines]",
          "160:     int src_count, int src_size, int dest_len)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:     ps = src;",
          "154:     pd = dest;",
          "159:     i = 0;",
          "160:     do {",
          "161:         l = *ps++;",
          "162:         if (l & 0x80) {",
          "163:             l = (l & 0x7F) * 2;",
          "165:                 return ps - src;",
          "166:             memcpy(pd, ps, l);",
          "167:             ps += l;",
          "168:             pd += l;",
          "169:         } else {",
          "171:                 return ps - src;",
          "172:             for (i = 0; i < l; i++) {",
          "175:             }",
          "176:             ps += 2;",
          "177:         }",
          "178:         i += l;",
          "181:     return ps - src;",
          "182: }",
          "",
          "[Removed Lines]",
          "155:     if (src_len & 1)",
          "158:     src_len >>= 1;",
          "164:             if (pd + l > dest_end)",
          "170:             if (pd + i > dest_end)",
          "179:     } while (i < src_len);",
          "",
          "[Added Lines]",
          "169:     if (src_count & 1) {",
          "170:         if (src_size < 1)",
          "171:             return 0;",
          "173:         src_size--;",
          "174:     }",
          "176:     src_count >>= 1;",
          "179:         if (src_size < 1)",
          "180:             break;",
          "182:         src_size--;",
          "185:             if (pd + l > dest_end || src_size < l)",
          "189:             src_size -= l;",
          "192:             if (pd + i > dest_end || src_size < 2)",
          "199:             src_size -= 2;",
          "202:     } while (i < src_count);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:     const unsigned char *p = s->buf + 16;",
          "193:     const unsigned char *pb;",
          "194:     unsigned char meth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     unsigned int pb_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205:     frame_y = AV_RL16(&s->buf[8]);",
          "206:     frame_width = AV_RL16(&s->buf[10]) - frame_x + 1;",
          "207:     frame_height = AV_RL16(&s->buf[12]) - frame_y + 1;",
          "209:     if ((frame_width == s->avctx->width && frame_height == s->avctx->height) &&",
          "210:         (frame_x || frame_y)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     if (frame_x < 0 || frame_width < 0 ||",
          "233:         frame_x >= s->avctx->width ||",
          "234:         frame_width > s->avctx->width ||",
          "235:         frame_x + frame_width > s->avctx->width)",
          "236:         return;",
          "237:     if (frame_y < 0 || frame_height < 0 ||",
          "238:         frame_y >= s->avctx->height ||",
          "239:         frame_height > s->avctx->height ||",
          "240:         frame_y + frame_height > s->avctx->height)",
          "241:         return;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "223:         memcpy(s->frame.data[0], s->prev_frame.data[0],",
          "224:             s->avctx->height * s->frame.linesize[0]);",
          "",
          "[Removed Lines]",
          "220:     if (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "221:         (frame_height != s->avctx->height)) {",
          "",
          "[Added Lines]",
          "254:     if (s->prev_frame.data[0] &&",
          "255:         (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "256:         (frame_height != s->avctx->height))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "236:         }",
          "237:         s->size -= (256 * 3 + 2);",
          "238:     }",
          "241:         pb = p;",
          "243:         if (meth & 0x80) {",
          "245:             meth &= 0x7F;",
          "246:             pb = s->unpack_buffer;",
          "247:         }",
          "249:         dp = &s->frame.data[0][frame_y * s->frame.linesize[0] + frame_x];",
          "",
          "[Removed Lines]",
          "239:     if (s->size >= 0) {",
          "242:         meth = *pb++;",
          "244:             lz_unpack(pb, s->unpack_buffer, s->unpack_buffer_size);",
          "",
          "[Added Lines]",
          "274:     if (s->size > 0) {",
          "277:         pb_size = s->buf + s->size - pb;",
          "278:         if (pb_size < 1)",
          "279:             return;",
          "280:         meth = *pb++; pb_size--;",
          "282:             lz_unpack(pb, pb_size,",
          "283:                       s->unpack_buffer, s->unpack_buffer_size);",
          "286:             pb_size = s->unpack_buffer_size;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "254:             for (i = 0; i < frame_height; i++) {",
          "255:                 ofs = 0;",
          "256:                 do {",
          "257:                     len = *pb++;",
          "258:                     if (len & 0x80) {",
          "259:                         len = (len & 0x7F) + 1;",
          "261:                             return;",
          "262:                         memcpy(&dp[ofs], pb, len);",
          "263:                         pb += len;",
          "264:                         ofs += len;",
          "265:                     } else {",
          "268:                             return;",
          "269:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "270:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "260:                         if (ofs + len > frame_width)",
          "267:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "297:                     if (pb_size < 1)",
          "298:                         return;",
          "300:                     pb_size--;",
          "303:                         if (ofs + len > frame_width || pb_size < len)",
          "307:                         pb_size -= len;",
          "311:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "283:         case 2:",
          "284:             for (i = 0; i < frame_height; i++) {",
          "285:                 memcpy(dp, pb, frame_width);",
          "286:                 pb += frame_width;",
          "287:                 dp += s->frame.linesize[0];",
          "288:                 pp += s->prev_frame.linesize[0];",
          "289:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:                 if (pb_size < frame_width)",
          "330:                     return;",
          "333:                 pb_size -= frame_width;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "293:             for (i = 0; i < frame_height; i++) {",
          "294:                 ofs = 0;",
          "295:                 do {",
          "296:                     len = *pb++;",
          "297:                     if (len & 0x80) {",
          "298:                         len = (len & 0x7F) + 1;",
          "299:                         if (*pb++ == 0xFF)",
          "302:                             memcpy(&dp[ofs], pb, len);",
          "303:                         pb += len;",
          "304:                         ofs += len;",
          "305:                     } else {",
          "308:                             return;",
          "309:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "310:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "300:                             len = rle_unpack(pb, &dp[ofs], len, frame_width - ofs);",
          "301:                         else",
          "307:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "343:                     if (pb_size < 1)",
          "344:                         return;",
          "346:                     pb_size--;",
          "349:                         if (pb_size < 1)",
          "350:                             return;",
          "352:                             len = rle_unpack(pb, &dp[ofs], len, pb_size, frame_width - ofs);",
          "353:                         else {",
          "354:                             if (pb_size < len)",
          "355:                                 return;",
          "357:                         }",
          "359:                         pb_size -= 1 + len;",
          "363:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "494cfacdb9ba3f0549e37f76b3a2f86a7aeeac3c",
      "candidate_info": {
        "commit_hash": "494cfacdb9ba3f0549e37f76b3a2f86a7aeeac3c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/494cfacdb9ba3f0549e37f76b3a2f86a7aeeac3c",
        "files": [
          "libavcodec/vmdav.c"
        ],
        "message": "vmd: fix segfaults on corruped streams\n\nSigned-off-by: Janne Grunau <janne-libav@jannau.net>\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/vmdav.c||libavcodec/vmdav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ],
          "candidate": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vmdav.c||libavcodec/vmdav.c": [
          "File: libavcodec/vmdav.c -> libavcodec/vmdav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #define QUEUE_SIZE 0x1000",
          "73: #define QUEUE_MASK 0x0FFF",
          "76: {",
          "77:     const unsigned char *s;",
          "78:     unsigned char *d;",
          "79:     unsigned char *d_end;",
          "80:     unsigned char queue[QUEUE_SIZE];",
          "",
          "[Removed Lines]",
          "75: static void lz_unpack(const unsigned char *src, unsigned char *dest, int dest_len)",
          "",
          "[Added Lines]",
          "75: static void lz_unpack(const unsigned char *src, int src_len,",
          "76:                       unsigned char *dest, int dest_len)",
          "79:     unsigned int s_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     unsigned int i, j;",
          "89:     s = src;",
          "90:     d = dest;",
          "91:     d_end = d + dest_len;",
          "92:     dataleft = AV_RL32(s);",
          "94:     memset(queue, 0x20, QUEUE_SIZE);",
          "95:     if (AV_RL32(s) == 0x56781234) {",
          "97:         qpos = 0x111;",
          "98:         speclen = 0xF + 3;",
          "99:     } else {",
          "",
          "[Removed Lines]",
          "93:     s += 4;",
          "96:         s += 4;",
          "",
          "[Added Lines]",
          "92:     s_len = src_len;",
          "96:     s += 4; s_len -= 4;",
          "98:     if (s_len < 4)",
          "99:         return;",
          "101:         s += 4; s_len -= 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     }",
          "106:         if ((tag == 0xFF) && (dataleft > 8)) {",
          "108:                 return;",
          "109:             for (i = 0; i < 8; i++) {",
          "110:                 queue[qpos++] = *d++ = *s++;",
          "111:                 qpos &= QUEUE_MASK;",
          "112:             }",
          "113:             dataleft -= 8;",
          "114:         } else {",
          "115:             for (i = 0; i < 8; i++) {",
          "116:                 if (dataleft == 0)",
          "117:                     break;",
          "118:                 if (tag & 0x01) {",
          "120:                         return;",
          "121:                     queue[qpos++] = *d++ = *s++;",
          "122:                     qpos &= QUEUE_MASK;",
          "123:                     dataleft--;",
          "124:                 } else {",
          "125:                     chainofs = *s++;",
          "126:                     chainofs |= ((*s & 0xF0) << 4);",
          "127:                     chainlen = (*s++ & 0x0F) + 3;",
          "129:                         chainlen = *s++ + 0xF + 3;",
          "130:                     if (d + chainlen > d_end)",
          "131:                         return;",
          "132:                     for (j = 0; j < chainlen; j++) {",
          "",
          "[Removed Lines]",
          "104:     while (dataleft > 0) {",
          "105:         tag = *s++;",
          "107:             if (d + 8 > d_end)",
          "119:                     if (d + 1 > d_end)",
          "128:                     if (chainlen == speclen)",
          "",
          "[Added Lines]",
          "109:     while (dataleft > 0 && s_len > 0) {",
          "110:         tag = *s++; s_len--;",
          "112:             if (d + 8 > d_end || s_len < 8)",
          "118:             s_len -= 8;",
          "125:                     if (d + 1 > d_end || s_len < 1)",
          "130:                     s_len--;",
          "132:                     if (s_len < 2)",
          "133:                         return;",
          "137:                     s_len -= 2;",
          "138:                     if (chainlen == speclen) {",
          "139:                         if (s_len < 1)",
          "140:                             return;",
          "142:                         s_len--;",
          "143:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: }",
          "145: static int rle_unpack(const unsigned char *src, unsigned char *dest,",
          "147: {",
          "148:     const unsigned char *ps;",
          "149:     unsigned char *pd;",
          "",
          "[Removed Lines]",
          "146:     int src_len, int dest_len)",
          "",
          "[Added Lines]",
          "160:     int src_count, int src_size, int dest_len)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:     ps = src;",
          "154:     pd = dest;",
          "159:     i = 0;",
          "160:     do {",
          "161:         l = *ps++;",
          "162:         if (l & 0x80) {",
          "163:             l = (l & 0x7F) * 2;",
          "165:                 return ps - src;",
          "166:             memcpy(pd, ps, l);",
          "167:             ps += l;",
          "168:             pd += l;",
          "169:         } else {",
          "171:                 return ps - src;",
          "172:             for (i = 0; i < l; i++) {",
          "175:             }",
          "176:             ps += 2;",
          "177:         }",
          "178:         i += l;",
          "181:     return ps - src;",
          "182: }",
          "",
          "[Removed Lines]",
          "155:     if (src_len & 1)",
          "158:     src_len >>= 1;",
          "164:             if (pd + l > dest_end)",
          "170:             if (pd + i > dest_end)",
          "179:     } while (i < src_len);",
          "",
          "[Added Lines]",
          "169:     if (src_count & 1) {",
          "170:         if (src_size < 1)",
          "171:             return 0;",
          "173:         src_size--;",
          "174:     }",
          "176:     src_count >>= 1;",
          "179:         if (src_size < 1)",
          "180:             break;",
          "182:         src_size--;",
          "185:             if (pd + l > dest_end || src_size < l)",
          "189:             src_size -= l;",
          "192:             if (pd + i > dest_end || src_size < 2)",
          "199:             src_size -= 2;",
          "202:     } while (i < src_count);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:     const unsigned char *p = s->buf + 16;",
          "193:     const unsigned char *pb;",
          "194:     unsigned char meth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     unsigned int pb_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204:     frame_y = AV_RL16(&s->buf[8]);",
          "205:     frame_width = AV_RL16(&s->buf[10]) - frame_x + 1;",
          "206:     frame_height = AV_RL16(&s->buf[12]) - frame_y + 1;",
          "208:     if ((frame_width == s->avctx->width && frame_height == s->avctx->height) &&",
          "209:         (frame_x || frame_y)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:     if (frame_x < 0 || frame_width < 0 ||",
          "232:         frame_x >= s->avctx->width ||",
          "233:         frame_width > s->avctx->width ||",
          "234:         frame_x + frame_width > s->avctx->width)",
          "235:         return;",
          "236:     if (frame_y < 0 || frame_height < 0 ||",
          "237:         frame_y >= s->avctx->height ||",
          "238:         frame_height > s->avctx->height ||",
          "239:         frame_y + frame_height > s->avctx->height)",
          "240:         return;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "222:         memcpy(s->frame.data[0], s->prev_frame.data[0],",
          "223:             s->avctx->height * s->frame.linesize[0]);",
          "",
          "[Removed Lines]",
          "219:     if (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "220:         (frame_height != s->avctx->height)) {",
          "",
          "[Added Lines]",
          "253:     if (s->prev_frame.data[0] &&",
          "254:         (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "255:         (frame_height != s->avctx->height))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "235:         }",
          "236:         s->size -= (256 * 3 + 2);",
          "237:     }",
          "240:         pb = p;",
          "242:         if (meth & 0x80) {",
          "244:             meth &= 0x7F;",
          "245:             pb = s->unpack_buffer;",
          "246:         }",
          "248:         dp = &s->frame.data[0][frame_y * s->frame.linesize[0] + frame_x];",
          "",
          "[Removed Lines]",
          "238:     if (s->size >= 0) {",
          "241:         meth = *pb++;",
          "243:             lz_unpack(pb, s->unpack_buffer, s->unpack_buffer_size);",
          "",
          "[Added Lines]",
          "273:     if (s->size > 0) {",
          "276:         pb_size = s->buf + s->size - pb;",
          "277:         if (pb_size < 1)",
          "278:             return;",
          "279:         meth = *pb++; pb_size--;",
          "281:             lz_unpack(pb, pb_size,",
          "282:                       s->unpack_buffer, s->unpack_buffer_size);",
          "285:             pb_size = s->unpack_buffer_size;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "252:             for (i = 0; i < frame_height; i++) {",
          "253:                 ofs = 0;",
          "254:                 do {",
          "255:                     len = *pb++;",
          "256:                     if (len & 0x80) {",
          "257:                         len = (len & 0x7F) + 1;",
          "259:                             return;",
          "260:                         memcpy(&dp[ofs], pb, len);",
          "261:                         pb += len;",
          "262:                         ofs += len;",
          "263:                     } else {",
          "266:                             return;",
          "267:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "268:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "258:                         if (ofs + len > frame_width)",
          "265:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "295:                     if (pb_size < 1)",
          "296:                         return;",
          "298:                     pb_size--;",
          "301:                         if (ofs + len > frame_width || pb_size < len)",
          "305:                         pb_size -= len;",
          "309:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "281:         case 2:",
          "282:             for (i = 0; i < frame_height; i++) {",
          "283:                 memcpy(dp, pb, frame_width);",
          "284:                 pb += frame_width;",
          "285:                 dp += s->frame.linesize[0];",
          "286:                 pp += s->prev_frame.linesize[0];",
          "287:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:                 if (pb_size < frame_width)",
          "328:                     return;",
          "331:                 pb_size -= frame_width;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "291:             for (i = 0; i < frame_height; i++) {",
          "292:                 ofs = 0;",
          "293:                 do {",
          "294:                     len = *pb++;",
          "295:                     if (len & 0x80) {",
          "296:                         len = (len & 0x7F) + 1;",
          "297:                         if (*pb++ == 0xFF)",
          "300:                             memcpy(&dp[ofs], pb, len);",
          "301:                         pb += len;",
          "302:                         ofs += len;",
          "303:                     } else {",
          "306:                             return;",
          "307:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "308:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "298:                             len = rle_unpack(pb, &dp[ofs], len, frame_width - ofs);",
          "299:                         else",
          "305:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "341:                     if (pb_size < 1)",
          "342:                         return;",
          "344:                     pb_size--;",
          "347:                         if (pb_size < 1)",
          "348:                             return;",
          "350:                             len = rle_unpack(pb, &dp[ofs], len, pb_size, frame_width - ofs);",
          "351:                         else {",
          "352:                             if (pb_size < len)",
          "353:                                 return;",
          "355:                         }",
          "357:                         pb_size -= 1 + len;",
          "361:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a1c3df592a2151f037dcf3f9f6d695da85c4511",
      "candidate_info": {
        "commit_hash": "4a1c3df592a2151f037dcf3f9f6d695da85c4511",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4a1c3df592a2151f037dcf3f9f6d695da85c4511",
        "files": [
          "libavcodec/vmdav.c"
        ],
        "message": "vmd: fix segfaults on corruped streams\n\nSigned-off-by: Janne Grunau <janne-libav@jannau.net>\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit 494cfacdb9ba3f0549e37f76b3a2f86a7aeeac3c)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit b99366faef3a1ed4a34c9b37107f2c8c24702813)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/vmdav.c||libavcodec/vmdav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ],
          "candidate": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vmdav.c||libavcodec/vmdav.c": [
          "File: libavcodec/vmdav.c -> libavcodec/vmdav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #define QUEUE_SIZE 0x1000",
          "74: #define QUEUE_MASK 0x0FFF",
          "77: {",
          "78:     const unsigned char *s;",
          "79:     unsigned char *d;",
          "80:     unsigned char *d_end;",
          "81:     unsigned char queue[QUEUE_SIZE];",
          "",
          "[Removed Lines]",
          "76: static void lz_unpack(const unsigned char *src, unsigned char *dest, int dest_len)",
          "",
          "[Added Lines]",
          "76: static void lz_unpack(const unsigned char *src, int src_len,",
          "77:                       unsigned char *dest, int dest_len)",
          "80:     unsigned int s_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     unsigned int i, j;",
          "90:     s = src;",
          "91:     d = dest;",
          "92:     d_end = d + dest_len;",
          "93:     dataleft = AV_RL32(s);",
          "95:     memset(queue, 0x20, QUEUE_SIZE);",
          "96:     if (AV_RL32(s) == 0x56781234) {",
          "98:         qpos = 0x111;",
          "99:         speclen = 0xF + 3;",
          "100:     } else {",
          "",
          "[Removed Lines]",
          "94:     s += 4;",
          "97:         s += 4;",
          "",
          "[Added Lines]",
          "93:     s_len = src_len;",
          "97:     s += 4; s_len -= 4;",
          "99:     if (s_len < 4)",
          "100:         return;",
          "102:         s += 4; s_len -= 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:     }",
          "107:         if ((tag == 0xFF) && (dataleft > 8)) {",
          "109:                 return;",
          "110:             for (i = 0; i < 8; i++) {",
          "111:                 queue[qpos++] = *d++ = *s++;",
          "112:                 qpos &= QUEUE_MASK;",
          "113:             }",
          "114:             dataleft -= 8;",
          "115:         } else {",
          "116:             for (i = 0; i < 8; i++) {",
          "117:                 if (dataleft == 0)",
          "118:                     break;",
          "119:                 if (tag & 0x01) {",
          "121:                         return;",
          "122:                     queue[qpos++] = *d++ = *s++;",
          "123:                     qpos &= QUEUE_MASK;",
          "124:                     dataleft--;",
          "125:                 } else {",
          "126:                     chainofs = *s++;",
          "127:                     chainofs |= ((*s & 0xF0) << 4);",
          "128:                     chainlen = (*s++ & 0x0F) + 3;",
          "130:                         chainlen = *s++ + 0xF + 3;",
          "131:                     if (d + chainlen > d_end)",
          "132:                         return;",
          "133:                     for (j = 0; j < chainlen; j++) {",
          "",
          "[Removed Lines]",
          "105:     while (dataleft > 0) {",
          "106:         tag = *s++;",
          "108:             if (d + 8 > d_end)",
          "120:                     if (d + 1 > d_end)",
          "129:                     if (chainlen == speclen)",
          "",
          "[Added Lines]",
          "110:     while (dataleft > 0 && s_len > 0) {",
          "111:         tag = *s++; s_len--;",
          "113:             if (d + 8 > d_end || s_len < 8)",
          "119:             s_len -= 8;",
          "126:                     if (d + 1 > d_end || s_len < 1)",
          "131:                     s_len--;",
          "133:                     if (s_len < 2)",
          "134:                         return;",
          "138:                     s_len -= 2;",
          "139:                     if (chainlen == speclen) {",
          "140:                         if (s_len < 1)",
          "141:                             return;",
          "143:                         s_len--;",
          "144:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144: }",
          "146: static int rle_unpack(const unsigned char *src, unsigned char *dest,",
          "148: {",
          "149:     const unsigned char *ps;",
          "150:     unsigned char *pd;",
          "",
          "[Removed Lines]",
          "147:     int src_len, int dest_len)",
          "",
          "[Added Lines]",
          "161:     int src_count, int src_size, int dest_len)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:     ps = src;",
          "155:     pd = dest;",
          "160:     i = 0;",
          "161:     do {",
          "162:         l = *ps++;",
          "163:         if (l & 0x80) {",
          "164:             l = (l & 0x7F) * 2;",
          "166:                 return ps - src;",
          "167:             memcpy(pd, ps, l);",
          "168:             ps += l;",
          "169:             pd += l;",
          "170:         } else {",
          "172:                 return ps - src;",
          "173:             for (i = 0; i < l; i++) {",
          "176:             }",
          "177:             ps += 2;",
          "178:         }",
          "179:         i += l;",
          "182:     return ps - src;",
          "183: }",
          "",
          "[Removed Lines]",
          "156:     if (src_len & 1)",
          "159:     src_len >>= 1;",
          "165:             if (pd + l > dest_end)",
          "171:             if (pd + i > dest_end)",
          "180:     } while (i < src_len);",
          "",
          "[Added Lines]",
          "170:     if (src_count & 1) {",
          "171:         if (src_size < 1)",
          "172:             return 0;",
          "174:         src_size--;",
          "175:     }",
          "177:     src_count >>= 1;",
          "180:         if (src_size < 1)",
          "181:             break;",
          "183:         src_size--;",
          "186:             if (pd + l > dest_end || src_size < l)",
          "190:             src_size -= l;",
          "193:             if (pd + i > dest_end || src_size < 2)",
          "200:             src_size -= 2;",
          "203:     } while (i < src_count);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "192:     const unsigned char *p = s->buf + 16;",
          "194:     const unsigned char *pb;",
          "195:     unsigned char meth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     unsigned int pb_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "206:     frame_y = AV_RL16(&s->buf[8]);",
          "207:     frame_width = AV_RL16(&s->buf[10]) - frame_x + 1;",
          "208:     frame_height = AV_RL16(&s->buf[12]) - frame_y + 1;",
          "210:     if ((frame_width == s->avctx->width && frame_height == s->avctx->height) &&",
          "211:         (frame_x || frame_y)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     if (frame_x < 0 || frame_width < 0 ||",
          "234:         frame_x >= s->avctx->width ||",
          "235:         frame_width > s->avctx->width ||",
          "236:         frame_x + frame_width > s->avctx->width)",
          "237:         return;",
          "238:     if (frame_y < 0 || frame_height < 0 ||",
          "239:         frame_y >= s->avctx->height ||",
          "240:         frame_height > s->avctx->height ||",
          "241:         frame_y + frame_height > s->avctx->height)",
          "242:         return;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224:         memcpy(s->frame.data[0], s->prev_frame.data[0],",
          "225:             s->avctx->height * s->frame.linesize[0]);",
          "",
          "[Removed Lines]",
          "221:     if (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "222:         (frame_height != s->avctx->height)) {",
          "",
          "[Added Lines]",
          "255:     if (s->prev_frame.data[0] &&",
          "256:         (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "257:         (frame_height != s->avctx->height))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "237:         }",
          "238:         s->size -= (256 * 3 + 2);",
          "239:     }",
          "242:         pb = p;",
          "244:         if (meth & 0x80) {",
          "246:             meth &= 0x7F;",
          "247:             pb = s->unpack_buffer;",
          "248:         }",
          "250:         dp = &s->frame.data[0][frame_y * s->frame.linesize[0] + frame_x];",
          "",
          "[Removed Lines]",
          "240:     if (s->size >= 0) {",
          "243:         meth = *pb++;",
          "245:             lz_unpack(pb, s->unpack_buffer, s->unpack_buffer_size);",
          "",
          "[Added Lines]",
          "275:     if (s->size > 0) {",
          "278:         pb_size = s->buf + s->size - pb;",
          "279:         if (pb_size < 1)",
          "280:             return;",
          "281:         meth = *pb++; pb_size--;",
          "283:             lz_unpack(pb, pb_size,",
          "284:                       s->unpack_buffer, s->unpack_buffer_size);",
          "287:             pb_size = s->unpack_buffer_size;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "255:             for (i = 0; i < frame_height; i++) {",
          "256:                 ofs = 0;",
          "257:                 do {",
          "258:                     len = *pb++;",
          "259:                     if (len & 0x80) {",
          "260:                         len = (len & 0x7F) + 1;",
          "262:                             return;",
          "263:                         memcpy(&dp[ofs], pb, len);",
          "264:                         pb += len;",
          "265:                         ofs += len;",
          "266:                     } else {",
          "269:                             return;",
          "270:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "271:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "261:                         if (ofs + len > frame_width)",
          "268:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "298:                     if (pb_size < 1)",
          "299:                         return;",
          "301:                     pb_size--;",
          "304:                         if (ofs + len > frame_width || pb_size < len)",
          "308:                         pb_size -= len;",
          "312:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "284:         case 2:",
          "285:             for (i = 0; i < frame_height; i++) {",
          "286:                 memcpy(dp, pb, frame_width);",
          "287:                 pb += frame_width;",
          "288:                 dp += s->frame.linesize[0];",
          "289:                 pp += s->prev_frame.linesize[0];",
          "290:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:                 if (pb_size < frame_width)",
          "331:                     return;",
          "334:                 pb_size -= frame_width;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "294:             for (i = 0; i < frame_height; i++) {",
          "295:                 ofs = 0;",
          "296:                 do {",
          "297:                     len = *pb++;",
          "298:                     if (len & 0x80) {",
          "299:                         len = (len & 0x7F) + 1;",
          "300:                         if (*pb++ == 0xFF)",
          "303:                             memcpy(&dp[ofs], pb, len);",
          "304:                         pb += len;",
          "305:                         ofs += len;",
          "306:                     } else {",
          "309:                             return;",
          "310:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "311:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "301:                             len = rle_unpack(pb, &dp[ofs], len, frame_width - ofs);",
          "302:                         else",
          "308:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "344:                     if (pb_size < 1)",
          "345:                         return;",
          "347:                     pb_size--;",
          "350:                         if (pb_size < 1)",
          "351:                             return;",
          "353:                             len = rle_unpack(pb, &dp[ofs], len, pb_size, frame_width - ofs);",
          "354:                         else {",
          "355:                             if (pb_size < len)",
          "356:                                 return;",
          "358:                         }",
          "360:                         pb_size -= 1 + len;",
          "364:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d92bfc98f9f64fa891ee4a3640ba6c55e90540ef",
      "candidate_info": {
        "commit_hash": "d92bfc98f9f64fa891ee4a3640ba6c55e90540ef",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d92bfc98f9f64fa891ee4a3640ba6c55e90540ef",
        "files": [
          "libavcodec/vmdav.c"
        ],
        "message": "Prevent NULL dereferences when the previous frame is missing in vmd video decoder.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 6a6383bebcb03a785797007031ad1c9786a508a5)",
        "before_after_code_files": [
          "libavcodec/vmdav.c||libavcodec/vmdav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ],
          "candidate": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vmdav.c||libavcodec/vmdav.c": [
          "File: libavcodec/vmdav.c -> libavcodec/vmdav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         memcpy(s->frame.data[0], s->prev_frame.data[0],",
          "233:             s->avctx->height * s->frame.linesize[0]);",
          "",
          "[Removed Lines]",
          "229:     if (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "230:         (frame_height != s->avctx->height)) {",
          "",
          "[Added Lines]",
          "229:     if (s->prev_frame.data[0] &&",
          "230:         (frame_x || frame_y || (frame_width != s->avctx->width) ||",
          "231:         (frame_height != s->avctx->height))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:                         ofs += len;",
          "273:                     } else {",
          "276:                             return;",
          "277:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "278:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "275:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "276:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312:                         ofs += len;",
          "313:                     } else {",
          "316:                             return;",
          "317:                         memcpy(&dp[ofs], &pp[ofs], len + 1);",
          "318:                         ofs += len + 1;",
          "",
          "[Removed Lines]",
          "315:                         if (ofs + len + 1 > frame_width)",
          "",
          "[Added Lines]",
          "316:                         if (ofs + len + 1 > frame_width || !s->prev_frame.data[0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ed90c84f6ab75af91b08436cefb8ea464f8495b",
      "candidate_info": {
        "commit_hash": "1ed90c84f6ab75af91b08436cefb8ea464f8495b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1ed90c84f6ab75af91b08436cefb8ea464f8495b",
        "files": [
          "libavcodec/vmdav.c"
        ],
        "message": "Check for invalid update parameters in vmd video decoder.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit e7aed1280ea14b60fceae04d71dfd03e1daf2d04)",
        "before_after_code_files": [
          "libavcodec/vmdav.c||libavcodec/vmdav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ],
          "candidate": [
            "libavcodec/vmdav.c||libavcodec/vmdav.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vmdav.c||libavcodec/vmdav.c": [
          "File: libavcodec/vmdav.c -> libavcodec/vmdav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     frame_y = AV_RL16(&s->buf[8]);",
          "205:     frame_width = AV_RL16(&s->buf[10]) - frame_x + 1;",
          "206:     frame_height = AV_RL16(&s->buf[12]) - frame_y + 1;",
          "208:     if ((frame_width == s->avctx->width && frame_height == s->avctx->height) &&",
          "209:         (frame_x || frame_y)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     if (frame_x < 0 || frame_width < 0 ||",
          "208:         frame_x >= s->avctx->width ||",
          "209:         frame_width > s->avctx->width ||",
          "210:         frame_x + frame_width > s->avctx->width)",
          "211:         return;",
          "212:     if (frame_y < 0 || frame_height < 0 ||",
          "213:         frame_y >= s->avctx->height ||",
          "214:         frame_height > s->avctx->height ||",
          "215:         frame_y + frame_height > s->avctx->height)",
          "216:         return;",
          "",
          "---------------"
        ]
      }
    }
  ]
}