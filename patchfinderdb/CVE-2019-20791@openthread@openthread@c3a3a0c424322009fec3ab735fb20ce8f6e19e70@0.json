{
  "cve_id": "CVE-2019-20791",
  "cve_desc": "OpenThread before 2019-12-13 has a stack-based buffer overflow in MeshCoP::Commissioner::GeneratePskc.",
  "repo": "openthread/openthread",
  "patch_hash": "c3a3a0c424322009fec3ab735fb20ce8f6e19e70",
  "patch_info": {
    "commit_hash": "c3a3a0c424322009fec3ab735fb20ce8f6e19e70",
    "repo": "openthread/openthread",
    "commit_url": "https://github.com/openthread/openthread/commit/c3a3a0c424322009fec3ab735fb20ce8f6e19e70",
    "files": [
      "src/core/meshcop/commissioner.cpp"
    ],
    "message": "[commissioner] use strnlen instead of strlen (#4404)",
    "before_after_code_files": [
      "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
    ]
  },
  "patch_diff": {
    "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp": [
      "File: src/core/meshcop/commissioner.cpp -> src/core/meshcop/commissioner.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "256:     VerifyOrExit(mState == OT_COMMISSIONER_STATE_ACTIVE, error = OT_ERROR_INVALID_STATE);",
      "259:     RemoveJoiner(aEui64, 0); // remove immediately",
      "261:     for (Joiner *joiner = &mJoiners[0]; joiner < OT_ARRAY_END(mJoiners); joiner++)",
      "",
      "[Removed Lines]",
      "258:     VerifyOrExit(strlen(aPskd) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
      "",
      "[Added Lines]",
      "258:     VerifyOrExit(strnlen(aPskd, Dtls::kPskMaxLength + 1) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1103:                                    const Mac::ExtendedPanId &aExtPanId,",
      "1104:                                    Pskc &                    aPskc)",
      "1105: {",
      "1114:                  error = OT_ERROR_INVALID_ARGS);",
      "1116:     memset(salt, 0, sizeof(salt));",
      "1120:     memcpy(salt + saltLen, aExtPanId.m8, sizeof(aExtPanId));",
      "1121:     saltLen += OT_EXT_PAN_ID_SIZE;",
      "1129: exit:",
      "1130:     return error;",
      "",
      "[Removed Lines]",
      "1106:     otError     error      = OT_ERROR_NONE;",
      "1107:     const char *saltPrefix = \"Thread\";",
      "1108:     uint8_t     salt[OT_PBKDF2_SALT_MAX_LEN];",
      "1109:     uint16_t    saltLen = 0;",
      "1111:     VerifyOrExit((strlen(aPassPhrase) >= OT_COMMISSIONING_PASSPHRASE_MIN_SIZE) &&",
      "1112:                      (strlen(aPassPhrase) <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE) &&",
      "1113:                      (strlen(aNetworkName) <= OT_NETWORK_NAME_MAX_SIZE),",
      "1117:     memcpy(salt, saltPrefix, strlen(saltPrefix));",
      "1118:     saltLen += static_cast<uint16_t>(strlen(saltPrefix));",
      "1123:     memcpy(salt + saltLen, aNetworkName, strlen(aNetworkName));",
      "1124:     saltLen += static_cast<uint16_t>(strlen(aNetworkName));",
      "1126:     otPbkdf2Cmac(reinterpret_cast<const uint8_t *>(aPassPhrase), static_cast<uint16_t>(strlen(aPassPhrase)),",
      "1127:                  reinterpret_cast<const uint8_t *>(salt), saltLen, 16384, OT_PSKC_MAX_SIZE, aPskc.m8);",
      "",
      "[Added Lines]",
      "1107:     otError    error        = OT_ERROR_NONE;",
      "1108:     const char saltPrefix[] = \"Thread\";",
      "1109:     uint8_t    salt[OT_PBKDF2_SALT_MAX_LEN];",
      "1110:     uint16_t   saltLen = 0;",
      "1111:     uint16_t   passphraseLen;",
      "1112:     uint8_t    networkNameLen;",
      "1114:     passphraseLen  = static_cast<uint16_t>(strnlen(aPassPhrase, OT_COMMISSIONING_PASSPHRASE_MAX_SIZE + 1));",
      "1115:     networkNameLen = static_cast<uint8_t>(strnlen(aNetworkName, OT_NETWORK_NAME_MAX_SIZE + 1));",
      "1117:     VerifyOrExit((passphraseLen >= OT_COMMISSIONING_PASSPHRASE_MIN_SIZE) &&",
      "1118:                      (passphraseLen <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE) &&",
      "1119:                      (networkNameLen <= OT_NETWORK_NAME_MAX_SIZE),",
      "1123:     memcpy(salt, saltPrefix, sizeof(saltPrefix) - 1);",
      "1124:     saltLen += static_cast<uint16_t>(sizeof(saltPrefix) - 1);",
      "1129:     memcpy(salt + saltLen, aNetworkName, networkNameLen);",
      "1130:     saltLen += networkNameLen;",
      "1132:     otPbkdf2Cmac(reinterpret_cast<const uint8_t *>(aPassPhrase), passphraseLen, reinterpret_cast<const uint8_t *>(salt),",
      "1133:                  saltLen, 16384, OT_PSKC_MAX_SIZE, aPskc.m8);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "092eb186e17ffbcab21178b14c090377e4a44c84",
      "candidate_info": {
        "commit_hash": "092eb186e17ffbcab21178b14c090377e4a44c84",
        "repo": "openthread/openthread",
        "commit_url": "https://github.com/openthread/openthread/commit/092eb186e17ffbcab21178b14c090377e4a44c84",
        "files": [
          "src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/joiner.cpp",
          "src/core/meshcop/joiner.hpp",
          "tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py",
          "tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py",
          "tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py",
          "tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py",
          "tools/harness-thci/OpenThread.py",
          "tools/harness-thci/OpenThread_WpanCtl.py"
        ],
        "message": "[joiner] add validation of joiner PSKd (#4934)",
        "before_after_code_files": [
          "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/joiner.cpp||src/core/meshcop/joiner.cpp",
          "src/core/meshcop/joiner.hpp||src/core/meshcop/joiner.hpp",
          "tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py||tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py",
          "tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py||tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py",
          "tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py||tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py",
          "tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py||tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py",
          "tools/harness-thci/OpenThread.py||tools/harness-thci/OpenThread.py",
          "tools/harness-thci/OpenThread_WpanCtl.py||tools/harness-thci/OpenThread_WpanCtl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ],
          "candidate": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp": [
          "File: src/core/meshcop/commissioner.cpp -> src/core/meshcop/commissioner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"common/logging.hpp\"",
          "43: #include \"common/string.hpp\"",
          "44: #include \"crypto/pbkdf2_cmac.h\"",
          "45: #include \"meshcop/joiner_router.hpp\"",
          "46: #include \"meshcop/meshcop.hpp\"",
          "47: #include \"meshcop/meshcop_tlvs.hpp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include \"meshcop/joiner.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:     VerifyOrExit(mState == OT_COMMISSIONER_STATE_ACTIVE, error = OT_ERROR_INVALID_STATE);",
          "290:     IgnoreError(RemoveJoiner(aEui64, 0, kJoinerOpFlagNotNotifyLeader)); // remove immediately",
          "",
          "[Removed Lines]",
          "288:     VerifyOrExit(StringLength(aPskd, Dtls::kPskMaxLength + 1) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
          "",
          "[Added Lines]",
          "289:     VerifyOrExit(MeshCoP::Joiner::IsPskdValid(aPskd), error = OT_ERROR_INVALID_ARGS);",
          "",
          "---------------"
        ],
        "src/core/meshcop/joiner.cpp||src/core/meshcop/joiner.cpp": [
          "File: src/core/meshcop/joiner.cpp -> src/core/meshcop/joiner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"common/instance.hpp\"",
          "42: #include \"common/locator-getters.hpp\"",
          "43: #include \"common/logging.hpp\"",
          "44: #include \"meshcop/meshcop.hpp\"",
          "45: #include \"radio/radio.hpp\"",
          "46: #include \"thread/thread_netif.hpp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include \"common/string.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     return;",
          "87: }",
          "89: otError Joiner::Start(const char *     aPskd,",
          "90:                       const char *     aProvisioningUrl,",
          "91:                       const char *     aVendorName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: bool Joiner::IsPskdValid(const char *aPskd)",
          "91: {",
          "92:     bool   valid      = false;",
          "93:     size_t pskdLength = StringLength(aPskd, kPskdMaxLength + 1);",
          "95:     OT_STATIC_ASSERT(static_cast<uint8_t>(kPskdMaxLength) <= static_cast<uint8_t>(Dtls::kPskMaxLength),",
          "96:                      \"The maximum length of DTLS PSK is smaller than joiner PSKd\");",
          "98:     VerifyOrExit(pskdLength >= kPskdMinLength && pskdLength <= kPskdMaxLength, OT_NOOP);",
          "100:     for (size_t i = 0; i < pskdLength; i++)",
          "101:     {",
          "102:         char c = aPskd[i];",
          "104:         VerifyOrExit(isdigit(c) || isupper(c), OT_NOOP);",
          "105:         VerifyOrExit(c != 'I' && c != 'O' && c != 'Q' && c != 'Z', OT_NOOP);",
          "106:     }",
          "108:     valid = true;",
          "110: exit:",
          "111:     return valid;",
          "112: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:     VerifyOrExit(mState == OT_JOINER_STATE_IDLE, error = OT_ERROR_BUSY);",
          "106:     randomAddress.GenerateRandom();",
          "107:     Get<Mac::Mac>().SetExtAddress(randomAddress);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     VerifyOrExit(IsPskdValid(aPskd), error = OT_ERROR_INVALID_ARGS);",
          "",
          "---------------"
        ],
        "src/core/meshcop/joiner.hpp||src/core/meshcop/joiner.hpp": [
          "File: src/core/meshcop/joiner.hpp -> src/core/meshcop/joiner.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     void GetJoinerId(Mac::ExtAddress &aJoinerId) const;",
          "112: private:",
          "113:     enum",
          "114:     {",
          "115:         kJoinerUdpPort         = OPENTHREAD_CONFIG_JOINER_UDP_PORT,",
          "116:         kConfigExtAddressDelay = 100,  ///< [milliseconds]",
          "117:         kReponseTimeout        = 4000, ///< Maximum wait time to receive response [milliseconds].",
          "118:     };",
          "120:     struct JoinerRouter",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:     static bool IsPskdValid(const char *aPskd);",
          "133:         kPskdMinLength         = 6,    ///< Minimum PSKd length.",
          "134:         kPskdMaxLength         = 32,   ///< Maximum PSKd Length.",
          "",
          "---------------"
        ],
        "tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py||tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py": [
          "File: tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py -> tests/scripts/thread-cert/Cert_8_1_01_Commissioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         self.nodes[COMMISSIONER].commissioner_start()",
          "63:         self.simulator.go(3)",
          "64:         self.nodes[COMMISSIONER].commissioner_add_joiner(",
          "67:         self.nodes[JOINER].interface_up()",
          "69:         self.simulator.go(10)",
          "70:         self.simulator.read_cert_messages_in_commissioning_log(",
          "71:             [COMMISSIONER, JOINER])",
          "",
          "[Removed Lines]",
          "65:             self.nodes[JOINER].get_eui64(), 'OPENTHREAD')",
          "68:         self.nodes[JOINER].joiner_start('OPENTHREAD')",
          "",
          "[Added Lines]",
          "65:             self.nodes[JOINER].get_eui64(), 'PSKD01')",
          "68:         self.nodes[JOINER].joiner_start('PSKD01')",
          "",
          "---------------"
        ],
        "tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py||tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py": [
          "File: tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py -> tests/scripts/thread-cert/Cert_8_1_02_Commissioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         self.nodes[COMMISSIONER].commissioner_start()",
          "58:         self.simulator.go(3)",
          "59:         self.nodes[COMMISSIONER].commissioner_add_joiner(",
          "62:         self.nodes[JOINER].interface_up()",
          "64:         self.simulator.go(10)",
          "65:         self.assertNotEqual(",
          "66:             self.nodes[JOINER].get_masterkey(),",
          "",
          "[Removed Lines]",
          "60:             self.nodes[JOINER].get_eui64(), 'OPENTHREAD')",
          "63:         self.nodes[JOINER].joiner_start('DAERHTNEPO')",
          "",
          "[Added Lines]",
          "60:             self.nodes[JOINER].get_eui64(), 'PSKD01')",
          "63:         self.nodes[JOINER].joiner_start('10DKSP')",
          "",
          "---------------"
        ],
        "tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py||tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py": [
          "File: tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py -> tests/scripts/thread-cert/Cert_8_2_01_JoinerRouter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         self.nodes[COMMISSIONER].commissioner_start()",
          "66:         self.simulator.go(5)",
          "67:         self.nodes[COMMISSIONER].commissioner_add_joiner(",
          "69:         self.nodes[COMMISSIONER].commissioner_add_joiner(",
          "71:         self.simulator.go(5)",
          "73:         self.nodes[COMMISSIONER].add_whitelist(",
          "",
          "[Removed Lines]",
          "68:             self.nodes[JOINER_ROUTER].get_eui64(), 'OPENTHREAD')",
          "70:             self.nodes[JOINER].get_eui64(), 'OPENTHREAD2')",
          "",
          "[Added Lines]",
          "68:             self.nodes[JOINER_ROUTER].get_eui64(), 'PSKD01')",
          "70:             self.nodes[JOINER].get_eui64(), 'PSKD02')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:             self.nodes[COMMISSIONER].get_addr64())",
          "78:         self.nodes[JOINER_ROUTER].interface_up()",
          "80:         self.simulator.go(10)",
          "81:         self.assertEqual(",
          "82:             self.nodes[JOINER_ROUTER].get_masterkey(),",
          "",
          "[Removed Lines]",
          "79:         self.nodes[JOINER_ROUTER].joiner_start('OPENTHREAD')",
          "",
          "[Added Lines]",
          "79:         self.nodes[JOINER_ROUTER].joiner_start('PSKD01')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         self.nodes[JOINER].add_whitelist(self.nodes[JOINER_ROUTER].get_addr64())",
          "97:         self.nodes[JOINER].interface_up()",
          "99:         self.simulator.go(10)",
          "100:         self.assertEqual(",
          "101:             self.nodes[JOINER].get_masterkey(),",
          "",
          "[Removed Lines]",
          "98:         self.nodes[JOINER].joiner_start('OPENTHREAD2')",
          "",
          "[Added Lines]",
          "98:         self.nodes[JOINER].joiner_start('PSKD02')",
          "",
          "---------------"
        ],
        "tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py||tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py": [
          "File: tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py -> tests/scripts/thread-cert/Cert_8_2_02_JoinerRouter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         self.nodes[COMMISSIONER].commissioner_start()",
          "66:         self.simulator.go(5)",
          "67:         self.nodes[COMMISSIONER].commissioner_add_joiner(",
          "69:         self.nodes[COMMISSIONER].commissioner_add_joiner(",
          "71:         self.simulator.go(5)",
          "73:         self.nodes[COMMISSIONER].add_whitelist(",
          "",
          "[Removed Lines]",
          "68:             self.nodes[JOINER_ROUTER].get_eui64(), 'OPENTHREAD')",
          "70:             self.nodes[JOINER].get_eui64(), 'OPENTHREAD2')",
          "",
          "[Added Lines]",
          "68:             self.nodes[JOINER_ROUTER].get_eui64(), 'PSKD01')",
          "70:             self.nodes[JOINER].get_eui64(), 'PSKD02')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:             self.nodes[COMMISSIONER].get_addr64())",
          "78:         self.nodes[JOINER_ROUTER].interface_up()",
          "80:         self.simulator.go(10)",
          "81:         self.assertEqual(",
          "82:             self.nodes[JOINER_ROUTER].get_masterkey(),",
          "",
          "[Removed Lines]",
          "79:         self.nodes[JOINER_ROUTER].joiner_start('OPENTHREAD')",
          "",
          "[Added Lines]",
          "79:         self.nodes[JOINER_ROUTER].joiner_start('PSKD01')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         self.nodes[JOINER].add_whitelist(self.nodes[JOINER_ROUTER].get_addr64())",
          "97:         self.nodes[JOINER].interface_up()",
          "99:         self.simulator.go(10)",
          "100:         self.assertNotEqual(",
          "101:             self.nodes[JOINER].get_masterkey(),",
          "",
          "[Removed Lines]",
          "98:         self.nodes[JOINER].joiner_start('2DAERHTNEPO')",
          "",
          "[Added Lines]",
          "98:         self.nodes[JOINER].joiner_start('20DKSP')",
          "",
          "---------------"
        ],
        "tools/harness-thci/OpenThread.py||tools/harness-thci/OpenThread.py": [
          "File: tools/harness-thci/OpenThread.py -> tools/harness-thci/OpenThread.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2035:     def diagnosticQuery(self, strDestinationAddr, listTLV_ids=[]):",
          "2036:         self.diagnosticGet(strDestinationAddr, listTLV_ids)",
          "2039:         # TODO: Support the whole Native Commissioner functionality",
          "2040:         # Currently it only aims to trigger a Discovery Request message to pass",
          "2041:         # Certification test 5.8.4",
          "",
          "[Removed Lines]",
          "2038:     def startNativeCommissioner(self, strPSKc='GRLpassWord'):",
          "",
          "[Added Lines]",
          "2038:     def startNativeCommissioner(self, strPSKc='GRLPASSPHRASE'):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2069:     def setJoinKey(self, strPSKc):",
          "2070:         pass",
          "2073:         \"\"\"scan Joiner",
          "2075:         Args:",
          "",
          "[Removed Lines]",
          "2072:     def scanJoiner(self, xEUI='*', strPSKd='threadjpaketest'):",
          "",
          "[Added Lines]",
          "2072:     def scanJoiner(self, xEUI='*', strPSKd='THREADJPAKETEST'):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2143:             ModuleHelper.writeintodebuglogger('allowcommission() error: ' +",
          "2144:                                               str(e))",
          "2147:         \"\"\"start joiner",
          "2149:         Args:",
          "",
          "[Removed Lines]",
          "2146:     def joinCommissioned(self, strPSKd='threadjpaketest', waitTime=20):",
          "",
          "[Added Lines]",
          "2146:     def joinCommissioned(self, strPSKd='THREADJPAKETEST', waitTime=20):",
          "",
          "---------------"
        ],
        "tools/harness-thci/OpenThread_WpanCtl.py||tools/harness-thci/OpenThread_WpanCtl.py": [
          "File: tools/harness-thci/OpenThread_WpanCtl.py -> tools/harness-thci/OpenThread_WpanCtl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2117:     def diagnosticReset(self, strDestinationAddr, listTLV_ids=[]):",
          "2118:         \"\"\"@todo : required if as reference device\"\"\"",
          "2121:         # TODO: Support the whole Native Commissioner functionality",
          "2122:         # Currently it only aims to trigger a Discovery Request message to pass",
          "2123:         # Certification test 5.8.4",
          "",
          "[Removed Lines]",
          "2120:     def startNativeCommissioner(self, strPSKc='GRLpassWord'):",
          "",
          "[Added Lines]",
          "2120:     def startNativeCommissioner(self, strPSKc='GRLPASSPHRASE'):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2152:     def setJoinKey(self, strPSKc):",
          "2153:         pass",
          "2156:         \"\"\"scan Joiner",
          "2158:         Args:",
          "",
          "[Removed Lines]",
          "2155:     def scanJoiner(self, xEUI='*', strPSKd='threadjpaketest'):",
          "",
          "[Added Lines]",
          "2155:     def scanJoiner(self, xEUI='*', strPSKd='THREADJPAKETEST'):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2225:             ModuleHelper.WriteIntoDebugLogger('allowcommission() error: ' +",
          "2226:                                               str(e))",
          "2229:         \"\"\"start joiner",
          "2231:         Args:",
          "",
          "[Removed Lines]",
          "2228:     def joinCommissioned(self, strPSKd='threadjpaketest', waitTime=20):",
          "",
          "[Added Lines]",
          "2228:     def joinCommissioned(self, strPSKd='THREADJPAKETEST', waitTime=20):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8c3161281f8e15873f8decabd8eac461717aefe",
      "candidate_info": {
        "commit_hash": "b8c3161281f8e15873f8decabd8eac461717aefe",
        "repo": "openthread/openthread",
        "commit_url": "https://github.com/openthread/openthread/commit/b8c3161281f8e15873f8decabd8eac461717aefe",
        "files": [
          "src/core/meshcop/commissioner.cpp"
        ],
        "message": "[commissioner] add network name length check in GeneratePskc() (#4404)",
        "before_after_code_files": [
          "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ],
          "candidate": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp": [
          "File: src/core/meshcop/commissioner.cpp -> src/core/meshcop/commissioner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:     uint16_t    saltLen = 0;",
          "1111:     VerifyOrExit((strlen(aPassPhrase) >= OT_COMMISSIONING_PASSPHRASE_MIN_SIZE) &&",
          "1113:                  error = OT_ERROR_INVALID_ARGS);",
          "1115:     memset(salt, 0, sizeof(salt));",
          "",
          "[Removed Lines]",
          "1112:                      (strlen(aPassPhrase) <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE),",
          "",
          "[Added Lines]",
          "1112:                      (strlen(aPassPhrase) <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE) &&",
          "1113:                      (strlen(aNetworkName) <= OT_NETWORK_NAME_MAX_SIZE),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a1339a8593d3a930455aa72182b744b3a11fd06",
      "candidate_info": {
        "commit_hash": "8a1339a8593d3a930455aa72182b744b3a11fd06",
        "repo": "openthread/openthread",
        "commit_url": "https://github.com/openthread/openthread/commit/8a1339a8593d3a930455aa72182b744b3a11fd06",
        "files": [
          "src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/joiner.cpp",
          "src/core/meshcop/joiner.hpp",
          "src/core/meshcop/meshcop.cpp",
          "src/core/meshcop/meshcop.hpp"
        ],
        "message": "[meshcop] move Joiner::IsPskdValid() to MeshCoP::IsPskdValid() (#5065)",
        "before_after_code_files": [
          "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/joiner.cpp||src/core/meshcop/joiner.cpp",
          "src/core/meshcop/joiner.hpp||src/core/meshcop/joiner.hpp",
          "src/core/meshcop/meshcop.cpp||src/core/meshcop/meshcop.cpp",
          "src/core/meshcop/meshcop.hpp||src/core/meshcop/meshcop.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ],
          "candidate": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp": [
          "File: src/core/meshcop/commissioner.cpp -> src/core/meshcop/commissioner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     VerifyOrExit(mState == OT_COMMISSIONER_STATE_ACTIVE, error = OT_ERROR_INVALID_STATE);",
          "285:     IgnoreError(RemoveJoiner(aEui64, 0, kJoinerOpFlagNotNotifyLeader)); // remove immediately",
          "",
          "[Removed Lines]",
          "283:     VerifyOrExit(MeshCoP::Joiner::IsPskdValid(aPskd), error = OT_ERROR_INVALID_ARGS);",
          "",
          "[Added Lines]",
          "283:     VerifyOrExit(IsPskdValid(aPskd), error = OT_ERROR_INVALID_ARGS);",
          "",
          "---------------"
        ],
        "src/core/meshcop/joiner.cpp||src/core/meshcop/joiner.cpp": [
          "File: src/core/meshcop/joiner.cpp -> src/core/meshcop/joiner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     return;",
          "88: }",
          "114: otError Joiner::Start(const char *     aPskd,",
          "115:                       const char *     aProvisioningUrl,",
          "116:                       const char *     aVendorName,",
          "",
          "[Removed Lines]",
          "90: bool Joiner::IsPskdValid(const char *aPskd)",
          "91: {",
          "92:     bool   valid      = false;",
          "93:     size_t pskdLength = StringLength(aPskd, kPskdMaxLength + 1);",
          "95:     OT_STATIC_ASSERT(static_cast<uint8_t>(kPskdMaxLength) <= static_cast<uint8_t>(Dtls::kPskMaxLength),",
          "96:                      \"The maximum length of DTLS PSK is smaller than joiner PSKd\");",
          "98:     VerifyOrExit(pskdLength >= kPskdMinLength && pskdLength <= kPskdMaxLength, OT_NOOP);",
          "100:     for (size_t i = 0; i < pskdLength; i++)",
          "101:     {",
          "102:         char c = aPskd[i];",
          "104:         VerifyOrExit(isdigit(c) || isupper(c), OT_NOOP);",
          "105:         VerifyOrExit(c != 'I' && c != 'O' && c != 'Q' && c != 'Z', OT_NOOP);",
          "106:     }",
          "108:     valid = true;",
          "110: exit:",
          "111:     return valid;",
          "112: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core/meshcop/joiner.hpp||src/core/meshcop/joiner.hpp": [
          "File: src/core/meshcop/joiner.hpp -> src/core/meshcop/joiner.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     void GetJoinerId(Mac::ExtAddress &aJoinerId) const;",
          "127: private:",
          "128:     enum",
          "129:     {",
          "130:         kJoinerUdpPort         = OPENTHREAD_CONFIG_JOINER_UDP_PORT,",
          "131:         kConfigExtAddressDelay = 100,  ///< [milliseconds]",
          "132:         kReponseTimeout        = 4000, ///< Maximum wait time to receive response [milliseconds].",
          "135:     };",
          "137:     struct JoinerRouter",
          "",
          "[Removed Lines]",
          "125:     static bool IsPskdValid(const char *aPskd);",
          "133:         kPskdMinLength         = 6,    ///< Minimum PSKd length.",
          "134:         kPskdMaxLength         = 32,   ///< Maximum PSKd Length.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core/meshcop/meshcop.cpp||src/core/meshcop/meshcop.cpp": [
          "File: src/core/meshcop/meshcop.cpp -> src/core/meshcop/meshcop.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: namespace ot {",
          "45: namespace MeshCoP {",
          "47: void SteeringData::Init(uint8_t aLength)",
          "48: {",
          "49:     OT_ASSERT(aLength <= kMaxLength);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: enum",
          "48: {",
          "49:     kPskdMinLength = 6,  ///< Minimum PSKd length.",
          "50:     kPskdMaxLength = 32, ///< Maximum PSKd Length.",
          "51: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: }",
          "182: #endif // OPENTHREAD_FTD",
          "184: } // namespace MeshCoP",
          "185: } // namespace ot",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: #if OPENTHREAD_CONFIG_JOINER_ENABLE || OPENTHREAD_CONFIG_COMMISSIONER_ENABLE",
          "191: bool IsPskdValid(const char *aPskd)",
          "192: {",
          "193:     bool   valid      = false;",
          "194:     size_t pskdLength = StringLength(aPskd, kPskdMaxLength + 1);",
          "196:     OT_STATIC_ASSERT(static_cast<uint8_t>(kPskdMaxLength) <= static_cast<uint8_t>(Dtls::kPskMaxLength),",
          "197:                      \"The maximum length of DTLS PSK is smaller than joiner PSKd\");",
          "199:     VerifyOrExit(pskdLength >= kPskdMinLength && pskdLength <= kPskdMaxLength, OT_NOOP);",
          "201:     for (size_t i = 0; i < pskdLength; i++)",
          "202:     {",
          "203:         char c = aPskd[i];",
          "205:         VerifyOrExit(isdigit(c) || isupper(c), OT_NOOP);",
          "206:         VerifyOrExit(c != 'I' && c != 'O' && c != 'Q' && c != 'Z', OT_NOOP);",
          "207:     }",
          "209:     valid = true;",
          "211: exit:",
          "212:     return valid;",
          "213: }",
          "214: #endif // OPENTHREAD_CONFIG_JOINER_ENABLE || OPENTHREAD_CONFIG_COMMISSIONER_ENABLE",
          "",
          "---------------"
        ],
        "src/core/meshcop/meshcop.hpp||src/core/meshcop/meshcop.hpp": [
          "File: src/core/meshcop/meshcop.hpp -> src/core/meshcop/meshcop.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: otError GetBorderAgentRloc(ThreadNetif &aNetIf, uint16_t &aRloc);",
          "258: } // namespace MeshCoP",
          "260: } // namespace ot",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #if OPENTHREAD_CONFIG_JOINER_ENABLE || OPENTHREAD_CONFIG_COMMISSIONER_ENABLE",
          "272: bool IsPskdValid(const char *aPskd);",
          "273: #endif // OPENTHREAD_CONFIG_JOINER_ENABLE || OPENTHREAD_CONFIG_COMMISSIONER_ENABLE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71a7e47c8174914842eb9a412523200e96cfed11",
      "candidate_info": {
        "commit_hash": "71a7e47c8174914842eb9a412523200e96cfed11",
        "repo": "openthread/openthread",
        "commit_url": "https://github.com/openthread/openthread/commit/71a7e47c8174914842eb9a412523200e96cfed11",
        "files": [
          "Android.mk",
          "BUILD.gn",
          "configure.ac",
          "etc/cmake/checks.cmake",
          "etc/cmake/openthread-config-generic.h.in",
          "src/cli/cli.cpp",
          "src/core/CMakeLists.txt",
          "src/core/Makefile.am",
          "src/core/common/string.cpp",
          "src/core/common/string.hpp",
          "src/core/diags/factory_diags.cpp",
          "src/core/mac/mac_types.cpp",
          "src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/meshcop_tlvs.hpp",
          "src/core/utils/missing_strnlen.c",
          "src/core/utils/wrap_string.h",
          "src/ncp/spinel.c",
          "src/ncp/spinel_decoder.cpp",
          "src/posix/platform/radio_spinel.cpp",
          "tests/unit/Makefile.am",
          "tests/unit/test_string.cpp",
          "tests/unit/test_strnlen.c"
        ],
        "message": "[utils] remove strnlen (#4483)",
        "before_after_code_files": [
          "Android.mk||Android.mk",
          "BUILD.gn||BUILD.gn",
          "configure.ac||configure.ac",
          "etc/cmake/checks.cmake||etc/cmake/checks.cmake",
          "etc/cmake/openthread-config-generic.h.in||etc/cmake/openthread-config-generic.h.in",
          "src/cli/cli.cpp||src/cli/cli.cpp",
          "src/core/Makefile.am||src/core/Makefile.am",
          "src/core/common/string.cpp||src/core/common/string.cpp",
          "src/core/common/string.hpp||src/core/common/string.hpp",
          "src/core/diags/factory_diags.cpp||src/core/diags/factory_diags.cpp",
          "src/core/mac/mac_types.cpp||src/core/mac/mac_types.cpp",
          "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/meshcop_tlvs.hpp||src/core/meshcop/meshcop_tlvs.hpp",
          "src/core/utils/missing_strnlen.c||src/core/utils/missing_strnlen.c",
          "src/core/utils/wrap_string.h||src/core/utils/wrap_string.h",
          "src/ncp/spinel.c||src/ncp/spinel.c",
          "src/ncp/spinel_decoder.cpp||src/ncp/spinel_decoder.cpp",
          "src/posix/platform/radio_spinel.cpp||src/posix/platform/radio_spinel.cpp",
          "tests/unit/Makefile.am||tests/unit/Makefile.am",
          "tests/unit/test_string.cpp||tests/unit/test_string.cpp",
          "tests/unit/test_strnlen.c||tests/unit/test_strnlen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ],
          "candidate": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Android.mk||Android.mk": [
          "File: Android.mk -> Android.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:     src/core/utils/child_supervision.cpp                    \\",
          "228:     src/core/utils/heap.cpp                                 \\",
          "229:     src/core/utils/jam_detector.cpp                         \\",
          "231:     src/core/utils/parse_cmdline.cpp                        \\",
          "232:     src/core/utils/slaac_address.cpp                        \\",
          "233:     src/ncp/hdlc.cpp                                        \\",
          "",
          "[Removed Lines]",
          "230:     src/core/utils/missing_strnlen.c                        \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "BUILD.gn||BUILD.gn": [
          "File: BUILD.gn -> BUILD.gn",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:     \"src/core/utils/child_supervision.cpp\",",
          "160:     \"src/core/utils/heap.cpp\",",
          "161:     \"src/core/utils/jam_detector.cpp\",",
          "163:     \"src/core/utils/parse_cmdline.cpp\",",
          "164:     \"src/core/utils/slaac_address.cpp\",",
          "165:     \"src/ncp/hdlc.cpp\",",
          "",
          "[Removed Lines]",
          "162:     \"src/core/utils/missing_strnlen.c\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: then",
          "171:     AC_MSG_RESULT([yes])",
          "172:     AC_NO_EXECUTABLES",
          "177: else",
          "178:     AC_MSG_RESULT([no])",
          "179: fi",
          "",
          "[Removed Lines]",
          "173:     # Here we guess conservative values for tests that require link checks",
          "174:     # to test for these features. This will prevent these checks from",
          "175:     # being performed later in the configuration process.",
          "176:     ac_cv_func_strnlen=${ac_cv_func_strnlen-no}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "946: AC_CHECK_HEADERS([stdint.h])",
          "947: AC_CHECK_HEADERS([string.h])",
          "954: #",
          "955: # Check for types and structures",
          "956: #",
          "",
          "[Removed Lines]",
          "949: #",
          "950: # Missing Functions",
          "951: #",
          "952: AC_CHECK_FUNC([strnlen], [AC_DEFINE([HAVE_STRNLEN], [1], [Define if strnlen exists.])])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "etc/cmake/checks.cmake||etc/cmake/checks.cmake": [
          "File: etc/cmake/checks.cmake -> etc/cmake/checks.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #  POSSIBILITY OF SUCH DAMAGE.",
          "27: #",
          "33: configure_file(${PROJECT_SOURCE_DIR}/etc/cmake/openthread-config-generic.h.in ${PROJECT_BINARY_DIR}/etc/cmake/openthread-config-generic.h)",
          "",
          "[Removed Lines]",
          "29: include(CheckFunctionExists)",
          "31: check_function_exists(\"strnlen\" HAVE_STRNLEN)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "etc/cmake/openthread-config-generic.h.in||etc/cmake/openthread-config-generic.h.in": [
          "File: etc/cmake/openthread-config-generic.h.in -> etc/cmake/openthread-config-generic.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #cmakedefine01 HAVE_STRNLEN",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/cli/cli.cpp||src/cli/cli.cpp": [
          "File: src/cli/cli.cpp -> src/cli/cli.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:     mServer = &aServer;",
          "3616:     VerifyOrExit(Utils::CmdLineParser::ParseCmd(aBuf, argc, argv, kMaxArgs) == OT_ERROR_NONE,",
          "3617:                  mServer->OutputFormat(\"Error: too many args (max %d)\\r\\n\", kMaxArgs));",
          "",
          "[Removed Lines]",
          "3614:     VerifyOrExit(aBuf != NULL && strnlen(aBuf, aBufLength + 1) <= aBufLength);",
          "",
          "[Added Lines]",
          "3614:     VerifyOrExit(aBuf != NULL && StringLength(aBuf, aBufLength + 1) <= aBufLength);",
          "",
          "---------------"
        ],
        "src/core/Makefile.am||src/core/Makefile.am": [
          "File: src/core/Makefile.am -> src/core/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     utils/child_supervision.cpp              \\",
          "236:     utils/heap.cpp                           \\",
          "237:     utils/jam_detector.cpp                   \\",
          "239:     utils/parse_cmdline.cpp                  \\",
          "240:     utils/slaac_address.cpp                  \\",
          "241:     $(NULL)",
          "",
          "[Removed Lines]",
          "238:     utils/missing_strnlen.c                  \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     radio/radio_callbacks.cpp                \\",
          "268:     radio/radio_platform.cpp                 \\",
          "269:     thread/link_quality.cpp                  \\",
          "271:     utils/parse_cmdline.cpp                  \\",
          "272:     $(NULL)",
          "",
          "[Removed Lines]",
          "270:     utils/missing_strnlen.c                  \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core/common/string.cpp||src/core/common/string.cpp": [
          "File: src/core/common/string.cpp -> src/core/common/string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: namespace ot {",
          "38: otError StringBase::Write(char *aBuffer, uint16_t aSize, uint16_t &aLength, const char *aFormat, va_list aArgs)",
          "39: {",
          "40:     otError error = OT_ERROR_NONE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: uint16_t StringLength(const char *aString, uint16_t aMaxLength)",
          "39: {",
          "40:     uint16_t ret;",
          "42:     for (ret = 0; (ret < aMaxLength) && (aString[ret] != 0); ret++)",
          "43:     {",
          "45:     }",
          "47:     return ret;",
          "48: }",
          "",
          "---------------"
        ],
        "src/core/common/string.hpp||src/core/common/string.hpp": [
          "File: src/core/common/string.hpp -> src/core/common/string.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: uint16_t StringLength(const char *aString, uint16_t aMaxLength);",
          "",
          "---------------"
        ],
        "src/core/diags/factory_diags.cpp||src/core/diags/factory_diags.cpp": [
          "File: src/core/diags/factory_diags.cpp -> src/core/diags/factory_diags.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:     char *  argVector[kMaxArgs];",
          "496:     uint8_t argCount = 0;",
          "500:     strcpy(buffer, aString);",
          "501:     error = ot::Utils::CmdLineParser::ParseCmd(buffer, argCount, argVector, kMaxArgs);",
          "",
          "[Removed Lines]",
          "498:     VerifyOrExit(strnlen(aString, kMaxCommandBuffer) < kMaxCommandBuffer, error = OT_ERROR_NO_BUFS);",
          "",
          "[Added Lines]",
          "498:     VerifyOrExit(StringLength(aString, kMaxCommandBuffer) < kMaxCommandBuffer, error = OT_ERROR_NO_BUFS);",
          "",
          "---------------"
        ],
        "src/core/mac/mac_types.cpp||src/core/mac/mac_types.cpp": [
          "File: src/core/mac/mac_types.cpp -> src/core/mac/mac_types.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: NetworkName::Data NetworkName::GetAsData(void) const",
          "125: {",
          "128:     return Data(m8, len);",
          "129: }",
          "",
          "[Removed Lines]",
          "126:     uint8_t len = static_cast<uint8_t>(strnlen(m8, kMaxSize + 1));",
          "",
          "[Added Lines]",
          "126:     uint8_t len = static_cast<uint8_t>(StringLength(m8, kMaxSize + 1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: otError NetworkName::Set(const Data &aNameData)",
          "132: {",
          "133:     otError error  = OT_ERROR_NONE;",
          "136:     VerifyOrExit(newLen <= kMaxSize, error = OT_ERROR_INVALID_ARGS);",
          "",
          "[Removed Lines]",
          "134:     uint8_t newLen = static_cast<uint8_t>(strnlen(aNameData.GetBuffer(), aNameData.GetLength()));",
          "",
          "[Added Lines]",
          "134:     uint8_t newLen = static_cast<uint8_t>(StringLength(aNameData.GetBuffer(), aNameData.GetLength()));",
          "",
          "---------------"
        ],
        "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp": [
          "File: src/core/meshcop/commissioner.cpp -> src/core/meshcop/commissioner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:     VerifyOrExit(mState == OT_COMMISSIONER_STATE_ACTIVE, error = OT_ERROR_INVALID_STATE);",
          "259:     RemoveJoiner(aEui64, 0); // remove immediately",
          "",
          "[Removed Lines]",
          "257:     VerifyOrExit(strnlen(aPskd, Dtls::kPskMaxLength + 1) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
          "",
          "[Added Lines]",
          "257:     VerifyOrExit(StringLength(aPskd, Dtls::kPskMaxLength + 1) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:         ExitNow();",
          "388:     }",
          "392:     VerifyOrExit(len < sizeof(mProvisioningUrl), error = OT_ERROR_INVALID_ARGS);",
          "",
          "[Removed Lines]",
          "390:     len = static_cast<uint8_t>(strnlen(aProvisioningUrl, sizeof(mProvisioningUrl)));",
          "",
          "[Added Lines]",
          "390:     len = static_cast<uint8_t>(StringLength(aProvisioningUrl, sizeof(mProvisioningUrl)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "954:     if (Tlv::GetTlv(aMessage, Tlv::kProvisioningUrl, sizeof(provisioningUrl), provisioningUrl) == OT_ERROR_NONE)",
          "955:     {",
          "958:         if ((provisioningUrl.GetProvisioningUrlLength() != len) ||",
          "959:             !memcmp(provisioningUrl.GetProvisioningUrl(), mProvisioningUrl, len))",
          "",
          "[Removed Lines]",
          "956:         uint8_t len = static_cast<uint8_t>(strnlen(mProvisioningUrl, sizeof(mProvisioningUrl)));",
          "",
          "[Added Lines]",
          "956:         uint8_t len = static_cast<uint8_t>(StringLength(mProvisioningUrl, sizeof(mProvisioningUrl)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1110:     uint16_t   passphraseLen;",
          "1111:     uint8_t    networkNameLen;",
          "1116:     VerifyOrExit((passphraseLen >= OT_COMMISSIONING_PASSPHRASE_MIN_SIZE) &&",
          "1117:                      (passphraseLen <= OT_COMMISSIONING_PASSPHRASE_MAX_SIZE) &&",
          "",
          "[Removed Lines]",
          "1113:     passphraseLen  = static_cast<uint16_t>(strnlen(aPassPhrase, OT_COMMISSIONING_PASSPHRASE_MAX_SIZE + 1));",
          "1114:     networkNameLen = static_cast<uint8_t>(strnlen(aNetworkName, OT_NETWORK_NAME_MAX_SIZE + 1));",
          "",
          "[Added Lines]",
          "1113:     passphraseLen  = static_cast<uint16_t>(StringLength(aPassPhrase, OT_COMMISSIONING_PASSPHRASE_MAX_SIZE + 1));",
          "1114:     networkNameLen = static_cast<uint8_t>(StringLength(aNetworkName, OT_NETWORK_NAME_MAX_SIZE + 1));",
          "",
          "---------------"
        ],
        "src/core/meshcop/meshcop_tlvs.hpp||src/core/meshcop/meshcop_tlvs.hpp": [
          "File: src/core/meshcop/meshcop_tlvs.hpp -> src/core/meshcop/meshcop_tlvs.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:     void SetCommissionerId(const char *aCommissionerId)",
          "852:     {",
          "854:         memcpy(mCommissionerId, aCommissionerId, length);",
          "855:         SetLength(static_cast<uint8_t>(length));",
          "856:     }",
          "",
          "[Removed Lines]",
          "853:         size_t length = strnlen(aCommissionerId, sizeof(mCommissionerId));",
          "",
          "[Added Lines]",
          "853:         uint16_t length = StringLength(aCommissionerId, sizeof(mCommissionerId));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1873:     void SetProvisioningUrl(const char *aProvisioningUrl)",
          "1874:     {",
          "1877:         SetLength(static_cast<uint8_t>(len));",
          "",
          "[Removed Lines]",
          "1875:         size_t len = aProvisioningUrl ? strnlen(aProvisioningUrl, kMaxLength) : 0;",
          "",
          "[Added Lines]",
          "1875:         uint16_t len = aProvisioningUrl ? StringLength(aProvisioningUrl, kMaxLength) : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1932:     void SetVendorName(const char *aVendorName)",
          "1933:     {",
          "1936:         SetLength(static_cast<uint8_t>(len));",
          "",
          "[Removed Lines]",
          "1934:         size_t len = (aVendorName == NULL) ? 0 : strnlen(aVendorName, sizeof(mVendorName));",
          "",
          "[Added Lines]",
          "1934:         uint16_t len = (aVendorName == NULL) ? 0 : StringLength(aVendorName, sizeof(mVendorName));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1996:     void SetVendorModel(const char *aVendorModel)",
          "1997:     {",
          "2000:         SetLength(static_cast<uint8_t>(len));",
          "",
          "[Removed Lines]",
          "1998:         size_t len = (aVendorModel == NULL) ? 0 : strnlen(aVendorModel, sizeof(mVendorModel));",
          "",
          "[Added Lines]",
          "1998:         uint16_t len = (aVendorModel == NULL) ? 0 : StringLength(aVendorModel, sizeof(mVendorModel));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2060:     void SetVendorSwVersion(const char *aVendorSwVersion)",
          "2061:     {",
          "2064:         SetLength(static_cast<uint8_t>(len));",
          "",
          "[Removed Lines]",
          "2062:         size_t len = (aVendorSwVersion == NULL) ? 0 : strnlen(aVendorSwVersion, sizeof(mVendorSwVersion));",
          "",
          "[Added Lines]",
          "2062:         uint16_t len = (aVendorSwVersion == NULL) ? 0 : StringLength(aVendorSwVersion, sizeof(mVendorSwVersion));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2124:     void SetVendorData(const char *aVendorData)",
          "2125:     {",
          "2128:         SetLength(static_cast<uint8_t>(len));",
          "",
          "[Removed Lines]",
          "2126:         size_t len = (aVendorData == NULL) ? 0 : strnlen(aVendorData, sizeof(mVendorData));",
          "",
          "[Added Lines]",
          "2126:         uint16_t len = (aVendorData == NULL) ? 0 : StringLength(aVendorData, sizeof(mVendorData));",
          "",
          "---------------"
        ],
        "src/core/utils/missing_strnlen.c||src/core/utils/missing_strnlen.c": [
          "File: src/core/utils/missing_strnlen.c -> src/core/utils/missing_strnlen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core/utils/wrap_string.h||src/core/utils/wrap_string.h": [
          "File: src/core/utils/wrap_string.h -> src/core/utils/wrap_string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #undef WRAP_EXTERN_C",
          "65: #endif // WRAP_STRING_H",
          "",
          "[Removed Lines]",
          "53: WRAP_EXTERN_C size_t missing_strnlen(const char *s, size_t maxlen);",
          "57: #ifndef HAVE_STRNLEN",
          "58: #define HAVE_STRNLEN 0",
          "59: #endif",
          "61: #if (!HAVE_STRNLEN)",
          "62: #define strnlen(S, N) missing_strnlen(S, N)",
          "63: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ncp/spinel.c||src/ncp/spinel.c": [
          "File: src/ncp/spinel.c -> src/ncp/spinel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: #define require(c, l) require_action(c, l, {})",
          "148: #endif",
          "150: typedef struct",
          "151: {",
          "152:     va_list obj;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #ifndef strnlen",
          "151: size_t strnlen(const char *s, size_t maxlen)",
          "152: {",
          "153:     size_t ret;",
          "155:     for (ret = 0; (ret < maxlen) && (s[ret] != 0); ret++)",
          "156:     {",
          "158:     }",
          "160:     return ret;",
          "161: }",
          "162: #endif",
          "",
          "---------------"
        ],
        "src/ncp/spinel_decoder.cpp||src/ncp/spinel_decoder.cpp": [
          "File: src/ncp/spinel_decoder.cpp -> src/ncp/spinel_decoder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"spinel_decoder.hpp\"",
          "37: #include \"common/code_utils.hpp\"",
          "40: namespace ot {",
          "41: namespace Ncp {",
          "",
          "[Removed Lines]",
          "38: #include \"utils/wrap_string.h\"",
          "",
          "[Added Lines]",
          "38: #include \"common/string.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     VerifyOrExit(mIndex + sizeof(uint8_t) <= mEnd, error = OT_ERROR_PARSE);",
          "303:     VerifyOrExit(len < static_cast<uint16_t>(mEnd - mIndex), error = OT_ERROR_PARSE);",
          "305:     aUtf8 = reinterpret_cast<const char *>(&mFrame[mIndex]);",
          "",
          "[Removed Lines]",
          "302:     len = strnlen(reinterpret_cast<const char *>(&mFrame[mIndex]), mEnd - mIndex);",
          "",
          "[Added Lines]",
          "302:     len = StringLength(reinterpret_cast<const char *>(&mFrame[mIndex]), mEnd - mIndex);",
          "",
          "---------------"
        ],
        "src/posix/platform/radio_spinel.cpp||src/posix/platform/radio_spinel.cpp": [
          "File: src/posix/platform/radio_spinel.cpp -> src/posix/platform/radio_spinel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:             size_t      len;",
          "533:             SuccessOrExit(error = decoder.ReadUtf8(name));",
          "535:             memcpy(opDataset.mNetworkName.m8, name, len);",
          "536:             opDataset.mNetworkName.m8[len]              = '\\0';",
          "537:             opDataset.mComponents.mIsNetworkNamePresent = true;",
          "",
          "[Removed Lines]",
          "534:             len = strnlen(name, OT_NETWORK_NAME_MAX_SIZE);",
          "",
          "[Added Lines]",
          "534:             len = StringLength(name, OT_NETWORK_NAME_MAX_SIZE);",
          "",
          "---------------"
        ],
        "tests/unit/Makefile.am||tests/unit/Makefile.am": [
          "File: tests/unit/Makefile.am -> tests/unit/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     test-priority-queue                                               \\",
          "123:     test-pskc                                                         \\",
          "124:     test-string                                                       \\",
          "126:     test-timer                                                        \\",
          "127:     $(NULL)",
          "",
          "[Removed Lines]",
          "125:     test-strnlen                                                      \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: test_string_LDADD            = $(COMMON_LDADD)",
          "222: test_string_SOURCES          = $(COMMON_SOURCES) test_string.cpp",
          "227: test_spinel_decoder_LDADD    = $(COMMON_LDADD)",
          "228: test_spinel_decoder_SOURCES  = $(COMMON_SOURCES) test_spinel_decoder.cpp",
          "",
          "[Removed Lines]",
          "224: test_strnlen_LDADD           = $(COMMON_LDADD)",
          "225: test_strnlen_SOURCES         = test_strnlen.c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:     $(test_spinel_decoder_SOURCES)                                    \\",
          "260:     $(test_spinel_encoder_SOURCES)                                    \\",
          "261:     $(test_string_SOURCES)                                            \\",
          "263:     $(test_timer_SOURCES)                                             \\",
          "264:     $(test_toolchain_SOURCES)                                         \\",
          "265:     $(NULL)",
          "",
          "[Removed Lines]",
          "262:     $(test_strnlen_SOURCES)                                           \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/unit/test_string.cpp||tests/unit/test_string.cpp": [
          "File: tests/unit/test_string.cpp -> tests/unit/test_string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     printf(\" -- PASS\\n\");",
          "118: }",
          "120: } // namespace ot",
          "122: int main(void)",
          "123: {",
          "124:     ot::TestString();",
          "125:     printf(\"\\nAll tests passed.\\n\");",
          "126:     return 0;",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: void TestStringLength(void)",
          "121: {",
          "122:     char string_a[5] = \"\\0foo\";",
          "123:     char string_b[8] = \"foo\\0bar\";",
          "125:     printf(\"\\nTest 4: String::StringLength() method\\n\");",
          "127:     VerifyOrQuit(StringLength(string_a, 0) == 0, \"StringLength() 0len 0 fails\");",
          "128:     VerifyOrQuit(StringLength(string_a, 1) == 0, \"StringLength() 0len 1 fails\");",
          "129:     VerifyOrQuit(StringLength(string_a, 2) == 0, \"StringLength() 0len 2 fails\");",
          "131:     VerifyOrQuit(StringLength(string_b, 0) == 0, \"StringLength() 3len 0 fails\");",
          "132:     VerifyOrQuit(StringLength(string_b, 1) == 1, \"StringLength() 3len 1 fails\");",
          "133:     VerifyOrQuit(StringLength(string_b, 2) == 2, \"StringLength() 3len 2 fails\");",
          "134:     VerifyOrQuit(StringLength(string_b, 3) == 3, \"StringLength() 3len 3 fails\");",
          "135:     VerifyOrQuit(StringLength(string_b, 4) == 3, \"StringLength() 3len 4 fails\");",
          "136:     VerifyOrQuit(StringLength(string_b, 5) == 3, \"StringLength() 3len 5 fails\");",
          "137:     VerifyOrQuit(StringLength(string_b, 6) == 3, \"StringLength() 3len 6 fails\");",
          "139:     printf(\" -- PASS\\n\");",
          "140: }",
          "147:     ot::TestStringLength();",
          "",
          "---------------"
        ],
        "tests/unit/test_strnlen.c||tests/unit/test_strnlen.c": [
          "File: tests/unit/test_strnlen.c -> tests/unit/test_strnlen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1555b2191017b1a4d8c331ad7614387e4ac0b0f1",
      "candidate_info": {
        "commit_hash": "1555b2191017b1a4d8c331ad7614387e4ac0b0f1",
        "repo": "openthread/openthread",
        "commit_url": "https://github.com/openthread/openthread/commit/1555b2191017b1a4d8c331ad7614387e4ac0b0f1",
        "files": [
          "include/openthread/commissioner.h",
          "include/openthread/dataset.h",
          "include/openthread/joiner.h",
          "include/openthread/thread_ftd.h",
          "src/cli/cli.cpp",
          "src/cli/cli.hpp",
          "src/cli/cli_dataset.cpp",
          "src/cli/cli_dataset.hpp",
          "src/core/api/commissioner_api.cpp",
          "src/core/api/joiner_api.cpp",
          "src/core/api/thread_ftd_api.cpp",
          "src/core/coap/coap_secure.hpp",
          "src/core/common/random.hpp",
          "src/core/meshcop/border_agent.cpp",
          "src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/commissioner.hpp",
          "src/core/meshcop/dataset.cpp",
          "src/core/meshcop/dataset_manager.cpp",
          "src/core/meshcop/dataset_manager_ftd.cpp",
          "src/core/meshcop/dtls.hpp",
          "src/core/meshcop/joiner.cpp",
          "src/core/meshcop/joiner.hpp",
          "src/core/meshcop/joiner_router.cpp",
          "src/core/meshcop/meshcop_tlvs.cpp",
          "src/core/meshcop/meshcop_tlvs.hpp",
          "src/core/thread/key_manager.cpp",
          "src/core/thread/key_manager.hpp",
          "src/ncp/ncp_base_ftd.cpp",
          "src/ncp/ncp_base_mtd.cpp",
          "tests/unit/test_pskc.cpp"
        ],
        "message": "[key-manager] add Pskc class (#4174)\n\nThis commit adds a `Pskc` as a wrapper over `otPskc` and also\nrenames all the uses of `PSK` into `Psk` to follow our variable\nand type naming convention which treats an acronym as a whole\nword.",
        "before_after_code_files": [
          "include/openthread/commissioner.h||include/openthread/commissioner.h",
          "include/openthread/dataset.h||include/openthread/dataset.h",
          "include/openthread/joiner.h||include/openthread/joiner.h",
          "include/openthread/thread_ftd.h||include/openthread/thread_ftd.h",
          "src/cli/cli.cpp||src/cli/cli.cpp",
          "src/cli/cli.hpp||src/cli/cli.hpp",
          "src/cli/cli_dataset.cpp||src/cli/cli_dataset.cpp",
          "src/cli/cli_dataset.hpp||src/cli/cli_dataset.hpp",
          "src/core/api/commissioner_api.cpp||src/core/api/commissioner_api.cpp",
          "src/core/api/joiner_api.cpp||src/core/api/joiner_api.cpp",
          "src/core/api/thread_ftd_api.cpp||src/core/api/thread_ftd_api.cpp",
          "src/core/coap/coap_secure.hpp||src/core/coap/coap_secure.hpp",
          "src/core/common/random.hpp||src/core/common/random.hpp",
          "src/core/meshcop/border_agent.cpp||src/core/meshcop/border_agent.cpp",
          "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp",
          "src/core/meshcop/commissioner.hpp||src/core/meshcop/commissioner.hpp",
          "src/core/meshcop/dataset.cpp||src/core/meshcop/dataset.cpp",
          "src/core/meshcop/dataset_manager.cpp||src/core/meshcop/dataset_manager.cpp",
          "src/core/meshcop/dataset_manager_ftd.cpp||src/core/meshcop/dataset_manager_ftd.cpp",
          "src/core/meshcop/dtls.hpp||src/core/meshcop/dtls.hpp",
          "src/core/meshcop/joiner.cpp||src/core/meshcop/joiner.cpp",
          "src/core/meshcop/joiner.hpp||src/core/meshcop/joiner.hpp",
          "src/core/meshcop/joiner_router.cpp||src/core/meshcop/joiner_router.cpp",
          "src/core/meshcop/meshcop_tlvs.cpp||src/core/meshcop/meshcop_tlvs.cpp",
          "src/core/meshcop/meshcop_tlvs.hpp||src/core/meshcop/meshcop_tlvs.hpp",
          "src/core/thread/key_manager.cpp||src/core/thread/key_manager.cpp",
          "src/core/thread/key_manager.hpp||src/core/thread/key_manager.hpp",
          "src/ncp/ncp_base_ftd.cpp||src/ncp/ncp_base_ftd.cpp",
          "src/ncp/ncp_base_mtd.cpp||src/ncp/ncp_base_mtd.cpp",
          "tests/unit/test_pskc.cpp||tests/unit/test_pskc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ],
          "candidate": [
            "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/openthread/commissioner.h||include/openthread/commissioner.h": [
          "File: include/openthread/commissioner.h -> include/openthread/commissioner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "195: otError otCommissionerAddJoiner(otInstance *        aInstance,",
          "196:                                 const otExtAddress *aEui64,",
          "198:                                 uint32_t            aTimeout);",
          "",
          "[Removed Lines]",
          "197:                                 const char *        aPSKd,",
          "",
          "[Added Lines]",
          "197:                                 const char *        aPskd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:                                    const char *           aPassPhrase,",
          "423:                                    const char *           aNetworkName,",
          "424:                                    const otExtendedPanId *aExtPanId,",
          "",
          "[Removed Lines]",
          "421: otError otCommissionerGeneratePSKc(otInstance *           aInstance,",
          "425:                                    uint8_t *              aPSKc);",
          "",
          "[Added Lines]",
          "421: otError otCommissionerGeneratePskc(otInstance *           aInstance,",
          "425:                                    uint8_t *              aPskc);",
          "",
          "---------------"
        ],
        "include/openthread/dataset.h||include/openthread/dataset.h": [
          "File: include/openthread/dataset.h -> include/openthread/dataset.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: OT_TOOL_PACKED_BEGIN",
          "128: {",
          "129:     uint8_t m8[OT_PSKC_MAX_SIZE]; ///< Byte values",
          "130: } OT_TOOL_PACKED_END;",
          "",
          "[Removed Lines]",
          "127: struct otPSKc",
          "",
          "[Added Lines]",
          "127: struct otPskc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "136: typedef struct otPSKc otPSKc;",
          "",
          "[Added Lines]",
          "136: typedef struct otPskc otPskc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:     bool mIsDelayPresent : 1;            ///< TRUE if Delay Timer is present, FALSE otherwise.",
          "207:     bool mIsPanIdPresent : 1;            ///< TRUE if PAN ID is present, FALSE otherwise.",
          "208:     bool mIsChannelPresent : 1;          ///< TRUE if Channel is present, FALSE otherwise.",
          "210:     bool mIsSecurityPolicyPresent : 1;   ///< TRUE if Security Policy is present, FALSE otherwise.",
          "211:     bool mIsChannelMaskPresent : 1;      ///< TRUE if Channel Mask is present, FALSE otherwise.",
          "212: } otOperationalDatasetComponents;",
          "",
          "[Removed Lines]",
          "209:     bool mIsPSKcPresent : 1;             ///< TRUE if PSKc is present, FALSE otherwise.",
          "",
          "[Added Lines]",
          "209:     bool mIsPskcPresent : 1;             ///< TRUE if PSKc is present, FALSE otherwise.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:     uint32_t                       mDelay;            ///< Delay Timer",
          "229:     otPanId                        mPanId;            ///< PAN ID",
          "230:     uint16_t                       mChannel;          ///< Channel",
          "232:     otSecurityPolicy               mSecurityPolicy;   ///< Security Policy",
          "233:     otChannelMask                  mChannelMask;      ///< Channel Mask",
          "234:     otOperationalDatasetComponents mComponents;       ///< Specifies which components are set in the Dataset.",
          "",
          "[Removed Lines]",
          "231:     otPSKc                         mPSKc;             ///< PSKc",
          "",
          "[Added Lines]",
          "231:     otPskc                         mPskc;             ///< PSKc",
          "",
          "---------------"
        ],
        "include/openthread/joiner.h||include/openthread/joiner.h": [
          "File: include/openthread/joiner.h -> include/openthread/joiner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: otError otJoinerStart(otInstance *     aInstance,",
          "103:                       const char *     aProvisioningUrl,",
          "104:                       const char *     aVendorName,",
          "105:                       const char *     aVendorModel,",
          "",
          "[Removed Lines]",
          "102:                       const char *     aPSKd,",
          "",
          "[Added Lines]",
          "102:                       const char *     aPskd,",
          "",
          "---------------"
        ],
        "include/openthread/thread_ftd.h||include/openthread/thread_ftd.h": [
          "File: include/openthread/thread_ftd.h -> include/openthread/thread_ftd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "517: otError otThreadGetEidCacheEntry(otInstance *aInstance, uint8_t aIndex, otEidCacheEntry *aEntry);",
          "",
          "[Removed Lines]",
          "529: const otPSKc *otThreadGetPSKc(otInstance *aInstance);",
          "547: otError otThreadSetPSKc(otInstance *aInstance, const otPSKc *aPSKc);",
          "",
          "[Added Lines]",
          "529: const otPskc *otThreadGetPskc(otInstance *aInstance);",
          "547: otError otThreadSetPskc(otInstance *aInstance, const otPskc *aPskc);",
          "",
          "---------------"
        ],
        "src/cli/cli.cpp||src/cli/cli.cpp": [
          "File: src/cli/cli.cpp -> src/cli/cli.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     {\"prefix\", &Interpreter::ProcessPrefix},",
          "192: #endif",
          "193: #if OPENTHREAD_FTD",
          "195:     {\"releaserouterid\", &Interpreter::ProcessReleaseRouterId},",
          "196: #endif",
          "197:     {\"reset\", &Interpreter::ProcessReset},",
          "",
          "[Removed Lines]",
          "194:     {\"pskc\", &Interpreter::ProcessPSKc},",
          "",
          "[Added Lines]",
          "194:     {\"pskc\", &Interpreter::ProcessPskc},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1507: #endif // OPENTHREAD_FTD",
          "1509: #if OPENTHREAD_FTD",
          "1511: {",
          "1512:     otError error = OT_ERROR_NONE;",
          "1514:     if (argc == 0)",
          "1515:     {",
          "1518:         for (int i = 0; i < OT_PSKC_MAX_SIZE; i++)",
          "1519:         {",
          "",
          "[Removed Lines]",
          "1510: void Interpreter::ProcessPSKc(int argc, char *argv[])",
          "1516:         const otPSKc *pskc = otThreadGetPSKc(mInstance);",
          "",
          "[Added Lines]",
          "1510: void Interpreter::ProcessPskc(int argc, char *argv[])",
          "1516:         const otPskc *pskc = otThreadGetPskc(mInstance);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1524:     }",
          "1525:     else",
          "1526:     {",
          "1529:         VerifyOrExit(Hex2Bin(argv[0], pskc.m8, sizeof(pskc)) == OT_PSKC_MAX_SIZE, error = OT_ERROR_PARSE);",
          "1531:     }",
          "1533: exit:",
          "",
          "[Removed Lines]",
          "1527:         otPSKc pskc;",
          "1530:         SuccessOrExit(error = otThreadSetPSKc(mInstance, &pskc));",
          "",
          "[Added Lines]",
          "1527:         otPskc pskc;",
          "1530:         SuccessOrExit(error = otThreadSetPskc(mInstance, &pskc));",
          "",
          "---------------"
        ],
        "src/cli/cli.hpp||src/cli/cli.hpp": [
          "File: src/cli/cli.hpp -> src/cli/cli.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: #endif",
          "299:     void ProcessPromiscuous(int argc, char *argv[]);",
          "300: #if OPENTHREAD_FTD",
          "302:     void ProcessReleaseRouterId(int argc, char *argv[]);",
          "303: #endif",
          "304:     void ProcessReset(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "301:     void ProcessPSKc(int argc, char *argv[]);",
          "",
          "[Added Lines]",
          "301:     void ProcessPskc(int argc, char *argv[]);",
          "",
          "---------------"
        ],
        "src/cli/cli_dataset.cpp||src/cli/cli_dataset.cpp": [
          "File: src/cli/cli_dataset.cpp -> src/cli/cli_dataset.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     {\"panid\", &Dataset::ProcessPanId},",
          "66:     {\"pending\", &Dataset::ProcessPending},",
          "67:     {\"pendingtimestamp\", &Dataset::ProcessPendingTimestamp},",
          "69:     {\"securitypolicy\", &Dataset::ProcessSecurityPolicy},",
          "70: };",
          "",
          "[Removed Lines]",
          "68:     {\"pskc\", &Dataset::ProcessPSKc},",
          "",
          "[Added Lines]",
          "68:     {\"pskc\", &Dataset::ProcessPskc},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:         mInterpreter.mServer->OutputFormat(\"PAN ID: 0x%04x\\r\\n\", aDataset.mPanId);",
          "142:     }",
          "145:     {",
          "146:         mInterpreter.mServer->OutputFormat(\"PSKc: \");",
          "148:         mInterpreter.mServer->OutputFormat(\"\\r\\n\");",
          "149:     }",
          "",
          "[Removed Lines]",
          "144:     if (aDataset.mComponents.mIsPSKcPresent)",
          "147:         OutputBytes(aDataset.mPSKc.m8, sizeof(aDataset.mPSKc.m8));",
          "",
          "[Added Lines]",
          "144:     if (aDataset.mComponents.mIsPskcPresent)",
          "147:         OutputBytes(aDataset.mPskc.m8, sizeof(aDataset.mPskc.m8));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "675:     return error;",
          "676: }",
          "679: {",
          "680:     otError  error = OT_ERROR_NONE;",
          "681:     uint16_t length;",
          "",
          "[Removed Lines]",
          "678: otError Dataset::ProcessPSKc(int argc, char *argv[])",
          "",
          "[Added Lines]",
          "678: otError Dataset::ProcessPskc(int argc, char *argv[])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "683:     VerifyOrExit(argc > 0, error = OT_ERROR_INVALID_ARGS);",
          "684:     length = static_cast<uint16_t>((strlen(argv[0]) + 1) / 2);",
          "685:     VerifyOrExit(length <= OT_PSKC_MAX_SIZE, error = OT_ERROR_NO_BUFS);",
          "687:                  error = OT_ERROR_PARSE);",
          "691: exit:",
          "692:     return error;",
          "",
          "[Removed Lines]",
          "686:     VerifyOrExit(Interpreter::Hex2Bin(argv[0], sDataset.mPSKc.m8 + OT_PSKC_MAX_SIZE - length, length) == length,",
          "689:     sDataset.mComponents.mIsPSKcPresent = true;",
          "",
          "[Added Lines]",
          "686:     VerifyOrExit(Interpreter::Hex2Bin(argv[0], sDataset.mPskc.m8 + OT_PSKC_MAX_SIZE - length, length) == length,",
          "689:     sDataset.mComponents.mIsPskcPresent = true;",
          "",
          "---------------"
        ],
        "src/cli/cli_dataset.hpp||src/cli/cli_dataset.hpp": [
          "File: src/cli/cli_dataset.hpp -> src/cli/cli_dataset.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     otError ProcessPendingTimestamp(int argc, char *argv[]);",
          "95:     otError ProcessMgmtSetCommand(int argc, char *argv[]);",
          "96:     otError ProcessMgmtGetCommand(int argc, char *argv[]);",
          "98:     otError ProcessSecurityPolicy(int argc, char *argv[]);",
          "100:     Interpreter &mInterpreter;",
          "",
          "[Removed Lines]",
          "97:     otError ProcessPSKc(int argc, char *argv[]);",
          "",
          "[Added Lines]",
          "97:     otError ProcessPskc(int argc, char *argv[]);",
          "",
          "---------------"
        ],
        "src/core/api/commissioner_api.cpp||src/core/api/commissioner_api.cpp": [
          "File: src/core/api/commissioner_api.cpp -> src/core/api/commissioner_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     return error;",
          "74: }",
          "77: {",
          "78:     Instance &instance = *static_cast<Instance *>(aInstance);",
          "81:                                                            aTimeout);",
          "82: }",
          "",
          "[Removed Lines]",
          "76: otError otCommissionerAddJoiner(otInstance *aInstance, const otExtAddress *aEui64, const char *aPSKd, uint32_t aTimeout)",
          "80:     return instance.Get<MeshCoP::Commissioner>().AddJoiner(static_cast<const Mac::ExtAddress *>(aEui64), aPSKd,",
          "",
          "[Added Lines]",
          "76: otError otCommissionerAddJoiner(otInstance *aInstance, const otExtAddress *aEui64, const char *aPskd, uint32_t aTimeout)",
          "80:     return instance.Get<MeshCoP::Commissioner>().AddJoiner(static_cast<const Mac::ExtAddress *>(aEui64), aPskd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     return instance.Get<MeshCoP::Commissioner>().GetState();",
          "189: }",
          "192:                                    const char *           aPassPhrase,",
          "193:                                    const char *           aNetworkName,",
          "194:                                    const otExtendedPanId *aExtPanId,",
          "196: {",
          "197:     OT_UNUSED_VARIABLE(aInstance);",
          "201: }",
          "202: #endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE",
          "",
          "[Removed Lines]",
          "191: otError otCommissionerGeneratePSKc(otInstance *           aInstance,",
          "195:                                    uint8_t *              aPSKc)",
          "199:     return MeshCoP::Commissioner::GeneratePSKc(aPassPhrase, aNetworkName,",
          "",
          "[Added Lines]",
          "191: otError otCommissionerGeneratePskc(otInstance *           aInstance,",
          "195:                                    uint8_t *              aPskc)",
          "199:     return MeshCoP::Commissioner::GeneratePskc(aPassPhrase, aNetworkName,",
          "",
          "---------------"
        ],
        "src/core/api/joiner_api.cpp||src/core/api/joiner_api.cpp": [
          "File: src/core/api/joiner_api.cpp -> src/core/api/joiner_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #if OPENTHREAD_CONFIG_JOINER_ENABLE",
          "44: otError otJoinerStart(otInstance *     aInstance,",
          "46:                       const char *     aProvisioningUrl,",
          "47:                       const char *     aVendorName,",
          "48:                       const char *     aVendorModel,",
          "",
          "[Removed Lines]",
          "45:                       const char *     aPSKd,",
          "",
          "[Added Lines]",
          "45:                       const char *     aPskd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: {",
          "54:     Instance &instance = *static_cast<Instance *>(aInstance);",
          "57:                                                  aVendorData, aCallback, aContext);",
          "58: }",
          "",
          "[Removed Lines]",
          "56:     return instance.Get<MeshCoP::Joiner>().Start(aPSKd, aProvisioningUrl, aVendorName, aVendorModel, aVendorSwVersion,",
          "",
          "[Added Lines]",
          "56:     return instance.Get<MeshCoP::Joiner>().Start(aPskd, aProvisioningUrl, aVendorName, aVendorModel, aVendorSwVersion,",
          "",
          "---------------"
        ],
        "src/core/api/thread_ftd_api.cpp||src/core/api/thread_ftd_api.cpp": [
          "File: src/core/api/thread_ftd_api.cpp -> src/core/api/thread_ftd_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "317: }",
          "318: #endif",
          "321: {",
          "322:     Instance &instance = *static_cast<Instance *>(aInstance);",
          "325: }",
          "328: {",
          "329:     otError   error    = OT_ERROR_NONE;",
          "330:     Instance &instance = *static_cast<Instance *>(aInstance);",
          "332:     VerifyOrExit(instance.Get<Mle::MleRouter>().GetRole() == OT_DEVICE_ROLE_DISABLED, error = OT_ERROR_INVALID_STATE);",
          "335:     instance.Get<MeshCoP::ActiveDataset>().Clear();",
          "336:     instance.Get<MeshCoP::PendingDataset>().Clear();",
          "",
          "[Removed Lines]",
          "320: const otPSKc *otThreadGetPSKc(otInstance *aInstance)",
          "324:     return &instance.Get<KeyManager>().GetPSKc();",
          "327: otError otThreadSetPSKc(otInstance *aInstance, const otPSKc *aPSKc)",
          "334:     instance.Get<KeyManager>().SetPSKc(*aPSKc);",
          "",
          "[Added Lines]",
          "320: const otPskc *otThreadGetPskc(otInstance *aInstance)",
          "324:     return &instance.Get<KeyManager>().GetPskc();",
          "327: otError otThreadSetPskc(otInstance *aInstance, const otPskc *aPskc)",
          "334:     instance.Get<KeyManager>().SetPskc(*static_cast<const Pskc *>(aPskc));",
          "",
          "---------------"
        ],
        "src/core/coap/coap_secure.hpp||src/core/coap/coap_secure.hpp": [
          "File: src/core/coap/coap_secure.hpp -> src/core/coap/coap_secure.hpp"
        ],
        "src/core/common/random.hpp||src/core/common/random.hpp": [
          "File: src/core/common/random.hpp -> src/core/common/random.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: } // namespace NonCrypto",
          "165: namespace Crypto {",
          "",
          "[Removed Lines]",
          "163: #ifndef OPENTHREAD_RADIO",
          "",
          "[Added Lines]",
          "163: #if !OPENTHREAD_RADIO",
          "",
          "---------------"
        ],
        "src/core/meshcop/border_agent.cpp||src/core/meshcop/border_agent.cpp": [
          "File: src/core/meshcop/border_agent.cpp -> src/core/meshcop/border_agent.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:     VerifyOrExit(mState == OT_BORDER_AGENT_STATE_STOPPED, error = OT_ERROR_ALREADY);",
          "654:     SuccessOrExit(error = coaps.Start(kBorderAgentUdpPort));",
          "656:     coaps.SetConnectedCallback(HandleConnected, this);",
          "658:     coaps.AddResource(mActiveGet);",
          "",
          "[Removed Lines]",
          "655:     SuccessOrExit(error = coaps.SetPsk(Get<KeyManager>().GetPSKc().m8, OT_PSKC_MAX_SIZE));",
          "",
          "[Added Lines]",
          "655:     SuccessOrExit(error = coaps.SetPsk(Get<KeyManager>().GetPskc().m8, OT_PSKC_MAX_SIZE));",
          "",
          "---------------"
        ],
        "src/core/meshcop/commissioner.cpp||src/core/meshcop/commissioner.cpp": [
          "File: src/core/meshcop/commissioner.cpp -> src/core/meshcop/commissioner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:     SendCommissionerSet();",
          "245: }",
          "248: {",
          "249:     otError error = OT_ERROR_NO_BUFS;",
          "251:     VerifyOrExit(mState == OT_COMMISSIONER_STATE_ACTIVE, error = OT_ERROR_INVALID_STATE);",
          "254:     RemoveJoiner(aEui64, 0); // remove immediately",
          "256:     for (size_t i = 0; i < OT_ARRAY_LENGTH(mJoiners); i++)",
          "",
          "[Removed Lines]",
          "247: otError Commissioner::AddJoiner(const Mac::ExtAddress *aEui64, const char *aPSKd, uint32_t aTimeout)",
          "253:     VerifyOrExit(strlen(aPSKd) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
          "",
          "[Added Lines]",
          "247: otError Commissioner::AddJoiner(const Mac::ExtAddress *aEui64, const char *aPskd, uint32_t aTimeout)",
          "253:     VerifyOrExit(strlen(aPskd) <= Dtls::kPskMaxLength, error = OT_ERROR_INVALID_ARGS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:             mJoiners[i].mAny = true;",
          "271:         }",
          "274:         mJoiners[i].mValid          = true;",
          "275:         mJoiners[i].mExpirationTime = TimerMilli::GetNow() + TimerMilli::SecToMsec(aTimeout);",
          "",
          "[Removed Lines]",
          "273:         (void)strlcpy(mJoiners[i].mPsk, aPSKd, sizeof(mJoiners[i].mPsk));",
          "",
          "[Added Lines]",
          "273:         (void)strlcpy(mJoiners[i].mPsk, aPskd, sizeof(mJoiners[i].mPsk));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:     {",
          "287:         if (aEui64)",
          "288:         {",
          "290:         }",
          "291:         else",
          "292:         {",
          "294:         }",
          "295:     }",
          "",
          "[Removed Lines]",
          "289:             otLogInfoMeshCoP(\"Added Joiner (%s, %s)\", aEui64->ToString().AsCString(), aPSKd);",
          "293:             otLogInfoMeshCoP(\"Added Joiner (*, %s)\", aPSKd);",
          "",
          "[Added Lines]",
          "289:             otLogInfoMeshCoP(\"Added Joiner (%s, %s)\", aEui64->ToString().AsCString(), aPskd);",
          "293:             otLogInfoMeshCoP(\"Added Joiner (*, %s)\", aPskd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1118:     return error;",
          "1119: }",
          "1122:                                    const char *              aNetworkName,",
          "1123:                                    const Mac::ExtendedPanId &aExtPanId,",
          "1125: {",
          "1126:     otError     error      = OT_ERROR_NONE;",
          "1127:     const char *saltPrefix = \"Thread\";",
          "",
          "[Removed Lines]",
          "1121: otError Commissioner::GeneratePSKc(const char *              aPassPhrase,",
          "1124:                                    uint8_t *                 aPSKc)",
          "",
          "[Added Lines]",
          "1121: otError Commissioner::GeneratePskc(const char *              aPassPhrase,",
          "1124:                                    uint8_t *                 aPskc)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1143:     saltLen += static_cast<uint16_t>(strlen(aNetworkName));",
          "1145:     otPbkdf2Cmac(reinterpret_cast<const uint8_t *>(aPassPhrase), static_cast<uint16_t>(strlen(aPassPhrase)),",
          "1148: exit:",
          "1149:     return error;",
          "",
          "[Removed Lines]",
          "1146:                  reinterpret_cast<const uint8_t *>(salt), saltLen, 16384, OT_PSKC_MAX_SIZE, aPSKc);",
          "",
          "[Added Lines]",
          "1146:                  reinterpret_cast<const uint8_t *>(salt), saltLen, 16384, OT_PSKC_MAX_SIZE, aPskc);",
          "",
          "---------------"
        ],
        "src/core/meshcop/commissioner.hpp||src/core/meshcop/commissioner.hpp": [
          "File: src/core/meshcop/commissioner.hpp -> src/core/meshcop/commissioner.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "110:     otError AddJoiner(const Mac::ExtAddress *aEui64, const char *aPSKd, uint32_t aTimeout);",
          "",
          "[Added Lines]",
          "110:     otError AddJoiner(const Mac::ExtAddress *aEui64, const char *aPskd, uint32_t aTimeout);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:                                 const char *              aNetworkName,",
          "233:                                 const Mac::ExtendedPanId &aExtPanId,",
          "",
          "[Removed Lines]",
          "231:     static otError GeneratePSKc(const char *              aPassPhrase,",
          "234:                                 uint8_t *                 aPSKc);",
          "",
          "[Added Lines]",
          "231:     static otError GeneratePskc(const char *              aPassPhrase,",
          "234:                                 uint8_t *                 aPskc);",
          "",
          "---------------"
        ],
        "src/core/meshcop/dataset.cpp||src/core/meshcop/dataset.cpp": [
          "File: src/core/meshcop/dataset.cpp -> src/core/meshcop/dataset.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:             break;",
          "214:         }",
          "217:         {",
          "221:             break;",
          "222:         }",
          "",
          "[Removed Lines]",
          "216:         case Tlv::kPSKc:",
          "218:             const PSKcTlv *tlv                  = static_cast<const PSKcTlv *>(cur);",
          "219:             aDataset.mPSKc                      = tlv->GetPSKc();",
          "220:             aDataset.mComponents.mIsPSKcPresent = true;",
          "",
          "[Added Lines]",
          "216:         case Tlv::kPskc:",
          "218:             const PskcTlv *tlv                  = static_cast<const PskcTlv *>(cur);",
          "219:             aDataset.mPskc                      = tlv->GetPskc();",
          "220:             aDataset.mComponents.mIsPskcPresent = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:         Set(tlv);",
          "341:     }",
          "344:     {",
          "346:         tlv.Init();",
          "348:         Set(tlv);",
          "349:     }",
          "",
          "[Removed Lines]",
          "343:     if (aDataset.mComponents.mIsPSKcPresent)",
          "345:         MeshCoP::PSKcTlv tlv;",
          "347:         tlv.SetPSKc(aDataset.mPSKc);",
          "",
          "[Added Lines]",
          "343:     if (aDataset.mComponents.mIsPskcPresent)",
          "345:         MeshCoP::PskcTlv tlv;",
          "347:         tlv.SetPskc(static_cast<const Pskc &>(aDataset.mPskc));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576: #if OPENTHREAD_FTD",
          "579:         {",
          "582:             break;",
          "583:         }",
          "",
          "[Removed Lines]",
          "578:         case Tlv::kPSKc:",
          "580:             const PSKcTlv *pskc = static_cast<const PSKcTlv *>(cur);",
          "581:             keyManager.SetPSKc(pskc->GetPSKc());",
          "",
          "[Added Lines]",
          "578:         case Tlv::kPskc:",
          "580:             const PskcTlv *pskc = static_cast<const PskcTlv *>(cur);",
          "581:             keyManager.SetPskc(pskc->GetPskc());",
          "",
          "---------------"
        ],
        "src/core/meshcop/dataset_manager.cpp||src/core/meshcop/dataset_manager.cpp": [
          "File: src/core/meshcop/dataset_manager.cpp -> src/core/meshcop/dataset_manager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:         datasetTlvs[length++] = Tlv::kChannel;",
          "618:     }",
          "621:     {",
          "623:     }",
          "625:     if (aDatasetComponents.mIsSecurityPolicyPresent)",
          "",
          "[Removed Lines]",
          "620:     if (aDatasetComponents.mIsPSKcPresent)",
          "622:         datasetTlvs[length++] = Tlv::kPSKc;",
          "",
          "[Added Lines]",
          "620:     if (aDatasetComponents.mIsPskcPresent)",
          "622:         datasetTlvs[length++] = Tlv::kPskc;",
          "",
          "---------------"
        ],
        "src/core/meshcop/dataset_manager_ftd.cpp||src/core/meshcop/dataset_manager_ftd.cpp": [
          "File: src/core/meshcop/dataset_manager_ftd.cpp -> src/core/meshcop/dataset_manager_ftd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:     aDataset.mActiveTimestamp = 1;",
          "325:     SuccessOrExit(error = Random::Crypto::FillBuffer(aDataset.mMasterKey.m8, sizeof(aDataset.mMasterKey)));",
          "327:     SuccessOrExit(error = Random::Crypto::FillBuffer(aDataset.mExtendedPanId.m8, sizeof(aDataset.mExtendedPanId)));",
          "329:     aDataset.mMeshLocalPrefix.m8[0] = 0xfd;",
          "",
          "[Removed Lines]",
          "326:     SuccessOrExit(error = Random::Crypto::FillBuffer(aDataset.mPSKc.m8, sizeof(aDataset.mPSKc)));",
          "",
          "[Added Lines]",
          "326:     SuccessOrExit(error = static_cast<Pskc &>(aDataset.mPskc).GenerateRandom());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:     aDataset.mComponents.mIsMeshLocalPrefixPresent = true;",
          "360:     aDataset.mComponents.mIsPanIdPresent           = true;",
          "361:     aDataset.mComponents.mIsChannelPresent         = true;",
          "363:     aDataset.mComponents.mIsSecurityPolicyPresent  = true;",
          "364:     aDataset.mComponents.mIsChannelMaskPresent     = true;",
          "",
          "[Removed Lines]",
          "362:     aDataset.mComponents.mIsPSKcPresent            = true;",
          "",
          "[Added Lines]",
          "362:     aDataset.mComponents.mIsPskcPresent            = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "450:     }",
          "454:     {",
          "457:         tlv.Init();",
          "460:         {",
          "463:         }",
          "464:         else",
          "465:         {",
          "471:         }",
          "473:         dataset.Set(tlv);",
          "",
          "[Removed Lines]",
          "453:     if (dataset.Get(Tlv::kPSKc) == NULL)",
          "455:         PSKcTlv tlv;",
          "459:         if (Get<KeyManager>().IsPSKcSet())",
          "462:             tlv.SetPSKc(Get<KeyManager>().GetPSKc());",
          "467:             otPSKc pskc;",
          "469:             SuccessOrExit(error = Random::Crypto::FillBuffer(pskc.m8, sizeof(pskc)));",
          "470:             tlv.SetPSKc(pskc);",
          "",
          "[Added Lines]",
          "453:     if (dataset.Get(Tlv::kPskc) == NULL)",
          "455:         PskcTlv tlv;",
          "459:         if (Get<KeyManager>().IsPskcSet())",
          "462:             tlv.SetPskc(Get<KeyManager>().GetPskc());",
          "467:             Pskc pskc;",
          "469:             SuccessOrExit(error = pskc.GenerateRandom());",
          "470:             tlv.SetPskc(pskc);",
          "",
          "---------------"
        ],
        "src/core/meshcop/dtls.hpp||src/core/meshcop/dtls.hpp": [
          "File: src/core/meshcop/dtls.hpp -> src/core/meshcop/dtls.hpp"
        ],
        "src/core/meshcop/joiner.cpp||src/core/meshcop/joiner.cpp": [
          "File: src/core/meshcop/joiner.cpp -> src/core/meshcop/joiner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     return;",
          "86: }",
          "89:                       const char *     aProvisioningUrl,",
          "90:                       const char *     aVendorName,",
          "91:                       const char *     aVendorModel,",
          "",
          "[Removed Lines]",
          "88: otError Joiner::Start(const char *     aPSKd,",
          "",
          "[Added Lines]",
          "88: otError Joiner::Start(const char *     aPskd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     Get<Mle::MleRouter>().UpdateLinkLocalAddress();",
          "109:     SuccessOrExit(error = Get<Coap::CoapSecure>().Start(kJoinerUdpPort));",
          "113:     for (JoinerRouter *router = &mJoinerRouters[0]; router < OT_ARRAY_END(mJoinerRouters); router++)",
          "114:     {",
          "",
          "[Removed Lines]",
          "110:     SuccessOrExit(error = Get<Coap::CoapSecure>().SetPsk(reinterpret_cast<const uint8_t *>(aPSKd),",
          "111:                                                          static_cast<uint8_t>(strlen(aPSKd))));",
          "",
          "[Added Lines]",
          "110:     SuccessOrExit(error = Get<Coap::CoapSecure>().SetPsk(reinterpret_cast<const uint8_t *>(aPskd),",
          "111:                                                          static_cast<uint8_t>(strlen(aPskd))));",
          "",
          "---------------"
        ],
        "src/core/meshcop/joiner.hpp||src/core/meshcop/joiner.hpp": [
          "File: src/core/meshcop/joiner.hpp -> src/core/meshcop/joiner.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                   const char *     aProvisioningUrl,",
          "83:                   const char *     aVendorName,",
          "84:                   const char *     aVendorModel,",
          "",
          "[Removed Lines]",
          "81:     otError Start(const char *     aPSKd,",
          "",
          "[Added Lines]",
          "81:     otError Start(const char *     aPskd,",
          "",
          "---------------"
        ],
        "src/core/meshcop/joiner_router.cpp||src/core/meshcop/joiner_router.cpp": [
          "File: src/core/meshcop/joiner_router.cpp -> src/core/meshcop/joiner_router.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:         SuccessOrExit(error = message->AppendTlv(channelMask));",
          "325:     }",
          "328:     {",
          "329:         SuccessOrExit(error = message->AppendTlv(*tlv));",
          "330:     }",
          "331:     else",
          "332:     {",
          "334:         pskc.Init();",
          "335:         SuccessOrExit(error = message->AppendTlv(pskc));",
          "336:     }",
          "",
          "[Removed Lines]",
          "327:     if ((tlv = dataset.Get(Tlv::kPSKc)) != NULL)",
          "333:         PSKcTlv pskc;",
          "",
          "[Added Lines]",
          "327:     if ((tlv = dataset.Get(Tlv::kPskc)) != NULL)",
          "333:         PskcTlv pskc;",
          "",
          "---------------"
        ],
        "src/core/meshcop/meshcop_tlvs.cpp||src/core/meshcop/meshcop_tlvs.cpp": [
          "File: src/core/meshcop/meshcop_tlvs.cpp -> src/core/meshcop/meshcop_tlvs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         rval = static_cast<const NetworkMasterKeyTlv &>(aTlv).IsValid();",
          "65:         break;",
          "69:         break;",
          "71:     case Tlv::kMeshLocalPrefix:",
          "",
          "[Removed Lines]",
          "67:     case Tlv::kPSKc:",
          "68:         rval = static_cast<const PSKcTlv &>(aTlv).IsValid();",
          "",
          "[Added Lines]",
          "67:     case Tlv::kPskc:",
          "68:         rval = static_cast<const PskcTlv &>(aTlv).IsValid();",
          "",
          "---------------"
        ],
        "src/core/meshcop/meshcop_tlvs.hpp||src/core/meshcop/meshcop_tlvs.hpp": [
          "File: src/core/meshcop/meshcop_tlvs.hpp -> src/core/meshcop/meshcop_tlvs.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         kPanId                   = OT_MESHCOP_TLV_PANID,                    ///< PAN ID TLV",
          "79:         kExtendedPanId           = OT_MESHCOP_TLV_EXTPANID,                 ///< Extended PAN ID TLV",
          "80:         kNetworkName             = OT_MESHCOP_TLV_NETWORKNAME,              ///< Network Name TLV",
          "82:         kNetworkMasterKey        = OT_MESHCOP_TLV_MASTERKEY,                ///< Network Master Key TLV",
          "83:         kNetworkKeySequence      = OT_MESHCOP_TLV_NETWORK_KEY_SEQUENCE,     ///< Network Key Sequence TLV",
          "84:         kMeshLocalPrefix         = OT_MESHCOP_TLV_MESHLOCALPREFIX,          ///< Mesh Local Prefix TLV",
          "",
          "[Removed Lines]",
          "81:         kPSKc                    = OT_MESHCOP_TLV_PSKC,                     ///< PSKc TLV",
          "",
          "[Added Lines]",
          "81:         kPskc                    = OT_MESHCOP_TLV_PSKC,                     ///< PSKc TLV",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447: OT_TOOL_PACKED_BEGIN",
          "449: {",
          "450: public:",
          "",
          "[Removed Lines]",
          "448: class PSKcTlv : public Tlv",
          "",
          "[Added Lines]",
          "448: class PskcTlv : public Tlv",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:     void Init(void)",
          "456:     {",
          "458:         SetLength(sizeof(*this) - sizeof(Tlv));",
          "459:     }",
          "",
          "[Removed Lines]",
          "457:         SetType(kPSKc);",
          "",
          "[Added Lines]",
          "457:         SetType(kPskc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486: private:",
          "488: } OT_TOOL_PACKED_END;",
          "",
          "[Removed Lines]",
          "476:     const otPSKc &GetPSKc(void) const { return mPSKc; }",
          "484:     void SetPSKc(const otPSKc &aPSKc) { mPSKc = aPSKc; }",
          "487:     otPSKc mPSKc;",
          "",
          "[Added Lines]",
          "476:     const Pskc &GetPskc(void) const { return mPskc; }",
          "484:     void SetPskc(const Pskc &aPskc) { mPskc = aPskc; }",
          "487:     Pskc mPskc;",
          "",
          "---------------"
        ],
        "src/core/thread/key_manager.cpp||src/core/thread/key_manager.cpp": [
          "File: src/core/thread/key_manager.cpp -> src/core/thread/key_manager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     , mKeyRotationTimer(aInstance, &KeyManager::HandleKeyRotationTimer, this)",
          "82:     , mKekFrameCounter(0)",
          "83:     , mSecurityPolicyFlags(0xff)",
          "85: {",
          "86:     mMasterKey = static_cast<const MasterKey &>(kDefaultMasterKey);",
          "88:     ComputeKey(mKeySequence, mKey);",
          "89: }",
          "",
          "[Removed Lines]",
          "84:     , mIsPSKcSet(false)",
          "87:     memset(&mPSKc, 0, sizeof(mPSKc));",
          "",
          "[Added Lines]",
          "84:     , mIsPskcSet(false)",
          "87:     memset(&mPskc, 0, sizeof(mPskc));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: }",
          "102: #if OPENTHREAD_MTD || OPENTHREAD_FTD",
          "104: {",
          "107:     Get<Notifier>().Signal(OT_CHANGED_PSKC);",
          "109: exit:",
          "111: }",
          "112: #endif // OPENTHREAD_MTD || OPENTHREAD_FTD",
          "",
          "[Removed Lines]",
          "103: void KeyManager::SetPSKc(const otPSKc &aPSKc)",
          "105:     VerifyOrExit(memcmp(&mPSKc, &aPSKc, sizeof(mPSKc)) != 0, Get<Notifier>().SignalIfFirst(OT_CHANGED_PSKC));",
          "106:     mPSKc = aPSKc;",
          "110:     mIsPSKcSet = true;",
          "",
          "[Added Lines]",
          "103: void KeyManager::SetPskc(const Pskc &aPskc)",
          "105:     VerifyOrExit(mPskc != aPskc, Get<Notifier>().SignalIfFirst(OT_CHANGED_PSKC));",
          "106:     mPskc = aPskc;",
          "110:     mIsPskcSet = true;",
          "",
          "---------------"
        ],
        "src/core/thread/key_manager.hpp||src/core/thread/key_manager.hpp": [
          "File: src/core/thread/key_manager.hpp -> src/core/thread/key_manager.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include <openthread/dataset.h>",
          "43: #include \"common/locator.hpp\"",
          "44: #include \"common/timer.hpp\"",
          "45: #include \"crypto/hmac_sha256.hpp\"",
          "46: #include \"mac/mac_frame.hpp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include \"common/random.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: } OT_TOOL_PACKED_END;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: OT_TOOL_PACKED_BEGIN",
          "97: class Pskc : public otPskc",
          "98: {",
          "99: public:",
          "109:     bool operator==(const Pskc &aOther) const { return memcmp(m8, aOther.m8, sizeof(Pskc)) == 0; }",
          "120:     bool operator!=(const Pskc &aOther) const { return !(*this == aOther); }",
          "122: #if !OPENTHREAD_RADIO",
          "129:     otError GenerateRandom(void) { return Random::Crypto::FillBuffer(m8, sizeof(Pskc)); }",
          "130: #endif",
          "132: } OT_TOOL_PACKED_END;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "153:     bool IsPSKcSet(void) const { return mIsPSKcSet; }",
          "",
          "[Added Lines]",
          "196:     bool IsPskcSet(void) const { return mIsPskcSet; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170: #endif",
          "",
          "[Removed Lines]",
          "161:     const otPSKc &GetPSKc(void) const { return mPSKc; }",
          "169:     void SetPSKc(const otPSKc &aPSKc);",
          "",
          "[Added Lines]",
          "204:     const Pskc &GetPskc(void) const { return mPskc; }",
          "212:     void SetPskc(const Pskc &aPskc);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "428:     TimerMilli mKeyRotationTimer;",
          "430: #if OPENTHREAD_MTD || OPENTHREAD_FTD",
          "432: #endif",
          "433:     uint8_t  mKek[kMaxKeyLength];",
          "434:     uint32_t mKekFrameCounter;",
          "436:     uint8_t mSecurityPolicyFlags;",
          "438: };",
          "",
          "[Removed Lines]",
          "431:     otPSKc mPSKc;",
          "437:     bool    mIsPSKcSet : 1;",
          "",
          "[Added Lines]",
          "474:     Pskc mPskc;",
          "480:     bool    mIsPskcSet : 1;",
          "",
          "---------------"
        ],
        "src/ncp/ncp_base_ftd.cpp||src/ncp/ncp_base_ftd.cpp": [
          "File: src/ncp/ncp_base_ftd.cpp -> src/ncp/ncp_base_ftd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "313: template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_PSKC>(void)",
          "314: {",
          "316: }",
          "318: template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_PSKC>(void)",
          "",
          "[Removed Lines]",
          "315:     return mEncoder.WriteData(otThreadGetPSKc(mInstance)->m8, sizeof(spinel_net_pskc_t));",
          "",
          "[Added Lines]",
          "315:     return mEncoder.WriteData(otThreadGetPskc(mInstance)->m8, sizeof(spinel_net_pskc_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:     VerifyOrExit(len == sizeof(spinel_net_pskc_t), error = OT_ERROR_PARSE);",
          "330: exit:",
          "331:     return error;",
          "",
          "[Removed Lines]",
          "328:     error = otThreadSetPSKc(mInstance, reinterpret_cast<const otPSKc *>(ptr));",
          "",
          "[Added Lines]",
          "328:     error = otThreadSetPskc(mInstance, reinterpret_cast<const otPskc *>(ptr));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "789: {",
          "790:     otError             error         = OT_ERROR_NONE;",
          "791:     const otExtAddress *eui64         = NULL;",
          "793:     uint32_t            joinerTimeout = 0;",
          "796:     SuccessOrExit(error = mDecoder.ReadUint32(joinerTimeout));",
          "798:     if (mDecoder.ReadEui64(eui64) != OT_ERROR_NONE)",
          "",
          "[Removed Lines]",
          "792:     const char *        aPSKd         = NULL;",
          "795:     SuccessOrExit(error = mDecoder.ReadUtf8(aPSKd));",
          "",
          "[Added Lines]",
          "792:     const char *        pskd          = NULL;",
          "795:     SuccessOrExit(error = mDecoder.ReadUtf8(pskd));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "800:         eui64 = NULL;",
          "801:     }",
          "805: exit:",
          "806:     return error;",
          "",
          "[Removed Lines]",
          "803:     error = otCommissionerAddJoiner(mInstance, eui64, aPSKd, joinerTimeout);",
          "",
          "[Added Lines]",
          "803:     error = otCommissionerAddJoiner(mInstance, eui64, pskd, joinerTimeout);",
          "",
          "---------------"
        ],
        "src/ncp/ncp_base_mtd.cpp||src/ncp/ncp_base_mtd.cpp": [
          "File: src/ncp/ncp_base_mtd.cpp -> src/ncp/ncp_base_mtd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1078:         SuccessOrExit(mEncoder.CloseStruct());",
          "1079:     }",
          "1082:     {",
          "1083:         SuccessOrExit(mEncoder.OpenStruct());",
          "1084:         SuccessOrExit(mEncoder.WriteUintPacked(SPINEL_PROP_NET_PSKC));",
          "1086:         SuccessOrExit(mEncoder.CloseStruct());",
          "1087:     }",
          "",
          "[Removed Lines]",
          "1081:     if (aDataset.mComponents.mIsPSKcPresent)",
          "1085:         SuccessOrExit(mEncoder.WriteData(aDataset.mPSKc.m8, sizeof(spinel_net_pskc_t)));",
          "",
          "[Added Lines]",
          "1081:     if (aDataset.mComponents.mIsPskcPresent)",
          "1085:         SuccessOrExit(mEncoder.WriteData(aDataset.mPskc.m8, sizeof(spinel_net_pskc_t)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1282:                 SuccessOrExit(error = mDecoder.ReadData(psk, len));",
          "1283:                 VerifyOrExit(len == OT_PSKC_MAX_SIZE, error = OT_ERROR_INVALID_ARGS);",
          "1285:             }",
          "1288:             break;",
          "1290:         case SPINEL_PROP_DATASET_SECURITY_POLICY:",
          "",
          "[Removed Lines]",
          "1284:                 memcpy(aDataset.mPSKc.m8, psk, OT_PSKC_MAX_SIZE);",
          "1287:             aDataset.mComponents.mIsPSKcPresent = true;",
          "",
          "[Added Lines]",
          "1284:                 memcpy(aDataset.mPskc.m8, psk, OT_PSKC_MAX_SIZE);",
          "1287:             aDataset.mComponents.mIsPskcPresent = true;",
          "",
          "---------------"
        ],
        "tests/unit/test_pskc.cpp||tests/unit/test_pskc.cpp": [
          "File: tests/unit/test_pskc.cpp -> tests/unit/test_pskc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:                                     0xcc, 0xd1, 0xe4, 0xc0, 0x1d, 0x01, 0x54, 0xf8};",
          "46:     const char    passphrase[]   = \"123456\";",
          "47:     otInstance *  instance       = testInitInstance();",
          "49:                                                           static_cast<const ot::Mac::ExtendedPanId &>(sXPanId), pskc),",
          "50:                   \"TestMinimumPassphrase failed to generate PSKc\");",
          "51:     VerifyOrQuit(memcmp(pskc, expectedPskc, sizeof(pskc)) == 0, \"TestMinimumPassphrase got wrong pskc\");",
          "",
          "[Removed Lines]",
          "48:     SuccessOrQuit(ot::MeshCoP::Commissioner::GeneratePSKc(passphrase, \"OpenThread\",",
          "",
          "[Added Lines]",
          "48:     SuccessOrQuit(ot::MeshCoP::Commissioner::GeneratePskc(passphrase, \"OpenThread\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:                               \"123456781234567\";",
          "77:     otInstance *instance = testInitInstance();",
          "79:                                                           static_cast<const ot::Mac::ExtendedPanId &>(sXPanId), pskc),",
          "80:                   \"TestMaximumPassphrase failed to generate PSKc\");",
          "81:     VerifyOrQuit(memcmp(pskc, expectedPskc, sizeof(pskc)) == 0, \"TestMaximumPassphrase got wrong pskc\");",
          "",
          "[Removed Lines]",
          "78:     SuccessOrQuit(ot::MeshCoP::Commissioner::GeneratePSKc(passphrase, \"OpenThread\",",
          "",
          "[Added Lines]",
          "78:     SuccessOrQuit(ot::MeshCoP::Commissioner::GeneratePskc(passphrase, \"OpenThread\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}