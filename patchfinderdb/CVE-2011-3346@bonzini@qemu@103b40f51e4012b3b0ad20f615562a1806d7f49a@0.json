{
  "cve_id": "CVE-2011-3346",
  "cve_desc": "Buffer overflow in hw/scsi-disk.c in the SCSI subsystem in QEMU before 0.15.2, as used by Xen, might allow local guest users with permission to access the CD-ROM to cause a denial of service (guest crash) via a crafted SAI READ CAPACITY SCSI command.  NOTE: this is only a vulnerability when root has manually modified certain permissions or ACLs.",
  "repo": "bonzini/qemu",
  "patch_hash": "103b40f51e4012b3b0ad20f615562a1806d7f49a",
  "patch_info": {
    "commit_hash": "103b40f51e4012b3b0ad20f615562a1806d7f49a",
    "repo": "bonzini/qemu",
    "commit_url": "https://github.com/bonzini/qemu/commit/103b40f51e4012b3b0ad20f615562a1806d7f49a",
    "files": [
      "hw/scsi-disk.c"
    ],
    "message": "scsi-disk: commonize iovec creation between reads and writes\n\nAlso, consistently use qiov.size instead of iov.iov_len.\n\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Kevin Wolf <kwolf@redhat.com>",
    "before_after_code_files": [
      "hw/scsi-disk.c||hw/scsi-disk.c"
    ]
  },
  "patch_diff": {
    "hw/scsi-disk.c||hw/scsi-disk.c": [
      "File: hw/scsi-disk.c -> hw/scsi-disk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:     r->req.aiocb = NULL;",
      "109: }",
      "111: static void scsi_read_complete(void * opaque, int ret)",
      "112: {",
      "113:     SCSIDiskReq *r = (SCSIDiskReq *)opaque;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111: static uint32_t scsi_init_iovec(SCSIDiskReq *r)",
      "112: {",
      "113:     r->iov.iov_len = MIN(r->sector_count * 512, SCSI_DMA_BUF_SIZE);",
      "114:     qemu_iovec_init_external(&r->qiov, &r->iov, 1);",
      "115:     return r->qiov.size / 512;",
      "116: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:         }",
      "126:     }",
      "131:     r->sector += n;",
      "132:     r->sector_count -= n;",
      "134: }",
      "136: static void scsi_flush_complete(void * opaque, int ret)",
      "",
      "[Removed Lines]",
      "128:     DPRINTF(\"Data ready tag=0x%x len=%zd\\n\", r->req.tag, r->iov.iov_len);",
      "130:     n = r->iov.iov_len / 512;",
      "133:     scsi_req_data(&r->req, r->iov.iov_len);",
      "",
      "[Added Lines]",
      "135:     DPRINTF(\"Data ready tag=0x%x len=%zd\\n\", r->req.tag, r->qiov.size);",
      "137:     n = r->qiov.size / 512;",
      "140:     scsi_req_data(&r->req, r->qiov.size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "181:         return;",
      "182:     }",
      "188:     if (s->tray_open) {",
      "189:         scsi_read_complete(r, -ENOMEDIUM);",
      "190:     }",
      "194:     bdrv_acct_start(s->bs, &r->acct, n * BDRV_SECTOR_SIZE, BDRV_ACCT_READ);",
      "195:     r->req.aiocb = bdrv_aio_readv(s->bs, r->sector, &r->qiov, n,",
      "196:                               scsi_read_complete, r);",
      "",
      "[Removed Lines]",
      "184:     n = r->sector_count;",
      "185:     if (n > SCSI_DMA_BUF_SIZE / 512)",
      "186:         n = SCSI_DMA_BUF_SIZE / 512;",
      "191:     r->iov.iov_len = n * 512;",
      "192:     qemu_iovec_init_external(&r->qiov, &r->iov, 1);",
      "",
      "[Added Lines]",
      "194:     n = scsi_init_iovec(r);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "239: {",
      "240:     SCSIDiskReq *r = (SCSIDiskReq *)opaque;",
      "241:     SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);",
      "243:     uint32_t n;",
      "245:     if (r->req.aiocb != NULL) {",
      "",
      "[Removed Lines]",
      "242:     uint32_t len;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "253:         }",
      "254:     }",
      "257:     r->sector += n;",
      "258:     r->sector_count -= n;",
      "259:     if (r->sector_count == 0) {",
      "260:         scsi_req_complete(&r->req, GOOD);",
      "261:     } else {",
      "269:     }",
      "270: }",
      "",
      "[Removed Lines]",
      "256:     n = r->iov.iov_len / 512;",
      "262:         len = r->sector_count * 512;",
      "263:         if (len > SCSI_DMA_BUF_SIZE) {",
      "264:             len = SCSI_DMA_BUF_SIZE;",
      "265:         }",
      "266:         r->iov.iov_len = len;",
      "267:         DPRINTF(\"Write complete tag=0x%x more=%d\\n\", r->req.tag, len);",
      "268:         scsi_req_data(&r->req, len);",
      "",
      "[Added Lines]",
      "256:     n = r->qiov.size / 512;",
      "262:         scsi_init_iovec(r);",
      "263:         DPRINTF(\"Write complete tag=0x%x more=%d\\n\", r->req.tag, r->qiov.size);",
      "264:         scsi_req_data(&r->req, r->qiov.size);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "284:         return;",
      "285:     }",
      "288:     if (n) {",
      "289:         if (s->tray_open) {",
      "290:             scsi_write_complete(r, -ENOMEDIUM);",
      "291:         }",
      "294:         bdrv_acct_start(s->bs, &r->acct, n * BDRV_SECTOR_SIZE, BDRV_ACCT_WRITE);",
      "295:         r->req.aiocb = bdrv_aio_writev(s->bs, r->sector, &r->qiov, n,",
      "297:         if (r->req.aiocb == NULL) {",
      "298:             scsi_write_complete(r, -ENOMEM);",
      "299:         }",
      "300:     } else {",
      "302:         scsi_write_complete(r, 0);",
      "303:     }",
      "304: }",
      "",
      "[Removed Lines]",
      "287:     n = r->iov.iov_len / 512;",
      "292:         qemu_iovec_init_external(&r->qiov, &r->iov, 1);",
      "296:                                    scsi_write_complete, r);",
      "",
      "[Added Lines]",
      "283:     n = r->qiov.size / 512;",
      "290:                                        scsi_write_complete, r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7285477ab11831b1cf56e45878a89170dd06d9b9",
      "candidate_info": {
        "commit_hash": "7285477ab11831b1cf56e45878a89170dd06d9b9",
        "repo": "bonzini/qemu",
        "commit_url": "https://github.com/bonzini/qemu/commit/7285477ab11831b1cf56e45878a89170dd06d9b9",
        "files": [
          "hw/scsi-disk.c"
        ],
        "message": "scsi-disk: lazily allocate bounce buffer\n\nIt will not be needed for reads and writes if the HBA provides a sglist.\nIn addition, this lets scsi-disk refuse commands with an excessive\nallocation length, as well as limit memory on usual well-behaved guests.\n\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Kevin Wolf <kwolf@redhat.com>",
        "before_after_code_files": [
          "hw/scsi-disk.c||hw/scsi-disk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/scsi-disk.c||hw/scsi-disk.c"
          ],
          "candidate": [
            "hw/scsi-disk.c||hw/scsi-disk.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/scsi-disk.c||hw/scsi-disk.c": [
          "File: hw/scsi-disk.c -> hw/scsi-disk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     uint64_t sector;",
          "57:     uint32_t sector_count;",
          "58:     struct iovec iov;",
          "59:     QEMUIOVector qiov;",
          "60:     uint32_t status;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     uint32_t buflen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: };",
          "80: static int scsi_handle_rw_error(SCSIDiskReq *r, int error, int type);",
          "83: static void scsi_free_request(SCSIRequest *req)",
          "84: {",
          "85:     SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);",
          "88: }",
          "",
          "[Removed Lines]",
          "81: static int scsi_disk_emulate_command(SCSIDiskReq *r, uint8_t *outbuf);",
          "87:     qemu_vfree(r->iov.iov_base);",
          "",
          "[Added Lines]",
          "82: static int scsi_disk_emulate_command(SCSIDiskReq *r);",
          "88:     if (r->iov.iov_base) {",
          "89:         qemu_vfree(r->iov.iov_base);",
          "90:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: static uint32_t scsi_init_iovec(SCSIDiskReq *r)",
          "112: {",
          "114:     qemu_iovec_init_external(&r->qiov, &r->iov, 1);",
          "115:     return r->qiov.size / 512;",
          "116: }",
          "",
          "[Removed Lines]",
          "113:     r->iov.iov_len = MIN(r->sector_count * 512, SCSI_DMA_BUF_SIZE);",
          "",
          "[Added Lines]",
          "116:     SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);",
          "118:     if (!r->iov.iov_base) {",
          "119:         r->buflen = SCSI_DMA_BUF_SIZE;",
          "120:         r->iov.iov_base = qemu_blockalign(s->bs, r->buflen);",
          "121:     }",
          "122:     r->iov.iov_len = MIN(r->sector_count * 512, r->buflen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:                 scsi_write_data(&r->req);",
          "324:                 break;",
          "325:             case SCSI_REQ_STATUS_RETRY_FLUSH:",
          "327:                 if (ret == 0) {",
          "328:                     scsi_req_complete(&r->req, GOOD);",
          "329:                 }",
          "",
          "[Removed Lines]",
          "326:                 ret = scsi_disk_emulate_command(r, r->iov.iov_base);",
          "",
          "[Added Lines]",
          "335:                 ret = scsi_disk_emulate_command(r);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "838:     return 0;",
          "839: }",
          "842: {",
          "843:     SCSIRequest *req = &r->req;",
          "844:     SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, req->dev);",
          "845:     uint64_t nb_sectors;",
          "846:     int buflen = 0;",
          "848:     switch (req->cmd.buf[0]) {",
          "849:     case TEST_UNIT_READY:",
          "850:         if (s->tray_open || !bdrv_is_inserted(s->bs))",
          "",
          "[Removed Lines]",
          "841: static int scsi_disk_emulate_command(SCSIDiskReq *r, uint8_t *outbuf)",
          "",
          "[Added Lines]",
          "850: static int scsi_disk_emulate_command(SCSIDiskReq *r)",
          "855:     uint8_t *outbuf;",
          "858:     if (!r->iov.iov_base) {",
          "867:         if (req->cmd.xfer > 65536) {",
          "868:             goto illegal_request;",
          "869:         }",
          "870:         r->buflen = MAX(4096, req->cmd.xfer);",
          "871:         r->iov.iov_base = qemu_blockalign(s->bs, r->buflen);",
          "872:     }",
          "874:     outbuf = r->iov.iov_base;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "995:     SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, req->dev);",
          "996:     int32_t len;",
          "997:     uint8_t command;",
          "999:     int rc;",
          "1001:     command = buf[0];",
          "1003:     DPRINTF(\"Command: lun=%d tag=0x%x data=0x%02x\", req->lun, req->tag, buf[0]);",
          "1005: #ifdef DEBUG_SCSI",
          "",
          "[Removed Lines]",
          "998:     uint8_t *outbuf;",
          "1002:     outbuf = (uint8_t *)r->iov.iov_base;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1028:     case GET_CONFIGURATION:",
          "1029:     case SERVICE_ACTION_IN_16:",
          "1030:     case VERIFY_10:",
          "1032:         if (rc < 0) {",
          "1033:             return 0;",
          "1034:         }",
          "",
          "[Removed Lines]",
          "1031:         rc = scsi_disk_emulate_command(r, outbuf);",
          "",
          "[Added Lines]",
          "1056:         rc = scsi_disk_emulate_command(r);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1279: {",
          "1280:     SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, d);",
          "1281:     SCSIRequest *req;",
          "1284:     req = scsi_req_alloc(&scsi_disk_reqops, &s->qdev, tag, lun, hba_private);",
          "1287:     return req;",
          "1288: }",
          "",
          "[Removed Lines]",
          "1282:     SCSIDiskReq *r;",
          "1285:     r = DO_UPCAST(SCSIDiskReq, req, req);",
          "1286:     r->iov.iov_base = qemu_blockalign(s->bs, SCSI_DMA_BUF_SIZE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}