{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e51716b1520fc6e681e9578d681e2e60ae6590f",
      "candidate_info": {
        "commit_hash": "2e51716b1520fc6e681e9578d681e2e60ae6590f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e51716b1520fc6e681e9578d681e2e60ae6590f",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Increase the size of the yy_lookahead table so that it is never necessary to down bounds checking on the index.\n\nFossilOrigin-Name: bafd872398e58766e996963372c7acc03a1e20a6d39a3867ca45d3ea0ed2ac1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94085fb3e756bc984237b74b6e29c68462ad860870c64dcb5124feaeec387660",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4153:   struct rule *rp;",
          "4154:   struct acttab *pActtab;",
          "4155:   int i, j, n, sz;",
          "4158:   const char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4156:   int nLookAhead;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4403:     if( la<0 ) la = lemp->nsymbol;",
          "4404:     if( j==0 ) fprintf(out,\" /* %5d */ \", i);",
          "4405:     fprintf(out, \" %4d,\", la);",
          "4407:       fprintf(out, \"\\n\"); lineno++;",
          "4408:       j = 0;",
          "4409:     }else{",
          "4410:       j++;",
          "4411:     }",
          "4412:   }",
          "4413:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4406:     if( j==9 || i==n-1 ){",
          "",
          "[Added Lines]",
          "4407:     if( j==9 ){",
          "4408:       fprintf(out, \"\\n\"); lineno++;",
          "4409:       j = 0;",
          "4410:     }else{",
          "4411:       j++;",
          "4412:     }",
          "4413:   }",
          "4417:   nLookAhead = lemp->nterminal + lemp->nactiontab;",
          "4418:   while( i<nLookAhead ){",
          "4419:     if( j==0 ) fprintf(out,\" /* %5d */ \", i);",
          "4420:     fprintf(out, \" %4d,\", lemp->nterminal);",
          "4421:     if( j==9 ){",
          "4427:     i++;",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:   do{",
          "522:     i = yy_shift_ofst[stateno];",
          "523:     assert( i>=0 );",
          "525:     assert( iLookAhead!=YYNOCODE );",
          "526:     assert( iLookAhead < YYNTOKEN );",
          "527:     i += iLookAhead;",
          "529: #ifdef YYFALLBACK",
          "531:       if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])",
          "",
          "[Removed Lines]",
          "528:     if( i>=YY_NLOOKAHEAD || yy_lookahead[i]!=iLookAhead ){",
          "",
          "[Added Lines]",
          "524:     assert( i<=YY_ACTTAB_COUNT );",
          "525:     assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );",
          "529:     assert( i<(int)YY_NLOOKAHEAD );",
          "530:     if( yy_lookahead[i]!=iLookAhead ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6e0286c49b13f4232f4b01a95d299a1e85931fa",
      "candidate_info": {
        "commit_hash": "b6e0286c49b13f4232f4b01a95d299a1e85931fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6e0286c49b13f4232f4b01a95d299a1e85931fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "Add the sqlite3_drop_modules() interface.\n\nFossilOrigin-Name: e2c6fed8f84929ed51a4e876bb09c85ac4b86a2e4cf0832a7da724bb9f4df5bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cb009b0f724f72eaea90e45488122f7c2a7d0caf31a8422da4060469507e921",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "3655:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3656:   \".vfslist                 List all available VFSes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3654:   \"    --allexcept             Unregister everything except those named\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6892:   int nArg = 0;",
          "6893:   int n, c;",
          "6894:   int rc = 0;",
          "6897: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "6898:   if( p->expert.pExpert ){",
          "",
          "[Removed Lines]",
          "6895:   char *azArg[50];",
          "",
          "[Added Lines]",
          "6896:   char *azArg[52];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6906:     while( IsSpace(zLine[h]) ){ h++; }",
          "6907:     if( zLine[h]==0 ) break;",
          "6908:     if( zLine[h]=='\\'' || zLine[h]=='\"' ){",
          "",
          "[Removed Lines]",
          "6905:   while( zLine[h] && nArg<ArraySize(azArg) ){",
          "",
          "[Added Lines]",
          "6906:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6923:       resolve_backslashes(azArg[nArg-1]);",
          "6924:     }",
          "6925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6927:   azArg[nArg] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "[Removed Lines]",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Added Lines]",
          "9412:     int lenOpt;",
          "9413:     char *zOpt;",
          "9415:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "9420:     zOpt = azArg[1];",
          "9421:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9422:     lenOpt = (int)strlen(zOpt);",
          "9423:     if( lenOpt>=3 && strncmp(zOpt, \"-allexcept\",lenOpt)==0 ){",
          "9424:       assert( azArg[nArg]==0 );",
          "9425:       sqlite3_drop_modules(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "9426:     }else{",
          "9427:       for(ii=1; ii<nArg; ii++){",
          "9428:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9429:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6655: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6671: int sqlite3_drop_modules(",
          "6674: );",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   return TCL_OK;",
          "1111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_modules(",
          "1121:   void *NotUsed,",
          "1125: ){",
          "1126:   int rc;",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "1130:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "1131:        \" DB\\\"\", 0);",
          "1132:     return TCL_ERROR;",
          "1133:   }",
          "1134:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1135:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1136:   return TCL_OK;",
          "1137: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7861:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7862:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7863:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7864:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7865:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7889:      { \"sqlite3_drop_modules\",          (Tcl_CmdProc*)test_drop_modules     },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "147:     pNext = sqliteHashNext(pThis);",
          "148:     if( azNames ){",
          "149:       int ii;",
          "150:       for(ii=0; azNames[ii]!=0 && strcmp(azNames[ii],pMod->zName)!=0; ii++){}",
          "151:       if( azNames[ii]!=0 ) continue;",
          "152:     }",
          "153:     createModule(db, pMod->zName, 0, 0, 0);",
          "154:   }",
          "155:   return SQLITE_OK;",
          "156: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3517cc7f36ab406fbdfd0517976ae456f7905cd4",
      "candidate_info": {
        "commit_hash": "3517cc7f36ab406fbdfd0517976ae456f7905cd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3517cc7f36ab406fbdfd0517976ae456f7905cd4",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak in the delta_parse() table-valued function of the fossildelta.c extension.\n\nFossilOrigin-Name: c86ca3f0220a5f9e7f7f1818f6e1220d851f3ebed6a5f0aae6ac38309bd2930e",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "850: static int deltaparsevtabClose(sqlite3_vtab_cursor *cur){",
          "851:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "852:   sqlite3_free(pCur);",
          "853:   return SQLITE_OK;",
          "854: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   sqlite3_free(pCur->aDelta);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 15202aee150fa8e15fb90e90e5765c5e19a1eaf4896da2996a747636b76da8e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
      "candidate_info": {
        "commit_hash": "8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/where.c"
        ],
        "message": "Get generated columns working for WITHOUT ROWID tables.\n\nFossilOrigin-Name: 9f409649ec4282a47f0a8b079b419f1922e0c24779b297f477ced168d5b7910d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8426acb94179ff49549aced6ea3c26c49ba4761c2f414fa1772d6a031edc79d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877: }",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "884:   int i;",
          "885: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "887:   if( pTab->tabFlags & TF_HasVirtual ){",
          "888:     for(i=0; i<=iCol; i++){",
          "889:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) iCol++;",
          "890:     }",
          "891:   }",
          "897: }",
          "899: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "908: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "909:   int i;",
          "",
          "[Removed Lines]",
          "886:   Table *pTab = pIdx->pTable;",
          "892: #endif",
          "893:   for(i=0; i<pIdx->nColumn; i++){",
          "894:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "895:   }",
          "896:   return -1;",
          "",
          "[Added Lines]",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "887:   }",
          "888:   return -1;",
          "889: }",
          "905: i16 sqlite3ColumnOfStorage(Table *pTab, i16 iCol){",
          "907:     int i;",
          "912:   return iCol;",
          "914: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2051:   nExtra = 0;",
          "2052:   for(i=0; i<pTab->nCol; i++){",
          "2054:   }",
          "2055:   if( resizeIndexObject(db, pPk, nPk+nExtra) ) return;",
          "2056:   for(i=0, j=nPk; i<pTab->nCol; i++){",
          "2058:       assert( j<pPk->nColumn );",
          "2059:       pPk->aiColumn[j] = i;",
          "2060:       pPk->azColl[j] = sqlite3StrBINARY;",
          "",
          "[Removed Lines]",
          "2053:     if( !hasColumn(pPk->aiColumn, nPk, i) ) nExtra++;",
          "2057:     if( !hasColumn(pPk->aiColumn, j, i) ){",
          "",
          "[Added Lines]",
          "2072:     if( !hasColumn(pPk->aiColumn, nPk, i)",
          "2073:      && (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) nExtra++;",
          "2077:     if( !hasColumn(pPk->aiColumn, j, i)",
          "2078:      && (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0",
          "2079:     ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2062:     }",
          "2063:   }",
          "2064:   assert( pPk->nColumn==j );",
          "2066:   recomputeColumnsNotIndexed(pPk);",
          "2067: }",
          "",
          "[Removed Lines]",
          "2065:   assert( pTab->nCol<=j );",
          "",
          "[Added Lines]",
          "2087:   assert( pTab->nNVCol<=j );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2172:     }",
          "2173:     if( (p->tabFlags & TF_HasPrimaryKey)==0 ){",
          "2174:       sqlite3ErrorMsg(pParse, \"PRIMARY KEY missing on table %s\", p->zName);",
          "2178:     }",
          "2179:   }",
          "2183: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "2175:     }else{",
          "2176:       p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2177:       convertToWithoutRowidTable(pParse, p);",
          "2181:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "2197:       return;",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2204:   }",
          "2205: #endif",
          "2208:   estimateTableWidth(p);",
          "2209:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1435:   for(i=0; i<nCol; i++){",
          "1436:     if( i==pTab->iPKey ){",
          "1438:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:     int iReg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1454:         || onError==OE_Ignore || onError==OE_Replace );",
          "1455:     addr1 = 0;",
          "1456:     switch( onError ){",
          "1457:       case OE_Replace: {",
          "1458:         assert( onError==OE_Replace );",
          "1459:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1461:           VdbeCoverage(v);",
          "1462:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1464:           VdbeCoverage(v);",
          "1465:         onError = OE_Abort;",
          "",
          "[Removed Lines]",
          "1460:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1463:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "",
          "[Added Lines]",
          "1457:     if( (pTab->tabFlags & TF_HasVirtual)==0 ){",
          "1458:       iReg = regNewData+1+i;",
          "1459:     }else if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1460:       iReg = ++pParse->nMem;",
          "1461:       assert( pParse->iSelfTab==0 );",
          "1462:       pParse->iSelfTab = -regNewData;",
          "1463:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iReg);",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       iReg = sqlite3ColumnOfTable(pTab, i) + regNewData + 1;",
          "1468:     }",
          "1473:         sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1476:         sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1474:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1475:                                     pTab->aCol[i].zName);",
          "1476:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1478:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1479:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1480:         VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1477:                           regNewData+1+i);",
          "",
          "[Added Lines]",
          "1490:                           iReg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1483:       }",
          "1484:       default: {",
          "1485:         assert( onError==OE_Ignore );",
          "1487:         VdbeCoverage(v);",
          "1488:         break;",
          "1489:       }",
          "",
          "[Removed Lines]",
          "1486:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "",
          "[Added Lines]",
          "1499:         sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3954: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3955: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3956: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3958: #else",
          "3959:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3960: #endif",
          "3961: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3962: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3961:   i16 sqlite3ColumnOfStorage(Table*, i16);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5378:             Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }",
          "5382:           x = sqlite3ColumnOfIndex(pIdx, x);",
          "5383:           if( x>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5381:           }else{",
          "5382:             x = sqlite3ColumnOfStorage(pTab,x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ece353f2d2223ec78e63ce972081a047e89a641",
      "candidate_info": {
        "commit_hash": "6ece353f2d2223ec78e63ce972081a047e89a641",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ece353f2d2223ec78e63ce972081a047e89a641",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/treeview.c",
          "test/istrue.test"
        ],
        "message": "Handle expressions like \"expr IS TRUE COLLATE xyz\" in the same way as \"expr IS TRUE\". Fix for [4d01eda8115b10d1].\n\nFossilOrigin-Name: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/treeview.c||src/treeview.c",
          "test/istrue.test||test/istrue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 614ecb0af47038848e8ba2aed6b92db6f33ddc4aea6361795dbde440380f5a35",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1815: int sqlite3ExprTruthValue(const Expr *pExpr){",
          "1816:   assert( pExpr->op==TK_TRUEFALSE );",
          "1817:   assert( sqlite3StrICmp(pExpr->u.zToken,\"true\")==0",
          "1818:        || sqlite3StrICmp(pExpr->u.zToken,\"false\")==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1816:   pExpr = sqlite3ExprSkipCollate((Expr*)pExpr);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:     }",
          "931:     case TK_IS:",
          "932:     case TK_ISNOT: {",
          "934:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "938:         int rc = resolveExprStep(pWalker, pRight);",
          "939:         if( rc==WRC_Abort ) return WRC_Abort;",
          "940:         if( pRight->op==TK_TRUEFALSE ){",
          "",
          "[Removed Lines]",
          "933:       Expr *pRight;",
          "937:       if( (pRight = pExpr->pRight)->op==TK_ID ){",
          "",
          "[Added Lines]",
          "933:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "937:       if( pRight->op==TK_ID ){",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:       };",
          "515:       assert( pExpr->op2==TK_IS || pExpr->op2==TK_ISNOT );",
          "516:       assert( pExpr->pRight );",
          "518:       x = (pExpr->op2==TK_ISNOT)*2 + sqlite3ExprTruthValue(pExpr->pRight);",
          "519:       zUniOp = azOp[x];",
          "520:       break;",
          "",
          "[Removed Lines]",
          "517:       assert( pExpr->pRight->op==TK_TRUEFALSE );",
          "",
          "[Added Lines]",
          "517:       assert( sqlite3ExprSkipCollate(pExpr->pRight)->op==TK_TRUEFALSE );",
          "",
          "---------------"
        ],
        "test/istrue.test||test/istrue.test": [
          "File: test/istrue.test -> test/istrue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:   SELECT *,'x' FROM t7 ORDER BY a;",
          "159: } {1 0 1 0 1 x 2 1 0 0 1 x 3 1 0 0 1 x 4 0 1 1 0 x}",
          "161: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: do_execsql_test istrue-710 {",
          "162:   SELECT 0.5 IS TRUE COLLATE NOCASE;",
          "163:   SELECT 0.5 IS TRUE COLLATE RTRIM;",
          "164:   SELECT 0.5 IS TRUE COLLATE BINARY;",
          "166:   SELECT 0.5 IS TRUE;",
          "167:   SELECT 0.5 COLLATE NOCASE IS TRUE;",
          "168:   SELECT 0.0 IS FALSE;",
          "170:   SELECT 0.0 IS FALSE COLLATE NOCASE;",
          "171:   SELECT 0.0 IS FALSE COLLATE RTRIM;",
          "172:   SELECT 0.0 IS FALSE COLLATE BINARY;",
          "173: } {1 1 1   1 1 1  1 1 1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}