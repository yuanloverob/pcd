{
  "cve_id": "CVE-2020-28941",
  "cve_desc": "An issue was discovered in drivers/accessibility/speakup/spk_ttyio.c in the Linux kernel through 5.9.9. Local attackers on systems with the speakup driver could cause a local denial of service attack, aka CID-d41227544427. This occurs because of an invalid free when the line discipline is used more than once.",
  "repo": "torvalds/linux",
  "patch_hash": "d4122754442799187d5d537a9c039a49a67e57f1",
  "patch_info": {
    "commit_hash": "d4122754442799187d5d537a9c039a49a67e57f1",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/d4122754442799187d5d537a9c039a49a67e57f1",
    "files": [
      "drivers/accessibility/speakup/spk_ttyio.c"
    ],
    "message": "speakup: Do not let the line discipline be used several times\n\nSpeakup has only one speakup_tty variable to store the tty it is managing. This\nmakes sense since its codebase currently assumes that there is only one user who\ncontrols the screen reading.\n\nThat however means that we have to forbid using the line discipline several\ntimes, otherwise the second closure would try to free a NULL ldisc_data, leading to\n\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nRIP: 0010:spk_ttyio_ldisc_close+0x2c/0x60\nCall Trace:\n tty_ldisc_release+0xa2/0x340\n tty_release_struct+0x17/0xd0\n tty_release+0x9d9/0xcc0\n __fput+0x231/0x740\n task_work_run+0x12c/0x1a0\n do_exit+0x9b5/0x2230\n ? release_task+0x1240/0x1240\n ? __do_page_fault+0x562/0xa30\n do_group_exit+0xd5/0x2a0\n __x64_sys_exit_group+0x35/0x40\n do_syscall_64+0x89/0x2b0\n ? page_fault+0x8/0x30\n entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nCc: stable@vger.kernel.org\nReported-by: \u79e6\u4e16\u677e <qinshisong1205@gmail.com>\nSigned-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>\nTested-by: Shisong Qin <qinshisong1205@gmail.com>\nLink: https://lore.kernel.org/r/20201110183541.fzgnlwhjpgqzjeth@function\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/accessibility/speakup/spk_ttyio.c||drivers/accessibility/speakup/spk_ttyio.c"
    ]
  },
  "patch_diff": {
    "drivers/accessibility/speakup/spk_ttyio.c||drivers/accessibility/speakup/spk_ttyio.c": [
      "File: drivers/accessibility/speakup/spk_ttyio.c -> drivers/accessibility/speakup/spk_ttyio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:  if (!tty->ops->write)",
      "51:   return -EOPNOTSUPP;",
      "52:  speakup_tty = tty;",
      "54:  ldisc_data = kmalloc(sizeof(*ldisc_data), GFP_KERNEL);",
      "56:   return -ENOMEM;",
      "58:  init_completion(&ldisc_data->completion);",
      "59:  ldisc_data->buf_free = true;",
      "60:  speakup_tty->disc_data = ldisc_data;",
      "62:  return 0;",
      "63: }",
      "",
      "[Removed Lines]",
      "55:  if (!ldisc_data)",
      "",
      "[Added Lines]",
      "53:  mutex_lock(&speakup_tty_mutex);",
      "54:  if (speakup_tty) {",
      "55:   mutex_unlock(&speakup_tty_mutex);",
      "56:   return -EBUSY;",
      "57:  }",
      "61:  if (!ldisc_data) {",
      "62:   speakup_tty = NULL;",
      "63:   mutex_unlock(&speakup_tty_mutex);",
      "65:  }",
      "70:  mutex_unlock(&speakup_tty_mutex);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7008e58c63bc8468e8d16154e25d780198b3ecfc",
      "candidate_info": {
        "commit_hash": "7008e58c63bc8468e8d16154e25d780198b3ecfc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7008e58c63bc8468e8d16154e25d780198b3ecfc",
        "files": [
          "drivers/base/core.c"
        ],
        "message": "driver core: Fix lockdep warning on wfs_lock\n\nThere's a potential deadlock with the following cycle:\nwfs_lock --> device_links_lock --> kn->count\n\nFix this by simply dropping the lock around a list_empty() check that's\njust exported to a sysfs file. The sysfs file output is an instantaneous\ncheck anyway and the lock doesn't really add any protection.\n\nLockdep log:\n\n[   48.808132]\n[   48.808132] the existing dependency chain (in reverse order) is:\n[   48.809069]\n[   48.809069] -> #2 (kn->count){++++}:\n[   48.809707]        __kernfs_remove.llvm.7860393000964815146+0x2d4/0x460\n[   48.810537]        kernfs_remove_by_name_ns+0x54/0x9c\n[   48.811171]        sysfs_remove_file_ns+0x18/0x24\n[   48.811762]        device_del+0x2b8/0x5a8\n[   48.812269]        __device_link_del+0x98/0xb8\n[   48.812829]        device_links_driver_bound+0x210/0x2d8\n[   48.813496]        driver_bound+0x44/0xf8\n[   48.814000]        really_probe+0x340/0x6e0\n[   48.814526]        driver_probe_device+0xb8/0x100\n[   48.815117]        device_driver_attach+0x78/0xb8\n[   48.815708]        __driver_attach+0xe0/0x194\n[   48.816255]        bus_for_each_dev+0xa8/0x11c\n[   48.816816]        driver_attach+0x24/0x30\n[   48.817331]        bus_add_driver+0x100/0x1e0\n[   48.817880]        driver_register+0x78/0x114\n[   48.818427]        __platform_driver_register+0x44/0x50\n[   48.819089]        0xffffffdbb3227038\n[   48.819551]        do_one_initcall+0xd8/0x1e0\n[   48.820099]        do_init_module+0xd8/0x298\n[   48.820636]        load_module+0x3afc/0x44c8\n[   48.821173]        __arm64_sys_finit_module+0xbc/0xf0\n[   48.821807]        el0_svc_common+0xbc/0x1d0\n[   48.822344]        el0_svc_handler+0x74/0x98\n[   48.822882]        el0_svc+0x8/0xc\n[   48.823310]\n[   48.823310] -> #1 (device_links_lock){+.+.}:\n[   48.824036]        __mutex_lock_common+0xe0/0xe44\n[   48.824626]        mutex_lock_nested+0x28/0x34\n[   48.825185]        device_link_add+0xd4/0x4ec\n[   48.825734]        of_link_to_suppliers+0x158/0x204\n[   48.826347]        of_fwnode_add_links+0x50/0x64\n[   48.826928]        device_link_add_missing_supplier_links+0x90/0x11c\n[   48.827725]        fw_devlink_resume+0x58/0x130\n[   48.828296]        of_platform_default_populate_init+0xb4/0xd0\n[   48.829030]        do_one_initcall+0xd8/0x1e0\n[   48.829578]        do_initcall_level+0xb8/0xcc\n[   48.830137]        do_basic_setup+0x60/0x7c\n[   48.830662]        kernel_init_freeable+0x128/0x1ac\n[   48.831275]        kernel_init+0x18/0x29c\n[   48.831781]        ret_from_fork+0x10/0x18\n[   48.832297]\n[   48.832297] -> #0 (wfs_lock){+.+.}:\n[   48.832922]        __lock_acquire+0xe04/0x2e20\n[   48.833480]        lock_acquire+0xbc/0xec\n[   48.833984]        __mutex_lock_common+0xe0/0xe44\n[   48.834577]        mutex_lock_nested+0x28/0x34\n[   48.835136]        waiting_for_supplier_show+0x3c/0x98\n[   48.835781]        dev_attr_show+0x48/0xb4\n[   48.836295]        sysfs_kf_seq_show+0xe8/0x184\n[   48.836864]        kernfs_seq_show+0x48/0x8c\n[   48.837401]        seq_read+0x1c8/0x600\n[   48.837884]        kernfs_fop_read+0x68/0x204\n[   48.838431]        __vfs_read+0x60/0x214\n[   48.838925]        vfs_read+0xbc/0x15c\n[   48.839397]        ksys_read+0x78/0xe4\n[   48.839869]        __arm64_sys_read+0x1c/0x28\n[   48.840416]        el0_svc_common+0xbc/0x1d0\n[   48.840953]        el0_svc_handler+0x74/0x98\n[   48.841490]        el0_svc+0x8/0xc\n[   48.841917]\n[   48.841917] other info that might help us debug this:\n[   48.841917]\n[   48.842920] Chain exists of:\n[   48.842920]   wfs_lock --> device_links_lock --> kn->count\n[   48.842920]\n[   48.844152]  Possible unsafe locking scenario:\n[   48.844152]\n[   48.844895]        CPU0                    CPU1\n[   48.845463]        ----                    ----\n[   48.846032]   lock(kn->count);\n[   48.846417]                                lock(device_links_lock);\n[   48.847203]                                lock(kn->count);\n[   48.847902]   lock(wfs_lock);\n[   48.848276]\n[   48.848276]  *** DEADLOCK ***\n\nReported-by: Cheng-Jui.Wang@mediatek.com\nSigned-off-by: Saravana Kannan <saravanak@google.com>\nLink: https://lore.kernel.org/r/20201104205431.3795207-1-saravanak@google.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/base/core.c||drivers/base/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/base/core.c||drivers/base/core.c": [
          "File: drivers/base/core.c -> drivers/base/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062:  bool val;",
          "1064:  device_lock(dev);",
          "1066:  val = !list_empty(&dev->links.needs_suppliers)",
          "1067:        && dev->links.need_for_probe;",
          "1069:  device_unlock(dev);",
          "1070:  return sysfs_emit(buf, \"%u\\n\", val);",
          "1071: }",
          "",
          "[Removed Lines]",
          "1065:  mutex_lock(&wfs_lock);",
          "1068:  mutex_unlock(&wfs_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1922a46b8c18cb09d33e06a6cc2e43844ac1b9d0",
      "candidate_info": {
        "commit_hash": "1922a46b8c18cb09d33e06a6cc2e43844ac1b9d0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1922a46b8c18cb09d33e06a6cc2e43844ac1b9d0",
        "files": [
          "net/ncsi/ncsi-manage.c",
          "net/ncsi/ncsi-netlink.c",
          "net/ncsi/ncsi-netlink.h"
        ],
        "message": "net/ncsi: Fix netlink registration\n\nIf a user unbinds and re-binds a NC-SI aware driver the kernel will\nattempt to register the netlink interface at runtime. The structure is\nmarked __ro_after_init so registration fails spectacularly at this point.\n\n # echo 1e660000.ethernet > /sys/bus/platform/drivers/ftgmac100/unbind\n # echo 1e660000.ethernet > /sys/bus/platform/drivers/ftgmac100/bind\n  ftgmac100 1e660000.ethernet: Read MAC address 52:54:00:12:34:56 from chip\n  ftgmac100 1e660000.ethernet: Using NCSI interface\n  8<--- cut here ---\n  Unable to handle kernel paging request at virtual address 80a8f858\n  pgd = 8c768dd6\n  [80a8f858] *pgd=80a0841e(bad)\n  Internal error: Oops: 80d [#1] SMP ARM\n  CPU: 0 PID: 116 Comm: sh Not tainted 5.10.0-rc3-next-20201111-00003-gdd25b227ec1e #51\n  Hardware name: Generic DT based system\n  PC is at genl_register_family+0x1f8/0x6d4\n  LR is at 0xff26ffff\n  pc : [<8073f930>]    lr : [<ff26ffff>]    psr: 20000153\n  sp : 8553bc80  ip : 81406244  fp : 8553bd04\n  r10: 8085d12c  r9 : 80a8f73c  r8 : 85739000\n  r7 : 00000017  r6 : 80a8f860  r5 : 80c8ab98  r4 : 80a8f858\n  r3 : 00000000  r2 : 00000000  r1 : 81406130  r0 : 00000017\n  Flags: nzCv  IRQs on  FIQs off  Mode SVC_32  ISA ARM  Segment none\n  Control: 00c5387d  Table: 85524008  DAC: 00000051\n  Process sh (pid: 116, stack limit = 0x1f1988d6)\n ...\n  Backtrace:\n  [<8073f738>] (genl_register_family) from [<80860ac0>] (ncsi_init_netlink+0x20/0x48)\n   r10:8085d12c r9:80c8fb0c r8:85739000 r7:00000000 r6:81218000 r5:85739000\n   r4:8121c000\n  [<80860aa0>] (ncsi_init_netlink) from [<8085d740>] (ncsi_register_dev+0x1b0/0x210)\n   r5:8121c400 r4:8121c000\n  [<8085d590>] (ncsi_register_dev) from [<805a8060>] (ftgmac100_probe+0x6e0/0x778)\n   r10:00000004 r9:80950228 r8:8115bc10 r7:8115ab00 r6:9eae2c24 r5:813b6f88\n   r4:85739000\n  [<805a7980>] (ftgmac100_probe) from [<805355ec>] (platform_drv_probe+0x58/0xa8)\n   r9:80c76bb0 r8:00000000 r7:80cd4974 r6:80c76bb0 r5:8115bc10 r4:00000000\n  [<80535594>] (platform_drv_probe) from [<80532d58>] (really_probe+0x204/0x514)\n   r7:80cd4974 r6:00000000 r5:80cd4868 r4:8115bc10\n\nJakub pointed out that ncsi_register_dev is obviously broken, because\nthere is only one family so it would never work if there was more than\none ncsi netdev.\n\nFix the crash by registering the netlink family once on boot, and drop\nthe code to unregister it.\n\nFixes: 955dc68cb9b2 (\"net/ncsi: Add generic netlink family\")\nSigned-off-by: Joel Stanley <joel@jms.id.au>\nReviewed-by: Samuel Mendoza-Jonas <sam@mendozajonas.com>\nLink: https://lore.kernel.org/r/20201112061210.914621-1-joel@jms.id.au\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "net/ncsi/ncsi-manage.c||net/ncsi/ncsi-manage.c",
          "net/ncsi/ncsi-netlink.c||net/ncsi/ncsi-netlink.c",
          "net/ncsi/ncsi-netlink.h||net/ncsi/ncsi-netlink.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ncsi/ncsi-manage.c||net/ncsi/ncsi-manage.c": [
          "File: net/ncsi/ncsi-manage.c -> net/ncsi/ncsi-manage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:  ndp->ptype.dev = dev;",
          "1727:  dev_add_pack(&ndp->ptype);",
          "1732:  pdev = to_platform_device(dev->dev.parent);",
          "1733:  if (pdev) {",
          "1734:   np = pdev->dev.of_node;",
          "",
          "[Removed Lines]",
          "1730:  ncsi_init_netlink(dev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1892:  list_del_rcu(&ndp->node);",
          "1893:  spin_unlock_irqrestore(&ncsi_dev_lock, flags);",
          "1897:  kfree(ndp);",
          "1898: }",
          "1899: EXPORT_SYMBOL_GPL(ncsi_unregister_dev);",
          "",
          "[Removed Lines]",
          "1895:  ncsi_unregister_netlink(nd->dev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/ncsi/ncsi-netlink.c||net/ncsi/ncsi-netlink.c": [
          "File: net/ncsi/ncsi-netlink.c -> net/ncsi/ncsi-netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "766:  .n_small_ops = ARRAY_SIZE(ncsi_ops),",
          "767: };",
          "770: {",
          "789: }",
          "",
          "[Removed Lines]",
          "769: int ncsi_init_netlink(struct net_device *dev)",
          "771:  int rc;",
          "773:  rc = genl_register_family(&ncsi_genl_family);",
          "774:  if (rc)",
          "775:   netdev_err(dev, \"ncsi: failed to register netlink family\\n\");",
          "777:  return rc;",
          "778: }",
          "780: int ncsi_unregister_netlink(struct net_device *dev)",
          "781: {",
          "782:  int rc;",
          "784:  rc = genl_unregister_family(&ncsi_genl_family);",
          "785:  if (rc)",
          "786:   netdev_err(dev, \"ncsi: failed to unregister netlink family\\n\");",
          "788:  return rc;",
          "",
          "[Added Lines]",
          "769: static int __init ncsi_init_netlink(void)",
          "771:  return genl_register_family(&ncsi_genl_family);",
          "773: subsys_initcall(ncsi_init_netlink);",
          "",
          "---------------"
        ],
        "net/ncsi/ncsi-netlink.h||net/ncsi/ncsi-netlink.h": [
          "File: net/ncsi/ncsi-netlink.h -> net/ncsi/ncsi-netlink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:      struct nlmsghdr *nlhdr,",
          "23:      int err);",
          "",
          "[Removed Lines]",
          "25: int ncsi_init_netlink(struct net_device *dev);",
          "26: int ncsi_unregister_netlink(struct net_device *dev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f23277a49e68f8a9355385c846939ad0b1261e7",
      "candidate_info": {
        "commit_hash": "6f23277a49e68f8a9355385c846939ad0b1261e7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6f23277a49e68f8a9355385c846939ad0b1261e7",
        "files": [
          "fs/btrfs/qgroup.c"
        ],
        "message": "btrfs: qgroup: don't commit transaction when we already hold the handle\n\n[BUG]\nWhen running the following script, btrfs will trigger an ASSERT():\n\n  #/bin/bash\n  mkfs.btrfs -f $dev\n  mount $dev $mnt\n  xfs_io -f -c \"pwrite 0 1G\" $mnt/file\n  sync\n  btrfs quota enable $mnt\n  btrfs quota rescan -w $mnt\n\n  # Manually set the limit below current usage\n  btrfs qgroup limit 512M $mnt $mnt\n\n  # Crash happens\n  touch $mnt/file\n\nThe dmesg looks like this:\n\n  assertion failed: refcount_read(&trans->use_count) == 1, in fs/btrfs/transaction.c:2022\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/ctree.h:3230!\n  invalid opcode: 0000 [#1] SMP PTI\n  RIP: 0010:assertfail.constprop.0+0x18/0x1a [btrfs]\n   btrfs_commit_transaction.cold+0x11/0x5d [btrfs]\n   try_flush_qgroup+0x67/0x100 [btrfs]\n   __btrfs_qgroup_reserve_meta+0x3a/0x60 [btrfs]\n   btrfs_delayed_update_inode+0xaa/0x350 [btrfs]\n   btrfs_update_inode+0x9d/0x110 [btrfs]\n   btrfs_dirty_inode+0x5d/0xd0 [btrfs]\n   touch_atime+0xb5/0x100\n   iterate_dir+0xf1/0x1b0\n   __x64_sys_getdents64+0x78/0x110\n   do_syscall_64+0x33/0x80\n   entry_SYSCALL_64_after_hwframe+0x44/0xa9\n  RIP: 0033:0x7fb5afe588db\n\n[CAUSE]\nIn try_flush_qgroup(), we assume we don't hold a transaction handle at\nall.  This is true for data reservation and mostly true for metadata.\nSince data space reservation always happens before we start a\ntransaction, and for most metadata operation we reserve space in\nstart_transaction().\n\nBut there is an exception, btrfs_delayed_inode_reserve_metadata().\nIt holds a transaction handle, while still trying to reserve extra\nmetadata space.\n\nWhen we hit EDQUOT inside btrfs_delayed_inode_reserve_metadata(), we\nwill join current transaction and commit, while we still have\ntransaction handle from qgroup code.\n\n[FIX]\nLet's check current->journal before we join the transaction.\n\nIf current->journal is unset or BTRFS_SEND_TRANS_STUB, it means\nwe are not holding a transaction, thus are able to join and then commit\ntransaction.\n\nIf current->journal is a valid transaction handle, we avoid committing\ntransaction and just end it\n\nThis is less effective than committing current transaction, as it won't\nfree metadata reserved space, but we may still free some data space\nbefore new data writes.\n\nBugzilla: https://bugzilla.suse.com/show_bug.cgi?id=1178634\nFixes: c53e9653605d (\"btrfs: qgroup: try to flush qgroup space when we get -EDQUOT\")\nReviewed-by: Filipe Manana <fdmanana@suse.com>\nSigned-off-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/qgroup.c||fs/btrfs/qgroup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/qgroup.c||fs/btrfs/qgroup.c": [
          "File: fs/btrfs/qgroup.c -> fs/btrfs/qgroup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3512: {",
          "3513:  struct btrfs_trans_handle *trans;",
          "3514:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3515:  bool can_commit = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3523:   return 0;",
          "3524:  }",
          "3526:  ret = btrfs_start_delalloc_snapshot(root);",
          "3527:  if (ret < 0)",
          "3528:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3537:  if (current->journal_info &&",
          "3538:      current->journal_info != BTRFS_SEND_TRANS_STUB)",
          "3539:   can_commit = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3534:   goto out;",
          "3535:  }",
          "3538: out:",
          "3539:  clear_bit(BTRFS_ROOT_QGROUP_FLUSHING, &root->state);",
          "3540:  wake_up(&root->qgroup_flush_wait);",
          "",
          "[Removed Lines]",
          "3537:  ret = btrfs_commit_transaction(trans);",
          "",
          "[Added Lines]",
          "3552:  if (can_commit)",
          "3553:   ret = btrfs_commit_transaction(trans);",
          "3554:  else",
          "3555:   ret = btrfs_end_transaction(trans);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e35df62e04cc6fc4b9d90d054732f138349ff9b1",
      "candidate_info": {
        "commit_hash": "e35df62e04cc6fc4b9d90d054732f138349ff9b1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e35df62e04cc6fc4b9d90d054732f138349ff9b1",
        "files": [
          "drivers/net/ethernet/microchip/lan743x_main.c"
        ],
        "message": "lan743x: fix issue causing intermittent kernel log warnings\n\nWhen running this chip on arm imx6, we intermittently observe\nthe following kernel warning in the log, especially when the\nsystem is under high load:\n\n[   50.119484] ------------[ cut here ]------------\n[   50.124377] WARNING: CPU: 0 PID: 303 at kernel/softirq.c:169 __local_bh_enable_ip+0x100/0x184\n[   50.132925] IRQs not enabled as expected\n[   50.159250] CPU: 0 PID: 303 Comm: rngd Not tainted 5.7.8 #1\n[   50.164837] Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)\n[   50.171395] [<c0111a38>] (unwind_backtrace) from [<c010be28>] (show_stack+0x10/0x14)\n[   50.179162] [<c010be28>] (show_stack) from [<c05b9dec>] (dump_stack+0xac/0xd8)\n[   50.186408] [<c05b9dec>] (dump_stack) from [<c0122e40>] (__warn+0xd0/0x10c)\n[   50.193391] [<c0122e40>] (__warn) from [<c0123238>] (warn_slowpath_fmt+0x98/0xc4)\n[   50.200892] [<c0123238>] (warn_slowpath_fmt) from [<c012b010>] (__local_bh_enable_ip+0x100/0x184)\n[   50.209860] [<c012b010>] (__local_bh_enable_ip) from [<bf09ecbc>] (destroy_conntrack+0x48/0xd8 [nf_conntrack])\n[   50.220038] [<bf09ecbc>] (destroy_conntrack [nf_conntrack]) from [<c0ac9b58>] (nf_conntrack_destroy+0x94/0x168)\n[   50.230160] [<c0ac9b58>] (nf_conntrack_destroy) from [<c0a4aaa0>] (skb_release_head_state+0xa0/0xd0)\n[   50.239314] [<c0a4aaa0>] (skb_release_head_state) from [<c0a4aadc>] (skb_release_all+0xc/0x24)\n[   50.247946] [<c0a4aadc>] (skb_release_all) from [<c0a4b4cc>] (consume_skb+0x74/0x17c)\n[   50.255796] [<c0a4b4cc>] (consume_skb) from [<c081a2dc>] (lan743x_tx_release_desc+0x120/0x124)\n[   50.264428] [<c081a2dc>] (lan743x_tx_release_desc) from [<c081a98c>] (lan743x_tx_napi_poll+0x5c/0x18c)\n[   50.273755] [<c081a98c>] (lan743x_tx_napi_poll) from [<c0a6b050>] (net_rx_action+0x118/0x4a4)\n[   50.282306] [<c0a6b050>] (net_rx_action) from [<c0101364>] (__do_softirq+0x13c/0x53c)\n[   50.290157] [<c0101364>] (__do_softirq) from [<c012b29c>] (irq_exit+0x150/0x17c)\n[   50.297575] [<c012b29c>] (irq_exit) from [<c0196a08>] (__handle_domain_irq+0x60/0xb0)\n[   50.305423] [<c0196a08>] (__handle_domain_irq) from [<c05d44fc>] (gic_handle_irq+0x4c/0x90)\n[   50.313790] [<c05d44fc>] (gic_handle_irq) from [<c0100ed4>] (__irq_usr+0x54/0x80)\n[   50.321287] Exception stack(0xecd99fb0 to 0xecd99ff8)\n[   50.326355] 9fa0:                                     1cf1aa74 00000001 00000001 00000000\n[   50.334547] 9fc0: 00000001 00000000 00000000 00000000 00000000 00000000 00004097 b6d17d14\n[   50.342738] 9fe0: 00000001 b6d17c60 00000000 b6e71f94 800b0010 ffffffff\n[   50.349364] irq event stamp: 2525027\n[   50.352955] hardirqs last  enabled at (2525026): [<c0a6afec>] net_rx_action+0xb4/0x4a4\n[   50.360892] hardirqs last disabled at (2525027): [<c0d6d2fc>] _raw_spin_lock_irqsave+0x1c/0x50\n[   50.369517] softirqs last  enabled at (2524660): [<c01015b4>] __do_softirq+0x38c/0x53c\n[   50.377446] softirqs last disabled at (2524693): [<c012b29c>] irq_exit+0x150/0x17c\n[   50.385027] ---[ end trace c0b571db4bc8087d ]---\n\nThe driver is calling dev_kfree_skb() from code inside a spinlock,\nwhere h/w interrupts are disabled. This is forbidden, as documented\nin include/linux/netdevice.h. The correct function to use\ndev_kfree_skb_irq(), or dev_kfree_skb_any().\n\nFix by using the correct dev_kfree_skb_xxx() functions:\n\nin lan743x_tx_release_desc():\n  called by lan743x_tx_release_completed_descriptors()\n    called by in lan743x_tx_napi_poll()\n    which holds a spinlock\n  called by lan743x_tx_release_all_descriptors()\n    called by lan743x_tx_close()\n    which can-sleep\nconclusion: use dev_kfree_skb_any()\n\nin lan743x_tx_xmit_frame():\n  which holds a spinlock\nconclusion: use dev_kfree_skb_irq()\n\nin lan743x_tx_close():\n  which can-sleep\nconclusion: use dev_kfree_skb()\n\nin lan743x_rx_release_ring_element():\n  called by lan743x_rx_close()\n    which can-sleep\n  called by lan743x_rx_open()\n    which can-sleep\nconclusion: use dev_kfree_skb()\n\nFixes: 23f0703c125b (\"lan743x: Add main source files for new lan743x driver\")\nSigned-off-by: Sven Van Asbroeck <thesven73@gmail.com>\nLink: https://lore.kernel.org/r/20201112185949.11315-1-TheSven73@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "drivers/net/ethernet/microchip/lan743x_main.c||drivers/net/ethernet/microchip/lan743x_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/microchip/lan743x_main.c||drivers/net/ethernet/microchip/lan743x_main.c": [
          "File: drivers/net/ethernet/microchip/lan743x_main.c -> drivers/net/ethernet/microchip/lan743x_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307:   goto clear_active;",
          "1309:  if (!(buffer_info->flags & TX_BUFFER_INFO_FLAG_TIMESTAMP_REQUESTED)) {",
          "1311:   goto clear_skb;",
          "1312:  }",
          "1314:  if (cleanup) {",
          "1315:   lan743x_ptp_unrequest_tx_timestamp(tx->adapter);",
          "1317:  } else {",
          "1318:   ignore_sync = (buffer_info->flags &",
          "1319:           TX_BUFFER_INFO_FLAG_IGNORE_SYNC) != 0;",
          "",
          "[Removed Lines]",
          "1310:   dev_kfree_skb(buffer_info->skb);",
          "1316:   dev_kfree_skb(buffer_info->skb);",
          "",
          "[Added Lines]",
          "1310:   dev_kfree_skb_any(buffer_info->skb);",
          "1316:   dev_kfree_skb_any(buffer_info->skb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1623:  if (required_number_of_descriptors >",
          "1624:   lan743x_tx_get_avail_desc(tx)) {",
          "1625:   if (required_number_of_descriptors > (tx->ring_size - 1)) {",
          "1627:   } else {",
          "1629:    tx->overflow_skb = skb;",
          "",
          "[Removed Lines]",
          "1626:    dev_kfree_skb(skb);",
          "",
          "[Added Lines]",
          "1626:    dev_kfree_skb_irq(skb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1656:        start_frame_length,",
          "1657:        do_timestamp,",
          "1658:        skb->ip_summed == CHECKSUM_PARTIAL)) {",
          "1660:   goto unlock;",
          "1661:  }",
          "",
          "[Removed Lines]",
          "1659:   dev_kfree_skb(skb);",
          "",
          "[Added Lines]",
          "1659:   dev_kfree_skb_irq(skb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1679:    goto unlock;",
          "1680:   }",
          "1681:  }",
          "",
          "[Removed Lines]",
          "1678:    dev_kfree_skb(skb);",
          "",
          "[Added Lines]",
          "1678:    dev_kfree_skb_irq(skb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "630f512280604eecae0ddc2b3f8402f7931c56fd",
      "candidate_info": {
        "commit_hash": "630f512280604eecae0ddc2b3f8402f7931c56fd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/630f512280604eecae0ddc2b3f8402f7931c56fd",
        "files": [
          "drivers/gpu/drm/nouveau/nouveau_connector.c"
        ],
        "message": "drm/nouveau/kms: Fix NULL pointer dereference in nouveau_connector_detect_depth\n\nThis oops manifests itself on the following hardware:\n01:00.0 VGA compatible controller: NVIDIA Corporation G98M [GeForce G 103M] (rev a1)\n\nOct 09 14:17:46 lp-sasha kernel: BUG: kernel NULL pointer dereference, address: 0000000000000000\nOct 09 14:17:46 lp-sasha kernel: #PF: supervisor read access in kernel mode\nOct 09 14:17:46 lp-sasha kernel: #PF: error_code(0x0000) - not-present page\nOct 09 14:17:46 lp-sasha kernel: PGD 0 P4D 0\nOct 09 14:17:46 lp-sasha kernel: Oops: 0000 [#1] SMP PTI\nOct 09 14:17:46 lp-sasha kernel: CPU: 1 PID: 191 Comm: systemd-udevd Not tainted 5.9.0-rc8-next-20201009 #38\nOct 09 14:17:46 lp-sasha kernel: Hardware name: Hewlett-Packard Compaq Presario CQ61 Notebook PC/306A, BIOS F.03 03/23/2009\nOct 09 14:17:46 lp-sasha kernel: RIP: 0010:nouveau_connector_detect_depth+0x71/0xc0 [nouveau]\nOct 09 14:17:46 lp-sasha kernel: Code: 0a 00 00 48 8b 49 48 c7 87 b8 00 00 00 06 00 00 00 80 b9 4d 0a 00 00 00 75 1e 83 fa 41 75 05 48 85 c0 75 29 8b 81 10 0d 00 00 <39> 06 7c 25 f6 81 14 0d 00 00 02 75 b7 c3 80 b9 0c 0d 00 00 00 75\nOct 09 14:17:46 lp-sasha kernel: RSP: 0018:ffffc9000028f8c0 EFLAGS: 00010297\nOct 09 14:17:46 lp-sasha kernel: RAX: 0000000000014c08 RBX: ffff8880369d4000 RCX: ffff8880369d3000\nOct 09 14:17:46 lp-sasha kernel: RDX: 0000000000000040 RSI: 0000000000000000 RDI: ffff8880369d4000\nOct 09 14:17:46 lp-sasha kernel: RBP: ffff88800601cc00 R08: ffff8880051da298 R09: ffffffff8226201a\nOct 09 14:17:46 lp-sasha kernel: R10: ffff88800469aa80 R11: ffff888004c84ff8 R12: 0000000000000000\nOct 09 14:17:46 lp-sasha kernel: R13: ffff8880051da000 R14: 0000000000002000 R15: 0000000000000003\nOct 09 14:17:46 lp-sasha kernel: FS:  00007fd0192b3440(0000) GS:ffff8880bc900000(0000) knlGS:0000000000000000\nOct 09 14:17:46 lp-sasha kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nOct 09 14:17:46 lp-sasha kernel: CR2: 0000000000000000 CR3: 0000000004976000 CR4: 00000000000006e0\nOct 09 14:17:46 lp-sasha kernel: Call Trace:\nOct 09 14:17:46 lp-sasha kernel:  nouveau_connector_get_modes+0x1e6/0x240 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  ? kfree+0xb9/0x240\nOct 09 14:17:46 lp-sasha kernel:  ? drm_connector_list_iter_next+0x7c/0xa0\nOct 09 14:17:46 lp-sasha kernel:  drm_helper_probe_single_connector_modes+0x1ba/0x7c0\nOct 09 14:17:46 lp-sasha kernel:  drm_client_modeset_probe+0x27e/0x1360\nOct 09 14:17:46 lp-sasha kernel:  ? nvif_object_sclass_put+0xc/0x20 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  ? nouveau_cli_init+0x3cc/0x440 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  ? ktime_get_mono_fast_ns+0x49/0xa0\nOct 09 14:17:46 lp-sasha kernel:  ? nouveau_drm_open+0x4e/0x180 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  __drm_fb_helper_initial_config_and_unlock+0x3f/0x4a0\nOct 09 14:17:46 lp-sasha kernel:  ? drm_file_alloc+0x18f/0x260\nOct 09 14:17:46 lp-sasha kernel:  ? mutex_lock+0x9/0x40\nOct 09 14:17:46 lp-sasha kernel:  ? drm_client_init+0x110/0x160\nOct 09 14:17:46 lp-sasha kernel:  nouveau_fbcon_init+0x14d/0x1c0 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  nouveau_drm_device_init+0x1c0/0x880 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  nouveau_drm_probe+0x11a/0x1e0 [nouveau]\nOct 09 14:17:46 lp-sasha kernel:  pci_device_probe+0xcd/0x140\nOct 09 14:17:46 lp-sasha kernel:  really_probe+0xd8/0x400\nOct 09 14:17:46 lp-sasha kernel:  driver_probe_device+0x4a/0xa0\nOct 09 14:17:46 lp-sasha kernel:  device_driver_attach+0x9c/0xc0\nOct 09 14:17:46 lp-sasha kernel:  __driver_attach+0x6f/0x100\nOct 09 14:17:46 lp-sasha kernel:  ? device_driver_attach+0xc0/0xc0\nOct 09 14:17:46 lp-sasha kernel:  bus_for_each_dev+0x75/0xc0\nOct 09 14:17:46 lp-sasha kernel:  bus_add_driver+0x106/0x1c0\nOct 09 14:17:46 lp-sasha kernel:  driver_register+0x86/0xe0\nOct 09 14:17:46 lp-sasha kernel:  ? 0xffffffffa044e000\nOct 09 14:17:46 lp-sasha kernel:  do_one_initcall+0x48/0x1e0\nOct 09 14:17:46 lp-sasha kernel:  ? _cond_resched+0x11/0x60\nOct 09 14:17:46 lp-sasha kernel:  ? kmem_cache_alloc_trace+0x19c/0x1e0\nOct 09 14:17:46 lp-sasha kernel:  do_init_module+0x57/0x220\nOct 09 14:17:46 lp-sasha kernel:  __do_sys_finit_module+0xa0/0xe0\nOct 09 14:17:46 lp-sasha kernel:  do_syscall_64+0x33/0x40\nOct 09 14:17:46 lp-sasha kernel:  entry_SYSCALL_64_after_hwframe+0x44/0xa9\nOct 09 14:17:46 lp-sasha kernel: RIP: 0033:0x7fd01a060d5d\nOct 09 14:17:46 lp-sasha kernel: Code: 00 c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d e3 70 0c 00 f7 d8 64 89 01 48\nOct 09 14:17:46 lp-sasha kernel: RSP: 002b:00007ffc8ad38a98 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nOct 09 14:17:46 lp-sasha kernel: RAX: ffffffffffffffda RBX: 0000563f6e7fd530 RCX: 00007fd01a060d5d\nOct 09 14:17:46 lp-sasha kernel: RDX: 0000000000000000 RSI: 00007fd01a19f95d RDI: 000000000000000f\nOct 09 14:17:46 lp-sasha kernel: RBP: 0000000000020000 R08: 0000000000000000 R09: 0000000000000007\nOct 09 14:17:46 lp-sasha kernel: R10: 000000000000000f R11: 0000000000000246 R12: 00007fd01a19f95d\nOct 09 14:17:46 lp-sasha kernel: R13: 0000000000000000 R14: 0000563f6e7fbc10 R15: 0000563f6e7fd530\nOct 09 14:17:46 lp-sasha kernel: Modules linked in: nouveau(+) ttm xt_string xt_mark xt_LOG vgem v4l2_dv_timings uvcvideo ulpi udf ts_kmp ts_fsm ts_bm snd_aloop sil164 qat_dh895xccvf nf_nat_sip nf_nat_irc nf_nat_ftp nf_nat nf_log_ipv6 nf_log_ipv4 nf_log_common ltc2990 lcd intel_qat input_leds i2c_mux gspca_main videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_common videodev mc drivetemp cuse fuse crc_itu_t coretemp ch7006 ath5k ath algif_hash\nOct 09 14:17:46 lp-sasha kernel: CR2: 0000000000000000\nOct 09 14:17:46 lp-sasha kernel: ---[ end trace 0ddafe218ad30017 ]---\nOct 09 14:17:46 lp-sasha kernel: RIP: 0010:nouveau_connector_detect_depth+0x71/0xc0 [nouveau]\nOct 09 14:17:46 lp-sasha kernel: Code: 0a 00 00 48 8b 49 48 c7 87 b8 00 00 00 06 00 00 00 80 b9 4d 0a 00 00 00 75 1e 83 fa 41 75 05 48 85 c0 75 29 8b 81 10 0d 00 00 <39> 06 7c 25 f6 81 14 0d 00 00 02 75 b7 c3 80 b9 0c 0d 00 00 00 75\nOct 09 14:17:46 lp-sasha kernel: RSP: 0018:ffffc9000028f8c0 EFLAGS: 00010297\nOct 09 14:17:46 lp-sasha kernel: RAX: 0000000000014c08 RBX: ffff8880369d4000 RCX: ffff8880369d3000\nOct 09 14:17:46 lp-sasha kernel: RDX: 0000000000000040 RSI: 0000000000000000 RDI: ffff8880369d4000\nOct 09 14:17:46 lp-sasha kernel: RBP: ffff88800601cc00 R08: ffff8880051da298 R09: ffffffff8226201a\nOct 09 14:17:46 lp-sasha kernel: R10: ffff88800469aa80 R11: ffff888004c84ff8 R12: 0000000000000000\nOct 09 14:17:46 lp-sasha kernel: R13: ffff8880051da000 R14: 0000000000002000 R15: 0000000000000003\nOct 09 14:17:46 lp-sasha kernel: FS:  00007fd0192b3440(0000) GS:ffff8880bc900000(0000) knlGS:0000000000000000\nOct 09 14:17:46 lp-sasha kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nOct 09 14:17:46 lp-sasha kernel: CR2: 0000000000000000 CR3: 0000000004976000 CR4: 00000000000006e0\n\nThe disassembly:\nCode: 0a 00 00 48 8b 49 48 c7 87 b8 00 00 00 06 00 00 00 80 b9 4d 0a 00 00 00 75 1e 83 fa 41 75 05 48 85 c0 75 29 8b 81 10 0d 00 00 <39> 06 7c 25 f6 81 14 0d 00 00 02 75 b7 c3 80 b9 0c 0d 00 00 00 75\nAll code\n========\n   0:   0a 00                   or     (%rax),%al\n   2:   00 48 8b                add    %cl,-0x75(%rax)\n   5:   49                      rex.WB\n   6:   48 c7 87 b8 00 00 00    movq   $0x6,0xb8(%rdi)\n   d:   06 00 00 00\n  11:   80 b9 4d 0a 00 00 00    cmpb   $0x0,0xa4d(%rcx)\n  18:   75 1e                   jne    0x38\n  1a:   83 fa 41                cmp    $0x41,%edx\n  1d:   75 05                   jne    0x24\n  1f:   48 85 c0                test   %rax,%rax\n  22:   75 29                   jne    0x4d\n  24:   8b 81 10 0d 00 00       mov    0xd10(%rcx),%eax\n  2a:*  39 06                   cmp    %eax,(%rsi)              <-- trapping instruction\n  2c:   7c 25                   jl     0x53\n  2e:   f6 81 14 0d 00 00 02    testb  $0x2,0xd14(%rcx)\n  35:   75 b7                   jne    0xffffffffffffffee\n  37:   c3                      retq\n  38:   80 b9 0c 0d 00 00 00    cmpb   $0x0,0xd0c(%rcx)\n  3f:   75                      .byte 0x75\n\nCode starting with the faulting instruction\n===========================================\n   0:   39 06                   cmp    %eax,(%rsi)\n   2:   7c 25                   jl     0x29\n   4:   f6 81 14 0d 00 00 02    testb  $0x2,0xd14(%rcx)\n   b:   75 b7                   jne    0xffffffffffffffc4\n   d:   c3                      retq\n   e:   80 b9 0c 0d 00 00 00    cmpb   $0x0,0xd0c(%rcx)\n  15:   75                      .byte 0x75\n\nobjdump -SF --disassemble=nouveau_connector_detect_depth\n[...]\n        if (nv_connector->edid &&\n   c85e1:       83 fa 41                cmp    $0x41,%edx\n   c85e4:       75 05                   jne    c85eb <nouveau_connector_detect_depth+0x6b> (File Offset: 0xc866b)\n   c85e6:       48 85 c0                test   %rax,%rax\n   c85e9:       75 29                   jne    c8614 <nouveau_connector_detect_depth+0x94> (File Offset: 0xc8694)\n            nv_connector->type == DCB_CONNECTOR_LVDS_SPWG)\n                duallink = ((u8 *)nv_connector->edid)[121] == 2;\n        else\n                duallink = mode->clock >= bios->fp.duallink_transition_clk;\n\n        if ((!duallink && (bios->fp.strapless_is_24bit & 1)) ||\n   c85eb:       8b 81 10 0d 00 00       mov    0xd10(%rcx),%eax\n   c85f1:       39 06                   cmp    %eax,(%rsi)\n   c85f3:       7c 25                   jl     c861a <nouveau_connector_detect_depth+0x9a> (File Offset: 0xc869a)\n            ( duallink && (bios->fp.strapless_is_24bit & 2)))\n   c85f5:       f6 81 14 0d 00 00 02    testb  $0x2,0xd14(%rcx)\n   c85fc:       75 b7                   jne    c85b5 <nouveau_connector_detect_depth+0x35> (File Offset: 0xc8635)\n                connector->display_info.bpc = 8;\n[...]\n\n% scripts/faddr2line /lib/modules/5.9.0-rc8-next-20201009/kernel/drivers/gpu/drm/nouveau/nouveau.ko nouveau_connector_detect_depth+0x71/0xc0\nnouveau_connector_detect_depth+0x71/0xc0:\nnouveau_connector_detect_depth at /home/sasha/linux-next/drivers/gpu/drm/nouveau/nouveau_connector.c:891\n\nIt is actually line 889. See the disassembly below.\n889                     duallink = mode->clock >= bios->fp.duallink_transition_clk;\n\nThe NULL pointer being dereferenced is mode.\n\nGit bisect has identified the following commit as bad:\nf28e32d3906e drm/nouveau/kms: Don't change EDID when it hasn't actually changed\n\nHere is the chain of events that causes the oops.\nOn entry to nouveau_connector_detect_lvds, edid is set to NULL.  The call\nto nouveau_connector_detect sets nv_connector->edid to valid memory,\nwith status set to connector_status_connected and the flow of execution\nbranching to the out label.\n\nThe subsequent call to nouveau_connector_set_edid erronously clears\nnv_connector->edid, via the local edid pointer which remains set to NULL.\n\nFix this by setting edid to the value of the just acquired\nnv_connector->edid and executing the body of nouveau_connector_set_edid\nonly if nv_connector->edid and edid point to different memory addresses\nthus preventing nv_connector->edid from being turned into a dangling\npointer.\n\nFixes: f28e32d3906e (\"drm/nouveau/kms: Don't change EDID when it hasn't actually changed\")\nSigned-off-by: Alexander Kapshuk <alexander.kapshuk@gmail.com>\nReviewed-by: Lyude Paul <lyude@redhat.com>\nSigned-off-by: Ben Skeggs <bskeggs@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/nouveau/nouveau_connector.c||drivers/gpu/drm/nouveau/nouveau_connector.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/nouveau/nouveau_connector.c||drivers/gpu/drm/nouveau/nouveau_connector.c": [
          "File: drivers/gpu/drm/nouveau/nouveau_connector.c -> drivers/gpu/drm/nouveau/nouveau_connector.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532: nouveau_connector_set_edid(struct nouveau_connector *nv_connector,",
          "533:       struct edid *edid)",
          "534: {",
          "540: }",
          "542: static enum drm_connector_status",
          "",
          "[Removed Lines]",
          "535:  struct edid *old_edid = nv_connector->edid;",
          "537:  drm_connector_update_edid_property(&nv_connector->base, edid);",
          "538:  kfree(old_edid);",
          "539:  nv_connector->edid = edid;",
          "",
          "[Added Lines]",
          "535:  if (nv_connector->edid != edid) {",
          "536:   struct edid *old_edid = nv_connector->edid;",
          "538:   drm_connector_update_edid_property(&nv_connector->base, edid);",
          "539:   kfree(old_edid);",
          "540:   nv_connector->edid = edid;",
          "541:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:  if (!drm->vbios.fp_no_ddc) {",
          "671:   status = nouveau_connector_detect(connector, force);",
          "673:    goto out;",
          "674:  }",
          "",
          "[Removed Lines]",
          "672:   if (status == connector_status_connected)",
          "",
          "[Added Lines]",
          "674:   if (status == connector_status_connected) {",
          "675:    edid = nv_connector->edid;",
          "677:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}