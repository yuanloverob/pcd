{
  "cve_id": "CVE-2022-0407",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "44db8213d38c39877d2148eff6a72f4beccfb94e",
  "patch_info": {
    "commit_hash": "44db8213d38c39877d2148eff6a72f4beccfb94e",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/44db8213d38c39877d2148eff6a72f4beccfb94e",
    "files": [
      "src/register.c",
      "src/testdir/test_visual.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4219: reading before the start of the line\n\nProblem:    Reading before the start of the line.\nSolution:   Check boundary before trying to read the character.",
    "before_after_code_files": [
      "src/register.c||src/register.c",
      "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/register.c||src/register.c": [
      "File: src/register.c -> src/register.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1474:     {",
      "1475:  int s = bd->textlen + bd->endspaces;",
      "1478:  {",
      "1479:      s = s - (*mb_head_off)(bd->textstart, bd->textstart + s - 1) - 1;",
      "1480:      pnew--;",
      "",
      "[Removed Lines]",
      "1477:  while (VIM_ISWHITE(*(bd->textstart + s - 1)) && s > 0)",
      "",
      "[Added Lines]",
      "1477:  while (s > 0 && VIM_ISWHITE(*(bd->textstart + s - 1)))",
      "",
      "---------------"
    ],
    "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
      "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1247:   bw!",
      "1248: endfunc",
      "1250: func Test_visual_block_with_virtualedit()",
      "1251:   CheckScreendump",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1250: func Test_visual_block_yank_zy()",
      "1251:   new",
      "1252:   \" this was reading before the start of the line",
      "1253:   exe \"norm o\\<C-T>\\<Esc>\\<C-V>zy\"",
      "1254:   bwipe!",
      "1255: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4218,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4219,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "544a38e44db0f25ec4fa7a2a4666cf28a2336f33",
      "candidate_info": {
        "commit_hash": "544a38e44db0f25ec4fa7a2a4666cf28a2336f33",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/544a38e44db0f25ec4fa7a2a4666cf28a2336f33",
        "files": [
          "runtime/doc/change.txt",
          "runtime/doc/index.txt",
          "src/normal.c",
          "src/ops.c",
          "src/register.c",
          "src/structs.h",
          "src/testdir/test_visual.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.2971: cannot yank a block without trailing spaces\n\nProblem:    Cannot yank a block without trailing spaces.\nSolution:   Add the \"zy\" command. (Christian Brabandt, closes #8292)",
        "before_after_code_files": [
          "src/normal.c||src/normal.c",
          "src/ops.c||src/ops.c",
          "src/register.c||src/register.c",
          "src/structs.h||src/structs.h",
          "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/register.c||src/register.c",
            "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/register.c||src/register.c",
            "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2985:     case 'P':",
          "2986:     case 'p':  nv_put(cap);",
          "2987:         break;",
          "2988: #ifdef FEAT_FOLDING",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2989:     case 'y':  nv_operator(cap);",
          "2990:         break;",
          "",
          "---------------"
        ],
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  return OP_NR_ADD;",
          "79:     if (char1 == 'g' && char2 == Ctrl_X) // subtract",
          "80:  return OP_NR_SUB;",
          "81:     for (i = 0; ; ++i)",
          "82:     {",
          "83:  if (opchars[i][0] == char1 && opchars[i][1] == char2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     if (char1 == 'z' && char2 == 'y') // OP_YANK",
          "82:  return OP_YANK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3894: #ifdef FEAT_LINEBREAK",
          "3895:   curwin->w_p_lbr = lbr_saved;",
          "3896: #endif",
          "3897:   (void)op_yank(oap, FALSE, !gui_yank);",
          "3898:      }",
          "3899:      check_cursor_col();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3899:   oap->excl_tr_ws = cap->cmdchar == 'z';",
          "",
          "---------------"
        ],
        "src/register.c||src/register.c": [
          "File: src/register.c -> src/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static void put_reedit_in_typebuf(int silent);",
          "33: static int put_in_typebuf(char_u *s, int esc, int colon,",
          "34:          int silent);",
          "36: #ifdef FEAT_CLIPBOARD",
          "37: static void copy_yank_reg(yankreg_T *reg);",
          "38: #endif",
          "",
          "[Removed Lines]",
          "35: static int yank_copy_line(struct block_def *bd, long y_idx);",
          "",
          "[Added Lines]",
          "35: static int yank_copy_line(struct block_def *bd, long y_idx, int exclude_trailing_space);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1208:  {",
          "1209:      case MBLOCK:",
          "1210:   block_prep(oap, &bd, lnum, FALSE);",
          "1212:       goto fail;",
          "1213:   break;",
          "1215:      case MLINE:",
          "1216:   if ((y_current->y_array[y_idx] =",
          "1218:       goto fail;",
          "1219:   break;",
          "1221:      case MCHAR:",
          "1222:   {",
          "1223:       colnr_T startcol = 0, endcol = MAXCOL;",
          "1225:       colnr_T cs, ce;",
          "1227:       p = ml_get(lnum);",
          "",
          "[Removed Lines]",
          "1211:   if (yank_copy_line(&bd, y_idx) == FAIL)",
          "1217:        vim_strsave(ml_get(lnum))) == NULL)",
          "1224:       int is_oneChar = FALSE;",
          "",
          "[Added Lines]",
          "1211:   if (yank_copy_line(&bd, y_idx, oap->excl_tr_ws) == FAIL)",
          "1217:          vim_strsave(ml_get(lnum))) == NULL)",
          "1224:       int     is_oneChar = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1282:       else",
          "1283:    bd.textlen = endcol - startcol + oap->inclusive;",
          "1284:       bd.textstart = p + startcol;",
          "1286:    goto fail;",
          "1287:       break;",
          "1288:   }",
          "",
          "[Removed Lines]",
          "1285:       if (yank_copy_line(&bd, y_idx) == FAIL)",
          "",
          "[Added Lines]",
          "1285:       if (yank_copy_line(&bd, y_idx, FALSE) == FAIL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1443:     return FAIL;",
          "1444: }",
          "1446:     static int",
          "1448: {",
          "1449:     char_u *pnew;",
          "",
          "[Removed Lines]",
          "1447: yank_copy_line(struct block_def *bd, long y_idx)",
          "",
          "[Added Lines]",
          "1451: yank_copy_line(struct block_def *bd, long y_idx, int exclude_trailing_space)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1458:     pnew += bd->textlen;",
          "1459:     vim_memset(pnew, ' ', (size_t)bd->endspaces);",
          "1460:     pnew += bd->endspaces;",
          "1462:     return OK;",
          "1463: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1465:     if (exclude_trailing_space)",
          "1466:     {",
          "1467:  int s = bd->textlen + bd->endspaces;",
          "1469:  while (VIM_ISWHITE(*(bd->textstart + s - 1)) && s > 0)",
          "1470:  {",
          "1471:      s = s - (*mb_head_off)(bd->textstart, bd->textstart + s - 1) - 1;",
          "1472:      pnew--;",
          "1473:  }",
          "1474:     }",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3789:     colnr_T end_vcol; // end col for block mode operator",
          "3790:     long prev_opcount; // ca.opcount saved for K_CURSORHOLD",
          "3791:     long prev_count0; // ca.count0 saved for K_CURSORHOLD",
          "3792: } oparg_T;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3792:     int  excl_tr_ws; // exclude trailing whitespace for yank of a",
          "",
          "---------------"
        ],
        "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
          "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1171:   bwipe!",
          "1172: endfunc",
          "1174: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1174: func Test_visual_put_in_block_using_zy_and_zp()",
          "1175:   new",
          "1177:   \" Test 1) Paste using zp - after the cursor without trailing spaces",
          "1178:   call setline(1, ['/path;text', '/path;text', '/path;text', '',",
          "1179:     \\ 'texttext  /subdir           columntext',",
          "1180:   \\ 'texttext  /longsubdir       columntext',",
          "1181:     \\ 'texttext  /longlongsubdir   columntext'])",
          "1182:   exe \"normal! 5G0f/\\<c-v>2jezy\"",
          "1183:   norm! 1G0f;hzp",
          "1184:   call assert_equal(['/path/subdir;text', '/path/longsubdir;text', '/path/longlongsubdir;text'], getline(1, 3))",
          "1186:   \" Test 2) Paste using zP - in front of the cursor without trailing spaces",
          "1187:   %d",
          "1188:   call setline(1, ['/path;text', '/path;text', '/path;text', '',",
          "1189:     \\ 'texttext  /subdir           columntext',",
          "1190:   \\ 'texttext  /longsubdir       columntext',",
          "1191:     \\ 'texttext  /longlongsubdir   columntext'])",
          "1192:   exe \"normal! 5G0f/\\<c-v>2jezy\"",
          "1193:   norm! 1G0f;zP",
          "1194:   call assert_equal(['/path/subdir;text', '/path/longsubdir;text', '/path/longlongsubdir;text'], getline(1, 3))",
          "1196:   \" Test 3) Paste using p - with trailing spaces",
          "1197:   %d",
          "1198:   call setline(1, ['/path;text', '/path;text', '/path;text', '',",
          "1199:     \\ 'texttext  /subdir           columntext',",
          "1200:   \\ 'texttext  /longsubdir       columntext',",
          "1201:     \\ 'texttext  /longlongsubdir   columntext'])",
          "1202:   exe \"normal! 5G0f/\\<c-v>2jezy\"",
          "1203:   norm! 1G0f;hp",
          "1204:   call assert_equal(['/path/subdir        ;text', '/path/longsubdir    ;text', '/path/longlongsubdir;text'], getline(1, 3))",
          "1206:   \" Test 4) Paste using P - with trailing spaces",
          "1207:   %d",
          "1208:   call setline(1, ['/path;text', '/path;text', '/path;text', '',",
          "1209:     \\ 'texttext  /subdir           columntext',",
          "1210:   \\ 'texttext  /longsubdir       columntext',",
          "1211:     \\ 'texttext  /longlongsubdir   columntext'])",
          "1212:   exe \"normal! 5G0f/\\<c-v>2jezy\"",
          "1213:   norm! 1G0f;P",
          "1214:   call assert_equal(['/path/subdir        ;text', '/path/longsubdir    ;text', '/path/longlongsubdir;text'], getline(1, 3))",
          "1216:   \" Test 5) Yank with spaces inside the block",
          "1217:   %d",
          "1218:   call setline(1, ['/path;text', '/path;text', '/path;text', '',",
          "1219:     \\ 'texttext  /sub    dir/           columntext',",
          "1220:     \\ 'texttext  /lon    gsubdir/       columntext',",
          "1221:     \\ 'texttext  /lon    glongsubdir/   columntext'])",
          "1222:   exe \"normal! 5G0f/\\<c-v>2jf/zy\"",
          "1223:   norm! 1G0f;zP",
          "1224:   call assert_equal(['/path/sub    dir/;text', '/path/lon    gsubdir/;text', '/path/lon    glongsubdir/;text'], getline(1, 3))",
          "1225:   bwipe!",
          "1226: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     2970,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     2971,",
          "",
          "---------------"
        ]
      }
    }
  ]
}