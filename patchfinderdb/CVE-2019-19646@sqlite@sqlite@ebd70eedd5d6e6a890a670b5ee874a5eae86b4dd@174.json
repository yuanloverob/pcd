{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
      "candidate_info": {
        "commit_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/window.c"
        ],
        "message": "Change the meaning of the SQLITE_SUBTYPE flag so that it indicates that the user-defined function cares about the subtypes of its arguments.\n\nFossilOrigin-Name: af1bc20f502816db460d2b2d353f715da5cf660e59095de5214c829c1cb20981",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                         SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_SUBTYPE,",
          "2508:                         (void*)&aFunc[i].flag,",
          "2509:                         aFunc[i].xFunc, 0, 0);",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869: }",
          "",
          "[Removed Lines]",
          "875: int exprListContainsSubtype(Parse *pParse, ExprList *pList){",
          "876:   if( pList ){",
          "877:     sqlite3 *db = pParse->db;",
          "878:     int i;",
          "879:     for(i=0; i<pList->nExpr; i++){",
          "880:       Expr *p = pList->a[i].pExpr;",
          "881:       if( p->op==TK_FUNCTION ){",
          "882:         FuncDef *pDef;",
          "883:         int nArg = 0;",
          "884:         if( !ExprHasProperty(p, EP_TokenOnly) && p->x.pList ){",
          "885:           nArg = p->x.pList->nExpr;",
          "886:         }",
          "887:         pDef = sqlite3FindFunction(db, p->u.zToken, nArg, db->enc, 0);",
          "888:         if( pDef && (pDef->funcFlags & SQLITE_FUNC_SUBTYPE) ){",
          "889:           return 1;",
          "890:         }",
          "891:       }",
          "892:     }",
          "893:   }",
          "894:   return 0;",
          "895: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "994:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "996:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "997:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "998:         pWin->bExprArgs = 1;",
          "",
          "[Removed Lines]",
          "995:       if( exprListContainsSubtype(pParse, pArgs) ){",
          "",
          "[Added Lines]",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8a8d523cbfa1371e35a4e5d1fc4727128e74ead",
      "candidate_info": {
        "commit_hash": "b8a8d523cbfa1371e35a4e5d1fc4727128e74ead",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8a8d523cbfa1371e35a4e5d1fc4727128e74ead",
        "files": [
          "ext/rbu/rbuprogress.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with RBU function sqlite3rbu_bp_progress() when used during an RBU vacuum.\n\nFossilOrigin-Name: 8c44b02f1479cec61554800702a3c1d806e4ee64b41ba2af17320f62794a02fe",
        "before_after_code_files": [
          "ext/rbu/rbuprogress.test||ext/rbu/rbuprogress.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuprogress.test||ext/rbu/rbuprogress.test": [
          "File: ext/rbu/rbuprogress.test -> ext/rbu/rbuprogress.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:   }",
          "415: }",
          "418: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: #-------------------------------------------------------------------------",
          "418: # Test that sqlite3_bp_progress() works with an RBU vacuum if there",
          "419: # is an rbu_count table in the db being vacuumed.",
          "420: #",
          "421: reset_db",
          "422: do_execsql_test 6.0 {",
          "423:   CREATE TABLE t1(a, b, c);",
          "424:   CREATE INDEX i1 ON t1(a);",
          "425:   CREATE INDEX i2 ON t1(b);",
          "426:   WITH s(i) AS (",
          "427:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<100",
          "428:   )",
          "429:   INSERT INTO t1 SELECT i, i, i FROM s;",
          "430:   CREATE TABLE rbu_count(tbl TEXT PRIMARY KEY, cnt INTEGER) WITHOUT ROWID;",
          "431:   INSERT INTO rbu_count VALUES('t1', (SELECT count(*) FROM t1));",
          "432:   INSERT INTO rbu_count VALUES('rbu_count', 2);",
          "433: }",
          "435: forcedelete state.db",
          "436: do_test 6.1 {",
          "437:   set maxA 0",
          "438:   set maxB 0",
          "439:   sqlite3rbu_vacuum rbu test.db state.db",
          "440:   while {[rbu step]==\"SQLITE_OK\"} {",
          "441:     foreach {a b} [rbu bp_progress] {",
          "442:       if {$a > $maxA} { set maxA $a }",
          "443:       if {$b > $maxB} { set maxB $b }",
          "444:     }",
          "445:   }",
          "446:   list [rbu close] $maxA $maxB",
          "447: } {SQLITE_DONE 10000 10000}",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:   zIn = (const char*)sqlite3_value_text(argv[0]);",
          "945:   if( zIn ){",
          "946:     if( rbuIsVacuum(p) ){",
          "949:         sqlite3_result_text(pCtx, zIn, -1, SQLITE_STATIC);",
          "950:       }",
          "951:     }else{",
          "",
          "[Removed Lines]",
          "947:       assert( argc==2 );",
          "948:       if( 0==sqlite3_value_int(argv[1]) ){",
          "",
          "[Added Lines]",
          "947:       assert( argc==2 || argc==1 );",
          "948:       if( argc==1 || 0==sqlite3_value_int(argv[1]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3860:   sqlite3_stmt *pStmt = 0;",
          "3861:   char *zErrmsg = 0;",
          "3862:   int rc;",
          "3864:   assert( nVal==1 );",
          "3867:       sqlite3_mprintf(\"SELECT count(*) FROM sqlite_master \"",
          "3868:         \"WHERE type='index' AND tbl_name = %Q\", sqlite3_value_text(apVal[0]))",
          "3869:   );",
          "",
          "[Removed Lines]",
          "3866:   rc = prepareFreeAndCollectError(p->dbMain, &pStmt, &zErrmsg,",
          "",
          "[Added Lines]",
          "3863:   sqlite3 *db = (rbuIsVacuum(p) ? p->dbRbu : p->dbMain);",
          "3867:   rc = prepareFreeAndCollectError(db, &pStmt, &zErrmsg,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3878:     if( rc==SQLITE_OK ){",
          "3879:       sqlite3_result_int(pCtx, nIndex);",
          "3880:     }else{",
          "3882:     }",
          "3883:   }",
          "",
          "[Removed Lines]",
          "3881:       sqlite3_result_error(pCtx, sqlite3_errmsg(p->dbMain), -1);",
          "",
          "[Added Lines]",
          "3882:       sqlite3_result_error(pCtx, sqlite3_errmsg(db), -1);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7dae7b969ed314605a3a2da2cfdce4d81152740f5d3bfbc2a6e311b13ee325a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0b7db91b8cc880ae7d5f3c334607fda17364d62",
      "candidate_info": {
        "commit_hash": "b0b7db91b8cc880ae7d5f3c334607fda17364d62",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0b7db91b8cc880ae7d5f3c334607fda17364d62",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "src/vdbe.c"
        ],
        "message": "Prototype implementation for the VACUUM INTO command.\n\nFossilOrigin-Name: 036e3320a4af36c1311b25b2e504b0079c8b33df8ad7b7e5fddad07150e6f87d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d8e150434bbd179696f1ffe71d1e06cb3d43e6468496c7e481fca8486387bad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368: %ifndef SQLITE_OMIT_VACUUM",
          "1369: %ifndef SQLITE_OMIT_ATTACH",
          "1372: %endif  SQLITE_OMIT_ATTACH",
          "1373: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Removed Lines]",
          "1370: cmd ::= VACUUM.                {sqlite3Vacuum(pParse,0);}",
          "1371: cmd ::= VACUUM nm(X).          {sqlite3Vacuum(pParse,&X);}",
          "",
          "[Added Lines]",
          "1370: %type vinto {Token}",
          "1371: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,&Y);}",
          "1372: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,&Y);}",
          "1373: vinto(A) ::= INTO nm(X).                {A = X;}",
          "1374: vinto(A) ::= .                          {A.z = 0;}",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3985: Index *sqlite3FindIndex(sqlite3*,const char*, const char*);",
          "3986: void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);",
          "3987: void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);",
          "3990: char *sqlite3NameFromToken(sqlite3*, Token*);",
          "3991: int sqlite3ExprCompare(Parse*,Expr*, Expr*, int);",
          "3992: int sqlite3ExprCompareSkip(Expr*, Expr*, int);",
          "",
          "[Removed Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int);",
          "",
          "[Added Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, const char*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "107:   int iDb = 0;",
          "108:   if( v==0 ) return;",
          "109:   if( pNm ){",
          "110: #ifndef SQLITE_BUG_COMPATIBLE_20160819",
          "",
          "[Removed Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm){",
          "",
          "[Added Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Token *pInto){",
          "108:   assert( pInto!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   if( iDb!=1 ){",
          "126:     sqlite3VdbeAddOp1(v, OP_Vacuum, iDb);",
          "127:     sqlite3VdbeUsesBtree(v, iDb);",
          "128:   }",
          "129:   return;",
          "130: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     if( pInto->z ){",
          "130:       char *zName = sqlite3NameFromToken(pParse->db, pInto);",
          "131:       sqlite3VdbeChangeP4(v, -1, zName, P4_DYNAMIC);",
          "132:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "135: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){",
          "",
          "[Added Lines]",
          "140: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb, const char *zOut){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   nDb = db->nDb;",
          "193:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "194:   assert( (db->nDb-1)==nDb );",
          "195:   pDb = &db->aDb[nDb];",
          "",
          "[Removed Lines]",
          "192:   rc = execSql(db, pzErrMsg, \"ATTACH''AS vacuum_db\");",
          "",
          "[Added Lines]",
          "197:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut ? zOut : \"\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:   rc = execSql(db, pzErrMsg, \"BEGIN\");",
          "227:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "229:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "228:   rc = sqlite3BtreeBeginTrans(pMain, 2, 0);",
          "",
          "[Added Lines]",
          "233:   rc = sqlite3BtreeBeginTrans(pMain, zOut==0 ? 2 : 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "320:     };",
          "322:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "326:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "323:     assert( 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "328:     assert( zOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "331:       if( NEVER(rc!=SQLITE_OK) ) goto end_of_vacuum;",
          "332:     }",
          "335:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "336:     rc = sqlite3BtreeCommit(pTemp);",
          "337:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "338: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "340: #endif",
          "341:   }",
          "343:   assert( rc==SQLITE_OK );",
          "346: end_of_vacuum:",
          "",
          "[Removed Lines]",
          "334:     rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "339:     sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "344:   rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "",
          "[Added Lines]",
          "339:     if( zOut==0 ){",
          "340:       rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "341:     }else{",
          "342:       rc = sqlite3BtreeCommit(pMain);",
          "343:     }",
          "348:     if( zOut==0 ){",
          "349:       sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "350:     }",
          "355:   if( zOut==0 ){",
          "356:     rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "357:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:     pDb->pSchema = 0;",
          "369:   }",
          "375:   return rc;",
          "376: }",
          "",
          "[Removed Lines]",
          "373:   sqlite3ResetAllSchemasOfConnection(db);",
          "",
          "[Added Lines]",
          "384:   if( zOut==0 ){",
          "387:     sqlite3ResetAllSchemasOfConnection(db);",
          "388:   }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6686: #if !defined(SQLITE_OMIT_VACUUM) && !defined(SQLITE_OMIT_ATTACH)",
          "6692: case OP_Vacuum: {",
          "6693:   assert( p->readOnly==0 );",
          "6695:   if( rc ) goto abort_due_to_error;",
          "6696:   break;",
          "6697: }",
          "",
          "[Removed Lines]",
          "6694:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1);",
          "",
          "[Added Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1, pOp->p4.z);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38e3853240798ae59815320f745a6325f1da10cc",
      "candidate_info": {
        "commit_hash": "38e3853240798ae59815320f745a6325f1da10cc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38e3853240798ae59815320f745a6325f1da10cc",
        "files": [
          "ext/fts5/test/fts5circref.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add tests for the use of SQLITE_PREPARE_NO_VTAB in fts5.\n\nFossilOrigin-Name: 1999612010e310fc2430d1f00076f69fade0c66d202771dbb0f3d5597ac0a03c",
        "before_after_code_files": [
          "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test": [
          "File: ext/fts5/test/fts5circref.test -> ext/fts5/test/fts5circref.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5circref",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE tt USING fts5(a);",
          "26:   SELECT name FROM sqlite_master ORDER BY 1;",
          "27: } {",
          "28:   tt tt_config tt_content tt_data tt_docsize tt_idx",
          "29: }",
          "30: db_save_and_close",
          "32: foreach {tn schema sql} {",
          "33:   1 {",
          "34:     CREATE TRIGGER tr1 AFTER INSERT ON tt_config BEGIN",
          "35:       SELECT * FROM tt;",
          "36:     END;",
          "37:   } {",
          "38:     INSERT INTO tt(tt, rank) VALUES('usermerge', 4);",
          "39:   }",
          "41:   2 {",
          "42:     CREATE TRIGGER tr1 AFTER INSERT ON tt_docsize BEGIN",
          "43:       SELECT * FROM tt;",
          "44:     END;",
          "45:   } {",
          "46:     INSERT INTO tt(a) VALUES('one two three');",
          "47:   }",
          "49:   3 {",
          "50:     CREATE TRIGGER tr1 AFTER INSERT ON tt_content BEGIN",
          "51:       SELECT * FROM tt;",
          "52:     END;",
          "53:   } {",
          "54:     INSERT INTO tt(a) VALUES('one two three');",
          "55:   }",
          "57:   4 {",
          "58:     CREATE TRIGGER tr1 AFTER INSERT ON tt_data BEGIN",
          "59:       SELECT * FROM tt;",
          "60:     END;",
          "61:   } {",
          "62:     INSERT INTO tt(a) VALUES('one two three');",
          "63:   }",
          "65:   5 {",
          "66:     CREATE TRIGGER tr1 AFTER INSERT ON tt_idx BEGIN",
          "67:       SELECT * FROM tt;",
          "68:     END;",
          "69:   } {",
          "70:     INSERT INTO tt(a) VALUES('one two three');",
          "71:   }",
          "72: } {",
          "73:   db_restore_and_reopen",
          "74:   do_execsql_test 1.1.$tn.1 $schema",
          "75:   do_catchsql_test 1.1.$tn.2 $sql {1 {SQL logic error}}",
          "76:   db close",
          "77: }",
          "80: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25666e3d03950caf753295cdb55df162e07dbcf6840b05875c6e0b127c469ecb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b454e0335cbe14bc96b460ff3695007185fbb6e",
      "candidate_info": {
        "commit_hash": "2b454e0335cbe14bc96b460ff3695007185fbb6e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b454e0335cbe14bc96b460ff3695007185fbb6e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c"
        ],
        "message": "Fix a harmless compiler warning that only comes up during debug builds.\n\nFossilOrigin-Name: 848869ced988ca4d0ac76d43f984360fd11997a580719cccf8d55becea4e8fb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35cbee7fe4a0b7ca06206ca2f69fc35abe3de4929070d6585ab765af82027438",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "566: #endif",
          "568:   assert( zSql!=0 );",
          "569:   mxSqlLen = db->aLimit[SQLITE_LIMIT_SQL_LENGTH];",
          "",
          "[Removed Lines]",
          "563:   VVA_ONLY( u8 startedWithOom = db->mallocFailed );",
          "",
          "[Added Lines]",
          "566:   VVA_ONLY( u8 startedWithOom = db->mallocFailed );",
          "",
          "---------------"
        ]
      }
    }
  ]
}