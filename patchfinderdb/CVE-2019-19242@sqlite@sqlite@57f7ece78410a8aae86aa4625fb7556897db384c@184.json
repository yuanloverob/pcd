{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
      "candidate_info": {
        "commit_hash": "e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Revert the OP_MustBeInt opcode implementation on this branch so that it again matches trunk. The extra functionality is no longer required.\n\nFossilOrigin-Name: c02f77b1b4d025d4243f883d6f3a2b3abcaf4944e0209f641b62c576415343dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98cc26598718e5557ee00aa77336024c91e483ec6de650e172ad1b44a6f0a77b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:   break;",
          "1724: }",
          "1740:   pIn1 = &aMem[pOp->p1];",
          "1742:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1745:       if( pOp->p2==0 ){",
          "1746:         rc = SQLITE_MISMATCH;",
          "1747:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1738:   u8 f;",
          "1739:   f = (pOp->p5 ? (MEM_Int|MEM_Real) : MEM_Int);",
          "1741:   if( (pIn1->flags & f)==0 ){",
          "1743:     VdbeBranchTaken((pIn1->flags&f)==0, 2);",
          "1744:     if( (pIn1->flags & f)==0 ){",
          "",
          "[Added Lines]",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1750:       }",
          "1751:     }",
          "1752:   }",
          "1754:   break;",
          "1755: }",
          "",
          "[Removed Lines]",
          "1753:   if( f==MEM_Int ) MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "[Added Lines]",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:   int regZero = sqlite3GetTempReg(pParse);",
          "1303:   assert( eCond>=0 && eCond<ArraySize(azErr) );",
          "1304:   sqlite3VdbeAddOp2(v, OP_Integer, 0, regZero);",
          "1307:   VdbeCoverageIf(v, eCond==0);",
          "1308:   VdbeCoverageIf(v, eCond==1);",
          "1309:   VdbeCoverageIf(v, eCond==2);",
          "",
          "[Removed Lines]",
          "1305:   sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1306:   if( eCond>=WINDOW_STARTING_NUM ) sqlite3VdbeChangeP5(v, 1);",
          "",
          "[Added Lines]",
          "1305:   if( eCond>=WINDOW_STARTING_NUM ){",
          "1306:     int regString = sqlite3GetTempReg(pParse);",
          "1307:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1308:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1309:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1310:   }else{",
          "1311:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1312:   }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "938:   FROM keyword_tab",
          "939: }",
          "941: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941: #-------------------------------------------------------------------------",
          "942: foreach {tn expr err} {",
          "943:   1   4.5      0",
          "944:   2   NULL     1",
          "945:   3   0.0      0",
          "946:   4   0.1      0",
          "947:   5  -0.1      1",
          "948:   6  ''        1",
          "949:   7  '2.0'     0",
          "950:   8  '2.0x'    1",
          "951:   9  x'1234'   1",
          "952:  10  '1.2'     0",
          "953: } {",
          "954:   set res {0 1}",
          "955:   if {$err} {set res {1 {frame starting offset must be a non-negative number}} }",
          "956:   do_catchsql_test 22.$tn.1 \"",
          "957:     WITH a(x, y) AS ( VALUES(1, 2) )",
          "958:     SELECT sum(x) OVER (",
          "959:       ORDER BY y RANGE BETWEEN $expr PRECEDING AND UNBOUNDED FOLLOWING",
          "960:     ) FROM a",
          "961:   \" $res",
          "963:   set res {0 1}",
          "964:   if {$err} {set res {1 {frame ending offset must be a non-negative number}} }",
          "965:   do_catchsql_test 22.$tn.2 \"",
          "966:     WITH a(x, y) AS ( VALUES(1, 2) )",
          "967:     SELECT sum(x) OVER (",
          "968:       ORDER BY y RANGE BETWEEN UNBOUNDED PRECEDING AND $expr FOLLOWING",
          "969:     ) FROM a",
          "970:   \" $res",
          "971: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4738ddb203867d9573555cb271463bab1e69a31",
      "candidate_info": {
        "commit_hash": "b4738ddb203867d9573555cb271463bab1e69a31",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b4738ddb203867d9573555cb271463bab1e69a31",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() in vdbemem.c that could fire if the database was corrupt.\n\nFossilOrigin-Name: a70958cd7d5cf750c293537856918e5789013b70f6a827f724d83559b38629c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2ca6b8f84ec07e313aa4e1c0894827401b418dcc4221e9c54c384f1c3893952a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){",
          "247:   assert( (pMem->flags & MEM_Dyn)==0 || pMem->szMalloc==0 );",
          "248:   if( pMem->szMalloc<szNew ){",
          "249:     return sqlite3VdbeMemGrow(pMem, szNew, 0);",
          "",
          "[Removed Lines]",
          "246:   assert( szNew>0 );",
          "",
          "[Added Lines]",
          "246:   assert( CORRUPT_DB || szNew>0 );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   REINDEX t1;",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "136: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "138: do_test 2.0 {",
          "139:   sqlite3 db {}",
          "140:   db deserialize [decode_hexdb {",
          "141: | size 20480 pagesize 4096 filename crash.txt.db",
          "142: | page 1 offset 0",
          "143: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "144: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "145: |     32: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 04   ................",
          "146: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "147: |     96: 00 00 00 00 0d 00 00 00 05 0e 55 00 0f 74 0f 3c   ..........U..t.<",
          "148: |    112: 0e f9 0e d1 0e 55 00 00 00 00 00 00 00 00 00 00   .....U..........",
          "149: |   3664: 00 00 00 00 00 7a 05 07 15 11 11 08 81 63 76 69   .....z.......cvi",
          "150: |   3680: 65 77 76 31 76 31 43 52 45 41 54 45 20 56 49 45   ewv1v1CREATE VIE",
          "151: |   3696: 57 20 76 31 28 78 2c 79 29 20 41 53 0a 53 45 4c   W v1(x,y) AS.SEL",
          "152: |   3712: 45 43 54 20 74 31 2e 62 2c 74 32 2e 62 20 46 52   ECT t1.b,t2.b FR",
          "153: |   3728: 4f 4d 20 74 31 2c 74 32 20 57 48 45 52 45 20 74   OM t1,t2 WHERE t",
          "154: |   3744: 31 2e 61 3d 74 32 2e 61 20 47 52 4f 55 50 20 42   1.a=t2.a GROUP B",
          "155: |   3760: 59 20 31 20 48 41 56 49 4e 47 20 74 32 2e 63 20   Y 1 HAVING t2.c",
          "156: |   3776: 4e 4f 54 20 4e 55 4c 4c 0a 4c 49 4d 49 54 20 31   NOT NULL.LIMIT 1",
          "157: |   3792: 30 26 04 06 17 11 11 01 39 74 61 62 6c 65 74 32   0&......9tablet2",
          "158: |   3808: 74 32 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   t2.CREATE TABLE",
          "159: |   3824: 74 32 28 61 2c 62 2c 63 29 41 03 06 17 15 11 01   t2(a,b,c)A......",
          "160: |   3840: 6b 69 6e 64 65 78 74 31 78 31 74 31 04 43 52 45   kindext1x1t1.CRE",
          "161: |   3856: 41 54 45 20 49 4e 44 45 58 20 73 31 78 31 20 4f   ATE INDEX s1x1 O",
          "162: |   3872: 4e 20 74 31 28 64 29 20 57 48 45 52 45 20 65 65   N t1(d) WHERE ee",
          "163: |   3888: 20 49 53 20 4e 4f 54 20 4e 55 4c 4c 36 02 06 17    IS NOT NULL6...",
          "164: |   3904: 17 11 01 53 69 6e 64 65 78 74 31 61 62 63 74 31   ...Sindext1abct1",
          "165: |   3920: 03 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "166: |   3936: 61 62 63 20 4f 4e 20 74 31 28 61 2c 62 2c 63 2b   abc ON t1(a,b,c+",
          "167: |   3952: 64 2b 65 29 81 09 01 07 17 11 11 01 81 7d 74 61   d+e)..........ta",
          "168: |   3968: 62 6c 65 74 31 74 31 02 43 52 45 41 54 45 20 54   blet1t1.CREATE T",
          "169: |   3984: 41 42 4c 45 20 74 31 28 61 2c 62 2c 63 2c 64 2c   ABLE t1(a,b,c,d,",
          "170: |   4000: 65 2c 66 2c 67 2c 68 2c 6a 2c 6a 6a 2c 6a 6a 6a   e,f,g,h,j,jj,jjj",
          "171: |   4016: 2c 6b 2c 61 61 2c 62 62 2c 63 63 2c 64 64 2c 65   ,k,aa,bb,cc,dd,e",
          "172: |   4032: 65 20 44 45 46 41 55 4c 54 20 33 2e 31 34 2c 0a   e DEFAULT 3.14,.",
          "173: |   4048: 66 66 20 44 45 46 41 55 4c 54 28 27 68 69 63 63   ff DEFAULT('hicc",
          "174: |   4064: 75 70 27 29 2c 67 67 20 4e 4f 54 20 4e 55 4c 4c   up'),gg NOT NULL",
          "175: |   4080: 20 44 45 46 41 55 4c 54 28 66 61 6c 73 65 29 29    DEFAULT(false))",
          "176: | page 2 offset 4096",
          "177: |      0: 0d 00 00 00 0a 0e 7b 00 0f dc 0f b6 0f 8f 0f 68   ...............h",
          "178: |     16: 0f 41 0f 1a 0e f3 0e cb 0e a3 0e 7b 00 00 00 00   .A..............",
          "179: |   3696: 00 00 00 00 00 00 00 00 00 00 00 26 0a 14 01 01   ...........&....",
          "180: |   3712: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "181: |   3728: 08 09 5a 00 b4 40 09 1e b8 51 eb 85 1f 68 69 63   ..Z..@...Q...hic",
          "182: |   3744: 63 75 70 26 09 14 01 01 02 08 00 00 00 00 00 00   cup&............",
          "183: |   3760: 00 00 00 00 00 00 07 19 08 08 50 00 a0 40 09 1e   ..........P..@..",
          "184: |   3776: b8 51 eb 85 1f 68 69 63 63 75 70 26 08 14 01 01   .Q...hiccup&....",
          "185: |   3792: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "186: |   3808: 08 07 46 00 8c 40 09 1e b8 51 eb 85 1f 68 69 63   ..F..@...Q...hic",
          "187: |   3824: 63 75 70 25 07 14 01 01 01 08 00 00 00 00 00 00   cup%............",
          "188: |   3840: 00 00 00 00 00 00 07 b9 08 06 3c 78 40 09 1e b8   ..........<x@...",
          "189: |   3856: 51 eb 85 1f 68 69 63 63 75 70 25 06 14 01 00 01   Q...hiccup%.....",
          "190: |   3872: 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19 08   ................",
          "191: |   3888: 05 32 64 40 09 1e b8 51 eb 85 1f 68 69 63 63 75   .2d@...Q...hiccu",
          "192: |   3904: 70 25 05 14 01 01 01 08 00 00 00 00 00 00 00 00   p%..............",
          "193: |   3920: 00 00 00 00 07 19 08 04 28 50 40 09 1e b8 51 eb   ........(P@...Q.",
          "194: |   3936: 85 1f 68 69 63 63 75 70 25 04 14 01 01 01 08 00   ..hiccup%.......",
          "195: |   3952: 00 00 00 00 00 00 00 00 00 00 00 07 19 08 03 1e   ................",
          "196: |   3968: 3c 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70 25   <@...Q...hiccup%",
          "197: |   3984: 03 14 01 01 01 08 00 00 00 00 00 00 00 00 00 00   ................",
          "198: |   4000: 00 00 07 19 08 02 14 28 40 09 1e b8 51 eb 85 1f   .......(@...Q...",
          "199: |   4016: 68 69 63 63 75 70 24 02 14 09 01 01 08 00 00 00   hiccup$.........",
          "200: |   4032: 00 00 00 00 00 00 00 00 00 07 19 08 0a 14 40 09   ..............@.",
          "201: |   4048: 1e b8 51 eb 85 1f 68 69 63 63 75 70 22 01 14 08   ..Q...hiccup....",
          "202: |   4064: 08 08 07 ff ff ff ff ff ff 00 00 00 00 00 00 07   ................",
          "203: |   4080: 19 08 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70   ..@...Q...hiccup",
          "204: | page 3 offset 8192",
          "205: |      0: 0a 00 00 00 0a 0f aa 00 0f fa 0f f2 0f e9 0f e0   ................",
          "206: |     16: 0f d7 0f ce 0f c5 0f bc 0e b3 0f aa 00 00 00 00   ................",
          "207: |   4000: 00 00 00 00 00 00 00 00 00 00 08 05 01 01 00 01   ................",
          "208: |   4016: 09 5a 0a 08 05 01 01 00 01 08 50 09 08 05 01 01   .Z........P.....",
          "209: |   4032: 00 01 07 46 08 08 05 01 01 00 01 06 3c 07 08 05   ...F........<...",
          "210: |   4048: 01 01 00 01 05 32 06 08 05 01 01 00 01 04 28 05   .....2........(.",
          "211: |   4064: 08 05 01 01 00 01 03 1e 04 08 05 01 01 00 01 02   ................",
          "212: |   4080: 14 03 07 05 09 01 00 01 0a 02 05 05 08 08 00 09   ................",
          "213: | page 4 offset 12288",
          "214: |      0: 0a 00 00 00 0a 0f cf 00 0f fc 0f f7 0f f2 0f ed   ................",
          "215: |     16: 0f e8 0f e3 0f de 0f d9 0f d4 0f cf 00 00 00 00   ................",
          "216: |   4032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04   ................",
          "217: |   4048: 03 08 01 0a 04 03 08 01 09 04 03 08 01 08 04 03   ................",
          "218: |   4064: 08 01 07 04 03 08 01 06 04 03 08 01 05 04 03 08   ................",
          "219: |   4080: 01 04 04 03 08 01 13 04 03 08 01 02 03 03 08 09   ................",
          "220: | page 5 offset 16384",
          "221: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "222: | end crash.txt.db",
          "223: }]} {}",
          "225: do_execsql_test 2.1 {",
          "226:   INSERT INTO t1(b) VALUES(X'a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6ac8ae0d0e7c3175946e62ba2b');",
          "227: }",
          "229: do_catchsql_test 2.2 {",
          "230:   SELECT b,c FROM t1 ORDER BY a;",
          "231: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
      "candidate_info": {
        "commit_hash": "4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c"
        ],
        "message": "Fix harmless compiler warnings in the TCL interface.\n\nFossilOrigin-Name: f17e72291f197a92b3e15e054271b997d45211a5a31ca4ea6c7fbb33026d5f1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61b4bccd2984f4c2cf50f58ef08677588e57aa7e079af07473b2e188d9ce4f52",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2368:       pResult = Tcl_NewListObj(0,0);",
          "2369:       for(ii=0; ii<sizeof(aDbConfig)/sizeof(aDbConfig[0]); ii++){",
          "2370:         int v = 0;",
          "2373:         Tcl_ListObjAppendElement(interp, pResult,",
          "2374:            Tcl_NewStringObj(aDbConfig[ii].zName,-1));",
          "2375:         Tcl_ListObjAppendElement(interp, pResult,",
          "",
          "[Removed Lines]",
          "2371:         int rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "2372:         if( rc!=SQLITE_OK ) continue;",
          "",
          "[Added Lines]",
          "2371:         sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2377:       }",
          "2378:     }else{",
          "2379:       const char *zOpt = Tcl_GetString(objv[2]);",
          "2381:       int onoff = -1;",
          "2382:       int v = 0;",
          "2383:       if( zOpt[0]=='-' ) zOpt++;",
          "",
          "[Removed Lines]",
          "2380:       int rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2394:           return TCL_ERROR;",
          "2395:         }",
          "2396:       }",
          "2398:       pResult = Tcl_NewIntObj(v);",
          "2399:     }",
          "2400:     Tcl_SetObjResult(interp, pResult);",
          "",
          "[Removed Lines]",
          "2397:       rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "",
          "[Added Lines]",
          "2395:       sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
      "candidate_info": {
        "commit_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f030b376820102ff6cda49565c8b8173b2d44606",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Internally, remove all references to a Window object that belongs to an expression in an ORDER BY clause if that expression is converted to an alias of a result-set expression. Fix for [4feb3159c6].\n\nFossilOrigin-Name: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73056b314bd63288c662752e9bd469b70264c38031c1c857460e64fdb1ed4e2e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1250: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1251:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1252:     Window **pp;",
          "1253:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1254:       if( *pp==pExpr->y.pWin ){",
          "1256:         break;",
          "1257:       }",
          "1258:     }",
          "1259:   }",
          "1260:   return WRC_Continue;",
          "1261: }",
          "1267: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1268:   Walker sWalker;",
          "1269:   memset(&sWalker, 0, sizeof(Walker));",
          "1270:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1271:   sWalker.u.pSelect = pSelect;",
          "1272:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1273: }",
          "1274: #else",
          "1275: # define resolveRemoveWindows(x,y)",
          "1276: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1309:     }",
          "1310:     for(j=0; j<pSelect->pEList->nExpr; j++){",
          "1311:       if( sqlite3ExprCompare(0, pE, pSelect->pEList->a[j].pExpr, -1)==0 ){",
          "1325:         pItem->u.x.iOrderByCol = j+1;",
          "1326:       }",
          "1327:     }",
          "",
          "[Removed Lines]",
          "1312: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1313:         if( ExprHasProperty(pE, EP_WinFunc) ){",
          "1317:           Window **pp;",
          "1318:           for(pp=&pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1319:             if( *pp==pE->y.pWin ){",
          "1321:             }",
          "1322:           }",
          "1323:         }",
          "1324: #endif",
          "",
          "[Added Lines]",
          "1347:         resolveRemoveWindows(pSelect, pE);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:   3 101",
          "701: }",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703: #-------------------------------------------------------------------------",
          "704: do_execsql_test 17.0 {",
          "705:   CREATE TABLE t8(a);",
          "706:   INSERT INTO t8 VALUES(1), (2), (3);",
          "707: }",
          "709: do_execsql_test 17.1 {",
          "710:   SELECT +sum(0) OVER () ORDER BY +sum(0) OVER ();",
          "711: } {0}",
          "713: do_execsql_test 17.2 {",
          "714:   select +sum(a) OVER () FROM t8 ORDER BY +sum(a) OVER () DESC;",
          "715: } {6 6 6}",
          "717: do_execsql_test 17.3 {",
          "718:   SELECT 10+sum(a) OVER (ORDER BY a)",
          "719:   FROM t8",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
      "candidate_info": {
        "commit_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings in fuzzcheck\n\nFossilOrigin-Name: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 202f9919c222ee933924c63c15ad36ec4481457b1e4d9179af14c9f284117c0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "",
          "[Removed Lines]",
          "467: static unsigned int hexToInt(unsigned int h){",
          "",
          "[Added Lines]",
          "467: static unsigned char hexToInt(unsigned int h){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "",
          "[Removed Lines]",
          "529:   a = sqlite3_malloc( nAlloc );",
          "",
          "[Added Lines]",
          "529:   a = sqlite3_malloc64( nAlloc );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "",
          "[Removed Lines]",
          "565:           a = sqlite3_realloc( a, newSize );",
          "",
          "[Added Lines]",
          "565:           a = sqlite3_realloc64( a, newSize );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "",
          "[Removed Lines]",
          "747:   nSql = nByte - iSql;",
          "",
          "[Added Lines]",
          "747:   nSql = (int)(nByte - iSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:       }else",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "[Removed Lines]",
          "1457:         const char *z;",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "",
          "[Added Lines]",
          "1457:         const char *zz;",
          "1459:         for(ii=0; (zz = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", zz);",
          "",
          "---------------"
        ]
      }
    }
  ]
}