{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
      "candidate_info": {
        "commit_hash": "feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Better detection of corruption in the %_stat and %_docsize shadow tables of FTS3.\n\nFossilOrigin-Name: 1e449687881f4d388e54a0e51bcabba41ab10cf7e596ff65e31e88a23c70d497",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   return (int)(p - pStart);",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: int sqlite3Fts3GetVarintBounded(",
          "401:   const char *pBuf,",
          "402:   const char *pEnd,",
          "403:   sqlite_int64 *v",
          "404: ){",
          "405:   const unsigned char *p = (const unsigned char*)pBuf;",
          "406:   const unsigned char *pStart = p;",
          "407:   const unsigned char *pX = (const unsigned char*)pEnd;",
          "408:   u64 b = 0;",
          "409:   int shift;",
          "410:   for(shift=0; shift<=63; shift+=7){",
          "411:     u64 c = p<pX ? *p : 0;",
          "412:     p++;",
          "413:     b += (c&0x7F) << shift;",
          "414:     if( (c & 0x80)==0 ) break;",
          "415:   }",
          "417:   return (int)(p - pStart);",
          "418: }",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: void sqlite3Fts3ErrMsg(char**,const char*,...);",
          "578: int sqlite3Fts3PutVarint(char *, sqlite3_int64);",
          "579: int sqlite3Fts3GetVarint(const char *, sqlite_int64 *);",
          "580: int sqlite3Fts3GetVarint32(const char *, int *);",
          "581: int sqlite3Fts3VarintLen(sqlite3_uint64);",
          "582: void sqlite3Fts3Dequote(char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580: int sqlite3Fts3GetVarintBounded(const char*,const char*,sqlite3_int64*);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:   Fts3Table *pTab,",
          "1039:   sqlite3_stmt **ppStmt,",
          "1040:   sqlite3_int64 *pnDoc,",
          "1042: ){",
          "1043:   sqlite3_stmt *pStmt;",
          "1044:   const char *a;",
          "1045:   sqlite3_int64 nDoc;",
          "1047:   if( !*ppStmt ){",
          "1048:     int rc = sqlite3Fts3SelectDoctotal(pTab, ppStmt);",
          "",
          "[Removed Lines]",
          "1041:   const char **paLen",
          "",
          "[Added Lines]",
          "1041:   const char **paLen,",
          "1042:   const char **ppEnd",
          "1046:   const char *pEnd;",
          "1048:   int n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1051:   pStmt = *ppStmt;",
          "1052:   assert( sqlite3_data_count(pStmt)==1 );",
          "1054:   a = sqlite3_column_blob(pStmt, 0);",
          "1059:   if( paLen ) *paLen = a;",
          "1060:   return SQLITE_OK;",
          "1061: }",
          "",
          "[Removed Lines]",
          "1055:   a += sqlite3Fts3GetVarint(a, &nDoc);",
          "1056:   if( nDoc==0 ) return FTS_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "1058:   n = sqlite3_column_bytes(pStmt, 0);",
          "1059:   if( n==0 ){",
          "1060:     return FTS_CORRUPT_VTAB;",
          "1061:   }",
          "1063:   if( a==0 ){",
          "1064:     return SQLITE_NOMEM;",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "1068:   if( nDoc==0 || a>pEnd ){",
          "1069:     return FTS_CORRUPT_VTAB;",
          "1070:   }",
          "1074:   if( ppEnd ) *ppEnd = pEnd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1237:       case FTS3_MATCHINFO_NDOC:",
          "1238:         if( bGlobal ){",
          "1239:           sqlite3_int64 nDoc = 0;",
          "1241:           pInfo->aMatchinfo[0] = (u32)nDoc;",
          "1242:         }",
          "1243:         break;",
          "",
          "[Removed Lines]",
          "1240:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, 0);",
          "",
          "[Added Lines]",
          "1255:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, 0, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1246:         if( bGlobal ){",
          "1251:           if( rc==SQLITE_OK ){",
          "1252:             int iCol;",
          "1253:             for(iCol=0; iCol<pInfo->nCol; iCol++){",
          "1254:               u32 iVal;",
          "1255:               sqlite3_int64 nToken;",
          "1256:               a += sqlite3Fts3GetVarint(a, &nToken);",
          "1257:               iVal = (u32)(((u32)(nToken&0xffffffff)+nDoc/2)/nDoc);",
          "1258:               pInfo->aMatchinfo[iCol] = iVal;",
          "1259:             }",
          "",
          "[Removed Lines]",
          "1250:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, &a);",
          "",
          "[Added Lines]",
          "1266:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, &a, &pEnd);",
          "1273:               if( a>pEnd ){",
          "1274:                 rc = SQLITE_CORRUPT_VTAB;",
          "1275:                 break;",
          "1276:               }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1267:         if( rc==SQLITE_OK ){",
          "1268:           int iCol;",
          "1269:           const char *a = sqlite3_column_blob(pSelectDocsize, 0);",
          "1270:           for(iCol=0; iCol<pInfo->nCol; iCol++){",
          "1271:             sqlite3_int64 nToken;",
          "1273:             pInfo->aMatchinfo[iCol] = (u32)nToken;",
          "1274:           }",
          "1275:         }",
          "",
          "[Removed Lines]",
          "1272:             a += sqlite3Fts3GetVarint(a, &nToken);",
          "",
          "[Added Lines]",
          "1290:           const char *pEnd = a + sqlite3_column_bytes(pSelectDocsize, 0);",
          "1293:             a += sqlite3Fts3GetVarintBounded(a, pEnd, &nToken);",
          "1294:             if( a>pEnd ){",
          "1295:               rc = SQLITE_CORRUPT_VTAB;",
          "1296:               break;",
          "1297:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1300:         if( rc!=SQLITE_OK ) break;",
          "1301:         if( bGlobal ){",
          "1302:           if( pCsr->pDeferred ){",
          "1304:             if( rc!=SQLITE_OK ) break;",
          "1305:           }",
          "1306:           rc = fts3ExprIterate(pExpr, fts3ExprGlobalHitsCb,(void*)pInfo);",
          "",
          "[Removed Lines]",
          "1303:             rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &pInfo->nDoc, 0);",
          "",
          "[Added Lines]",
          "1328:             rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &pInfo->nDoc,0,0);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8bd75bf636f72f32d66c6c38e1918f27daf2f13290f00a001f41d50838bbda47",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   } $r",
          "192: }",
          "194: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: # 2019-11-16 https://bugs.chromium.org/p/chromium/issues/detail?id=1025472",
          "195: #",
          "196: db close",
          "197: sqlite3 db :memory:",
          "198: do_execsql_test fts4aa-5.10 {",
          "199:   CREATE VIRTUAL TABLE t1 USING fts4(a, b, c, d, e,f,g,h,i,j,k,l,m,n,o,p,q,r);",
          "200:   INSERT INTO t1 VALUES('X Y', '2', '3', '4', '5', '6', '7', '8', '9', '0',",
          "201:                         'a','b','c','d','e','f','g','h');",
          "202:   UPDATE t1_docsize SET size=x'88' WHERE docid=1;",
          "203: } {}",
          "204: do_catchsql_test fts4aa-5.20 {",
          "205:   SELECT quote(matchinfo(t1, 'l')) FROM t1 WHERE t1 MATCH 'X Y';",
          "206: } {1 {database disk image is malformed}}",
          "207: do_execsql_test fts4aa-5.30 {",
          "208:   DROP TABLE t1;",
          "209:   CREATE VIRTUAL TABLE t1 USING fts4(a,b,c,d);",
          "210:   INSERT INTO t1 VALUES('one two','three four','five six','seven eight');",
          "211: } {}",
          "212: do_catchsql_test fts4aa-5.40 {",
          "213:   UPDATE t1_stat SET value=x'01010101' WHERE id=0;",
          "214:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "215: } {1 {database disk image is malformed}}",
          "216: do_catchsql_test fts4aa-5.50 {",
          "217:   UPDATE t1_stat SET value=x'010101' WHERE id=0;",
          "218:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "219: } {1 {database disk image is malformed}}",
          "220: do_catchsql_test fts4aa-5.60 {",
          "221:   UPDATE t1_stat SET value=x'01' WHERE id=0;",
          "222:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "223: } {1 {database disk image is malformed}}",
          "224: do_catchsql_test fts4aa-5.70 {",
          "225:   UPDATE t1_stat SET value=x'' WHERE id=0;",
          "226:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "227: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cec5f1d1277aecf7d21b51e93edc9745ef442428",
      "candidate_info": {
        "commit_hash": "cec5f1d1277aecf7d21b51e93edc9745ef442428",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cec5f1d1277aecf7d21b51e93edc9745ef442428",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix compilation issues with MSVC.\n\nFossilOrigin-Name: af07d8458ae5e2933134b706f80f9538f011970221904bf9f50ed6e47d306e14",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #include <string.h>",
          "83: #include <stdio.h>",
          "84: #include <assert.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419: # define testcase(X)",
          "420: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: #if !defined(SQLITE_DISABLE_INTRINSIC)",
          "429: #  if defined(_MSC_VER) && _MSC_VER>=1400",
          "430: #    if !defined(_WIN32_WCE)",
          "431: #      include <intrin.h>",
          "432: #      pragma intrinsic(_byteswap_ulong)",
          "433: #      pragma intrinsic(_byteswap_uint64)",
          "434: #    else",
          "435: #      include <cmnintrin.h>",
          "436: #    endif",
          "437: #  endif",
          "438: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8cf342d4e5eb67b17aee595d9d75f7798eccaebc1ec88e646d344d8d4ab64977",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2273: #ifdef SQLITE_DEBUG",
          "2274:   if( aPermute ){",
          "2275:     int k, mx = 0;",
          "2277:     assert( p1>0 && p1+mx<=(p->nMem+1 - p->nCursor)+1 );",
          "2278:     assert( p2>0 && p2+mx<=(p->nMem+1 - p->nCursor)+1 );",
          "2279:   }else{",
          "",
          "[Removed Lines]",
          "2276:     for(k=0; k<n; k++) if( aPermute[k]>mx ) mx = aPermute[k];",
          "",
          "[Added Lines]",
          "2276:     for(k=0; k<n; k++) if( aPermute[k]>(u32)mx ) mx = aPermute[k];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2623:   pDest = &aMem[pOp->p3];",
          "2624:   memAboutToChange(p, pDest);",
          "2625:   assert( pC!=0 );",
          "2627:   aOffset = pC->aOffset;",
          "2628:   assert( pC->eCurType!=CURTYPE_VTAB );",
          "2629:   assert( pC->eCurType!=CURTYPE_PSEUDO || pC->nullRow );",
          "",
          "[Removed Lines]",
          "2626:   assert( p2<pC->nField );",
          "",
          "[Added Lines]",
          "2626:   assert( p2<(u32)pC->nField );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3812:   }",
          "3813:   if( pOp->p5 & OPFLAG_P2ISREG ){",
          "3814:     assert( p2>0 );",
          "3816:     assert( pOp->opcode==OP_OpenWrite );",
          "3817:     pIn2 = &aMem[p2];",
          "3818:     assert( memIsValid(pIn2) );",
          "",
          "[Removed Lines]",
          "3815:     assert( p2<=(p->nMem+1 - p->nCursor) );",
          "",
          "[Added Lines]",
          "3815:     assert( p2<=(u32)(p->nMem+1 - p->nCursor) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6245:   nRoot = pOp->p2;",
          "6246:   aRoot = pOp->p4.ai;",
          "6247:   assert( nRoot>0 );",
          "6249:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "6250:   pnErr = &aMem[pOp->p3];",
          "6251:   assert( (pnErr->flags & MEM_Int)!=0 );",
          "",
          "[Removed Lines]",
          "6248:   assert( aRoot[0]==nRoot );",
          "",
          "[Added Lines]",
          "6248:   assert( aRoot[0]==(Pgno)nRoot );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6af305de1eeff5d94cacafd555f3fa6b8015b5eb",
      "candidate_info": {
        "commit_hash": "6af305de1eeff5d94cacafd555f3fa6b8015b5eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6af305de1eeff5d94cacafd555f3fa6b8015b5eb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Remove unnecessary code from the window functions implementation.\n\nFossilOrigin-Name: 1e87da9c93309d1d69b1e0ab65c615b9ff9c1c6813ad0c7b90d2495be4ba0adc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5124732370fd53c93314c9c79b4251bd46ce81c2e7aa4f59e2c1889cc4263d5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   op = pExpr->op;",
          "53:   if( op==TK_SELECT ){",
          "54:     assert( pExpr->flags&EP_xIsSelect );",
          "61:   }",
          "62:   if( op==TK_REGISTER ) op = pExpr->op2;",
          "63: #ifndef SQLITE_OMIT_CAST",
          "",
          "[Removed Lines]",
          "55:     if( ALWAYS(pExpr->x.pSelect)",
          "56:      && pExpr->x.pSelect->pEList",
          "57:      && ALWAYS(pExpr->x.pSelect->pEList->a[0].pExpr)",
          "58:     ){",
          "59:       return sqlite3ExprAffinity(pExpr->x.pSelect->pEList->a[0].pExpr);",
          "60:     }",
          "",
          "[Added Lines]",
          "55:     assert( pExpr->x.pSelect!=0 );",
          "56:     assert( pExpr->x.pSelect->pEList!=0 );",
          "57:     assert( pExpr->x.pSelect->pEList->a[0].pExpr!=0 );",
          "58:     return sqlite3ExprAffinity(pExpr->x.pSelect->pEList->a[0].pExpr);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   if( OK_IF_ALWAYS_TRUE(p) ) clearSelect(db, p, 1);",
          "176: }",
          "",
          "[Removed Lines]",
          "183: void sqlite3SelectReset(Parse *pParse, Select *p){",
          "184:   if( ALWAYS(p) ){",
          "185:     clearSelect(pParse->db, p, 0);",
          "186:     memset(&p->iLimit, 0, sizeof(Select) - offsetof(Select,iLimit));",
          "187:     p->pEList = sqlite3ExprListAppend(pParse, 0,",
          "188:                      sqlite3ExprAlloc(pParse->db,TK_NULL,0,0));",
          "189:     p->pSrc = sqlite3DbMallocZero(pParse->db, sizeof(SrcList));",
          "190:   }",
          "191: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4248: Select *sqlite3SelectNew(Parse*,ExprList*,SrcList*,Expr*,ExprList*,",
          "4249:                          Expr*,ExprList*,u32,Expr*);",
          "4250: void sqlite3SelectDelete(sqlite3*, Select*);",
          "4252: Table *sqlite3SrcListLookup(Parse*, SrcList*);",
          "4253: int sqlite3IsReadOnly(Parse*, Table*, int);",
          "4254: void sqlite3OpenTable(Parse*, int iCur, int iDb, Table*, int);",
          "",
          "[Removed Lines]",
          "4251: void sqlite3SelectReset(Parse*, Select*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1082:       assert( pParse->db->mallocFailed );",
          "1083:       sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
          "1084:     }",
          "1086:   }",
          "1087:   return rc;",
          "1088: }",
          "",
          "[Removed Lines]",
          "1085:     sqlite3SelectReset(pParse, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a00a0167406eb40453964471fcde31bf0ce5ceb6",
      "candidate_info": {
        "commit_hash": "a00a0167406eb40453964471fcde31bf0ce5ceb6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a00a0167406eb40453964471fcde31bf0ce5ceb6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 7f8802bb7be61fdf7c7a591945d533d848bc46d2989f7739dd9ad89e1b6a9c65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6fac8a1d3efeb2c4f03dae437b5b314765c93770a70603803a8039291dbcabb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3706:   const char *zType;",
          "3707:   const char *zSql;",
          "3708:   ShellState *p = (ShellState *)pArg;",
          "3710:   UNUSED_PARAMETER(azNotUsed);",
          "3711:   if( nArg!=3 || azArg==0 ) return 0;",
          "3712:   zTable = azArg[0];",
          "3713:   zType = azArg[1];",
          "3714:   zSql = azArg[2];",
          "3718:   if( strcmp(zTable, \"sqlite_sequence\")==0 && !noSys ){",
          "3719:     if( !dataOnly ) raw_printf(p->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "",
          "[Removed Lines]",
          "3715:   int dataOnly = (p->shellFlgs & SHFLG_DumpDataOnly)!=0;",
          "3716:   int noSys    = (p->shellFlgs & SHFLG_DumpNoSys)!=0;",
          "",
          "[Added Lines]",
          "3709:   int dataOnly;",
          "3710:   int noSys;",
          "3717:   dataOnly = (p->shellFlgs & SHFLG_DumpDataOnly)!=0;",
          "3718:   noSys    = (p->shellFlgs & SHFLG_DumpNoSys)!=0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc87ab8c4ab229a2adae3297148eb3ebdad1134f",
      "candidate_info": {
        "commit_hash": "fc87ab8c4ab229a2adae3297148eb3ebdad1134f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc87ab8c4ab229a2adae3297148eb3ebdad1134f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/wal.c",
          "test/walsetlk.test"
        ],
        "message": "Fix compiler warnings in non-SQLITE_ENABLE_SETLK_TIMEOUT builds.\n\nFossilOrigin-Name: 22de99ef410ba2a540871f3e61157d8dc4b969416f14808aeca73971b17fcd51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/wal.c||src/wal.c",
          "test/walsetlk.test||test/walsetlk.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 105d6c9bbcadc64faa2b24e315cb13227b17cfc6bf1b3512713f80ce56976a3d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3476:     }",
          "3478:     if( rc!=SQLITE_OK ){",
          "3480:       unlockBtreeIfUnused(pBt);",
          "3481:     }",
          "3482:     sqlite3PagerWalDb(pPager, 0);",
          "",
          "[Removed Lines]",
          "3479:       sqlite3PagerWalWriteLock(pPager, 0);",
          "",
          "[Added Lines]",
          "3479:       (void)sqlite3PagerWalWriteLock(pPager, 0);",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197: # define walEnableBlocking(x) 0",
          "2198: # define walDisableBlocking(x)",
          "2199: # define walLockWriter(pWal) walLockExclusive((pWal), WAL_WRITE_LOCK, 1)",
          "",
          "[Removed Lines]",
          "2200: # define sqlite3WalDb(pWal)",
          "",
          "[Added Lines]",
          "2200: # define sqlite3WalDb(pWal, db)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2857:     rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2858:     walDisableBlocking(pWal);",
          "",
          "[Removed Lines]",
          "2856:     walEnableBlocking(pWal);",
          "",
          "[Added Lines]",
          "2856:     (void)walEnableBlocking(pWal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3732:   if( rc==SQLITE_OK ){",
          "3733:     walDisableBlocking(pWal);",
          "3734:     rc = walIndexReadHdr(pWal, &isChanged);",
          "3736:     if( isChanged && pWal->pDbFd->pMethods->iVersion>=3 ){",
          "3737:       sqlite3OsUnfetch(pWal->pDbFd, 0, 0);",
          "3738:     }",
          "",
          "[Removed Lines]",
          "3735:     walEnableBlocking(pWal);",
          "",
          "[Added Lines]",
          "3735:     (void)walEnableBlocking(pWal);",
          "",
          "---------------"
        ],
        "test/walsetlk.test||test/walsetlk.test": [
          "File: test/walsetlk.test -> test/walsetlk.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   SELECT * FROM t1",
          "52: } {1 2 3 4 5 6 7 8}",
          "55:   list [catch {db2 eval { BEGIN EXCLUSIVE }} msg] $msg",
          "56: } {1 {database is locked}}",
          "60:   SELECT * FROM t1",
          "61: } {1 2 3 4 5 6 7 8 9 10}",
          "63: puts $fd \"blahblahblahblah\"",
          "64: flush $fd",
          "67:   PRAGMA wal_checkpoint = TRUNCATE",
          "68: } {0 0 0}",
          "71:   file size test.db-wal",
          "72: } 0",
          "",
          "[Removed Lines]",
          "54: do_test 1.3 {",
          "58: do_execsql_test 1.4 { COMMIT }",
          "59: do_execsql_test -db db2 1.5 {",
          "66: do_execsql_test -db db2 1.6 {",
          "70: do_test 1.7 {",
          "",
          "[Added Lines]",
          "54: do_test 1.4 {",
          "58: do_execsql_test 1.5 { COMMIT }",
          "59: do_execsql_test -db db2 1.6 {",
          "66: do_execsql_test -db db2 1.7 {",
          "70: do_test 1.8 {",
          "",
          "---------------"
        ]
      }
    }
  ]
}