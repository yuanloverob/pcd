{
  "cve_id": "CVE-2017-6503",
  "cve_desc": "WebUI in qBittorrent before 3.3.11 did not escape many values, which could potentially lead to XSS.",
  "repo": "qbittorrent/qBittorrent",
  "patch_hash": "6ca3e4f094da0a0017cb2d483ec1db6176bb0b16",
  "patch_info": {
    "commit_hash": "6ca3e4f094da0a0017cb2d483ec1db6176bb0b16",
    "repo": "qbittorrent/qBittorrent",
    "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16",
    "files": [
      "src/base/logger.cpp",
      "src/base/utils/string.cpp",
      "src/base/utils/string.h",
      "src/gui/deletionconfirmationdlg.h",
      "src/gui/properties/peerlistwidget.cpp",
      "src/gui/properties/propertieswidget.cpp"
    ],
    "message": "Add Utils::String::toHtmlEscaped",
    "before_after_code_files": [
      "src/base/logger.cpp||src/base/logger.cpp",
      "src/base/utils/string.cpp||src/base/utils/string.cpp",
      "src/base/utils/string.h||src/base/utils/string.h",
      "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
      "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
      "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
    ]
  },
  "patch_diff": {
    "src/base/logger.cpp||src/base/logger.cpp": [
      "File: src/base/logger.cpp -> src/base/logger.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include \"logger.h\"",
      "3: #include <QDateTime>",
      "5: Logger* Logger::m_instance = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #include \"base/utils/string.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: {",
      "37:     QWriteLocker locker(&lock);",
      "40:     m_messages.push_back(temp);",
      "42:     if (m_messages.size() >= MAX_LOG_MESSAGES)",
      "",
      "[Removed Lines]",
      "39:     Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, message };",
      "",
      "[Added Lines]",
      "40:     Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, Utils::String::toHtmlEscaped(message) };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "49: {",
      "50:     QWriteLocker locker(&lock);",
      "53:     m_peers.push_back(temp);",
      "55:     if (m_peers.size() >= MAX_LOG_MESSAGES)",
      "",
      "[Removed Lines]",
      "52:     Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), ip, blocked, reason };",
      "",
      "[Added Lines]",
      "53:     Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), Utils::String::toHtmlEscaped(ip), blocked, Utils::String::toHtmlEscaped(reason) };",
      "",
      "---------------"
    ],
    "src/base/utils/string.cpp||src/base/utils/string.cpp": [
      "File: src/base/utils/string.cpp -> src/base/utils/string.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:     return (diff == 0);",
      "213: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "215: QString Utils::String::toHtmlEscaped(const QString &str)",
      "216: {",
      "217: #ifdef QBT_USES_QT5",
      "218:     return str.toHtmlEscaped();",
      "219: #else",
      "220:     return Qt::escape(str);",
      "221: #endif",
      "222: }",
      "",
      "---------------"
    ],
    "src/base/utils/string.h||src/base/utils/string.h": [
      "File: src/base/utils/string.h -> src/base/utils/string.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:         bool slowEquals(const QByteArray &a, const QByteArray &b);",
      "50:         bool naturalCompareCaseSensitive(const QString &left, const QString &right);",
      "51:         bool naturalCompareCaseInsensitive(const QString &left, const QString &right);",
      "52:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50:         QString toHtmlEscaped(const QString &str);",
      "",
      "---------------"
    ],
    "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h": [
      "File: src/gui/deletionconfirmationdlg.h -> src/gui/deletionconfirmationdlg.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include <QPushButton>",
      "36: #include \"ui_confirmdeletiondlg.h\"",
      "37: #include \"base/preferences.h\"",
      "39: #include \"base/utils/misc.h\"",
      "41: class DeletionConfirmationDlg : public QDialog, private Ui::confirmDeletionDlg {",
      "42:   Q_OBJECT",
      "",
      "[Removed Lines]",
      "38: #include \"guiiconprovider.h\"",
      "",
      "[Added Lines]",
      "39: #include \"base/utils/string.h\"",
      "40: #include \"guiiconprovider.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:   DeletionConfirmationDlg(QWidget *parent, const int &size, const QString &name, bool defaultDeleteFiles): QDialog(parent) {",
      "46:     setupUi(this);",
      "47:     if (size == 1)",
      "49:     else",
      "50:       label->setText(tr(\"Are you sure you want to delete these %1 torrents from the transfer list?\", \"Are you sure you want to delete these 5 torrents from the transfer list?\").arg(QString::number(size)));",
      "",
      "[Removed Lines]",
      "48:       label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(name));",
      "",
      "[Added Lines]",
      "49:       label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(Utils::String::toHtmlEscaped(name)));",
      "",
      "---------------"
    ],
    "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp": [
      "File: src/gui/properties/peerlistwidget.cpp -> src/gui/properties/peerlistwidget.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());",
      "402:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());",
      "403:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);",
      "405:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());",
      "406:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());",
      "407:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());",
      "",
      "[Removed Lines]",
      "404:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());",
      "",
      "[Added Lines]",
      "404:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "432:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);",
      "433:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());",
      "434:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);",
      "436:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());",
      "437:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());",
      "438:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());",
      "",
      "[Removed Lines]",
      "435:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());",
      "",
      "[Added Lines]",
      "435:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));",
      "",
      "---------------"
    ],
    "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp": [
      "File: src/gui/properties/propertieswidget.cpp -> src/gui/properties/propertieswidget.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "314:         label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));",
      "320:         loadUrlSeeds();",
      "325:         PropListModel->model()->setupModelData(m_torrent->info());",
      "",
      "[Removed Lines]",
      "317:         comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment()));",
      "322:         label_created_by_val->setText(m_torrent->creator());",
      "",
      "[Added Lines]",
      "317:         comment_text->setText(Utils::Misc::parseHtmlLinks(Utils::String::toHtmlEscaped(m_torrent->comment())));",
      "322:         label_created_by_val->setText(Utils::String::toHtmlEscaped(m_torrent->creator()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b5e7eb0eac107ad9b1795e7b355443cf9532d18",
      "candidate_info": {
        "commit_hash": "3b5e7eb0eac107ad9b1795e7b355443cf9532d18",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/3b5e7eb0eac107ad9b1795e7b355443cf9532d18",
        "files": [
          "src/base/utils/string.cpp"
        ],
        "message": "Fix compile error: \u2018escape\u2019 is not a member of \u2018Qt\u2019",
        "before_after_code_files": [
          "src/base/utils/string.cpp||src/base/utils/string.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base/utils/string.cpp||src/base/utils/string.cpp"
          ],
          "candidate": [
            "src/base/utils/string.cpp||src/base/utils/string.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/base/utils/string.cpp||src/base/utils/string.cpp": [
          "File: src/base/utils/string.cpp -> src/base/utils/string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: #ifdef QBT_USES_QT5",
          "218:     return str.toHtmlEscaped();",
          "219: #else",
          "221: #endif",
          "222: }",
          "",
          "[Removed Lines]",
          "220:     return Qt::escape(str);",
          "",
          "[Added Lines]",
          "222:     QString rich;",
          "223:     const int len = str.length();",
          "224:     rich.reserve(int(len * 1.1));",
          "225:     for (int i = 0; i < len; ++i) {",
          "226:         if (str.at(i) == QLatin1Char('<'))",
          "227:             rich += QLatin1String(\"&lt;\");",
          "228:         else if (str.at(i) == QLatin1Char('>'))",
          "229:             rich += QLatin1String(\"&gt;\");",
          "230:         else if (str.at(i) == QLatin1Char('&'))",
          "231:             rich += QLatin1String(\"&amp;\");",
          "232:         else if (str.at(i) == QLatin1Char('\"'))",
          "233:             rich += QLatin1String(\"&quot;\");",
          "234:         else",
          "235:             rich += str.at(i);",
          "236:     }",
          "237:     rich.squeeze();",
          "238:     return rich;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87384ca2a22657660b3a0c8ae9962f0fde3d0ee9",
      "candidate_info": {
        "commit_hash": "87384ca2a22657660b3a0c8ae9962f0fde3d0ee9",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/87384ca2a22657660b3a0c8ae9962f0fde3d0ee9",
        "files": [
          "src/base/logger.cpp",
          "src/base/utils/string.cpp",
          "src/base/utils/string.h",
          "src/gui/deletionconfirmationdlg.h",
          "src/gui/properties/peerlistwidget.cpp",
          "src/gui/properties/propertieswidget.cpp"
        ],
        "message": "Replace Utils::String::toHtmlEscaped() by QString::.toHtmlEscaped()",
        "before_after_code_files": [
          "src/base/logger.cpp||src/base/logger.cpp",
          "src/base/utils/string.cpp||src/base/utils/string.cpp",
          "src/base/utils/string.h||src/base/utils/string.h",
          "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
          "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
          "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base/logger.cpp||src/base/logger.cpp",
            "src/base/utils/string.cpp||src/base/utils/string.cpp",
            "src/base/utils/string.h||src/base/utils/string.h",
            "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
            "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
            "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
          ],
          "candidate": [
            "src/base/logger.cpp||src/base/logger.cpp",
            "src/base/utils/string.cpp||src/base/utils/string.cpp",
            "src/base/utils/string.h||src/base/utils/string.h",
            "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
            "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
            "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/base/logger.cpp||src/base/logger.cpp": [
          "File: src/base/logger.cpp -> src/base/logger.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: {",
          "38:     QWriteLocker locker(&lock);",
          "41:     m_messages.push_back(temp);",
          "43:     if (m_messages.size() >= MAX_LOG_MESSAGES)",
          "",
          "[Removed Lines]",
          "40:     Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, Utils::String::toHtmlEscaped(message) };",
          "",
          "[Added Lines]",
          "40:     Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, message.toHtmlEscaped() };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: {",
          "51:     QWriteLocker locker(&lock);",
          "54:     m_peers.push_back(temp);",
          "56:     if (m_peers.size() >= MAX_LOG_MESSAGES)",
          "",
          "[Removed Lines]",
          "53:     Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), Utils::String::toHtmlEscaped(ip), blocked, Utils::String::toHtmlEscaped(reason) };",
          "",
          "[Added Lines]",
          "53:     Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), ip.toHtmlEscaped(), blocked, reason.toHtmlEscaped() };",
          "",
          "---------------"
        ],
        "src/base/utils/string.cpp||src/base/utils/string.cpp": [
          "File: src/base/utils/string.cpp -> src/base/utils/string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     return (diff == 0);",
          "185: }",
          "",
          "[Removed Lines]",
          "187: QString Utils::String::toHtmlEscaped(const QString &str)",
          "188: {",
          "189:     return str.toHtmlEscaped();",
          "190: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/base/utils/string.h||src/base/utils/string.h": [
          "File: src/base/utils/string.h -> src/base/utils/string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         bool slowEquals(const QByteArray &a, const QByteArray &b);",
          "51:         bool naturalCompareCaseSensitive(const QString &left, const QString &right);",
          "52:         bool naturalCompareCaseInsensitive(const QString &left, const QString &right);",
          "53:     }",
          "",
          "[Removed Lines]",
          "49:         QString toHtmlEscaped(const QString &str);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h": [
          "File: src/gui/deletionconfirmationdlg.h -> src/gui/deletionconfirmationdlg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   DeletionConfirmationDlg(QWidget *parent, const int &size, const QString &name, bool defaultDeleteFiles): QDialog(parent) {",
          "47:     setupUi(this);",
          "48:     if (size == 1)",
          "50:     else",
          "51:       label->setText(tr(\"Are you sure you want to delete these %1 torrents from the transfer list?\", \"Are you sure you want to delete these 5 torrents from the transfer list?\").arg(QString::number(size)));",
          "",
          "[Removed Lines]",
          "49:       label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(Utils::String::toHtmlEscaped(name)));",
          "",
          "[Added Lines]",
          "49:       label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(name.toHtmlEscaped()));",
          "",
          "---------------"
        ],
        "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp": [
          "File: src/gui/properties/peerlistwidget.cpp -> src/gui/properties/peerlistwidget.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());",
          "398:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());",
          "399:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);",
          "401:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());",
          "402:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());",
          "403:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());",
          "",
          "[Removed Lines]",
          "400:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));",
          "",
          "[Added Lines]",
          "400:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client().toHtmlEscaped());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);",
          "429:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());",
          "430:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);",
          "432:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());",
          "433:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());",
          "434:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());",
          "",
          "[Removed Lines]",
          "431:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));",
          "",
          "[Added Lines]",
          "431:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client().toHtmlEscaped());",
          "",
          "---------------"
        ],
        "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp": [
          "File: src/gui/properties/propertieswidget.cpp -> src/gui/properties/propertieswidget.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:         label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));",
          "313:         loadUrlSeeds();",
          "318:         PropListModel->model()->setupModelData(m_torrent->info());",
          "",
          "[Removed Lines]",
          "310:         comment_text->setText(Utils::Misc::parseHtmlLinks(Utils::String::toHtmlEscaped(m_torrent->comment())));",
          "315:         label_created_by_val->setText(Utils::String::toHtmlEscaped(m_torrent->creator()));",
          "",
          "[Added Lines]",
          "310:         comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment().toHtmlEscaped()));",
          "315:         label_created_by_val->setText(m_torrent->creator().toHtmlEscaped());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9c2bd35020aaf66fdace975e503073ee9960653",
      "candidate_info": {
        "commit_hash": "f9c2bd35020aaf66fdace975e503073ee9960653",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/f9c2bd35020aaf66fdace975e503073ee9960653",
        "files": [
          "src/gui/properties/downloadedpiecesbar.cpp",
          "src/gui/properties/downloadedpiecesbar.h",
          "src/gui/properties/pieceavailabilitybar.cpp",
          "src/gui/properties/pieceavailabilitybar.h",
          "src/gui/properties/propertieswidget.cpp",
          "src/gui/properties/propertieswidget.h"
        ],
        "message": "Follow project coding style. Issue #2192.",
        "before_after_code_files": [
          "src/gui/properties/downloadedpiecesbar.cpp||src/gui/properties/downloadedpiecesbar.cpp",
          "src/gui/properties/downloadedpiecesbar.h||src/gui/properties/downloadedpiecesbar.h",
          "src/gui/properties/pieceavailabilitybar.cpp||src/gui/properties/pieceavailabilitybar.cpp",
          "src/gui/properties/pieceavailabilitybar.h||src/gui/properties/pieceavailabilitybar.h",
          "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp",
          "src/gui/properties/propertieswidget.h||src/gui/properties/propertieswidget.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
          ],
          "candidate": [
            "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/gui/properties/downloadedpiecesbar.cpp||src/gui/properties/downloadedpiecesbar.cpp": [
          "File: src/gui/properties/downloadedpiecesbar.cpp -> src/gui/properties/downloadedpiecesbar.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <QDebug>",
          "33: #include \"downloadedpiecesbar.h\"",
          "36: {",
          "45: }",
          "47: QVector<float> DownloadedPiecesBar::bitfieldToFloatVector(const QBitArray &vecin, int reqSize)",
          "48: {",
          "107:         }",
          "122: }",
          "125: int DownloadedPiecesBar::mixTwoColors(int &rgb1, int &rgb2, float ratio)",
          "126: {",
          "141: }",
          "143: void DownloadedPiecesBar::updateImage()",
          "144: {",
          "176:     }",
          "180:     }",
          "183: }",
          "185: void DownloadedPiecesBar::setProgress(const QBitArray &pieces, const QBitArray &downloadedPieces)",
          "186: {",
          "192: }",
          "194: void DownloadedPiecesBar::updatePieceColors()",
          "195: {",
          "201: }",
          "203: void DownloadedPiecesBar::clear()",
          "204: {",
          "207: }",
          "210: {",
          "229: }",
          "231: void DownloadedPiecesBar::setColors(int background, int border, int complete, int incomplete)",
          "232: {",
          "",
          "[Removed Lines]",
          "35: DownloadedPiecesBar::DownloadedPiecesBar(QWidget *parent): QWidget(parent)",
          "37:   setToolTip(QString(\"%1\\n%2\\n%3\").arg(tr(\"White: Missing pieces\")).arg(tr(\"Green: Partial pieces\")).arg(tr(\"Blue: Completed pieces\")));",
          "39:   m_bgColor = 0xffffff;",
          "40:   m_borderColor = palette().color(QPalette::Dark).rgb();",
          "41:   m_pieceColor = 0x0000ff;",
          "42:   m_dlPieceColor = 0x00d000;",
          "44:   updatePieceColors();",
          "49:   QVector<float> result(reqSize, 0.0);",
          "50:   if (vecin.isEmpty()) return result;",
          "52:   const float ratio = vecin.size() / (float)reqSize;",
          "59:   for (int x = 0; x < reqSize; ++x) {",
          "61:     const float fromR = x * ratio;",
          "62:     const float toR = (x + 1) * ratio;",
          "65:     int fromC = fromR;// std::floor not needed",
          "66:     int toC = std::ceil(toR);",
          "67:     if (toC > vecin.size())",
          "68:         --toC;",
          "71:     int x2 = fromC;",
          "74:     const int toCMinusOne = toC - 1;",
          "77:     float value = 0;",
          "80:     if (x2 == toCMinusOne) {",
          "81:       if (vecin[x2]) {",
          "82:         value += ratio;",
          "83:       }",
          "84:       ++x2;",
          "85:     }",
          "87:     else {",
          "89:       if (x2 != fromR) {",
          "90:         if (vecin[x2]) {",
          "91:           value += 1.0 - (fromR - fromC);",
          "92:         }",
          "93:         ++x2;",
          "94:       }",
          "97:       for (; x2 < toCMinusOne; ++x2) {",
          "98:         if (vecin[x2]) {",
          "99:           value += 1.0;",
          "100:         }",
          "101:       }",
          "104:       if (x2 == toCMinusOne) {",
          "105:         if (vecin[x2]) {",
          "106:           value += 1.0 - (toC - toR);",
          "108:         ++x2;",
          "109:       }",
          "110:     }",
          "113:     value /= ratio;",
          "116:     value = qMin(value, (float)1.0);",
          "118:     result[x] = value;",
          "119:   }",
          "121:   return result;",
          "127:   int r1 = qRed(rgb1);",
          "128:   int g1 = qGreen(rgb1);",
          "129:   int b1 = qBlue(rgb1);",
          "131:   int r2 = qRed(rgb2);",
          "132:   int g2 = qGreen(rgb2);",
          "133:   int b2 = qBlue(rgb2);",
          "135:   float ratio_n = 1.0 - ratio;",
          "136:   int r = (r1 * ratio_n) + (r2 * ratio);",
          "137:   int g = (g1 * ratio_n) + (g2 * ratio);",
          "138:   int b = (b1 * ratio_n) + (b2 * ratio);",
          "140:   return qRgb(r, g, b);",
          "146:   QImage image2(width() - 2, 1, QImage::Format_RGB888);",
          "147:   if (image2.isNull()) {",
          "148:       qDebug() << \"QImage image2() allocation failed, width():\" << width();",
          "149:       return;",
          "150:   }",
          "152:   if (m_pieces.isEmpty()) {",
          "153:     image2.fill(0xffffff);",
          "154:     m_image = image2;",
          "155:     update();",
          "156:     return;",
          "157:   }",
          "159:   QVector<float> scaled_pieces = bitfieldToFloatVector(m_pieces, image2.width());",
          "160:   QVector<float> scaled_pieces_dl = bitfieldToFloatVector(m_downloadedPieces, image2.width());",
          "163:   for (int x = 0; x < scaled_pieces.size(); ++x)",
          "164:   {",
          "165:     float pieces2_val = scaled_pieces.at(x);",
          "166:     float pieces2_val_dl = scaled_pieces_dl.at(x);",
          "167:     if (pieces2_val_dl != 0)",
          "168:     {",
          "169:       float fill_ratio = pieces2_val + pieces2_val_dl;",
          "170:       float ratio = pieces2_val_dl / fill_ratio;",
          "172:       int mixedColor = mixTwoColors(m_pieceColor, m_dlPieceColor, ratio);",
          "173:       mixedColor = mixTwoColors(m_bgColor, mixedColor, fill_ratio);",
          "175:       image2.setPixel(x, 0, mixedColor);",
          "177:     else",
          "178:     {",
          "179:       image2.setPixel(x, 0, m_pieceColors[pieces2_val * 255]);",
          "181:   }",
          "182:   m_image = image2;",
          "187:   m_pieces = pieces;",
          "188:   m_downloadedPieces = downloadedPieces;",
          "190:   updateImage();",
          "191:   update();",
          "196:   m_pieceColors = QVector<int>(256);",
          "197:   for (int i = 0; i < 256; ++i) {",
          "198:     float ratio = (i / 255.0);",
          "199:     m_pieceColors[i] = mixTwoColors(m_bgColor, m_pieceColor, ratio);",
          "200:   }",
          "205:   m_image = QImage();",
          "206:   update();",
          "209: void DownloadedPiecesBar::paintEvent(QPaintEvent *)",
          "211:   QPainter painter(this);",
          "212:   QRect imageRect(1, 1, width() - 2, height() - 2);",
          "213:   if (m_image.isNull())",
          "214:   {",
          "215:     painter.setBrush(Qt::white);",
          "216:     painter.drawRect(imageRect);",
          "217:   }",
          "218:   else",
          "219:   {",
          "220:     if (m_image.width() != imageRect.width())",
          "221:       updateImage();",
          "222:     painter.drawImage(imageRect, m_image);",
          "223:   }",
          "224:   QPainterPath border;",
          "225:   border.addRect(0, 0, width() - 1, height() - 1);",
          "227:   painter.setPen(m_borderColor);",
          "228:   painter.drawPath(border);",
          "233:   m_bgColor = background;",
          "234:   m_borderColor = border;",
          "235:   m_pieceColor = complete;",
          "236:   m_dlPieceColor = incomplete;",
          "238:   updatePieceColors();",
          "239:   updateImage();",
          "240:   update();",
          "241: }",
          "",
          "[Added Lines]",
          "35: DownloadedPiecesBar::DownloadedPiecesBar(QWidget *parent) : QWidget(parent)",
          "37:     setToolTip(QString(\"%1\\n%2\\n%3\").arg(tr(\"White: Missing pieces\")).arg(tr(\"Green: Partial pieces\")).arg(tr(\"Blue: Completed pieces\")));",
          "39:     m_bgColor = 0xffffff;",
          "40:     m_borderColor = palette().color(QPalette::Dark).rgb();",
          "41:     m_pieceColor = 0x0000ff;",
          "42:     m_dlPieceColor = 0x00d000;",
          "44:     updatePieceColors();",
          "49:     QVector<float> result(reqSize, 0.0);",
          "50:     if (vecin.isEmpty()) return result;",
          "52:     const float ratio = vecin.size() / (float)reqSize;",
          "59:     for (int x = 0; x < reqSize; ++x) {",
          "61:         const float fromR = x * ratio;",
          "62:         const float toR = (x + 1) * ratio;",
          "65:         int fromC = fromR;// std::floor not needed",
          "66:         int toC = std::ceil(toR);",
          "67:         if (toC > vecin.size())",
          "68:             --toC;",
          "71:         int x2 = fromC;",
          "74:         const int toCMinusOne = toC - 1;",
          "77:         float value = 0;",
          "80:         if (x2 == toCMinusOne) {",
          "81:             if (vecin[x2])",
          "82:                 value += ratio;",
          "83:             ++x2;",
          "84:         }",
          "86:         else {",
          "88:             if (x2 != fromR) {",
          "89:                 if (vecin[x2])",
          "90:                     value += 1.0 - (fromR - fromC);",
          "91:                 ++x2;",
          "92:             }",
          "95:             for (; x2 < toCMinusOne; ++x2)",
          "96:                 if (vecin[x2])",
          "97:                     value += 1.0;",
          "100:             if (x2 == toCMinusOne) {",
          "101:                 if (vecin[x2])",
          "102:                     value += 1.0 - (toC - toR);",
          "103:                 ++x2;",
          "104:             }",
          "108:         value /= ratio;",
          "111:         value = qMin(value, (float)1.0);",
          "113:         result[x] = value;",
          "114:     }",
          "116:     return result;",
          "121:     int r1 = qRed(rgb1);",
          "122:     int g1 = qGreen(rgb1);",
          "123:     int b1 = qBlue(rgb1);",
          "125:     int r2 = qRed(rgb2);",
          "126:     int g2 = qGreen(rgb2);",
          "127:     int b2 = qBlue(rgb2);",
          "129:     float ratio_n = 1.0 - ratio;",
          "130:     int r = (r1 * ratio_n) + (r2 * ratio);",
          "131:     int g = (g1 * ratio_n) + (g2 * ratio);",
          "132:     int b = (b1 * ratio_n) + (b2 * ratio);",
          "134:     return qRgb(r, g, b);",
          "140:     QImage image2(width() - 2, 1, QImage::Format_RGB888);",
          "141:     if (image2.isNull()) {",
          "142:         qDebug() << \"QImage image2() allocation failed, width():\" << width();",
          "143:         return;",
          "144:     }",
          "146:     if (m_pieces.isEmpty()) {",
          "147:         image2.fill(0xffffff);",
          "148:         m_image = image2;",
          "149:         update();",
          "150:         return;",
          "153:     QVector<float> scaled_pieces = bitfieldToFloatVector(m_pieces, image2.width());",
          "154:     QVector<float> scaled_pieces_dl = bitfieldToFloatVector(m_downloadedPieces, image2.width());",
          "157:     for (int x = 0; x < scaled_pieces.size(); ++x) {",
          "158:         float pieces2_val = scaled_pieces.at(x);",
          "159:         float pieces2_val_dl = scaled_pieces_dl.at(x);",
          "160:         if (pieces2_val_dl != 0) {",
          "161:             float fill_ratio = pieces2_val + pieces2_val_dl;",
          "162:             float ratio = pieces2_val_dl / fill_ratio;",
          "164:             int mixedColor = mixTwoColors(m_pieceColor, m_dlPieceColor, ratio);",
          "165:             mixedColor = mixTwoColors(m_bgColor, mixedColor, fill_ratio);",
          "167:             image2.setPixel(x, 0, mixedColor);",
          "168:         }",
          "169:         else {",
          "170:             image2.setPixel(x, 0, m_pieceColors[pieces2_val * 255]);",
          "171:         }",
          "173:     m_image = image2;",
          "178:     m_pieces = pieces;",
          "179:     m_downloadedPieces = downloadedPieces;",
          "181:     updateImage();",
          "182:     update();",
          "187:     m_pieceColors = QVector<int>(256);",
          "188:     for (int i = 0; i < 256; ++i) {",
          "189:         float ratio = (i / 255.0);",
          "190:         m_pieceColors[i] = mixTwoColors(m_bgColor, m_pieceColor, ratio);",
          "191:     }",
          "196:     m_image = QImage();",
          "197:     update();",
          "200: void DownloadedPiecesBar::paintEvent(QPaintEvent*)",
          "202:     QPainter painter(this);",
          "203:     QRect imageRect(1, 1, width() - 2, height() - 2);",
          "204:     if (m_image.isNull()) {",
          "205:         painter.setBrush(Qt::white);",
          "206:         painter.drawRect(imageRect);",
          "207:     }",
          "208:     else {",
          "209:         if (m_image.width() != imageRect.width())",
          "210:             updateImage();",
          "211:         painter.drawImage(imageRect, m_image);",
          "212:     }",
          "213:     QPainterPath border;",
          "214:     border.addRect(0, 0, width() - 1, height() - 1);",
          "216:     painter.setPen(m_borderColor);",
          "217:     painter.drawPath(border);",
          "222:     m_bgColor = background;",
          "223:     m_borderColor = border;",
          "224:     m_pieceColor = complete;",
          "225:     m_dlPieceColor = incomplete;",
          "227:     updatePieceColors();",
          "228:     updateImage();",
          "229:     update();",
          "230: }",
          "",
          "---------------"
        ],
        "src/gui/properties/downloadedpiecesbar.h||src/gui/properties/downloadedpiecesbar.h": [
          "File: src/gui/properties/downloadedpiecesbar.h -> src/gui/properties/downloadedpiecesbar.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <QVector>",
          "40: class DownloadedPiecesBar: public QWidget {",
          "44: private:",
          "72: public:",
          "81: protected:",
          "83: };",
          "85: #endif // DOWNLOADEDPIECESBAR_H",
          "",
          "[Removed Lines]",
          "41:   Q_OBJECT",
          "42:   Q_DISABLE_COPY(DownloadedPiecesBar)",
          "45:   QImage m_image;",
          "50:   int m_bgColor;",
          "52:   int m_borderColor;",
          "54:   int m_pieceColor;",
          "56:   int m_dlPieceColor;",
          "58:   QVector<int> m_pieceColors;",
          "62:   QBitArray m_pieces;",
          "63:   QBitArray m_downloadedPieces;",
          "66:   QVector<float> bitfieldToFloatVector(const QBitArray &vecin, int reqSize);",
          "68:   int mixTwoColors(int &rgb1, int &rgb2, float ratio);",
          "70:   void updateImage();",
          "73:   DownloadedPiecesBar(QWidget *parent);",
          "75:   void setProgress(const QBitArray &m_pieces, const QBitArray &downloadedPieces);",
          "76:   void updatePieceColors();",
          "77:   void clear();",
          "79:   void setColors(int background, int border, int complete, int incomplete);",
          "82:   void paintEvent(QPaintEvent *);",
          "",
          "[Added Lines]",
          "41:     Q_OBJECT",
          "42:     Q_DISABLE_COPY(DownloadedPiecesBar)",
          "45:     QImage m_image;",
          "50:     int m_bgColor;",
          "52:     int m_borderColor;",
          "54:     int m_pieceColor;",
          "56:     int m_dlPieceColor;",
          "58:     QVector<int> m_pieceColors;",
          "62:     QBitArray m_pieces;",
          "63:     QBitArray m_downloadedPieces;",
          "66:     QVector<float> bitfieldToFloatVector(const QBitArray &vecin, int reqSize);",
          "68:     int mixTwoColors(int &rgb1, int &rgb2, float ratio);",
          "70:     void updateImage();",
          "73:     DownloadedPiecesBar(QWidget *parent);",
          "75:     void setProgress(const QBitArray &m_pieces, const QBitArray &downloadedPieces);",
          "76:     void updatePieceColors();",
          "77:     void clear();",
          "79:     void setColors(int background, int border, int complete, int incomplete);",
          "82:     void paintEvent(QPaintEvent *);",
          "",
          "---------------"
        ],
        "src/gui/properties/pieceavailabilitybar.cpp||src/gui/properties/pieceavailabilitybar.cpp": [
          "File: src/gui/properties/pieceavailabilitybar.cpp -> src/gui/properties/pieceavailabilitybar.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     update();",
          "193: }",
          "196: {",
          "197:     QPainter painter(this);",
          "198:     QRect imageRect(1, 1, width() - 2, height() - 2);",
          "",
          "[Removed Lines]",
          "195: void PieceAvailabilityBar::paintEvent(QPaintEvent *)",
          "",
          "[Added Lines]",
          "194: void PieceAvailabilityBar::paintEvent(QPaintEvent*)",
          "",
          "---------------"
        ],
        "src/gui/properties/pieceavailabilitybar.h||src/gui/properties/pieceavailabilitybar.h": [
          "File: src/gui/properties/pieceavailabilitybar.h -> src/gui/properties/pieceavailabilitybar.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     void setColors(int background, int border, int available);",
          "78: protected:",
          "80: };",
          "82: #endif // PIECEAVAILABILITYBAR_H",
          "",
          "[Removed Lines]",
          "79:     void paintEvent(QPaintEvent *);",
          "",
          "[Added Lines]",
          "79:     void paintEvent(QPaintEvent*);",
          "",
          "---------------"
        ],
        "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp": [
          "File: src/gui/properties/propertieswidget.cpp -> src/gui/properties/propertieswidget.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <QDebug>",
          "32: #include <QTimer>",
          "33: #include <QListWidgetItem>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"propertieswidget.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: #include \"lineedit.h\"",
          "62: #include \"transferlistwidget.h\"",
          "63: #include \"autoexpandabledialog.h\"",
          "103: #ifdef QBT_USES_QT5",
          "106: #else",
          "111: #endif",
          "169: }",
          "187: }",
          "195: }",
          "203: }",
          "228: }",
          "265: }",
          "267: BitTorrent::TorrentHandle *PropertiesWidget::getCurrentTorrent() const",
          "268: {",
          "270: }",
          "272: void PropertiesWidget::updateSavePath(BitTorrent::TorrentHandle *const torrent)",
          "273: {",
          "277: }",
          "279: void PropertiesWidget::loadTrackers(BitTorrent::TorrentHandle *const torrent)",
          "",
          "[Removed Lines]",
          "64: #include \"propertieswidget.h\"",
          "66: PropertiesWidget::PropertiesWidget(QWidget *parent, MainWindow* main_window, TransferListWidget *transferList):",
          "67:   QWidget(parent), transferList(transferList), main_window(main_window), m_torrent(0) {",
          "68:   setupUi(this);",
          "69:   setAutoFillBackground(true);",
          "71:   state = VISIBLE;",
          "74:   PropListModel = new TorrentContentFilterModel();",
          "75:   filesList->setModel(PropListModel);",
          "76:   PropDelegate = new PropListDelegate(this);",
          "77:   filesList->setItemDelegate(PropDelegate);",
          "78:   filesList->setSortingEnabled(true);",
          "80:   m_contentFilterLine = new LineEdit(this);",
          "81:   m_contentFilterLine->setPlaceholderText(tr(\"Filter files...\"));",
          "82:   m_contentFilterLine->setMaximumSize(300, m_contentFilterLine->size().height());",
          "83:   connect(m_contentFilterLine, SIGNAL(textChanged(QString)), this, SLOT(filterText(QString)));",
          "84:   contentFilterLayout->insertWidget(3, m_contentFilterLine);",
          "87:   connect(filesList, SIGNAL(clicked(const QModelIndex&)), filesList, SLOT(edit(const QModelIndex&)));",
          "88:   connect(selectAllButton, SIGNAL(clicked()), PropListModel, SLOT(selectAll()));",
          "89:   connect(selectNoneButton, SIGNAL(clicked()), PropListModel, SLOT(selectNone()));",
          "90:   connect(filesList, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(displayFilesListMenu(const QPoint&)));",
          "91:   connect(filesList, SIGNAL(doubleClicked(const QModelIndex &)), this, SLOT(openDoubleClickedFile(const QModelIndex &)));",
          "92:   connect(PropListModel, SIGNAL(filteredFilesChanged()), this, SLOT(filteredFilesChanged()));",
          "93:   connect(listWebSeeds, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(displayWebSeedListMenu(const QPoint&)));",
          "94:   connect(transferList, SIGNAL(currentTorrentChanged(BitTorrent::TorrentHandle *const)), this, SLOT(loadTorrentInfos(BitTorrent::TorrentHandle *const)));",
          "95:   connect(PropDelegate, SIGNAL(filteredFilesChanged()), this, SLOT(filteredFilesChanged()));",
          "96:   connect(stackedProperties, SIGNAL(currentChanged(int)), this, SLOT(loadDynamicData()));",
          "97:   connect(BitTorrent::Session::instance(), SIGNAL(torrentSavePathChanged(BitTorrent::TorrentHandle *const)), this, SLOT(updateSavePath(BitTorrent::TorrentHandle *const)));",
          "98:   connect(BitTorrent::Session::instance(), SIGNAL(torrentMetadataLoaded(BitTorrent::TorrentHandle *const)), this, SLOT(updateTorrentInfos(BitTorrent::TorrentHandle *const)));",
          "99:   connect(filesList->header(), SIGNAL(sectionMoved(int, int, int)), this, SLOT(saveSettings()));",
          "100:   connect(filesList->header(), SIGNAL(sectionResized(int, int, int)), this, SLOT(saveSettings()));",
          "101:   connect(filesList->header(), SIGNAL(sortIndicatorChanged(int, Qt::SortOrder)), this, SLOT(saveSettings()));",
          "105:   int barHeight = devicePixelRatio() * 18;",
          "108:   QFont defFont;",
          "109:   QFontMetrics fMetrics(defFont, 0);  // need to be device-dependent",
          "110:   int barHeight = fMetrics.height() * 5 / 4;",
          "114:   tempProgressBarArea->setVisible(false);",
          "115:   downloaded_pieces = new DownloadedPiecesBar(this);",
          "116:   groupBarLayout->addWidget(downloaded_pieces, 0, 1);",
          "117:   downloaded_pieces->setFixedHeight(barHeight);",
          "118:   downloaded_pieces->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed);",
          "121:   tempAvailabilityBarArea->setVisible(false);",
          "122:   pieces_availability = new PieceAvailabilityBar(this);",
          "123:   groupBarLayout->addWidget(pieces_availability, 1, 1);",
          "124:   pieces_availability->setFixedHeight(barHeight);",
          "125:   pieces_availability->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed);",
          "128:   trackerList = new TrackerList(this);",
          "129:   trackerUpButton->setIcon(GuiIconProvider::instance()->getIcon(\"go-up\"));",
          "130:   trackerUpButton->setIconSize(Utils::Misc::smallIconSize());",
          "131:   trackerDownButton->setIcon(GuiIconProvider::instance()->getIcon(\"go-down\"));",
          "132:   trackerDownButton->setIconSize(Utils::Misc::smallIconSize());",
          "133:   connect(trackerUpButton, SIGNAL(clicked()), trackerList, SLOT(moveSelectionUp()));",
          "134:   connect(trackerDownButton, SIGNAL(clicked()), trackerList, SLOT(moveSelectionDown()));",
          "135:   horizontalLayout_trackers->insertWidget(0, trackerList);",
          "136:   connect(trackerList->header(), SIGNAL(sectionMoved(int, int, int)), trackerList, SLOT(saveSettings()));",
          "137:   connect(trackerList->header(), SIGNAL(sectionResized(int, int, int)), trackerList, SLOT(saveSettings()));",
          "138:   connect(trackerList->header(), SIGNAL(sortIndicatorChanged(int, Qt::SortOrder)), trackerList, SLOT(saveSettings()));",
          "140:   peersList = new PeerListWidget(this);",
          "141:   peerpage_layout->addWidget(peersList);",
          "142:   connect(peersList->header(), SIGNAL(sectionMoved(int, int, int)), peersList, SLOT(saveSettings()));",
          "143:   connect(peersList->header(), SIGNAL(sectionResized(int, int, int)), peersList, SLOT(saveSettings()));",
          "144:   connect(peersList->header(), SIGNAL(sortIndicatorChanged(int, Qt::SortOrder)), peersList, SLOT(saveSettings()));",
          "146:   speedWidget = new SpeedWidget(this);",
          "147:   speed_layout->addWidget(speedWidget);",
          "149:   m_tabBar = new PropTabBar();",
          "150:   m_tabBar->setContentsMargins(0, 5, 0, 0);",
          "151:   verticalLayout->addLayout(m_tabBar);",
          "152:   connect(m_tabBar, SIGNAL(tabChanged(int)), stackedProperties, SLOT(setCurrentIndex(int)));",
          "153:   connect(m_tabBar, SIGNAL(tabChanged(int)), this, SLOT(saveSettings()));",
          "154:   connect(m_tabBar, SIGNAL(visibilityToggled(bool)), SLOT(setVisibility(bool)));",
          "155:   connect(m_tabBar, SIGNAL(visibilityToggled(bool)), this, SLOT(saveSettings()));",
          "157:   refreshTimer = new QTimer(this);",
          "158:   connect(refreshTimer, SIGNAL(timeout()), this, SLOT(loadDynamicData()));",
          "159:   refreshTimer->start(3000); // 3sec",
          "160:   editHotkeyFile = new QShortcut(QKeySequence(\"F2\"), filesList, 0, 0, Qt::WidgetShortcut);",
          "161:   connect(editHotkeyFile, SIGNAL(activated()), SLOT(renameSelectedFile()));",
          "162:   editHotkeyWeb = new QShortcut(QKeySequence(\"F2\"), listWebSeeds, 0, 0, Qt::WidgetShortcut);",
          "163:   connect(editHotkeyWeb, SIGNAL(activated()), SLOT(editWebSeed()));",
          "164:   connect(listWebSeeds, SIGNAL(doubleClicked(QModelIndex)), SLOT(editWebSeed()));",
          "165:   deleteHotkeyWeb = new QShortcut(QKeySequence(QKeySequence::Delete), listWebSeeds, 0, 0, Qt::WidgetShortcut);",
          "166:   connect(deleteHotkeyWeb, SIGNAL(activated()), SLOT(deleteSelectedUrlSeeds()));",
          "167:   openHotkeyFile = new QShortcut(QKeySequence(\"Return\"), filesList, 0, 0, Qt::WidgetShortcut);",
          "168:   connect(openHotkeyFile, SIGNAL(activated()), SLOT(openSelectedFile()));",
          "171: PropertiesWidget::~PropertiesWidget() {",
          "172:   qDebug() << Q_FUNC_INFO << \"ENTER\";",
          "173:   delete refreshTimer;",
          "174:   delete trackerList;",
          "175:   delete peersList;",
          "176:   delete speedWidget;",
          "177:   delete downloaded_pieces;",
          "178:   delete pieces_availability;",
          "179:   delete PropListModel;",
          "180:   delete PropDelegate;",
          "181:   delete m_tabBar;",
          "182:   delete editHotkeyFile;",
          "183:   delete editHotkeyWeb;",
          "184:   delete deleteHotkeyWeb;",
          "185:   delete openHotkeyFile;",
          "186:   qDebug() << Q_FUNC_INFO << \"EXIT\";",
          "189: void PropertiesWidget::showPiecesAvailability(bool show) {",
          "190:   avail_pieces_lbl->setVisible(show);",
          "191:   pieces_availability->setVisible(show);",
          "192:   avail_average_lbl->setVisible(show);",
          "193:   if (show || (!show && !downloaded_pieces->isVisible()))",
          "194:     line_2->setVisible(show);",
          "197: void PropertiesWidget::showPiecesDownloaded(bool show) {",
          "198:   downloaded_pieces_lbl->setVisible(show);",
          "199:   downloaded_pieces->setVisible(show);",
          "200:   progress_lbl->setVisible(show);",
          "201:   if (show || (!show && !pieces_availability->isVisible()))",
          "202:     line_2->setVisible(show);",
          "205: void PropertiesWidget::setVisibility(bool visible) {",
          "206:   if (!visible && state == VISIBLE) {",
          "207:     QSplitter *hSplitter = static_cast<QSplitter*>(parentWidget());",
          "208:     stackedProperties->setVisible(false);",
          "209:     slideSizes = hSplitter->sizes();",
          "210:     hSplitter->handle(1)->setVisible(false);",
          "211:     hSplitter->handle(1)->setDisabled(true);",
          "212:     QList<int> sizes = QList<int>() << hSplitter->geometry().height()-30 << 30;",
          "213:     hSplitter->setSizes(sizes);",
          "214:     state = REDUCED;",
          "215:     return;",
          "216:   }",
          "218:   if (visible && state == REDUCED) {",
          "219:     stackedProperties->setVisible(true);",
          "220:     QSplitter *hSplitter = static_cast<QSplitter*>(parentWidget());",
          "221:     hSplitter->handle(1)->setDisabled(false);",
          "222:     hSplitter->handle(1)->setVisible(true);",
          "223:     hSplitter->setSizes(slideSizes);",
          "224:     state = VISIBLE;",
          "226:     loadDynamicData();",
          "227:   }",
          "230: void PropertiesWidget::clear() {",
          "231:   qDebug(\"Clearing torrent properties\");",
          "232:   save_path->clear();",
          "233:   lbl_creationDate->clear();",
          "234:   label_total_pieces_val->clear();",
          "235:   hash_lbl->clear();",
          "236:   comment_text->clear();",
          "237:   progress_lbl->clear();",
          "238:   trackerList->clear();",
          "239:   downloaded_pieces->clear();",
          "240:   pieces_availability->clear();",
          "241:   avail_average_lbl->clear();",
          "242:   wasted->clear();",
          "243:   upTotal->clear();",
          "244:   dlTotal->clear();",
          "245:   peersList->clear();",
          "246:   lbl_uplimit->clear();",
          "247:   lbl_dllimit->clear();",
          "248:   lbl_elapsed->clear();",
          "249:   lbl_connections->clear();",
          "250:   reannounce_lbl->clear();",
          "251:   shareRatio->clear();",
          "252:   listWebSeeds->clear();",
          "253:   m_contentFilterLine->clear();",
          "254:   PropListModel->model()->clear();",
          "255:   label_eta_val->clear();",
          "256:   label_seeds_val->clear();",
          "257:   label_peers_val->clear();",
          "258:   label_dl_speed_val->clear();",
          "259:   label_upload_speed_val->clear();",
          "260:   label_total_size_val->clear();",
          "261:   label_completed_on_val->clear();",
          "262:   label_last_complete_val->clear();",
          "263:   label_created_by_val->clear();",
          "264:   label_added_on_val->clear();",
          "269:   return m_torrent;",
          "274:   if (m_torrent == torrent) {",
          "275:     save_path->setText(Utils::Fs::toNativePath(m_torrent->savePath()));",
          "276:   }",
          "",
          "[Added Lines]",
          "67: PropertiesWidget::PropertiesWidget(QWidget *parent, MainWindow *main_window, TransferListWidget *transferList)",
          "68:     : QWidget(parent), transferList(transferList), main_window(main_window), m_torrent(0)",
          "69: {",
          "70:     setupUi(this);",
          "71:     setAutoFillBackground(true);",
          "73:     state = VISIBLE;",
          "76:     PropListModel = new TorrentContentFilterModel();",
          "77:     filesList->setModel(PropListModel);",
          "78:     PropDelegate = new PropListDelegate(this);",
          "79:     filesList->setItemDelegate(PropDelegate);",
          "80:     filesList->setSortingEnabled(true);",
          "82:     m_contentFilterLine = new LineEdit(this);",
          "83:     m_contentFilterLine->setPlaceholderText(tr(\"Filter files...\"));",
          "84:     m_contentFilterLine->setMaximumSize(300, m_contentFilterLine->size().height());",
          "85:     connect(m_contentFilterLine, SIGNAL(textChanged(QString)), this, SLOT(filterText(QString)));",
          "86:     contentFilterLayout->insertWidget(3, m_contentFilterLine);",
          "89:     connect(filesList, SIGNAL(clicked(const QModelIndex&)), filesList, SLOT(edit(const QModelIndex&)));",
          "90:     connect(selectAllButton, SIGNAL(clicked()), PropListModel, SLOT(selectAll()));",
          "91:     connect(selectNoneButton, SIGNAL(clicked()), PropListModel, SLOT(selectNone()));",
          "92:     connect(filesList, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(displayFilesListMenu(const QPoint&)));",
          "93:     connect(filesList, SIGNAL(doubleClicked(const QModelIndex&)), this, SLOT(openDoubleClickedFile(const QModelIndex&)));",
          "94:     connect(PropListModel, SIGNAL(filteredFilesChanged()), this, SLOT(filteredFilesChanged()));",
          "95:     connect(listWebSeeds, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(displayWebSeedListMenu(const QPoint&)));",
          "96:     connect(transferList, SIGNAL(currentTorrentChanged(BitTorrent::TorrentHandle * const)), this, SLOT(loadTorrentInfos(BitTorrent::TorrentHandle * const)));",
          "97:     connect(PropDelegate, SIGNAL(filteredFilesChanged()), this, SLOT(filteredFilesChanged()));",
          "98:     connect(stackedProperties, SIGNAL(currentChanged(int)), this, SLOT(loadDynamicData()));",
          "99:     connect(BitTorrent::Session::instance(), SIGNAL(torrentSavePathChanged(BitTorrent::TorrentHandle * const)), this, SLOT(updateSavePath(BitTorrent::TorrentHandle * const)));",
          "100:     connect(BitTorrent::Session::instance(), SIGNAL(torrentMetadataLoaded(BitTorrent::TorrentHandle * const)), this, SLOT(updateTorrentInfos(BitTorrent::TorrentHandle * const)));",
          "101:     connect(filesList->header(), SIGNAL(sectionMoved(int,int,int)), this, SLOT(saveSettings()));",
          "102:     connect(filesList->header(), SIGNAL(sectionResized(int,int,int)), this, SLOT(saveSettings()));",
          "103:     connect(filesList->header(), SIGNAL(sortIndicatorChanged(int,Qt::SortOrder)), this, SLOT(saveSettings()));",
          "107:     int barHeight = devicePixelRatio() * 18;",
          "110:     QFont defFont;",
          "111:     QFontMetrics fMetrics(defFont, 0); // need to be device-dependent",
          "112:     int barHeight = fMetrics.height() * 5 / 4;",
          "116:     tempProgressBarArea->setVisible(false);",
          "117:     downloaded_pieces = new DownloadedPiecesBar(this);",
          "118:     groupBarLayout->addWidget(downloaded_pieces, 0, 1);",
          "119:     downloaded_pieces->setFixedHeight(barHeight);",
          "120:     downloaded_pieces->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed);",
          "123:     tempAvailabilityBarArea->setVisible(false);",
          "124:     pieces_availability = new PieceAvailabilityBar(this);",
          "125:     groupBarLayout->addWidget(pieces_availability, 1, 1);",
          "126:     pieces_availability->setFixedHeight(barHeight);",
          "127:     pieces_availability->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed);",
          "130:     trackerList = new TrackerList(this);",
          "131:     trackerUpButton->setIcon(GuiIconProvider::instance()->getIcon(\"go-up\"));",
          "132:     trackerUpButton->setIconSize(Utils::Misc::smallIconSize());",
          "133:     trackerDownButton->setIcon(GuiIconProvider::instance()->getIcon(\"go-down\"));",
          "134:     trackerDownButton->setIconSize(Utils::Misc::smallIconSize());",
          "135:     connect(trackerUpButton, SIGNAL(clicked()), trackerList, SLOT(moveSelectionUp()));",
          "136:     connect(trackerDownButton, SIGNAL(clicked()), trackerList, SLOT(moveSelectionDown()));",
          "137:     horizontalLayout_trackers->insertWidget(0, trackerList);",
          "138:     connect(trackerList->header(), SIGNAL(sectionMoved(int,int,int)), trackerList, SLOT(saveSettings()));",
          "139:     connect(trackerList->header(), SIGNAL(sectionResized(int,int,int)), trackerList, SLOT(saveSettings()));",
          "140:     connect(trackerList->header(), SIGNAL(sortIndicatorChanged(int,Qt::SortOrder)), trackerList, SLOT(saveSettings()));",
          "142:     peersList = new PeerListWidget(this);",
          "143:     peerpage_layout->addWidget(peersList);",
          "144:     connect(peersList->header(), SIGNAL(sectionMoved(int,int,int)), peersList, SLOT(saveSettings()));",
          "145:     connect(peersList->header(), SIGNAL(sectionResized(int,int,int)), peersList, SLOT(saveSettings()));",
          "146:     connect(peersList->header(), SIGNAL(sortIndicatorChanged(int,Qt::SortOrder)), peersList, SLOT(saveSettings()));",
          "148:     speedWidget = new SpeedWidget(this);",
          "149:     speed_layout->addWidget(speedWidget);",
          "151:     m_tabBar = new PropTabBar();",
          "152:     m_tabBar->setContentsMargins(0, 5, 0, 0);",
          "153:     verticalLayout->addLayout(m_tabBar);",
          "154:     connect(m_tabBar, SIGNAL(tabChanged(int)), stackedProperties, SLOT(setCurrentIndex(int)));",
          "155:     connect(m_tabBar, SIGNAL(tabChanged(int)), this, SLOT(saveSettings()));",
          "156:     connect(m_tabBar, SIGNAL(visibilityToggled(bool)), SLOT(setVisibility(bool)));",
          "157:     connect(m_tabBar, SIGNAL(visibilityToggled(bool)), this, SLOT(saveSettings()));",
          "159:     refreshTimer = new QTimer(this);",
          "160:     connect(refreshTimer, SIGNAL(timeout()), this, SLOT(loadDynamicData()));",
          "161:     refreshTimer->start(3000); // 3sec",
          "162:     editHotkeyFile = new QShortcut(QKeySequence(\"F2\"), filesList, 0, 0, Qt::WidgetShortcut);",
          "163:     connect(editHotkeyFile, SIGNAL(activated()), SLOT(renameSelectedFile()));",
          "164:     editHotkeyWeb = new QShortcut(QKeySequence(\"F2\"), listWebSeeds, 0, 0, Qt::WidgetShortcut);",
          "165:     connect(editHotkeyWeb, SIGNAL(activated()), SLOT(editWebSeed()));",
          "166:     connect(listWebSeeds, SIGNAL(doubleClicked(QModelIndex)), SLOT(editWebSeed()));",
          "167:     deleteHotkeyWeb = new QShortcut(QKeySequence(QKeySequence::Delete), listWebSeeds, 0, 0, Qt::WidgetShortcut);",
          "168:     connect(deleteHotkeyWeb, SIGNAL(activated()), SLOT(deleteSelectedUrlSeeds()));",
          "169:     openHotkeyFile = new QShortcut(QKeySequence(\"Return\"), filesList, 0, 0, Qt::WidgetShortcut);",
          "170:     connect(openHotkeyFile, SIGNAL(activated()), SLOT(openSelectedFile()));",
          "173: PropertiesWidget::~PropertiesWidget()",
          "174: {",
          "175:     qDebug() << Q_FUNC_INFO << \"ENTER\";",
          "176:     delete refreshTimer;",
          "177:     delete trackerList;",
          "178:     delete peersList;",
          "179:     delete speedWidget;",
          "180:     delete downloaded_pieces;",
          "181:     delete pieces_availability;",
          "182:     delete PropListModel;",
          "183:     delete PropDelegate;",
          "184:     delete m_tabBar;",
          "185:     delete editHotkeyFile;",
          "186:     delete editHotkeyWeb;",
          "187:     delete deleteHotkeyWeb;",
          "188:     delete openHotkeyFile;",
          "189:     qDebug() << Q_FUNC_INFO << \"EXIT\";",
          "192: void PropertiesWidget::showPiecesAvailability(bool show)",
          "193: {",
          "194:     avail_pieces_lbl->setVisible(show);",
          "195:     pieces_availability->setVisible(show);",
          "196:     avail_average_lbl->setVisible(show);",
          "197:     if (show || (!show && !downloaded_pieces->isVisible()))",
          "198:         line_2->setVisible(show);",
          "201: void PropertiesWidget::showPiecesDownloaded(bool show)",
          "202: {",
          "203:     downloaded_pieces_lbl->setVisible(show);",
          "204:     downloaded_pieces->setVisible(show);",
          "205:     progress_lbl->setVisible(show);",
          "206:     if (show || (!show && !pieces_availability->isVisible()))",
          "207:         line_2->setVisible(show);",
          "210: void PropertiesWidget::setVisibility(bool visible)",
          "211: {",
          "212:     if (!visible && ( state == VISIBLE) ) {",
          "213:         QSplitter *hSplitter = static_cast<QSplitter *>(parentWidget());",
          "214:         stackedProperties->setVisible(false);",
          "215:         slideSizes = hSplitter->sizes();",
          "216:         hSplitter->handle(1)->setVisible(false);",
          "217:         hSplitter->handle(1)->setDisabled(true);",
          "218:         QList<int> sizes = QList<int>() << hSplitter->geometry().height() - 30 << 30;",
          "219:         hSplitter->setSizes(sizes);",
          "220:         state = REDUCED;",
          "221:         return;",
          "222:     }",
          "224:     if (visible && ( state == REDUCED) ) {",
          "225:         stackedProperties->setVisible(true);",
          "226:         QSplitter *hSplitter = static_cast<QSplitter *>(parentWidget());",
          "227:         hSplitter->handle(1)->setDisabled(false);",
          "228:         hSplitter->handle(1)->setVisible(true);",
          "229:         hSplitter->setSizes(slideSizes);",
          "230:         state = VISIBLE;",
          "232:         loadDynamicData();",
          "233:     }",
          "236: void PropertiesWidget::clear()",
          "237: {",
          "238:     qDebug(\"Clearing torrent properties\");",
          "239:     save_path->clear();",
          "240:     lbl_creationDate->clear();",
          "241:     label_total_pieces_val->clear();",
          "242:     hash_lbl->clear();",
          "243:     comment_text->clear();",
          "244:     progress_lbl->clear();",
          "245:     trackerList->clear();",
          "246:     downloaded_pieces->clear();",
          "247:     pieces_availability->clear();",
          "248:     avail_average_lbl->clear();",
          "249:     wasted->clear();",
          "250:     upTotal->clear();",
          "251:     dlTotal->clear();",
          "252:     peersList->clear();",
          "253:     lbl_uplimit->clear();",
          "254:     lbl_dllimit->clear();",
          "255:     lbl_elapsed->clear();",
          "256:     lbl_connections->clear();",
          "257:     reannounce_lbl->clear();",
          "258:     shareRatio->clear();",
          "259:     listWebSeeds->clear();",
          "260:     m_contentFilterLine->clear();",
          "261:     PropListModel->model()->clear();",
          "262:     label_eta_val->clear();",
          "263:     label_seeds_val->clear();",
          "264:     label_peers_val->clear();",
          "265:     label_dl_speed_val->clear();",
          "266:     label_upload_speed_val->clear();",
          "267:     label_total_size_val->clear();",
          "268:     label_completed_on_val->clear();",
          "269:     label_last_complete_val->clear();",
          "270:     label_created_by_val->clear();",
          "271:     label_added_on_val->clear();",
          "276:     return m_torrent;",
          "281:     if (m_torrent == torrent)",
          "282:         save_path->setText(Utils::Fs::toNativePath(m_torrent->savePath()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285: void PropertiesWidget::updateTorrentInfos(BitTorrent::TorrentHandle *const torrent)",
          "286: {",
          "289: }",
          "291: void PropertiesWidget::loadTorrentInfos(BitTorrent::TorrentHandle *const torrent)",
          "292: {",
          "298:     updateSavePath(m_torrent);",
          "",
          "[Removed Lines]",
          "287:   if (m_torrent == torrent)",
          "288:     loadTorrentInfos(m_torrent);",
          "293:   clear();",
          "294:   m_torrent = torrent;",
          "295:   if (!m_torrent) return;",
          "",
          "[Added Lines]",
          "293:     if (m_torrent == torrent)",
          "294:         loadTorrentInfos(m_torrent);",
          "299:     clear();",
          "300:     m_torrent = torrent;",
          "301:     if (!m_torrent) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:     hash_lbl->setText(m_torrent->hash());",
          "301:     PropListModel->model()->clear();",
          "302:     if (m_torrent->hasMetadata()) {",
          "322:     }",
          "325: }",
          "347: }",
          "366: }",
          "372: }",
          "376:     if (!m_torrent || (main_window->currentTabWidget() != transferList) || (state != VISIBLE)) return;",
          "380:     case PropTabBar::MAIN_TAB: {",
          "381:         wasted->setText(Utils::Misc::friendlyUnit(m_torrent->wastedSize()));",
          "383:         upTotal->setText(tr(\"%1 (%2 this session)\").arg(Utils::Misc::friendlyUnit(m_torrent->totalUpload()))",
          "386:         dlTotal->setText(tr(\"%1 (%2 this session)\").arg(Utils::Misc::friendlyUnit(m_torrent->totalDownload()))",
          "389:         lbl_uplimit->setText(m_torrent->uploadLimit() <= 0 ? QString::fromUtf8(C_INFINITY) : Utils::Misc::friendlyUnit(m_torrent->uploadLimit(), true));",
          "",
          "[Removed Lines]",
          "304:       lbl_creationDate->setText(m_torrent->creationDate().toString(Qt::DefaultLocaleShortDate));",
          "306:       label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));",
          "309:       comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment()));",
          "312:       loadUrlSeeds();",
          "314:       label_created_by_val->setText(m_torrent->creator());",
          "317:       PropListModel->model()->setupModelData(m_torrent->info());",
          "318:       filesList->setExpanded(PropListModel->index(0, 0), true);",
          "321:       PropListModel->model()->updateFilesPriorities(m_torrent->filePriorities());",
          "324:   loadDynamicData();",
          "327: void PropertiesWidget::readSettings() {",
          "328:   const Preferences* const pref = Preferences::instance();",
          "330:   QStringList sizes_str = pref->getPropSplitterSizes().split(\",\");",
          "331:   if (sizes_str.size() == 2) {",
          "332:     slideSizes << sizes_str.first().toInt();",
          "333:     slideSizes << sizes_str.last().toInt();",
          "334:     QSplitter *hSplitter = static_cast<QSplitter*>(parentWidget());",
          "335:     hSplitter->setSizes(slideSizes);",
          "336:   }",
          "337:   const int current_tab = pref->getPropCurTab();",
          "338:   const bool visible = pref->getPropVisible();",
          "340:   if (!filesList->header()->restoreState(pref->getPropFileListState())) {",
          "341:     filesList->header()->resizeSection(0, 400); //Default",
          "342:   }",
          "343:   m_tabBar->setCurrentIndex(current_tab);",
          "344:   if (!visible) {",
          "345:     setVisibility(false);",
          "346:   }",
          "349: void PropertiesWidget::saveSettings() {",
          "350:   Preferences* const pref = Preferences::instance();",
          "351:   pref->setPropVisible(state==VISIBLE);",
          "353:   QSplitter *hSplitter = static_cast<QSplitter*>(parentWidget());",
          "354:   QList<int> sizes;",
          "355:   if (state == VISIBLE)",
          "356:     sizes = hSplitter->sizes();",
          "357:   else",
          "358:     sizes = slideSizes;",
          "359:   qDebug(\"Sizes: %d\", sizes.size());",
          "360:   if (sizes.size() == 2) {",
          "361:     pref->setPropSplitterSizes(QString::number(sizes.first()) + ',' + QString::number(sizes.last()));",
          "362:   }",
          "363:   pref->setPropFileListState(filesList->header()->saveState());",
          "365:   pref->setPropCurTab(m_tabBar->currentIndex());",
          "368: void PropertiesWidget::reloadPreferences() {",
          "370:   peersList->updatePeerHostNameResolutionState();",
          "371:   peersList->updatePeerCountryResolutionState();",
          "374: void PropertiesWidget::loadDynamicData() {",
          "379:     switch(stackedProperties->currentIndex()) {",
          "384:                                                     .arg(Utils::Misc::friendlyUnit(m_torrent->totalPayloadUpload())));",
          "387:                                                     .arg(Utils::Misc::friendlyUnit(m_torrent->totalPayloadDownload())));",
          "",
          "[Added Lines]",
          "310:         lbl_creationDate->setText(m_torrent->creationDate().toString(Qt::DefaultLocaleShortDate));",
          "312:         label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));",
          "315:         comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment()));",
          "318:         loadUrlSeeds();",
          "320:         label_created_by_val->setText(m_torrent->creator());",
          "323:         PropListModel->model()->setupModelData(m_torrent->info());",
          "324:         filesList->setExpanded(PropListModel->index(0, 0), true);",
          "327:         PropListModel->model()->updateFilesPriorities(m_torrent->filePriorities());",
          "330:     loadDynamicData();",
          "333: void PropertiesWidget::readSettings()",
          "334: {",
          "335:     const Preferences *const pref = Preferences::instance();",
          "337:     QStringList sizes_str = pref->getPropSplitterSizes().split(\",\");",
          "338:     if (sizes_str.size() == 2) {",
          "339:         slideSizes << sizes_str.first().toInt();",
          "340:         slideSizes << sizes_str.last().toInt();",
          "341:         QSplitter *hSplitter = static_cast<QSplitter *>(parentWidget());",
          "342:         hSplitter->setSizes(slideSizes);",
          "343:     }",
          "344:     const int current_tab = pref->getPropCurTab();",
          "345:     const bool visible = pref->getPropVisible();",
          "347:     if (!filesList->header()->restoreState(pref->getPropFileListState()))",
          "348:         filesList->header()->resizeSection(0, 400); // Default",
          "349:     m_tabBar->setCurrentIndex(current_tab);",
          "350:     if (!visible)",
          "351:         setVisibility(false);",
          "354: void PropertiesWidget::saveSettings()",
          "355: {",
          "356:     Preferences *const pref = Preferences::instance();",
          "357:     pref->setPropVisible(state==VISIBLE);",
          "359:     QSplitter *hSplitter = static_cast<QSplitter *>(parentWidget());",
          "360:     QList<int> sizes;",
          "361:     if (state == VISIBLE)",
          "362:         sizes = hSplitter->sizes();",
          "363:     else",
          "364:         sizes = slideSizes;",
          "365:     qDebug(\"Sizes: %d\", sizes.size());",
          "366:     if (sizes.size() == 2)",
          "367:         pref->setPropSplitterSizes(QString::number(sizes.first()) + ',' + QString::number(sizes.last()));",
          "368:     pref->setPropFileListState(filesList->header()->saveState());",
          "370:     pref->setPropCurTab(m_tabBar->currentIndex());",
          "373: void PropertiesWidget::reloadPreferences()",
          "374: {",
          "376:     peersList->updatePeerHostNameResolutionState();",
          "377:     peersList->updatePeerCountryResolutionState();",
          "380: void PropertiesWidget::loadDynamicData()",
          "381: {",
          "386:     switch (stackedProperties->currentIndex()) {",
          "391:                          .arg(Utils::Misc::friendlyUnit(m_torrent->totalPayloadUpload())));",
          "394:                          .arg(Utils::Misc::friendlyUnit(m_torrent->totalPayloadDownload())));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "393:         QString elapsed_txt;",
          "394:         if (m_torrent->isSeed())",
          "395:             elapsed_txt = tr(\"%1 (seeded for %2)\", \"e.g. 4m39s (seeded for 3m10s)\")",
          "398:         else",
          "399:             elapsed_txt = Utils::Misc::userFriendlyDuration(m_torrent->activeTime());",
          "400:         lbl_elapsed->setText(elapsed_txt);",
          "402:         lbl_connections->setText(tr(\"%1 (%2 max)\", \"%1 and %2 are numbers, e.g. 3 (10 max)\")",
          "406:         label_eta_val->setText(Utils::Misc::userFriendlyDuration(m_torrent->eta()));",
          "",
          "[Removed Lines]",
          "396:                             .arg(Utils::Misc::userFriendlyDuration(m_torrent->activeTime()))",
          "397:                             .arg(Utils::Misc::userFriendlyDuration(m_torrent->seedingTime()));",
          "403:                                 .arg(m_torrent->connectionsCount())",
          "404:                                 .arg(m_torrent->connectionsLimit() < 0 ? QString::fromUtf8(C_INFINITY) : QString::number(m_torrent->connectionsLimit())));",
          "",
          "[Added Lines]",
          "403:                           .arg(Utils::Misc::userFriendlyDuration(m_torrent->activeTime()))",
          "404:                           .arg(Utils::Misc::userFriendlyDuration(m_torrent->seedingTime()));",
          "410:                                  .arg(m_torrent->connectionsCount())",
          "411:                                  .arg(m_torrent->connectionsLimit() < 0 ? QString::fromUtf8(C_INFINITY) : QString::number(m_torrent->connectionsLimit())));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "413:         shareRatio->setText(ratio > BitTorrent::TorrentHandle::MAX_RATIO ? QString::fromUtf8(C_INFINITY) : Utils::String::fromDouble(ratio, 2));",
          "415:         label_seeds_val->setText(tr(\"%1 (%2 total)\", \"%1 and %2 are numbers, e.g. 3 (10 total)\")",
          "419:         label_peers_val->setText(tr(\"%1 (%2 total)\", \"%1 and %2 are numbers, e.g. 3 (10 total)\")",
          "423:         label_dl_speed_val->setText(tr(\"%1 (%2 avg.)\", \"%1 and %2 are speed rates, e.g. 200KiB/s (100KiB/s avg.)\")",
          "427:         label_upload_speed_val->setText(tr(\"%1 (%2 avg.)\", \"%1 and %2 are speed rates, e.g. 200KiB/s (100KiB/s avg.)\")",
          "428:                                         .arg(Utils::Misc::friendlyUnit(m_torrent->uploadPayloadRate(), true))",
          "",
          "[Removed Lines]",
          "416:                                 .arg(QString::number(m_torrent->seedsCount()))",
          "417:                                 .arg(QString::number(m_torrent->totalSeedsCount())));",
          "420:                                 .arg(QString::number(m_torrent->leechsCount()))",
          "421:                                 .arg(QString::number(m_torrent->totalLeechersCount())));",
          "424:                                         .arg(Utils::Misc::friendlyUnit(m_torrent->downloadPayloadRate(), true))",
          "425:                                         .arg(Utils::Misc::friendlyUnit(m_torrent->totalDownload() / (1 + m_torrent->activeTime() - m_torrent->finishedTime()), true)));",
          "",
          "[Added Lines]",
          "423:                                  .arg(QString::number(m_torrent->seedsCount()))",
          "424:                                  .arg(QString::number(m_torrent->totalSeedsCount())));",
          "427:                                  .arg(QString::number(m_torrent->leechsCount()))",
          "428:                                  .arg(QString::number(m_torrent->totalLeechersCount())));",
          "431:                                     .arg(Utils::Misc::friendlyUnit(m_torrent->downloadPayloadRate(), true))",
          "432:                                     .arg(Utils::Misc::friendlyUnit(m_torrent->totalDownload() / (1 + m_torrent->activeTime() - m_torrent->finishedTime()), true)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "451:             qreal progress = m_torrent->progress() * 100.;",
          "453:             downloaded_pieces->setProgress(m_torrent->pieces(), m_torrent->downloadingPieces());",
          "454:         }",
          "455:         else {",
          "",
          "[Removed Lines]",
          "452:             progress_lbl->setText(Utils::String::fromDouble(progress, 1)+\"%\");",
          "",
          "[Added Lines]",
          "459:             progress_lbl->setText(Utils::String::fromDouble(progress, 1) + \"%\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "490:     }",
          "491: }",
          "511: }",
          "522: }",
          "543:     int i = PropListModel->getFileIndex(index);",
          "544:     const QDir saveDir(m_torrent->savePath(true));",
          "555: }",
          "596:     else {",
          "612:     }",
          "614: }",
          "644: }",
          "664:     }",
          "703:     }",
          "725: #if defined(Q_OS_UNIX) || defined(Q_WS_QWS)",
          "727: #else",
          "729: #endif",
          "748:         }",
          "762:     }",
          "764: }",
          "771: }",
          "791: }",
          "804: }",
          "816: }",
          "842: }",
          "851: }",
          "856: }",
          "866: }",
          "",
          "[Removed Lines]",
          "493: void PropertiesWidget::loadUrlSeeds() {",
          "494:   listWebSeeds->clear();",
          "495:   qDebug(\"Loading URL seeds\");",
          "496:   const QList<QUrl> hc_seeds = m_torrent->urlSeeds();",
          "498:   foreach (const QUrl &hc_seed, hc_seeds) {",
          "499:     qDebug(\"Loading URL seed: %s\", qPrintable(hc_seed.toString()));",
          "500:     new QListWidgetItem(hc_seed.toString(), listWebSeeds);",
          "501:   }",
          "502: }",
          "504: void PropertiesWidget::openDoubleClickedFile(const QModelIndex &index) {",
          "505:   if (!index.isValid()) return;",
          "506:   if (!m_torrent || !m_torrent->hasMetadata()) return;",
          "507:   if (PropListModel->itemType(index) == TorrentContentModelItem::FileType)",
          "508:     openFile(index);",
          "509:   else",
          "510:     openFolder(index, false);",
          "513: void PropertiesWidget::openFile(const QModelIndex &index) {",
          "514:   int i = PropListModel->getFileIndex(index);",
          "515:   const QDir saveDir(m_torrent->savePath(true));",
          "516:   const QString filename = m_torrent->filePath(i);",
          "517:   const QString file_path = Utils::Fs::expandPath(saveDir.absoluteFilePath(filename));",
          "518:   qDebug(\"Trying to open file at %s\", qPrintable(file_path));",
          "520:   m_torrent->flushCache();",
          "521:   Utils::Misc::openPath(file_path);",
          "524: void PropertiesWidget::openFolder(const QModelIndex &index, bool containing_folder) {",
          "525:   QString absolute_path;",
          "527:   if (PropListModel->itemType(index) == TorrentContentModelItem::FolderType) {",
          "529:     QStringList path_items;",
          "530:     path_items << index.data().toString();",
          "531:     QModelIndex parent = PropListModel->parent(index);",
          "532:     while(parent.isValid()) {",
          "533:       path_items.prepend(parent.data().toString());",
          "534:       parent = PropListModel->parent(parent);",
          "535:     }",
          "536:     if (path_items.isEmpty())",
          "537:       return;",
          "538:     const QDir saveDir(m_torrent->savePath(true));",
          "539:     const QString relative_path = path_items.join(\"/\");",
          "540:     absolute_path = Utils::Fs::expandPath(saveDir.absoluteFilePath(relative_path));",
          "541:   }",
          "542:   else {",
          "545:     const QString relative_path = m_torrent->filePath(i);",
          "546:     absolute_path = Utils::Fs::expandPath(saveDir.absoluteFilePath(relative_path));",
          "547:   }",
          "550:   m_torrent->flushCache();",
          "551:   if (containing_folder)",
          "552:     Utils::Misc::openFolderSelect(absolute_path);",
          "553:   else",
          "554:     Utils::Misc::openPath(absolute_path);",
          "557: void PropertiesWidget::displayFilesListMenu(const QPoint&) {",
          "558:   if (!m_torrent) return;",
          "560:   QModelIndexList selectedRows = filesList->selectionModel()->selectedRows(0);",
          "561:   if (selectedRows.empty())",
          "562:     return;",
          "563:   QMenu myFilesLlistMenu;",
          "564:   QAction *actOpen = 0;",
          "565:   QAction *actOpenContainingFolder = 0;",
          "566:   QAction *actRename = 0;",
          "567:   if (selectedRows.size() == 1) {",
          "568:     actOpen = myFilesLlistMenu.addAction(GuiIconProvider::instance()->getIcon(\"folder-documents\"), tr(\"Open\"));",
          "569:     actOpenContainingFolder = myFilesLlistMenu.addAction(GuiIconProvider::instance()->getIcon(\"inode-directory\"), tr(\"Open Containing Folder\"));",
          "570:     actRename = myFilesLlistMenu.addAction(GuiIconProvider::instance()->getIcon(\"edit-rename\"), tr(\"Rename...\"));",
          "571:     myFilesLlistMenu.addSeparator();",
          "572:   }",
          "573:   QMenu subMenu;",
          "574:   if (!m_torrent->isSeed()) {",
          "575:     subMenu.setTitle(tr(\"Priority\"));",
          "576:     subMenu.addAction(actionNot_downloaded);",
          "577:     subMenu.addAction(actionNormal);",
          "578:     subMenu.addAction(actionHigh);",
          "579:     subMenu.addAction(actionMaximum);",
          "580:     myFilesLlistMenu.addMenu(&subMenu);",
          "581:   }",
          "583:   const QAction *act = myFilesLlistMenu.exec(QCursor::pos());",
          "586:   const QModelIndex index = *(selectedRows.begin());",
          "587:   if (!index.isValid())",
          "588:     return;",
          "589:   if (act) {",
          "590:     if (act == actOpen)",
          "591:       openDoubleClickedFile(index);",
          "592:     else if (act == actOpenContainingFolder)",
          "593:       openFolder(index, true);",
          "594:     else if (act == actRename)",
          "595:       renameSelectedFile();",
          "597:       int prio = prio::NORMAL;",
          "598:       if (act == actionHigh)",
          "599:         prio = prio::HIGH;",
          "600:       else if (act == actionMaximum)",
          "601:         prio = prio::MAXIMUM;",
          "602:       else if (act == actionNot_downloaded)",
          "603:         prio = prio::IGNORED;",
          "605:       qDebug(\"Setting files priority\");",
          "606:       foreach (QModelIndex index, selectedRows) {",
          "607:         qDebug(\"Setting priority(%d) for file at row %d\", prio, index.row());",
          "608:         PropListModel->setData(PropListModel->index(index.row(), PRIORITY, index.parent()), prio);",
          "609:       }",
          "611:       filteredFilesChanged();",
          "613:   }",
          "616: void PropertiesWidget::displayWebSeedListMenu(const QPoint&) {",
          "617:   if (!m_torrent) return;",
          "619:   QMenu seedMenu;",
          "620:   QModelIndexList rows = listWebSeeds->selectionModel()->selectedRows();",
          "621:   QAction *actAdd = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"list-add\"), tr(\"New Web seed\"));",
          "622:   QAction *actDel = 0;",
          "623:   QAction *actCpy = 0;",
          "624:   QAction *actEdit = 0;",
          "626:   if (rows.size()) {",
          "627:     actDel = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"list-remove\"), tr(\"Remove Web seed\"));",
          "628:     seedMenu.addSeparator();",
          "629:     actCpy = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"edit-copy\"), tr(\"Copy Web seed URL\"));",
          "630:     actEdit = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"edit-rename\"), tr(\"Edit Web seed URL\"));",
          "631:   }",
          "633:   const QAction *act = seedMenu.exec(QCursor::pos());",
          "634:   if (act) {",
          "635:     if (act == actAdd)",
          "636:       askWebSeed();",
          "637:     else if (act == actDel)",
          "638:       deleteSelectedUrlSeeds();",
          "639:     else if (act == actCpy)",
          "640:       copySelectedWebSeedsToClipboard();",
          "641:     else if (act == actEdit)",
          "642:       editWebSeed();",
          "643:   }",
          "646: void PropertiesWidget::renameSelectedFile() {",
          "647:   const QModelIndexList selectedIndexes = filesList->selectionModel()->selectedRows(0);",
          "648:   if (selectedIndexes.size() != 1)",
          "649:     return;",
          "650:   const QModelIndex index = selectedIndexes.first();",
          "651:   if (!index.isValid())",
          "652:     return;",
          "654:   bool ok;",
          "655:   QString new_name_last = AutoExpandableDialog::getText(this, tr(\"Rename the file\"),",
          "656:                                                 tr(\"New name:\"), QLineEdit::Normal,",
          "657:                                                 index.data().toString(), &ok).trimmed();",
          "658:   if (ok && !new_name_last.isEmpty()) {",
          "659:     if (!Utils::Fs::isValidFileSystemName(new_name_last)) {",
          "660:       MessageBoxRaised::warning(this, tr(\"The file could not be renamed\"),",
          "661:                            tr(\"This file name contains forbidden characters, please choose a different one.\"),",
          "662:                            QMessageBox::Ok);",
          "663:       return;",
          "665:     if (PropListModel->itemType(index) == TorrentContentModelItem::FileType) {",
          "667:       const int file_index = PropListModel->getFileIndex(index);",
          "668:       if (!m_torrent || !m_torrent->hasMetadata()) return;",
          "669:       QString old_name = m_torrent->filePath(file_index);",
          "670:       if (old_name.endsWith(\".!qB\") && !new_name_last.endsWith(\".!qB\")) {",
          "671:         new_name_last += \".!qB\";",
          "672:       }",
          "673:       QStringList path_items = old_name.split(\"/\");",
          "674:       path_items.removeLast();",
          "675:       path_items << new_name_last;",
          "676:       QString new_name = path_items.join(\"/\");",
          "677:       if (Utils::Fs::sameFileNames(old_name, new_name)) {",
          "678:           qDebug(\"Name did not change\");",
          "679:           return;",
          "680:       }",
          "681:       new_name = Utils::Fs::expandPath(new_name);",
          "682:       qDebug(\"New name: %s\", qPrintable(new_name));",
          "684:       for (int i = 0; i < m_torrent->filesCount(); ++i) {",
          "685:           if (i == file_index) continue;",
          "686:           if (Utils::Fs::sameFileNames(m_torrent->filePath(i), new_name)) {",
          "688:               MessageBoxRaised::warning(this, tr(\"The file could not be renamed\"),",
          "689:                                         tr(\"This name is already in use in this folder. Please use a different name.\"),",
          "690:                                         QMessageBox::Ok);",
          "691:               return;",
          "692:           }",
          "693:       }",
          "694:       const bool force_recheck = QFile::exists(m_torrent->savePath(true) + \"/\" + new_name);",
          "695:       qDebug(\"Renaming %s to %s\", qPrintable(old_name), qPrintable(new_name));",
          "696:       m_torrent->renameFile(file_index, new_name);",
          "698:       if (force_recheck) m_torrent->forceRecheck();",
          "700:       if (new_name_last.endsWith(\".!qB\"))",
          "701:         new_name_last.chop(4);",
          "702:       PropListModel->setData(index, new_name_last);",
          "704:     else {",
          "706:       QStringList path_items;",
          "707:       path_items << index.data().toString();",
          "708:       QModelIndex parent = PropListModel->parent(index);",
          "709:       while(parent.isValid()) {",
          "710:         path_items.prepend(parent.data().toString());",
          "711:         parent = PropListModel->parent(parent);",
          "712:       }",
          "713:       const QString old_path = path_items.join(\"/\");",
          "714:       path_items.removeLast();",
          "715:       path_items << new_name_last;",
          "716:       QString new_path = path_items.join(\"/\");",
          "717:       if (Utils::Fs::sameFileNames(old_path, new_path)) {",
          "718:           qDebug(\"Name did not change\");",
          "719:           return;",
          "720:       }",
          "721:       if (!new_path.endsWith(\"/\")) new_path += \"/\";",
          "723:       for (int i = 0; i < m_torrent->filesCount(); ++i) {",
          "724:         const QString &current_name = m_torrent->filePath(i);",
          "726:         if (current_name.startsWith(new_path, Qt::CaseSensitive)) {",
          "728:         if (current_name.startsWith(new_path, Qt::CaseInsensitive)) {",
          "730:           QMessageBox::warning(this, tr(\"The folder could not be renamed\"),",
          "731:                                tr(\"This name is already in use in this folder. Please use a different name.\"),",
          "732:                                QMessageBox::Ok);",
          "733:           return;",
          "734:         }",
          "735:       }",
          "736:       bool force_recheck = false;",
          "738:       for (int i = 0; i < m_torrent->filesCount(); ++i) {",
          "739:         const QString current_name = m_torrent->filePath(i);",
          "740:         if (current_name.startsWith(old_path)) {",
          "741:           QString new_name = current_name;",
          "742:           new_name.replace(0, old_path.length(), new_path);",
          "743:           if (!force_recheck && QDir(m_torrent->savePath(true)).exists(new_name))",
          "744:             force_recheck = true;",
          "745:           new_name = Utils::Fs::expandPath(new_name);",
          "746:           qDebug(\"Rename %s to %s\", qPrintable(current_name), qPrintable(new_name));",
          "747:           m_torrent->renameFile(i, new_name);",
          "749:       }",
          "751:       if (force_recheck) m_torrent->forceRecheck();",
          "753:       PropListModel->setData(index, new_name_last);",
          "755:       const QDir old_folder(m_torrent->savePath(true) + \"/\" + old_path);",
          "756:       int timeout = 10;",
          "757:       while(!QDir().rmpath(old_folder.absolutePath()) && timeout > 0) {",
          "759:         Utils::Misc::msleep(100);",
          "760:         --timeout;",
          "761:       }",
          "763:   }",
          "766: void PropertiesWidget::openSelectedFile() {",
          "767:   const QModelIndexList selectedIndexes = filesList->selectionModel()->selectedRows(0);",
          "768:   if (selectedIndexes.size() != 1)",
          "769:     return;",
          "770:   openDoubleClickedFile(selectedIndexes.first());",
          "773: void PropertiesWidget::askWebSeed() {",
          "774:   bool ok;",
          "776:   const QString url_seed = AutoExpandableDialog::getText(this, tr(\"New URL seed\", \"New HTTP source\"),",
          "777:                                                  tr(\"New URL seed:\"), QLineEdit::Normal,",
          "778:                                                  QString::fromUtf8(\"http://www.\"), &ok);",
          "779:   if (!ok) return;",
          "780:   qDebug(\"Adding %s web seed\", qPrintable(url_seed));",
          "781:   if (!listWebSeeds->findItems(url_seed, Qt::MatchFixedString).empty()) {",
          "782:     QMessageBox::warning(this, \"qBittorrent\",",
          "783:                          tr(\"This URL seed is already in the list.\"),",
          "784:                          QMessageBox::Ok);",
          "785:     return;",
          "786:   }",
          "787:   if (m_torrent)",
          "788:     m_torrent->addUrlSeeds(QList<QUrl>() << url_seed);",
          "790:   loadUrlSeeds();",
          "793: void PropertiesWidget::deleteSelectedUrlSeeds() {",
          "794:   const QList<QListWidgetItem *> selectedItems = listWebSeeds->selectedItems();",
          "795:   if (selectedItems.isEmpty()) return;",
          "797:   QList<QUrl> urlSeeds;",
          "798:   foreach (const QListWidgetItem *item, selectedItems)",
          "799:     urlSeeds << item->text();",
          "801:   m_torrent->removeUrlSeeds(urlSeeds);",
          "803:   loadUrlSeeds();",
          "806: void PropertiesWidget::copySelectedWebSeedsToClipboard() const {",
          "807:   const QList<QListWidgetItem *> selected_items = listWebSeeds->selectedItems();",
          "808:   if (selected_items.isEmpty())",
          "809:     return;",
          "811:   QStringList urls_to_copy;",
          "812:   foreach (QListWidgetItem *item, selected_items)",
          "813:     urls_to_copy << item->text();",
          "815:   QApplication::clipboard()->setText(urls_to_copy.join(\"\\n\"));",
          "818: void PropertiesWidget::editWebSeed() {",
          "819:   const QList<QListWidgetItem *> selected_items = listWebSeeds->selectedItems();",
          "820:   if (selected_items.size() != 1)",
          "821:     return;",
          "823:   const QListWidgetItem *selected_item = selected_items.last();",
          "824:   const QString old_seed = selected_item->text();",
          "825:   bool result;",
          "826:   const QString new_seed = AutoExpandableDialog::getText(this, tr(\"Web seed editing\"),",
          "827:                                                  tr(\"Web seed URL:\"), QLineEdit::Normal,",
          "828:                                                  old_seed, &result);",
          "829:   if (!result)",
          "830:     return;",
          "832:   if (!listWebSeeds->findItems(new_seed, Qt::MatchFixedString).empty()) {",
          "833:     QMessageBox::warning(this, tr(\"qBittorrent\"),",
          "834:                          tr(\"This URL seed is already in the list.\"),",
          "835:                          QMessageBox::Ok);",
          "836:     return;",
          "837:   }",
          "839:   m_torrent->removeUrlSeeds(QList<QUrl>() << old_seed);",
          "840:   m_torrent->addUrlSeeds(QList<QUrl>() << new_seed);",
          "841:   loadUrlSeeds();",
          "844: bool PropertiesWidget::applyPriorities() {",
          "845:   qDebug(\"Saving files priorities\");",
          "846:   const QVector<int> priorities = PropListModel->model()->getFilePriorities();",
          "848:   qDebug(\"prioritize files: %d\", priorities[0]);",
          "849:   m_torrent->prioritizeFiles(priorities);",
          "850:   return true;",
          "853: void PropertiesWidget::filteredFilesChanged() {",
          "854:   if (m_torrent)",
          "855:     applyPriorities();",
          "858: void PropertiesWidget::filterText(const QString& filter) {",
          "859:   PropListModel->setFilterRegExp(QRegExp(filter, Qt::CaseInsensitive, QRegExp::WildcardUnix));",
          "860:   if (filter.isEmpty()) {",
          "861:     filesList->collapseAll();",
          "862:     filesList->expand(PropListModel->index(0, 0));",
          "863:   }",
          "864:   else",
          "865:     filesList->expandAll();",
          "",
          "[Added Lines]",
          "500: void PropertiesWidget::loadUrlSeeds()",
          "501: {",
          "502:     listWebSeeds->clear();",
          "503:     qDebug(\"Loading URL seeds\");",
          "504:     const QList<QUrl> hc_seeds = m_torrent->urlSeeds();",
          "506:     foreach (const QUrl &hc_seed, hc_seeds) {",
          "507:         qDebug(\"Loading URL seed: %s\", qPrintable(hc_seed.toString()));",
          "508:         new QListWidgetItem(hc_seed.toString(), listWebSeeds);",
          "509:     }",
          "512: void PropertiesWidget::openDoubleClickedFile(const QModelIndex &index)",
          "513: {",
          "514:     if (!index.isValid()) return;",
          "515:     if (!m_torrent || !m_torrent->hasMetadata()) return;",
          "516:     if (PropListModel->itemType(index) == TorrentContentModelItem::FileType)",
          "517:         openFile(index);",
          "518:     else",
          "519:         openFolder(index, false);",
          "522: void PropertiesWidget::openFile(const QModelIndex &index)",
          "523: {",
          "526:     const QString filename = m_torrent->filePath(i);",
          "527:     const QString file_path = Utils::Fs::expandPath(saveDir.absoluteFilePath(filename));",
          "528:     qDebug(\"Trying to open file at %s\", qPrintable(file_path));",
          "530:     m_torrent->flushCache();",
          "531:     Utils::Misc::openPath(file_path);",
          "534: void PropertiesWidget::openFolder(const QModelIndex &index, bool containing_folder)",
          "535: {",
          "536:     QString absolute_path;",
          "538:     if (PropListModel->itemType(index) == TorrentContentModelItem::FolderType) {",
          "540:         QStringList path_items;",
          "541:         path_items << index.data().toString();",
          "542:         QModelIndex parent = PropListModel->parent(index);",
          "543:         while (parent.isValid()) {",
          "544:             path_items.prepend(parent.data().toString());",
          "545:             parent = PropListModel->parent(parent);",
          "546:         }",
          "547:         if (path_items.isEmpty())",
          "548:             return;",
          "549:         const QDir saveDir(m_torrent->savePath(true));",
          "550:         const QString relative_path = path_items.join(\"/\");",
          "551:         absolute_path = Utils::Fs::expandPath(saveDir.absoluteFilePath(relative_path));",
          "552:     }",
          "554:         int i = PropListModel->getFileIndex(index);",
          "555:         const QDir saveDir(m_torrent->savePath(true));",
          "556:         const QString relative_path = m_torrent->filePath(i);",
          "557:         absolute_path = Utils::Fs::expandPath(saveDir.absoluteFilePath(relative_path));",
          "561:     m_torrent->flushCache();",
          "562:     if (containing_folder)",
          "563:         Utils::Misc::openFolderSelect(absolute_path);",
          "564:     else",
          "565:         Utils::Misc::openPath(absolute_path);",
          "568: void PropertiesWidget::displayFilesListMenu(const QPoint &)",
          "569: {",
          "570:     if (!m_torrent) return;",
          "572:     QModelIndexList selectedRows = filesList->selectionModel()->selectedRows(0);",
          "573:     if (selectedRows.empty())",
          "574:         return;",
          "575:     QMenu myFilesLlistMenu;",
          "576:     QAction *actOpen = 0;",
          "577:     QAction *actOpenContainingFolder = 0;",
          "578:     QAction *actRename = 0;",
          "579:     if (selectedRows.size() == 1) {",
          "580:         actOpen = myFilesLlistMenu.addAction(GuiIconProvider::instance()->getIcon(\"folder-documents\"), tr(\"Open\"));",
          "581:         actOpenContainingFolder = myFilesLlistMenu.addAction(GuiIconProvider::instance()->getIcon(\"inode-directory\"), tr(\"Open Containing Folder\"));",
          "582:         actRename = myFilesLlistMenu.addAction(GuiIconProvider::instance()->getIcon(\"edit-rename\"), tr(\"Rename...\"));",
          "583:         myFilesLlistMenu.addSeparator();",
          "584:     }",
          "585:     QMenu subMenu;",
          "586:     if (!m_torrent->isSeed()) {",
          "587:         subMenu.setTitle(tr(\"Priority\"));",
          "588:         subMenu.addAction(actionNot_downloaded);",
          "589:         subMenu.addAction(actionNormal);",
          "590:         subMenu.addAction(actionHigh);",
          "591:         subMenu.addAction(actionMaximum);",
          "592:         myFilesLlistMenu.addMenu(&subMenu);",
          "593:     }",
          "595:     const QAction *act = myFilesLlistMenu.exec(QCursor::pos());",
          "598:     const QModelIndex index = *(selectedRows.begin());",
          "599:     if (!index.isValid())",
          "600:         return;",
          "601:     if (act) {",
          "602:         if (act == actOpen) {",
          "603:             openDoubleClickedFile(index);",
          "604:         }",
          "605:         else if (act == actOpenContainingFolder) {",
          "606:             openFolder(index, true);",
          "607:         }",
          "608:         else if (act == actRename) {",
          "609:             renameSelectedFile();",
          "610:         }",
          "611:         else {",
          "612:             int prio = prio::NORMAL;",
          "613:             if (act == actionHigh)",
          "614:                 prio = prio::HIGH;",
          "615:             else if (act == actionMaximum)",
          "616:                 prio = prio::MAXIMUM;",
          "617:             else if (act == actionNot_downloaded)",
          "618:                 prio = prio::IGNORED;",
          "620:             qDebug(\"Setting files priority\");",
          "621:             foreach (QModelIndex index, selectedRows) {",
          "622:                 qDebug(\"Setting priority(%d) for file at row %d\", prio, index.row());",
          "623:                 PropListModel->setData(PropListModel->index(index.row(), PRIORITY, index.parent()), prio);",
          "624:             }",
          "626:             filteredFilesChanged();",
          "627:         }",
          "628:     }",
          "631: void PropertiesWidget::displayWebSeedListMenu(const QPoint &)",
          "632: {",
          "633:     if (!m_torrent) return;",
          "635:     QMenu seedMenu;",
          "636:     QModelIndexList rows = listWebSeeds->selectionModel()->selectedRows();",
          "637:     QAction *actAdd = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"list-add\"), tr(\"New Web seed\"));",
          "638:     QAction *actDel = 0;",
          "639:     QAction *actCpy = 0;",
          "640:     QAction *actEdit = 0;",
          "642:     if (rows.size()) {",
          "643:         actDel = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"list-remove\"), tr(\"Remove Web seed\"));",
          "644:         seedMenu.addSeparator();",
          "645:         actCpy = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"edit-copy\"), tr(\"Copy Web seed URL\"));",
          "646:         actEdit = seedMenu.addAction(GuiIconProvider::instance()->getIcon(\"edit-rename\"), tr(\"Edit Web seed URL\"));",
          "649:     const QAction *act = seedMenu.exec(QCursor::pos());",
          "650:     if (act) {",
          "651:         if (act == actAdd)",
          "652:             askWebSeed();",
          "653:         else if (act == actDel)",
          "654:             deleteSelectedUrlSeeds();",
          "655:         else if (act == actCpy)",
          "656:             copySelectedWebSeedsToClipboard();",
          "657:         else if (act == actEdit)",
          "658:             editWebSeed();",
          "660: }",
          "662: void PropertiesWidget::renameSelectedFile()",
          "663: {",
          "664:     const QModelIndexList selectedIndexes = filesList->selectionModel()->selectedRows(0);",
          "665:     if (selectedIndexes.size() != 1)",
          "666:         return;",
          "667:     const QModelIndex index = selectedIndexes.first();",
          "668:     if (!index.isValid())",
          "669:         return;",
          "671:     bool ok;",
          "672:     QString new_name_last = AutoExpandableDialog::getText(this, tr(\"Rename the file\"),",
          "673:                                                           tr(\"New name:\"), QLineEdit::Normal,",
          "674:                                                           index.data().toString(), &ok).trimmed();",
          "675:     if (ok && !new_name_last.isEmpty()) {",
          "676:         if (!Utils::Fs::isValidFileSystemName(new_name_last)) {",
          "677:             MessageBoxRaised::warning(this, tr(\"The file could not be renamed\"),",
          "678:                                       tr(\"This file name contains forbidden characters, please choose a different one.\"),",
          "679:                                       QMessageBox::Ok);",
          "680:             return;",
          "681:         }",
          "682:         if (PropListModel->itemType(index) == TorrentContentModelItem::FileType) {",
          "684:             const int file_index = PropListModel->getFileIndex(index);",
          "685:             if (!m_torrent || !m_torrent->hasMetadata()) return;",
          "686:             QString old_name = m_torrent->filePath(file_index);",
          "687:             if (old_name.endsWith(\".!qB\") && !new_name_last.endsWith(\".!qB\"))",
          "688:                 new_name_last += \".!qB\";",
          "689:             QStringList path_items = old_name.split(\"/\");",
          "690:             path_items.removeLast();",
          "691:             path_items << new_name_last;",
          "692:             QString new_name = path_items.join(\"/\");",
          "693:             if (Utils::Fs::sameFileNames(old_name, new_name)) {",
          "694:                 qDebug(\"Name did not change\");",
          "695:                 return;",
          "696:             }",
          "697:             new_name = Utils::Fs::expandPath(new_name);",
          "698:             qDebug(\"New name: %s\", qPrintable(new_name));",
          "700:             for (int i = 0; i < m_torrent->filesCount(); ++i) {",
          "701:                 if (i == file_index) continue;",
          "702:                 if (Utils::Fs::sameFileNames(m_torrent->filePath(i), new_name)) {",
          "704:                     MessageBoxRaised::warning(this, tr(\"The file could not be renamed\"),",
          "705:                                               tr(\"This name is already in use in this folder. Please use a different name.\"),",
          "706:                                               QMessageBox::Ok);",
          "707:                     return;",
          "708:                 }",
          "709:             }",
          "710:             const bool force_recheck = QFile::exists(m_torrent->savePath(true) + \"/\" + new_name);",
          "711:             qDebug(\"Renaming %s to %s\", qPrintable(old_name), qPrintable(new_name));",
          "712:             m_torrent->renameFile(file_index, new_name);",
          "714:             if (force_recheck) m_torrent->forceRecheck();",
          "716:             if (new_name_last.endsWith(\".!qB\"))",
          "717:                 new_name_last.chop(4);",
          "718:             PropListModel->setData(index, new_name_last);",
          "719:         }",
          "720:         else {",
          "722:             QStringList path_items;",
          "723:             path_items << index.data().toString();",
          "724:             QModelIndex parent = PropListModel->parent(index);",
          "725:             while (parent.isValid()) {",
          "726:                 path_items.prepend(parent.data().toString());",
          "727:                 parent = PropListModel->parent(parent);",
          "728:             }",
          "729:             const QString old_path = path_items.join(\"/\");",
          "730:             path_items.removeLast();",
          "731:             path_items << new_name_last;",
          "732:             QString new_path = path_items.join(\"/\");",
          "733:             if (Utils::Fs::sameFileNames(old_path, new_path)) {",
          "734:                 qDebug(\"Name did not change\");",
          "735:                 return;",
          "736:             }",
          "737:             if (!new_path.endsWith(\"/\")) new_path += \"/\";",
          "739:             for (int i = 0; i < m_torrent->filesCount(); ++i) {",
          "740:                 const QString &current_name = m_torrent->filePath(i);",
          "742:                 if (current_name.startsWith(new_path, Qt::CaseSensitive)) {",
          "744:                 if (current_name.startsWith(new_path, Qt::CaseInsensitive)) {",
          "746:                     QMessageBox::warning(this, tr(\"The folder could not be renamed\"),",
          "747:                                          tr(\"This name is already in use in this folder. Please use a different name.\"),",
          "748:                                          QMessageBox::Ok);",
          "749:                     return;",
          "750:                 }",
          "751:             }",
          "752:             bool force_recheck = false;",
          "754:             for (int i = 0; i < m_torrent->filesCount(); ++i) {",
          "755:                 const QString current_name = m_torrent->filePath(i);",
          "756:                 if (current_name.startsWith(old_path)) {",
          "757:                     QString new_name = current_name;",
          "758:                     new_name.replace(0, old_path.length(), new_path);",
          "759:                     if (!force_recheck && QDir(m_torrent->savePath(true)).exists(new_name))",
          "760:                         force_recheck = true;",
          "761:                     new_name = Utils::Fs::expandPath(new_name);",
          "762:                     qDebug(\"Rename %s to %s\", qPrintable(current_name), qPrintable(new_name));",
          "763:                     m_torrent->renameFile(i, new_name);",
          "764:                 }",
          "765:             }",
          "767:             if (force_recheck) m_torrent->forceRecheck();",
          "769:             PropListModel->setData(index, new_name_last);",
          "771:             const QDir old_folder(m_torrent->savePath(true) + \"/\" + old_path);",
          "772:             int timeout = 10;",
          "773:             while (!QDir().rmpath(old_folder.absolutePath()) && timeout > 0) {",
          "775:                 Utils::Misc::msleep(100);",
          "776:                 --timeout;",
          "777:             }",
          "782: void PropertiesWidget::openSelectedFile()",
          "783: {",
          "784:     const QModelIndexList selectedIndexes = filesList->selectionModel()->selectedRows(0);",
          "785:     if (selectedIndexes.size() != 1)",
          "786:         return;",
          "787:     openDoubleClickedFile(selectedIndexes.first());",
          "790: void PropertiesWidget::askWebSeed()",
          "791: {",
          "792:     bool ok;",
          "794:     const QString url_seed = AutoExpandableDialog::getText(this, tr(\"New URL seed\", \"New HTTP source\"),",
          "795:                                                            tr(\"New URL seed:\"), QLineEdit::Normal,",
          "796:                                                            QString::fromUtf8(\"http://www.\"), &ok);",
          "797:     if (!ok) return;",
          "798:     qDebug(\"Adding %s web seed\", qPrintable(url_seed));",
          "799:     if (!listWebSeeds->findItems(url_seed, Qt::MatchFixedString).empty()) {",
          "800:         QMessageBox::warning(this, \"qBittorrent\",",
          "801:                              tr(\"This URL seed is already in the list.\"),",
          "802:                              QMessageBox::Ok);",
          "803:         return;",
          "804:     }",
          "805:     if (m_torrent)",
          "806:         m_torrent->addUrlSeeds(QList<QUrl>() << url_seed);",
          "808:     loadUrlSeeds();",
          "811: void PropertiesWidget::deleteSelectedUrlSeeds()",
          "812: {",
          "813:     const QList<QListWidgetItem *> selectedItems = listWebSeeds->selectedItems();",
          "814:     if (selectedItems.isEmpty()) return;",
          "816:     QList<QUrl> urlSeeds;",
          "817:     foreach (const QListWidgetItem *item, selectedItems)",
          "818:         urlSeeds << item->text();",
          "820:     m_torrent->removeUrlSeeds(urlSeeds);",
          "822:     loadUrlSeeds();",
          "825: void PropertiesWidget::copySelectedWebSeedsToClipboard() const",
          "826: {",
          "827:     const QList<QListWidgetItem *> selected_items = listWebSeeds->selectedItems();",
          "828:     if (selected_items.isEmpty())",
          "829:         return;",
          "831:     QStringList urls_to_copy;",
          "832:     foreach (QListWidgetItem *item, selected_items)",
          "833:         urls_to_copy << item->text();",
          "835:     QApplication::clipboard()->setText(urls_to_copy.join(\"\\n\"));",
          "838: void PropertiesWidget::editWebSeed()",
          "839: {",
          "840:     const QList<QListWidgetItem *> selected_items = listWebSeeds->selectedItems();",
          "841:     if (selected_items.size() != 1)",
          "842:         return;",
          "844:     const QListWidgetItem *selected_item = selected_items.last();",
          "845:     const QString old_seed = selected_item->text();",
          "846:     bool result;",
          "847:     const QString new_seed = AutoExpandableDialog::getText(this, tr(\"Web seed editing\"),",
          "848:                                                            tr(\"Web seed URL:\"), QLineEdit::Normal,",
          "849:                                                            old_seed, &result);",
          "850:     if (!result)",
          "851:         return;",
          "853:     if (!listWebSeeds->findItems(new_seed, Qt::MatchFixedString).empty()) {",
          "854:         QMessageBox::warning(this, tr(\"qBittorrent\"),",
          "855:                              tr(\"This URL seed is already in the list.\"),",
          "856:                              QMessageBox::Ok);",
          "857:         return;",
          "858:     }",
          "860:     m_torrent->removeUrlSeeds(QList<QUrl>() << old_seed);",
          "861:     m_torrent->addUrlSeeds(QList<QUrl>() << new_seed);",
          "862:     loadUrlSeeds();",
          "865: bool PropertiesWidget::applyPriorities()",
          "866: {",
          "867:     qDebug(\"Saving files priorities\");",
          "868:     const QVector<int> priorities = PropListModel->model()->getFilePriorities();",
          "870:     qDebug(\"prioritize files: %d\", priorities[0]);",
          "871:     m_torrent->prioritizeFiles(priorities);",
          "872:     return true;",
          "875: void PropertiesWidget::filteredFilesChanged()",
          "876: {",
          "877:     if (m_torrent)",
          "878:         applyPriorities();",
          "881: void PropertiesWidget::filterText(const QString &filter)",
          "882: {",
          "883:     PropListModel->setFilterRegExp(QRegExp(filter, Qt::CaseInsensitive, QRegExp::WildcardUnix));",
          "884:     if (filter.isEmpty()) {",
          "885:         filesList->collapseAll();",
          "886:         filesList->expand(PropListModel->index(0, 0));",
          "887:     }",
          "888:     else {",
          "889:         filesList->expandAll();",
          "890:     }",
          "",
          "---------------"
        ],
        "src/gui/properties/propertieswidget.h||src/gui/properties/propertieswidget.h": [
          "File: src/gui/properties/propertieswidget.h -> src/gui/properties/propertieswidget.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: class QTimer;",
          "56: QT_END_NAMESPACE",
          "62: public:",
          "65: public:",
          "74: protected:",
          "78: protected slots:",
          "94: public slots:",
          "104: private:",
          "108: private:",
          "129: private slots:",
          "132: };",
          "134: #endif // PROPERTIESWIDGET_H",
          "",
          "[Removed Lines]",
          "58: class PropertiesWidget : public QWidget, private Ui::PropertiesWidget {",
          "59:   Q_OBJECT",
          "60:   Q_DISABLE_COPY(PropertiesWidget)",
          "63:   enum SlideState {REDUCED, VISIBLE};",
          "66:   PropertiesWidget(QWidget *parent, MainWindow* main_window, TransferListWidget *transferList);",
          "67:   ~PropertiesWidget();",
          "68:   BitTorrent::TorrentHandle *getCurrentTorrent() const;",
          "69:   TrackerList* getTrackerList() const { return trackerList; }",
          "70:   PeerListWidget* getPeerList() const { return peersList; }",
          "71:   QTreeView* getFilesList() const { return filesList; }",
          "72:   SpeedWidget* getSpeedWidget() const { return speedWidget; }",
          "75:   QPushButton* getButtonFromIndex(int index);",
          "76:   bool applyPriorities();",
          "79:   void loadTorrentInfos(BitTorrent::TorrentHandle *const torrent);",
          "80:   void updateTorrentInfos(BitTorrent::TorrentHandle *const torrent);",
          "81:   void loadUrlSeeds();",
          "82:   void askWebSeed();",
          "83:   void deleteSelectedUrlSeeds();",
          "84:   void copySelectedWebSeedsToClipboard() const;",
          "85:   void editWebSeed();",
          "86:   void displayFilesListMenu(const QPoint& pos);",
          "87:   void displayWebSeedListMenu(const QPoint& pos);",
          "88:   void filteredFilesChanged();",
          "89:   void showPiecesDownloaded(bool show);",
          "90:   void showPiecesAvailability(bool show);",
          "91:   void renameSelectedFile();",
          "92:   void openSelectedFile();",
          "95:   void setVisibility(bool visible);",
          "96:   void loadDynamicData();",
          "97:   void clear();",
          "98:   void readSettings();",
          "99:   void saveSettings();",
          "100:   void reloadPreferences();",
          "101:   void openDoubleClickedFile(const QModelIndex &);",
          "102:   void loadTrackers(BitTorrent::TorrentHandle *const torrent);",
          "105:   void openFile(const QModelIndex &index);",
          "106:   void openFolder(const QModelIndex &index, bool containing_folder);",
          "109:   TransferListWidget *transferList;",
          "110:   MainWindow *main_window;",
          "111:   BitTorrent::TorrentHandle *m_torrent;",
          "112:   QTimer *refreshTimer;",
          "113:   SlideState state;",
          "114:   TorrentContentFilterModel *PropListModel;",
          "115:   PropListDelegate *PropDelegate;",
          "116:   PeerListWidget *peersList;",
          "117:   TrackerList *trackerList;",
          "118:   SpeedWidget *speedWidget;",
          "119:   QList<int> slideSizes;",
          "120:   DownloadedPiecesBar *downloaded_pieces;",
          "121:   PieceAvailabilityBar *pieces_availability;",
          "122:   PropTabBar *m_tabBar;",
          "123:   LineEdit *m_contentFilterLine;",
          "124:   QShortcut *editHotkeyFile;",
          "125:   QShortcut *editHotkeyWeb;",
          "126:   QShortcut *deleteHotkeyWeb;",
          "127:   QShortcut *openHotkeyFile;",
          "130:   void filterText(const QString& filter);",
          "131:   void updateSavePath(BitTorrent::TorrentHandle *const torrent);",
          "",
          "[Added Lines]",
          "58: class PropertiesWidget: public QWidget, private Ui::PropertiesWidget",
          "59: {",
          "60:     Q_OBJECT",
          "61:     Q_DISABLE_COPY(PropertiesWidget)",
          "64:     enum SlideState {REDUCED, VISIBLE};",
          "67:     PropertiesWidget(QWidget *parent, MainWindow *main_window, TransferListWidget *transferList);",
          "68:     ~PropertiesWidget();",
          "69:     BitTorrent::TorrentHandle *getCurrentTorrent() const;",
          "70:     TrackerList *getTrackerList() const { return trackerList; }",
          "71:     PeerListWidget *getPeerList() const { return peersList; }",
          "72:     QTreeView *getFilesList() const { return filesList; }",
          "73:     SpeedWidget *getSpeedWidget() const { return speedWidget; }",
          "76:     QPushButton *getButtonFromIndex(int index);",
          "77:     bool applyPriorities();",
          "80:     void loadTorrentInfos(BitTorrent::TorrentHandle *const torrent);",
          "81:     void updateTorrentInfos(BitTorrent::TorrentHandle *const torrent);",
          "82:     void loadUrlSeeds();",
          "83:     void askWebSeed();",
          "84:     void deleteSelectedUrlSeeds();",
          "85:     void copySelectedWebSeedsToClipboard() const;",
          "86:     void editWebSeed();",
          "87:     void displayFilesListMenu(const QPoint &pos);",
          "88:     void displayWebSeedListMenu(const QPoint &pos);",
          "89:     void filteredFilesChanged();",
          "90:     void showPiecesDownloaded(bool show);",
          "91:     void showPiecesAvailability(bool show);",
          "92:     void renameSelectedFile();",
          "93:     void openSelectedFile();",
          "96:     void setVisibility(bool visible);",
          "97:     void loadDynamicData();",
          "98:     void clear();",
          "99:     void readSettings();",
          "100:     void saveSettings();",
          "101:     void reloadPreferences();",
          "102:     void openDoubleClickedFile(const QModelIndex &);",
          "103:     void loadTrackers(BitTorrent::TorrentHandle *const torrent);",
          "106:     void openFile(const QModelIndex &index);",
          "107:     void openFolder(const QModelIndex &index, bool containing_folder);",
          "110:     TransferListWidget *transferList;",
          "111:     MainWindow *main_window;",
          "112:     BitTorrent::TorrentHandle *m_torrent;",
          "113:     QTimer *refreshTimer;",
          "114:     SlideState state;",
          "115:     TorrentContentFilterModel *PropListModel;",
          "116:     PropListDelegate *PropDelegate;",
          "117:     PeerListWidget *peersList;",
          "118:     TrackerList *trackerList;",
          "119:     SpeedWidget *speedWidget;",
          "120:     QList<int> slideSizes;",
          "121:     DownloadedPiecesBar *downloaded_pieces;",
          "122:     PieceAvailabilityBar *pieces_availability;",
          "123:     PropTabBar *m_tabBar;",
          "124:     LineEdit *m_contentFilterLine;",
          "125:     QShortcut *editHotkeyFile;",
          "126:     QShortcut *editHotkeyWeb;",
          "127:     QShortcut *deleteHotkeyWeb;",
          "128:     QShortcut *openHotkeyFile;",
          "131:     void filterText(const QString &filter);",
          "132:     void updateSavePath(BitTorrent::TorrentHandle *const torrent);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80f3b1935629a52bdb58a7ebe974341def5c69a7",
      "candidate_info": {
        "commit_hash": "80f3b1935629a52bdb58a7ebe974341def5c69a7",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/80f3b1935629a52bdb58a7ebe974341def5c69a7",
        "files": [
          "src/base/logger.cpp",
          "src/base/utils/string.cpp",
          "src/base/utils/string.h",
          "src/gui/deletionconfirmationdlg.h",
          "src/gui/properties/peerlistwidget.cpp",
          "src/gui/properties/propertieswidget.cpp"
        ],
        "message": "Add Utils::String::toHtmlEscaped",
        "before_after_code_files": [
          "src/base/logger.cpp||src/base/logger.cpp",
          "src/base/utils/string.cpp||src/base/utils/string.cpp",
          "src/base/utils/string.h||src/base/utils/string.h",
          "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
          "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
          "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/base/logger.cpp||src/base/logger.cpp",
            "src/base/utils/string.cpp||src/base/utils/string.cpp",
            "src/base/utils/string.h||src/base/utils/string.h",
            "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
            "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
            "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
          ],
          "candidate": [
            "src/base/logger.cpp||src/base/logger.cpp",
            "src/base/utils/string.cpp||src/base/utils/string.cpp",
            "src/base/utils/string.h||src/base/utils/string.h",
            "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h",
            "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp",
            "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/base/logger.cpp||src/base/logger.cpp": [
          "File: src/base/logger.cpp -> src/base/logger.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"logger.h\"",
          "3: #include <QDateTime>",
          "5: Logger* Logger::m_instance = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"base/utils/string.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: {",
          "37:     QWriteLocker locker(&lock);",
          "40:     m_messages.push_back(temp);",
          "42:     if (m_messages.size() >= MAX_LOG_MESSAGES)",
          "",
          "[Removed Lines]",
          "39:     Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, message };",
          "",
          "[Added Lines]",
          "40:     Log::Msg temp = { msgCounter++, QDateTime::currentMSecsSinceEpoch(), type, Utils::String::toHtmlEscaped(message) };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: {",
          "50:     QWriteLocker locker(&lock);",
          "53:     m_peers.push_back(temp);",
          "55:     if (m_peers.size() >= MAX_LOG_MESSAGES)",
          "",
          "[Removed Lines]",
          "52:     Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), ip, blocked, reason };",
          "",
          "[Added Lines]",
          "53:     Log::Peer temp = { peerCounter++, QDateTime::currentMSecsSinceEpoch(), Utils::String::toHtmlEscaped(ip), blocked, Utils::String::toHtmlEscaped(reason) };",
          "",
          "---------------"
        ],
        "src/base/utils/string.cpp||src/base/utils/string.cpp": [
          "File: src/base/utils/string.cpp -> src/base/utils/string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:     return (diff == 0);",
          "213: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215: QString Utils::String::toHtmlEscaped(const QString &str)",
          "216: {",
          "217: #ifdef QBT_USES_QT5",
          "218:     return str.toHtmlEscaped();",
          "219: #else",
          "220:     return Qt::escape(str);",
          "221: #endif",
          "222: }",
          "",
          "---------------"
        ],
        "src/base/utils/string.h||src/base/utils/string.h": [
          "File: src/base/utils/string.h -> src/base/utils/string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         bool slowEquals(const QByteArray &a, const QByteArray &b);",
          "50:         bool naturalCompareCaseSensitive(const QString &left, const QString &right);",
          "51:         bool naturalCompareCaseInsensitive(const QString &left, const QString &right);",
          "52:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         QString toHtmlEscaped(const QString &str);",
          "",
          "---------------"
        ],
        "src/gui/deletionconfirmationdlg.h||src/gui/deletionconfirmationdlg.h": [
          "File: src/gui/deletionconfirmationdlg.h -> src/gui/deletionconfirmationdlg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <QPushButton>",
          "36: #include \"ui_confirmdeletiondlg.h\"",
          "37: #include \"base/preferences.h\"",
          "39: #include \"base/utils/misc.h\"",
          "41: class DeletionConfirmationDlg : public QDialog, private Ui::confirmDeletionDlg {",
          "42:   Q_OBJECT",
          "",
          "[Removed Lines]",
          "38: #include \"guiiconprovider.h\"",
          "",
          "[Added Lines]",
          "39: #include \"base/utils/string.h\"",
          "40: #include \"guiiconprovider.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   DeletionConfirmationDlg(QWidget *parent, const int &size, const QString &name, bool defaultDeleteFiles): QDialog(parent) {",
          "46:     setupUi(this);",
          "47:     if (size == 1)",
          "49:     else",
          "50:       label->setText(tr(\"Are you sure you want to delete these %1 torrents from the transfer list?\", \"Are you sure you want to delete these 5 torrents from the transfer list?\").arg(QString::number(size)));",
          "",
          "[Removed Lines]",
          "48:       label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(name));",
          "",
          "[Added Lines]",
          "49:       label->setText(tr(\"Are you sure you want to delete '%1' from the transfer list?\", \"Are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?\").arg(Utils::String::toHtmlEscaped(name)));",
          "",
          "---------------"
        ],
        "src/gui/properties/peerlistwidget.cpp||src/gui/properties/peerlistwidget.cpp": [
          "File: src/gui/properties/peerlistwidget.cpp -> src/gui/properties/peerlistwidget.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CONNECTION), peer.connectionType());",
          "402:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());",
          "403:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);",
          "405:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());",
          "406:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());",
          "407:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());",
          "",
          "[Removed Lines]",
          "404:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());",
          "",
          "[Added Lines]",
          "404:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PORT), peer.address().port);",
          "433:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flags());",
          "434:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::FLAGS), peer.flagsDescription(), Qt::ToolTipRole);",
          "436:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::PROGRESS), peer.progress());",
          "437:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::DOWN_SPEED), peer.payloadDownSpeed());",
          "438:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::UP_SPEED), peer.payloadUpSpeed());",
          "",
          "[Removed Lines]",
          "435:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), peer.client());",
          "",
          "[Added Lines]",
          "435:     m_listModel->setData(m_listModel->index(row, PeerListDelegate::CLIENT), Utils::String::toHtmlEscaped(peer.client()));",
          "",
          "---------------"
        ],
        "src/gui/properties/propertieswidget.cpp||src/gui/properties/propertieswidget.cpp": [
          "File: src/gui/properties/propertieswidget.cpp -> src/gui/properties/propertieswidget.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         label_total_size_val->setText(Utils::Misc::friendlyUnit(m_torrent->totalSize()));",
          "320:         loadUrlSeeds();",
          "325:         PropListModel->model()->setupModelData(m_torrent->info());",
          "",
          "[Removed Lines]",
          "317:         comment_text->setText(Utils::Misc::parseHtmlLinks(m_torrent->comment()));",
          "322:         label_created_by_val->setText(m_torrent->creator());",
          "",
          "[Added Lines]",
          "317:         comment_text->setText(Utils::Misc::parseHtmlLinks(Utils::String::toHtmlEscaped(m_torrent->comment())));",
          "322:         label_created_by_val->setText(Utils::String::toHtmlEscaped(m_torrent->creator()));",
          "",
          "---------------"
        ]
      }
    }
  ]
}