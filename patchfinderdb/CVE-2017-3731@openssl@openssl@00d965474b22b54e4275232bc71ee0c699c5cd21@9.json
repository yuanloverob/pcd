{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7dca72af91936d246700b78e06def16561a36028",
      "candidate_info": {
        "commit_hash": "7dca72af91936d246700b78e06def16561a36028",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7dca72af91936d246700b78e06def16561a36028",
        "files": [
          "crypto/err/err.c"
        ],
        "message": "In err_cleanup(), cleanup the thread local storage too\n\nFixes #3033\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3035)\n(cherry picked from commit 165f1c3ef39680471339d21b9f6c12ea86b4a26a)",
        "before_after_code_files": [
          "crypto/err/err.c||crypto/err/err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/err/err.c||crypto/err/err.c": [
          "File: crypto/err/err.c -> crypto/err/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: void err_cleanup(void)",
          "261: {",
          "262:     CRYPTO_THREAD_lock_free(err_string_lock);",
          "263:     err_string_lock = NULL;",
          "264: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     CRYPTO_THREAD_cleanup_local(&err_thread_local);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a99be00636e73206f7a40b626595466003fa250e",
      "candidate_info": {
        "commit_hash": "a99be00636e73206f7a40b626595466003fa250e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a99be00636e73206f7a40b626595466003fa250e",
        "files": [
          "crypto/ct/ct_err.c",
          "crypto/ct/ct_locl.h",
          "crypto/ct/ct_policy.c",
          "crypto/ct/ct_sct.c",
          "crypto/ct/ct_sct_ctx.c",
          "crypto/ct/ct_vfy.c",
          "include/openssl/ct.h",
          "ssl/ssl_lib.c",
          "test/ct_test.c",
          "util/libcrypto.num"
        ],
        "message": "Check that SCT timestamps are not in the future\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit 1fa9ffd934429f140edcfbaf76d2f32cc21e449b)",
        "before_after_code_files": [
          "crypto/ct/ct_err.c||crypto/ct/ct_err.c",
          "crypto/ct/ct_locl.h||crypto/ct/ct_locl.h",
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c",
          "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c",
          "crypto/ct/ct_sct_ctx.c||crypto/ct/ct_sct_ctx.c",
          "crypto/ct/ct_vfy.c||crypto/ct/ct_vfy.c",
          "include/openssl/ct.h||include/openssl/ct.h",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "test/ct_test.c||test/ct_test.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_err.c||crypto/ct/ct_err.c": [
          "File: crypto/ct/ct_err.c -> crypto/ct/ct_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     {ERR_FUNC(CT_F_O2I_SCT_LIST), \"o2i_SCT_LIST\"},",
          "37:     {ERR_FUNC(CT_F_O2I_SCT_SIGNATURE), \"o2i_SCT_signature\"},",
          "38:     {ERR_FUNC(CT_F_SCT_CTX_NEW), \"SCT_CTX_new\"},",
          "39:     {ERR_FUNC(CT_F_SCT_NEW), \"SCT_new\"},",
          "40:     {ERR_FUNC(CT_F_SCT_NEW_FROM_BASE64), \"SCT_new_from_base64\"},",
          "41:     {ERR_FUNC(CT_F_SCT_SET0_LOG_ID), \"SCT_set0_log_id\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     {ERR_FUNC(CT_F_SCT_CTX_VERIFY), \"SCT_CTX_verify\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {ERR_FUNC(CT_F_SCT_SET_LOG_ENTRY_TYPE), \"SCT_set_log_entry_type\"},",
          "46:     {ERR_FUNC(CT_F_SCT_SET_SIGNATURE_NID), \"SCT_set_signature_nid\"},",
          "47:     {ERR_FUNC(CT_F_SCT_SET_VERSION), \"SCT_set_version\"},",
          "49:     {0, NULL}",
          "50: };",
          "",
          "[Removed Lines]",
          "48:     {ERR_FUNC(CT_F_SCT_CTX_VERIFY), \"SCT_CTX_verify\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:      \"log conf missing description\"},",
          "59:     {ERR_REASON(CT_R_LOG_CONF_MISSING_KEY), \"log conf missing key\"},",
          "60:     {ERR_REASON(CT_R_LOG_KEY_INVALID), \"log key invalid\"},",
          "61:     {ERR_REASON(CT_R_SCT_INVALID), \"sct invalid\"},",
          "62:     {ERR_REASON(CT_R_SCT_INVALID_SIGNATURE), \"sct invalid signature\"},",
          "63:     {ERR_REASON(CT_R_SCT_LIST_INVALID), \"sct list invalid\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     {ERR_REASON(CT_R_SCT_FUTURE_TIMESTAMP), \"sct future timestamp\"},",
          "",
          "---------------"
        ],
        "crypto/ct/ct_locl.h||crypto/ct/ct_locl.h": [
          "File: crypto/ct/ct_locl.h -> crypto/ct/ct_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     unsigned char *preder;",
          "100:     size_t prederlen;",
          "101: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     uint64_t epoch_time_in_ms;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     X509 *cert;",
          "106:     X509 *issuer;",
          "107:     CTLOG_STORE *log_store;",
          "108: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     uint64_t epoch_time_in_ms;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: __owur int SCT_CTX_set1_pubkey(SCT_CTX *sctx, X509_PUBKEY *pubkey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: void SCT_CTX_set_time(SCT_CTX *sctx, uint64_t time_in_ms);",
          "",
          "---------------"
        ],
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     ctx->log_store = log_store;",
          "60: }",
          "62: X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)",
          "63: {",
          "64:     return ctx->cert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)",
          "63: {",
          "64:     ctx->epoch_time_in_ms = time_in_ms;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     return ctx->log_store;",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)",
          "83: {",
          "84:     return ctx->epoch_time_in_ms;",
          "85: }",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c": [
          "File: crypto/ct/ct_sct.c -> crypto/ct/ct_sct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:             goto err;",
          "330:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     SCT_CTX_set_time(sctx, ctx->epoch_time_in_ms);",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct_ctx.c||crypto/ct/ct_sct_ctx.c": [
          "File: crypto/ct/ct_sct_ctx.c -> crypto/ct/ct_sct_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:     sctx->pkey = pkey;",
          "257:     return 1;",
          "258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: void SCT_CTX_set_time(SCT_CTX *sctx, uint64_t time_in_ms)",
          "261: {",
          "262:     sctx->epoch_time_in_ms = time_in_ms;",
          "263: }",
          "",
          "---------------"
        ],
        "crypto/ct/ct_vfy.c||crypto/ct/ct_vfy.c": [
          "File: crypto/ct/ct_vfy.c -> crypto/ct/ct_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         CTerr(CT_F_SCT_CTX_VERIFY, CT_R_SCT_LOG_ID_MISMATCH);",
          "114:         return 0;",
          "115:     }",
          "117:     ctx = EVP_MD_CTX_new();",
          "118:     if (ctx == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     if (sct->timestamp > sctx->epoch_time_in_ms) {",
          "117:         CTerr(CT_F_SCT_CTX_VERIFY, CT_R_SCT_FUTURE_TIMESTAMP);",
          "118:         return 0;",
          "119:     }",
          "",
          "---------------"
        ],
        "include/openssl/ct.h||include/openssl/ct.h": [
          "File: include/openssl/ct.h -> include/openssl/ct.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,",
          "99:                                                CTLOG_STORE *log_store);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);",
          "114: void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482: # define CT_F_O2I_SCT_LIST                                111",
          "483: # define CT_F_O2I_SCT_SIGNATURE                           112",
          "484: # define CT_F_SCT_CTX_NEW                                 126",
          "485: # define CT_F_SCT_NEW                                     100",
          "486: # define CT_F_SCT_NEW_FROM_BASE64                         127",
          "487: # define CT_F_SCT_SET0_LOG_ID                             101",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: # define CT_F_SCT_CTX_VERIFY                              128",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491: # define CT_F_SCT_SET_LOG_ENTRY_TYPE                      102",
          "492: # define CT_F_SCT_SET_SIGNATURE_NID                       103",
          "493: # define CT_F_SCT_SET_VERSION                             104",
          "497: # define CT_R_BASE64_DECODE_ERROR                         108",
          "",
          "[Removed Lines]",
          "494: # define CT_F_SCT_CTX_VERIFY                              128",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501: # define CT_R_LOG_CONF_MISSING_DESCRIPTION                111",
          "502: # define CT_R_LOG_CONF_MISSING_KEY                        112",
          "503: # define CT_R_LOG_KEY_INVALID                             113",
          "504: # define CT_R_SCT_INVALID                                 104",
          "505: # define CT_R_SCT_INVALID_SIGNATURE                       107",
          "506: # define CT_R_SCT_LIST_INVALID                            105",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: # define CT_R_SCT_FUTURE_TIMESTAMP                        116",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175:     CT_POLICY_EVAL_CTX_set1_cert(ctx, cert);",
          "4176:     CT_POLICY_EVAL_CTX_set1_issuer(ctx, issuer);",
          "4177:     CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx, s->ctx->ctlog_store);",
          "4179:     scts = SSL_get0_peer_scts(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178:     CT_POLICY_EVAL_CTX_set_time(ctx, SSL_SESSION_get_time(SSL_get0_session(s)));",
          "",
          "---------------"
        ],
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: typedef struct ct_test_fixture {",
          "31:     const char *test_case_name;",
          "33:     CTLOG_STORE* ctlog_store;",
          "35:     const char *certs_dir;",
          "36:     char *certificate_file;",
          "37:     char *issuer_file;",
          "38:     int expected_sct_count;",
          "40:     const unsigned char *tls_sct_list;",
          "41:     size_t tls_sct_list_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     uint64_t epoch_time_in_ms;",
          "43:     int expected_valid_sct_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:         }",
          "251:     }",
          "254:         int unverified_sct_count = sk_SCT_num(scts) -",
          "255:                 invalid_sct_count - valid_sct_count;",
          "",
          "[Removed Lines]",
          "253:     if (valid_sct_count != fixture.expected_sct_count) {",
          "",
          "[Added Lines]",
          "258:     if (valid_sct_count != fixture.expected_valid_sct_count) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:                 \"%d SCTs were unverified\\n\",",
          "261:                 invalid_sct_count,",
          "262:                 valid_sct_count,",
          "264:                 unverified_sct_count);",
          "265:         return 0;",
          "266:     }",
          "",
          "[Removed Lines]",
          "263:                 fixture.expected_sct_count,",
          "",
          "[Added Lines]",
          "268:                 fixture.expected_valid_sct_count,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297:     CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(",
          "298:             ct_policy_ctx, fixture.ctlog_store);",
          "300:     if (fixture.certificate_file != NULL) {",
          "301:         int sct_extension_index;",
          "302:         X509_EXTENSION *sct_extension = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:     CT_POLICY_EVAL_CTX_set_time(ct_policy_ctx, fixture.epoch_time_in_ms);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "443:     fixture.certs_dir = certs_dir;",
          "444:     fixture.certificate_file = \"embeddedSCTs1.pem\";",
          "445:     fixture.issuer_file = \"embeddedSCTs1_issuer.pem\";",
          "447:     fixture.test_validity = 1;",
          "448:     EXECUTE_CT_TEST();",
          "449: }",
          "",
          "[Removed Lines]",
          "446:     fixture.expected_sct_count = 1;",
          "",
          "[Added Lines]",
          "453:     fixture.expected_sct_count = fixture.expected_valid_sct_count = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454:     fixture.certs_dir = certs_dir;",
          "455:     fixture.certificate_file = \"embeddedSCTs3.pem\";",
          "456:     fixture.issuer_file = \"embeddedSCTs3_issuer.pem\";",
          "458:     fixture.test_validity = 1;",
          "459:     EXECUTE_CT_TEST();",
          "460: }",
          "",
          "[Removed Lines]",
          "457:     fixture.expected_sct_count = 3;",
          "",
          "[Added Lines]",
          "464:     fixture.expected_sct_count = fixture.expected_valid_sct_count = 3;",
          "465:     fixture.test_validity = 1;",
          "466:     EXECUTE_CT_TEST();",
          "467: }",
          "469: static int test_verify_fails_for_future_sct()",
          "470: {",
          "471:     SETUP_CT_TEST_FIXTURE();",
          "473:     fixture.certs_dir = certs_dir;",
          "474:     fixture.certificate_file = \"embeddedSCTs1.pem\";",
          "475:     fixture.issuer_file = \"embeddedSCTs1_issuer.pem\";",
          "476:     fixture.expected_sct_count = 1;",
          "477:     fixture.expected_valid_sct_count = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "548:     ADD_TEST(test_multiple_scts_in_certificate);",
          "549:     ADD_TEST(test_verify_one_sct);",
          "550:     ADD_TEST(test_verify_multiple_scts);",
          "551:     ADD_TEST(test_decode_tls_sct);",
          "552:     ADD_TEST(test_encode_tls_sct);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:     ADD_TEST(test_verify_fails_for_future_sct);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_1 EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_1 EXIST::FUNCTION:CT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aa62f39514026609d0378090dfd8a27834d8a21",
      "candidate_info": {
        "commit_hash": "3aa62f39514026609d0378090dfd8a27834d8a21",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3aa62f39514026609d0378090dfd8a27834d8a21",
        "files": [
          "ssl/record/ssl3_record.c",
          "test/danetest.c"
        ],
        "message": "Fix some -Wshadow warnings\n\nFound using various (old-ish) versions of gcc.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2940)\n(cherry picked from commit aebe9e399109dcde63a1d0328ffdfc5619b49431)",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "test/danetest.c||test/danetest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578: {",
          "579:     SSL3_RECORD *rec;",
          "580:     EVP_CIPHER_CTX *ds;",
          "",
          "[Removed Lines]",
          "577: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int n_recs, int send)",
          "",
          "[Added Lines]",
          "577: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int n_recs, int sending)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:     if (n_recs != 1)",
          "590:         return 0;",
          "592:         ds = s->enc_write_ctx;",
          "593:         if (s->enc_write_ctx == NULL)",
          "594:             enc = NULL;",
          "",
          "[Removed Lines]",
          "591:     if (send) {",
          "",
          "[Added Lines]",
          "591:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:             i = bs - ((int)l % bs);",
          "",
          "[Removed Lines]",
          "614:         if ((bs != 1) && send) {",
          "",
          "[Added Lines]",
          "614:         if ((bs != 1) && sending) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "625:             rec->input[l - 1] = (i - 1);",
          "626:         }",
          "629:             if (l == 0 || l % bs != 0)",
          "630:                 return 0;",
          "",
          "[Removed Lines]",
          "628:         if (!send) {",
          "",
          "[Added Lines]",
          "628:         if (!sending) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "637:         if (EVP_MD_CTX_md(s->read_hash) != NULL)",
          "638:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "640:             return ssl3_cbc_remove_padding(rec, bs, mac_size);",
          "641:     }",
          "642:     return (1);",
          "",
          "[Removed Lines]",
          "639:         if ((bs != 1) && !send)",
          "",
          "[Added Lines]",
          "639:         if ((bs != 1) && !sending)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656: {",
          "657:     EVP_CIPHER_CTX *ds;",
          "658:     size_t reclen[SSL_MAX_PIPELINES];",
          "",
          "[Removed Lines]",
          "655: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int n_recs, int send)",
          "",
          "[Added Lines]",
          "655: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int n_recs, int sending)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "664:     if (n_recs == 0)",
          "665:         return 0;",
          "668:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "669:             int n = EVP_MD_CTX_size(s->write_hash);",
          "670:             OPENSSL_assert(n >= 0);",
          "",
          "[Removed Lines]",
          "667:     if (send) {",
          "",
          "[Added Lines]",
          "667:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "736:                 & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "737:                 unsigned char *seq;",
          "740:                     : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "742:                 if (SSL_IS_DTLS(s)) {",
          "744:                     unsigned char dtlsseq[9], *p = dtlsseq;",
          "747:                         DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "748:                     memcpy(p, &seq[2], 6);",
          "749:                     memcpy(buf[ctr], dtlsseq, 8);",
          "",
          "[Removed Lines]",
          "739:                 seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "746:                     s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "",
          "[Added Lines]",
          "739:                 seq = sending ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "746:                     s2n(sending ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "766:                 if (pad <= 0)",
          "767:                     return -1;",
          "770:                     reclen[ctr] += pad;",
          "771:                     recs[ctr].length += pad;",
          "772:                 }",
          "775:                 i = bs - ((int)reclen[ctr] % bs);",
          "",
          "[Removed Lines]",
          "769:                 if (send) {",
          "774:             } else if ((bs != 1) && send) {",
          "",
          "[Added Lines]",
          "769:                 if (sending) {",
          "774:             } else if ((bs != 1) && sending) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "784:                 recs[ctr].length += i;",
          "785:             }",
          "788:                 if (reclen[ctr] == 0 || reclen[ctr] % bs != 0)",
          "789:                     return 0;",
          "790:             }",
          "",
          "[Removed Lines]",
          "787:             if (!send) {",
          "",
          "[Added Lines]",
          "787:             if (!sending) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "819:             ? (i < 0)",
          "820:             : (i == 0))",
          "823:             if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {",
          "824:                 for (ctr = 0; ctr < n_recs; ctr++) {",
          "825:                     recs[ctr].data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "",
          "[Removed Lines]",
          "822:         if (send == 0) {",
          "",
          "[Added Lines]",
          "822:         if (sending == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "838:         ret = 1;",
          "839:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "840:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "842:             int tmpret;",
          "843:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "844:                 tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);",
          "",
          "[Removed Lines]",
          "841:         if ((bs != 1) && !send) {",
          "",
          "[Added Lines]",
          "841:         if ((bs != 1) && !sending) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "853:                                                ret, -1);",
          "854:             }",
          "855:         }",
          "857:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "858:                 recs[ctr].length -= pad;",
          "859:             }",
          "",
          "[Removed Lines]",
          "856:         if (pad && !send) {",
          "",
          "[Added Lines]",
          "856:         if (pad && !sending) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "862:     return ret;",
          "863: }",
          "866: {",
          "867:     unsigned char *mac_sec, *seq;",
          "868:     const EVP_MD_CTX *hash;",
          "",
          "[Removed Lines]",
          "865: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "[Added Lines]",
          "865: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "871:     int npad;",
          "872:     int t;",
          "875:         mac_sec = &(ssl->s3->write_mac_secret[0]);",
          "876:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "877:         hash = ssl->write_hash;",
          "",
          "[Removed Lines]",
          "874:     if (send) {",
          "",
          "[Added Lines]",
          "874:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "887:     md_size = t;",
          "888:     npad = (48 / md_size) * md_size;",
          "891:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "892:         ssl3_cbc_record_digest_supported(hash)) {",
          "",
          "[Removed Lines]",
          "890:     if (!send &&",
          "",
          "[Added Lines]",
          "890:     if (!sending &&",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "959:     return (md_size);",
          "960: }",
          "963: {",
          "964:     unsigned char *seq;",
          "965:     EVP_MD_CTX *hash;",
          "",
          "[Removed Lines]",
          "962: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "[Added Lines]",
          "962: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "967:     int i;",
          "968:     EVP_MD_CTX *hmac = NULL, *mac_ctx;",
          "969:     unsigned char header[13];",
          "971:                       : (ssl->mac_flags & SSL_MAC_FLAG_READ_MAC_STREAM));",
          "972:     int t;",
          "975:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "976:         hash = ssl->write_hash;",
          "977:     } else {",
          "",
          "[Removed Lines]",
          "970:     int stream_mac = (send ? (ssl->mac_flags & SSL_MAC_FLAG_WRITE_MAC_STREAM)",
          "974:     if (send) {",
          "",
          "[Added Lines]",
          "970:     int stream_mac = (sending ? (ssl->mac_flags & SSL_MAC_FLAG_WRITE_MAC_STREAM)",
          "974:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "996:     if (SSL_IS_DTLS(ssl)) {",
          "997:         unsigned char dtlsseq[8], *p = dtlsseq;",
          "1000:             DTLS_RECORD_LAYER_get_r_epoch(&ssl->rlayer), p);",
          "1001:         memcpy(p, &seq[2], 6);",
          "",
          "[Removed Lines]",
          "999:         s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&ssl->rlayer) :",
          "",
          "[Added Lines]",
          "999:         s2n(sending ? DTLS_RECORD_LAYER_get_w_epoch(&ssl->rlayer) :",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1010:     header[11] = (rec->length) >> 8;",
          "1011:     header[12] = (rec->length) & 0xff;",
          "1014:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1015:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
          "",
          "[Removed Lines]",
          "1013:     if (!send && !SSL_READ_ETM(ssl) &&",
          "",
          "[Added Lines]",
          "1013:     if (!sending && !SSL_READ_ETM(ssl) &&",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1035:             EVP_MD_CTX_free(hmac);",
          "1036:             return -1;",
          "1037:         }",
          "1039:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
          "1040:                                        mac_ctx, rec->input,",
          "1041:                                        rec->length, rec->orig_len)) {",
          "",
          "[Removed Lines]",
          "1038:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "[Added Lines]",
          "1038:         if (!sending && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "---------------"
        ],
        "test/danetest.c||test/danetest.c": [
          "File: test/danetest.c -> test/danetest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:     return 1;",
          "318: }",
          "321:                          BIO *f, const char *path)",
          "322: {",
          "323:     char *line;",
          "",
          "[Removed Lines]",
          "320: static int test_tlsafile(SSL_CTX *ctx, const char *basename,",
          "",
          "[Added Lines]",
          "320: static int test_tlsafile(SSL_CTX *ctx, const char *base_name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         if ((ssl = SSL_new(ctx)) == NULL)",
          "354:             return -1;",
          "355:         SSL_set_connect_state(ssl);",
          "357:             SSL_free(ssl);",
          "358:             return -1;",
          "359:         }",
          "",
          "[Removed Lines]",
          "356:         if (SSL_dane_enable(ssl, basename) <= 0) {",
          "",
          "[Added Lines]",
          "356:         if (SSL_dane_enable(ssl, base_name) <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88bf0d36048569e0dd5e6193c4ec21d2a9da5aba",
      "candidate_info": {
        "commit_hash": "88bf0d36048569e0dd5e6193c4ec21d2a9da5aba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/88bf0d36048569e0dd5e6193c4ec21d2a9da5aba",
        "files": [
          "crypto/mem_sec.c"
        ],
        "message": "Ensure minsize >= sizeof(SH_LIST)\n\nThe sh_add_to_list function will overwrite subsequent slots in the free list\nfor small allocations.  This causes a segmentation fault if the writes goes\noff the end of the secure memory.  I've not investigated if this problem\ncan overwrite memory without the segmentation fault, but it seems likely.\n\nThis fix limits the minsize to the sizeof of the SH_LIST structure (which\nalso has a side effect of properly aligning the pointers).\n\nThe alternative would be to return an error if minsize is too small.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2657)\n\n(cherry picked from commit 70e14ffbaf6a67dab56c24cae01f1248cf3f1e77)",
        "before_after_code_files": [
          "crypto/mem_sec.c||crypto/mem_sec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/mem_sec.c||crypto/mem_sec.c": [
          "File: crypto/mem_sec.c -> crypto/mem_sec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:     if (minsize <= 0 || (minsize & (minsize - 1)) != 0)",
          "353:         goto err;",
          "355:     sh.arena_size = size;",
          "356:     sh.minsize = minsize;",
          "357:     sh.bittable_size = (sh.arena_size / sh.minsize) * 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:     while (minsize < (int)sizeof(SH_LIST))",
          "356:         minsize *= 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1f138c194d7d7dddb74c3a41215e8de638d7a26",
      "candidate_info": {
        "commit_hash": "c1f138c194d7d7dddb74c3a41215e8de638d7a26",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c1f138c194d7d7dddb74c3a41215e8de638d7a26",
        "files": [
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Only call memcpy when the length is larger than 0.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nGH: #2050\n(cherry picked from commit a19fc66a6b5f99ad00305e152bdb41460d728640)",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:         s->session->ssl_version = s->version;",
          "1023:         s->session->session_id_length = session_id_len;",
          "1027:     }",
          "",
          "[Removed Lines]",
          "1025:         memcpy(s->session->session_id, PACKET_data(&session_id),",
          "1026:                session_id_len);",
          "",
          "[Added Lines]",
          "1025:         if (session_id_len > 0)",
          "1026:             memcpy(s->session->session_id, PACKET_data(&session_id),",
          "1027:                    session_id_len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}