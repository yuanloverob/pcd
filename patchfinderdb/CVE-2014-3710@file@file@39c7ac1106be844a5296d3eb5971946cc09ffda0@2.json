{
  "cve_id": "CVE-2014-3710",
  "cve_desc": "The donote function in readelf.c in file through 5.20, as used in the Fileinfo component in PHP 5.4.34, does not ensure that sufficient note headers are present, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.",
  "repo": "file/file",
  "patch_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
  "patch_info": {
    "commit_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/39c7ac1106be844a5296d3eb5971946cc09ffda0",
    "files": [
      "ChangeLog",
      "src/readelf.c"
    ],
    "message": "Fix note bounds reading, Francisco Alonso / Red Hat",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.102 2014/03/11 21:00:13 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.103 2014/05/02 02:25:10 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477:  uint32_t namesz, descsz;",
      "478:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "480:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "481:  offset += xnh_sizeof;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:  if (xnh_sizeof + offset > size) {",
      "484:   return xnh_sizeof + offset;",
      "485:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "986da0457ede7cd406fff015bc3a9d34bb446c21",
      "candidate_info": {
        "commit_hash": "986da0457ede7cd406fff015bc3a9d34bb446c21",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/986da0457ede7cd406fff015bc3a9d34bb446c21",
        "files": [
          "src/readelf.c"
        ],
        "message": "fix bug intruduced by the locale changes.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.98 2013/09/20 00:39:43 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.99 2013/11/05 15:44:01 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "952:    break;",
          "953:   }",
          "956:   switch (xsh_type) {",
          "957:   case SHT_NOTE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "955: printf(\"name %s type %d\\n\", name, xsh_type);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d7ddd68af77ce6f5b4d3e1a496dfde7875f2790",
      "candidate_info": {
        "commit_hash": "2d7ddd68af77ce6f5b4d3e1a496dfde7875f2790",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/2d7ddd68af77ce6f5b4d3e1a496dfde7875f2790",
        "files": [
          "src/readelf.c"
        ],
        "message": "check the proper variable",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.109 2014/12/09 02:46:38 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1285:     file_badread(ms);",
          "1286:   return -1;",
          "1287:  }",
          "1289:   fsize = st.st_size;",
          "1290:  else",
          "1291:   fsize = SIZE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "1288:  if (S_ISREG(st.st_mode) || fsize != 0)",
          "",
          "[Added Lines]",
          "1288:  if (S_ISREG(st.st_mode) || st.st_size != 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "574a285880a2bf1064a94e7058d24ff14e403aeb",
      "candidate_info": {
        "commit_hash": "574a285880a2bf1064a94e7058d24ff14e403aeb",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/574a285880a2bf1064a94e7058d24ff14e403aeb",
        "files": [
          "src/readelf.c"
        ],
        "message": "Code to detect gnu attributes, and start of parser.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.101 2014/03/11 17:13:18 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.102 2014/03/11 21:00:13 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:      file_badread(ms);",
          "1006:      return -1;",
          "1007:     }",
          "1008:     (void)memcpy(xcap_addr, cbuf, xcap_sizeof);",
          "1009:     switch (xcap_tag) {",
          "1010:     case CA_SUNW_NULL:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:     if (cbuf[0] == 'A') {",
          "1009: #ifdef notyet",
          "1010:      char *p = cbuf + 1;",
          "1011:      uint32_t len, tag;",
          "1012:      memcpy(&len, p, sizeof(len));",
          "1013:      p += 4;",
          "1014:      len = getu32(swap, len);",
          "1015:      if (memcmp(\"gnu\", p, 3) != 0) {",
          "1016:          if (file_printf(ms,",
          "1017:       \", unknown capability %.3s\", p)",
          "1018:       == -1)",
          "1019:       return -1;",
          "1020:          break;",
          "1021:      }",
          "1022:      p += strlen(p) + 1;",
          "1023:      tag = *p++;",
          "1024:      memcpy(&len, p, sizeof(len));",
          "1025:      p += 4;",
          "1026:      len = getu32(swap, len);",
          "1027:      if (tag != 1) {",
          "1028:          if (file_printf(ms, \", unknown gnu\"",
          "1029:       \" capability tag %d\", tag)",
          "1030:       == -1)",
          "1031:       return -1;",
          "1032:          break;",
          "1033:      }",
          "1035: #endif",
          "1036:      break;",
          "1037:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b4a6aac20e64ae801962d8b3411d63b3e94beef",
      "candidate_info": {
        "commit_hash": "2b4a6aac20e64ae801962d8b3411d63b3e94beef",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/2b4a6aac20e64ae801962d8b3411d63b3e94beef",
        "files": [
          "src/readelf.c"
        ],
        "message": "and non-zero sizes.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.108 2014/11/27 15:16:00 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.109 2014/12/09 02:46:38 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1285:     file_badread(ms);",
          "1286:   return -1;",
          "1287:  }",
          "1289:   fsize = st.st_size;",
          "1290:  else",
          "1291:   fsize = SIZE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "1288:  if (S_ISREG(st.st_mode))",
          "",
          "[Added Lines]",
          "1288:  if (S_ISREG(st.st_mode) || fsize != 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65437cee25199dbd385fb35901bc0011e164276c",
      "candidate_info": {
        "commit_hash": "65437cee25199dbd385fb35901bc0011e164276c",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/65437cee25199dbd385fb35901bc0011e164276c",
        "files": [
          "src/readelf.c"
        ],
        "message": "Limit string printing to 100 chars, and add flags I forgot in the previous commit.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.115 2014/12/16 20:53:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.116 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "900:  }",
          "902:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "903:   switch (xnh_type) {",
          "904:       case NT_NETBSD_VERSION:",
          "905:    return size;",
          "906:   case NT_NETBSD_MARCH:",
          "907:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
          "908:     return size;",
          "911:     return size;",
          "912:    break;",
          "913:   case NT_NETBSD_CMODEL:",
          "914:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
          "915:     return size;",
          "916:    if (file_printf(ms, \", compiler model: %.*s\",",
          "917:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "918:     return size;",
          "",
          "[Removed Lines]",
          "909:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
          "910:        (const char *)&nbuf[doff]) == -1)",
          "",
          "[Added Lines]",
          "903:   if (descsz > 100)",
          "904:    descsz = 100;",
          "912:    if (file_printf(ms, \", compiled for: %.*s\",",
          "913:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}