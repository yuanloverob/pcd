{
  "cve_id": "CVE-2015-0560",
  "cve_desc": "The dissect_wccp2r1_address_table_info function in epan/dissectors/packet-wccp.c in the WCCP dissector in Wireshark 1.10.x before 1.10.12 and 1.12.x before 1.12.3 does not initialize certain data structures, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "a442a1c0e815fd61416cf408bd74d85a042ccc6a",
  "patch_info": {
    "commit_hash": "a442a1c0e815fd61416cf408bd74d85a042ccc6a",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/a442a1c0e815fd61416cf408bd74d85a042ccc6a",
    "files": [
      "epan/dissectors/packet-wccp.c"
    ],
    "message": "WCCP: initialize address table to 0\n\nIt prevents an uninitialized access later on if an exception is triggered before filling the table\n\nBug: 10806\nChange-Id: I8f75fb18cd8d033013c34093f9d6c8762f23452b\nReviewed-on: https://code.wireshark.org/review/6056\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
      "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1891:   case 1:",
      "1892:     if (wccp_wccp_address_table.table_ipv4 == NULL)",
      "1893:       wccp_wccp_address_table.table_ipv4 = (guint32 *)",
      "1895:     if (address_length != 4) {",
      "1896:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
      "1897:                              \"The Address length must be 4, but I found  %d for IPv4 addresses. Correcting this.\",",
      "",
      "[Removed Lines]",
      "1894:         wmem_alloc(pinfo->pool, wccp_wccp_address_table.table_length * 4);",
      "",
      "[Added Lines]",
      "1894:         wmem_alloc0(pinfo->pool, wccp_wccp_address_table.table_length * 4);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1902:   case 2:",
      "1903:     if (wccp_wccp_address_table.table_ipv6 == NULL)",
      "1904:       wccp_wccp_address_table.table_ipv6 = (struct e_in6_addr *)",
      "1906:     if (address_length != 16) {",
      "1907:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
      "1908:                              \"The Address length must be 16, but I found %d for IPv6 addresses.  Correcting this\",",
      "",
      "[Removed Lines]",
      "1905:         wmem_alloc(pinfo->pool, wccp_wccp_address_table.table_length * sizeof(struct e_in6_addr));",
      "",
      "[Added Lines]",
      "1905:         wmem_alloc0(pinfo->pool, wccp_wccp_address_table.table_length * sizeof(struct e_in6_addr));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38c05061ba1c27472f45678e2f4782d3194b25b8",
      "candidate_info": {
        "commit_hash": "38c05061ba1c27472f45678e2f4782d3194b25b8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/38c05061ba1c27472f45678e2f4782d3194b25b8",
        "files": [
          "epan/dissectors/packet-wccp.c"
        ],
        "message": "WCCP - remove global variable used to store address information for computation later.\n\nChange-Id: I06841ec77cf9f34914b9dfe10b8cd35824b32b71\nReviewed-on: https://code.wireshark.org/review/9647\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <epan/ipproto.h>",
          "29: #include <epan/expert.h>",
          "30: #include \"packet-wccp.h\"",
          "33: void proto_register_wccp(void);",
          "34: void proto_reg_handoff_wccp(void);",
          "",
          "[Removed Lines]",
          "31:  #include <epan/tfs.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: static int hf_command_element_type = -1;",
          "57: static int hf_command_element_length = -1;",
          "58: static int hf_command_length = -1;",
          "60: static int hf_command_unknown = -1;",
          "61: static int hf_service_info_type = -1;",
          "62: static int hf_service_info_id_standard = -1;",
          "",
          "[Removed Lines]",
          "59: static int hf_command_element_shutdown_ip = -1;",
          "",
          "[Added Lines]",
          "58: static int hf_command_element_shutdown_ip_index = -1;",
          "59: static int hf_command_element_shutdown_ipv4 = -1;",
          "60: static int hf_command_element_shutdown_ipv6 = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: static int hf_service_info_flags_reserved = -1;",
          "79: static int hf_service_info_source_port = -1;",
          "80: static int hf_service_info_destination_port = -1;",
          "82: static int hf_router_identity_receive_id = -1;",
          "84: static int hf_router_identity_received_from_num = -1;",
          "86: static int hf_web_cache_identity_hash_rev = -1;",
          "87: static int hf_web_cache_identity_flags = -1;",
          "88: static int hf_web_cache_identity_flag_hash_info = -1;",
          "",
          "[Removed Lines]",
          "81: static int hf_router_identity_ip = -1;",
          "83: static int hf_router_identity_send_to_ip = -1;",
          "85: static int hf_web_cache_identity_ip = -1;",
          "",
          "[Added Lines]",
          "82: static int hf_router_identity_ip_index = -1;",
          "83: static int hf_router_identity_ipv4 = -1;",
          "84: static int hf_router_identity_ipv6 = -1;",
          "86: static int hf_router_identity_send_to_ip_index = -1;",
          "87: static int hf_router_identity_send_to_ipv4 = -1;",
          "88: static int hf_router_identity_send_to_ipv6 = -1;",
          "90: static int hf_web_cache_identity_index = -1;",
          "91: static int hf_web_cache_identity_ipv4 = -1;",
          "92: static int hf_web_cache_identity_ipv6 = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92: static int hf_mask_value_set_element_value_element_num = -1;",
          "93: static int hf_assignment_weight = -1;",
          "94: static int hf_assignment_status = -1;",
          "96: static int hf_assignment_key_change_num = -1;",
          "97: static int hf_assignment_no_data = -1;",
          "98: static int hf_router_view_member_change_num = -1;",
          "99: static int hf_router_router_num = -1;",
          "101: static int hf_wc_view_info_change_num = -1;",
          "104: static int hf_wc_view_router_num = -1;",
          "107: static int hf_router_assignment_element_change_num = -1;",
          "108: static int hf_assignment_info_router_num = -1;",
          "109: static int hf_hash_buckets_assignment_wc_num = -1;",
          "116: static int hf_capability_element_type = -1;",
          "117: static int hf_capability_element_length = -1;",
          "118: static int hf_capability_info_value = -1;",
          "",
          "[Removed Lines]",
          "95: static int hf_assignment_key_ip = -1;",
          "100: static int hf_router_identity_router_ip = -1;",
          "102: static int hf_wc_view_info_router_ip = -1;",
          "103: static int hf_wc_view_info_wc_ip = -1;",
          "105: static int hf_wc_identity_ip_address = -1;",
          "106: static int hf_router_identity_received_from_ip = -1;",
          "110: static int hf_hash_buckets_assignment_wc_ip = -1;",
          "111: static int hf_assignment_info_router_ip = -1;",
          "112: static int hf_router_view_ip = -1;",
          "113: static int hf_router_query_info_ip = -1;",
          "114: static int hf_router_query_info_send_to_ip = -1;",
          "115: static int hf_router_query_info_target_ip = -1;",
          "",
          "[Added Lines]",
          "102: static int hf_assignment_key_ip_index = -1;",
          "103: static int hf_assignment_key_ipv4 = -1;",
          "104: static int hf_assignment_key_ipv6 = -1;",
          "109: static int hf_router_identity_router_ip_index = -1;",
          "110: static int hf_router_identity_router_ipv4 = -1;",
          "111: static int hf_router_identity_router_ipv6 = -1;",
          "113: static int hf_wc_view_info_router_ip_index = -1;",
          "114: static int hf_wc_view_info_router_ipv4 = -1;",
          "115: static int hf_wc_view_info_router_ipv6 = -1;",
          "116: static int hf_wc_view_info_wc_ip_index = -1;",
          "117: static int hf_wc_view_info_wc_ipv4 = -1;",
          "118: static int hf_wc_view_info_wc_ipv6 = -1;",
          "120: static int hf_wc_identity_ip_address_index = -1;",
          "121: static int hf_wc_identity_ip_address_ipv4 = -1;",
          "122: static int hf_wc_identity_ip_address_ipv6 = -1;",
          "123: static int hf_router_identity_received_from_ip_index = -1;",
          "124: static int hf_router_identity_received_from_ipv4 = -1;",
          "125: static int hf_router_identity_received_from_ipv6 = -1;",
          "129: static int hf_hash_buckets_assignment_wc_ip_index = -1;",
          "130: static int hf_hash_buckets_assignment_wc_ipv4 = -1;",
          "131: static int hf_hash_buckets_assignment_wc_ipv6 = -1;",
          "132: static int hf_assignment_info_router_ip_index = -1;",
          "133: static int hf_assignment_info_router_ipv4 = -1;",
          "134: static int hf_assignment_info_router_ipv6 = -1;",
          "135: static int hf_router_view_ip_index = -1;",
          "136: static int hf_router_view_ipv4 = -1;",
          "137: static int hf_router_view_ipv6 = -1;",
          "138: static int hf_router_query_info_ip_index = -1;",
          "139: static int hf_router_query_info_ipv4 = -1;",
          "140: static int hf_router_query_info_ipv6 = -1;",
          "141: static int hf_router_query_info_send_to_ip_index = -1;",
          "142: static int hf_router_query_info_send_to_ipv4 = -1;",
          "143: static int hf_router_query_info_send_to_ipv6 = -1;",
          "144: static int hf_router_query_info_target_ip_index = -1;",
          "145: static int hf_router_query_info_target_ipv4 = -1;",
          "146: static int hf_router_query_info_target_ipv6 = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133: static int hf_capability_timer_scale_ra_scale_lower_limit = -1;",
          "134: static int hf_capability_value = -1;",
          "135: static int hf_reserved_zero = -1;",
          "138: static int hf_value_element_src_port = -1;",
          "139: static int hf_value_element_dest_port = -1;",
          "141: static int hf_mask_value_set_list_num_elements = -1;",
          "142: static int hf_mask_element_src_ip = -1;",
          "143: static int hf_mask_element_dest_ip = -1;",
          "",
          "[Removed Lines]",
          "136: static int hf_value_element_src_ip = -1;",
          "137: static int hf_value_element_dest_ip = -1;",
          "140: static int hf_value_element_web_cache_ip = -1;",
          "",
          "[Added Lines]",
          "167: static int hf_value_element_src_ip_index = -1;",
          "168: static int hf_value_element_src_ipv4 = -1;",
          "169: static int hf_value_element_src_ipv6 = -1;",
          "170: static int hf_value_element_dest_ip_index = -1;",
          "171: static int hf_value_element_dest_ipv4 = -1;",
          "172: static int hf_value_element_dest_ipv6 = -1;",
          "175: static int hf_value_element_web_cache_ip_index = -1;",
          "176: static int hf_value_element_web_cache_ipv4 = -1;",
          "177: static int hf_value_element_web_cache_ipv6 = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151: static int hf_extended_assignment_data_length = -1;",
          "152: static int hf_alt_assignment_info_num_routers = -1;",
          "153: static int hf_alt_assignment_mask_value_set_element_num_wc_value_elements = -1;",
          "155: static int hf_web_cache_value_element_num_values = -1;",
          "156: static int hf_web_cache_value_seq_num = -1;",
          "157: static int hf_alt_assignment_mask_value_set_list_num_elements = -1;",
          "",
          "[Removed Lines]",
          "154: static int hf_web_cache_value_element_wc_address = -1;",
          "",
          "[Added Lines]",
          "191: static int hf_web_cache_value_element_wc_address_index = -1;",
          "192: static int hf_web_cache_value_element_wc_address_ipv4 = -1;",
          "193: static int hf_web_cache_value_element_wc_address_ipv6 = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "407:   struct e_in6_addr *table_ipv6;",
          "408: } wccp_address_table;",
          "417: static int wccp_bucket_info(guint8 bucket_info, proto_tree *bucket_tree,",
          "418:                             guint32 start, tvbuff_t *tvb, int offset);",
          "426:    and a negative number if there are missing bytes to finish the",
          "444: static gint dissect_wccp2_hash_buckets_assignment_element(tvbuff_t *tvb, int offset, gint length,",
          "464: static gint dissect_wccp2_hash_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "465:                                                        proto_tree *info_tree);",
          "470: static gint dissect_wccp2_assignment_weight_and_status_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "471:                                                                proto_tree *info_tree);",
          "472: static gint dissect_wccp2_extended_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "478: static gint dissect_wccp2_capability_element(tvbuff_t *tvb, int offset, gint length,",
          "479:                                              packet_info *pinfo _U_, proto_tree *info_tree);",
          "480: static gint  dissect_wccp2_mask_value_set_list(tvbuff_t *tvb, int offset,",
          "484: static gint dissect_wccp2_mask_value_set_element(tvbuff_t *tvb, int offset,",
          "490: static gint dissect_wccp2_alternate_mask_value_set_list(tvbuff_t *tvb, int offset,",
          "493: static gint dissect_wccp2_web_cache_value_element(tvbuff_t *tvb, int offset,",
          "495: static void dissect_32_bit_capability_flags(tvbuff_t *tvb, int curr_offset,",
          "496:                                             guint16 capability_val_len, gint ett, const capability_flag *flags,",
          "497:                                             proto_tree *element_tree, proto_item *header,",
          "",
          "[Removed Lines]",
          "411: wccp_address_table wccp_wccp_address_table;",
          "413: static guint dissect_hash_data(tvbuff_t *tvb, int offset,",
          "414:                                proto_tree *wccp_tree);",
          "415: static guint dissect_web_cache_list_entry(tvbuff_t *tvb, int offset,",
          "416:                                           int idx, proto_tree *wccp_tree);",
          "419: static void dissect_wccp2_info(tvbuff_t *tvb, int offset,",
          "420:                                packet_info *pinfo, proto_tree *wccp_tree, guint32 wccp_message_type);",
          "423: static void find_wccp_address_table(tvbuff_t *tvb, int offset,",
          "424:                                     packet_info *pinfo _U_, proto_tree *wccp_tree _U_);",
          "428: static gint dissect_wccp2_security_info(tvbuff_t *tvb, int offset, gint lengreth,",
          "429:                                         packet_info *pinfo _U_, proto_tree *info_tree);",
          "430: static gint dissect_wccp2_service_info(tvbuff_t *tvb, int offset, gint length,",
          "431:                                        packet_info *pinfo, proto_tree *info_tree);",
          "432: static gint  dissect_wccp2r1_address_table_info(tvbuff_t *tvb, int offset,",
          "433:                                                 int length, packet_info *pinfo, proto_tree *info_tree);",
          "434: static gint dissect_wccp2_router_identity_info(tvbuff_t *tvb, int offset, gint length,",
          "435:                                                packet_info *pinfo _U_, proto_tree *info_tree);",
          "436: static gint dissect_wccp2_wc_identity_info(tvbuff_t *tvb, int offset, gint length,",
          "437:                                            packet_info *pinfo _U_, proto_tree *info_tree);",
          "438: static gint dissect_wccp2_router_view_info(tvbuff_t *tvb, int offset, gint length,",
          "439:                                            packet_info *pinfo _U_, proto_tree *info_tree);",
          "440: static gint dissect_wccp2_web_cache_view_info(tvbuff_t *tvb, int offset, gint length,",
          "441:                                               packet_info *pinfo _U_, proto_tree *info_tree);",
          "442: static gint dissect_wccp2_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "443:                                           packet_info *pinfo _U_, proto_tree *info_tree);",
          "445:                                                           packet_info *pinfo, proto_tree *info_tree);",
          "446: static gboolean dissect_wccp2_router_query_info(tvbuff_t *tvb, int offset, gint length,",
          "447:                                                 packet_info *pinfo _U_, proto_tree *info_tree);",
          "448: static gint dissect_wccp2_capability_info(tvbuff_t *tvb, int offset, gint length,",
          "449:                                           packet_info *pinfo _U_, proto_tree *info_tree);",
          "450: static gint dissect_wccp2_alternate_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "451:                                                     packet_info *pinfo, proto_tree *info_tree);",
          "452: static gint dissect_wccp2_hash_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "453:                                                packet_info *pinfo _U_, proto_tree *info_tree);",
          "454: static gint dissect_wccp2_assignment_map(tvbuff_t *tvb, int offset,",
          "455:                                          int length, packet_info *pinfo _U_, proto_tree *info_tree);",
          "456: static gint  dissect_wccp2r1_alt_assignment_map_info(tvbuff_t *tvb, int offset,",
          "457:                                                      int length, packet_info *pinfo, proto_tree *info_tree);",
          "458: static gint  dissect_wccp2_command_extension(tvbuff_t *tvb, int offset,",
          "459:                                              int length, packet_info *pinfo _U_, proto_tree *info_tree);",
          "460: static void dissect_wccp2_router_identity_element(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "461:                                                   proto_tree *tree);",
          "462: static gint dissect_wccp2_web_cache_identity_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "463:                                                      proto_tree *info_tree);",
          "466: static gint dissect_wccp2_mask_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "467:                                                        proto_tree *info_tree) ;",
          "468: static gint dissect_wccp2_alternate_mask_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "469:                                                                  proto_tree *info_tree);",
          "473:                                                            proto_tree *info_tree);",
          "474: static gint dissect_wccp2_assignment_key_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "475:                                                  proto_tree *info_tree);",
          "476: static void dissect_wccp2_router_assignment_element(tvbuff_t *tvb, int offset, gint length,",
          "477:                                                     packet_info *pinfo, proto_tree *info_tree) ;",
          "481:                                                int length, packet_info *pinfo, proto_tree *info_tree);",
          "485:                                                  gint length, int idx, packet_info *pinfo, proto_tree *info_tree);",
          "486: static gint dissect_wccp2_mask_element(tvbuff_t *tvb, int offset,",
          "487:                                        gint length, packet_info *pinfo, proto_tree *info_tree);",
          "488: static gint dissect_wccp2_value_element(tvbuff_t *tvb, int offset,",
          "489:                                         gint length, int idx, packet_info *pinfo, proto_tree *info_tree);",
          "491:                                                         gint length, packet_info *pinfo _U_, proto_tree *info_tree);",
          "492: static gint dissect_wccp2_alternate_mask_value_set_element(tvbuff_t *tvb, int offset, gint length, guint el_index, packet_info *pinfo, proto_tree *info_tree);",
          "494:                                                   gint length,  packet_info *pinfo, proto_tree *info_tree);",
          "",
          "[Added Lines]",
          "455: static gint dissect_wccp2_mask_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "456:                                                        proto_tree *info_tree, wccp_address_table* addr_table);",
          "458:                                                           packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table);",
          "459: static gint  dissect_wccp2r1_address_table_info(tvbuff_t *tvb, int offset,",
          "460:                                                 int length, packet_info *pinfo, proto_tree *info_tree,",
          "461:                                                 wccp_address_table* wccp_wccp_address_table);",
          "467:                                                            proto_tree *info_tree, wccp_address_table* addr_table);",
          "471:                                                int length, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table);",
          "475:                                                  gint length, int idx, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table);",
          "477:                                                         gint length, packet_info *pinfo _U_, proto_tree *info_tree, wccp_address_table* addr_table);",
          "478: static gint dissect_wccp2_alternate_mask_value_set_element(tvbuff_t *tvb, int offset, gint length, guint el_index, packet_info *pinfo,",
          "479:                                                     proto_tree *info_tree, wccp_address_table* addr_table);",
          "481:                                                   gint length,  packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "515: static void",
          "516: find_wccp_address_table(tvbuff_t *tvb, int offset,",
          "518: {",
          "519:   guint16 type;",
          "520:   guint16 item_length;",
          "530:   for (;;) {",
          "531:     if (4 > tvb_reported_length_remaining(tvb, offset)) {",
          "534:       return;",
          "535:     }",
          "542:     type = tvb_get_ntohs(tvb, offset);",
          "543:     item_length = tvb_get_ntohs(tvb, offset+2);",
          "",
          "[Removed Lines]",
          "517:                         packet_info *pinfo, proto_tree *wccp_tree _U_)",
          "523:   wccp_wccp_address_table.in_use = FALSE;",
          "524:   wccp_wccp_address_table.family = -1;",
          "525:   wccp_wccp_address_table.version = -1;",
          "526:   wccp_wccp_address_table.table_length = 0;",
          "527:   wccp_wccp_address_table.table_ipv4 = (guint32 *) NULL;",
          "528:   wccp_wccp_address_table.table_ipv6 = (struct e_in6_addr *)NULL;",
          "536:     if (4 > tvb_captured_length_remaining(tvb, offset)) {",
          "538:          so we've no way of determining whether there's an address table",
          "540:       return;",
          "541:     }",
          "",
          "[Added Lines]",
          "504:                         packet_info *pinfo, proto_tree *wccp_tree _U_, wccp_address_table* wccp_wccp_address_table)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "548:       return;",
          "549:     }",
          "557:     if (type == WCCP2r1_ADDRESS_TABLE)",
          "558:       {",
          "561:         return;",
          "562:       }",
          "",
          "[Removed Lines]",
          "550:     if ((item_length + 4) > tvb_captured_length_remaining(tvb, offset)) {",
          "552:            so we've no way of determining whether there's an address table",
          "554:         return;",
          "555:       }",
          "559:         dissect_wccp2r1_address_table_info(tvb, offset+4, item_length, pinfo, NULL);",
          "",
          "[Added Lines]",
          "526:         dissect_wccp2r1_address_table_info(tvb, offset+4, item_length, pinfo, NULL, wccp_wccp_address_table);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "582:    we need to fix that",
          "586: {",
          "589:     {",
          "",
          "[Removed Lines]",
          "585: static void wccp_fmt_ipadddress(gchar *buffer, guint32 host_addr)",
          "588:   if (! wccp_wccp_address_table.in_use)",
          "",
          "[Added Lines]",
          "552: static void wccp_fmt_ipaddress(gchar *buffer, guint32 host_addr, wccp_address_table* addr_table)",
          "555:   if (!addr_table->in_use)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "606:       }",
          "610:       case 1:",
          "",
          "[Removed Lines]",
          "609:       switch (wccp_wccp_address_table.family) {",
          "",
          "[Added Lines]",
          "576:       switch (addr_table->family) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "616:           return;",
          "617:         }",
          "620:           g_snprintf(buffer, ITEM_LABEL_LENGTH, \"INVALID IPv4 index: %d > %d\",",
          "622:           return;",
          "623:         }",
          "628:           return;",
          "629:         }",
          "630:         else {",
          "",
          "[Removed Lines]",
          "619:         if (addr_index > wccp_wccp_address_table.table_length) {",
          "621:                      addr_index, wccp_wccp_address_table.table_length);",
          "626:         if (wccp_wccp_address_table.table_ipv4 != NULL) {",
          "627:           ip_to_str_buf( (guint8 *) &(wccp_wccp_address_table.table_ipv4[addr_index-1]), buffer, ITEM_LABEL_LENGTH);",
          "",
          "[Added Lines]",
          "586:         if (addr_index > addr_table->table_length) {",
          "588:                      addr_index, addr_table->table_length);",
          "593:         if (addr_table->table_ipv4 != NULL) {",
          "594:           ip_to_str_buf( (guint8 *) &(addr_table->table_ipv4[addr_index-1]), buffer, ITEM_LABEL_LENGTH);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "641:         }",
          "645:           g_snprintf(buffer, ITEM_LABEL_LENGTH, \"INVALID IPv6 index: %d > %d\",",
          "647:           return;",
          "648:         }",
          "653:           return;",
          "654:         }",
          "655:         else {",
          "",
          "[Removed Lines]",
          "644:         if (addr_index > wccp_wccp_address_table.table_length) {",
          "646:                      addr_index, wccp_wccp_address_table.table_length);",
          "651:         if (wccp_wccp_address_table.table_ipv6 != NULL) {",
          "652:           ip6_to_str_buf(&(wccp_wccp_address_table.table_ipv6[addr_index-1]), buffer);",
          "",
          "[Added Lines]",
          "611:         if (addr_index > addr_table->table_length) {",
          "613:                      addr_index, addr_table->table_length);",
          "618:         if (addr_table->table_ipv6 != NULL) {",
          "619:           ip6_to_str_buf(&(addr_table->table_ipv6[addr_index-1]), buffer);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "664:     }",
          "665: }",
          "672: {",
          "816: }",
          "818: static guint",
          "",
          "[Removed Lines]",
          "668: #define WCCP_IP_MAX_LENGTH (MAX_IP_STR_LEN > 46 ? MAX_IP_STR_LEN : 46)",
          "671: static const gchar * decode_wccp_encoded_address(tvbuff_t *tvb, int offset, packet_info *pinfo _U_, proto_tree *info_tree _U_)",
          "673:   gchar *buffer;",
          "674:   guint32 host_addr;",
          "676:   buffer= (char *) wmem_alloc(wmem_packet_scope(), WCCP_IP_MAX_LENGTH+1);",
          "677:   host_addr = tvb_get_ntohl(tvb,offset);",
          "679:   wccp_fmt_ipadddress(buffer, host_addr);",
          "680:   return buffer;",
          "681: }",
          "683: static int",
          "684: dissect_wccp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "685: {",
          "686:   int offset = 0;",
          "687:   proto_tree *wccp_tree = NULL;",
          "688:   proto_item *wccp_tree_item;",
          "689:   guint32 wccp_message_type;",
          "690:   guint16 length;",
          "691:   gint wccp2_length;",
          "692:   proto_item *length_item;",
          "693:   guint32 cache_count;",
          "694:   guint32 ipaddr;",
          "695:   guint i;",
          "696:   guint8 bucket;",
          "698:   wccp_message_type = tvb_get_ntohl(tvb, offset);",
          "701:   if (try_val_to_str(wccp_message_type, wccp_type_vals) == NULL)",
          "702:     return 0;",
          "704:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"WCCP\");",
          "706:   col_add_str(pinfo->cinfo, COL_INFO, val_to_str(wccp_message_type,",
          "707:                                                    wccp_type_vals, \"Unknown WCCP message (%u)\"));",
          "709:   wccp_tree_item = proto_tree_add_item(tree, proto_wccp, tvb, offset, -1, ENC_NA);",
          "710:   wccp_tree = proto_item_add_subtree(wccp_tree_item, ett_wccp);",
          "712:   proto_tree_add_uint(wccp_tree, hf_wccp_message_type, tvb, offset, 4, wccp_message_type);",
          "713:   offset += 4;",
          "715:   switch (wccp_message_type) {",
          "717:     case WCCP_HERE_I_AM:",
          "718:       proto_tree_add_item(wccp_tree, hf_wccp_version, tvb,",
          "719:                           offset, 4, ENC_BIG_ENDIAN);",
          "720:       offset += 4;",
          "721:       offset = dissect_hash_data(tvb, offset, wccp_tree);",
          "722:       proto_tree_add_item(wccp_tree, hf_recvd_id, tvb, offset,",
          "723:                           4, ENC_BIG_ENDIAN);",
          "725:       break;",
          "727:     case WCCP_I_SEE_YOU:",
          "728:       proto_tree_add_item(wccp_tree, hf_wccp_version, tvb,",
          "729:                           offset, 4, ENC_BIG_ENDIAN);",
          "730:       offset += 4;",
          "731:       proto_tree_add_item(wccp_tree, hf_change_num, tvb, offset,",
          "732:                           4, ENC_BIG_ENDIAN);",
          "733:       offset += 4;",
          "734:       proto_tree_add_item(wccp_tree, hf_recvd_id, tvb, offset,",
          "735:                           4, ENC_BIG_ENDIAN);",
          "736:       offset += 4;",
          "737:       cache_count = tvb_get_ntohl(tvb, offset);",
          "738:       proto_tree_add_uint(wccp_tree, hf_wc_num, tvb, offset, 4, cache_count);",
          "739:       offset += 4;",
          "740:       for (i = 0; i < cache_count; i++) {",
          "741:         offset = dissect_web_cache_list_entry(tvb, offset, i,",
          "742:                                               wccp_tree);",
          "743:       }",
          "744:       break;",
          "746:     case WCCP_ASSIGN_BUCKET:",
          "755:       proto_tree_add_item(wccp_tree, hf_recvd_id, tvb, offset,",
          "756:                           4, ENC_BIG_ENDIAN);",
          "757:       offset += 4;",
          "758:       cache_count = tvb_get_ntohl(tvb, offset);",
          "759:       proto_tree_add_uint(wccp_tree, hf_wc_num, tvb, offset, 4, cache_count);",
          "760:       offset += 4;",
          "761:       for (i = 0; i < cache_count; i++) {",
          "762:         ipaddr = tvb_get_ipv4(tvb, offset);",
          "763:         proto_tree_add_ipv4_format(wccp_tree,",
          "764:                                    hf_cache_ip, tvb, offset, 4,",
          "765:                                    ipaddr,",
          "766:                                    \"Web Cache %d IP Address: %s\", i,",
          "767:                                    tvb_ip_to_str(tvb, offset));",
          "768:         offset += 4;",
          "769:       }",
          "771:       for (i = 0; i < 256; i++) {",
          "772:           bucket = tvb_get_guint8(tvb, offset);",
          "773:           if (bucket == 0xff) {",
          "774:               proto_tree_add_uint_format(wccp_tree, hf_bucket, tvb, offset, 1,",
          "775:                   bucket, \"Bucket %d: Unassigned\", i);",
          "776:           } else {",
          "777:               proto_tree_add_uint_format(wccp_tree, hf_bucket, tvb, offset, 1,",
          "778:                     bucket, \"Bucket %d: %d\", i, bucket);",
          "779:           }",
          "780:         offset++;",
          "781:       }",
          "782:       break;",
          "784:     case WCCP2_HERE_I_AM:",
          "785:     case WCCP2_I_SEE_YOU:",
          "786:     case WCCP2_REMOVAL_QUERY:",
          "787:     case WCCP2_REDIRECT_ASSIGN:",
          "791:       proto_tree_add_item(wccp_tree, hf_message_header_version, tvb, offset, 2,",
          "792:                           ENC_BIG_ENDIAN);",
          "793:       offset += 2;",
          "795:       length = tvb_get_ntohs(tvb, offset);",
          "796:       length_item = proto_tree_add_uint(wccp_tree, hf_message_header_length, tvb, offset, 2, length);",
          "797:       offset += 2;",
          "801:       wccp2_length = tvb_reported_length_remaining(tvb, offset);",
          "802:       if (length > (guint)wccp2_length) {",
          "803:         expert_add_info_format(pinfo, length_item, &ei_wccp_length_bad,",
          "804:                                \"The length as specified by the length field is bigger than the length of the packet\");",
          "805:         length = wccp2_length - offset;",
          "806:       } else {",
          "808:         tvb_set_reported_length(tvb, offset + length);",
          "809:       }",
          "810:       proto_item_set_len(wccp_tree_item, offset + length);",
          "811:       dissect_wccp2_info(tvb, offset, pinfo, wccp_tree, wccp_message_type);",
          "812:       break;",
          "813:   }",
          "815:   return tvb_captured_length(tvb);",
          "",
          "[Added Lines]",
          "634: static proto_item* wccp_add_ipaddress_item(proto_tree* tree, int hf_index, int hf_ipv4, int hf_ipv6, tvbuff_t *tvb,",
          "635:                                     int offset, gint length, wccp_address_table* addr_table)",
          "637:     guint32 host_addr;",
          "638:     struct e_in6_addr ipv6_zero;",
          "639:     guint16 reserv, addr_index;",
          "642:     if (! addr_table->in_use)",
          "643:       return proto_tree_add_item(tree, hf_ipv4, tvb, offset, length, ENC_BIG_ENDIAN);",
          "645:     host_addr = tvb_get_ntohl(tvb, offset);",
          "648:     reserv = (host_addr & 0xFF00) >> 16;",
          "649:     addr_index  = (host_addr & 0x00FF);",
          "651:     memset(&ipv6_zero, 0, sizeof(ipv6_zero));",
          "653:     if (reserv != 0)",
          "654:       return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr, \"INVALID: reserved part non zero\");",
          "657:     switch (addr_table->family) {",
          "658:     case 1:",
          "662:         if (addr_index == 0) {",
          "663:           return proto_tree_add_item(tree, hf_ipv4, tvb, offset, length, ENC_LITTLE_ENDIAN);",
          "664:         }",
          "666:         if (addr_index > addr_table->table_length) {",
          "667:           return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr,",
          "668:                      \"INVALID IPv4 index: %d > %d\", addr_index, addr_table->table_length);",
          "669:         }",
          "672:         if (addr_table->table_ipv4 != NULL) {",
          "673:           return proto_tree_add_ipv4(tree, hf_ipv4, tvb, offset, length, addr_table->table_ipv4[addr_index-1]);",
          "674:         }",
          "676:         return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr, \"INVALID: IPv4 table empty!\");",
          "678:     case 2:",
          "681:         if (addr_index == 0) {",
          "682:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, ipv6_zero.bytes);",
          "683:         }",
          "686:         if (addr_index > addr_table->table_length) {",
          "687:           return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr,",
          "688:                         \"INVALID IPv6 index: %d > %d\", addr_index, addr_table->table_length);",
          "689:         }",
          "692:         if (addr_table->table_ipv6 != NULL) {",
          "693:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, addr_table->table_ipv6[addr_index-1].bytes);",
          "694:         }",
          "696:         return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr,",
          "697:                         \"INVALID IPv6 table empty!\");",
          "698:     }",
          "700:     return proto_tree_add_ipv4_format(tree, hf_index, tvb, offset, length, host_addr, \"INVALID IP family\");",
          "701: }",
          "703: #define WCCP_IP_MAX_LENGTH (MAX_IP_STR_LEN > 46 ? MAX_IP_STR_LEN : 46)",
          "706: static const gchar * decode_wccp_encoded_address(tvbuff_t *tvb, int offset, packet_info *pinfo _U_,",
          "707:                         proto_tree *info_tree _U_, wccp_address_table* addr_table)",
          "708: {",
          "709:   gchar *buffer;",
          "710:   guint32 host_addr;",
          "712:   buffer= (char *) wmem_alloc(wmem_packet_scope(), WCCP_IP_MAX_LENGTH+1);",
          "713:   host_addr = tvb_get_ntohl(tvb,offset);",
          "715:   wccp_fmt_ipaddress(buffer, host_addr, addr_table);",
          "716:   return buffer;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "878:   return(start);",
          "879: }",
          "1184: static gint",
          "1185: dissect_wccp2_security_info(tvbuff_t *tvb, int offset, gint length,",
          "1187: {",
          "1188:   guint32 security_option;",
          "",
          "[Removed Lines]",
          "881: static void",
          "882: dissect_wccp2_info(tvbuff_t *tvb, int offset,",
          "883:                    packet_info *pinfo, proto_tree *wccp_tree,",
          "884:                    guint32 message_type)",
          "885: {",
          "886:   int length_remaining;",
          "887:   guint16 type;",
          "888:   guint16 item_length;",
          "889:   proto_item *tf;",
          "890:   proto_tree *info_tree;",
          "891:   gint ett;",
          "892:   gint (*dissector)(tvbuff_t *, int, int, packet_info *, proto_tree *);",
          "895:   gboolean wccp2_security_info;",
          "896:   gboolean wccp2_service_info;",
          "897:   gboolean wccp2_router_id_info;",
          "898:   gboolean wccp2_wc_id_info;",
          "899:   gboolean wccp2_rtr_view_info;",
          "900:   gboolean wccp2_wc_view_info;",
          "901:   gboolean wccp2_redirect_assignment;",
          "902:   gboolean wccp2_query_info;",
          "903:   gboolean wccp2_capabilities_info;",
          "904:   gboolean wccp2_alt_assignment;",
          "905:   gboolean wccp2_assign_map;",
          "906:   gboolean wccp2_command_extension;",
          "907:   gboolean wccp2r1_alt_assignment_map;",
          "909:   wccp2_security_info=FALSE;",
          "910:   wccp2_service_info=FALSE;",
          "911:   wccp2_router_id_info=FALSE;",
          "912:   wccp2_wc_id_info=FALSE;",
          "913:   wccp2_rtr_view_info=FALSE;",
          "914:   wccp2_wc_view_info=FALSE;",
          "915:   wccp2_redirect_assignment=FALSE;",
          "916:   wccp2_query_info=FALSE;",
          "917:   wccp2_capabilities_info=FALSE;",
          "918:   wccp2_alt_assignment=FALSE;",
          "919:   wccp2_assign_map=FALSE;",
          "920:   wccp2_command_extension=FALSE;",
          "921:   wccp2r1_alt_assignment_map=FALSE;",
          "924:      compnent, otherwise we cannot print the IP's.",
          "926:   find_wccp_address_table(tvb,offset,pinfo,wccp_tree);",
          "928:   while ((length_remaining = tvb_reported_length_remaining(tvb, offset)) > 0) {",
          "929:     type = tvb_get_ntohs(tvb, offset);",
          "930:     switch (type) {",
          "932:     case WCCP2_SECURITY_INFO:",
          "933:       wccp2_security_info=TRUE;",
          "934:       ett = ett_security_info;",
          "935:       dissector = dissect_wccp2_security_info;",
          "936:       break;",
          "938:     case WCCP2_SERVICE_INFO:",
          "939:       wccp2_service_info=TRUE;",
          "940:       ett = ett_service_info;",
          "941:       dissector = dissect_wccp2_service_info;",
          "942:       break;",
          "944:     case WCCP2_ROUTER_ID_INFO:",
          "945:       wccp2_router_id_info=TRUE;",
          "946:       ett = ett_router_identity_info;",
          "947:       dissector = dissect_wccp2_router_identity_info;",
          "948:       break;",
          "950:     case WCCP2_WC_ID_INFO:",
          "951:       wccp2_wc_id_info=TRUE;",
          "952:       ett = ett_wc_identity_info;",
          "953:       dissector = dissect_wccp2_wc_identity_info;",
          "954:       break;",
          "956:     case WCCP2_RTR_VIEW_INFO:",
          "957:       wccp2_rtr_view_info=TRUE;",
          "958:       ett = ett_router_view_info;",
          "959:       dissector = dissect_wccp2_router_view_info;",
          "960:       break;",
          "962:     case WCCP2_WC_VIEW_INFO:",
          "963:       wccp2_wc_view_info=TRUE;",
          "964:       ett = ett_wc_view_info;",
          "965:       dissector = dissect_wccp2_web_cache_view_info;",
          "966:       break;",
          "968:     case WCCP2_REDIRECT_ASSIGNMENT:",
          "969:       wccp2_redirect_assignment=TRUE;",
          "970:       ett = ett_router_assignment_info;",
          "971:       dissector = dissect_wccp2_assignment_info;",
          "972:       break;",
          "974:     case WCCP2_QUERY_INFO:",
          "975:       wccp2_query_info=TRUE;",
          "976:       ett = ett_query_info;",
          "977:       dissector = dissect_wccp2_router_query_info;",
          "978:       break;",
          "980:     case WCCP2_CAPABILITIES_INFO:",
          "981:       wccp2_capabilities_info=TRUE;",
          "982:       ett = ett_capabilities_info;",
          "983:       dissector = dissect_wccp2_capability_info;",
          "984:       break;",
          "986:     case WCCP2_ALT_ASSIGNMENT:",
          "987:       wccp2_alt_assignment=TRUE;",
          "988:       ett = ett_alt_assignment_info;",
          "989:       dissector = dissect_wccp2_alternate_assignment_info;",
          "990:       break;",
          "992:     case WCCP2r1_ALT_ASSIGNMENT_MAP:",
          "993:       wccp2r1_alt_assignment_map=TRUE;",
          "994:       ett = ett_alt_assignment_map;",
          "995:       dissector = dissect_wccp2r1_alt_assignment_map_info;",
          "996:       break;",
          "998:     case WCCP2r1_ADDRESS_TABLE:",
          "999:       ett = ett_address_table;",
          "1000:       dissector = dissect_wccp2r1_address_table_info;",
          "1001:       break;",
          "1003:     case WCCP2_ASSIGN_MAP:",
          "1004:       wccp2_assign_map=TRUE;",
          "1005:       ett = ett_assignment_map;",
          "1006:       dissector = dissect_wccp2_assignment_map;",
          "1007:       break;",
          "1008:     case WCCP2_COMMAND_EXTENSION:",
          "1009:       wccp2_command_extension=TRUE;",
          "1010:       ett = ett_command_extension;",
          "1011:       dissector = dissect_wccp2_command_extension;",
          "1012:       break;",
          "1014:     default:",
          "1015:       ett = ett_unknown_info;",
          "1016:       dissector = NULL;",
          "1017:       break;",
          "1018:     }",
          "1020:     info_tree = proto_tree_add_subtree(wccp_tree, tvb, offset, -1, ett, &tf,",
          "1021:                              val_to_str(type, info_type_vals, \"Unknown info type (%u)\"));",
          "1023:     proto_tree_add_item(info_tree, hf_item_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1025:     item_length = tvb_get_ntohs(tvb, offset+2);",
          "1026:     proto_tree_add_item(info_tree, hf_item_length, tvb, offset+2, 2, ENC_BIG_ENDIAN);",
          "1028:     offset += 4;",
          "1030:     if (dissector != NULL) {",
          "1031:       gint remaining_item_length = (*dissector)(tvb, offset, item_length, pinfo, info_tree);",
          "1034:       if (remaining_item_length > 0)",
          "1035:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1036:                                \"The item is %d bytes too long\",",
          "1037:                                remaining_item_length);",
          "1040:       if (remaining_item_length < 0)",
          "1041:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1042:                                \"The item is %d bytes too short\",",
          "1043:                                -remaining_item_length);",
          "1046:     } else {",
          "1047:       proto_tree_add_item(info_tree, hf_item_data, tvb, offset, item_length, ENC_NA);",
          "1048:     }",
          "1050:     offset += item_length;",
          "1051:     proto_item_set_end(tf, tvb, offset);",
          "1052:   }",
          "1057:   switch (message_type) {",
          "1058:   case WCCP2_HERE_I_AM:",
          "1059:     if (!wccp2_security_info)",
          "1060:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "1061:     if (!wccp2_service_info)",
          "1062:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "1063:     if (wccp2_router_id_info)",
          "1064:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_router_id_info);",
          "1065:     if (!wccp2_wc_id_info)",
          "1066:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_wc_id_info);",
          "1067:     if (wccp2_rtr_view_info)",
          "1068:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_rtr_view_info);",
          "1069:     if (!wccp2_wc_view_info)",
          "1070:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_wc_view_info);",
          "1071:     if (wccp2_redirect_assignment)",
          "1072:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_redirect_assignment);",
          "1073:     if (wccp2_query_info)",
          "1074:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_query_info);",
          "1075:     if (wccp2_alt_assignment)",
          "1076:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment);",
          "1077:     if (wccp2_assign_map)",
          "1078:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_assign_map);",
          "1079:     if (wccp2r1_alt_assignment_map)",
          "1080:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment_map);",
          "1081:     break;",
          "1082:   case WCCP2_I_SEE_YOU:",
          "1083:     if (!wccp2_security_info)",
          "1084:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "1085:     if (!wccp2_service_info)",
          "1086:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "1087:     if (!wccp2_router_id_info)",
          "1088:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_router_id_info);",
          "1089:     if (wccp2_wc_id_info)",
          "1090:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_id_info);",
          "1091:     if (!wccp2_rtr_view_info)",
          "1092:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_rtr_view_info);",
          "1093:     if (wccp2_wc_view_info)",
          "1094:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_view_info);",
          "1095:     if (wccp2_redirect_assignment)",
          "1096:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_redirect_assignment);",
          "1097:     if (wccp2_query_info)",
          "1098:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_query_info);",
          "1099:     if (wccp2r1_alt_assignment_map)",
          "1100:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment_map);",
          "1101:     break;",
          "1103:   case WCCP2_REMOVAL_QUERY:",
          "1104:     if (!wccp2_security_info)",
          "1105:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "1106:     if (!wccp2_service_info)",
          "1107:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "1108:     if (wccp2_router_id_info)",
          "1109:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_router_id_info);",
          "1110:     if (wccp2_wc_id_info)",
          "1111:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_id_info);",
          "1112:     if (wccp2_rtr_view_info)",
          "1113:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_rtr_view_info);",
          "1114:     if (wccp2_wc_view_info)",
          "1115:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_view_info);",
          "1116:     if (wccp2_redirect_assignment)",
          "1117:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_redirect_assignment);",
          "1118:     if (!wccp2_query_info)",
          "1119:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_query_info);",
          "1120:     if (wccp2_capabilities_info)",
          "1121:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_capabilities_info);",
          "1122:     if (wccp2_alt_assignment)",
          "1123:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment);",
          "1124:     if (wccp2_assign_map)",
          "1125:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_assign_map);",
          "1126:     if (wccp2_command_extension)",
          "1127:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_command_extension);",
          "1128:     if (wccp2r1_alt_assignment_map)",
          "1129:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment_map);",
          "1130:     break;",
          "1132:   case WCCP2_REDIRECT_ASSIGN:",
          "1133:     if (!wccp2_security_info)",
          "1134:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "1135:     if (!wccp2_service_info)",
          "1136:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "1137:     if (wccp2_router_id_info)",
          "1138:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_router_id_info);",
          "1139:     if (wccp2_wc_id_info)",
          "1140:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_id_info);",
          "1141:     if (wccp2_rtr_view_info)",
          "1142:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_rtr_view_info);",
          "1143:     if (wccp2_wc_view_info)",
          "1144:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_view_info);",
          "1145:     if (wccp2_query_info)",
          "1146:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_query_info);",
          "1147:     if (wccp2_capabilities_info)",
          "1148:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_capabilities_info);",
          "1149:     if (! (wccp2_assign_map || wccp2r1_alt_assignment_map || wccp2_alt_assignment || wccp2_redirect_assignment))",
          "1150:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_assignment);",
          "1151:     if (wccp2_command_extension)",
          "1152:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_command_extension);",
          "1153:     break;",
          "1154:   }",
          "1155: }",
          "1158:    so we have a few macros to use",
          "1161: #define EAT(x) {length -= x; offset += x;}",
          "1163: #define EAT_AND_CHECK(x,next) {length -= x; offset += x; if (length < next) return length - next;}",
          "1165: #define NOTE_EATEN_LENGTH(new_length) {if (new_length<0) return new_length;  offset += length-new_length; length = new_length; }",
          "1172: #define WCCP2_NO_SECURITY               0",
          "1173: #define WCCP2_MD5_SECURITY              1",
          "1175: #define SECURITY_INFO_LEN               4",
          "1177: const value_string security_option_vals[] = {",
          "1178:   { WCCP2_NO_SECURITY, \"None\" },",
          "1179:   { WCCP2_MD5_SECURITY, \"MD5\" },",
          "1180:   { 0,    NULL }",
          "1181: };",
          "1186:                             packet_info *pinfo _U_, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "784:    so we have a few macros to use",
          "787: #define EAT(x) {length -= x; offset += x;}",
          "789: #define EAT_AND_CHECK(x,next) {length -= x; offset += x; if (length < next) return length - next;}",
          "791: #define NOTE_EATEN_LENGTH(new_length) {if (new_length<0) return new_length;  offset += length-new_length; length = new_length; }",
          "798: #define WCCP2_NO_SECURITY               0",
          "799: #define WCCP2_MD5_SECURITY              1",
          "801: #define SECURITY_INFO_LEN               4",
          "803: const value_string security_option_vals[] = {",
          "804:   { WCCP2_NO_SECURITY, \"None\" },",
          "805:   { WCCP2_MD5_SECURITY, \"MD5\" },",
          "806:   { 0,    NULL }",
          "807: };",
          "812:                             packet_info *pinfo _U_, proto_tree *info_tree, wccp_address_table* addr_table _U_)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1236: static gint",
          "1237: dissect_wccp2_service_info(tvbuff_t *tvb, int offset, gint length,",
          "1239: {",
          "1240:   guint8 service_type;",
          "1241:   guint32 flags;",
          "",
          "[Removed Lines]",
          "1238:                            packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "864:                            packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table _U_)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1333: static void",
          "1334: dissect_wccp2_router_identity_element(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "1336: {",
          "1337:   proto_item *tf;",
          "1341:   tf = proto_tree_add_item(tree, hf_router_identity_receive_id, tvb, offset+4, 4, ENC_BIG_ENDIAN);",
          "1343:   if (tvb_get_ntohl(tvb, offset + 4) == 0)",
          "",
          "[Removed Lines]",
          "1335:                                       proto_tree *tree)",
          "1340:   proto_tree_add_item(tree, hf_router_identity_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "961:                                       proto_tree *tree, wccp_address_table* addr_table)",
          "966:   wccp_add_ipaddress_item(tree, hf_router_identity_ip_index, hf_router_identity_ipv4, hf_router_identity_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1350: static gint",
          "1351: dissect_wccp2_router_identity_info(tvbuff_t *tvb, int offset, gint length,",
          "1353: {",
          "1354:   guint32 n_received_from;",
          "1355:   guint i;",
          "",
          "[Removed Lines]",
          "1352:                                    packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "978:                                    packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1360:     return length -  ROUTER_ID_INFO_MIN_LEN;",
          "1365:   element_tree = proto_item_add_subtree(te,ett_wc_view_info_router_element);",
          "1368:   EAT_AND_CHECK(8,4);",
          "1372:   EAT_AND_CHECK(4,4);",
          "1374:   n_received_from = tvb_get_ntohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "1363:   te = proto_tree_add_item(info_tree, hf_router_identity_router_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1367:   dissect_wccp2_router_identity_element(tvb,offset,pinfo,element_tree);",
          "1371:   proto_tree_add_item(info_tree, hf_router_identity_send_to_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "989:   te = wccp_add_ipaddress_item(info_tree, hf_router_identity_router_ip_index, hf_router_identity_router_ipv4, hf_router_identity_router_ipv6, tvb, offset, 4, addr_table);",
          "993:   dissect_wccp2_router_identity_element(tvb,offset,pinfo,element_tree, addr_table);",
          "996:   wccp_add_ipaddress_item(info_tree, hf_router_identity_send_to_ip_index, hf_router_identity_send_to_ipv4, hf_router_identity_send_to_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1380:       return length-4*(i-n_received_from);",
          "1384:     EAT(4);",
          "1385:   }",
          "",
          "[Removed Lines]",
          "1383:     proto_tree_add_item(info_tree, hf_router_identity_received_from_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1008:     wccp_add_ipaddress_item(info_tree, hf_router_identity_received_from_ip_index, hf_router_identity_received_from_ipv4, hf_router_identity_received_from_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1393: static gint",
          "1394: dissect_wccp2_web_cache_identity_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "1396: {",
          "1397:   proto_item *tf;",
          "1398:   guint16 flags;",
          "",
          "[Removed Lines]",
          "1395:                                          proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1020:                                          proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1409:   if (length < ROUTER_WC_ID_ELEMENT_MIN_LEN)",
          "1410:     return length - ROUTER_WC_ID_ELEMENT_MIN_LEN;",
          "1413:   EAT_AND_CHECK(4,2);",
          "1415:   tf = proto_tree_add_item(info_tree, hf_web_cache_identity_hash_rev, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1412:   proto_tree_add_item(info_tree, hf_web_cache_identity_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1037:   wccp_add_ipaddress_item(info_tree, hf_web_cache_identity_index, hf_web_cache_identity_ipv4, hf_web_cache_identity_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1428:   case WCCP2_WEB_CACHE_ASSIGNMENT_DATA_TYPE_HASH:",
          "1429:     return dissect_wccp2_hash_assignment_data_element(tvb,offset,length,pinfo,info_tree);",
          "1430:   case WCCP2_WEB_CACHE_ASSIGNMENT_DATA_TYPE_MASK:",
          "1433:   case WCCP2_WEB_CACHE_ASSIGNMENT_DATA_TYPE_NOT_PRESENT:",
          "1434:     proto_tree_add_item(info_tree, hf_assignment_no_data, tvb, offset, 2, ENC_NA);",
          "1435:     return length;",
          "1436:     break;",
          "1437:   case WCCP2_WEB_CACHE_ASSIGNMENT_DATA_TYPE_EXTENDED:",
          "1439:   }",
          "1440:   return length;",
          "1441: }",
          "",
          "[Removed Lines]",
          "1431:     return dissect_wccp2_mask_assignment_data_element(tvb,offset,length,pinfo,info_tree);",
          "1438:     return dissect_wccp2_extended_assignment_data_element(tvb,offset,length,pinfo,info_tree);",
          "",
          "[Added Lines]",
          "1056:     return dissect_wccp2_mask_assignment_data_element(tvb,offset,length,pinfo,info_tree, addr_table);",
          "1063:     return dissect_wccp2_extended_assignment_data_element(tvb,offset,length,pinfo,info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1444: static gint",
          "1445: dissect_wccp2_wc_identity_info(tvbuff_t *tvb, int offset, gint length,",
          "1447: {",
          "1448:   proto_item *te;",
          "1449:   proto_tree *element_tree;",
          "1454:   element_tree = proto_item_add_subtree(te, ett_wc_identity_element);",
          "1455:   return dissect_wccp2_web_cache_identity_element(tvb, offset,length, pinfo,",
          "1457: }",
          "1460: static gint",
          "1461: dissect_wccp2_assignment_key_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo _U_,",
          "1463: {",
          "1464:   if (length < 8)",
          "1465:     return length -8;",
          "1470:   EAT_AND_CHECK(4,4);",
          "1471:   proto_tree_add_item(info_tree, hf_assignment_key_change_num, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1446:                                packet_info *pinfo _U_, proto_tree *info_tree)",
          "1452:   te = proto_tree_add_item(info_tree, hf_wc_identity_ip_address, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1456:                                                   element_tree);",
          "1462:                                      proto_tree *info_tree)",
          "1468:   proto_tree_add_item(info_tree, hf_assignment_key_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1071:                                packet_info *pinfo _U_, proto_tree *info_tree, wccp_address_table* addr_table)",
          "1076:   te = wccp_add_ipaddress_item(info_tree, hf_wc_identity_ip_address_index, hf_wc_identity_ip_address_ipv4, hf_wc_identity_ip_address_ipv6,",
          "1077:                                 tvb, offset, 4, addr_table);",
          "1081:                                                   element_tree, addr_table);",
          "1087:                                      proto_tree *info_tree, wccp_address_table* addr_table)",
          "1093:   wccp_add_ipaddress_item(info_tree, hf_assignment_key_ip_index, hf_assignment_key_ipv4, hf_assignment_key_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1481: static gint",
          "1482: dissect_wccp2_router_view_info(tvbuff_t *tvb, int offset, gint length,",
          "1484: {",
          "1485:   guint32 n_routers;",
          "1486:   guint32 n_web_caches;",
          "",
          "[Removed Lines]",
          "1483:                                packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1108:                                packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1495:   proto_tree_add_item(info_tree, hf_router_view_member_change_num, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1496:   EAT(4);",
          "1499:   NOTE_EATEN_LENGTH(new_length);",
          "1501:   n_routers = tvb_get_ntohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "1498:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo, info_tree);",
          "",
          "[Added Lines]",
          "1123:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo, info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1506:     if (length < 4)",
          "1507:       return length - (n_routers-i)*4 - 4;",
          "1510:     EAT(4);",
          "1511:   }",
          "",
          "[Removed Lines]",
          "1509:     proto_tree_add_item(info_tree, hf_router_view_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1134:     wccp_add_ipaddress_item(info_tree, hf_router_view_ip_index, hf_router_view_ipv4, hf_router_view_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1524:     if (length < 4)",
          "1525:       return length - 4*(n_web_caches-i);",
          "1529:     element_tree = proto_item_add_subtree(te, ett_wc_identity_element);",
          "1530:     length = dissect_wccp2_web_cache_identity_element(tvb,",
          "1531:                                                       offset, length, pinfo,",
          "1533:     if (length < 0)",
          "1534:       return length;",
          "",
          "[Removed Lines]",
          "1527:     te = proto_tree_add_item(info_tree, hf_router_query_info_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1532:                                                       element_tree);",
          "",
          "[Added Lines]",
          "1152:     te = wccp_add_ipaddress_item(info_tree, hf_router_query_info_ip_index, hf_router_query_info_ipv4, hf_router_query_info_ipv6, tvb, offset, 4, addr_table);",
          "1157:                                                       element_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1545: static gint",
          "1546: dissect_wccp2_web_cache_view_info(tvbuff_t *tvb, int offset, gint length,",
          "1548: {",
          "1549:   guint32 n_routers;",
          "1550:   guint32 n_web_caches;",
          "",
          "[Removed Lines]",
          "1547:                                   packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1172:                                   packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1568:     if (length < 8)",
          "1569:       return length -8 * (n_routers-i) - 4;",
          "1573:     proto_item_set_len(te, 8);",
          "1575:     element_tree = proto_item_add_subtree(te,ett_wc_view_info_router_element);",
          "1577:     EAT(8);",
          "1578:   }",
          "",
          "[Removed Lines]",
          "1571:     te = proto_tree_add_item(info_tree, hf_wc_view_info_router_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1576:     dissect_wccp2_router_identity_element(tvb, offset, pinfo, element_tree);",
          "",
          "[Added Lines]",
          "1196:     te = wccp_add_ipaddress_item(info_tree, hf_wc_view_info_router_ip_index, hf_wc_view_info_router_ipv4, hf_wc_view_info_router_ipv6, tvb, offset, 4, addr_table);",
          "1201:     dissect_wccp2_router_identity_element(tvb, offset, pinfo, element_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1588:     if (length < 4)",
          "1589:       return length - 4*(n_web_caches-i);",
          "1592:     EAT(4);",
          "1593:   }",
          "1594:   return length;",
          "",
          "[Removed Lines]",
          "1591:     proto_tree_add_item(info_tree, hf_wc_view_info_wc_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1216:     wccp_add_ipaddress_item(info_tree, hf_wc_view_info_wc_ip_index, hf_wc_view_info_wc_ipv4, hf_wc_view_info_wc_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1598: static void",
          "1599: dissect_wccp2_router_assignment_element(tvbuff_t *tvb, int offset,",
          "1601: {",
          "1603:   EAT(8);",
          "1604:   proto_tree_add_item(info_tree, hf_router_assignment_element_change_num, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1605:   EAT(4);",
          "",
          "[Removed Lines]",
          "1600:                                         gint length, packet_info *pinfo, proto_tree *info_tree)",
          "1602:   dissect_wccp2_router_identity_element(tvb,offset,pinfo,info_tree);",
          "",
          "[Added Lines]",
          "1225:                                         gint length, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "1227:   dissect_wccp2_router_identity_element(tvb,offset,pinfo,info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1625: static gint",
          "1626: dissect_wccp2_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "1628: {",
          "1629:   guint32 n_routers;",
          "1630:   guint i;",
          "",
          "[Removed Lines]",
          "1627:                               packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1252:                               packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1636:     return length - ASSIGNMENT_INFO_MIN_LEN;",
          "1640:   NOTE_EATEN_LENGTH(new_length);",
          "1642:   n_routers = tvb_get_ntohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "1639:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo,  info_tree);",
          "",
          "[Added Lines]",
          "1264:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo, info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1647:     if (length < 12)",
          "1648:       return length - 12*(n_routers-i)-4-256;",
          "1652:     element_tree = proto_item_add_subtree(te, ett_router_assignment_element);",
          "1653:     dissect_wccp2_router_assignment_element(tvb, offset, length , pinfo,",
          "1655:     EAT(12);",
          "1656:   }",
          "1659:   NOTE_EATEN_LENGTH(new_length);",
          "1660:   return length;",
          "1661: }",
          "",
          "[Removed Lines]",
          "1650:     te = proto_tree_add_item(info_tree, hf_assignment_info_router_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1654:                                             element_tree);",
          "1658:   new_length = dissect_wccp2_hash_buckets_assignment_element(tvb, offset, length, pinfo, info_tree);",
          "",
          "[Added Lines]",
          "1275:     te = wccp_add_ipaddress_item(info_tree, hf_assignment_info_router_ip_index, hf_assignment_info_router_ipv4, hf_assignment_info_router_ipv6, tvb, offset, 4, addr_table);",
          "1279:                                             element_tree, addr_table);",
          "1283:   new_length = dissect_wccp2_hash_buckets_assignment_element(tvb, offset, length, pinfo, info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1667: static gboolean",
          "1668: dissect_wccp2_router_query_info(tvbuff_t *tvb, int offset, gint length,",
          "1670: {",
          "1671:   if (length < QUERY_INFO_LEN)",
          "1672:     return length - QUERY_INFO_LEN;",
          "1675:   EAT_AND_CHECK(8,4);",
          "1678:   EAT_AND_CHECK(4,4);",
          "1680:   EAT(4);",
          "1682:   return length;",
          "",
          "[Removed Lines]",
          "1669:                                 packet_info *pinfo, proto_tree *info_tree)",
          "1674:   dissect_wccp2_router_identity_element(tvb,offset,pinfo,info_tree);",
          "1677:   proto_tree_add_item(info_tree, hf_router_query_info_send_to_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1679:   proto_tree_add_item(info_tree, hf_router_query_info_target_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1294:                                 packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "1299:   dissect_wccp2_router_identity_element(tvb,offset,pinfo,info_tree, addr_table);",
          "1302:   wccp_add_ipaddress_item(info_tree, hf_router_query_info_send_to_ip_index, hf_router_query_info_send_to_ipv4, hf_router_query_info_send_to_ipv6, tvb, offset, 4, addr_table);",
          "1304:   wccp_add_ipaddress_item(info_tree, hf_router_query_info_target_ip_index, hf_router_query_info_target_ipv4, hf_router_query_info_target_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1686: static gint dissect_wccp2_hash_buckets_assignment_element(tvbuff_t *tvb, int offset, gint length,",
          "1688: {",
          "1689:   guint32 i,n_web_caches;",
          "1690:   proto_item *te;",
          "",
          "[Removed Lines]",
          "1687:                                                           packet_info *pinfo _U_, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1312:                                                           packet_info *pinfo _U_, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1704:     if (length < 4)",
          "1705:       return length - 4*(n_web_caches-i)-256;",
          "1709:     proto_item_append_text(l_te, \" id: %d\", i);",
          "1710:     EAT(4);",
          "",
          "[Removed Lines]",
          "1707:     l_te = proto_tree_add_item(element_tree, hf_hash_buckets_assignment_wc_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1332:     l_te = wccp_add_ipaddress_item(info_tree, hf_hash_buckets_assignment_wc_ip_index, hf_hash_buckets_assignment_wc_ipv4, hf_hash_buckets_assignment_wc_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1767: static gint",
          "1768: dissect_wccp2_capability_info(tvbuff_t *tvb, int offset, gint length,",
          "1770: {",
          "1771:   gint capability_length;",
          "",
          "[Removed Lines]",
          "1769:                               packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1394:                               packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table _U_)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1786: static gint",
          "1787: dissect_wccp2_command_extension(tvbuff_t *tvb, int offset,",
          "1789: {",
          "1790:   guint16 command_type;",
          "1791:   guint32 command_length;",
          "",
          "[Removed Lines]",
          "1788:                                 int length, packet_info *pinfo _U_, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1413:                                 int length, packet_info *pinfo _U_, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1810:         (command_length == 4)) {",
          "1811:       if (length < 4)",
          "1812:         return length - 4;",
          "1814:     } else {",
          "1815:       if (length < (int)command_length)",
          "1816:         return length - command_length;",
          "",
          "[Removed Lines]",
          "1813:       proto_tree_add_item(info_tree, hf_command_element_shutdown_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1439:       wccp_add_ipaddress_item(info_tree, hf_command_element_shutdown_ip_index, hf_command_element_shutdown_ipv4, hf_command_element_shutdown_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1829: static gint",
          "1830: dissect_wccp2r1_address_table_info(tvbuff_t *tvb, int offset, int length,",
          "1832: {",
          "1833:   guint16 address_length;",
          "1834:   guint32 i;",
          "",
          "[Removed Lines]",
          "1831:                                    packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1457:                                    packet_info *pinfo, proto_tree *info_tree, wccp_address_table* wccp_wccp_address_table)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1853:   element_tree = proto_item_add_subtree(tf, ett_table_element);",
          "1854:   EAT(4);",
          "1862:     case 1:",
          "1866:       if (address_length != 4) {",
          "1867:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1868:                                \"The Address length must be 4, but I found %d for IPv4 addresses. Correcting this.\",",
          "",
          "[Removed Lines]",
          "1856:   if (wccp_wccp_address_table.in_use == FALSE) {",
          "1857:     wccp_wccp_address_table.family = family;",
          "1858:     wccp_wccp_address_table.table_length =  table_length;",
          "1861:     switch (wccp_wccp_address_table.family) {",
          "1863:       if (wccp_wccp_address_table.table_ipv4 == NULL)",
          "1864:         wccp_wccp_address_table.table_ipv4 = (guint32 *)",
          "1865:           wmem_alloc0(pinfo->pool, wccp_wccp_address_table.table_length * 4);",
          "",
          "[Added Lines]",
          "1482:   if (wccp_wccp_address_table->in_use == FALSE) {",
          "1483:     wccp_wccp_address_table->family = family;",
          "1484:     wccp_wccp_address_table->table_length =  table_length;",
          "1487:     switch (wccp_wccp_address_table->family) {",
          "1489:       if (wccp_wccp_address_table->table_ipv4 == NULL)",
          "1490:         wccp_wccp_address_table->table_ipv4 = (guint32 *)",
          "1491:           wmem_alloc0(pinfo->pool, wccp_wccp_address_table->table_length * 4);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1871:       }",
          "1872:       break;",
          "1873:     case 2:",
          "1877:       if (address_length != 16) {",
          "1878:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1879:                                \"The Address length must be 16, but I found %d for IPv6 addresses. Correcting this.\",",
          "",
          "[Removed Lines]",
          "1874:       if (wccp_wccp_address_table.table_ipv6 == NULL)",
          "1875:         wccp_wccp_address_table.table_ipv6 = (struct e_in6_addr *)",
          "1876:           wmem_alloc0(pinfo->pool, wccp_wccp_address_table.table_length * sizeof(struct e_in6_addr));",
          "",
          "[Added Lines]",
          "1500:       if (wccp_wccp_address_table->table_ipv6 == NULL)",
          "1501:         wccp_wccp_address_table->table_ipv6 = (struct e_in6_addr *)",
          "1502:           wmem_alloc0(pinfo->pool, wccp_wccp_address_table->table_length * sizeof(struct e_in6_addr));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1883:       break;",
          "1884:     default:",
          "1885:       expert_add_info_format(pinfo, tf, &ei_wccp_address_table_family_unknown,",
          "1887:     };",
          "1888:   }",
          "",
          "[Removed Lines]",
          "1886:                       \"Unknown address family: %d\", wccp_wccp_address_table.family);",
          "",
          "[Added Lines]",
          "1512:                       \"Unknown address family: %d\", wccp_wccp_address_table->family);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1896:     case 1:",
          "1898:       addr  =  tvb_ip_to_str(tvb, offset);",
          "1903:       break;",
          "1904:     case 2:",
          "1906:       addr = tvb_ip6_to_str(tvb, offset);",
          "1911:       break;",
          "1912:     default:",
          "1914:     };",
          "1916:     if (element_tree) {",
          "",
          "[Removed Lines]",
          "1899:       if ((wccp_wccp_address_table.in_use == FALSE) &&",
          "1900:           (wccp_wccp_address_table.table_ipv4 != NULL) &&",
          "1901:           ((address_length * i) < wccp_wccp_address_table.table_length))",
          "1902:         wccp_wccp_address_table.table_ipv4[i] = tvb_get_ntohl(tvb, offset);",
          "1907:       if ((wccp_wccp_address_table.in_use == FALSE) &&",
          "1908:           (wccp_wccp_address_table.table_ipv6 != NULL) &&",
          "1909:           (i < wccp_wccp_address_table.table_length))",
          "1910:         tvb_get_ipv6(tvb, offset, &(wccp_wccp_address_table.table_ipv6[i]));",
          "1913:       addr = wmem_strdup_printf(wmem_packet_scope(), \"unknown family %d\", wccp_wccp_address_table.family);",
          "",
          "[Added Lines]",
          "1525:       if ((wccp_wccp_address_table->in_use == FALSE) &&",
          "1526:           (wccp_wccp_address_table->table_ipv4 != NULL) &&",
          "1527:           (i < wccp_wccp_address_table->table_length))",
          "1528:         wccp_wccp_address_table->table_ipv4[i] = tvb_get_ntohl(tvb, offset);",
          "1533:       if ((wccp_wccp_address_table->in_use == FALSE) &&",
          "1534:           (wccp_wccp_address_table->table_ipv6 != NULL) &&",
          "1535:           (i < wccp_wccp_address_table->table_length))",
          "1536:         tvb_get_ipv6(tvb, offset, &(wccp_wccp_address_table->table_ipv6[i]));",
          "1539:       addr = wmem_strdup_printf(wmem_packet_scope(), \"unknown family %d\", wccp_wccp_address_table->family);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1919:       pi = proto_tree_add_string_format_value(element_tree, hf_address_table_element, tvb,",
          "1920:                                               offset, address_length, addr,",
          "1921:                                               \"%d: %s\", i+1, addr);",
          "1923:         expert_add_info_format(pinfo, pi, &ei_wccp_length_bad, \"Ran out of space to store address\");",
          "1924:     }",
          "1925:     EAT(address_length);",
          "1926:   }",
          "1929:   return length;",
          "1930: }",
          "",
          "[Removed Lines]",
          "1922:       if (i > wccp_wccp_address_table.table_length)",
          "1928:   wccp_wccp_address_table.in_use = TRUE;",
          "",
          "[Added Lines]",
          "1548:       if (i > wccp_wccp_address_table->table_length)",
          "1554:   wccp_wccp_address_table->in_use = TRUE;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1939: static gint",
          "1940: dissect_wccp2_hash_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "1942: {",
          "1943:   guint32 n_web_caches, host_addr;",
          "1944:   guint i;",
          "",
          "[Removed Lines]",
          "1941:                                    packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1567:                                    packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1957:     host_addr = tvb_get_ntohl(tvb,offset);",
          "1958:     proto_tree_add_uint_format(info_tree, hf_cache_ip, tvb, offset, 4, host_addr, \"Web-Cache %d: IP address %s\", i,",
          "1960:     EAT(4);",
          "1961:   }",
          "",
          "[Removed Lines]",
          "1959:                         decode_wccp_encoded_address(tvb, offset, pinfo, info_tree));",
          "",
          "[Added Lines]",
          "1585:                         decode_wccp_encoded_address(tvb, offset, pinfo, info_tree, addr_table));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1976: static gint dissect_wccp2_assignment_map(tvbuff_t *tvb, int offset,",
          "1978: {",
          "1979:   gint new_length;",
          "1983:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Removed Lines]",
          "1977:                                          int length, packet_info *pinfo, proto_tree *info_tree)",
          "1981:   new_length=dissect_wccp2_mask_value_set_list(tvb, offset, length, pinfo, info_tree);",
          "",
          "[Added Lines]",
          "1603:                                          int length, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "1607:   new_length=dissect_wccp2_mask_value_set_list(tvb, offset, length, pinfo, info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1993: static gint",
          "1994: dissect_wccp2r1_alt_assignment_map_info(tvbuff_t *tvb, int offset,",
          "1996: {",
          "1997:   guint16 assignment_type;",
          "1998:   guint16 assignment_length;",
          "",
          "[Removed Lines]",
          "1995:                                         int length, packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1621:                                         int length, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2025:   switch (assignment_type) {",
          "2026:   case WCCP2_HASH_ASSIGNMENT_TYPE:",
          "2027:     return dissect_wccp2_assignment_info(tvb, offset, assignment_length,",
          "2029:   case WCCP2_MASK_ASSIGNMENT_TYPE:",
          "2030:     return dissect_wccp2_mask_value_set_list(tvb, offset, assignment_length,",
          "2032:   case WCCP2r1_ALT_MASK_ASSIGNMENT_TYPE:",
          "2033:     return dissect_wccp2_alternate_mask_value_set_list(tvb, offset, assignment_length,",
          "2035:   default:",
          "2036:     return length;",
          "2037:   }",
          "",
          "[Removed Lines]",
          "2028:                                          pinfo, info_tree);",
          "2031:                                              pinfo, info_tree);",
          "2034:                                                        pinfo, info_tree);",
          "",
          "[Added Lines]",
          "1654:                                          pinfo, info_tree, addr_table);",
          "1657:                                              pinfo, info_tree, addr_table);",
          "1660:                                                        pinfo, info_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2078: static gint",
          "2079: dissect_wccp2_mask_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "2082: {",
          "2083:   proto_item *mask_item;",
          "",
          "[Removed Lines]",
          "2080:                                            proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1706:                                            proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2089:                                   ett_mask_assignment_data_element, &mask_item, \"Mask Assignment Data\");",
          "2090:   start = offset;",
          "2094:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Removed Lines]",
          "2092:   new_length=dissect_wccp2_mask_value_set_list(tvb, offset, length, pinfo, mask_tree);",
          "",
          "[Added Lines]",
          "1718:   new_length=dissect_wccp2_mask_value_set_list(tvb, offset, length, pinfo, mask_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2108: static gint",
          "2109: dissect_wccp2_alternate_mask_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "2111: {",
          "2112:   proto_tree *mask_tree;",
          "",
          "[Removed Lines]",
          "2110:                                                      proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1736:                                                      proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2122:       {",
          "2123:         gint new_length;",
          "2127:         NOTE_EATEN_LENGTH(new_length);",
          "2128:       }",
          "",
          "[Removed Lines]",
          "2125:         new_length=dissect_wccp2_alternate_mask_value_set_list(tvb, offset, length, pinfo, mask_tree);",
          "",
          "[Added Lines]",
          "1751:         new_length=dissect_wccp2_alternate_mask_value_set_list(tvb, offset, length, pinfo, mask_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2157: static gint",
          "2158: dissect_wccp2_extended_assignment_data_element(tvbuff_t *tvb, int offset, gint length, packet_info *pinfo,",
          "2160: {",
          "2161:   proto_item *element_item, *header;",
          "2162:   proto_tree *item_tree;",
          "",
          "[Removed Lines]",
          "2159:                                                proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1785:                                                proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2207:       return length - assignment_length;",
          "2208:     case WCCP2_MASK_ASSIGNMENT_TYPE:",
          "2209:       dissect_wccp2_mask_assignment_data_element(tvb, offset, assignment_length,",
          "2211:       return length - assignment_length;",
          "2212:     case WCCP2r1_ALT_MASK_ASSIGNMENT_TYPE:",
          "2213:       dissect_wccp2_alternate_mask_assignment_data_element(tvb, offset, assignment_length,",
          "2215:       return length - assignment_length;",
          "2216:     case WCCP2r1_ASSIGNMENT_WEIGHT_STATUS:",
          "2217:       dissect_wccp2_assignment_weight_and_status_element(tvb, offset, assignment_length,",
          "",
          "[Removed Lines]",
          "2210:                                                         pinfo, item_tree);",
          "2214:                                                                   pinfo, item_tree);",
          "",
          "[Added Lines]",
          "1836:                                                         pinfo, item_tree, addr_table);",
          "1840:                                                                   pinfo, item_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2306: static gint",
          "2307: dissect_wccp2_mask_value_set_list(tvbuff_t *tvb, int offset,",
          "2309: {",
          "2310:   guint num_of_elem;",
          "2311:   guint i;",
          "",
          "[Removed Lines]",
          "2308:                                   int length, packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "1934:                                   int length, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2331:     {",
          "2332:       gint new_length;",
          "2336:       NOTE_EATEN_LENGTH(new_length);",
          "2337:     }",
          "",
          "[Removed Lines]",
          "2334:       new_length=dissect_wccp2_mask_value_set_element(tvb, offset, length, i, pinfo, element_tree);",
          "",
          "[Added Lines]",
          "1960:       new_length=dissect_wccp2_mask_value_set_element(tvb, offset, length, i, pinfo, element_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2373: static gint dissect_wccp2_alternate_mask_value_set_list(tvbuff_t *tvb, int offset,",
          "2375: {",
          "2376:   proto_tree *list_tree;",
          "2377:   guint num_of_val_elements;",
          "",
          "[Removed Lines]",
          "2374:                                                         int length, packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "2000:                                                         int length, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2390:   for(i=0;i<num_of_val_elements;i++) {",
          "2391:     gint new_length;",
          "2395:     NOTE_EATEN_LENGTH(new_length);",
          "2396:   }",
          "",
          "[Removed Lines]",
          "2393:     new_length=dissect_wccp2_alternate_mask_value_set_element(tvb, offset, length, i, pinfo, list_tree);",
          "",
          "[Added Lines]",
          "2019:     new_length=dissect_wccp2_alternate_mask_value_set_element(tvb, offset, length, i, pinfo, list_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2402: static gint",
          "2404: {",
          "2405:   proto_item *tl, *header;",
          "2406:   proto_tree *element_tree, *value_tree;",
          "",
          "[Removed Lines]",
          "2403: dissect_wccp2_alternate_mask_value_set_element(tvbuff_t *tvb, int offset, gint length, guint el_index, packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "2029: dissect_wccp2_alternate_mask_value_set_element(tvbuff_t *tvb, int offset, gint length, guint el_index, packet_info *pinfo,",
          "2030:                     proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2428:   EAT(4);",
          "2430:   for (i=0; i < number_of_elements; i++) {",
          "2432:     total_length += length - new_length;",
          "2433:     NOTE_EATEN_LENGTH(new_length);",
          "2434:   }",
          "",
          "[Removed Lines]",
          "2431:     new_length=dissect_wccp2_web_cache_value_element(tvb, offset, length, pinfo,  value_tree);",
          "",
          "[Added Lines]",
          "2058:     new_length=dissect_wccp2_web_cache_value_element(tvb, offset, length, pinfo, value_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2441: static gint",
          "2443: {",
          "2444:   guint number_of_elements, seq_num;",
          "2445:   proto_item *tl;",
          "",
          "[Removed Lines]",
          "2442: dissect_wccp2_web_cache_value_element(tvbuff_t *tvb, int offset, gint length,  packet_info *pinfo _U_, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "2069: dissect_wccp2_web_cache_value_element(tvbuff_t *tvb, int offset, gint length,  packet_info *pinfo _U_, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2449:   if (length < 4)",
          "2450:     return length - 8;",
          "2454:   element_tree = proto_item_add_subtree(tl, ett_web_cache_value_element_list);",
          "2455:   EAT_AND_CHECK(4,4);",
          "",
          "[Removed Lines]",
          "2452:   tl = proto_tree_add_item(info_tree, hf_web_cache_value_element_wc_address, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2079:   tl = wccp_add_ipaddress_item(info_tree, hf_web_cache_value_element_wc_address_index, hf_web_cache_value_element_wc_address_ipv4, hf_web_cache_value_element_wc_address_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2615: static gint",
          "2617: {",
          "2618:   proto_tree *element_tree;",
          "",
          "[Removed Lines]",
          "2616: dissect_wccp2_value_element(tvbuff_t *tvb, int offset, gint length, int idx, packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "2243: dissect_wccp2_value_element(tvbuff_t *tvb, int offset, gint length, int idx, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2621:     return length - 16;",
          "2623:   element_tree = proto_tree_add_subtree_format(info_tree, tvb, offset, 16, ett_value_element, NULL, \"Value Element(%u) %s\",",
          "2627:   EAT_AND_CHECK(4,4);",
          "2630:   EAT_AND_CHECK(4,2);",
          "2631:   proto_tree_add_item(element_tree, hf_value_element_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "2624:                            idx,decode_wccp_encoded_address(tvb, offset+4+4+2+2, pinfo, info_tree));",
          "2626:   proto_tree_add_item(element_tree, hf_value_element_src_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2628:   proto_tree_add_item(element_tree, hf_value_element_dest_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2251:                            idx,decode_wccp_encoded_address(tvb, offset+4+4+2+2, pinfo, info_tree, addr_table));",
          "2254:   wccp_add_ipaddress_item(info_tree, hf_value_element_src_ip_index, hf_value_element_src_ipv4, hf_value_element_src_ipv6, tvb, offset, 4, addr_table);",
          "2256:   wccp_add_ipaddress_item(info_tree, hf_value_element_dest_ip_index, hf_value_element_dest_ipv4, hf_value_element_dest_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2633:   proto_tree_add_item(element_tree, hf_value_element_dest_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2634:   EAT_AND_CHECK(2,4);",
          "2637:   EAT(4);",
          "2639:   return length;",
          "",
          "[Removed Lines]",
          "2636:   proto_tree_add_item(element_tree, hf_value_element_web_cache_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2264:   wccp_add_ipaddress_item(info_tree, hf_value_element_web_cache_ip_index, hf_value_element_web_cache_ipv4, hf_value_element_web_cache_ipv6, tvb, offset, 4, addr_table);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2644: static gint",
          "2646: {",
          "2647:   proto_item *tl, *te;",
          "2648:   proto_tree *element_tree, *value_tree;",
          "",
          "[Removed Lines]",
          "2645: dissect_wccp2_mask_value_set_element(tvbuff_t *tvb, int offset, gint length, int idx, packet_info *pinfo, proto_tree *info_tree)",
          "",
          "[Added Lines]",
          "2273: dissect_wccp2_mask_value_set_element(tvbuff_t *tvb, int offset, gint length, int idx, packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2668:   for (i = 0; i < num_of_val_elements; i++)",
          "2669:     {",
          "2672:       NOTE_EATEN_LENGTH(new_length);",
          "2673:     }",
          "",
          "[Removed Lines]",
          "2670:       new_length=dissect_wccp2_value_element(tvb, offset, length, i, pinfo,  value_tree);",
          "",
          "[Added Lines]",
          "2298:       new_length=dissect_wccp2_value_element(tvb, offset, length, i, pinfo,  value_tree, addr_table);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2677:   return length;",
          "2678: }",
          "2686: {",
          "2692:   guint i;",
          "2752:   }",
          "",
          "[Removed Lines]",
          "2680: #define ALT_ASSIGNMENT_INFO_MIN_LEN    (4+4)",
          "2683: static gint",
          "2684: dissect_wccp2_alternate_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "2685:                                         packet_info *pinfo, proto_tree *info_tree)",
          "2687:   guint16 assignment_type;",
          "2688:   guint16 assignment_length;",
          "2689:   proto_item *tf=NULL;",
          "2691:   guint32 n_routers;",
          "2693:   proto_tree *element_tree;",
          "2694:   gint new_length;",
          "2697:   if (length < ALT_ASSIGNMENT_INFO_MIN_LEN)",
          "2698:     return length - ALT_ASSIGNMENT_INFO_MIN_LEN;",
          "2701:   assignment_type = tvb_get_ntohs(tvb, offset);",
          "2702:   proto_tree_add_item(info_tree, hf_alt_assignment_info_assignment_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2703:   EAT_AND_CHECK(2,2);",
          "2705:   assignment_length = tvb_get_ntohs(tvb, offset);",
          "2706:   tf=proto_tree_add_item(info_tree, hf_alt_assignment_info_assignment_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2707:   EAT(2);",
          "2709:   if (length < assignment_length)",
          "2710:     expert_add_info_format(pinfo, tf, &ei_wccp_assignment_length_bad,",
          "2711:                            \"Assignment length is %d but only %d remain in the packet. Ignoring this for now\",",
          "2712:                            assignment_length, length);",
          "2714:   if (length > assignment_length)  {",
          "2715:     expert_add_info_format(pinfo, tf, &ei_wccp_assignment_length_bad,",
          "2716:                            \"Assignment length is %d but %d remain in the packet. Assuming that the assignment length is wrong and setting it to %d.\",",
          "2717:                            assignment_length, length, length);",
          "2718:   }",
          "2720:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo,  info_tree);",
          "2721:   NOTE_EATEN_LENGTH(new_length);",
          "2723:   n_routers = tvb_get_ntohl(tvb, offset);",
          "2724:   proto_tree_add_uint(info_tree, hf_alt_assignment_info_num_routers, tvb, offset, 4, n_routers);",
          "2725:   EAT(4);",
          "2727:   for (i = 0; i < n_routers; i++) {",
          "2728:     if (length < 12)",
          "2729:       return length - 12*(n_routers-i);",
          "2731:     element_tree = proto_tree_add_subtree_format(info_tree, tvb, offset, 12,",
          "2732:                              ett_router_alt_assignment_element, NULL,",
          "2733:                              \"Router %d Assignment Element: IP address %s\", i,",
          "2734:                              decode_wccp_encoded_address(tvb, offset, pinfo, info_tree));",
          "2736:     dissect_wccp2_router_assignment_element(tvb, offset, length , pinfo, element_tree);",
          "2737:     EAT(12);",
          "2738:   }",
          "2740:   switch (assignment_type) {",
          "2741:   case WCCP2_HASH_ASSIGNMENT_TYPE:",
          "2742:     return dissect_wccp2_hash_assignment_info(tvb, offset, length,",
          "2743:                                               pinfo, info_tree);",
          "2744:   case WCCP2_MASK_ASSIGNMENT_TYPE:",
          "2745:     return dissect_wccp2_mask_value_set_list(tvb, offset, length,",
          "2746:                                              pinfo, info_tree);",
          "2747:   case WCCP2r1_ALT_MASK_ASSIGNMENT_TYPE:",
          "2748:     return dissect_wccp2_alternate_mask_value_set_list(tvb, offset, length,",
          "2749:                                                        pinfo, info_tree);",
          "2750:   default:",
          "2751:     return length;",
          "2753: }",
          "",
          "[Added Lines]",
          "2308: #define ALT_ASSIGNMENT_INFO_MIN_LEN    (4+4)",
          "2311: static gint",
          "2312: dissect_wccp2_alternate_assignment_info(tvbuff_t *tvb, int offset, gint length,",
          "2313:                                         packet_info *pinfo, proto_tree *info_tree, wccp_address_table* addr_table)",
          "2314: {",
          "2315:   guint16 assignment_type;",
          "2316:   guint16 assignment_length;",
          "2317:   proto_item *tf=NULL;",
          "2319:   guint32 n_routers;",
          "2320:   guint i;",
          "2321:   proto_tree *element_tree;",
          "2322:   gint new_length;",
          "2325:   if (length < ALT_ASSIGNMENT_INFO_MIN_LEN)",
          "2326:     return length - ALT_ASSIGNMENT_INFO_MIN_LEN;",
          "2329:   assignment_type = tvb_get_ntohs(tvb, offset);",
          "2330:   proto_tree_add_item(info_tree, hf_alt_assignment_info_assignment_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2331:   EAT_AND_CHECK(2,2);",
          "2333:   assignment_length = tvb_get_ntohs(tvb, offset);",
          "2334:   tf=proto_tree_add_item(info_tree, hf_alt_assignment_info_assignment_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2335:   EAT(2);",
          "2337:   if (length < assignment_length)",
          "2338:     expert_add_info_format(pinfo, tf, &ei_wccp_assignment_length_bad,",
          "2339:                            \"Assignment length is %d but only %d remain in the packet. Ignoring this for now\",",
          "2340:                            assignment_length, length);",
          "2342:   if (length > assignment_length)  {",
          "2343:     expert_add_info_format(pinfo, tf, &ei_wccp_assignment_length_bad,",
          "2344:                            \"Assignment length is %d but %d remain in the packet. Assuming that the assignment length is wrong and setting it to %d.\",",
          "2345:                            assignment_length, length, length);",
          "2346:   }",
          "2348:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo,  info_tree, addr_table);",
          "2349:   NOTE_EATEN_LENGTH(new_length);",
          "2351:   n_routers = tvb_get_ntohl(tvb, offset);",
          "2352:   proto_tree_add_uint(info_tree, hf_alt_assignment_info_num_routers, tvb, offset, 4, n_routers);",
          "2353:   EAT(4);",
          "2355:   for (i = 0; i < n_routers; i++) {",
          "2356:     if (length < 12)",
          "2357:       return length - 12*(n_routers-i);",
          "2359:     element_tree = proto_tree_add_subtree_format(info_tree, tvb, offset, 12,",
          "2360:                              ett_router_alt_assignment_element, NULL,",
          "2361:                              \"Router %d Assignment Element: IP address %s\", i,",
          "2362:                              decode_wccp_encoded_address(tvb, offset, pinfo, info_tree, addr_table));",
          "2364:     dissect_wccp2_router_assignment_element(tvb, offset, length , pinfo, element_tree, addr_table);",
          "2365:     EAT(12);",
          "2366:   }",
          "2368:   switch (assignment_type) {",
          "2369:   case WCCP2_HASH_ASSIGNMENT_TYPE:",
          "2370:     return dissect_wccp2_hash_assignment_info(tvb, offset, length,",
          "2371:                                               pinfo, info_tree, addr_table);",
          "2372:   case WCCP2_MASK_ASSIGNMENT_TYPE:",
          "2373:     return dissect_wccp2_mask_value_set_list(tvb, offset, length,",
          "2374:                                              pinfo, info_tree, addr_table);",
          "2375:   case WCCP2r1_ALT_MASK_ASSIGNMENT_TYPE:",
          "2376:     return dissect_wccp2_alternate_mask_value_set_list(tvb, offset, length,",
          "2377:                                                        pinfo, info_tree, addr_table);",
          "2378:   default:",
          "2379:     return length;",
          "2380:   }",
          "2381: }",
          "2383: static void",
          "2384: dissect_wccp2_info(tvbuff_t *tvb, int offset,",
          "2385:                    packet_info *pinfo, proto_tree *wccp_tree,",
          "2386:                    guint32 message_type)",
          "2387: {",
          "2388:   int length_remaining;",
          "2389:   guint16 type;",
          "2390:   guint16 item_length;",
          "2391:   proto_item *tf;",
          "2392:   proto_tree *info_tree;",
          "2393:   gint ett;",
          "2394:   gint (*dissector)(tvbuff_t *, int, int, packet_info *, proto_tree *, wccp_address_table*);",
          "2397:   gboolean wccp2_security_info;",
          "2398:   gboolean wccp2_service_info;",
          "2399:   gboolean wccp2_router_id_info;",
          "2400:   gboolean wccp2_wc_id_info;",
          "2401:   gboolean wccp2_rtr_view_info;",
          "2402:   gboolean wccp2_wc_view_info;",
          "2403:   gboolean wccp2_redirect_assignment;",
          "2404:   gboolean wccp2_query_info;",
          "2405:   gboolean wccp2_capabilities_info;",
          "2406:   gboolean wccp2_alt_assignment;",
          "2407:   gboolean wccp2_assign_map;",
          "2408:   gboolean wccp2_command_extension;",
          "2409:   gboolean wccp2r1_alt_assignment_map;",
          "2410:   wccp_address_table wccp_wccp_address_table = {FALSE, -1, -1, 0, NULL, NULL};",
          "2412:   wccp2_security_info=FALSE;",
          "2413:   wccp2_service_info=FALSE;",
          "2414:   wccp2_router_id_info=FALSE;",
          "2415:   wccp2_wc_id_info=FALSE;",
          "2416:   wccp2_rtr_view_info=FALSE;",
          "2417:   wccp2_wc_view_info=FALSE;",
          "2418:   wccp2_redirect_assignment=FALSE;",
          "2419:   wccp2_query_info=FALSE;",
          "2420:   wccp2_capabilities_info=FALSE;",
          "2421:   wccp2_alt_assignment=FALSE;",
          "2422:   wccp2_assign_map=FALSE;",
          "2423:   wccp2_command_extension=FALSE;",
          "2424:   wccp2r1_alt_assignment_map=FALSE;",
          "2427:      compnent, otherwise we cannot print the IP's.",
          "2429:   find_wccp_address_table(tvb,offset,pinfo,wccp_tree, &wccp_wccp_address_table);",
          "2431:   while ((length_remaining = tvb_reported_length_remaining(tvb, offset)) > 0) {",
          "2432:     type = tvb_get_ntohs(tvb, offset);",
          "2433:     switch (type) {",
          "2435:     case WCCP2_SECURITY_INFO:",
          "2436:       wccp2_security_info=TRUE;",
          "2437:       ett = ett_security_info;",
          "2438:       dissector = dissect_wccp2_security_info;",
          "2439:       break;",
          "2441:     case WCCP2_SERVICE_INFO:",
          "2442:       wccp2_service_info=TRUE;",
          "2443:       ett = ett_service_info;",
          "2444:       dissector = dissect_wccp2_service_info;",
          "2445:       break;",
          "2447:     case WCCP2_ROUTER_ID_INFO:",
          "2448:       wccp2_router_id_info=TRUE;",
          "2449:       ett = ett_router_identity_info;",
          "2450:       dissector = dissect_wccp2_router_identity_info;",
          "2451:       break;",
          "2453:     case WCCP2_WC_ID_INFO:",
          "2454:       wccp2_wc_id_info=TRUE;",
          "2455:       ett = ett_wc_identity_info;",
          "2456:       dissector = dissect_wccp2_wc_identity_info;",
          "2457:       break;",
          "2459:     case WCCP2_RTR_VIEW_INFO:",
          "2460:       wccp2_rtr_view_info=TRUE;",
          "2461:       ett = ett_router_view_info;",
          "2462:       dissector = dissect_wccp2_router_view_info;",
          "2463:       break;",
          "2465:     case WCCP2_WC_VIEW_INFO:",
          "2466:       wccp2_wc_view_info=TRUE;",
          "2467:       ett = ett_wc_view_info;",
          "2468:       dissector = dissect_wccp2_web_cache_view_info;",
          "2469:       break;",
          "2471:     case WCCP2_REDIRECT_ASSIGNMENT:",
          "2472:       wccp2_redirect_assignment=TRUE;",
          "2473:       ett = ett_router_assignment_info;",
          "2474:       dissector = dissect_wccp2_assignment_info;",
          "2475:       break;",
          "2477:     case WCCP2_QUERY_INFO:",
          "2478:       wccp2_query_info=TRUE;",
          "2479:       ett = ett_query_info;",
          "2480:       dissector = dissect_wccp2_router_query_info;",
          "2481:       break;",
          "2483:     case WCCP2_CAPABILITIES_INFO:",
          "2484:       wccp2_capabilities_info=TRUE;",
          "2485:       ett = ett_capabilities_info;",
          "2486:       dissector = dissect_wccp2_capability_info;",
          "2487:       break;",
          "2489:     case WCCP2_ALT_ASSIGNMENT:",
          "2490:       wccp2_alt_assignment=TRUE;",
          "2491:       ett = ett_alt_assignment_info;",
          "2492:       dissector = dissect_wccp2_alternate_assignment_info;",
          "2493:       break;",
          "2495:     case WCCP2r1_ALT_ASSIGNMENT_MAP:",
          "2496:       wccp2r1_alt_assignment_map=TRUE;",
          "2497:       ett = ett_alt_assignment_map;",
          "2498:       dissector = dissect_wccp2r1_alt_assignment_map_info;",
          "2499:       break;",
          "2501:     case WCCP2r1_ADDRESS_TABLE:",
          "2502:       ett = ett_address_table;",
          "2503:       dissector = dissect_wccp2r1_address_table_info;",
          "2504:       break;",
          "2506:     case WCCP2_ASSIGN_MAP:",
          "2507:       wccp2_assign_map=TRUE;",
          "2508:       ett = ett_assignment_map;",
          "2509:       dissector = dissect_wccp2_assignment_map;",
          "2510:       break;",
          "2511:     case WCCP2_COMMAND_EXTENSION:",
          "2512:       wccp2_command_extension=TRUE;",
          "2513:       ett = ett_command_extension;",
          "2514:       dissector = dissect_wccp2_command_extension;",
          "2515:       break;",
          "2517:     default:",
          "2518:       ett = ett_unknown_info;",
          "2519:       dissector = NULL;",
          "2520:       break;",
          "2521:     }",
          "2523:     info_tree = proto_tree_add_subtree(wccp_tree, tvb, offset, -1, ett, &tf,",
          "2524:                              val_to_str(type, info_type_vals, \"Unknown info type (%u)\"));",
          "2526:     proto_tree_add_item(info_tree, hf_item_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2528:     item_length = tvb_get_ntohs(tvb, offset+2);",
          "2529:     proto_tree_add_item(info_tree, hf_item_length, tvb, offset+2, 2, ENC_BIG_ENDIAN);",
          "2531:     offset += 4;",
          "2533:     if (dissector != NULL) {",
          "2534:       gint remaining_item_length = (*dissector)(tvb, offset, item_length, pinfo, info_tree, &wccp_wccp_address_table);",
          "2537:       if (remaining_item_length > 0)",
          "2538:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "2539:                                \"The item is %d bytes too long\",",
          "2540:                                remaining_item_length);",
          "2543:       if (remaining_item_length < 0)",
          "2544:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "2545:                                \"The item is %d bytes too short\",",
          "2546:                                -remaining_item_length);",
          "2549:     } else {",
          "2550:       proto_tree_add_item(info_tree, hf_item_data, tvb, offset, item_length, ENC_NA);",
          "2551:     }",
          "2553:     offset += item_length;",
          "2554:     proto_item_set_end(tf, tvb, offset);",
          "2555:   }",
          "2560:   switch (message_type) {",
          "2561:   case WCCP2_HERE_I_AM:",
          "2562:     if (!wccp2_security_info)",
          "2563:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "2564:     if (!wccp2_service_info)",
          "2565:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "2566:     if (wccp2_router_id_info)",
          "2567:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_router_id_info);",
          "2568:     if (!wccp2_wc_id_info)",
          "2569:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_wc_id_info);",
          "2570:     if (wccp2_rtr_view_info)",
          "2571:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_rtr_view_info);",
          "2572:     if (!wccp2_wc_view_info)",
          "2573:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_wc_view_info);",
          "2574:     if (wccp2_redirect_assignment)",
          "2575:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_redirect_assignment);",
          "2576:     if (wccp2_query_info)",
          "2577:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_query_info);",
          "2578:     if (wccp2_alt_assignment)",
          "2579:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment);",
          "2580:     if (wccp2_assign_map)",
          "2581:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_assign_map);",
          "2582:     if (wccp2r1_alt_assignment_map)",
          "2583:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment_map);",
          "2584:     break;",
          "2585:   case WCCP2_I_SEE_YOU:",
          "2586:     if (!wccp2_security_info)",
          "2587:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "2588:     if (!wccp2_service_info)",
          "2589:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "2590:     if (!wccp2_router_id_info)",
          "2591:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_router_id_info);",
          "2592:     if (wccp2_wc_id_info)",
          "2593:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_id_info);",
          "2594:     if (!wccp2_rtr_view_info)",
          "2595:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_rtr_view_info);",
          "2596:     if (wccp2_wc_view_info)",
          "2597:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_view_info);",
          "2598:     if (wccp2_redirect_assignment)",
          "2599:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_redirect_assignment);",
          "2600:     if (wccp2_query_info)",
          "2601:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_query_info);",
          "2602:     if (wccp2r1_alt_assignment_map)",
          "2603:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment_map);",
          "2604:     break;",
          "2606:   case WCCP2_REMOVAL_QUERY:",
          "2607:     if (!wccp2_security_info)",
          "2608:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "2609:     if (!wccp2_service_info)",
          "2610:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "2611:     if (wccp2_router_id_info)",
          "2612:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_router_id_info);",
          "2613:     if (wccp2_wc_id_info)",
          "2614:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_id_info);",
          "2615:     if (wccp2_rtr_view_info)",
          "2616:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_rtr_view_info);",
          "2617:     if (wccp2_wc_view_info)",
          "2618:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_view_info);",
          "2619:     if (wccp2_redirect_assignment)",
          "2620:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_redirect_assignment);",
          "2621:     if (!wccp2_query_info)",
          "2622:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_query_info);",
          "2623:     if (wccp2_capabilities_info)",
          "2624:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_capabilities_info);",
          "2625:     if (wccp2_alt_assignment)",
          "2626:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment);",
          "2627:     if (wccp2_assign_map)",
          "2628:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_assign_map);",
          "2629:     if (wccp2_command_extension)",
          "2630:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_command_extension);",
          "2631:     if (wccp2r1_alt_assignment_map)",
          "2632:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_alt_assignment_map);",
          "2633:     break;",
          "2635:   case WCCP2_REDIRECT_ASSIGN:",
          "2636:     if (!wccp2_security_info)",
          "2637:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_security_info);",
          "2638:     if (!wccp2_service_info)",
          "2639:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_service_info);",
          "2640:     if (wccp2_router_id_info)",
          "2641:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_router_id_info);",
          "2642:     if (wccp2_wc_id_info)",
          "2643:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_id_info);",
          "2644:     if (wccp2_rtr_view_info)",
          "2645:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_rtr_view_info);",
          "2646:     if (wccp2_wc_view_info)",
          "2647:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_wc_view_info);",
          "2648:     if (wccp2_query_info)",
          "2649:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_query_info);",
          "2650:     if (wccp2_capabilities_info)",
          "2651:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_capabilities_info);",
          "2652:     if (! (wccp2_assign_map || wccp2r1_alt_assignment_map || wccp2_alt_assignment || wccp2_redirect_assignment))",
          "2653:       expert_add_info(pinfo, wccp_tree, &ei_wccp_missing_assignment);",
          "2654:     if (wccp2_command_extension)",
          "2655:       expert_add_info(pinfo, wccp_tree, &ei_wccp_contains_command_extension);",
          "2656:     break;",
          "2657:   }",
          "2658: }",
          "2660: static int",
          "2661: dissect_wccp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2663:   int offset = 0;",
          "2664:   proto_tree *wccp_tree = NULL;",
          "2665:   proto_item *wccp_tree_item;",
          "2666:   guint32 wccp_message_type;",
          "2667:   guint16 length;",
          "2668:   gint wccp2_length;",
          "2669:   proto_item *length_item;",
          "2670:   guint32 cache_count;",
          "2671:   guint32 ipaddr;",
          "2673:   guint8 bucket;",
          "2675:   wccp_message_type = tvb_get_ntohl(tvb, offset);",
          "2678:   if (try_val_to_str(wccp_message_type, wccp_type_vals) == NULL)",
          "2679:     return 0;",
          "2681:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"WCCP\");",
          "2683:   col_add_str(pinfo->cinfo, COL_INFO, val_to_str(wccp_message_type,",
          "2684:                                                    wccp_type_vals, \"Unknown WCCP message (%u)\"));",
          "2686:   wccp_tree_item = proto_tree_add_item(tree, proto_wccp, tvb, offset, -1, ENC_NA);",
          "2687:   wccp_tree = proto_item_add_subtree(wccp_tree_item, ett_wccp);",
          "2689:   proto_tree_add_uint(wccp_tree, hf_wccp_message_type, tvb, offset, 4, wccp_message_type);",
          "2690:   offset += 4;",
          "2692:   switch (wccp_message_type) {",
          "2694:     case WCCP_HERE_I_AM:",
          "2695:       proto_tree_add_item(wccp_tree, hf_wccp_version, tvb,",
          "2696:                           offset, 4, ENC_BIG_ENDIAN);",
          "2697:       offset += 4;",
          "2698:       offset = dissect_hash_data(tvb, offset, wccp_tree);",
          "2699:       proto_tree_add_item(wccp_tree, hf_recvd_id, tvb, offset,",
          "2700:                           4, ENC_BIG_ENDIAN);",
          "2702:       break;",
          "2704:     case WCCP_I_SEE_YOU:",
          "2705:       proto_tree_add_item(wccp_tree, hf_wccp_version, tvb,",
          "2706:                           offset, 4, ENC_BIG_ENDIAN);",
          "2707:       offset += 4;",
          "2708:       proto_tree_add_item(wccp_tree, hf_change_num, tvb, offset,",
          "2709:                           4, ENC_BIG_ENDIAN);",
          "2710:       offset += 4;",
          "2711:       proto_tree_add_item(wccp_tree, hf_recvd_id, tvb, offset,",
          "2712:                           4, ENC_BIG_ENDIAN);",
          "2713:       offset += 4;",
          "2714:       cache_count = tvb_get_ntohl(tvb, offset);",
          "2715:       proto_tree_add_uint(wccp_tree, hf_wc_num, tvb, offset, 4, cache_count);",
          "2716:       offset += 4;",
          "2717:       for (i = 0; i < cache_count; i++) {",
          "2718:         offset = dissect_web_cache_list_entry(tvb, offset, i,",
          "2719:                                               wccp_tree);",
          "2720:       }",
          "2721:       break;",
          "2723:     case WCCP_ASSIGN_BUCKET:",
          "2732:       proto_tree_add_item(wccp_tree, hf_recvd_id, tvb, offset,",
          "2733:                           4, ENC_BIG_ENDIAN);",
          "2734:       offset += 4;",
          "2735:       cache_count = tvb_get_ntohl(tvb, offset);",
          "2736:       proto_tree_add_uint(wccp_tree, hf_wc_num, tvb, offset, 4, cache_count);",
          "2737:       offset += 4;",
          "2738:       for (i = 0; i < cache_count; i++) {",
          "2739:         ipaddr = tvb_get_ipv4(tvb, offset);",
          "2740:         proto_tree_add_ipv4_format(wccp_tree,",
          "2741:                                    hf_cache_ip, tvb, offset, 4,",
          "2742:                                    ipaddr,",
          "2743:                                    \"Web Cache %d IP Address: %s\", i,",
          "2744:                                    tvb_ip_to_str(tvb, offset));",
          "2745:         offset += 4;",
          "2746:       }",
          "2748:       for (i = 0; i < 256; i++) {",
          "2749:           bucket = tvb_get_guint8(tvb, offset);",
          "2750:           if (bucket == 0xff) {",
          "2751:               proto_tree_add_uint_format(wccp_tree, hf_bucket, tvb, offset, 1,",
          "2752:                   bucket, \"Bucket %d: Unassigned\", i);",
          "2753:           } else {",
          "2754:               proto_tree_add_uint_format(wccp_tree, hf_bucket, tvb, offset, 1,",
          "2755:                     bucket, \"Bucket %d: %d\", i, bucket);",
          "2756:           }",
          "2757:         offset++;",
          "2758:       }",
          "2759:       break;",
          "2761:     case WCCP2_HERE_I_AM:",
          "2762:     case WCCP2_I_SEE_YOU:",
          "2763:     case WCCP2_REMOVAL_QUERY:",
          "2764:     case WCCP2_REDIRECT_ASSIGN:",
          "2768:       proto_tree_add_item(wccp_tree, hf_message_header_version, tvb, offset, 2,",
          "2769:                           ENC_BIG_ENDIAN);",
          "2770:       offset += 2;",
          "2772:       length = tvb_get_ntohs(tvb, offset);",
          "2773:       length_item = proto_tree_add_uint(wccp_tree, hf_message_header_length, tvb, offset, 2, length);",
          "2774:       offset += 2;",
          "2778:       wccp2_length = tvb_reported_length_remaining(tvb, offset);",
          "2779:       if (length > (guint)wccp2_length) {",
          "2780:         expert_add_info_format(pinfo, length_item, &ei_wccp_length_bad,",
          "2781:                                \"The length as specified by the length field is bigger than the length of the packet\");",
          "2782:         length = wccp2_length - offset;",
          "2783:       } else {",
          "2785:         tvb_set_reported_length(tvb, offset + length);",
          "2786:       }",
          "2787:       proto_item_set_len(wccp_tree_item, offset + length);",
          "2788:       dissect_wccp2_info(tvb, offset, pinfo, wccp_tree, wccp_message_type);",
          "2789:       break;",
          "2792:   return tvb_captured_length(tvb);",
          "2793: }",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2845:       {\"Command Length\", \"wccp.command_length\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "2846:        NULL, HFILL }",
          "2847:     },",
          "2850:        NULL, HFILL }",
          "2851:     },",
          "2852:     { &hf_command_unknown,",
          "",
          "[Removed Lines]",
          "2848:     { &hf_command_element_shutdown_ip,",
          "2849:       {\"Command Extension Length\", \"wccp.command_element_shudown_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "2887:     { &hf_command_element_shutdown_ip_index,",
          "2888:       {\"Command Element Shutdown IP\", \"wccp.command_element_shudown_ip_Address.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "2889:        NULL, HFILL }",
          "2890:     },",
          "2891:     { &hf_command_element_shutdown_ipv4,",
          "2892:       {\"Command Element Shutdown IP\", \"wccp.command_element_shudown_ip_address.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "2893:        NULL, HFILL }",
          "2894:     },",
          "2895:     { &hf_command_element_shutdown_ipv6,",
          "2896:       {\"Command Element Shutdown IP\", \"wccp.command_element_shudown_ip_address.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2933:       { \"Destination Port\", \"wccp.service_info_destination_port\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "2934:         NULL, HFILL }",
          "2935:     },",
          "2938:         NULL, HFILL }",
          "2939:     },",
          "2940:     { &hf_router_identity_receive_id,",
          "2941:       { \"Received ID\", \"wccp.router_identity.receive_id\", FT_UINT32, BASE_DEC, 0x0, 0x0,",
          "2942:         NULL, HFILL }",
          "2943:     },",
          "2946:         NULL, HFILL }",
          "2947:     },",
          "2948:     { &hf_router_identity_received_from_num,",
          "2949:       { \"Number of Received From IP addresses (Webcache to which the message is directed)\", \"wccp.router.num_recv_ip\", FT_UINT32, BASE_DEC, 0x0, 0x0,",
          "2950:         NULL, HFILL }",
          "2951:     },",
          "2954:         NULL, HFILL }",
          "2955:     },",
          "2956:     { &hf_web_cache_identity_hash_rev,",
          "",
          "[Removed Lines]",
          "2936:     { &hf_router_identity_ip,",
          "2937:       { \"IP Address\", \"wccp.router_identity.ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "2944:     { &hf_router_identity_send_to_ip,",
          "2945:       { \"Sent To IP Address\", \"wccp.router_identity.send_to_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "2952:     { &hf_web_cache_identity_ip,",
          "2953:       { \"Web-Cache IP Address\", \"wccp.web_cache_identity.ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "2983:     { &hf_router_identity_ip_index,",
          "2984:       { \"IP Address\", \"wccp.router_identity.ip_address.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "2985:         NULL, HFILL }",
          "2986:     },",
          "2987:     { &hf_router_identity_ipv4,",
          "2988:       { \"IP Address\", \"wccp.router_identity.ip_address.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "2989:         NULL, HFILL }",
          "2990:     },",
          "2991:     { &hf_router_identity_ipv6,",
          "2992:       { \"IP Address\", \"wccp.router_identity.ip_address.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "2999:     { &hf_router_identity_send_to_ip_index,",
          "3000:       { \"Sent To IP Address\", \"wccp.router_identity.send_to_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3001:         NULL, HFILL }",
          "3002:     },",
          "3003:     { &hf_router_identity_send_to_ipv4,",
          "3004:       { \"Sent To IP Address\", \"wccp.router_identity.send_to_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3005:         NULL, HFILL }",
          "3006:     },",
          "3007:     { &hf_router_identity_send_to_ipv6,",
          "3008:       { \"Sent To IP Address\", \"wccp.router_identity.send_to_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3015:     { &hf_web_cache_identity_index,",
          "3016:       { \"Web-Cache IP Address\", \"wccp.web_cache_identity.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3017:         NULL, HFILL }",
          "3018:     },",
          "3019:     { &hf_web_cache_identity_ipv4,",
          "3020:       { \"Web-Cache IP Address\", \"wccp.web_cache_identity.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3021:         NULL, HFILL }",
          "3022:     },",
          "3023:     { &hf_web_cache_identity_ipv6,",
          "3024:       { \"Web-Cache IP Address\", \"wccp.web_cache_identity.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2993:       { \"Status\", \"wccp.assignment_status\", FT_UINT16, BASE_HEX, NULL, 0x0,",
          "2994:         NULL, HFILL }",
          "2995:     },",
          "2998:         NULL, HFILL }",
          "2999:     },",
          "3000:     { &hf_assignment_key_change_num,",
          "",
          "[Removed Lines]",
          "2996:     { &hf_assignment_key_ip,",
          "2997:       { \"Assignment Key IP Address\", \"wccp.assignment_key.ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3067:     { &hf_assignment_key_ip_index,",
          "3068:       { \"Assignment Key IP Address\", \"wccp.assignment_key.ip_index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3069:         NULL, HFILL }",
          "3070:     },",
          "3071:     { &hf_assignment_key_ipv4,",
          "3072:       { \"Assignment Key IP Address\", \"wccp.assignment_key.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3073:         NULL, HFILL }",
          "3074:     },",
          "3075:     { &hf_assignment_key_ipv6,",
          "3076:       { \"Assignment Key IP Address\", \"wccp.assignment_key.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3013:       { \"Number of Routers\", \"wccp.router_view.router_num\", FT_UINT32, BASE_DEC, NULL, 0x0,",
          "3014:         NULL, HFILL }",
          "3015:     },",
          "3018:         NULL, HFILL }",
          "3019:     },",
          "3022:         NULL, HFILL }",
          "3023:     },",
          "3024:     { &hf_wc_view_info_change_num,",
          "3025:       { \"Change Number\", \"wccp.wc_view_info.change_num\", FT_UINT32, BASE_DEC, NULL, 0x0,",
          "3026:         NULL, HFILL }",
          "3027:     },",
          "3030:         NULL, HFILL }",
          "3031:     },",
          "3034:         NULL, HFILL }",
          "3035:     },",
          "3036:     { &hf_wc_view_router_num,",
          "",
          "[Removed Lines]",
          "3016:     { &hf_router_identity_router_ip,",
          "3017:       { \"Router IP Address\", \"wccp.router_identity.router_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3020:     { &hf_router_identity_received_from_ip,",
          "3021:       { \"Received From IP Address/Target Web Cache IP\", \"wccp.router_identity.received_from_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3028:     { &hf_wc_view_info_router_ip,",
          "3029:       { \"Router IP\", \"wccp.wc_view_info.router_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3032:     { &hf_wc_view_info_wc_ip,",
          "3033:       { \"Web Cache IP\", \"wccp.wc_view_info.wc_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3095:     { &hf_router_identity_router_ip_index,",
          "3096:       { \"Router IP Address\", \"wccp.router_identity.router_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3097:         NULL, HFILL }",
          "3098:     },",
          "3099:     { &hf_router_identity_router_ipv4,",
          "3100:       { \"Router IP Address\", \"wccp.router_identity.router_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3101:         NULL, HFILL }",
          "3102:     },",
          "3103:     { &hf_router_identity_router_ipv6,",
          "3104:       { \"Router IP Address\", \"wccp.router_identity.router_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3107:     { &hf_router_identity_received_from_ip_index,",
          "3108:       { \"Received From IP Address/Target Web Cache IP\", \"wccp.router_identity.received_from_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3109:         NULL, HFILL }",
          "3110:     },",
          "3111:     { &hf_router_identity_received_from_ipv4,",
          "3112:       { \"Received From IP Address/Target Web Cache IP\", \"wccp.router_identity.received_from_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3113:         NULL, HFILL }",
          "3114:     },",
          "3115:     { &hf_router_identity_received_from_ipv6,",
          "3116:       { \"Received From IP Address/Target Web Cache IP\", \"wccp.router_identity.received_from_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3123:     { &hf_wc_view_info_router_ip_index,",
          "3124:       { \"Router IP\", \"wccp.wc_view_info.router_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3125:         NULL, HFILL }",
          "3126:     },",
          "3127:     { &hf_wc_view_info_router_ipv4,",
          "3128:       { \"Router IP\", \"wccp.wc_view_info.router_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3129:         NULL, HFILL }",
          "3130:     },",
          "3131:     { &hf_wc_view_info_router_ipv6,",
          "3132:       { \"Router IP\", \"wccp.wc_view_info.router_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3135:     { &hf_wc_view_info_wc_ip_index,",
          "3136:       { \"Web Cache IP\", \"wccp.wc_view_info.wc_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3137:         NULL, HFILL }",
          "3138:     },",
          "3139:     { &hf_wc_view_info_wc_ipv4,",
          "3140:       { \"Web Cache IP\", \"wccp.wc_view_info.wc_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3141:         NULL, HFILL }",
          "3142:     },",
          "3143:     { &hf_wc_view_info_wc_ipv6,",
          "3144:       { \"Web Cache IP\", \"wccp.wc_view_info.wc_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3041:       { \"Number of Web Caches\", \"wccp.wc_view_info.wc_num\", FT_UINT32, BASE_DEC, 0x0, 0x0,",
          "3042:         NULL, HFILL }",
          "3043:     },",
          "3046:         \"The IP identifying the Web Cache\", HFILL }",
          "3047:     },",
          "3048:     { &hf_router_assignment_element_change_num,",
          "",
          "[Removed Lines]",
          "3044:     { &hf_wc_identity_ip_address,",
          "3045:       { \"Web Cache Identity\", \"wccp.hf_wc_identity_ip_address\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3155:     { &hf_wc_identity_ip_address_index,",
          "3156:       { \"Web Cache Identity\", \"wccp.wc_identity_ip_address.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3157:         \"The IP identifying the Web Cache\", HFILL }",
          "3158:     },",
          "3159:     { &hf_wc_identity_ip_address_ipv4,",
          "3160:       { \"Web Cache Identity\", \"wccp.wc_identity_ip_address.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3161:         \"The IP identifying the Web Cache\", HFILL }",
          "3162:     },",
          "3163:     { &hf_wc_identity_ip_address_ipv6,",
          "3164:       { \"Web Cache Identity\", \"wccp.wc_identity_ip_address.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3053:       { \"Number of Routers\", \"wccp.assignment_info.router_num\", FT_UINT32, BASE_DEC, NULL, 0x0,",
          "3054:         NULL, HFILL }",
          "3055:     },",
          "3058:         NULL, HFILL }",
          "3059:     },",
          "3060:     { &hf_hash_buckets_assignment_wc_num,",
          "3061:       { \"Number of WC\", \"wccp.hash_buckets_assignment.wc_num\", FT_UINT32, BASE_DEC, NULL, 0x0,",
          "3062:         NULL, HFILL }",
          "3063:     },",
          "3066:         NULL, HFILL }",
          "3067:     },",
          "3070:         NULL, HFILL }",
          "3071:     },",
          "3074:         NULL, HFILL }",
          "3075:     },",
          "3078:         NULL, HFILL }",
          "3079:     },",
          "3082:         NULL, HFILL }",
          "3083:     },",
          "3084:     { &hf_capability_element_type,",
          "",
          "[Removed Lines]",
          "3056:     { &hf_assignment_info_router_ip,",
          "3057:       { \"Router IP\", \"wccp.assignment_info.router_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3064:     { &hf_hash_buckets_assignment_wc_ip,",
          "3065:       { \"WC IP\", \"wccp.hash_buckets_assignment.wc_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3068:     { &hf_router_view_ip,",
          "3069:       { \"Router IP Address\", \"wccp.router_view.ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3072:     { &hf_router_query_info_ip,",
          "3073:       { \"Web-Cache Identity Element IP address\", \"wccp.router_query_info.ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3076:     { &hf_router_query_info_send_to_ip,",
          "3077:       { \"Sent To IP Address\", \"wccp.router_query_info.send_to_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3080:     { &hf_router_query_info_target_ip,",
          "3081:       { \"Target IP Address\", \"wccp.router_query_info.target_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3175:     { &hf_assignment_info_router_ip_index,",
          "3176:       { \"Router IP\", \"wccp.assignment_info.router_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3177:         NULL, HFILL }",
          "3178:     },",
          "3179:     { &hf_assignment_info_router_ipv4,",
          "3180:       { \"Router IP\", \"wccp.assignment_info.router_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3181:         NULL, HFILL }",
          "3182:     },",
          "3183:     { &hf_assignment_info_router_ipv6,",
          "3184:       { \"Router IP\", \"wccp.assignment_info.router_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3191:     { &hf_hash_buckets_assignment_wc_ip_index,",
          "3192:       { \"WC IP\", \"wccp.hash_buckets_assignment.wc_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3193:         NULL, HFILL }",
          "3194:     },",
          "3195:     { &hf_hash_buckets_assignment_wc_ipv4,",
          "3196:       { \"WC IP\", \"wccp.hash_buckets_assignment.wc_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3197:         NULL, HFILL }",
          "3198:     },",
          "3199:     { &hf_hash_buckets_assignment_wc_ipv6,",
          "3200:       { \"WC IP\", \"wccp.hash_buckets_assignment.wc_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3203:     { &hf_router_view_ip_index,",
          "3204:       { \"Router IP Address\", \"wccp.router_view.ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3207:     { &hf_router_view_ipv4,",
          "3208:       { \"Router IP Address\", \"wccp.router_view.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3211:     { &hf_router_view_ipv6,",
          "3212:       { \"Router IP Address\", \"wccp.router_view.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3215:     { &hf_router_query_info_ip_index,",
          "3216:       { \"Web-Cache Identity Element IP address\", \"wccp.router_query_info.ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3217:         NULL, HFILL }",
          "3218:     },",
          "3219:     { &hf_router_query_info_ipv4,",
          "3220:       { \"Web-Cache Identity Element IP address\", \"wccp.router_query_info.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3221:         NULL, HFILL }",
          "3222:     },",
          "3223:     { &hf_router_query_info_ipv6,",
          "3224:       { \"Web-Cache Identity Element IP address\", \"wccp.router_query_info.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3225:         NULL, HFILL }",
          "3226:     },",
          "3227:     { &hf_router_query_info_send_to_ip_index,",
          "3228:       { \"Sent To IP Address\", \"wccp.router_query_info.send_to_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3229:         NULL, HFILL }",
          "3230:     },",
          "3231:     { &hf_router_query_info_send_to_ipv4,",
          "3232:       { \"Sent To IP Address\", \"wccp.router_query_info.send_to_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3233:         NULL, HFILL }",
          "3234:     },",
          "3235:     { &hf_router_query_info_send_to_ipv6,",
          "3236:       { \"Sent To IP Address\", \"wccp.router_query_info.send_to_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3237:         NULL, HFILL }",
          "3238:     },",
          "3239:     { &hf_router_query_info_target_ip_index,",
          "3240:       { \"Target IP Address\", \"wccp.router_query_info.target_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3241:         NULL, HFILL }",
          "3242:     },",
          "3243:     { &hf_router_query_info_target_ipv4,",
          "3244:       { \"Target IP Address\", \"wccp.router_query_info.target_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3245:         NULL, HFILL }",
          "3246:     },",
          "3247:     { &hf_router_query_info_target_ipv6,",
          "3248:       { \"Target IP Address\", \"wccp.router_query_info.target_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3161:       { \"Reserved, must be 0\", \"wccp.reserved_zero\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3162:         NULL, HFILL }",
          "3163:     },",
          "3166:         NULL, HFILL }",
          "3167:     },",
          "3170:         NULL, HFILL }",
          "3171:     },",
          "3172:     { &hf_value_element_src_port,",
          "",
          "[Removed Lines]",
          "3164:     { &hf_value_element_src_ip,",
          "3165:       { \"Source Address\", \"wccp.value_element.src_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "3168:     { &hf_value_element_dest_ip,",
          "3169:       { \"Destination Address\", \"wccp.value_element.dest_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3331:     { &hf_value_element_src_ip_index,",
          "3332:       { \"Source Address\", \"wccp.value_element.src_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3335:     { &hf_value_element_src_ipv4,",
          "3336:       { \"Source Address\", \"wccp.value_element.src_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3337:         NULL, HFILL }",
          "3338:     },",
          "3339:     { &hf_value_element_src_ipv6,",
          "3340:       { \"Source Address\", \"wccp.value_element.src_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "3341:         NULL, HFILL }",
          "3342:     },",
          "3343:     { &hf_value_element_dest_ip_index,",
          "3344:       { \"Destination Address\", \"wccp.value_element.dest_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3345:         NULL, HFILL }",
          "3346:     },",
          "3347:     { &hf_value_element_dest_ipv4,",
          "3348:       { \"Destination Address\", \"wccp.value_element.dest_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3349:         NULL, HFILL }",
          "3350:     },",
          "3351:     { &hf_value_element_dest_ipv6,",
          "3352:       { \"Destination Address\", \"wccp.value_element.dest_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3177:       { \"Destination Port\", \"wccp.value_element.dest_port\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3178:         NULL, HFILL }",
          "3179:     },",
          "3182:         NULL, HFILL }",
          "3183:     },",
          "3184:     { &hf_mask_value_set_list_num_elements,",
          "",
          "[Removed Lines]",
          "3180:     { &hf_value_element_web_cache_ip,",
          "3181:       { \"Web Cache Address\", \"wccp.value_element.web_cache_ip\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3363:     { &hf_value_element_web_cache_ip_index,",
          "3364:       { \"Web Cache Address\", \"wccp.value_element.web_cache_ip.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3365:         NULL, HFILL }",
          "3366:     },",
          "3367:     { &hf_value_element_web_cache_ipv4,",
          "3368:       { \"Web Cache Address\", \"wccp.value_element.web_cache_ip.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3369:         NULL, HFILL }",
          "3370:     },",
          "3371:     { &hf_value_element_web_cache_ipv6,",
          "3372:       { \"Web Cache Address\", \"wccp.value_element.web_cache_ip.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3233:       { \"Number of Web-Cache Value Elements\", \"wccp.alt_assignment_mask_value_set_element.num_wc_value_elements\", FT_UINT32, BASE_DEC, NULL, 0x0,",
          "3234:         NULL, HFILL }",
          "3235:     },",
          "3238:         NULL, HFILL }",
          "3239:     },",
          "3240:     { &hf_web_cache_value_element_num_values,",
          "",
          "[Removed Lines]",
          "3236:     { &hf_web_cache_value_element_wc_address,",
          "3237:       { \"Web-Cache Address\", \"wccp.web_cache_value_element.wc_address\", FT_UINT32, BASE_CUSTOM, CF_FUNC(wccp_fmt_ipadddress), 0x0,",
          "",
          "[Added Lines]",
          "3427:     { &hf_web_cache_value_element_wc_address_index,",
          "3428:       { \"Web-Cache Address\", \"wccp.web_cache_value_element.wc_address.index\", FT_UINT32, BASE_HEX, NULL, 0x0,",
          "3429:         NULL, HFILL }",
          "3430:     },",
          "3431:     { &hf_web_cache_value_element_wc_address_ipv4,",
          "3432:       { \"Web-Cache Address\", \"wccp.web_cache_value_element.wc_address.ipv4\", FT_IPv4, BASE_NONE, NULL, 0x0,",
          "3433:         NULL, HFILL }",
          "3434:     },",
          "3435:     { &hf_web_cache_value_element_wc_address_ipv6,",
          "3436:       { \"Web-Cache Address\", \"wccp.web_cache_value_element.wc_address.ipv6\", FT_IPv6, BASE_NONE, NULL, 0x0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}