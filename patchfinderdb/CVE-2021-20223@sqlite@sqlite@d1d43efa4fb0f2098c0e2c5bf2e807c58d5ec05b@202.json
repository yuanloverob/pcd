{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef215fbf3b581ef4e0273bb3932fa522af88fd7e",
      "candidate_info": {
        "commit_hash": "ef215fbf3b581ef4e0273bb3932fa522af88fd7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef215fbf3b581ef4e0273bb3932fa522af88fd7e",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.33.0\n\nFossilOrigin-Name: fca8dc8b578f215a969cd899336378966156154710873e68b3d9ac5881b0ff3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b050976079ba4a22d4dfeadb81f40cf71da6588c95bf2b634d88b416de5accd7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c26e78d275134213fa35956b969efa9d5834a664",
      "candidate_info": {
        "commit_hash": "c26e78d275134213fa35956b969efa9d5834a664",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c26e78d275134213fa35956b969efa9d5834a664",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a spurious report of corruption that could be made by the fts5 integrity-check in SQLITE_DEBUG builds if the fts5 index contains malformed utf text.\n\nFossilOrigin-Name: a11b393dc2c882cf0b3c47c3405bf43ca1d6459605bd39cccce4d32da653a72d",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5723:   return rc;",
          "5724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5731: static int fts5TestUtf8(const char *z, int n){",
          "5732:   assert( n>0 );",
          "5733:   int i = 0;",
          "5734:   while( i<n ){",
          "5735:     if( (z[i] & 0x80)==0x00 ){",
          "5736:       i++;",
          "5737:     }else",
          "5738:     if( (z[i] & 0xE0)==0xC0 ){",
          "5739:       if( i+1>=n || (z[i+1] & 0xC0)!=0x80 ) return 1;",
          "5740:       i += 2;",
          "5741:     }else",
          "5742:     if( (z[i] & 0xF0)==0xE0 ){",
          "5743:       if( i+2>=n || (z[i+1] & 0xC0)!=0x80 || (z[i+2] & 0xC0)!=0x80 ) return 1;",
          "5744:       i += 3;",
          "5745:     }else",
          "5746:     if( (z[i] & 0xF8)==0xF0 ){",
          "5747:       if( i+3>=n || (z[i+1] & 0xC0)!=0x80 || (z[i+2] & 0xC0)!=0x80 ) return 1;",
          "5748:       if( (z[i+2] & 0xC0)!=0x80 ) return 1;",
          "5749:       i += 3;",
          "5750:     }else{",
          "5751:       return 1;",
          "5752:     }",
          "5753:   }",
          "5755:   return 0;",
          "5756: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5768:       if( iIdx>0 && rc==SQLITE_OK ){",
          "5769:         int f = flags|FTS5INDEX_QUERY_TEST_NOIDX;",
          "5770:         ck2 = 0;",
          "",
          "[Removed Lines]",
          "5767:     if( p->nPendingData==0 ){",
          "",
          "[Added Lines]",
          "5804:     if( p->nPendingData==0 && 0==fts5TestUtf8(zTerm, nTerm) ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   -4764623217061966105 8324454597464624651",
          "251: }",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #-------------------------------------------------------------------------",
          "254: #",
          "255: reset_db",
          "256: do_execsql_test 10.0 {",
          "257:   CREATE VIRTUAL TABLE vt1 USING fts5(c1, c2, prefix = 1, tokenize = \"ascii\");",
          "258:   INSERT INTO vt1 VALUES (x'e4', '\u452c');",
          "259: }",
          "261: do_execsql_test 10.1 {",
          "262:   SELECT quote(CAST(c1 AS blob)), quote(CAST(c2 AS blob)) FROM vt1",
          "263: } {X'E4' X'E494AC'}",
          "265: do_execsql_test 10.2 {",
          "266:   INSERT INTO vt1(vt1) VALUES('integrity-check');",
          "267: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b473ad35c5ce355853e1805a5c0658bda1500775f22f59c6b6759ae990e65aca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90996885fcad330e5773ae77b2f0276e9233bb47",
      "candidate_info": {
        "commit_hash": "90996885fcad330e5773ae77b2f0276e9233bb47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90996885fcad330e5773ae77b2f0276e9233bb47",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/select1.test"
        ],
        "message": "Fix the OP_Copy-coalesce optimization so that if the previous row happens to end with OP_Copy but is not a candidate for the optimization due to jumps, then the optimization is correctly bypassed.\n\nFossilOrigin-Name: b36126c1889e323c9a8f04b4f4884576993c845e7d393e5e73aaa6ab5158c1f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4889cbf898d7ec54f061b21b6d3621b22fc482cbeaa7115d40995a4cc30e41db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3620:         VdbeCoverage(v);",
          "3621:         sqlite3ExprCode(pParse, pFarg->a[i].pExpr, target);",
          "3622:       }",
          "3623:       sqlite3VdbeResolveLabel(v, endCoalesce);",
          "3624:       break;",
          "3625:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3623:       if( sqlite3VdbeGetOp(v, -1)->opcode==OP_Copy ){",
          "3625:       }",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:    WHERE ((SELECT t1.a FROM t1 AS x GROUP BY b) AND b=0)",
          "1198:       OR a = 10;",
          "1199: } {10 Y}",
          "1201: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200: do_execsql_test select-20.20 {",
          "1201:   SELECT ifnull(a, max((SELECT 123))), count(a) FROM t1 ;",
          "1202: } {10 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f1fa5de045a3f1b8c08373ace7adea04ab81021",
      "candidate_info": {
        "commit_hash": "0f1fa5de045a3f1b8c08373ace7adea04ab81021",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f1fa5de045a3f1b8c08373ace7adea04ab81021",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c"
        ],
        "message": "Patch to the page cache to avoid harmless pointer arithmetic that due to bugs in the STD-C spec is technically UB.  This is to fix a harmless UBSAN complaint that OSSFuzz is hitting.\n\nFossilOrigin-Name: c29fc21288e37f81a1617c5e2961c575d3bca6a1d1b013b2e0a99774afb1dcdb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c1014e80b26131200a115beb86929a8f0ded2dd65b075e47373346c0f170576a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     }",
          "449: #else",
          "450:     pPg = pcache1Alloc(pCache->szAlloc);",
          "452: #endif",
          "453:     if( benignMalloc ){ sqlite3EndBenignMalloc(); }",
          "454: #ifdef SQLITE_ENABLE_MEMORY_MANAGEMENT",
          "455:     pcache1EnterMutex(pCache->pGroup);",
          "456: #endif",
          "457:     if( pPg==0 ) return 0;",
          "458:     p->page.pBuf = pPg;",
          "459:     p->page.pExtra = &p[1];",
          "460:     p->isBulkLocal = 0;",
          "",
          "[Removed Lines]",
          "451:     p = (PgHdr1 *)&((u8 *)pPg)[pCache->szPage];",
          "",
          "[Added Lines]",
          "457: #ifndef SQLITE_PCACHE_SEPARATE_HEADER",
          "458:     p = (PgHdr1 *)&((u8 *)pPg)[pCache->szPage];",
          "459: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d321b6f4ad264a47c56fe752158ca528e679994d",
      "candidate_info": {
        "commit_hash": "d321b6f4ad264a47c56fe752158ca528e679994d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d321b6f4ad264a47c56fe752158ca528e679994d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 3ca0b7d54d73d07cd6b32e650a809174bb1cd66ce5ecdb36f65b70899ea05824",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dca5b91926431768babac28a6faf7674a5014db95caba727995b470e92b3182a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ]
      }
    }
  ]
}