{
  "cve_id": "CVE-2018-11376",
  "cve_desc": "The r_read_le32() function in radare2 2.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted ELF file.",
  "repo": "radare/radare2",
  "patch_hash": "1f37c04f2a762500222dda2459e6a04646feeedf",
  "patch_info": {
    "commit_hash": "1f37c04f2a762500222dda2459e6a04646feeedf",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/1f37c04f2a762500222dda2459e6a04646feeedf",
    "files": [
      "libr/bin/p/bin_elf.c",
      "libr/core/cbin.c"
    ],
    "message": "Fix #9904 - crash in r2_hoobr_r_read_le32 (over 9000 entrypoints) and read_le oobread (#9923)",
    "before_after_code_files": [
      "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
      "libr/core/cbin.c||libr/core/cbin.c"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
      "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "348:    }",
      "349:    (void)r_buf_read_at (bf->buf, sec->paddr, buf, sec->size);",
      "350:    if (bits == 32) {",
      "352:      ut32 addr32 = r_read_le32 (buf + i);",
      "353:      if (addr32) {",
      "354:       RBinAddr *ba = newEntry (sec->paddr + i, (ut64)addr32, type, bits);",
      "",
      "[Removed Lines]",
      "351:     for (i = 0; i < sec->size; i += 4) {",
      "",
      "[Added Lines]",
      "351:     for (i = 0; (i + 3) < sec->size; i += 4) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356:      }",
      "357:     }",
      "358:    } else {",
      "360:      ut64 addr64 = r_read_le64 (buf + i);",
      "361:      if (addr64) {",
      "362:       RBinAddr *ba = newEntry (sec->paddr + i, addr64, type, bits);",
      "",
      "[Removed Lines]",
      "359:     for (i = 0; i < sec->size; i += 8) {",
      "",
      "[Added Lines]",
      "359:     for (i = 0; (i + 7) < sec->size; i += 8) {",
      "",
      "---------------"
    ],
    "libr/core/cbin.c||libr/core/cbin.c": [
      "File: libr/core/cbin.c -> libr/core/cbin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1044:    r_cons_printf (\"[Entrypoints]\\n\");",
      "1045:   }",
      "1046:  }",
      "1048:  r_list_foreach (entries, iter, entry) {",
      "1049:   ut64 paddr = entry->paddr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1047:  if (r_list_length (entries) > 1024) {",
      "1048:   eprintf (\"Too many entrypoints (%d)\\n\", r_list_length (entries));",
      "1049:   return false;",
      "1050:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ef73c087621cdb395ebc2742764ec07422a7b6b",
      "candidate_info": {
        "commit_hash": "5ef73c087621cdb395ebc2742764ec07422a7b6b",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/5ef73c087621cdb395ebc2742764ec07422a7b6b",
        "files": [
          "libr/bin/p/bin_elf.c",
          "libr/core/cbin.c",
          "libr/include/r_bin.h"
        ],
        "message": "Declare elf preinit/init/fini array entries as data (#10858)\n\n* Declare elf preinit/init/fini array entries as data\n* Using rva\n* Use entry->bits instead of info->bits",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
          "libr/core/cbin.c||libr/core/cbin.c",
          "libr/include/r_bin.h||libr/include/r_bin.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
            "libr/core/cbin.c||libr/core/cbin.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
            "libr/core/cbin.c||libr/core/cbin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:  return ret;",
          "309: }",
          "312:  RBinAddr *ptr = R_NEW0 (RBinAddr);",
          "313:  if (ptr) {",
          "314:   ptr->paddr = paddr;",
          "315:   ptr->vaddr = paddr;",
          "316:   ptr->haddr = haddr;",
          "317:   ptr->bits = bits;",
          "318:   ptr->type = type;",
          "",
          "[Removed Lines]",
          "311: static RBinAddr* newEntry(ut64 haddr, ut64 paddr, int type, int bits) {",
          "",
          "[Added Lines]",
          "311: static RBinAddr* newEntry(ut64 haddr, ut64 hvaddr, ut64 paddr, int type, int bits) {",
          "317:   ptr->hvaddr = hvaddr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:     for (i = 0; (i + 3) < sec->size; i += 4) {",
          "350:      ut32 addr32 = r_read_le32 (buf + i);",
          "351:      if (addr32) {",
          "353:       r_list_append (ret, ba);",
          "354:      }",
          "355:     }",
          "",
          "[Removed Lines]",
          "352:       RBinAddr *ba = newEntry (sec->paddr + i, (ut64)addr32, type, bits);",
          "",
          "[Added Lines]",
          "353:       RBinAddr *ba = newEntry (sec->paddr + i, sec->vaddr + i,",
          "354:                                (ut64)addr32, type, bits);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:     for (i = 0; (i + 7) < sec->size; i += 8) {",
          "358:      ut64 addr64 = r_read_le64 (buf + i);",
          "359:      if (addr64) {",
          "361:       r_list_append (ret, ba);",
          "362:      }",
          "363:     }",
          "",
          "[Removed Lines]",
          "360:       RBinAddr *ba = newEntry (sec->paddr + i, addr64, type, bits);",
          "",
          "[Added Lines]",
          "362:       RBinAddr *ba = newEntry (sec->paddr + i, sec->vaddr + i,",
          "363:                                addr64, type, bits);",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:  r_list_foreach (entries, iter, entry) {",
          "1076:   ut64 paddr = entry->paddr;",
          "1077:   ut64 haddr = UT64_MAX;",
          "1078:   if (mode != R_CORE_BIN_SET) {",
          "1079:    if (inifin) {",
          "1080:     if (entry->type == R_BIN_ENTRY_TYPE_PROGRAM) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:   ut64 hvaddr = UT64_MAX;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:   if (entry->haddr) {",
          "1101:    haddr = entry->haddr;",
          "1102:   }",
          "1103:   ut64 at = rva (r->bin, paddr, entry->vaddr, va);",
          "1104:   const char *type = r_bin_entry_type_string (entry->type);",
          "1105:   if (!type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:   if (entry->hvaddr) {",
          "1105:    hvaddr = entry->hvaddr;",
          "1106:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1117:     snprintf (str, R_FLAG_NAME_SIZE, \"entry%i\", i);",
          "1118:    }",
          "1119:    r_flag_set (r->flags, str, at, 1);",
          "1120:   } else if (IS_MODE_SIMPLE (mode)) {",
          "1121:    r_cons_printf (\"0x%08\"PFMT64x\"\\n\", at);",
          "1122:   } else if (IS_MODE_JSON (mode)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1124:    switch (entry->type) {",
          "1125:    case R_BIN_ENTRY_TYPE_INIT:",
          "1126:    case R_BIN_ENTRY_TYPE_FINI:",
          "1127:    case R_BIN_ENTRY_TYPE_PREINIT:",
          "1128:     if (haddr != UT64_MAX && hvaddr != UT64_MAX) {",
          "1129:      ut64 elem_addr = rva (r->bin, haddr, hvaddr, va);",
          "1130:      r_meta_add (r->anal, R_META_TYPE_DATA, elem_addr,",
          "1131:                  elem_addr + entry->bits / 8, NULL);",
          "1132:     }",
          "1133:    }",
          "",
          "---------------"
        ],
        "libr/include/r_bin.h||libr/include/r_bin.h": [
          "File: libr/include/r_bin.h -> libr/include/r_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  ut64 vaddr;",
          "171:  ut64 paddr;",
          "172:  ut64 haddr;",
          "173:  int type;",
          "174:  int bits;",
          "175: } RBinAddr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:  ut64 hvaddr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1137e2e09203799ab6ecabfda4834cbde805418",
      "candidate_info": {
        "commit_hash": "d1137e2e09203799ab6ecabfda4834cbde805418",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/d1137e2e09203799ab6ecabfda4834cbde805418",
        "files": [
          "libr/bin/p/bin_elf.c",
          "libr/core/cmd_anal.c"
        ],
        "message": "Fix 2 more memleaks",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: static int get_file_type(RBinFile *bf) {",
          "17:  struct Elf_(r_bin_elf_obj_t) *obj = bf->o->bin_obj;",
          "18:  char *type = Elf_(r_bin_elf_get_file_type (obj));",
          "20: }",
          "22: static RList *maps(RBinFile *bf) {",
          "",
          "[Removed Lines]",
          "19:  return type? ((!strncmp (type, \"CORE\", 4)) ? R_BIN_TYPE_CORE : R_BIN_TYPE_DEFAULT) : -1;",
          "",
          "[Added Lines]",
          "19:  int res = type? ((!strncmp (type, \"CORE\", 4)) ? R_BIN_TYPE_CORE : R_BIN_TYPE_DEFAULT) : -1;",
          "20:  free (type);",
          "21:  return res;",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1315:     eprintf (\"%02x \", buf[i]);",
          "1316:    }",
          "1317:    eprintf (\"...)\\n\");",
          "1318:    break;",
          "1319:   }",
          "1320:   size = (hint && hint->size)? hint->size: op.size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1318:    free (mnem);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6321:     }",
          "6322:    }",
          "6323:    free (ptr);",
          "6324:    return 1;",
          "6325:   }",
          "6326:  } else if (n == 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6325:    r_list_free (list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a608899a1d5936baf607135161f63809c0e94b8",
      "candidate_info": {
        "commit_hash": "9a608899a1d5936baf607135161f63809c0e94b8",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/9a608899a1d5936baf607135161f63809c0e94b8",
        "files": [
          "libr/bin/p/bin_elf.c"
        ],
        "message": "Improved comment slightly",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:  }",
          "391:  ptr->paddr = Elf_(r_bin_elf_get_entry_offset) (obj);",
          "392:  ptr->vaddr = Elf_(r_bin_elf_p2v) (obj, ptr->paddr);",
          "395:  if (obj->ehdr.e_machine == EM_ARM) {",
          "396:   int bin_bits = Elf_(r_bin_elf_get_bits) (obj);",
          "",
          "[Removed Lines]",
          "393:  ptr->hpaddr = 0x18;  // e_entry offset",
          "",
          "[Added Lines]",
          "393:  ptr->hpaddr = 0x18;  // e_entry offset in ELF header",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6436cc5934a4b4745254430d17441d6f7f8f9234",
      "candidate_info": {
        "commit_hash": "6436cc5934a4b4745254430d17441d6f7f8f9234",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/6436cc5934a4b4745254430d17441d6f7f8f9234",
        "files": [
          "libr/bin/p/bin_elf.c",
          "libr/core/cbin.c"
        ],
        "message": "Fix rabin2 -ee paddr (#11210)",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
          "libr/core/cbin.c||libr/core/cbin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
            "libr/core/cbin.c||libr/core/cbin.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
            "libr/core/cbin.c||libr/core/cbin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:  return ret;",
          "309: }",
          "313:  if (ptr) {",
          "316:   ptr->hpaddr = hpaddr;",
          "317:   ptr->hvaddr = hvaddr;",
          "318:   ptr->bits = bits;",
          "",
          "[Removed Lines]",
          "311: static RBinAddr* newEntry(ut64 hpaddr, ut64 hvaddr, ut64 paddr, int type, int bits) {",
          "312:  RBinAddr *ptr = R_NEW0 (RBinAddr);",
          "314:   ptr->paddr = paddr;",
          "315:   ptr->vaddr = paddr;",
          "",
          "[Added Lines]",
          "311: static RBinAddr* newEntry(RBinFile *bf, ut64 hpaddr, ut64 hvaddr, ut64 vaddr, int type, int bits) {",
          "312:  struct Elf_(r_bin_elf_obj_t)* obj;",
          "313:  RBinAddr *ptr;",
          "315:  if (!bf || !bf->o || !bf->o->bin_obj) {",
          "316:   return NULL;",
          "317:  }",
          "318:  obj = bf->o->bin_obj;",
          "319:  ptr = R_NEW0 (RBinAddr);",
          "321:   ptr->paddr = Elf_(r_bin_elf_v2p) (obj, vaddr);",
          "322:   ptr->vaddr = vaddr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:     for (i = 0; (i + 3) < sec->size; i += 4) {",
          "351:      ut32 addr32 = r_read_le32 (buf + i);",
          "352:      if (addr32) {",
          "354:                                (ut64)addr32, type, bits);",
          "355:       r_list_append (ret, ba);",
          "356:      }",
          "",
          "[Removed Lines]",
          "353:       RBinAddr *ba = newEntry (sec->paddr + i, sec->vaddr + i,",
          "",
          "[Added Lines]",
          "360:       RBinAddr *ba = newEntry (bf, sec->paddr + i, sec->vaddr + i,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:     for (i = 0; (i + 7) < sec->size; i += 8) {",
          "360:      ut64 addr64 = r_read_le64 (buf + i);",
          "361:      if (addr64) {",
          "363:                                addr64, type, bits);",
          "364:       r_list_append (ret, ba);",
          "365:      }",
          "",
          "[Removed Lines]",
          "362:       RBinAddr *ba = newEntry (sec->paddr + i, sec->vaddr + i,",
          "",
          "[Added Lines]",
          "369:       RBinAddr *ba = newEntry (bf, sec->paddr + i, sec->vaddr + i,",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:     }",
          "1141:    }",
          "1142:   }",
          "1149:   if (entry->hpaddr) {",
          "1150:    hpaddr = entry->hpaddr;",
          "1151:    if (entry->hvaddr) {",
          "",
          "[Removed Lines]",
          "1143:   if (is_initfini (entry) && r->io->va && entry->paddr == entry->vaddr) {",
          "1144:    RIOMap *map = r_io_map_get (r->io, entry->vaddr);",
          "1145:    if (map) {",
          "1146:     paddr = entry->vaddr - map->itv.addr + map->delta;",
          "1147:    }",
          "1148:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c476a1b5b2e3192ad22206c97ae1ab587982190",
      "candidate_info": {
        "commit_hash": "5c476a1b5b2e3192ad22206c97ae1ab587982190",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/5c476a1b5b2e3192ad22206c97ae1ab587982190",
        "files": [
          "libr/bin/p/bin_elf.c",
          "libr/util/buf.c"
        ],
        "message": "bin_elf.c: use sizeof(Ehdr) instead of hardcoded number (#10963)",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
          "libr/util/buf.c||libr/util/buf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1168:  } else {",
          "1169:   #define ROW(nam,siz,val,fmt) \\",
          "1172:    return ret;",
          "1173:   }",
          "1174:   ut64 addr = 0;",
          "",
          "[Removed Lines]",
          "1170:   r_list_append (ret, r_bin_field_new (addr, addr, siz, nam, sdb_fmt (\"0x%08x\", val), fmt));",
          "1171:   if (left < 40) {",
          "",
          "[Added Lines]",
          "1170:    r_list_append (ret, r_bin_field_new (addr, addr, siz, nam, sdb_fmt (\"0x%08x\", val), fmt));",
          "1171:   if (left < sizeof (Elf_(Ehdr))) {",
          "",
          "---------------"
        ],
        "libr/util/buf.c||libr/util/buf.c": [
          "File: libr/util/buf.c -> libr/util/buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "686:  return len;",
          "687: }",
          "690:  if (b->empty) {",
          "691:   return NULL;",
          "692:  }",
          "",
          "[Removed Lines]",
          "689: R_API ut8 *r_buf_get_at (RBuffer *b, ut64 addr, int *left) {",
          "",
          "[Added Lines]",
          "689: R_API ut8 *r_buf_get_at(RBuffer *b, ut64 addr, int *left) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}