{
  "cve_id": "CVE-2018-25032",
  "cve_desc": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
  "repo": "madler/zlib",
  "patch_hash": "5c44459c3b28a9bd3283aaceab7c615f8020c531",
  "patch_info": {
    "commit_hash": "5c44459c3b28a9bd3283aaceab7c615f8020c531",
    "repo": "madler/zlib",
    "commit_url": "https://github.com/madler/zlib/commit/5c44459c3b28a9bd3283aaceab7c615f8020c531",
    "files": [
      "deflate.c",
      "deflate.h",
      "trees.c"
    ],
    "message": "Fix a bug that can crash deflate on some input when using Z_FIXED.\n\nThis bug was reported by Danilo Ramos of Eideticom, Inc. It has\nlain in wait 13 years before being found! The bug was introduced\nin zlib 1.2.2.2, with the addition of the Z_FIXED option. That\noption forces the use of fixed Huffman codes. For rare inputs with\na large number of distant matches, the pending buffer into which\nthe compressed data is written can overwrite the distance symbol\ntable which it overlays. That results in corrupted output due to\ninvalid distances, and can result in out-of-bound accesses,\ncrashing the application.\n\nThe fix here combines the distance buffer and literal/length\nbuffers into a single symbol buffer. Now three bytes of pending\nbuffer space are opened up for each literal or length/distance\npair consumed, instead of the previous two bytes. This assures\nthat the pending buffer cannot overwrite the symbol table, since\nthe maximum fixed code compressed length/distance is 31 bits, and\nsince there are four bytes of pending space for every three bytes\nof symbol space.",
    "before_after_code_files": [
      "deflate.c||deflate.c",
      "deflate.h||deflate.h",
      "trees.c||trees.c"
    ]
  },
  "patch_diff": {
    "deflate.c||deflate.c": [
      "File: deflate.c -> deflate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "255:     int wrap = 1;",
      "256:     static const char my_version[] = ZLIB_VERSION;",
      "263:     if (version == Z_NULL || version[0] != my_version[0] ||",
      "264:         stream_size != sizeof(z_stream)) {",
      "265:         return Z_VERSION_ERROR;",
      "",
      "[Removed Lines]",
      "258:     ushf *overlay;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "336:     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||",
      "337:         s->pending_buf == Z_NULL) {",
      "",
      "[Removed Lines]",
      "332:     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);",
      "333:     s->pending_buf = (uchf *) overlay;",
      "334:     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);",
      "",
      "[Added Lines]",
      "366:     s->pending_buf = (uchf *) ZALLOC(strm, s->lit_bufsize, 4);",
      "367:     s->pending_buf_size = (ulg)s->lit_bufsize * 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "340:         deflateEnd (strm);",
      "341:         return Z_MEM_ERROR;",
      "342:     }",
      "346:     s->level = level;",
      "347:     s->strategy = strategy;",
      "",
      "[Removed Lines]",
      "343:     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);",
      "344:     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;",
      "",
      "[Added Lines]",
      "376:     s->sym_buf = s->pending_buf + s->lit_bufsize;",
      "377:     s->sym_end = (s->lit_bufsize - 1) * 3;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "553:     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;",
      "554:     s = strm->state;",
      "556:         return Z_BUF_ERROR;",
      "557:     do {",
      "558:         put = Buf_size - s->bi_valid;",
      "",
      "[Removed Lines]",
      "555:     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))",
      "",
      "[Added Lines]",
      "592:     if (s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1113: #else",
      "1114:     deflate_state *ds;",
      "1115:     deflate_state *ss;",
      "1119:     if (deflateStateCheck(source) || dest == Z_NULL) {",
      "",
      "[Removed Lines]",
      "1116:     ushf *overlay;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1133:     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));",
      "1134:     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));",
      "1135:     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));",
      "1139:     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||",
      "1140:         ds->pending_buf == Z_NULL) {",
      "",
      "[Removed Lines]",
      "1136:     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);",
      "1137:     ds->pending_buf = (uchf *) overlay;",
      "",
      "[Added Lines]",
      "1172:     ds->pending_buf = (uchf *) ZALLOC(dest, ds->lit_bufsize, 4);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1148:     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);",
      "1150:     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);",
      "1154:     ds->l_desc.dyn_tree = ds->dyn_ltree;",
      "1155:     ds->d_desc.dyn_tree = ds->dyn_dtree;",
      "",
      "[Removed Lines]",
      "1151:     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);",
      "1152:     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;",
      "",
      "[Added Lines]",
      "1186:     ds->sym_buf = ds->pending_buf + ds->lit_bufsize;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1925:         FLUSH_BLOCK(s, 1);",
      "1926:         return finish_done;",
      "1927:     }",
      "1929:         FLUSH_BLOCK(s, 0);",
      "1930:     return block_done;",
      "1931: }",
      "",
      "[Removed Lines]",
      "1928:     if (s->last_lit)",
      "",
      "[Added Lines]",
      "1962:     if (s->sym_next)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2056:         FLUSH_BLOCK(s, 1);",
      "2057:         return finish_done;",
      "2058:     }",
      "2060:         FLUSH_BLOCK(s, 0);",
      "2061:     return block_done;",
      "2062: }",
      "",
      "[Removed Lines]",
      "2059:     if (s->last_lit)",
      "",
      "[Added Lines]",
      "2093:     if (s->sym_next)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2131:         FLUSH_BLOCK(s, 1);",
      "2132:         return finish_done;",
      "2133:     }",
      "2135:         FLUSH_BLOCK(s, 0);",
      "2136:     return block_done;",
      "2137: }",
      "",
      "[Removed Lines]",
      "2134:     if (s->last_lit)",
      "",
      "[Added Lines]",
      "2168:     if (s->sym_next)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2170:         FLUSH_BLOCK(s, 1);",
      "2171:         return finish_done;",
      "2172:     }",
      "2174:         FLUSH_BLOCK(s, 0);",
      "2175:     return block_done;",
      "2176: }",
      "",
      "[Removed Lines]",
      "2173:     if (s->last_lit)",
      "",
      "[Added Lines]",
      "2207:     if (s->sym_next)",
      "",
      "---------------"
    ],
    "deflate.h||deflate.h": [
      "File: deflate.h -> deflate.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "244:     ushf *d_buf;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "326: # define _tr_tally_lit(s, c, flush) \\",
      "327:   { uch cc = (c); \\",
      "330:     s->dyn_ltree[cc].Freq++; \\",
      "332:    }",
      "333: # define _tr_tally_dist(s, distance, length, flush) \\",
      "334:   { uch len = (uch)(length); \\",
      "335:     ush dist = (ush)(distance); \\",
      "338:     dist--; \\",
      "339:     s->dyn_ltree[_length_code[len]+LITERALS+1].Freq++; \\",
      "340:     s->dyn_dtree[d_code(dist)].Freq++; \\",
      "342:   }",
      "343: #else",
      "344: # define _tr_tally_lit(s, c, flush) flush = _tr_tally(s, 0, c)",
      "",
      "[Removed Lines]",
      "328:     s->d_buf[s->last_lit] = 0; \\",
      "329:     s->l_buf[s->last_lit++] = cc; \\",
      "331:     flush = (s->last_lit == s->lit_bufsize-1); \\",
      "336:     s->d_buf[s->last_lit] = dist; \\",
      "337:     s->l_buf[s->last_lit++] = len; \\",
      "341:     flush = (s->last_lit == s->lit_bufsize-1); \\",
      "",
      "[Added Lines]",
      "323:     s->sym_buf[s->sym_next++] = 0; \\",
      "324:     s->sym_buf[s->sym_next++] = 0; \\",
      "325:     s->sym_buf[s->sym_next++] = cc; \\",
      "327:     flush = (s->sym_next == s->sym_end); \\",
      "332:     s->sym_buf[s->sym_next++] = dist; \\",
      "333:     s->sym_buf[s->sym_next++] = dist >> 8; \\",
      "334:     s->sym_buf[s->sym_next++] = len; \\",
      "338:     flush = (s->sym_next == s->sym_end); \\",
      "",
      "---------------"
    ],
    "trees.c||trees.c": [
      "File: trees.c -> trees.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     s->dyn_ltree[END_BLOCK].Freq = 1;",
      "418:     s->opt_len = s->static_len = 0L;",
      "420: }",
      "422: #define SMALLEST 1",
      "",
      "[Removed Lines]",
      "419:     s->last_lit = s->matches = 0;",
      "",
      "[Added Lines]",
      "419:     s->sym_next = s->matches = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "949:         Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",",
      "950:                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,",
      "953:         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;",
      "",
      "[Removed Lines]",
      "951:                 s->last_lit));",
      "",
      "[Added Lines]",
      "951:                 s->sym_next / 3));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1019: {",
      "1022:     if (dist == 0) {",
      "1024:         s->dyn_ltree[lc].Freq++;",
      "",
      "[Removed Lines]",
      "1020:     s->d_buf[s->last_lit] = (ush)dist;",
      "1021:     s->l_buf[s->last_lit++] = (uch)lc;",
      "",
      "[Added Lines]",
      "1020:     s->sym_buf[s->sym_next++] = dist;",
      "1021:     s->sym_buf[s->sym_next++] = dist >> 8;",
      "1022:     s->sym_buf[s->sym_next++] = lc;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1033:         s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;",
      "1034:         s->dyn_dtree[d_code(dist)].Freq++;",
      "1035:     }",
      "1060: }",
      "",
      "[Removed Lines]",
      "1037: #ifdef TRUNCATE_BLOCK",
      "1039:     if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {",
      "1041:         ulg out_length = (ulg)s->last_lit*8L;",
      "1042:         ulg in_length = (ulg)((long)s->strstart - s->block_start);",
      "1043:         int dcode;",
      "1044:         for (dcode = 0; dcode < D_CODES; dcode++) {",
      "1045:             out_length += (ulg)s->dyn_dtree[dcode].Freq *",
      "1046:                 (5L+extra_dbits[dcode]);",
      "1047:         }",
      "1048:         out_length >>= 3;",
      "1049:         Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",",
      "1050:                s->last_lit, in_length, out_length,",
      "1051:                100L - out_length*100L/in_length));",
      "1052:         if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;",
      "1053:     }",
      "1054: #endif",
      "1055:     return (s->last_lit == s->lit_bufsize-1);",
      "",
      "[Added Lines]",
      "1037:     return (s->sym_next == s->sym_end);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1069: {",
      "1079:         if (dist == 0) {",
      "1081:             Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));",
      "",
      "[Removed Lines]",
      "1076:     if (s->last_lit != 0) do {",
      "1077:         dist = s->d_buf[lx];",
      "1078:         lc = s->l_buf[lx++];",
      "",
      "[Added Lines]",
      "1054:     if (s->sym_next != 0) do {",
      "1055:         dist = s->sym_buf[sx++] & 0xff;",
      "1056:         dist += (unsigned)(s->sym_buf[sx++] & 0xff) << 8;",
      "1057:         lc = s->sym_buf[sx++];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1100:             }",
      "1109:     send_code(s, END_BLOCK, ltree);",
      "1110: }",
      "",
      "[Removed Lines]",
      "1104:         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,",
      "1105:                \"pendingBuf overflow\");",
      "1107:     } while (lx < s->last_lit);",
      "",
      "[Added Lines]",
      "1083:         Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");",
      "1085:     } while (sx < s->sym_next);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4346a16853e19b45787ce933666026903fb8f3f8",
      "candidate_info": {
        "commit_hash": "4346a16853e19b45787ce933666026903fb8f3f8",
        "repo": "madler/zlib",
        "commit_url": "https://github.com/madler/zlib/commit/4346a16853e19b45787ce933666026903fb8f3f8",
        "files": [
          "deflate.c"
        ],
        "message": "Assure that the number of bits for deflatePrime() is valid.",
        "before_after_code_files": [
          "deflate.c||deflate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deflate.c||deflate.c"
          ],
          "candidate": [
            "deflate.c||deflate.c"
          ]
        }
      },
      "candidate_diff": {
        "deflate.c||deflate.c": [
          "File: deflate.c -> deflate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;",
          "591:     s = strm->state;",
          "593:         return Z_BUF_ERROR;",
          "594:     do {",
          "595:         put = Buf_size - s->bi_valid;",
          "",
          "[Removed Lines]",
          "592:     if (s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))",
          "",
          "[Added Lines]",
          "592:     if (bits < 0 || bits > 16 ||",
          "593:         s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))",
          "",
          "---------------"
        ]
      }
    }
  ]
}