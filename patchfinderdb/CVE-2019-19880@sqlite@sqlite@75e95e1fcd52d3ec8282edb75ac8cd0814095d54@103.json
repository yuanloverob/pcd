{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
      "candidate_info": {
        "commit_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak introduced by [55c5d72a].\n\nFossilOrigin-Name: fbd681dce2905d8b8ad7948ba684b0b62d6c04be0f7a2992ee7d6836a99010de",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     }",
          "2570:   }",
          "2574:   assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2572:   if( rc!=SQLITE_OK ){",
          "2573:     sqlite3_free(aOut);",
          "2574:     p = aOut = 0;",
          "2575:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e717c4377c0116a5d36815fbc30f8b8803f14770d30be361feb27cc5b5b537b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
      "candidate_info": {
        "commit_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d92571d65393ae87f01f533eee2a6075b122efc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/check.test",
          "test/quote.test"
        ],
        "message": "Disallow string constants enclosed in double-quotes within new CREATE TABLE and CREATE INDEX statements. It is still possible to enclose column names in double-quotes, and existing database schemas that use double-quotes for strings can still be loaded. This addresses ticket [9b78184b].\n\nFossilOrigin-Name: 1685610ef8e0dc9218b02461ceab14dc6114f4f5ef7fcda0da395094aff443e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/check.test||test/check.test",
          "test/quote.test||test/quote.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted) ){",
          "",
          "[Added Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NewSchema)",
          "481:     ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1656: ){",
          "1658:   Walker w;",
          "1660:   if( pExpr==0 ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1657:   u16 savedHasAgg;",
          "",
          "[Added Lines]",
          "1659:   int savedHasAgg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1769:   sNC.pParse = pParse;",
          "1770:   sNC.pSrcList = &sSrc;",
          "1771:   sNC.ncFlags = type;",
          "1772:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1773:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1774:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:   if( pTab && !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NewSchema;",
          "1776:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: do_test check-2.1 {",
          "119:   execsql {",
          "120:     CREATE TABLE t2(",
          "121:       x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))==\"integer\" ),",
          "122:       y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "123:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "124:     );",
          "125:   }",
          "126: } {}",
          "127: do_test check-2.2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     PRAGMA writable_schema = 1;",
          "126:     PRAGMA writable_schema = 0;",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "20: # Create a table with a strange name and with strange column names.",
          "21: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: set testprefix quote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   } msg ]",
          "85:   lappend r $msg",
          "86: } {0 {}}",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #-------------------------------------------------------------------------",
          "90: # Check that it is not possible to use double-quotes for a string",
          "91: # constant in a CHECK constraint or CREATE INDEX statement. However,",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "98: foreach {tn sql errname} {",
          "99:   1 { CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") ) } null",
          "100:   2 { CREATE INDEX i2 ON t1(x, y, z||\"abc\") }        abc",
          "101:   3 { CREATE INDEX i3 ON t1(\"w\") }                   w",
          "102:   4 { CREATE INDEX i4 ON t1(x) WHERE z=\"w\" }         w",
          "103: } {",
          "104:   do_catchsql_test 2.1.$tn $sql [list 1 \"no such column: $errname\"]",
          "105: }",
          "107: do_execsql_test 2.2 {",
          "108:   PRAGMA writable_schema = 1;",
          "109:   CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") );",
          "110:   CREATE INDEX i2 ON t1(x, y, z||\"abc\");",
          "111:   CREATE INDEX i3 ON t1(\"w\");",
          "112:   CREATE INDEX i4 ON t1(x) WHERE z=\"w\";",
          "113: }",
          "115: db close",
          "116: sqlite3 db test.db",
          "118: do_execsql_test 2.3.1 {",
          "119:   INSERT INTO xyz VALUES(1, 2, 3);",
          "120: }",
          "121: do_catchsql_test 2.3.2 {",
          "122:   INSERT INTO xyz VALUES(1, 2, 'null');",
          "123: } {1 {CHECK constraint failed: xyz}}",
          "125: do_execsql_test 2.4 {",
          "126:   INSERT INTO t1 VALUES(1, 2, 3);",
          "127:   INSERT INTO t1 VALUES(4, 5, 'w');",
          "128:   SELECT * FROM t1 WHERE z='w';",
          "129: } {4 5 w}",
          "130: do_execsql_test 2.5 {",
          "131:   SELECT sql FROM sqlite_master;",
          "132: } {",
          "133:   {CREATE TABLE t1(x, y, z)}",
          "134:   {CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") )}",
          "135:   {CREATE INDEX i2 ON t1(x, y, z||\"abc\")}",
          "136:   {CREATE INDEX i3 ON t1(\"w\")}",
          "137:   {CREATE INDEX i4 ON t1(x) WHERE z=\"w\"}",
          "138: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
      "candidate_info": {
        "commit_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "files": [
          "ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "test/fts3atoken.test"
        ],
        "message": "The fts3_tokenizer() function returns NULL if the SQLITE_DBCONFIG_ENABLE_FTS_TOKENIZER setting is disabled, which is is by default.\n\nFossilOrigin-Name: f5732f4caf7a37a6445c61ae0d0ac14cc9deb897376e73aa36a1ead025b92c69",
        "before_after_code_files": [
          "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers": [
          "File: ext/fts3/README.tokenizers -> ext/fts3/README.tokenizers",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   SECURITY: If the fts3 extension is used in an environment where potentially",
          "54:     malicious users may execute arbitrary SQL (i.e. gears), they should be",
          "58:   See \"Sample code\" below for an example of calling the fts3_tokenizer()",
          "59:   function from C code.",
          "",
          "[Removed Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function, possibly using the",
          "56:     authorisation callback.",
          "",
          "[Added Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function.  The",
          "56:     fts3_tokenizer() function is disabled by default. It is only enabled",
          "57:     by SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER. Do not enable it in",
          "58:     security sensitive environments.",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110: }",
          "112: int sqlite3Fts3IsIdChar(char c){",
          "",
          "[Removed Lines]",
          "109:   sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: # simple input string via the built-in test function. This is as much",
          "108: # to test the test function as the tokenizer implementations.",
          "109: #",
          "110: do_test fts3atoken-3.1 {",
          "111:   execsql {",
          "112:     SELECT fts3_tokenizer_test('simple', 'I don''t see how');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
      "candidate_info": {
        "commit_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Always use the symbolic name SQLITE_IDXTYPE_PRIMARYKEY rather than a hard-coded magic number 2.\n\nFossilOrigin-Name: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "1670:     VdbeComment((v, \"for %s\", pIdx->zName));",
          "1671: #ifdef SQLITE_ENABLE_NULL_TRIM",
          "1673: #endif",
          "",
          "[Removed Lines]",
          "1672:     if( pIdx->idxType==2 ) sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "",
          "[Added Lines]",
          "1672:     if( pIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "1673:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1674:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2410:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2411:       }",
          "2412:     }",
          "2414:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2415:     }",
          "2416:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "",
          "[Removed Lines]",
          "2413:     if( !HasRowid(pSrc) && pDestIdx->idxType==2 ){",
          "",
          "[Added Lines]",
          "2415:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
      "candidate_info": {
        "commit_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a left-shift of a negative value (undefined behaviour) when dealing with a corrupt database in fts3.\n\nFossilOrigin-Name: b851d12474035328df8354c7da8d81bc78833c8c704153f9f573c19b47a8487e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*ptr++) << shift );                    \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: int sqlite3Fts3GetVarint32(const char *p, int *pi){",
          "379:   u32 a;",
          "381: #ifndef fts3GetVarint32",
          "383: #else",
          "385:   assert( a & 0x80 );",
          "386: #endif",
          "391:   a = (a & 0x0FFFFFFF );",
          "393:   assert( 0==(a & 0x80000000) );",
          "394:   assert( *pi>=0 );",
          "395:   return 5;",
          "",
          "[Removed Lines]",
          "382:   GETVARINT_INIT(a, p, 0,  0x00,     0x80, *pi, 1);",
          "384:   a = (*p++);",
          "388:   GETVARINT_STEP(a, p, 7,  0x7F,     0x4000, *pi, 2);",
          "389:   GETVARINT_STEP(a, p, 14, 0x3FFF,   0x200000, *pi, 3);",
          "390:   GETVARINT_STEP(a, p, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "[Added Lines]",
          "379:   const unsigned char *ptr = (const unsigned char*)p;",
          "383:   GETVARINT_INIT(a, ptr, 0,  0x00,     0x80, *pi, 1);",
          "385:   a = (*ptr++);",
          "389:   GETVARINT_STEP(a, ptr, 7,  0x7F,     0x4000, *pi, 2);",
          "390:   GETVARINT_STEP(a, ptr, 14, 0x3FFF,   0x200000, *pi, 3);",
          "391:   GETVARINT_STEP(a, ptr, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}