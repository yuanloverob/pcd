{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41891222bca4e985bef45515fe131fbdbec3f969",
      "candidate_info": {
        "commit_hash": "41891222bca4e985bef45515fe131fbdbec3f969",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/41891222bca4e985bef45515fe131fbdbec3f969",
        "files": [
          "src/unix/udp.c"
        ],
        "message": "unix: try to write immediately in uv_udp_send",
        "before_after_code_files": [
          "src/unix/udp.c||src/unix/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: static void uv__udp_run_completed(uv_udp_t* handle);",
          "42: static void uv__udp_io(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "45: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle,",
          "46:                                        int domain,",
          "47:                                        unsigned int flags);",
          "",
          "[Removed Lines]",
          "41: static void uv__udp_run_pending(uv_udp_t* handle);",
          "43: static void uv__udp_recvmsg(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "44: static void uv__udp_sendmsg(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "",
          "[Added Lines]",
          "42: static void uv__udp_recvmsg(uv_udp_t* handle);",
          "43: static void uv__udp_sendmsg(uv_udp_t* handle);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   assert(!uv__io_active(&handle->io_watcher, UV__POLLIN | UV__POLLOUT));",
          "66:   assert(handle->io_watcher.fd == -1);",
          "70:   while (!QUEUE_EMPTY(&handle->write_queue)) {",
          "71:     q = QUEUE_HEAD(&handle->write_queue);",
          "72:     QUEUE_REMOVE(q);",
          "74:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "83:   }",
          "89:   handle->recv_cb = NULL;",
          "",
          "[Removed Lines]",
          "68:   uv__udp_run_completed(handle);",
          "75:     uv__req_unregister(handle->loop, req);",
          "77:     if (req->bufs != req->bufsml)",
          "78:       free(req->bufs);",
          "79:     req->bufs = NULL;",
          "81:     if (req->send_cb != NULL)",
          "82:       req->send_cb(req, -ECANCELED);",
          "85:   handle->send_queue_size = 0;",
          "86:   handle->send_queue_count = 0;",
          "",
          "[Added Lines]",
          "72:     req->status = -ECANCELED;",
          "73:     QUEUE_INSERT_TAIL(&handle->write_completed_queue, &req->queue);",
          "76:   uv__udp_run_completed(handle);",
          "78:   assert(handle->send_queue_size == 0);",
          "79:   assert(handle->send_queue_count == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: }",
          "141: static void uv__udp_run_completed(uv_udp_t* handle) {",
          "142:   uv_udp_send_t* req;",
          "143:   QUEUE* q;",
          "",
          "[Removed Lines]",
          "95: static void uv__udp_run_pending(uv_udp_t* handle) {",
          "96:   uv_udp_send_t* req;",
          "97:   QUEUE* q;",
          "98:   struct msghdr h;",
          "99:   ssize_t size;",
          "101:   while (!QUEUE_EMPTY(&handle->write_queue)) {",
          "102:     q = QUEUE_HEAD(&handle->write_queue);",
          "103:     assert(q != NULL);",
          "105:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "106:     assert(req != NULL);",
          "108:     memset(&h, 0, sizeof h);",
          "109:     h.msg_name = &req->addr;",
          "110:     h.msg_namelen = (req->addr.ss_family == AF_INET6 ?",
          "111:       sizeof(struct sockaddr_in6) : sizeof(struct sockaddr_in));",
          "112:     h.msg_iov = (struct iovec*) req->bufs;",
          "113:     h.msg_iovlen = req->nbufs;",
          "115:     do {",
          "116:       size = sendmsg(handle->io_watcher.fd, &h, 0);",
          "117:     }",
          "118:     while (size == -1 && errno == EINTR);",
          "123:     if (size == -1 && (errno == EAGAIN || errno == EWOULDBLOCK))",
          "124:       break;",
          "126:     req->status = (size == -1 ? -errno : size);",
          "133:     handle->send_queue_size -= uv__count_bufs(req->bufs, req->nbufs);",
          "134:     handle->send_queue_count--;",
          "135:     QUEUE_REMOVE(&req->queue);",
          "136:     QUEUE_INSERT_TAIL(&handle->write_completed_queue, &req->queue);",
          "137:   }",
          "138: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "150:     uv__req_unregister(handle->loop, req);",
          "152:     if (req->bufs != req->bufsml)",
          "153:       free(req->bufs);",
          "154:     req->bufs = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     handle->send_queue_size -= uv__count_bufs(req->bufs, req->nbufs);",
          "100:     handle->send_queue_count--;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:     else",
          "165:       req->send_cb(req, req->status);",
          "166:   }",
          "167: }",
          "170: static void uv__udp_io(uv_loop_t* loop, uv__io_t* w, unsigned int revents) {",
          "171:   if (revents & UV__POLLIN)",
          "176: }",
          "182:   struct sockaddr_storage peer;",
          "183:   struct msghdr h;",
          "185:   ssize_t nread;",
          "186:   uv_buf_t buf;",
          "187:   int flags;",
          "188:   int count;",
          "194:   assert(handle->recv_cb != NULL);",
          "195:   assert(handle->alloc_cb != NULL);",
          "",
          "[Removed Lines]",
          "172:     uv__udp_recvmsg(loop, w, revents);",
          "174:   if (revents & UV__POLLOUT)",
          "175:     uv__udp_sendmsg(loop, w, revents);",
          "179: static void uv__udp_recvmsg(uv_loop_t* loop,",
          "180:                             uv__io_t* w,",
          "181:                             unsigned int revents) {",
          "184:   uv_udp_t* handle;",
          "190:   handle = container_of(w, uv_udp_t, io_watcher);",
          "191:   assert(handle->type == UV_UDP);",
          "192:   assert(revents & UV__POLLIN);",
          "",
          "[Added Lines]",
          "118:   if (QUEUE_EMPTY(&handle->write_queue)) {",
          "120:     uv__io_stop(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "121:     if (!uv__io_active(&handle->io_watcher, UV__POLLIN))",
          "122:       uv__handle_stop(handle);",
          "123:   }",
          "128:   uv_udp_t* handle;",
          "130:   handle = container_of(w, uv_udp_t, io_watcher);",
          "131:   assert(handle->type == UV_UDP);",
          "134:     uv__udp_recvmsg(handle);",
          "136:   if (revents & UV__POLLOUT) {",
          "137:     uv__udp_sendmsg(handle);",
          "138:     uv__udp_run_completed(handle);",
          "139:   }",
          "143: static void uv__udp_recvmsg(uv_udp_t* handle) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "247: }",
          "259:   assert(!QUEUE_EMPTY(&handle->write_queue)",
          "260:       || !QUEUE_EMPTY(&handle->write_completed_queue));",
          "278:   }",
          "279: }",
          "",
          "[Removed Lines]",
          "250: static void uv__udp_sendmsg(uv_loop_t* loop,",
          "251:                             uv__io_t* w,",
          "252:                             unsigned int revents) {",
          "253:   uv_udp_t* handle;",
          "255:   handle = container_of(w, uv_udp_t, io_watcher);",
          "256:   assert(handle->type == UV_UDP);",
          "257:   assert(revents & UV__POLLOUT);",
          "263:   uv__udp_run_pending(handle);",
          "266:   uv__udp_run_completed(handle);",
          "268:   if (!QUEUE_EMPTY(&handle->write_completed_queue)) {",
          "270:     uv__io_feed(handle->loop, &handle->io_watcher);",
          "271:   }",
          "272:   else if (QUEUE_EMPTY(&handle->write_queue)) {",
          "274:     uv__io_stop(loop, &handle->io_watcher, UV__POLLOUT);",
          "276:     if (!uv__io_active(&handle->io_watcher, UV__POLLIN))",
          "277:       uv__handle_stop(handle);",
          "",
          "[Added Lines]",
          "207: static void uv__udp_sendmsg(uv_udp_t* handle) {",
          "208:   uv_udp_send_t* req;",
          "209:   QUEUE* q;",
          "210:   struct msghdr h;",
          "211:   ssize_t size;",
          "216:   while (!QUEUE_EMPTY(&handle->write_queue)) {",
          "217:     q = QUEUE_HEAD(&handle->write_queue);",
          "218:     assert(q != NULL);",
          "220:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "221:     assert(req != NULL);",
          "223:     memset(&h, 0, sizeof h);",
          "224:     h.msg_name = &req->addr;",
          "225:     h.msg_namelen = (req->addr.ss_family == AF_INET6 ?",
          "226:       sizeof(struct sockaddr_in6) : sizeof(struct sockaddr_in));",
          "227:     h.msg_iov = (struct iovec*) req->bufs;",
          "228:     h.msg_iovlen = req->nbufs;",
          "230:     do {",
          "231:       size = sendmsg(handle->io_watcher.fd, &h, 0);",
          "232:     } while (size == -1 && errno == EINTR);",
          "234:     if (size == -1 && (errno == EAGAIN || errno == EWOULDBLOCK))",
          "235:       break;",
          "237:     req->status = (size == -1 ? -errno : size);",
          "244:     QUEUE_REMOVE(&req->queue);",
          "245:     QUEUE_INSERT_TAIL(&handle->write_completed_queue, &req->queue);",
          "246:     uv__io_feed(handle->loop, &handle->io_watcher);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "415:                  unsigned int addrlen,",
          "416:                  uv_udp_send_cb send_cb) {",
          "417:   int err;",
          "419:   assert(nbufs > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:   int empty_queue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "422:   if (err)",
          "423:     return err;",
          "427:   assert(addrlen <= sizeof(req->addr));",
          "428:   memcpy(&req->addr, addr, addrlen);",
          "429:   req->send_cb = send_cb;",
          "",
          "[Removed Lines]",
          "425:   uv__req_init(handle->loop, req, UV_UDP_SEND);",
          "",
          "[Added Lines]",
          "399:   empty_queue = (handle->send_queue_count == 0);",
          "401:   uv__req_init(handle->loop, req, UV_UDP_SEND);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "441:   handle->send_queue_size += uv__count_bufs(req->bufs, req->nbufs);",
          "442:   handle->send_queue_count++;",
          "443:   QUEUE_INSERT_TAIL(&handle->write_queue, &req->queue);",
          "445:   uv__handle_start(handle);",
          "447:   return 0;",
          "448: }",
          "",
          "[Removed Lines]",
          "444:   uv__io_start(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "",
          "[Added Lines]",
          "421:   if (empty_queue)",
          "422:     uv__udp_sendmsg(handle);",
          "423:   else",
          "424:     uv__io_start(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc5f11bf9f8985da38eb431b4e0cf6b4ad582cbb",
      "candidate_info": {
        "commit_hash": "fc5f11bf9f8985da38eb431b4e0cf6b4ad582cbb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fc5f11bf9f8985da38eb431b4e0cf6b4ad582cbb",
        "files": [
          "src/win/tcp.c"
        ],
        "message": "windows: fix build error\n\nPreviously using Windows DevKit 8.1\n`tcp.c(250): error C2275: 'SOCKET' : illegal use of this type as an\nexpression`",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   int r;",
          "245:   if (handle->socket == INVALID_SOCKET) {",
          "247:     if ((flags & UV_TCP_IPV6ONLY) && addr->sa_family != AF_INET6)",
          "248:       return ERROR_INVALID_PARAMETER;",
          "251:     if (sock == INVALID_SOCKET) {",
          "252:       return WSAGetLastError();",
          "253:     }",
          "",
          "[Removed Lines]",
          "250:     SOCKET sock = socket(addr->sa_family, SOCK_STREAM, 0);",
          "",
          "[Added Lines]",
          "246:     SOCKET sock;",
          "252:     sock = socket(addr->sa_family, SOCK_STREAM, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f326820f55bae77b7d5f91273e51cce796d841c5",
      "candidate_info": {
        "commit_hash": "f326820f55bae77b7d5f91273e51cce796d841c5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f326820f55bae77b7d5f91273e51cce796d841c5",
        "files": [
          "src/win/winsock.c"
        ],
        "message": "windows: fix winsock status codes for address errors\n\n- STATUS_TOO_MANY_ADDRESSES now returns WSAEADDRINUSE\n- STATUS_CONFLICTING_ADDRESSES now returns WSAEADDRNOTAVAIL",
        "before_after_code_files": [
          "src/win/winsock.c||src/win/winsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/winsock.c||src/win/winsock.c": [
          "File: src/win/winsock.c -> src/win/winsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     case STATUS_COMMITMENT_LIMIT:",
          "167:     case STATUS_WORKING_SET_QUOTA:",
          "168:     case STATUS_NO_MEMORY:",
          "170:     case STATUS_QUOTA_EXCEEDED:",
          "171:     case STATUS_TOO_MANY_PAGING_FILES:",
          "172:     case STATUS_REMOTE_RESOURCES:",
          "174:       return WSAENOBUFS;",
          "176:     case STATUS_SHARING_VIOLATION:",
          "177:     case STATUS_ADDRESS_ALREADY_EXISTS:",
          "178:       return WSAEADDRINUSE;",
          "",
          "[Removed Lines]",
          "169:     case STATUS_CONFLICTING_ADDRESSES:",
          "173:     case STATUS_TOO_MANY_ADDRESSES:",
          "",
          "[Added Lines]",
          "174:     case STATUS_TOO_MANY_ADDRESSES:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:     case STATUS_PIPE_DISCONNECTED:",
          "242:       return WSAESHUTDOWN;",
          "244:     case STATUS_INVALID_ADDRESS:",
          "245:     case STATUS_INVALID_ADDRESS_COMPONENT:",
          "246:       return WSAEADDRNOTAVAIL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     case STATUS_CONFLICTING_ADDRESSES:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c6294e69b007b1038f3dc452a68703371c19789",
      "candidate_info": {
        "commit_hash": "4c6294e69b007b1038f3dc452a68703371c19789",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4c6294e69b007b1038f3dc452a68703371c19789",
        "files": [
          "Makefile.am"
        ],
        "message": "build: fix check target for mingw",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: AM_CPPFLAGS += -I$(top_srcdir)/src/win \\",
          "42:                -DWIN32_LEAN_AND_MEAN \\",
          "43:                -D_WIN32_WINNT=0x0600",
          "45: libuv_la_SOURCES += src/win/async.c \\",
          "46:                     src/win/atomicops-inl.h \\",
          "47:                     src/win/core.c \\",
          "",
          "[Removed Lines]",
          "44: LIBS += -lws2_32 -lpsapi -lphlpapi2",
          "",
          "[Added Lines]",
          "44: LIBS += -lws2_32 -lpsapi -liphlpapi -lshell32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:                          test/dns-server.c \\",
          "110:                          test/echo-server.c \\",
          "111:                          test/run-tests.c \\",
          "114:                          test/runner.c \\",
          "115:                          test/runner.h \\",
          "116:                          test/task.h \\",
          "",
          "[Removed Lines]",
          "112:                          test/runner-unix.c \\",
          "113:                          test/runner-unix.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:                          test/test-walk-handles.c",
          "200: test_run_tests_LDADD = libuv.la",
          "202: if AIX",
          "203: libuv_la_CFLAGS += -D_ALL_SOURCE -D_XOPEN_SOURCE=500",
          "204: libuv_la_SOURCES += src/unix/aix.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: if WINNT",
          "201: test_run_tests_SOURCES += test/runner-win.c \\",
          "202:                           test/runner-win.h",
          "203: else",
          "204: test_run_tests_SOURCES += test/runner-unix.c \\",
          "205:                           test/runner-unix.h",
          "206: endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe3a11e09f8bb004c4a2756e01e7ed2c837291f2",
      "candidate_info": {
        "commit_hash": "fe3a11e09f8bb004c4a2756e01e7ed2c837291f2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fe3a11e09f8bb004c4a2756e01e7ed2c837291f2",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows: check for nonconforming swprintf arguments\n\nNewer versions of mingw do include the correct API for swprintf.\nCheck for _CRT_NON_CONFORMING_SWPRINTFS as specified in the swprintf\ndocumentation:\nhttp://msdn.microsoft.com/en-us/library/ybk95axf(v=vs.90).aspx",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "716:   }",
          "721:   swprintf(path2, fmt, pathw);",
          "722: #endif",
          "723:   dir = FindFirstFileW(path2, &ent);",
          "724:   free(path2);",
          "",
          "[Removed Lines]",
          "718: #ifdef _MSC_VER",
          "719:   swprintf(path2, len + 3, fmt, pathw);",
          "720: #else",
          "",
          "[Added Lines]",
          "718: #ifdef _CRT_NON_CONFORMING_SWPRINTFS",
          "720: #else",
          "721:   swprintf(path2, len + 3, fmt, pathw);",
          "",
          "---------------"
        ]
      }
    }
  ]
}