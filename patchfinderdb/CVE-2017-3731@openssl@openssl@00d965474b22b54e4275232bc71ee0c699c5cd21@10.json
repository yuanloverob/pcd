{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "294f7a746e9928ce4ba509e0e8fa181f18e24efd",
      "candidate_info": {
        "commit_hash": "294f7a746e9928ce4ba509e0e8fa181f18e24efd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/294f7a746e9928ce4ba509e0e8fa181f18e24efd",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "VMS: pretend to use -znodelete\n\nVMS only unloads shared libraries at process rundown, so tell the\nOpenSSL code so by pretending we linked with -znodelete.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1862)\n(cherry picked from commit 1186a2b3d40e33cbf42d4fd3c7cc679f9f6e14f2)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1748:         cflags           => picker(default => \"/STANDARD=(ISOC94,RELAXED)/NOLIST/PREFIX=ALL\",",
          "1749:                                    debug   => \"/NOOPTIMIZE/DEBUG\",",
          "1750:                                    release => \"/OPTIMIZE/NODEBUG\"),",
          "1751:         lflags           => picker(default => \"/MAP\",",
          "1752:                                    debug   => \"/DEBUG/TRACEBACK\",",
          "1753:                                    release => \"/NODEBUG/NOTRACEBACK\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1751:         defines          => add(\"OPENSSL_USE_NODELETE\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6db2b1490e5da1255f4158dc8c2d4a2dd87cbe7b",
      "candidate_info": {
        "commit_hash": "6db2b1490e5da1255f4158dc8c2d4a2dd87cbe7b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6db2b1490e5da1255f4158dc8c2d4a2dd87cbe7b",
        "files": [
          "apps/rehash.c"
        ],
        "message": "Check for the presence of _WIN32 rather than its value.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2727)\n(cherry picked from commit 46958a043d51633ed36bcfb13ff048a3381366a6)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287: {",
          "288:     if (*path != '\\0')",
          "289:         path += strlen(path) - 1;",
          "291:     if (*path == ']' || *path == '>' || *path == ':')",
          "292:         return 1;",
          "294:     if (*path == '\\\\')",
          "295:         return 1;",
          "296: # endif",
          "",
          "[Removed Lines]",
          "290: # ifdef __VMS",
          "293: # elif _WIN32",
          "",
          "[Added Lines]",
          "290: # if defined __VMS",
          "293: # elif defined _WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f251d20a5c40cb9b6d30dfec005bb4ead3d5b0f",
      "candidate_info": {
        "commit_hash": "0f251d20a5c40cb9b6d30dfec005bb4ead3d5b0f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0f251d20a5c40cb9b6d30dfec005bb4ead3d5b0f",
        "files": [
          "crypto/chacha/asm/chacha-x86.pl"
        ],
        "message": "chacha/asm/chacha-x86.pl: improve [backward] portability.\n\nIn order to minimize dependency on assembler version a number of\npost-SSE2 instructions are encoded manually. But in order to simplify\nthe procedure only register operands are considered. Non-register\noperands are passed down to assembler. Module in question uses pshufb\nwith memory operands, and old [GNU] assembler can't handle it.\nFortunately in this case it's possible skip just the problematic\nsegment without skipping SSSE3 support altogether.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit d89773d659129368a341df746476da445d47ad31)",
        "before_after_code_files": [
          "crypto/chachasm/chacha-x86.pl||crypto/chacha/asm/chacha-x86.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/chachasm/chacha-x86.pl||crypto/chacha/asm/chacha-x86.pl": [
          "File: crypto/chachasm/chacha-x86.pl -> crypto/chacha/asm/chacha-x86.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   ($gasver=$1)>=2.19); # first version supporting AVX",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: if (defined($gasver) && $gasver>=2.17) {  # even though we encode",
          "469:        # pshufb manually, we",
          "470:        # handle only register",
          "471:        # operands, while this",
          "472:        # segment uses memory",
          "473:        # operand...",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbc8a839959418d8a2c2e3ec6bdf394852c9501e",
      "candidate_info": {
        "commit_hash": "cbc8a839959418d8a2c2e3ec6bdf394852c9501e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cbc8a839959418d8a2c2e3ec6bdf394852c9501e",
        "files": [
          "crypto/evp/m_md5_sha1.c",
          "crypto/evp/m_sha1.c"
        ],
        "message": "Fix ctrl operation for SHA1/MD5SHA1.\n\nThis makes S/MIME and CMS signing in MIME format for SHA1 work again.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit a5abd438f85737ffa56320b67c5ef5525fc495c3)",
        "before_after_code_files": [
          "crypto/evp/m_md5_sha1.c||crypto/evp/m_md5_sha1.c",
          "crypto/evp/m_sha1.c||crypto/evp/m_sha1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/m_md5_sha1.c||crypto/evp/m_md5_sha1.c": [
          "File: crypto/evp/m_md5_sha1.c -> crypto/evp/m_md5_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     unsigned char padtmp[48];",
          "53:     unsigned char md5tmp[MD5_DIGEST_LENGTH];",
          "54:     unsigned char sha1tmp[SHA_DIGEST_LENGTH];",
          "57:     if (cmd != EVP_CTRL_SSL3_MASTER_SECRET)",
          "58:         return 0;",
          "61:     if (mslen != 48)",
          "62:         return 0;",
          "",
          "[Removed Lines]",
          "55:     struct md5_sha1_ctx *mctx = EVP_MD_CTX_md_data(ctx);",
          "",
          "[Added Lines]",
          "55:     struct md5_sha1_ctx *mctx;",
          "58:         return -2;",
          "60:     if (ctx == NULL)",
          "63:     mctx = EVP_MD_CTX_md_data(ctx);",
          "",
          "---------------"
        ],
        "crypto/evp/m_sha1.c||crypto/evp/m_sha1.c": [
          "File: crypto/evp/m_sha1.c -> crypto/evp/m_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     unsigned char padtmp[40];",
          "37:     unsigned char sha1tmp[SHA_DIGEST_LENGTH];",
          "41:     if (cmd != EVP_CTRL_SSL3_MASTER_SECRET)",
          "42:         return 0;",
          "45:     if (mslen != 48)",
          "46:         return 0;",
          "",
          "[Removed Lines]",
          "39:     SHA_CTX *sha1 = EVP_MD_CTX_md_data(ctx);",
          "",
          "[Added Lines]",
          "39:     SHA_CTX *sha1;",
          "42:         return -2;",
          "44:     if (ctx == NULL)",
          "47:     sha1 = EVP_MD_CTX_md_data(ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9365a690e2d5f0c49f3d9a3d41973ed9dcedcc",
      "candidate_info": {
        "commit_hash": "8c9365a690e2d5f0c49f3d9a3d41973ed9dcedcc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8c9365a690e2d5f0c49f3d9a3d41973ed9dcedcc",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix length check writing status request extension\n\nThe status request extension did not correctly check its length, meaning\nthat writing the extension could go 2 bytes beyond the buffer size. In\npractice this makes little difference because, due to logic in buffer.c the\nbuffer is actually over allocated by approximately 5k!\n\nIssue reported by Guido Vranken.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1261:         } else",
          "1262:             extlen = 0;",
          "1265:             return NULL;",
          "1266:         s2n(TLSEXT_TYPE_status_request, ret);",
          "1267:         if (extlen + idlen > 0xFFF0)",
          "",
          "[Removed Lines]",
          "1264:         if ((long)(limit - ret - 7 - extlen - idlen) < 0)",
          "",
          "[Added Lines]",
          "1271:         if ((long)(limit - ret - 9 - extlen - idlen) < 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}