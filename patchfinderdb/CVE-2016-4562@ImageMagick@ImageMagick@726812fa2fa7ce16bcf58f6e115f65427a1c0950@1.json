{
  "cve_id": "CVE-2016-4562",
  "cve_desc": "The DrawDashPolygon function in MagickCore/draw.c in ImageMagick before 6.9.4-0 and 7.x before 7.0.1-2 mishandles calculations of certain vertices integer data, which allows remote attackers to cause a denial of service (buffer overflow and application crash) or possibly have unspecified other impact via a crafted file.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "726812fa2fa7ce16bcf58f6e115f65427a1c0950",
  "patch_info": {
    "commit_hash": "726812fa2fa7ce16bcf58f6e115f65427a1c0950",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/726812fa2fa7ce16bcf58f6e115f65427a1c0950",
    "files": [
      "ChangeLog",
      "MagickCore/draw.c"
    ],
    "message": "Prevent buffer overflow in magick/draw.c",
    "before_after_code_files": [
      "MagickCore/draw.c||MagickCore/draw.c"
    ]
  },
  "patch_diff": {
    "MagickCore/draw.c||MagickCore/draw.c": [
      "File: MagickCore/draw.c -> MagickCore/draw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1417:   MagickStatusType",
      "1418:     status;",
      "1421:   assert(image->signature == MagickCoreSignature);",
      "1422:   if (image->debug != MagickFalse)",
      "1423:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
      "",
      "[Removed Lines]",
      "1420:   assert(image != (Image *) NULL);",
      "",
      "[Added Lines]",
      "1420:   assert(image != (Image *) NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1541:       {",
      "1542:         offset-=length;",
      "1543:         n++;",
      "1545:         continue;",
      "1546:       }",
      "1547:     if (offset < length)",
      "",
      "[Removed Lines]",
      "1544:         length=scale*(draw_info->dash_pattern[n]+0.5);",
      "",
      "[Added Lines]",
      "1544:         length=scale*(draw_info->dash_pattern[n]+0.5);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1794:         image->filename);",
      "1795:     }",
      "1796:   graphic_context[n]=CloneDrawInfo((ImageInfo *) NULL,draw_info);",
      "1798:   if ((image->page.width == 0) || (image->page.height == 0))",
      "1799:     {",
      "1800:       graphic_context[n]->viewbox.width=image->columns;",
      "",
      "[Removed Lines]",
      "1797:   graphic_context[n]->viewbox=image->page;",
      "",
      "[Added Lines]",
      "1797:   graphic_context[n]->viewbox=image->page;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2104:             ssize_t",
      "2105:               style;",
      "2108:             style=ParseCommandOption(MagickStyleOptions,MagickFalse,token);",
      "2109:             if (style == -1)",
      "2110:               status=MagickFalse;",
      "",
      "[Removed Lines]",
      "2107:             GetNextToken(q,&q,extent,token);",
      "",
      "[Added Lines]",
      "2107:             GetNextToken(q,&q,extent,token);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2353:                   break;",
      "2354:                 }",
      "2355:                 (void) CopyMagickString(token,p,(size_t) (q-p-4+1));",
      "2357:                   graphic_context[n]->affine.ry*segment.y1+",
      "2358:                   graphic_context[n]->affine.tx;",
      "2359:                 bounds.y1=graphic_context[n]->affine.rx*segment.x1+",
      "",
      "[Removed Lines]",
      "2356:                 bounds.x1=graphic_context[n]->affine.sx*segment.x1+",
      "",
      "[Added Lines]",
      "2356:                 bounds.x1=graphic_context[n]->affine.sx*segment.x1+",
      "2357:                   graphic_context[n]->affine.ry*segment.y1+",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4608:     }",
      "4609:     default:",
      "4610:     {",
      "4612:         mid,",
      "4613:         scale;",
      "",
      "[Removed Lines]",
      "4611:       double",
      "",
      "[Added Lines]",
      "4612:       double",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4643:           MagickBooleanType",
      "4644:             closed_path;",
      "4647:             Draw strokes while respecting line cap/join attributes.",
      "4649:           for (i=0; primitive_info[i].primitive != UndefinedPrimitive; i++) ;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4744:   MagickStatusType",
      "4745:     status;",
      "4747:   PrimitiveInfo",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4860:   ImageInfo",
      "4864:     Initialize draw attributes.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4925:   option=GetImageOption(clone_info,\"kerning\");",
      "4926:   if (option != (const char *) NULL)",
      "4927:     draw_info->kerning=StringToDouble(option,(char **) NULL);",
      "4929:   if (option != (const char *) NULL)",
      "4930:     (void) QueryColorCompliance(option,AllCompliance,&draw_info->stroke,",
      "4931:       exception);",
      "",
      "[Removed Lines]",
      "4928:   option=GetImageOption(clone_info,\"stroke\");",
      "",
      "[Added Lines]",
      "4929:   option=GetImageOption(clone_info,\"stroke\");",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "6021:       }",
      "6022:     else",
      "6023:       {",
      "6035:         box_p[4]=box_p[1];",
      "6036:         box_q[4]=box_q[1];",
      "6037:       }",
      "",
      "[Removed Lines]",
      "6024:         box_p[2].x=polygon_primitive[n].point.x+offset.x;",
      "6025:         box_p[2].y=polygon_primitive[n].point.y+offset.y;",
      "6026:         box_p[3].x=polygon_primitive[i].point.x+offset.x;",
      "6027:         box_p[3].y=polygon_primitive[i].point.y+offset.y;",
      "6028:         box_q[2].x=polygon_primitive[n].point.x-offset.x;",
      "6029:         box_q[2].y=polygon_primitive[n].point.y-offset.y;",
      "6030:         box_q[3].x=polygon_primitive[i].point.x-offset.x;",
      "6031:         box_q[3].y=polygon_primitive[i].point.y-offset.y;",
      "6032:       }",
      "6033:     if (fabs((double) (slope.p-slope.q)) < MagickEpsilon)",
      "6034:       {",
      "",
      "[Added Lines]",
      "6025:         box_p[2].x=polygon_primitive[n].point.x+offset.x;",
      "6026:         box_p[2].y=polygon_primitive[n].point.y+offset.y;",
      "6027:         box_p[3].x=polygon_primitive[i].point.x+offset.x;",
      "6028:         box_p[3].y=polygon_primitive[i].point.y+offset.y;",
      "6029:         box_q[2].x=polygon_primitive[n].point.x-offset.x;",
      "6030:         box_q[2].y=polygon_primitive[n].point.y-offset.y;",
      "6031:         box_q[3].x=polygon_primitive[i].point.x-offset.x;",
      "6032:         box_q[3].y=polygon_primitive[i].point.y-offset.y;",
      "6033:       }",
      "6034:     if (fabs((double) (slope.p-slope.q)) < MagickEpsilon)",
      "6035:       {",
      "6036:         box_p[4]=box_p[1];",
      "6037:         box_q[4]=box_q[1];",
      "6038:       }",
      "6039:     else",
      "6040:       {",
      "6041:         box_p[4].x=(double) ((slope.p*box_p[0].x-box_p[0].y-slope.q*box_p[3].x+",
      "6042:           box_p[3].y)/(slope.p-slope.q));",
      "6043:         box_p[4].y=(double) (slope.p*(box_p[4].x-box_p[0].x)+box_p[0].y);",
      "6044:         box_q[4].x=(double) ((slope.p*box_q[0].x-box_q[0].y-slope.q*box_q[3].x+",
      "6045:           box_q[3].y)/(slope.p-slope.q));",
      "6046:         box_q[4].y=(double) (slope.p*(box_q[4].x-box_q[0].x)+box_q[0].y);",
      "6047:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9cdadd93510445e657e40e7877f2d85279683049",
      "candidate_info": {
        "commit_hash": "9cdadd93510445e657e40e7877f2d85279683049",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/9cdadd93510445e657e40e7877f2d85279683049",
        "files": [
          "MagickCore/draw.c"
        ],
        "message": "Fix possible memory leak",
        "before_after_code_files": [
          "MagickCore/draw.c||MagickCore/draw.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/draw.c||MagickCore/draw.c"
          ],
          "candidate": [
            "MagickCore/draw.c||MagickCore/draw.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/draw.c||MagickCore/draw.c": [
          "File: MagickCore/draw.c -> MagickCore/draw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1505:   register ssize_t",
          "1506:     i;",
          "1509:     dx,",
          "1510:     dy;",
          "1512:   size_t",
          "1513:     number_vertices;",
          "1515:   ssize_t",
          "1516:     j,",
          "1517:     n;",
          "",
          "[Removed Lines]",
          "1508:   register double",
          "",
          "[Added Lines]",
          "1513:     number_vertices;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1541:       {",
          "1542:         offset-=length;",
          "1543:         n++;",
          "1545:         continue;",
          "1546:       }",
          "1547:     if (offset < length)",
          "",
          "[Removed Lines]",
          "1544:         length=scale*(draw_info->dash_pattern[n]+0.5);",
          "",
          "[Added Lines]",
          "1544:         length=scale*(draw_info->dash_pattern[n]+0.5);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1553:     offset=0.0;",
          "1554:     n++;",
          "1555:   }",
          "1557:   maximum_length=0.0;",
          "1558:   total_length=0.0;",
          "1559:   for (i=1; i < (ssize_t) number_vertices; i++)",
          "",
          "[Removed Lines]",
          "1556:   status=MagickTrue;",
          "",
          "[Added Lines]",
          "1556:   status=MagickTrue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2589:                     GetNextToken(r,&r,extent,token);",
          "2590:                 }",
          "2591:                 graphic_context[n]->dash_pattern=(double *)",
          "2592:                   AcquireQuantumMemory((size_t) (2UL*x+1UL),",
          "2593:                   sizeof(*graphic_context[n]->dash_pattern));",
          "2594:                 if (graphic_context[n]->dash_pattern == (double *) NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2592:                   AcquireQuantumMemory((size_t) (2UL*x+1UL),",
          "2593:                   sizeof(*graphic_context[n]->dash_pattern));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c381376ece1a1e59d83018f2c8caf78b36a89fda",
      "candidate_info": {
        "commit_hash": "c381376ece1a1e59d83018f2c8caf78b36a89fda",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/c381376ece1a1e59d83018f2c8caf78b36a89fda",
        "files": [
          "MagickCore/draw.c"
        ],
        "message": "",
        "before_after_code_files": [
          "MagickCore/draw.c||MagickCore/draw.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/draw.c||MagickCore/draw.c"
          ],
          "candidate": [
            "MagickCore/draw.c||MagickCore/draw.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/draw.c||MagickCore/draw.c": [
          "File: MagickCore/draw.c -> MagickCore/draw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:   clone_info=(DrawInfo *) AcquireMagickMemory(sizeof(*clone_info));",
          "258:   GetDrawInfo(image_info,clone_info);",
          "259:   if (draw_info == (DrawInfo *) NULL)",
          "260:     return(clone_info);",
          "",
          "[Removed Lines]",
          "256:   if (clone_info == (DrawInfo *) NULL)",
          "257:     ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");",
          "",
          "[Added Lines]",
          "256:   if (clone_info == (DrawInfo *) NULL)",
          "257:     ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");",
          "258:   GetDrawInfo(image_info,clone_info);",
          "259:   if (draw_info == (DrawInfo *) NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:   clone_info->stroke_antialias=draw_info->stroke_antialias;",
          "277:   clone_info->text_antialias=draw_info->text_antialias;",
          "278:   clone_info->fill_rule=draw_info->fill_rule;",
          "283:   clone_info->decorate=draw_info->decorate;",
          "284:   clone_info->compose=draw_info->compose;",
          "285:   (void) CloneString(&clone_info->text,draw_info->text);",
          "287:   (void) CloneString(&clone_info->metrics,draw_info->metrics);",
          "288:   (void) CloneString(&clone_info->family,draw_info->family);",
          "289:   clone_info->style=draw_info->style;",
          "290:   clone_info->stretch=draw_info->stretch;",
          "291:   clone_info->weight=draw_info->weight;",
          "293:   clone_info->pointsize=draw_info->pointsize;",
          "294:   clone_info->kerning=draw_info->kerning;",
          "295:   clone_info->interline_spacing=draw_info->interline_spacing;",
          "297:   clone_info->direction=draw_info->direction;",
          "298:   (void) CloneString(&clone_info->density,draw_info->density);",
          "299:   clone_info->align=draw_info->align;",
          "",
          "[Removed Lines]",
          "279:   clone_info->linecap=draw_info->linecap;",
          "280:   clone_info->linejoin=draw_info->linejoin;",
          "281:   clone_info->miterlimit=draw_info->miterlimit;",
          "282:   clone_info->dash_offset=draw_info->dash_offset;",
          "286:   (void) CloneString(&clone_info->font,draw_info->font);",
          "292:   (void) CloneString(&clone_info->encoding,draw_info->encoding);",
          "296:   clone_info->interword_spacing=draw_info->interword_spacing;",
          "",
          "[Added Lines]",
          "281:   clone_info->linecap=draw_info->linecap;",
          "282:   clone_info->linejoin=draw_info->linejoin;",
          "283:   clone_info->miterlimit=draw_info->miterlimit;",
          "284:   clone_info->dash_offset=draw_info->dash_offset;",
          "285:   clone_info->decorate=draw_info->decorate;",
          "286:   clone_info->compose=draw_info->compose;",
          "287:   if (draw_info->text != (char *) NULL)",
          "288:     (void) CloneString(&clone_info->text,draw_info->text);",
          "292:     (void) CloneString(&clone_info->metrics,draw_info->metrics);",
          "293:   if (draw_info->family != (char *) NULL)",
          "299:     (void) CloneString(&clone_info->encoding,draw_info->encoding);",
          "300:   clone_info->pointsize=draw_info->pointsize;",
          "304:   clone_info->direction=draw_info->direction;",
          "305:   if (draw_info->density != (char *) NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:       clone_info->gradient.stops=(StopInfo *) AcquireQuantumMemory((size_t)",
          "325:         number_stops,sizeof(*clone_info->gradient.stops));",
          "326:       if (clone_info->gradient.stops == (StopInfo *) NULL)",
          "328:           \"UnableToAllocateDashPattern\");",
          "329:       (void) CopyMagickMemory(clone_info->gradient.stops,",
          "330:         draw_info->gradient.stops,(size_t) number_stops*",
          "",
          "[Removed Lines]",
          "327:         ThrowFatalException(ResourceLimitFatalError,",
          "",
          "[Added Lines]",
          "336:         ThrowFatalException(ResourceLimitFatalError,",
          "337:           \"UnableToAllocateDashPattern\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4770: %                                                                             %",
          "4771: %                                                                             %",
          "4772: %                                                                             %",
          "4773: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "4774: %",
          "4775: %  GetDrawInfo() initializes draw_info to default values from image_info.",
          "4776: %",
          "4777: %  The format of the GetDrawInfo method is:",
          "4778: %",
          "4779: %      void GetDrawInfo(const ImageInfo *image_info,DrawInfo *draw_info)",
          "4780: %",
          "4781: %  A description of each parameter follows:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4783: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "4784: %",
          "4785: %  GetDrawInfo() initializes draw_info to default values from image_info.",
          "4792: %",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4848:           MagickDirectionOptions,MagickFalse,option);",
          "4849:       else",
          "4850:         draw_info->direction=UndefinedDirection;",
          "4851:       option=GetImageOption(image_info,\"fill\");",
          "4852:       if (option != (const char *) NULL)",
          "4853:         (void) QueryColorCompliance(option,AllCompliance,&draw_info->fill,",
          "",
          "[Removed Lines]",
          "4797:     Initialize draw attributes.",
          "4799:   (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"...\");",
          "4800:   assert(draw_info != (DrawInfo *) NULL);",
          "4801:   (void) ResetMagickMemory(draw_info,0,sizeof(*draw_info));",
          "4802:   GetAffineMatrix(&draw_info->affine);",
          "4803:   exception=AcquireExceptionInfo();",
          "4804:   (void) QueryColorCompliance(\"#000F\",AllCompliance,&draw_info->fill,",
          "4805:     exception);",
          "4806:   (void) QueryColorCompliance(\"#0000\",AllCompliance,&draw_info->stroke,",
          "4807:     exception);",
          "4808:   draw_info->stroke_width=1.0;",
          "4809:   draw_info->alpha=OpaqueAlpha;",
          "4810:   draw_info->fill_rule=EvenOddRule;",
          "4811:   draw_info->linecap=ButtCap;",
          "4812:   draw_info->linejoin=MiterJoin;",
          "4813:   draw_info->miterlimit=10;",
          "4814:   draw_info->decorate=NoDecoration;",
          "4815:   draw_info->pointsize=12.0;",
          "4816:   draw_info->undercolor.alpha=(Quantum) TransparentAlpha;",
          "4817:   draw_info->compose=OverCompositeOp;",
          "4818:   draw_info->render=MagickTrue;",
          "4819:   draw_info->debug=IsEventLogging();",
          "4820:   if (image_info != (ImageInfo *) NULL)",
          "4821:     {",
          "4822:       draw_info->stroke_antialias=image_info->antialias;",
          "4823:       if (image_info->font != (char *) NULL)",
          "4824:         draw_info->font=AcquireString(image_info->font);",
          "4825:       if (image_info->density != (char *) NULL)",
          "4826:         draw_info->density=AcquireString(image_info->density);",
          "4827:       draw_info->text_antialias=image_info->antialias;",
          "4828:       if (image_info->pointsize != 0.0)",
          "4829:         draw_info->pointsize=image_info->pointsize;",
          "4830:       draw_info->border_color=image_info->border_color;",
          "4831:       if (image_info->server_name != (char *) NULL)",
          "4832:         draw_info->server_name=AcquireString(image_info->server_name);",
          "4833:       option=GetImageOption(image_info,\"encoding\");",
          "4834:       if (option != (const char *) NULL)",
          "4835:         (void) CloneString(&draw_info->encoding,option);",
          "4836:       option=GetImageOption(image_info,\"kerning\");",
          "4837:       if (option != (const char *) NULL)",
          "4838:         draw_info->kerning=StringToDouble(option,(char **) NULL);",
          "4839:       option=GetImageOption(image_info,\"interline-spacing\");",
          "4840:       if (option != (const char *) NULL)",
          "4841:         draw_info->interline_spacing=StringToDouble(option,(char **) NULL);",
          "4842:       option=GetImageOption(image_info,\"interword-spacing\");",
          "4843:       if (option != (const char *) NULL)",
          "4844:         draw_info->interword_spacing=StringToDouble(option,(char **) NULL);",
          "4845:       option=GetImageOption(image_info,\"direction\");",
          "4846:       if (option != (const char *) NULL)",
          "4847:         draw_info->direction=(DirectionType) ParseCommandOption(",
          "",
          "[Added Lines]",
          "4812:   (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"...\");",
          "4813:   assert(draw_info != (DrawInfo *) NULL);",
          "4814:   (void) ResetMagickMemory(draw_info,0,sizeof(*draw_info));",
          "4815:   clone_info=CloneImageInfo(image_info);",
          "4816:   GetAffineMatrix(&draw_info->affine);",
          "4817:   exception=AcquireExceptionInfo();",
          "4818:   (void) QueryColorCompliance(\"#000F\",AllCompliance,&draw_info->fill,",
          "4819:     exception);",
          "4820:   (void) QueryColorCompliance(\"#0000\",AllCompliance,&draw_info->stroke,",
          "4821:     exception);",
          "4822:   draw_info->stroke_width=1.0;",
          "4823:   draw_info->alpha=OpaqueAlpha;",
          "4824:   draw_info->fill_rule=EvenOddRule;",
          "4825:   draw_info->linecap=ButtCap;",
          "4826:   draw_info->linejoin=MiterJoin;",
          "4827:   draw_info->miterlimit=10;",
          "4828:   draw_info->decorate=NoDecoration;",
          "4829:   draw_info->pointsize=12.0;",
          "4830:   draw_info->undercolor.alpha=(Quantum) TransparentAlpha;",
          "4831:   draw_info->compose=OverCompositeOp;",
          "4832:   draw_info->render=MagickTrue;",
          "4833:   draw_info->debug=IsEventLogging();",
          "4834:   draw_info->stroke_antialias=clone_info->antialias;",
          "4835:   if (clone_info->font != (char *) NULL)",
          "4836:     draw_info->font=AcquireString(clone_info->font);",
          "4837:   if (clone_info->density != (char *) NULL)",
          "4838:     draw_info->density=AcquireString(clone_info->density);",
          "4839:   draw_info->text_antialias=clone_info->antialias;",
          "4840:   if (clone_info->pointsize != 0.0)",
          "4841:     draw_info->pointsize=clone_info->pointsize;",
          "4842:   draw_info->border_color=clone_info->border_color;",
          "4843:   if (clone_info->server_name != (char *) NULL)",
          "4844:     draw_info->server_name=AcquireString(clone_info->server_name);",
          "4845:   option=GetImageOption(clone_info,\"encoding\");",
          "4846:   if (option != (const char *) NULL)",
          "4847:     (void) CloneString(&draw_info->encoding,option);",
          "4848:   option=GetImageOption(clone_info,\"kerning\");",
          "4849:   if (option != (const char *) NULL)",
          "4850:     draw_info->kerning=StringToDouble(option,(char **) NULL);",
          "4851:   option=GetImageOption(clone_info,\"interline-spacing\");",
          "4852:   if (option != (const char *) NULL)",
          "4853:     draw_info->interline_spacing=StringToDouble(option,(char **) NULL);",
          "4854:   option=GetImageOption(clone_info,\"interword-spacing\");",
          "4855:   if (option != (const char *) NULL)",
          "4856:     draw_info->interword_spacing=StringToDouble(option,(char **) NULL);",
          "4857:   option=GetImageOption(clone_info,\"direction\");",
          "4858:   if (option != (const char *) NULL)",
          "4861:   else",
          "",
          "---------------"
        ]
      }
    }
  ]
}