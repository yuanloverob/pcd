{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81a889fd888ada89eea5512a4366fdf074d9ba9c",
      "candidate_info": {
        "commit_hash": "81a889fd888ada89eea5512a4366fdf074d9ba9c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/81a889fd888ada89eea5512a4366fdf074d9ba9c",
        "files": [
          "deps/v8/tools/gen-postmortem-metadata.py"
        ],
        "message": "v8: fix postmortem debugging tools build",
        "before_after_code_files": [
          "deps/v8/tools/gen-postmortem-metadata.py||deps/v8/tools/gen-postmortem-metadata.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/tools/gen-postmortem-metadata.py||deps/v8/tools/gen-postmortem-metadata.py": [
          "File: deps/v8/tools/gen-postmortem-metadata.py -> deps/v8/tools/gen-postmortem-metadata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     { 'name': 'SmiValueShift',          'value': 'kSmiTagSize' },",
          "79:     { 'name': 'PointerSizeLog2',        'value': 'kPointerSizeLog2' },",
          "83:     { 'name': 'prop_idx_first',",
          "84:         'value': 'DescriptorArray::kFirstIndex' },",
          "85:     { 'name': 'prop_type_field',",
          "",
          "[Removed Lines]",
          "81:     { 'name': 'prop_idx_content',",
          "82:         'value': 'DescriptorArray::kContentArrayIndex' },",
          "",
          "[Added Lines]",
          "81:     { 'name': 'prop_idx_transitions',",
          "82:         'value': 'DescriptorArray::kTransitionsIndex' },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5db01ee29e8b25545c6558b8c1b8f8b8461294c",
      "candidate_info": {
        "commit_hash": "e5db01ee29e8b25545c6558b8c1b8f8b8461294c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e5db01ee29e8b25545c6558b8c1b8f8b8461294c",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Remove OutputDirectory from build/common.gypi",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:           }],  # OS==\"mac\"",
          "328:           ['OS==\"win\"', {",
          "329:             'msvs_configuration_attributes': {",
          "331:               'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "332:               'CharacterSet': '1',",
          "333:             },",
          "",
          "[Removed Lines]",
          "330:               'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06ada03ed93d6f81caef24c6dade6e616fd843b1",
      "candidate_info": {
        "commit_hash": "06ada03ed93d6f81caef24c6dade6e616fd843b1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/06ada03ed93d6f81caef24c6dade6e616fd843b1",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-write-stream-change-open.js"
        ],
        "message": "fs.WriteStream: Handle modifications to fs.open\n\nIf the fs.open method is modified via AOP-style extension, in between\nthe creation of an fs.WriteStream and the processing of its action\nqueue, then the test of whether or not the method === fs.open will fail,\nbecause fs.open has been replaced.\n\nThe solution is to save a reference to fs.open on the stream itself when\nthe action is placed in the queue.\n\nThis fixes isaacs/node-graceful-fs#6.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-write-stream-change-open.js||test/simple/test-fs-write-stream-change-open.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:   this._queue = [];",
          "1334:   if (this.fd === null) {",
          "1336:     this.flush();",
          "1337:   }",
          "1338: };",
          "",
          "[Removed Lines]",
          "1335:     this._queue.push([fs.open, this.path, this.flags, this.mode, undefined]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1374:         cb(null, arguments[1]);",
          "1375:       }",
          "1379:       self.fd = arguments[1];",
          "1380:       self.emit('open', self.fd);",
          "",
          "[Removed Lines]",
          "1377:     } else if (method === fs.open) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1392:   });",
          "1396:     args.unshift(this.fd);",
          "1397:   }",
          "",
          "[Removed Lines]",
          "1395:   if (method !== fs.open) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-write-stream-change-open.js||test/simple/test-fs-write-stream-change-open.js": [
          "File: test/simple/test-fs-write-stream-change-open.js -> test/simple/test-fs-write-stream-change-open.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var path = require('path'),",
          "26:     fs = require('fs');",
          "28: var file = path.join(common.tmpDir, 'write.txt');",
          "30: var stream = fs.WriteStream(file),",
          "31:     _fs_close = fs.close,",
          "32:     _fs_open = fs.open;",
          "37: fs.open = function() {",
          "38:   return _fs_open.apply(fs, arguments);",
          "39: };",
          "41: fs.close = function(fd) {",
          "42:   assert.ok(fd, 'fs.close must not be called with an undefined fd.');",
          "43:   fs.close = _fs_close;",
          "44:   fs.open = _fs_open;",
          "45: }",
          "47: stream.write('foo');",
          "48: stream.end();",
          "50: process.on('exit', function() {",
          "51:   assert.equal(fs.open, _fs_open);",
          "52: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b72277183f9cb79274d6f8915e02b895c56b2288",
      "candidate_info": {
        "commit_hash": "b72277183f9cb79274d6f8915e02b895c56b2288",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b72277183f9cb79274d6f8915e02b895c56b2288",
        "files": [
          "lib/repl.js",
          "test/simple/test-repl-autolibs.js"
        ],
        "message": "repl: add automatic loading of built-in libs",
        "before_after_code_files": [
          "lib/repl.js||lirepl.js",
          "test/simple/test-repl-autolibs.js||test/simple/test-repl-autolibs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: exports.writer = util.inspect;",
          "71: function REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined) {",
          "72:   var self = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:       }",
          "168:     }",
          "170:     if (!skipCatchall) {",
          "171:       var evalCmd = self.bufferedCommand + cmd + '\\n';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:     }",
          "430:     if (!subdir) {",
          "437:       completionGroups.push(builtinLibs);",
          "438:     }",
          "",
          "[Removed Lines]",
          "433:       var builtinLibs = ['assert', 'buffer', 'child_process', 'crypto', 'dgram',",
          "434:         'dns', 'events', 'file', 'freelist', 'fs', 'http', 'net', 'os', 'path',",
          "435:         'querystring', 'readline', 'repl', 'string_decoder', 'util', 'tcp',",
          "436:         'url'];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-repl-autolibs.js||test/simple/test-repl-autolibs.js": [
          "File: test/simple/test-repl-autolibs.js -> test/simple/test-repl-autolibs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert');",
          "23: var util = require('util');",
          "24: var repl = require('repl');",
          "27: function ArrayStream() {",
          "28:   this.run = function (data) {",
          "29:     var self = this;",
          "30:     data.forEach(function (line) {",
          "31:       self.emit('data', line);",
          "32:     });",
          "33:   }",
          "34: }",
          "35: util.inherits(ArrayStream, require('stream').Stream);",
          "36: ArrayStream.prototype.readable = true;",
          "37: ArrayStream.prototype.writable = true;",
          "38: ArrayStream.prototype.resume = function () {};",
          "39: ArrayStream.prototype.write = function () {};",
          "41: var putIn = new ArrayStream;",
          "42: var testMe = repl.start('', putIn, null, true);",
          "44: test1();",
          "46: function test1(){",
          "47:   putIn.write = function (data) {",
          "48:     if (data.length) {",
          "50:       assert.equal(data, util.inspect(require('fs'), null, null, false) + '\\n');",
          "52:       assert.equal(global.fs, require('fs'));",
          "53:       test2();",
          "54:     }",
          "55:   };",
          "56:   putIn.run(['fs']);",
          "57: }",
          "59: function test2(){",
          "60:   putIn.write = function(data) {",
          "61:     if (data.length) {",
          "63:       assert.equal(data.indexOf('A different'), 0);",
          "65:       assert.equal(val, global.url);",
          "66:     }",
          "67:   };",
          "68:   var val = {};",
          "69:   global.url = val;",
          "70:   putIn.run(['url']);",
          "71: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a3565621011b66a27386cc5a4daca34502088c2",
      "candidate_info": {
        "commit_hash": "9a3565621011b66a27386cc5a4daca34502088c2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9a3565621011b66a27386cc5a4daca34502088c2",
        "files": [
          "test/simple/test-child-process-fork-exec-argv.js"
        ],
        "message": "test: test if forks are spawned with parent's `process.execArgv`",
        "before_after_code_files": [
          "test/simple/test-child-process-fork-exec-argv.js||test/simple/test-child-process-fork-exec-argv.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-fork-exec-argv.js||test/simple/test-child-process-fork-exec-argv.js": [
          "File: test/simple/test-child-process-fork-exec-argv.js -> test/simple/test-child-process-fork-exec-argv.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert');",
          "23: var child_process = require('child_process');",
          "24: var spawn = child_process.spawn;",
          "25: var fork = child_process.fork;",
          "27: if (process.argv[2] === 'fork') {",
          "28:   process.stdout.write(JSON.stringify(process.execArgv));",
          "29:   process.exit();",
          "30: } else if (process.argv[2] === 'child') {",
          "31:   fork(__filename, ['fork']);",
          "32: } else {",
          "33:   var execArgv = ['--harmony_proxies', '--max-stack-size=0'];",
          "34:   var args = [__filename, 'child', 'arg0'];",
          "36:   var child = spawn(process.execPath, execArgv.concat(args));",
          "37:   var out = '';",
          "39:   child.stdout.on('data', function (chunk) {",
          "40:     out += chunk;",
          "41:   });",
          "43:   child.on('exit', function () {",
          "44:     assert.deepEqual(JSON.parse(out), execArgv);",
          "45:   });",
          "46: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}