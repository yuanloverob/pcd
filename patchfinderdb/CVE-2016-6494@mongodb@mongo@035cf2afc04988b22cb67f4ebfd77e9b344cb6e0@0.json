{
  "cve_id": "CVE-2016-6494",
  "cve_desc": "The client in MongoDB uses world-readable permissions on .dbshell history files, which might allow local users to obtain sensitive information by reading these files.",
  "repo": "mongodb/mongo",
  "patch_hash": "035cf2afc04988b22cb67f4ebfd77e9b344cb6e0",
  "patch_info": {
    "commit_hash": "035cf2afc04988b22cb67f4ebfd77e9b344cb6e0",
    "repo": "mongodb/mongo",
    "commit_url": "https://github.com/mongodb/mongo/commit/035cf2afc04988b22cb67f4ebfd77e9b344cb6e0",
    "files": [
      "jstests/noPassthrough/shell_history.js",
      "src/mongo/shell/linenoise.cpp"
    ],
    "message": "SERVER-25335 avoid group and other permissions when creating .dbshell history file",
    "before_after_code_files": [
      "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js",
      "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
    ]
  },
  "patch_diff": {
    "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js": [
      "File: jstests/noPassthrough/shell_history.js -> jstests/noPassthrough/shell_history.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: (function() {",
      "5:     \"use strict\";",
      "8:     var tmpHome = MongoRunner.dataPath;",
      "10:     mkdir(tmpHome);",
      "11:     removeFile(tmpHome + \".dbshell\");",
      "13:     var args = [];",
      "14:     var cmdline = \"mongo --nodb\";",
      "15:     var redirection = \"\";",
      "16:     var env = {};",
      "17:     if (_isWindows()) {",
      "18:         args.push(\"cmd.exe\");",
      "19:         args.push(\"/c\");",
      "23:         redirection = \"< NUL > NUL\";",
      "28:         if (tmpHome.match(\"^[a-zA-Z]:\")) {",
      "29:             var tmpHomeDrive = tmpHome.substr(0, 2);",
      "30:             var tmpHomePath = tmpHome.substr(2);",
      "31:         } else {",
      "32:             var _pwd = pwd();",
      "33:             assert(_pwd.match(\"^[a-zA-Z]:\"), \"pwd must include drive\");",
      "34:             var tmpHomeDrive = _pwd.substr(0, 2);",
      "35:             var tmpHomePath = tmpHome;",
      "36:         }",
      "37:         env = {USERPROFILE: tmpHome, HOMEDRIVE: tmpHomeDrive, HOMEPATH: tmpHomePath};",
      "39:     } else {",
      "40:         args.push(\"sh\");",
      "41:         args.push(\"-c\");",
      "45:         cmdline = \"./\" + cmdline;",
      "48:         cmdline = \"umask 0 ; \" + cmdline;",
      "51:         redirection = \"< /dev/null\";",
      "54:         if (!tmpHome.startsWith(\"/\")) {",
      "55:             tmpHome = pwd() + \"/\" + tmpHome;",
      "56:         }",
      "57:         env = {HOME: tmpHome};",
      "58:     }",
      "61:     cmdline += \" \" + redirection;",
      "62:     args.push(cmdline);",
      "63:     jsTestLog(\"Running args:\\n    \" + tojson(args) + \"\\nwith env:\\n    \" + tojson(env));",
      "64:     var pid = _startMongoProgram({args, env});",
      "65:     var rc = waitProgram(pid);",
      "67:     assert.eq(rc, 0);",
      "69:     var files = listFiles(tmpHome);",
      "70:     jsTestLog(tojson(files));",
      "72:     var findFile = function(baseName) {",
      "73:         for (var i = 0; i < files.length; i++) {",
      "74:             if (files[i].baseName === baseName) {",
      "75:                 return files[i];",
      "76:             }",
      "77:         }",
      "78:         return undefined;",
      "79:     };",
      "81:     var targetFile = \".dbshell\";",
      "82:     var file = findFile(targetFile);",
      "84:     assert.neq(typeof(file), \"undefined\", targetFile + \" should exist, but it doesn't\");",
      "85:     assert.eq(file.isDirectory, false, targetFile + \" should not be a directory, but it is\");",
      "86:     assert.eq(file.size, 0, targetFile + \" should be empty, but it isn't\");",
      "88:     if (!_isWindows()) {",
      "94:         clearRawMongoProgramOutput();",
      "95:         var rc = runProgram(\"ls\", \"-l\", file.name);",
      "96:         assert.eq(rc, 0);",
      "97:         var output = rawMongoProgramOutput();",
      "98:         var fields = output.split(\" \");",
      "100:         assert.eq(fields[1], \"-rw-------\", targetFile + \" has bad permissions\");",
      "101:     }",
      "103: })();",
      "",
      "---------------"
    ],
    "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp": [
      "File: src/mongo/shell/linenoise.cpp -> src/mongo/shell/linenoise.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2764: int linenoiseHistorySave(const char* filename) {",
      "2766:     if (fp == NULL) {",
      "2767:         return -1;",
      "2768:     }",
      "",
      "[Removed Lines]",
      "2765:     FILE* fp = fopen(filename, \"wt\");",
      "",
      "[Added Lines]",
      "2765:     FILE* fp;",
      "2766: #if _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE",
      "2767:     int fd = open(filename, O_CREAT, S_IRUSR | S_IWUSR);",
      "2768:     if (fd == -1) {",
      "2770:         return -1;",
      "2771:     }",
      "2772:     fp = fdopen(fd, \"wt\");",
      "2773: #else",
      "2774:     fp = fopen(filename, \"wt\");",
      "2775: #endif  // _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2772:             fprintf(fp, \"%s\\n\", history[j]);",
      "2773:         }",
      "2774:     }",
      "2776:     return 0;",
      "2777: }",
      "",
      "[Removed Lines]",
      "2775:     fclose(fp);",
      "",
      "[Added Lines]",
      "2785:     fclose(fp);  // Also causes fd to be closed.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2c3376d70a3540d3bee5e32abe9d5517f571369",
      "candidate_info": {
        "commit_hash": "f2c3376d70a3540d3bee5e32abe9d5517f571369",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/f2c3376d70a3540d3bee5e32abe9d5517f571369",
        "files": [
          "jstests/noPassthrough/shell_history.js",
          "src/mongo/shell/linenoise.cpp"
        ],
        "message": "SERVER-25335 use open + fdopen on OSX, and cope with slow program output",
        "before_after_code_files": [
          "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js",
          "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js",
            "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
          ],
          "candidate": [
            "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js",
            "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
          ]
        }
      },
      "candidate_diff": {
        "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js": [
          "File: jstests/noPassthrough/shell_history.js -> jstests/noPassthrough/shell_history.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         clearRawMongoProgramOutput();",
          "95:         var rc = runProgram(\"ls\", \"-l\", file.name);",
          "96:         assert.eq(rc, 0);",
          "98:         var fields = output.split(\" \");",
          "100:         assert.eq(fields[1], \"-rw-------\", targetFile + \" has bad permissions\");",
          "",
          "[Removed Lines]",
          "97:         var output = rawMongoProgramOutput();",
          "",
          "[Added Lines]",
          "98:         var output = null;",
          "99:         assert.soon(function() {",
          "100:             output = rawMongoProgramOutput();",
          "101:             return output != \"\";",
          "102:         });",
          "",
          "---------------"
        ],
        "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp": [
          "File: src/mongo/shell/linenoise.cpp -> src/mongo/shell/linenoise.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2764: int linenoiseHistorySave(const char* filename) {",
          "2765:     FILE* fp;",
          "2767:     int fd = open(filename, O_CREAT, S_IRUSR | S_IWUSR);",
          "2768:     if (fd == -1) {",
          "",
          "[Removed Lines]",
          "2766: #if _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE",
          "",
          "[Added Lines]",
          "2766: #if _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || defined(__APPLE__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2772:     fp = fdopen(fd, \"wt\");",
          "2773: #else",
          "2774:     fp = fopen(filename, \"wt\");",
          "2776:     if (fp == NULL) {",
          "2777:         return -1;",
          "2778:     }",
          "",
          "[Removed Lines]",
          "2775: #endif  // _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE",
          "",
          "[Added Lines]",
          "2775: #endif  // _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || defined(__APPLE__)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a431ceb4cb1d986ceb54ee26ca86915ef9ffd42",
      "candidate_info": {
        "commit_hash": "4a431ceb4cb1d986ceb54ee26ca86915ef9ffd42",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/4a431ceb4cb1d986ceb54ee26ca86915ef9ffd42",
        "files": [
          "src/mongo/shell/linenoise.cpp"
        ],
        "message": "SERVER-26489 Fix open() flags for shell history file",
        "before_after_code_files": [
          "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
          ],
          "candidate": [
            "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp": [
          "File: src/mongo/shell/linenoise.cpp -> src/mongo/shell/linenoise.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2764: int linenoiseHistorySave(const char* filename) {",
          "2765:     FILE* fp;",
          "2766: #if _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || defined(__APPLE__)",
          "2768:     if (fd == -1) {",
          "2770:         return -1;",
          "",
          "[Removed Lines]",
          "2767:     int fd = open(filename, O_CREAT, S_IRUSR | S_IWUSR);",
          "",
          "[Added Lines]",
          "2767:     int fd = open(filename, O_WRONLY | O_TRUNC | O_CREAT, S_IRUSR | S_IWUSR);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bda80db0aab45d2ffab9a9c18c4258d498fcceb",
      "candidate_info": {
        "commit_hash": "2bda80db0aab45d2ffab9a9c18c4258d498fcceb",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/2bda80db0aab45d2ffab9a9c18c4258d498fcceb",
        "files": [
          "jstests/noPassthrough/shell_history.js"
        ],
        "message": "SERVER-29509 tolerate extended file ACLs in shell history jstest\n\n(cherry picked from commit 6a85a4b845d2d365dc6f8a06c3c02824dc1909dc)",
        "before_after_code_files": [
          "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js"
          ],
          "candidate": [
            "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js"
          ]
        }
      },
      "candidate_diff": {
        "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js": [
          "File: jstests/noPassthrough/shell_history.js -> jstests/noPassthrough/shell_history.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         var fields = output.split(\" \");",
          "108:     }",
          "110: })();",
          "",
          "[Removed Lines]",
          "107:         assert.eq(fields[1], \"-rw-------\", targetFile + \" has bad permissions\");",
          "",
          "[Added Lines]",
          "107:         assert.eq(fields[1].substr(0, 10), \"-rw-------\", targetFile + \" has bad permissions\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ab7f732e0bee535383dd6dcda400999a1eee6b2",
      "candidate_info": {
        "commit_hash": "0ab7f732e0bee535383dd6dcda400999a1eee6b2",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/0ab7f732e0bee535383dd6dcda400999a1eee6b2",
        "files": [
          "src/mongo/SConscript",
          "src/mongo/shell/dbshell.cpp",
          "src/mongo/shell/linenoise.cpp",
          "src/mongo/shell/linenoise.h",
          "src/mongo/util/assert_util.cpp",
          "src/mongo/util/errno_util.cpp",
          "src/mongo/util/errno_util.h",
          "src/mongo/util/log.cpp",
          "src/mongo/util/log.h"
        ],
        "message": "SERVER-26871 report failures when handling shell history file",
        "before_after_code_files": [
          "src/mongo/shell/dbshell.cpp||src/mongo/shell/dbshell.cpp",
          "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp",
          "src/mongo/shell/linenoise.h||src/mongo/shell/linenoise.h",
          "src/mongo/util/assert_util.cpp||src/mongo/util/assert_util.cpp",
          "src/mongo/util/errno_util.cpp||src/mongo/util/errno_util.cpp",
          "src/mongo/util/errno_util.h||src/mongo/util/errno_util.h",
          "src/mongo/util/log.cpp||src/mongo/util/log.cpp",
          "src/mongo/util/log.h||src/mongo/util/log.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
          ],
          "candidate": [
            "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/shell/dbshell.cpp||src/mongo/shell/dbshell.cpp": [
          "File: src/mongo/shell/dbshell.cpp -> src/mongo/shell/dbshell.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:     ss << \".dbshell\";",
          "144:     historyFile = ss.str();",
          "147:     linenoiseSetCompletionCallback(completionHook);",
          "148: }",
          "150: void shellHistoryDone() {",
          "152:     linenoiseHistoryFree();",
          "153: }",
          "154: void shellHistoryAdd(const char* line) {",
          "",
          "[Removed Lines]",
          "146:     linenoiseHistoryLoad(historyFile.c_str());",
          "151:     linenoiseHistorySave(historyFile.c_str());",
          "",
          "[Added Lines]",
          "146:     Status res = linenoiseHistoryLoad(historyFile.c_str());",
          "147:     if (!res.isOK()) {",
          "148:         error() << \"Error loading history file: \" << res;",
          "149:     }",
          "154:     Status res = linenoiseHistorySave(historyFile.c_str());",
          "155:     if (!res.isOK()) {",
          "156:         error() << \"Error saving history file: \" << res;",
          "157:     }",
          "",
          "---------------"
        ],
        "src/mongo/shell/linenoise.cpp||src/mongo/shell/linenoise.cpp": [
          "File: src/mongo/shell/linenoise.cpp -> src/mongo/shell/linenoise.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: #ifdef _WIN32",
          "88: #include <conio.h>",
          "89: #include <io.h>",
          "91: #define strcasecmp _stricmp",
          "92: #define strdup _strdup",
          "93: #define isatty _isatty",
          "",
          "[Removed Lines]",
          "90: #include <windows.h>",
          "",
          "[Added Lines]",
          "86: #include \"mongo/platform/basic.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: #include \"mk_wcwidth.h\"",
          "114: #include <errno.h>",
          "115: #include <fcntl.h>",
          "116: #include <stdio.h>",
          "117: #include <string>",
          "118: #include <vector>",
          "120: using std::string;",
          "121: using std::vector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: #include <sstream>",
          "122: #include \"mongo/util/errno_util.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2759:     return 1;",
          "2760: }",
          "2765:     FILE* fp;",
          "2766: #if _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || defined(__APPLE__)",
          "2767:     int fd = open(filename, O_WRONLY | O_TRUNC | O_CREAT, S_IRUSR | S_IWUSR);",
          "2768:     if (fd == -1) {",
          "2771:     }",
          "2772:     fp = fdopen(fd, \"wt\");",
          "2773: #else",
          "2774:     fp = fopen(filename, \"wt\");",
          "2776:     if (fp == NULL) {",
          "2778:     }",
          "2780:     for (int j = 0; j < historyLen; ++j) {",
          "2781:         if (history[j][0] != '\\0') {",
          "2783:         }",
          "2784:     }",
          "2787: }",
          "2795:     FILE* fp = fopen(filename, \"rt\");",
          "2796:     if (fp == NULL) {",
          "2798:     }",
          "2800:     char buf[LINENOISE_MAX_LINE];",
          "",
          "[Removed Lines]",
          "2764: int linenoiseHistorySave(const char* filename) {",
          "2770:         return -1;",
          "2775: #endif  // _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || defined(__APPLE__)",
          "2777:         return -1;",
          "2782:             fprintf(fp, \"%s\\n\", history[j]);",
          "2785:     fclose(fp);  // Also causes fd to be closed.",
          "2786:     return 0;",
          "2794: int linenoiseHistoryLoad(const char* filename) {",
          "2797:         return -1;",
          "",
          "[Added Lines]",
          "2766: namespace {",
          "2767: mongo::Status linenoiseFileError(mongo::ErrorCodes::Error code,",
          "2768:                                  const char* what,",
          "2769:                                  const char* filename) {",
          "2770:     std::stringstream ss;",
          "2771:     ss << \"Unable to \" << what << \" file \" << filename << \": \" << mongo::errnoWithDescription();",
          "2772:     return {code, ss.str()};",
          "2773: }",
          "2774: }  // namespace",
          "2777: mongo::Status linenoiseHistorySave(const char* filename) {",
          "2782:         return linenoiseFileError(mongo::ErrorCodes::FileOpenFailed, \"open()\", filename);",
          "2785:     if (fp == NULL) {",
          "2787:         (void)close(fd);",
          "2788:         return linenoiseFileError(mongo::ErrorCodes::FileOpenFailed, \"fdopen()\", filename);",
          "2789:     }",
          "2793:         return linenoiseFileError(mongo::ErrorCodes::FileOpenFailed, \"fopen()\", filename);",
          "2795: #endif  // _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || defined(__APPLE__)",
          "2799:             if (fprintf(fp, \"%s\\n\", history[j]) < 0) {",
          "2801:                 (void)fclose(fp);",
          "2802:                 return linenoiseFileError(",
          "2803:                     mongo::ErrorCodes::FileStreamFailed, \"fprintf() to\", filename);",
          "2804:             }",
          "2808:     if (fclose(fp) != 0) {",
          "2809:         return linenoiseFileError(mongo::ErrorCodes::FileStreamFailed, \"fclose()\", filename);",
          "2810:     }",
          "2811:     return mongo::Status::OK();",
          "2815: mongo::Status linenoiseHistoryLoad(const char* filename) {",
          "2818:         return linenoiseFileError(mongo::ErrorCodes::FileOpenFailed, \"fopen()\", filename);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2810:             linenoiseHistoryAdd(buf);",
          "2811:         }",
          "2812:     }",
          "2815: }",
          "",
          "[Removed Lines]",
          "2813:     fclose(fp);",
          "2814:     return 0;",
          "",
          "[Added Lines]",
          "2836:     if (!feof(fp)) {",
          "2838:         (void)fclose(fp);",
          "2839:         return linenoiseFileError(mongo::ErrorCodes::FileStreamFailed, \"fgets() from\", filename);",
          "2840:     }",
          "2841:     if (fclose(fp) != 0) {",
          "2842:         return linenoiseFileError(mongo::ErrorCodes::FileStreamFailed, \"fclose()\", filename);",
          "2843:     }",
          "2844:     return mongo::Status::OK();",
          "",
          "---------------"
        ],
        "src/mongo/shell/linenoise.h||src/mongo/shell/linenoise.h": [
          "File: src/mongo/shell/linenoise.h -> src/mongo/shell/linenoise.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #ifndef __LINENOISE_H",
          "37: #define __LINENOISE_H",
          "39: struct linenoiseCompletions;",
          "41: typedef void(linenoiseCompletionCallback)(const char*, linenoiseCompletions*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include \"mongo/base/status.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: void linenoisePreloadBuffer(const char* preloadText);",
          "47: int linenoiseHistoryAdd(const char* line);",
          "48: int linenoiseHistorySetMaxLen(int len);",
          "51: void linenoiseHistoryFree(void);",
          "52: void linenoiseClearScreen(void);",
          "",
          "[Removed Lines]",
          "49: int linenoiseHistorySave(const char* filename);",
          "50: int linenoiseHistoryLoad(const char* filename);",
          "",
          "[Added Lines]",
          "51: mongo::Status linenoiseHistorySave(const char* filename);",
          "52: mongo::Status linenoiseHistoryLoad(const char* filename);",
          "",
          "---------------"
        ],
        "src/mongo/util/assert_util.cpp||src/mongo/util/assert_util.cpp": [
          "File: src/mongo/util/assert_util.cpp -> src/mongo/util/assert_util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     return causedBy(e.toString());",
          "284: }",
          "295: string demangleName(const type_info& typeinfo) {",
          "296: #ifdef _WIN32",
          "297:     return typeinfo.name();",
          "",
          "[Removed Lines]",
          "286: string errnoWithPrefix(StringData prefix) {",
          "287:     const auto suffix = errnoWithDescription();",
          "288:     stringstream ss;",
          "289:     if (!prefix.empty())",
          "290:         ss << prefix << \": \";",
          "291:     ss << suffix;",
          "292:     return ss.str();",
          "293: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mongo/util/errno_util.cpp||src/mongo/util/errno_util.cpp": [
          "File: src/mongo/util/errno_util.cpp -> src/mongo/util/errno_util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"mongo/platform/basic.h\"",
          "30: #include \"mongo/util/errno_util.h\"",
          "32: #include <sstream>",
          "34: #ifndef _WIN32",
          "35: #include <cstring>  // For strerror_r",
          "36: #include <errno.h>  // For errno",
          "37: #endif",
          "39: #include \"mongo/util/scopeguard.h\"",
          "40: #include \"mongo/util/text.h\"",
          "42: namespace mongo {",
          "44: namespace {",
          "45: const char kUnknownMsg[] = \"Unknown error\";",
          "46: const int kBuflen = 256;  // strerror strings in non-English locales can be large.",
          "47: }  // namespace",
          "49: std::string errnoWithDescription(int errNumber) {",
          "50: #if defined(_WIN32)",
          "51:     if (errNumber < 0)",
          "52:         errNumber = GetLastError();",
          "53: #else",
          "54:     if (errNumber < 0)",
          "55:         errNumber = errno;",
          "56: #endif",
          "58:     char buf[kBuflen];",
          "59:     char* msg{nullptr};",
          "61: #if defined(__GNUC__) && defined(_GNU_SOURCE)",
          "62:     msg = strerror_r(errNumber, buf, kBuflen);",
          "63: #elif defined(_WIN32)",
          "65:     LPWSTR errorText = nullptr;",
          "66:     FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER |",
          "67:                        FORMAT_MESSAGE_IGNORE_INSERTS,",
          "68:                    nullptr,",
          "69:                    errNumber,",
          "70:                    0,",
          "71:                    reinterpret_cast<LPWSTR>(&errorText),  // output",
          "72:                    0,                                     // minimum size for output buffer",
          "73:                    nullptr);",
          "75:     if (errorText) {",
          "76:         ON_BLOCK_EXIT([&errorText] { LocalFree(errorText); });",
          "77:         std::string utf8ErrorText = toUtf8String(errorText);",
          "78:         auto size = utf8ErrorText.find_first_of(\"\\r\\n\");",
          "79:         if (size == std::string::npos) {  // not found",
          "80:             size = utf8ErrorText.length();",
          "81:         }",
          "83:         if (size >= kBuflen) {",
          "84:             size = kBuflen - 1;",
          "85:         }",
          "87:         memcpy(buf, utf8ErrorText.c_str(), size);",
          "88:         buf[size] = '\\0';",
          "89:         msg = buf;",
          "90:     } else if (strerror_s(buf, kBuflen, errNumber) != 0) {",
          "91:         msg = buf;",
          "92:     }",
          "94:     if (strerror_r(errNumber, buf, kBuflen) == 0) {",
          "95:         msg = buf;",
          "96:     }",
          "97: #endif",
          "99:     if (!msg) {",
          "100:         return {kUnknownMsg};",
          "101:     }",
          "103:     return {msg};",
          "104: }",
          "106: std::pair<int, std::string> errnoAndDescription() {",
          "107: #if defined(_WIN32)",
          "108:     int errNumber = GetLastError();",
          "109: #else",
          "110:     int errNumber = errno;",
          "111: #endif",
          "112:     return {errNumber, errnoWithDescription(errNumber)};",
          "113: }",
          "115: std::string errnoWithPrefix(StringData prefix) {",
          "116:     const auto suffix = errnoWithDescription();",
          "117:     std::stringstream ss;",
          "118:     if (!prefix.empty())",
          "119:         ss << prefix << \": \";",
          "120:     ss << suffix;",
          "121:     return ss.str();",
          "122: }",
          "124: }  // namespace mongo",
          "",
          "---------------"
        ],
        "src/mongo/util/errno_util.h||src/mongo/util/errno_util.h": [
          "File: src/mongo/util/errno_util.h -> src/mongo/util/errno_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #pragma once",
          "30: #include <utility>",
          "32: #include \"mongo/base/string_data.h\"",
          "34: namespace mongo {",
          "39: std::string errnoWithDescription(int errorcode = -1);",
          "44: std::pair<int, std::string> errnoAndDescription();",
          "51: std::string errnoWithPrefix(StringData prefix);",
          "53: }  // namespace mongo",
          "",
          "---------------"
        ],
        "src/mongo/util/log.cpp||src/mongo/util/log.cpp": [
          "File: src/mongo/util/log.cpp -> src/mongo/util/log.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"mongo/util/log.h\"",
          "40: #include \"mongo/logger/console_appender.h\"",
          "41: #include \"mongo/logger/message_event_utf8_encoder.h\"",
          "42: #include \"mongo/logger/ramlog.h\"",
          "",
          "[Removed Lines]",
          "34: #ifdef _WIN32",
          "35: #include <io.h>",
          "36: #else",
          "37: #include <unistd.h>",
          "38: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: #include \"mongo/util/assert_util.h\"",
          "45: #include \"mongo/util/concurrency/thread_name.h\"",
          "46: #include \"mongo/util/concurrency/threadlocal.h\"",
          "48: #include \"mongo/util/stacktrace.h\"",
          "50: #include \"mongo/util/time_support.h\"",
          "52: using namespace std;",
          "",
          "[Removed Lines]",
          "47: #include \"mongo/util/scopeguard.h\"",
          "49: #include \"mongo/util/text.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: namespace mongo {",
          "65: static logger::ExtraLogContextFn _appendExtraLogContext;",
          "67: Status logger::registerExtraLogContextFn(logger::ExtraLogContextFn contextFn) {",
          "",
          "[Removed Lines]",
          "60: namespace {",
          "61: const char kUnknownMsg[] = \"Unknown error\";",
          "62: const int kBuflen = 256;  // strerror strings in non-English locales can be large.",
          "63: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:     return result.empty();",
          "90: }",
          "158: void logContext(const char* errmsg) {",
          "159:     if (errmsg) {",
          "160:         log() << errmsg << endl;",
          "",
          "[Removed Lines]",
          "92: string errnoWithDescription(int errNumber) {",
          "93: #if defined(_WIN32)",
          "94:     if (errNumber < 0)",
          "95:         errNumber = GetLastError();",
          "96: #else",
          "97:     if (errNumber < 0)",
          "98:         errNumber = errno;",
          "99: #endif",
          "101:     char buf[kBuflen];",
          "102:     char* msg{nullptr};",
          "104: #if defined(__GNUC__) && defined(_GNU_SOURCE)",
          "105:     msg = strerror_r(errNumber, buf, kBuflen);",
          "106: #elif defined(_WIN32)",
          "108:     LPWSTR errorText = nullptr;",
          "109:     FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER |",
          "110:                        FORMAT_MESSAGE_IGNORE_INSERTS,",
          "111:                    nullptr,",
          "112:                    errNumber,",
          "113:                    0,",
          "114:                    reinterpret_cast<LPWSTR>(&errorText),  // output",
          "115:                    0,                                     // minimum size for output buffer",
          "116:                    nullptr);",
          "118:     if (errorText) {",
          "119:         ON_BLOCK_EXIT([&errorText] { LocalFree(errorText); });",
          "120:         string utf8ErrorText = toUtf8String(errorText);",
          "121:         auto size = utf8ErrorText.find_first_of(\"\\r\\n\");",
          "122:         if (size == string::npos) {  // not found",
          "123:             size = utf8ErrorText.length();",
          "124:         }",
          "126:         if (size >= kBuflen) {",
          "127:             size = kBuflen - 1;",
          "128:         }",
          "130:         memcpy(buf, utf8ErrorText.c_str(), size);",
          "131:         buf[size] = '\\0';",
          "132:         msg = buf;",
          "133:     } else if (strerror_s(buf, kBuflen, errNumber) != 0) {",
          "134:         msg = buf;",
          "135:     }",
          "137:     if (strerror_r(errNumber, buf, kBuflen) == 0) {",
          "138:         msg = buf;",
          "139:     }",
          "140: #endif",
          "142:     if (!msg) {",
          "143:         return {kUnknownMsg};",
          "144:     }",
          "146:     return {msg};",
          "147: }",
          "149: std::pair<int, std::string> errnoAndDescription() {",
          "150: #if defined(_WIN32)",
          "151:     int errNumber = GetLastError();",
          "152: #else",
          "153:     int errNumber = errno;",
          "154: #endif",
          "155:     return {errNumber, errnoWithDescription(errNumber)};",
          "156: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mongo/util/log.h||src/mongo/util/log.h": [
          "File: src/mongo/util/log.h -> src/mongo/util/log.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include \"mongo/logger/redaction.h\"",
          "53: #include \"mongo/logger/tee.h\"",
          "54: #include \"mongo/util/concurrency/thread_name.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #include \"mongo/util/errno_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226: bool rotateLogs(bool renameFiles);",
          "233: extern Tee* const warnings;            // Things put here go in serverStatus",
          "234: extern Tee* const startupWarningsLog;  // Things put here get reported in MMS",
          "",
          "[Removed Lines]",
          "229:     handy for use as parm in uassert/massert.",
          "231: std::string errnoWithPrefix(StringData prefix);",
          "236: std::string errnoWithDescription(int errorcode = -1);",
          "237: std::pair<int, std::string> errnoAndDescription();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a85a4b845d2d365dc6f8a06c3c02824dc1909dc",
      "candidate_info": {
        "commit_hash": "6a85a4b845d2d365dc6f8a06c3c02824dc1909dc",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/6a85a4b845d2d365dc6f8a06c3c02824dc1909dc",
        "files": [
          "jstests/noPassthrough/shell_history.js"
        ],
        "message": "SERVER-29509 tolerate extended file ACLs in shell history jstest",
        "before_after_code_files": [
          "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js"
          ],
          "candidate": [
            "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js"
          ]
        }
      },
      "candidate_diff": {
        "jstests/noPassthrough/shell_history.js||jstests/noPassthrough/shell_history.js": [
          "File: jstests/noPassthrough/shell_history.js -> jstests/noPassthrough/shell_history.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         var fields = output.split(\" \");",
          "108:     }",
          "110: })();",
          "",
          "[Removed Lines]",
          "107:         assert.eq(fields[1], \"-rw-------\", targetFile + \" has bad permissions\");",
          "",
          "[Added Lines]",
          "107:         assert.eq(fields[1].substr(0, 10), \"-rw-------\", targetFile + \" has bad permissions\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}