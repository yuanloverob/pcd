{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0292c8db51c65d267b2832b0a61651346192b696",
      "candidate_info": {
        "commit_hash": "0292c8db51c65d267b2832b0a61651346192b696",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0292c8db51c65d267b2832b0a61651346192b696",
        "files": [
          "lib/Proxy.jsi",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiRegexp.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiWebSocket.c",
          "tests/sqlite.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.21\": Add isError bool to onClose in WebSockets\n\nFossilOrigin-Name: dcdec62220cfef77269c4a8c814885574c11480a795a4ee29152693121740ddd",
        "before_after_code_files": [
          "lib/Proxy.jsi||lib/Proxy.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/sqlite.jsi||tests/sqlite.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Proxy.jsi||lib/Proxy.jsi": [
          "File: lib/Proxy.jsi -> lib/Proxy.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     }",
          "55:     {",
          "57:     }",
          "59:     function WsCloseLast(ws:userobj|null) // Wait around for a while for reconnect or new clients before exiting",
          "",
          "[Removed Lines]",
          "54:     function WsClose(ws:userobj|null, id:number)",
          "56:         LogTrace(\"Closing WS: \"+id);",
          "",
          "[Added Lines]",
          "54:     function WsClose(ws:userobj|null, id:number, isError:boolean)",
          "56:         LogTrace(\"Closing WS: \"+id, isError);",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         LogTrace(\"Opening WS:\",id);",
          "79:     }",
          "82:     {",
          "84:     }",
          "86:     function WsAuth(ws:userobj, id:number, url:string, userpass:string)",
          "",
          "[Removed Lines]",
          "81:     function WsClose(ws:userobj|null, id:number)",
          "83:         LogTrace(\"Closing WS:\",id);",
          "",
          "[Added Lines]",
          "81:     function WsClose(ws:userobj|null, id:number, isError:boolean)",
          "83:         LogTrace(\"Closing WS:\",id, isError);",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         self.fd.write(str);",
          "44:     }",
          "47:         LogTrace(\"CLOSE\");",
          "48:         self.done = true;",
          "49:         if (self.fd) {",
          "50:             self.fd.close();",
          "51:             delete self.fd;",
          "52:         }",
          "53:         if (self.onDone)",
          "55:     }",
          "57:     function main() {",
          "",
          "[Removed Lines]",
          "46:     function WsClose(ws:userobj|null, id:number) {",
          "54:             self.onDone(id);",
          "",
          "[Added Lines]",
          "46:     function WsClose(ws:userobj|null, id:number, isError:boolean) {",
          "48:         if (isError)",
          "49:             puts(\"Connection error\");",
          "56:             self.onDone(id, isError);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         if (self.O == '')",
          "79:             self.O = File.tail(self.path);",
          "80:         if (self.O !== '-' && self.O !== '.' && File.exists(self.O)) {",
          "81:             if (!self.force)",
          "82:                 throw('output file already exists: '+self.O);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         if (self.O == '')",
          "83:             self.O = '-';",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 20",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 21",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     return JSI_OK;",
          "105: }",
          "108:     Jsi_DString dStr = {};",
          "110:     Jsi_Regex *re = Jsi_RegExpNew(interp, Jsi_DSValue(&dStr), 0);",
          "111:     Jsi_DSFree(&dStr);",
          "112:     if (re == NULL)",
          "",
          "[Removed Lines]",
          "107: Jsi_Value* Jsi_ValueNewRegExp(Jsi_Interp *interp, const char *regtxt) {",
          "109:     Jsi_DSAppend(&dStr, \"/\", regtxt, \"/\", NULL);",
          "",
          "[Added Lines]",
          "107: Jsi_Value* Jsi_ValueNewRegExp(Jsi_Interp *interp, const char *regtxt, const char *modifiers) {",
          "109:     Jsi_DSAppend(&dStr, \"/\", regtxt, \"/\", modifiers, NULL);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1392:     SQLSIGASSERT(jdb,DB);",
          "1393:     Jsi_Interp *interp = jdb->interp;",
          "1396:         return;",
          "1397:     }",
          "1398:     const char *str = (char *)sqlite3_value_text(argv[1]);",
          "1400:     int rc = 0;",
          "1401:     bool isNew = 0;",
          "1402:     Jsi_Value *pat = NULL;",
          "",
          "[Removed Lines]",
          "1394:     if (argc!=2) {",
          "1395:         Jsi_LogWarn(\"sqlite regex, expected: str pattern\");",
          "1399:     char *spat = (char *)sqlite3_value_text(argv[0]);",
          "",
          "[Added Lines]",
          "1394:     if (argc!=2 && argc!=3) {",
          "1395:         Jsi_LogWarn(\"sqlite regex, expected: str pattern ?modifier?\");",
          "1399:     char *spat = (char *)sqlite3_value_text(argv[0]), *mod = (char *)sqlite3_value_text(argv[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1408:             Jsi_LogError(\"Regex hash reached max size: %d\", jdb->maxRegexCache);",
          "1409:             return;",
          "1410:         }",
          "1412:         if (!pat)",
          "1413:             return;",
          "1414:         Jsi_IncrRefCount(interp, pat);",
          "",
          "[Removed Lines]",
          "1411:         pat = Jsi_ValueNewRegExp(interp, spat);",
          "",
          "[Added Lines]",
          "1411:         pat = Jsi_ValueNewRegExp(interp, spat, mod);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"37fc6a9753c3414663cd55c6d7135e39\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"85902b2a851959de5d6f9dcbc763d0c0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     bool(*_Jsi_StrIsAlnum)(const char *cp);",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "451:     void *endPtr;",
          "452: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt);",
          "",
          "[Added Lines]",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1297: #define Jsi_StrIsAlnum(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_StrIsAlnum(n0))",
          "1298: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6))",
          "1299: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1302: #endif",
          "",
          "[Removed Lines]",
          "1300: #define Jsi_ValueNewRegExp(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1))",
          "",
          "[Added Lines]",
          "1300: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     JSI_OPT(ARRAY,      jsi_wsPss, headers,     .help=\"Headers to send to browser on connection: name/value pairs\"),",
          "282:     JSI_OPT(BOOL,       jsi_wsPss, isWebsock,   .help=\"Is a websocket connection\" ),",
          "283:     JSI_OPT(STRBUF,     jsi_wsPss, key,         .help=\"String key lookup in ids command for SSI echo ${#}\", jsi_IIRO),",
          "285:     JSI_OPT(FUNC,       jsi_wsPss, onGet,       .help=\"Function to call to server handle http-get\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "287:     JSI_OPT(FUNC,       jsi_wsPss, onRecv,      .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "288:     JSI_OPT(FUNC,       jsi_wsPss, onUpload,    .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "289:     JSI_OPT(STRING,     jsi_wsPss, rootdir,     .help=\"Directory to serve html from (\\\".\\\")\"),",
          "",
          "[Removed Lines]",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number\"),",
          "286:     JSI_OPT(FUNC,       jsi_wsPss, onUnknown,   .help=\"Function to call to server out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, args:array\"),",
          "",
          "[Added Lines]",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number, boolean:ok\"),",
          "286:     JSI_OPT(FUNC,       jsi_wsPss, onUnknown,   .help=\"Function to call to serve out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, args:array\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648: }",
          "1650: static Jsi_RC jsi_wsrecv_callback(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss,",
          "1652: {",
          "1653:     Jsi_Value *vpargs, *vargs[10];",
          "1654:     Jsi_Value* func = NULL;",
          "",
          "[Removed Lines]",
          "1651:     const char *inPtr, int nlen, bool isClose)",
          "",
          "[Added Lines]",
          "1651:     const char *inPtr, int nlen, bool isClose, bool isError)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1662:         return JSI_OK;",
          "1663:     vargs[n++] = (cmdPtr->deleted?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1664:     vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss?pss->wid:0));",
          "1666:         if (nlen<=0)",
          "1667:             return JSI_OK;",
          "1668:         vargs[n++]  = Jsi_ValueNewBlob(interp, (uchar*)inPtr, nlen);",
          "",
          "[Removed Lines]",
          "1665:     if (!isClose) {",
          "",
          "[Added Lines]",
          "1665:     if (isClose)",
          "1666:         vargs[n++] = Jsi_ValueNewBoolean(interp, isError);",
          "1667:     else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1737:     const char *inPtr = (char*)in;",
          "1738:     char client_name[128], client_ip[128];",
          "1739:     const char *res = \"\";",
          "1740: #ifdef EXTERNAL_POLL",
          "1741:     int m;",
          "1742:     int fd = (int)(long)user;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1742:     int isError = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1824:         break;",
          "1825:     }",
          "1826:     case LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ:",
          "1828:             rc = 1;",
          "1829:         break;",
          "1831:     case LWS_CALLBACK_COMPLETED_CLIENT_HTTP:",
          "1833:             rc = 1;",
          "1834:         break;",
          "",
          "[Removed Lines]",
          "1827:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 0) != JSI_OK)",
          "1832:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1) != JSI_OK)",
          "",
          "[Added Lines]",
          "1830:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 0, 0) != JSI_OK)",
          "1834:     case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:",
          "1835:         isError = 1;",
          "1837:         if (jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1, isError) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2265:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 0, 0);",
          "2266:         if (!pss) break;",
          "2267:         if (cmdPtr->onClose || pss->onClose) {",
          "2269:             if (rc != JSI_OK)",
          "2270:                 return Jsi_LogError(\"websock bad rcv eval\");",
          "2271:         }",
          "",
          "[Removed Lines]",
          "2268:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1);",
          "",
          "[Added Lines]",
          "2273:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2362:                     break;",
          "2363:                 }",
          "2364:             }",
          "2366:             if (inPtr != in)",
          "2367:                 Jsi_Free(inPtr);",
          "2368:             if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "2365:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, nlen, 0);",
          "",
          "[Added Lines]",
          "2370:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, nlen, 0, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2631:         return JSI_OK;",
          "2632:     cmdPtr->recvBufCnt--;",
          "2633:     const char *inPtr = Jsi_DSFreeDup(&pss->recvBuf);",
          "2635:     if (rc != JSI_OK) {",
          "2636:         pss->stats.recvErrCnt++;",
          "2637:         pss->stats.recvErrLast = time(NULL);",
          "",
          "[Removed Lines]",
          "2634:     Jsi_RC rc = jsi_wsrecv_callback(cmdPtr->interp, cmdPtr, pss, inPtr, nlen, 0);",
          "",
          "[Added Lines]",
          "2639:     Jsi_RC rc = jsi_wsrecv_callback(cmdPtr->interp, cmdPtr, pss, inPtr, nlen, 0, 0);",
          "",
          "---------------"
        ],
        "tests/sqlite.jsi||tests/sqlite.jsi": [
          "File: tests/sqlite.jsi -> tests/sqlite.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: ;db.query('insert into foo values(?,?);', {values:[91,'door']});",
          "66: ;db.query('select * from foo where b REGEXP \"^do\"');",
          "68: ;db.func('bar',function(n) { return n+'.000'; });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: ;db.query('select * from foo where REGEXP(\"^do\",b)');",
          "68: ;db.query('select * from foo where REGEXP(\"^DO\",b,\"i\")');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: db.query('insert into foo values(?,?);', {values:[91,'dog']}) ==> []",
          "165: db.query('insert into foo values(?,?);', {values:[91,'door']}) ==> []",
          "166: db.query('select * from foo where b REGEXP \"^do\"') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "167: db.func('bar',function(n) { return n+'.000'; }) ==> undefined",
          "168: db.onecolumn('select bar(a) from foo where b == 2;') ==> 95.000",
          "169: db.conf({onTrace:null}) ==> undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: db.query('select * from foo where REGEXP(\"^do\",b)') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "170: db.query('select * from foo where REGEXP(\"^DO\",b,\"i\")') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186: <tr><td>noJsonConv</td><td><i>BOOL</i></td><td>Do not JSON auto-convert array and object in CHARJSON columns.</td><td><i></i></td></tr>",
          "1187: <tr><td>lastInsertId</td><td><i>UINT64</i></td><td>The rowid of last insert.</td><td><i></i></td></tr>",
          "1188: <tr><td>load</td><td><i>BOOL</i></td><td>Extensions can be loaded.</td><td><i></i></td></tr>",
          "1189: <tr><td>mutex</td><td><i>STRKEY</i></td><td>Mutex type to use. (one of: <b>default</b>, <b>none</b>, <b>full</b>)</td><td><i>initOnly</i></td></tr>",
          "1190: <tr><td>name</td><td><i>DSTRING</i></td><td>The dbname to use instead of 'main'.</td><td><i>initOnly</i></td></tr>",
          "1191: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of Sqlite.conf to change options after create.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: <tr><td>maxRegexCache</td><td><i>INT</i></td><td>Max cache size for regex patterns; 0=disable, -1=unlimited (100).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1729: <tr><td>headers</td><td><i>ARRAY</i></td><td>Headers to send to browser on connection: name/value pairs.</td><td><i></i></td></tr>",
          "1730: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Is a websocket connection.</td><td><i></i></td></tr>",
          "1731: <tr><td>key</td><td><i>STRBUF</i></td><td>String key lookup in ids command for SSI echo ${#}.</td><td><i>readOnly</i></td></tr>",
          "1733: <tr><td>onGet</td><td><i>FUNC</i></td><td>Function to call to server handle http-get. @function(ws:userobj, id:number, url:string, query:array)</td><td><i></i></td></tr>",
          "1735: <tr><td>onRecv</td><td><i>FUNC</i></td><td>Function to call when websock data recieved. @function(ws:userobj, id:number, data:string)</td><td><i></i></td></tr>",
          "1736: <tr><td>onUpload</td><td><i>FUNC</i></td><td>Function to call handle http-post. @function(ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean)</td><td><i></i></td></tr>",
          "1737: <tr><td>rootdir</td><td><i>STRING</i></td><td>Directory to serve html from (\".\").</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1732: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number)</td><td><i></i></td></tr>",
          "1734: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to server out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1733: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number, boolean:ok)</td><td><i></i></td></tr>",
          "1735: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to serve out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
      "candidate_info": {
        "commit_hash": "4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
        "files": [
          "lib/Debug.jsi",
          "lib/Jsish.jsi",
          "lib/Zip.jsi",
          "lib/autoload.jsi",
          "lib/www/md/Logging.md",
          "lib/www/md/Misc.md",
          "lib/www/md/Modules.md",
          "lib/www/md/Reference.md",
          "lib/www/md/Start.md",
          "lib/www/md/Testing.md",
          "lib/www/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFileCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "tests/assert.jsi",
          "tests/file2.jsi",
          "tools/mkindex.jsi",
          "tools/protos.jsi",
          "tools/randtest.jsi",
          "tools/stubrenumber.jsi"
        ],
        "message": "Release \"3.4.5\": fix File.glob, add Interp.asserts, add Jsi_CopyDir, Zip -startDir\n\nFossilOrigin-Name: 27bcb4bd9f140eeafdafdab0249afec9620c87e333cb153f3baae27e3bed6f73",
        "before_after_code_files": [
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tests/assert.jsi||tests/assert.jsi",
          "tests/file2.jsi||tests/file2.jsi",
          "tools/mkindex.jsi||tools/mkindex.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/randtest.jsi||tools/randtest.jsi",
          "tools/stubrenumber.jsi||tools/stubrenumber.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:             args:self.args,",
          "484:             scriptFile:self.dbfile,",
          "485:             isSafe:self.safe,",
          "487:         };",
          "488:         self.interp = new Interp(dopts);",
          "489:         puts(\"Running in debugger: \"+self.dbfile+' '+self.args.toString());",
          "",
          "[Removed Lines]",
          "486:             name:'debugProg'",
          "",
          "[Added Lines]",
          "486:             name:'debugProg',",
          "487:             log:Interp.conf('log'),",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     return false;",
          "306: }",
          "308: if (Info.isMain()) {",
          "310:     var self = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: function Jsi_CopyDir(dir:string, to:string, globOpts:object=void) {",
          "309:     var opts = {recurse:true, types:'f', dir};",
          "310:     if (globOpts)",
          "311:          opts = Object.assign(opts, globopts);",
          "312:     var i, n, dn, d = File.glob(opts).sort();",
          "313:     to = File.realpath(to);",
          "314:     if (!File.exists(to))",
          "315:         File.mkdir(to);",
          "316:     for (i of d) {",
          "317:         n = File.join(to, i);",
          "318:         dn = File.dirname(n);",
          "319:         if (!File.exists(dn))",
          "320:             File.mkdir(dn);",
          "321:         File.copy(File.join(dir, i), n);",
          "322:     }",
          "323: }",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: function Zip(args:string|array, conf:object=void) {",
          "7:     const options = { // Implements zip functionality",
          "10:         indir       :'',        // Input directory",
          "12:     };",
          "13:     var self = parseOpts({}, options, conf);",
          "",
          "[Removed Lines]",
          "8:         userDir     :'',        // User directory to add to zip (zvfs)",
          "9:         outfile     :'',        // Output file for zvfs instead of appending \"sh\"",
          "11:         verbose     :false      // Echo file name of unzip.",
          "",
          "[Added Lines]",
          "9:         outfile     :'',        // Output file for zvfs instead of appending \"sh\"",
          "10:         startDir    :'',        // Start at dir for unzip.",
          "11:         userDir     :'',        // User directory to add to zip (zvfs)",
          "12:         verbose     :false,     // Echo file name of unzip.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         return 0;",
          "69:     }",
          "74:             zdir = '/zvfs';",
          "75:         else",
          "76:             zdir = Zvfs.mount(fname);",
          "80:         var flist = File.glob('*', {dir:zdir,recurse:true}).sort();",
          "81:         for (var i in flist) {",
          "",
          "[Removed Lines]",
          "71:     function unzip(fname:string, ddir='') {",
          "72:         fname = File.realpath(fname);",
          "73:         if (fname === Info.executable())",
          "77:         if (ddir !== '' && ddir.substr(-1,1) != '/')",
          "78:             ddir += '/';",
          "",
          "[Added Lines]",
          "72:     function unzip(fname:string, destDir='') {",
          "73:         if (fname)",
          "74:             fname = File.realpath(fname);",
          "75:         if (!fname || fname === Info.executable())",
          "79:         if (self.startDir)",
          "80:             zdir += '/'+self.startDir;",
          "81:         if (destDir !== '' && destDir.substr(-1,1) != '/')",
          "82:             destDir += '/';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:             if (ftyp[0] === 'd') continue;",
          "86:             if (self.verbose)",
          "87:                 puts(\"\"+fn);",
          "89:             if (fdir !== '.' && !File.isdir(fdir))",
          "90:                 File.mkdir(fdir, true);",
          "92:         }",
          "93:         return 0;",
          "94:     }",
          "",
          "[Removed Lines]",
          "88:             var fdir = File.dirname(ddir+fn);",
          "91:             File.write(ddir+fn, File.read(zdir+'/'+fn));",
          "",
          "[Added Lines]",
          "92:             var fdir = File.dirname(destDir+fn);",
          "95:             File.write(destDir+fn, File.read(zdir+'/'+fn));",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Jsi_Auto.Jsi_Opts       =",
          "12: Jsi_Auto.Jsi_SqlValues  =",
          "13: Jsi_Auto.Jsi_TableObj   =",
          "14: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "15: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "16: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: Jsi_Auto.Jsi_CopyDir    =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4709: }",
          "4711: bool jsi_isDebugKey(const char *key) {",
          "4713: }",
          "4715: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "4712:     return (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"));",
          "",
          "[Added Lines]",
          "4712:     return ((*key=='T' && (!Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")))",
          "4713:         ||  (*key=='A' && !Jsi_Strcmp(key, \"Assert\"))",
          "4714:         ||  (*key=='D' && !Jsi_Strcmp(key, \"Debug\")));",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:     Jsi_Value *dir;",
          "878:     const char *dirStr;",
          "879:     int dirLen;",
          "880:     const char *prefix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:     Jsi_Value *pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:     JSI_OPT(FUNC,   GlobData, filter,   .help=\"Filter function to call with each file, returning false to discard\", .flags=0, .custom=0, .data=(void*)\"file:string\"),",
          "889:     JSI_OPT(INT,    GlobData, limit,    .help=\"The maximum number of results to return/count: -1 is unlimited (Interp.maxArrayList)\"),",
          "890:     JSI_OPT(STRKEY, GlobData, noTypes,  .help=\"Filter files to exclude these \\\"types\\\"\"),",
          "891:     JSI_OPT(STRKEY, GlobData, prefix,   .help=\"String prefix to prepend to each file in result list\"),",
          "892:     JSI_OPT(BOOL,   GlobData, recurse,  .help=\"Recurse into sub-directories\"),",
          "893:     JSI_OPT(BOOL,   GlobData, retCount, .help=\"Return only the count of matches\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892:     JSI_OPT(VALUE,  GlobData, pattern,  .help=\"Pattern to use if arg 1 is null\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1166: #define FN_glob JSI_INFO(\"\\",
          "1167: With no arguments (or null) returns all files/directories in current directory.\\n\\",
          "1169: When the second argument is a function, it is called with each path, and filter on false.\\n\\",
          "1170: Otherwise second argument must be a set of options.\")",
          "1172:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1173: {",
          "1174:     int fo = 1, isOpts = 0;",
          "",
          "[Removed Lines]",
          "1168: The first argument can be a pattern (either a glob or regexp) of the files to return.\\n\\",
          "1171: static Jsi_RC FileGlobsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "1170: The first argument can be options, a pattern (either a glob or regexp) of the files to return.\\n\\",
          "1173: static Jsi_RC FileGlobCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1177:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 1);",
          "1178:     GlobData Data = {};",
          "1179:     Jsi_Obj *obj = NULL;",
          "1182:     const char *dcp, *zPattern = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182:     bool iso1 = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1186:     Data.flags = JSI_FILE_TYPE_FILES;",
          "1189:         switch (arg->vt) {",
          "1201:                         break;",
          "1204:             }",
          "1206:         }",
          "1210:     }",
          "1211:     if (isOpts && Jsi_OptionsProcess(interp, GlobOptions, &Data, arg, 0) < 0) {",
          "1212:         rc = JSI_ERROR;",
          "1213:         goto done;",
          "1214:     }",
          "1215:     if (!Data.limit)",
          "1216:         Data.limit = interp->maxArrayList;",
          "1217:     if (Data.dir) {",
          "",
          "[Removed Lines]",
          "1188:     if (arg)",
          "1190:         case JSI_VT_NULL: break;",
          "1191:         case JSI_VT_OBJECT:",
          "1192:         {",
          "1193:             Jsi_Obj *sobj = arg->d.obj;",
          "1194:             switch (sobj->ot) {",
          "1195:                 case JSI_OT_FUNCTION:",
          "1196:                     Data.filter = arg;",
          "1197:                     break;",
          "1198:                 case JSI_OT_OBJECT:",
          "1199:                     if (!sobj->isarrlist) {",
          "1200:                         isOpts = 1;",
          "1202:                     }",
          "1203:                 default: fo = 0;",
          "1205:             if (fo) break;",
          "1207:         default:",
          "1208:             rc = Jsi_LogError(\"arg2 must be a function, object or null\");",
          "1209:             goto done;",
          "",
          "[Added Lines]",
          "1191:     if (!arg && pat && Jsi_ValueIsObjType(interp, pat, JSI_OT_OBJECT)) {",
          "1192:         arg = pat;",
          "1193:         pat = NULL;",
          "1194:         iso1 = 1;",
          "1195:     }",
          "1196:     if (arg) {",
          "1198:             case JSI_VT_NULL: break;",
          "1199:             case JSI_VT_OBJECT:",
          "1200:             {",
          "1201:                 Jsi_Obj *sobj = arg->d.obj;",
          "1202:                 switch (sobj->ot) {",
          "1203:                     case JSI_OT_FUNCTION:",
          "1204:                         Data.filter = arg;",
          "1206:                     case JSI_OT_OBJECT:",
          "1207:                         if (!sobj->isarrlist) {",
          "1208:                             isOpts = 1;",
          "1209:                             break;",
          "1210:                         }",
          "1211:                     default: fo = 0;",
          "1212:                 }",
          "1213:                 if (fo) break;",
          "1215:             default:",
          "1216:                 rc = Jsi_LogError(\"arg2 must be a function, object or null\");",
          "1217:                 goto done;",
          "1224:     if (!iso1 && pat && pat->vt == JSI_VT_NULL && Data.pattern)",
          "1225:         pat = Data.pattern;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1220:             dcp = Jsi_FileRealpath(interp, Data.dir, NULL);",
          "1221:             if (!dcp)",
          "1222:                 dcp = Data.dirStr;",
          "1224:                 Data.dirLen = Jsi_Strlen(dcp);",
          "1225:         }",
          "1226:         Jsi_DSAppend(&dStr, dcp, (*dcp && dcp[Jsi_Strlen(dcp)-1]!='/')?\"/\":\"\", NULL);",
          "1227:     }",
          "",
          "[Removed Lines]",
          "1223:             else",
          "",
          "[Added Lines]",
          "1234:             else {",
          "1235:                 Jsi_DecrRefCount(interp, Data.dir);",
          "1236:                 Data.dir = Jsi_ValueNewStringDup(interp, dcp);",
          "1237:                 Jsi_IncrRefCount(interp, Data.dir);",
          "1239:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1285:     { \"isdir\",      FileIsdirCmd,       1,  1, \"file:string\",  .help=\"Return true if file is a directory\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1286:     { \"isfile\",     FileIsfileCmd,      1,  1, \"file:string\",  .help=\"Return true if file is a normal file\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1287:     { \"isrelative\", FileIsRelativeCmd,  1,  1, \"file:string\",  .help=\"Return true if file path is relative\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1289:     { \"link\",       FileLinkCmd,        2,  3, \"src:string, dest:string, ishard:boolean=false\",  .help=\"Link a file\", .retType=0, .flags=0, .info=FN_link },",
          "1290:     { \"lstat\",      FileLstatCmd,       1,  1, \"file:string\",  .help=\"Return status info for file\", .retType=(uint)JSI_TT_OBJECT },",
          "1291:     { \"mkdir\",      FileMkdirCmd,       1,  2, \"file:string,force:boolean=false\",  .help=\"Create a directory: force creates subdirs\" },",
          "",
          "[Removed Lines]",
          "1288:     { \"glob\",       FileGlobsCmd,        0,  2, \"pattern:regexp|string|null='*', options:function|object|null=void\", .help=\"Return list of files in dir with optional pattern match\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_glob, .opts=GlobOptions },",
          "",
          "[Added Lines]",
          "1303:     { \"glob\",       FileGlobCmd,        0,  2, \"options:regexp|string|object|null='*', opts:function|object|null=void\", .help=\"Return list of files in dir with optional pattern match\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_glob, .opts=GlobOptions },",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "971: } Jsi_TypeCheck;",
          "973: typedef enum {",
          "975:     jsi_AssertModeLog,",
          "977: } jsi_AssertMode;",
          "979: typedef struct {",
          "",
          "[Removed Lines]",
          "974:     jsi_AssertModeThrow,",
          "976:     jsi_AssertModePuts",
          "",
          "[Added Lines]",
          "975:     jsi_AssertModePuts,",
          "976:     jsi_AssertModeThrow",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1119:     int profileCnt;",
          "1120:     bool noNetwork;",
          "1121:     bool noInput;",
          "1122:     jsi_AssertMode assertMode;",
          "1123:     uint testMode;",
          "1124:     const char *jsppChars;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     bool asserts;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: static const char *jsi_SafeModeStrs[] = { \"none\", \"read\", \"write\", \"writeRead\", \"lockdown\", NULL };",
          "76: static const char *jsi_TypeChkStrs[] = { \"noreturn\", \"noundef\", \"nowith\", \"builtins\", \"funcdecl\", NULL };",
          "77: const char *jsi_callTraceStrs[] = { \"funcs\", \"cmds\", \"new\", \"return\", \"args\", \"notrunc\", \"noparent\", \"full\", \"before\", NULL};",
          "80: static Jsi_OptionSpec InterpOptions[] = {",
          "81:     JSI_OPT(ARRAY, Jsi_Interp, args,        .help=\"The console.arguments for interp\", jsi_IIOF),",
          "82:     JSI_OPT(CUSTOM,Jsi_Interp, assertMode,  .help=\"Action upon assert failure\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=jsi_AssertModeStrs ),",
          "83:     JSI_OPT(ARRAY, Jsi_Interp, autoFiles,   .help=\"File(s) to source for loading Jsi_Auto to handle unknown commands\"),",
          "84:     JSI_OPT(CUSTOM,Jsi_Interp, busyCallback,.help=\"Command in parent interp (or noOp) to periodically call\", .flags=0, .custom=Jsi_Opt_SwitchParentFunc, .data=(void*)\"interpName:string, opCnt:number\"),",
          "",
          "[Removed Lines]",
          "78: const char *jsi_AssertModeStrs[] = { \"throw\", \"log\", \"puts\", NULL};",
          "",
          "[Added Lines]",
          "78: const char *jsi_AssertModeStrs[] = { \"log\", \"puts\", \"throw\", NULL};",
          "82:     JSI_OPT(BOOL,  Jsi_Interp, asserts,     .help=\"Shortcut for toggling log:assert and assertMode=throw\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1074:         interp->tracePuts = 1;",
          "1075: }",
          "1077: static Jsi_Interp* jsi_InterpNew(Jsi_Interp *parent, Jsi_Value *opts, Jsi_InterpOpts *iopts)",
          "1078: {",
          "1079:     Jsi_Interp* interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078: static void jsi_interpAssertsUpdate(Jsi_Interp *interp) {",
          "1079:     if (interp->asserts) {",
          "1080:         interp->log |= JSI_LOG_ASSERT;",
          "1081:         interp->assertMode = jsi_AssertModeThrow;",
          "1082:     } else {",
          "1083:         interp->log &= ~JSI_LOG_ASSERT;",
          "1084:         interp->assertMode = jsi_AssertModePuts;",
          "1085:     }",
          "1086: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1446:     interp->framePtr->ingsc = interp->gsc = jsi_ScopeChainNew(interp, 0);",
          "1449:     jsi_UnitTestSetup(interp);",
          "1450:     if (interp->args && argc) {",
          "1451:         Jsi_LogBug(\"args may not be specified both as options and parameter\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     jsi_interpAssertsUpdate(interp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2879:     Jsi_RC rc;",
          "2880:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "2881:     Jsi_Interp *sinterp = interp;",
          "2882:     if (!udf || udf->subinterp == interp) {",
          "2883:         if (interp->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "2884:             return Jsi_LogError(\"Interp conf() is disabled for set\");",
          "2885:         rc = Jsi_OptionsConf(interp, InterpOptions, interp, opts, ret, 0);",
          "2886:     } else {",
          "2887:         sinterp = udf->subinterp;",
          "2888:         Jsi_Value *popts = opts;",
          "2889:         if (opts && opts->vt != JSI_VT_NULL && !Jsi_ValueString(interp, opts, NULL) && opts->vt == JSI_VT_OBJECT) {",
          "2890:             popts = Jsi_ValueNew1(sinterp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2894:     bool oasserts = interp->asserts;",
          "2901:         oasserts = interp->asserts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2895:             Jsi_DecrRefCount(sinterp, popts);",
          "2896:         Jsi_CleanValue(sinterp, interp, *ret, ret);",
          "2897:     }",
          "2898:     jsi_UnitTestSetup(sinterp);",
          "2899:     return rc;",
          "2900: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2912:     if (sinterp->asserts != oasserts)",
          "2913:         jsi_interpAssertsUpdate(sinterp);",
          "",
          "---------------"
        ],
        "tests/assert.jsi||tests/assert.jsi": [
          "File: tests/assert.jsi -> tests/assert.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ;assert(true,'true');",
          "5: ;assert(2*3 == 6,'math');",
          "6: try {",
          "7:     assert(false,'false');",
          "8: } catch(e) {",
          "9:     puts('caught error');",
          "10: }",
          "12: var x;",
          "13: ;x = 1;",
          "14: ;assert(false,'false2');",
          "",
          "[Removed Lines]",
          "11: ;Interp.conf({log:{assert:false}});",
          "",
          "[Added Lines]",
          "7: Interp.conf({asserts:true});",
          "14: ;Interp.conf({asserts:false});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: assert(true,'true') ==> undefined",
          "43: assert(2*3 == 6,'math') ==> undefined",
          "44: caught error",
          "46: x = 1 ==> 1",
          "49: Interp.conf({log:{assert:true}}) ==> undefined",
          "50: assert(function () { return (i<j); },'fail') ==> undefined",
          "53: assert(false,'this assert failed',{mode:'puts', noStderr:true}) ==> this assert failed",
          "54: undefined",
          "55: Interp.conf({assertMode:'puts', noStderr:true}) ==> undefined",
          "",
          "[Removed Lines]",
          "45: Interp.conf({log:{assert:false}}) ==> undefined",
          "47: assert(false,'false2') ==> undefined",
          "48: assert(false===true) ==> undefined",
          "51: caught error2: assert(false==true)",
          "52: assert(false,'false') ==> caught error2: false",
          "",
          "[Added Lines]",
          "48: Interp.conf({asserts:false}) ==> undefined",
          "50: assert(false,'false2') ==> false2",
          "51: undefined",
          "52: assert(false===true) ==> assert(false===true)`),puts(assert(false===true))",
          "53: undefined",
          "56: assert(false==true)",
          "57: assert(false,'false') ==> false",
          "58: undefined",
          "",
          "---------------"
        ],
        "tests/file2.jsi||tests/file2.jsi": [
          "File: tests/file2.jsi -> tests/file2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: File.mkdir('XX1/AA');",
          "5: File.mkdir('XX1/BB');",
          "6: File.rename('XX1/BB','XX1/CC.txt');",
          "7: ;File.glob(null,{dir:'XX1'}).sort();",
          "8: ;File.dirname('XX1/AA');",
          "9: ;File.rootname('XX1/CC.txt');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: ;File.glob({dir:'XX1'}).sort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: =!EXPECTSTART!=",
          "23: File.glob(null,{dir:'XX1'}).sort() ==> [ \"AA\", \"CC.txt\" ]",
          "24: File.dirname('XX1/AA') ==> XX1",
          "25: File.rootname('XX1/CC.txt') ==> XX1/CC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: File.glob({dir:'XX1'}).sort() ==> [ \"AA\", \"CC.txt\" ]",
          "",
          "---------------"
        ],
        "tools/mkindex.jsi||tools/mkindex.jsi": [
          "File: tools/mkindex.jsi -> tools/mkindex.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     puts(rv);",
          "22: }",
          "",
          "[Removed Lines]",
          "24: runModule(mkindex);",
          "",
          "[Added Lines]",
          "24: module(mkindex);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: File.prototype.executable = function(file:string):boolean {};",
          "62: File.prototype.exists = function(file:string):boolean {};",
          "63: File.prototype.extension = function(file:string):string {};",
          "65: File.prototype.isdir = function(file:string):boolean {};",
          "66: File.prototype.isfile = function(file:string):boolean {};",
          "67: File.prototype.isrelative = function(file:string):boolean {};",
          "",
          "[Removed Lines]",
          "64: File.prototype.glob = function(pattern:regexp|string|null='*', options:function|object|null=void):array {};",
          "",
          "[Added Lines]",
          "64: File.prototype.glob = function(options:regexp|string|object|null='*', opts:function|object|null=void):array {};",
          "",
          "---------------"
        ],
        "tools/randtest.jsi||tools/randtest.jsi": [
          "File: tools/randtest.jsi -> tools/randtest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     return;",
          "79: }",
          "",
          "[Removed Lines]",
          "81: runModule(randtest);",
          "",
          "[Added Lines]",
          "81: module(randtest);",
          "",
          "---------------"
        ],
        "tools/stubrenumber.jsi||tools/stubrenumber.jsi": [
          "File: tools/stubrenumber.jsi -> tools/stubrenumber.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     return rc;",
          "18: }",
          "",
          "[Removed Lines]",
          "20: runModule(stubrenumber);",
          "",
          "[Added Lines]",
          "20: module(stubrenumber);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f56367b712b0d56dbeac4c40c280e690f3f391f8",
      "candidate_info": {
        "commit_hash": "f56367b712b0d56dbeac4c40c280e690f3f391f8",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f56367b712b0d56dbeac4c40c280e690f3f391f8",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.15\": Enforce LOCKSAFE options.\n\nFossilOrigin-Name: 0c09596da715047cf00e101834e9b694feeaac6e6e85060e0d4e779aae802711",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 14",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 15",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:                 Jsi_PkgOpts po = {};",
          "1002:                 Jsi_Value *nopts = NULL;",
          "1003:                 if (opts) {",
          "1006:                     po.info = nopts;",
          "1007:                 }",
          "1008:                 Jsi_RC rc = Jsi_PkgProvideEx(interp->topInterp, name, version, initProc, &po);",
          "1009:                 if (rc != JSI_OK)",
          "1010:                     return JSI_ERROR;",
          "1011:                 ptr = jsi_PkgGet(interp->topInterp, name);",
          "",
          "[Removed Lines]",
          "1004:                     nopts = Jsi_ValueNew(interp);",
          "1005:                     Jsi_CleanValue(interp, interp->topInterp, po.info, &nopts);",
          "",
          "[Added Lines]",
          "1004:                     nopts = Jsi_ValueNew1(interp->topInterp);",
          "1005:                     Jsi_CleanValue(interp, interp->topInterp, opts, &nopts);",
          "1009:                 if (nopts)",
          "1010:                     Jsi_DecrRefCount(interp->topInterp, nopts);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     JSI_OPT(ARRAY, Jsi_Interp, autoFiles,   .help=\"File(s) to source for loading Jsi_Auto to handle unknown commands\"),",
          "89:     JSI_OPT(CUSTOM,Jsi_Interp, busyCallback,.help=\"Command in parent interp (or noOp) to periodically call\", .flags=0, .custom=Jsi_Opt_SwitchParentFunc, .data=(void*)\"interpName:string, opCnt:number\"),",
          "90:     JSI_OPT(INT   ,Jsi_Interp, busyInterval,.help=\"Call busyCallback command after this many op-code evals (100000)\"),",
          "92:     JSI_OPT(BOOL,  Jsi_Interp, coverage,    .help=\"On exit generate detailed code coverage for function calls (with profile)\"),",
          "93:     JSI_OPT(CUSTOM,Jsi_Interp, debugOpts,   .help=\"Options for debugging\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpDebugOptions),",
          "94:     JSI_OPT(BOOL,  Jsi_Interp, interactive, .help=\"Force interactive mode. ie. ignore no_interactive flag\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "91:     JSI_OPT(STRKEY,Jsi_Interp, confFile,    .help=\"Config file of options in non-strict JSON form\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "",
          "[Added Lines]",
          "91:     JSI_OPT(STRKEY,Jsi_Interp, confFile,    .help=\"Config file of options in JSON non-strict format\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "118:     JSI_OPT(FUNC,  Jsi_Interp, onComplete,  .help=\"Function to return commands completions for interactive mode.  Default uses Info.completions \", .flags=0, .custom=0, .data=(void*)\"prefix:string, start:number, end:number\" ),",
          "119:     JSI_OPT(FUNC,  Jsi_Interp, onEval,      .help=\"Function to get control for interactive evals\", .flags=0, .custom=0, .data=(void*)\"cmd:string\" ),",
          "120:     JSI_OPT(FUNC,  Jsi_Interp, onExit,      .help=\"Command to call in parent on exit, returns true to continue\", jsi_IIOF , .custom=0, .data=(void*)\"\"),",
          "",
          "[Removed Lines]",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\" ),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noNetwork,   .help=\"Disable new Socket/WebSocket, or load of builtin MySql\" ),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noStderr,    .help=\"Make puts, log, assert, etc use stdout\" ),",
          "117:     JSI_OPT(BOOL,  Jsi_Interp, noSubInterps,.help=\"Disallow sub-interp creation\"),",
          "",
          "[Added Lines]",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noNetwork,   .help=\"Disable new Socket/WebSocket, or load of builtin MySql\", .flags=JSI_OPT_LOCKSAFE),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noStderr,    .help=\"Make puts, log, assert, etc use stdout\", .flags=JSI_OPT_LOCKSAFE),",
          "117:     JSI_OPT(BOOL,  Jsi_Interp, noSubInterps,.help=\"Disallow sub-interp creation\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     JSI_OPT(STRING,Jsi_Interp, scriptFile,  .help=\"Interp init script file\"),",
          "130:     JSI_OPT(STRING,Jsi_Interp, stdinStr,    .help=\"String to use as stdin for console.input()\"),",
          "131:     JSI_OPT(STRING,Jsi_Interp, stdoutStr,   .help=\"String to collect stdout for puts()\"),",
          "133:     JSI_OPT(CUSTOM,Jsi_Interp, subOpts,     .help=\"Infrequently used sub-options\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpSubOptions),",
          "134:     JSI_OPT(BOOL,  Jsi_Interp, subthread,   .help=\"Create a threaded Interp\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "135:     JSI_OPT(CUSTOM,Jsi_Interp, traceCall,   .help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Added Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:     int len, iskey;",
          "227:     Jsi_Obj *obj;",
          "228:     switch (val->vt) {",
          "230:         case JSI_VT_NULL: Jsi_ValueMakeNull(tointerp, ret); return rc;",
          "231:         case JSI_VT_BOOL: Jsi_ValueMakeBool(tointerp, ret, val->d.val); return rc;",
          "232:         case JSI_VT_NUMBER: Jsi_ValueMakeNumber(tointerp, ret, val->d.num); return rc;",
          "",
          "[Removed Lines]",
          "229:         case JSI_VT_UNDEF: Jsi_ValueMakeUndef(interp, ret); return rc;",
          "",
          "[Added Lines]",
          "229:         case JSI_VT_UNDEF: Jsi_ValueMakeUndef(tointerp, ret); return rc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1418:     if (parent && parent->isSafe) {",
          "1419:         interp->isSafe = 1;",
          "1420:         interp->safeMode = parent->safeMode;",
          "1422:         if (interp->safeWriteDirs || interp->safeReadDirs || interp->safeExecPattern) {",
          "1423:             Jsi_LogWarn(\"ignoring safe* options in safe sub-sub-interp\");",
          "1424:             if (interp->safeWriteDirs) Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "",
          "[Removed Lines]",
          "1421:         interp->maxOpCnt = parent->maxOpCnt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1426:             interp->safeWriteDirs = interp->safeReadDirs = NULL;",
          "1427:             interp->safeExecPattern = NULL;",
          "1428:         }",
          "1429:     }",
          "1431:     jsi_InterpConfFiles(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1429:         interp->maxDepth = parent->maxDepth;",
          "1430:         interp->maxArrayList = parent->maxArrayList;",
          "1431:         interp->maxIncDepth = parent->maxIncDepth;",
          "1432:         interp->maxInterpDepth = parent->maxInterpDepth;",
          "1433:         interp->maxUserObjs = parent->maxUserObjs;",
          "1434:         interp->maxOpCnt = parent->maxOpCnt;",
          "1435:         interp->memLeakCnt = parent->memLeakCnt;",
          "1436:         if (parent->noLoad) interp->noLoad = 1;",
          "1437:         if (parent->noNetwork) interp->noNetwork = 1;",
          "1438:         if (parent->noStderr) interp->noStderr = 1;",
          "1439:         if (parent->noSubInterps) interp->noSubInterps = 1;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: <tr><td>autoFiles</td><td><i>ARRAY</i></td><td>File(s) to source for loading Jsi_Auto to handle unknown commands.</td><td><i></i></td></tr>",
          "623: <tr><td>busyCallback</td><td><i>CUSTOM</i></td><td>Command in parent interp (or noOp) to periodically call.</td><td><i></i></td></tr>",
          "624: <tr><td>busyInterval</td><td><i>INT</i></td><td>Call busyCallback command after this many op-code evals (100000).</td><td><i></i></td></tr>",
          "626: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "627: <tr><td>debugOpts</td><td><i><a href='#debugOptsOptions'>options</a></i></td><td>Options for debugging.</td><td><i></i></td></tr>",
          "628: <tr><td>interactive</td><td><i>BOOL</i></td><td>Force interactive mode. ie. ignore no_interactive flag.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "625: <tr><td>confFile</td><td><i>STRKEY</i></td><td>Config file of options in non-strict JSON form.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "625: <tr><td>confFile</td><td><i>STRKEY</i></td><td>Config file of options in JSON non-strict format.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a179e99442d3dfa23c1cde7c100f0e6019650cf6",
      "candidate_info": {
        "commit_hash": "a179e99442d3dfa23c1cde7c100f0e6019650cf6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a179e99442d3dfa23c1cde7c100f0e6019650cf6",
        "files": [
          "c-demos/Makefile",
          "c-demos/cextn/Bag.jsc",
          "c-demos/cextn/Baker.jsc",
          "c-demos/cextn/Bee.jsc",
          "c-demos/cextn/Car.jsc",
          "c-demos/cextn/Makefile",
          "c-demos/cextn/Sum.jsc",
          "c-demos/cextn/Tiny.jsc",
          "c-demos/cextn/bagtest.jsi",
          "c-demos/cextn/ext_test.jsi",
          "c-demos/cextn/logtest.jsi",
          "c-demos/cextn/new/Bee.jsi",
          "c-demos/cextn/new/Tiny.jsi",
          "c-demos/cextn/tinytest.jsi",
          "lib/Cextn.jsi",
          "lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCData.c",
          "src/jsiCmds.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.1.4\": rename Cdata to Cextn\n\nFossilOrigin-Name: c9c793f06b0e18ce42f93e12bb25ae5f11fbd6d044317d9aab73c7dccb0c9802",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cextn.jsi",
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cextn.jsi": [
          "File: lib/Cdata.jsi -> lib/Cextn.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: {",
          "10:     var options = {         // The C-API preprocessor for structs and enums.",
          "",
          "[Removed Lines]",
          "7: function Cdata(args:array, conf:object=void)",
          "",
          "[Added Lines]",
          "7: function Cextn(args:array, conf:object=void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         Trace       :false, jscHeaderStr:'', parmFlags:'',",
          "37:         objOptCmdStr:'', objCmdStr:'', selfSuffix:'',",
          "38:     };",
          "40:     self.version = self.pkg.version;",
          "41:     self.verStr = self.pkg.verStr;",
          "42:     var Ex = {asize:0, offs:1, size:2, sig:3};",
          "",
          "[Removed Lines]",
          "39:     self.pkg = require('Cdata', 0);",
          "",
          "[Added Lines]",
          "39:     self.pkg = require('Cextn', 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1716:     return retval;",
          "1717: }",
          "1720: if (isMain())",
          "",
          "[Removed Lines]",
          "1719: provide(Cdata, \"2\", {logmask:'debug,trace'});",
          "1721:     puts(moduleRun(Cdata));",
          "",
          "[Added Lines]",
          "1719: provide(Cextn, \"2\", {logmask:'debug,trace'});",
          "1721:     puts(moduleRun(Cextn));",
          "",
          "---------------"
        ],
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:             return;",
          "182:         switch (cmd) {",
          "183:             case 'breakpoints':",
          "185:                 for (var i in blst.sort()) {",
          "187:                     str = format(\"#%-5d: enabled=%s hits=%d, \", bp.id, bp.enabled?\"true, \":\"false,\", bp.hits);",
          "188:                     switch (bp.type) {",
          "189:                         case 'line': str += format(\"file=%s:%d\", bp.file, bp.line); break;",
          "",
          "[Removed Lines]",
          "184:                 var blst = self.interp.eval('Debugger.info()');",
          "186:                     var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "184:                 var blst = self.interp.eval('Util.dbgInfo()');",
          "186:                     var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:         }",
          "250:         try {",
          "252:             puts((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "253:         } catch(e) {",
          "254:             puts(\"add failed: \"+e);",
          "",
          "[Removed Lines]",
          "251:             var b = self.interp.eval('Debugger.add(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "[Added Lines]",
          "251:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:     function cmdDelete(lst:array, line:number, func:string, file:string) {",
          "259:         var bp, num, val = lst[1];",
          "260:         if (lst.length == 1) {",
          "262:             for (var i in bps) {",
          "264:             }",
          "265:             return;",
          "266:         }",
          "",
          "[Removed Lines]",
          "261:             var bps = self.interp.eval('Debugger.info()');",
          "263:                 self.interp.eval('Debugger.remove('+bps[i]+')');",
          "",
          "[Added Lines]",
          "261:             var bps = self.interp.eval('Util.dbgInfo()');",
          "263:                 self.interp.eval('Util.dbgRemove('+bps[i]+')');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:             return;",
          "270:         }",
          "271:         try {",
          "273:         } catch(e) {",
          "274:             eputs(\"remove failed: \"+e);",
          "275:         }",
          "",
          "[Removed Lines]",
          "272:             self.interp.eval('Debugger.remove('+num+')');",
          "",
          "[Added Lines]",
          "272:             self.interp.eval('Util.dbgRemove('+num+')');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:     function cmdEnable(lst:array, on:boolean) {",
          "279:         var bp, num, val = lst[1];",
          "280:         if (lst.length == 1) {",
          "282:             for (var i in bps) {",
          "284:             }",
          "285:             return;",
          "286:         }",
          "287:         if (val === undefined || (num=parseIntN(val))<=0)",
          "288:             return eputs(\"bad index: \"+val);",
          "289:         try {",
          "291:         } catch(e) {",
          "292:             eputs(\"enable failed: \"+e);",
          "293:         }",
          "",
          "[Removed Lines]",
          "281:             var bps = self.interp.eval('Debugger.info()');",
          "283:                 self.interp.eval('Debugger.enable('+bps[i]+','+on+')');",
          "290:             self.interp.eval('Debugger.enable('+num+','+on+')');",
          "",
          "[Added Lines]",
          "281:             var bps = self.interp.eval('Util.dbgInfo()');",
          "283:                 self.interp.eval('Util.dbgEnable('+bps[i]+','+on+')');",
          "290:             self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:             return;",
          "362:         switch (cmd) {",
          "363:             case 'bp':",
          "365:                 if ((!blst) || blst.length<=0)",
          "366:                     return;",
          "367:                 for (var i in blst.sort()) {",
          "369:                     str = format(\"#%-5d: enabled=%s hits=%d, \", bp.id, bp.enabled?\"true, \":\"false,\", bp.hits);",
          "370:                     switch (bp.type) {",
          "371:                         case 'line': str += format(\"file=%s:%d\", bp.file, bp.line); break;",
          "",
          "[Removed Lines]",
          "364:                 var blst = self.interp.eval('Debugger.info()');",
          "368:                     var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "364:                 var blst = self.interp.eval('Util.dbgInfo()');",
          "368:                     var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     }",
          "397:     function webBPUpdate() {",
          "399:         if (blst && blst.length) {",
          "400:             for (var i in blst.sort()) {",
          "402:                 bps.push(bp);",
          "403:             }",
          "404:         }",
          "",
          "[Removed Lines]",
          "398:         var bps = [], blst = self.interp.eval('Debugger.info()');",
          "401:                 var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "398:         var bps = [], blst = self.interp.eval('Util.dbgIfo()');",
          "401:                 var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "442:         var done = false;",
          "443:         try {",
          "445:             wputs((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "446:             done = true;",
          "447:         } catch(e) {",
          "",
          "[Removed Lines]",
          "444:             var b = self.interp.eval('Debugger.add(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "[Added Lines]",
          "444:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "457:     function cmdDelete(lst:array, line:number, func:string, file:string) {",
          "458:         var bp, num, val = lst[1];",
          "459:         if (lst.length == 1) {",
          "461:             for (var i in bps) {",
          "463:             }",
          "464:         } else {",
          "465:             if (val === undefined || (num=parseIntN(val))<=0) {",
          "",
          "[Removed Lines]",
          "460:             var bps = self.interp.eval('Debugger.info()');",
          "462:                 self.interp.eval('Debugger.remove('+bps[i]+')');",
          "",
          "[Added Lines]",
          "460:             var bps = self.interp.eval('Util.dbgInfo()');",
          "462:                 self.interp.eval('Util.dbgRemove('+bps[i]+')');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:                 return;",
          "468:             }",
          "469:             try {",
          "471:             } catch(e) {",
          "472:                 eputs(\"remove failed: \"+e);",
          "473:             }",
          "",
          "[Removed Lines]",
          "470:                 self.interp.eval('Debugger.remove('+num+')');",
          "",
          "[Added Lines]",
          "470:                 self.interp.eval('Util.dbgRemove('+num+')');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "478:     function cmdEnable(lst:array, on:boolean) {",
          "479:         var bp, num, val = lst[1];",
          "480:         if (lst.length == 1) {",
          "482:             for (var i in bps) {",
          "484:             }",
          "485:         } else {",
          "486:             if (val === undefined || (num=parseIntN(val))<=0)",
          "487:                 return eputs(\"bad index: \"+val);",
          "488:             try {",
          "490:             } catch(e) {",
          "491:                 return eputs(\"enable failed: \"+e);",
          "492:             }",
          "",
          "[Removed Lines]",
          "481:             var bps = self.interp.eval('Debugger.info()');",
          "483:                 self.interp.eval('Debugger.enable('+bps[i]+','+on+')');",
          "489:                 self.interp.eval('Debugger.enable('+num+','+on+')');",
          "",
          "[Added Lines]",
          "481:             var bps = self.interp.eval('Util.dbgInfo()');",
          "483:                 self.interp.eval('Util.dbgEnable('+bps[i]+','+on+')');",
          "489:                 self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "16: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "17: Jsi_Auto.Jspp       = 'source(\"'+Info.scriptDir()+'/Jspp.jsi\")';",
          "19: Jsi_Auto.Websrv     = 'source(\"'+Info.scriptDir()+'/Websrv.jsi\")';",
          "20: Jsi_Auto.Wget       = 'source(\"'+Info.scriptDir()+'/Wget.jsi\")';",
          "21: Jsi_Auto.Debug      = 'source(\"'+Info.scriptDir()+'/Debug.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Cdata      = 'source(\"'+Info.scriptDir()+'/Cdata.jsi\")';",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Cextn      = 'source(\"'+Info.scriptDir()+'/Cextn.jsi\")';",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <stdint.h>",
          "18: #include <sys/time.h>",
          "25: enum { jsi_CTYP_DYN_MEMORY=(1LL<<32), jsi_CTYP_STRUCT=(1LL<<33), jsi_CTYP_ENUM=(1LL<<34) };",
          "27: typedef struct {",
          "",
          "[Removed Lines]",
          "20: #define UdcGet(udf, _this, funcPtr) \\",
          "21:    CDataObj *udf = (typeof(udf))Jsi_UserObjGetData(interp, _this, funcPtr); \\",
          "22:     if (!udf) \\",
          "23:         return Jsi_LogError(\"CData.%s called with non-CData object\", funcPtr->cmdSpec->name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4901: };",
          "4902: #endif",
          "4914: static Jsi_CmdSpec infoCmds[] = {",
          "4915:     { \"argv0\",      InfoArgv0Cmd,       0,  0, \"\", .help=\"Return initial start script file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4916:     { \"cmds\",       InfoCmdsCmd,        0,  2, \"val:string|regexp='*', options:object=void\", .help=\"Return details or list of matching commands\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT, .flags=0, .info=0, .opts=InfoCmdsOptions },",
          "",
          "[Removed Lines]",
          "4904: #ifndef JSI_OMIT_DEBUG",
          "4905: static Jsi_CmdSpec debugCmds[] = {",
          "4906:     { \"add\",        DebugAddCmd,    1,  2, \"val:string|number, temp:boolean=false\", .help=\"Add a breakpoint for line, file:line or func\", .retType=(uint)JSI_TT_NUMBER },",
          "4907:     { \"remove\",     DebugRemoveCmd, 1,  1, \"id:number\", .help=\"Remove breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4908:     { \"enable\",     DebugEnableCmd, 2,  2, \"id:number, on:boolean\", .help=\"Enable/disable breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4909:     { \"info\",       DebugInfoCmd,   0,  1, \"id:number=void\", .help=\"Return info about one breakpoint, or list of bp numbers\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_ARRAY },",
          "4910:     { NULL, 0,0,0,0,  .help=\"Debugger breakpoint management\" }",
          "4911: };",
          "4912: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4992: static Jsi_CmdSpec utilCmds[] = {",
          "4993: #ifndef JSI_OMIT_BASE64",
          "4994:     { \"argArray\",   SysArgArrayCmd,  1,  1, \"arg:any|undefined\", .help=\"Coerces non-null to an array, if necessary\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_NULL },",
          "4995:     { \"complete\",   SysCompleteCmd,  1,  1, \"val:string\",.help=\"Return true if string is complete command with balanced braces, etc\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4996:     { \"base64\",     SysBase64Cmd,    1,  2, \"val:string, decode:boolean=false\",.help=\"Base64 encode/decode a string\", .retType=(uint)JSI_TT_STRING },",
          "4997:     { \"hexStr\",     SysHexStrCmd,    1,  2, \"val:string, decode:boolean=false\",.help=\"Hex encode/decode a string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4985: #ifndef JSI_OMIT_DEBUG",
          "4986:     { \"dbgAdd\",     DebugAddCmd,    1,  2, \"val:string|number, temp:boolean=false\", .help=\"Debugger add a breakpoint for line, file:line or func\", .retType=(uint)JSI_TT_NUMBER },",
          "4987:     { \"dbgRemove\",  DebugRemoveCmd, 1,  1, \"id:number\", .help=\"Debugger remove breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4988:     { \"dbgEnable\",  DebugEnableCmd, 2,  2, \"id:number, on:boolean\", .help=\"Debugger enable/disable breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4989:     { \"dbgInfo\",    DebugInfoCmd,   0,  1, \"id:number=void\", .help=\"Debugger return info about one breakpoint, or list of bp numbers\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_ARRAY },",
          "4990: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5081:     Jsi_CommandCreateSpecs(interp, \"Util\",   utilCmds,   NULL, 0);",
          "5082: #ifndef JSI_OMIT_EVENT",
          "5083:     Jsi_CommandCreateSpecs(interp, \"Event\",  eventCmds,  NULL, 0);",
          "5087: #endif",
          "5088:     return JSI_OK;",
          "5089: }",
          "",
          "[Removed Lines]",
          "5084: #endif",
          "5085: #ifndef JSI_OMIT_DEBUG",
          "5086:     Jsi_CommandCreateSpecs(interp, \"Debugger\",  debugCmds,  NULL, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:                 Jsi_Value *v __attribute__((unused));",
          "621:                 Jsi_Value *kPtr = &key; // Note: a string key so no reset needed.",
          "622:                 Jsi_ValueMakeStringKey(interp, &kPtr, argkey);",
          "625:             }",
          "626:         }",
          "627:     }",
          "",
          "[Removed Lines]",
          "623:                 v = jsi_ValueObjKeyAssign(interp, arguments, kPtr, NULL, JSI_OM_DONTENUM);",
          "624:                 jsi_ValueDebugLabel(v, \"locals\", who->name);",
          "",
          "[Added Lines]",
          "623:                 jsi_ValueObjKeyAssign(interp, arguments, kPtr, NULL, JSI_OM_DONTENUM);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:                 rc = Jsi_EvalString(interp, \"moduleRun('Archive');\", JSI_EVAL_ISMAIN);",
          "805:                 break;",
          "806:             case 'c':",
          "808:                 break;",
          "809:             case 'd':",
          "810:                 interp->debugOpts.isDebugger = 1;",
          "",
          "[Removed Lines]",
          "807:                 rc = Jsi_EvalString(interp, \"puts(moduleRun('Cdata'));\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "807:                 rc = Jsi_EvalString(interp, \"puts(moduleRun('Cextn'));\", JSI_EVAL_ISMAIN);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1010:     if (!kstr)",
          "1011:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1013:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1014:         if (v) {",
          "1015:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "1012:     if (obj && obj->setters) {",
          "",
          "[Added Lines]",
          "1012:     if (obj && obj->setters && value) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: Channel.prototype.tell = function():number {};",
          "46: Channel.prototype.truncate = function(pos:number):number {};",
          "47: Channel.prototype.write = function(data):number {};",
          "53: var Event = function(cmd,args) {};",
          "54: Event.prototype.clearInterval = function(id:number):void {};",
          "55: Event.prototype.info = function(id:number):object {};",
          "",
          "[Removed Lines]",
          "48: var Debugger = function(cmd,args) {};",
          "49: Debugger.prototype.add = function(val:string|number, temp:boolean=false):number {};",
          "50: Debugger.prototype.enable = function(id:number, on:boolean):void {};",
          "51: Debugger.prototype.info = function(id:number=void):array|object {};",
          "52: Debugger.prototype.remove = function(id:number):void {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309: Util.prototype.base64 = function(val:string, decode:boolean=false):string {};",
          "310: Util.prototype.complete = function(val:string):boolean {};",
          "311: Util.prototype.crc32 = function(val:string, crcSeed=0):number {};",
          "312: Util.prototype.decrypt = function(val:string, key:string):string {};",
          "313: Util.prototype.encrypt = function(val:string, key:string):string {};",
          "314: Util.prototype.fromCharCode = function(code:number):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: Util.prototype.dbgAdd = function(val:string|number, temp:boolean=false):number {};",
          "308: Util.prototype.dbgEnable = function(id:number, on:boolean):void {};",
          "309: Util.prototype.dbgInfo = function(id:number=void):array|object {};",
          "310: Util.prototype.dbgRemove = function(id:number):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: |write|(data):number |Write data to file.|",
          "108: ## Event",
          "",
          "[Removed Lines]",
          "92: ## Debugger",
          "96: Debugger breakpoint management.",
          "99: ### Methods",
          "100: |Method|Function Argument Types|Description|",
          "101: |---|---|---|",
          "102: |add|(val:string&#124;number, temp:boolean=false):number |Add a breakpoint for line, file:line or func.|",
          "103: |enable|(id:number, on:boolean):void |Enable/disable breakpoint.|",
          "104: |info|(id:number=void):array&#124;object |Return info about one breakpoint, or list of bp numbers.|",
          "105: |remove|(id:number):void |Remove breakpoint.|",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006: |base64|(val:string, decode:boolean=false):string |Base64 encode/decode a string.|",
          "1007: |complete|(val:string):boolean |Return true if string is complete command with balanced braces, etc.|",
          "1008: |crc32|(val:string, crcSeed=0):number |Calculate 32-bit CRC.|",
          "1009: |decrypt|(val:string, key:string):string |Decrypt data using BTEA encryption. Keys that are not 16 bytes use the MD5 hash of the key.|",
          "1010: |encrypt|(val:string, key:string):string |Encrypt data using BTEA encryption. Keys that are not 16 bytes use the MD5 hash of the key.|",
          "1011: |fromCharCode|(code:number):string |Return char with given character code.|",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993: |dbgAdd|(val:string&#124;number, temp:boolean=false):number |Debugger add a breakpoint for line, file:line or func.|",
          "994: |dbgEnable|(id:number, on:boolean):void |Debugger enable/disable breakpoint.|",
          "995: |dbgInfo|(id:number=void):array&#124;object |Debugger return info about one breakpoint, or list of bp numbers.|",
          "996: |dbgRemove|(id:number):void |Debugger remove breakpoint.|",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "604578dc3f22ef71733fdfb39c5a4d913571de5a",
      "candidate_info": {
        "commit_hash": "604578dc3f22ef71733fdfb39c5a4d913571de5a",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/604578dc3f22ef71733fdfb39c5a4d913571de5a",
        "files": [
          "lib/Csspp.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/Htmlpp.jsi",
          "lib/Jsish.jsi",
          "lib/Jspp.jsi",
          "lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.44\": moduleOpts fix, LogError fix\n\nFossilOrigin-Name: 5df6cf900a4ad12d6103e4b22f82704f378722cefea94f30cbc4f13725ac0282",
        "before_after_code_files": [
          "lib/Csspp.jsi||lib/Csspp.jsi",
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/Htmlpp.jsi||lib/Htmlpp.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Jspp.jsi||lib/Jspp.jsi",
          "lib/Safe.jsi||lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Csspp.jsi||lib/Csspp.jsi": [
          "File: lib/Csspp.jsi -> lib/Csspp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:             nstr = nstr.trim();",
          "75:         var res = nstr;",
          "76:         var cres = nstr;",
          "78:         if (self.vmap.length) {",
          "79:             if (self.vmap.indexOf(fnam)>=0)",
          "80:                 errorCmd(\"Redefined symbol: \"+fnam);",
          "",
          "[Removed Lines]",
          "77:         var i = self.maxRecurse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     };",
          "30:     var self = {",
          "31:         curline:0,",
          "32:         curfile:null,",
          "33:         curlev:0,",
          "34:         curfunc:null,",
          "36:         done:false,",
          "37:         fsent:[], // File name cache",
          "38:         files:[],",
          "39:         filedata:{},",
          "40:         file:null,",
          "41:         id:-1,",
          "42:         isSafe:false,   // Debug program in a safe interp",
          "43:         lastCmd:'',     // Previous cmd, empty string repeats.",
          "44:         lastCommand:'',  // Full command name (unaliased)",
          "45:         lastPrintArg:null,",
          "46:         level:0,",
          "47:         line:0,",
          "48:         optdbfile: '~/.debugui.db',   // Store options, etc.",
          "49:         prevLevel:0,",
          "50:         rootdir: null,  // Root for application files.",
          "51:         stopped:false,",
          "52:         toplev:0,",
          "53:         version:1.0,",
          "54:         Debug:false,",
          "55:         Trace:false,",
          "",
          "[Removed Lines]",
          "35:         curfunc:null, curlevel:0, optstr:'', bpId:0,",
          "",
          "[Added Lines]",
          "31:         args:null,",
          "32:         bpId:0,",
          "33:         closeId:null,",
          "38:         curlevel:0,",
          "39:         dbfile:null,",
          "41:         find:null,",
          "47:         interp:null,",
          "54:         opstr:'',",
          "55:         optdb:null,",
          "62:         ws:null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:         var req = require(\"DebugUI\", 1.0);",
          "695:         if (!self.rootdir)",
          "696:             self.rootdir=File.dirname(req.loadFile);",
          "698:         if (typeof(fileargs) !== 'array')",
          "699:             self.dbfile = fileargs;",
          "700:         else {",
          "",
          "[Removed Lines]",
          "697:         self.args = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Htmlpp.jsi||lib/Htmlpp.jsi": [
          "File: lib/Htmlpp.jsi -> lib/Htmlpp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     if (self.interpOptStr.length)",
          "38:         self.intOpts = JSON.parse(self.interpOptStr);",
          "41:     function callback(iname:string, cnt:number) {",
          "",
          "[Removed Lines]",
          "39:     self.intOpts.maxOpCnt = self.maxOptCnt;",
          "",
          "[Added Lines]",
          "39:     self.intOpts.maxOpCnt = self.maxOpCnt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:                 self.rc += '\\n\\n'+self.errs+\"</pre>\";",
          "260:             }",
          "261:         }",
          "263:             delete self.interp;",
          "266:         return self.rc;",
          "267:     }",
          "268:     if (self.wsName.length)",
          "",
          "[Removed Lines]",
          "262:         if (self.delInterp) {",
          "264:             self.interp = null;",
          "265:         }",
          "",
          "[Added Lines]",
          "262:         if (self.delInterp)",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         objOpts     :{},        // Options for objOpts",
          "266:         verbose     :false",
          "267:     };",
          "269:     var cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "",
          "[Removed Lines]",
          "268:     moduleOpts(self, options);",
          "",
          "[Added Lines]",
          "268:     parseOpts(self, options, conf);",
          "",
          "---------------"
        ],
        "lib/Jspp.jsi||lib/Jspp.jsi": [
          "File: lib/Jspp.jsi -> lib/Jspp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:         funcLst:[],         // List of functions",
          "33:         funcIdx:0,          // Func idx.",
          "34:         curFile:'',         // Current file being processed.",
          "36:     };",
          "37:     var ws;",
          "39:     moduleOpts(self, options);",
          "44:     function typeValidate(typ) {",
          "45:         if (typ === '') return [];",
          "",
          "[Removed Lines]",
          "35:         tail:''             // Basename of file.",
          "41:     self.typeNameStr = \"number string boolean array function object regexp any userobj void null undefined\";",
          "42:     self.typeNameList = self.typeNameStr.split(' ');",
          "",
          "[Added Lines]",
          "35:         tail:'',            // Basename of file.",
          "36:         typeNameStr:\"number string boolean array function object regexp any userobj void null undefined\",",
          "38:     self.typeNameList = self.typeNameStr.split(' ');",
          "",
          "---------------"
        ],
        "lib/Safe.jsi||lib/Safe.jsi": [
          "File: lib/Safe.jsi -> lib/Safe.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         var sopts = {isSafe:true, name:'safeProg'};",
          "66:         if (self.paranoid) {",
          "67:             self.noRead = true;",
          "69:             sopts.noNetwork = true;",
          "71:             sopts.stdinStr = 'INPUT DISALLOWED';",
          "",
          "[Removed Lines]",
          "68:             sopts.asserts=true;",
          "",
          "[Added Lines]",
          "68:             sopts.log='assert';",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> lib/SqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     };",
          "33:     var self =",
          "34:     {",
          "35:         debugging:false,      // Break in debugger on recv.",
          "36:         integrityFail:null,",
          "37:         foreignKeysFail:null,",
          "38:         rootdir: null,                  // Where main.js lives.",
          "39:         SJO : { mode: 'json2' },        // Sqlite mode.",
          "40:         browsers: {                     // Not used, yet.",
          "41:             unix:[ \"xdg-open\", \"gnome-open\", \"firefox\", \"google-chrome\" ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         cleanup:null,",
          "36:         closeId:null,",
          "37:         db:null,",
          "38:         dbfile:null,",
          "39:         dbinfo:{},",
          "40:         dblist:null,",
          "41:         dbID:null,",
          "43:         done:0,",
          "46:         foreignKeysInfo:null,",
          "47:         optdb:null,",
          "49:         ws:null,",
          "50:         wsopts:null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556:     function main() {",
          "557:         debugger;",
          "558:         LogTrace('Starting', files);",
          "560:         var req = require(\"SqliteUI\", 1.0);",
          "561:         if (!self.rootdir)",
          "562:             self.rootdir=File.dirname(req.loadFile);",
          "",
          "[Removed Lines]",
          "559:         self.done = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 43",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 44",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4648:             v3 = NULL;",
          "4649:         }",
          "4650:     }",
          "4651:     if (v3 && !Jsi_ValueIsNull(interp, v3) && !Jsi_ValueIsUndef(interp, v3)) {",
          "4652:         if (!Jsi_ValueIsObjType(interp, v3, JSI_OT_OBJECT))",
          "4653:             return Jsi_LogError(\"arg 3: expected object|null|undefined\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4651:     if (!parse && !v3 && (v3=interp->framePtr->fargs)) {",
          "4652:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4653:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4654:         else {",
          "4655:             v3 = NULL;",
          "4656:         }",
          "4657:     }",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544: static Jsi_OpCodes *opassign(jsi_Pstate *pstate, jsi_Pline *line, Jsi_OpCodes *lval, Jsi_OpCodes *oprand, Jsi_OpCodes *op)",
          "545: {",
          "546:     Jsi_OpCodes *ret;",
          "548:         ret = codes_join3(lval,",
          "549:                              codes_join3(code_push_top(), oprand, op),",
          "550:                              code_assign(pstate, line, 1));",
          "",
          "[Removed Lines]",
          "547:     if ((lval)->lvalue_flag == 1) {",
          "",
          "[Added Lines]",
          "547:     if ((lval)->lvalue_flag&1) {",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:     Jsi_Value *currentScope)",
          "935: {",
          "936:     Jsi_RC rc = JSI_OK;",
          "937:     jsiVarDeref(interp,2);",
          "947:         arrayindex = (int)idx->d.num;",
          "960:     }",
          "964:         int bLen, cLen;",
          "965:         char bbuf[10], *cp = Jsi_ValueString(interp, src, &bLen);",
          "966:         int n = (int)idx->d.num;",
          "",
          "[Removed Lines]",
          "938:     int isnull;",
          "939:     if ((isnull=Jsi_ValueIsNull(interp, src)) || Jsi_ValueIsUndef(interp, src)) {",
          "940:         Jsi_LogError(\"invalid subscript of %s\", (isnull?\"null\":\"undefined\"));",
          "941:         jsiPop(interp, 1);",
          "942:         return JSI_ERROR;",
          "943:     }",
          "944:     int arrayindex = -1;",
          "946:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) {",
          "948:     }",
          "950:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadCheck) {",
          "951:         Jsi_Value *v;",
          "952:         char keyBuf[100], *keyStr = keyBuf;",
          "953:         if (arrayindex>=0)",
          "954:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "955:         else",
          "956:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "957:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "958:             return Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "959:         }",
          "962:     Jsi_String *str = jsi_ValueString(src);",
          "963:     if (str && Jsi_ValueIsNumber(interp, idx)) {",
          "",
          "[Added Lines]",
          "937:     uint flags = (uintptr_t)ip->data, right_val = flags&1; // isident=flags&2;",
          "938:     Jsi_String *str = NULL;",
          "939:     Jsi_Obj *obj = NULL;",
          "940:     int bsc, arrayindex = -1;",
          "942:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0)",
          "945:     switch (src->vt) {",
          "946:         case JSI_VT_NULL:",
          "947:             rc = Jsi_LogError(\"invalid null subscript\");",
          "948:             break;",
          "949:         case JSI_VT_UNDEF:",
          "950:             rc = Jsi_LogError(\"invalid undefined subscript\");",
          "951:             break;",
          "954:         case JSI_VT_STRING:",
          "955:             str = &src->d.s;",
          "956:             break;",
          "957:         case JSI_VT_OBJECT:",
          "958:             obj = src->d.obj;",
          "959:             switch (obj->ot) {",
          "960:                 case JSI_OT_STRING:",
          "961:                     str = &obj->d.s;",
          "962:                     break;",
          "963:                 case JSI_OT_OBJECT:",
          "964:                     if (obj->freeze && obj->freezeReadCheck) {",
          "965:                         Jsi_Value *v;",
          "966:                         char keyBuf[100], *keyStr = keyBuf;",
          "967:                         if (arrayindex>=0)",
          "968:                             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "969:                         else",
          "970:                             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "971:                         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "972:                             rc = Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "973:                         }",
          "974:                     }",
          "975:                     break;",
          "976:                 default:",
          "977:                     break;",
          "978:             }",
          "979:             break;",
          "980:         default:",
          "981:             break;",
          "983:     if (rc != JSI_OK)",
          "984:         goto done;",
          "987:         const char *keyStr = Jsi_ValueString(interp, idx, NULL);",
          "988:         Jsi_Value *vp = Jsi_ValueObjLookup(interp, src, keyStr, 0);",
          "989:         if (vp) {",
          "992:             if (right_val || vp->f.bits.readonly) {",
          "993:                 if (vp->vt == JSI_VT_OBJECT || vp->vt == JSI_VT_STRING)  // TODO:*** Undo using ValueCopy. ***",
          "994:                     Jsi_ValueMove(interp, src, vp);",
          "995:                 else",
          "996:                     Jsi_ValueCopy(interp, src, vp);",
          "997:             } else {",
          "998:                 Jsi_Value res = VALINIT;",
          "999:                 res.vt = JSI_VT_VARIABLE;",
          "1000:                 res.d.lval = vp;",
          "1001:                 Jsi_ValueCopy(interp, src, &res);",
          "1002:             }",
          "1004:             goto done;",
          "1005:         }",
          "1007:     if (str && Jsi_ValueIsNumber(interp, idx)) { // eg. \"abc\"[1]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "984:             }",
          "985:             Jsi_ValueMakeStringDup(interp, &src, bbuf);",
          "986:         }",
          "989:     }",
          "990:     Jsi_ValueToObject(interp, src);",
          "998:     if (bsc == 0 && interp->lastSubscriptFail && interp->lastSubscriptFail->vt != JSI_VT_UNDEF)",
          "999:         Jsi_ValueReset(interp, &interp->lastSubscriptFail);",
          "1003:         Jsi_Value res = VALINIT,",
          "",
          "[Removed Lines]",
          "987:         jsiPop(interp, 1);",
          "988:         return rc;",
          "992:         if (idx->vt == JSI_VT_STRING && Jsi_Strcmp(idx->d.s.str, \"callee\") == 0) {",
          "993:             jsiClearStack(interp,1);",
          "994:             Jsi_ValueMakeStringKey(interp, &idx, \"\\1callee\\1\");",
          "995:         }",
          "997:     int bsc = Jsi_ValueIsObjType(interp, src, JSI_OT_NUMBER); // Previous bad subscript.",
          "1001:     if (src->vt != JSI_VT_UNDEF) {",
          "1002:         int right_val = (uintptr_t)ip->data;",
          "",
          "[Added Lines]",
          "1031:         goto done;",
          "1034:     bsc = Jsi_ValueIsObjType(interp, src, JSI_OT_NUMBER); // Previous bad subscript.",
          "1038:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1030:             Jsi_DecrRefCount(interp, vp);",
          "1031:         }",
          "1032:     }",
          "1033:     jsiPop(interp, 1);",
          "1034:     return rc;",
          "1035: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070: done:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1235:             case OP_ASSIGN: {",
          "1236:                 Jsi_Value *sval = _jsi_TOP, *dval = _jsi_TOQ;",
          "1237:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "1239:                     jsiVarDeref(interp,1);",
          "1240:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "1241:                     if (strict && sval->vt == JSI_VT_UNDEF)",
          "",
          "[Removed Lines]",
          "1238:                 if ((uintptr_t)ip->data == 1) {",
          "",
          "[Added Lines]",
          "1276:                 if ((uintptr_t)ip->data & 1) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2099:     frame.parent->child = interp->framePtr = &frame;",
          "2100:     frame.ps = ps;",
          "2101:     frame.ingsc = scope;",
          "2103:     frame.inthis = _this;",
          "2104:     frame.opcodes = opcodes;",
          "2105:     frame.filePtr = fi;",
          "",
          "[Removed Lines]",
          "2102:     frame.incsc = fargs;",
          "",
          "[Added Lines]",
          "2140:     frame.incsc = frame.fargs = fargs;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:     int tryDepth;",
          "705:     int withDepth;",
          "706:     jsi_ScopeChain* ingsc;",
          "708:     Jsi_Value *inthis;",
          "709:     Jsi_OpCodes *opcodes;",
          "710:     struct jsi_Pstate *ps;",
          "",
          "[Removed Lines]",
          "707:     Jsi_Value *incsc;",
          "",
          "[Added Lines]",
          "707:     Jsi_Value *fargs;      // Function call args.",
          "708:     Jsi_Value *incsc;      // Initial args",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: static Jsi_RC ObjectFreezeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:     if (_this->vt != JSI_VT_OBJECT || _this->d.obj->ot != JSI_OT_FUNCTION ||",
          "369:         _this->d.obj->d.fobj->func->callback != ObjectConstructor)",
          "370:         return Jsi_LogError(\"must call via Object.freeze\");",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "136:     uint log = jsi_GetLogFlag(interp, code, popts);",
          "141:     if (popts) {",
          "142:         isExt = 1;",
          "143:         ftail = 1;",
          "",
          "[Removed Lines]",
          "138:         mask = popts->modConf.logmask;",
          "139:         log = popts->modConf.log|interp->log;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     if (!log)",
          "146:         return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "147:     if (code == JSI_LOG_ERROR) {",
          "151:     }",
          "152:     char pbuf[JSI_BUFSIZ/8] = \"\";",
          "153:     char buf[JSI_BUFSIZ/2];",
          "",
          "[Removed Lines]",
          "148:         if (interp->curIpLastError == interp->curIp)",
          "149:             return JSI_ERROR;",
          "150:         interp->curIpLastError = interp->curIp;",
          "",
          "[Added Lines]",
          "144:         if (interp->curIp) {",
          "145:             if (interp->curIpLastError == interp->curIp)",
          "146:                 return JSI_ERROR;",
          "147:             interp->curIpLastError = interp->curIp;",
          "148:         }",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: delete_statement:",
          "340:     DELETE lvalue ';'           {",
          "342:             $$ = codes_join($2, code_delete(2));",
          "343:         } else {",
          "344:             $$ = codes_join($2, code_delete(1));",
          "",
          "[Removed Lines]",
          "341:         if (($2)->lvalue_flag == 2) {",
          "",
          "[Added Lines]",
          "341:         if (($2)->lvalue_flag&2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:     | label_opt FOR '(' lvalue inof expr ')' statement_or_empty {",
          "400:         jsi_ForinVar *fv;",
          "401:         int inof = $5;",
          "403:             fv = forinvar_new(pstate, NULL, NULL, codes_join($4, code_subscript(pstate, &@4, 0)));",
          "404:         else fv = forinvar_new(pstate, NULL, NULL, $4);",
          "405:         Jsi_OpCodes *lval;",
          "",
          "[Removed Lines]",
          "402:         if (($4)->lvalue_flag == 2)",
          "",
          "[Added Lines]",
          "402:         if (($4)->lvalue_flag&2)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:     value                   { $$ = $1; }",
          "567:     | func_expr             { $$ = $1; }",
          "568:     | lvalue                {",
          "570:         else $$ = $1;",
          "571:     }",
          "572:     | expr ',' expr         { $$ = codes_join3($1, code_pop(1), $3); }",
          "573:     | expr '[' expr ']'     { $$ = codes_join3($1, $3, code_subscript(pstate, &@1, 1)); }",
          "575:     | '-' expr %prec NEG    { $$ = codes_join($2, code_neg()); }",
          "576:     | '+' expr %prec NEG    { $$ = codes_join($2, code_pos()); }",
          "577:     | '~' expr              { $$ = codes_join($2, code_bnot()); }",
          "",
          "[Removed Lines]",
          "569:         if (($1)->lvalue_flag == 2) $$ = codes_join($1, code_subscript(pstate, &@1, 1));",
          "574:     | expr '.' IDENTIFIER   { $$ = codes_join3($1, code_push_string(pstate,&@3,$3), code_subscript(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "569:         if (($1)->lvalue_flag&2) $$ = codes_join($1, code_subscript(pstate, &@1, 1 |(($1)->lvalue_flag&4?2:0)));",
          "574:     | expr '.' IDENTIFIER   { $$ = codes_join3($1, code_push_string(pstate,&@3,$3), code_subscript(pstate, &@3, 3)); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:     | expr '-' expr         { $$ = codes_join3($1, $3, code_sub()); }",
          "585:     | expr IN expr          { $$ = codes_join3($1, $3, code_in()); }",
          "586:     | lvalue INC            {",
          "588:         else $$ = codes_join($1, code_inc(pstate, &@1, 1));",
          "589:     }",
          "590:     | lvalue DEC            {",
          "592:         else $$ = codes_join($1, code_dec(pstate, &@1, 1));",
          "593:     }",
          "594:     | INC lvalue            {",
          "596:         else $$ = codes_join($2, code_inc(pstate, &@2, 0));",
          "597:     }",
          "598:     | TYPEOF expr {",
          "600:         else $$ = codes_join($2, code_typeof(pstate, &@2, 0));",
          "601:     }",
          "602:     | DEC lvalue            {",
          "604:         else $$ = codes_join($2, code_dec(pstate, &@2, 0));",
          "605:     }",
          "606:     | '(' expr ')'          { $$ = $2; }",
          "",
          "[Removed Lines]",
          "587:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_inc(pstate, &@1, 1));",
          "591:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_dec(pstate, &@1, 1));",
          "595:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_inc(pstate, &@2, 0));",
          "599:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_typeof(pstate, &@2, 0));",
          "603:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_dec(pstate, &@2, 0));",
          "",
          "[Added Lines]",
          "587:         if (($1)->lvalue_flag&2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_inc(pstate, &@1, 1));",
          "591:         if (($1)->lvalue_flag&2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_dec(pstate, &@1, 1));",
          "595:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_inc(pstate, &@2, 0));",
          "599:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_typeof(pstate, &@2, 0));",
          "603:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_dec(pstate, &@2, 0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "654:     | NEW value             { $$ = codes_join($2, code_newfcall(pstate, &@1, 0, NULL, $2)); }",
          "655:     | NEW lvalue            {",
          "657:         else $$ = codes_join($2, code_newfcall(pstate, &@2, 0, NULL, $2));}",
          "658:     | NEW '(' expr ')'      { $$ = codes_join($3, code_newfcall(pstate, &@1,0, NULL, $3)); }",
          "659:     | NEW func_expr         { $$ = codes_join($2, code_newfcall(pstate, &@1,0, NULL, $2)); }",
          "",
          "[Removed Lines]",
          "656:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 1), code_newfcall(pstate, &@2, 0, NULL, $2));",
          "",
          "[Added Lines]",
          "656:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 1), code_newfcall(pstate, &@2, 0, NULL, $2));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "667:         Jsi_OpCodes *opl = $4;",
          "668:         int expr_cnt = opl ? opl->expr_counter:0;",
          "669:         Jsi_OpCodes *lv = NULL;",
          "671:         else lv = $2;",
          "672:         $$ = codes_join3(lv, (opl ? opl : code_nop()), code_newfcall(pstate, &@1,expr_cnt, lv?lv->lvalue_name:NULL, opl));",
          "673:     }",
          "",
          "[Removed Lines]",
          "670:         if (($2)->lvalue_flag == 2) lv = codes_join($2, code_subscript(pstate, &@2, 1));",
          "",
          "[Added Lines]",
          "670:         if (($2)->lvalue_flag&2) lv = codes_join($2, code_subscript(pstate, &@2, 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "720:         Jsi_OpCodes *pref;",
          "721:         Jsi_OpCodes *lval = $1;",
          "722:         const char *n1 = lval->lvalue_name;",
          "724:             const char *n2 = NULL;",
          "725:             pref = codes_join3($1, code_chthis(pstate,&@1, 1), code_subscript(pstate, &@1, 1));",
          "726:             if (pref->code_len>=2 && pref->codes[0].op == OP_PUSHVAR && pref->codes[1].op == OP_PUSHSTR && !n1) {",
          "",
          "[Removed Lines]",
          "723:         if (lval->lvalue_flag == 2) {",
          "",
          "[Added Lines]",
          "723:         if (lval->lvalue_flag&2) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "751:     | ARGUMENTS             { $$ = code_push_args(); ($$)->lvalue_flag = 1; }",
          "752:     | _THIS                 { $$ = code_push_this(pstate,&@1); ($$)->lvalue_flag = 1; }",
          "753:     | lvalue '[' expr ']'   {",
          "755:         else $$ = codes_join($1, $3);",
          "756:         ($$)->lvalue_flag = 2;",
          "757:     }",
          "758:     | lvalue '.' IDENTIFIER {",
          "762:     }",
          "763: ;",
          "",
          "[Removed Lines]",
          "754:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 1), $3);",
          "759:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 1), code_push_string(pstate,&@3, $3));",
          "760:         else $$ = codes_join($1, code_push_string(pstate,&@3, $3));",
          "761:         ($$)->lvalue_flag = 2;",
          "",
          "[Added Lines]",
          "754:         if (($1)->lvalue_flag&2) $$ = codes_join3($1, code_subscript(pstate, &@1, 1), $3);",
          "759:         if (($1)->lvalue_flag&2) {",
          "760:             $$ = codes_join3($1, code_subscript(pstate, &@1, 3), code_push_string(pstate,&@3, $3));",
          "761:             ($$)->lvalue_flag = 2;",
          "762:         } else {",
          "763:             $$ = codes_join($1, code_push_string(pstate,&@3, $3));",
          "764:             ($$)->lvalue_flag = 6;",
          "765:         }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}