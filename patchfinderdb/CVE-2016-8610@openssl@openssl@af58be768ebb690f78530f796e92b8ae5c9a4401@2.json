{
  "cve_id": "CVE-2016-8610",
  "cve_desc": "A denial of service flaw was found in OpenSSL 0.9.8, 1.0.1, 1.0.2 through 1.0.2h, and 1.1.0 in the way the TLS/SSL protocol defined processing of ALERT packets during a connection handshake. A remote attacker could use this flaw to make a TLS/SSL server consume an excessive amount of CPU and fail to accept connections from other clients.",
  "repo": "openssl/openssl",
  "patch_hash": "af58be768ebb690f78530f796e92b8ae5c9a4401",
  "patch_info": {
    "commit_hash": "af58be768ebb690f78530f796e92b8ae5c9a4401",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/af58be768ebb690f78530f796e92b8ae5c9a4401",
    "files": [
      "include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/record.h",
      "ssl/record/record_locl.h",
      "ssl/ssl_err.c"
    ],
    "message": "Don't allow too many consecutive warning alerts\n\nCertain warning alerts are ignored if they are received. This can mean that\nno progress will be made if one peer continually sends those warning alerts.\nImplement a count so that we abort the connection if we receive too many.\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/record.h||ssl/record/record.h",
      "ssl/record/record_locl.h||ssl/record/record_locl.h",
      "ssl/ssl_err.c||ssl/ssl_err.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2485: # define SSL_R_TLS_HEARTBEAT_PENDING                      366",
      "2486: # define SSL_R_TLS_ILLEGAL_EXPORTER_LABEL                 367",
      "2487: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
      "2488: # define SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS             314",
      "2489: # define SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS       239",
      "2490: # define SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES           242",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "443:         }",
      "444:     }",
      "448:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "450:     if (SSL3_RECORD_get_type(rr) != SSL3_RT_ALERT",
      "451:             && SSL3_RECORD_get_length(rr) != 0)",
      "452:         s->rlayer.alert_count = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:         if (alert_level == SSL3_AL_WARNING) {",
      "724:             s->s3->warn_alert = alert_descr;",
      "725:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
      "726: #ifndef OPENSSL_NO_SCTP",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "734:             s->rlayer.alert_count++;",
      "735:             if (s->rlayer.alert_count == MAX_WARN_ALERT_COUNT) {",
      "736:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
      "737:                 SSLerr(SSL_F_DTLS1_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
      "738:                 goto f_err;",
      "739:             }",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1063:     } while (num_recs == 0);",
      "1064:     rr = &rr[curr_rec];",
      "1068:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:     if (SSL3_RECORD_get_type(rr) != SSL3_RT_ALERT",
      "1071:             && SSL3_RECORD_get_length(rr) != 0)",
      "1072:         s->rlayer.alert_count = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1333:         if (alert_level == SSL3_AL_WARNING) {",
      "1334:             s->s3->warn_alert = alert_descr;",
      "1335:             SSL3_RECORD_set_read(rr);",
      "1336:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
      "1337:                 s->shutdown |= SSL_RECEIVED_SHUTDOWN;",
      "1338:                 return (0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1345:             s->rlayer.alert_count++;",
      "1346:             if (s->rlayer.alert_count == MAX_WARN_ALERT_COUNT) {",
      "1347:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
      "1348:                 SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
      "1349:                 goto f_err;",
      "1350:             }",
      "",
      "---------------"
    ],
    "ssl/record/record.h||ssl/record/record.h": [
      "File: ssl/record/record.h -> ssl/record/record.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     unsigned char write_sequence[SEQ_NUM_SIZE];",
      "180:     unsigned int is_first_record;",
      "181:     DTLS_RECORD_LAYER *d;",
      "182: } RECORD_LAYER;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     unsigned int alert_count;",
      "",
      "---------------"
    ],
    "ssl/record/record_locl.h||ssl/record/record_locl.h": [
      "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->rbuf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #define MAX_WARN_ALERT_COUNT    5",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:      \"tls illegal exporter label\"},",
      "618:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
      "619:      \"tls invalid ecpointformat list\"},",
      "620:     {ERR_REASON(SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS),",
      "621:      \"unable to find ecdh parameters\"},",
      "622:     {ERR_REASON(SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "620:     {ERR_REASON(SSL_R_TOO_MANY_WARN_ALERTS), \"too many warn alerts\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ff65f77b62df12ad75ec232b38627c5fe131041",
      "candidate_info": {
        "commit_hash": "4ff65f77b62df12ad75ec232b38627c5fe131041",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4ff65f77b62df12ad75ec232b38627c5fe131041",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h"
        ],
        "message": "Add support for client side parsing of the PSK extension\n\nRequires a refactor of the ServerHello parsing, so that we parse first and\nthen subsequently process. This is because the resumption information is\nheld in the extensions block which is parsed last - but we need to know that\ninformation earlier.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2259)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2326: # define SSL_F_TLS_PARSE_CTOS_RENEGOTIATE                 464",
          "2327: # define SSL_F_TLS_PARSE_CTOS_USE_SRTP                    465",
          "2328: # define SSL_F_TLS_PARSE_STOC_KEY_SHARE                   445",
          "2329: # define SSL_F_TLS_PARSE_STOC_RENEGOTIATE                 448",
          "2330: # define SSL_F_TLS_PARSE_STOC_USE_SRTP                    446",
          "2331: # define SSL_F_TLS_POST_PROCESS_CLIENT_HELLO              378",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2329: # define SSL_F_TLS_PARSE_STOC_PSK                         502",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:      \"tls_parse_ctos_renegotiate\"},",
          "374:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_USE_SRTP), \"tls_parse_ctos_use_srtp\"},",
          "375:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_KEY_SHARE), \"tls_parse_stoc_key_share\"},",
          "376:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_RENEGOTIATE),",
          "377:      \"tls_parse_stoc_renegotiate\"},",
          "378:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_USE_SRTP), \"tls_parse_stoc_use_srtp\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_PSK), \"tls_parse_stoc_psk\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:     {ERR_REASON(SSL_R_BAD_PACKET_LENGTH), \"bad packet length\"},",
          "455:     {ERR_REASON(SSL_R_BAD_PROTOCOL_VERSION_NUMBER),",
          "456:      \"bad protocol version number\"},",
          "457:     {ERR_REASON(SSL_R_BAD_RECORD_TYPE), \"bad record type\"},",
          "458:     {ERR_REASON(SSL_R_BAD_RSA_ENCRYPT), \"bad rsa encrypt\"},",
          "459:     {ERR_REASON(SSL_R_BAD_SIGNATURE), \"bad signature\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:     {ERR_REASON(SSL_R_BAD_PSK_IDENTITY), \"bad psk identity\"},",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:         TLSEXT_TYPE_psk,",
          "278:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO | EXT_TLS_IMPLEMENTATION_ONLY",
          "279:         | EXT_TLS1_3_ONLY,",
          "281:     }",
          "282: };",
          "",
          "[Removed Lines]",
          "280:         NULL, NULL, NULL, NULL, tls_construct_ctos_psk, NULL",
          "",
          "[Added Lines]",
          "280:         NULL, NULL, tls_parse_stoc_psk, NULL, tls_construct_ctos_psk, NULL",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1280:     return 1;",
          "1281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1283: int tls_parse_stoc_psk(SSL *s, PACKET *pkt, X509 *x, size_t chainidx, int *al)",
          "1284: {",
          "1285: #ifndef OPENSSL_NO_TLS1_3",
          "1286:     unsigned int identity;",
          "1288:     if (!PACKET_get_net_2(pkt, &identity) || PACKET_remaining(pkt) != 0) {",
          "1290:         SSLerr(SSL_F_TLS_PARSE_STOC_PSK, SSL_R_LENGTH_MISMATCH);",
          "1291:         return 0;",
          "1292:     }",
          "1294:     if (s->session->ext.tick_identity != (int)identity) {",
          "1296:         SSLerr(SSL_F_TLS_PARSE_STOC_PSK, SSL_R_BAD_PSK_IDENTITY);",
          "1297:         return 0;",
          "1298:     }",
          "1300:     s->hit = 1;",
          "1301: #endif",
          "1303:     return 1;",
          "1304: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1145:         goto f_err;",
          "1146:     }",
          "1151:     if (!SSL_IS_TLS13(s)) {",
          "1152:         if (!PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "",
          "[Removed Lines]",
          "1148:     s->hit = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1173:         goto f_err;",
          "1174:     }",
          "1209:         }",
          "1210:     }",
          "1215:         if (s->sid_ctx_length != s->session->sid_ctx_length",
          "1218:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "1219:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "1220:                    SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
          "1221:             goto f_err;",
          "1222:         }",
          "1224:     } else {",
          "1233:             s->ctx->stats.sess_miss++;",
          "1234:             if (!ssl_get_new_session(s, 0)) {",
          "1235:                 goto f_err;",
          "",
          "[Removed Lines]",
          "1188:     if (s->version >= TLS1_VERSION && !SSL_IS_TLS13(s)",
          "1189:             && s->ext.session_secret_cb != NULL && s->session->ext.tick) {",
          "1190:         const SSL_CIPHER *pref_cipher = NULL;",
          "1195:         int master_key_length;",
          "1196:         master_key_length = sizeof(s->session->master_key);",
          "1197:         if (s->ext.session_secret_cb(s, s->session->master_key,",
          "1198:                                      &master_key_length,",
          "1199:                                      NULL, &pref_cipher,",
          "1200:                                      s->ext.session_secret_cb_arg)",
          "1201:                  && master_key_length > 0) {",
          "1202:             s->session->master_key_length = master_key_length;",
          "1203:             s->session->cipher = pref_cipher ?",
          "1204:                 pref_cipher : ssl_get_cipher_by_char(s, cipherchars);",
          "1205:         } else {",
          "1206:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1207:             al = SSL_AD_INTERNAL_ERROR;",
          "1208:             goto f_err;",
          "1212:     if (session_id_len != 0 && session_id_len == s->session->session_id_length",
          "1213:         && memcmp(PACKET_data(&session_id), s->session->session_id,",
          "1214:                   session_id_len) == 0) {",
          "1216:             || memcmp(s->session->sid_ctx, s->sid_ctx, s->sid_ctx_length)) {",
          "1223:         s->hit = 1;",
          "1232:         if (s->session->session_id_length > 0) {",
          "",
          "[Added Lines]",
          "1175:     if (!SSL_IS_TLS13(s)) {",
          "1176:         if (!PACKET_get_1(pkt, &compression)) {",
          "1177:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "1178:             al = SSL_AD_DECODE_ERROR;",
          "1179:             goto f_err;",
          "1180:         }",
          "1181:     } else {",
          "1182:         compression = 0;",
          "1183:     }",
          "1186:     if (PACKET_remaining(pkt) == 0) {",
          "1187:         PACKET_null_init(&extpkt);",
          "1188:     } else if (!PACKET_as_length_prefixed_2(pkt, &extpkt)) {",
          "1189:         al = SSL_AD_DECODE_ERROR;",
          "1190:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_LENGTH);",
          "1191:         goto f_err;",
          "1192:     }",
          "1194:     context = SSL_IS_TLS13(s) ? EXT_TLS1_3_SERVER_HELLO",
          "1195:                               : EXT_TLS1_2_SERVER_HELLO;",
          "1196:     if (!tls_collect_extensions(s, &extpkt, context, &extensions, &al))",
          "1197:         goto f_err;",
          "1199:     s->hit = 0;",
          "1201:     if (SSL_IS_TLS13(s)) {",
          "1203:         if (!tls_parse_extension(s, TLSEXT_IDX_psk,",
          "1204:                                  EXT_TLS1_3_SERVER_HELLO,",
          "1205:                                  extensions, NULL, 0, &al))",
          "1206:             goto f_err;",
          "1207:     } else {",
          "1220:         if (s->version >= TLS1_VERSION",
          "1221:                 && s->ext.session_secret_cb != NULL && s->session->ext.tick) {",
          "1222:             const SSL_CIPHER *pref_cipher = NULL;",
          "1227:             int master_key_length;",
          "1228:             master_key_length = sizeof(s->session->master_key);",
          "1229:             if (s->ext.session_secret_cb(s, s->session->master_key,",
          "1230:                                          &master_key_length,",
          "1231:                                          NULL, &pref_cipher,",
          "1232:                                          s->ext.session_secret_cb_arg)",
          "1233:                      && master_key_length > 0) {",
          "1234:                 s->session->master_key_length = master_key_length;",
          "1235:                 s->session->cipher = pref_cipher ?",
          "1236:                     pref_cipher : ssl_get_cipher_by_char(s, cipherchars);",
          "1237:             } else {",
          "1238:                 SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1239:                 al = SSL_AD_INTERNAL_ERROR;",
          "1240:                 goto f_err;",
          "1241:             }",
          "1244:         if (session_id_len != 0",
          "1245:                 && session_id_len == s->session->session_id_length",
          "1246:                 && memcmp(PACKET_data(&session_id), s->session->session_id,",
          "1247:                           session_id_len) == 0)",
          "1248:             s->hit = 1;",
          "1251:     if (s->hit) {",
          "1253:                 || memcmp(s->session->sid_ctx, s->sid_ctx, s->sid_ctx_length)) {",
          "1268:         if (s->session->session_id_length > 0",
          "1269:                 || (SSL_IS_TLS13(s)",
          "1270:                     && s->session->ext.tick_identity",
          "1271:                        != TLSEXT_PSK_BAD_IDENTITY)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1299:         goto f_err;",
          "1300:     }",
          "1301:     s->s3->tmp.new_cipher = c;",
          "1314: #ifdef OPENSSL_NO_COMP",
          "1315:     if (compression != 0) {",
          "",
          "[Removed Lines]",
          "1304:     if (!SSL_IS_TLS13(s)) {",
          "1305:         if (!PACKET_get_1(pkt, &compression)) {",
          "1306:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "1307:             al = SSL_AD_DECODE_ERROR;",
          "1308:             goto f_err;",
          "1309:         }",
          "1310:     } else {",
          "1311:         compression = 0;",
          "1312:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1353:     }",
          "1354: #endif",
          "1369:         goto f_err;",
          "1371: #ifndef OPENSSL_NO_SCTP",
          "",
          "[Removed Lines]",
          "1357:     if (PACKET_remaining(pkt) == 0) {",
          "1358:         PACKET_null_init(&extpkt);",
          "1359:     } else if (!PACKET_as_length_prefixed_2(pkt, &extpkt)) {",
          "1360:         al = SSL_AD_DECODE_ERROR;",
          "1361:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_LENGTH);",
          "1362:         goto f_err;",
          "1363:     }",
          "1365:     context = SSL_IS_TLS13(s) ? EXT_TLS1_3_SERVER_HELLO",
          "1366:                               : EXT_TLS1_2_SERVER_HELLO;",
          "1367:     if (!tls_collect_extensions(s, &extpkt, context, &extensions, &al)",
          "1368:             || !tls_parse_all_extensions(s, context, extensions, NULL, 0, &al))",
          "",
          "[Added Lines]",
          "1384:     if (!tls_parse_all_extensions(s, context, extensions, NULL, 0, &al))",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "321: int tls_parse_stoc_ems(SSL *s, PACKET *pkt, X509 *x, size_t chainidx, int *al);",
          "322: int tls_parse_stoc_key_share(SSL *s, PACKET *pkt, X509 *x, size_t chainidx,",
          "323:                              int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: int tls_parse_stoc_psk(SSL *s, PACKET *pkt, X509 *x, size_t chainidx, int *al);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fadd9a1e2d2ab1d63bd05c30a0d845e837deb9be",
      "candidate_info": {
        "commit_hash": "fadd9a1e2d2ab1d63bd05c30a0d845e837deb9be",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fadd9a1e2d2ab1d63bd05c30a0d845e837deb9be",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/statem_extensions.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Verify that extensions are used in the correct context\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/statem_extensions.c||ssl/statem/statem_extensions.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2324: # define SSL_R_BAD_DIGEST_LENGTH                          111",
          "2325: # define SSL_R_BAD_ECC_CERT                               304",
          "2326: # define SSL_R_BAD_ECPOINT                                306",
          "2327: # define SSL_R_BAD_HANDSHAKE_LENGTH                       332",
          "2328: # define SSL_R_BAD_HELLO_REQUEST                          105",
          "2329: # define SSL_R_BAD_KEY_SHARE                              108",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2327: # define SSL_R_BAD_EXTENSION                              110",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:     {ERR_REASON(SSL_R_BAD_DIGEST_LENGTH), \"bad digest length\"},",
          "355:     {ERR_REASON(SSL_R_BAD_ECC_CERT), \"bad ecc cert\"},",
          "356:     {ERR_REASON(SSL_R_BAD_ECPOINT), \"bad ecpoint\"},",
          "357:     {ERR_REASON(SSL_R_BAD_HANDSHAKE_LENGTH), \"bad handshake length\"},",
          "358:     {ERR_REASON(SSL_R_BAD_HELLO_REQUEST), \"bad hello request\"},",
          "359:     {ERR_REASON(SSL_R_BAD_KEY_SHARE), \"bad key share\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:     {ERR_REASON(SSL_R_BAD_EXTENSION), \"bad extension\"},",
          "",
          "---------------"
        ],
        "ssl/statem/statem_extensions.c||ssl/statem/statem_extensions.c": [
          "File: ssl/statem/statem_extensions.c -> ssl/statem/statem_extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"../ssl_locl.h\"",
          "12: #include \"statem_locl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: typedef struct {",
          "16:     unsigned int type;",
          "17:     int (*server_parse)(SSL *s, PACKET *pkt);",
          "18:     int (*client_parse)(SSL *s, PACKET *pkt);",
          "19:     unsigned int context;",
          "20: } EXTENSION_DEFINITION;",
          "23: static const EXTENSION_DEFINITION ext_defs[] = {",
          "24:     {",
          "25:         TLSEXT_TYPE_renegotiate,",
          "26:         NULL, NULL,",
          "27:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "28:     },",
          "29:     {",
          "30:         TLSEXT_TYPE_server_name,",
          "31:         NULL, NULL,",
          "32:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "33:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "34:     },",
          "35:     {",
          "36:         TLSEXT_TYPE_srp,",
          "37:         NULL, NULL,",
          "38:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "39:     },",
          "40:     {",
          "41:         TLSEXT_TYPE_ec_point_formats,",
          "42:         NULL, NULL,",
          "43:         EXT_CLIENT_HELLO",
          "44:     },",
          "45:     {",
          "46:         TLSEXT_TYPE_supported_groups,",
          "47:         NULL, NULL,",
          "48:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "49:     },",
          "50:     {",
          "51:         TLSEXT_TYPE_session_ticket,",
          "52:         NULL, NULL,",
          "53:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "54:     },",
          "55:     {",
          "56:         TLSEXT_TYPE_signature_algorithms,",
          "57:         NULL, NULL,",
          "58:         EXT_CLIENT_HELLO",
          "59:     },",
          "60:     {",
          "61:         TLSEXT_TYPE_status_request,",
          "62:         NULL, NULL,",
          "63:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_CERTIFICATE",
          "64:     },",
          "65:     {",
          "66:         TLSEXT_TYPE_next_proto_neg,",
          "67:         NULL, NULL,",
          "68:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "69:     },",
          "70:     {",
          "71:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "72:         NULL, NULL,",
          "73:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "74:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "75:     },",
          "76:     {",
          "77:         TLSEXT_TYPE_use_srtp,",
          "78:         NULL, NULL,",
          "79:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "80:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "81:     },",
          "82:     {",
          "83:         TLSEXT_TYPE_encrypt_then_mac,",
          "84:         NULL, NULL,",
          "85:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "86:     },",
          "87:     {",
          "88:         TLSEXT_TYPE_signed_certificate_timestamp,",
          "89:         NULL, NULL,",
          "90:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_CERTIFICATE",
          "91:     },",
          "92:     {",
          "93:         TLSEXT_TYPE_extended_master_secret,",
          "94:         NULL, NULL,",
          "95:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "96:     },",
          "97:     {",
          "98:         TLSEXT_TYPE_supported_versions,",
          "99:         NULL, NULL,",
          "100:         EXT_CLIENT_HELLO",
          "101:     },",
          "102:     {",
          "103:         TLSEXT_TYPE_padding,",
          "104:         NULL, NULL,",
          "105:         EXT_CLIENT_HELLO",
          "106:     },",
          "107:     {",
          "108:         TLSEXT_TYPE_key_share,",
          "109:         NULL, NULL,",
          "110:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "111:         | EXT_TLS1_3_HELLO_RETRY_REQUEST",
          "112:     }",
          "113: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: static int verify_extension(SSL *s, unsigned int context, unsigned int type)",
          "144: {",
          "145:     size_t i;",
          "147:     for (i = 0; i < OSSL_NELEM(ext_defs); i++) {",
          "148:         if (type == ext_defs[i].type) {",
          "150:             if ((context & ext_defs[i].context) == 0)",
          "151:                 return 0;",
          "153:             if ((ext_defs[i].context & EXT_DTLS_ONLY) && !SSL_IS_DTLS(s))",
          "154:                 return 0;",
          "156:             return 1;",
          "157:         }",
          "158:     }",
          "161:     return 1;",
          "162: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: {",
          "54:     PACKET extensions = *packet;",
          "55:     size_t num_extensions = 0, i = 0;",
          "",
          "[Removed Lines]",
          "51: int tls_collect_extensions(PACKET *packet, RAW_EXTENSION **res,",
          "52:                              size_t *numfound, int *ad)",
          "",
          "[Added Lines]",
          "181: int tls_collect_extensions(SSL *s, PACKET *packet, unsigned int context,",
          "182:                            RAW_EXTENSION **res, size_t *numfound, int *ad)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:         if (!PACKET_get_net_2(&extensions, &type) ||",
          "64:             !PACKET_get_length_prefixed_2(&extensions, &extension)) {",
          "66:             goto err;",
          "67:         }",
          "68:         num_extensions++;",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "200:         if (!verify_extension(s, context, type)) {",
          "201:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "203:             goto err;",
          "204:         }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define FINISHED_MAX_LENGTH             64",
          "30: typedef enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #define EXT_DTLS_ONLY                       0x01",
          "31: #define EXT_CLIENT_HELLO                    0x02",
          "33: #define EXT_TLS1_2_SERVER_HELLO             0x04",
          "34: #define EXT_TLS1_3_SERVER_HELLO             0x08",
          "35: #define EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x10",
          "36: #define EXT_TLS1_3_HELLO_RETRY_REQUEST      0x20",
          "37: #define EXT_TLS1_3_CERTIFICATE              0x40",
          "38: #define EXT_TLS1_3_NEW_SESSION_TICKET       0x80",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: __owur WORK_STATE tls_finish_handshake(SSL *s, WORK_STATE wst);",
          "89: __owur WORK_STATE dtls_wait_for_dry(SSL *s);",
          "95: __owur int tls_construct_client_hello(SSL *s, WPACKET *pkt);",
          "",
          "[Removed Lines]",
          "91: int tls_collect_extensions(PACKET *packet, RAW_EXTENSION **res,",
          "92:                              size_t *numfound, int *ad);",
          "",
          "[Added Lines]",
          "102: int tls_collect_extensions(SSL *s, PACKET *packet, unsigned int context,",
          "103:                            RAW_EXTENSION **res, size_t *numfound, int *ad);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1251:     extensions = clienthello.extensions;",
          "1255:         goto f_err;",
          "1256:     }",
          "",
          "[Removed Lines]",
          "1252:     if (!tls_collect_extensions(&extensions, &clienthello.pre_proc_exts,",
          "1253:                                   &clienthello.num_extensions, &al)) {",
          "",
          "[Added Lines]",
          "1252:     if (!tls_collect_extensions(s, &extensions, EXT_CLIENT_HELLO,",
          "1253:                                 &clienthello.pre_proc_exts,",
          "1254:                                 &clienthello.num_extensions, &al)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44c04a2e063715abdf2db095827261456fada74a",
      "candidate_info": {
        "commit_hash": "44c04a2e063715abdf2db095827261456fada74a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/44c04a2e063715abdf2db095827261456fada74a",
        "files": [
          "include/openssl/ssl.h",
          "include/openssl/ssl3.h",
          "ssl/ssl_err.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c",
          "util/libssl.num"
        ],
        "message": "Provide a function to send a KeyUpdate message\n\nThis implements the server side KeyUpdate sending capability as well.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2609)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "util/libssl.num||util/libssl.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "825: # define SSL_CTX_set_app_data(ctx,arg)   (SSL_CTX_set_ex_data(ctx,0,(char *)arg))",
          "826: DEPRECATEDIN_1_1_0(void SSL_set_debug(SSL *s, int debug))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: typedef enum {",
          "831:     SSL_KEY_UPDATE_NONE = -1,",
          "833:     SSL_KEY_UPDATE_NOT_REQUESTED = 0,",
          "834:     SSL_KEY_UPDATE_REQUESTED = 1",
          "835: } SSL_KEY_UPDATE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882:     TLS_ST_SW_CERT_VRFY,",
          "883:     TLS_ST_CR_HELLO_REQ,",
          "884:     TLS_ST_SW_HELLO_RETRY_REQUEST,",
          "886: } OSSL_HANDSHAKE_STATE;",
          "",
          "[Removed Lines]",
          "885:     TLS_ST_CR_HELLO_RETRY_REQUEST",
          "",
          "[Added Lines]",
          "893:     TLS_ST_CR_HELLO_RETRY_REQUEST,",
          "894:     TLS_ST_SW_KEY_UPDATE,",
          "895:     TLS_ST_CW_KEY_UPDATE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1650: __owur STACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s);",
          "1652: __owur int SSL_do_handshake(SSL *s);",
          "1653: int SSL_renegotiate(SSL *s);",
          "1654: int SSL_renegotiate_abbreviated(SSL *s);",
          "1655: __owur int SSL_renegotiate_pending(SSL *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1663: int SSL_key_update(SSL *s, SSL_KEY_UPDATE updatetype);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2195: # define SSL_F_SSL_GET_SERVER_CERT_INDEX                  322",
          "2196: # define SSL_F_SSL_GET_SIGN_PKEY                          183",
          "2197: # define SSL_F_SSL_INIT_WBIO_BUFFER                       184",
          "2198: # define SSL_F_SSL_LOAD_CLIENT_CA_FILE                    185",
          "2199: # define SSL_F_SSL_LOG_MASTER_SECRET                      498",
          "2200: # define SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE            499",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2209: # define SSL_F_SSL_KEY_UPDATE                             515",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2210: # define SSL_F_SSL_PEEK_EX                                432",
          "2211: # define SSL_F_SSL_READ                                   223",
          "2212: # define SSL_F_SSL_READ_EX                                434",
          "2213: # define SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT                320",
          "2214: # define SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT                321",
          "2215: # define SSL_F_SSL_SESSION_DUP                            348",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2225: # define SSL_F_SSL_RENEGOTIATE                            516",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2305: # define SSL_F_TLS_CONSTRUCT_FINISHED                     359",
          "2306: # define SSL_F_TLS_CONSTRUCT_HELLO_REQUEST                373",
          "2307: # define SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST          510",
          "2308: # define SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET           428",
          "2309: # define SSL_F_TLS_CONSTRUCT_NEXT_PROTO                   426",
          "2310: # define SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE           490",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2321: # define SSL_F_TLS_CONSTRUCT_KEY_UPDATE                   517",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2472: # define SSL_R_INVALID_COMPRESSION_ALGORITHM              341",
          "2473: # define SSL_R_INVALID_CONFIGURATION_NAME                 113",
          "2474: # define SSL_R_INVALID_CT_VALIDATION_TYPE                 212",
          "2475: # define SSL_R_INVALID_NULL_CMD_NAME                      385",
          "2476: # define SSL_R_INVALID_SEQUENCE_NUMBER                    402",
          "2477: # define SSL_R_INVALID_SERVERINFO_DATA                    388",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2489: # define SSL_R_INVALID_KEY_UPDATE_TYPE                    120",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2578: # define SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH              303",
          "2579: # define SSL_R_SSL_SESSION_ID_TOO_LONG                    408",
          "2580: # define SSL_R_SSL_SESSION_VERSION_MISMATCH               210",
          "2581: # define SSL_R_TLSV1_ALERT_ACCESS_DENIED                  1049",
          "2582: # define SSL_R_TLSV1_ALERT_DECODE_ERROR                   1050",
          "2583: # define SSL_R_TLSV1_ALERT_DECRYPTION_FAILED              1021",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2596: # define SSL_R_STILL_IN_INIT                              121",
          "",
          "---------------"
        ],
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "287: # define SSL3_MT_CLIENT_KEY_EXCHANGE             16",
          "288: # define SSL3_MT_FINISHED                        20",
          "289: # define SSL3_MT_CERTIFICATE_STATUS              22",
          "290: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "291: #  define SSL3_MT_NEXT_PROTO                      67",
          "292: # endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: # define SSL3_MT_KEY_UPDATE                      24",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     {ERR_FUNC(SSL_F_SSL_GET_SERVER_CERT_INDEX), \"ssl_get_server_cert_index\"},",
          "180:     {ERR_FUNC(SSL_F_SSL_GET_SIGN_PKEY), \"ssl_get_sign_pkey\"},",
          "181:     {ERR_FUNC(SSL_F_SSL_INIT_WBIO_BUFFER), \"ssl_init_wbio_buffer\"},",
          "182:     {ERR_FUNC(SSL_F_SSL_LOAD_CLIENT_CA_FILE), \"SSL_load_client_CA_file\"},",
          "183:     {ERR_FUNC(SSL_F_SSL_LOG_MASTER_SECRET), \"ssl_log_master_secret\"},",
          "184:     {ERR_FUNC(SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     {ERR_FUNC(SSL_F_SSL_KEY_UPDATE), \"SSL_key_update\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:     {ERR_FUNC(SSL_F_SSL_PEEK_EX), \"SSL_peek_ex\"},",
          "202:     {ERR_FUNC(SSL_F_SSL_READ), \"SSL_read\"},",
          "203:     {ERR_FUNC(SSL_F_SSL_READ_EX), \"SSL_read_ex\"},",
          "204:     {ERR_FUNC(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT),",
          "205:      \"ssl_scan_clienthello_tlsext\"},",
          "206:     {ERR_FUNC(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     {ERR_FUNC(SSL_F_SSL_RENEGOTIATE), \"SSL_renegotiate\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:      \"tls_construct_hello_request\"},",
          "334:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST),",
          "335:      \"tls_construct_hello_retry_request\"},",
          "336:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET),",
          "337:      \"tls_construct_new_session_ticket\"},",
          "338:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_NEXT_PROTO), \"tls_construct_next_proto\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_KEY_UPDATE), \"tls_construct_key_update\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:      \"invalid configuration name\"},",
          "569:     {ERR_REASON(SSL_R_INVALID_CT_VALIDATION_TYPE),",
          "570:      \"invalid ct validation type\"},",
          "571:     {ERR_REASON(SSL_R_INVALID_NULL_CMD_NAME), \"invalid null cmd name\"},",
          "572:     {ERR_REASON(SSL_R_INVALID_SEQUENCE_NUMBER), \"invalid sequence number\"},",
          "573:     {ERR_REASON(SSL_R_INVALID_SERVERINFO_DATA), \"invalid serverinfo data\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:     {ERR_REASON(SSL_R_INVALID_KEY_UPDATE_TYPE), \"invalid key update type\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "715:     {ERR_REASON(SSL_R_SSL_SESSION_ID_TOO_LONG), \"ssl session id too long\"},",
          "716:     {ERR_REASON(SSL_R_SSL_SESSION_VERSION_MISMATCH),",
          "717:      \"ssl session version mismatch\"},",
          "718:     {ERR_REASON(SSL_R_TLSV1_ALERT_ACCESS_DENIED),",
          "719:      \"tlsv1 alert access denied\"},",
          "720:     {ERR_REASON(SSL_R_TLSV1_ALERT_DECODE_ERROR), \"tlsv1 alert decode error\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722:     {ERR_REASON(SSL_R_STILL_IN_INIT), \"still in init\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:     clear_ciphers(s);",
          "472:     s->first_packet = 0;",
          "475:     s->dane.mdpth = -1;",
          "476:     s->dane.pdpth = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:     s->key_update = SSL_KEY_UPDATE_NONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:     s->method = ctx->method;",
          "642:     if (!s->method->ssl_new(s))",
          "643:         goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644:     s->key_update = SSL_KEY_UPDATE_NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1714:     }",
          "1715: }",
          "1717: int SSL_renegotiate(SSL *s)",
          "1718: {",
          "1724:         return 0;",
          "1726:     if (s->renegotiate == 0)",
          "1727:         s->renegotiate = 1;",
          "",
          "[Removed Lines]",
          "1723:     if (SSL_IS_TLS13(s))",
          "",
          "[Added Lines]",
          "1721: int SSL_key_update(SSL *s, SSL_KEY_UPDATE updatetype)",
          "1722: {",
          "1723:     if (!SSL_IS_TLS13(s)) {",
          "1724:         SSLerr(SSL_F_SSL_KEY_UPDATE, SSL_R_WRONG_SSL_VERSION);",
          "1725:         return 0;",
          "1726:     }",
          "1728:     if (updatetype != SSL_KEY_UPDATE_NOT_REQUESTED",
          "1729:             && updatetype != SSL_KEY_UPDATE_REQUESTED) {",
          "1730:         SSLerr(SSL_F_SSL_KEY_UPDATE, SSL_R_INVALID_KEY_UPDATE_TYPE);",
          "1731:         return 0;",
          "1732:     }",
          "1734:     if (!SSL_is_init_finished(s)) {",
          "1735:         SSLerr(SSL_F_SSL_KEY_UPDATE, SSL_R_STILL_IN_INIT);",
          "1736:         return 0;",
          "1737:     }",
          "1739:     ossl_statem_set_in_init(s, 1);",
          "1741:     s->key_update = updatetype;",
          "1743:     return 1;",
          "1744: }",
          "1748:     if (SSL_IS_TLS13(s)) {",
          "1749:         SSLerr(SSL_F_SSL_RENEGOTIATE, SSL_R_WRONG_SSL_VERSION);",
          "1751:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174:     int renegotiate;",
          "1175: # ifndef OPENSSL_NO_SRP",
          "1177:     SRP_CTX srp_ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1176:     SSL_KEY_UPDATE key_update;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:     return 0;",
          "496: }",
          "498: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: int tls_construct_key_update(SSL *s, WPACKET *pkt)",
          "499: {",
          "500:     if (!WPACKET_put_bytes_u8(pkt, s->key_update)) {",
          "501:         SSLerr(SSL_F_TLS_CONSTRUCT_KEY_UPDATE, ERR_R_INTERNAL_ERROR);",
          "502:         goto err;",
          "503:     }",
          "505:     return 1;",
          "506:  err:",
          "507:     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "508:     return 0;",
          "509: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: __owur int dtls_construct_change_cipher_spec(SSL *s, WPACKET *pkt);",
          "113: __owur int tls_construct_finished(SSL *s, WPACKET *pkt);",
          "114: __owur WORK_STATE tls_finish_handshake(SSL *s, WORK_STATE wst, int clearbufs);",
          "115: __owur WORK_STATE dtls_wait_for_dry(SSL *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: __owur int tls_construct_key_update(SSL *s, WPACKET *pkt);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:         return WRITE_TRAN_ERROR;",
          "411:     case TLS_ST_SR_CLNT_HELLO:",
          "412:         if (s->hello_retry_request)",
          "413:             st->hand_state = TLS_ST_SW_HELLO_RETRY_REQUEST;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:     case TLS_ST_OK:",
          "407:         if (s->key_update != SSL_KEY_UPDATE_NONE) {",
          "408:             st->hand_state = TLS_ST_SW_KEY_UPDATE;",
          "409:             return WRITE_TRAN_CONTINUE;",
          "410:         }",
          "411:         return WRITE_TRAN_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:         st->hand_state = TLS_ST_SW_SESSION_TICKET;",
          "460:         return WRITE_TRAN_CONTINUE;",
          "462:     case TLS_ST_SW_SESSION_TICKET:",
          "463:         st->hand_state = TLS_ST_OK;",
          "464:         ossl_statem_set_in_init(s, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:     case TLS_ST_SW_KEY_UPDATE:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:         }",
          "823:         break;",
          "825:     case TLS_ST_SW_SESSION_TICKET:",
          "826:         if (SSL_IS_TLS13(s) && statem_flush(s) != 1)",
          "827:             return WORK_MORE_A;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "828:     case TLS_ST_SW_KEY_UPDATE:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "925:         break;",
          "926:     }",
          "928:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:     case TLS_ST_SW_KEY_UPDATE:",
          "934:         break;",
          "",
          "---------------"
        ],
        "util/libssl.num||util/libssl.num": [
          "File: util/libssl.num -> util/libssl.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "413: SSL_CTX_set_keylog_callback             414 1_1_1 EXIST::FUNCTION:",
          "414: SSL_CTX_get_keylog_callback             415 1_1_1 EXIST::FUNCTION:",
          "415: SSL_get_peer_signature_type_nid         416 1_1_1 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416: SSL_key_update                          417 1_1_1 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "355a0d10a9a736202d3dbc41ce2218acb46a30ca",
      "candidate_info": {
        "commit_hash": "355a0d10a9a736202d3dbc41ce2218acb46a30ca",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/355a0d10a9a736202d3dbc41ce2218acb46a30ca",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/extensions.c",
          "ssl/statem/statem_locl.h"
        ],
        "message": "Add a new unsolicited extension error code and add enum tag\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3418)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2829: # define SSL_R_UNKNOWN_SSL_VERSION                        254",
          "2830: # define SSL_R_UNKNOWN_STATE                              255",
          "2831: # define SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED       338",
          "2832: # define SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM          257",
          "2833: # define SSL_R_UNSUPPORTED_ELLIPTIC_CURVE                 315",
          "2834: # define SSL_R_UNSUPPORTED_PROTOCOL                       258",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2832: # define SSL_R_UNSOLICITED_EXTENSION                      217",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:     {ERR_REASON(SSL_R_UNKNOWN_STATE), \"unknown state\"},",
          "844:     {ERR_REASON(SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED),",
          "845:      \"unsafe legacy renegotiation disabled\"},",
          "846:     {ERR_REASON(SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM),",
          "847:      \"unsupported compression algorithm\"},",
          "848:     {ERR_REASON(SSL_R_UNSUPPORTED_ELLIPTIC_CURVE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:     {ERR_REASON(SSL_R_UNSOLICITED_EXTENSION), \"unsolicited extension\"},",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:                 && type != TLSEXT_TYPE_renegotiate",
          "511:                 && type != TLSEXT_TYPE_signed_certificate_timestamp",
          "512:                 && (s->ext.extflags[idx] & SSL_EXT_FLAG_SENT) == 0) {",
          "515:             goto err;",
          "516:         }",
          "",
          "[Removed Lines]",
          "513:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "",
          "[Added Lines]",
          "513:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_UNSOLICITED_EXTENSION);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     EXT_RETURN_FAIL,",
          "161:     EXT_RETURN_SENT,",
          "162:     EXT_RETURN_NOT_SENT",
          "",
          "[Removed Lines]",
          "159: typedef enum {",
          "",
          "[Added Lines]",
          "159: typedef enum ext_return_en {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d5b3fba1fc15e3a63876aa9c8deae351369781b",
      "candidate_info": {
        "commit_hash": "5d5b3fba1fc15e3a63876aa9c8deae351369781b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5d5b3fba1fc15e3a63876aa9c8deae351369781b",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_asn1.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/statem_locl.h"
        ],
        "message": "Parse the ticket_early_data_info extension\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2737)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_asn1.c||ssl/ssl_asn1.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2382: # define SSL_F_TLS_PARSE_CTOS_PSK                         505",
          "2383: # define SSL_F_TLS_PARSE_CTOS_RENEGOTIATE                 464",
          "2384: # define SSL_F_TLS_PARSE_CTOS_USE_SRTP                    465",
          "2385: # define SSL_F_TLS_PARSE_STOC_KEY_SHARE                   445",
          "2386: # define SSL_F_TLS_PARSE_STOC_PSK                         502",
          "2387: # define SSL_F_TLS_PARSE_STOC_RENEGOTIATE                 448",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2385: # define SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO             520",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2525: # define SSL_R_INVALID_CONFIGURATION_NAME                 113",
          "2526: # define SSL_R_INVALID_CT_VALIDATION_TYPE                 212",
          "2527: # define SSL_R_INVALID_KEY_UPDATE_TYPE                    120",
          "2528: # define SSL_R_INVALID_NULL_CMD_NAME                      385",
          "2529: # define SSL_R_INVALID_SEQUENCE_NUMBER                    402",
          "2530: # define SSL_R_INVALID_SERVERINFO_DATA                    388",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2529: # define SSL_R_INVALID_MAX_EARLY_DATA                     174",
          "",
          "---------------"
        ],
        "ssl/ssl_asn1.c||ssl/ssl_asn1.c": [
          "File: ssl/ssl_asn1.c -> ssl/ssl_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     ASN1_OCTET_STRING *srp_username;",
          "66: #endif",
          "67:     long flags;",
          "68: } SSL_SESSION_ASN1;",
          "70: ASN1_SEQUENCE(SSL_SESSION_ASN1) = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     uint32_t max_early_data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     ASN1_EXP_OPT(SSL_SESSION_ASN1, srp_username, ASN1_OCTET_STRING, 12),",
          "92: #endif",
          "93:     ASN1_EXP_OPT(SSL_SESSION_ASN1, flags, ZLONG, 13),",
          "95: } static_ASN1_SEQUENCE_END(SSL_SESSION_ASN1)",
          "97: IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(SSL_SESSION_ASN1)",
          "",
          "[Removed Lines]",
          "94:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick_age_add, ZLONG, 14)",
          "",
          "[Added Lines]",
          "95:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick_age_add, ZLONG, 14),",
          "96:     ASN1_EXP_OPT(SSL_SESSION_ASN1, max_early_data, ZLONG, 15)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:     as.flags = in->flags;",
          "207:     return i2d_SSL_SESSION_ASN1(&as, pp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:     as.max_early_data = in->ext.max_early_data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359:     ret->flags = as->flags;",
          "361:     M_ASN1_free_of(as, SSL_SESSION_ASN1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:     ret->ext.max_early_data = as->max_early_data;",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_RENEGOTIATE),",
          "393:      \"tls_parse_ctos_renegotiate\"},",
          "394:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_USE_SRTP), \"tls_parse_ctos_use_srtp\"},",
          "395:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_KEY_SHARE), \"tls_parse_stoc_key_share\"},",
          "396:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_PSK), \"tls_parse_stoc_psk\"},",
          "397:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_RENEGOTIATE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     {ERR_FUNC(SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO),",
          "396:      \"tls_parse_stoc_early_data_info\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:     {ERR_REASON(SSL_R_INVALID_CT_VALIDATION_TYPE),",
          "588:      \"invalid ct validation type\"},",
          "589:     {ERR_REASON(SSL_R_INVALID_KEY_UPDATE_TYPE), \"invalid key update type\"},",
          "590:     {ERR_REASON(SSL_R_INVALID_NULL_CMD_NAME), \"invalid null cmd name\"},",
          "591:     {ERR_REASON(SSL_R_INVALID_SEQUENCE_NUMBER), \"invalid sequence number\"},",
          "592:     {ERR_REASON(SSL_R_INVALID_SERVERINFO_DATA), \"invalid serverinfo data\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:     {ERR_REASON(SSL_R_INVALID_MAX_EARLY_DATA), \"invalid max early data\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:         unsigned long tick_lifetime_hint;",
          "576:         uint32_t tick_age_add;",
          "577:         int tick_identity;",
          "578:     } ext;",
          "579: # ifndef OPENSSL_NO_SRP",
          "580:     char *srp_username;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:         uint32_t max_early_data;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     {",
          "133:         TLSEXT_TYPE_early_data_info,",
          "134:         EXT_TLS1_3_NEW_SESSION_TICKET,",
          "136:     },",
          "137: #ifndef OPENSSL_NO_EC",
          "138:     {",
          "",
          "[Removed Lines]",
          "135:         NULL, NULL, NULL, tls_construct_stoc_early_data_info, NULL, NULL",
          "",
          "[Added Lines]",
          "135:         NULL, NULL, tls_parse_stoc_early_data_info,",
          "136:         tls_construct_stoc_early_data_info, NULL, NULL",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:     return 1;",
          "880: }",
          "882: #ifndef OPENSSL_NO_EC",
          "883: int tls_parse_stoc_ec_pt_formats(SSL *s, PACKET *pkt, unsigned int context,",
          "884:                                  X509 *x, size_t chainidx, int *al)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882: int tls_parse_stoc_early_data_info(SSL *s, PACKET *pkt, unsigned int context,",
          "883:                                    X509 *x, size_t chainidx, int *al)",
          "884: {",
          "885:     unsigned long max_early_data;",
          "887:     if (!PACKET_get_net_4(pkt, &max_early_data)",
          "888:             || PACKET_remaining(pkt) != 0) {",
          "889:         SSLerr(SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO,",
          "890:                SSL_R_INVALID_MAX_EARLY_DATA);",
          "892:         return 0;",
          "893:     }",
          "895:     s->session->ext.max_early_data = max_early_data;",
          "897:     return 1;",
          "898: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:                                X509 *x, size_t chainidx, int *al);",
          "332: int tls_parse_stoc_server_name(SSL *s, PACKET *pkt, unsigned int context,",
          "333:                                X509 *x, size_t chainidx, int *al);",
          "334: #ifndef OPENSSL_NO_EC",
          "335: int tls_parse_stoc_ec_pt_formats(SSL *s, PACKET *pkt, unsigned int context,",
          "336:                                  X509 *x, size_t chainidx, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: int tls_parse_stoc_early_data_info(SSL *s, PACKET *pkt, unsigned int context,",
          "335:                               X509 *x, size_t chainidx, int *al);",
          "",
          "---------------"
        ]
      }
    }
  ]
}