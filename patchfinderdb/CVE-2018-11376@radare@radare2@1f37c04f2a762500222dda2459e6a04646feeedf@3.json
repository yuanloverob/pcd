{
  "cve_id": "CVE-2018-11376",
  "cve_desc": "The r_read_le32() function in radare2 2.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted ELF file.",
  "repo": "radare/radare2",
  "patch_hash": "1f37c04f2a762500222dda2459e6a04646feeedf",
  "patch_info": {
    "commit_hash": "1f37c04f2a762500222dda2459e6a04646feeedf",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/1f37c04f2a762500222dda2459e6a04646feeedf",
    "files": [
      "libr/bin/p/bin_elf.c",
      "libr/core/cbin.c"
    ],
    "message": "Fix #9904 - crash in r2_hoobr_r_read_le32 (over 9000 entrypoints) and read_le oobread (#9923)",
    "before_after_code_files": [
      "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c",
      "libr/core/cbin.c||libr/core/cbin.c"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
      "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "348:    }",
      "349:    (void)r_buf_read_at (bf->buf, sec->paddr, buf, sec->size);",
      "350:    if (bits == 32) {",
      "352:      ut32 addr32 = r_read_le32 (buf + i);",
      "353:      if (addr32) {",
      "354:       RBinAddr *ba = newEntry (sec->paddr + i, (ut64)addr32, type, bits);",
      "",
      "[Removed Lines]",
      "351:     for (i = 0; i < sec->size; i += 4) {",
      "",
      "[Added Lines]",
      "351:     for (i = 0; (i + 3) < sec->size; i += 4) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356:      }",
      "357:     }",
      "358:    } else {",
      "360:      ut64 addr64 = r_read_le64 (buf + i);",
      "361:      if (addr64) {",
      "362:       RBinAddr *ba = newEntry (sec->paddr + i, addr64, type, bits);",
      "",
      "[Removed Lines]",
      "359:     for (i = 0; i < sec->size; i += 8) {",
      "",
      "[Added Lines]",
      "359:     for (i = 0; (i + 7) < sec->size; i += 8) {",
      "",
      "---------------"
    ],
    "libr/core/cbin.c||libr/core/cbin.c": [
      "File: libr/core/cbin.c -> libr/core/cbin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1044:    r_cons_printf (\"[Entrypoints]\\n\");",
      "1045:   }",
      "1046:  }",
      "1048:  r_list_foreach (entries, iter, entry) {",
      "1049:   ut64 paddr = entry->paddr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1047:  if (r_list_length (entries) > 1024) {",
      "1048:   eprintf (\"Too many entrypoints (%d)\\n\", r_list_length (entries));",
      "1049:   return false;",
      "1050:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a2938f6f9f6a6aa3ec08336a4046035c6125252",
      "candidate_info": {
        "commit_hash": "2a2938f6f9f6a6aa3ec08336a4046035c6125252",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/2a2938f6f9f6a6aa3ec08336a4046035c6125252",
        "files": [
          "libr/bin/p/bin_elf.c"
        ],
        "message": "bin/p/bin_elf.c: fix segfault when accessing non present symbol (#10099)",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <r_types.h>",
          "6: #include <r_util.h>",
          "",
          "[Removed Lines]",
          "3: #include <assert.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "894: static ut64 ht_find_intu64(SdbHash* ht, int key, bool* found) {",
          "895:  ut64 *mvalue = (ut64 *)ht_find (ht, sdb_fmt (\"%d\", key), found);",
          "897: }",
          "899: static void relocs_by_sym_free(HtKv *kv) {",
          "",
          "[Removed Lines]",
          "896:  return *mvalue;",
          "",
          "[Added Lines]",
          "895:  return *found ? *mvalue : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "974:     bool found;",
          "976:     sym_addr = ht_find_intu64 (relocs_by_sym, relcs[i].sym, &found);",
          "980:    } else if (relcs[i].sym < bin->symbols_by_ord_size && bin->symbols_by_ord[relcs[i].sym]) {",
          "981:     sym_addr = bin->symbols_by_ord[relcs[i].sym]->vaddr;",
          "982:    }",
          "",
          "[Removed Lines]",
          "977:     if (!found) {",
          "978:      sym_addr = 0;",
          "979:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2b42831434aebfb2a9bebfa26cf56a8333844fc",
      "candidate_info": {
        "commit_hash": "e2b42831434aebfb2a9bebfa26cf56a8333844fc",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/e2b42831434aebfb2a9bebfa26cf56a8333844fc",
        "files": [
          "libr/bin/p/bin_elf.c"
        ],
        "message": "Fix #10260 - oobread in elf parser",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1099: }",
          "1101: static RList* fields(RBinFile *bf) {",
          "1102:  RList *ret = NULL;",
          "1103:  const ut8 *buf = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:  int left = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1107:  }",
          "1108:  ret->free = free;",
          "1111:   RBinField *ptr = NULL;",
          "1112:   struct r_bin_elf_field_t *field = NULL;",
          "1113:   int i;",
          "",
          "[Removed Lines]",
          "1110:  if (!(buf = r_buf_get_at (bf->buf, 0, NULL))) {",
          "",
          "[Added Lines]",
          "1111:  if (!(buf = r_buf_get_at (bf->buf, 0, &left))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:  } else {",
          "1131:   #define ROW(nam,siz,val,fmt) \\",
          "1132:   r_list_append (ret, r_bin_field_new (addr, addr, siz, nam, sdb_fmt (\"0x%08x\", val), fmt));",
          "1133:   ut64 addr = 0;",
          "1134:   ROW (\"ELF\", 4, r_read_le32 (buf), \"x\"); addr+=0x10;",
          "1135:   ROW (\"Type\", 2, r_read_le16 (buf + addr), \"x\"); addr+=0x2;",
          "1136:   ROW (\"Machine\", 2, r_read_le16 (buf + addr), \"x\"); addr+=0x2;",
          "1137:   ROW (\"Version\", 4, r_read_le32 (buf + addr), \"x\"); addr+=0x4;",
          "1140:    ROW (\"Entry point\", 4, r_read_le32 (buf + addr), \"x\"); addr+=0x4;",
          "1141:    ROW (\"PhOff\", 4, r_read_le32 (buf + addr), \"x\"); addr+=0x4;",
          "1142:    ROW (\"ShOff\", 4, r_read_le32 (buf + addr), \"x\");",
          "",
          "[Removed Lines]",
          "1139:   if (r_read_le8(buf + 0x04) == 1) {",
          "",
          "[Added Lines]",
          "1134:   if (left < 40) {",
          "1135:    return ret;",
          "1136:   }",
          "1143:   if (r_read_le8 (buf + 0x04) == 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c2f96b67a20e3840106306885fda4f4a448d029",
      "candidate_info": {
        "commit_hash": "3c2f96b67a20e3840106306885fda4f4a448d029",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/3c2f96b67a20e3840106306885fda4f4a448d029",
        "files": [
          "libr/bin/p/bin_elf.c"
        ],
        "message": "Removed some trailing spaces",
        "before_after_code_files": [
          "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ],
          "candidate": [
            "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_elf.c||libr/bin/p/bin_elf.c": [
          "File: libr/bin/p/bin_elf.c -> libr/bin/p/bin_elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   ret->vaddr = Elf_(r_bin_elf_p2v) (obj, addr);",
          "163:   if (is_arm && addr & 1) {",
          "164:    ret->bits = 16;",
          "167:   }",
          "168:  }",
          "169:  return ret;",
          "",
          "[Removed Lines]",
          "165:    ret->vaddr--;",
          "166:    ret->paddr--;",
          "",
          "[Added Lines]",
          "165:    ret->vaddr--;",
          "166:    ret->paddr--;",
          "",
          "---------------"
        ]
      }
    }
  ]
}