{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4799488e163c02508894a7c71f256605f45d9645",
      "candidate_info": {
        "commit_hash": "4799488e163c02508894a7c71f256605f45d9645",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4799488e163c02508894a7c71f256605f45d9645",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.c"
        ],
        "message": "Change the code generator for the IN operator so that it avoids creating OP_Eq and OP_Ne opcode with the same P1 and P3 arguments.  This enables us to back out check-in [ddb17d92df194337] and also fix ticket [188f912b51cd802].\n\nFossilOrigin-Name: 9ab985a9c8160b905730678f40ed440a246cdec549c798bafefaed5abbc0437f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 89a9dad6330270a4c3b962f86a208088d2ea9883c7d291351a77f058e0ed8b0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3187:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3188:       }",
          "3189:       if( ii<pList->nExpr-1 || destIfNull!=destIfFalse ){",
          "3191:                           (void*)pColl, P4_COLLSEQ);",
          "3194:         sqlite3VdbeChangeP5(v, zAff[0]);",
          "3195:       }else{",
          "3196:         assert( destIfNull==destIfFalse );",
          "3199:         sqlite3VdbeChangeP5(v, zAff[0] | SQLITE_JUMPIFNULL);",
          "3200:       }",
          "3201:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "[Removed Lines]",
          "3190:         sqlite3VdbeAddOp4(v, OP_Eq, rLhs, labelOk, r2,",
          "3192:         VdbeCoverageIf(v, ii<pList->nExpr-1);",
          "3193:         VdbeCoverageIf(v, ii==pList->nExpr-1);",
          "3197:         sqlite3VdbeAddOp4(v, OP_Ne, rLhs, destIfFalse, r2,",
          "3198:                           (void*)pColl, P4_COLLSEQ); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "3190:         int op = rLhs!=r2 ? OP_Eq : OP_NotNull;",
          "3191:         sqlite3VdbeAddOp4(v, op, rLhs, labelOk, r2,",
          "3193:         VdbeCoverageIf(v, ii<pList->nExpr-1 && op==OP_Eq);",
          "3194:         VdbeCoverageIf(v, ii==pList->nExpr-1 && op==OP_Eq);",
          "3195:         VdbeCoverageIf(v, ii<pList->nExpr-1 && op==OP_NotNull);",
          "3196:         VdbeCoverageIf(v, ii==pList->nExpr-1 && op==OP_NotNull);",
          "3199:         int op = rLhs!=r2 ? OP_Ne : OP_IsNull;",
          "3201:         sqlite3VdbeAddOp4(v, op, rLhs, destIfFalse, r2,",
          "3202:                           (void*)pColl, P4_COLLSEQ);",
          "3203:         VdbeCoverageIf(v, op==OP_Ne);",
          "3204:         VdbeCoverageIf(v, op==OP_IsNull);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2032:           flags3 = pIn3->flags;",
          "2033:         }",
          "2034:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22c04f819934ada3af6b712d9797ce34c58c813a",
      "candidate_info": {
        "commit_hash": "22c04f819934ada3af6b712d9797ce34c58c813a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22c04f819934ada3af6b712d9797ce34c58c813a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/check.test"
        ],
        "message": "Allow comparison operators of a register against itself. Ticket [188f912b51cd802a],\n\nFossilOrigin-Name: 401c9d30e06191d938503aae024bc453d960fa64dc812ed86c661f94533247fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/check.test||test/check.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc8bfc7fcdf33f6855584e10e9260073430517ff3268cf0c7988dcc4cd785391",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2053:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2054:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2056:       }",
          "2058:         testcase( pIn3->flags & MEM_Int );",
          "2059:         testcase( pIn3->flags & MEM_Real );",
          "2060:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "[Removed Lines]",
          "2055:         assert( pIn1!=pIn3 );",
          "2057:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "",
          "[Added Lines]",
          "2056:       if( (flags3 & MEM_Str)==0",
          "2057:        && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0",
          "2058:        && pIn1!=pIn3",
          "2059:       ){",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing CHECK constraints",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "14: # $Id: check.test,v 1.13 2009/06/05 17:09:12 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:   INSERT INTO t2(b, a) VALUES(2, 'abc');",
          "537: }",
          "542: finish_test",
          "",
          "[Removed Lines]",
          "539: finish_test",
          "",
          "[Added Lines]",
          "538: # 2019-12-24 ticket b383b90278186263",
          "539: #",
          "540: reset_db",
          "541: do_execsql_test 12.10 {",
          "542:   CREATE TABLE t1(a TEXT, CHECK(a=+a));",
          "543:   INSERT INTO t1(a) VALUES(NULL),('xyz'),(5),(x'303132'),(4.75);",
          "544:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "545: } {NULL 'xyz' '5' X'303132' '4.75'}",
          "546: do_execsql_test 12.20 {",
          "547:   DROP TABLE t1;",
          "548:   CREATE TABLE t1(a TEXT, CHECK(a<>+a));",
          "549:   INSERT INTO t1(a) VALUES(NULL);",
          "550: } {}",
          "551: do_catchsql_test 12.21 {",
          "552:   INSERT INTO t1(a) VALUES('xyz');",
          "553: } {1 {CHECK constraint failed: t1}}",
          "554: do_catchsql_test 12.22 {",
          "555:   INSERT INTO t1(a) VALUES(123);",
          "556: } {1 {CHECK constraint failed: t1}}",
          "557: do_execsql_test 12.30 {",
          "558:   DROP TABLE t1;",
          "559:   CREATE TABLE t1(a TEXT, CHECK(NOT(a=+a)));",
          "560:   INSERT INTO t1(a) VALUES(NULL);",
          "561: } {}",
          "562: do_catchsql_test 12.31 {",
          "563:   INSERT INTO t1(a) VALUES('xyz');",
          "564: } {1 {CHECK constraint failed: t1}}",
          "565: do_catchsql_test 12.32 {",
          "566:   INSERT INTO t1(a) VALUES(123);",
          "567: } {1 {CHECK constraint failed: t1}}",
          "568: do_execsql_test 12.40 {",
          "569:   DROP TABLE t1;",
          "570:   CREATE TABLE t1(a TEXT, CHECK(NOT(a<>+a)));",
          "571:   INSERT INTO t1(a) VALUES(NULL),('xyz'),(5),(x'303132'),(4.75);",
          "572:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "573: } {NULL 'xyz' '5' X'303132' '4.75'}",
          "574: do_execsql_test 12.50 {",
          "575:   DROP TABLE t1;",
          "576:   CREATE TABLE t1(a TEXT, CHECK(a BETWEEN 0 AND +a));",
          "577:   INSERT INTO t1(a) VALUES(NULL),('xyz'),(5),(x'303132'),(4.75);",
          "578:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "579: } {NULL 'xyz' '5' X'303132' '4.75'}",
          "580: do_execsql_test 12.60 {",
          "581:   DROP TABLE t1;",
          "582:   CREATE TABLE t1(a TEXT, CHECK(a NOT BETWEEN 0 AND +a));",
          "583:   INSERT INTO t1(a) VALUES(NULL);",
          "584:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "585: } {NULL}",
          "586: do_catchsql_test 12.61 {",
          "587:   INSERT INTO t1(a) VALUES(456);",
          "588: } {1 {CHECK constraint failed: t1}}",
          "589: do_execsql_test 12.70 {",
          "590:   DROP TABLE t1;",
          "591:   CREATE TABLE t1(a TEXT, CHECK(a BETWEEN +a AND 999999));",
          "592:   INSERT INTO t1(a) VALUES(NULL),(5);",
          "593:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "594: } {NULL '5'}",
          "595: do_execsql_test 12.80 {",
          "596:   DROP TABLE t1;",
          "597:   CREATE TABLE t1(a TEXT, CHECK(a NOT BETWEEN +a AND 999999));",
          "598:   INSERT INTO t1(a) VALUES(NULL);",
          "599:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "600: } {NULL}",
          "601: do_catchsql_test 12.81 {",
          "602:   INSERT INTO t1(a) VALUES(456);",
          "603: } {1 {CHECK constraint failed: t1}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce678c297bc0a533fe7ba38581ee14b04239cbae",
      "candidate_info": {
        "commit_hash": "ce678c297bc0a533fe7ba38581ee14b04239cbae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ce678c297bc0a533fe7ba38581ee14b04239cbae",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Improved tracing output from the LEMON-generated parser.\n\nFossilOrigin-Name: 4d6d2fc046d586a1e5989bbb2757f13d0371fbfad0acf45a0e2fd77dffd8d8f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 840de36df1aaeb4bad9a7c18e97cc560ba3b8c629c4520a05bc456d67b3347b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1716:   for(i=0, rp=lem.rule; rp; rp=rp->next){",
          "1717:     rp->iRule = rp->code ? i++ : -1;",
          "1718:   }",
          "1719:   for(rp=lem.rule; rp; rp=rp->next){",
          "1720:     if( rp->iRule<0 ) rp->iRule = i++;",
          "1721:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1720:   lem.nruleWithAction = i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4431:   fprintf(out,\"#define YYNSTATE             %d\\n\",lemp->nxstate);  lineno++;",
          "4432:   fprintf(out,\"#define YYNRULE              %d\\n\",lemp->nrule);  lineno++;",
          "4433:   fprintf(out,\"#define YYNTOKEN             %d\\n\",lemp->nterminal); lineno++;",
          "4434:   fprintf(out,\"#define YY_MAX_SHIFT         %d\\n\",lemp->nxstate-1); lineno++;",
          "4435:   i = lemp->minShiftReduce;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4435:   fprintf(out,\"#define YYNRULE_WITH_ACTION  %d\\n\",lemp->nruleWithAction);",
          "4436:          lineno++;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:   if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){",
          "726:     yysize = yyRuleInfoNRhs[yyruleno];",
          "727:     if( yysize ){",
          "729:         yyTracePrompt,",
          "731:     }else{",
          "734:     }",
          "735:   }",
          "",
          "[Removed Lines]",
          "728:       fprintf(yyTraceFILE, \"%sReduce %d [%s], go to state %d.\\n\",",
          "730:         yyruleno, yyRuleName[yyruleno], yymsp[yysize].stateno);",
          "732:       fprintf(yyTraceFILE, \"%sReduce %d [%s].\\n\",",
          "733:         yyTracePrompt, yyruleno, yyRuleName[yyruleno]);",
          "",
          "[Added Lines]",
          "728:       fprintf(yyTraceFILE, \"%sReduce %d [%s]%s, pop back to state %d.\\n\",",
          "730:         yyruleno, yyRuleName[yyruleno],",
          "731:         yyruleno<YYNRULE_WITH_ACTION ? \"\" : \" without external action\",",
          "732:         yymsp[yysize].stateno);",
          "734:       fprintf(yyTraceFILE, \"%sReduce %d [%s]%s.\\n\",",
          "735:         yyTracePrompt, yyruleno, yyRuleName[yyruleno],",
          "736:         yyruleno<YYNRULE_WITH_ACTION ? \"\" : \" without external action\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1d93be142bfdffdb7122e2b2a0cd7b60549f6ac",
      "candidate_info": {
        "commit_hash": "b1d93be142bfdffdb7122e2b2a0cd7b60549f6ac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1d93be142bfdffdb7122e2b2a0cd7b60549f6ac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/vdbemem.c",
          "src/vdbetrace.c",
          "test/intreal.test"
        ],
        "message": "In the sqlite3_value or Mem object, make the MEM_IntReal type completely independent from MEM_Int and MEM_Real. This helps avoid problems when inserting non-float values into a \"REAL\" column.\n\nFossilOrigin-Name: 5a8a23ee5f60a31dbd167a0966d1ab3d0f1c07df2251906cb73f23d1f5466b46",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c",
          "src/vdbetrace.c||src/vdbetrace.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a16ddf91f0c9c516a7fc2a9d4a4f69a8326f9b8ea66421e9ef1a2d663687b70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4104:       break;",
          "4105:     }",
          "4107:   }",
          "4108:   va_end(ap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4118:     case SQLITE_TESTCTRL_RESULT_INTREAL: {",
          "4119:       sqlite3_context *pCtx = va_arg(ap, sqlite3_context*);",
          "4120:       sqlite3ResultIntReal(pCtx);",
          "4121:       break;",
          "4122:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7319: #define SQLITE_TESTCTRL_SORTER_MMAP             24",
          "7320: #define SQLITE_TESTCTRL_IMPOSTER                25",
          "7321: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7322: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:                         void(*)(void*));",
          "4273: void sqlite3ValueSetNull(sqlite3_value*);",
          "4274: void sqlite3ValueFree(sqlite3_value*);",
          "4275: sqlite3_value *sqlite3ValueNew(sqlite3 *);",
          "4276: #ifndef SQLITE_OMIT_UTF16",
          "4277: char *sqlite3Utf16to8(sqlite3 *, const void*, int, u8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4275: #ifndef SQLITE_UNTESTABLE",
          "4276: void sqlite3ResultIntReal(sqlite3_context*);",
          "4277: #endif",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "998:   sqlite3_result_int(context, cnt++);",
          "999: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005: static void intrealFunction(",
          "1006:   sqlite3_context *context,",
          "1007:   int argc,",
          "1008:   sqlite3_value **argv",
          "1009: ){",
          "1010:   sqlite3_int64 v = sqlite3_value_int64(argv[0]);",
          "1011:   sqlite3_result_int64(context, v);",
          "1012:   sqlite3_test_control(SQLITE_TESTCTRL_RESULT_INTREAL, context);",
          "1013: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:           0, nondeterministicFunction, 0, 0);",
          "1063:   }",
          "1065: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:   if( rc==SQLITE_OK ){",
          "1083:     rc = sqlite3_create_function(db, \"intreal\", 1, SQLITE_UTF8,",
          "1084:           0, intrealFunction, 0, 0);",
          "1085:   }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   double rValue;",
          "296:   i64 iValue;",
          "297:   u8 enc = pRec->enc;",
          "299:   if( sqlite3AtoF(pRec->z, &rValue, pRec->n, enc)==0 ) return;",
          "300:   if( 0==sqlite3Atoi64(pRec->z, &iValue, pRec->n, enc) ){",
          "301:     pRec->u.i = iValue;",
          "",
          "[Removed Lines]",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real))==MEM_Str );",
          "",
          "[Added Lines]",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:         sqlite3VdbeMemStringify(pRec, enc, 1);",
          "357:       }",
          "358:     }",
          "360:   }",
          "361: }",
          "",
          "[Removed Lines]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int)) ){",
          "359:     pRec->flags &= ~(MEM_Real|MEM_Int);",
          "",
          "[Added Lines]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int|MEM_IntReal)) ){",
          "356:         testcase( pRec->flags & MEM_Int );",
          "357:         testcase( pRec->flags & MEM_Real );",
          "358:         testcase( pRec->flags & MEM_IntReal );",
          "362:     pRec->flags &= ~(MEM_Real|MEM_Int|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "399:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "400:   ExpandBlob(pMem);",
          "401:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "",
          "[Removed Lines]",
          "398:   assert( (pMem->flags & (MEM_Int|MEM_Real))==0 );",
          "",
          "[Added Lines]",
          "401:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417: static u16 numericType(Mem *pMem){",
          "420:   }",
          "421:   if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "422:     return computeNumericType(pMem);",
          "423:   }",
          "424:   return 0;",
          "",
          "[Removed Lines]",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "421:   if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal) ){",
          "422:     testcase( pMem->flags & MEM_Int );",
          "423:     testcase( pMem->flags & MEM_Real );",
          "424:     testcase( pMem->flags & MEM_IntReal );",
          "425:     return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal);",
          "428:     testcase( pMem->flags & MEM_Str );",
          "429:     testcase( pMem->flags & MEM_Blob );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "519:   }else if( p->flags & MEM_Int ){",
          "520:     printf(\" i:%lld\", p->u.i);",
          "",
          "[Removed Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "",
          "[Added Lines]",
          "525:   }else if( (p->flags & (MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1630:     }",
          "1631:     pOut->u.r = rB;",
          "1632:     MemSetTypeFlag(pOut, MEM_Real);",
          "1634:       sqlite3VdbeIntegerAffinity(pOut);",
          "1635:     }",
          "1636: #endif",
          "",
          "[Removed Lines]",
          "1633:     if( ((type1|type2)&MEM_Real)==0 && !bIntint ){",
          "",
          "[Added Lines]",
          "1641:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1803:   pIn1 = &aMem[pOp->p1];",
          "1805:     sqlite3VdbeMemRealify(pIn1);",
          "1806:   }",
          "1807:   break;",
          "",
          "[Removed Lines]",
          "1804:   if( pIn1->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1812:   if( pIn1->flags & (MEM_Int|MEM_IntReal) ){",
          "1813:     testcase( pIn1->flags & MEM_Int );",
          "1814:     testcase( pIn1->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1993:     affinity = pOp->p5 & SQLITE_AFF_MASK;",
          "1994:     if( affinity>=SQLITE_AFF_NUMERIC ){",
          "1995:       if( (flags1 | flags3)&MEM_Str ){",
          "1997:           applyNumericAffinity(pIn1,0);",
          "1998:           assert( flags3==pIn3->flags );",
          "",
          "[Removed Lines]",
          "1996:         if( (flags1 & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Added Lines]",
          "2006:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2004:           flags3 = pIn3->flags;",
          "2005:         }",
          "2007:           applyNumericAffinity(pIn3,0);",
          "2008:         }",
          "2009:       }",
          "",
          "[Removed Lines]",
          "2006:         if( (flags3 & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Added Lines]",
          "2016:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2016:         goto compare_op;",
          "2017:       }",
          "2018:     }else if( affinity==SQLITE_AFF_TEXT ){",
          "2020:         testcase( pIn1->flags & MEM_Int );",
          "2021:         testcase( pIn1->flags & MEM_Real );",
          "2022:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2023:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2024:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2025:         assert( pIn1!=pIn3 );",
          "2026:       }",
          "2028:         testcase( pIn3->flags & MEM_Int );",
          "2029:         testcase( pIn3->flags & MEM_Real );",
          "2030:         sqlite3VdbeMemStringify(pIn3, encoding, 1);",
          "2031:         testcase( (flags3&MEM_Dyn) != (pIn3->flags&MEM_Dyn) );",
          "2032:         flags3 = (pIn3->flags & ~MEM_TypeMask) | (flags3 & MEM_TypeMask);",
          "",
          "[Removed Lines]",
          "2019:       if( (flags1 & MEM_Str)==0 && (flags1 & (MEM_Int|MEM_Real))!=0 ){",
          "2027:       if( (flags3 & MEM_Str)==0 && (flags3 & (MEM_Int|MEM_Real))!=0 ){",
          "",
          "[Added Lines]",
          "2029:       if( (flags1 & MEM_Str)==0 && (flags1&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2032:         testcase( pIn1->flags & MEM_IntReal );",
          "2038:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2041:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2792:       pIn1->flags |= MEM_IntReal;",
          "2793:     }",
          "2794:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2795:     zAffinity++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2805:       pIn1->flags &= ~MEM_Int;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3992:     pIn3 = &aMem[pOp->p3];",
          "3994:       applyNumericAffinity(pIn3, 0);",
          "3995:     }",
          "3996:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4001:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "3993:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "4000:     if( (pIn3->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "4006:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4382:   u64 iKey;",
          "4384:   pIn3 = &aMem[pOp->p3];",
          "",
          "[Removed Lines]",
          "4385:   if( (pIn3->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "4398:   testcase( pIn3->flags & MEM_Int );",
          "4399:   testcase( pIn3->flags & MEM_IntReal );",
          "4400:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: int sqlite3_value_type(sqlite3_value* pVal){",
          "236:   static const u8 aType[] = {",
          "301:   };",
          "302: #ifdef SQLITE_DEBUG",
          "303:   {",
          "304:     int eType = SQLITE_BLOB;",
          "305:     if( pVal->flags & MEM_Null ){",
          "306:       eType = SQLITE_NULL;",
          "310:       eType = SQLITE_FLOAT;",
          "311:     }else if( pVal->flags & MEM_Str ){",
          "312:       eType = SQLITE_TEXT;",
          "313:     }",
          "",
          "[Removed Lines]",
          "307:     }else if( pVal->flags & MEM_Int ){",
          "308:       eType = (pVal->flags & MEM_IntReal) ? SQLITE_FLOAT : SQLITE_INTEGER;",
          "309:     }else if( pVal->flags & MEM_Real ){",
          "",
          "[Added Lines]",
          "307:     }else if( pVal->flags & (MEM_Real|MEM_IntReal) ){",
          "309:     }else if( pVal->flags & MEM_Int ){",
          "310:       eType = SQLITE_INTEGER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:   sqlite3OomFault(pCtx->pOut->db);",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: #ifndef SQLITE_UNTESTABLE",
          "571: void sqlite3ResultIntReal(sqlite3_context *pCtx){",
          "572:   assert( sqlite3_mutex_held(pCtx->pOut->db->mutex) );",
          "573:   if( pCtx->pOut->flags & MEM_Int ){",
          "574:     pCtx->pOut->flags &= ~MEM_Int;",
          "575:     pCtx->pOut->flags |= MEM_IntReal;",
          "576:   }",
          "577: }",
          "578: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1849:   }else if( iIdx>=p->pUnpacked->nField ){",
          "1851:   }else if( p->pTab->aCol[iIdx].affinity==SQLITE_AFF_REAL ){",
          "1853:       sqlite3VdbeMemRealify(pMem);",
          "1854:     }",
          "1855:   }",
          "",
          "[Removed Lines]",
          "1852:     if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1867:     if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "1868:       testcase( pMem->flags & MEM_Int );",
          "1869:       testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:       Mem *pMem = pOp->p4.pMem;",
          "1535:       if( pMem->flags & MEM_Str ){",
          "1536:         zP4 = pMem->z;",
          "1538:         sqlite3_str_appendf(&x, \"%lld\", pMem->u.i);",
          "1539:       }else if( pMem->flags & MEM_Real ){",
          "1540:         sqlite3_str_appendf(&x, \"%.16g\", pMem->u.r);",
          "",
          "[Removed Lines]",
          "1537:       }else if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1537:       }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3433:     return 0;",
          "3434:   }",
          "3437: #   define MAX_6BYTE ((((i64)0x00008000)<<32)-1)",
          "3438:     i64 i = pMem->u.i;",
          "3439:     u64 u;",
          "3440:     if( i<0 ){",
          "3441:       u = ~i;",
          "3442:     }else{",
          "",
          "[Removed Lines]",
          "3435:   if( flags&MEM_Int ){",
          "",
          "[Added Lines]",
          "3435:   if( flags&(MEM_Int|MEM_IntReal) ){",
          "3440:     testcase( flags & MEM_Int );",
          "3441:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4116:       if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4117:       if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4118:       return 0;",
          "",
          "[Removed Lines]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real) ){",
          "4115:     if( (f1 & f2 & MEM_Int)!=0 ){",
          "",
          "[Added Lines]",
          "4116:   if( combined_flags&(MEM_Int|MEM_Real|MEM_IntReal) ){",
          "4117:     testcase( combined_flags & MEM_Int );",
          "4118:     testcase( combined_flags & MEM_Real );",
          "4119:     testcase( combined_flags & MEM_IntReal );",
          "4120:     if( (f1 & f2 & (MEM_Int|MEM_IntReal))!=0 ){",
          "4121:       testcase( f1 & f2 & MEM_Int );",
          "4122:       testcase( f1 & f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4122:       if( pMem1->u.r > pMem2->u.r ) return +1;",
          "4123:       return 0;",
          "4124:     }",
          "4126:       if( (f2&MEM_Real)!=0 ){",
          "4127:         return sqlite3IntFloatCompare(pMem1->u.i, pMem2->u.r);",
          "4128:       }else{",
          "4129:         return -1;",
          "4130:       }",
          "4131:     }",
          "4132:     if( (f1&MEM_Real)!=0 ){",
          "4134:         return -sqlite3IntFloatCompare(pMem2->u.i, pMem1->u.r);",
          "4135:       }else{",
          "4136:         return -1;",
          "",
          "[Removed Lines]",
          "4125:     if( (f1&MEM_Int)!=0 ){",
          "4133:       if( (f2&MEM_Int)!=0 ){",
          "",
          "[Added Lines]",
          "4132:     if( (f1&(MEM_Int|MEM_IntReal))!=0 ){",
          "4133:       testcase( f1 & MEM_Int );",
          "4134:       testcase( f1 & MEM_IntReal );",
          "4137:       }else if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4138:         if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4139:         if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4140:         return 0;",
          "4146:       if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4147:         testcase( f2 & MEM_Int );",
          "4148:         testcase( f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4279:     u32 serial_type;",
          "4283:       serial_type = aKey1[idx1];",
          "4284:       testcase( serial_type==12 );",
          "4285:       if( serial_type>=10 ){",
          "",
          "[Removed Lines]",
          "4282:     if( pRhs->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "4297:     if( pRhs->flags & (MEM_Int|MEM_IntReal) ){",
          "4298:       testcase( pRhs->flags & MEM_Int );",
          "4299:       testcase( pRhs->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4624:     testcase( flags & MEM_Real );",
          "4625:     testcase( flags & MEM_Null );",
          "4626:     testcase( flags & MEM_Blob );",
          "4628:       assert( flags & MEM_Str );",
          "4629:       return vdbeRecordCompareString;",
          "4630:     }",
          "",
          "[Removed Lines]",
          "4627:     if( (flags & (MEM_Real|MEM_Null|MEM_Blob))==0 && p->pKeyInfo->aColl[0]==0 ){",
          "",
          "[Added Lines]",
          "4644:     if( (flags & (MEM_Real|MEM_IntReal|MEM_Null|MEM_Blob))==0",
          "4645:      && p->pKeyInfo->aColl[0]==0",
          "4646:     ){",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"sqliteInt.h\"",
          "19: #include \"vdbeInt.h\"",
          "21: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #define ISPOWEROF2(X)  (((X)&((X)-1))==0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   assert( (p->flags & MEM_Dyn)==0 || p->szMalloc==0 );",
          "43:   if( p->flags & MEM_Null ){",
          "",
          "[Removed Lines]",
          "41:   assert( (p->flags & (MEM_Int|MEM_Real))!=(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "46:   assert( ISPOWEROF2(p->flags & (MEM_Int|MEM_Real|MEM_IntReal)) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: #endif",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "",
          "[Removed Lines]",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "106:   assert( p->flags & (MEM_Int|MEM_Real|MEM_IntReal) );",
          "108:   if( p->flags & MEM_Int ){",
          "110:   }else if( p->flags & MEM_IntReal ){",
          "111:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   char *z;",
          "137:   int i, j, incr;",
          "138:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "141:   z = p->z;",
          "142:   i = j = 0;",
          "",
          "[Removed Lines]",
          "139:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "",
          "[Added Lines]",
          "144:   if( (p->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "376:   assert( !(pMem->flags&MEM_Zero) );",
          "377:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "379:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "380:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "378:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "383:   assert( pMem->flags&(MEM_Int|MEM_Real|MEM_IntReal) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "564:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "565:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "566:   flags = pMem->flags;",
          "568:     return pMem->u.i;",
          "569:   }else if( flags & MEM_Real ){",
          "570:     return doubleToInt64(pMem->u.r);",
          "",
          "[Removed Lines]",
          "567:   if( flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "572:   if( flags & (MEM_Int|MEM_IntReal) ){",
          "573:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "593:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "594:   if( pMem->flags & MEM_Real ){",
          "595:     return pMem->u.r;",
          "597:     return (double)pMem->u.i;",
          "598:   }else if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "599:     return memRealValue(pMem);",
          "",
          "[Removed Lines]",
          "596:   }else if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "602:   }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "603:     testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "610: int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){",
          "612:   if( pMem->flags & MEM_Null ) return ifNull;",
          "613:   return sqlite3VdbeRealValue(pMem)!=0.0;",
          "614: }",
          "",
          "[Removed Lines]",
          "611:   if( pMem->flags & MEM_Int ) return pMem->u.i!=0;",
          "",
          "[Added Lines]",
          "618:   testcase( pMem->flags & MEM_IntReal );",
          "619:   if( pMem->flags & (MEM_Int|MEM_IntReal) ) return pMem->u.i!=0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "691: int sqlite3VdbeMemNumerify(Mem *pMem){",
          "693:     int rc;",
          "694:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "695:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "692:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 ){",
          "",
          "[Added Lines]",
          "700:   testcase( pMem->flags & MEM_Int );",
          "701:   testcase( pMem->flags & MEM_Real );",
          "702:   testcase( pMem->flags & MEM_IntReal );",
          "703:   testcase( pMem->flags & MEM_Null );",
          "704:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "707:       }",
          "708:     }",
          "709:   }",
          "711:   pMem->flags &= ~(MEM_Str|MEM_Blob|MEM_Zero);",
          "712:   return SQLITE_OK;",
          "713: }",
          "",
          "[Removed Lines]",
          "710:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );",
          "",
          "[Added Lines]",
          "722:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "936:       u16 mFlags = pMem->flags & pX->flags & pX->mScopyFlags;",
          "938:       assert( (mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r );",
          "939:       assert( (mFlags&MEM_Str)==0  || (pMem->n==pX->n && pMem->z==pX->z) );",
          "940:       assert( (mFlags&MEM_Blob)==0  || sqlite3BlobCompare(pMem,pX)==0 );",
          "",
          "[Removed Lines]",
          "937:       assert( (mFlags&MEM_Int)==0 || pMem->u.i==pX->u.i );",
          "",
          "[Added Lines]",
          "949:       assert( (mFlags&(MEM_Int|MEM_IntReal))==0 || pMem->u.i==pX->u.i );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1497:     }else{",
          "1498:       sqlite3ValueApplyAffinity(pVal, affinity, SQLITE_UTF8);",
          "1499:     }",
          "1501:     if( enc!=SQLITE_UTF8 ){",
          "1502:       rc = sqlite3VdbeChangeEncoding(pVal, enc);",
          "1503:     }",
          "",
          "[Removed Lines]",
          "1500:     if( pVal->flags & (MEM_Int|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "[Added Lines]",
          "1512:     assert( (pVal->flags & MEM_IntReal)==0 );",
          "1513:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ){",
          "1514:       testcase( pVal->flags & MEM_Int );",
          "1515:       testcase( pVal->flags & MEM_Real );",
          "1516:       pVal->flags &= ~MEM_Str;",
          "1517:     }",
          "",
          "---------------"
        ],
        "src/vdbetrace.c||src/vdbetrace.c": [
          "File: src/vdbetrace.c -> src/vdbetrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:       pVar = &p->aVar[idx-1];",
          "131:       if( pVar->flags & MEM_Null ){",
          "132:         sqlite3_str_append(&out, \"NULL\", 4);",
          "134:         sqlite3_str_appendf(&out, \"%lld\", pVar->u.i);",
          "135:       }else if( pVar->flags & MEM_Real ){",
          "136:         sqlite3_str_appendf(&out, \"%!.15g\", pVar->u.r);",
          "",
          "[Removed Lines]",
          "133:       }else if( pVar->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "133:       }else if( pVar->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-05-03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Tests to exercise the MEM_IntReal representation of Mem objects.",
          "12: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set ::testprefix intreal",
          "17: sqlite3_create_function db",
          "18: do_execsql_test 100 {",
          "19:   SELECT intreal(5);",
          "20: } {5.0}",
          "21: do_execsql_test 110 {",
          "22:   SELECT intreal(5)=5, 6=intreal(6);",
          "23: } {1 1}",
          "24: do_execsql_test 120 {",
          "25:   SELECT intreal(7)=7.0, 8.0=intreal(8);",
          "26: } {1 1}",
          "27: do_execsql_test 130 {",
          "28:   SELECT typeof(intreal(9));",
          "29: } {real}",
          "30: do_execsql_test 140 {",
          "31:   SELECT 'a'||intreal(11)||'z';",
          "32: } {a11.0z}",
          "34: do_execsql_test 150 {",
          "35:   SELECT max(1.0,intreal(2),3.0), max(1,intreal(2),3);",
          "36: } {3.0 3}",
          "37: do_execsql_test 160 {",
          "38:   SELECT max(1.0,intreal(4),3.0), max(1,intreal(4),3);",
          "39: } {4.0 4.0}",
          "40: do_execsql_test 170 {",
          "41:   SELECT max(1.0,intreal(2),intreal(3),4.0),",
          "42:          max(1,intreal(2),intreal(3),4);",
          "43: } {4.0 4}",
          "44: do_execsql_test 180 {",
          "45:   SELECT max(1.0,intreal(5),intreal(3),4.0),",
          "46:          max(1,intreal(5),intreal(3),4);",
          "47: } {5.0 5.0}",
          "52: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "546738f855d8c7e01c1d04b287040938ffeed81c",
      "candidate_info": {
        "commit_hash": "546738f855d8c7e01c1d04b287040938ffeed81c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/546738f855d8c7e01c1d04b287040938ffeed81c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/nulls1.test"
        ],
        "message": "Further tests for the special null-handling on this branch.\n\nFossilOrigin-Name: 0dbbb51f4d39cafb01d625d65c12dcb232a9c1da7ed5a9397bf55cfea1b980d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 09d660ecde723fb30f3bb3684bbb7f95825d78da6a6f33ddf57846054cd563e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "202: }",
          "204: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: #-------------------------------------------------------------------------",
          "205: #",
          "206: do_execsql_test 6.0 {",
          "207:   CREATE TABLE t5(a, b, c);",
          "208:   WITH s(i) AS (",
          "209:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<200",
          "210:   )",
          "211:   INSERT INTO t5 SELECT i%2, CASE WHEN (i%10)==0 THEN NULL ELSE i END, i FROM s;",
          "212: }",
          "214: set res1 [db eval { SELECT a,b FROM t5 WHERE a=1 ORDER BY b NULLS LAST, c }]",
          "215: set res2 [db eval {",
          "216:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b DESC NULLS FIRST, c DESC",
          "217: }]",
          "219: do_execsql_test 6.1.1 {",
          "220:   CREATE INDEX t5ab ON t5(a, b, c);",
          "221:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b NULLS LAST, c;",
          "222: } $res1",
          "223: do_eqp_test 6.1.2 {",
          "224:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b NULLS LAST, c;",
          "225: } {",
          "226:   QUERY PLAN",
          "227:   `--SEARCH TABLE t5 USING COVERING INDEX t5ab (a=?)",
          "228: }",
          "229: do_execsql_test 6.2.1 {",
          "230:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b DESC NULLS FIRST, c DESC",
          "231: } $res2",
          "232: do_eqp_test 6.2.2 {",
          "233:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b DESC NULLS FIRST, c DESC",
          "234: } {",
          "235:   QUERY PLAN",
          "236:   `--SEARCH TABLE t5 USING COVERING INDEX t5ab (a=?)",
          "237: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}