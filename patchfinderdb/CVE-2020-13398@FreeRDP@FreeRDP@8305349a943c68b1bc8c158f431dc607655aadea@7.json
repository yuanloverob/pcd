{
  "cve_id": "CVE-2020-13398",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) write vulnerability has been detected in crypto_rsa_common in libfreerdp/crypto/crypto.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
  "patch_info": {
    "commit_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8305349a943c68b1bc8c158f431dc607655aadea",
    "files": [
      "libfreerdp/crypto/crypto.c"
    ],
    "message": "Fixed  GHSL-2020-102 heap overflow\n\n(cherry picked from commit 197b16cc15a12813c2e4fa2d6ae9cd9c4a57e581)",
    "before_after_code_files": [
      "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
      "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "96: static int crypto_rsa_common(const BYTE* input, int length, UINT32 key_length, const BYTE* modulus,",
      "97:                              const BYTE* exponent, int exponent_size, BYTE* output)",
      "98: {",
      "100:  int output_length = -1;",
      "107:  if (!input_reverse)",
      "108:   return -1;",
      "",
      "[Removed Lines]",
      "99:  BN_CTX* ctx;",
      "101:  BYTE* input_reverse;",
      "102:  BYTE* modulus_reverse;",
      "103:  BYTE* exponent_reverse;",
      "104:  BIGNUM *mod, *exp, *x, *y;",
      "105:  input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);",
      "",
      "[Added Lines]",
      "99:  BN_CTX* ctx = NULL;",
      "101:  BYTE* input_reverse = NULL;",
      "102:  BYTE* modulus_reverse = NULL;",
      "103:  BYTE* exponent_reverse = NULL;",
      "104:  BIGNUM* mod = NULL;",
      "105:  BIGNUM* exp = NULL;",
      "106:  BIGNUM* x = NULL;",
      "107:  BIGNUM* y = NULL;",
      "108:  size_t bufferSize = 2 * key_length + exponent_size;",
      "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
      "111:   return -1;",
      "113:  if (length > bufferSize)",
      "114:   bufferSize = length;",
      "116:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:  if (!(y = BN_new()))",
      "132:   goto fail_bn_y;",
      "138:  output_length = BN_bn2bin(y, output);",
      "139:  crypto_reverse(output, output_length);",
      "142:   memset(output + output_length, 0, key_length - output_length);",
      "144:  BN_free(y);",
      "145: fail_bn_y:",
      "146:  BN_clear_free(x);",
      "",
      "[Removed Lines]",
      "134:  BN_bin2bn(modulus_reverse, key_length, mod);",
      "135:  BN_bin2bn(exponent_reverse, exponent_size, exp);",
      "136:  BN_bin2bn(input_reverse, length, x);",
      "137:  BN_mod_exp(y, x, exp, mod, ctx);",
      "141:  if (output_length < (int)key_length)",
      "",
      "[Added Lines]",
      "145:  if (!BN_bin2bn(modulus_reverse, key_length, mod))",
      "146:   goto fail;",
      "148:  if (!BN_bin2bn(exponent_reverse, exponent_size, exp))",
      "149:   goto fail;",
      "150:  if (!BN_bin2bn(input_reverse, length, x))",
      "151:   goto fail;",
      "152:  if (BN_mod_exp(y, x, exp, mod, ctx) != 1)",
      "153:   goto fail;",
      "155:  if (output_length < 0)",
      "156:   goto fail;",
      "159:  if (output_length < key_length)",
      "162: fail:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6dfd915004b63e91c417f569af9f8516f7f942fc",
      "candidate_info": {
        "commit_hash": "6dfd915004b63e91c417f569af9f8516f7f942fc",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6dfd915004b63e91c417f569af9f8516f7f942fc",
        "files": [
          "libfreerdp/primitives/prim_colors.c"
        ],
        "message": "Fixed undefined behaviour\n\n(cherry picked from commit c15929d821ce99aa8c1069f790f4addbe9439593)",
        "before_after_code_files": [
          "libfreerdp/primitives/prim_colors.c||libfreerdp/primitives/prim_colors.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/primitives/prim_colors.c||libfreerdp/primitives/prim_colors.c": [
          "File: libfreerdp/primitives/prim_colors.c -> libfreerdp/primitives/prim_colors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   {",
          "51:    INT16 R, G, B;",
          "52:    const INT32 divisor = 16;",
          "54:    const INT32 Cb = (*pCb++);",
          "55:    const INT32 Cr = (*pCr++);",
          "60:    R = ((INT16)((CrR + Y) >> divisor) >> 5);",
          "61:    G = ((INT16)((Y - CbG - CrG) >> divisor) >> 5);",
          "62:    B = ((INT16)((CbB + Y) >> divisor) >> 5);",
          "",
          "[Removed Lines]",
          "53:    const INT32 Y = ((*pY++) + 4096) << divisor;",
          "56:    const INT32 CrR = Cr * (INT32)(1.402525f * (1 << divisor));",
          "57:    const INT32 CrG = Cr * (INT32)(0.714401f * (1 << divisor));",
          "58:    const INT32 CbG = Cb * (INT32)(0.343730f * (1 << divisor));",
          "59:    const INT32 CbB = Cb * (INT32)(1.769905f * (1 << divisor));",
          "",
          "[Added Lines]",
          "53:    const INT32 Y = (INT32)((UINT32)((*pY++) + 4096) << divisor);",
          "56:    const INT64 CrR = Cr * (INT64)(1.402525f * (1 << divisor)) * 1LL;",
          "57:    const INT64 CrG = Cr * (INT64)(0.714401f * (1 << divisor)) * 1LL;",
          "58:    const INT64 CbG = Cb * (INT64)(0.343730f * (1 << divisor)) * 1LL;",
          "59:    const INT64 CbB = Cb * (INT64)(1.769905f * (1 << divisor)) * 1LL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  {",
          "91:   for (x = 0; x < roi->width; x++)",
          "92:   {",
          "94:    const INT32 divisor = 16;",
          "96:    const INT32 Cb = (*pCb++);",
          "97:    const INT32 Cr = (*pCr++);",
          "105:    pRGB = (*writePixel)(pRGB, formatSize, DstFormat, CLIP(R), CLIP(G), CLIP(B), 0xFF);",
          "106:   }",
          "",
          "[Removed Lines]",
          "93:    INT16 R, G, B;",
          "95:    const INT32 Y = ((*pY++) + 4096) << divisor;",
          "98:    const INT32 CrR = Cr * (INT32)(1.402525f * (1 << divisor));",
          "99:    const INT32 CrG = Cr * (INT32)(0.714401f * (1 << divisor));",
          "100:    const INT32 CbG = Cb * (INT32)(0.343730f * (1 << divisor));",
          "101:    const INT32 CbB = Cb * (INT32)(1.769905f * (1 << divisor));",
          "102:    R = ((INT16)((CrR + Y) >> divisor) >> 5);",
          "103:    G = ((INT16)((Y - CbG - CrG) >> divisor) >> 5);",
          "104:    B = ((INT16)((CbB + Y) >> divisor) >> 5);",
          "",
          "[Added Lines]",
          "93:    INT64 R, G, B;",
          "95:    const INT32 Y = (INT32)((UINT32)((*pY++) + 4096) << divisor);",
          "98:    const INT64 CrR = Cr * (INT64)(1.402525f * (1 << divisor)) * 1LL;",
          "99:    const INT64 CrG = Cr * (INT64)(0.714401f * (1 << divisor)) * 1LL;",
          "100:    const INT64 CbG = Cb * (INT64)(0.343730f * (1 << divisor)) * 1LL;",
          "101:    const INT64 CbB = Cb * (INT64)(1.769905f * (1 << divisor)) * 1LL;",
          "102:    R = (INT64)((CrR + Y) >> (divisor + 5));",
          "103:    G = (INT64)((Y - CbG - CrG) >> (divisor + 5));",
          "104:    B = (INT64)((CbB + Y) >> (divisor + 5));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:    INT32 y = (INT32)(*yptr++);",
          "171:    INT32 cb = (INT32)(*cbptr++);",
          "172:    INT32 cr = (INT32)(*crptr++);",
          "",
          "[Removed Lines]",
          "173:    INT32 r, g, b;",
          "",
          "[Added Lines]",
          "173:    INT64 r, g, b;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "194:    y = (y + 4096) << 16;",
          "195:    r = y + cr * 91947;",
          "196:    g = y - cb * 22544 - cr * 46792;",
          "197:    b = y + cb * 115998;",
          "",
          "[Added Lines]",
          "194:    y = (INT32)((UINT32)(y + 4096) << 16);",
          "195:    r = y + cr * 91947LL;",
          "196:    g = y - cb * 22544LL - cr * 46792LL;",
          "197:    b = y + cb * 115998LL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f89e23542c6218c89c80f090f4438d02ebc5b39",
      "candidate_info": {
        "commit_hash": "0f89e23542c6218c89c80f090f4438d02ebc5b39",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0f89e23542c6218c89c80f090f4438d02ebc5b39",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed #6148: multiple ceritificate purposes\n\nOpenSSL certificate verification can only check a single purpose.\nRun the checks with all allowed purposes and accept any.\n\n(cherry picked from commit f3063a589d908a087a295b9217bc5fa34a80fb36)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ],
          "candidate": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798: BOOL x509_verify_certificate(CryptoCert cert, const char* certificate_store_path)",
          "799: {",
          "800:  X509_STORE_CTX* csc;",
          "801:  BOOL status = FALSE;",
          "802:  X509_STORE* cert_ctx = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:  size_t i;",
          "801:  const int purposes[3] = { X509_PURPOSE_SSL_SERVER, X509_PURPOSE_SSL_CLIENT, X509_PURPOSE_ANY };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:   X509_LOOKUP_add_dir(lookup, certificate_store_path, X509_FILETYPE_PEM);",
          "832:  }",
          "839:  X509_STORE_set_flags(cert_ctx, 0);",
          "851:  X509_STORE_free(cert_ctx);",
          "852: end:",
          "853:  return status;",
          "",
          "[Removed Lines]",
          "834:  csc = X509_STORE_CTX_new();",
          "836:  if (csc == NULL)",
          "837:   goto end;",
          "841:  if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "842:   goto end;",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_ANY);",
          "845:  X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "847:  if (X509_verify_cert(csc) == 1)",
          "848:   status = TRUE;",
          "850:  X509_STORE_CTX_free(csc);",
          "",
          "[Added Lines]",
          "838:  for (i = 0; i < ARRAYSIZE(purposes); i++)",
          "839:  {",
          "840:   int rc = -1;",
          "841:   int purpose = purposes[i];",
          "842:   csc = X509_STORE_CTX_new();",
          "844:   if (csc == NULL)",
          "845:    goto skip;",
          "846:   if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "847:    goto skip;",
          "849:   X509_STORE_CTX_set_purpose(csc, purpose);",
          "850:   X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "852:   rc = X509_verify_cert(csc);",
          "853:  skip:",
          "854:   X509_STORE_CTX_free(csc);",
          "855:   if (rc == 1)",
          "856:   {",
          "857:    status = TRUE;",
          "858:    break;",
          "859:   }",
          "860:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd156de828049b7673fdeb9c261f915cc5bb563c",
      "candidate_info": {
        "commit_hash": "dd156de828049b7673fdeb9c261f915cc5bb563c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/dd156de828049b7673fdeb9c261f915cc5bb563c",
        "files": [
          "client/X11/xf_client.c",
          "client/X11/xfreerdp.h"
        ],
        "message": "Fixed NULL access of context struct on screen draw\n\nAdded a log message to fix occurances later on.\n\n(cherry picked from commit cfea3fc6ed01aa33c1a935da42572577ba832feb)",
        "before_after_code_files": [
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "client/X11/xfreerdp.h||client/X11/xfreerdp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: }",
          "227: {",
          "228:  if (w == 0 || h == 0)",
          "229:  {",
          "230:   WLog_WARN(TAG, \"invalid width and/or height specified: w=%d h=%d\", w, h);",
          "",
          "[Removed Lines]",
          "226: void xf_draw_screen(xfContext* xfc, int x, int y, int w, int h)",
          "",
          "[Added Lines]",
          "226: void xf_draw_screen_(xfContext* xfc, int x, int y, int w, int h, const char* fkt, const char* file,",
          "227:                      int line)",
          "229:  if (!xfc)",
          "230:  {",
          "231:   WLog_DBG(TAG, \"[%s] called from [%s] xfc=%p\", __FUNCTION__, fkt, xfc);",
          "232:   return;",
          "233:  }",
          "",
          "---------------"
        ],
        "client/X11/xfreerdp.h||client/X11/xfreerdp.h": [
          "File: client/X11/xfreerdp.h -> client/X11/xfreerdp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: void xf_unlock_x11_(xfContext* xfc, const char* fkt);",
          "309: BOOL xf_picture_transform_required(xfContext* xfc);",
          "312: FREERDP_API DWORD xf_exit_code_from_disconnect_reason(DWORD reason);",
          "",
          "[Removed Lines]",
          "310: void xf_draw_screen(xfContext* xfc, int x, int y, int w, int h);",
          "",
          "[Added Lines]",
          "311: #define xf_draw_screen(_xfc, _x, _y, _w, _h) \\",
          "312:  xf_draw_screen_((_xfc), (_x), (_y), (_w), (_h), __FUNCTION__, __FILE__, __LINE__)",
          "313: void xf_draw_screen_(xfContext* xfc, int x, int y, int w, int h, const char* fkt, const char* file,",
          "314:                      int line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "819aa2a1645be3a28857023cf167f23f8a5e6038",
      "candidate_info": {
        "commit_hash": "819aa2a1645be3a28857023cf167f23f8a5e6038",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/819aa2a1645be3a28857023cf167f23f8a5e6038",
        "files": [
          "winpr/libwinpr/sspi/sspi_winpr.c"
        ],
        "message": "Fixed BehaviorSanitizer warnings\n\n(cherry picked from commit 0d28390319025c86e7e9d7cc776d88ef24f9db0e)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c": [
          "File: winpr/libwinpr/sspi/sspi_winpr.c -> winpr/libwinpr/sspi/sspi_winpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   passwordLength *= 2;",
          "242:  }",
          "247:  free(credentials->identity.User);",
          "248:  free(credentials->identity.Domain);",
          "249:  free(credentials->identity.Password);",
          "",
          "[Removed Lines]",
          "244:  memset(credentials->identity.User, 0, userLength);",
          "245:  memset(credentials->identity.Domain, 0, domainLength);",
          "246:  memset(credentials->identity.Password, 0, passwordLength);",
          "",
          "[Added Lines]",
          "244:  if (credentials->identity.User)",
          "245:   memset(credentials->identity.User, 0, userLength);",
          "246:  if (credentials->identity.Domain)",
          "247:   memset(credentials->identity.Domain, 0, domainLength);",
          "248:  if (credentials->identity.Password)",
          "249:   memset(credentials->identity.Password, 0, passwordLength);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e28385fbb5efd52dcad58e4acb623f1bd94a640",
      "candidate_info": {
        "commit_hash": "2e28385fbb5efd52dcad58e4acb623f1bd94a640",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2e28385fbb5efd52dcad58e4acb623f1bd94a640",
        "files": [
          "libfreerdp/codec/mppc.c"
        ],
        "message": "Fixed history buffer reset.\n\n(cherry picked from commit ccc9cbef2d5d0d9f5cf5ec7621f71bed33f41aba)",
        "before_after_code_files": [
          "libfreerdp/codec/mppc.c||libfreerdp/codec/mppc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/mppc.c||libfreerdp/codec/mppc.c": [
          "File: libfreerdp/codec/mppc.c -> libfreerdp/codec/mppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:  ZeroMemory(&(mppc->MatchBuffer), sizeof(mppc->MatchBuffer));",
          "774:  if (flush)",
          "775:   mppc->HistoryOffset = mppc->HistoryBufferSize + 1;",
          "776:  else",
          "777:   mppc->HistoryOffset = 0;",
          "779:  mppc->HistoryPtr = &(mppc->HistoryBuffer[mppc->HistoryOffset]);",
          "780: }",
          "782: MPPC_CONTEXT* mppc_context_new(DWORD CompressionLevel, BOOL Compressor)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:  {",
          "777:   mppc->HistoryPtr = mppc->HistoryBuffer;",
          "778:  }",
          "780:  {",
          "783:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}