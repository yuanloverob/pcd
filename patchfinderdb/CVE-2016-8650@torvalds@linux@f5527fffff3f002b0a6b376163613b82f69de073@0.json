{
  "cve_id": "CVE-2016-8650",
  "cve_desc": "The mpi_powm function in lib/mpi/mpi-pow.c in the Linux kernel through 4.8.11 does not ensure that memory is allocated for limb data, which allows local users to cause a denial of service (stack memory corruption and panic) via an add_key system call for an RSA key with a zero exponent.",
  "repo": "torvalds/linux",
  "patch_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
  "patch_info": {
    "commit_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f5527fffff3f002b0a6b376163613b82f69de073",
    "files": [
      "lib/mpi/mpi-pow.c"
    ],
    "message": "mpi: Fix NULL ptr dereference in mpi_powm() [ver #3]\n\nThis fixes CVE-2016-8650.\n\nIf mpi_powm() is given a zero exponent, it wants to immediately return\neither 1 or 0, depending on the modulus.  However, if the result was\ninitalised with zero limb space, no limbs space is allocated and a\nNULL-pointer exception ensues.\n\nFix this by allocating a minimal amount of limb space for the result when\nthe 0-exponent case when the result is 1 and not touching the limb space\nwhen the result is 0.\n\nThis affects the use of RSA keys and X.509 certificates that carry them.\n\nBUG: unable to handle kernel NULL pointer dereference at           (null)\nIP: [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nPGD 0\nOops: 0002 [#1] SMP\nModules linked in:\nCPU: 3 PID: 3014 Comm: keyctl Not tainted 4.9.0-rc6-fscache+ #278\nHardware name: ASUS All Series/H97-PLUS, BIOS 2306 10/09/2014\ntask: ffff8804011944c0 task.stack: ffff880401294000\nRIP: 0010:[<ffffffff8138ce5d>]  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nRSP: 0018:ffff880401297ad8  EFLAGS: 00010212\nRAX: 0000000000000000 RBX: ffff88040868bec0 RCX: ffff88040868bba0\nRDX: ffff88040868b260 RSI: ffff88040868bec0 RDI: ffff88040868bee0\nRBP: ffff880401297ba8 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000047 R11: ffffffff8183b210 R12: 0000000000000000\nR13: ffff8804087c7600 R14: 000000000000001f R15: ffff880401297c50\nFS:  00007f7a7918c700(0000) GS:ffff88041fb80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000000 CR3: 0000000401250000 CR4: 00000000001406e0\nStack:\n ffff88040868bec0 0000000000000020 ffff880401297b00 ffffffff81376cd4\n 0000000000000100 ffff880401297b10 ffffffff81376d12 ffff880401297b30\n ffffffff81376f37 0000000000000100 0000000000000000 ffff880401297ba8\nCall Trace:\n [<ffffffff81376cd4>] ? __sg_page_iter_next+0x43/0x66\n [<ffffffff81376d12>] ? sg_miter_get_next_page+0x1b/0x5d\n [<ffffffff81376f37>] ? sg_miter_next+0x17/0xbd\n [<ffffffff8138ba3a>] ? mpi_read_raw_from_sgl+0xf2/0x146\n [<ffffffff8132a95c>] rsa_verify+0x9d/0xee\n [<ffffffff8132acca>] ? pkcs1pad_sg_set_buf+0x2e/0xbb\n [<ffffffff8132af40>] pkcs1pad_verify+0xc0/0xe1\n [<ffffffff8133cb5e>] public_key_verify_signature+0x1b0/0x228\n [<ffffffff8133d974>] x509_check_for_self_signed+0xa1/0xc4\n [<ffffffff8133cdde>] x509_cert_parse+0x167/0x1a1\n [<ffffffff8133d609>] x509_key_preparse+0x21/0x1a1\n [<ffffffff8133c3d7>] asymmetric_key_preparse+0x34/0x61\n [<ffffffff812fc9f3>] key_create_or_update+0x145/0x399\n [<ffffffff812fe227>] SyS_add_key+0x154/0x19e\n [<ffffffff81001c2b>] do_syscall_64+0x80/0x191\n [<ffffffff816825e4>] entry_SYSCALL64_slow_path+0x25/0x25\nCode: 56 41 55 41 54 53 48 81 ec a8 00 00 00 44 8b 71 04 8b 42 04 4c 8b 67 18 45 85 f6 89 45 80 0f 84 b4 06 00 00 85 c0 75 2f 41 ff ce <49> c7 04 24 01 00 00 00 b0 01 75 0b 48 8b 41 18 48 83 38 01 0f\nRIP  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\n RSP <ffff880401297ad8>\nCR2: 0000000000000000\n---[ end trace d82015255d4a5d8d ]---\n\nBasically, this is a backport of a libgcrypt patch:\n\n\thttp://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=patch;h=6e1adb05d290aeeb1c230c763970695f4a538526\n\nFixes: cdec9cb5167a (\"crypto: GnuPG based MPI lib - source files (part 1)\")\nSigned-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>\ncc: linux-ima-devel@lists.sourceforge.net\ncc: stable@vger.kernel.org\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
    "before_after_code_files": [
      "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c"
    ]
  },
  "patch_diff": {
    "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c": [
      "File: lib/mpi/mpi-pow.c -> lib/mpi/mpi-pow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:  if (!esize) {",
      "68:   res->nlimbs = (msize == 1 && mod->d[0] == 1) ? 0 : 1;",
      "69:   res->sign = 0;",
      "70:   goto leave;",
      "71:  }",
      "",
      "[Removed Lines]",
      "67:   rp[0] = 1;",
      "",
      "[Added Lines]",
      "68:   if (res->nlimbs) {",
      "69:    if (mpi_resize(res, 1) < 0)",
      "70:     goto enomem;",
      "71:    rp = res->d;",
      "72:    rp[0] = 1;",
      "73:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "741dc7bf1c7c7d93b853bb55efe77baa27e1b0a9",
      "candidate_info": {
        "commit_hash": "741dc7bf1c7c7d93b853bb55efe77baa27e1b0a9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/741dc7bf1c7c7d93b853bb55efe77baa27e1b0a9",
        "files": [
          "arch/parisc/kernel/cache.c",
          "arch/parisc/kernel/setup.c"
        ],
        "message": "parisc: Fix races in parisc_setup_cache_timing()\n\nHelge reported to me the following startup crash:\n\n[    0.000000] Linux version 4.8.0-1-parisc64-smp (debian-kernel@lists.debian.org) (gcc version 5.4.1 20161019 (GCC) ) #1 SMP Debian 4.8.7-1 (2016-11-13)\n[    0.000000] The 64-bit Kernel has started...\n[    0.000000] Kernel default page size is 4 KB. Huge pages enabled with 1 MB physical and 2 MB virtual size.\n[    0.000000] Determining PDC firmware type: System Map.\n[    0.000000] model 9000/785/J5000\n[    0.000000] Total Memory: 2048 MB\n[    0.000000] Memory: 2018528K/2097152K available (9272K kernel code, 3053K rwdata, 1319K rodata, 1024K init, 840K bss, 78624K reserved, 0K cma-reserved)\n[    0.000000] virtual kernel memory layout:\n[    0.000000]     vmalloc : 0x0000000000008000 - 0x000000003f000000   (1007 MB)\n[    0.000000]     memory  : 0x0000000040000000 - 0x00000000c0000000   (2048 MB)\n[    0.000000]       .init : 0x0000000040100000 - 0x0000000040200000   (1024 kB)\n[    0.000000]       .data : 0x0000000040b0e000 - 0x0000000040f533e0   (4372 kB)\n[    0.000000]       .text : 0x0000000040200000 - 0x0000000040b0e000   (9272 kB)\n[    0.768910] Brought up 1 CPUs\n[    0.992465] NET: Registered protocol family 16\n[    2.429981] Releasing cpu 1 now, hpa=fffffffffffa2000\n[    2.635751] CPU(s): 2 out of 2 PA8500 (PCX-W) at 440.000000 MHz online\n[    2.726692] Setting cache flush threshold to 1024 kB\n[    2.729932] Not-handled unaligned insn 0x43ffff80\n[    2.798114] Setting TLB flush threshold to 140 kB\n[    2.928039] Unaligned handler failed, ret = -1\n[    3.000419]       _______________________________\n[    3.000419]      < Your System ate a SPARC! Gah! >\n[    3.000419]       -------------------------------\n[    3.000419]              \\   ^__^\n[    3.000419]                  (__)\\       )\\/\\\n[    3.000419]                   U  ||----w |\n[    3.000419]                      ||     ||\n[    9.340055] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.8.0-1-parisc64-smp #1 Debian 4.8.7-1\n[    9.448082] task: 00000000bfd48060 task.stack: 00000000bfd50000\n[    9.528040]\n[   10.760029] IASQ: 0000000000000000 0000000000000000 IAOQ: 000000004025d154 000000004025d158\n[   10.868052]  IIR: 43ffff80    ISR: 0000000000340000  IOR: 000001ff54150960\n[   10.960029]  CPU:        1   CR30: 00000000bfd50000 CR31: 0000000011111111\n[   11.052057]  ORIG_R28: 000000004021e3b4\n[   11.100045]  IAOQ[0]: irq_exit+0x94/0x120\n[   11.152062]  IAOQ[1]: irq_exit+0x98/0x120\n[   11.208031]  RP(r2): irq_exit+0xb8/0x120\n[   11.256074] Backtrace:\n[   11.288067]  [<00000000402cd944>] cpu_startup_entry+0x1e4/0x598\n[   11.368058]  [<0000000040109528>] smp_callin+0x2c0/0x2f0\n[   11.436308]  [<00000000402b53fc>] update_curr+0x18c/0x2d0\n[   11.508055]  [<00000000402b73b8>] dequeue_entity+0x2c0/0x1030\n[   11.584040]  [<00000000402b3cc0>] set_next_entity+0x80/0xd30\n[   11.660069]  [<00000000402c1594>] pick_next_task_fair+0x614/0x720\n[   11.740085]  [<000000004020dd34>] __schedule+0x394/0xa60\n[   11.808054]  [<000000004020e488>] schedule+0x88/0x118\n[   11.876039]  [<0000000040283d3c>] rescuer_thread+0x4d4/0x5b0\n[   11.948090]  [<000000004028fc4c>] kthread+0x1ec/0x248\n[   12.016053]  [<0000000040205020>] end_fault_vector+0x20/0xc0\n[   12.092239]  [<00000000402050c0>] _switch_to_ret+0x0/0xf40\n[   12.164044]\n[   12.184036] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.8.0-1-parisc64-smp #1 Debian 4.8.7-1\n[   12.244040] Backtrace:\n[   12.244040]  [<000000004021c480>] show_stack+0x68/0x80\n[   12.244040]  [<00000000406f332c>] dump_stack+0xec/0x168\n[   12.244040]  [<000000004021c74c>] die_if_kernel+0x25c/0x430\n[   12.244040]  [<000000004022d320>] handle_unaligned+0xb48/0xb50\n[   12.244040]\n[   12.632066] ---[ end trace 9ca05a7215c7bbb2 ]---\n[   12.692036] Kernel panic - not syncing: Attempted to kill the idle task!\n\nWe have the insn 0x43ffff80 in IIR but from IAOQ we should have:\n   4025d150:   0f f3 20 df     ldd,s r19(r31),r31\n   4025d154:   0f 9f 00 9c     ldw r31(ret0),ret0\n   4025d158:   bf 80 20 58     cmpb,*<> r0,ret0,4025d18c <irq_exit+0xcc>\n\nCpu0 has just completed running parisc_setup_cache_timing:\n\n[    2.429981] Releasing cpu 1 now, hpa=fffffffffffa2000\n[    2.635751] CPU(s): 2 out of 2 PA8500 (PCX-W) at 440.000000 MHz online\n[    2.726692] Setting cache flush threshold to 1024 kB\n[    2.729932] Not-handled unaligned insn 0x43ffff80\n[    2.798114] Setting TLB flush threshold to 140 kB\n[    2.928039] Unaligned handler failed, ret = -1\n\nFrom the backtrace, cpu1 is in smp_callin:\n\nvoid __init smp_callin(void)\n{\n       int slave_id = cpu_now_booting;\n\n       smp_cpu_init(slave_id);\n       preempt_disable();\n\n       flush_cache_all_local(); /* start with known state */\n       flush_tlb_all_local(NULL);\n\n       local_irq_enable();  /* Interrupts have been off until now */\n\n       cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);\n\nSo, it has just flushed its caches and the TLB. It would seem either the\nflushes in parisc_setup_cache_timing or smp_callin have corrupted kernel\nmemory.\n\nThe attached patch reworks parisc_setup_cache_timing to remove the races\nin setting the cache and TLB flush thresholds. It also corrects the\nnumber of bytes flushed in the TLB calculation.\n\nThe patch flushes the cache and TLB on cpu0 before starting the\nsecondary processors so that they are started from a known state.\n\nTested with a few reboots on c8000.\n\nSigned-off-by: John David Anglin  <dave.anglin@bell.net>\nCc: <stable@vger.kernel.org> # v3.18+\nSigned-off-by: Helge Deller <deller@gmx.de>",
        "before_after_code_files": [
          "arch/parisc/kernel/cache.c||arch/parisc/kernel/cache.c",
          "arch/parisc/kernel/setup.c||arch/parisc/kernel/setup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/parisc/kernel/cache.c||arch/parisc/kernel/cache.c": [
          "File: arch/parisc/kernel/cache.c -> arch/parisc/kernel/cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369: {",
          "370:  unsigned long rangetime, alltime;",
          "371:  unsigned long size, start;",
          "373:  alltime = mfctl(16);",
          "374:  flush_data_cache();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:  unsigned long threshold;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:  printk(KERN_DEBUG \"Whole cache flush %lu cycles, flushing %lu bytes %lu cycles\\n\",",
          "383:   alltime, size, rangetime);",
          "396:   parisc_cache_flush_threshold/1024);",
          "",
          "[Removed Lines]",
          "386:  parisc_cache_flush_threshold = size * alltime / rangetime;",
          "388:  parisc_cache_flush_threshold = L1_CACHE_ALIGN(parisc_cache_flush_threshold);",
          "389:  if (!parisc_cache_flush_threshold)",
          "390:   parisc_cache_flush_threshold = FLUSH_THRESHOLD;",
          "392:  if (parisc_cache_flush_threshold > cache_info.dc_size)",
          "393:   parisc_cache_flush_threshold = cache_info.dc_size;",
          "395:  printk(KERN_INFO \"Setting cache flush threshold to %lu kB\\n\",",
          "",
          "[Added Lines]",
          "386:  threshold = L1_CACHE_ALIGN(size * alltime / rangetime);",
          "387:  if (threshold > cache_info.dc_size)",
          "388:   threshold = cache_info.dc_size;",
          "389:  if (threshold)",
          "390:   parisc_cache_flush_threshold = threshold;",
          "391:  printk(KERN_INFO \"Cache flush threshold set to %lu KiB\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:  flush_tlb_all();",
          "402:  alltime = mfctl(16) - alltime;",
          "405:  start = (unsigned long) _text;",
          "406:  rangetime = mfctl(16);",
          "407:  while (start < (unsigned long) _end) {",
          "",
          "[Removed Lines]",
          "404:  size = PAGE_SIZE;",
          "",
          "[Added Lines]",
          "400:  size = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "414:  printk(KERN_DEBUG \"Whole TLB flush %lu cycles, flushing %lu bytes %lu cycles\\n\",",
          "415:   alltime, size, rangetime);",
          "424:   parisc_tlb_flush_threshold/1024);",
          "425: }",
          "",
          "[Removed Lines]",
          "417:  parisc_tlb_flush_threshold = size * alltime / rangetime;",
          "418:  parisc_tlb_flush_threshold *= num_online_cpus();",
          "419:  parisc_tlb_flush_threshold = PAGE_ALIGN(parisc_tlb_flush_threshold);",
          "420:  if (!parisc_tlb_flush_threshold)",
          "421:   parisc_tlb_flush_threshold = FLUSH_TLB_THRESHOLD;",
          "423:  printk(KERN_INFO \"Setting TLB flush threshold to %lu kB\\n\",",
          "",
          "[Added Lines]",
          "413:  threshold = PAGE_ALIGN(num_online_cpus() * size * alltime / rangetime);",
          "414:  if (threshold)",
          "415:   parisc_tlb_flush_threshold = threshold;",
          "416:  printk(KERN_INFO \"TLB flush threshold set to %lu KiB\\n\",",
          "",
          "---------------"
        ],
        "arch/parisc/kernel/setup.c||arch/parisc/kernel/setup.c": [
          "File: arch/parisc/kernel/setup.c -> arch/parisc/kernel/setup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:  pdc_stable_write(0x40, &osid, sizeof(osid));",
          "337:  processor_init();",
          "338: #ifdef CONFIG_SMP",
          "339:  pr_info(\"CPU(s): %d out of %d %s at %d.%06d MHz online\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:  flush_cache_all_local();",
          "339:  flush_tlb_all_local(NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "747e5a5ff2a2ae84715c33d6679ac3c5220a3aec",
      "candidate_info": {
        "commit_hash": "747e5a5ff2a2ae84715c33d6679ac3c5220a3aec",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/747e5a5ff2a2ae84715c33d6679ac3c5220a3aec",
        "files": [
          "drivers/gpu/drm/arm/hdlcd_drv.c"
        ],
        "message": "drm: hdlcd: Fix cleanup order\n\nIf hdlcd_drm_bind() fails at drm_fbdev_cma_init(), its cleanup will call\ndrm_mode_config_cleanup() as if to balance drm_mode_config_reset(). The\nnet result is that drm_connector_cleanup() will clean up the active\nconnectors long before component_unbind_all() gets called, so when the\nconnector later tries to clean up itself after being unbound, Bad Things\ncan happen:\n\n[    4.121888] Unable to handle kernel NULL pointer dereference at\nvirtual address 00000000\n[    4.129951] pgd = ffffff80091e0000\n[    4.133345] [00000000] *pgd=00000009ffffe003, *pud=00000009ffffe003,\n*pmd=0000000000000000\n[    4.141613] Internal error: Oops: 96000005 [#1] PREEMPT SMP\n[    4.147144] Modules linked in:\n[    4.150188] CPU: 0 PID: 122 Comm: kworker/u12:2 Not tainted\n4.8.0-rc2+ #989\n[    4.157097] Hardware name: ARM Juno development board (r1) (DT)\n[    4.162981] Workqueue: deferwq deferred_probe_work_func\n[    4.168173] task: ffffffc975d93200 task.stack: ffffffc975dac000\n[    4.174055] PC is at drm_connector_cleanup+0x58/0x1c0\n[    4.179074] LR is at tda998x_unbind+0x24/0x40\n[    4.183401] pc : [<ffffff80084c46f0>] lr : [<ffffff800850414c>]\npstate: 00000045\n[    4.190750] sp : ffffffc975dafa10\n[    4.194041] x29: ffffffc975dafa10 x28: ffffffc9768152a8\n[    4.199325] x27: ffffffc97ff46450 x26: ffffff8008d99000\n[    4.204608] x25: dead000000000100 x24: dead000000000200\n[    4.209891] x23: ffffffc976bf91e8 x22: 0000000000000000\n[    4.215172] x21: ffffffc976bf9170 x20: ffffffc976bf9170\n[    4.220454] x19: ffffffc976bf9018 x18: 0000000000000000\n[    4.225737] x17: 0000000074ce71ee x16: 000000008ff5d35f\n[    4.231019] x15: ffffffc97681e91c x14: ffffffffffffffff\n[    4.236301] x13: ffffffc97681e185 x12: 0000000000000038\n[    4.241583] x11: 0101010101010101 x10: 0000000000000000\n[    4.246866] x9 : 0000000040000000 x8 : 0000000000210d00\n[    4.252148] x7 : ffffffc97fea8c00 x6 : 000000000000001b\n[    4.257430] x5 : ffffff80084b7b8c x4 : 0000000000000080\n[    4.262712] x3 : ffffff8008504128 x2 : ffffffc975df3800\n[    4.267993] x1 : 0000000000000000 x0 : 0000000000000000\n...\n[    4.750937] [<ffffff80084c46f0>] drm_connector_cleanup+0x58/0x1c0\n[    4.756990] [<ffffff800850414c>] tda998x_unbind+0x24/0x40\n[    4.762354] [<ffffff8008507918>] component_unbind.isra.4+0x28/0x50\n[    4.768492] [<ffffff8008507a0c>] component_unbind_all+0xcc/0xd8\n[    4.774373] [<ffffff80084d5adc>] hdlcd_drm_bind+0x234/0x418\n[    4.779909] [<ffffff8008507b58>] try_to_bring_up_master+0x140/0x1a0\n[    4.786133] [<ffffff8008507c50>] component_add+0x98/0x170\n[    4.791496] [<ffffff8008504b90>] tda998x_probe+0x18/0x20\n[    4.796774] [<ffffff80086bf914>] i2c_device_probe+0x164/0x258\n[    4.802481] [<ffffff800850d094>] driver_probe_device+0x204/0x2b0\n[    4.808447] [<ffffff800850d28c>] __device_attach_driver+0x9c/0xf8\n[    4.814498] [<ffffff800850b108>] bus_for_each_drv+0x58/0x98\n[    4.820033] [<ffffff800850cd64>] __device_attach+0xc4/0x138\n[    4.825567] [<ffffff800850d338>] device_initial_probe+0x10/0x18\n[    4.831446] [<ffffff800850c124>] bus_probe_device+0x94/0xa0\n[    4.836981] [<ffffff800850c5b0>] deferred_probe_work_func+0x78/0xb0\n[    4.843207] [<ffffff80080d2998>] process_one_work+0x118/0x378\n[    4.848914] [<ffffff80080d2c40>] worker_thread+0x48/0x498\n[    4.854276] [<ffffff80080d8918>] kthread+0xd0/0xe8\n[    4.859036] [<ffffff8008082e90>] ret_from_fork+0x10/0x40\n[    4.864314] Code: f2fbd5b9 f2fbd5b8 f8478ee0 eb17001f (f9400013)\n[    4.870472] ---[ end trace a643cfe4ce1d838b ]---\n\nFix this by moving the drm_mode_config_cleanup() much later such that it\ncorrectly balances drm_mode_config_init().\n\nSuggested-by: Russell King <linux@armlinux.org.uk>\nSigned-off-by: Robin Murphy <robin.murphy@arm.com>\nSigned-off-by: Liviu Dudau <Liviu.Dudau@arm.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/arm/hdlcd_drv.c||drivers/gpu/drm/arm/hdlcd_drv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/arm/hdlcd_drv.c||drivers/gpu/drm/arm/hdlcd_drv.c": [
          "File: drivers/gpu/drm/arm/hdlcd_drv.c -> drivers/gpu/drm/arm/hdlcd_drv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: err_fbdev:",
          "377:  drm_kms_helper_poll_fini(drm);",
          "379:  drm_vblank_cleanup(drm);",
          "380: err_vblank:",
          "381:  pm_runtime_disable(drm->dev);",
          "",
          "[Removed Lines]",
          "378:  drm_mode_config_cleanup(drm);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:  drm_irq_uninstall(drm);",
          "388:  of_reserved_mem_device_release(drm->dev);",
          "389: err_free:",
          "390:  dev_set_drvdata(dev, NULL);",
          "391:  drm_dev_unref(drm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:  drm_mode_config_cleanup(drm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18ae68fff392e445af3c2d8be9bef8a16e1c72a7",
      "candidate_info": {
        "commit_hash": "18ae68fff392e445af3c2d8be9bef8a16e1c72a7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/18ae68fff392e445af3c2d8be9bef8a16e1c72a7",
        "files": [
          "drivers/net/wireless/ath/ath10k/wmi-ops.h"
        ],
        "message": "ath10k: fix null deref on wmi-tlv when trying spectral scan\n\nWMI ops wrappers did not properly check for null\nfunction pointers for spectral scan. This caused\nnull dereference crash with WMI-TLV based firmware\nwhich doesn't implement spectral scan.\n\nThe crash could be triggered with:\n\n  ip link set dev wlan0 up\n  echo background > /sys/kernel/debug/ieee80211/phy0/ath10k/spectral_scan_ctl\n\nThe crash looked like this:\n\n  [  168.031989] BUG: unable to handle kernel NULL pointer dereference at           (null)\n  [  168.037406] IP: [<          (null)>]           (null)\n  [  168.040395] PGD cdd4067 PUD fa0f067 PMD 0\n  [  168.043303] Oops: 0010 [#1] SMP\n  [  168.045377] Modules linked in: ath10k_pci(O) ath10k_core(O) ath mac80211 cfg80211 [last unloaded: cfg80211]\n  [  168.051560] CPU: 1 PID: 1380 Comm: bash Tainted: G        W  O    4.8.0 #78\n  [  168.054336] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.7.5-20140531_083030-gandalf 04/01/2014\n  [  168.059183] task: ffff88000c460c00 task.stack: ffff88000d4bc000\n  [  168.061736] RIP: 0010:[<0000000000000000>]  [<          (null)>]           (null)\n  ...\n  [  168.100620] Call Trace:\n  [  168.101910]  [<ffffffffa03b9566>] ? ath10k_spectral_scan_config+0x96/0x200 [ath10k_core]\n  [  168.104871]  [<ffffffff811386e2>] ? filemap_fault+0xb2/0x4a0\n  [  168.106696]  [<ffffffffa03b97e6>] write_file_spec_scan_ctl+0x116/0x280 [ath10k_core]\n  [  168.109618]  [<ffffffff812da3a1>] full_proxy_write+0x51/0x80\n  [  168.111443]  [<ffffffff811957b8>] __vfs_write+0x28/0x120\n  [  168.113090]  [<ffffffff812f1a2d>] ? security_file_permission+0x3d/0xc0\n  [  168.114932]  [<ffffffff8109b912>] ? percpu_down_read+0x12/0x60\n  [  168.116680]  [<ffffffff811965f8>] vfs_write+0xb8/0x1a0\n  [  168.118293]  [<ffffffff81197966>] SyS_write+0x46/0xa0\n  [  168.119912]  [<ffffffff818f2972>] entry_SYSCALL_64_fastpath+0x1a/0xa4\n  [  168.121737] Code:  Bad RIP value.\n  [  168.123318] RIP  [<          (null)>]           (null)\n\nSigned-off-by: Michal Kazior <michal.kazior@tieto.com>\nSigned-off-by: Kalle Valo <kvalo@qca.qualcomm.com>",
        "before_after_code_files": [
          "drivers/net/wireless/ath/ath10k/wmi-ops.h||drivers/net/wireless/ath/ath10k/wmi-ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/wireless/ath/ath10k/wmi-ops.h||drivers/net/wireless/ath/ath10k/wmi-ops.h": [
          "File: drivers/net/wireless/ath/ath10k/wmi-ops.h -> drivers/net/wireless/ath/ath10k/wmi-ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:  struct sk_buff *skb;",
          "661:  u32 cmd_id;",
          "663:  skb = ar->wmi.ops->gen_vdev_spectral_conf(ar, arg);",
          "664:  if (IS_ERR(skb))",
          "665:   return PTR_ERR(skb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:  if (!ar->wmi.ops->gen_vdev_spectral_conf)",
          "664:   return -EOPNOTSUPP;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:  struct sk_buff *skb;",
          "676:  u32 cmd_id;",
          "678:  skb = ar->wmi.ops->gen_vdev_spectral_enable(ar, vdev_id, trigger,",
          "679:           enable);",
          "680:  if (IS_ERR(skb))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:  if (!ar->wmi.ops->gen_vdev_spectral_enable)",
          "682:   return -EOPNOTSUPP;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f177d73949bf758542ca15a1c1945bd2e802cc65",
      "candidate_info": {
        "commit_hash": "f177d73949bf758542ca15a1c1945bd2e802cc65",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f177d73949bf758542ca15a1c1945bd2e802cc65",
        "files": [
          "fs/btrfs/disk-io.c"
        ],
        "message": "Btrfs: fix emptiness check for dirtied extent buffers at check_leaf()\n\nWe can not simply use the owner field from an extent buffer's header to\nget the id of the respective tree when the extent buffer is from a\nrelocation tree. When we create the root for a relocation tree we leave\n(on purpose) the owner field with the same value as the subvolume's tree\nroot (we do this at ctree.c:btrfs_copy_root()). So we must ignore extent\nbuffers from relocation trees, which have the BTRFS_HEADER_FLAG_RELOC\nflag set, because otherwise we will always consider the extent buffer\nas not being the root of the tree (the root of original subvolume tree\nis always different from the root of the respective relocation tree).\n\nThis lead to assertion failures when running with the integrity checker\nenabled (CONFIG_BTRFS_FS_CHECK_INTEGRITY=y) such as the following:\n\n[  643.393409] BTRFS critical (device sdg): corrupt leaf, non-root leaf's nritems is 0: block=38506496, root=260, slot=0\n[  643.397609] BTRFS info (device sdg): leaf 38506496 total ptrs 0 free space 3995\n[  643.407075] assertion failed: 0, file: fs/btrfs/disk-io.c, line: 4078\n[  643.408425] ------------[ cut here ]------------\n[  643.409112] kernel BUG at fs/btrfs/ctree.h:3419!\n[  643.409773] invalid opcode: 0000 [#1] PREEMPT SMP\n[  643.410447] Modules linked in: dm_flakey dm_mod crc32c_generic btrfs xor raid6_pq ppdev psmouse acpi_cpufreq parport_pc evdev parport tpm_tis tpm_tis_core pcspkr serio_raw i2c_piix4 sg tpm i2c_core button processor loop autofs4 ext4 crc16 jbd2 mbcache sr_mod cdrom sd_mod ata_generic virtio_scsi ata_piix libata virtio_pci virtio_ring scsi_mod virtio e1000 floppy\n[  643.414356] CPU: 11 PID: 32726 Comm: btrfs Not tainted 4.8.0-rc8-btrfs-next-35+ #1\n[  643.414356] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014\n[  643.414356] task: ffff880145e95b00 task.stack: ffff88014826c000\n[  643.414356] RIP: 0010:[<ffffffffa0352759>]  [<ffffffffa0352759>] assfail.constprop.41+0x1c/0x1e [btrfs]\n[  643.414356] RSP: 0018:ffff88014826fa28  EFLAGS: 00010292\n[  643.414356] RAX: 0000000000000039 RBX: ffff88014e2d7c38 RCX: 0000000000000001\n[  643.414356] RDX: ffff88023f4d2f58 RSI: ffffffff81806c63 RDI: 00000000ffffffff\n[  643.414356] RBP: ffff88014826fa28 R08: 0000000000000001 R09: 0000000000000000\n[  643.414356] R10: ffff88014826f918 R11: ffffffff82f3c5ed R12: ffff880172910000\n[  643.414356] R13: ffff880233992230 R14: ffff8801a68a3310 R15: fffffffffffffff8\n[  643.414356] FS:  00007f9ca305e8c0(0000) GS:ffff88023f4c0000(0000) knlGS:0000000000000000\n[  643.414356] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  643.414356] CR2: 00007f9ca3071000 CR3: 000000015d01b000 CR4: 00000000000006e0\n[  643.414356] Stack:\n[  643.414356]  ffff88014826fa50 ffffffffa02d655a 000000000000000a ffff88014e2d7c38\n[  643.414356]  0000000000000000 ffff88014826faa8 ffffffffa02b72f3 ffff88014826fab8\n[  643.414356]  00ffffffa03228e4 0000000000000000 0000000000000000 ffff8801bbd4e000\n[  643.414356] Call Trace:\n[  643.414356]  [<ffffffffa02d655a>] btrfs_mark_buffer_dirty+0xdf/0xe5 [btrfs]\n[  643.414356]  [<ffffffffa02b72f3>] btrfs_copy_root+0x18a/0x1d1 [btrfs]\n[  643.414356]  [<ffffffffa0322921>] create_reloc_root+0x72/0x1ba [btrfs]\n[  643.414356]  [<ffffffffa03267c2>] btrfs_init_reloc_root+0x7b/0xa7 [btrfs]\n[  643.414356]  [<ffffffffa02d9e44>] record_root_in_trans+0xdf/0xed [btrfs]\n[  643.414356]  [<ffffffffa02db04e>] btrfs_record_root_in_trans+0x50/0x6a [btrfs]\n[  643.414356]  [<ffffffffa030ad2b>] create_subvol+0x472/0x773 [btrfs]\n[  643.414356]  [<ffffffffa030b406>] btrfs_mksubvol+0x3da/0x463 [btrfs]\n[  643.414356]  [<ffffffffa030b406>] ? btrfs_mksubvol+0x3da/0x463 [btrfs]\n[  643.414356]  [<ffffffff810781ac>] ? preempt_count_add+0x65/0x68\n[  643.414356]  [<ffffffff811a6e97>] ? __mnt_want_write+0x62/0x77\n[  643.414356]  [<ffffffffa030b55d>] btrfs_ioctl_snap_create_transid+0xce/0x187 [btrfs]\n[  643.414356]  [<ffffffffa030b67d>] btrfs_ioctl_snap_create+0x67/0x81 [btrfs]\n[  643.414356]  [<ffffffffa030ecfd>] btrfs_ioctl+0x508/0x20dd [btrfs]\n[  643.414356]  [<ffffffff81293e39>] ? __this_cpu_preempt_check+0x13/0x15\n[  643.414356]  [<ffffffff81155eca>] ? handle_mm_fault+0x976/0x9ab\n[  643.414356]  [<ffffffff81091300>] ? arch_local_irq_save+0x9/0xc\n[  643.414356]  [<ffffffff8119a2b0>] vfs_ioctl+0x18/0x34\n[  643.414356]  [<ffffffff8119a8e8>] do_vfs_ioctl+0x581/0x600\n[  643.414356]  [<ffffffff814b9552>] ? entry_SYSCALL_64_fastpath+0x5/0xa8\n[  643.414356]  [<ffffffff81093fe9>] ? trace_hardirqs_on_caller+0x17b/0x197\n[  643.414356]  [<ffffffff8119a9be>] SyS_ioctl+0x57/0x79\n[  643.414356]  [<ffffffff814b9565>] entry_SYSCALL_64_fastpath+0x18/0xa8\n[  643.414356]  [<ffffffff81091b08>] ? trace_hardirqs_off_caller+0x3f/0xaa\n[  643.414356] Code: 89 83 88 00 00 00 31 c0 5b 41 5c 41 5d 5d c3 55 89 f1 48 c7 c2 98 bc 35 a0 48 89 fe 48 c7 c7 05 be 35 a0 48 89 e5 e8 13 46 dd e0 <0f> 0b 55 89 f1 48 c7 c2 9f d3 35 a0 48 89 fe 48 c7 c7 7a d5 35\n[  643.414356] RIP  [<ffffffffa0352759>] assfail.constprop.41+0x1c/0x1e [btrfs]\n[  643.414356]  RSP <ffff88014826fa28>\n[  643.468267] ---[ end trace 6a1b3fb1a9d7d6e3 ]---\n\nThis can be easily reproduced by running xfstests with the integrity\nchecker enabled.\n\nFixes: 1ba98d086fe3 (Btrfs: detect corruption when non-root leaf has zero item)\nCc: stable@vger.kernel.org  # 4.8+\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: Liu Bo <bo.li.liu@oracle.com>",
        "before_after_code_files": [
          "fs/btrfs/disk-io.c||fs/btrfs/disk-io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/disk-io.c||fs/btrfs/disk-io.c": [
          "File: fs/btrfs/disk-io.c -> fs/btrfs/disk-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:  u32 nritems = btrfs_header_nritems(leaf);",
          "560:  int slot;",
          "563:   struct btrfs_root *check_root;",
          "565:   key.objectid = btrfs_header_owner(leaf);",
          "",
          "[Removed Lines]",
          "562:  if (nritems == 0) {",
          "",
          "[Added Lines]",
          "570:  if (nritems == 0 && !btrfs_header_flag(leaf, BTRFS_HEADER_FLAG_RELOC)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:   return 0;",
          "588:  }",
          "591:  if (btrfs_item_offset_nr(leaf, 0) + btrfs_item_size_nr(leaf, 0) !=",
          "592:      BTRFS_LEAF_DATA_SIZE(root)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:  if (nritems == 0)",
          "599:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92117f0bce64268b841261774e45462cc7ff80af",
      "candidate_info": {
        "commit_hash": "92117f0bce64268b841261774e45462cc7ff80af",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/92117f0bce64268b841261774e45462cc7ff80af",
        "files": [
          "drivers/gpu/drm/i915/intel_display.c"
        ],
        "message": "drm/i915: Move priority bumping for flips earlier\n\nDavid found another issue with priority bumping from mmioflips, where we\nare accessing the requests concurrently to them being retired and freed.\nWhilst we are skipping the dependency if has been submitted, that is not\nsufficient to stop the dependency from disappearing if another thread\nretires that request. To prevent we can either employ the struct_mutex (or a\nrequest mutex in the future) to serialise retiring before it is freed.\nAlternatively, we need to keep the dependencies alive using RCU whilst\nthey are being accessed via the DFS.\n\n[ 1746.698111] general protection fault: 0000 [#1] PREEMPT SMP\n[ 1746.698305] Modules linked in: snd_hda_intel snd_hda_codec snd_hwdep x86_pkg_temp_thermal snd_hda_core coretemp crct10dif_pclmul crc32_pclmul snd_pcm ghash_clmulni_intel mei_me mei i915 e1000e ptp pps_core i2c_hid\n[ 1746.698750] CPU: 1 PID: 6716 Comm: kworker/u8:2 Not tainted 4.9.0-rc6-CI-Nightly_816+ #1\n[ 1746.698871] Hardware name: GIGABYTE GB-BKi7A-7500/MFLP7AP-00, BIOS F1 07/27/2016\n[ 1746.699125] Workqueue: events_unbound intel_mmio_flip_work_func [i915]\n[ 1746.699266] task: ffff880260a5e800 task.stack: ffffc90000f6c000\n[ 1746.699361] RIP: 0010:[<ffffffffa006595d>]  [<ffffffffa006595d>] execlists_schedule+0x8d/0x300 [i915]\n[ 1746.699632] RSP: 0018:ffffc90000f6fcd8  EFLAGS: 00010206\n[ 1746.699724] RAX: dead0000000000f8 RBX: ffff8801f64b2bf0 RCX: ffff8801f64b2c10\n[ 1746.699842] RDX: dead000000000100 RSI: 0000000000000000 RDI: ffff8801f64b0458\n[ 1746.699972] RBP: ffffc90000f6fd68 R08: ffff88026488dc00 R09: 0000000000000002\n[ 1746.700090] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000400\n[ 1746.700195] R13: ffffc90000f6fcf0 R14: ffff88020955aa40 R15: ffff88020955aa68\n[ 1746.700307] FS:  0000000000000000(0000) GS:ffff88026dc80000(0000) knlGS:0000000000000000\n[ 1746.700435] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[ 1746.700532] CR2: 0000000002a69e90 CR3: 0000000002c07000 CR4: 00000000003406e0\n[ 1746.700635] Stack:\n[ 1746.700682]  ffff880260a5e880 ffffc90000f6fd50 ffffffff810af69a ffffc90000f6fd28\n[ 1746.700827]  ffff88020955a628 ffff8801e1eaebf0 0000000000000020 0000000000000000\n[ 1746.700947]  00000196af1edc96 ffff88025dfa4000 ffff8801f0b030a8 ffffc90000f6fcf0\n[ 1746.701071] Call Trace:\n[ 1746.701117]  [<ffffffff810af69a>] ? dequeue_entity+0x25a/0xb50\n[ 1746.701260]  [<ffffffffa00516be>] fence_set_priority+0x7e/0x80 [i915]\n[ 1746.701406]  [<ffffffffa0051a15>] i915_gem_object_wait_priority+0x85/0x160 [i915]\n[ 1746.701599]  [<ffffffffa008ccd7>] intel_mmio_flip_work_func+0x47/0x2b0 [i915]\n[ 1746.701717]  [<ffffffff81094c4d>] process_one_work+0x14d/0x470\n[ 1746.701809]  [<ffffffff81094fb3>] worker_thread+0x43/0x4e0\n[ 1746.701888]  [<ffffffff81094f70>] ? process_one_work+0x470/0x470\n[ 1746.701969]  [<ffffffff81094f70>] ? process_one_work+0x470/0x470\n[ 1746.702072]  [<ffffffff8109a4d5>] kthread+0xc5/0xe0\n[ 1746.702152]  [<ffffffff81771c59>] ? _raw_spin_unlock_irq+0x9/0x10\n[ 1746.702234]  [<ffffffff8109a410>] ? kthread_park+0x60/0x60\n[ 1746.702318]  [<ffffffff81772272>] ret_from_fork+0x22/0x30\n[ 1746.702387] Code: 89 42 08 48 8b 45 88 48 89 55 c0 4c 89 6d c8 4c 8d 70 d8 4d 8d 7e 28 4d 39 ef 74 72 49 8b 1e 48 8b 13 48 39 d3 48 8d 42 f8 74 3e <48> 8b 10 8b 52 38 41 39 d4 7e 26 48 8b 50 30 48 8b 78 28 48 8d\n[ 1746.702921] RIP  [<ffffffffa006595d>] execlists_schedule+0x8d/0x300 [i915]\nNov 25 21:42:54 kbl-gbbki7 kernel: [ 1746.703027]  RSP <ffffc90000f6fcd8>\n\nFixes: 27745e829a5c (\"drm/i915/execlists: Use a local lock for dfs_link access\")\nFixes: 9a151987d709 (\"drm/i915: Add execution priority boosting for mmioflips\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: David Weinehall <david.weinehall@linux.intel.com>\nCc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/20161128143649.4289-1-chris@chris-wilson.co.uk\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/intel_display.c||drivers/gpu/drm/i915/intel_display.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/intel_display.c||drivers/gpu/drm/i915/intel_display.c": [
          "File: drivers/gpu/drm/i915/intel_display.c -> drivers/gpu/drm/i915/intel_display.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12022:   to_intel_framebuffer(crtc->base.primary->fb);",
          "12023:  struct drm_i915_gem_object *obj = intel_fb->obj;",
          "12026:  WARN_ON(i915_gem_object_wait(obj, 0, MAX_SCHEDULE_TIMEOUT, NULL) < 0);",
          "12028:  intel_pipe_update_start(crtc);",
          "",
          "[Removed Lines]",
          "12025:  i915_gem_object_wait_priority(obj, 0, I915_PRIORITY_DISPLAY);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12278:   i915_add_request_no_flush(request);",
          "12279:  }",
          "12281:  i915_gem_track_fb(intel_fb_obj(old_fb), obj,",
          "12282:      to_intel_plane(primary)->frontbuffer_bit);",
          "12283:  mutex_unlock(&dev->struct_mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12280:  i915_gem_object_wait_priority(obj, 0, I915_PRIORITY_DISPLAY);",
          "",
          "---------------"
        ]
      }
    }
  ]
}