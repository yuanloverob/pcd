{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c81cada052ef8207d32abde930b1460a0ae320f",
      "candidate_info": {
        "commit_hash": "4c81cada052ef8207d32abde930b1460a0ae320f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c81cada052ef8207d32abde930b1460a0ae320f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix a typo in the documentation for sqlite3_value_frombind().  Also add a new hyperlink to that same documentation.  No code changes.\n\nFossilOrigin-Name: bf3cd9364fdfc951feb04f78728eb8e0dae12b3dc5702a36bb6e69c0abab8864",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 02ebc60b9bbc1736f4989eb56f8d31ca97fe90c930841d10986c618381ceb8b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "0f31327eeef9b039f6154fe8930b73e2989a7c29",
      "candidate_info": {
        "commit_hash": "0f31327eeef9b039f6154fe8930b73e2989a7c29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f31327eeef9b039f6154fe8930b73e2989a7c29",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json105.test"
        ],
        "message": "Enhance the path arguments in JSON functions to access \"#-N\" array indexes.\n\nFossilOrigin-Name: ffeec62cb5223ae70bc1889df4c0b241f5d17b1a10156362ca59953028741480",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json105.test||test/json105.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       }",
          "1177:       return pNode;",
          "1178:     }",
          "1181:     i = 0;",
          "1182:     j = 1;",
          "1183:     while( safe_isdigit(zPath[j]) ){",
          "1184:       i = i*10 + zPath[j] - '0';",
          "1185:       j++;",
          "1186:     }",
          "1190:     }",
          "1191:     zPath += j + 1;",
          "1192:     j = 1;",
          "1193:     for(;;){",
          "",
          "[Removed Lines]",
          "1179:   }else if( zPath[0]=='[' && safe_isdigit(zPath[1]) ){",
          "1180:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1187:     if( zPath[j]!=']' ){",
          "1189:       return 0;",
          "",
          "[Added Lines]",
          "1179:   }else if( zPath[0]=='[' ){",
          "1186:     if( j<2 || zPath[j]!=']' ){",
          "1187:       if( zPath[1]=='#' ){",
          "1188:         JsonNode *pBase = pRoot;",
          "1189:         int iBase = iRoot;",
          "1190:         if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1191:         for(;;){",
          "1192:           while( j<=pBase->n ){",
          "1193:             if( (pBase[j].jnFlags & JNODE_REMOVE)==0 ) i++;",
          "1194:             j += jsonNodeSize(&pBase[j]);",
          "1195:           }",
          "1196:           if( (pBase->jnFlags & JNODE_APPEND)==0 ) break;",
          "1197:           iBase += pBase->u.iAppend;",
          "1198:           pBase = &pParse->aNode[iBase];",
          "1199:           j = 1;",
          "1200:         }",
          "1201:         j = 2;",
          "1202:         if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){",
          "1203:           unsigned int x = 0;",
          "1204:           j = 3;",
          "1205:           do{",
          "1206:             x = x*10 + zPath[j] - '0';",
          "1207:             j++;",
          "1208:           }while( safe_isdigit(zPath[j]) );",
          "1209:           if( x>i ) return 0;",
          "1210:           i -= x;",
          "1211:         }",
          "1212:         if( zPath[j]!=']' ){",
          "1214:           return 0;",
          "1215:         }",
          "1216:       }else{",
          "1218:         return 0;",
          "1219:       }",
          "1221:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de6637e15d95b7aee2caea8b8d5b9865f276cbbf152ecf0401c4c7bfdf6dee6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json105.test||test/json105.test": [
          "File: test/json105.test -> test/json105.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-11-22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements tests for \"[#]\" extension to json-path",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix json104",
          "18: ifcapable !json1 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: # This is the example from pages 2 and 3 of RFC-7396",
          "24: db eval {",
          "25:   CREATE TABLE t1(j);",
          "26:   INSERT INTO t1(j) VALUES('{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}');",
          "27: }",
          "28: proc json_extract_test {testnum path result} {",
          "29:   do_execsql_test json105-1.$testnum \"SELECT quote(json_extract(j,$path)) FROM t1\" $result",
          "30: }",
          "31: json_extract_test 10 {'$.b[#]'}   NULL",
          "32: json_extract_test 20 {'$.b[#-1]'} 4",
          "33: json_extract_test 30 {'$.b[#-2]'} {'[2,3]'}",
          "34: json_extract_test 31 {'$.b[#-02]'} {'[2,3]'}",
          "35: json_extract_test 40 {'$.b[#-3]'} 1",
          "36: json_extract_test 50 {'$.b[#-4]'} NULL",
          "37: json_extract_test 60 {'$.b[#-2][#-1]'} 3",
          "38: json_extract_test 70 {'$.b[0]','$.b[#-1]'} {'[1,4]'}",
          "40: json_extract_test 100 {'$.a[#-1]'} NULL",
          "41: json_extract_test 110 {'$.b[#-000001]'} 4",
          "43: proc json_remove_test {testnum path result} {",
          "44:   do_execsql_test json105-2.$testnum \"SELECT quote(json_remove(j,$path)) FROM t1\" $result",
          "45: }",
          "46: json_remove_test 10 {'$.b[#]'}    {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "47: json_remove_test 20 {'$.b[#-0]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "48: json_remove_test 30 {'$.b[#-1]'}  {'{\"a\":1,\"b\":[1,[2,3]],\"c\":99}'}",
          "49: json_remove_test 40 {'$.b[#-2]'}  {'{\"a\":1,\"b\":[1,4],\"c\":99}'}",
          "50: json_remove_test 50 {'$.b[#-3]'}  {'{\"a\":1,\"b\":[[2,3],4],\"c\":99}'}",
          "51: json_remove_test 60 {'$.b[#-4]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "52: json_remove_test 70 {'$.b[#-2][#-1]'}  {'{\"a\":1,\"b\":[1,[2],4],\"c\":99}'}",
          "54: json_remove_test 100 {'$.b[0]','$.b[#-1]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "55: json_remove_test 110 {'$.b[#-1]','$.b[0]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "56: json_remove_test 120 {'$.b[#-1]','$.b[#-2]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "57: json_remove_test 130 {'$.b[#-1]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "58: json_remove_test 140 {'$.b[#-2]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "60: proc json_insert_test {testnum x result} {",
          "61:   do_execsql_test json105-3.$testnum \"SELECT quote(json_insert(j,$x)) FROM t1\" $result",
          "62: }",
          "63: json_insert_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "64: json_insert_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "65: json_insert_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "66:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "67: json_insert_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "68:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "70: proc json_set_test {testnum x result} {",
          "71:   do_execsql_test json105-4.$testnum \"SELECT quote(json_set(j,$x)) FROM t1\" $result",
          "72: }",
          "73: json_set_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "74: json_set_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "75: json_set_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "76:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "77: json_set_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "78:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "79: json_set_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "80: json_set_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "81: json_set_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "82:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "83: json_set_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "84:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "86: proc json_replace_test {testnum x result} {",
          "87:   do_execsql_test json105-5.$testnum \"SELECT quote(json_replace(j,$x)) FROM t1\" $result",
          "88: }",
          "89: json_replace_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "90: json_replace_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "91: json_replace_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "92:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "93: json_replace_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "94:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "95: json_replace_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "96: json_replace_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "97: json_replace_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "98:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "99: json_replace_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "100:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "102: do_catchsql_test json105-6.10 {",
          "103:   SELECT json_extract(j, '$.b[#-]') FROM t1;",
          "104: } {1 {JSON path error near '[#-]'}}",
          "105: do_catchsql_test json105-6.20 {",
          "106:   SELECT json_extract(j, '$.b[#9]') FROM t1;",
          "107: } {1 {JSON path error near '[#9]'}}",
          "108: do_catchsql_test json105-6.30 {",
          "109:   SELECT json_extract(j, '$.b[#+2]') FROM t1;",
          "110: } {1 {JSON path error near '[#+2]'}}",
          "111: do_catchsql_test json105-6.40 {",
          "112:   SELECT json_extract(j, '$.b[#-1') FROM t1;",
          "113: } {1 {JSON path error near '[#-1'}}",
          "114: do_catchsql_test json105-6.50 {",
          "115:   SELECT json_extract(j, '$.b[#-1x]') FROM t1;",
          "116: } {1 {JSON path error near '[#-1x]'}}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
      "candidate_info": {
        "commit_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an fts3 assert() that could fail when operating on a database containing corrupt records.\n\nFossilOrigin-Name: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2482: ){",
          "2484:   if( bDescIdx==0 || *pbFirst==0 ){",
          "2485:     iWrite = iVal - *piPrev;",
          "2486:   }else{",
          "2487:     iWrite = *piPrev - iVal;",
          "2488:   }",
          "2489:   assert( *pbFirst || *piPrev==0 );",
          "2490:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "",
          "[Removed Lines]",
          "2483:   sqlite3_int64 iWrite;",
          "2491:   assert( *pbFirst==0 || iWrite>=0 );",
          "",
          "[Added Lines]",
          "2483:   sqlite3_uint64 iWrite;",
          "2485:     assert_fts3_nc( *pbFirst==0 || iVal>=*piPrev );",
          "2488:     assert_fts3_nc( *piPrev>=iVal );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5546:   SELECT (matchinfo(null)) FROM t1 WHERE t1 MATCH 'ee*e*e*e*e*e*e*Re*e*e*e**'",
          "5547: } {1 {database disk image is malformed}}",
          "5549: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5549: #-------------------------------------------------------------------------",
          "5550: #",
          "5551: reset_db",
          "5552: do_execsql_test 31.0 {",
          "5553: CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "5554: INSERT INTO t1_segdir VALUES(0,0,0,0,'0 592',X'00016dcb048ce6fbd3b2d68bfebf
          "5555: INSERT INTO t1_segdir VALUES(0,1,0,0,'0 18',X'00026d6d0d8ee6fbd3b2d68bfe7f01020200');",
          "5556: }",
          "5558: do_catchsql_test 31.1 {",
          "5559:   SELECT (matchinfo(t1, c ) ) FROM t1 WHERE t1 MATCH 'M*M*M*M*';",
          "5560: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "093589de5e339d6ad39e06b79eb9305fa2112127",
      "candidate_info": {
        "commit_hash": "093589de5e339d6ad39e06b79eb9305fa2112127",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/093589de5e339d6ad39e06b79eb9305fa2112127",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Fix a faulty assert() statement in the sqlite3VdbeMemExpandBlob() routine.\n\nFossilOrigin-Name: 69a26eade2f92029e722a5a654214b1e2a3fc7ed497ce9aa5a7dce944f90e502",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cde82c86b963fa75192907d548febd3882c7d8fc7daf1903fadd5ca46623be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: #define MemNullNochng(X) \\",
          "",
          "[Removed Lines]",
          "289:   ((X)->flags==(MEM_Null|MEM_Zero) && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "[Added Lines]",
          "289:   (((X)->flags&MEM_TypeMask)==(MEM_Null|MEM_Zero) \\",
          "290:     && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
      "candidate_info": {
        "commit_hash": "c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with handling corrupt databases in the fts5 integrity-check function.\n\nFossilOrigin-Name: 9bad745d373f4686a2726c3f77a2ccad60e7181645d7ed483a2e43075a4ef30c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5859:       iOff = fts5LeafFirstTermOff(pLeaf);",
          "5860:       iRowidOff = fts5LeafFirstRowidOff(pLeaf);",
          "5862:         p->rc = FTS5_CORRUPT;",
          "5863:       }else{",
          "5864:         iOff += fts5GetVarint32(&pLeaf->p[iOff], nTerm);",
          "",
          "[Removed Lines]",
          "5861:       if( iRowidOff>=iOff ){",
          "",
          "[Added Lines]",
          "5861:       if( iRowidOff>=iOff || iOff>=pLeaf->szLeaf ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "871: | end c14b.db",
          "872: }]} {}",
          "875: do_catchsql_test 14.1 {",
          "876:   INSERT INTO t1(t1) VALUES('optimize');",
          "877: } {1 {database disk image is malformed}}",
          "879: sqlite3_fts5_may_be_corrupt 0",
          "880: finish_test",
          "",
          "[Removed Lines]",
          "874: breakpoint",
          "",
          "[Added Lines]",
          "878: #---------------------------------------------------------------------------",
          "879: #",
          "880: reset_db",
          "881: do_test 15.0 {",
          "882:   sqlite3 db {}",
          "883:   db deserialize [decode_hexdb {",
          "884: | size 32768 pagesize 4096 filename c16.db",
          "885: | page 1 offset 0",
          "886: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "887: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "888: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "889: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "890: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "891: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "892: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "893: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "894: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "895: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "896: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "897: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "898: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "899: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "900: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 00 0f f6 0f ec   ..!!...tabl.....",
          "901: |   3680: 0f e0 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ..sizet1_docsize",
          "902: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "903: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "904: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "905: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "906: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "907: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "908: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "909: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "910: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "911: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "912: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "913: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "914: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "915: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "916: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "917: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "918: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "919: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "920: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "921: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "922: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "923: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "924: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "925: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "926: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "927: | page 2 offset 4096",
          "928: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "929: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "930: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "931: |   4048: 63 6b 01 02 02 04 02 66 74 00 02 22 04 04 6e 64   ck.....ft.....nd",
          "932: |   4064: 6f 6e 04 67 90 38 2a 07 05 01 03 00 10 03 03 0f   on.g.8*.........",
          "933: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "934: | page 3 offset 8192",
          "935: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "936: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "937: | page 4 offset 12288",
          "938: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "939: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "940: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "941: | page 5 offset 16384",
          "942: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "943: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "944: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "945: | page 6 offset 20480",
          "946: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "947: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "948: | page 7 offset 24576",
          "949: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "950: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "951: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "952: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "953: | page 8 offset 28672",
          "954: |      0: 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74 31 5f   .......-tablet1_",
          "955: |     16: 69 64 78 74 31 5f 69 64 78 03 43 52 45 41 54 45   idxt1_idx.CREATE",
          "956: |     32: 20 54 41 42 4c 45 20 27 74 31 5f 66 17 42 03 30    TABLE 't1_f.B.0",
          "957: |     48: 01 00 00 10 10 04 02 02 00 00 00 00 00 00 00 00   ................",
          "958: |     64: 70 00 00 00 00 00 00 00 00 00 00 00 70 00 00 00   p...........p...",
          "959: | end c16.db",
          "960: }]} {}",
          "962: do_catchsql_test 15.1 {",
          "963:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "964: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c80bb15b44e9b6a3c0c5a49d5e93e66376c3520ecefc1db7425c8a7e09d3eade",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}