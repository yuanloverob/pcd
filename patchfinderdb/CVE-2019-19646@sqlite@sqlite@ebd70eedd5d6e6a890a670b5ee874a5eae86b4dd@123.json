{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa81cae485ce4c265437f908863b3f0fdbc73818",
      "candidate_info": {
        "commit_hash": "aa81cae485ce4c265437f908863b3f0fdbc73818",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa81cae485ce4c265437f908863b3f0fdbc73818",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/round1.test"
        ],
        "message": "Disable the new rounding tests on systems without long double support.\n\nFossilOrigin-Name: ed250b4e18ea042d681bbe8d7ed00895564f4525c22928a003a84585b4756ec3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/round1.test||test/round1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 641b2d210541b4d5a1a9e57d7dcf5ce5dfd7ff4d2dc6277ba0582869f48fc946",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/round1.test||test/round1.test": [
          "File: test/round1.test -> test/round1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix round1",
          "18: expr srand(0)",
          "19: unset -nocomplain iTest",
          "20: for {set iTest 1} {$iTest<=10000} {incr iTest} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: if {$::longdouble_size<=8} {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ade54d68ee770d74ff98716f3eae9ecb2512da54",
      "candidate_info": {
        "commit_hash": "ade54d68ee770d74ff98716f3eae9ecb2512da54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ade54d68ee770d74ff98716f3eae9ecb2512da54",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/main.c",
          "src/os.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "Add the SQLITE_TESTCTRL_PRNG_SEED test control.\n\nFossilOrigin-Name: 3ac5723164ae801e209ce525a5d94692767136f9d06be2a84883dcea677d02da",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/os.c||src/os.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: faaaae4940b5f4f70e4988ad5b45582410b381ace0031e6abcde0b9217c06796",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:       break;",
          "3825:     }",
          "3834:       break;",
          "3835:     }",
          "",
          "[Removed Lines]",
          "3832:     case SQLITE_TESTCTRL_PRNG_RESET: {",
          "3833:       sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "3832:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3833:       sqlite3Config.iPrngSeed = va_arg(ap, unsigned int);",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: }",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "262: }",
          "263: int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){",
          "264:   return pVfs->xSleep(pVfs, nMicro);",
          "",
          "[Removed Lines]",
          "261:   return pVfs->xRandomness(pVfs, nByte, zBufOut);",
          "",
          "[Added Lines]",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "263:     if( nByte>sizeof(unsigned) ) nByte = sizeof(unsigned int);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "267:     return pVfs->xRandomness(pVfs, nByte, zBufOut);",
          "268:   }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9150:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"                 },",
          "9151: #endif",
          "9152:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9154:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9155:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9156:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "9157:     };",
          "9158:     int testctrl = -1;",
          "",
          "[Removed Lines]",
          "9153:       { \"prng_reset\",         SQLITE_TESTCTRL_PRNG_RESET,    \"\"                   },",
          "",
          "[Added Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED\"               },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9229:         case SQLITE_TESTCTRL_PENDING_BYTE:",
          "9230:           if( nArg==3 ){",
          "9231:             unsigned int opt = (unsigned int)integerValue(azArg[2]);",
          "9232:             rc2 = sqlite3_test_control(testctrl, opt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9230:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7335: #define SQLITE_TESTCTRL_FIRST                    5",
          "7336: #define SQLITE_TESTCTRL_PRNG_SAVE                5",
          "7337: #define SQLITE_TESTCTRL_PRNG_RESTORE             6",
          "7339: #define SQLITE_TESTCTRL_BITVEC_TEST              8",
          "7340: #define SQLITE_TESTCTRL_FAULT_INSTALL            9",
          "7341: #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10",
          "",
          "[Removed Lines]",
          "7338: #define SQLITE_TESTCTRL_PRNG_RESET               7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7358: #define SQLITE_TESTCTRL_IMPOSTER                25",
          "7359: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "7360: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7361: #define SQLITE_TESTCTRL_PRNG_SEED               28",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6375: ){",
          "6377:   return TCL_OK;",
          "6378: }",
          "",
          "[Removed Lines]",
          "6376:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_RESET);",
          "",
          "[Added Lines]",
          "6376:   sqlite3_randomness(0,0);",
          "6377:   return TCL_OK;",
          "6378: }",
          "6384: static int SQLITE_TCLAPI prng_seed(",
          "6389: ){",
          "6390:   unsigned int i;",
          "6391:   if( objc!=2 ){",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6395:   if( Tcl_GetIntFromObj(objv[0],&i) ) return TCL_ERROR;",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7923:      { \"save_prng_state\",               save_prng_state,    0 },",
          "7924:      { \"restore_prng_state\",            restore_prng_state, 0 },",
          "7925:      { \"reset_prng_state\",              reset_prng_state,   0 },",
          "7926:      { \"database_never_corrupt\",        database_never_corrupt, 0},",
          "7927:      { \"database_may_be_corrupt\",       database_may_be_corrupt, 0},",
          "7928:      { \"optimization_control\",          optimization_control,0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7947:      { \"prng_seed\",                     prng_seed,          0 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6991796b4b6f1a9c591349dd6d6ac4438f1db79",
      "candidate_info": {
        "commit_hash": "b6991796b4b6f1a9c591349dd6d6ac4438f1db79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6991796b4b6f1a9c591349dd6d6ac4438f1db79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Move the nOpAlloc field from Parse into Vdbe to avoid an extra pointer deference on the fast path in sqlite3VdbeAddOp3().\n\nFossilOrigin-Name: 8f10efc29dea7b816b1ba401726c268950d6671d890f686911269082a241d8d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4d44542d259bbec11aea60ae94fcb4acd53e97e125723cae078cf0f8873f8ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   pParse->pVdbe = p;",
          "37:   assert( pParse->aLabel==0 );",
          "38:   assert( pParse->nLabel==0 );",
          "40:   assert( pParse->szOpAlloc==0 );",
          "41:   sqlite3VdbeAddOp2(p, OP_Init, 0, 1);",
          "42:   return p;",
          "",
          "[Removed Lines]",
          "39:   assert( pParse->nOpAlloc==0 );",
          "",
          "[Added Lines]",
          "39:   assert( p->nOpAlloc==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (p->nOpAlloc>=512 ? p->nOpAlloc*2 : p->nOpAlloc+nOp);",
          "160:   int nNew = (p->nOpAlloc ? p->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   }",
          "170:   assert( nOp<=(1024/sizeof(Op)) );",
          "172:   pNew = sqlite3DbRealloc(p->db, v->aOp, nNew*sizeof(Op));",
          "173:   if( pNew ){",
          "174:     p->szOpAlloc = sqlite3DbMallocSize(p->db, pNew);",
          "176:     v->aOp = pNew;",
          "177:   }",
          "178:   return (pNew ? SQLITE_OK : SQLITE_NOMEM_BKPT);",
          "",
          "[Removed Lines]",
          "171:   assert( nNew>=(p->nOpAlloc+nOp) );",
          "175:     p->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "[Added Lines]",
          "171:   assert( nNew>=(v->nOpAlloc+nOp) );",
          "175:     v->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208: static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "210:   if( growOpArray(p, 1) ) return 1;",
          "212:   return sqlite3VdbeAddOp3(p, op, p1, p2, p3);",
          "213: }",
          "214: int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "",
          "[Removed Lines]",
          "209:   assert( p->pParse->nOpAlloc<=p->nOp );",
          "211:   assert( p->pParse->nOpAlloc>p->nOp );",
          "",
          "[Added Lines]",
          "209:   assert( p->nOpAlloc<=p->nOp );",
          "211:   assert( p->nOpAlloc>p->nOp );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:   i = p->nOp;",
          "219:   assert( p->magic==VDBE_MAGIC_INIT );",
          "220:   assert( op>=0 && op<0xff );",
          "222:     return growOp3(p, op, p1, p2, p3);",
          "223:   }",
          "224:   p->nOp++;",
          "",
          "[Removed Lines]",
          "221:   if( p->pParse->nOpAlloc<=i ){",
          "",
          "[Added Lines]",
          "221:   if( p->nOpAlloc<=i ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "794: #if defined(SQLITE_DEBUG) && !defined(SQLITE_TEST_REALLOC_STRESS)",
          "795: void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){",
          "797: }",
          "798: #endif",
          "",
          "[Removed Lines]",
          "796:   assert( p->nOp + N <= p->pParse->nOpAlloc );",
          "",
          "[Added Lines]",
          "796:   assert( p->nOp + N <= p->nOpAlloc );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "865:   VdbeOp *pOut, *pFirst;",
          "866:   assert( nOp>0 );",
          "867:   assert( p->magic==VDBE_MAGIC_INIT );",
          "869:     return 0;",
          "870:   }",
          "871:   pFirst = pOut = &p->aOp[p->nOp];",
          "",
          "[Removed Lines]",
          "868:   if( p->nOp + nOp > p->pParse->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "[Added Lines]",
          "868:   if( p->nOp + nOp > p->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
      "candidate_info": {
        "commit_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in"
        ],
        "message": "Change the name of the parameter table in the CLI to \"sqlite_parameters\". Doing so involves adding SQLITE_DBCONFIG_WRITABLE_SCHEMA and allowing the creation of tables whose names begin with \"sqlite_\" and that are indexed while writable_schema is on.\n\nFossilOrigin-Name: 24ef3844692debc2db7b1d427f5dcf4050481a8c7f71c3b516766b819ecab587",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3154:   assert( pParse->nErr==0 );",
          "3155:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "3156:        && db->init.busy==0",
          "3157: #if SQLITE_USER_AUTHENTICATION",
          "3158:        && sqlite3UserAuthTable(pTab->zName)==0",
          "3159: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:        && pTblName!=0",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:         { SQLITE_DBCONFIG_TRIGGER_EQP,           SQLITE_TriggerEQP     },",
          "844:         { SQLITE_DBCONFIG_RESET_DATABASE,        SQLITE_ResetDatabase  },",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:       };",
          "847:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2748: }",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "[Removed Lines]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "",
          "[Added Lines]",
          "2751: #define BIND_PARAM_TABLE \"sqlite_parameters\"",
          "2755:   int wrSchema = 0;",
          "2756:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "2757:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "2759:     \"CREATE TABLE IF NOT EXISTS temp.\" BIND_PARAM_TABLE \"(\\n\"",
          "2764:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2786:   }",
          "2787:   rc = sqlite3_prepare_v2(pArg->db,",
          "2789:           \" WHERE key=?1\", -1, &pQ, 0);",
          "2790:   if( rc || pQ==0 ) return;",
          "2791:   for(i=1; i<=nVar; i++){",
          "",
          "[Removed Lines]",
          "2788:           \"SELECT value FROM temp.\\\"\" BIND_PARAM_TABLE \"\\\"\"",
          "",
          "[Added Lines]",
          "2792:           \"SELECT value FROM temp.\" BIND_PARAM_TABLE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7144:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7146:                    0, 0, 0);",
          "7147:     }else",
          "",
          "[Removed Lines]",
          "7145:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "",
          "[Added Lines]",
          "7149:       int wrSchema = 0;",
          "7150:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "7151:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "7152:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.\" BIND_PARAM_TABLE \";\",",
          "7154:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7155:       int len = 0;",
          "7156:       rx = sqlite3_prepare_v2(p->db,",
          "7157:              \"SELECT max(length(key)) \"",
          "7159:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7160:         len = sqlite3_column_int(pStmt, 0);",
          "7161:         if( len>40 ) len = 40;",
          "",
          "[Removed Lines]",
          "7158:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7166:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7165:       if( len ){",
          "7166:         rx = sqlite3_prepare_v2(p->db,",
          "7167:              \"SELECT key, quote(value) \"",
          "7169:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7170:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7171:                       sqlite3_column_text(pStmt,1));",
          "",
          "[Removed Lines]",
          "7168:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7176:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7196:       const char *zValue = azArg[3];",
          "7197:       bind_table_init(p);",
          "7198:       zSql = sqlite3_mprintf(",
          "7200:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7201:       if( zSql==0 ) shell_out_of_memory();",
          "7202:       pStmt = 0;",
          "",
          "[Removed Lines]",
          "7199:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7207:                   \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7206:         sqlite3_finalize(pStmt);",
          "7207:         pStmt = 0;",
          "7208:         zSql = sqlite3_mprintf(",
          "7210:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7211:         if( zSql==0 ) shell_out_of_memory();",
          "7212:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "",
          "[Removed Lines]",
          "7209:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7217:                    \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7229:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7230:       char *zSql = sqlite3_mprintf(",
          "7232:       if( zSql==0 ) shell_out_of_memory();",
          "7233:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7234:       sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7231:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "",
          "[Added Lines]",
          "7239:           \"DELETE FROM temp.\" BIND_PARAM_TABLE \" WHERE key=%Q\", azArg[2]);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
      "candidate_info": {
        "commit_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Update error detection logic in releasetest.tcl to account for new output formats in USAN.\n\nFossilOrigin-Name: 3f36b988360204628d5ad1df2db34818b9a2d6ba989018d4c17757229f4b0f65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb9470fc064aad72a4e42c6a021410401b3b1a32446ae8b9cd9c759f0a2a01ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:       # skip over \"value is outside range\" errors",
          "413:       if {[regexp {value .* is outside the range of representable} $line]} {",
          "414:          # noop",
          "415:       } else {",
          "416:         incr ::NERRCASE",
          "417:         if {$rc==0} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:       } elseif {[regexp {overflow: .* cannot be represented} $line]} {",
          "416:          # noop",
          "",
          "---------------"
        ]
      }
    }
  ]
}