{
  "cve_id": "CVE-2022-23575",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "fcd18ce3101f245b083b30655c27b239dc72221e",
  "patch_info": {
    "commit_hash": "fcd18ce3101f245b083b30655c27b239dc72221e",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/fcd18ce3101f245b083b30655c27b239dc72221e",
    "files": [
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
    ],
    "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408713061\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5",
    "before_after_code_files": [
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
      "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1555:   int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);",
      "1556:   int size = DataTypeSize(BaseType(tensor.dtype()));",
      "1557:   VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;",
      "1559: }",
      "1561: int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,",
      "",
      "[Removed Lines]",
      "1558:   return count * size;",
      "",
      "[Added Lines]",
      "1558:   int64_t tensor_size = MultiplyWithoutOverflow(count, size);",
      "1559:   if (tensor_size < 0) {",
      "1560:     VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"",
      "1561:             << count << \" with \" << size;",
      "1562:     return -1;",
      "1563:   }",
      "1564:   return tensor_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a8db7e3dfb5e0b3cde3743d36ca857f20adfaec",
      "candidate_info": {
        "commit_hash": "4a8db7e3dfb5e0b3cde3743d36ca857f20adfaec",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4a8db7e3dfb5e0b3cde3743d36ca857f20adfaec",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408713061\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:   int64 count = CalculateTensorElementCount(tensor, found_unknown_shapes);",
          "1555:   int size = DataTypeSize(BaseType(tensor.dtype()));",
          "1556:   VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;",
          "1558: }",
          "1560: int64 OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,",
          "",
          "[Removed Lines]",
          "1557:   return count * size;",
          "",
          "[Added Lines]",
          "1557:   int64_t tensor_size = MultiplyWithoutOverflow(count, size);",
          "1558:   if (tensor_size < 0) {",
          "1559:     VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"",
          "1560:             << count << \" with \" << size;",
          "1561:     return -1;",
          "1562:   }",
          "1563:   return tensor_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3896e38fccf8b0f603dfb573a69cad5d54a3a3f5",
      "candidate_info": {
        "commit_hash": "3896e38fccf8b0f603dfb573a69cad5d54a3a3f5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3896e38fccf8b0f603dfb573a69cad5d54a3a3f5",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408713061\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:   int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);",
          "1555:   int size = DataTypeSize(BaseType(tensor.dtype()));",
          "1556:   VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;",
          "1558: }",
          "1560: int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,",
          "",
          "[Removed Lines]",
          "1557:   return count * size;",
          "",
          "[Added Lines]",
          "1557:   int64_t tensor_size = MultiplyWithoutOverflow(count, size);",
          "1558:   if (tensor_size < 0) {",
          "1559:     VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"",
          "1560:             << count << \" with \" << size;",
          "1561:     return -1;",
          "1562:   }",
          "1563:   return tensor_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbd232f690215ed3b42ce125b611e6daf727a61c",
      "candidate_info": {
        "commit_hash": "bbd232f690215ed3b42ce125b611e6daf727a61c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bbd232f690215ed3b42ce125b611e6daf727a61c",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408713061\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1545:   int64 count = CalculateTensorElementCount(tensor, found_unknown_shapes);",
          "1546:   int size = DataTypeSize(BaseType(tensor.dtype()));",
          "1547:   VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;",
          "1549: }",
          "1551: int64 OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,",
          "",
          "[Removed Lines]",
          "1548:   return count * size;",
          "",
          "[Added Lines]",
          "1548:   int64_t tensor_size = MultiplyWithoutOverflow(count, size);",
          "1549:   if (tensor_size < 0) {",
          "1550:     VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"",
          "1551:             << count << \" with \" << size;",
          "1552:     return -1;",
          "1553:   }",
          "1554:   return tensor_size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}