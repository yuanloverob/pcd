{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
      "candidate_info": {
        "commit_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0c51d1a041966bccc598d114aa17a13cf64d662",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Do not allow shadow tables to be dropped in defensive mode.\n\nFossilOrigin-Name: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2963:     }",
          "2964:   }",
          "2965: #endif",
          "2969:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2970:     goto exit_drop_table;",
          "2971:   }",
          "",
          "[Removed Lines]",
          "2966:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2967:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2968:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "[Added Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "[Removed Lines]",
          "545:   do_catchsql_test 16.1 {",
          "549:   do_catchsql_test 16.2 {",
          "553:   do_execsql_test 16.3 {",
          "557:   do_execsql_test 16.4 {",
          "",
          "[Added Lines]",
          "545:   do_catchsql_test 16.10 {",
          "549:   do_catchsql_test 16.20 {",
          "553:   do_catchsql_test 16.21 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "561:   do_execsql_test 16.40 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1024822ba8333faa32ffdfd7d395e49407a21332",
      "candidate_info": {
        "commit_hash": "1024822ba8333faa32ffdfd7d395e49407a21332",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1024822ba8333faa32ffdfd7d395e49407a21332",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Earlier detection of out-of-range page numbers in the btree layer.\n\nFossilOrigin-Name: 805bb67a82be51dc6077480691ed815c63a37bd8fc00cf7e67e020349c6e322e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 969c25bb14fbd99ca8523abf0ae78a75a3dde539e3323d105690aef4940041eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6292:     iTrunk = get4byte(&pPage1->aData[32]);",
          "6293:     rc = btreeGetPage(pBt, iTrunk, &pTrunk, 0);",
          "6294:     if( rc!=SQLITE_OK ){",
          "6295:       goto freepage_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6293:     if( iTrunk>btreePagecount(pBt) ){",
          "6294:       rc = SQLITE_CORRUPT_BKPT;",
          "6295:       goto freepage_out;",
          "6296:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9129:     sqlite3BtreeGetMeta(p, BTREE_LARGEST_ROOT_PAGE, &pgnoRoot);",
          "9130:     pgnoRoot++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9134:     if( pgnoRoot>btreePagecount(pBt) ){",
          "9135:       return SQLITE_CORRUPT_BKPT;",
          "9136:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5710f1ad4822394087defa0cfefec9129fa8e885",
      "candidate_info": {
        "commit_hash": "5710f1ad4822394087defa0cfefec9129fa8e885",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5710f1ad4822394087defa0cfefec9129fa8e885",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_expr.test",
          "test/func.test"
        ],
        "message": "Modify three test cases so that they work even with unusual versions of the library printf().\n\nFossilOrigin-Name: 8f4a3750b7d272daf96831655ffee80d457875ee121fc4537008046b9a00d0e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_expr.test||test/e_expr.test",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c35d3f67b67a53ead08b1c395e7ca8e5bf65f94a5a962a0562994a3c66c95d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "1664: do_expr_test e_expr-32.1.6 {CAST( '9.223372036e14' AS NUMERIC)} integer  922337203600000",
          "1665: do_expr_test e_expr-32.1.7 {CAST('-9.223372036e14' AS NUMERIC)} integer -922337203600000",
          "1670: # EVIDENCE-OF: R-50300-26941 Any text input that describes a value",
          "1671: # outside the range of a 64-bit signed integer yields a REAL result.",
          "",
          "[Removed Lines]",
          "1666: do_expr_test e_expr-32.1.8 {CAST( '9.223372036e15' AS NUMERIC)} real     9223372036000000.0",
          "1667: do_expr_test e_expr-32.1.9 {CAST('-9.223372036e15' AS NUMERIC)} real    -9223372036000000.0",
          "",
          "[Added Lines]",
          "1666: do_test e_expr-32.1.8 {",
          "1667:   set expr {CAST( '9.223372036e15' AS NUMERIC)}",
          "1668:   db eval \"SELECT typeof($expr) AS type, printf('%.5e',$expr) AS value\"  break;",
          "1669:   list $type $value",
          "1670: } {real 9.22337e+15}",
          "1671: do_test e_expr-32.1.9 {",
          "1672:   set expr {CAST('-9.223372036e15' AS NUMERIC)}",
          "1673:   db eval \"SELECT typeof($expr) AS type, printf('%.5e',$expr) AS value\"  break;",
          "1674:   list $type $value",
          "1675: } {real -9.22337e+15}",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   do_test func-4.38 {",
          "316:     execsql {SELECT round(9999999999999.556,2);}",
          "317:   } {9999999999999.56}",
          "321: }",
          "323: # Test the upper() and lower() functions",
          "",
          "[Removed Lines]",
          "318:   do_execsql_test func-4.39 {",
          "319:     SELECT round(1e500), round(-1e500);",
          "320:   } {Inf -Inf}",
          "",
          "[Added Lines]",
          "318:   do_test func-4.39 {",
          "319:     string tolower [db eval {SELECT round(1e500), round(-1e500);}]",
          "320:   } {inf -inf}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8aa706e748e0392e0b1a432f2f750bce1e457e54",
      "candidate_info": {
        "commit_hash": "8aa706e748e0392e0b1a432f2f750bce1e457e54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8aa706e748e0392e0b1a432f2f750bce1e457e54",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a buffer overread that could occur in fts3 with corrupt %_stat records.\n\nFossilOrigin-Name: e01fdbf9f700e1bd9dd5283c65547d10d26ce4f4506d3cfef9e1087aecdc2305",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4850:   const int nHint = pHint->n;",
          "4851:   int i;",
          "4854:   while( i>0 && (pHint->a[i-1] & 0x80) ) i--;",
          "4855:   while( i>0 && (pHint->a[i-1] & 0x80) ) i--;",
          "4857:   pHint->n = i;",
          "4858:   i += sqlite3Fts3GetVarint(&pHint->a[i], piAbsLevel);",
          "4859:   i += fts3GetVarint32(&pHint->a[i], pnInput);",
          "4860:   if( i!=nHint ) return FTS_CORRUPT_VTAB;",
          "4862:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "4853:   i = pHint->n-2;",
          "",
          "[Added Lines]",
          "4853:   i = pHint->n-1;",
          "4854:   if( (pHint->a[i] & 0x80) ) return FTS_CORRUPT_VTAB;",
          "4856:   if( i==0 ) return FTS_CORRUPT_VTAB;",
          "4857:   i--;",
          "4863:   assert( i<=nHint );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 96b6a76da09a94182414ec1a56da91728c37329d2b55f889e433054ca21605ce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5767:   UPDATE t1 SET b=((- '' )) WHERE a MATCH '0*t';",
          "5768: } {1 {database disk image is malformed}}",
          "5771: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5770: #-------------------------------------------------------------------------",
          "5771: #",
          "5772: reset_db",
          "5773: do_catchsql_test 32.0 {",
          "5774:   CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5775:   CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5776:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5777:   INSERT INTO f VALUES (1, '1234');",
          "5778:   INSERT INTO f_stat VALUES (1,x'0000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003bc502fffffffffb8b2afbfb6565f0740100650000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003b8b00c5c5c5c5c5bfc5');",
          "5779:   INSERT INTO f(f) VALUES ('merge=198,49');",
          "5780: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68c0c71065354a2c06e3283f0a2f1758afec5aba",
      "candidate_info": {
        "commit_hash": "68c0c71065354a2c06e3283f0a2f1758afec5aba",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68c0c71065354a2c06e3283f0a2f1758afec5aba",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/wherecode.c"
        ],
        "message": "For UPDATE and DELETE, use OP_DeferredSeek always.  If the seek must later be resolved, add the OP_FinishSeek opcode after all WHERE clause terms have been processed.  This obviates the need for the WHERE_SEEK_TABLE and WHERE_SEEK_UNIQ_TABLE flags to sqlite3WhereBegin() and the ensuing complication, and it allows the covering index optimization to be used further into WHERE clause processing.\n\nFossilOrigin-Name: a495f60d315e34b1a1bc5fb1336e05047add52c8fb2710b577c97b10a5e734f6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2f7cb6ab39e54fd6eb3a280d3022c3d4f4ed92e83af7226e63e0199a96397a6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   }else",
          "427:   {",
          "429:     if( sNC.ncFlags & NC_VarSelect ) bComplex = 1;",
          "430:     wcf |= (bComplex ? 0 : WHERE_ONEPASS_MULTIROW);",
          "431:     if( HasRowid(pTab) ){",
          "",
          "[Removed Lines]",
          "428:     u16 wcf = WHERE_ONEPASS_DESIRED|WHERE_DUPLICATES_OK|WHERE_SEEK_TABLE;",
          "",
          "[Added Lines]",
          "428:     u16 wcf = WHERE_ONEPASS_DESIRED|WHERE_DUPLICATES_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     assert( IsVirtual(pTab)==0 || eOnePass!=ONEPASS_MULTI );",
          "462:     assert( IsVirtual(pTab) || bComplex || eOnePass!=ONEPASS_OFF );",
          "463:     if( eOnePass!=ONEPASS_SINGLE ) sqlite3MultiWrite(pParse);",
          "466:     if( memCnt ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:     if( sqlite3WhereUsesDeferredSeek(pWInfo) ){",
          "465:       sqlite3VdbeAddOp1(v, OP_FinishSeek, iTabCur);",
          "466:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:       if( aiCurOnePass[0]>=0 ) aToOpen[aiCurOnePass[0]-iTabCur] = 0;",
          "496:       if( aiCurOnePass[1]>=0 ) aToOpen[aiCurOnePass[1]-iTabCur] = 0;",
          "497:       if( addrEphOpen ) sqlite3VdbeChangeToNoop(v, addrEphOpen);",
          "498:     }else{",
          "499:       if( pPk ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:         sqlite3VdbeAddOp2(v, OP_RowSetAdd, iRowSet, iKey);",
          "510:       }",
          "518:       sqlite3WhereEnd(pWInfo);",
          "519:     }",
          "",
          "[Removed Lines]",
          "511:     }",
          "515:     if( eOnePass!=ONEPASS_OFF ){",
          "516:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "517:     }else{",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:       if( !pParse->nested && !pTrigger && !hasFK && !chngKey && !bReplace ){",
          "710:         flags |= WHERE_ONEPASS_MULTIROW;",
          "711:       }",
          "",
          "[Removed Lines]",
          "708:       flags = WHERE_ONEPASS_DESIRED|WHERE_SEEK_UNIQ_TABLE;",
          "",
          "[Added Lines]",
          "708:       flags = WHERE_ONEPASS_DESIRED;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1909:     if( omitTable ){",
          "1911:     }else if( HasRowid(pIdx->pTable) ){",
          "1923:     }else if( iCur!=iIdxCur ){",
          "1924:       Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);",
          "1925:       iRowidReg = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "",
          "[Removed Lines]",
          "1912:       if( (pWInfo->wctrlFlags & WHERE_SEEK_TABLE)",
          "1913:        || ( (pWInfo->wctrlFlags & WHERE_SEEK_UNIQ_TABLE)!=0",
          "1914:            && (pWInfo->eOnePass==ONEPASS_SINGLE || pLoop->nLTerm==0) )",
          "1915:       ){",
          "1916:         iRowidReg = ++pParse->nMem;",
          "1917:         sqlite3VdbeAddOp2(v, OP_IdxRowid, iIdxCur, iRowidReg);",
          "1918:         sqlite3VdbeAddOp3(v, OP_NotExists, iCur, 0, iRowidReg);",
          "1919:         VdbeCoverage(v);",
          "1920:       }else{",
          "1921:         codeDeferredSeek(pWInfo, pIdx, iCur, iIdxCur);",
          "1922:       }",
          "",
          "[Added Lines]",
          "1912:       codeDeferredSeek(pWInfo, pIdx, iCur, iIdxCur);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2151:     ExplainQueryPlan((pParse, 1, \"MULTI-INDEX OR\"));",
          "2152:     for(ii=0; ii<pOrWc->nTerm; ii++){",
          "2153:       WhereTerm *pOrTerm = &pOrWc->a[ii];",
          "",
          "[Removed Lines]",
          "2150:     wctrlFlags =  WHERE_OR_SUBCLAUSE | (pWInfo->wctrlFlags & WHERE_SEEK_TABLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2166:         ExplainQueryPlan((pParse, 1, \"INDEX %d\", ii+1));",
          "2167:         WHERETRACE(0xffff, (\"Subplan for OR-clause:\\n\"));",
          "2168:         pSubWInfo = sqlite3WhereBegin(pParse, pOrTab, pOrExpr, 0, 0,",
          "2170:         assert( pSubWInfo || pParse->nErr || db->mallocFailed );",
          "2171:         if( pSubWInfo ){",
          "2172:           WhereLoop *pSubLoop;",
          "",
          "[Removed Lines]",
          "2169:                                       wctrlFlags, iCovCur);",
          "",
          "[Added Lines]",
          "2157:                                       WHERE_OR_SUBCLAUSE, iCovCur);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2264:           }else{",
          "2265:             pCov = 0;",
          "2266:           }",
          "2269:           sqlite3WhereEnd(pSubWInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2255:           if( sqlite3WhereUsesDeferredSeek(pSubWInfo) ){",
          "2256:             pWInfo->bDeferredSeek = 1;",
          "2257:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}