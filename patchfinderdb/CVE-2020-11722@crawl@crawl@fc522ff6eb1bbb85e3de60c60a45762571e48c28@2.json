{
  "cve_id": "CVE-2020-11722",
  "cve_desc": "Dungeon Crawl Stone Soup (aka DCSS or crawl) before 0.25 allows remote attackers to execute arbitrary code via Lua bytecode embedded in an uploaded .crawlrc file.",
  "repo": "crawl/crawl",
  "patch_hash": "fc522ff6eb1bbb85e3de60c60a45762571e48c28",
  "patch_info": {
    "commit_hash": "fc522ff6eb1bbb85e3de60c60a45762571e48c28",
    "repo": "crawl/crawl",
    "commit_url": "https://github.com/crawl/crawl/commit/fc522ff6eb1bbb85e3de60c60a45762571e48c28",
    "files": [
      "crawl-ref/source/clua.cc"
    ],
    "message": "Disable lua load(), loadstring() bytcode loading",
    "before_after_code_files": [
      "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
    ]
  },
  "patch_diff": {
    "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc": [
      "File: crawl-ref/source/clua.cc -> crawl-ref/source/clua.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:     while (!f.eof())",
      "305:         script += f.get_line() + \"\\n\";",
      "308:     return luaL_loadbuffer(ls, &script[0], script.length(),",
      "309:                            (\"@\" + file).c_str());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307:     if (script[0] == 0x1b)",
      "308:         abort();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "797:     lua_pushcfunction(_state, lua_loadstring);",
      "798:     lua_setglobal(_state, \"loadstring\");",
      "801:     cluaopen_kills(_state);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "802:     lua_pushnil(_state);",
      "803:     lua_setglobal(_state, \"load\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3546ee3007dfa4a33ba92ff8e033d07d9824ec67",
      "candidate_info": {
        "commit_hash": "3546ee3007dfa4a33ba92ff8e033d07d9824ec67",
        "repo": "crawl/crawl",
        "commit_url": "https://github.com/crawl/crawl/commit/3546ee3007dfa4a33ba92ff8e033d07d9824ec67",
        "files": [
          "crawl-ref/source/clua.cc"
        ],
        "message": "Disable lua load(), loadstring() bytcode loading\n\n(cherry picked from commit fc522ff6eb1bbb85e3de60c60a45762571e48c28)",
        "before_after_code_files": [
          "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ],
          "candidate": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ]
        }
      },
      "candidate_diff": {
        "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc": [
          "File: crawl-ref/source/clua.cc -> crawl-ref/source/clua.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     while (!f.eof())",
          "261:         script += f.get_line() + \"\\n\";",
          "264:     return luaL_loadbuffer(ls, &script[0], script.length(),",
          "265:                            (\"@\" + file).c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:     if (script[0] == 0x1b)",
          "264:         abort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "683:     lua_pushcfunction(_state, lua_loadstring);",
          "684:     lua_setglobal(_state, \"loadstring\");",
          "687:     cluaopen_kills(_state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:     lua_pushnil(_state);",
          "689:     lua_setglobal(_state, \"load\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0fe87631c7187aa8834c01fa0e4f8818ab011a98",
      "candidate_info": {
        "commit_hash": "0fe87631c7187aa8834c01fa0e4f8818ab011a98",
        "repo": "crawl/crawl",
        "commit_url": "https://github.com/crawl/crawl/commit/0fe87631c7187aa8834c01fa0e4f8818ab011a98",
        "files": [
          "crawl-ref/source/clua.cc"
        ],
        "message": "Disable lua load(), loadstring() bytcode loading\n\n(cherry picked from commit fc522ff6eb1bbb85e3de60c60a45762571e48c28)",
        "before_after_code_files": [
          "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ],
          "candidate": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ]
        }
      },
      "candidate_diff": {
        "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc": [
          "File: crawl-ref/source/clua.cc -> crawl-ref/source/clua.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:     while (!f.eof())",
          "253:         script += f.get_line() + \"\\n\";",
          "256:     return luaL_loadbuffer(ls, &script[0], script.length(),",
          "257:                            (\"@\" + file).c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     if (script[0] == 0x1b)",
          "256:         abort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "664:     lua_pushcfunction(_state, lua_loadstring);",
          "665:     lua_setglobal(_state, \"loadstring\");",
          "668:     cluaopen_kills(_state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:     lua_pushnil(_state);",
          "670:     lua_setglobal(_state, \"load\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f546fdb5acab46310093f6740ac9b74eec8b799",
      "candidate_info": {
        "commit_hash": "4f546fdb5acab46310093f6740ac9b74eec8b799",
        "repo": "crawl/crawl",
        "commit_url": "https://github.com/crawl/crawl/commit/4f546fdb5acab46310093f6740ac9b74eec8b799",
        "files": [
          "crawl-ref/source/clua.cc"
        ],
        "message": "Disable lua load(), loadstring() bytcode loading\n\n(cherry picked from commit fc522ff6eb1bbb85e3de60c60a45762571e48c28)",
        "before_after_code_files": [
          "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ],
          "candidate": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ]
        }
      },
      "candidate_diff": {
        "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc": [
          "File: crawl-ref/source/clua.cc -> crawl-ref/source/clua.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     while (!f.eof())",
          "316:         script += f.get_line() + \"\\n\";",
          "319:     return luaL_loadbuffer(ls, &script[0], script.length(),",
          "320:                            (\"@\" + file).c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     if (script[0] == 0x1b)",
          "319:         abort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "802:     lua_pushcfunction(_state, lua_loadstring);",
          "803:     lua_setglobal(_state, \"loadstring\");",
          "806:     cluaopen_kills(_state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:     lua_pushnil(_state);",
          "808:     lua_setglobal(_state, \"load\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e536e68a2c74d304a1496710f3b3f6a9ef0a6771",
      "candidate_info": {
        "commit_hash": "e536e68a2c74d304a1496710f3b3f6a9ef0a6771",
        "repo": "crawl/crawl",
        "commit_url": "https://github.com/crawl/crawl/commit/e536e68a2c74d304a1496710f3b3f6a9ef0a6771",
        "files": [
          "crawl-ref/source/clua.cc"
        ],
        "message": "Disable lua load(), loadstring() bytcode loading\n\n(cherry picked from commit fc522ff6eb1bbb85e3de60c60a45762571e48c28)",
        "before_after_code_files": [
          "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ],
          "candidate": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ]
        }
      },
      "candidate_diff": {
        "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc": [
          "File: crawl-ref/source/clua.cc -> crawl-ref/source/clua.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     while (!f.eof())",
          "316:         script += f.get_line() + \"\\n\";",
          "319:     return luaL_loadbuffer(ls, &script[0], script.length(),",
          "320:                            (\"@\" + file).c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     if (script[0] == 0x1b)",
          "319:         abort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808:     lua_pushcfunction(_state, lua_loadstring);",
          "809:     lua_setglobal(_state, \"loadstring\");",
          "812:     cluaopen_kills(_state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813:     lua_pushnil(_state);",
          "814:     lua_setglobal(_state, \"load\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c338ae411c429de787589def51aa89989e9ee4ba",
      "candidate_info": {
        "commit_hash": "c338ae411c429de787589def51aa89989e9ee4ba",
        "repo": "crawl/crawl",
        "commit_url": "https://github.com/crawl/crawl/commit/c338ae411c429de787589def51aa89989e9ee4ba",
        "files": [
          "crawl-ref/source/clua.cc"
        ],
        "message": "Disable lua load(), loadstring() bytcode loading\n\n(cherry picked from commit fc522ff6eb1bbb85e3de60c60a45762571e48c28)",
        "before_after_code_files": [
          "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ],
          "candidate": [
            "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc"
          ]
        }
      },
      "candidate_diff": {
        "crawl-ref/source/clua.cc||crawl-ref/source/clua.cc": [
          "File: crawl-ref/source/clua.cc -> crawl-ref/source/clua.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:     while (!f.eof())",
          "310:         script += f.get_line() + \"\\n\";",
          "313:     return luaL_loadbuffer(ls, &script[0], script.length(),",
          "314:                            (\"@\" + file).c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     if (script[0] == 0x1b)",
          "313:         abort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783:     lua_pushcfunction(_state, lua_loadstring);",
          "784:     lua_setglobal(_state, \"loadstring\");",
          "787:     cluaopen_kills(_state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788:     lua_pushnil(_state);",
          "789:     lua_setglobal(_state, \"load\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}