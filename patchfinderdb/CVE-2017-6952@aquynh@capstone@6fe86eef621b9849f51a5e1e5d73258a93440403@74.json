{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a11c9472be1977a708b3c6b39e94050f0730a658",
      "candidate_info": {
        "commit_hash": "a11c9472be1977a708b3c6b39e94050f0730a658",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a11c9472be1977a708b3c6b39e94050f0730a658",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm: update imm in printOperand() to fix error reported by @trufae in PR #764",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:     address = (uint32_t)MI->address + 8;",
          "737:    }",
          "743:    else",
          "745:   } else {",
          "746:    switch(MI->flat_insn->id) {",
          "747:     default:",
          "",
          "[Removed Lines]",
          "739:    address += imm;",
          "741:    if (address > HEX_THRESHOLD)",
          "742:     SStream_concat(O, \"#0x%x\", address);",
          "744:     SStream_concat(O, \"#%u\", address);",
          "",
          "[Added Lines]",
          "739:    imm += address;",
          "741:    if (imm > HEX_THRESHOLD)",
          "742:     SStream_concat(O, \"#0x%x\", imm);",
          "744:     SStream_concat(O, \"#%u\", imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "673d733a2669de7dae03da6b62ab7b7c04470098",
      "candidate_info": {
        "commit_hash": "673d733a2669de7dae03da6b62ab7b7c04470098",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/673d733a2669de7dae03da6b62ab7b7c04470098",
        "files": [
          "arch/M680X/M680XDisassembler.c"
        ],
        "message": "m680x: compile on MSVC 2010",
        "before_after_code_files": [
          "arch/M680X/M680XDisassembler.c||arch/M680X/M680XDisassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M680X/M680XDisassembler.c||arch/M680X/M680XDisassembler.c": [
          "File: arch/M680X/M680XDisassembler.c -> arch/M680X/M680XDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:   return;",
          "433:  for (i = 0; i < m680x->op_count; ++i) {",
          "437:   if (info->insn == M680X_INS_MULD && (i == 1))",
          "438:    offset = 1;",
          "441:   m680x->operands[i].access = access;",
          "442:  }",
          "443: }",
          "",
          "[Removed Lines]",
          "440:   e_access access = get_access(i + offset, access_mode);",
          "",
          "[Added Lines]",
          "434:   e_access access;",
          "441:   access = get_access(i + offset, access_mode);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1727:  cs_m680x *m680x = &info->m680x;",
          "1728:  uint8_t post_byte = 0;",
          "1729:  uint8_t rel = 0;",
          "1731:  read_byte(info, &post_byte, (*address)++);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1731:  cs_m680x_op *op;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1743:  add_reg_operand(info, index_to_reg_id[post_byte & 0x07]);",
          "1747:  op->type = M680X_OP_RELATIVE;",
          "",
          "[Removed Lines]",
          "1745:  cs_m680x_op *op = &m680x->operands[m680x->op_count++];",
          "",
          "[Added Lines]",
          "1747:  op = &m680x->operands[m680x->op_count++];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1797:  cs_detail *detail = MI->flat_insn->detail;",
          "1798:  uint16_t base_address = address;",
          "1799:  insn_desc insn_description;",
          "1801:  if (detail != NULL) {",
          "1802:   detail->regs_read_count = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1802:  e_access_mode access_mode;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1856:    (info->cpu->insn_cc_not_modified[1] != info->insn))",
          "1857:    add_reg_to_rw_list(MI, M680X_REG_CC, MODIFY);",
          "",
          "[Removed Lines]",
          "1859:   e_access_mode access_mode =",
          "1860:    g_insn_props[info->insn].access_mode;",
          "",
          "[Added Lines]",
          "1862:   access_mode = g_insn_props[info->insn].access_mode;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6239a984c7b0fbee31c44d2ae479987e268d8ba3",
      "candidate_info": {
        "commit_hash": "6239a984c7b0fbee31c44d2ae479987e268d8ba3",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6239a984c7b0fbee31c44d2ae479987e268d8ba3",
        "files": [
          "cstool/Makefile",
          "cstool/README",
          "cstool/cstool.c"
        ],
        "message": "cstool 1.0 (#788)\n\n* first cstool -- Segmentation fault: 11\n\n* Modify the format of output.\n\n* Preprocess the input from user. The result of converting looks right but the disassembly is not unsatisfactory.\n\n* Skip the character not in set A = {'a'~'f','A'~'F','0'~'9'}.\ni Please enter the commit message for your changes. Lines starting\n\n* delete cstool binary\n\n* using isxdigit() to tests for any hexadecimal-digit character\n\n* write README\n\n* final version 1.0 for cstool",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <stdio.h>",
          "3: #include <inttypes.h>",
          "4: #include <string.h>",
          "5: #include <ctype.h>",
          "6: #include <errno.h>",
          "8: #include <capstone/capstone.h>",
          "12: static uint8_t char_to_hexnum(char c)",
          "13: {",
          "14:     if (c >= '0' && c <= '9') {",
          "15:         return (uint8_t)(c - '0');",
          "16:     }",
          "18:     if (c >= 'a' && c <= 'f') {",
          "19:         return (uint8_t)(10 + c - 'a');",
          "20:     }",
          "23:     return (uint8_t)(10 + c - 'A');",
          "24: }",
          "27: static uint8_t *preprocess(char *code, size_t *size)",
          "28: {",
          "29:     size_t i, j = 0;",
          "30:     uint8_t high, low;",
          "31:     uint8_t *result;",
          "32:     result = (uint8_t *)malloc(strlen(code));",
          "34:     if (result != NULL) {",
          "35:         while (code[i] != '\\0') {",
          "36:             if (isxdigit(code[i]) && isxdigit(code[i+1])) {",
          "37:                 high = 16 * char_to_hexnum(code[i]);",
          "38:                 low = char_to_hexnum(code[i+1]);",
          "39:                 result[j] = high + low;",
          "40:                 i++;",
          "41:                 j++;",
          "42:             }",
          "43:             i++;",
          "44:         }",
          "46:     }",
          "48:     return result;",
          "49: }",
          "51: static void usage(char * prog)",
          "52: {",
          "53:     printf(\"Syntax: %s <arch+mode> <assembler-string> [start-address-in-hex-format]\\n\", prog);",
          "54:     printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "56:     if (cs_support(CS_ARCH_ARM)) {",
          "57:         printf(\"        arm:       arm\\n\");",
          "58:         printf(\"        armb:      arm + big endian\\n\");",
          "59:         printf(\"        arml:      arm + little endian\\n\");",
          "60:         printf(\"        thumb:     thumb mode\\n\");",
          "61:         printf(\"        thumbbe:   thumb + big endian\\n\");",
          "62:         printf(\"        thumble:   thumb + billtle endian\\n\");",
          "63:     }",
          "65:     if (cs_support(CS_ARCH_ARM64)) {",
          "66:          printf(\"        arm64:     aarch64 mode\\n\");",
          "67:     }",
          "69:     if (cs_support(CS_ARCH_MIPS)) {",
          "70:         printf(\"        mips:      mips32 + little endian\\n\");",
          "71:         printf(\"        mipsbe:    mips32 + big endian\\n\");",
          "72:         printf(\"        mips64:    mips64 + little endian\\n\");",
          "73:         printf(\"        mips64be:  mips64 + big endian\\n\");",
          "74:     }",
          "76:     if (cs_support(CS_ARCH_X86)) {",
          "77:          printf(\"        x16:       16-bit mode (X86)\\n\");",
          "78:          printf(\"        x32:       32-bit mode (X86)\\n\");",
          "79:          printf(\"        x64:       64-bit mode (X86)\\n\");",
          "80:          printf(\"        x16att:    16-bit mode (X86) syntax-att\\n\");",
          "81:          printf(\"        x32att:    32-bit mode (X86) syntax-att\\n\");",
          "82:          printf(\"        x64att:    64-bit mode (X86) syntax-att\\n\");",
          "83:     }",
          "85:     if (cs_support(CS_ARCH_PPC)) {",
          "86:         printf(\"        ppc64:     ppc64 + little endian\\n\");",
          "87:         printf(\"        ppc64be:   ppc64 + big endian\\n\");",
          "88:     }",
          "90:     if (cs_support(CS_ARCH_SPARC)) {",
          "91:         printf(\"        sparc:     sparc\\n\");",
          "92:     }",
          "94:     if (cs_support(CS_ARCH_SYSZ)) {",
          "95:        printf(\"        systemz:   systemz (s390x)\\n\");",
          "96:     }",
          "98:     if (cs_support(CS_ARCH_XCORE)) {",
          "99:         printf(\"        xcore:     xcore\\n\");",
          "100:     }",
          "102:     printf(\"\\n\");",
          "103: }",
          "105: int main(int argc, char **argv)",
          "106: {",
          "107:     csh handle;",
          "108:     char *mode;",
          "109:     uint8_t *assembly;",
          "110:     size_t count, size;",
          "111:     uint64_t address = 0;",
          "112:     cs_insn *insn;",
          "113:     cs_err err;",
          "115:     if (argc != 3 && argc != 4) {",
          "116:         usage(argv[0]);",
          "117:         return -1;",
          "118:     }",
          "120:     mode = argv[1];",
          "121:     assembly = preprocess(argv[2], &size);",
          "122:     if (assembly == NULL) {",
          "123:         printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "124:         return -3;",
          "125:     }",
          "127:     if (argc == 4) {",
          "129:         char *temp;",
          "130:         address = strtoull(argv[3], &temp, 16);",
          "131:         if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "132:             printf(\"ERROR: invalid address argument, quit!\\n\");",
          "133:             return -2;",
          "134:         }",
          "135:     }",
          "137:     if (!strcmp(mode, \"arm\")) {",
          "138:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "139:     }",
          "141:     if (!strcmp(mode, \"armb\")) {",
          "142:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "143:     }",
          "145:     if (!strcmp(mode, \"arml\")) {",
          "146:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "147:     }",
          "149:     if (!strcmp(mode, \"thumb\")) {",
          "150:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "151:     }",
          "153:     if (!strcmp(mode, \"thumbbe\")) {",
          "154:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "155:     }",
          "157:     if (!strcmp(mode, \"thumble\")) {",
          "158:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "159:     }",
          "161:     if (!strcmp(mode, \"arm64\")) {",
          "162:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "163:     }",
          "165:     if (!strcmp(mode, \"mips\")) {",
          "166:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "167:     }",
          "169:     if (!strcmp(mode, \"mipsbe\")) {",
          "170:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "171:     }",
          "173:     if (!strcmp(mode, \"mips64\")) {",
          "174:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "175:     }",
          "177:     if (!strcmp(mode, \"mips64be\")) {",
          "178:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "179:     }",
          "181:     if (!strcmp(mode, \"x16\")) {",
          "182:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "183:     }",
          "185:     if (!strcmp(mode, \"x32\")) {",
          "186:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "187:     }",
          "189:     if (!strcmp(mode, \"x64\")) {",
          "190:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "191:     }",
          "193:     if (!strcmp(mode, \"x16att\")) {",
          "194:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "195:         if (!err) {",
          "196:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "197:         }",
          "198:     }",
          "200:     if (!strcmp(mode,\"x32att\")) {",
          "201:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "202:         if (!err) {",
          "203:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "204:         }",
          "205:     }",
          "207:     if (!strcmp(mode,\"x64att\")) {",
          "208:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "209:         if (!err) {",
          "210:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "211:         }",
          "212:     }",
          "214:     if (!strcmp(mode,\"ppc64\")) {",
          "215:         err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:     }",
          "218:     if (!strcmp(mode,\"ppc64be\")) {",
          "219:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "220:     }",
          "222:     if (!strcmp(mode,\"sparc\")) {",
          "223:         err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "224:     }",
          "226:     if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "227:         err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "228:     }",
          "230:     if (!strcmp(mode,\"xcore\")) {",
          "231:         err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "232:     }",
          "234:     if (err) {",
          "235:         printf(\"ERROR: Failed on cs_open()\\n\");",
          "236:         usage(argv[0]);",
          "237:         return -1;",
          "238:     }",
          "240:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "241:     if (count > 0) {",
          "242:         size_t j;",
          "243:         int i;",
          "245:         printf(\"\\n\");",
          "246:         for (j = 0; j < count; j++) {",
          "247:             printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "248:             for (i = 0; i < insn[j].size; i++) {",
          "249:                 printf(\"%02x\", insn[j].bytes[i]);",
          "250:             }",
          "251:             printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "252:         }",
          "253:         cs_free(insn, count);",
          "254:     } else {",
          "255:         printf(\"ERROR: no any assembly instrution corresponding to your input, please check your input, quit!\\n\");",
          "256:         return(-4);",
          "257:     }",
          "259:     cs_close(&handle);",
          "260:     return 0;",
          "261: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23fe9f36622573c747e2bab6119ff245437bf276",
      "candidate_info": {
        "commit_hash": "23fe9f36622573c747e2bab6119ff245437bf276",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/23fe9f36622573c747e2bab6119ff245437bf276",
        "files": [
          "bindings/python/setup.py"
        ],
        "message": "python-bindings: fix setup.py for wheel installation\n\nWhen the python bindings are installed using the new wheels\ninfrastructure, data_files are relative to the site-packages directory\neven if using absolute paths.\n\nThe following example demonstrates the bug fixed by this commit: (ran on archlinux)\n\n```bash\n$ pip install wheel       # if this package is installed, wheel installation is made the default\nCollecting wheel\n  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)\n    100% |################################| 71kB 124kB/s\nInstalling collected packages: wheel\nSuccessfully installed wheel-0.29.0\n\n$ pip install capstone    # this will use the wheel installation method now\nCollecting capstone\n  Using cached capstone-3.0.4.tar.gz\nBuilding wheels for collected packages: capstone\n  Running setup.py bdist_wheel for capstone ... done\n  Stored in directory: /root/.cache/pip/wheels/7c/d1/d0/db6e2c5ef1063aabb9de2dd8b92b4c27ee6f9fd213240099b8\nSuccessfully built capstone\nInstalling collected packages: capstone\nSuccessfully installed capstone-3.0.4\n\n$ find /usr/lib/ -name \"libcapstone.so\"\n/usr/lib/python3.5/site-packages/usr/lib/python3.5/site-packages/capstone/libcapstone.so\n```\n\nSo the path `SITE_PACKAGES` in the `data_files` specification of the\nsetup.py file was interpreted relative to the python site-packages\ndirectory. The fix for this is simple: use `/capstone` instead of an\nabsolute path for `SITE_PACKAGES`.",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     except ImportError:",
          "34:         pass",
          "37: # adapted from commit e504b81 of Nguyen Tan Cong",
          "38: # Reference: https://docs.python.org/2/library/platform.html#cross-platform",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: # If building a wheel, the path listed in data_files is interpreted relative to",
          "37: # python's site-packages directory, even if it starts with a slash. So we need",
          "38: # to use only `/capstone` as path in this case.",
          "39: #",
          "40: # Note: using `capstone` does not work, since that for some reason is interpreted",
          "41: # relative to the the python installation prefix, not to the site-packages directory.",
          "42: if \"bdist_wheel\" in sys.argv:",
          "43:     SITE_PACKAGES = \"/capstone\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3d38cfa7186514f1cc5517f6872b7646a1bdb7d",
      "candidate_info": {
        "commit_hash": "b3d38cfa7186514f1cc5517f6872b7646a1bdb7d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/b3d38cfa7186514f1cc5517f6872b7646a1bdb7d",
        "files": [
          "cs.c"
        ],
        "message": "fix #673",
        "before_after_code_files": [
          "cs.c||cs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   ud->errnum = CS_ERR_OK;",
          "234:   ud->arch = arch;",
          "235:   ud->mode = mode;",
          "238:   ud->detail = CS_OPT_OFF;",
          "",
          "[Removed Lines]",
          "236:   ud->big_endian = mode & CS_MODE_BIG_ENDIAN;",
          "",
          "[Added Lines]",
          "236:   ud->big_endian = (mode & CS_MODE_BIG_ENDIAN) != 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}