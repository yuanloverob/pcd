{
  "cve_id": "CVE-2018-20748",
  "cve_desc": "LibVNC before 0.9.12 contains multiple heap out-of-bounds write vulnerabilities in libvncclient/rfbproto.c. The fix for CVE-2018-20019 was incomplete.",
  "repo": "LibVNC/libvncserver",
  "patch_hash": "e34bcbb759ca5bef85809967a268fdf214c1ad2c",
  "patch_info": {
    "commit_hash": "e34bcbb759ca5bef85809967a268fdf214c1ad2c",
    "repo": "LibVNC/libvncserver",
    "commit_url": "https://github.com/LibVNC/libvncserver/commit/e34bcbb759ca5bef85809967a268fdf214c1ad2c",
    "files": [
      "libvncclient/rfbproto.c"
    ],
    "message": "LibVNCClient: ignore server-sent reason strings longer than 1MB\n\nFixes #273",
    "before_after_code_files": [
      "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
    ]
  },
  "patch_diff": {
    "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
      "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "412: extern void rfbClientEncryptBytes(unsigned char* bytes, char* passwd);",
      "413: extern void rfbClientEncryptBytes2(unsigned char *where, const int length, unsigned char *key);",
      "415: rfbBool",
      "416: rfbHandleAuthResult(rfbClient* client)",
      "417: {",
      "421:     if (!ReadFromRFBServer(client, (char *)&authResult, 4)) return FALSE;",
      "",
      "[Removed Lines]",
      "418:     uint32_t authResult=0, reasonLen=0;",
      "419:     char *reason=NULL;",
      "",
      "[Added Lines]",
      "415: static void",
      "416: ReadReason(rfbClient* client)",
      "417: {",
      "418:     uint32_t reasonLen;",
      "419:     char *reason;",
      "421:     if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return;",
      "422:     reasonLen = rfbClientSwap32IfLE(reasonLen);",
      "423:     if(reasonLen > 1<<20) {",
      "424:       rfbClientLog(\"VNC connection failed, but sent reason length of %u exceeds limit of 1MB\",(unsigned int)reasonLen);",
      "425:       return;",
      "426:     }",
      "427:     reason = malloc(reasonLen+1);",
      "428:     if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
      "429:     reason[reasonLen]=0;",
      "430:     rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
      "431:     free(reason);",
      "432: }",
      "437:     uint32_t authResult=0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "431:       if (client->major==3 && client->minor>7)",
      "432:       {",
      "441:         return FALSE;",
      "442:       }",
      "443:       rfbClientLog(\"VNC authentication failed\\n\");",
      "",
      "[Removed Lines]",
      "434:         if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return FALSE;",
      "435:         reasonLen = rfbClientSwap32IfLE(reasonLen);",
      "436:         reason = malloc((uint64_t)reasonLen+1);",
      "437:         if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return FALSE; }",
      "438:         reason[reasonLen]=0;",
      "439:         rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
      "440:         free(reason);",
      "",
      "[Added Lines]",
      "452:         ReadReason(client);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "452:     return FALSE;",
      "453: }",
      "471: static rfbBool",
      "472: ReadSupportedSecurityType(rfbClient* client, uint32_t *result, rfbBool subAuth)",
      "",
      "[Removed Lines]",
      "455: static void",
      "456: ReadReason(rfbClient* client)",
      "457: {",
      "458:     uint32_t reasonLen;",
      "459:     char *reason;",
      "462:     if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return;",
      "463:     reasonLen = rfbClientSwap32IfLE(reasonLen);",
      "464:     reason = malloc((uint64_t)reasonLen+1);",
      "465:     if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
      "466:     reason[reasonLen]=0;",
      "467:     rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
      "468:     free(reason);",
      "469: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c2c4b81e6cb3b485fb1ec7ba9e7defeb889f6ba7",
      "candidate_info": {
        "commit_hash": "c2c4b81e6cb3b485fb1ec7ba9e7defeb889f6ba7",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/c2c4b81e6cb3b485fb1ec7ba9e7defeb889f6ba7",
        "files": [
          "libvncclient/rfbproto.c"
        ],
        "message": "LibVNCClient: fail on server-sent desktop name lengths longer than 1MB\n\nre #273",
        "before_after_code_files": [
          "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ],
          "candidate": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ]
        }
      },
      "candidate_diff": {
        "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
          "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1224:   client->si.format.blueMax = rfbClientSwap16IfLE(client->si.format.blueMax);",
          "1225:   client->si.nameLength = rfbClientSwap32IfLE(client->si.nameLength);",
          "1229:   if (!client->desktopName) {",
          "1230:     rfbClientLog(\"Error allocating memory for desktop name, %lu bytes\\n\",",
          "1231:             (unsigned long)client->si.nameLength);",
          "",
          "[Removed Lines]",
          "1228:   client->desktopName = malloc((uint64_t)client->si.nameLength + 1);",
          "",
          "[Added Lines]",
          "1227:   if (client->si.nameLength > 1<<20) {",
          "1228:       rfbClientErr(\"Too big desktop name length sent by server: %u B > 1 MB\\n\", (unsigned int)client->si.nameLength);",
          "1229:       return FALSE;",
          "1230:   }",
          "1232:   client->desktopName = malloc(client->si.nameLength + 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09e8fc02f59f16e2583b34fe1a270c238bd9ffec",
      "candidate_info": {
        "commit_hash": "09e8fc02f59f16e2583b34fe1a270c238bd9ffec",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/09e8fc02f59f16e2583b34fe1a270c238bd9ffec",
        "files": [
          "libvncserver/rfbserver.c"
        ],
        "message": "Limit lenght to INT_MAX bytes in rfbProcessFileTransferReadBuffer()\n\nThis ammends 15bb719c03cc70f14c36a843dcb16ed69b405707 fix for a heap\nout-of-bound write access in rfbProcessFileTransferReadBuffer() when\nreading a transfered file content in a server. The former fix did not\nwork on platforms with a 32-bit int type (expected by rfbReadExact()).\n\nCVE-2018-15127\n<https://github.com/LibVNC/libvncserver/issues/243>\n<https://github.com/LibVNC/libvncserver/issues/273>",
        "before_after_code_files": [
          "libvncserver/rfbserver.c||libvncserver/rfbserver.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libvncserver/rfbserver.c||libvncserver/rfbserver.c": [
          "File: libvncserver/rfbserver.c -> libvncserver/rfbserver.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: #include <errno.h>",
          "90: #include <time.h>",
          "92: #ifdef LIBVNCSERVER_WITH_WEBSOCKETS",
          "93: #include \"rfbssl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1472:        0XFFFFFFFF, i.e. SIZE_MAX for 32-bit systems. On 64-bit systems, a length of 0XFFFFFFFF",
          "1473:        will safely be allocated since this check will never trigger and malloc() can digest length+1",
          "1474:        without problems as length is a uint32_t.",
          "1477:  rfbErr(\"rfbProcessFileTransferReadBuffer: too big file transfer length requested: %u\", (unsigned int)length);",
          "1478:  rfbCloseClient(cl);",
          "1479:  return NULL;",
          "",
          "[Removed Lines]",
          "1476:     if(length == SIZE_MAX) {",
          "",
          "[Added Lines]",
          "1477:        We also later pass length to rfbReadExact() that expects a signed int type and",
          "1478:        that might wrap on platforms with a 32-bit int type if length is bigger",
          "1479:        than 0X7FFFFFFF.",
          "1481:     if(length == SIZE_MAX || length > INT_MAX) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15bb719c03cc70f14c36a843dcb16ed69b405707",
      "candidate_info": {
        "commit_hash": "15bb719c03cc70f14c36a843dcb16ed69b405707",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/15bb719c03cc70f14c36a843dcb16ed69b405707",
        "files": [
          "libvncserver/rfbserver.c"
        ],
        "message": "Error out in rfbProcessFileTransferReadBuffer if length can not be allocated\n\nre #273",
        "before_after_code_files": [
          "libvncserver/rfbserver.c||libvncserver/rfbserver.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libvncserver/rfbserver.c||libvncserver/rfbserver.c": [
          "File: libvncserver/rfbserver.c -> libvncserver/rfbserver.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1461:     int   n=0;",
          "1463:     FILEXFER_ALLOWED_OR_CLOSE_AND_RETURN(\"\", cl, NULL);",
          "1467:     if (length>0) {",
          "1469:         if (buffer!=NULL) {",
          "1470:             if ((n = rfbReadExact(cl, (char *)buffer, length)) <= 0) {",
          "1471:                 if (n != 0)",
          "",
          "[Removed Lines]",
          "1465:     rfbLog(\"rfbProcessFileTransferReadBuffer(%dlen)\\n\", length);",
          "1468:         buffer=malloc((uint64_t)length+1);",
          "",
          "[Added Lines]",
          "1466:        We later alloc length+1, which might wrap around on 32-bit systems if length equals",
          "1467:        0XFFFFFFFF, i.e. SIZE_MAX for 32-bit systems. On 64-bit systems, a length of 0XFFFFFFFF",
          "1468:        will safely be allocated since this check will never trigger and malloc() can digest length+1",
          "1469:        without problems as length is a uint32_t.",
          "1471:     if(length == SIZE_MAX) {",
          "1472:  rfbErr(\"rfbProcessFileTransferReadBuffer: too big file transfer length requested: %u\", (unsigned int)length);",
          "1473:  rfbCloseClient(cl);",
          "1474:  return NULL;",
          "1475:     }",
          "1478:         buffer=malloc((size_t)length+1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a64c3b37af9a6c8f8009d7516874b8d266b42bae",
      "candidate_info": {
        "commit_hash": "a64c3b37af9a6c8f8009d7516874b8d266b42bae",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/a64c3b37af9a6c8f8009d7516874b8d266b42bae",
        "files": [
          "libvncclient/rfbproto.c"
        ],
        "message": "LibVNCClient: remove now-useless cast\n\nre #273",
        "before_after_code_files": [
          "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ],
          "candidate": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ]
        }
      },
      "candidate_diff": {
        "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
          "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:      return FALSE;",
          "2228:     }",
          "2232:     if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {",
          "2233:       free(buffer);",
          "",
          "[Removed Lines]",
          "2230:     buffer = malloc((uint64_t)msg.sct.length+1);",
          "",
          "[Added Lines]",
          "2230:     buffer = malloc(msg.sct.length+1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5ba3fee85a7ecbbca1df5ffd46d32b92757bc2a",
      "candidate_info": {
        "commit_hash": "c5ba3fee85a7ecbbca1df5ffd46d32b92757bc2a",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/c5ba3fee85a7ecbbca1df5ffd46d32b92757bc2a",
        "files": [
          "libvncclient/rfbproto.c"
        ],
        "message": "LibVNCClient: ignore server-sent cut text longer than 1MB\n\nThis is in line with how LibVNCServer does it\n(28afb6c537dc82ba04d5f245b15ca7205c6dbb9c) and fixes part of #273.",
        "before_after_code_files": [
          "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ],
          "candidate": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ]
        }
      },
      "candidate_diff": {
        "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
          "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2218:     msg.sct.length = rfbClientSwap32IfLE(msg.sct.length);",
          "2220:     buffer = malloc((uint64_t)msg.sct.length+1);",
          "2222:     if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2220:     if (msg.sct.length > 1<<20) {",
          "2221:      rfbClientErr(\"Ignoring too big cut text length sent by server: %u B > 1 MB\\n\", (unsigned int)msg.sct.length);",
          "2222:      return FALSE;",
          "2223:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}