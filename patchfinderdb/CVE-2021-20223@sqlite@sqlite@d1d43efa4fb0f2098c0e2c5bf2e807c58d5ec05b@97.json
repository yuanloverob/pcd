{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "634af38115702866491380736bcebc571c623507",
      "candidate_info": {
        "commit_hash": "634af38115702866491380736bcebc571c623507",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/634af38115702866491380736bcebc571c623507",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improved display of \".mode table\" output for empty result sets.\n\nFossilOrigin-Name: 7efabd683b79743b407ad71dda56db00fb0d668828bdc342145816b4f1c3bf3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 362255791f8801e0d9869e36239b8b2cb29c38bf0b86894bd2d159ce46d8447e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2978:     sqlite3_free_table(azData);",
          "2979:     return;",
          "2980:   }",
          "2981:   if( nColumn>p->nWidth ){",
          "2982:     p->colWidth = realloc(p->colWidth, nColumn*2*sizeof(int));",
          "2983:     if( p->colWidth==0 ) shell_out_of_memory();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2981:   if( nRow==0 || nColumn==0 ){",
          "2982:     sqlite3_free_table(azData);",
          "2983:     return;",
          "2984:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "398221e2ad4b553621df09d73b1d0931a52ff269",
      "candidate_info": {
        "commit_hash": "398221e2ad4b553621df09d73b1d0931a52ff269",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/398221e2ad4b553621df09d73b1d0931a52ff269",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Omit the unnecessary not-NULL check on the upper bound of a forward index range scan.  The subsequent OP_IdxGT will always catch the NULL.  Similarly, omit the not-NULL check on the lower bound of a reverse index range scan, as the SeekLE opcode will disallow the NULL.\n\nFossilOrigin-Name: e51ecadcbdef5ce6e41d68412aee70aa4a1416c850358a6fa7e9a1ab443e719d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7fee0b1075d622835dc6828c061be516102da9e2809f52d9ab7c4bbef7dfb871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1755:       Expr *pRight = pRangeStart->pExpr->pRight;",
          "1756:       codeExprOrVector(pParse, pRight, regBase+nEq, nBtm);",
          "1757:       whereLikeOptimizationStringFixup(v, pLevel, pRangeStart);",
          "1759:        && sqlite3ExprCanBeNull(pRight)",
          "1760:       ){",
          "1761:         sqlite3VdbeAddOp2(v, OP_IsNull, regBase+nEq, addrNxt);",
          "",
          "[Removed Lines]",
          "1758:       if( (pRangeStart->wtFlags & TERM_VNULL)==0",
          "",
          "[Added Lines]",
          "1758:       if( !bRev",
          "1759:        && (pRangeStart->wtFlags & TERM_VNULL)==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:       Expr *pRight = pRangeEnd->pExpr->pRight;",
          "1834:       codeExprOrVector(pParse, pRight, regBase+nEq, nTop);",
          "1835:       whereLikeOptimizationStringFixup(v, pLevel, pRangeEnd);",
          "1837:        && sqlite3ExprCanBeNull(pRight)",
          "1838:       ){",
          "1839:         sqlite3VdbeAddOp2(v, OP_IsNull, regBase+nEq, addrNxt);",
          "",
          "[Removed Lines]",
          "1836:       if( (pRangeEnd->wtFlags & TERM_VNULL)==0",
          "",
          "[Added Lines]",
          "1837:       if( bRev",
          "1838:        && (pRangeEnd->wtFlags & TERM_VNULL)==0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b695bab0555648daf9f3c438de11fd1f52993c78",
      "candidate_info": {
        "commit_hash": "b695bab0555648daf9f3c438de11fd1f52993c78",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b695bab0555648daf9f3c438de11fd1f52993c78",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix another fts3 problem with processing corrupt records.\n\nFossilOrigin-Name: 6e0ffa205312416830340ea6e621dfb1a529e5603d569941ed6263930dc28c45",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5208:   );",
          "5209:   if( res ){",
          "5210:     nNew = (int)(pOut - pPhrase->doclist.pList) - 1;",
          "5217:   }",
          "",
          "[Removed Lines]",
          "5211:     assert( pPhrase->doclist.pList[nNew]=='\\0' );",
          "5212:     assert( nNew<=pPhrase->doclist.nList && nNew>0 );",
          "5213:     memset(&pPhrase->doclist.pList[nNew], 0, pPhrase->doclist.nList - nNew);",
          "5214:     pPhrase->doclist.nList = nNew;",
          "",
          "[Added Lines]",
          "5211:     if( nNew>=0 ){",
          "5212:       assert( pPhrase->doclist.pList[nNew]=='\\0' );",
          "5213:       assert( nNew<=pPhrase->doclist.nList && nNew>0 );",
          "5214:       memset(&pPhrase->doclist.pList[nNew], 0, pPhrase->doclist.nList - nNew);",
          "5215:       pPhrase->doclist.nList = nNew;",
          "5216:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61400ef9f1337c77263b4d3e43a1983b0c4cf7137f066a2691768c98877035ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6135:   INSERT INTO f(f) VALUES ('merge=107,2');",
          "6136: }",
          "6138: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6138: #-------------------------------------------------------------------------",
          "6139: reset_db",
          "6140: set saved $sqlite_fts3_enable_parentheses",
          "6141: set sqlite_fts3_enable_parentheses 1",
          "6142: do_execsql_test 43.1 {",
          "6143:   CREATE VIRTUAL TABLE def USING fts3(xyz);",
          "6144:   INSERT INTO def_segdir VALUES(0,0,0,0,0, X'0001310301c9000103323334050d81');",
          "6145: } {}",
          "6147: do_execsql_test 43.2 {",
          "6148:   SELECT rowid FROM def WHERE def MATCH '1 NEAR 1'",
          "6149: } {1}",
          "6151: set sqlite_fts3_enable_parentheses $saved",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5cf3e990a3810d9097b2e6ccc16e81eb824a60d",
      "candidate_info": {
        "commit_hash": "e5cf3e990a3810d9097b2e6ccc16e81eb824a60d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5cf3e990a3810d9097b2e6ccc16e81eb824a60d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Restore a NEVER and an assert in btree that was removed by check-in [7b62555e285f32d3].  Dbsqlfuzz found test cases.\n\nFossilOrigin-Name: 04a05c83f58784df438dc6614f7920f782bf7c1ed4f6d101c03b6573cfde06ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9add58fe9688d5c1f675736e7f1c6ff7831d2ff6fdeb884a2e62c1bf9536ee50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6962:     pData -= sz;",
          "6963:     put2byte(pCellptr, (pData - aData));",
          "6964:     pCellptr += 2;",
          "6966:     memcpy(pData, pCell, sz);",
          "6968:     i++;",
          "6969:     if( i>=iEnd ) break;",
          "6970:     if( pCArray->ixNx[k]<=i ){",
          "",
          "[Removed Lines]",
          "6965:     if( NEVER(pData < pCellptr) ) return SQLITE_CORRUPT_BKPT;",
          "6967:     assert( sz==pPg->xCellSize(pPg, pCell) );",
          "",
          "[Added Lines]",
          "6965:     if( pData < pCellptr ) return SQLITE_CORRUPT_BKPT;",
          "6967:     assert( sz==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6968:     testcase( sz!=pPg->xCellSize(pPg,pCell) )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "936a30598e9d7929c8fb3ef2ee6a7f4511d4c46b",
      "candidate_info": {
        "commit_hash": "936a30598e9d7929c8fb3ef2ee6a7f4511d4c46b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/936a30598e9d7929c8fb3ef2ee6a7f4511d4c46b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Fix ALTER TABLE so that it can run even if the schema contains unknown collation sequences.\n\nFossilOrigin-Name: bc4bb9433fed519386511796cce475d74100b8ed707cdbffd8cbdf683b0faf35",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b72ee694532c0c5d2285dd580154546eb592fd6892cad9ad7a49e98737adb974",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1657:   sqlite3 *db;",
          "1660:   i = p->nCol-1;",
          "1661:   db = pParse->db;",
          "1662:   zColl = sqlite3NameFromToken(db, pToken);",
          "",
          "[Removed Lines]",
          "1659:   if( (p = pParse->pNewTable)==0 ) return;",
          "",
          "[Added Lines]",
          "1659:   if( (p = pParse->pNewTable)==0 || IN_RENAME_OBJECT ) return;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:   SELECT * FROM t1;",
          "678: } {1 2 78 a b 78}",
          "680: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680: #-------------------------------------------------------------------------",
          "681: reset_db",
          "682: db collate compare64 compare64",
          "684: do_execsql_test 23.1 {",
          "685:   CREATE TABLE gigo(a text);",
          "686:   CREATE TABLE idx(x text COLLATE compare64);",
          "687:   CREATE VIEW v1 AS SELECT * FROM idx WHERE x='abc';",
          "688: }",
          "689: db close",
          "690: sqlite3 db test.db",
          "692: do_execsql_test 23.2 {",
          "693:   alter table gigo rename to ggiiggoo;",
          "694:   alter table idx rename to idx2;",
          "695: }",
          "697: do_execsql_test 23.3 {",
          "698:   SELECT sql FROM sqlite_master;",
          "699: } {",
          "700:   {CREATE TABLE \"ggiiggoo\"(a text)}",
          "701:   {CREATE TABLE \"idx2\"(x text COLLATE compare64)}",
          "702:   {CREATE VIEW v1 AS SELECT * FROM \"idx2\" WHERE x='abc'}",
          "703: }",
          "705: do_execsql_test 23.4 {",
          "706:   ALTER TABLE idx2 RENAME x TO y;",
          "707:   SELECT sql FROM sqlite_master;",
          "708: } {",
          "709:   {CREATE TABLE \"ggiiggoo\"(a text)}",
          "710:   {CREATE TABLE \"idx2\"(y text COLLATE compare64)}",
          "711:   {CREATE VIEW v1 AS SELECT * FROM \"idx2\" WHERE y='abc'}",
          "712: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}