{
  "cve_id": "CVE-2017-5207",
  "cve_desc": "Firejail before 0.9.44.4, when running a bandwidth command, allows local users to gain root privileges via the --shell argument.",
  "repo": "netblue30/firejail",
  "patch_hash": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
  "patch_info": {
    "commit_hash": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
    "repo": "netblue30/firejail",
    "commit_url": "https://github.com/netblue30/firejail/commit/5d43fdcd215203868d440ffc42036f5f5ffc89fc",
    "files": [
      "RELNOTES",
      "src/firejail/bandwidth.c"
    ],
    "message": "security fix",
    "before_after_code_files": [
      "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
    ]
  },
  "patch_diff": {
    "src/firejail/bandwidth.c||src/firejail/bandwidth.c": [
      "File: src/firejail/bandwidth.c -> src/firejail/bandwidth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "435:  if (setregid(0, 0))",
      "436:   errExit(\"setregid\");",
      "445:  char *arg[4];",
      "447:  arg[1] = \"-c\";",
      "448:  arg[2] = cmd;",
      "449:  arg[3] = NULL;",
      "",
      "[Removed Lines]",
      "438:  if (!cfg.shell)",
      "439:   cfg.shell = guess_shell();",
      "440:  if (!cfg.shell) {",
      "441:   fprintf(stderr, \"Error: no POSIX shell found, please use --shell command line option\\n\");",
      "442:   exit(1);",
      "443:  }",
      "446:  arg[0] = cfg.shell;",
      "",
      "[Added Lines]",
      "439:  arg[0] = \"/bin/sh\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9aa81442afc6e00ca177bf0e3e7a025195102f7d",
      "candidate_info": {
        "commit_hash": "9aa81442afc6e00ca177bf0e3e7a025195102f7d",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/9aa81442afc6e00ca177bf0e3e7a025195102f7d",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c",
          "src/firejail/util.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs_home.c||src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c",
          "src/firejail/util.c||src/firejail/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "450: void logargs(int argc, char **argv) ;",
          "451: void logerr(const char *msg);",
          "452: int copy_file(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "453: int is_dir(const char *fname);",
          "454: int is_link(const char *fname);",
          "455: char *line_remove_spaces(const char *buf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "454: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode);",
          "",
          "---------------"
        ],
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   if (stat(fname, &s) == 0)",
          "44:    return;",
          "45:   if (stat(\"/etc/skel/.zshrc\", &s) == 0) {",
          "49:   }",
          "58:   }",
          "59:   free(fname);",
          "60:  }",
          "",
          "[Removed Lines]",
          "46:    if (copy_file(\"/etc/skel/.zshrc\", fname, u, g, 0644) == 0) {",
          "47:     fs_logger(\"clone /etc/skel/.zshrc\");",
          "48:    }",
          "50:   else { //",
          "51:    FILE *fp = fopen(fname, \"w\");",
          "52:    if (fp) {",
          "53:     fprintf(fp, \"\\n\");",
          "54:     SET_PERMS_STREAM(fp, u, g, S_IRUSR | S_IWUSR);",
          "55:     fclose(fp);",
          "56:     fs_logger2(\"touch\", fname);",
          "57:    }",
          "",
          "[Added Lines]",
          "45:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "46:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "47:    exit(1);",
          "48:   }",
          "50:    copy_file_as_user(\"/etc/skel/.zshrc\", fname, u, g, 0644);",
          "51:    fs_logger(\"clone /etc/skel/.zshrc\");",
          "53:   else {",
          "54:    touch_file_as_user(fname, u, g, 0644);",
          "55:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   if (asprintf(&fname, \"%s/.cshrc\", homedir) == -1)",
          "65:    errExit(\"asprintf\");",
          "66:   struct stat s;",
          "68:   if (stat(fname, &s) == 0)",
          "69:    return;",
          "70:   if (stat(\"/etc/skel/.cshrc\", &s) == 0) {",
          "74:   }",
          "84:   }",
          "85:   free(fname);",
          "86:  }",
          "",
          "[Removed Lines]",
          "71:    if (copy_file(\"/etc/skel/.cshrc\", fname, u, g, 0644) == 0) {",
          "72:     fs_logger(\"clone /etc/skel/.cshrc\");",
          "73:    }",
          "75:   else { //",
          "77:    FILE *fp = fopen(fname, \"w\");",
          "78:    if (fp) {",
          "79:     fprintf(fp, \"\\n\");",
          "80:     SET_PERMS_STREAM(fp, u, g, S_IRUSR | S_IWUSR);",
          "81:     fclose(fp);",
          "82:     fs_logger2(\"touch\", fname);",
          "83:    }",
          "",
          "[Added Lines]",
          "69:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "70:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "71:    exit(1);",
          "72:   }",
          "74:    copy_file_as_user(\"/etc/skel/.cshrc\", fname, u, g, 0644);",
          "75:    fs_logger(\"clone /etc/skel/.cshrc\");",
          "77:   else {",
          "78:    touch_file_as_user(fname, u, g, 0644);",
          "79:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   if (stat(fname, &s) == 0)",
          "95:    return;",
          "96:   if (stat(\"/etc/skel/.bashrc\", &s) == 0) {",
          "100:   }",
          "101:   free(fname);",
          "102:  }",
          "",
          "[Removed Lines]",
          "97:    if (copy_file(\"/etc/skel/.bashrc\", fname, u, g, 0644) == 0) {",
          "98:     fs_logger(\"clone /etc/skel/.bashrc\");",
          "99:    }",
          "",
          "[Added Lines]",
          "92:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "93:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "94:    exit(1);",
          "95:   }",
          "97:    copy_file_as_user(\"/etc/skel/.bashrc\", fname, u, g, 0644);",
          "98:    fs_logger(\"clone /etc/skel/.bashrc\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:    return 0;",
          "125:   }",
          "148:   return 1; // file copied",
          "149:  }",
          "",
          "[Removed Lines]",
          "127:   pid_t child = fork();",
          "128:   if (child < 0)",
          "129:    errExit(\"fork\");",
          "130:   if (child == 0) {",
          "132:    drop_privs(0);",
          "135:    int rv = copy_file(src, dest, getuid(), getgid(), 0600);",
          "136:    if (rv)",
          "137:     fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "138:    else {",
          "139:     fs_logger2(\"clone\", dest);",
          "140:    }",
          "141: #ifdef HAVE_GCOV",
          "142:    __gcov_flush();",
          "143: #endif",
          "144:    _exit(0);",
          "145:   }",
          "147:   waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "126:   copy_file_as_user(src, dest, getuid(), getgid(), 0600);",
          "127:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:    free(rp);",
          "183:   }",
          "206:   return 1; // file copied",
          "207:  }",
          "",
          "[Removed Lines]",
          "185:   pid_t child = fork();",
          "186:   if (child < 0)",
          "187:    errExit(\"fork\");",
          "188:   if (child == 0) {",
          "190:    drop_privs(0);",
          "193:    int rv = copy_file(src, dest, getuid(), getgid(), 0644);",
          "194:    if (rv)",
          "195:     fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "196:    else {",
          "197:     fs_logger2(\"clone\", dest);",
          "198:    }",
          "199: #ifdef HAVE_GCOV",
          "200:    __gcov_flush();",
          "201: #endif",
          "202:    _exit(0);",
          "203:   }",
          "205:   waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "166:   copy_file_as_user(src, dest, getuid(), getgid(), 0644);",
          "167:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:   exit(1);",
          "223:  }",
          "248:  unlink(src);",
          "",
          "[Removed Lines]",
          "225:  pid_t child = fork();",
          "226:  if (child < 0)",
          "227:   errExit(\"fork\");",
          "228:  if (child == 0) {",
          "230:   drop_privs(0);",
          "233:   int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "234:   if (rv)",
          "235:    fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "236:   else {",
          "237:    fs_logger2(\"clone\", dest);",
          "238:   }",
          "239: #ifdef HAVE_GCOV",
          "240:   __gcov_flush();",
          "241: #endif",
          "242:   _exit(0);",
          "243:  }",
          "245:  waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "187:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "188:  fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "261:   exit(1);",
          "262:  }",
          "287:  unlink(src);",
          "",
          "[Removed Lines]",
          "264:  pid_t child = fork();",
          "265:  if (child < 0)",
          "266:   errExit(\"fork\");",
          "267:  if (child == 0) {",
          "269:   drop_privs(0);",
          "272:   int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "273:   if (rv)",
          "274:    fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "275:   else {",
          "276:    fs_logger2(\"clone\", dest);",
          "277:   }",
          "278: #ifdef HAVE_GCOV",
          "279:   __gcov_flush();",
          "280: #endif",
          "281:   _exit(0);",
          "282:  }",
          "284:  waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "207:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "208:  fs_logger2(\"clone\", dest);",
          "",
          "---------------"
        ],
        "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c": [
          "File: src/firejail/pulseaudio.c -> src/firejail/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <sys/stat.h>",
          "23: #include <sys/mount.h>",
          "24: #include <dirent.h>",
          "26: static void disable_file(const char *path, const char *file) {",
          "27:  assert(file);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <sys/wait.h>",
          "",
          "---------------"
        ],
        "src/firejail/util.c||src/firejail/util.c": [
          "File: src/firejail/util.c -> src/firejail/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <grp.h>",
          "29: #include <sys/ioctl.h>",
          "30: #include <termios.h>",
          "32: #define MAX_GROUPS 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <sys/wait.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  return 0;",
          "219: }",
          "223: int is_dir(const char *fname) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode) {",
          "224:  pid_t child = fork();",
          "225:  if (child < 0)",
          "226:   errExit(\"fork\");",
          "227:  if (child == 0) {",
          "229:   drop_privs(0);",
          "232:   int rv = copy_file(srcname, destname, uid, gid, mode);",
          "233:   if (rv)",
          "234:    fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "235: #ifdef HAVE_GCOV",
          "236:   __gcov_flush();",
          "237: #endif",
          "238:   _exit(0);",
          "239:  }",
          "241:  waitpid(child, NULL, 0);",
          "242: }",
          "245: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode) {",
          "246:  pid_t child = fork();",
          "247:  if (child < 0)",
          "248:   errExit(\"fork\");",
          "249:  if (child == 0) {",
          "251:   drop_privs(0);",
          "253:   FILE *fp = fopen(fname, \"w\");",
          "254:   if (fp) {",
          "255:    fprintf(fp, \"\\n\");",
          "256:    SET_PERMS_STREAM(fp, uid, gid, mode);",
          "257:    fclose(fp);",
          "258:   }",
          "259: #ifdef HAVE_GCOV",
          "260:   __gcov_flush();",
          "261: #endif",
          "262:   _exit(0);",
          "263:  }",
          "265:  waitpid(child, NULL, 0);",
          "266: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85517885bece9209bbcace80fec115b0126263ad",
      "candidate_info": {
        "commit_hash": "85517885bece9209bbcace80fec115b0126263ad",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/85517885bece9209bbcace80fec115b0126263ad",
        "files": [
          "RELNOTES",
          "src/firejail/main.c",
          "src/man/firejail.txt"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/main.c||src/firejail/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/main.c||src/firejail/main.c": [
          "File: src/firejail/main.c -> src/firejail/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <signal.h>",
          "36: #include <time.h>",
          "37: #include <net/if.h>",
          "39: #if 0",
          "40: #include <sys/times.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <sys/utsname.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "818:  if (check_arg(argc, argv, \"--quiet\"))",
          "819:   arg_quiet = 1;",
          "821:   arg_allow_debuggers = 1;",
          "824:  EUID_INIT();",
          "",
          "[Removed Lines]",
          "820:  if (check_arg(argc, argv, \"--allow-debuggers\"))",
          "",
          "[Added Lines]",
          "821:  if (check_arg(argc, argv, \"--allow-debuggers\")) {",
          "823:   struct utsname u;",
          "824:   int rv = uname(&u);",
          "825:   if (rv != 0)",
          "826:    errExit(\"uname\");",
          "827:   int major;",
          "828:   int minor;",
          "829:   if (2 != sscanf(u.release, \"%d.%d\", &major, &minor)) {",
          "830:    fprintf(stderr, \"Error: cannot extract Linux kernel version: %s\\n\", u.version);",
          "831:    exit(1);",
          "832:   }",
          "833:   if (major < 4 || (major == 4 && minor < 8)) {",
          "834:    fprintf(stderr, \"Error: --allow-debuggers is disabled on Linux kernels prior to 4.8. \"",
          "835:     \"A bug in ptrace call allows a full bypass of the seccomp filter. \"",
          "836:     \"Your current kernel version is %d.%d.\\n\", major, minor);",
          "837:    exit(1);",
          "838:   }",
          "841:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60d4b478f65c60bcc825bb56f85fd6c4fd48b250",
      "candidate_info": {
        "commit_hash": "60d4b478f65c60bcc825bb56f85fd6c4fd48b250",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/60d4b478f65c60bcc825bb56f85fd6c4fd48b250",
        "files": [
          "RELNOTES",
          "src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/fs_home.c||src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:  char *dest;",
          "168:  if (asprintf(&dest, \"%s/.Xauthority\", cfg.homedir) == -1)",
          "169:   errExit(\"asprintf\");",
          "171:  int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "172:  if (rv)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:  if (is_link(dest)) {",
          "173:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "174:   exit(1);",
          "175:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:  char *dest;",
          "186:  if (asprintf(&dest, \"%s/.asoundrc\", cfg.homedir) == -1)",
          "187:   errExit(\"asprintf\");",
          "189:  int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "190:  if (rv)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:  if (is_link(dest)) {",
          "198:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "199:   exit(1);",
          "200:  }",
          "",
          "---------------"
        ],
        "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c": [
          "File: src/firejail/pulseaudio.c -> src/firejail/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     {;} // do nothing",
          "134:   }",
          "135:  }",
          "136:  free(dir1);",
          "137:  if (asprintf(&dir1, \"%s/.config/pulse\", cfg.homedir) == -1)",
          "138:   errExit(\"asprintf\");",
          "139:  if (stat(dir1, &s) == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  else {",
          "138:   if (s.st_uid != getuid()) {",
          "139:    fprintf(stderr, \"Error: user .config directory is not owned by the current user\\n\");",
          "140:    exit(1);",
          "141:   }",
          "142:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     {;} // do nothing",
          "145:   }",
          "146:  }",
          "147:  free(dir1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:  else {",
          "157:   if (s.st_uid != getuid()) {",
          "158:    fprintf(stderr, \"Error: user .config/pulse directory is not owned by the current user\\n\");",
          "159:    exit(1);",
          "160:   }",
          "161:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b81e1f2c331644ced87d26a943b22eed6242b8f",
      "candidate_info": {
        "commit_hash": "3b81e1f2c331644ced87d26a943b22eed6242b8f",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/3b81e1f2c331644ced87d26a943b22eed6242b8f",
        "files": [
          "RELNOTES",
          "src/firejail/bandwidth.c",
          "src/firejail/fs_bin.c",
          "src/firejail/fs_etc.c",
          "src/firejail/netfilter.c",
          "src/firejail/run_symlink.c",
          "src/firejail/sandbox.c",
          "src/firejail/sbox.c",
          "src/firejail/x11.c"
        ],
        "message": "security: env variables",
        "before_after_code_files": [
          "src/firejail/bandwidth.c||src/firejail/bandwidth.c",
          "src/firejail/fs_bin.c||src/firejail/fs_bin.c",
          "src/firejail/fs_etc.c||src/firejail/fs_etc.c",
          "src/firejail/netfilter.c||src/firejail/netfilter.c",
          "src/firejail/run_symlink.c||src/firejail/run_symlink.c",
          "src/firejail/sandbox.c||src/firejail/sandbox.c",
          "src/firejail/sbox.c||src/firejail/sbox.c",
          "src/firejail/x11.c||src/firejail/x11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ],
          "candidate": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/bandwidth.c||src/firejail/bandwidth.c": [
          "File: src/firejail/bandwidth.c -> src/firejail/bandwidth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:  arg[1] = \"-c\";",
          "463:  arg[2] = cmd;",
          "464:  arg[3] = NULL;",
          "465:  execvp(arg[0], arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:  assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ],
        "src/firejail/fs_bin.c||src/firejail/fs_bin.c": [
          "File: src/firejail/fs_bin.c -> src/firejail/fs_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     char *f;",
          "192:     if (asprintf(&f, \"%s/%s\", RUN_BIN_DIR, fname) == -1)",
          "193:      errExit(\"asprintf\");",
          "194:     execlp(RUN_CP_COMMAND, RUN_CP_COMMAND, \"-a\", actual_path, f, NULL);",
          "195:     perror(\"execlp\");",
          "196:     _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ],
        "src/firejail/fs_etc.c||src/firejail/fs_etc.c": [
          "File: src/firejail/fs_etc.c -> src/firejail/fs_etc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   char *f;",
          "106:   if (asprintf(&f, \"/etc/%s\", fname) == -1)",
          "107:    errExit(\"asprintf\");",
          "108:   execlp(RUN_CP_COMMAND, RUN_CP_COMMAND, \"-a\", \"--parents\", f, RUN_MNT_DIR, NULL);",
          "109:   perror(\"execlp\");",
          "110:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ],
        "src/firejail/netfilter.c||src/firejail/netfilter.c": [
          "File: src/firejail/netfilter.c -> src/firejail/netfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   environ = NULL;",
          "147:   execl(iptables_restore, iptables_restore, NULL);",
          "148:   perror(\"execl\");",
          "149:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:    if (setregid(0, 0))",
          "164:     errExit(\"setregid\");",
          "165:    environ = NULL;",
          "166:    execl(iptables, iptables, \"-vL\", NULL);",
          "167:    perror(\"execl\");",
          "168:    _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:    assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:   environ = NULL;",
          "260:   execl(ip6tables_restore, ip6tables_restore, NULL);",
          "261:   perror(\"execl\");",
          "262:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ],
        "src/firejail/run_symlink.c||src/firejail/run_symlink.c": [
          "File: src/firejail/run_symlink.c -> src/firejail/run_symlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   a[i + 2] = argv[i + 1];",
          "107:  }",
          "108:  a[i + 2] = NULL;",
          "109:  execvp(a[0], a);",
          "111:  perror(\"execvp\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:  assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ],
        "src/firejail/sandbox.c||src/firejail/sandbox.c": [
          "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:  char *audit_prog;",
          "261:  if (asprintf(&audit_prog, \"%s/firejail/faudit\", LIBDIR) == -1)",
          "262:   errExit(\"asprintf\");",
          "263:  execl(audit_prog, audit_prog, NULL);",
          "264:  perror(\"execl\");",
          "265:  exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:  assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268: void start_application(void) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:  env_defaults();",
          "275:  env_apply();",
          "276:  if (arg_debug) {",
          "277:   printf(\"starting application\\n\");",
          "278:   printf(\"LD_PRELOAD=%s\\n\", getenv(\"LD_PRELOAD\"));",
          "279:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "787:   }",
          "788:  }",
          "797:  if (arg_nice) {",
          "798:   errno = 0;",
          "",
          "[Removed Lines]",
          "791:  env_defaults();",
          "794:  env_apply();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/firejail/sbox.c||src/firejail/sbox.c": [
          "File: src/firejail/sbox.c -> src/firejail/sbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   else if (filter & SBOX_USER)",
          "166:    drop_privs(1);",
          "168:   if (arg[0]) // get rid of scan-build warning",
          "169:    execvp(arg[0], arg);",
          "170:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ],
        "src/firejail/x11.c||src/firejail/x11.c": [
          "File: src/firejail/x11.c -> src/firejail/x11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:  if (server == 0) {",
          "312:   if (arg_debug)",
          "313:    printf(\"Starting xephyr...\\n\");",
          "315:   execvp(server_argv[0], server_argv);",
          "316:   perror(\"execvp\");",
          "317:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:   if (!arg_quiet)",
          "354:    printf(\"\\n*** Attaching to Xephyr display %d ***\\n\\n\", display);",
          "356:   execvp(jail_argv[0], jail_argv);",
          "357:   perror(\"execvp\");",
          "358:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432:    dup2(fd_null,2);",
          "433:   }",
          "435:   execvp(server_argv[0], server_argv);",
          "436:   perror(\"execvp\");",
          "437:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478:   if (!arg_quiet)",
          "479:    printf(\"\\n*** Attaching to xpra display %d ***\\n\\n\", display);",
          "481:   execvp(attach_argv[0], attach_argv);",
          "482:   perror(\"execvp\");",
          "483:   _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "508:  if (jail < 0)",
          "509:   errExit(\"fork\");",
          "510:  if (jail == 0) {",
          "511:   if (firejail_argv[0]) // shut up llvm scan-build",
          "512:    execvp(firejail_argv[0], firejail_argv);",
          "513:   perror(\"execvp\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "534:      dup2(fd_null,1);",
          "535:      dup2(fd_null,2);",
          "536:     }",
          "537:     execvp(stop_argv[0], stop_argv);",
          "538:     perror(\"execvp\");",
          "539:     _exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:     assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "664:    errExit(\"setreuid\");",
          "665:   if (setregid(0, 0) < 0)",
          "666:    errExit(\"setregid\");",
          "668:   char *display = getenv(\"DISPLAY\");",
          "669:   if (!display)",
          "670:    display = \":0.0\";",
          "672:   execlp(\"/usr/bin/xauth\", \"/usr/bin/xauth\", \"-f\", RUN_XAUTHORITY_SEC_FILE,",
          "673:    \"generate\", display, \"MIT-MAGIC-COOKIE-1\", \"untrusted\", NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15298f20afeaff362c74e8ad7e66338f442cf441",
      "candidate_info": {
        "commit_hash": "15298f20afeaff362c74e8ad7e66338f442cf441",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/15298f20afeaff362c74e8ad7e66338f442cf441",
        "files": [
          "src/firejail/bandwidth.c",
          "src/firejail/fs_bin.c",
          "src/firejail/fs_etc.c",
          "src/firejail/netfilter.c",
          "src/firejail/sbox.c"
        ],
        "message": "execv fixes",
        "before_after_code_files": [
          "src/firejail/bandwidth.c||src/firejail/bandwidth.c",
          "src/firejail/fs_bin.c||src/firejail/fs_bin.c",
          "src/firejail/fs_etc.c||src/firejail/fs_etc.c",
          "src/firejail/netfilter.c||src/firejail/netfilter.c",
          "src/firejail/sbox.c||src/firejail/sbox.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ],
          "candidate": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/bandwidth.c||src/firejail/bandwidth.c": [
          "File: src/firejail/bandwidth.c -> src/firejail/bandwidth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:  arg[1] = \"-c\";",
          "463:  arg[2] = cmd;",
          "464:  arg[3] = NULL;",
          "466:  execvp(arg[0], arg);",
          "",
          "[Removed Lines]",
          "465:  assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "[Added Lines]",
          "465:  clearenv();",
          "",
          "---------------"
        ],
        "src/firejail/fs_bin.c||src/firejail/fs_bin.c": [
          "File: src/firejail/fs_bin.c -> src/firejail/fs_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     char *f;",
          "192:     if (asprintf(&f, \"%s/%s\", RUN_BIN_DIR, fname) == -1)",
          "193:      errExit(\"asprintf\");",
          "195:     execlp(RUN_CP_COMMAND, RUN_CP_COMMAND, \"-a\", actual_path, f, NULL);",
          "196:     perror(\"execlp\");",
          "197:     _exit(1);",
          "",
          "[Removed Lines]",
          "194:     assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "[Added Lines]",
          "194:     clearenv();",
          "",
          "---------------"
        ],
        "src/firejail/fs_etc.c||src/firejail/fs_etc.c": [
          "File: src/firejail/fs_etc.c -> src/firejail/fs_etc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   char *f;",
          "106:   if (asprintf(&f, \"/etc/%s\", fname) == -1)",
          "107:    errExit(\"asprintf\");",
          "109:   execlp(RUN_CP_COMMAND, RUN_CP_COMMAND, \"-a\", \"--parents\", f, RUN_MNT_DIR, NULL);",
          "110:   perror(\"execlp\");",
          "111:   _exit(1);",
          "",
          "[Removed Lines]",
          "108:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "[Added Lines]",
          "108:   clearenv();",
          "",
          "---------------"
        ],
        "src/firejail/netfilter.c||src/firejail/netfilter.c": [
          "File: src/firejail/netfilter.c -> src/firejail/netfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:   dup2(fd,STDIN_FILENO);",
          "148:   execl(iptables_restore, iptables_restore, NULL);",
          "149:   perror(\"execl\");",
          "150:   _exit(1);",
          "",
          "[Removed Lines]",
          "146:   environ = NULL;",
          "147:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "[Added Lines]",
          "146:   clearenv();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   dup2(fd,STDIN_FILENO);",
          "263:   execl(ip6tables_restore, ip6tables_restore, NULL);",
          "264:   perror(\"execl\");",
          "265:   _exit(1);",
          "",
          "[Removed Lines]",
          "261:   environ = NULL;",
          "262:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "[Added Lines]",
          "260:   clearenv();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:   if (child < 0)",
          "274:    errExit(\"fork\");",
          "275:   if (child == 0) {",
          "277:    execl(ip6tables, ip6tables, \"-vL\", NULL);",
          "278:    perror(\"execl\");",
          "279:    _exit(1);",
          "",
          "[Removed Lines]",
          "276:    environ = NULL;",
          "",
          "[Added Lines]",
          "274:    clearenv();",
          "",
          "---------------"
        ],
        "src/firejail/sbox.c||src/firejail/sbox.c": [
          "File: src/firejail/sbox.c -> src/firejail/sbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   else if (filter & SBOX_USER)",
          "166:    drop_privs(1);",
          "169:   if (arg[0]) // get rid of scan-build warning",
          "170:    execvp(arg[0], arg);",
          "171:   else",
          "",
          "[Removed Lines]",
          "168:   assert(getenv(\"LD_PRELOAD\") == NULL);",
          "",
          "[Added Lines]",
          "168:   clearenv();",
          "",
          "---------------"
        ]
      }
    }
  ]
}