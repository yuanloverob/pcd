{
  "cve_id": "CVE-2018-15862",
  "cve_desc": "Unchecked NULL pointer usage in LookupModMask in xkbcomp/expr.c in xkbcommon before 0.8.2 could be used by local attackers to crash (NULL pointer dereference) the xkbcommon parser by supplying a crafted keymap file with invalid virtual modifiers.",
  "repo": "xkbcommon/libxkbcommon",
  "patch_hash": "4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
  "patch_info": {
    "commit_hash": "4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
    "repo": "xkbcommon/libxkbcommon",
    "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
    "files": [
      "src/xkbcomp/expr.c"
    ],
    "message": "xkbcomp: Don't explode on invalid virtual modifiers\n\ntestcase: 'virtualModifiers=LevelThreC'\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
    "before_after_code_files": [
      "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
    ]
  },
  "patch_diff": {
    "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
      "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "101:         return false;",
      "103:     str = xkb_atom_text(ctx, field);",
      "105:     if (istreq(str, \"all\")) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104:     if (!str)",
      "105:         return false;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb4909d2d8fa6b08155e449986a478101e2b2634",
      "candidate_info": {
        "commit_hash": "bb4909d2d8fa6b08155e449986a478101e2b2634",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/bb4909d2d8fa6b08155e449986a478101e2b2634",
        "files": [
          "src/xkbcomp/expr.c"
        ],
        "message": "Fail expression lookup on invalid atoms\n\nIf we fail atom lookup, then we should not claim that we successfully\nlooked up the expression.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [
            "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
          ],
          "candidate": [
            "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
          "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     case EXPR_ARRAY_REF:",
          "55:         return true;",
          "56:     default:",
          "57:         break;",
          "",
          "[Removed Lines]",
          "50:         return true;",
          "",
          "[Added Lines]",
          "50:         return (*elem_rtrn != NULL && *field_rtrn != NULL);",
          "55:  if (expr->array_ref.element != XKB_ATOM_NONE && *elem_rtrn == NULL)",
          "56:   return false;",
          "57:  if (*field_rtrn == NULL)",
          "58:   return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae7856db48be161cb336c44fd188253bc06dd5ae",
      "candidate_info": {
        "commit_hash": "ae7856db48be161cb336c44fd188253bc06dd5ae",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/ae7856db48be161cb336c44fd188253bc06dd5ae",
        "files": [
          "src/text.c"
        ],
        "message": "text: NULL-terminate SI mask names\n\nThe list should have a NULL sentry. Add one.\n\ntestcase: 'interpret KP_Delete+AnyOfOrNaneo(ll)'\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/text.c||src/text.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/text.c||src/text.c": [
          "File: src/text.c -> src/text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     { \"AnyOf\", MATCH_ANY },",
          "205:     { \"AllOf\", MATCH_ALL },",
          "206:     { \"Exactly\", MATCH_EXACTLY },",
          "207: };",
          "209: const char *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     { NULL, 0 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96df3106d49438e442510c59acad306e94f3db4d",
      "candidate_info": {
        "commit_hash": "96df3106d49438e442510c59acad306e94f3db4d",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/96df3106d49438e442510c59acad306e94f3db4d",
        "files": [
          "src/xkbcomp/compat.c"
        ],
        "message": "xkbcomp: Don't crash on no-op modmask expressions\n\nIf we have an expression of the form 'l1' in an interp section, we\nunconditionally try to dereference its args, even if it has none.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/compat.c||src/xkbcomp/compat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/compat.c||src/xkbcomp/compat.c": [
          "File: src/xkbcomp/compat.c -> src/xkbcomp/compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:     if (expr->expr.op == EXPR_ACTION_DECL) {",
          "266:         const char *pred_txt = xkb_atom_text(info->ctx, expr->action.name);",
          "268:             log_err(info->ctx,",
          "269:                     \"Illegal modifier predicate \\\"%s\\\"; Ignored\\n\", pred_txt);",
          "270:             return false;",
          "",
          "[Removed Lines]",
          "267:         if (!LookupString(symInterpretMatchMaskNames, pred_txt, pred_rtrn)) {",
          "",
          "[Added Lines]",
          "267:         if (!LookupString(symInterpretMatchMaskNames, pred_txt, pred_rtrn) ||",
          "268:             !expr->action.args) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fcbc47059aa6c714fa87bc24115edcad86ca5bb",
      "candidate_info": {
        "commit_hash": "4fcbc47059aa6c714fa87bc24115edcad86ca5bb",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/4fcbc47059aa6c714fa87bc24115edcad86ca5bb",
        "files": [
          "src/darray.h"
        ],
        "message": "darray: Don't call memcpy() on NULL\n\nThe only time we could ever hit this was with count == 0, which seems\nunnecessarily pedantic. But OK.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/darray.h||src/darray.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/darray.h||src/darray.h": [
          "File: src/darray.h -> src/darray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: #define darray_from_items(arr, items, count) do { \\",
          "105:     unsigned __count = (count); \\",
          "106:     darray_resize(arr, __count); \\",
          "108: } while (0)",
          "110: #define darray_copy(arr_to, arr_from) \\",
          "",
          "[Removed Lines]",
          "107:     memcpy((arr).item, items, __count * sizeof(*(arr).item)); \\",
          "",
          "[Added Lines]",
          "107:     if (count != 0) \\",
          "108:         memcpy((arr).item, items, __count * sizeof(*(arr).item)); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8ea7a1d3daa7bdcb877615ae0a252c189153bd2",
      "candidate_info": {
        "commit_hash": "a8ea7a1d3daa7bdcb877615ae0a252c189153bd2",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/a8ea7a1d3daa7bdcb877615ae0a252c189153bd2",
        "files": [
          "src/xkbcomp/parser.y"
        ],
        "message": "parser: Don't set more maps when we don't have any\n\nIf the scanner indicates that we might have something which looks like a\nmap, but the parser in fact fails to create that map, we will try to\naccess the map regardless. Stop doing that.\n\ntestcase: 'xkb_keymap {' -> '#kb_keymap'\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/parser.y||src/xkbcomp/parser.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/parser.y||src/xkbcomp/parser.y": [
          "File: src/xkbcomp/parser.y -> src/xkbcomp/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "241: XkbFile         :       XkbCompositeMap",
          "243:                 |       XkbMapConfig",
          "245:                 |       END_OF_FILE",
          "246:                         { $$ = param->rtrn = NULL; param->more_maps = false; }",
          "247:                 ;",
          "",
          "[Removed Lines]",
          "242:                         { $$ = param->rtrn = $1; param->more_maps = true; }",
          "244:                         { $$ = param->rtrn = $1; param->more_maps = true; YYACCEPT; }",
          "",
          "[Added Lines]",
          "242:                         { $$ = param->rtrn = $1; param->more_maps = !!param->rtrn; }",
          "244:                         { $$ = param->rtrn = $1; param->more_maps = !!param->rtrn; YYACCEPT; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772:         .scanner = scanner,",
          "773:         .ctx = ctx,",
          "774:         .rtrn = NULL,",
          "775:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:         .more_maps = false,",
          "",
          "---------------"
        ]
      }
    }
  ]
}