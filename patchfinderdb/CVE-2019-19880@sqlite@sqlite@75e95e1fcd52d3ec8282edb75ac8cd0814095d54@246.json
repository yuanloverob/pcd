{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f6febee0e23977215e824caa261d328036b3b3f0",
      "candidate_info": {
        "commit_hash": "f6febee0e23977215e824caa261d328036b3b3f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6febee0e23977215e824caa261d328036b3b3f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/snapshot_fault.test"
        ],
        "message": "Update the coverage-wal permutation to cover branches enabled by SQLITE_ENABLE_SNAPSHOT.\n\nFossilOrigin-Name: 6821c61f1d71be2be7f867e59fd94582a1eaf45a4d1fb88be995807a77cc22ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/snapshot_fault.test||test/snapshot_fault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14a64df36efe0dc36795311d58385f9c65dc465b214059e07c2ee6b95ea99c87",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "440:   walfault2.test",
          "442:   nockpt.test",
          "443: }",
          "445: test_suite \"coverage-pager\" -description {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:   snapshot2.test snapshot3.test snapshot4.test",
          "444:   snapshot_fault.test snapshot.test snapshot_up.test",
          "",
          "---------------"
        ],
        "test/snapshot_fault.test||test/snapshot_fault.test": [
          "File: test/snapshot_fault.test -> test/snapshot_fault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   faultsim_test_result {0 {}} {1 SQLITE_IOERR}",
          "222: }",
          "226: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: #-------------------------------------------------------------------------",
          "225: # Test the handling of faults that occur within sqlite3_snapshot_get().",
          "226: #",
          "227: reset_db",
          "228: do_execsql_test 5.0 {",
          "229:   PRAGMA page_size = 512;",
          "230:   PRAGMA journal_mode = wal;",
          "231:   PRAGMA wal_autocheckpoint = 0;",
          "232:   CREATE TABLE t1(zzz);",
          "233:   INSERT INTO t1 VALUES(randomblob( 5000 ));",
          "234:   PRAGMA user_version = 211;",
          "235: } {wal 0}",
          "236: faultsim_save_and_close",
          "238: do_faultsim_test 5 -prep {",
          "239:   faultsim_restore_and_reopen",
          "240:   execsql { SELECT count(*) FROM sqlite_master }",
          "241:   execsql BEGIN",
          "242: } -body {",
          "243:   sqlite3_snapshot_get_blob db main",
          "244:   set {} {}",
          "245: } -test {",
          "246:   execsql END",
          "247:   faultsim_test_result {0 {}} {1 SQLITE_IOERR} {1 SQLITE_NOMEM}",
          "248: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22de8357dfbc077ecedb1ebe7439a409f7903c6b",
      "candidate_info": {
        "commit_hash": "22de8357dfbc077ecedb1ebe7439a409f7903c6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22de8357dfbc077ecedb1ebe7439a409f7903c6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6314e386c6877c669bd32788d3886253b0a187bee2c3889f4eaba219f5e52c7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:     assert( pExpr->y.pTab!=0 );",
          "574:     assert( pMatch->iCursor==pExpr->iTable );",
          "575:     if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){",
          "578:     }",
          "579:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "580:   }",
          "",
          "[Removed Lines]",
          "576:       Column *pCol = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pCol->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "[Added Lines]",
          "576:       Column *pColumn = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pColumn->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20945729559e42520d786652c09b00cc9e414f2",
      "candidate_info": {
        "commit_hash": "e20945729559e42520d786652c09b00cc9e414f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20945729559e42520d786652c09b00cc9e414f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Consolidate the removal of Window objects from the Select.pWin list into a single subroutine.\n\nFossilOrigin-Name: e46b2afc99329c43de08d4a2e6ade4d2239d7409c5d5626bf272a3e0dd24d1b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05080344dceafcfb670fbf01f7d69a1d713a54b6845f968a9cfe941fb53b13af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1306:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1313:   }",
          "1314:   return WRC_Continue;",
          "1315: }",
          "",
          "[Removed Lines]",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "1312:     }",
          "",
          "[Added Lines]",
          "1308:     sqlite3WindowUnlinkFromSelect(pWin);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3615: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "3616: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3617: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3618: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3619: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3617: void sqlite3WindowUnlinkFromSelect(Window*);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017:   return rc;",
          "1018: }",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1029:     sqlite3ExprDelete(db, p->pFilter);",
          "1030:     sqlite3ExprListDelete(db, p->pPartition);",
          "1031:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "[Added Lines]",
          "1024: void sqlite3WindowUnlinkFromSelect(Window *p){",
          "1025:   if( p->ppThis ){",
          "1027:     if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     p->ppThis = 0;",
          "1029:   }",
          "1030: }",
          "1037:     sqlite3WindowUnlinkFromSelect(p);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "495ed62e850f449e566a06ff827db1447cf03fcb",
      "candidate_info": {
        "commit_hash": "495ed62e850f449e566a06ff827db1447cf03fcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/495ed62e850f449e566a06ff827db1447cf03fcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Frame range comparisons can never be NULL because the values will have been checked for NULL prior to the test.\n\nFossilOrigin-Name: fa37cf9a6aa3e4325674cb6af68f617d25e349c3f694d0117a19a36fc42daf15",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a69bb4f257500e40ef4056d5628ef25266def5bcef07eebdb471a79fffe80237",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2543:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2544:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2545:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2549:     windowAggFinal(&s, 0);",
          "2550:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2551:     VdbeCoverageNeverTaken(v);",
          "",
          "[Removed Lines]",
          "2546:     VdbeCoverage(v);",
          "2547:     VdbeCoverageIf(v, op==OP_Ge);",
          "2548:     VdbeCoverageIf(v, op==OP_Le);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fd7eaf3f291044b6a5154f43e7281c9adb592a9",
      "candidate_info": {
        "commit_hash": "3fd7eaf3f291044b6a5154f43e7281c9adb592a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fd7eaf3f291044b6a5154f43e7281c9adb592a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Avoid using non-ANSI return statement in void function sqlite3WalSnapshotUnlock().\n\nFossilOrigin-Name: 4a4952d38e8177ed8d59aaa575410bebf76787dd6d801fdbdb809d4f8c670da0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b41222428dcebaae2e9a0e8192e091b6fdee5b1163a5fa14ca1cd4f06354983",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7698: void sqlite3PagerSnapshotUnlock(Pager *pPager){",
          "7699:   assert( pPager->pWal );",
          "7701: }",
          "",
          "[Removed Lines]",
          "7700:   return sqlite3WalSnapshotUnlock(pPager->pWal);",
          "",
          "[Added Lines]",
          "7700:   sqlite3WalSnapshotUnlock(pPager->pWal);",
          "",
          "---------------"
        ]
      }
    }
  ]
}