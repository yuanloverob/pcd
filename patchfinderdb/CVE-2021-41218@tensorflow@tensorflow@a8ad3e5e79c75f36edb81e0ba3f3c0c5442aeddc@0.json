{
  "cve_id": "CVE-2021-41218",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the shape inference code for `AllToAll` can be made to execute a division by 0. This occurs whenever the `split_count` argument is 0. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc",
  "patch_info": {
    "commit_hash": "a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc",
    "files": [
      "tensorflow/core/ops/tpu_cross_replica_ops.cc",
      "tensorflow/python/tpu/tpu_test.py"
    ],
    "message": "Update TPU AllToAll op to avoid divide by 0.\n\nPiperOrigin-RevId: 400259638\nChange-Id: Ic4cfe4fe7159da38caed8044ee005f898e42cd86",
    "before_after_code_files": [
      "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
      "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc": [
      "File: tensorflow/core/ops/tpu_cross_replica_ops.cc -> tensorflow/core/ops/tpu_cross_replica_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:     .Attr(\"split_count: int\")",
      "33:     .SetShapeFn([](InferenceContext* c) {",
      "34:       ShapeHandle input = c->input(0);",
      "35:       if (!c->RankKnown(input)) {",
      "36:         c->set_output(0, c->UnknownShape());",
      "37:         return Status::OK();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:       ShapeHandle group_assignment = c->input(1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:       int split_dimension;",
      "43:       int split_count;",
      "44:       TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));",
      "46:       TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:       if (split_count < 1) {",
      "47:         return errors::InvalidArgument(\"split_count \", split_count,",
      "48:                                        \" must at least be one.\");",
      "49:       }",
      "50:       if (c->RankKnown(group_assignment) && c->Rank(group_assignment) != 2) {",
      "51:         return errors::InvalidArgument(\"group_assignment must have rank 2.\");",
      "52:       }",
      "53:       DimensionHandle num_replicas_per_group = c->Dim(group_assignment, 1);",
      "54:       if (c->ValueKnown(num_replicas_per_group) &&",
      "55:           (c->Value(num_replicas_per_group) != split_count)) {",
      "56:         return errors::InvalidArgument(",
      "57:             \"split_count \", split_count,",
      "58:             \" must equal the size of the second dimension of group_assignment \",",
      "59:             c->Value(num_replicas_per_group));",
      "60:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:           dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);",
      "66:         }",
      "67:         if (i == split_dimension) {",
      "68:           dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);",
      "69:         }",
      "70:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:           if (c->ValueKnown(dims[i]) &&",
      "85:               (c->Value(dims[i]) % split_count != 0)) {",
      "86:             return errors::InvalidArgument(",
      "87:                 \"input dimension \", c->Value(dims[i]),",
      "88:                 \" not divisible by split_count \", split_count);",
      "89:           }",
      "",
      "---------------"
    ],
    "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py": [
      "File: tensorflow/python/tpu/tpu_test.py -> tensorflow/python/tpu/tpu_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: from tensorflow.python.tpu import tpu",
      "33: from tensorflow.python.tpu import tpu_feed",
      "34: from tensorflow.python.tpu import training_loop",
      "37: class TPUContextTest(test.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: from tensorflow.python.tpu.ops import tpu_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "165:         graph.get_operation_by_name(\"import/y\").get_attr(",
      "166:             tpu._TPU_REPLICATE_ATTR)",
      "168: def do_einsum():",
      "169:   a = array_ops.placeholder(dtype=dtypes.float32, name=\"a\", shape=[2, 3, 4])",
      "170:   b = array_ops.placeholder(dtype=dtypes.float32, name=\"b\", shape=[2, 4, 5])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "170: class TPUOpsTest(test.TestCase):",
      "172:   def test_all_to_all_zero_split_count(self):",
      "173:     with self.assertRaisesRegex(",
      "174:         ValueError, \"split_count 0 must at least be one\"):",
      "175:       tpu_ops.all_to_all(",
      "176:           x=[0.0, 0.1652, 0.6543],",
      "177:           group_assignment=[1, -1],",
      "178:           concat_dimension=0,",
      "179:           split_dimension=0,",
      "180:           split_count=0)",
      "182:   def test_all_to_all_group_assignment_wrong_shape(self):",
      "183:     with self.assertRaisesRegex(",
      "184:         ValueError, \"group_assignment must have rank 2\"):",
      "185:       tpu_ops.all_to_all(",
      "186:           x=[0.0, 0.1652, 0.6543],",
      "187:           group_assignment=[1, -1],",
      "188:           concat_dimension=0,",
      "189:           split_dimension=0,",
      "190:           split_count=2)",
      "192:   def test_all_to_all_split_count_not_equal_to_group_assignment_shape(self):",
      "193:     with self.assertRaisesRegex(",
      "194:         ValueError, \"split_count 1 must equal the size of the second dimension \"",
      "195:         \"of group_assignment 2\"):",
      "196:       tpu_ops.all_to_all(",
      "197:           x=[0.0, 0.1652, 0.6543],",
      "198:           group_assignment=[[0, 1], [2, 3]],",
      "199:           concat_dimension=0,",
      "200:           split_dimension=0,",
      "201:           split_count=1)",
      "203:   def test_all_to_all_split_count_not_divide_input_shape(self):",
      "204:     with self.assertRaisesRegex(",
      "205:         ValueError, \"input dimension 3 not divisible by split_count 2\"):",
      "206:       tpu_ops.all_to_all(",
      "207:           x=[[0.0], [0.1652], [0.6543]],",
      "208:           group_assignment=[[0, 1], [2, 3]],",
      "209:           concat_dimension=1,",
      "210:           split_dimension=0,",
      "211:           split_count=2)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f797399ee821876546109ee5ca66b95b05ee77eb",
      "candidate_info": {
        "commit_hash": "f797399ee821876546109ee5ca66b95b05ee77eb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f797399ee821876546109ee5ca66b95b05ee77eb",
        "files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py"
        ],
        "message": "Update TPU AllToAll op to avoid divide by 0.\n\nPiperOrigin-RevId: 400259638\nChange-Id: Ic4cfe4fe7159da38caed8044ee005f898e42cd86",
        "before_after_code_files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc": [
          "File: tensorflow/core/ops/tpu_cross_replica_ops.cc -> tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     .Attr(\"split_count: int\")",
          "33:     .SetShapeFn([](InferenceContext* c) {",
          "34:       ShapeHandle input = c->input(0);",
          "40:       }",
          "41:       int concat_dimension;",
          "42:       int split_dimension;",
          "43:       int split_count;",
          "45:       TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));",
          "47:       TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));",
          "",
          "[Removed Lines]",
          "35:       int64 rank;",
          "36:       if (c->RankKnown(input)) {",
          "37:         rank = c->Rank(input);",
          "38:       } else {",
          "39:         return errors::InvalidArgument(\"input's rank is unknown.\");",
          "",
          "[Added Lines]",
          "35:       ShapeHandle group_assignment = c->input(1);",
          "36:       if (!c->RankKnown(input)) {",
          "37:         c->set_output(0, c->UnknownShape());",
          "38:         return Status::OK();",
          "45:       if (split_count < 1) {",
          "46:         return errors::InvalidArgument(\"split_count \", split_count,",
          "47:                                        \" must at least be one.\");",
          "48:       }",
          "49:       if (c->RankKnown(group_assignment) && c->Rank(group_assignment) != 2) {",
          "50:         return errors::InvalidArgument(\"group_assignment must have rank 2.\");",
          "51:       }",
          "52:       DimensionHandle num_replicas_per_group = c->Dim(group_assignment, 1);",
          "53:       if (c->ValueKnown(num_replicas_per_group) &&",
          "54:           (c->Value(num_replicas_per_group) != split_count)) {",
          "55:         return errors::InvalidArgument(",
          "56:             \"split_count \", split_count,",
          "57:             \" must equal the size of the second dimension of group_assignment \",",
          "58:             c->Value(num_replicas_per_group));",
          "59:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:           dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);",
          "67:         }",
          "68:         if (i == split_dimension) {",
          "69:           dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);",
          "70:         }",
          "71:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:           if (c->ValueKnown(dims[i]) &&",
          "84:               (c->Value(dims[i]) % split_count != 0)) {",
          "85:             return errors::InvalidArgument(",
          "86:                 \"input dimension \", c->Value(dims[i]),",
          "87:                 \" not divisible by split_count \", split_count);",
          "88:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py": [
          "File: tensorflow/python/tpu/tpu_test.py -> tensorflow/python/tpu/tpu_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: from tensorflow.python.tpu import tpu",
          "37: from tensorflow.python.tpu import tpu_feed",
          "38: from tensorflow.python.tpu import training_loop",
          "41: class TPUContextTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from tensorflow.python.tpu.ops import tpu_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         graph.get_operation_by_name(\"import/y\").get_attr(",
          "170:             tpu._TPU_REPLICATE_ATTR)",
          "172: def do_einsum():",
          "173:   a = array_ops.placeholder(dtype=dtypes.float32, name=\"a\", shape=[2, 3, 4])",
          "174:   b = array_ops.placeholder(dtype=dtypes.float32, name=\"b\", shape=[2, 4, 5])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: class TPUOpsTest(test.TestCase):",
          "176:   def test_all_to_all_zero_split_count(self):",
          "177:     with self.assertRaisesRegex(",
          "178:         ValueError, \"split_count 0 must at least be one\"):",
          "179:       tpu_ops.all_to_all(",
          "180:           x=[0.0, 0.1652, 0.6543],",
          "181:           group_assignment=[1, -1],",
          "182:           concat_dimension=0,",
          "183:           split_dimension=0,",
          "184:           split_count=0)",
          "186:   def test_all_to_all_group_assignment_wrong_shape(self):",
          "187:     with self.assertRaisesRegex(",
          "188:         ValueError, \"group_assignment must have rank 2\"):",
          "189:       tpu_ops.all_to_all(",
          "190:           x=[0.0, 0.1652, 0.6543],",
          "191:           group_assignment=[1, -1],",
          "192:           concat_dimension=0,",
          "193:           split_dimension=0,",
          "194:           split_count=2)",
          "196:   def test_all_to_all_split_count_not_equal_to_group_assignment_shape(self):",
          "197:     with self.assertRaisesRegex(",
          "198:         ValueError, \"split_count 1 must equal the size of the second dimension \"",
          "199:         \"of group_assignment 2\"):",
          "200:       tpu_ops.all_to_all(",
          "201:           x=[0.0, 0.1652, 0.6543],",
          "202:           group_assignment=[[0, 1], [2, 3]],",
          "203:           concat_dimension=0,",
          "204:           split_dimension=0,",
          "205:           split_count=1)",
          "207:   def test_all_to_all_split_count_not_divide_input_shape(self):",
          "208:     with self.assertRaisesRegex(",
          "209:         ValueError, \"input dimension 3 not divisible by split_count 2\"):",
          "210:       tpu_ops.all_to_all(",
          "211:           x=[[0.0], [0.1652], [0.6543]],",
          "212:           group_assignment=[[0, 1], [2, 3]],",
          "213:           concat_dimension=1,",
          "214:           split_dimension=0,",
          "215:           split_count=2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ca88bd307207e1e29e5eb7a92f0a5c82394da31",
      "candidate_info": {
        "commit_hash": "7ca88bd307207e1e29e5eb7a92f0a5c82394da31",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7ca88bd307207e1e29e5eb7a92f0a5c82394da31",
        "files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py"
        ],
        "message": "Update TPU AllToAll op to avoid divide by 0.\n\nPiperOrigin-RevId: 400259638\nChange-Id: Ic4cfe4fe7159da38caed8044ee005f898e42cd86",
        "before_after_code_files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc": [
          "File: tensorflow/core/ops/tpu_cross_replica_ops.cc -> tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     .Attr(\"split_count: int\")",
          "33:     .SetShapeFn([](InferenceContext* c) {",
          "34:       ShapeHandle input = c->input(0);",
          "35:       if (!c->RankKnown(input)) {",
          "36:         c->set_output(0, c->UnknownShape());",
          "37:         return Status::OK();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:       ShapeHandle group_assignment = c->input(1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:       int split_dimension;",
          "43:       int split_count;",
          "44:       TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));",
          "46:       TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:       if (split_count < 1) {",
          "47:         return errors::InvalidArgument(\"split_count \", split_count,",
          "48:                                        \" must at least be one.\");",
          "49:       }",
          "50:       if (c->RankKnown(group_assignment) && c->Rank(group_assignment) != 2) {",
          "51:         return errors::InvalidArgument(\"group_assignment must have rank 2.\");",
          "52:       }",
          "53:       DimensionHandle num_replicas_per_group = c->Dim(group_assignment, 1);",
          "54:       if (c->ValueKnown(num_replicas_per_group) &&",
          "55:           (c->Value(num_replicas_per_group) != split_count)) {",
          "56:         return errors::InvalidArgument(",
          "57:             \"split_count \", split_count,",
          "58:             \" must equal the size of the second dimension of group_assignment \",",
          "59:             c->Value(num_replicas_per_group));",
          "60:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:           dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);",
          "66:         }",
          "67:         if (i == split_dimension) {",
          "68:           dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);",
          "69:         }",
          "70:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:           if (c->ValueKnown(dims[i]) &&",
          "85:               (c->Value(dims[i]) % split_count != 0)) {",
          "86:             return errors::InvalidArgument(",
          "87:                 \"input dimension \", c->Value(dims[i]),",
          "88:                 \" not divisible by split_count \", split_count);",
          "89:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py": [
          "File: tensorflow/python/tpu/tpu_test.py -> tensorflow/python/tpu/tpu_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: from tensorflow.python.tpu import tpu",
          "37: from tensorflow.python.tpu import tpu_feed",
          "38: from tensorflow.python.tpu import training_loop",
          "41: class TPUContextTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from tensorflow.python.tpu.ops import tpu_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         graph.get_operation_by_name(\"import/y\").get_attr(",
          "170:             tpu._TPU_REPLICATE_ATTR)",
          "172: def do_einsum():",
          "173:   a = array_ops.placeholder(dtype=dtypes.float32, name=\"a\", shape=[2, 3, 4])",
          "174:   b = array_ops.placeholder(dtype=dtypes.float32, name=\"b\", shape=[2, 4, 5])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: class TPUOpsTest(test.TestCase):",
          "176:   def test_all_to_all_zero_split_count(self):",
          "177:     with self.assertRaisesRegex(",
          "178:         ValueError, \"split_count 0 must at least be one\"):",
          "179:       tpu_ops.all_to_all(",
          "180:           x=[0.0, 0.1652, 0.6543],",
          "181:           group_assignment=[1, -1],",
          "182:           concat_dimension=0,",
          "183:           split_dimension=0,",
          "184:           split_count=0)",
          "186:   def test_all_to_all_group_assignment_wrong_shape(self):",
          "187:     with self.assertRaisesRegex(",
          "188:         ValueError, \"group_assignment must have rank 2\"):",
          "189:       tpu_ops.all_to_all(",
          "190:           x=[0.0, 0.1652, 0.6543],",
          "191:           group_assignment=[1, -1],",
          "192:           concat_dimension=0,",
          "193:           split_dimension=0,",
          "194:           split_count=2)",
          "196:   def test_all_to_all_split_count_not_equal_to_group_assignment_shape(self):",
          "197:     with self.assertRaisesRegex(",
          "198:         ValueError, \"split_count 1 must equal the size of the second dimension \"",
          "199:         \"of group_assignment 2\"):",
          "200:       tpu_ops.all_to_all(",
          "201:           x=[0.0, 0.1652, 0.6543],",
          "202:           group_assignment=[[0, 1], [2, 3]],",
          "203:           concat_dimension=0,",
          "204:           split_dimension=0,",
          "205:           split_count=1)",
          "207:   def test_all_to_all_split_count_not_divide_input_shape(self):",
          "208:     with self.assertRaisesRegex(",
          "209:         ValueError, \"input dimension 3 not divisible by split_count 2\"):",
          "210:       tpu_ops.all_to_all(",
          "211:           x=[[0.0], [0.1652], [0.6543]],",
          "212:           group_assignment=[[0, 1], [2, 3]],",
          "213:           concat_dimension=1,",
          "214:           split_dimension=0,",
          "215:           split_count=2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ca717b32e67bac47459ad8f4b28626971b590b7",
      "candidate_info": {
        "commit_hash": "0ca717b32e67bac47459ad8f4b28626971b590b7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0ca717b32e67bac47459ad8f4b28626971b590b7",
        "files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py"
        ],
        "message": "Update TPU AllToAll op to avoid divide by 0.\n\nPiperOrigin-RevId: 400259638\nChange-Id: Ic4cfe4fe7159da38caed8044ee005f898e42cd86",
        "before_after_code_files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc": [
          "File: tensorflow/core/ops/tpu_cross_replica_ops.cc -> tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     .Attr(\"split_count: int\")",
          "33:     .SetShapeFn([](InferenceContext* c) {",
          "34:       ShapeHandle input = c->input(0);",
          "40:       }",
          "41:       int concat_dimension;",
          "42:       int split_dimension;",
          "43:       int split_count;",
          "45:       TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));",
          "47:       TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));",
          "",
          "[Removed Lines]",
          "35:       int64 rank;",
          "36:       if (c->RankKnown(input)) {",
          "37:         rank = c->Rank(input);",
          "38:       } else {",
          "39:         return errors::InvalidArgument(\"input's rank is unknown.\");",
          "",
          "[Added Lines]",
          "35:       ShapeHandle group_assignment = c->input(1);",
          "36:       if (!c->RankKnown(input)) {",
          "37:         c->set_output(0, c->UnknownShape());",
          "38:         return Status::OK();",
          "45:       if (split_count < 1) {",
          "46:         return errors::InvalidArgument(\"split_count \", split_count,",
          "47:                                        \" must at least be one.\");",
          "48:       }",
          "49:       if (c->RankKnown(group_assignment) && c->Rank(group_assignment) != 2) {",
          "50:         return errors::InvalidArgument(\"group_assignment must have rank 2.\");",
          "51:       }",
          "52:       DimensionHandle num_replicas_per_group = c->Dim(group_assignment, 1);",
          "53:       if (c->ValueKnown(num_replicas_per_group) &&",
          "54:           (c->Value(num_replicas_per_group) != split_count)) {",
          "55:         return errors::InvalidArgument(",
          "56:             \"split_count \", split_count,",
          "57:             \" must equal the size of the second dimension of group_assignment \",",
          "58:             c->Value(num_replicas_per_group));",
          "59:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:           dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);",
          "67:         }",
          "68:         if (i == split_dimension) {",
          "69:           dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);",
          "70:         }",
          "71:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:           if (c->ValueKnown(dims[i]) &&",
          "84:               (c->Value(dims[i]) % split_count != 0)) {",
          "85:             return errors::InvalidArgument(",
          "86:                 \"input dimension \", c->Value(dims[i]),",
          "87:                 \" not divisible by split_count \", split_count);",
          "88:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py": [
          "File: tensorflow/python/tpu/tpu_test.py -> tensorflow/python/tpu/tpu_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: from tensorflow.python.tpu import tpu",
          "37: from tensorflow.python.tpu import tpu_feed",
          "38: from tensorflow.python.tpu import training_loop",
          "41: class TPUContextTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from tensorflow.python.tpu.ops import tpu_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         graph.get_operation_by_name(\"import/y\").get_attr(",
          "170:             tpu._TPU_REPLICATE_ATTR)",
          "172: def do_einsum():",
          "173:   a = array_ops.placeholder(dtype=dtypes.float32, name=\"a\", shape=[2, 3, 4])",
          "174:   b = array_ops.placeholder(dtype=dtypes.float32, name=\"b\", shape=[2, 4, 5])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: class TPUOpsTest(test.TestCase):",
          "176:   def test_all_to_all_zero_split_count(self):",
          "177:     with self.assertRaisesRegex(",
          "178:         ValueError, \"split_count 0 must at least be one\"):",
          "179:       tpu_ops.all_to_all(",
          "180:           x=[0.0, 0.1652, 0.6543],",
          "181:           group_assignment=[1, -1],",
          "182:           concat_dimension=0,",
          "183:           split_dimension=0,",
          "184:           split_count=0)",
          "186:   def test_all_to_all_group_assignment_wrong_shape(self):",
          "187:     with self.assertRaisesRegex(",
          "188:         ValueError, \"group_assignment must have rank 2\"):",
          "189:       tpu_ops.all_to_all(",
          "190:           x=[0.0, 0.1652, 0.6543],",
          "191:           group_assignment=[1, -1],",
          "192:           concat_dimension=0,",
          "193:           split_dimension=0,",
          "194:           split_count=2)",
          "196:   def test_all_to_all_split_count_not_equal_to_group_assignment_shape(self):",
          "197:     with self.assertRaisesRegex(",
          "198:         ValueError, \"split_count 1 must equal the size of the second dimension \"",
          "199:         \"of group_assignment 2\"):",
          "200:       tpu_ops.all_to_all(",
          "201:           x=[0.0, 0.1652, 0.6543],",
          "202:           group_assignment=[[0, 1], [2, 3]],",
          "203:           concat_dimension=0,",
          "204:           split_dimension=0,",
          "205:           split_count=1)",
          "207:   def test_all_to_all_split_count_not_divide_input_shape(self):",
          "208:     with self.assertRaisesRegex(",
          "209:         ValueError, \"input dimension 3 not divisible by split_count 2\"):",
          "210:       tpu_ops.all_to_all(",
          "211:           x=[[0.0], [0.1652], [0.6543]],",
          "212:           group_assignment=[[0, 1], [2, 3]],",
          "213:           concat_dimension=1,",
          "214:           split_dimension=0,",
          "215:           split_count=2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a83084f9765b861c6cedef8ad798df315c3b465",
      "candidate_info": {
        "commit_hash": "9a83084f9765b861c6cedef8ad798df315c3b465",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9a83084f9765b861c6cedef8ad798df315c3b465",
        "files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py"
        ],
        "message": "Update TPU AllToAll op to avoid divide by 0.\n\nPiperOrigin-RevId: 400259638\nChange-Id: Ic4cfe4fe7159da38caed8044ee005f898e42cd86",
        "before_after_code_files": [
          "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc",
            "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/tpu_cross_replica_ops.cc||tensorflow/core/ops/tpu_cross_replica_ops.cc": [
          "File: tensorflow/core/ops/tpu_cross_replica_ops.cc -> tensorflow/core/ops/tpu_cross_replica_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     .Attr(\"split_count: int\")",
          "33:     .SetShapeFn([](InferenceContext* c) {",
          "34:       ShapeHandle input = c->input(0);",
          "35:       if (!c->RankKnown(input)) {",
          "36:         c->set_output(0, c->UnknownShape());",
          "37:         return Status::OK();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:       ShapeHandle group_assignment = c->input(1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:       int split_dimension;",
          "43:       int split_count;",
          "44:       TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));",
          "46:       TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:       if (split_count < 1) {",
          "47:         return errors::InvalidArgument(\"split_count \", split_count,",
          "48:                                        \" must at least be one.\");",
          "49:       }",
          "50:       if (c->RankKnown(group_assignment) && c->Rank(group_assignment) != 2) {",
          "51:         return errors::InvalidArgument(\"group_assignment must have rank 2.\");",
          "52:       }",
          "53:       DimensionHandle num_replicas_per_group = c->Dim(group_assignment, 1);",
          "54:       if (c->ValueKnown(num_replicas_per_group) &&",
          "55:           (c->Value(num_replicas_per_group) != split_count)) {",
          "56:         return errors::InvalidArgument(",
          "57:             \"split_count \", split_count,",
          "58:             \" must equal the size of the second dimension of group_assignment \",",
          "59:             c->Value(num_replicas_per_group));",
          "60:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:           dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);",
          "66:         }",
          "67:         if (i == split_dimension) {",
          "68:           dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);",
          "69:         }",
          "70:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:           if (c->ValueKnown(dims[i]) &&",
          "85:               (c->Value(dims[i]) % split_count != 0)) {",
          "86:             return errors::InvalidArgument(",
          "87:                 \"input dimension \", c->Value(dims[i]),",
          "88:                 \" not divisible by split_count \", split_count);",
          "89:           }",
          "",
          "---------------"
        ],
        "tensorflow/python/tpu/tpu_test.py||tensorflow/python/tpu/tpu_test.py": [
          "File: tensorflow/python/tpu/tpu_test.py -> tensorflow/python/tpu/tpu_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: from tensorflow.python.tpu import tpu",
          "37: from tensorflow.python.tpu import tpu_feed",
          "38: from tensorflow.python.tpu import training_loop",
          "41: class TPUContextTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from tensorflow.python.tpu.ops import tpu_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         graph.get_operation_by_name(\"import/y\").get_attr(",
          "170:             tpu._TPU_REPLICATE_ATTR)",
          "172: def do_einsum():",
          "173:   a = array_ops.placeholder(dtype=dtypes.float32, name=\"a\", shape=[2, 3, 4])",
          "174:   b = array_ops.placeholder(dtype=dtypes.float32, name=\"b\", shape=[2, 4, 5])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: class TPUOpsTest(test.TestCase):",
          "176:   def test_all_to_all_zero_split_count(self):",
          "177:     with self.assertRaisesRegex(",
          "178:         ValueError, \"split_count 0 must at least be one\"):",
          "179:       tpu_ops.all_to_all(",
          "180:           x=[0.0, 0.1652, 0.6543],",
          "181:           group_assignment=[1, -1],",
          "182:           concat_dimension=0,",
          "183:           split_dimension=0,",
          "184:           split_count=0)",
          "186:   def test_all_to_all_group_assignment_wrong_shape(self):",
          "187:     with self.assertRaisesRegex(",
          "188:         ValueError, \"group_assignment must have rank 2\"):",
          "189:       tpu_ops.all_to_all(",
          "190:           x=[0.0, 0.1652, 0.6543],",
          "191:           group_assignment=[1, -1],",
          "192:           concat_dimension=0,",
          "193:           split_dimension=0,",
          "194:           split_count=2)",
          "196:   def test_all_to_all_split_count_not_equal_to_group_assignment_shape(self):",
          "197:     with self.assertRaisesRegex(",
          "198:         ValueError, \"split_count 1 must equal the size of the second dimension \"",
          "199:         \"of group_assignment 2\"):",
          "200:       tpu_ops.all_to_all(",
          "201:           x=[0.0, 0.1652, 0.6543],",
          "202:           group_assignment=[[0, 1], [2, 3]],",
          "203:           concat_dimension=0,",
          "204:           split_dimension=0,",
          "205:           split_count=1)",
          "207:   def test_all_to_all_split_count_not_divide_input_shape(self):",
          "208:     with self.assertRaisesRegex(",
          "209:         ValueError, \"input dimension 3 not divisible by split_count 2\"):",
          "210:       tpu_ops.all_to_all(",
          "211:           x=[[0.0], [0.1652], [0.6543]],",
          "212:           group_assignment=[[0, 1], [2, 3]],",
          "213:           concat_dimension=1,",
          "214:           split_dimension=0,",
          "215:           split_count=2)",
          "",
          "---------------"
        ]
      }
    }
  ]
}