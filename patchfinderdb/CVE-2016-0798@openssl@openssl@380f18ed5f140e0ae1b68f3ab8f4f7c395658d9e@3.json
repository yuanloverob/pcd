{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fe67498b0d1c0052fabcc46d6de07d7900aa850",
      "candidate_info": {
        "commit_hash": "4fe67498b0d1c0052fabcc46d6de07d7900aa850",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4fe67498b0d1c0052fabcc46d6de07d7900aa850",
        "files": [
          "crypto/asn1/asn1.h",
          "util/libeay.num"
        ],
        "message": "Remove deleted functions, update ordinals.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/asn1.h||crypto/asn1/asn1.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/asn1.h||crypto/asn1/asn1.h": [
          "File: crypto/asn1/asn1.h -> crypto/asn1/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: int ASN1_PRINTABLE_type(const unsigned char *s, int max);",
          "753: unsigned long ASN1_tag2bit(int tag);",
          "759: int asn1_Finish(ASN1_CTX *c);",
          "760: int asn1_const_Finish(ASN1_const_CTX *c);",
          "",
          "[Removed Lines]",
          "750: int i2d_ASN1_bytes(ASN1_STRING *a, unsigned char **pp, int tag, int xclass);",
          "751: ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, const unsigned char **pp,",
          "752:                             long length, int Ptag, int Pclass);",
          "755: ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a, const unsigned char **pp,",
          "756:                                  long length, int type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865: int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num,",
          "866:                                   unsigned char *data, int max_len);",
          "874: void *ASN1_item_unpack(ASN1_STRING *oct, const ASN1_ITEM *it);",
          "883: ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,",
          "884:                             ASN1_OCTET_STRING **oct);",
          "",
          "[Removed Lines]",
          "868: STACK_OF(OPENSSL_BLOCK) *ASN1_seq_unpack(const unsigned char *buf, int len,",
          "869:                                          d2i_of_void *d2i,",
          "870:                                          void (*free_func) (OPENSSL_BLOCK));",
          "871: unsigned char *ASN1_seq_pack(STACK_OF(OPENSSL_BLOCK) *safes, i2d_of_void *i2d,",
          "872:                              unsigned char **buf, int *len);",
          "873: void *ASN1_unpack_string(ASN1_STRING *oct, d2i_of_void *d2i);",
          "875: ASN1_STRING *ASN1_pack_string(void *obj, i2d_of_void *i2d,",
          "876:                               ASN1_OCTET_STRING **oct);",
          "878: # define ASN1_pack_string_of(type,obj,i2d,oct) \\",
          "879:     (ASN1_pack_string(CHECKED_PTR_OF(type, obj), \\",
          "880:                       CHECKED_I2D_OF(type, i2d), \\",
          "881:                       oct))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "703: bn_sqr_words                            710 NOEXIST::FUNCTION:",
          "704: _ossl_old_crypt                         711 NOEXIST::FUNCTION:",
          "705: d2i_ASN1_BIT_STRING                     712 EXIST::FUNCTION:",
          "707: d2i_ASN1_HEADER                         714 NOEXIST::FUNCTION:",
          "708: d2i_ASN1_IA5STRING                      715 EXIST::FUNCTION:",
          "709: d2i_ASN1_INTEGER                        716 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "706: d2i_ASN1_BOOLEAN                        713 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "706: d2i_ASN1_BOOLEAN                        713 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711: d2i_ASN1_OCTET_STRING                   718 EXIST::FUNCTION:",
          "712: d2i_ASN1_PRINTABLE                      719 EXIST::FUNCTION:",
          "713: d2i_ASN1_PRINTABLESTRING                720 EXIST::FUNCTION:",
          "715: d2i_ASN1_T61STRING                      722 EXIST::FUNCTION:",
          "716: d2i_ASN1_TYPE                           723 EXIST::FUNCTION:",
          "717: d2i_ASN1_UTCTIME                        724 EXIST::FUNCTION:",
          "720: d2i_DHparams                            727 EXIST::FUNCTION:DH",
          "721: d2i_DSAPrivateKey                       728 EXIST::FUNCTION:DSA",
          "722: d2i_DSAPrivateKey_bio                   729 EXIST::FUNCTION:DSA",
          "",
          "[Removed Lines]",
          "714: d2i_ASN1_SET                            721 EXIST::FUNCTION:",
          "718: d2i_ASN1_bytes                          725 EXIST::FUNCTION:",
          "719: d2i_ASN1_type_bytes                     726 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "714: d2i_ASN1_SET                            721 NOEXIST::FUNCTION:",
          "718: d2i_ASN1_bytes                          725 NOEXIST::FUNCTION:",
          "719: d2i_ASN1_type_bytes                     726 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "808: i2a_ASN1_OBJECT                         816 EXIST::FUNCTION:",
          "809: i2a_ASN1_STRING                         817 EXIST::FUNCTION:",
          "810: i2d_ASN1_BIT_STRING                     818 EXIST::FUNCTION:",
          "812: i2d_ASN1_HEADER                         820 NOEXIST::FUNCTION:",
          "813: i2d_ASN1_IA5STRING                      821 EXIST::FUNCTION:",
          "814: i2d_ASN1_INTEGER                        822 EXIST::FUNCTION:",
          "815: i2d_ASN1_OBJECT                         823 EXIST::FUNCTION:",
          "816: i2d_ASN1_OCTET_STRING                   824 EXIST::FUNCTION:",
          "817: i2d_ASN1_PRINTABLE                      825 EXIST::FUNCTION:",
          "819: i2d_ASN1_TYPE                           827 EXIST::FUNCTION:",
          "820: i2d_ASN1_UTCTIME                        828 EXIST::FUNCTION:",
          "822: i2d_DHparams                            830 EXIST::FUNCTION:DH",
          "823: i2d_DSAPrivateKey                       831 EXIST::FUNCTION:DSA",
          "824: i2d_DSAPrivateKey_bio                   832 EXIST::FUNCTION:DSA",
          "",
          "[Removed Lines]",
          "811: i2d_ASN1_BOOLEAN                        819 EXIST::FUNCTION:",
          "818: i2d_ASN1_SET                            826 EXIST::FUNCTION:",
          "821: i2d_ASN1_bytes                          829 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "811: i2d_ASN1_BOOLEAN                        819 NOEXIST::FUNCTION:",
          "818: i2d_ASN1_SET                            826 NOEXIST::FUNCTION:",
          "821: i2d_ASN1_bytes                          829 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1231: d2i_AUTHORITY_KEYID                     1255 EXIST::FUNCTION:",
          "1232: AUTHORITY_KEYID_new                     1256 EXIST::FUNCTION:",
          "1233: AUTHORITY_KEYID_free                    1257 EXIST::FUNCTION:",
          "1238: PKCS12_pack_safebag                     1262 NOEXIST::FUNCTION:",
          "1239: PKCS12_MAKE_KEYBAG                      1263 EXIST::FUNCTION:",
          "1240: PKCS8_encrypt                           1264 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1234: ASN1_seq_unpack                         1258 EXIST::FUNCTION:",
          "1235: ASN1_seq_pack                           1259 EXIST::FUNCTION:",
          "1236: ASN1_unpack_string                      1260 EXIST::FUNCTION:",
          "1237: ASN1_pack_string                        1261 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1234: ASN1_seq_unpack                         1258 NOEXIST::FUNCTION:",
          "1235: ASN1_seq_pack                           1259 NOEXIST::FUNCTION:",
          "1236: ASN1_unpack_string                      1260 NOEXIST::FUNCTION:",
          "1237: ASN1_pack_string                        1261 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea11c6e92090078319e606d5639b7a81bdd57897",
      "candidate_info": {
        "commit_hash": "ea11c6e92090078319e606d5639b7a81bdd57897",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ea11c6e92090078319e606d5639b7a81bdd57897",
        "files": [
          "util/libeay.num"
        ],
        "message": "make update, missed file\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4729: EVP_chacha20                            5089 EXIST::FUNCTION:CHACHA",
          "4730: TLS_FEATURE_free                        5093 EXIST::FUNCTION:",
          "4731: TLS_FEATURE_new                         5094 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4732: EVP_ENCODE_CTX_free                     5095 EXIST::FUNCTION:",
          "4733: EVP_ENCODE_CTX_num                      5096 EXIST::FUNCTION:",
          "4734: EVP_ENCODE_CTX_new                      5097 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f70d04593951905fa560719ae7aaa032aca14ca",
      "candidate_info": {
        "commit_hash": "4f70d04593951905fa560719ae7aaa032aca14ca",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4f70d04593951905fa560719ae7aaa032aca14ca",
        "files": [
          "apps/Makefile",
          "util/libeay.num",
          "util/ssleay.num"
        ],
        "message": "make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num",
          "util/ssleay.num||util/ssleay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4656: ASYNC_start_job                         5016 EXIST::FUNCTION:",
          "4657: ASYNC_init_pool                         5017 EXIST::FUNCTION:",
          "4658: ASYNC_free_pool                         5018 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4659: ASYNC_wake                              5019 EXIST::FUNCTION:",
          "4660: ASYNC_clear_wake                        5020 EXIST::FUNCTION:",
          "4661: ASYNC_get_current_job                   5021 EXIST::FUNCTION:",
          "4662: ASYNC_get_wait_fd                       5022 EXIST::FUNCTION:",
          "",
          "---------------"
        ],
        "util/ssleay.num||util/ssleay.num": [
          "File: util/ssleay.num -> util/ssleay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "411: SSL_get_state                           446 EXIST::FUNCTION:",
          "412: SSL_set_default_passwd_cb               447 EXIST::FUNCTION:",
          "413: SSL_set_default_passwd_cb_userdata      448 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: SSL_waiting_for_async                   449 EXIST::FUNCTION:",
          "415: SSL_get_async_wait_fd                   450 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a14e9ff713cbe7dbbba2aa667466490291cffc68",
      "candidate_info": {
        "commit_hash": "a14e9ff713cbe7dbbba2aa667466490291cffc68",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a14e9ff713cbe7dbbba2aa667466490291cffc68",
        "files": [
          "engines/Makefile",
          "engines/e_dasync.c",
          "engines/e_dasync.ec",
          "engines/e_dasync_err.c",
          "engines/e_dasync_err.h",
          "include/openssl/engine.h",
          "util/libeay.num"
        ],
        "message": "Add the Dummy Async engine (dasync)\n\nThis engine is for developers of async aware applications. It simulates\nasynchronous activity with external hardware. This initial version supports\nSHA1 and RSA. Certain operations using those algorithms have async job\n\"pauses\" in them - using the new libcrypto async capability.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "engines/e_dasync.c||engines/e_dasync.c",
          "engines/e_dasync.ec||engines/e_dasync.ec",
          "engines/e_dasync_err.c||engines/e_dasync_err.c",
          "engines/e_dasync_err.h||engines/e_dasync_err.h",
          "include/openssl/engine.h||include/openssl/engine.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "engines/e_dasync.c||engines/e_dasync.c": [
          "File: engines/e_dasync.c -> engines/e_dasync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #include <stdio.h>",
          "55: #include <string.h>",
          "57: #include <openssl/engine.h>",
          "58: #include <openssl/sha.h>",
          "59: #include <openssl/rsa.h>",
          "60: #include <openssl/evp.h>",
          "61: #include <openssl/async.h>",
          "62: #include <openssl/bn.h>",
          "64: #define DASYNC_LIB_NAME \"DASYNC\"",
          "65: #include \"e_dasync_err.c\"",
          "68: static const char *engine_dasync_id = \"dasync\";",
          "69: static const char *engine_dasync_name = \"Dummy Async engine support\";",
          "73: static int dasync_destroy(ENGINE *e);",
          "74: static int dasync_init(ENGINE *e);",
          "75: static int dasync_finish(ENGINE *e);",
          "76: void ENGINE_load_dasync(void);",
          "80: static int dasync_digests(ENGINE *e, const EVP_MD **digest,",
          "81:                           const int **nids, int nid);",
          "83: static int dasync_digest_nids[] = { NID_sha1, 0 };",
          "87: static int digest_sha1_init(EVP_MD_CTX *ctx);",
          "88: static int digest_sha1_update(EVP_MD_CTX *ctx, const void *data,",
          "89:                              unsigned long count);",
          "90: static int digest_sha1_final(EVP_MD_CTX *ctx, unsigned char *md);",
          "92: static const EVP_MD digest_sha1 = {",
          "93:     NID_sha1,",
          "94:     NID_sha1WithRSAEncryption,",
          "95:     SHA_DIGEST_LENGTH,",
          "96:     EVP_MD_FLAG_PKEY_METHOD_SIGNATURE | EVP_MD_FLAG_DIGALGID_ABSENT,",
          "97:     digest_sha1_init,",
          "98:     digest_sha1_update,",
          "99:     digest_sha1_final,",
          "100:     NULL,",
          "101:     NULL,",
          "102:     EVP_PKEY_NULL_method,",
          "103:     SHA_CBLOCK,",
          "104:     sizeof(EVP_MD *) + sizeof(SHA_CTX),",
          "105: };",
          "109: static int dasync_pub_enc(int flen, const unsigned char *from,",
          "110:                     unsigned char *to, RSA *rsa, int padding);",
          "111: static int dasync_pub_dec(int flen, const unsigned char *from,",
          "112:                     unsigned char *to, RSA *rsa, int padding);",
          "113: static int dasync_rsa_priv_enc(int flen, const unsigned char *from,",
          "114:                       unsigned char *to, RSA *rsa, int padding);",
          "115: static int dasync_rsa_priv_dec(int flen, const unsigned char *from,",
          "116:                       unsigned char *to, RSA *rsa, int padding);",
          "117: static int dasync_rsa_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa,",
          "118:                               BN_CTX *ctx);",
          "120: static int dasync_rsa_init(RSA *rsa);",
          "121: static int dasync_rsa_finish(RSA *rsa);",
          "123: static RSA_METHOD dasync_rsa_method = {",
          "124:     \"Dummy Async RSA method\",",
          "138: };",
          "141: static int bind_dasync(ENGINE *e)",
          "142: {",
          "144:     ERR_load_DASYNC_strings();",
          "146:     if (!ENGINE_set_id(e, engine_dasync_id)",
          "147:         || !ENGINE_set_name(e, engine_dasync_name)",
          "148:         || !ENGINE_set_RSA(e, &dasync_rsa_method)",
          "149:         || !ENGINE_set_digests(e, dasync_digests)",
          "150:         || !ENGINE_set_destroy_function(e, dasync_destroy)",
          "151:         || !ENGINE_set_init_function(e, dasync_init)",
          "152:         || !ENGINE_set_finish_function(e, dasync_finish)) {",
          "153:         DASYNCerr(DASYNC_F_BIND_DASYNC, DASYNC_R_INIT_FAILED);",
          "154:         return 0;",
          "155:     }",
          "157:     return 1;",
          "158: }",
          "160: # ifndef OPENSSL_NO_DYNAMIC_ENGINE",
          "161: static int bind_helper(ENGINE *e, const char *id)",
          "162: {",
          "163:     if (id && (strcmp(id, engine_dasync_id) != 0))",
          "164:         return 0;",
          "165:     if (!bind_dasync(e))",
          "166:         return 0;",
          "167:     return 1;",
          "168: }",
          "170: IMPLEMENT_DYNAMIC_CHECK_FN()",
          "171:     IMPLEMENT_DYNAMIC_BIND_FN(bind_helper)",
          "172: # endif",
          "174: static ENGINE *engine_dasync(void)",
          "175: {",
          "176:     ENGINE *ret = ENGINE_new();",
          "177:     if (!ret)",
          "178:         return NULL;",
          "179:     if (!bind_dasync(ret)) {",
          "180:         ENGINE_free(ret);",
          "181:         return NULL;",
          "182:     }",
          "183:     return ret;",
          "184: }",
          "186: void ENGINE_load_dasync(void)",
          "187: {",
          "188:     ENGINE *toadd = engine_dasync();",
          "189:     if (!toadd)",
          "190:         return;",
          "191:     ENGINE_add(toadd);",
          "192:     ENGINE_free(toadd);",
          "193:     ERR_clear_error();",
          "194: }",
          "196: static int dasync_init(ENGINE *e)",
          "197: {",
          "198:     return 1;",
          "199: }",
          "202: static int dasync_finish(ENGINE *e)",
          "203: {",
          "204:     return 1;",
          "205: }",
          "208: static int dasync_destroy(ENGINE *e)",
          "209: {",
          "210:     ERR_unload_DASYNC_strings();",
          "211:     return 1;",
          "212: }",
          "214: static int dasync_digests(ENGINE *e, const EVP_MD **digest,",
          "215:                           const int **nids, int nid)",
          "216: {",
          "217:     int ok = 1;",
          "218:     if (!digest) {",
          "221:         return (sizeof(dasync_digest_nids) -",
          "222:                 1) / sizeof(dasync_digest_nids[0]);",
          "223:     }",
          "225:     switch (nid) {",
          "226:     case NID_sha1:",
          "228:         break;",
          "229:     default:",
          "230:         ok = 0;",
          "232:         break;",
          "233:     }",
          "234:     return ok;",
          "235: }",
          "242: #undef data",
          "243: #define data(ctx) ((SHA_CTX *)(ctx)->md_data)",
          "244: static int digest_sha1_init(EVP_MD_CTX *ctx)",
          "245: {",
          "247:     ASYNC_pause_job();",
          "249:     return SHA1_Init(data(ctx));",
          "250: }",
          "252: static int digest_sha1_update(EVP_MD_CTX *ctx, const void *data,",
          "253:                              unsigned long count)",
          "254: {",
          "256:     ASYNC_pause_job();",
          "258:     return SHA1_Update(data(ctx), data, (size_t)count);",
          "259: }",
          "261: static int digest_sha1_final(EVP_MD_CTX *ctx, unsigned char *md)",
          "262: {",
          "264:     ASYNC_pause_job();",
          "266:     return SHA1_Final(md, data(ctx));",
          "267: }",
          "273: static int dasync_pub_enc(int flen, const unsigned char *from,",
          "274:                     unsigned char *to, RSA *rsa, int padding) {",
          "276:     ASYNC_pause_job();",
          "277:     return RSA_PKCS1_OpenSSL()->rsa_pub_enc(flen, from, to, rsa, padding);",
          "278: }",
          "280: static int dasync_pub_dec(int flen, const unsigned char *from,",
          "281:                     unsigned char *to, RSA *rsa, int padding) {",
          "283:     ASYNC_pause_job();",
          "284:     return RSA_PKCS1_OpenSSL()->rsa_pub_dec(flen, from, to, rsa, padding);",
          "285: }",
          "287: static int dasync_rsa_priv_enc(int flen, const unsigned char *from,",
          "288:                       unsigned char *to, RSA *rsa, int padding)",
          "289: {",
          "291:     ASYNC_pause_job();",
          "292:     return RSA_PKCS1_OpenSSL()->rsa_priv_enc(flen, from, to, rsa, padding);",
          "293: }",
          "295: static int dasync_rsa_priv_dec(int flen, const unsigned char *from,",
          "296:                       unsigned char *to, RSA *rsa, int padding)",
          "297: {",
          "299:     ASYNC_pause_job();",
          "300:     return RSA_PKCS1_OpenSSL()->rsa_priv_dec(flen, from, to, rsa, padding);",
          "301: }",
          "303: static int dasync_rsa_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)",
          "304: {",
          "306:     ASYNC_pause_job();",
          "307:     return RSA_PKCS1_OpenSSL()->rsa_mod_exp(r0, I, rsa, ctx);",
          "308: }",
          "310: static int dasync_rsa_init(RSA *rsa)",
          "311: {",
          "312:     return RSA_PKCS1_OpenSSL()->init(rsa);",
          "313: }",
          "314: static int dasync_rsa_finish(RSA *rsa)",
          "315: {",
          "316:     return RSA_PKCS1_OpenSSL()->finish(rsa);",
          "317: }",
          "",
          "---------------"
        ],
        "engines/e_dasync.ec||engines/e_dasync.ec": [
          "File: engines/e_dasync.ec -> engines/e_dasync.ec",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: L       DASYNC    e_dasync_err.h e_dasync_err.c",
          "",
          "---------------"
        ],
        "engines/e_dasync_err.c||engines/e_dasync_err.c": [
          "File: engines/e_dasync_err.c -> engines/e_dasync_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include <stdio.h>",
          "62: #include <openssl/err.h>",
          "63: #include \"e_dasync_err.h\"",
          "66: #ifndef OPENSSL_NO_ERR",
          "68: #define ERR_FUNC(func) ERR_PACK(0,func,0)",
          "69: #define ERR_REASON(reason) ERR_PACK(0,0,reason)",
          "71: static ERR_STRING_DATA DASYNC_str_functs[]=",
          "72:  {",
          "73: {ERR_FUNC(DASYNC_F_BIND_DASYNC), \"BIND_DASYNC\"},",
          "74: {ERR_FUNC(DASYNC_F_CIPHER_AES_128_CBC_CODE), \"CIPHER_AES_128_CBC_CODE\"},",
          "75: {ERR_FUNC(DASYNC_F_DASYNC_BN_MOD_EXP), \"DASYNC_BN_MOD_EXP\"},",
          "76: {ERR_FUNC(DASYNC_F_DASYNC_MOD_EXP), \"DASYNC_MOD_EXP\"},",
          "77: {ERR_FUNC(DASYNC_F_DASYNC_PRIVATE_DECRYPT), \"DASYNC_PRIVATE_DECRYPT\"},",
          "78: {ERR_FUNC(DASYNC_F_DASYNC_PRIVATE_ENCRYPT), \"DASYNC_PRIVATE_ENCRYPT\"},",
          "79: {ERR_FUNC(DASYNC_F_DASYNC_PUBLIC_DECRYPT), \"DASYNC_PUBLIC_DECRYPT\"},",
          "80: {ERR_FUNC(DASYNC_F_DASYNC_PUBLIC_ENCRYPT), \"DASYNC_PUBLIC_ENCRYPT\"},",
          "81: {0,NULL}",
          "82:  };",
          "84: static ERR_STRING_DATA DASYNC_str_reasons[]=",
          "85:  {",
          "86: {ERR_REASON(DASYNC_R_INIT_FAILED)        ,\"init failed\"},",
          "87: {ERR_REASON(DASYNC_R_LENGTH_NOT_BLOCK_ALIGNED),\"length not block aligned\"},",
          "88: {ERR_REASON(DASYNC_R_UNKNOWN_FAULT)      ,\"unknown fault\"},",
          "89: {0,NULL}",
          "90:  };",
          "92: #endif",
          "94: #ifdef DASYNC_LIB_NAME",
          "95: static ERR_STRING_DATA DASYNC_lib_name[]=",
          "96:         {",
          "97: {0 ,DASYNC_LIB_NAME},",
          "98: {0,NULL}",
          "99:  };",
          "100: #endif",
          "103: static int DASYNC_lib_error_code=0;",
          "104: static int DASYNC_error_init=1;",
          "106: static void ERR_load_DASYNC_strings(void)",
          "107:  {",
          "108:  if (DASYNC_lib_error_code == 0)",
          "109:   DASYNC_lib_error_code=ERR_get_next_error_library();",
          "111:  if (DASYNC_error_init)",
          "112:   {",
          "113:   DASYNC_error_init=0;",
          "114: #ifndef OPENSSL_NO_ERR",
          "115:   ERR_load_strings(DASYNC_lib_error_code,DASYNC_str_functs);",
          "116:   ERR_load_strings(DASYNC_lib_error_code,DASYNC_str_reasons);",
          "117: #endif",
          "119: #ifdef DASYNC_LIB_NAME",
          "120:   DASYNC_lib_name->error = ERR_PACK(DASYNC_lib_error_code,0,0);",
          "121:   ERR_load_strings(0,DASYNC_lib_name);",
          "122: #endif",
          "123:   }",
          "124:  }",
          "126: static void ERR_unload_DASYNC_strings(void)",
          "127:  {",
          "128:  if (DASYNC_error_init == 0)",
          "129:   {",
          "130: #ifndef OPENSSL_NO_ERR",
          "131:   ERR_unload_strings(DASYNC_lib_error_code,DASYNC_str_functs);",
          "132:   ERR_unload_strings(DASYNC_lib_error_code,DASYNC_str_reasons);",
          "133: #endif",
          "135: #ifdef DASYNC_LIB_NAME",
          "136:   ERR_unload_strings(0,DASYNC_lib_name);",
          "137: #endif",
          "138:   DASYNC_error_init=1;",
          "139:   }",
          "140:  }",
          "142: static void ERR_DASYNC_error(int function, int reason, char *file, int line)",
          "143:  {",
          "144:  if (DASYNC_lib_error_code == 0)",
          "145:   DASYNC_lib_error_code=ERR_get_next_error_library();",
          "146:  ERR_PUT_error(DASYNC_lib_error_code,function,reason,file,line);",
          "147:  }",
          "",
          "---------------"
        ],
        "engines/e_dasync_err.h||engines/e_dasync_err.h": [
          "File: engines/e_dasync_err.h -> engines/e_dasync_err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #ifndef HEADER_DASYNC_ERR_H",
          "56: # define HEADER_DASYNC_ERR_H",
          "58: #ifdef  __cplusplus",
          "59: extern \"C\" {",
          "60: #endif",
          "66: static void ERR_load_DASYNC_strings(void);",
          "67: static void ERR_unload_DASYNC_strings(void);",
          "68: static void ERR_DASYNC_error(int function, int reason, char *file, int line);",
          "69: #define DASYNCerr(f,r) ERR_DASYNC_error((f),(r),__FILE__,__LINE__)",
          "74: #define DASYNC_F_BIND_DASYNC     107",
          "75: #define DASYNC_F_CIPHER_AES_128_CBC_CODE   100",
          "76: #define DASYNC_F_DASYNC_BN_MOD_EXP    101",
          "77: #define DASYNC_F_DASYNC_MOD_EXP     102",
          "78: #define DASYNC_F_DASYNC_PRIVATE_DECRYPT    103",
          "79: #define DASYNC_F_DASYNC_PRIVATE_ENCRYPT    104",
          "80: #define DASYNC_F_DASYNC_PUBLIC_DECRYPT    105",
          "81: #define DASYNC_F_DASYNC_PUBLIC_ENCRYPT    106",
          "84: #define DASYNC_R_INIT_FAILED     102",
          "85: #define DASYNC_R_LENGTH_NOT_BLOCK_ALIGNED   100",
          "86: #define DASYNC_R_UNKNOWN_FAULT     101",
          "88: #ifdef  __cplusplus",
          "89: }",
          "90: #endif",
          "91: #endif",
          "",
          "---------------"
        ],
        "include/openssl/engine.h||include/openssl/engine.h": [
          "File: include/openssl/engine.h -> include/openssl/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "409: #  ifndef OPENSSL_NO_GOST",
          "410: void ENGINE_load_gost(void);",
          "411: #  endif",
          "412: # endif",
          "413: void ENGINE_load_cryptodev(void);",
          "414: void ENGINE_load_rdrand(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412: void ENGINE_load_dasync(void);",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4649: X509_aux_print                          5009 EXIST::FUNCTION:STDIO",
          "4650: TS_RESP_CTX_set_signer_digest           5010 EXIST::FUNCTION:",
          "4651: TS_CONF_set_signer_digest               5011 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4652: ENGINE_load_dasync                      5012 EXIST::FUNCTION:ENGINE,STATIC_ENGINE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99e1ad3c4bb1dd03f36429c1ce4eafa5ed162964",
      "candidate_info": {
        "commit_hash": "99e1ad3c4bb1dd03f36429c1ce4eafa5ed162964",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/99e1ad3c4bb1dd03f36429c1ce4eafa5ed162964",
        "files": [
          "util/libeay.num"
        ],
        "message": "update ordinals\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1806: ASN1_UTCTIME_get                        2350 NOEXIST::FUNCTION:",
          "1807: X509_REQ_digest                         2362 EXIST::FUNCTION:",
          "1808: X509_CRL_digest                         2391 EXIST::FUNCTION:",
          "1809: d2i_ASN1_SET_OF_PKCS7                   2397 NOEXIST::FUNCTION:",
          "1810: X509_ALGOR_cmp                          2398 EXIST::FUNCTION:",
          "1811: EVP_CIPHER_CTX_set_key_length           2399 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1809: ASN1_STRING_clear_free                  2392 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}