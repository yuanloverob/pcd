{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ddfb94173b8387e13acd927b4fc7c5f5cc316dd3",
      "candidate_info": {
        "commit_hash": "ddfb94173b8387e13acd927b4fc7c5f5cc316dd3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/ddfb94173b8387e13acd927b4fc7c5f5cc316dd3",
        "files": [
          "main/WebServer.cpp",
          "main/mainworker.cpp"
        ],
        "message": "RFXCom ProXL implementation",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1414:      mode1, mode2, mode3, mode4, mode5, mode6,",
          "1415:      iDataTimeout",
          "1416:     );",
          "1417:    }",
          "1418:    else {",
          "1419:     m_sql.safe_query(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:     extra = \"0\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1792:       iDataTimeout,",
          "1793:       idx.c_str()",
          "1794:      );",
          "1795:     }",
          "1796:     else {",
          "1797:      m_sql.safe_query(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1796:      std::vector<std::vector<std::string> > result;",
          "1797:      result = m_sql.safe_query(\"SELECT Extra FROM Hardware WHERE ID=%q\", idx.c_str());",
          "1798:      if (!result.empty())",
          "1799:       extra = result[0][0];",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10561:  if (",
          "10562:   (pHardware->m_HwdID == 999)||",
          "10563:   (pHardware->HwdType == HTYPE_RFXtrx315) ||",
          "10564:   (pHardware->HwdType == HTYPE_RFXLAN)",
          "10565:   )",
          "10566:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10564:   (pHardware->HwdType == HTYPE_RFXtrx433) ||",
          "10565:   (pHardware->HwdType == HTYPE_RFXtrx868) ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "195d46abc63c10f498a31ab20c3553feffbbdace",
      "candidate_info": {
        "commit_hash": "195d46abc63c10f498a31ab20c3553feffbbdace",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/195d46abc63c10f498a31ab20c3553feffbbdace",
        "files": [
          "msbuild/WindowsHelper.cpp",
          "msbuild/WindowsInstaller/nssm.exe"
        ],
        "message": "Code cleanup, updated nssm",
        "before_after_code_files": [
          "msbuild/WindowsHelper.cpp||msbuild/WindowsHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/WindowsHelper.cpp||msbuild/WindowsHelper.cpp": [
          "File: msbuild/WindowsHelper.cpp -> msbuild/WindowsHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:  tnd.uID = 100;",
          "172:  tnd.uCallbackMessage = WM_TRAYICON;",
          "173:  tnd.uFlags = NIF_MESSAGE|NIF_ICON|NIF_TIP | NIF_SHOWTIP;",
          "176:  tnd.hIcon = LoadIcon(g_hInstance,MAKEINTRESOURCE (IDR_MAINFRAME));",
          "177:  strcpy(tnd.szTip, \"Domoticz Home Automation\");",
          "178:  tnd.uTimeout=5;",
          "",
          "[Removed Lines]",
          "174:  if (dwMessage==NIM_ADD)",
          "175:   tnd.uFlags|=NIF_SHOWTIP;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80f11d60eeb276d3c9df62b3291a308b84c214a1",
      "candidate_info": {
        "commit_hash": "80f11d60eeb276d3c9df62b3291a308b84c214a1",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/80f11d60eeb276d3c9df62b3291a308b84c214a1",
        "files": [
          "hardware/Rtl433.cpp"
        ],
        "message": "using rolling code as id when sensor does not provide the 'id'",
        "before_after_code_files": [
          "hardware/Rtl433.cpp||hardware/Rtl433.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Rtl433.cpp||hardware/Rtl433.cpp": [
          "File: hardware/Rtl433.cpp -> hardware/Rtl433.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  removeCharsFromString(m_cmdline, \":;/$()`<>|&\");",
          "28:  m_HwdID = ID;",
          "29:  m_hPipe = NULL;",
          "31: #ifdef _DEBUG",
          "32:  std::string headerline = \"time,msg,codes,model,button,id,channel,battery,temperature_C,mic,rid,humidity,state,status,brand,rain_rate,rain_total,gust,average,direction,pressure_hPa,uv,power_W,energy_kWh,unit,group_call,command,dim,dim_value,wind_speed,wind_gust,wind_direction,dipswitch,rbutton,device,temperature_F,rc,brandmodelidtemperature_C,setpoint_C,switch,cmd,cmd_id,modelidcmd,tristate,direction_str,direction_deg,speed,rain,msg_type,signal,hours,minutes,seconds,year,month,day,sensor_code,uv_status,uv_index,lux,wm,fc,ws_id,rainfall_mm,wind_speed_ms,gust_speed_ms,current,interval,learn,sensor_id,battery_low,sequence_num,message_type,wind_speed_mph,wind_dir_deg,wind_dir,rainfall_accumulation_inch,raincounter_raw,windstrength,winddirection,flags,maybetemp,binding_countdown,depth,dev_id,power0,power1,power2,node,ct1,ct2,ct3,ct4,Vrms/batt,temp1_C,temp2_C,temp3_C,temp4_C,temp5_C,temp6_C,pulse,address,button1,button2,button3,button4,data,sid,transmit,moisture,type,pressure_PSI,battery_mV,pressure_bar,pulses,energy,device id,code,len,to,from,payload,event,heartbeat,brandmodelidstatus,temperature_C1,temperature_C2,test,probe,water,ptemperature_C,phumidity,newbattery,heating,heating_temp,uvi,light_lux,counter,alarm,depth_cm,repeat,temperature_1_C,temperature_2_C,device_type,raw_message,switch1,switch2,switch3,switch4,switch5,seq,extradata,house_id,module_id,sensor_type,sensor_count,alarms,sensor_value,battery_voltage,failed,pressure_kPa\";",
          "36:  ParseLine(headers, line.c_str());",
          "37: #endif",
          "39: }",
          "41: CRtl433::~CRtl433()",
          "",
          "[Removed Lines]",
          "35:  std::vector<std::string> headers = ParseCSVLine(headerline.c_str());",
          "",
          "[Added Lines]",
          "33:  headerline = \"time,model,button,id,channel,battery,temperature_C,mic,rid,humidity,state,brand,rain_rate,rain_total,gust,average,direction,pressure_hPa,uv,power_W,energy_kWh,unit,group_call,command,dim,dim_value,wind_speed,wind_gust,wind_direction,dipswitch,rbutton,device,temperature_F,status,rc,brandmodelidtemperature_C,setpoint_C,switch,direction_str,direction_deg,speed,rain,msg_type,signal,hours,minutes,seconds,year,month,day,sensor_code,uv_status,uv_index,lux,wm,fc,ws_id,rainfall_mm,wind_speed_ms,gust_speed_ms,current,interval,learn,windstrength,winddirection,flags,maybetemp,binding_countdown,depth,dev_id,power0,power1,power2,node,ct1,ct2,ct3,ct4,Vrms/batt,temp1_C,temp2_C,temp3_C,temp4_C,temp5_C,temp6_C,pulse,sid,transmit,moisture,type,pressure_PSI,battery_mV,pressure_bar,code,pulses,energy,device id,len,to,from,payload,event,heartbeat,brandmodelidstatus,temperature_C1,temperature_C2,test,newbattery,heating,heating_temp,water,wind_dir_deg,uvi,light_lux,counter,alarm,depth_cm,repeat,temperature_1_C,temperature_2_C,device_type,raw_message,switch1,switch2,switch3,switch4,switch5,seq,extradata,house_id,module_id,sensor_type,sensor_count,alarms,sensor_value,battery_voltage,data,failed,pressure_kPa\";",
          "34:  std::vector<std::string> headers = ParseCSVLine(headerline.c_str());",
          "37:  std::string line = \"2018-12-06 18:35:52,HIDEKI TS04 sensor,,,3,OK,10.900,,,83,,,,,,,,,,,,,,,,,,,,,,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:  if (FindField(data, \"unit\"))",
          "",
          "[Removed Lines]",
          "161:  if (data[\"id\"].empty())",
          "162:   return false; //we should have at least an ID",
          "164:  id = atoi(data[\"id\"].c_str());",
          "",
          "[Added Lines]",
          "163:  if (!data[\"id\"].empty())",
          "164:  {",
          "165:   id = atoi(data[\"id\"].c_str());",
          "166:  }",
          "167:  else if (!data[\"rc\"].empty())",
          "168:  {",
          "169:   id = atoi(data[\"rc\"].c_str());",
          "170:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da72f51e6e72729eb4321d0ef9c2d2236670afa4",
      "candidate_info": {
        "commit_hash": "da72f51e6e72729eb4321d0ef9c2d2236670afa4",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/da72f51e6e72729eb4321d0ef9c2d2236670afa4",
        "files": [
          "msbuild/domoticz.vcxproj"
        ],
        "message": "Reverting version for AppVeyor (2017)",
        "before_after_code_files": [
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     <ConfigurationType>Application</ConfigurationType>",
          "22:     <UseDebugLibraries>true</UseDebugLibraries>",
          "23:     <CharacterSet>MultiByte</CharacterSet>",
          "25:   </PropertyGroup>",
          "26:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">",
          "27:     <ConfigurationType>Application</ConfigurationType>",
          "28:     <UseDebugLibraries>false</UseDebugLibraries>",
          "29:     <WholeProgramOptimization>true</WholeProgramOptimization>",
          "30:     <CharacterSet>MultiByte</CharacterSet>",
          "32:   </PropertyGroup>",
          "33:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />",
          "34:   <ImportGroup Label=\"ExtensionSettings\">",
          "",
          "[Removed Lines]",
          "24:     <PlatformToolset>v142</PlatformToolset>",
          "31:     <PlatformToolset>v142</PlatformToolset>",
          "",
          "[Added Lines]",
          "24:     <PlatformToolset>v141</PlatformToolset>",
          "31:     <PlatformToolset>v141</PlatformToolset>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1435:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />",
          "1436:   <ImportGroup Label=\"ExtensionTargets\">",
          "1437:   </ImportGroup>",
          "",
          "[Removed Lines]",
          "1438: </Project>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9764af10c07be0720f37139135c1b227a9bc4620",
      "candidate_info": {
        "commit_hash": "9764af10c07be0720f37139135c1b227a9bc4620",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9764af10c07be0720f37139135c1b227a9bc4620",
        "files": [
          "hardware/MQTT.h"
        ],
        "message": "MQTT Removed obsolete OnData declaration",
        "before_after_code_files": [
          "hardware/MQTT.h||hardware/MQTT.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MQTT.h||hardware/MQTT.h": [
          "File: hardware/MQTT.h -> hardware/MQTT.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  void StopMQTT();",
          "50:  void Do_Work();",
          "51:  virtual void SendHeartbeat();",
          "53:  void WriteInt(const std::string &sendStr) override;",
          "54:  std::shared_ptr<std::thread> m_thread;",
          "55:  volatile bool m_stoprequested;",
          "",
          "[Removed Lines]",
          "52:  void OnData(const unsigned char *pData, size_t length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}