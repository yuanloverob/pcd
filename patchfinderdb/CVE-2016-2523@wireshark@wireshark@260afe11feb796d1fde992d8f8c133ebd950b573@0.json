{
  "cve_id": "CVE-2016-2523",
  "cve_desc": "The dnp3_al_process_object function in epan/dissectors/packet-dnp.c in the DNP3 dissector in Wireshark 1.12.x before 1.12.10 and 2.0.x before 2.0.2 allows remote attackers to cause a denial of service (infinite loop) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "260afe11feb796d1fde992d8f8c133ebd950b573",
  "patch_info": {
    "commit_hash": "260afe11feb796d1fde992d8f8c133ebd950b573",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/260afe11feb796d1fde992d8f8c133ebd950b573",
    "files": [
      "epan/dissectors/packet-dnp.c"
    ],
    "message": "Prevent infinite loop in DNP3 dissector.\n\nBug: 11938\nChange-Id: Icd59092a3139b8c22f3866017a093a8b1270f1b2\nReviewed-on: https://code.wireshark.org/review/12940\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c": [
      "File: epan/dissectors/packet-dnp.c -> epan/dissectors/packet-dnp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2847:         al_ptaddr++;",
      "2848:       }",
      "2849:       if (start_offset > offset) {",
      "2850:         expert_add_info(pinfo, point_item, &ei_dnp_invalid_length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2848:       } else {",
      "2849:         offset = data_pos;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0cc86bbbda03100d901e82ac6221f258eb8511e4",
      "candidate_info": {
        "commit_hash": "0cc86bbbda03100d901e82ac6221f258eb8511e4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0cc86bbbda03100d901e82ac6221f258eb8511e4",
        "files": [
          "epan/dissectors/packet-dnp.c"
        ],
        "message": "Prevent infinite loop in DNP3 dissector.\n\nBug: 11938\nChange-Id: Icd59092a3139b8c22f3866017a093a8b1270f1b2\nReviewed-on: https://code.wireshark.org/review/12940\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 260afe11feb796d1fde992d8f8c133ebd950b573)\nReviewed-on: https://code.wireshark.org/review/12948\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c": [
          "File: epan/dissectors/packet-dnp.c -> epan/dissectors/packet-dnp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2846:         al_ptaddr++;",
          "2847:       }",
          "2848:       if (start_offset > offset) {",
          "2849:         expert_add_info(pinfo, point_item, &ei_dnp_invalid_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2847:       } else {",
          "2848:         offset = data_pos;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f15ab3e6c790e2645885e959f8ae1352d4a6130b",
      "candidate_info": {
        "commit_hash": "f15ab3e6c790e2645885e959f8ae1352d4a6130b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f15ab3e6c790e2645885e959f8ae1352d4a6130b",
        "files": [
          "epan/dissectors/packet-dnp.c"
        ],
        "message": "DNP3: dissector cleanup\n\nCleaned up handling of the qualifier field.  Sub-parts are now\nidentified as the prefix and range rather than index and code.\n\nThis has changed the field names;\n  dnp3.al.objq.index -> dnp3.al.objq.prefix\n  dnp3.al.objq.code  -> dnp3.al.objq.range\n\nand the associated packet tree details text strings.\n\nChange-Id: I42d51b71233303eaf8b37982dd15b5090918630b\nReviewed-on: https://code.wireshark.org/review/12998\nPetri-Dish: Graham Bloice <graham.bloice@trihedral.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Graham Bloice <graham.bloice@trihedral.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c": [
          "File: epan/dissectors/packet-dnp.c -> epan/dissectors/packet-dnp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: static int hf_dnp3_al_iin_oae = -1;",
          "623: static int hf_dnp3_al_iin_cc = -1;",
          "624: static int hf_dnp3_al_obj = -1;",
          "627: static int hf_dnp3_al_range_start8 = -1;",
          "628: static int hf_dnp3_al_range_stop8 = -1;",
          "629: static int hf_dnp3_al_range_start16 = -1;",
          "",
          "[Removed Lines]",
          "625: static int hf_dnp3_al_objq_index = -1;",
          "626: static int hf_dnp3_al_objq_code = -1;",
          "",
          "[Added Lines]",
          "625: static int hf_dnp3_al_objq_prefix = -1;",
          "626: static int hf_dnp3_al_objq_range = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "867:   { 0, NULL }",
          "868: };",
          "879:   { 0, NULL }",
          "880: };",
          "895:   { 10,                     \"Reserved\" },",
          "897:   { 0, NULL }",
          "898: };",
          "902: static const value_string dnp3_al_obj_vals[] = {",
          "",
          "[Removed Lines]",
          "871: static const value_string dnp3_al_objq_index_vals[] = {",
          "872:   { AL_OBJQL_IDX_NI,    \"None\" },",
          "873:   { AL_OBJQL_IDX_1O,    \"1-Octet Indexing\" },",
          "874:   { AL_OBJQL_IDX_2O,    \"2-Octet Indexing\" },",
          "875:   { AL_OBJQL_IDX_4O,    \"4-Octet Indexing\" },",
          "876:   { AL_OBJQL_IDX_1OS,   \"1-Octet Object Size\" },",
          "877:   { AL_OBJQL_IDX_2OS,   \"2-Octet Object Size\" },",
          "878:   { AL_OBJQL_IDX_4OS,   \"4-Octet Object Size\" },",
          "881: static value_string_ext dnp3_al_objq_index_vals_ext = VALUE_STRING_EXT_INIT(dnp3_al_objq_index_vals);",
          "884: static const value_string dnp3_al_objq_code_vals[] = {",
          "885:   { AL_OBJQL_CODE_SSI8,     \"8-bit Start and Stop Indices\" },",
          "886:   { AL_OBJQL_CODE_SSI16,    \"16-bit Start and Stop Indices\" },",
          "887:   { AL_OBJQL_CODE_SSI32,    \"32-bit Start and Stop Indices\" },",
          "888:   { AL_OBJQL_CODE_AA8,      \"8-bit Absolute Address in Range Field\" },",
          "889:   { AL_OBJQL_CODE_AA16,     \"16-bit Absolute Address in Range Field\" },",
          "890:   { AL_OBJQL_CODE_AA32,     \"32-bit Absolute Address in Range Field\" },",
          "891:   { AL_OBJQL_CODE_R0,       \"No Range Field\" },",
          "892:   { AL_OBJQL_CODE_SF8,      \"8-bit Single Field Quantity\" },",
          "893:   { AL_OBJQL_CODE_SF16,     \"16-bit Single Field Quantity\" },",
          "894:   { AL_OBJQL_CODE_SF32,     \"32-bit Single Field Quantity\" },",
          "896:   { AL_OBJQL_CODE_FF,       \"Free-format Qualifier\" },",
          "899: static value_string_ext dnp3_al_objq_code_vals_ext = VALUE_STRING_EXT_INIT(dnp3_al_objq_code_vals);",
          "",
          "[Added Lines]",
          "871: static const value_string dnp3_al_objq_prefix_vals[] = {",
          "872:   { AL_OBJQL_PREFIX_NI,    \"None\" },",
          "873:   { AL_OBJQL_PREFIX_1O,    \"1-Octet Index Prefix\" },",
          "874:   { AL_OBJQL_PREFIX_2O,    \"2-Octet Index Prefix\" },",
          "875:   { AL_OBJQL_PREFIX_4O,    \"4-Octet Index Prefix\" },",
          "876:   { AL_OBJQL_PREFIX_1OS,   \"1-Octet Object Size Prefix\" },",
          "877:   { AL_OBJQL_PREFIX_2OS,   \"2-Octet Object Size Prefix\" },",
          "878:   { AL_OBJQL_PREFIX_4OS,   \"4-Octet Object Size Prefix\" },",
          "881: static value_string_ext dnp3_al_objq_prefix_vals_ext = VALUE_STRING_EXT_INIT(dnp3_al_objq_prefix_vals);",
          "884: static const value_string dnp3_al_objq_range_vals[] = {",
          "885:   { AL_OBJQL_RANGE_SSI8,    \"8-bit Start and Stop Indices\" },",
          "886:   { AL_OBJQL_RANGE_SSI16,   \"16-bit Start and Stop Indices\" },",
          "887:   { AL_OBJQL_RANGE_SSI32,   \"32-bit Start and Stop Indices\" },",
          "888:   { AL_OBJQL_RANGE_AA8,     \"8-bit Absolute Address in Range Field\" },",
          "889:   { AL_OBJQL_RANGE_AA16,    \"16-bit Absolute Address in Range Field\" },",
          "890:   { AL_OBJQL_RANGE_AA32,    \"32-bit Absolute Address in Range Field\" },",
          "891:   { AL_OBJQL_RANGE_R0,      \"No Range Field\" },",
          "892:   { AL_OBJQL_RANGE_SF8,     \"8-bit Single Field Quantity\" },",
          "893:   { AL_OBJQL_RANGE_SF16,    \"16-bit Single Field Quantity\" },",
          "894:   { AL_OBJQL_RANGE_SF32,    \"32-bit Single Field Quantity\" },",
          "896:   { AL_OBJQL_RANGE_FF,      \"Free-format Qualifier\" },",
          "899: static value_string_ext dnp3_al_objq_range_vals_ext = VALUE_STRING_EXT_INIT(dnp3_al_objq_range_vals);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1473:   proto_tree_add_item(iin_tree, hf_dnp3_al_iin_fcni,  tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1474: }",
          "1480: static int",
          "1482: {",
          "1487:   {",
          "1492:       break;",
          "1495:       proto_tree_add_item(item_tree, hf_dnp3_al_index8, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "1497:       break;",
          "1500:       proto_tree_add_item(item_tree, hf_dnp3_al_index16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1502:       break;",
          "1505:       proto_tree_add_item(item_tree, hf_dnp3_al_index32, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1507:       break;",
          "1510:       proto_tree_add_item(item_tree, hf_dnp3_al_size8, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "1512:       break;",
          "1515:       proto_tree_add_item(item_tree, hf_dnp3_al_size16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1517:       break;",
          "1520:       proto_tree_add_item(item_tree, hf_dnp3_al_size32, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1522:       break;",
          "1523:   }",
          "1525: }",
          "",
          "[Removed Lines]",
          "1481: dnp3_al_obj_procindex(tvbuff_t *tvb, int offset, guint8 al_objq_index, guint32 *al_ptaddr, proto_tree *item_tree)",
          "1483:   int         indexbytes = 0;",
          "1484:   proto_item *index_item;",
          "1486:   switch (al_objq_index)",
          "1489:       indexbytes = 0;",
          "1490:       index_item = proto_tree_add_uint(item_tree, hf_dnp3_al_point_index, tvb, offset, 0, *al_ptaddr);",
          "1491:       PROTO_ITEM_SET_GENERATED(index_item);",
          "1493:     case AL_OBJQL_IDX_1O:",
          "1496:       indexbytes = 1;",
          "1498:     case AL_OBJQL_IDX_2O:",
          "1501:       indexbytes = 2;",
          "1503:     case AL_OBJQL_IDX_4O:",
          "1506:       indexbytes = 4;",
          "1508:     case AL_OBJQL_IDX_1OS:",
          "1511:       indexbytes = 1;",
          "1513:     case AL_OBJQL_IDX_2OS:",
          "1516:       indexbytes = 2;",
          "1518:     case AL_OBJQL_IDX_4OS:",
          "1521:       indexbytes = 4;",
          "1524:   return indexbytes;",
          "",
          "[Added Lines]",
          "1481: dnp3_al_obj_procprefix(tvbuff_t *tvb, int offset, guint8 al_objq_prefix, guint32 *al_ptaddr, proto_tree *item_tree)",
          "1483:   int         prefixbytes = 0;",
          "1484:   proto_item *prefix_item;",
          "1486:   switch (al_objq_prefix)",
          "1489:       prefixbytes = 0;",
          "1490:       prefix_item = proto_tree_add_uint(item_tree, hf_dnp3_al_point_index, tvb, offset, 0, *al_ptaddr);",
          "1491:       PROTO_ITEM_SET_GENERATED(prefix_item);",
          "1493:     case AL_OBJQL_PREFIX_1O:",
          "1496:       prefixbytes = 1;",
          "1498:     case AL_OBJQL_PREFIX_2O:",
          "1501:       prefixbytes = 2;",
          "1503:     case AL_OBJQL_PREFIX_4O:",
          "1506:       prefixbytes = 4;",
          "1508:     case AL_OBJQL_PREFIX_1OS:",
          "1511:       prefixbytes = 1;",
          "1513:     case AL_OBJQL_PREFIX_2OS:",
          "1516:       prefixbytes = 2;",
          "1518:     case AL_OBJQL_PREFIX_4OS:",
          "1521:       prefixbytes = 4;",
          "1524:   return prefixbytes;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1675:                        guint16 *al_objtype, nstime_t *al_cto)",
          "1676: {",
          "1679:   guint16     al_obj, temp;",
          "1680:   guint32     al_ptaddr = 0;",
          "1681:   int         num_items = 0;",
          "",
          "[Removed Lines]",
          "1678:   guint8      al_objq, al_objq_index, al_objq_code, al_oct_len = 0, bitindex;",
          "",
          "[Added Lines]",
          "1678:   guint8      al_objq, al_objq_prefix, al_objq_range, al_oct_len = 0, bitindex;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1709:   al_objq = tvb_get_guint8(tvb, offset);",
          "1714:   qualifier_tree = proto_tree_add_subtree_format(object_tree, tvb, offset, 1, ett_dnp3_al_obj_qualifier, NULL,",
          "1721:   offset += 1;",
          "1724:   range_tree = proto_tree_add_subtree(object_tree, tvb, offset, 0, ett_dnp3_al_obj_range, &range_item, \"Number of Items: \");",
          "1727:   {",
          "1729:       num_items = ( tvb_get_guint8(tvb, offset+1) - tvb_get_guint8(tvb, offset) + 1);",
          "1730:       PROTO_ITEM_SET_GENERATED(range_item);",
          "1731:       al_ptaddr = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "1710:   al_objq_index = al_objq & AL_OBJQ_INDEX;",
          "1711:   al_objq_index = al_objq_index >> 4;",
          "1712:   al_objq_code = al_objq & AL_OBJQ_CODE;",
          "1715:     \"Qualifier Field, Prefix: %s, Code: %s\",",
          "1716:     val_to_str_ext_const(al_objq_index, &dnp3_al_objq_index_vals_ext, \"Unknown Index Type\"),",
          "1717:     val_to_str_ext_const(al_objq_code, &dnp3_al_objq_code_vals_ext, \"Unknown Code Type\"));",
          "1718:   proto_tree_add_item(qualifier_tree, hf_dnp3_al_objq_index, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1719:   proto_tree_add_item(qualifier_tree, hf_dnp3_al_objq_code, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1726:   switch (al_objq_code)",
          "",
          "[Added Lines]",
          "1710:   al_objq_prefix = al_objq & AL_OBJQ_PREFIX;",
          "1711:   al_objq_prefix = al_objq_prefix >> 4;",
          "1712:   al_objq_range = al_objq & AL_OBJQ_RANGE;",
          "1715:     \"Qualifier Field, Prefix: %s, Range: %s\",",
          "1716:     val_to_str_ext_const(al_objq_prefix, &dnp3_al_objq_prefix_vals_ext, \"Unknown Prefix Type\"),",
          "1717:     val_to_str_ext_const(al_objq_range, &dnp3_al_objq_range_vals_ext, \"Unknown Range Type\"));",
          "1718:   proto_tree_add_item(qualifier_tree, hf_dnp3_al_objq_prefix, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1719:   proto_tree_add_item(qualifier_tree, hf_dnp3_al_objq_range, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1726:   switch (al_objq_range)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1799:   }",
          "1800:   proto_item_append_text(range_item, \"%d\", num_items);",
          "1802:   if (num_items < 0) {",
          "1803:     proto_item_append_text(range_item, \" (bogus)\");",
          "1804:     expert_add_info(pinfo, range_item, &ei_dnp_num_items_neg);",
          "1805:     return tvb_captured_length(tvb);",
          "1806:   }",
          "1809:   offset += rangebytes;",
          "1811:   bitindex = 0; /* Temp variable for cycling through points when object values are encoded into",
          "1816:     int item_num;",
          "1817:     int start_offset;",
          "",
          "[Removed Lines]",
          "1815:   if (!header_only || al_objq_index > 0) {",
          "",
          "[Added Lines]",
          "1816:   if (!header_only || al_objq_prefix > 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1822:       proto_item *point_item;",
          "1823:       proto_tree *point_tree;",
          "1824:       guint       data_pos;",
          "1829:         point_tree = proto_tree_add_subtree(object_tree, tvb, offset, -1, ett_dnp3_al_obj_point, &point_item, \"Point Number\");",
          "1830:       else",
          "1831:         point_tree = proto_tree_add_subtree(object_tree, tvb, offset, -1, ett_dnp3_al_obj_point, &point_item, \"Object: Size\");",
          "1833:       data_pos   = offset;",
          "1835:       proto_item_append_text(point_item, \" %u\", al_ptaddr);",
          "1840:         guint8       al_2bit, al_ptflags, al_bi_val, al_tcc_code, da_len;",
          "1841:         gint16       al_val_int16;",
          "1842:         guint16      al_val_uint16, al_ctlobj_stat;",
          "",
          "[Removed Lines]",
          "1825:       int         indexbytes;",
          "1828:       if (al_objq_index <= AL_OBJQL_IDX_4O)",
          "1834:       indexbytes = dnp3_al_obj_procindex(tvb, offset, al_objq_index, &al_ptaddr, point_tree);",
          "1836:       proto_item_set_len(point_item, indexbytes);",
          "1837:       data_pos += indexbytes;",
          "1839:       if (!header_only || (AL_OBJQL_IDX_1OS <= al_objq_index && al_objq_index <= AL_OBJQL_IDX_4OS)) {",
          "",
          "[Added Lines]",
          "1826:       int         prefixbytes;",
          "1829:       if (al_objq_prefix <= AL_OBJQL_PREFIX_4O)",
          "1835:       prefixbytes = dnp3_al_obj_procprefix(tvb, offset, al_objq_prefix, &al_ptaddr, point_tree);",
          "1837:       proto_item_set_len(point_item, prefixbytes);",
          "1838:       data_pos += prefixbytes;",
          "1840:       if (!header_only || (AL_OBJQL_PREFIX_1OS <= al_objq_prefix && al_objq_prefix <= AL_OBJQL_PREFIX_4OS)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1969:               proto_item_append_text(point_item, \", Value: %u\", al_bit);",
          "1970:             }",
          "1971:             proto_tree_add_boolean(point_tree, hf_dnp3_al_bit, tvb, offset, 1, al_bit);",
          "1975:             bitindex++;",
          "",
          "[Removed Lines]",
          "1972:             proto_item_set_len(point_item, indexbytes + 1);",
          "",
          "[Added Lines]",
          "1971:             proto_item_set_len(point_item, prefixbytes + 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1979:             if ((bitindex > 7) || (item_num == (num_items-1)))",
          "1980:             {",
          "1981:               bitindex = 0;",
          "1983:             }",
          "1985:             break;",
          "",
          "[Removed Lines]",
          "1982:               offset += (indexbytes + 1);",
          "",
          "[Added Lines]",
          "1981:               offset += (prefixbytes + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1989:             if (bitindex > 3)",
          "1990:             {",
          "1991:               bitindex = 0;",
          "1993:             }",
          "",
          "[Removed Lines]",
          "1992:               offset += (indexbytes + 1);",
          "",
          "[Added Lines]",
          "1990:               offset += (prefixbytes + 1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1999:             proto_item_append_text(point_item, \", Value: %u\", al_2bit);",
          "2000:             proto_tree_add_uint(point_tree, hf_dnp3_al_2bit, tvb, offset, 1, al_2bit);",
          "2004:             if (item_num == (num_items-1))",
          "2005:             {",
          "2007:             }",
          "2010:             bitindex++;",
          "2012:             break;",
          "",
          "[Removed Lines]",
          "2001:             proto_item_set_len(point_item, indexbytes + 1);",
          "2006:               offset += (indexbytes + 1);",
          "",
          "[Added Lines]",
          "1999:             proto_item_set_len(point_item, prefixbytes + 1);",
          "2004:               offset += (prefixbytes + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2089:             al_ptflags = tvb_get_guint8(tvb, data_pos);",
          "2091:             data_pos += 1;",
          "",
          "[Removed Lines]",
          "2090:             dnp3_al_obj_quality(tvb, (offset+indexbytes), al_ptflags, point_tree, point_item, BIN_IN);",
          "",
          "[Added Lines]",
          "2086:             dnp3_al_obj_quality(tvb, (offset+prefixbytes), al_ptflags, point_tree, point_item, BIN_IN);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2762:             data_pos += 1;",
          "2766:             if ((file_data_size) > 0) {",
          "2767:               proto_tree_add_item(point_tree, hf_dnp3_al_file_data, tvb, data_pos, file_data_size, ENC_NA);",
          "2768:               data_pos += file_data_size;",
          "",
          "[Removed Lines]",
          "2765:             file_data_size = al_ptaddr - (data_pos - offset - indexbytes);",
          "",
          "[Added Lines]",
          "2759:             file_data_size = al_ptaddr - (data_pos - offset - prefixbytes);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2785:             data_pos += 4;",
          "2789:             if ((file_data_size) > 0) {",
          "2790:               proto_tree_add_item(point_tree, hf_dnp3_al_file_data, tvb, data_pos, file_data_size, ENC_NA);",
          "2791:               data_pos += file_data_size;",
          "",
          "[Removed Lines]",
          "2788:             file_data_size = al_ptaddr - (data_pos - offset - indexbytes);",
          "",
          "[Added Lines]",
          "2782:             file_data_size = al_ptaddr - (data_pos - offset - prefixbytes);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2812:             data_pos += 1;",
          "2816:             if ((file_data_size) > 0) {",
          "2817:               proto_tree_add_item(point_tree, hf_dnp3_al_file_data, tvb, data_pos, file_data_size, ENC_NA);",
          "2818:               data_pos += file_data_size;",
          "",
          "[Removed Lines]",
          "2815:             file_data_size = al_ptaddr - (data_pos - offset - indexbytes);",
          "",
          "[Added Lines]",
          "2809:             file_data_size = al_ptaddr - (data_pos - offset - prefixbytes);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2847:         al_ptaddr++;",
          "2849:         offset = data_pos;",
          "2850:       }",
          "2851:       if (start_offset > offset) {",
          "",
          "[Removed Lines]",
          "2848:       } else {",
          "",
          "[Added Lines]",
          "2842:       }",
          "2843:       else {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3844:         \"Application Layer Object\", HFILL }",
          "3845:     },",
          "3851:     },",
          "3857:     },",
          "3859:     { &hf_dnp3_al_range_start8,",
          "",
          "[Removed Lines]",
          "3847:     { &hf_dnp3_al_objq_index,",
          "3848:       { \"Index Prefix\", \"dnp3.al.objq.index\",",
          "3849:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &dnp3_al_objq_index_vals_ext, AL_OBJQ_INDEX,",
          "3850:         \"Object Index Prefixing\", HFILL }",
          "3853:     { &hf_dnp3_al_objq_code,",
          "3854:       { \"Qualifier Code\", \"dnp3.al.objq.code\",",
          "3855:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &dnp3_al_objq_code_vals_ext, AL_OBJQ_CODE,",
          "3856:         \"Object Qualifier Code\", HFILL }",
          "",
          "[Added Lines]",
          "3843:     { &hf_dnp3_al_objq_prefix,",
          "3844:       { \"Prefix Code\", \"dnp3.al.objq.prefix\",",
          "3845:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &dnp3_al_objq_prefix_vals_ext, AL_OBJQ_PREFIX,",
          "3846:         \"Object Prefix Code\", HFILL }",
          "3849:     { &hf_dnp3_al_objq_range,",
          "3850:       { \"Range Code\", \"dnp3.al.objq.range\",",
          "3851:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &dnp3_al_objq_range_vals_ext, AL_OBJQ_RANGE,",
          "3852:         \"Object Range Specifier Code\", HFILL }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "072fdcb3a4a46706b7c7f8c207b06cdd6f376416",
      "candidate_info": {
        "commit_hash": "072fdcb3a4a46706b7c7f8c207b06cdd6f376416",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/072fdcb3a4a46706b7c7f8c207b06cdd6f376416",
        "files": [
          "epan/dissectors/packet-dnp.c"
        ],
        "message": "Prevent infinite loop in DNP3 dissector.\n\nBug: 11941\nChange-Id: Icd59092a3139b8c22f3866017a093a8b1270f1b2\nReviewed-on: https://code.wireshark.org/review/12941\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 0ca744582d4e560d26b7239bea93a135fd9fd884)\nReviewed-on: https://code.wireshark.org/review/14341\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\n(cherry picked from commit d284d7e4a7cfae8b319d16c29f2a6e35760f86a4)\nReviewed-on: https://code.wireshark.org/review/14371",
        "before_after_code_files": [
          "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c": [
          "File: epan/dissectors/packet-dnp.c -> epan/dissectors/packet-dnp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2459:         al_ptaddr++;",
          "2460:       }",
          "2461:       if (start_offset > offset) {",
          "2462:         expert_add_info_format(pinfo, point_item, PI_MALFORMED, PI_ERROR, \"Invalid length\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2460:       } else {",
          "2461:         offset = data_pos;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ca744582d4e560d26b7239bea93a135fd9fd884",
      "candidate_info": {
        "commit_hash": "0ca744582d4e560d26b7239bea93a135fd9fd884",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0ca744582d4e560d26b7239bea93a135fd9fd884",
        "files": [
          "epan/dissectors/packet-dnp.c"
        ],
        "message": "Prevent infinite loop in DNP3 dissector.\n\nBug: 11941\nChange-Id: Icd59092a3139b8c22f3866017a093a8b1270f1b2\nReviewed-on: https://code.wireshark.org/review/12941\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c": [
          "File: epan/dissectors/packet-dnp.c -> epan/dissectors/packet-dnp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2798:         al_ptaddr++;",
          "2799:       }",
          "2800:       if (start_offset > offset) {",
          "2801:         expert_add_info(pinfo, point_item, &ei_dnp_invalid_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2799:       } else {",
          "2800:         offset = data_pos;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d284d7e4a7cfae8b319d16c29f2a6e35760f86a4",
      "candidate_info": {
        "commit_hash": "d284d7e4a7cfae8b319d16c29f2a6e35760f86a4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d284d7e4a7cfae8b319d16c29f2a6e35760f86a4",
        "files": [
          "epan/dissectors/packet-dnp.c"
        ],
        "message": "Prevent infinite loop in DNP3 dissector.\n\nBug: 11941\nChange-Id: Icd59092a3139b8c22f3866017a093a8b1270f1b2\nReviewed-on: https://code.wireshark.org/review/12941\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 0ca744582d4e560d26b7239bea93a135fd9fd884)\nReviewed-on: https://code.wireshark.org/review/14341\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dnp.c||epan/dissectors/packet-dnp.c": [
          "File: epan/dissectors/packet-dnp.c -> epan/dissectors/packet-dnp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2798:         al_ptaddr++;",
          "2799:       }",
          "2800:       if (start_offset > offset) {",
          "2801:         expert_add_info(pinfo, point_item, &ei_dnp_invalid_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2799:       } else {",
          "2800:         offset = data_pos;",
          "",
          "---------------"
        ]
      }
    }
  ]
}