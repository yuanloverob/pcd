{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ce14cfab45eb62017e39017fd156e3cf1cd1060",
      "candidate_info": {
        "commit_hash": "2ce14cfab45eb62017e39017fd156e3cf1cd1060",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2ce14cfab45eb62017e39017fd156e3cf1cd1060",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: add more required environment variables\n\nAdds more of the undocumented-but-required environment variables for uv_spawn",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:     E_V(\"SYSTEMROOT\"),",
          "631:     E_V(\"SYSTEMDRIVE\"),",
          "632:     E_V(\"TEMP\"),",
          "633:   };",
          "635:   for (env = env_block; *env; env++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:     E_V(\"HOMEDRIVE\"),",
          "639:     E_V(\"HOMEPATH\"),",
          "640:     E_V(\"USERDOMAIN\"),",
          "641:     E_V(\"USERNAME\"),",
          "642:     E_V(\"USERPROFILE\"),",
          "643:     E_V(\"WINDIR\"),",
          "644:     E_V(\"PATH\"),",
          "645:     E_V(\"LOGONSERVER\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "654:   for (i = 0; i < ARRAY_SIZE(required_vars); ++i) {",
          "655:     if (!required_vars[i].supplied) {",
          "657:       var_size = GetEnvironmentVariableW(required_vars[i].wide, NULL, 0);",
          "661:       required_vars[i].value_len = var_size;",
          "663:     }",
          "664:   }",
          "",
          "[Removed Lines]",
          "656:       env_len += required_vars[i].len;",
          "658:       if (var_size == 0) {",
          "659:         return GetLastError();",
          "660:       }",
          "662:       env_len += var_size;",
          "",
          "[Added Lines]",
          "671:       if (var_size != 0) {",
          "672:         env_len += required_vars[i].len;",
          "673:         env_len += var_size;",
          "674:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:   }",
          "686:   for (i = 0; i < ARRAY_SIZE(required_vars); ++i) {",
          "688:       wcscpy(ptr, required_vars[i].wide);",
          "689:       ptr += required_vars[i].len - 1;",
          "",
          "[Removed Lines]",
          "687:     if (!required_vars[i].supplied) {",
          "",
          "[Added Lines]",
          "699:     if (!required_vars[i].supplied && required_vars[i].value_len!=0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfce87c94fa59069ff937bed9cd883ba21cbc158",
      "candidate_info": {
        "commit_hash": "dfce87c94fa59069ff937bed9cd883ba21cbc158",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/dfce87c94fa59069ff937bed9cd883ba21cbc158",
        "files": [
          "test/test-ip6-addr.c"
        ],
        "message": "test: simplify test-ip6-addr.c\n\nDrop the callback-driven approach in favor of a simple loop. Reduces\nthe line count and makes the flow of execution a little easier to\nfollow.",
        "before_after_code_files": [
          "test/test-ip6-addr.c||test/test-ip6-addr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-ip6-addr.c||test/test-ip6-addr.c": [
          "File: test/test-ip6-addr.c -> test/test-ip6-addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: # include <net/if.h>",
          "31: #endif",
          "39:   char string_address[INET6_ADDRSTRLEN];",
          "51:   uv_interface_address_t* addresses;",
          "53:   ASSERT(0 == uv_interface_addresses(&addresses, &count));",
          "55:   for (ix = 0; ix < count; ix++) {",
          "78: #ifdef _WIN32",
          "80: #else",
          "82: #endif",
          "99:   return 0;",
          "100: #else",
          "101:   RETURN_SKIP(\"Qualified link-local addresses are not supported.\");",
          "",
          "[Removed Lines]",
          "33: typedef void (*iface_info_cb)(const char* ip6_addr, const char* device_name,",
          "34:     unsigned iface_index);",
          "36: void call_iface_info_cb(iface_info_cb iface_cb,",
          "37:                         char const* iface_name,",
          "38:                         struct sockaddr_in6 const* address) {",
          "41:   ASSERT(0 == uv_inet_ntop(AF_INET6,",
          "42:                            &address->sin6_addr,",
          "43:                            string_address,",
          "44:                            INET6_ADDRSTRLEN));",
          "45:   iface_cb(string_address, iface_name, address->sin6_scope_id);",
          "46: }",
          "49: void foreach_ip6_interface(iface_info_cb iface_cb) {",
          "50:   int count, ix;",
          "56:     if (addresses[ix].address.address4.sin_family != AF_INET6)",
          "57:       continue;",
          "59:     call_iface_info_cb(iface_cb,",
          "60:                        addresses[ix].name,",
          "61:                        &addresses[ix].address.address6);",
          "62:   }",
          "64:   uv_free_interface_addresses(addresses, count);",
          "65: }",
          "68: void test_ip6_addr_scope(const char* ip6_addr,",
          "69:                          const char* device_name,",
          "70:                          unsigned iface_index) {",
          "72:   char scoped_addr[128];",
          "73:   struct sockaddr_in6 addr;",
          "76:   if (strncmp(ip6_addr, \"fe80::\", 6) != 0) return;",
          "79:   snprintf(scoped_addr, sizeof(scoped_addr), \"%s%%%d\", ip6_addr, iface_index);",
          "81:   snprintf(scoped_addr, sizeof(scoped_addr), \"%s%%%s\", ip6_addr, device_name);",
          "84:   LOGF(\"Testing link-local address %s (iface_index: 0x%02x, device_name: %s)\\n\",",
          "85:        scoped_addr,",
          "86:        iface_index,",
          "87:        device_name);",
          "89:   addr = uv_ip6_addr(scoped_addr, TEST_PORT);",
          "91:   LOGF(\"Got scope_id 0x%02x\\n\", addr.sin6_scope_id);",
          "92:   ASSERT(iface_index == addr.sin6_scope_id);",
          "93: }",
          "96: TEST_IMPL(ip6_addr_link_local) {",
          "97: #ifdef UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "98:   foreach_ip6_interface(&test_ip6_addr_scope);",
          "",
          "[Added Lines]",
          "34: TEST_IMPL(ip6_addr_link_local) {",
          "35: #ifdef UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "38:   uv_interface_address_t* address;",
          "39:   struct sockaddr_in6 addr;",
          "40:   unsigned int iface_index;",
          "41:   const char* device_name;",
          "43:   char scoped_addr[128];",
          "44:   int count;",
          "45:   int ix;",
          "50:     address = addresses + ix;",
          "52:     if (address->address.address6.sin6_family != AF_INET6)",
          "53:       continue;",
          "55:     ASSERT(0 == uv_inet_ntop(AF_INET6,",
          "56:                              &address->address.address6.sin6_addr,",
          "57:                              string_address,",
          "58:                              sizeof(string_address)));",
          "61:     if (strncmp(string_address, \"fe80::\", 6) != 0)",
          "62:       continue;",
          "64:     iface_index = address->address.address6.sin6_scope_id;",
          "65:     device_name = address->name;",
          "68:     snprintf(scoped_addr,",
          "69:              sizeof(scoped_addr),",
          "70:              \"%s%%%d\",",
          "71:              string_address,",
          "72:              iface_index);",
          "74:     snprintf(scoped_addr,",
          "75:              sizeof(scoped_addr),",
          "76:              \"%s%%%s\",",
          "77:              string_address,",
          "78:              device_name);",
          "81:     LOGF(\"Testing link-local address %s \"",
          "82:          \"(iface_index: 0x%02x, device_name: %s)\\n\",",
          "83:          scoped_addr,",
          "84:          iface_index,",
          "85:          device_name);",
          "87:     addr = uv_ip6_addr(scoped_addr, TEST_PORT);",
          "88:     LOGF(\"Got scope_id 0x%02x\\n\", addr.sin6_scope_id);",
          "89:     ASSERT(iface_index == addr.sin6_scope_id);",
          "90:   }",
          "92:   uv_free_interface_addresses(addresses, count);",
          "94:   MAKE_VALGRIND_HAPPY();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59658a8de7cc05a58327a164fd2ed4b050f8b4f4",
      "candidate_info": {
        "commit_hash": "59658a8de7cc05a58327a164fd2ed4b050f8b4f4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/59658a8de7cc05a58327a164fd2ed4b050f8b4f4",
        "files": [
          "Makefile.am",
          "docs/src/threading.rst",
          "include/uv.h",
          "src/unix/thread.c",
          "src/uv-common.c",
          "src/win/thread.c",
          "test/test-list.h",
          "test/test-thread-equal.c",
          "uv.gyp"
        ],
        "message": "unix, windows: add uv_thread_equal",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/thread.c||src/unix/thread.c",
          "src/uv-common.c||src/uv-common.c",
          "src/win/thread.c||src/win/thread.c",
          "test/test-list.h||test/test-list.h",
          "test/test-thread-equal.c||test/test-thread-equal.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:                          test/test-tcp-writealot.c \\",
          "207:                          test/test-tcp-try-write.c \\",
          "208:                          test/test-tcp-write-queue-order.c \\",
          "209:                          test/test-thread.c \\",
          "210:                          test/test-threadpool-cancel.c \\",
          "211:                          test/test-threadpool.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:                          test/test-thread-equal.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1369: typedef void (*uv_thread_cb)(void* arg);",
          "1371: UV_EXTERN int uv_thread_create(uv_thread_t* tid, uv_thread_cb entry, void* arg);",
          "1373: UV_EXTERN int uv_thread_join(uv_thread_t *tid);",
          "1376: #define XX(_, name) uv_ ## name ## _t name;",
          "",
          "[Removed Lines]",
          "1372: UV_EXTERN unsigned long uv_thread_self(void);",
          "",
          "[Added Lines]",
          "1372: UV_EXTERN uv_thread_t uv_thread_self(void);",
          "1374: UV_EXTERN int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2);",
          "",
          "---------------"
        ],
        "src/unix/thread.c||src/unix/thread.c": [
          "File: src/unix/thread.c -> src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: }",
          "39: int uv_mutex_init(uv_mutex_t* mutex) {",
          "40: #if defined(NDEBUG) || !defined(PTHREAD_MUTEX_ERRORCHECK)",
          "41:   return -pthread_mutex_init(mutex, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2) {",
          "40:   return pthread_equal(*t1, *t2);",
          "41: }",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: }",
          "310: #ifdef _WIN32",
          "312: #else",
          "314: #endif",
          "315: }",
          "",
          "[Removed Lines]",
          "309: unsigned long uv_thread_self(void) {",
          "311:   return (unsigned long) GetCurrentThreadId();",
          "313:   return (unsigned long) pthread_self();",
          "",
          "[Added Lines]",
          "309: uv_thread_t uv_thread_self(void) {",
          "311:   return GetCurrentThreadId();",
          "313:   return pthread_self();",
          "",
          "---------------"
        ],
        "src/win/thread.c||src/win/thread.c": [
          "File: src/win/thread.c -> src/win/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: }",
          "132: int uv_mutex_init(uv_mutex_t* mutex) {",
          "133:   InitializeCriticalSection(mutex);",
          "134:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2) {",
          "133:   return *t1 == *t2;",
          "134: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: TEST_DECLARE   (thread_mutex)",
          "259: TEST_DECLARE   (thread_rwlock)",
          "260: TEST_DECLARE   (thread_create)",
          "261: TEST_DECLARE   (dlerror)",
          "262: TEST_DECLARE   (poll_duplex)",
          "263: TEST_DECLARE   (poll_unidirectional)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: TEST_DECLARE   (thread_equal)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   TEST_ENTRY  (thread_mutex)",
          "631:   TEST_ENTRY  (thread_rwlock)",
          "632:   TEST_ENTRY  (thread_create)",
          "633:   TEST_ENTRY  (dlerror)",
          "634:   TEST_ENTRY  (ip4_addr)",
          "635:   TEST_ENTRY  (ip6_addr_link_local)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:   TEST_ENTRY  (thread_equal)",
          "",
          "---------------"
        ],
        "test/test-thread-equal.c||test/test-thread-equal.c": [
          "File: test/test-thread-equal.c -> test/test-thread-equal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: uv_thread_t main_thread_id;",
          "26: uv_thread_t subthreads[2];",
          "28: static void check_thread(void* arg) {",
          "29:   uv_thread_t *thread_id = arg;",
          "30:   uv_thread_t self_id = uv_thread_self();",
          "31:   ASSERT(uv_thread_equal(&main_thread_id, &self_id) == 0);",
          "33: }",
          "35: TEST_IMPL(thread_equal) {",
          "36:   uv_thread_t threads[2];",
          "37:   main_thread_id = uv_thread_self();",
          "38:   ASSERT(0 != uv_thread_equal(&main_thread_id, &main_thread_id));",
          "39:   ASSERT(0 == uv_thread_create(threads + 0, check_thread, subthreads + 0));",
          "40:   ASSERT(0 == uv_thread_create(threads + 1, check_thread, subthreads + 1));",
          "41:   ASSERT(0 == uv_thread_join(threads + 0));",
          "42:   ASSERT(0 == uv_thread_join(threads + 1));",
          "43:   ASSERT(0 == uv_thread_equal(subthreads + 0, subthreads + 1));",
          "44:   return 0;",
          "45: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:         'test/test-tcp-write-queue-order.c',",
          "411:         'test/test-threadpool.c',",
          "412:         'test/test-threadpool-cancel.c',",
          "413:         'test/test-mutexes.c',",
          "414:         'test/test-thread.c',",
          "415:         'test/test-barrier.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:         'test/test-thread-equal.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ae69b6387fcebd75e4d733d3a95f8497d8ca45",
      "candidate_info": {
        "commit_hash": "87ae69b6387fcebd75e4d733d3a95f8497d8ca45",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/87ae69b6387fcebd75e4d733d3a95f8497d8ca45",
        "files": [
          "include/uv.h",
          "src/uv-common.c"
        ],
        "message": "unix, windows: uv_now constness\n\nuv_now doesnt require modification of uv_loop_t as such argument is\nchanged to a const uv_loop_t* as this more in spirit with remaining\nAPI in libuv.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "348: UV_EXTERN uint64_t uv_now(uv_loop_t*);",
          "",
          "[Added Lines]",
          "348: UV_EXTERN uint64_t uv_now(const uv_loop_t*);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: }",
          "388:   return loop->time;",
          "389: }",
          "",
          "[Removed Lines]",
          "387: uint64_t uv_now(uv_loop_t* loop) {",
          "",
          "[Added Lines]",
          "387: uint64_t uv_now(const uv_loop_t* loop) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5b6db6c1d7f93d28281207fd47c3841c9a9792e",
      "candidate_info": {
        "commit_hash": "f5b6db6c1d7f93d28281207fd47c3841c9a9792e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f5b6db6c1d7f93d28281207fd47c3841c9a9792e",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/version.c"
        ],
        "message": "2013.09.05, Version 0.11.13 (Unstable)\n\nChanges since version 0.11.12:\n\n* unix: define _GNU_SOURCE, exposes glibc-isms (Ben Noordhuis)\n\n* windows: check for nonconforming swprintf arguments (Brent Cook)\n\n* build: include internal headers in source list (Brent Cook)\n\n* include: merge uv_tcp_bind and uv_tcp_bind6 (Ben Noordhuis)\n\n* include: merge uv_tcp_connect and uv_tcp_connect6 (Ben Noordhuis)\n\n* include: merge uv_udp_bind and uv_udp_bind6 (Ben Noordhuis)\n\n* include: merge uv_udp_send and uv_udp_send6 (Ben Noordhuis)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.5], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.13], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 13",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}