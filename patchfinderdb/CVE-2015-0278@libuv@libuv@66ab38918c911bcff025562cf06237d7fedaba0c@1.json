{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2611ef43b15dc083ac2ffd5f16901a4ff076be03",
      "candidate_info": {
        "commit_hash": "2611ef43b15dc083ac2ffd5f16901a4ff076be03",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2611ef43b15dc083ac2ffd5f16901a4ff076be03",
        "files": [
          "src/unix/loop.c",
          "src/win/core.c"
        ],
        "message": "unix, windows: add assertion in uv_loop_delete",
        "before_after_code_files": [
          "src/unix/loop.c||src/unix/loop.c",
          "src/win/core.c||src/win/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/loop.c||src/unix/loop.c": [
          "File: src/unix/loop.c -> src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: void uv_loop_delete(uv_loop_t* loop) {",
          "91:   uv_loop_t* default_loop;",
          "92:   default_loop = default_loop_ptr;",
          "94:   if (loop != default_loop)",
          "95:     free(loop);",
          "96: }",
          "",
          "[Removed Lines]",
          "93:   uv_loop_close(loop);",
          "",
          "[Added Lines]",
          "93:   assert(uv_loop_close(loop) == 0);",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: void uv_loop_delete(uv_loop_t* loop) {",
          "226:   if (loop != &uv_default_loop_)",
          "227:     free(loop);",
          "228: }",
          "",
          "[Removed Lines]",
          "225:   uv_loop_close(loop);",
          "",
          "[Added Lines]",
          "225:   assert(uv_loop_close(loop) == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7301d21e46135c0954abe937f6326c8a5fc36fe3",
      "candidate_info": {
        "commit_hash": "7301d21e46135c0954abe937f6326c8a5fc36fe3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7301d21e46135c0954abe937f6326c8a5fc36fe3",
        "files": [
          "common.gypi",
          "gyp_uv.py",
          "samples/socks5-proxy/Makefile",
          "uv.gyp",
          "vcbuild.bat"
        ],
        "message": "gyp: qualify `library` variable\n\nUse prefixed variable name for better control over dependencies.",
        "before_after_code_files": [
          "common.gypi||common.gypi",
          "gyp_uv.py||gyp_uv.py",
          "uv.gyp||uv.gyp",
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:     'visibility%': 'hidden',         # V8's visibility setting",
          "4:     'target_arch%': 'ia32',          # set v8's target architecture",
          "5:     'host_arch%': 'ia32',            # set v8's host architecture",
          "7:     'component%': 'static_library',  # NB. these names match with what V8 expects",
          "8:     'msvs_multi_core_compile': '0',  # we do enable multicore compiles, but not using the V8 way",
          "9:     'gcc_version%': 'unknown',",
          "",
          "[Removed Lines]",
          "6:     'library%': 'static_library',    # allow override to 'shared_library' for DLL/.so builds",
          "",
          "[Added Lines]",
          "6:     'uv_library%': 'static_library', # allow override to 'shared_library' for DLL/.so builds",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         'msvs_settings': {",
          "20:           'VCCLCompilerTool': {",
          "21:             'target_conditions': [",
          "23:                 'RuntimeLibrary': 1, # static debug",
          "24:               }, {",
          "25:                 'RuntimeLibrary': 3, # DLL debug",
          "",
          "[Removed Lines]",
          "22:               ['library==\"static_library\"', {",
          "",
          "[Added Lines]",
          "22:               ['uv_library==\"static_library\"', {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         'msvs_settings': {",
          "57:           'VCCLCompilerTool': {",
          "58:             'target_conditions': [",
          "60:                 'RuntimeLibrary': 0, # static release",
          "61:               }, {",
          "62:                 'RuntimeLibrary': 2, # debug release",
          "",
          "[Removed Lines]",
          "59:               ['library==\"static_library\"', {",
          "",
          "[Added Lines]",
          "59:               ['uv_library==\"static_library\"', {",
          "",
          "---------------"
        ],
        "gyp_uv.py||gyp_uv.py": [
          "File: gyp_uv.py -> gyp_uv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   if not any(a.startswith('-Dtarget_arch=') for a in args):",
          "89:     args.append('-Dtarget_arch=%s' % host_arch())",
          "94:   if not any(a.startswith('-Dcomponent=') for a in args):",
          "95:     args.append('-Dcomponent=static_library')",
          "",
          "[Removed Lines]",
          "91:   if not any(a.startswith('-Dlibrary=') for a in args):",
          "92:     args.append('-Dlibrary=static_library')",
          "",
          "[Added Lines]",
          "91:   if not any(a.startswith('-Duv_library=') for a in args):",
          "92:     args.append('-Duv_library=static_library')",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   'targets': [",
          "32:     {",
          "33:       'target_name': 'libuv',",
          "35:       'include_dirs': [",
          "36:         'include',",
          "37:         'src/',",
          "",
          "[Removed Lines]",
          "34:       'type': '<(library)',",
          "",
          "[Added Lines]",
          "34:       'type': '<(uv_library)',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:             ],",
          "168:           },",
          "169:           'conditions': [",
          "171:               'cflags': [ '-fPIC' ],",
          "172:             }],",
          "174:               'link_settings': {",
          "175:                 # Must correspond with UV_VERSION_MAJOR and UV_VERSION_MINOR",
          "176:                 # in src/version.c",
          "",
          "[Removed Lines]",
          "170:             ['library==\"shared_library\"', {",
          "173:             ['library==\"shared_library\" and OS!=\"mac\"', {",
          "",
          "[Added Lines]",
          "170:             ['uv_library==\"shared_library\"', {",
          "173:             ['uv_library==\"shared_library\" and OS!=\"mac\"', {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:         [ 'OS in \"mac freebsd dragonflybsd openbsd netbsd\".split()', {",
          "266:           'sources': [ 'src/unix/kqueue.c' ],",
          "267:         }],",
          "269:           'defines': [ 'BUILDING_UV_SHARED=1' ]",
          "270:         }],",
          "271:         # FIXME(bnoordhuis or tjfontaine) Unify this, it's extremely ugly.",
          "",
          "[Removed Lines]",
          "268:         ['library==\"shared_library\"', {",
          "",
          "[Added Lines]",
          "268:         ['uv_library==\"shared_library\"', {",
          "",
          "---------------"
        ],
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: :have_gyp",
          "101: if not defined PYTHON set PYTHON=\"python\"",
          "103: if errorlevel 1 goto create-msvs-files-failed",
          "104: if not exist uv.sln goto create-msvs-files-failed",
          "105: echo Project files generated.",
          "",
          "[Removed Lines]",
          "102: %PYTHON% gyp_uv.py -Dtarget_arch=%target_arch% -Dlibrary=%library%",
          "",
          "[Added Lines]",
          "102: %PYTHON% gyp_uv.py -Dtarget_arch=%target_arch% -Duv_library=%library%",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d67d713fac58d61ca119df7eb3a13729192b9d56",
      "candidate_info": {
        "commit_hash": "d67d713fac58d61ca119df7eb3a13729192b9d56",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d67d713fac58d61ca119df7eb3a13729192b9d56",
        "files": [
          "build.mk"
        ],
        "message": "build: make `make clean` remove test/runner.o",
        "before_after_code_files": [
          "build.mk||build.mk"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build.mk||build.mk": [
          "File: build.mk -> build.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: clean distclean: clean-platform",
          "161:  $(RM) libuv.a libuv.$(SOEXT) \\",
          "162:   test/run-tests.o test/run-benchmarks.o \\",
          "164:   $(BENCHMARKS) $(TESTS) $(RUNNER_LIBS)",
          "",
          "[Removed Lines]",
          "163:   test/run-tests$(E) test/run-benchmarks$(E) \\",
          "",
          "[Added Lines]",
          "163:   test/runner.o run-tests$(E) test/run-benchmarks$(E) \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a8e81374e861d425b56c45c8599595d848911d2",
      "candidate_info": {
        "commit_hash": "0a8e81374e861d425b56c45c8599595d848911d2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0a8e81374e861d425b56c45c8599595d848911d2",
        "files": [
          ".mailmap",
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "include/uv-version.h"
        ],
        "message": "2014.11.27, Version 1.0.1 (Stable)\n\nChanges since version 1.0.0:\n\n* readme: remove Rust from users (Elijah Andrews)\n\n* doc,build,include: update project links (Ben Noordhuis)\n\n* doc: fix typo: Strcutures -> Structures (Michael Ira Krufky)\n\n* unix: fix processing process handles queue (Sa\u00fal Ibarra Corretg\u00e9)\n\n* win: replace non-ansi characters in source file (Bert Belder)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [1.0.0], [https://github.com/libuv/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [1.0.1], [https://github.com/libuv/libuv/issues])",
          "",
          "---------------"
        ],
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 1",
          "34: #define UV_VERSION_MINOR 0",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "37: #define UV_VERSION_SUFFIX \"\"",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_PATCH 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_PATCH 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3558d65d2f173ff7a8148d340a31741aaa5b35f9",
      "candidate_info": {
        "commit_hash": "3558d65d2f173ff7a8148d340a31741aaa5b35f9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3558d65d2f173ff7a8148d340a31741aaa5b35f9",
        "files": [
          "Makefile.am",
          "include/uv.h",
          "src/unix/udp.c",
          "src/win/udp.c",
          "test/test-list.h",
          "test/test-udp-bind.c",
          "test/test-watcher-cross-stop.c",
          "uv.gyp"
        ],
        "message": "unix, windows: do not set SO_REUSEADDR by default on udp\n\nAdd UV_UDP_REUSEADDR flag instead, which can be passed to uv_udp_bind.\nIf the udp handle is unbound when uv_udp_set_memberhsip or\nuv_udp_set_multicast_interface is called, the handle will be bound with\nUV_UDP_REUSEADDR set.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/udp.c||src/win/udp.c",
          "test/test-list.h||test/test-list.h",
          "test/test-udp-bind.c||test/test-udp-bind.c",
          "test/test-watcher-cross-stop.c||test/test-watcher-cross-stop.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:                          test/test-timer-from-check.c \\",
          "201:                          test/test-timer.c \\",
          "202:                          test/test-tty.c \\",
          "203:                          test/test-udp-dgram-too-big.c \\",
          "204:                          test/test-udp-ipv6.c \\",
          "205:                          test/test-udp-multicast-interface.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:                          test/test-udp-bind.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "850: };",
          "",
          "[Removed Lines]",
          "849:   UV_UDP_PARTIAL = 2",
          "",
          "[Added Lines]",
          "849:   UV_UDP_PARTIAL = 2,",
          "857:   UV_UDP_REUSEADDR = 4",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static void uv__udp_io(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "43: static void uv__udp_recvmsg(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "44: static void uv__udp_sendmsg(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "48: void uv__udp_close(uv_udp_t* handle) {",
          "",
          "[Removed Lines]",
          "45: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle, int domain);",
          "",
          "[Added Lines]",
          "45: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle,",
          "46:                                        int domain,",
          "47:                                        unsigned int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   fd = -1;",
          "312:     return -EINVAL;",
          "",
          "[Removed Lines]",
          "311:   if (flags & ~UV_UDP_IPV6ONLY)",
          "",
          "[Added Lines]",
          "313:   if (flags & ~(UV_UDP_IPV6ONLY | UV_UDP_REUSEADDR))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:     handle->io_watcher.fd = fd;",
          "324:   }",
          "330:   if (flags & UV_UDP_IPV6ONLY) {",
          "331: #ifdef IPV6_V6ONLY",
          "",
          "[Removed Lines]",
          "326:   err = uv__set_reuse(fd);",
          "327:   if (err)",
          "328:     goto out;",
          "",
          "[Added Lines]",
          "328:   if (flags & UV_UDP_REUSEADDR) {",
          "329:     err = uv__set_reuse(fd);",
          "330:     if (err)",
          "331:       goto out;",
          "332:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354: }",
          "358:   unsigned char taddr[sizeof(struct sockaddr_in6)];",
          "359:   socklen_t addrlen;",
          "",
          "[Removed Lines]",
          "357: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle, int domain) {",
          "",
          "[Added Lines]",
          "361: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle,",
          "362:                                        int domain,",
          "363:                                        unsigned int flags) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "387:     abort();",
          "388:   }",
          "391: }",
          "",
          "[Removed Lines]",
          "390:   return uv__udp_bind(handle, (const struct sockaddr*) &taddr, addrlen, 0);",
          "",
          "[Added Lines]",
          "396:   return uv__udp_bind(handle, (const struct sockaddr*) &taddr, addrlen, flags);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "403:   assert(nbufs > 0);",
          "406:   if (err)",
          "407:     return err;",
          "",
          "[Removed Lines]",
          "405:   err = uv__udp_maybe_deferred_bind(handle, addr->sa_family);",
          "",
          "[Added Lines]",
          "411:   err = uv__udp_maybe_deferred_bind(handle, addr->sa_family, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "547:                           const char* multicast_addr,",
          "548:                           const char* interface_addr,",
          "549:                           uv_membership membership) {",
          "550:   struct sockaddr_in addr4;",
          "551:   struct sockaddr_in6 addr6;",
          "554:     return uv__udp_set_membership4(handle, &addr4, interface_addr, membership);",
          "556:     return uv__udp_set_membership6(handle, &addr6, interface_addr, membership);",
          "558:     return -EINVAL;",
          "559: }",
          "",
          "[Removed Lines]",
          "553:   if (uv_ip4_addr(multicast_addr, 0, &addr4) == 0)",
          "555:   else if (uv_ip6_addr(multicast_addr, 0, &addr6) == 0)",
          "557:   else",
          "",
          "[Added Lines]",
          "556:   int err;",
          "560:   if (uv_ip4_addr(multicast_addr, 0, &addr4) == 0) {",
          "561:     err = uv__udp_maybe_deferred_bind(handle, AF_INET, UV_UDP_REUSEADDR);",
          "562:     if (err)",
          "563:       return err;",
          "565:   } else if (uv_ip6_addr(multicast_addr, 0, &addr6) == 0) {",
          "566:     err = uv__udp_maybe_deferred_bind(handle, AF_INET6, UV_UDP_REUSEADDR);",
          "567:     if (err)",
          "568:       return err;",
          "570:   } else {",
          "572:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "610: }",
          "612: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "613:   struct sockaddr_storage addr_st;",
          "614:   struct sockaddr_in* addr4;",
          "615:   struct sockaddr_in6* addr6;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:   int err;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "630:   }",
          "632:   if (addr_st.ss_family == AF_INET) {",
          "633:     if (setsockopt(handle->io_watcher.fd,",
          "634:                    IPPROTO_IP,",
          "635:                    IP_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:     err = uv__udp_maybe_deferred_bind(handle, AF_INET, UV_UDP_REUSEADDR);",
          "649:     if (err)",
          "650:       return err;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "638:       return -errno;",
          "639:     }",
          "640:   } else if (addr_st.ss_family == AF_INET6) {",
          "641:     if (setsockopt(handle->io_watcher.fd,",
          "642:                    IPPROTO_IPV6,",
          "643:                    IPV6_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:     err = uv__udp_maybe_deferred_bind(handle, AF_INET6, UV_UDP_REUSEADDR);",
          "660:     if (err)",
          "661:       return err;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "682:   if (uv__io_active(&handle->io_watcher, UV__POLLIN))",
          "686:   if (err)",
          "687:     return err;",
          "",
          "[Removed Lines]",
          "685:   err = uv__udp_maybe_deferred_bind(handle, AF_INET);",
          "",
          "[Added Lines]",
          "706:   err = uv__udp_maybe_deferred_bind(handle, AF_INET, 0);",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   assert(handle->socket == INVALID_SOCKET);",
          "75:   if (ioctlsocket(socket, FIONBIO, &yes) == SOCKET_ERROR) {",
          "76:     return WSAGetLastError();",
          "",
          "[Removed Lines]",
          "66:   if (setsockopt(socket,",
          "67:                  SOL_SOCKET,",
          "68:                  SO_REUSEADDR,",
          "69:                  (char*) &yes,",
          "70:                  sizeof yes) == SOCKET_ERROR) {",
          "71:     return WSAGetLastError();",
          "72:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168: }",
          "175:   int r;",
          "176:   int err;",
          "177:   DWORD no = 0;",
          "179:   if ((flags & UV_UDP_IPV6ONLY) && addr->sa_family != AF_INET6) {",
          "181:     return ERROR_INVALID_PARAMETER;",
          "",
          "[Removed Lines]",
          "171: static int uv_udp_try_bind(uv_udp_t* handle,",
          "172:                            const struct sockaddr* addr,",
          "173:                            unsigned int addrlen,",
          "174:                            unsigned int flags) {",
          "",
          "[Added Lines]",
          "162: static int uv_udp_maybe_bind(uv_udp_t* handle,",
          "163:                              const struct sockaddr* addr,",
          "164:                              unsigned int addrlen,",
          "165:                              unsigned int flags) {",
          "170:   if (handle->flags & UV_HANDLE_BOUND)",
          "171:     return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:       return err;",
          "194:     }",
          "196:     if (addr->sa_family == AF_INET6)",
          "197:       handle->flags |= UV_HANDLE_IPV6;",
          "198:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     if (flags & UV_UDP_REUSEADDR) {",
          "191:       DWORD yes = 1;",
          "193:       if (setsockopt(sock,",
          "194:                      SOL_SOCKET,",
          "195:                      SO_REUSEADDR,",
          "196:                      (char*) &yes,",
          "197:                      sizeof yes) == SOCKET_ERROR) {",
          "198:         err = WSAGetLastError();",
          "199:         closesocket(sock);",
          "200:         return err;",
          "201:       }",
          "202:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:     return WSAEALREADY;",
          "325:   }",
          "329:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "330:                           sizeof(uv_addr_ip4_any_),",
          "331:                           0);",
          "336:   handle->flags |= UV_HANDLE_READING;",
          "337:   INCREASE_ACTIVE_COUNT(loop, handle);",
          "",
          "[Removed Lines]",
          "327:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "328:     err = uv_udp_try_bind(handle,",
          "332:     if (err)",
          "333:       return err;",
          "334:   }",
          "",
          "[Added Lines]",
          "335:   err = uv_udp_maybe_bind(handle,",
          "339:   if (err)",
          "340:     return err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "544:     return UV_EINVAL;",
          "549:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "550:                           sizeof(uv_addr_ip4_any_),",
          "556:   memset(&mreq, 0, sizeof mreq);",
          "",
          "[Removed Lines]",
          "547:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "548:     err = uv_udp_try_bind(handle,",
          "551:                           0);",
          "552:     if (err)",
          "553:       return uv_translate_sys_error(err);",
          "554:   }",
          "",
          "[Added Lines]",
          "553:   err = uv_udp_maybe_bind(handle,",
          "556:                           UV_UDP_REUSEADDR);",
          "557:   if (err)",
          "558:     return uv_translate_sys_error(err);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "598:   if ((handle->flags & UV_HANDLE_BOUND) && !(handle->flags & UV_HANDLE_IPV6))",
          "599:     return UV_EINVAL;",
          "603:                           (const struct sockaddr*) &uv_addr_ip6_any_,",
          "604:                           sizeof(uv_addr_ip6_any_),",
          "611:   memset(&mreq, 0, sizeof(mreq));",
          "",
          "[Removed Lines]",
          "601:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "602:     err = uv_udp_try_bind(handle,",
          "605:                           0);",
          "607:     if (err)",
          "608:       return uv_translate_sys_error(err);",
          "609:   }",
          "",
          "[Added Lines]",
          "605:   err = uv_udp_maybe_bind(handle,",
          "608:                           UV_UDP_REUSEADDR);",
          "610:   if (err)",
          "611:     return uv_translate_sys_error(err);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "665:   struct sockaddr_in* addr4;",
          "666:   struct sockaddr_in6* addr6;",
          "678:   addr4 = (struct sockaddr_in*) &addr_st;",
          "679:   addr6 = (struct sockaddr_in6*) &addr_st;",
          "",
          "[Removed Lines]",
          "669:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "670:     err = uv_udp_try_bind(handle,",
          "671:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "672:                           sizeof(uv_addr_ip4_any_),",
          "673:                           0);",
          "674:     if (err)",
          "675:       return uv_translate_sys_error(err);",
          "676:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "696:   }",
          "698:   if (addr_st.ss_family == AF_INET) {",
          "699:     if (setsockopt(handle->socket,",
          "700:                    IPPROTO_IP,",
          "701:                    IP_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691:     err = uv_udp_maybe_bind(handle,",
          "692:                             (const struct sockaddr*) &uv_addr_ip4_any_,",
          "693:                             sizeof(uv_addr_ip4_any_),",
          "694:                             UV_UDP_REUSEADDR);",
          "695:     if (err)",
          "696:       return uv_translate_sys_error(err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "704:       return uv_translate_sys_error(WSAGetLastError());",
          "705:     }",
          "706:   } else if (addr_st.ss_family == AF_INET6) {",
          "707:     if (setsockopt(handle->socket,",
          "708:                    IPPROTO_IPV6,",
          "709:                    IPV6_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     err = uv_udp_maybe_bind(handle,",
          "706:                             (const struct sockaddr*) &uv_addr_ip6_any_,",
          "707:                             sizeof(uv_addr_ip6_any_),",
          "708:                             UV_UDP_REUSEADDR);",
          "709:     if (err)",
          "710:       return uv_translate_sys_error(err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "725:   int err;",
          "730:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "731:                           sizeof(uv_addr_ip4_any_),",
          "732:                           0);",
          "737:   if (setsockopt(handle->socket,",
          "738:                  SOL_SOCKET,",
          "",
          "[Removed Lines]",
          "728:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "729:     err = uv_udp_try_bind(handle,",
          "733:     if (err)",
          "734:       return uv_translate_sys_error(err);",
          "735:   }",
          "",
          "[Added Lines]",
          "732:   err = uv_udp_maybe_bind(handle,",
          "736:   if (err)",
          "737:     return uv_translate_sys_error(err);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "779:     }                                                                         \\",
          "780:                                                                               \\",
          "784:                             (const struct sockaddr*) &uv_addr_ip4_any_,       \\",
          "785:                             sizeof(uv_addr_ip4_any_),                         \\",
          "786:                             0);                                               \\",
          "790:                                                                               \\",
          "791:     if (!(handle->flags & UV_HANDLE_IPV6)) {                                  \\",
          "",
          "[Removed Lines]",
          "782:     if (!(handle->flags & UV_HANDLE_BOUND)) {                                 \\",
          "783:       err = uv_udp_try_bind(handle,                                           \\",
          "787:       if (err)                                                                \\",
          "788:         return uv_translate_sys_error(err);                                   \\",
          "789:     }                                                                         \\",
          "",
          "[Added Lines]",
          "784:     err = uv_udp_maybe_bind(handle,                                           \\",
          "788:     if (err)                                                                  \\",
          "789:       return uv_translate_sys_error(err);                                     \\",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "842:                  unsigned int flags) {",
          "843:   int err;",
          "846:   if (err)",
          "847:     return uv_translate_sys_error(err);",
          "",
          "[Removed Lines]",
          "845:   err = uv_udp_try_bind(handle, addr, addrlen, flags);",
          "",
          "[Added Lines]",
          "845:   err = uv_udp_maybe_bind(handle, addr, addrlen, flags);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "871:     } else {",
          "872:       abort();",
          "873:     }",
          "875:     if (err)",
          "876:       return uv_translate_sys_error(err);",
          "877:   }",
          "",
          "[Removed Lines]",
          "874:     err = uv_udp_try_bind(handle, bind_addr, addrlen, 0);",
          "",
          "[Added Lines]",
          "874:     err = uv_udp_maybe_bind(handle, bind_addr, addrlen, 0);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: TEST_DECLARE   (tcp_bind6_error_fault)",
          "80: TEST_DECLARE   (tcp_bind6_error_inval)",
          "81: TEST_DECLARE   (tcp_bind6_localhost_ok)",
          "82: TEST_DECLARE   (udp_send_and_recv)",
          "83: TEST_DECLARE   (udp_multicast_join)",
          "84: TEST_DECLARE   (udp_multicast_join6)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: TEST_DECLARE   (udp_bind)",
          "83: TEST_DECLARE   (udp_bind_reuseaddr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:   TEST_ENTRY  (tcp_bind6_error_inval)",
          "350:   TEST_ENTRY  (tcp_bind6_localhost_ok)",
          "352:   TEST_ENTRY  (udp_send_and_recv)",
          "353:   TEST_ENTRY  (udp_dgram_too_big)",
          "354:   TEST_ENTRY  (udp_dual_stack)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:   TEST_ENTRY  (udp_bind)",
          "355:   TEST_ENTRY  (udp_bind_reuseaddr)",
          "",
          "---------------"
        ],
        "test/test-udp-bind.c||test/test-udp-bind.c": [
          "File: test/test-udp-bind.c -> test/test-udp-bind.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "30: TEST_IMPL(udp_bind) {",
          "31:   struct sockaddr_in addr;",
          "32:   uv_loop_t* loop;",
          "33:   uv_udp_t h1, h2;",
          "34:   int r;",
          "36:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "38:   loop = uv_default_loop();",
          "40:   r = uv_udp_init(loop, &h1);",
          "41:   ASSERT(r == 0);",
          "43:   r = uv_udp_init(loop, &h2);",
          "44:   ASSERT(r == 0);",
          "46:   r = uv_udp_bind(&h1, (const struct sockaddr*) &addr, 0);",
          "47:   ASSERT(r == 0);",
          "49:   r = uv_udp_bind(&h2, (const struct sockaddr*) &addr, 0);",
          "50:   ASSERT(r == UV_EADDRINUSE);",
          "52:   uv_close((uv_handle_t*) &h1, NULL);",
          "53:   uv_close((uv_handle_t*) &h2, NULL);",
          "55:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "56:   ASSERT(r == 0);",
          "58:   MAKE_VALGRIND_HAPPY();",
          "59:   return 0;",
          "60: }",
          "63: TEST_IMPL(udp_bind_reuseaddr) {",
          "64:   struct sockaddr_in addr;",
          "65:   uv_loop_t* loop;",
          "66:   uv_udp_t h1, h2;",
          "67:   int r;",
          "69:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "71:   loop = uv_default_loop();",
          "73:   r = uv_udp_init(loop, &h1);",
          "74:   ASSERT(r == 0);",
          "76:   r = uv_udp_init(loop, &h2);",
          "77:   ASSERT(r == 0);",
          "79:   r = uv_udp_bind(&h1, (const struct sockaddr*) &addr, UV_UDP_REUSEADDR);",
          "80:   ASSERT(r == 0);",
          "82:   r = uv_udp_bind(&h2, (const struct sockaddr*) &addr, UV_UDP_REUSEADDR);",
          "83:   ASSERT(r == 0);",
          "85:   uv_close((uv_handle_t*) &h1, NULL);",
          "86:   uv_close((uv_handle_t*) &h2, NULL);",
          "88:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "89:   ASSERT(r == 0);",
          "91:   MAKE_VALGRIND_HAPPY();",
          "92:   return 0;",
          "93: }",
          "",
          "---------------"
        ],
        "test/test-watcher-cross-stop.c||test/test-watcher-cross-stop.c": [
          "File: test/test-watcher-cross-stop.c -> test/test-watcher-cross-stop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   for (i = 0; i < ARRAY_SIZE(sockets); i++) {",
          "75:     ASSERT(0 == uv_udp_init(loop, &sockets[i]));",
          "77:     ASSERT(0 == uv_udp_recv_start(&sockets[i], alloc_cb, recv_cb));",
          "78:     ASSERT(0 == uv_udp_send(&reqs[i],",
          "79:                             &sockets[i],",
          "",
          "[Removed Lines]",
          "76:     ASSERT(0 == uv_udp_bind(&sockets[i], (const struct sockaddr*) &addr, 0));",
          "",
          "[Added Lines]",
          "76:     ASSERT(0 == uv_udp_bind(&sockets[i],",
          "77:                             (const struct sockaddr*) &addr,",
          "78:                             UV_UDP_REUSEADDR));",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "383:         'test/test-timer-from-check.c',",
          "384:         'test/test-timer.c',",
          "385:         'test/test-tty.c',",
          "386:         'test/test-udp-dgram-too-big.c',",
          "387:         'test/test-udp-ipv6.c',",
          "388:         'test/test-udp-open.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:         'test/test-udp-bind.c',",
          "",
          "---------------"
        ]
      }
    }
  ]
}