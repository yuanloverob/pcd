{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f713ad4f8d5d3f76b29a9fc0973dd8f1f0b8173",
      "candidate_info": {
        "commit_hash": "3f713ad4f8d5d3f76b29a9fc0973dd8f1f0b8173",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3f713ad4f8d5d3f76b29a9fc0973dd8f1f0b8173",
        "files": [
          "hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h",
          "hardware/plugins/Plugins.cpp",
          "hardware/plugins/Plugins.h"
        ],
        "message": "Python Plugin protocols now always use Parameters values for Username/Password during authentication rather than cached values",
        "before_after_code_files": [
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h",
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp",
          "hardware/plugins/Plugins.h||hardware/plugins/Plugins.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace Plugins {",
          "20:  {",
          "21:   if (sProtocol == \"Line\") return (CPluginProtocol*) new CPluginProtocolLine();",
          "22:   else if (sProtocol == \"XML\") return (CPluginProtocol*) new CPluginProtocolXML();",
          "",
          "[Removed Lines]",
          "19:  CPluginProtocol * CPluginProtocol::Create(std::string sProtocol, std::string sUsername, std::string sPassword)",
          "",
          "[Added Lines]",
          "19:  CPluginProtocol * CPluginProtocol::Create(std::string sProtocol)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   else if ((sProtocol == \"HTTP\") || (sProtocol == \"HTTPS\"))",
          "25:   {",
          "26:    CPluginProtocolHTTP* pProtocol = new CPluginProtocolHTTP(sProtocol == \"HTTPS\");",
          "28:    return (CPluginProtocol*)pProtocol;",
          "29:   }",
          "30:   else if (sProtocol == \"ICMP\") return (CPluginProtocol*) new CPluginProtocolICMP();",
          "31:   else if ((sProtocol == \"MQTT\") || (sProtocol == \"MQTTS\"))",
          "32:   {",
          "33:    CPluginProtocolMQTT* pProtocol = new CPluginProtocolMQTT(sProtocol == \"MQTTS\");",
          "35:    return (CPluginProtocol*)pProtocol;",
          "36:   }",
          "37:   else if ((sProtocol == \"WS\") || (sProtocol == \"WSS\"))",
          "38:   {",
          "39:    CPluginProtocolWS* pProtocol = new CPluginProtocolWS(sProtocol == \"WSS\");",
          "41:    return (CPluginProtocol*)pProtocol;",
          "42:   }",
          "43:   else return new CPluginProtocol();",
          "",
          "[Removed Lines]",
          "27:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "34:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "40:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646:    sHttp += sHttpURL;",
          "647:    sHttp += \" HTTP/1.1\\r\\n\";",
          "652:    {",
          "654:     {",
          "656:     }",
          "659:     {",
          "661:     }",
          "664:    }",
          "668:    if (pHeaders) pHead = PyDict_GetItemString(pHeaders, \"User-Agent\");",
          "669:    if (!pHead)",
          "670:    {",
          "",
          "[Removed Lines]",
          "650:    std::string auth;",
          "651:    if (m_Username.length() > 0 || m_Password.length() > 0)",
          "653:     if (m_Username.length() > 0)",
          "655:      auth += m_Username;",
          "657:     auth += \":\";",
          "658:     if (m_Password.length() > 0)",
          "660:      auth += m_Password;",
          "662:     std::string encodedAuth = base64_encode(auth);",
          "663:     sHttp += \"Authorization:Basic \" + encodedAuth + \"\\r\\n\";",
          "667:    PyObject *pHead = NULL;",
          "",
          "[Added Lines]",
          "647:    PyObject *pHead = NULL;",
          "648:    if (pHeaders) pHead = PyDict_GetItemString(pHeaders, \"Authorization:Basic\");",
          "649:    if (!pHead)",
          "651:     std::string  User;",
          "652:     std::string  Pass;",
          "653:     PyObject *pModule = (PyObject*)WriteMessage->m_pPlugin->PythonModule();",
          "654:     PyObject *pDict = PyObject_GetAttrString(pModule, \"Parameters\");",
          "655:     if (pDict)",
          "657:      PyObject *pUser = PyDict_GetItemString(pDict, \"Username\");",
          "658:      if (pUser) User = PyUnicode_AsUTF8(pUser);",
          "659:      PyObject *pPass = PyDict_GetItemString(pDict, \"Password\");",
          "660:      if (pPass) Pass = PyUnicode_AsUTF8(pPass);",
          "661:      Py_DECREF(pDict);",
          "663:     if (User.length() > 0 || Pass.length() > 0)",
          "665:      std::string auth;",
          "666:      if (User.length() > 0)",
          "667:      {",
          "668:       auth += User;",
          "669:      }",
          "670:      auth += \":\";",
          "671:      if (Pass.length() > 0)",
          "672:      {",
          "673:       auth += Pass;",
          "674:      }",
          "675:      std::string encodedAuth = base64_encode(auth);",
          "676:      sHttp += \"Authorization:Basic \" + encodedAuth + \"\\r\\n\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1367:     }",
          "1371:     {",
          "1373:      bControlFlags |= 128;",
          "1374:     }",
          "1377:     {",
          "1379:      bControlFlags |= 64;",
          "1380:     }",
          "",
          "[Removed Lines]",
          "1370:     if (m_Username.length())",
          "1372:      MQTTPushBackStringWLen(m_Username, vPayload);",
          "1376:     if (m_Password.length())",
          "1378:      MQTTPushBackStringWLen(m_Password, vPayload);",
          "",
          "[Added Lines]",
          "1383:     std::string  User;",
          "1384:     std::string  Pass;",
          "1385:     PyObject *pModule = (PyObject*)WriteMessage->m_pPlugin->PythonModule();",
          "1386:     PyObject *pDict = PyObject_GetAttrString(pModule, \"Parameters\");",
          "1387:     if (pDict)",
          "1388:     {",
          "1389:      PyObject *pUser = PyDict_GetItemString(pDict, \"Username\");",
          "1390:      if (pUser) User = PyUnicode_AsUTF8(pUser);",
          "1391:      PyObject *pPass = PyDict_GetItemString(pDict, \"Password\");",
          "1392:      if (pPass) Pass = PyUnicode_AsUTF8(pPass);",
          "1393:      Py_DECREF(pDict);",
          "1394:     }",
          "1395:     if (User.length())",
          "1397:      MQTTPushBackStringWLen(User, vPayload);",
          "1401:     if (Pass.length())",
          "1403:      MQTTPushBackStringWLen(Pass, vPayload);",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h": [
          "File: hardware/plugins/PluginProtocols.h -> hardware/plugins/PluginProtocols.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   virtual int     Length() { return m_sRetainedData.size(); };",
          "19:   virtual bool    Secure() { return m_Secure; };",
          "22:  };",
          "24:  class CPluginProtocolLine : CPluginProtocol",
          "",
          "[Removed Lines]",
          "21:   static CPluginProtocol*  Create(std::string sProtocol, std::string sUsername, std::string sPassword);",
          "",
          "[Added Lines]",
          "21:   static CPluginProtocol*  Create(std::string sProtocol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   bool   m_Chunked;",
          "52:   size_t   m_RemainingChunk;",
          "53:  protected:",
          "56:   void   ExtractHeaders(std::string* pData);",
          "57:  public:",
          "58:   CPluginProtocolHTTP(bool Secure) : m_ContentLength(0), m_Headers(NULL), m_Chunked(false), m_RemainingChunk(0) { m_Secure = Secure; };",
          "59:   virtual void    ProcessInbound(const ReadEvent* Message);",
          "60:   virtual std::vector<byte> ProcessOutbound(const WriteDirective* WriteMessage);",
          "66:  };",
          "68:  class CPluginProtocolWS : public CPluginProtocolHTTP",
          "",
          "[Removed Lines]",
          "54:   std::string  m_Username;",
          "55:   std::string  m_Password;",
          "61:   void      AuthenticationDetails(const std::string &Username, const std::string &Password)",
          "62:   {",
          "63:    m_Username = Username;",
          "64:    m_Password = Password;",
          "65:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:  class CPluginProtocolMQTT : CPluginProtocol",
          "84:  {",
          "85:  private:",
          "88:   int    m_PacketID;",
          "89:   bool   m_bErrored;",
          "90:  public:",
          "91:   CPluginProtocolMQTT(bool Secure) : m_PacketID(1), m_bErrored(false) { m_Secure = Secure; };",
          "92:   virtual void    ProcessInbound(const ReadEvent* Message);",
          "93:   virtual std::vector<byte> ProcessOutbound(const WriteDirective* WriteMessage);",
          "99:  };",
          "100: }",
          "",
          "[Removed Lines]",
          "86:   std::string  m_Username;",
          "87:   std::string  m_Password;",
          "94:   void      AuthenticationDetails(const std::string &Username, const std::string &Password)",
          "95:   {",
          "96:    m_Username = Username;",
          "97:    m_Password = Password;",
          "98:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:      ADD_STRING_TO_DICT(pParamsDict, \"DomoticzVersion\", szAppVersion);",
          "1206:      ADD_STRING_TO_DICT(pParamsDict, \"DomoticzHash\", szAppHash);",
          "1207:      ADD_STRING_TO_DICT(pParamsDict, \"DomoticzBuildTime\", szAppDate);",
          "1212:     }",
          "1213:    }",
          "",
          "[Removed Lines]",
          "1210:      m_Username = sd[4];",
          "1211:      m_Password = sd[5];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1305:    pConnection->pProtocol = NULL;",
          "1306:   }",
          "1307:   std::string sProtocol = PyUnicode_AsUTF8(pConnection->Protocol);",
          "1309:   if (m_bDebug & PDM_CONNECTION) _log.Log(LOG_NORM, \"(%s) Protocol set to: '%s'.\", m_Name.c_str(), sProtocol.c_str());",
          "1310:  }",
          "",
          "[Removed Lines]",
          "1308:   pConnection->pProtocol = CPluginProtocol::Create(sProtocol, m_Username, m_Password);",
          "",
          "[Added Lines]",
          "1304:   pConnection->pProtocol = CPluginProtocol::Create(sProtocol);",
          "",
          "---------------"
        ],
        "hardware/plugins/Plugins.h||hardware/plugins/Plugins.h": [
          "File: hardware/plugins/Plugins.h -> hardware/plugins/Plugins.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   ~CPlugin(void);",
          "63:   int  PollInterval(int Interval = -1);",
          "64:   void Notifier(std::string Notifier = \"\");",
          "65:   void AddConnection(CPluginTransport*);",
          "66:   void RemoveConnection(CPluginTransport*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   void* PythonModule() { return m_PyModule; };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   bool HasNodeFailed(const int Unit);",
          "99:   std::string   m_PluginKey;",
          "102:   void*    m_DeviceDict;",
          "103:   void*    m_ImageDict;",
          "104:   void*    m_SettingsDict;",
          "",
          "[Removed Lines]",
          "100:   std::string   m_Username;",
          "101:   std::string   m_Password;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ee890b44dec48055adac5dd434dc30042992c2d",
      "candidate_info": {
        "commit_hash": "9ee890b44dec48055adac5dd434dc30042992c2d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9ee890b44dec48055adac5dd434dc30042992c2d",
        "files": [
          "hardware/plugins/PluginProtocols.cpp"
        ],
        "message": "HTTP Protocol: Added support for chuncked transfer encoding outbound",
        "before_after_code_files": [
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   }",
          "607:   PyObject *pVerb = PyDict_GetItemString(WriteMessage->m_Object, \"Verb\");",
          "610:   PyObject *pHeaders = PyDict_GetItemString(WriteMessage->m_Object, \"Headers\");",
          "",
          "[Removed Lines]",
          "606:   PyObject *pStatus = PyDict_GetItemString(WriteMessage->m_Object, \"Status\");",
          "608:   PyObject *pURL = PyDict_GetItemString(WriteMessage->m_Object, \"URL\");",
          "609:   PyObject *pData = PyDict_GetItemString(WriteMessage->m_Object, \"Data\");",
          "",
          "[Added Lines]",
          "607:   PyObject *pStatus = PyDict_GetItemString(WriteMessage->m_Object, \"Status\");",
          "608:   PyObject *pChunk = PyDict_GetItemString(WriteMessage->m_Object, \"Chunk\");",
          "610:   PyObject *pData = PyDict_GetItemString(WriteMessage->m_Object, \"Data\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633:     return retVal;",
          "634:    }",
          "635:    sHttp = PyUnicode_AsUTF8(pVerb);",
          "636:    sHttp += \" \";",
          "638:    std::string sHttpURL = \"/\";",
          "639:    if (pURL && PyUnicode_Check(pURL))",
          "640:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:    stdupper(sHttp);",
          "639:    PyObject *pURL = PyDict_GetItemString(WriteMessage->m_Object, \"URL\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "706:    if (!PyUnicode_Check(pStatus))",
          "707:    {",
          "709:     return retVal;",
          "710:    }",
          "",
          "[Removed Lines]",
          "708:     _log.Log(LOG_ERROR, \"(%s) HTTP 'Status' dictionary entry was not found or not a string, ignored. See Python Plugin wiki page for help.\", __func__);",
          "",
          "[Added Lines]",
          "710:     _log.Log(LOG_ERROR, \"(%s) HTTP 'Status' dictionary entry was not a string, ignored. See Python Plugin wiki page for help.\", __func__);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "734:     sHttp += \"Server: Domoticz/1.0\\r\\n\";",
          "735:    }",
          "736:   }",
          "738:   {",
          "740:    return retVal;",
          "741:   }",
          "745:   {",
          "747:    {",
          "751:     {",
          "755:     }",
          "756:    }",
          "758:    {",
          "760:    }",
          "768:   {",
          "777:   }",
          "782:   if (pData && PyUnicode_Check(pData))",
          "783:   {",
          "784:    sHttp += PyUnicode_AsUTF8(pData);",
          "785:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "786:   }",
          "787:   else if (pData && (pData->ob_type->tp_name == std::string(\"bytearray\")))",
          "788:   {",
          "790:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "791:    const char* pByteArray = PyByteArray_AsString(pData);",
          "792:    int iStop = PyByteArray_Size(pData);",
          "",
          "[Removed Lines]",
          "737:   else",
          "739:    _log.Log(LOG_ERROR, \"(%s) HTTP unable to determine send type. 'Status' or 'Verb' dictionary entries not found, ignored. See Python Plugin wiki page for help.\", __func__);",
          "744:   if (pHeaders)",
          "746:    if (PyDict_Check(pHeaders))",
          "748:     PyObject *key, *value;",
          "749:     Py_ssize_t pos = 0;",
          "750:     while (PyDict_Next(pHeaders, &pos, &key, &value))",
          "752:      std::string sKey = PyUnicode_AsUTF8(key);",
          "753:      std::string sValue = PyUnicode_AsUTF8(value);",
          "754:      sHttp += sKey + \": \" + sValue + \"\\r\\n\";",
          "757:    else",
          "759:     _log.Log(LOG_ERROR, \"(%s) HTTP Response 'Headers' parameter was not a dictionary, ignored.\", __func__);",
          "761:   }",
          "764:   PyObject *pLength = NULL;",
          "765:   if (pHeaders)",
          "766:    pLength = PyDict_GetItemString(pHeaders, \"Content-Length\");",
          "767:   if (!pLength && pData)",
          "769:    Py_ssize_t iLength = 0;",
          "770:    if (PyUnicode_Check(pData))",
          "771:     iLength = PyUnicode_GetLength(pData);",
          "772:    else if (pData->ob_type->tp_name == std::string(\"bytearray\"))",
          "773:     iLength = PyByteArray_Size(pData);",
          "774:    else if (PyBytes_Check(pData))",
          "775:     iLength = PyBytes_Size(pData);",
          "776:    sHttp += \"Content-Length: \" + std::to_string(iLength) + \"\\r\\n\";",
          "779:   sHttp += \"\\r\\n\";",
          "789:    retVal.reserve(sHttp.length() + PyByteArray_Size(pData));",
          "",
          "[Added Lines]",
          "742:   else if (!pChunk)",
          "744:    _log.Log(LOG_ERROR, \"(%s) HTTP unable to determine send type. 'Verb', 'Status' or 'Chunk' dictionary entries not found, ignored. See Python Plugin wiki page for help.\", __func__);",
          "749:   if (pVerb || pStatus)",
          "752:    if (pHeaders)",
          "754:     if (PyDict_Check(pHeaders))",
          "756:      PyObject *key, *value;",
          "757:      Py_ssize_t pos = 0;",
          "758:      while (PyDict_Next(pHeaders, &pos, &key, &value))",
          "759:      {",
          "760:       std::string sKey = PyUnicode_AsUTF8(key);",
          "761:       std::string sValue = PyUnicode_AsUTF8(value);",
          "762:       sHttp += sKey + \": \" + sValue + \"\\r\\n\";",
          "763:      }",
          "764:     }",
          "765:     else",
          "766:     {",
          "767:      _log.Log(LOG_ERROR, \"(%s) HTTP 'Headers' parameter was not a dictionary, ignored.\", __func__);",
          "772:    PyObject *pLength = NULL;",
          "773:    if (pHeaders)",
          "774:     pLength = PyDict_GetItemString(pHeaders, \"Content-Length\");",
          "775:    if (!pLength && pData && !pChunk)",
          "777:     Py_ssize_t iLength = 0;",
          "778:     if (PyUnicode_Check(pData))",
          "779:      iLength = PyUnicode_GetLength(pData);",
          "780:     else if (pData->ob_type->tp_name == std::string(\"bytearray\"))",
          "781:      iLength = PyByteArray_Size(pData);",
          "782:     else if (PyBytes_Check(pData))",
          "783:      iLength = PyBytes_Size(pData);",
          "784:     sHttp += \"Content-Length: \" + std::to_string(iLength) + \"\\r\\n\";",
          "785:    }",
          "788:    if (pChunk)",
          "789:    {",
          "790:     PyObject *pHead = NULL;",
          "791:     if (pHeaders) pHead = PyDict_GetItemString(pHeaders, \"Transfer-Encoding\");",
          "792:     if (!pHead)",
          "793:     {",
          "794:      sHttp += \"Transfer-Encoding: chunked\\r\\n\";",
          "795:     }",
          "799:    sHttp += \"\\r\\n\";",
          "800:   }",
          "803:   if (pChunk)",
          "805:    long lChunkLength = 0;",
          "806:    if (pData)",
          "807:    {",
          "808:     if (PyUnicode_Check(pData))",
          "809:      lChunkLength = PyUnicode_GetLength(pData);",
          "810:     else if (pData->ob_type->tp_name == std::string(\"bytearray\"))",
          "811:      lChunkLength = PyByteArray_Size(pData);",
          "812:     else if (PyBytes_Check(pData))",
          "813:      lChunkLength = PyBytes_Size(pData);",
          "814:    }",
          "815:    std::stringstream stream;",
          "816:    stream << std::hex << lChunkLength;",
          "817:    sHttp += std::string(stream.str());",
          "818:    sHttp += \"\\r\\n\";",
          "825:    retVal.reserve(sHttp.length()+2);",
          "830:    retVal.reserve(sHttp.length() + PyByteArray_Size(pData)+2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "797:   }",
          "798:   else if (pData && PyBytes_Check(pData))",
          "799:   {",
          "801:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "802:    const char* pBytes = PyBytes_AsString(pData);",
          "803:    int iStop = PyBytes_Size(pData);",
          "",
          "[Removed Lines]",
          "800:    retVal.reserve(sHttp.length() + PyBytes_Size(pData));",
          "",
          "[Added Lines]",
          "841:    retVal.reserve(sHttp.length() + PyBytes_Size(pData)+2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "807:    }",
          "808:   }",
          "809:   else",
          "810:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "812:   return retVal;",
          "813:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851:   {",
          "852:    retVal.reserve(sHttp.length() + 2);",
          "854:   }",
          "857:   if (pChunk)",
          "858:   {",
          "859:    retVal.push_back('\\r');",
          "860:    retVal.push_back('\\n');",
          "861:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "077648678ec100c6312260cbab3f39132d45c73b",
      "candidate_info": {
        "commit_hash": "077648678ec100c6312260cbab3f39132d45c73b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/077648678ec100c6312260cbab3f39132d45c73b",
        "files": [
          "History.txt",
          "msbuild/domoticz.rc"
        ],
        "message": "Corrected windows installer version",
        "before_after_code_files": [
          "msbuild/domoticz.rc||msbuild/domoticz.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/domoticz.rc||msbuild/domoticz.rc": [
          "File: msbuild/domoticz.rc -> msbuild/domoticz.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"resource.h\"",
          "6: #define APSTUDIO_READONLY_SYMBOLS",
          "",
          "[Removed Lines]",
          "4: #include \"Version.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)",
          "20: LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US",
          "22: #ifdef APSTUDIO_INVOKED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #pragma code_page(1252)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: #endif    // APSTUDIO_INVOKED",
          "50: 1 VERSIONINFO",
          "",
          "[Removed Lines]",
          "51: FILEVERSION VER_FILE_VERSION",
          "52: PRODUCTVERSION VER_FILE_VERSION",
          "53: FILETYPE VFT_APP",
          "54: {",
          "55:   BLOCK \"StringFileInfo\"",
          "56:     {",
          "57:        BLOCK \"040704E4\"",
          "58:        {",
          "59:           VALUE \"CompanyName\", \"Domoticz\"",
          "60:           VALUE \"FileVersion\", VER_FILE_VERSION_STR",
          "61:           VALUE \"FileDescription\", \"Domoticz Home Automation\"",
          "62:           VALUE \"InternalName\", \"Domoticz\"",
          "63:           VALUE \"LegalCopyright\", \"GNU Version 2 or later\"",
          "64:           VALUE \"LegalTrademarks\", \"GNU Version 2 or later\"",
          "65:           VALUE \"OriginalFilename\", \"Domoticz.exe\"",
          "66:           VALUE \"ProductName\", \"Domoticz\"",
          "67:           VALUE \"ProductVersion\", VER_FILE_VERSION_STR",
          "68:        }",
          "69:     }",
          "70: }",
          "",
          "[Added Lines]",
          "54:  FILEVERSION 4,0,0,9722",
          "55:  PRODUCTVERSION 4,0,0,9722",
          "56:  FILEFLAGSMASK 0x0L",
          "57: #ifdef _DEBUG",
          "58:  FILEFLAGS 0x1L",
          "59: #else",
          "60:  FILEFLAGS 0x0L",
          "61: #endif",
          "62:  FILEOS 0x0L",
          "63:  FILETYPE 0x1L",
          "64:  FILESUBTYPE 0x0L",
          "65: BEGIN",
          "66:     BLOCK \"StringFileInfo\"",
          "67:     BEGIN",
          "68:         BLOCK \"040704e4\"",
          "69:         BEGIN",
          "70:             VALUE \"CompanyName\", \"Domoticz\"",
          "71:             VALUE \"FileDescription\", \"Domoticz Home Automation\"",
          "72:             VALUE \"FileVersion\", \"4.0.0.9722\"",
          "73:             VALUE \"InternalName\", \"Domoticz\"",
          "74:             VALUE \"LegalCopyright\", \"GNU Version 2 or later\"",
          "75:             VALUE \"LegalTrademarks\", \"GNU Version 2 or later\"",
          "76:             VALUE \"OriginalFilename\", \"Domoticz.exe\"",
          "77:             VALUE \"ProductName\", \"Domoticz\"",
          "78:             VALUE \"ProductVersion\", \"4.0.0.9722\"",
          "79:         END",
          "80:     END",
          "81:     BLOCK \"VarFileInfo\"",
          "82:     BEGIN",
          "83:         VALUE \"Translation\", 0x407, 1252",
          "84:     END",
          "85: END",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80e54821ed7f5d39306f28fe993d28513e69d25a",
      "candidate_info": {
        "commit_hash": "80e54821ed7f5d39306f28fe993d28513e69d25a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/80e54821ed7f5d39306f28fe993d28513e69d25a",
        "files": [
          "www/app/TemperatureCustomLogController.js"
        ],
        "message": "Added barometer using in custom log chart",
        "before_after_code_files": [
          "www/app/TemperatureCustomLogController.js||www/app/TemperatureCustomLogController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/TemperatureCustomLogController.js||www/app/TemperatureCustomLogController.js": [
          "File: www/app/TemperatureCustomLogController.js -> www/app/TemperatureCustomLogController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:             function ($routeParams, $scope, $location) {",
          "5:                 var ctrl = this;",
          "9:                     $('#modal').show();",
          "",
          "[Removed Lines]",
          "7:                 ctrl.init = function() {",
          "",
          "[Added Lines]",
          "7:                 ctrl.init = function () {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:                             formatter: function () {",
          "108:                                 var unit = '';",
          "109:                                 var baseName = this.series.name.split(':')[1];",
          "110:                                 if (baseName == $.t(\"Humidity\")) {",
          "111:                                     unit = '%'",
          "112:                                 } else {",
          "113:                                     unit = '\\u00B0 ' + $scope.config.TempSign",
          "114:                                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:                                 alert(this.series.name);",
          "113:                                 } else if (baseName == $.t(\"Barometer\")) {",
          "114:                                     unit = ' hPa';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:                     $('#modal').hide();",
          "145:                 };",
          "149:                     if (typeof $scope.mytimer != 'undefined') {",
          "150:                         $interval.cancel($scope.mytimer);",
          "151:                         $scope.mytimer = undefined;",
          "",
          "[Removed Lines]",
          "147:                 ctrl.SelectGraphDevices = function()",
          "148:                 {",
          "",
          "[Added Lines]",
          "150:                 ctrl.SelectGraphDevices = function () {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:                         url: \"json.htm?type=devices&filter=temp&used=true&order=Name\",",
          "156:                         async: false,",
          "157:                         dataType: 'json',",
          "159:                             if (typeof data.result != 'undefined') {",
          "162:                                 });",
          "163:                             }",
          "164:                         }",
          "165:                     });",
          "166:                 };",
          "171:                         $.ajax({",
          "174:                             async: false,",
          "175:                             dataType: 'json',",
          "178:                             }",
          "179:                         });",
          "180:                     }",
          "181:                     else {",
          "183:                     }",
          "184:                 };",
          "190:                     }",
          "191:                     else {",
          "193:                     }",
          "199:                         $.ajax({",
          "202:                             async: false,",
          "203:                             dataType: 'json',",
          "204:                             graphid: $(this).attr('id'),",
          "205:                             graphval: $(this).val(),",
          "208:                             }",
          "209:                         });",
          "210:                     });",
          "",
          "[Removed Lines]",
          "158:                         success: function(data) {",
          "160:                                 $.each(data.result, function(i,item){",
          "161:                                     $(\"#customlog #devicecontainer\").append('<input type=\"checkbox\" class=\"devicecheckbox noscheck\" id=\"'+item.idx+'\" value=\"'+item.Name+'\" onChange=\"AddDeviceToGraph(this)\">'+item.Name+'<br />');",
          "168:                 AddDeviceToGraph = function(cb)",
          "169:                 {",
          "170:                     if (cb.checked==true) {",
          "172:                             url: \"json.htm?type=graph&sensor=temp&idx=\"+cb.id+\"&range=\"+$(\"#customlog #graphfrom\").val()+\"T\"+$(\"#customlog #graphto\").val()+\"&graphtype=\"+$(\"#customlog #combocustomgraphtype\").val()+",
          "173:                             \"&graphTemp=\"+$(\"#customlog #graphTemp\").prop(\"checked\")+\"&graphChill=\"+$(\"#customlog #graphChill\").prop(\"checked\")+\"&graphHum=\"+$(\"#customlog #graphHum\").prop(\"checked\")+\"&graphBaro=\"+$(\"#customlog #graphBaro\").prop(\"checked\")+\"&graphDew=\"+$(\"#customlog #graphDew\").prop(\"checked\")+\"&graphSet=\"+$(\"#customlog #graphSet\").prop(\"checked\"),",
          "176:                             success: function(data) {",
          "177:                                 ctrl.AddMultipleDataToTempChart(data,$.CustomChart.highcharts(),$(\"#customlog #combocustomgraphtype\").val(),cb.id,cb.value);",
          "182:                         ctrl.RemoveMultipleDataFromTempChart($.CustomChart.highcharts(),cb.id);",
          "186:                 ctrl.datePickerChanged = function(dpicker)",
          "187:                 {",
          "188:                     if ($(\"#graphfrom\").val()!='') {",
          "189:                         $(\"#customlog #graphfrom\").datepicker(\"setDate\",$(\"#graphfrom\").val());",
          "192:                         $(\"#customlog #graphto\").datepicker(\"setDate\",$(\"#graphto\").val());",
          "194:                     $( \"#customlog #graphfrom\" ).datepicker('option', 'maxDate', $(\"#customlog #graphto\").val());",
          "195:                     $( \"#customlog #graphto\" ).datepicker('option', 'minDate', $(\"#customlog #graphfrom\").val());",
          "197:                     $('div[id=\"devicecontainer\"] input:checkbox:checked').each(function() {",
          "198:                         ctrl.RemoveMultipleDataFromTempChart($.CustomChart.highcharts(),$(this).attr('id'));",
          "200:                             url: \"json.htm?type=graph&sensor=temp&idx=\"+$(this).attr('id')+\"&range=\"+$(\"#customlog #graphfrom\").val()+\"T\"+$(\"#customlog #graphto\").val()+\"&graphtype=\"+$(\"#customlog #combocustomgraphtype\").val()+",
          "201:                             \"&graphTemp=\"+$(\"#customlog #graphTemp\").prop(\"checked\")+\"&graphChill=\"+$(\"#customlog #graphChill\").prop(\"checked\")+\"&graphHum=\"+$(\"#customlog #graphHum\").prop(\"checked\")+\"&graphBaro=\"+$(\"#customlog #graphBaro\").prop(\"checked\")+\"&graphDew=\"+$(\"#customlog #graphDew\").prop(\"checked\")+\"&graphSet=\"+$(\"#customlog #graphSet\").prop(\"checked\"),",
          "206:                             success: function(data) {",
          "207:                                 ctrl.AddMultipleDataToTempChart(data,$.CustomChart.highcharts(),$(\"#customlog #combocustomgraphtype\").val(),this.graphid,this.graphval);",
          "",
          "[Added Lines]",
          "160:                         success: function (data) {",
          "162:                                 $.each(data.result, function (i, item) {",
          "163:                                     $(\"#customlog #devicecontainer\").append('<input type=\"checkbox\" class=\"devicecheckbox noscheck\" id=\"' + item.idx + '\" value=\"' + item.Name + '\" onChange=\"AddDeviceToGraph(this)\">' + item.Name + '<br />');",
          "170:                 AddDeviceToGraph = function (cb) {",
          "171:                     if (cb.checked == true) {",
          "173:                             url: \"json.htm?type=graph&sensor=temp&idx=\" + cb.id + \"&range=\" + $(\"#customlog #graphfrom\").val() + \"T\" + $(\"#customlog #graphto\").val() + \"&graphtype=\" + $(\"#customlog #combocustomgraphtype\").val() +",
          "174:                             \"&graphTemp=\" + $(\"#customlog #graphTemp\").prop(\"checked\") + \"&graphChill=\" + $(\"#customlog #graphChill\").prop(\"checked\") + \"&graphHum=\" + $(\"#customlog #graphHum\").prop(\"checked\") + \"&graphBaro=\" + $(\"#customlog #graphBaro\").prop(\"checked\") + \"&graphDew=\" + $(\"#customlog #graphDew\").prop(\"checked\") + \"&graphSet=\" + $(\"#customlog #graphSet\").prop(\"checked\"),",
          "177:                             success: function (data) {",
          "178:                                 ctrl.AddMultipleDataToTempChart(data, $.CustomChart.highcharts(), $(\"#customlog #combocustomgraphtype\").val(), cb.id, cb.value);",
          "183:                         ctrl.RemoveMultipleDataFromTempChart($.CustomChart.highcharts(), cb.id);",
          "187:                 ctrl.datePickerChanged = function (dpicker) {",
          "188:                     if ($(\"#graphfrom\").val() != '') {",
          "189:                         $(\"#customlog #graphfrom\").datepicker(\"setDate\", $(\"#graphfrom\").val());",
          "192:                         $(\"#customlog #graphto\").datepicker(\"setDate\", $(\"#graphto\").val());",
          "194:                     $(\"#customlog #graphfrom\").datepicker('option', 'maxDate', $(\"#customlog #graphto\").val());",
          "195:                     $(\"#customlog #graphto\").datepicker('option', 'minDate', $(\"#customlog #graphfrom\").val());",
          "197:                     $('div[id=\"devicecontainer\"] input:checkbox:checked').each(function () {",
          "198:                         ctrl.RemoveMultipleDataFromTempChart($.CustomChart.highcharts(), $(this).attr('id'));",
          "200:                             url: \"json.htm?type=graph&sensor=temp&idx=\" + $(this).attr('id') + \"&range=\" + $(\"#customlog #graphfrom\").val() + \"T\" + $(\"#customlog #graphto\").val() + \"&graphtype=\" + $(\"#customlog #combocustomgraphtype\").val() +",
          "201:                             \"&graphTemp=\" + $(\"#customlog #graphTemp\").prop(\"checked\") + \"&graphChill=\" + $(\"#customlog #graphChill\").prop(\"checked\") + \"&graphHum=\" + $(\"#customlog #graphHum\").prop(\"checked\") + \"&graphBaro=\" + $(\"#customlog #graphBaro\").prop(\"checked\") + \"&graphDew=\" + $(\"#customlog #graphDew\").prop(\"checked\") + \"&graphSet=\" + $(\"#customlog #graphSet\").prop(\"checked\"),",
          "206:                             success: function (data) {",
          "207:                                 ctrl.AddMultipleDataToTempChart(data, $.CustomChart.highcharts(), $(\"#customlog #combocustomgraphtype\").val(), this.graphid, this.graphval);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "254:                     }",
          "255:                 };",
          "259:                     var datatablete = [];",
          "260:                     var datatabletm = [];",
          "261:                     var datatablehu = [];",
          "",
          "[Removed Lines]",
          "257:                 ctrl.AddMultipleDataToTempChart = function(data,chart,isday,deviceid,devicename)",
          "258:                 {",
          "",
          "[Added Lines]",
          "257:                 ctrl.AddMultipleDataToTempChart = function (data, chart, isday, deviceid, devicename) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "267:                     var datatablesm = [];",
          "268:                     var datatablesx = [];",
          "273:                             if (typeof item.te != 'undefined') {",
          "275:                             }",
          "276:                             if (typeof item.hu != 'undefined') {",
          "278:                             }",
          "279:                             if (typeof item.ch != 'undefined') {",
          "281:                             }",
          "282:                             if (typeof item.dp != 'undefined') {",
          "284:                             }",
          "285:                             if (typeof item.ba != 'undefined') {",
          "287:                             }",
          "288:                             if (typeof item.se != 'undefined') {",
          "290:                             }",
          "291:                         } else {",
          "292:                             if (typeof item.te != 'undefined') {",
          "295:                             }",
          "296:                             if (typeof item.hu != 'undefined') {",
          "298:                             }",
          "299:                             if (typeof item.ch != 'undefined') {",
          "302:                             }",
          "303:                             if (typeof item.dp != 'undefined') {",
          "305:                             }",
          "306:                             if (typeof item.ba != 'undefined') {",
          "308:                             }",
          "309:                             if (typeof item.se != 'undefined') {",
          "313:                             }",
          "314:                         }",
          "315:                     });",
          "316:                     var series;",
          "320:                         chart.addSeries(",
          "321:                             {",
          "324:                                 yAxis: 1",
          "325:                             }",
          "326:                         );",
          "328:                         series.setData(datatablehu);",
          "329:                     }",
          "333:                         chart.addSeries(",
          "334:                             {",
          "337:                                 yAxis: 0",
          "338:                             }",
          "339:                         );",
          "341:                         series.setData(datatablech);",
          "344:                             chart.addSeries(",
          "345:                                 {",
          "348:                                     yAxis: 0",
          "349:                                 }",
          "350:                             );",
          "352:                             series.setData(datatablecm);",
          "353:                         }",
          "354:                     }",
          "358:                         chart.addSeries(",
          "359:                             {",
          "362:                                 yAxis: 0",
          "363:                             }",
          "364:                         );",
          "366:                         series.setData(datatablete);",
          "368:                             chart.addSeries(",
          "369:                                 {",
          "372:                                     yAxis: 0",
          "373:                                 }",
          "374:                             );",
          "376:                             series.setData(datatabletm);",
          "377:                         }",
          "378:                     }",
          "383:                         chart.addSeries(",
          "384:                             {",
          "387:                                 yAxis: 0",
          "388:                             }",
          "389:                         );",
          "391:                         series.setData(datatablese);",
          "393:                             chart.addSeries(",
          "394:                                 {",
          "397:                                     yAxis: 0",
          "398:                                 }",
          "399:                             );",
          "401:                             series.setData(datatablesm);",
          "403:                             chart.addSeries(",
          "404:                                 {",
          "407:                                     yAxis: 0",
          "408:                                 }",
          "409:                             );",
          "411:                             series.setData(datatablesx);",
          "412:                         }",
          "413:                     }",
          "417:                         chart.addSeries(",
          "418:                             {",
          "421:                                 yAxis: 0",
          "422:                             }",
          "423:                         );",
          "425:                         series.setData(datatabledp);",
          "426:                     }",
          "430:                         chart.addSeries(",
          "431:                             {",
          "434:                                 yAxis: 2",
          "435:                             }",
          "436:                         );",
          "438:                         series.setData(datatableba);",
          "439:                     }",
          "441:                 };",
          "448:                         $(this).prop(\"checked\", false);",
          "449:                     });",
          "450:                 };",
          "",
          "[Removed Lines]",
          "270:                     $.each(data.result, function(i,item)",
          "271:                     {",
          "272:                         if (isday==1) {",
          "274:                                 datatablete.push( [GetUTCFromString(item.d), parseFloat(item.te) ] );",
          "277:                                 datatablehu.push( [GetUTCFromString(item.d), parseFloat(item.hu) ] );",
          "280:                                 datatablech.push( [GetUTCFromString(item.d), parseFloat(item.ch) ] );",
          "283:                                 datatabledp.push( [GetUTCFromString(item.d), parseFloat(item.dp) ] );",
          "286:                                 datatableba.push( [GetUTCFromString(item.d), parseFloat(item.ba) ] );",
          "289:                                 datatablese.push( [GetUTCFromString(item.d), parseFloat(item.se) ] );",
          "293:                                 datatablete.push( [GetDateFromString(item.d), parseFloat(item.te) ] );",
          "294:                                 datatabletm.push( [GetDateFromString(item.d), parseFloat(item.tm) ] );",
          "297:                                 datatablehu.push( [GetDateFromString(item.d), parseFloat(item.hu) ] );",
          "300:                                 datatablech.push( [GetDateFromString(item.d), parseFloat(item.ch) ] );",
          "301:                                 datatablecm.push( [GetDateFromString(item.d), parseFloat(item.cm) ] );",
          "304:                                 datatabledp.push( [GetDateFromString(item.d), parseFloat(item.dp) ] );",
          "307:                                 datatableba.push( [GetDateFromString(item.d), parseFloat(item.ba) ] );",
          "310:                                 datatablese.push( [GetDateFromString(item.d), parseFloat(item.se) ] );",
          "311:                                 datatablesm.push( [GetDateFromString(item.d), parseFloat(item.sm) ] );",
          "312:                                 datatablesx.push( [GetDateFromString(item.d), parseFloat(item.sx) ] );",
          "318:                     if (datatablehu.length!=0)",
          "319:                     {",
          "322:                                 id: 'humidity'+deviceid,",
          "323:                                 name: devicename+':'+$.t('Humidity'),",
          "327:                         series = chart.get('humidity'+deviceid);",
          "331:                     if (datatablech.length!=0)",
          "332:                     {",
          "335:                                 id: 'chill'+deviceid,",
          "336:                                 name: devicename+':'+$.t('Chill'),",
          "340:                         series = chart.get('chill'+deviceid);",
          "343:                         if (isday==0) {",
          "346:                                     id: 'chillmin'+deviceid,",
          "347:                                     name: devicename+':'+$.t('Chill')+'_min',",
          "351:                             series = chart.get('chillmin'+deviceid);",
          "355:                     if (datatablete.length!=0)",
          "356:                     {",
          "360:                                 id: 'temperature'+deviceid,",
          "361:                                 name: devicename+':'+$.t('Temperature'),",
          "365:                         series = chart.get('temperature'+deviceid);",
          "367:                         if (isday==0) {",
          "370:                                     id: 'temperaturemin'+deviceid,",
          "371:                                     name: devicename+':'+$.t('Temperature')+'_min',",
          "375:                             series = chart.get('temperaturemin'+deviceid);",
          "380:                     if (datatablese.length!=0)",
          "381:                     {",
          "385:                                 id: 'setpoint'+deviceid,",
          "386:                                 name: devicename+':'+$.t('SetPoint'),",
          "390:                         series = chart.get('setpoint'+deviceid);",
          "392:                         if (isday==0) {",
          "395:                                     id: 'setpointmin'+deviceid,",
          "396:                                     name: devicename+':'+$.t('SetPoint')+'_min',",
          "400:                             series = chart.get('setpointmin'+deviceid);",
          "405:                                     id: 'setpointmax'+deviceid,",
          "406:                                     name: devicename+':'+$.t('SetPoint')+'_max',",
          "410:                             series = chart.get('setpointmax'+deviceid);",
          "415:                     if (datatabledp.length!=0)",
          "416:                     {",
          "419:                                 id: 'dewpoint'+deviceid,",
          "420:                                 name: devicename+':'+$.t('Dew Point'),",
          "424:                         series = chart.get('dewpoint'+deviceid);",
          "428:                     if (datatableba.length!=0)",
          "429:                     {",
          "432:                                 id: 'baro'+deviceid,",
          "433:                                 name: devicename+':'+$.t('Barometer'),",
          "437:                         series = chart.get('baro'+deviceid);",
          "444:                 ClearCustomGraph = function()",
          "445:                 {",
          "446:                     $('div[id=\"devicecontainer\"] input:checkbox:checked').each(function() {",
          "447:                         ctrl.RemoveMultipleDataFromTempChart($.CustomChart.highcharts(),$(this).attr('id'));",
          "",
          "[Added Lines]",
          "269:                     $.each(data.result, function (i, item) {",
          "270:                         if (isday == 1) {",
          "272:                                 datatablete.push([GetUTCFromString(item.d), parseFloat(item.te)]);",
          "275:                                 datatablehu.push([GetUTCFromString(item.d), parseFloat(item.hu)]);",
          "278:                                 datatablech.push([GetUTCFromString(item.d), parseFloat(item.ch)]);",
          "281:                                 datatabledp.push([GetUTCFromString(item.d), parseFloat(item.dp)]);",
          "284:                                 datatableba.push([GetUTCFromString(item.d), parseFloat(item.ba)]);",
          "287:                                 datatablese.push([GetUTCFromString(item.d), parseFloat(item.se)]);",
          "291:                                 datatablete.push([GetDateFromString(item.d), parseFloat(item.te)]);",
          "292:                                 datatabletm.push([GetDateFromString(item.d), parseFloat(item.tm)]);",
          "295:                                 datatablehu.push([GetDateFromString(item.d), parseFloat(item.hu)]);",
          "298:                                 datatablech.push([GetDateFromString(item.d), parseFloat(item.ch)]);",
          "299:                                 datatablecm.push([GetDateFromString(item.d), parseFloat(item.cm)]);",
          "302:                                 datatabledp.push([GetDateFromString(item.d), parseFloat(item.dp)]);",
          "305:                                 datatableba.push([GetDateFromString(item.d), parseFloat(item.ba)]);",
          "308:                                 datatablese.push([GetDateFromString(item.d), parseFloat(item.se)]);",
          "309:                                 datatablesm.push([GetDateFromString(item.d), parseFloat(item.sm)]);",
          "310:                                 datatablesx.push([GetDateFromString(item.d), parseFloat(item.sx)]);",
          "316:                     if (datatablehu.length != 0) {",
          "319:                                 id: 'humidity' + deviceid,",
          "320:                                 name: devicename + ':' + $.t('Humidity'),",
          "324:                         series = chart.get('humidity' + deviceid);",
          "328:                     if (datatablech.length != 0) {",
          "331:                                 id: 'chill' + deviceid,",
          "332:                                 name: devicename + ':' + $.t('Chill'),",
          "336:                         series = chart.get('chill' + deviceid);",
          "339:                         if (isday == 0) {",
          "342:                                     id: 'chillmin' + deviceid,",
          "343:                                     name: devicename + ':' + $.t('Chill') + '_min',",
          "347:                             series = chart.get('chillmin' + deviceid);",
          "351:                     if (datatablete.length != 0) {",
          "355:                                 id: 'temperature' + deviceid,",
          "356:                                 name: devicename + ':' + $.t('Temperature'),",
          "360:                         series = chart.get('temperature' + deviceid);",
          "362:                         if (isday == 0) {",
          "365:                                     id: 'temperaturemin' + deviceid,",
          "366:                                     name: devicename + ':' + $.t('Temperature') + '_min',",
          "370:                             series = chart.get('temperaturemin' + deviceid);",
          "375:                     if (datatablese.length != 0) {",
          "379:                                 id: 'setpoint' + deviceid,",
          "380:                                 name: devicename + ':' + $.t('SetPoint'),",
          "384:                         series = chart.get('setpoint' + deviceid);",
          "386:                         if (isday == 0) {",
          "389:                                     id: 'setpointmin' + deviceid,",
          "390:                                     name: devicename + ':' + $.t('SetPoint') + '_min',",
          "394:                             series = chart.get('setpointmin' + deviceid);",
          "399:                                     id: 'setpointmax' + deviceid,",
          "400:                                     name: devicename + ':' + $.t('SetPoint') + '_max',",
          "404:                             series = chart.get('setpointmax' + deviceid);",
          "409:                     if (datatabledp.length != 0) {",
          "412:                                 id: 'dewpoint' + deviceid,",
          "413:                                 name: devicename + ':' + $.t('Dew Point'),",
          "417:                         series = chart.get('dewpoint' + deviceid);",
          "421:                     if (datatableba.length != 0) {",
          "424:                                 id: 'baro' + deviceid,",
          "425:                                 name: devicename + ':' + $.t('Barometer'),",
          "429:                         series = chart.get('baro' + deviceid);",
          "436:                 ClearCustomGraph = function () {",
          "437:                     $('div[id=\"devicecontainer\"] input:checkbox:checked').each(function () {",
          "438:                         ctrl.RemoveMultipleDataFromTempChart($.CustomChart.highcharts(), $(this).attr('id'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b010e5eac2d8faf8d58f3ac657a118b029e99df",
      "candidate_info": {
        "commit_hash": "1b010e5eac2d8faf8d58f3ac657a118b029e99df",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1b010e5eac2d8faf8d58f3ac657a118b029e99df",
        "files": [
          "hardware/ToonThermostat.cpp"
        ],
        "message": "Toon URLEncode password",
        "before_after_code_files": [
          "hardware/ToonThermostat.cpp||hardware/ToonThermostat.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/ToonThermostat.cpp||hardware/ToonThermostat.cpp": [
          "File: hardware/ToonThermostat.cpp -> hardware/ToonThermostat.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:  }",
          "305:  m_ClientID = \"\";",
          "306:  std::stringstream sstr;",
          "308:  std::string szPostdata=sstr.str();",
          "309:  std::vector<std::string> ExtraHeaders;",
          "310:  std::string sResult;",
          "",
          "[Removed Lines]",
          "307:  sstr << \"username=\" << m_UserName << \"&password=\" << m_Password;",
          "",
          "[Added Lines]",
          "307:  sstr << \"username=\" << m_UserName << \"&password=\" << CURLEncode::URLEncode(m_Password);",
          "",
          "---------------"
        ]
      }
    }
  ]
}