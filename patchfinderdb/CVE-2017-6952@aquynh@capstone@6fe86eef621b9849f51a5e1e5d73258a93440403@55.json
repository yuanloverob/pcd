{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "449b17d6ca875826d3203cf8285f3cb325d47bfb",
      "candidate_info": {
        "commit_hash": "449b17d6ca875826d3203cf8285f3cb325d47bfb",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/449b17d6ca875826d3203cf8285f3cb325d47bfb",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm: fix #1060",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:        SStream_concat(O, \"#%u\", imm);",
          "760:      } else {",
          "761:       if (imm < -HEX_THRESHOLD)",
          "763:       else",
          "764:        SStream_concat(O, \"#-%u\", -imm);",
          "765:      }",
          "",
          "[Removed Lines]",
          "762:        SStream_concat(O, \"#-0x%x\", -imm);",
          "",
          "[Added Lines]",
          "762:        SStream_concat(O, \"#-0x%x\", (unsigned int)-imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5f0ae3fd44e71ed1b38abf0373334cfe24bc44b",
      "candidate_info": {
        "commit_hash": "d5f0ae3fd44e71ed1b38abf0373334cfe24bc44b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d5f0ae3fd44e71ed1b38abf0373334cfe24bc44b",
        "files": [
          "COMPILE_MSVC.TXT",
          "msvc/README",
          "msvc/capstone.sln"
        ],
        "message": "exclude winkernel from build and update notes on it",
        "before_after_code_files": [
          "msvc/capstone.sln||msvc/capstone.sln"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msvc/capstone.sln||msvc/capstone.sln": [
          "File: msvc/capstone.sln -> msvc/capstone.sln",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   {B09819BB-7EF1-4B04-945D-58117E6940A1}.Release|Win32.Build.0 = Release|Win32",
          "169:   {B09819BB-7EF1-4B04-945D-58117E6940A1}.Release|x64.ActiveCfg = Release|x64",
          "170:   {B09819BB-7EF1-4B04-945D-58117E6940A1}.Release|x64.Build.0 = Release|x64",
          "179:   {5B880AB5-E54F-11E3-8C65-B8E8563B7BDE}.Debug|Win32.ActiveCfg = Debug|Win32",
          "180:   {5B880AB5-E54F-11E3-8C65-B8E8563B7BDE}.Debug|Win32.Build.0 = Debug|Win32",
          "181:   {5B880AB5-E54F-11E3-8C65-B8E8563B7BDE}.Debug|x64.ActiveCfg = Debug|x64",
          "",
          "[Removed Lines]",
          "171:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|Win32.ActiveCfg = Debug|Win32",
          "172:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|Win32.Build.0 = Debug|Win32",
          "173:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|x64.ActiveCfg = Debug|x64",
          "174:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|x64.Build.0 = Debug|x64",
          "175:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|Win32.ActiveCfg = Release|Win32",
          "176:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|Win32.Build.0 = Release|Win32",
          "177:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|x64.ActiveCfg = Release|x64",
          "178:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|x64.Build.0 = Release|x64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:   {48EB18D5-7060-4C54-B8B1-BFF077329604}.Release|Win32.Build.0 = Release|Win32",
          "193:   {48EB18D5-7060-4C54-B8B1-BFF077329604}.Release|x64.ActiveCfg = Release|x64",
          "194:   {48EB18D5-7060-4C54-B8B1-BFF077329604}.Release|x64.Build.0 = Release|x64",
          "195:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Debug|Win32.ActiveCfg = Debug|Win32",
          "197:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Debug|x64.ActiveCfg = Debug|x64",
          "199:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Release|Win32.ActiveCfg = Release|Win32",
          "201:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Release|x64.ActiveCfg = Release|x64",
          "203:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Debug|Win32.ActiveCfg = Debug|Win32",
          "205:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Debug|x64.ActiveCfg = Debug|x64",
          "207:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Release|Win32.ActiveCfg = Release|Win32",
          "209:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Release|x64.ActiveCfg = Release|x64",
          "211:  EndGlobalSection",
          "212:  GlobalSection(SolutionProperties) = preSolution",
          "213:   HideSolutionNode = FALSE",
          "",
          "[Removed Lines]",
          "196:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Debug|Win32.Build.0 = Debug|Win32",
          "198:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Debug|x64.Build.0 = Debug|x64",
          "200:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Release|Win32.Build.0 = Release|Win32",
          "202:   {FE197816-EF84-4E8D-B29D-E0A6BA2B144B}.Release|x64.Build.0 = Release|x64",
          "204:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Debug|Win32.Build.0 = Debug|Win32",
          "206:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Debug|x64.Build.0 = Debug|x64",
          "208:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Release|Win32.Build.0 = Release|Win32",
          "210:   {C6E4974C-2CAF-499A-802A-FB906F86B4C8}.Release|x64.Build.0 = Release|x64",
          "",
          "[Added Lines]",
          "187:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|Win32.ActiveCfg = Debug|Win32",
          "188:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|Win32.Build.0 = Debug|Win32",
          "189:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|x64.ActiveCfg = Debug|x64",
          "190:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Debug|x64.Build.0 = Debug|x64",
          "191:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|Win32.ActiveCfg = Release|Win32",
          "192:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|Win32.Build.0 = Release|Win32",
          "193:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|x64.ActiveCfg = Release|x64",
          "194:   {2171C0E8-4915-49B9-AC23-A484FA08C126}.Release|x64.Build.0 = Release|x64",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0850d5521151f9a2ebb7c4660bed77d7264b60cf",
      "candidate_info": {
        "commit_hash": "0850d5521151f9a2ebb7c4660bed77d7264b60cf",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0850d5521151f9a2ebb7c4660bed77d7264b60cf",
        "files": [
          "CMakeLists.txt",
          "Makefile",
          "arch/TMS320C64x/TMS320C64xDisassembler.c",
          "arch/TMS320C64x/TMS320C64xDisassembler.h",
          "arch/TMS320C64x/TMS320C64xGenAsmWriter.inc",
          "arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc",
          "arch/TMS320C64x/TMS320C64xGenInstrInfo.inc",
          "arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc",
          "arch/TMS320C64x/TMS320C64xInstPrinter.c",
          "arch/TMS320C64x/TMS320C64xInstPrinter.h",
          "arch/TMS320C64x/TMS320C64xMapping.c",
          "arch/TMS320C64x/TMS320C64xMapping.h",
          "arch/TMS320C64x/TMS320C64xModule.c",
          "bindings/python/Makefile",
          "bindings/python/capstone/__init__.py",
          "bindings/python/capstone/tms320c64x.py",
          "bindings/python/capstone/tms320c64x_const.py",
          "bindings/python/pyx/ccapstone.pyx",
          "bindings/python/test_all.py",
          "bindings/python/test_tms320c64x.py",
          "config.mk",
          "cs.c",
          "cs_priv.h",
          "include/capstone/capstone.h",
          "include/capstone/tms320c64x.h",
          "tests/Makefile",
          "tests/test_tms320c64x.c"
        ],
        "message": "Added support for the TMS320C64x architecture.",
        "before_after_code_files": [
          "arch/TMS320C64x/TMS320C64xDisassembler.c||arch/TMS320C64x/TMS320C64xDisassembler.c",
          "arch/TMS320C64x/TMS320C64xDisassembler.h||arch/TMS320C64x/TMS320C64xDisassembler.h",
          "arch/TMS320C64x/TMS320C64xGenAsmWriter.inc||arch/TMS320C64x/TMS320C64xGenAsmWriter.inc",
          "arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc||arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc",
          "arch/TMS320C64x/TMS320C64xGenInstrInfo.inc||arch/TMS320C64x/TMS320C64xGenInstrInfo.inc",
          "arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc||arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc",
          "arch/TMS320C64x/TMS320C64xInstPrinter.c||arch/TMS320C64x/TMS320C64xInstPrinter.c",
          "arch/TMS320C64x/TMS320C64xInstPrinter.h||arch/TMS320C64x/TMS320C64xInstPrinter.h",
          "arch/TMS320C64x/TMS320C64xMapping.c||arch/TMS320C64x/TMS320C64xMapping.c",
          "arch/TMS320C64x/TMS320C64xMapping.h||arch/TMS320C64x/TMS320C64xMapping.h",
          "arch/TMS320C64x/TMS320C64xModule.c||arch/TMS320C64x/TMS320C64xModule.c",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/capstone/tms320c64x.py||bindings/python/capstone/tms320c64x.py",
          "bindings/python/capstone/tms320c64x_const.py||bindings/python/capstone/tms320c64x_const.py",
          "bindings/python/pyx/ccapstone.pyx||bindings/python/pyx/ccapstone.pyx",
          "bindings/python/test_all.py||bindings/python/test_all.py",
          "bindings/python/test_tms320c64x.py||bindings/python/test_tms320c64x.py",
          "config.mk||config.mk",
          "cs.c||cs.c",
          "cs_priv.h||cs_priv.h",
          "include/capstone/capstone.h||include/capstone/capstone.h",
          "include/capstone/tms320c64x.h||include/capstone/tms320c64x.h",
          "tests/test_tms320c64x.c||tests/test_tms320c64x.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/TMS320C64x/TMS320C64xDisassembler.c||arch/TMS320C64x/TMS320C64xDisassembler.c": [
          "File: arch/TMS320C64x/TMS320C64xDisassembler.c -> arch/TMS320C64x/TMS320C64xDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifdef CAPSTONE_HAS_TMS320C64X",
          "6: #include <string.h>",
          "8: #include \"../../cs_priv.h\"",
          "9: #include \"../../utils.h\"",
          "11: #include \"../../MCInst.h\"",
          "12: #include \"../../MCInstrDesc.h\"",
          "13: #include \"../../MCFixedLenDisassembler.h\"",
          "14: #include \"../../MCRegisterInfo.h\"",
          "15: #include \"../../MCDisassembler.h\"",
          "16: #include \"../../MathExtras.h\"",
          "18: static uint64_t getFeatureBits(int mode);",
          "20: static DecodeStatus DecodeGPRegsRegisterClass(MCInst *Inst, unsigned RegNo,",
          "21:   uint64_t Address, void *Decoder);",
          "23: static DecodeStatus DecodeControlRegsRegisterClass(MCInst *Inst, unsigned RegNo,",
          "24:   uint64_t Address, void *Decoder);",
          "26: static DecodeStatus DecodeScst5(MCInst *Inst, unsigned Val,",
          "27:   uint64_t Address, void *Decoder);",
          "29: static DecodeStatus DecodeScst16(MCInst *Inst, unsigned Val,",
          "30:   uint64_t Address, void *Decoder);",
          "32: static DecodeStatus DecodePCRelScst7(MCInst *Inst, unsigned Val,",
          "33:   uint64_t Address, void *Decoder);",
          "35: static DecodeStatus DecodePCRelScst10(MCInst *Inst, unsigned Val,",
          "36:   uint64_t Address, void *Decoder);",
          "38: static DecodeStatus DecodePCRelScst12(MCInst *Inst, unsigned Val,",
          "39:   uint64_t Address, void *Decoder);",
          "41: static DecodeStatus DecodePCRelScst21(MCInst *Inst, unsigned Val,",
          "42:   uint64_t Address, void *Decoder);",
          "44: static DecodeStatus DecodeMemOperand(MCInst *Inst, unsigned Val,",
          "45:   uint64_t Address, void *Decoder);",
          "47: static DecodeStatus DecodeMemOperandSc(MCInst *Inst, unsigned Val,",
          "48:   uint64_t Address, void *Decoder);",
          "50: static DecodeStatus DecodeMemOperand2(MCInst *Inst, unsigned Val,",
          "51:   uint64_t Address, void *Decoder);",
          "53: static DecodeStatus DecodeRegPair5(MCInst *Inst, unsigned RegNo,",
          "54:   uint64_t Address, void *Decoder);",
          "56: static DecodeStatus DecodeRegPair4(MCInst *Inst, unsigned RegNo,",
          "57:   uint64_t Address, void *Decoder);",
          "59: static DecodeStatus DecodeCondRegister(MCInst *Inst, unsigned Val,",
          "60:   uint64_t Address, void *Decoder);",
          "62: static DecodeStatus DecodeCondRegisterZero(MCInst *Inst, unsigned Val,",
          "63:   uint64_t Address, void *Decoder);",
          "65: static DecodeStatus DecodeSide(MCInst *Inst, unsigned Val,",
          "66:   uint64_t Address, void *Decoder);",
          "68: static DecodeStatus DecodeParallel(MCInst *Inst, unsigned Val,",
          "69:   uint64_t Address, void *Decoder);",
          "71: static DecodeStatus DecodeCrosspathX1(MCInst *Inst, unsigned Val,",
          "72:   uint64_t Address, void *Decoder);",
          "74: static DecodeStatus DecodeCrosspathX2(MCInst *Inst, unsigned Val,",
          "75:   uint64_t Address, void *Decoder);",
          "77: static DecodeStatus DecodeCrosspathX3(MCInst *Inst, unsigned Val,",
          "78:   uint64_t Address, void *Decoder);",
          "80: static DecodeStatus DecodeNop(MCInst *Inst, unsigned Val,",
          "81:   uint64_t Address, void *Decoder);",
          "83: #include \"TMS320C64xGenDisassemblerTables.inc\"",
          "85: #define GET_REGINFO_ENUM",
          "86: #define GET_REGINFO_MC_DESC",
          "87: #include \"TMS320C64xGenRegisterInfo.inc\"",
          "89: static const unsigned GPRegsDecoderTable[] = {",
          "90:  TMS320C64x_A0,  TMS320C64x_A1,  TMS320C64x_A2,  TMS320C64x_A3,",
          "91:  TMS320C64x_A4,  TMS320C64x_A5,  TMS320C64x_A6,  TMS320C64x_A7,",
          "92:  TMS320C64x_A8,  TMS320C64x_A9,  TMS320C64x_A10, TMS320C64x_A11,",
          "93:  TMS320C64x_A12, TMS320C64x_A13, TMS320C64x_A14, TMS320C64x_A15,",
          "94:  TMS320C64x_A16, TMS320C64x_A17, TMS320C64x_A18, TMS320C64x_A19,",
          "95:  TMS320C64x_A20, TMS320C64x_A21, TMS320C64x_A22, TMS320C64x_A23,",
          "96:  TMS320C64x_A24, TMS320C64x_A25, TMS320C64x_A26, TMS320C64x_A27,",
          "97:  TMS320C64x_A28, TMS320C64x_A29, TMS320C64x_A30, TMS320C64x_A31",
          "98: };",
          "100: static const unsigned ControlRegsDecoderTable[] = {",
          "101:  TMS320C64x_AMR,    TMS320C64x_CSR,  TMS320C64x_ISR,   TMS320C64x_ICR,",
          "102:  TMS320C64x_IER,    TMS320C64x_ISTP, TMS320C64x_IRP,   TMS320C64x_NRP,",
          "103:  ~0U,               ~0U,             TMS320C64x_TSCL,  TMS320C64x_TSCH,",
          "104:  ~0U,               TMS320C64x_ILC,  TMS320C64x_RILC,  TMS320C64x_REP,",
          "105:  TMS320C64x_PCE1,   TMS320C64x_DNUM, ~0U,              ~0U,",
          "106:  ~0U,               TMS320C64x_SSR,  TMS320C64x_GPLYA, TMS320C64x_GPLYB,",
          "107:  TMS320C64x_GFPGFR, TMS320C64x_DIER, TMS320C64x_TSR,   TMS320C64x_ITSR,",
          "108:  TMS320C64x_NTSR,   TMS320C64x_ECR,  ~0U,              TMS320C64x_IERR",
          "109: };",
          "111: static uint64_t getFeatureBits(int mode)",
          "112: {",
          "114:  return (uint64_t)-1;",
          "115: }",
          "117: static unsigned getReg(const unsigned *RegTable, unsigned RegNo)",
          "118: {",
          "119:  if(RegNo > 31)",
          "120:   return ~0U;",
          "121:  return RegTable[RegNo];",
          "122: }",
          "124: static DecodeStatus DecodeGPRegsRegisterClass(MCInst *Inst, unsigned RegNo,",
          "125:   uint64_t Address, void *Decoder)",
          "126: {",
          "127:  unsigned Reg;",
          "129:  if(RegNo > 31)",
          "130:   return MCDisassembler_Fail;",
          "132:  Reg = getReg(GPRegsDecoderTable, RegNo);",
          "133:  if(Reg == ~0U)",
          "134:   return MCDisassembler_Fail;",
          "135:  MCOperand_CreateReg0(Inst, Reg);",
          "137:  return MCDisassembler_Success;",
          "138: }",
          "140: static DecodeStatus DecodeControlRegsRegisterClass(MCInst *Inst, unsigned RegNo,",
          "141:   uint64_t Address, void *Decoder)",
          "142: {",
          "143:  unsigned Reg;",
          "145:  if(RegNo > 31)",
          "146:   return MCDisassembler_Fail;",
          "148:  Reg = getReg(ControlRegsDecoderTable, RegNo);",
          "149:  if(Reg == ~0U)",
          "150:   return MCDisassembler_Fail;",
          "151:  MCOperand_CreateReg0(Inst, Reg);",
          "153:  return MCDisassembler_Success;",
          "154: }",
          "156: static DecodeStatus DecodeScst5(MCInst *Inst, unsigned Val,",
          "157:   uint64_t Address, void *Decoder)",
          "158: {",
          "159:  int32_t imm;",
          "161:  imm = Val;",
          "163:  if(imm & (1 << (5 - 1)))",
          "164:   imm |= ~((1 << 5) - 1);",
          "166:  MCOperand_CreateImm0(Inst, imm);",
          "168:  return MCDisassembler_Success;",
          "169: }",
          "171: static DecodeStatus DecodeScst16(MCInst *Inst, unsigned Val,",
          "172:   uint64_t Address, void *Decoder)",
          "173: {",
          "174:  int32_t imm;",
          "176:  imm = Val;",
          "178:  if(imm & (1 << (16 - 1)))",
          "179:   imm |= ~((1 << 16) - 1);",
          "181:  MCOperand_CreateImm0(Inst, imm);",
          "183:  return MCDisassembler_Success;",
          "184: }",
          "186: static DecodeStatus DecodePCRelScst7(MCInst *Inst, unsigned Val,",
          "187:   uint64_t Address, void *Decoder)",
          "188: {",
          "189:  int32_t imm;",
          "191:  imm = Val;",
          "193:  if(imm & (1 << (7 - 1)))",
          "194:   imm |= ~((1 << 7) - 1);",
          "197:  MCOperand_CreateImm0(Inst, (Address & ~31) + (imm << 2));",
          "199:  return MCDisassembler_Success;",
          "200: }",
          "202: static DecodeStatus DecodePCRelScst10(MCInst *Inst, unsigned Val,",
          "203:   uint64_t Address, void *Decoder)",
          "204: {",
          "205:  int32_t imm;",
          "207:  imm = Val;",
          "209:  if(imm & (1 << (10 - 1)))",
          "210:   imm |= ~((1 << 10) - 1);",
          "213:  MCOperand_CreateImm0(Inst, (Address & ~31) + (imm << 2));",
          "215:  return MCDisassembler_Success;",
          "216: }",
          "218: static DecodeStatus DecodePCRelScst12(MCInst *Inst, unsigned Val,",
          "219:   uint64_t Address, void *Decoder)",
          "220: {",
          "221:  int32_t imm;",
          "223:  imm = Val;",
          "225:  if(imm & (1 << (12 - 1)))",
          "226:   imm |= ~((1 << 12) - 1);",
          "229:  MCOperand_CreateImm0(Inst, (Address & ~31) + (imm << 2));",
          "231:  return MCDisassembler_Success;",
          "232: }",
          "234: static DecodeStatus DecodePCRelScst21(MCInst *Inst, unsigned Val,",
          "235:   uint64_t Address, void *Decoder)",
          "236: {",
          "237:  int32_t imm;",
          "239:  imm = Val;",
          "241:  if(imm & (1 << (21 - 1)))",
          "242:   imm |= ~((1 << 21) - 1);",
          "245:  MCOperand_CreateImm0(Inst, (Address & ~31) + (imm << 2));",
          "247:  return MCDisassembler_Success;",
          "248: }",
          "250: static DecodeStatus DecodeMemOperand(MCInst *Inst, unsigned Val,",
          "251:   uint64_t Address, void *Decoder)",
          "252: {",
          "253:  return DecodeMemOperandSc(Inst, Val | (1 << 15), Address, Decoder);",
          "254: }",
          "256: static DecodeStatus DecodeMemOperandSc(MCInst *Inst, unsigned Val,",
          "257:   uint64_t Address, void *Decoder)",
          "258: {",
          "259:  uint8_t scaled, base, offset, mode, unit;",
          "260:  unsigned basereg, offsetreg;",
          "262:  scaled = (Val >> 15) & 1;",
          "263:  base = (Val >> 10) & 0x1f;",
          "264:  offset = (Val >> 5) & 0x1f;",
          "265:  mode = (Val >> 1) & 0xf;",
          "266:  unit = Val & 1;",
          "268:  if((base >= TMS320C64X_REG_A0) && (base <= TMS320C64X_REG_A31))",
          "269:   base = (base - TMS320C64X_REG_A0 + TMS320C64X_REG_B0);",
          "270:  else if((base >= TMS320C64X_REG_B0) && (base <= TMS320C64X_REG_B31))",
          "271:   base = (base - TMS320C64X_REG_B0 + TMS320C64X_REG_A0);",
          "272:  basereg = getReg(GPRegsDecoderTable, base);",
          "274:  switch(mode) {",
          "275:   case 0:",
          "276:   case 1:",
          "277:   case 8:",
          "278:   case 9:",
          "279:   case 10:",
          "280:   case 11:",
          "281:    MCOperand_CreateImm0(Inst, (scaled << 19) | (basereg << 12) | (offset << 5) | (mode << 1) | unit);",
          "282:    break;",
          "283:   case 4:",
          "284:   case 5:",
          "285:   case 12:",
          "286:   case 13:",
          "287:   case 14:",
          "288:   case 15:",
          "289:    if((offset >= TMS320C64X_REG_A0) && (offset <= TMS320C64X_REG_A31))",
          "290:     offset = (offset - TMS320C64X_REG_A0 + TMS320C64X_REG_B0);",
          "291:    else if((offset >= TMS320C64X_REG_B0) && (offset <= TMS320C64X_REG_B31))",
          "292:     offset = (base - TMS320C64X_REG_B0 + TMS320C64X_REG_A0);",
          "293:    offsetreg = getReg(GPRegsDecoderTable, offset);",
          "294:    MCOperand_CreateImm0(Inst, (scaled << 19) | (basereg << 12) | (offsetreg << 5) | (mode << 1) | unit);",
          "295:    break;",
          "296:   default:",
          "297:    return MCDisassembler_Fail;",
          "298:  }",
          "300:  return MCDisassembler_Success;",
          "301: }",
          "303: static DecodeStatus DecodeMemOperand2(MCInst *Inst, unsigned Val,",
          "304:   uint64_t Address, void *Decoder)",
          "305: {",
          "306:  uint16_t offset;",
          "307:  unsigned basereg;",
          "309:  if(Val & 1)",
          "310:   basereg = TMS320C64X_REG_B15;",
          "311:  else",
          "312:   basereg = TMS320C64X_REG_B14;",
          "314:  offset = (Val >> 1) & 0x7fff;",
          "315:  MCOperand_CreateImm0(Inst, (offset << 7) | basereg);",
          "317:  return MCDisassembler_Success;",
          "318: }",
          "320: static DecodeStatus DecodeRegPair5(MCInst *Inst, unsigned RegNo,",
          "321:   uint64_t Address, void *Decoder)",
          "322: {",
          "323:  unsigned Reg;",
          "325:  if(RegNo > 31)",
          "326:   return MCDisassembler_Fail;",
          "328:  Reg = getReg(GPRegsDecoderTable, RegNo);",
          "329:  MCOperand_CreateReg0(Inst, Reg);",
          "331:  return MCDisassembler_Success;",
          "332: }",
          "334: static DecodeStatus DecodeRegPair4(MCInst *Inst, unsigned RegNo,",
          "335:   uint64_t Address, void *Decoder)",
          "336: {",
          "337:  unsigned Reg;",
          "339:  if(RegNo > 15)",
          "340:   return MCDisassembler_Fail;",
          "342:  Reg = getReg(GPRegsDecoderTable, RegNo << 1);",
          "343:  MCOperand_CreateReg0(Inst, Reg);",
          "345:  return MCDisassembler_Success;",
          "346: }",
          "348: static DecodeStatus DecodeCondRegister(MCInst *Inst, unsigned Val,",
          "349:   uint64_t Address, void *Decoder)",
          "350: {",
          "351:  DecodeStatus ret = MCDisassembler_Success;",
          "353:  if(!Inst->flat_insn->detail)",
          "354:   return MCDisassembler_Success;",
          "356:  switch(Val) {",
          "357:   case 0:",
          "358:   case 7:",
          "359:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_INVALID;",
          "360:    break;",
          "361:   case 1:",
          "362:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_B0;",
          "363:    break;",
          "364:   case 2:",
          "365:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_B1;",
          "366:    break;",
          "367:   case 3:",
          "368:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_B2;",
          "369:    break;",
          "370:   case 4:",
          "371:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_A1;",
          "372:    break;",
          "373:   case 5:",
          "374:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_A2;",
          "375:    break;",
          "376:   case 6:",
          "377:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_A0;",
          "378:    break;",
          "379:   default:",
          "380:    Inst->flat_insn->detail->tms320c64x.condition.reg = TMS320C64X_REG_INVALID;",
          "381:    ret = MCDisassembler_Fail;",
          "382:    break;",
          "383:  }",
          "385:  return ret;",
          "386: }",
          "388: static DecodeStatus DecodeCondRegisterZero(MCInst *Inst, unsigned Val,",
          "389:   uint64_t Address, void *Decoder)",
          "390: {",
          "391:  DecodeStatus ret = MCDisassembler_Success;",
          "393:  if(!Inst->flat_insn->detail)",
          "394:   return MCDisassembler_Success;",
          "396:  switch(Val) {",
          "397:   case 0:",
          "398:    Inst->flat_insn->detail->tms320c64x.condition.zero = 0;",
          "399:    break;",
          "400:   case 1:",
          "401:    Inst->flat_insn->detail->tms320c64x.condition.zero = 1;",
          "402:    break;",
          "403:   default:",
          "404:    Inst->flat_insn->detail->tms320c64x.condition.zero = 0;",
          "405:    ret = MCDisassembler_Fail;",
          "406:    break;",
          "407:  }",
          "409:  return ret;",
          "410: }",
          "412: static DecodeStatus DecodeSide(MCInst *Inst, unsigned Val,",
          "413:   uint64_t Address, void *Decoder)",
          "414: {",
          "415:  DecodeStatus ret = MCDisassembler_Success;",
          "416:  MCOperand *op;",
          "417:  int i;",
          "420:  if(Val == 1) {",
          "421:   for(i = 0; i < Inst->size; i++) {",
          "422:    op = &Inst->Operands[i];",
          "423:    if(op->Kind == kRegister) {",
          "424:     if((op->RegVal >= TMS320C64X_REG_A0) && (op->RegVal <= TMS320C64X_REG_A31))",
          "425:      op->RegVal = (op->RegVal - TMS320C64X_REG_A0 + TMS320C64X_REG_B0);",
          "426:     else if((op->RegVal >= TMS320C64X_REG_B0) && (op->RegVal <= TMS320C64X_REG_B31))",
          "427:      op->RegVal = (op->RegVal - TMS320C64X_REG_B0 + TMS320C64X_REG_A0);",
          "428:    }",
          "429:   }",
          "430:  }",
          "432:  if(!Inst->flat_insn->detail)",
          "433:   return MCDisassembler_Success;",
          "435:  switch(Val) {",
          "436:   case 0:",
          "437:    Inst->flat_insn->detail->tms320c64x.funit.side = 1;",
          "438:    break;",
          "439:   case 1:",
          "440:    Inst->flat_insn->detail->tms320c64x.funit.side = 2;",
          "441:    break;",
          "442:   default:",
          "443:    Inst->flat_insn->detail->tms320c64x.funit.side = 0;",
          "444:    ret = MCDisassembler_Fail;",
          "445:    break;",
          "446:  }",
          "448:  return ret;",
          "449: }",
          "451: static DecodeStatus DecodeParallel(MCInst *Inst, unsigned Val,",
          "452:   uint64_t Address, void *Decoder)",
          "453: {",
          "454:  DecodeStatus ret = MCDisassembler_Success;",
          "456:  if(!Inst->flat_insn->detail)",
          "457:   return MCDisassembler_Success;",
          "459:  switch(Val) {",
          "460:   case 0:",
          "461:    Inst->flat_insn->detail->tms320c64x.parallel = 0;",
          "462:    break;",
          "463:   case 1:",
          "464:    Inst->flat_insn->detail->tms320c64x.parallel = 1;",
          "465:    break;",
          "466:   default:",
          "467:    Inst->flat_insn->detail->tms320c64x.parallel = -1;",
          "468:    ret = MCDisassembler_Fail;",
          "469:    break;",
          "470:  }",
          "472:  return ret;",
          "473: }",
          "475: static DecodeStatus DecodeCrosspathX1(MCInst *Inst, unsigned Val,",
          "476:   uint64_t Address, void *Decoder)",
          "477: {",
          "478:  DecodeStatus ret = MCDisassembler_Success;",
          "479:  MCOperand *op;",
          "481:  if(!Inst->flat_insn->detail)",
          "482:   return MCDisassembler_Success;",
          "484:  switch(Val) {",
          "485:   case 0:",
          "486:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = 0;",
          "487:    break;",
          "488:   case 1:",
          "489:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = 1;",
          "490:    op = &Inst->Operands[0];",
          "491:    if(op->Kind == kRegister) {",
          "492:     if((op->RegVal >= TMS320C64X_REG_A0) && (op->RegVal <= TMS320C64X_REG_A31))",
          "493:      op->RegVal = (op->RegVal - TMS320C64X_REG_A0 + TMS320C64X_REG_B0);",
          "494:     else if((op->RegVal >= TMS320C64X_REG_B0) && (op->RegVal <= TMS320C64X_REG_B31))",
          "495:      op->RegVal = (op->RegVal - TMS320C64X_REG_B0 + TMS320C64X_REG_A0);",
          "496:    }",
          "497:    break;",
          "498:   default:",
          "499:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = -1;",
          "500:    ret = MCDisassembler_Fail;",
          "501:    break;",
          "502:  }",
          "504:  return ret;",
          "505: }",
          "507: static DecodeStatus DecodeCrosspathX2(MCInst *Inst, unsigned Val,",
          "508:   uint64_t Address, void *Decoder)",
          "509: {",
          "510:  DecodeStatus ret = MCDisassembler_Success;",
          "511:  MCOperand *op;",
          "513:  if(!Inst->flat_insn->detail)",
          "514:   return MCDisassembler_Success;",
          "516:  switch(Val) {",
          "517:   case 0:",
          "518:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = 0;",
          "519:    break;",
          "520:   case 1:",
          "521:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = 1;",
          "522:    op = &Inst->Operands[1];",
          "523:    if(op->Kind == kRegister) {",
          "524:     if((op->RegVal >= TMS320C64X_REG_A0) && (op->RegVal <= TMS320C64X_REG_A31))",
          "525:      op->RegVal = (op->RegVal - TMS320C64X_REG_A0 + TMS320C64X_REG_B0);",
          "526:     else if((op->RegVal >= TMS320C64X_REG_B0) && (op->RegVal <= TMS320C64X_REG_B31))",
          "527:      op->RegVal = (op->RegVal - TMS320C64X_REG_B0 + TMS320C64X_REG_A0);",
          "528:    }",
          "529:    break;",
          "530:   default:",
          "531:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = -1;",
          "532:    ret = MCDisassembler_Fail;",
          "533:    break;",
          "534:  }",
          "536:  return ret;",
          "537: }",
          "539: static DecodeStatus DecodeCrosspathX3(MCInst *Inst, unsigned Val,",
          "540:   uint64_t Address, void *Decoder)",
          "541: {",
          "542:  DecodeStatus ret = MCDisassembler_Success;",
          "543:  MCOperand *op;",
          "545:  if(!Inst->flat_insn->detail)",
          "546:   return MCDisassembler_Success;",
          "548:  switch(Val) {",
          "549:   case 0:",
          "550:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = 0;",
          "551:    break;",
          "552:   case 1:",
          "553:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = 2;",
          "554:    op = &Inst->Operands[2];",
          "555:    if(op->Kind == kRegister) {",
          "556:     if((op->RegVal >= TMS320C64X_REG_A0) && (op->RegVal <= TMS320C64X_REG_A31))",
          "557:      op->RegVal = (op->RegVal - TMS320C64X_REG_A0 + TMS320C64X_REG_B0);",
          "558:     else if((op->RegVal >= TMS320C64X_REG_B0) && (op->RegVal <= TMS320C64X_REG_B31))",
          "559:      op->RegVal = (op->RegVal - TMS320C64X_REG_B0 + TMS320C64X_REG_A0);",
          "560:    }",
          "561:    break;",
          "562:   default:",
          "563:    Inst->flat_insn->detail->tms320c64x.funit.crosspath = -1;",
          "564:    ret = MCDisassembler_Fail;",
          "565:    break;",
          "566:  }",
          "568:  return ret;",
          "569: }",
          "572: static DecodeStatus DecodeNop(MCInst *Inst, unsigned Val,",
          "573:   uint64_t Address, void *Decoder)",
          "574: {",
          "575:  MCOperand_CreateImm0(Inst, Val + 1);",
          "577:  return MCDisassembler_Success;",
          "578: }",
          "580: #define GET_INSTRINFO_ENUM",
          "581: #include \"TMS320C64xGenInstrInfo.inc\"",
          "583: bool TMS320C64x_getInstruction(csh ud, const uint8_t *code, size_t code_len,",
          "584:   MCInst *MI, uint16_t *size, uint64_t address, void *info)",
          "585: {",
          "586:  uint32_t insn;",
          "587:  DecodeStatus result;",
          "589:  if(code_len < 4) {",
          "591:   return MCDisassembler_Fail;",
          "592:  }",
          "594:  if(MI->flat_insn->detail)",
          "595:   memset(MI->flat_insn->detail, 0, sizeof(cs_detail));",
          "597:  insn = (code[3] << 0) | (code[2] << 8) | (code[1] << 16) | (code[0] << 24);",
          "598:  result = decodeInstruction_4(DecoderTable32, MI, insn, address, info, 0);",
          "600:  if(result == MCDisassembler_Success) {",
          "602:   return true;",
          "603:  }",
          "605:  MCInst_clear(MI);",
          "607:  return false;",
          "608: }",
          "610: void TMS320C64x_init(MCRegisterInfo *MRI)",
          "611: {",
          "612:  MCRegisterInfo_InitMCRegisterInfo(MRI, TMS320C64xRegDesc, 90,",
          "613:    0, 0,",
          "614:    TMS320C64xMCRegisterClasses, 7,",
          "615:    0, 0,",
          "616:    TMS320C64xRegDiffLists,",
          "617:    0,",
          "618:    TMS320C64xSubRegIdxLists, 1,",
          "619:    0);",
          "620: }",
          "622: #endif",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xDisassembler.h||arch/TMS320C64x/TMS320C64xDisassembler.h": [
          "File: arch/TMS320C64x/TMS320C64xDisassembler.h -> arch/TMS320C64x/TMS320C64xDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef CS_TMS320C64XDISASSEMBLER_H",
          "5: #define CS_TMS320C64XDISASSEMBLER_H",
          "7: #include <stdint.h>",
          "9: #include \"capstone/capstone.h\"",
          "10: #include \"../../MCRegisterInfo.h\"",
          "11: #include \"../../MCInst.h\"",
          "13: void TMS320C64x_init(MCRegisterInfo *MRI);",
          "15: bool TMS320C64x_getInstruction(csh ud, const uint8_t *code, size_t code_len,",
          "16:   MCInst *instr, uint16_t *size, uint64_t address, void *info);",
          "18: #endif",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xGenAsmWriter.inc||arch/TMS320C64x/TMS320C64xGenAsmWriter.inc": [
          "File: arch/TMS320C64x/TMS320C64xGenAsmWriter.inc -> arch/TMS320C64x/TMS320C64xGenAsmWriter.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: |*                                                                            *|",
          "3: |*Assembly Writer Source Fragment                                             *|",
          "4: |*                                                                            *|",
          "5: |* Automatically generated file, do not edit!                                 *|",
          "6: |*                                                                            *|",
          "9: #include <stdio.h>",
          "10: #include \"../../myinttypes.h\"",
          "14: static void printInstruction(MCInst *MI, SStream *O, MCRegisterInfo *MRI) {",
          "15:   static const uint32_t OpInfo[] = {",
          "16:     0U, // PHI",
          "17:     0U, // INLINEASM",
          "18:     0U, // CFI_INSTRUCTION",
          "19:     0U, // EH_LABEL",
          "20:     0U, // GC_LABEL",
          "21:     0U, // KILL",
          "22:     0U, // EXTRACT_SUBREG",
          "23:     0U, // INSERT_SUBREG",
          "24:     0U, // IMPLICIT_DEF",
          "25:     0U, // SUBREG_TO_REG",
          "26:     0U, // COPY_TO_REGCLASS",
          "27:     882U, // DBG_VALUE",
          "28:     0U, // REG_SEQUENCE",
          "29:     0U, // COPY",
          "30:     875U, // BUNDLE",
          "31:     904U, // LIFETIME_START",
          "32:     862U, // LIFETIME_END",
          "33:     0U, // STACKMAP",
          "34:     0U, // PATCHPOINT",
          "35:     0U, // LOAD_STACK_GUARD",
          "36:     0U, // STATEPOINT",
          "37:     0U, // FRAME_ALLOC",
          "38:     1126U, // ABS2_l2_rr",
          "39:     10847U, // ABS_l1_pp",
          "40:     1631U, // ABS_l1_rr",
          "41:     85006U, // ADD2_d2_rrr",
          "42:     85006U, // ADD2_l1_rrr_x2",
          "43:     85006U, // ADD2_s1_rrr",
          "44:     85171U, // ADD4_l1_rrr_x2",
          "45:     91479U, // ADDAB_d1_rir",
          "46:     91479U, // ADDAB_d1_rrr",
          "47:     91541U, // ADDAD_d1_rir",
          "48:     91541U, // ADDAD_d1_rrr",
          "49:     91577U, // ADDAH_d1_rir",
          "50:     91577U, // ADDAH_d1_rrr",
          "51:     91937U, // ADDAW_d1_rir",
          "52:     91937U, // ADDAW_d1_rrr",
          "53:     132488U, // ADDKPC_s3_iir",
          "54:     1518U, // ADDK_s2_ir",
          "55:     233140U, // ADDU_l1_rpp",
          "56:     216756U, // ADDU_l1_rrp_x2",
          "57:     91555U, // ADD_d1_rir",
          "58:     91555U, // ADD_d1_rrr",
          "59:     91555U, // ADD_d2_rir",
          "60:     85411U, // ADD_d2_rrr",
          "61:     232867U, // ADD_l1_ipp",
          "62:     85411U, // ADD_l1_irr",
          "63:     232867U, // ADD_l1_rpp",
          "64:     216483U, // ADD_l1_rrp_x2",
          "65:     85411U, // ADD_l1_rrr_x2",
          "66:     85411U, // ADD_s1_irr",
          "67:     85411U, // ADD_s1_rrr",
          "68:     85542U, // ANDN_d2_rrr",
          "69:     85542U, // ANDN_l1_rrr_x2",
          "70:     85542U, // ANDN_s4_rrr",
          "71:     85416U, // AND_d2_rir",
          "72:     85416U, // AND_d2_rrr",
          "73:     85416U, // AND_l1_irr",
          "74:     85416U, // AND_l1_rrr_x2",
          "75:     85416U, // AND_s1_irr",
          "76:     85416U, // AND_s1_rrr",
          "77:     85019U, // AVG2_m1_rrr",
          "78:     85232U, // AVGU4_m1_rrr",
          "79:     1410U, // BDEC_s8_ir",
          "80:     1196U, // BITC4_m2_rr",
          "81:     307756U, // BNOP_s10_ri",
          "82:     307756U, // BNOP_s9_ii",
          "83:     1654U, // BPOS_s8_ir",
          "84:     53588U, // B_s5_i",
          "85:     53588U, // B_s6_r",
          "86:     892U, // B_s7_irp",
          "87:     898U, // B_s7_nrp",
          "88:     353870U, // CLR_s15_riir",
          "89:     91726U, // CLR_s1_rrr",
          "90:     85080U, // CMPEQ2_s1_rrr",
          "91:     85207U, // CMPEQ4_s1_rrr",
          "92:     101938U, // CMPEQ_l1_ipr",
          "93:     85554U, // CMPEQ_l1_irr",
          "94:     101938U, // CMPEQ_l1_rpr",
          "95:     85554U, // CMPEQ_l1_rrr_x2",
          "96:     85109U, // CMPGT2_s1_rrr",
          "97:     85298U, // CMPGTU4_s1_rrr",
          "98:     102037U, // CMPGT_l1_ipr",
          "99:     85653U, // CMPGT_l1_irr",
          "100:     102037U, // CMPGT_l1_rpr",
          "101:     85653U, // CMPGT_l1_rrr_x2",
          "102:     102150U, // CMPLTU_l1_ipr",
          "103:     85766U, // CMPLTU_l1_irr",
          "104:     102150U, // CMPLTU_l1_rpr",
          "105:     85766U, // CMPLTU_l1_rrr_x2",
          "106:     102044U, // CMPLT_l1_ipr",
          "107:     85660U, // CMPLT_l1_irr",
          "108:     102044U, // CMPLT_l1_rpr",
          "109:     85660U, // CMPLT_l1_rrr_x2",
          "110:     1529U, // DEAL_m2_rr",
          "111:     216145U, // DOTP2_m1_rrp",
          "112:     85073U, // DOTP2_m1_rrr",
          "113:     85065U, // DOTPN2_m1_rrr",
          "114:     85124U, // DOTPNRSU2_m1_rrr",
          "115:     85135U, // DOTPRSU2_m1_rrr",
          "116:     85281U, // DOTPSU4_m1_rrr",
          "117:     85273U, // DOTPU4_m1_rrr",
          "118:     354062U, // EXTU_s15_riir",
          "119:     91918U, // EXTU_s1_rrr",
          "120:     353955U, // EXT_s15_riir",
          "121:     91811U, // EXT_s1_rrr",
          "122:     102142U, // GMPGTU_l1_ipr",
          "123:     85758U, // GMPGTU_l1_irr",
          "124:     102142U, // GMPGTU_l1_rpr",
          "125:     85758U, // GMPGTU_l1_rrr_x2",
          "126:     85321U, // GMPY4_m1_rrr",
          "127:     5800U, // LDBU_d5_mr",
          "128:     6824U, // LDBU_d6_mr",
          "129:     5470U, // LDB_d5_mr",
          "130:     6494U, // LDB_d6_mr",
          "131:     14120U, // LDDW_d7_mp",
          "132:     5818U, // LDHU_d5_mr",
          "133:     6842U, // LDHU_d6_mr",
          "134:     5568U, // LDH_d5_mr",
          "135:     6592U, // LDH_d6_mr",
          "136:     14131U, // LDNDW_d8_mp",
          "137:     5959U, // LDNW_d5_mr",
          "138:     5934U, // LDW_d5_mr",
          "139:     6958U, // LDW_d6_mr",
          "140:     85404U, // LMBD_l1_irr",
          "141:     85404U, // LMBD_l1_rrr_x2",
          "142:     85145U, // MAX2_l1_rrr_x2",
          "143:     85307U, // MAXU4_l1_rrr_x2",
          "144:     85059U, // MIN2_l1_rrr_x2",
          "145:     85266U, // MINU4_l1_rrr_x2",
          "146:     216224U, // MPY2_m1_rrp",
          "147:     85566U, // MPYHIR_m1_rrr",
          "148:     216544U, // MPYHI_m1_rrp",
          "149:     85720U, // MPYHLU_m4_rrr",
          "150:     85516U, // MPYHL_m4_rrr",
          "151:     85728U, // MPYHSLU_m4_rrr",
          "152:     85743U, // MPYHSU_m4_rrr",
          "153:     85613U, // MPYHULS_m4_rrr",
          "154:     85628U, // MPYHUS_m4_rrr",
          "155:     85713U, // MPYHU_m4_rrr",
          "156:     85466U, // MPYH_m4_rrr",
          "157:     85696U, // MPYLHU_m4_rrr",
          "158:     85453U, // MPYLH_m4_rrr",
          "159:     85574U, // MPYLIR_m1_rrr",
          "160:     216551U, // MPYLI_m1_rrp",
          "161:     85704U, // MPYLSHU_m4_rrr",
          "162:     85604U, // MPYLUHS_m4_rrr",
          "163:     216362U, // MPYSU4_m1_rrp",
          "164:     85751U, // MPYSU_m4_irr",
          "165:     85751U, // MPYSU_m4_rrr",
          "166:     216386U, // MPYU4_m1_rrp",
          "167:     85636U, // MPYUS_m4_rrr",
          "168:     85780U, // MPYU_m4_rrr",
          "169:     85849U, // MPY_m4_irr",
          "170:     85849U, // MPY_m4_rrr",
          "171:     1424U, // MVC_s1_rr",
          "172:     1424U, // MVC_s1_rr2",
          "173:     1453U, // MVD_m2_rr",
          "174:     1477U, // MVKLH_s12_ir",
          "175:     1524U, // MVKL_s12_ir",
          "176:     1524U, // MVK_d1_rr",
          "177:     1524U, // MVK_l2_ir",
          "178:     53249U, // NOP_n",
          "179:     2592U, // NORM_l1_pr",
          "180:     1568U, // NORM_l1_rr",
          "181:     85588U, // OR_d2_rir",
          "182:     85588U, // OR_d2_rrr",
          "183:     85588U, // OR_l1_irr",
          "184:     85588U, // OR_l1_rrr_x2",
          "185:     85588U, // OR_s1_irr",
          "186:     85588U, // OR_s1_rrr",
          "187:     85043U, // PACK2_l1_rrr_x2",
          "188:     85043U, // PACK2_s4_rrr",
          "189:     85025U, // PACKH2_l1_rrr_x2",
          "190:     85025U, // PACKH2_s1_rrr",
          "191:     85184U, // PACKH4_l1_rrr_x2",
          "192:     85050U, // PACKHL2_l1_rrr_x2",
          "193:     85050U, // PACKHL2_s1_rrr",
          "194:     85192U, // PACKL4_l1_rrr_x2",
          "195:     85033U, // PACKLH2_l1_rrr_x2",
          "196:     85033U, // PACKLH2_s1_rrr",
          "197:     91667U, // ROTL_m1_rir",
          "198:     91667U, // ROTL_m1_rrr",
          "199:     85005U, // SADD2_s4_rrr",
          "200:     85224U, // SADDU4_s4_rrr",
          "201:     85100U, // SADDUS2_s4_rrr",
          "202:     232866U, // SADD_l1_ipp",
          "203:     85410U, // SADD_l1_irr",
          "204:     232866U, // SADD_l1_rpp",
          "205:     85410U, // SADD_l1_rrr_x2",
          "206:     85410U, // SADD_s1_rrr",
          "207:     2699U, // SAT_l1_pr",
          "208:     353936U, // SET_s15_riir",
          "209:     91792U, // SET_s1_rrr",
          "210:     1535U, // SHFL_m2_rr",
          "211:     85347U, // SHLMB_l1_rrr_x2",
          "212:     85347U, // SHLMB_s4_rrr",
          "213:     223750U, // SHL_s1_pip",
          "214:     223750U, // SHL_s1_prp",
          "215:     222726U, // SHL_s1_rip",
          "216:     91654U, // SHL_s1_rir",
          "217:     222726U, // SHL_s1_rrp",
          "218:     91654U, // SHL_s1_rrr",
          "219:     91232U, // SHR2_s1_rir",
          "220:     91232U, // SHR2_s4_rrr",
          "221:     85354U, // SHRMB_l1_rrr_x2",
          "222:     85354U, // SHRMB_s4_rrr",
          "223:     91261U, // SHRU2_s1_rir",
          "224:     91261U, // SHRU2_s4_rrr",
          "225:     223977U, // SHRU_s1_pip",
          "226:     223977U, // SHRU_s1_prp",
          "227:     91881U, // SHRU_s1_rir",
          "228:     91881U, // SHRU_s1_rrr",
          "229:     223801U, // SHR_s1_pip",
          "230:     223801U, // SHR_s1_prp",
          "231:     91705U, // SHR_s1_rir",
          "232:     91705U, // SHR_s1_rrr",
          "233:     216223U, // SMPY2_m1_rrp",
          "234:     85515U, // SMPYHL_m4_rrr",
          "235:     85465U, // SMPYH_m4_rrr",
          "236:     85452U, // SMPYLH_m4_rrr",
          "237:     85848U, // SMPY_m4_rrr",
          "238:     85042U, // SPACK2_s4_rrr",
          "239:     85248U, // SPACKU4_s4_rrr",
          "240:     91653U, // SSHL_s1_rir",
          "241:     91653U, // SSHL_s1_rrr",
          "242:     85529U, // SSHVL_m1_rrr",
          "243:     85592U, // SSHVR_m1_rrr",
          "244:     232822U, // SSUB_l1_ipp",
          "245:     85366U, // SSUB_l1_irr",
          "246:     85366U, // SSUB_l1_rrr_x1",
          "247:     85366U, // SSUB_l1_rrr_x2",
          "248:     438641U, // STB_d5_rm",
          "249:     504177U, // STB_d6_rm",
          "250:     8001U, // STDW_d7_pm",
          "251:     438740U, // STH_d5_rm",
          "252:     504276U, // STH_d6_rm",
          "253:     7994U, // STNDW_d8_pm",
          "254:     439117U, // STNW_d5_rm",
          "255:     439123U, // STW_d5_rm",
          "256:     504659U, // STW_d6_rm",
          "257:     84999U, // SUB2_d2_rrr",
          "258:     84999U, // SUB2_l1_rrr_x2",
          "259:     84999U, // SUB2_s1_rrr",
          "260:     85158U, // SUB4_l1_rrr_x2",
          "261:     85215U, // SUBABS4_l1_rrr_x2",
          "262:     91472U, // SUBAB_d1_rir",
          "263:     91472U, // SUBAB_d1_rrr",
          "264:     91472U, // SUBAH_d1_rir",
          "265:     91570U, // SUBAH_d1_rrr",
          "266:     91472U, // SUBAW_d1_rir",
          "267:     91930U, // SUBAW_d1_rrr",
          "268:     85372U, // SUBC_l1_rrr_x2",
          "269:     216750U, // SUBU_l1_rrp_x1",
          "270:     216750U, // SUBU_l1_rrp_x2",
          "271:     91511U, // SUB_d1_rir",
          "272:     91511U, // SUB_d1_rrr",
          "273:     85367U, // SUB_d2_rrr",
          "274:     232823U, // SUB_l1_ipp",
          "275:     85367U, // SUB_l1_irr",
          "276:     216439U, // SUB_l1_rrp_x1",
          "277:     216439U, // SUB_l1_rrp_x2",
          "278:     85367U, // SUB_l1_rrr_x1",
          "279:     85367U, // SUB_l1_rrr_x2",
          "280:     85367U, // SUB_s1_irr",
          "281:     85367U, // SUB_s1_rrr",
          "282:     91511U, // SUB_s4_rrr",
          "283:     1232U, // SWAP4_l2_rr",
          "284:     1271U, // UNPKHU4_l2_rr",
          "285:     1271U, // UNPKHU4_s14_rr",
          "286:     1289U, // UNPKLU4_l2_rr",
          "287:     1289U, // UNPKLU4_s14_rr",
          "288:     85587U, // XOR_d2_rir",
          "289:     85587U, // XOR_d2_rrr",
          "290:     85587U, // XOR_l1_irr",
          "291:     85587U, // XOR_l1_rrr_x2",
          "292:     85587U, // XOR_s1_irr",
          "293:     85587U, // XOR_s1_rrr",
          "294:     1044U, // XPND2_m2_rr",
          "295:     1209U, // XPND4_m2_rr",
          "296:     0U",
          "297:   };",
          "299:   static char AsmStrs[] = {",
          "431:   };",
          "434:   uint32_t Bits = OpInfo[MCInst_getOpcode(MI)];",
          "436: #ifndef CAPSTONE_DIET",
          "437:   SStream_concat0(O, AsmStrs+(Bits & 1023)-1);",
          "438: #endif",
          "442:   switch ((Bits >> 10) & 7) {",
          "443:   default:",
          "444:   case 0:",
          "446:     return;",
          "447:     break;",
          "448:   case 1:",
          "450:     printOperand(MI, 1, O);",
          "451:     SStream_concat0(O, \", \");",
          "452:     break;",
          "453:   case 2:",
          "455:     printRegPair(MI, 1, O);",
          "456:     SStream_concat0(O, \", \");",
          "457:     break;",
          "458:   case 3:",
          "460:     printOperand(MI, 2, O);",
          "461:     SStream_concat0(O, \", \");",
          "462:     break;",
          "463:   case 4:",
          "465:     printOperand(MI, 0, O);",
          "466:     break;",
          "467:   case 5:",
          "469:     printMemOperand(MI, 1, O);",
          "470:     SStream_concat0(O, \", \");",
          "471:     break;",
          "472:   case 6:",
          "474:     printMemOperand2(MI, 1, O);",
          "475:     SStream_concat0(O, \", \");",
          "476:     printOperand(MI, 0, O);",
          "477:     return;",
          "478:     break;",
          "479:   case 7:",
          "481:     printRegPair(MI, 0, O);",
          "482:     SStream_concat0(O, \", \");",
          "483:     printMemOperand(MI, 1, O);",
          "484:     return;",
          "485:     break;",
          "486:   }",
          "490:   switch ((Bits >> 13) & 7) {",
          "491:   default:",
          "492:   case 0:",
          "494:     printOperand(MI, 0, O);",
          "495:     break;",
          "496:   case 1:",
          "498:     printRegPair(MI, 0, O);",
          "499:     return;",
          "500:     break;",
          "501:   case 2:",
          "503:     printOperand(MI, 1, O);",
          "504:     SStream_concat0(O, \", \");",
          "505:     break;",
          "506:   case 3:",
          "508:     printOperand(MI, 2, O);",
          "509:     SStream_concat0(O, \", \");",
          "510:     break;",
          "511:   case 4:",
          "513:     printRegPair(MI, 1, O);",
          "514:     SStream_concat0(O, \", \");",
          "515:     break;",
          "516:   case 5:",
          "518:     SStream_concat0(O, \", \");",
          "519:     break;",
          "520:   case 6:",
          "522:     return;",
          "523:     break;",
          "524:   }",
          "528:   switch ((Bits >> 16) & 7) {",
          "529:   default:",
          "530:   case 0:",
          "532:     return;",
          "533:     break;",
          "534:   case 1:",
          "536:     printOperand(MI, 0, O);",
          "537:     return;",
          "538:     break;",
          "539:   case 2:",
          "541:     SStream_concat0(O, \", \");",
          "542:     printOperand(MI, 2, O);",
          "543:     return;",
          "544:     break;",
          "545:   case 3:",
          "547:     printRegPair(MI, 0, O);",
          "548:     return;",
          "549:     break;",
          "550:   case 4:",
          "552:     printOperand(MI, 1, O);",
          "553:     return;",
          "554:     break;",
          "555:   case 5:",
          "557:     printOperand(MI, 3, O);",
          "558:     SStream_concat0(O, \", \");",
          "559:     printOperand(MI, 0, O);",
          "560:     return;",
          "561:     break;",
          "562:   case 6:",
          "564:     printMemOperand(MI, 1, O);",
          "565:     return;",
          "566:     break;",
          "567:   case 7:",
          "569:     printMemOperand2(MI, 1, O);",
          "570:     return;",
          "571:     break;",
          "572:   }",
          "574: }",
          "580: static char *getRegisterName(unsigned RegNo) {",
          "581: #ifndef CAPSTONE_DIET",
          "582:   static char AsmStrs[] = {",
          "669:   };",
          "671:   static const uint16_t RegAsmOffset[] = {",
          "672:     310, 319, 298, 268, 290, 303, 241, 247, 294, 299, 314, 254, 277, 323,",
          "673:     285, 331, 281, 336, 273, 253, 327, 258, 263, 332, 24, 54, 81, 103,",
          "674:     125, 147, 169, 191, 213, 235, 0, 30, 65, 87, 109, 131, 153, 175,",
          "675:     197, 219, 8, 38, 73, 95, 117, 139, 161, 183, 205, 227, 16, 46,",
          "676:     27, 57, 84, 106, 128, 150, 172, 194, 216, 238, 4, 34, 69, 91,",
          "677:     113, 135, 157, 179, 201, 223, 12, 42, 77, 99, 121, 143, 165, 187,",
          "678:     209, 231, 20, 50, 60,",
          "679:   };",
          "681:   return AsmStrs+RegAsmOffset[RegNo-1];",
          "682: #else",
          "683:   return NULL;",
          "684: #endif",
          "685: }",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc||arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc": [
          "File: arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc -> arch/TMS320C64x/TMS320C64xGenDisassemblerTables.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: |*                                                                            *|",
          "3: |* * TMS320C64x Disassembler                                                  *|",
          "4: |*                                                                            *|",
          "5: |* Automatically generated file, do not edit!                                 *|",
          "6: |*                                                                            *|",
          "9: #include \"../../MCInst.h\"",
          "10: #include \"../../LEB128.h\"",
          "13: #define FieldFromInstruction(fname, InsnType) \\",
          "14: static InsnType fname(InsnType insn, unsigned startBit, \\",
          "15:                                      unsigned numBits) { \\",
          "16:     InsnType fieldMask; \\",
          "17:     if (numBits == sizeof(InsnType)*8) \\",
          "18:       fieldMask = (InsnType)(-1LL); \\",
          "19:     else \\",
          "20:       fieldMask = (((InsnType)1 << numBits) - 1) << startBit; \\",
          "21:     return (insn & fieldMask) >> startBit; \\",
          "22: }",
          "24: static uint8_t DecoderTable32[] = {",
          "606:   0",
          "607: };",
          "609: static bool checkDecoderPredicate(unsigned Idx, uint64_t Bits) {",
          "610:   return true;",
          "611: }",
          "613: #define DecodeToMCInst(fname,fieldname, InsnType) \\",
          "614: static DecodeStatus fname(DecodeStatus S, unsigned Idx, InsnType insn, MCInst *MI, \\",
          "615:                                    uint64_t Address, void *Decoder) { \\",
          "616:   InsnType tmp; \\",
          "617:   switch (Idx) { \\",
          "618:   default: \\",
          "619:   case 0: \\",
          "620:     tmp = fieldname(insn, 13, 4); \\",
          "621:     if (DecodeNop(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "622:     tmp = fieldname(insn, 29, 3); \\",
          "623:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "624:     tmp = fieldname(insn, 28, 1); \\",
          "625:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "626:     tmp = fieldname(insn, 1, 1); \\",
          "627:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "628:     tmp = fieldname(insn, 0, 1); \\",
          "629:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "630:     return S; \\",
          "631:   case 1: \\",
          "632:     tmp = fieldname(insn, 23, 5); \\",
          "633:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "634:     tmp = fieldname(insn, 18, 5); \\",
          "635:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "636:     tmp = fieldname(insn, 13, 5); \\",
          "637:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "638:     tmp = fieldname(insn, 12, 1); \\",
          "639:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "640:     tmp = fieldname(insn, 29, 3); \\",
          "641:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "642:     tmp = fieldname(insn, 28, 1); \\",
          "643:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "644:     tmp = fieldname(insn, 1, 1); \\",
          "645:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "646:     tmp = fieldname(insn, 0, 1); \\",
          "647:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "648:     return S; \\",
          "649:   case 2: \\",
          "650:     tmp = fieldname(insn, 23, 5); \\",
          "651:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "652:     tmp = fieldname(insn, 18, 5); \\",
          "653:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "654:     tmp = fieldname(insn, 13, 5); \\",
          "655:     if (DecodeScst5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "656:     tmp = fieldname(insn, 12, 1); \\",
          "657:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "658:     tmp = fieldname(insn, 29, 3); \\",
          "659:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "660:     tmp = fieldname(insn, 28, 1); \\",
          "661:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "662:     tmp = fieldname(insn, 1, 1); \\",
          "663:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "664:     tmp = fieldname(insn, 0, 1); \\",
          "665:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "666:     return S; \\",
          "667:   case 3: \\",
          "668:     tmp = fieldname(insn, 23, 5); \\",
          "669:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "670:     tmp = 0; \\",
          "671:     tmp |= fieldname(insn, 7, 1) << 0; \\",
          "672:     tmp |= fieldname(insn, 9, 14) << 1; \\",
          "673:     if (DecodeMemOperand(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "674:     tmp = fieldname(insn, 29, 3); \\",
          "675:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "676:     tmp = fieldname(insn, 28, 1); \\",
          "677:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "678:     tmp = fieldname(insn, 1, 1); \\",
          "679:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "680:     tmp = fieldname(insn, 0, 1); \\",
          "681:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "682:     return S; \\",
          "683:   case 4: \\",
          "684:     tmp = fieldname(insn, 23, 5); \\",
          "685:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "686:     tmp = fieldname(insn, 18, 5); \\",
          "687:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "688:     tmp = fieldname(insn, 13, 5); \\",
          "689:     MCOperand_CreateImm0(MI, tmp); \\",
          "690:     tmp = fieldname(insn, 8, 5); \\",
          "691:     MCOperand_CreateImm0(MI, tmp); \\",
          "692:     tmp = fieldname(insn, 29, 3); \\",
          "693:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "694:     tmp = fieldname(insn, 28, 1); \\",
          "695:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "696:     tmp = fieldname(insn, 1, 1); \\",
          "697:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "698:     tmp = fieldname(insn, 0, 1); \\",
          "699:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "700:     return S; \\",
          "701:   case 5: \\",
          "702:     tmp = fieldname(insn, 23, 5); \\",
          "703:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "704:     tmp = fieldname(insn, 7, 16); \\",
          "705:     if (DecodeMemOperand2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "706:     tmp = fieldname(insn, 29, 3); \\",
          "707:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "708:     tmp = fieldname(insn, 28, 1); \\",
          "709:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "710:     tmp = fieldname(insn, 1, 1); \\",
          "711:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "712:     tmp = fieldname(insn, 0, 1); \\",
          "713:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "714:     return S; \\",
          "715:   case 6: \\",
          "716:     tmp = fieldname(insn, 7, 21); \\",
          "717:     if (DecodePCRelScst21(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "718:     tmp = fieldname(insn, 29, 3); \\",
          "719:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "720:     tmp = fieldname(insn, 28, 1); \\",
          "721:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "722:     tmp = fieldname(insn, 1, 1); \\",
          "723:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "724:     tmp = fieldname(insn, 0, 1); \\",
          "725:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "726:     return S; \\",
          "727:   case 7: \\",
          "728:     tmp = fieldname(insn, 23, 5); \\",
          "729:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "730:     tmp = fieldname(insn, 18, 5); \\",
          "731:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "732:     tmp = fieldname(insn, 13, 5); \\",
          "733:     if (DecodeScst5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "734:     tmp = fieldname(insn, 12, 1); \\",
          "735:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "736:     tmp = fieldname(insn, 29, 3); \\",
          "737:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "738:     tmp = fieldname(insn, 28, 1); \\",
          "739:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "740:     tmp = fieldname(insn, 1, 1); \\",
          "741:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "742:     tmp = fieldname(insn, 0, 1); \\",
          "743:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "744:     return S; \\",
          "745:   case 8: \\",
          "746:     tmp = fieldname(insn, 23, 5); \\",
          "747:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "748:     tmp = fieldname(insn, 18, 5); \\",
          "749:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "750:     tmp = fieldname(insn, 12, 1); \\",
          "751:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "752:     tmp = fieldname(insn, 29, 3); \\",
          "753:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "754:     tmp = fieldname(insn, 28, 1); \\",
          "755:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "756:     tmp = fieldname(insn, 1, 1); \\",
          "757:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "758:     tmp = fieldname(insn, 0, 1); \\",
          "759:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "760:     return S; \\",
          "761:   case 9: \\",
          "762:     tmp = fieldname(insn, 23, 5); \\",
          "763:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "764:     tmp = fieldname(insn, 18, 5); \\",
          "765:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "766:     tmp = fieldname(insn, 12, 1); \\",
          "767:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "768:     tmp = fieldname(insn, 29, 3); \\",
          "769:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "770:     tmp = fieldname(insn, 28, 1); \\",
          "771:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "772:     tmp = fieldname(insn, 1, 1); \\",
          "773:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "774:     tmp = fieldname(insn, 0, 1); \\",
          "775:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "776:     return S; \\",
          "777:   case 10: \\",
          "778:     tmp = fieldname(insn, 23, 5); \\",
          "779:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "780:     tmp = fieldname(insn, 18, 5); \\",
          "781:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "782:     tmp = fieldname(insn, 13, 5); \\",
          "783:     if (DecodeScst5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "784:     tmp = fieldname(insn, 12, 1); \\",
          "785:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "786:     tmp = fieldname(insn, 29, 3); \\",
          "787:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "788:     tmp = fieldname(insn, 28, 1); \\",
          "789:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "790:     tmp = fieldname(insn, 1, 1); \\",
          "791:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "792:     tmp = fieldname(insn, 0, 1); \\",
          "793:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "794:     return S; \\",
          "795:   case 11: \\",
          "796:     tmp = fieldname(insn, 23, 5); \\",
          "797:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "798:     tmp = fieldname(insn, 18, 5); \\",
          "799:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "800:     tmp = fieldname(insn, 13, 5); \\",
          "801:     MCOperand_CreateImm0(MI, tmp); \\",
          "802:     tmp = fieldname(insn, 12, 1); \\",
          "803:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "804:     tmp = fieldname(insn, 29, 3); \\",
          "805:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "806:     tmp = fieldname(insn, 28, 1); \\",
          "807:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "808:     tmp = fieldname(insn, 1, 1); \\",
          "809:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "810:     tmp = fieldname(insn, 0, 1); \\",
          "811:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "812:     return S; \\",
          "813:   case 12: \\",
          "814:     tmp = fieldname(insn, 23, 5); \\",
          "815:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "816:     tmp = fieldname(insn, 18, 5); \\",
          "817:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "818:     tmp = fieldname(insn, 12, 1); \\",
          "819:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "820:     tmp = fieldname(insn, 29, 3); \\",
          "821:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "822:     tmp = fieldname(insn, 28, 1); \\",
          "823:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "824:     tmp = fieldname(insn, 1, 1); \\",
          "825:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "826:     tmp = fieldname(insn, 0, 1); \\",
          "827:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "828:     return S; \\",
          "829:   case 13: \\",
          "830:     tmp = fieldname(insn, 23, 5); \\",
          "831:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "832:     tmp = fieldname(insn, 13, 10); \\",
          "833:     if (DecodePCRelScst10(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "834:     tmp = fieldname(insn, 29, 3); \\",
          "835:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "836:     tmp = fieldname(insn, 28, 1); \\",
          "837:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "838:     tmp = fieldname(insn, 1, 1); \\",
          "839:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "840:     tmp = fieldname(insn, 0, 1); \\",
          "841:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "842:     return S; \\",
          "843:   case 14: \\",
          "844:     tmp = fieldname(insn, 16, 12); \\",
          "845:     if (DecodePCRelScst12(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "846:     tmp = fieldname(insn, 13, 3); \\",
          "847:     MCOperand_CreateImm0(MI, tmp); \\",
          "848:     tmp = fieldname(insn, 29, 3); \\",
          "849:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "850:     tmp = fieldname(insn, 28, 1); \\",
          "851:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "852:     tmp = fieldname(insn, 1, 1); \\",
          "853:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "854:     tmp = fieldname(insn, 0, 1); \\",
          "855:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "856:     return S; \\",
          "857:   case 15: \\",
          "858:     tmp = fieldname(insn, 23, 5); \\",
          "859:     if (DecodeControlRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "860:     tmp = fieldname(insn, 18, 5); \\",
          "861:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "862:     tmp = fieldname(insn, 12, 1); \\",
          "863:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "864:     tmp = fieldname(insn, 29, 3); \\",
          "865:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "866:     tmp = fieldname(insn, 28, 1); \\",
          "867:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "868:     tmp = fieldname(insn, 1, 1); \\",
          "869:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "870:     tmp = fieldname(insn, 0, 1); \\",
          "871:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "872:     return S; \\",
          "873:   case 16: \\",
          "874:     tmp = fieldname(insn, 23, 5); \\",
          "875:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "876:     tmp = fieldname(insn, 18, 5); \\",
          "877:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "878:     tmp = fieldname(insn, 13, 5); \\",
          "879:     MCOperand_CreateImm0(MI, tmp); \\",
          "880:     tmp = fieldname(insn, 12, 1); \\",
          "881:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "882:     tmp = fieldname(insn, 29, 3); \\",
          "883:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "884:     tmp = fieldname(insn, 28, 1); \\",
          "885:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "886:     tmp = fieldname(insn, 1, 1); \\",
          "887:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "888:     tmp = fieldname(insn, 0, 1); \\",
          "889:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "890:     return S; \\",
          "891:   case 17: \\",
          "892:     tmp = fieldname(insn, 23, 5); \\",
          "893:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "894:     tmp = fieldname(insn, 18, 5); \\",
          "895:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "896:     tmp = fieldname(insn, 13, 5); \\",
          "897:     MCOperand_CreateImm0(MI, tmp); \\",
          "898:     tmp = fieldname(insn, 12, 1); \\",
          "899:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "900:     tmp = fieldname(insn, 29, 3); \\",
          "901:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "902:     tmp = fieldname(insn, 28, 1); \\",
          "903:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "904:     tmp = fieldname(insn, 1, 1); \\",
          "905:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "906:     tmp = fieldname(insn, 0, 1); \\",
          "907:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "908:     return S; \\",
          "909:   case 18: \\",
          "910:     tmp = fieldname(insn, 23, 5); \\",
          "911:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "912:     tmp = fieldname(insn, 18, 5); \\",
          "913:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "914:     tmp = fieldname(insn, 13, 5); \\",
          "915:     MCOperand_CreateImm0(MI, tmp); \\",
          "916:     tmp = fieldname(insn, 12, 1); \\",
          "917:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "918:     tmp = fieldname(insn, 29, 3); \\",
          "919:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "920:     tmp = fieldname(insn, 28, 1); \\",
          "921:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "922:     tmp = fieldname(insn, 1, 1); \\",
          "923:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "924:     tmp = fieldname(insn, 0, 1); \\",
          "925:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "926:     return S; \\",
          "927:   case 19: \\",
          "928:     tmp = fieldname(insn, 23, 5); \\",
          "929:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "930:     tmp = fieldname(insn, 18, 5); \\",
          "931:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "932:     tmp = fieldname(insn, 13, 5); \\",
          "933:     MCOperand_CreateImm0(MI, tmp); \\",
          "934:     tmp = fieldname(insn, 12, 1); \\",
          "935:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "936:     tmp = fieldname(insn, 29, 3); \\",
          "937:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "938:     tmp = fieldname(insn, 28, 1); \\",
          "939:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "940:     tmp = fieldname(insn, 1, 1); \\",
          "941:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "942:     tmp = fieldname(insn, 0, 1); \\",
          "943:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "944:     return S; \\",
          "945:   case 20: \\",
          "946:     tmp = fieldname(insn, 23, 5); \\",
          "947:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "948:     tmp = fieldname(insn, 18, 5); \\",
          "949:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "950:     tmp = fieldname(insn, 13, 5); \\",
          "951:     MCOperand_CreateImm0(MI, tmp); \\",
          "952:     tmp = fieldname(insn, 12, 1); \\",
          "953:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "954:     tmp = fieldname(insn, 29, 3); \\",
          "955:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "956:     tmp = fieldname(insn, 28, 1); \\",
          "957:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "958:     tmp = fieldname(insn, 1, 1); \\",
          "959:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "960:     tmp = fieldname(insn, 0, 1); \\",
          "961:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "962:     return S; \\",
          "963:   case 21: \\",
          "964:     tmp = fieldname(insn, 23, 5); \\",
          "965:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "966:     tmp = fieldname(insn, 18, 5); \\",
          "967:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "968:     tmp = fieldname(insn, 12, 1); \\",
          "969:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "970:     tmp = fieldname(insn, 29, 3); \\",
          "971:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "972:     tmp = fieldname(insn, 28, 1); \\",
          "973:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "974:     tmp = fieldname(insn, 1, 1); \\",
          "975:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "976:     tmp = fieldname(insn, 0, 1); \\",
          "977:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "978:     return S; \\",
          "979:   case 22: \\",
          "980:     tmp = fieldname(insn, 24, 4); \\",
          "981:     if (DecodeRegPair4(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "982:     tmp = 0; \\",
          "983:     tmp |= fieldname(insn, 7, 1) << 0; \\",
          "984:     tmp |= fieldname(insn, 9, 15) << 1; \\",
          "985:     if (DecodeMemOperandSc(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "986:     tmp = fieldname(insn, 29, 3); \\",
          "987:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "988:     tmp = fieldname(insn, 28, 1); \\",
          "989:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "990:     tmp = fieldname(insn, 1, 1); \\",
          "991:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "992:     tmp = fieldname(insn, 0, 1); \\",
          "993:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "994:     return S; \\",
          "995:   case 23: \\",
          "996:     tmp = fieldname(insn, 23, 5); \\",
          "997:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "998:     tmp = fieldname(insn, 7, 16); \\",
          "999:     if (DecodeScst16(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1000:     tmp = fieldname(insn, 29, 3); \\",
          "1001:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1002:     tmp = fieldname(insn, 28, 1); \\",
          "1003:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1004:     tmp = fieldname(insn, 1, 1); \\",
          "1005:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1006:     tmp = fieldname(insn, 0, 1); \\",
          "1007:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1008:     return S; \\",
          "1009:   case 24: \\",
          "1010:     tmp = fieldname(insn, 23, 5); \\",
          "1011:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1012:     tmp = fieldname(insn, 18, 5); \\",
          "1013:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1014:     tmp = fieldname(insn, 13, 5); \\",
          "1015:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1016:     tmp = fieldname(insn, 12, 1); \\",
          "1017:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1018:     tmp = fieldname(insn, 29, 3); \\",
          "1019:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1020:     tmp = fieldname(insn, 28, 1); \\",
          "1021:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1022:     tmp = fieldname(insn, 1, 1); \\",
          "1023:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1024:     tmp = fieldname(insn, 0, 1); \\",
          "1025:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1026:     return S; \\",
          "1027:   case 25: \\",
          "1028:     tmp = fieldname(insn, 23, 5); \\",
          "1029:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1030:     tmp = fieldname(insn, 18, 5); \\",
          "1031:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1032:     tmp = fieldname(insn, 13, 5); \\",
          "1033:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1034:     tmp = fieldname(insn, 12, 1); \\",
          "1035:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1036:     tmp = fieldname(insn, 29, 3); \\",
          "1037:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1038:     tmp = fieldname(insn, 28, 1); \\",
          "1039:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1040:     tmp = fieldname(insn, 1, 1); \\",
          "1041:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1042:     tmp = fieldname(insn, 0, 1); \\",
          "1043:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1044:     return S; \\",
          "1045:   case 26: \\",
          "1046:     tmp = fieldname(insn, 23, 5); \\",
          "1047:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1048:     tmp = fieldname(insn, 18, 5); \\",
          "1049:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1050:     tmp = fieldname(insn, 13, 5); \\",
          "1051:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1052:     tmp = fieldname(insn, 12, 1); \\",
          "1053:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1054:     tmp = fieldname(insn, 29, 3); \\",
          "1055:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1056:     tmp = fieldname(insn, 28, 1); \\",
          "1057:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1058:     tmp = fieldname(insn, 1, 1); \\",
          "1059:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1060:     tmp = fieldname(insn, 0, 1); \\",
          "1061:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1062:     return S; \\",
          "1063:   case 27: \\",
          "1064:     tmp = fieldname(insn, 23, 5); \\",
          "1065:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1066:     tmp = fieldname(insn, 13, 5); \\",
          "1067:     if (DecodeScst5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1068:     tmp = fieldname(insn, 29, 3); \\",
          "1069:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1070:     tmp = fieldname(insn, 28, 1); \\",
          "1071:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1072:     tmp = fieldname(insn, 1, 1); \\",
          "1073:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1074:     tmp = fieldname(insn, 0, 1); \\",
          "1075:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1076:     return S; \\",
          "1077:   case 28: \\",
          "1078:     tmp = fieldname(insn, 23, 5); \\",
          "1079:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1080:     tmp = fieldname(insn, 18, 5); \\",
          "1081:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1082:     tmp = fieldname(insn, 13, 5); \\",
          "1083:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1084:     tmp = fieldname(insn, 29, 3); \\",
          "1085:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1086:     tmp = fieldname(insn, 28, 1); \\",
          "1087:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1088:     tmp = fieldname(insn, 1, 1); \\",
          "1089:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1090:     tmp = fieldname(insn, 0, 1); \\",
          "1091:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1092:     return S; \\",
          "1093:   case 29: \\",
          "1094:     tmp = fieldname(insn, 23, 5); \\",
          "1095:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1096:     tmp = fieldname(insn, 18, 5); \\",
          "1097:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1098:     tmp = fieldname(insn, 13, 5); \\",
          "1099:     MCOperand_CreateImm0(MI, tmp); \\",
          "1100:     tmp = fieldname(insn, 29, 3); \\",
          "1101:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1102:     tmp = fieldname(insn, 28, 1); \\",
          "1103:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1104:     tmp = fieldname(insn, 1, 1); \\",
          "1105:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1106:     tmp = fieldname(insn, 0, 1); \\",
          "1107:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1108:     return S; \\",
          "1109:   case 30: \\",
          "1110:     tmp = fieldname(insn, 23, 5); \\",
          "1111:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1112:     tmp = 0; \\",
          "1113:     tmp |= fieldname(insn, 7, 1) << 0; \\",
          "1114:     tmp |= fieldname(insn, 9, 14) << 1; \\",
          "1115:     if (DecodeMemOperand(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1116:     tmp = fieldname(insn, 29, 3); \\",
          "1117:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1118:     tmp = fieldname(insn, 28, 1); \\",
          "1119:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1120:     tmp = fieldname(insn, 1, 1); \\",
          "1121:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1122:     tmp = fieldname(insn, 0, 1); \\",
          "1123:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1124:     return S; \\",
          "1125:   case 31: \\",
          "1126:     tmp = fieldname(insn, 23, 5); \\",
          "1127:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1128:     tmp = fieldname(insn, 18, 5); \\",
          "1129:     if (DecodeScst5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1130:     tmp = fieldname(insn, 12, 1); \\",
          "1131:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1132:     tmp = fieldname(insn, 29, 3); \\",
          "1133:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1134:     tmp = fieldname(insn, 28, 1); \\",
          "1135:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1136:     tmp = fieldname(insn, 1, 1); \\",
          "1137:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1138:     tmp = fieldname(insn, 0, 1); \\",
          "1139:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1140:     return S; \\",
          "1141:   case 32: \\",
          "1142:     tmp = fieldname(insn, 29, 3); \\",
          "1143:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1144:     tmp = fieldname(insn, 28, 1); \\",
          "1145:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1146:     tmp = fieldname(insn, 1, 1); \\",
          "1147:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1148:     tmp = fieldname(insn, 0, 1); \\",
          "1149:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1150:     return S; \\",
          "1151:   case 33: \\",
          "1152:     tmp = fieldname(insn, 23, 5); \\",
          "1153:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1154:     tmp = fieldname(insn, 16, 7); \\",
          "1155:     if (DecodePCRelScst7(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1156:     tmp = fieldname(insn, 13, 3); \\",
          "1157:     MCOperand_CreateImm0(MI, tmp); \\",
          "1158:     tmp = fieldname(insn, 29, 3); \\",
          "1159:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1160:     tmp = fieldname(insn, 28, 1); \\",
          "1161:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1162:     tmp = fieldname(insn, 1, 1); \\",
          "1163:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1164:     tmp = fieldname(insn, 0, 1); \\",
          "1165:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1166:     return S; \\",
          "1167:   case 34: \\",
          "1168:     tmp = fieldname(insn, 18, 5); \\",
          "1169:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1170:     tmp = fieldname(insn, 12, 1); \\",
          "1171:     if (DecodeCrosspathX1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1172:     tmp = fieldname(insn, 29, 3); \\",
          "1173:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1174:     tmp = fieldname(insn, 28, 1); \\",
          "1175:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1176:     tmp = fieldname(insn, 1, 1); \\",
          "1177:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1178:     tmp = fieldname(insn, 0, 1); \\",
          "1179:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1180:     return S; \\",
          "1181:   case 35: \\",
          "1182:     tmp = fieldname(insn, 18, 5); \\",
          "1183:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1184:     tmp = fieldname(insn, 13, 3); \\",
          "1185:     MCOperand_CreateImm0(MI, tmp); \\",
          "1186:     tmp = fieldname(insn, 12, 1); \\",
          "1187:     if (DecodeCrosspathX1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1188:     tmp = fieldname(insn, 29, 3); \\",
          "1189:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1190:     tmp = fieldname(insn, 28, 1); \\",
          "1191:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1192:     tmp = fieldname(insn, 1, 1); \\",
          "1193:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1194:     tmp = fieldname(insn, 0, 1); \\",
          "1195:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1196:     return S; \\",
          "1197:   case 36: \\",
          "1198:     tmp = fieldname(insn, 23, 5); \\",
          "1199:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1200:     tmp = fieldname(insn, 18, 5); \\",
          "1201:     if (DecodeControlRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1202:     tmp = fieldname(insn, 12, 1); \\",
          "1203:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1204:     tmp = fieldname(insn, 29, 3); \\",
          "1205:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1206:     tmp = fieldname(insn, 28, 1); \\",
          "1207:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1208:     tmp = fieldname(insn, 1, 1); \\",
          "1209:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1210:     tmp = fieldname(insn, 0, 1); \\",
          "1211:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1212:     return S; \\",
          "1213:   case 37: \\",
          "1214:     tmp = fieldname(insn, 23, 5); \\",
          "1215:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1216:     tmp = fieldname(insn, 18, 5); \\",
          "1217:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1218:     tmp = fieldname(insn, 13, 5); \\",
          "1219:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1220:     tmp = fieldname(insn, 12, 1); \\",
          "1221:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1222:     tmp = fieldname(insn, 29, 3); \\",
          "1223:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1224:     tmp = fieldname(insn, 28, 1); \\",
          "1225:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1226:     tmp = fieldname(insn, 1, 1); \\",
          "1227:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1228:     tmp = fieldname(insn, 0, 1); \\",
          "1229:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1230:     return S; \\",
          "1231:   case 38: \\",
          "1232:     tmp = fieldname(insn, 23, 5); \\",
          "1233:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1234:     tmp = fieldname(insn, 18, 5); \\",
          "1235:     if (DecodeRegPair5(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1236:     tmp = fieldname(insn, 13, 5); \\",
          "1237:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1238:     tmp = fieldname(insn, 12, 1); \\",
          "1239:     if (DecodeCrosspathX2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1240:     tmp = fieldname(insn, 29, 3); \\",
          "1241:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1242:     tmp = fieldname(insn, 28, 1); \\",
          "1243:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1244:     tmp = fieldname(insn, 1, 1); \\",
          "1245:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1246:     tmp = fieldname(insn, 0, 1); \\",
          "1247:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1248:     return S; \\",
          "1249:   case 39: \\",
          "1250:     tmp = fieldname(insn, 23, 5); \\",
          "1251:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1252:     tmp = fieldname(insn, 18, 5); \\",
          "1253:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1254:     tmp = fieldname(insn, 13, 5); \\",
          "1255:     if (DecodeGPRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1256:     tmp = fieldname(insn, 12, 1); \\",
          "1257:     if (DecodeCrosspathX3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1258:     tmp = fieldname(insn, 29, 3); \\",
          "1259:     if (DecodeCondRegister(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1260:     tmp = fieldname(insn, 28, 1); \\",
          "1261:     if (DecodeCondRegisterZero(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1262:     tmp = fieldname(insn, 1, 1); \\",
          "1263:     if (DecodeSide(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1264:     tmp = fieldname(insn, 0, 1); \\",
          "1265:     if (DecodeParallel(MI, tmp, Address, Decoder) == MCDisassembler_Fail) return MCDisassembler_Fail; \\",
          "1266:     return S; \\",
          "1267:   } \\",
          "1268: }",
          "1270: #define DecodeInstruction(fname, fieldname, decoder, InsnType) \\",
          "1271: static DecodeStatus fname(uint8_t DecodeTable[], MCInst *MI, \\",
          "1272:                                       InsnType insn, uint64_t Address, \\",
          "1273:                                       MCRegisterInfo *MRI, \\",
          "1274:                                       int feature) { \\",
          "1275:   uint64_t Bits = getFeatureBits(feature); \\",
          "1276:   uint8_t *Ptr = DecodeTable; \\",
          "1277:   uint32_t CurFieldValue = 0, ExpectedValue; \\",
          "1278:   DecodeStatus S = MCDisassembler_Success; \\",
          "1279:   unsigned Start, Len, NumToSkip, PIdx, Opc, DecodeIdx; \\",
          "1280:   InsnType Val, FieldValue, PositiveMask, NegativeMask; \\",
          "1281:   bool Pred, Fail; \\",
          "1282:   for (;;) { \\",
          "1283:     switch (*Ptr) { \\",
          "1284:     default: \\",
          "1285:       return MCDisassembler_Fail; \\",
          "1286:     case MCD_OPC_ExtractField: { \\",
          "1287:       Start = *++Ptr; \\",
          "1288:       Len = *++Ptr; \\",
          "1289:       ++Ptr; \\",
          "1290:       CurFieldValue = (uint32_t) fieldname(insn, Start, Len); \\",
          "1291:       break; \\",
          "1292:     } \\",
          "1293:     case MCD_OPC_FilterValue: { \\",
          "1294:       Val = (InsnType) decodeULEB128(++Ptr, &Len); \\",
          "1295:       Ptr += Len; \\",
          "1296:       NumToSkip = *Ptr++; \\",
          "1297:       NumToSkip |= (*Ptr++) << 8; \\",
          "1298:       if (Val != CurFieldValue) \\",
          "1299:         Ptr += NumToSkip; \\",
          "1300:       break; \\",
          "1301:     } \\",
          "1302:     case MCD_OPC_CheckField: { \\",
          "1303:       Start = *++Ptr; \\",
          "1304:       Len = *++Ptr; \\",
          "1305:       FieldValue = fieldname(insn, Start, Len); \\",
          "1306:       ExpectedValue = (uint32_t) decodeULEB128(++Ptr, &Len); \\",
          "1307:       Ptr += Len; \\",
          "1308:       NumToSkip = *Ptr++; \\",
          "1309:       NumToSkip |= (*Ptr++) << 8; \\",
          "1310:       if (ExpectedValue != FieldValue) \\",
          "1311:         Ptr += NumToSkip; \\",
          "1312:       break; \\",
          "1313:     } \\",
          "1314:     case MCD_OPC_CheckPredicate: { \\",
          "1315:       PIdx = (uint32_t) decodeULEB128(++Ptr, &Len); \\",
          "1316:       Ptr += Len; \\",
          "1317:       NumToSkip = *Ptr++; \\",
          "1318:       NumToSkip |= (*Ptr++) << 8; \\",
          "1319:       Pred = checkDecoderPredicate(PIdx, Bits); \\",
          "1320:       if (!Pred) \\",
          "1321:         Ptr += NumToSkip; \\",
          "1322:       (void)Pred; \\",
          "1323:       break; \\",
          "1324:     } \\",
          "1325:     case MCD_OPC_Decode: { \\",
          "1326:       Opc = (unsigned) decodeULEB128(++Ptr, &Len); \\",
          "1327:       Ptr += Len; \\",
          "1328:       DecodeIdx = (unsigned) decodeULEB128(Ptr, &Len); \\",
          "1329:       Ptr += Len; \\",
          "1330:       MCInst_setOpcode(MI, Opc); \\",
          "1331:       return decoder(S, DecodeIdx, insn, MI, Address, MRI); \\",
          "1332:     } \\",
          "1333:     case MCD_OPC_SoftFail: { \\",
          "1334:       PositiveMask = (InsnType) decodeULEB128(++Ptr, &Len); \\",
          "1335:       Ptr += Len; \\",
          "1336:       NegativeMask = (InsnType) decodeULEB128(Ptr, &Len); \\",
          "1337:       Ptr += Len; \\",
          "1338:       Fail = (insn & PositiveMask) || (~insn & NegativeMask); \\",
          "1339:       if (Fail) \\",
          "1340:         S = MCDisassembler_SoftFail; \\",
          "1341:       break; \\",
          "1342:     } \\",
          "1343:     case MCD_OPC_Fail: { \\",
          "1344:       return MCDisassembler_Fail; \\",
          "1345:     } \\",
          "1346:     } \\",
          "1347:   } \\",
          "1348: }",
          "1350: FieldFromInstruction(fieldFromInstruction_4, uint32_t)",
          "1351: DecodeToMCInst(decodeToMCInst_4, fieldFromInstruction_4, uint32_t)",
          "1352: DecodeInstruction(decodeInstruction_4, fieldFromInstruction_4, decodeToMCInst_4, uint32_t)",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xGenInstrInfo.inc||arch/TMS320C64x/TMS320C64xGenInstrInfo.inc": [
          "File: arch/TMS320C64x/TMS320C64xGenInstrInfo.inc -> arch/TMS320C64x/TMS320C64xGenInstrInfo.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: |*                                                                            *|",
          "3: |*Target Instruction Enum Values                                              *|",
          "4: |*                                                                            *|",
          "5: |* Automatically generated file, do not edit!                                 *|",
          "6: |*                                                                            *|",
          "10: #ifdef GET_INSTRINFO_ENUM",
          "11: #undef GET_INSTRINFO_ENUM",
          "13: enum {",
          "14:   TMS320C64x_PHI = 0,",
          "15:   TMS320C64x_INLINEASM = 1,",
          "16:   TMS320C64x_CFI_INSTRUCTION = 2,",
          "17:   TMS320C64x_EH_LABEL = 3,",
          "18:   TMS320C64x_GC_LABEL = 4,",
          "19:   TMS320C64x_KILL = 5,",
          "20:   TMS320C64x_EXTRACT_SUBREG = 6,",
          "21:   TMS320C64x_INSERT_SUBREG = 7,",
          "22:   TMS320C64x_IMPLICIT_DEF = 8,",
          "23:   TMS320C64x_SUBREG_TO_REG = 9,",
          "24:   TMS320C64x_COPY_TO_REGCLASS = 10,",
          "25:   TMS320C64x_DBG_VALUE = 11,",
          "26:   TMS320C64x_REG_SEQUENCE = 12,",
          "27:   TMS320C64x_COPY = 13,",
          "28:   TMS320C64x_BUNDLE = 14,",
          "29:   TMS320C64x_LIFETIME_START = 15,",
          "30:   TMS320C64x_LIFETIME_END = 16,",
          "31:   TMS320C64x_STACKMAP = 17,",
          "32:   TMS320C64x_PATCHPOINT = 18,",
          "33:   TMS320C64x_LOAD_STACK_GUARD = 19,",
          "34:   TMS320C64x_STATEPOINT = 20,",
          "35:   TMS320C64x_FRAME_ALLOC = 21,",
          "36:   TMS320C64x_ABS2_l2_rr = 22,",
          "37:   TMS320C64x_ABS_l1_pp = 23,",
          "38:   TMS320C64x_ABS_l1_rr = 24,",
          "39:   TMS320C64x_ADD2_d2_rrr = 25,",
          "40:   TMS320C64x_ADD2_l1_rrr_x2 = 26,",
          "41:   TMS320C64x_ADD2_s1_rrr = 27,",
          "42:   TMS320C64x_ADD4_l1_rrr_x2 = 28,",
          "43:   TMS320C64x_ADDAB_d1_rir = 29,",
          "44:   TMS320C64x_ADDAB_d1_rrr = 30,",
          "45:   TMS320C64x_ADDAD_d1_rir = 31,",
          "46:   TMS320C64x_ADDAD_d1_rrr = 32,",
          "47:   TMS320C64x_ADDAH_d1_rir = 33,",
          "48:   TMS320C64x_ADDAH_d1_rrr = 34,",
          "49:   TMS320C64x_ADDAW_d1_rir = 35,",
          "50:   TMS320C64x_ADDAW_d1_rrr = 36,",
          "51:   TMS320C64x_ADDKPC_s3_iir = 37,",
          "52:   TMS320C64x_ADDK_s2_ir = 38,",
          "53:   TMS320C64x_ADDU_l1_rpp = 39,",
          "54:   TMS320C64x_ADDU_l1_rrp_x2 = 40,",
          "55:   TMS320C64x_ADD_d1_rir = 41,",
          "56:   TMS320C64x_ADD_d1_rrr = 42,",
          "57:   TMS320C64x_ADD_d2_rir = 43,",
          "58:   TMS320C64x_ADD_d2_rrr = 44,",
          "59:   TMS320C64x_ADD_l1_ipp = 45,",
          "60:   TMS320C64x_ADD_l1_irr = 46,",
          "61:   TMS320C64x_ADD_l1_rpp = 47,",
          "62:   TMS320C64x_ADD_l1_rrp_x2 = 48,",
          "63:   TMS320C64x_ADD_l1_rrr_x2 = 49,",
          "64:   TMS320C64x_ADD_s1_irr = 50,",
          "65:   TMS320C64x_ADD_s1_rrr = 51,",
          "66:   TMS320C64x_ANDN_d2_rrr = 52,",
          "67:   TMS320C64x_ANDN_l1_rrr_x2 = 53,",
          "68:   TMS320C64x_ANDN_s4_rrr = 54,",
          "69:   TMS320C64x_AND_d2_rir = 55,",
          "70:   TMS320C64x_AND_d2_rrr = 56,",
          "71:   TMS320C64x_AND_l1_irr = 57,",
          "72:   TMS320C64x_AND_l1_rrr_x2 = 58,",
          "73:   TMS320C64x_AND_s1_irr = 59,",
          "74:   TMS320C64x_AND_s1_rrr = 60,",
          "75:   TMS320C64x_AVG2_m1_rrr = 61,",
          "76:   TMS320C64x_AVGU4_m1_rrr = 62,",
          "77:   TMS320C64x_BDEC_s8_ir = 63,",
          "78:   TMS320C64x_BITC4_m2_rr = 64,",
          "79:   TMS320C64x_BNOP_s10_ri = 65,",
          "80:   TMS320C64x_BNOP_s9_ii = 66,",
          "81:   TMS320C64x_BPOS_s8_ir = 67,",
          "82:   TMS320C64x_B_s5_i = 68,",
          "83:   TMS320C64x_B_s6_r = 69,",
          "84:   TMS320C64x_B_s7_irp = 70,",
          "85:   TMS320C64x_B_s7_nrp = 71,",
          "86:   TMS320C64x_CLR_s15_riir = 72,",
          "87:   TMS320C64x_CLR_s1_rrr = 73,",
          "88:   TMS320C64x_CMPEQ2_s1_rrr = 74,",
          "89:   TMS320C64x_CMPEQ4_s1_rrr = 75,",
          "90:   TMS320C64x_CMPEQ_l1_ipr = 76,",
          "91:   TMS320C64x_CMPEQ_l1_irr = 77,",
          "92:   TMS320C64x_CMPEQ_l1_rpr = 78,",
          "93:   TMS320C64x_CMPEQ_l1_rrr_x2 = 79,",
          "94:   TMS320C64x_CMPGT2_s1_rrr = 80,",
          "95:   TMS320C64x_CMPGTU4_s1_rrr = 81,",
          "96:   TMS320C64x_CMPGT_l1_ipr = 82,",
          "97:   TMS320C64x_CMPGT_l1_irr = 83,",
          "98:   TMS320C64x_CMPGT_l1_rpr = 84,",
          "99:   TMS320C64x_CMPGT_l1_rrr_x2 = 85,",
          "100:   TMS320C64x_CMPLTU_l1_ipr = 86,",
          "101:   TMS320C64x_CMPLTU_l1_irr = 87,",
          "102:   TMS320C64x_CMPLTU_l1_rpr = 88,",
          "103:   TMS320C64x_CMPLTU_l1_rrr_x2 = 89,",
          "104:   TMS320C64x_CMPLT_l1_ipr = 90,",
          "105:   TMS320C64x_CMPLT_l1_irr = 91,",
          "106:   TMS320C64x_CMPLT_l1_rpr = 92,",
          "107:   TMS320C64x_CMPLT_l1_rrr_x2 = 93,",
          "108:   TMS320C64x_DEAL_m2_rr = 94,",
          "109:   TMS320C64x_DOTP2_m1_rrp = 95,",
          "110:   TMS320C64x_DOTP2_m1_rrr = 96,",
          "111:   TMS320C64x_DOTPN2_m1_rrr = 97,",
          "112:   TMS320C64x_DOTPNRSU2_m1_rrr = 98,",
          "113:   TMS320C64x_DOTPRSU2_m1_rrr = 99,",
          "114:   TMS320C64x_DOTPSU4_m1_rrr = 100,",
          "115:   TMS320C64x_DOTPU4_m1_rrr = 101,",
          "116:   TMS320C64x_EXTU_s15_riir = 102,",
          "117:   TMS320C64x_EXTU_s1_rrr = 103,",
          "118:   TMS320C64x_EXT_s15_riir = 104,",
          "119:   TMS320C64x_EXT_s1_rrr = 105,",
          "120:   TMS320C64x_GMPGTU_l1_ipr = 106,",
          "121:   TMS320C64x_GMPGTU_l1_irr = 107,",
          "122:   TMS320C64x_GMPGTU_l1_rpr = 108,",
          "123:   TMS320C64x_GMPGTU_l1_rrr_x2 = 109,",
          "124:   TMS320C64x_GMPY4_m1_rrr = 110,",
          "125:   TMS320C64x_LDBU_d5_mr = 111,",
          "126:   TMS320C64x_LDBU_d6_mr = 112,",
          "127:   TMS320C64x_LDB_d5_mr = 113,",
          "128:   TMS320C64x_LDB_d6_mr = 114,",
          "129:   TMS320C64x_LDDW_d7_mp = 115,",
          "130:   TMS320C64x_LDHU_d5_mr = 116,",
          "131:   TMS320C64x_LDHU_d6_mr = 117,",
          "132:   TMS320C64x_LDH_d5_mr = 118,",
          "133:   TMS320C64x_LDH_d6_mr = 119,",
          "134:   TMS320C64x_LDNDW_d8_mp = 120,",
          "135:   TMS320C64x_LDNW_d5_mr = 121,",
          "136:   TMS320C64x_LDW_d5_mr = 122,",
          "137:   TMS320C64x_LDW_d6_mr = 123,",
          "138:   TMS320C64x_LMBD_l1_irr = 124,",
          "139:   TMS320C64x_LMBD_l1_rrr_x2 = 125,",
          "140:   TMS320C64x_MAX2_l1_rrr_x2 = 126,",
          "141:   TMS320C64x_MAXU4_l1_rrr_x2 = 127,",
          "142:   TMS320C64x_MIN2_l1_rrr_x2 = 128,",
          "143:   TMS320C64x_MINU4_l1_rrr_x2 = 129,",
          "144:   TMS320C64x_MPY2_m1_rrp = 130,",
          "145:   TMS320C64x_MPYHIR_m1_rrr = 131,",
          "146:   TMS320C64x_MPYHI_m1_rrp = 132,",
          "147:   TMS320C64x_MPYHLU_m4_rrr = 133,",
          "148:   TMS320C64x_MPYHL_m4_rrr = 134,",
          "149:   TMS320C64x_MPYHSLU_m4_rrr = 135,",
          "150:   TMS320C64x_MPYHSU_m4_rrr = 136,",
          "151:   TMS320C64x_MPYHULS_m4_rrr = 137,",
          "152:   TMS320C64x_MPYHUS_m4_rrr = 138,",
          "153:   TMS320C64x_MPYHU_m4_rrr = 139,",
          "154:   TMS320C64x_MPYH_m4_rrr = 140,",
          "155:   TMS320C64x_MPYLHU_m4_rrr = 141,",
          "156:   TMS320C64x_MPYLH_m4_rrr = 142,",
          "157:   TMS320C64x_MPYLIR_m1_rrr = 143,",
          "158:   TMS320C64x_MPYLI_m1_rrp = 144,",
          "159:   TMS320C64x_MPYLSHU_m4_rrr = 145,",
          "160:   TMS320C64x_MPYLUHS_m4_rrr = 146,",
          "161:   TMS320C64x_MPYSU4_m1_rrp = 147,",
          "162:   TMS320C64x_MPYSU_m4_irr = 148,",
          "163:   TMS320C64x_MPYSU_m4_rrr = 149,",
          "164:   TMS320C64x_MPYU4_m1_rrp = 150,",
          "165:   TMS320C64x_MPYUS_m4_rrr = 151,",
          "166:   TMS320C64x_MPYU_m4_rrr = 152,",
          "167:   TMS320C64x_MPY_m4_irr = 153,",
          "168:   TMS320C64x_MPY_m4_rrr = 154,",
          "169:   TMS320C64x_MVC_s1_rr = 155,",
          "170:   TMS320C64x_MVC_s1_rr2 = 156,",
          "171:   TMS320C64x_MVD_m2_rr = 157,",
          "172:   TMS320C64x_MVKLH_s12_ir = 158,",
          "173:   TMS320C64x_MVKL_s12_ir = 159,",
          "174:   TMS320C64x_MVK_d1_rr = 160,",
          "175:   TMS320C64x_MVK_l2_ir = 161,",
          "176:   TMS320C64x_NOP_n = 162,",
          "177:   TMS320C64x_NORM_l1_pr = 163,",
          "178:   TMS320C64x_NORM_l1_rr = 164,",
          "179:   TMS320C64x_OR_d2_rir = 165,",
          "180:   TMS320C64x_OR_d2_rrr = 166,",
          "181:   TMS320C64x_OR_l1_irr = 167,",
          "182:   TMS320C64x_OR_l1_rrr_x2 = 168,",
          "183:   TMS320C64x_OR_s1_irr = 169,",
          "184:   TMS320C64x_OR_s1_rrr = 170,",
          "185:   TMS320C64x_PACK2_l1_rrr_x2 = 171,",
          "186:   TMS320C64x_PACK2_s4_rrr = 172,",
          "187:   TMS320C64x_PACKH2_l1_rrr_x2 = 173,",
          "188:   TMS320C64x_PACKH2_s1_rrr = 174,",
          "189:   TMS320C64x_PACKH4_l1_rrr_x2 = 175,",
          "190:   TMS320C64x_PACKHL2_l1_rrr_x2 = 176,",
          "191:   TMS320C64x_PACKHL2_s1_rrr = 177,",
          "192:   TMS320C64x_PACKL4_l1_rrr_x2 = 178,",
          "193:   TMS320C64x_PACKLH2_l1_rrr_x2 = 179,",
          "194:   TMS320C64x_PACKLH2_s1_rrr = 180,",
          "195:   TMS320C64x_ROTL_m1_rir = 181,",
          "196:   TMS320C64x_ROTL_m1_rrr = 182,",
          "197:   TMS320C64x_SADD2_s4_rrr = 183,",
          "198:   TMS320C64x_SADDU4_s4_rrr = 184,",
          "199:   TMS320C64x_SADDUS2_s4_rrr = 185,",
          "200:   TMS320C64x_SADD_l1_ipp = 186,",
          "201:   TMS320C64x_SADD_l1_irr = 187,",
          "202:   TMS320C64x_SADD_l1_rpp = 188,",
          "203:   TMS320C64x_SADD_l1_rrr_x2 = 189,",
          "204:   TMS320C64x_SADD_s1_rrr = 190,",
          "205:   TMS320C64x_SAT_l1_pr = 191,",
          "206:   TMS320C64x_SET_s15_riir = 192,",
          "207:   TMS320C64x_SET_s1_rrr = 193,",
          "208:   TMS320C64x_SHFL_m2_rr = 194,",
          "209:   TMS320C64x_SHLMB_l1_rrr_x2 = 195,",
          "210:   TMS320C64x_SHLMB_s4_rrr = 196,",
          "211:   TMS320C64x_SHL_s1_pip = 197,",
          "212:   TMS320C64x_SHL_s1_prp = 198,",
          "213:   TMS320C64x_SHL_s1_rip = 199,",
          "214:   TMS320C64x_SHL_s1_rir = 200,",
          "215:   TMS320C64x_SHL_s1_rrp = 201,",
          "216:   TMS320C64x_SHL_s1_rrr = 202,",
          "217:   TMS320C64x_SHR2_s1_rir = 203,",
          "218:   TMS320C64x_SHR2_s4_rrr = 204,",
          "219:   TMS320C64x_SHRMB_l1_rrr_x2 = 205,",
          "220:   TMS320C64x_SHRMB_s4_rrr = 206,",
          "221:   TMS320C64x_SHRU2_s1_rir = 207,",
          "222:   TMS320C64x_SHRU2_s4_rrr = 208,",
          "223:   TMS320C64x_SHRU_s1_pip = 209,",
          "224:   TMS320C64x_SHRU_s1_prp = 210,",
          "225:   TMS320C64x_SHRU_s1_rir = 211,",
          "226:   TMS320C64x_SHRU_s1_rrr = 212,",
          "227:   TMS320C64x_SHR_s1_pip = 213,",
          "228:   TMS320C64x_SHR_s1_prp = 214,",
          "229:   TMS320C64x_SHR_s1_rir = 215,",
          "230:   TMS320C64x_SHR_s1_rrr = 216,",
          "231:   TMS320C64x_SMPY2_m1_rrp = 217,",
          "232:   TMS320C64x_SMPYHL_m4_rrr = 218,",
          "233:   TMS320C64x_SMPYH_m4_rrr = 219,",
          "234:   TMS320C64x_SMPYLH_m4_rrr = 220,",
          "235:   TMS320C64x_SMPY_m4_rrr = 221,",
          "236:   TMS320C64x_SPACK2_s4_rrr = 222,",
          "237:   TMS320C64x_SPACKU4_s4_rrr = 223,",
          "238:   TMS320C64x_SSHL_s1_rir = 224,",
          "239:   TMS320C64x_SSHL_s1_rrr = 225,",
          "240:   TMS320C64x_SSHVL_m1_rrr = 226,",
          "241:   TMS320C64x_SSHVR_m1_rrr = 227,",
          "242:   TMS320C64x_SSUB_l1_ipp = 228,",
          "243:   TMS320C64x_SSUB_l1_irr = 229,",
          "244:   TMS320C64x_SSUB_l1_rrr_x1 = 230,",
          "245:   TMS320C64x_SSUB_l1_rrr_x2 = 231,",
          "246:   TMS320C64x_STB_d5_rm = 232,",
          "247:   TMS320C64x_STB_d6_rm = 233,",
          "248:   TMS320C64x_STDW_d7_pm = 234,",
          "249:   TMS320C64x_STH_d5_rm = 235,",
          "250:   TMS320C64x_STH_d6_rm = 236,",
          "251:   TMS320C64x_STNDW_d8_pm = 237,",
          "252:   TMS320C64x_STNW_d5_rm = 238,",
          "253:   TMS320C64x_STW_d5_rm = 239,",
          "254:   TMS320C64x_STW_d6_rm = 240,",
          "255:   TMS320C64x_SUB2_d2_rrr = 241,",
          "256:   TMS320C64x_SUB2_l1_rrr_x2 = 242,",
          "257:   TMS320C64x_SUB2_s1_rrr = 243,",
          "258:   TMS320C64x_SUB4_l1_rrr_x2 = 244,",
          "259:   TMS320C64x_SUBABS4_l1_rrr_x2 = 245,",
          "260:   TMS320C64x_SUBAB_d1_rir = 246,",
          "261:   TMS320C64x_SUBAB_d1_rrr = 247,",
          "262:   TMS320C64x_SUBAH_d1_rir = 248,",
          "263:   TMS320C64x_SUBAH_d1_rrr = 249,",
          "264:   TMS320C64x_SUBAW_d1_rir = 250,",
          "265:   TMS320C64x_SUBAW_d1_rrr = 251,",
          "266:   TMS320C64x_SUBC_l1_rrr_x2 = 252,",
          "267:   TMS320C64x_SUBU_l1_rrp_x1 = 253,",
          "268:   TMS320C64x_SUBU_l1_rrp_x2 = 254,",
          "269:   TMS320C64x_SUB_d1_rir = 255,",
          "270:   TMS320C64x_SUB_d1_rrr = 256,",
          "271:   TMS320C64x_SUB_d2_rrr = 257,",
          "272:   TMS320C64x_SUB_l1_ipp = 258,",
          "273:   TMS320C64x_SUB_l1_irr = 259,",
          "274:   TMS320C64x_SUB_l1_rrp_x1 = 260,",
          "275:   TMS320C64x_SUB_l1_rrp_x2 = 261,",
          "276:   TMS320C64x_SUB_l1_rrr_x1 = 262,",
          "277:   TMS320C64x_SUB_l1_rrr_x2 = 263,",
          "278:   TMS320C64x_SUB_s1_irr = 264,",
          "279:   TMS320C64x_SUB_s1_rrr = 265,",
          "280:   TMS320C64x_SUB_s4_rrr = 266,",
          "281:   TMS320C64x_SWAP4_l2_rr = 267,",
          "282:   TMS320C64x_UNPKHU4_l2_rr = 268,",
          "283:   TMS320C64x_UNPKHU4_s14_rr = 269,",
          "284:   TMS320C64x_UNPKLU4_l2_rr = 270,",
          "285:   TMS320C64x_UNPKLU4_s14_rr = 271,",
          "286:   TMS320C64x_XOR_d2_rir = 272,",
          "287:   TMS320C64x_XOR_d2_rrr = 273,",
          "288:   TMS320C64x_XOR_l1_irr = 274,",
          "289:   TMS320C64x_XOR_l1_rrr_x2 = 275,",
          "290:   TMS320C64x_XOR_s1_irr = 276,",
          "291:   TMS320C64x_XOR_s1_rrr = 277,",
          "292:   TMS320C64x_XPND2_m2_rr = 278,",
          "293:   TMS320C64x_XPND4_m2_rr = 279,",
          "294:   TMS320C64x_INSTRUCTION_LIST_END = 280",
          "295: };",
          "297: #endif // GET_INSTRINFO_ENUM",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc||arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc": [
          "File: arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc -> arch/TMS320C64x/TMS320C64xGenRegisterInfo.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: |*                                                                            *|",
          "3: |*Target Register Enum Values                                                 *|",
          "4: |*                                                                            *|",
          "5: |* Automatically generated file, do not edit!                                 *|",
          "6: |*                                                                            *|",
          "10: #ifdef GET_REGINFO_ENUM",
          "11: #undef GET_REGINFO_ENUM",
          "13: enum {",
          "14:   TMS320C64x_NoRegister,",
          "15:   TMS320C64x_AMR = 1,",
          "16:   TMS320C64x_CSR = 2,",
          "17:   TMS320C64x_DIER = 3,",
          "18:   TMS320C64x_DNUM = 4,",
          "19:   TMS320C64x_ECR = 5,",
          "20:   TMS320C64x_GFPGFR = 6,",
          "21:   TMS320C64x_GPLYA = 7,",
          "22:   TMS320C64x_GPLYB = 8,",
          "23:   TMS320C64x_ICR = 9,",
          "24:   TMS320C64x_IER = 10,",
          "25:   TMS320C64x_IERR = 11,",
          "26:   TMS320C64x_ILC = 12,",
          "27:   TMS320C64x_IRP = 13,",
          "28:   TMS320C64x_ISR = 14,",
          "29:   TMS320C64x_ISTP = 15,",
          "30:   TMS320C64x_ITSR = 16,",
          "31:   TMS320C64x_NRP = 17,",
          "32:   TMS320C64x_NTSR = 18,",
          "33:   TMS320C64x_REP = 19,",
          "34:   TMS320C64x_RILC = 20,",
          "35:   TMS320C64x_SSR = 21,",
          "36:   TMS320C64x_TSCH = 22,",
          "37:   TMS320C64x_TSCL = 23,",
          "38:   TMS320C64x_TSR = 24,",
          "39:   TMS320C64x_A0 = 25,",
          "40:   TMS320C64x_A1 = 26,",
          "41:   TMS320C64x_A2 = 27,",
          "42:   TMS320C64x_A3 = 28,",
          "43:   TMS320C64x_A4 = 29,",
          "44:   TMS320C64x_A5 = 30,",
          "45:   TMS320C64x_A6 = 31,",
          "46:   TMS320C64x_A7 = 32,",
          "47:   TMS320C64x_A8 = 33,",
          "48:   TMS320C64x_A9 = 34,",
          "49:   TMS320C64x_A10 = 35,",
          "50:   TMS320C64x_A11 = 36,",
          "51:   TMS320C64x_A12 = 37,",
          "52:   TMS320C64x_A13 = 38,",
          "53:   TMS320C64x_A14 = 39,",
          "54:   TMS320C64x_A15 = 40,",
          "55:   TMS320C64x_A16 = 41,",
          "56:   TMS320C64x_A17 = 42,",
          "57:   TMS320C64x_A18 = 43,",
          "58:   TMS320C64x_A19 = 44,",
          "59:   TMS320C64x_A20 = 45,",
          "60:   TMS320C64x_A21 = 46,",
          "61:   TMS320C64x_A22 = 47,",
          "62:   TMS320C64x_A23 = 48,",
          "63:   TMS320C64x_A24 = 49,",
          "64:   TMS320C64x_A25 = 50,",
          "65:   TMS320C64x_A26 = 51,",
          "66:   TMS320C64x_A27 = 52,",
          "67:   TMS320C64x_A28 = 53,",
          "68:   TMS320C64x_A29 = 54,",
          "69:   TMS320C64x_A30 = 55,",
          "70:   TMS320C64x_A31 = 56,",
          "71:   TMS320C64x_B0 = 57,",
          "72:   TMS320C64x_B1 = 58,",
          "73:   TMS320C64x_B2 = 59,",
          "74:   TMS320C64x_B3 = 60,",
          "75:   TMS320C64x_B4 = 61,",
          "76:   TMS320C64x_B5 = 62,",
          "77:   TMS320C64x_B6 = 63,",
          "78:   TMS320C64x_B7 = 64,",
          "79:   TMS320C64x_B8 = 65,",
          "80:   TMS320C64x_B9 = 66,",
          "81:   TMS320C64x_B10 = 67,",
          "82:   TMS320C64x_B11 = 68,",
          "83:   TMS320C64x_B12 = 69,",
          "84:   TMS320C64x_B13 = 70,",
          "85:   TMS320C64x_B14 = 71,",
          "86:   TMS320C64x_B15 = 72,",
          "87:   TMS320C64x_B16 = 73,",
          "88:   TMS320C64x_B17 = 74,",
          "89:   TMS320C64x_B18 = 75,",
          "90:   TMS320C64x_B19 = 76,",
          "91:   TMS320C64x_B20 = 77,",
          "92:   TMS320C64x_B21 = 78,",
          "93:   TMS320C64x_B22 = 79,",
          "94:   TMS320C64x_B23 = 80,",
          "95:   TMS320C64x_B24 = 81,",
          "96:   TMS320C64x_B25 = 82,",
          "97:   TMS320C64x_B26 = 83,",
          "98:   TMS320C64x_B27 = 84,",
          "99:   TMS320C64x_B28 = 85,",
          "100:   TMS320C64x_B29 = 86,",
          "101:   TMS320C64x_B30 = 87,",
          "102:   TMS320C64x_B31 = 88,",
          "103:   TMS320C64x_PCE1 = 89,",
          "104:   TMS320C64x_NUM_TARGET_REGS  // 90",
          "105: };",
          "108: enum {",
          "109:   TMS320C64x_GPRegsRegClassID = 0,",
          "110:   TMS320C64x_AFRegsRegClassID = 1,",
          "111:   TMS320C64x_BFRegsRegClassID = 2,",
          "112:   TMS320C64x_ControlRegsRegClassID = 3,",
          "114:   };",
          "115: #endif // GET_REGINFO_ENUM",
          "118: |*                                                                            *|",
          "119: |*MC Register Information                                                     *|",
          "120: |*                                                                            *|",
          "121: |* Automatically generated file, do not edit!                                 *|",
          "122: |*                                                                            *|",
          "126: #ifdef GET_REGINFO_MC_DESC",
          "127: #undef GET_REGINFO_MC_DESC",
          "129: static MCPhysReg TMS320C64xRegDiffLists[] = {",
          "131: };",
          "133: static uint16_t TMS320C64xSubRegIdxLists[] = {",
          "135: };",
          "137: static MCRegisterDesc TMS320C64xRegDesc[] = { // Descriptors",
          "138:   { 3, 0, 0, 0, 0 },",
          "139:   { 310, 1, 1, 0, 1 },",
          "140:   { 319, 1, 1, 0, 1 },",
          "141:   { 298, 1, 1, 0, 1 },",
          "142:   { 268, 1, 1, 0, 1 },",
          "143:   { 290, 1, 1, 0, 1 },",
          "144:   { 303, 1, 1, 0, 1 },",
          "145:   { 241, 1, 1, 0, 1 },",
          "146:   { 247, 1, 1, 0, 1 },",
          "147:   { 294, 1, 1, 0, 1 },",
          "148:   { 299, 1, 1, 0, 1 },",
          "149:   { 314, 1, 1, 0, 1 },",
          "150:   { 254, 1, 1, 0, 1 },",
          "151:   { 277, 1, 1, 0, 1 },",
          "152:   { 323, 1, 1, 0, 1 },",
          "153:   { 285, 1, 1, 0, 1 },",
          "154:   { 331, 1, 1, 0, 1 },",
          "155:   { 281, 1, 1, 0, 1 },",
          "156:   { 336, 1, 1, 0, 1 },",
          "157:   { 273, 1, 1, 0, 1 },",
          "158:   { 253, 1, 1, 0, 1 },",
          "159:   { 327, 1, 1, 0, 1 },",
          "160:   { 258, 1, 1, 0, 1 },",
          "161:   { 263, 1, 1, 0, 1 },",
          "162:   { 332, 1, 1, 0, 1 },",
          "163:   { 24, 1, 1, 0, 1 },",
          "164:   { 54, 1, 1, 0, 1 },",
          "165:   { 81, 1, 1, 0, 1 },",
          "166:   { 103, 1, 1, 0, 1 },",
          "167:   { 125, 1, 1, 0, 1 },",
          "168:   { 147, 1, 1, 0, 1 },",
          "169:   { 169, 1, 1, 0, 1 },",
          "170:   { 191, 1, 1, 0, 1 },",
          "171:   { 213, 1, 1, 0, 1 },",
          "172:   { 235, 1, 1, 0, 1 },",
          "173:   { 0, 1, 1, 0, 1 },",
          "174:   { 30, 1, 1, 0, 1 },",
          "175:   { 65, 1, 1, 0, 1 },",
          "176:   { 87, 1, 1, 0, 1 },",
          "177:   { 109, 1, 1, 0, 1 },",
          "178:   { 131, 1, 1, 0, 1 },",
          "179:   { 153, 1, 1, 0, 1 },",
          "180:   { 175, 1, 1, 0, 1 },",
          "181:   { 197, 1, 1, 0, 1 },",
          "182:   { 219, 1, 1, 0, 1 },",
          "183:   { 8, 1, 1, 0, 1 },",
          "184:   { 38, 1, 1, 0, 1 },",
          "185:   { 73, 1, 1, 0, 1 },",
          "186:   { 95, 1, 1, 0, 1 },",
          "187:   { 117, 1, 1, 0, 1 },",
          "188:   { 139, 1, 1, 0, 1 },",
          "189:   { 161, 1, 1, 0, 1 },",
          "190:   { 183, 1, 1, 0, 1 },",
          "191:   { 205, 1, 1, 0, 1 },",
          "192:   { 227, 1, 1, 0, 1 },",
          "193:   { 16, 1, 1, 0, 1 },",
          "194:   { 46, 1, 1, 0, 1 },",
          "195:   { 27, 1, 1, 0, 1 },",
          "196:   { 57, 1, 1, 0, 1 },",
          "197:   { 84, 1, 1, 0, 1 },",
          "198:   { 106, 1, 1, 0, 1 },",
          "199:   { 128, 1, 1, 0, 1 },",
          "200:   { 150, 1, 1, 0, 1 },",
          "201:   { 172, 1, 1, 0, 1 },",
          "202:   { 194, 1, 1, 0, 1 },",
          "203:   { 216, 1, 1, 0, 1 },",
          "204:   { 238, 1, 1, 0, 1 },",
          "205:   { 4, 1, 1, 0, 1 },",
          "206:   { 34, 1, 1, 0, 1 },",
          "207:   { 69, 1, 1, 0, 1 },",
          "208:   { 91, 1, 1, 0, 1 },",
          "209:   { 113, 1, 1, 0, 1 },",
          "210:   { 135, 1, 1, 0, 1 },",
          "211:   { 157, 1, 1, 0, 1 },",
          "212:   { 179, 1, 1, 0, 1 },",
          "213:   { 201, 1, 1, 0, 1 },",
          "214:   { 223, 1, 1, 0, 1 },",
          "215:   { 12, 1, 1, 0, 1 },",
          "216:   { 42, 1, 1, 0, 1 },",
          "217:   { 77, 1, 1, 0, 1 },",
          "218:   { 99, 1, 1, 0, 1 },",
          "219:   { 121, 1, 1, 0, 1 },",
          "220:   { 143, 1, 1, 0, 1 },",
          "221:   { 165, 1, 1, 0, 1 },",
          "222:   { 187, 1, 1, 0, 1 },",
          "223:   { 209, 1, 1, 0, 1 },",
          "224:   { 231, 1, 1, 0, 1 },",
          "225:   { 20, 1, 1, 0, 1 },",
          "226:   { 50, 1, 1, 0, 1 },",
          "227:   { 60, 1, 1, 0, 1 },",
          "228: };",
          "231: static MCPhysReg GPRegs[] = {",
          "232:   TMS320C64x_A0, TMS320C64x_A1, TMS320C64x_A2, TMS320C64x_A3, TMS320C64x_A4, TMS320C64x_A5, TMS320C64x_A6, TMS320C64x_A7, TMS320C64x_A8, TMS320C64x_A9, TMS320C64x_A10, TMS320C64x_A11, TMS320C64x_A12, TMS320C64x_A13, TMS320C64x_A14, TMS320C64x_A15, TMS320C64x_A16, TMS320C64x_A17, TMS320C64x_A18, TMS320C64x_A19, TMS320C64x_A20, TMS320C64x_A21, TMS320C64x_A22, TMS320C64x_A23, TMS320C64x_A24, TMS320C64x_A25, TMS320C64x_A26, TMS320C64x_A27, TMS320C64x_A28, TMS320C64x_A29, TMS320C64x_A30, TMS320C64x_A31, TMS320C64x_B0, TMS320C64x_B1, TMS320C64x_B2, TMS320C64x_B3, TMS320C64x_B4, TMS320C64x_B5, TMS320C64x_B6, TMS320C64x_B7, TMS320C64x_B8, TMS320C64x_B9, TMS320C64x_B10, TMS320C64x_B11, TMS320C64x_B12, TMS320C64x_B13, TMS320C64x_B14, TMS320C64x_B15, TMS320C64x_B16, TMS320C64x_B17, TMS320C64x_B18, TMS320C64x_B19, TMS320C64x_B20, TMS320C64x_B21, TMS320C64x_B22, TMS320C64x_B23, TMS320C64x_B24, TMS320C64x_B25, TMS320C64x_B26, TMS320C64x_B27, TMS320C64x_B28, TMS320C64x_B29, TMS320C64x_B30, TMS320C64x_B31,",
          "233: };",
          "236: static uint8_t GPRegsBits[] = {",
          "237:   0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,",
          "238: };",
          "241: static MCPhysReg AFRegs[] = {",
          "242:   TMS320C64x_A0, TMS320C64x_A1, TMS320C64x_A2, TMS320C64x_A3, TMS320C64x_A4, TMS320C64x_A5, TMS320C64x_A6, TMS320C64x_A7, TMS320C64x_A8, TMS320C64x_A9, TMS320C64x_A10, TMS320C64x_A11, TMS320C64x_A12, TMS320C64x_A13, TMS320C64x_A14, TMS320C64x_A15, TMS320C64x_A16, TMS320C64x_A17, TMS320C64x_A18, TMS320C64x_A19, TMS320C64x_A20, TMS320C64x_A21, TMS320C64x_A22, TMS320C64x_A23, TMS320C64x_A24, TMS320C64x_A25, TMS320C64x_A26, TMS320C64x_A27, TMS320C64x_A28, TMS320C64x_A29, TMS320C64x_A30, TMS320C64x_A31,",
          "243: };",
          "246: static uint8_t AFRegsBits[] = {",
          "247:   0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01,",
          "248: };",
          "251: static MCPhysReg BFRegs[] = {",
          "252:   TMS320C64x_B0, TMS320C64x_B1, TMS320C64x_B2, TMS320C64x_B3, TMS320C64x_B4, TMS320C64x_B5, TMS320C64x_B6, TMS320C64x_B7, TMS320C64x_B8, TMS320C64x_B9, TMS320C64x_B10, TMS320C64x_B11, TMS320C64x_B12, TMS320C64x_B13, TMS320C64x_B14, TMS320C64x_B15, TMS320C64x_B16, TMS320C64x_B17, TMS320C64x_B18, TMS320C64x_B19, TMS320C64x_B20, TMS320C64x_B21, TMS320C64x_B22, TMS320C64x_B23, TMS320C64x_B24, TMS320C64x_B25, TMS320C64x_B26, TMS320C64x_B27, TMS320C64x_B28, TMS320C64x_B29, TMS320C64x_B30, TMS320C64x_B31,",
          "253: };",
          "256: static uint8_t BFRegsBits[] = {",
          "257:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01,",
          "258: };",
          "261: static MCPhysReg ControlRegs[] = {",
          "262:   TMS320C64x_AMR, TMS320C64x_CSR, TMS320C64x_DIER, TMS320C64x_DNUM, TMS320C64x_ECR, TMS320C64x_GFPGFR, TMS320C64x_GPLYA, TMS320C64x_GPLYB, TMS320C64x_ICR, TMS320C64x_IER, TMS320C64x_IERR, TMS320C64x_ILC, TMS320C64x_IRP, TMS320C64x_ISR, TMS320C64x_ISTP, TMS320C64x_ITSR, TMS320C64x_NRP, TMS320C64x_NTSR, TMS320C64x_PCE1, TMS320C64x_REP, TMS320C64x_RILC, TMS320C64x_SSR, TMS320C64x_TSCH, TMS320C64x_TSCL, TMS320C64x_TSR,",
          "263: };",
          "266: static uint8_t ControlRegsBits[] = {",
          "267:   0xfe, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,",
          "268: };",
          "270: static MCRegisterClass TMS320C64xMCRegisterClasses[] = {",
          "271:   { GPRegs, GPRegsBits, 64, sizeof(GPRegsBits), TMS320C64x_GPRegsRegClassID, 4, 4, 1, 1 },",
          "272:   { AFRegs, AFRegsBits, 32, sizeof(AFRegsBits), TMS320C64x_AFRegsRegClassID, 4, 4, 1, 1 },",
          "273:   { BFRegs, BFRegsBits, 32, sizeof(BFRegsBits), TMS320C64x_BFRegsRegClassID, 4, 4, 1, 1 },",
          "274:   { ControlRegs, ControlRegsBits, 25, sizeof(ControlRegsBits), TMS320C64x_ControlRegsRegClassID, 4, 4, 1, 1 },",
          "275: };",
          "277: #endif // GET_REGINFO_MC_DESC",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xInstPrinter.c||arch/TMS320C64x/TMS320C64xInstPrinter.c": [
          "File: arch/TMS320C64x/TMS320C64xInstPrinter.c -> arch/TMS320C64x/TMS320C64xInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifdef CAPSTONE_HAS_TMS320C64X",
          "6: #include <ctype.h>",
          "7: #include <string.h>",
          "9: #include \"../../myinttypes.h\"",
          "11: #include \"TMS320C64xInstPrinter.h\"",
          "12: #include \"../../MCInst.h\"",
          "13: #include \"../../utils.h\"",
          "14: #include \"../../SStream.h\"",
          "15: #include \"../../MCRegisterInfo.h\"",
          "16: #include \"../../MathExtras.h\"",
          "17: #include \"TMS320C64xMapping.h\"",
          "19: #include \"capstone/tms320c64x.h\"",
          "21: static char *getRegisterName(unsigned RegNo);",
          "22: static void printOperand(MCInst *MI, unsigned OpNo, SStream *O);",
          "23: static void printMemOperand(MCInst *MI, unsigned OpNo, SStream *O);",
          "24: static void printMemOperand2(MCInst *MI, unsigned OpNo, SStream *O);",
          "25: static void printRegPair(MCInst *MI, unsigned OpNo, SStream *O);",
          "27: void TMS320C64x_post_printer(csh ud, cs_insn *insn, char *insn_asm, MCInst *mci)",
          "28: {",
          "29:  SStream ss;",
          "30:  char *p, *p2, tmp[8];",
          "31:  unsigned int unit = 0;",
          "32:  int i;",
          "33:  cs_tms320c64x *tms320c64x;",
          "35:  if(mci->csh->detail) {",
          "36:   tms320c64x = &mci->flat_insn->detail->tms320c64x;",
          "38:   for(i = 0; i < insn->detail->groups_count; i++) {",
          "39:    switch(insn->detail->groups[i]) {",
          "40:     case TMS320C64X_GRP_FUNIT_D:",
          "41:      unit = TMS320C64X_FUNIT_D;",
          "42:      break;",
          "43:     case TMS320C64X_GRP_FUNIT_L:",
          "44:      unit = TMS320C64X_FUNIT_L;",
          "45:      break;",
          "46:     case TMS320C64X_GRP_FUNIT_M:",
          "47:      unit = TMS320C64X_FUNIT_M;",
          "48:      break;",
          "49:     case TMS320C64X_GRP_FUNIT_S:",
          "50:      unit = TMS320C64X_FUNIT_S;",
          "51:      break;",
          "52:     case TMS320C64X_GRP_FUNIT_NO:",
          "53:      unit = TMS320C64X_FUNIT_NO;",
          "54:      break;",
          "55:    }",
          "56:    if(unit != 0)",
          "57:     break;",
          "58:   }",
          "59:   tms320c64x->funit.unit = unit;",
          "61:   SStream_Init(&ss);",
          "62:   if(tms320c64x->condition.reg != TMS320C64X_REG_INVALID)",
          "63:    SStream_concat(&ss, \"[%c%s]|\", (tms320c64x->condition.zero == 1) ? '!' : '|', cs_reg_name(ud, tms320c64x->condition.reg));",
          "64:   else",
          "65:    SStream_concat0(&ss, \"||||||\");",
          "67:   p = strchr(insn_asm, '\\t');",
          "68:   if(p != NULL)",
          "71:   SStream_concat0(&ss, insn_asm);",
          "72:   if((p != NULL) && (((p2 = strchr(p, '[')) != NULL) || ((p2 = strchr(p, '(')) != NULL))) {",
          "73:    while((*p2 != 'A') && (*p2 != 'B'))",
          "74:     p2--;",
          "75:    if(*p2 == 'A')",
          "76:     strcpy(tmp, \"1T\");",
          "77:    else",
          "78:     strcpy(tmp, \"2T\");",
          "79:   } else {",
          "80:    tmp[0] = '\\0';",
          "81:   }",
          "82:   switch(tms320c64x->funit.unit) {",
          "83:    case TMS320C64X_FUNIT_D:",
          "84:     SStream_concat(&ss, \".D%s%u\", tmp, tms320c64x->funit.side);",
          "85:     break;",
          "86:    case TMS320C64X_FUNIT_L:",
          "87:     SStream_concat(&ss, \".L%s%u\", tmp, tms320c64x->funit.side);",
          "88:     break;",
          "89:    case TMS320C64X_FUNIT_M:",
          "90:     SStream_concat(&ss, \".M%s%u\", tmp, tms320c64x->funit.side);",
          "91:     break;",
          "92:    case TMS320C64X_FUNIT_S:",
          "93:     SStream_concat(&ss, \".S%s%u\", tmp, tms320c64x->funit.side);",
          "94:     break;",
          "95:   }",
          "96:   if(tms320c64x->funit.crosspath > 0)",
          "97:    SStream_concat0(&ss, \"X\");",
          "99:   if(p != NULL)",
          "100:    SStream_concat(&ss, \"\\t%s\", p);",
          "102:   if(tms320c64x->parallel != 0)",
          "103:    SStream_concat(&ss, \"\\t||\");",
          "106:   strcpy(insn_asm, ss.buffer);",
          "107:  }",
          "108: }",
          "110: #define PRINT_ALIAS_INSTR",
          "111: #include \"TMS320C64xGenAsmWriter.inc\"",
          "113: #define GET_INSTRINFO_ENUM",
          "114: #include \"TMS320C64xGenInstrInfo.inc\"",
          "116: static void printOperand(MCInst *MI, unsigned OpNo, SStream *O)",
          "117: {",
          "118:  MCOperand *Op = MCInst_getOperand(MI, OpNo);",
          "119:  unsigned reg;",
          "121:  if(MCOperand_isReg(Op)) {",
          "122:   reg = MCOperand_getReg(Op);",
          "123:   if((MCInst_getOpcode(MI) == TMS320C64x_MVC_s1_rr) && (OpNo == 1)) {",
          "124:    switch(reg) {",
          "125:     case TMS320C64X_REG_EFR:",
          "126:      SStream_concat0(O, \"EFR\");",
          "127:      break;",
          "128:     case TMS320C64X_REG_IFR:",
          "129:      SStream_concat0(O, \"IFR\");",
          "130:      break;",
          "131:     default:",
          "132:      SStream_concat0(O, getRegisterName(reg));",
          "133:      break;",
          "134:    }",
          "135:   } else {",
          "136:    SStream_concat0(O, getRegisterName(reg));",
          "137:   }",
          "139:   if(MI->csh->detail) {",
          "140:    MI->flat_insn->detail->tms320c64x.operands[MI->flat_insn->detail->tms320c64x.op_count].type = TMS320C64X_OP_REG;",
          "141:    MI->flat_insn->detail->tms320c64x.operands[MI->flat_insn->detail->tms320c64x.op_count].reg = reg;",
          "142:    MI->flat_insn->detail->tms320c64x.op_count++;",
          "143:   }",
          "144:  } else if (MCOperand_isImm(Op)) {",
          "145:   int64_t Imm = MCOperand_getImm(Op);",
          "147:   if(Imm >= 0) {",
          "148:    if(Imm > HEX_THRESHOLD)",
          "149:     SStream_concat(O, \"0x%\"PRIx64, Imm);",
          "150:    else",
          "151:     SStream_concat(O, \"%\"PRIu64, Imm);",
          "152:   } else {",
          "153:    if(Imm < -HEX_THRESHOLD)",
          "154:     SStream_concat(O, \"-0x%\"PRIx64, -Imm);",
          "155:    else",
          "156:     SStream_concat(O, \"-%\"PRIu64, -Imm);",
          "157:   }",
          "159:   if(MI->csh->detail) {",
          "160:    MI->flat_insn->detail->tms320c64x.operands[MI->flat_insn->detail->tms320c64x.op_count].type = TMS320C64X_OP_IMM;",
          "161:    MI->flat_insn->detail->tms320c64x.operands[MI->flat_insn->detail->tms320c64x.op_count].imm = Imm;",
          "162:    MI->flat_insn->detail->tms320c64x.op_count++;",
          "163:   }",
          "164:  }",
          "165: }",
          "167: static void printMemOperand(MCInst *MI, unsigned OpNo, SStream *O)",
          "168: {",
          "169:  MCOperand *Op = MCInst_getOperand(MI, OpNo);",
          "170:  int64_t Val = MCOperand_getImm(Op);",
          "171:  unsigned scaled, base, offset, mode, unit;",
          "172:  cs_tms320c64x *tms320c64x;",
          "173:  char st, nd;",
          "175:  scaled = (Val >> 19) & 1;",
          "176:  base = (Val >> 12) & 0x7f;",
          "177:  offset = (Val >> 5) & 0x7f;",
          "178:  mode = (Val >> 1) & 0xf;",
          "179:  unit = Val & 1;",
          "181:  if(scaled) {",
          "182:   st = '[';",
          "183:   nd = ']';",
          "184:  } else {",
          "185:   st = '(';",
          "186:   nd = ')';",
          "187:  }",
          "189:  switch(mode) {",
          "190:   case 0:",
          "191:    SStream_concat(O, \"*-%s%c%u%c\", getRegisterName(base), st, offset, nd);",
          "192:    break;",
          "193:   case 1:",
          "194:    SStream_concat(O, \"*+%s%c%u%c\", getRegisterName(base), st, offset, nd);",
          "195:    break;",
          "196:   case 4:",
          "197:    SStream_concat(O, \"*-%s%c%s%c\", getRegisterName(base), st, getRegisterName(offset), nd);",
          "198:    break;",
          "199:   case 5:",
          "200:    SStream_concat(O, \"*+%s%c%s%c\", getRegisterName(base), st, getRegisterName(offset), nd);",
          "201:    break;",
          "202:   case 8:",
          "203:    SStream_concat(O, \"*--%s%c%u%c\", getRegisterName(base), st, offset, nd);",
          "204:    break;",
          "205:   case 9:",
          "206:    SStream_concat(O, \"*++%s%c%u%c\", getRegisterName(base), st, offset, nd);",
          "207:    break;",
          "208:   case 10:",
          "209:    SStream_concat(O, \"*%s--%c%u%c\", getRegisterName(base), st, offset, nd);",
          "210:    break;",
          "211:   case 11:",
          "212:    SStream_concat(O, \"*%s++%c%u%c\", getRegisterName(base), st, offset, nd);",
          "213:    break;",
          "214:   case 12:",
          "215:    SStream_concat(O, \"*--%s%c%s%c\", getRegisterName(base), st, getRegisterName(offset), nd);",
          "216:    break;",
          "217:   case 13:",
          "218:    SStream_concat(O, \"*++%s%c%s%c\", getRegisterName(base), st, getRegisterName(offset), nd);",
          "219:    break;",
          "220:   case 14:",
          "221:    SStream_concat(O, \"*%s--%c%s%c\", getRegisterName(base), st, getRegisterName(offset), nd);",
          "222:    break;",
          "223:   case 15:",
          "224:    SStream_concat(O, \"*%s++%c%s%c\", getRegisterName(base), st, getRegisterName(offset), nd);",
          "225:    break;",
          "226:  }",
          "228:  if(MI->csh->detail) {",
          "229:   tms320c64x = &MI->flat_insn->detail->tms320c64x;",
          "231:   tms320c64x->operands[tms320c64x->op_count].type = TMS320C64X_OP_MEM;",
          "232:   tms320c64x->operands[tms320c64x->op_count].mem.base = base;",
          "233:   tms320c64x->operands[tms320c64x->op_count].mem.disp = offset;",
          "234:   tms320c64x->operands[tms320c64x->op_count].mem.unit = unit + 1;",
          "235:   tms320c64x->operands[tms320c64x->op_count].mem.scaled = scaled;",
          "236:   switch(mode) {",
          "237:    case 0:",
          "238:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "239:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_BW;",
          "240:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_NO;",
          "241:     break;",
          "242:    case 1:",
          "243:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "244:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "245:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_NO;",
          "246:     break;",
          "247:    case 4:",
          "248:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_REGISTER;",
          "249:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_BW;",
          "250:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_NO;",
          "251:     break;",
          "252:    case 5:",
          "253:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_REGISTER;",
          "254:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "255:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_NO;",
          "256:     break;",
          "257:    case 8:",
          "258:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "259:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_BW;",
          "260:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_PRE;",
          "261:     break;",
          "262:    case 9:",
          "263:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "264:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "265:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_PRE;",
          "266:     break;",
          "267:    case 10:",
          "268:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "269:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_BW;",
          "270:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_POST;",
          "271:     break;",
          "272:    case 11:",
          "273:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "274:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "275:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_POST;",
          "276:     break;",
          "277:    case 12:",
          "278:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_REGISTER;",
          "279:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_BW;",
          "280:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_PRE;",
          "281:     break;",
          "282:    case 13:",
          "283:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_REGISTER;",
          "284:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "285:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_PRE;",
          "286:     break;",
          "287:    case 14:",
          "288:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_REGISTER;",
          "289:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_BW;",
          "290:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_POST;",
          "291:     break;",
          "292:    case 15:",
          "293:     tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_REGISTER;",
          "294:     tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "295:     tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_POST;",
          "296:     break;",
          "297:   }",
          "298:   tms320c64x->op_count++;",
          "299:  }",
          "300: }",
          "302: static void printMemOperand2(MCInst *MI, unsigned OpNo, SStream *O)",
          "303: {",
          "304:  MCOperand *Op = MCInst_getOperand(MI, OpNo);",
          "305:  int64_t Val = MCOperand_getImm(Op);",
          "306:  uint16_t offset;",
          "307:  unsigned basereg;",
          "308:  cs_tms320c64x *tms320c64x;",
          "310:  basereg = Val & 0x7f;",
          "311:  offset = (Val >> 7) & 0x7fff;",
          "312:  SStream_concat(O, \"*+%s[0x%x]\", getRegisterName(basereg), offset);",
          "314:  if(MI->csh->detail) {",
          "315:   tms320c64x = &MI->flat_insn->detail->tms320c64x;",
          "317:   tms320c64x->operands[tms320c64x->op_count].type = TMS320C64X_OP_MEM;",
          "318:   tms320c64x->operands[tms320c64x->op_count].mem.base = basereg;",
          "319:   tms320c64x->operands[tms320c64x->op_count].mem.unit = 2;",
          "320:   tms320c64x->operands[tms320c64x->op_count].mem.disp = offset;",
          "321:   tms320c64x->operands[tms320c64x->op_count].mem.disptype = TMS320C64X_MEM_DISP_CONSTANT;",
          "322:   tms320c64x->operands[tms320c64x->op_count].mem.direction = TMS320C64X_MEM_DIR_FW;",
          "323:   tms320c64x->operands[tms320c64x->op_count].mem.modify = TMS320C64X_MEM_MOD_NO;",
          "324:   tms320c64x->op_count++;",
          "325:  }",
          "326: }",
          "328: static void printRegPair(MCInst *MI, unsigned OpNo, SStream *O)",
          "329: {",
          "330:  MCOperand *Op = MCInst_getOperand(MI, OpNo);",
          "331:  unsigned reg = MCOperand_getReg(Op);",
          "332:  cs_tms320c64x *tms320c64x;",
          "334:  SStream_concat(O, \"%s:%s\", getRegisterName(reg + 1), getRegisterName(reg));",
          "336:  if(MI->csh->detail) {",
          "337:   tms320c64x = &MI->flat_insn->detail->tms320c64x;",
          "339:   tms320c64x->operands[tms320c64x->op_count].type = TMS320C64X_OP_REGPAIR;",
          "340:   tms320c64x->operands[tms320c64x->op_count].reg = reg;",
          "341:   tms320c64x->op_count++;",
          "342:  }",
          "343: }",
          "345: static bool printAliasInstruction(MCInst *MI, SStream *O, MCRegisterInfo *MRI)",
          "346: {",
          "347:  unsigned opcode = MCInst_getOpcode(MI);",
          "348:  MCOperand *op;",
          "350:  switch(opcode) {",
          "352:   case TMS320C64x_ADD_d2_rir:",
          "354:   case TMS320C64x_ADD_l1_irr:",
          "355:   case TMS320C64x_ADD_l1_ipp:",
          "357:   case TMS320C64x_ADD_s1_irr:",
          "358:    if((MCInst_getNumOperands(MI) == 3) &&",
          "359:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "360:     MCOperand_isReg(MCInst_getOperand(MI, 1)) &&",
          "361:     MCOperand_isImm(MCInst_getOperand(MI, 2)) &&",
          "362:     (MCOperand_getImm(MCInst_getOperand(MI, 2)) < 0)) {",
          "364:     MCInst_setOpcodePub(MI, TMS320C64X_INS_SUB);",
          "365:     op = MCInst_getOperand(MI, 2);",
          "366:     MCOperand_setImm(op, -MCOperand_getImm(op));",
          "368:     SStream_concat0(O, \"SUB\\t\");",
          "369:     printOperand(MI, 1, O);",
          "370:     SStream_concat0(O, \", \");",
          "371:     printOperand(MI, 2, O);",
          "372:     SStream_concat0(O, \", \");",
          "373:     printOperand(MI, 0, O);",
          "375:     return true;",
          "376:    }",
          "377:    break;",
          "378:  }",
          "379:  switch(opcode) {",
          "381:   case TMS320C64x_ADD_d1_rir:",
          "383:   case TMS320C64x_OR_d2_rir:",
          "385:   case TMS320C64x_ADD_l1_irr:",
          "386:   case TMS320C64x_ADD_l1_ipp:",
          "388:   case TMS320C64x_OR_l1_irr:",
          "390:   case TMS320C64x_ADD_s1_irr:",
          "392:   case TMS320C64x_OR_s1_irr:",
          "393:    if((MCInst_getNumOperands(MI) == 3) &&",
          "394:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "395:     MCOperand_isReg(MCInst_getOperand(MI, 1)) &&",
          "396:     MCOperand_isImm(MCInst_getOperand(MI, 2)) &&",
          "397:     (MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0)) {",
          "399:     MCInst_setOpcodePub(MI, TMS320C64X_INS_MV);",
          "400:     MI->size--;",
          "402:     SStream_concat0(O, \"MV\\t\");",
          "403:     printOperand(MI, 1, O);",
          "404:     SStream_concat0(O, \", \");",
          "405:     printOperand(MI, 0, O);",
          "407:     return true;",
          "408:    }",
          "409:    break;",
          "410:  }",
          "411:  switch(opcode) {",
          "413:   case TMS320C64x_XOR_d2_rir:",
          "415:   case TMS320C64x_XOR_l1_irr:",
          "417:   case TMS320C64x_XOR_s1_irr:",
          "418:    if((MCInst_getNumOperands(MI) == 3) &&",
          "419:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "420:     MCOperand_isReg(MCInst_getOperand(MI, 1)) &&",
          "421:     MCOperand_isImm(MCInst_getOperand(MI, 2)) &&",
          "422:     (MCOperand_getImm(MCInst_getOperand(MI, 2)) == -1)) {",
          "424:     MCInst_setOpcodePub(MI, TMS320C64X_INS_NOT);",
          "425:     MI->size--;",
          "427:     SStream_concat0(O, \"NOT\\t\");",
          "428:     printOperand(MI, 1, O);",
          "429:     SStream_concat0(O, \", \");",
          "430:     printOperand(MI, 0, O);",
          "432:     return true;",
          "433:    }",
          "434:    break;",
          "435:  }",
          "436:  switch(opcode) {",
          "438:   case TMS320C64x_MVK_d1_rr:",
          "440:   case TMS320C64x_MVK_l2_ir:",
          "441:    if((MCInst_getNumOperands(MI) == 2) &&",
          "442:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "443:     MCOperand_isImm(MCInst_getOperand(MI, 1)) &&",
          "444:     (MCOperand_getImm(MCInst_getOperand(MI, 1)) == 0)) {",
          "446:     MCInst_setOpcodePub(MI, TMS320C64X_INS_ZERO);",
          "447:     MI->size--;",
          "449:     SStream_concat0(O, \"ZERO\\t\");",
          "450:     printOperand(MI, 0, O);",
          "452:     return true;",
          "453:    }",
          "454:    break;",
          "455:  }",
          "456:  switch(opcode) {",
          "458:   case TMS320C64x_SUB_l1_rrp_x1:",
          "460:   case TMS320C64x_SUB_s1_rrr:",
          "461:    if((MCInst_getNumOperands(MI) == 3) &&",
          "462:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "463:     MCOperand_isReg(MCInst_getOperand(MI, 1)) &&",
          "464:     MCOperand_isReg(MCInst_getOperand(MI, 2)) &&",
          "465:     (MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 2)))) {",
          "467:     MCInst_setOpcodePub(MI, TMS320C64X_INS_ZERO);",
          "468:     MI->size -= 2;",
          "470:     SStream_concat0(O, \"ZERO\\t\");",
          "471:     printOperand(MI, 0, O);",
          "473:     return true;",
          "474:    }",
          "475:    break;",
          "476:  }",
          "477:  switch(opcode) {",
          "479:   case TMS320C64x_SUB_l1_irr:",
          "480:   case TMS320C64x_SUB_l1_ipp:",
          "482:   case TMS320C64x_SUB_s1_irr:",
          "483:    if((MCInst_getNumOperands(MI) == 3) &&",
          "484:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "485:     MCOperand_isReg(MCInst_getOperand(MI, 1)) &&",
          "486:     MCOperand_isImm(MCInst_getOperand(MI, 2)) &&",
          "487:     (MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0)) {",
          "489:     MCInst_setOpcodePub(MI, TMS320C64X_INS_NEG);",
          "490:     MI->size--;",
          "492:     SStream_concat0(O, \"NEG\\t\");",
          "493:     printOperand(MI, 1, O);",
          "494:     SStream_concat0(O, \", \");",
          "495:     printOperand(MI, 0, O);",
          "497:     return true;",
          "498:    }",
          "499:    break;",
          "500:  }",
          "501:  switch(opcode) {",
          "503:   case TMS320C64x_PACKLH2_l1_rrr_x2:",
          "505:   case TMS320C64x_PACKLH2_s1_rrr:",
          "506:    if((MCInst_getNumOperands(MI) == 3) &&",
          "507:     MCOperand_isReg(MCInst_getOperand(MI, 0)) &&",
          "508:     MCOperand_isReg(MCInst_getOperand(MI, 1)) &&",
          "509:     MCOperand_isReg(MCInst_getOperand(MI, 2)) &&",
          "510:     (MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 2)))) {",
          "512:     MCInst_setOpcodePub(MI, TMS320C64X_INS_SWAP2);",
          "513:     MI->size--;",
          "515:     SStream_concat0(O, \"SWAP2\\t\");",
          "516:     printOperand(MI, 1, O);",
          "517:     SStream_concat0(O, \", \");",
          "518:     printOperand(MI, 0, O);",
          "520:     return true;",
          "521:    }",
          "522:    break;",
          "523:  }",
          "524:  switch(opcode) {",
          "527:   case TMS320C64x_NOP_n:",
          "528:    if((MCInst_getNumOperands(MI) == 1) &&",
          "529:     MCOperand_isImm(MCInst_getOperand(MI, 0)) &&",
          "530:     (MCOperand_getReg(MCInst_getOperand(MI, 0)) == 16)) {",
          "532:     MCInst_setOpcodePub(MI, TMS320C64X_INS_IDLE);",
          "533:     MI->size--;",
          "535:     SStream_concat0(O, \"IDLE\");",
          "537:     return true;",
          "538:    }",
          "539:    if((MCInst_getNumOperands(MI) == 1) &&",
          "540:     MCOperand_isImm(MCInst_getOperand(MI, 0)) &&",
          "541:     (MCOperand_getReg(MCInst_getOperand(MI, 0)) == 1)) {",
          "543:     MI->size--;",
          "545:     SStream_concat0(O, \"NOP\");",
          "547:     return true;",
          "548:    }",
          "549:    break;",
          "550:  }",
          "552:  return false;",
          "553: }",
          "555: void TMS320C64x_printInst(MCInst *MI, SStream *O, void *Info)",
          "556: {",
          "557:  if(!printAliasInstruction(MI, O, Info))",
          "558:   printInstruction(MI, O, Info);",
          "559: }",
          "561: #endif",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xInstPrinter.h||arch/TMS320C64x/TMS320C64xInstPrinter.h": [
          "File: arch/TMS320C64x/TMS320C64xInstPrinter.h -> arch/TMS320C64x/TMS320C64xInstPrinter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef CS_TMS320C64XINSTPRINTER_H",
          "5: #define CS_TMS320C64XINSTPRINTER_H",
          "7: #include \"../../MCInst.h\"",
          "8: #include \"../../MCRegisterInfo.h\"",
          "9: #include \"../../SStream.h\"",
          "11: void TMS320C64x_printInst(MCInst *MI, SStream *O, void *Info);",
          "13: void TMS320C64x_post_printer(csh ud, cs_insn *insn, char *insn_asm, MCInst *mci);",
          "15: #endif",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xMapping.c||arch/TMS320C64x/TMS320C64xMapping.c": [
          "File: arch/TMS320C64x/TMS320C64xMapping.c -> arch/TMS320C64x/TMS320C64xMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifdef CAPSTONE_HAS_TMS320C64X",
          "6: #include <stdio.h> // debug",
          "7: #include <string.h>",
          "9: #include \"../../utils.h\"",
          "11: #include \"TMS320C64xMapping.h\"",
          "13: #define GET_INSTRINFO_ENUM",
          "14: #include \"TMS320C64xGenInstrInfo.inc\"",
          "16: static name_map reg_name_maps[] = {",
          "17:  { TMS320C64X_REG_INVALID, NULL },",
          "19:  { TMS320C64X_REG_AMR, \"AMR\" },",
          "20:  { TMS320C64X_REG_CSR, \"CSR\" },",
          "21:  { TMS320C64X_REG_DIER, \"DIER\" },",
          "22:  { TMS320C64X_REG_DNUM, \"DNUM\" },",
          "23:  { TMS320C64X_REG_ECR, \"ECR\" },",
          "24:  { TMS320C64X_REG_GFPGFR, \"GFPGFR\" },",
          "25:  { TMS320C64X_REG_GPLYA, \"GPLYA\" },",
          "26:  { TMS320C64X_REG_GPLYB, \"GPLYB\" },",
          "27:  { TMS320C64X_REG_ICR, \"ICR\" },",
          "28:  { TMS320C64X_REG_IER, \"IER\" },",
          "29:  { TMS320C64X_REG_IERR, \"IERR\" },",
          "30:  { TMS320C64X_REG_ILC, \"ILC\" },",
          "31:  { TMS320C64X_REG_IRP, \"IRP\" },",
          "32:  { TMS320C64X_REG_ISR, \"ISR\" },",
          "33:  { TMS320C64X_REG_ISTP, \"ISTP\" },",
          "34:  { TMS320C64X_REG_ITSR, \"ITSR\" },",
          "35:  { TMS320C64X_REG_NRP, \"NRP\" },",
          "36:  { TMS320C64X_REG_NTSR, \"NTSR\" },",
          "37:  { TMS320C64X_REG_REP, \"REP\" },",
          "38:  { TMS320C64X_REG_RILC, \"RILC\" },",
          "39:  { TMS320C64X_REG_SSR, \"SSR\" },",
          "40:  { TMS320C64X_REG_TSCH, \"TSCH\" },",
          "41:  { TMS320C64X_REG_TSCL, \"TSCL\" },",
          "42:  { TMS320C64X_REG_TSR, \"TSR\" },",
          "43:  { TMS320C64X_REG_A0, \"A0\" },",
          "44:  { TMS320C64X_REG_A1, \"A1\" },",
          "45:  { TMS320C64X_REG_A2, \"A2\" },",
          "46:  { TMS320C64X_REG_A3, \"A3\" },",
          "47:  { TMS320C64X_REG_A4, \"A4\" },",
          "48:  { TMS320C64X_REG_A5, \"A5\" },",
          "49:  { TMS320C64X_REG_A6, \"A6\" },",
          "50:  { TMS320C64X_REG_A7, \"A7\" },",
          "51:  { TMS320C64X_REG_A8, \"A8\" },",
          "52:  { TMS320C64X_REG_A9, \"A9\" },",
          "53:  { TMS320C64X_REG_A10, \"A10\" },",
          "54:  { TMS320C64X_REG_A11, \"A11\" },",
          "55:  { TMS320C64X_REG_A12, \"A12\" },",
          "56:  { TMS320C64X_REG_A13, \"A13\" },",
          "57:  { TMS320C64X_REG_A14, \"A14\" },",
          "58:  { TMS320C64X_REG_A15, \"A15\" },",
          "59:  { TMS320C64X_REG_A16, \"A16\" },",
          "60:  { TMS320C64X_REG_A17, \"A17\" },",
          "61:  { TMS320C64X_REG_A18, \"A18\" },",
          "62:  { TMS320C64X_REG_A19, \"A19\" },",
          "63:  { TMS320C64X_REG_A20, \"A20\" },",
          "64:  { TMS320C64X_REG_A21, \"A21\" },",
          "65:  { TMS320C64X_REG_A22, \"A22\" },",
          "66:  { TMS320C64X_REG_A23, \"A23\" },",
          "67:  { TMS320C64X_REG_A24, \"A24\" },",
          "68:  { TMS320C64X_REG_A25, \"A25\" },",
          "69:  { TMS320C64X_REG_A26, \"A26\" },",
          "70:  { TMS320C64X_REG_A27, \"A27\" },",
          "71:  { TMS320C64X_REG_A28, \"A28\" },",
          "72:  { TMS320C64X_REG_A29, \"A29\" },",
          "73:  { TMS320C64X_REG_A30, \"A30\" },",
          "74:  { TMS320C64X_REG_A31, \"A31\" },",
          "75:  { TMS320C64X_REG_B0, \"B0\" },",
          "76:  { TMS320C64X_REG_B1, \"B1\" },",
          "77:  { TMS320C64X_REG_B2, \"B2\" },",
          "78:  { TMS320C64X_REG_B3, \"B3\" },",
          "79:  { TMS320C64X_REG_B4, \"B4\" },",
          "80:  { TMS320C64X_REG_B5, \"B5\" },",
          "81:  { TMS320C64X_REG_B6, \"B6\" },",
          "82:  { TMS320C64X_REG_B7, \"B7\" },",
          "83:  { TMS320C64X_REG_B8, \"B8\" },",
          "84:  { TMS320C64X_REG_B9, \"B9\" },",
          "85:  { TMS320C64X_REG_B10, \"B10\" },",
          "86:  { TMS320C64X_REG_B11, \"B11\" },",
          "87:  { TMS320C64X_REG_B12, \"B12\" },",
          "88:  { TMS320C64X_REG_B13, \"B13\" },",
          "89:  { TMS320C64X_REG_B14, \"B14\" },",
          "90:  { TMS320C64X_REG_B15, \"B15\" },",
          "91:  { TMS320C64X_REG_B16, \"B16\" },",
          "92:  { TMS320C64X_REG_B17, \"B17\" },",
          "93:  { TMS320C64X_REG_B18, \"B18\" },",
          "94:  { TMS320C64X_REG_B19, \"B19\" },",
          "95:  { TMS320C64X_REG_B20, \"B20\" },",
          "96:  { TMS320C64X_REG_B21, \"B21\" },",
          "97:  { TMS320C64X_REG_B22, \"B22\" },",
          "98:  { TMS320C64X_REG_B23, \"B23\" },",
          "99:  { TMS320C64X_REG_B24, \"B24\" },",
          "100:  { TMS320C64X_REG_B25, \"B25\" },",
          "101:  { TMS320C64X_REG_B26, \"B26\" },",
          "102:  { TMS320C64X_REG_B27, \"B27\" },",
          "103:  { TMS320C64X_REG_B28, \"B28\" },",
          "104:  { TMS320C64X_REG_B29, \"B29\" },",
          "105:  { TMS320C64X_REG_B30, \"B30\" },",
          "106:  { TMS320C64X_REG_B31, \"B31\" },",
          "107:  { TMS320C64X_REG_PCE1, \"PCE1\" },",
          "108: };",
          "110: const char *TMS320C64x_reg_name(csh handle, unsigned int reg)",
          "111: {",
          "112: #ifndef CAPSTONE_DIET",
          "113:  if (reg >= TMS320C64X_REG_ENDING)",
          "114:   return NULL;",
          "116:  return reg_name_maps[reg].name;",
          "117: #else",
          "118:  return NULL;",
          "119: #endif",
          "120: }",
          "122: tms320c64x_reg TMS320C64x_reg_id(char *name)",
          "123: {",
          "124:  int i;",
          "126:  for(i = 1; i < ARR_SIZE(reg_name_maps); i++) {",
          "127:   if (!strcmp(name, reg_name_maps[i].name))",
          "128:    return reg_name_maps[i].id;",
          "129:  }",
          "131:  return 0;",
          "132: }",
          "134: static insn_map insns[] = {",
          "135:  {",
          "136:   0, 0,",
          "137: #ifndef CAPSTONE_DIET",
          "138:   { 0 }, { 0 }, { 0 }, 0, 0",
          "139: #endif",
          "140:  },",
          "142:  {",
          "143:   TMS320C64x_ABS2_l2_rr, TMS320C64X_INS_ABS2,",
          "144: #ifndef CAPSTONE_DIET",
          "145:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "146: #endif",
          "147:  },",
          "148:  {",
          "149:   TMS320C64x_ABS_l1_pp, TMS320C64X_INS_ABS,",
          "150: #ifndef CAPSTONE_DIET",
          "151:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "152: #endif",
          "153:  },",
          "154:  {",
          "155:   TMS320C64x_ABS_l1_rr, TMS320C64X_INS_ABS,",
          "156: #ifndef CAPSTONE_DIET",
          "157:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "158: #endif",
          "159:  },",
          "160:  {",
          "161:   TMS320C64x_ADD2_d2_rrr, TMS320C64X_INS_ADD2,",
          "162: #ifndef CAPSTONE_DIET",
          "163:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "164: #endif",
          "165:  },",
          "166:  {",
          "167:   TMS320C64x_ADD2_l1_rrr_x2, TMS320C64X_INS_ADD2,",
          "168: #ifndef CAPSTONE_DIET",
          "169:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "170: #endif",
          "171:  },",
          "172:  {",
          "173:   TMS320C64x_ADD2_s1_rrr, TMS320C64X_INS_ADD2,",
          "174: #ifndef CAPSTONE_DIET",
          "175:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "176: #endif",
          "177:  },",
          "178:  {",
          "179:   TMS320C64x_ADD4_l1_rrr_x2, TMS320C64X_INS_ADD4,",
          "180: #ifndef CAPSTONE_DIET",
          "181:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "182: #endif",
          "183:  },",
          "184:  {",
          "185:   TMS320C64x_ADDAB_d1_rir, TMS320C64X_INS_ADDAB,",
          "186: #ifndef CAPSTONE_DIET",
          "187:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "188: #endif",
          "189:  },",
          "190:  {",
          "191:   TMS320C64x_ADDAB_d1_rrr, TMS320C64X_INS_ADDAB,",
          "192: #ifndef CAPSTONE_DIET",
          "193:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "194: #endif",
          "195:  },",
          "196:  {",
          "197:   TMS320C64x_ADDAD_d1_rir, TMS320C64X_INS_ADDAD,",
          "198: #ifndef CAPSTONE_DIET",
          "199:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "200: #endif",
          "201:  },",
          "202:  {",
          "203:   TMS320C64x_ADDAD_d1_rrr, TMS320C64X_INS_ADDAD,",
          "204: #ifndef CAPSTONE_DIET",
          "205:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "206: #endif",
          "207:  },",
          "208:  {",
          "209:   TMS320C64x_ADDAH_d1_rir, TMS320C64X_INS_ADDAH,",
          "210: #ifndef CAPSTONE_DIET",
          "211:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "212: #endif",
          "213:  },",
          "214:  {",
          "215:   TMS320C64x_ADDAH_d1_rrr, TMS320C64X_INS_ADDAH,",
          "216: #ifndef CAPSTONE_DIET",
          "217:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "218: #endif",
          "219:  },",
          "220:  {",
          "221:   TMS320C64x_ADDAW_d1_rir, TMS320C64X_INS_ADDAW,",
          "222: #ifndef CAPSTONE_DIET",
          "223:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "224: #endif",
          "225:  },",
          "226:  {",
          "227:   TMS320C64x_ADDAW_d1_rrr, TMS320C64X_INS_ADDAW,",
          "228: #ifndef CAPSTONE_DIET",
          "229:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "230: #endif",
          "231:  },",
          "232:  {",
          "233:   TMS320C64x_ADDKPC_s3_iir, TMS320C64X_INS_ADDKPC,",
          "234: #ifndef CAPSTONE_DIET",
          "235:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "236: #endif",
          "237:  },",
          "238:  {",
          "239:   TMS320C64x_ADDK_s2_ir, TMS320C64X_INS_ADDK,",
          "240: #ifndef CAPSTONE_DIET",
          "241:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "242: #endif",
          "243:  },",
          "244:  {",
          "245:   TMS320C64x_ADDU_l1_rpp, TMS320C64X_INS_ADDU,",
          "246: #ifndef CAPSTONE_DIET",
          "247:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "248: #endif",
          "249:  },",
          "250:  {",
          "251:   TMS320C64x_ADDU_l1_rrp_x2, TMS320C64X_INS_ADDU,",
          "252: #ifndef CAPSTONE_DIET",
          "253:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "254: #endif",
          "255:  },",
          "256:  {",
          "257:   TMS320C64x_ADD_d1_rir, TMS320C64X_INS_ADD,",
          "258: #ifndef CAPSTONE_DIET",
          "259:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "260: #endif",
          "261:  },",
          "262:  {",
          "263:   TMS320C64x_ADD_d1_rrr, TMS320C64X_INS_ADD,",
          "264: #ifndef CAPSTONE_DIET",
          "265:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "266: #endif",
          "267:  },",
          "268:  {",
          "269:   TMS320C64x_ADD_d2_rir, TMS320C64X_INS_ADD,",
          "270: #ifndef CAPSTONE_DIET",
          "271:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "272: #endif",
          "273:  },",
          "274:  {",
          "275:   TMS320C64x_ADD_d2_rrr, TMS320C64X_INS_ADD,",
          "276: #ifndef CAPSTONE_DIET",
          "277:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "278: #endif",
          "279:  },",
          "280:  {",
          "281:   TMS320C64x_ADD_l1_ipp, TMS320C64X_INS_ADD,",
          "282: #ifndef CAPSTONE_DIET",
          "283:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "284: #endif",
          "285:  },",
          "286:  {",
          "287:   TMS320C64x_ADD_l1_irr, TMS320C64X_INS_ADD,",
          "288: #ifndef CAPSTONE_DIET",
          "289:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "290: #endif",
          "291:  },",
          "292:  {",
          "293:   TMS320C64x_ADD_l1_rpp, TMS320C64X_INS_ADD,",
          "294: #ifndef CAPSTONE_DIET",
          "295:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "296: #endif",
          "297:  },",
          "298:  {",
          "299:   TMS320C64x_ADD_l1_rrp_x2, TMS320C64X_INS_ADD,",
          "300: #ifndef CAPSTONE_DIET",
          "301:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "302: #endif",
          "303:  },",
          "304:  {",
          "305:   TMS320C64x_ADD_l1_rrr_x2, TMS320C64X_INS_ADD,",
          "306: #ifndef CAPSTONE_DIET",
          "307:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "308: #endif",
          "309:  },",
          "310:  {",
          "311:   TMS320C64x_ADD_s1_irr, TMS320C64X_INS_ADD,",
          "312: #ifndef CAPSTONE_DIET",
          "313:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "314: #endif",
          "315:  },",
          "316:  {",
          "317:   TMS320C64x_ADD_s1_rrr, TMS320C64X_INS_ADD,",
          "318: #ifndef CAPSTONE_DIET",
          "319:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "320: #endif",
          "321:  },",
          "322:  {",
          "323:   TMS320C64x_ANDN_d2_rrr, TMS320C64X_INS_ANDN,",
          "324: #ifndef CAPSTONE_DIET",
          "325:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "326: #endif",
          "327:  },",
          "328:  {",
          "329:   TMS320C64x_ANDN_l1_rrr_x2, TMS320C64X_INS_ANDN,",
          "330: #ifndef CAPSTONE_DIET",
          "331:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "332: #endif",
          "333:  },",
          "334:  {",
          "335:   TMS320C64x_ANDN_s4_rrr, TMS320C64X_INS_ANDN,",
          "336: #ifndef CAPSTONE_DIET",
          "337:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "338: #endif",
          "339:  },",
          "340:  {",
          "341:   TMS320C64x_AND_d2_rir, TMS320C64X_INS_AND,",
          "342: #ifndef CAPSTONE_DIET",
          "343:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "344: #endif",
          "345:  },",
          "346:  {",
          "347:   TMS320C64x_AND_d2_rrr, TMS320C64X_INS_AND,",
          "348: #ifndef CAPSTONE_DIET",
          "349:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "350: #endif",
          "351:  },",
          "352:  {",
          "353:   TMS320C64x_AND_l1_irr, TMS320C64X_INS_AND,",
          "354: #ifndef CAPSTONE_DIET",
          "355:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "356: #endif",
          "357:  },",
          "358:  {",
          "359:   TMS320C64x_AND_l1_rrr_x2, TMS320C64X_INS_AND,",
          "360: #ifndef CAPSTONE_DIET",
          "361:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "362: #endif",
          "363:  },",
          "364:  {",
          "365:   TMS320C64x_AND_s1_irr, TMS320C64X_INS_AND,",
          "366: #ifndef CAPSTONE_DIET",
          "367:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "368: #endif",
          "369:  },",
          "370:  {",
          "371:   TMS320C64x_AND_s1_rrr, TMS320C64X_INS_AND,",
          "372: #ifndef CAPSTONE_DIET",
          "373:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "374: #endif",
          "375:  },",
          "376:  {",
          "377:   TMS320C64x_AVG2_m1_rrr, TMS320C64X_INS_AVG2,",
          "378: #ifndef CAPSTONE_DIET",
          "379:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "380: #endif",
          "381:  },",
          "382:  {",
          "383:   TMS320C64x_AVGU4_m1_rrr, TMS320C64X_INS_AVGU4,",
          "384: #ifndef CAPSTONE_DIET",
          "385:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "386: #endif",
          "387:  },",
          "388:  {",
          "389:   TMS320C64x_BDEC_s8_ir, TMS320C64X_INS_BDEC,",
          "390: #ifndef CAPSTONE_DIET",
          "391:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "392: #endif",
          "393:  },",
          "394:  {",
          "395:   TMS320C64x_BITC4_m2_rr, TMS320C64X_INS_BITC4,",
          "396: #ifndef CAPSTONE_DIET",
          "397:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "398: #endif",
          "399:  },",
          "400:  {",
          "401:   TMS320C64x_BNOP_s10_ri, TMS320C64X_INS_BNOP,",
          "402: #ifndef CAPSTONE_DIET",
          "403:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "404: #endif",
          "405:  },",
          "406:  {",
          "407:   TMS320C64x_BNOP_s9_ii, TMS320C64X_INS_BNOP,",
          "408: #ifndef CAPSTONE_DIET",
          "409:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "410: #endif",
          "411:  },",
          "412:  {",
          "413:   TMS320C64x_BPOS_s8_ir, TMS320C64X_INS_BPOS,",
          "414: #ifndef CAPSTONE_DIET",
          "415:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "416: #endif",
          "417:  },",
          "418:  {",
          "419:   TMS320C64x_B_s5_i, TMS320C64X_INS_B,",
          "420: #ifndef CAPSTONE_DIET",
          "421:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "422: #endif",
          "423:  },",
          "424:  {",
          "425:   TMS320C64x_B_s6_r, TMS320C64X_INS_B,",
          "426: #ifndef CAPSTONE_DIET",
          "427:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "428: #endif",
          "429:  },",
          "430:  {",
          "431:   TMS320C64x_B_s7_irp, TMS320C64X_INS_B,",
          "432: #ifndef CAPSTONE_DIET",
          "433:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "434: #endif",
          "435:  },",
          "436:  {",
          "437:   TMS320C64x_B_s7_nrp, TMS320C64X_INS_B,",
          "438: #ifndef CAPSTONE_DIET",
          "439:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 1, 0",
          "440: #endif",
          "441:  },",
          "442:  {",
          "443:   TMS320C64x_CLR_s15_riir, TMS320C64X_INS_CLR,",
          "444: #ifndef CAPSTONE_DIET",
          "445:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "446: #endif",
          "447:  },",
          "448:  {",
          "449:   TMS320C64x_CLR_s1_rrr, TMS320C64X_INS_CLR,",
          "450: #ifndef CAPSTONE_DIET",
          "451:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "452: #endif",
          "453:  },",
          "454:  {",
          "455:   TMS320C64x_CMPEQ2_s1_rrr, TMS320C64X_INS_CMPEQ2,",
          "456: #ifndef CAPSTONE_DIET",
          "457:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "458: #endif",
          "459:  },",
          "460:  {",
          "461:   TMS320C64x_CMPEQ4_s1_rrr, TMS320C64X_INS_CMPEQ4,",
          "462: #ifndef CAPSTONE_DIET",
          "463:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "464: #endif",
          "465:  },",
          "466:  {",
          "467:   TMS320C64x_CMPEQ_l1_ipr, TMS320C64X_INS_CMPEQ,",
          "468: #ifndef CAPSTONE_DIET",
          "469:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "470: #endif",
          "471:  },",
          "472:  {",
          "473:   TMS320C64x_CMPEQ_l1_irr, TMS320C64X_INS_CMPEQ,",
          "474: #ifndef CAPSTONE_DIET",
          "475:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "476: #endif",
          "477:  },",
          "478:  {",
          "479:   TMS320C64x_CMPEQ_l1_rpr, TMS320C64X_INS_CMPEQ,",
          "480: #ifndef CAPSTONE_DIET",
          "481:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "482: #endif",
          "483:  },",
          "484:  {",
          "485:   TMS320C64x_CMPEQ_l1_rrr_x2, TMS320C64X_INS_CMPEQ,",
          "486: #ifndef CAPSTONE_DIET",
          "487:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "488: #endif",
          "489:  },",
          "490:  {",
          "491:   TMS320C64x_CMPGT2_s1_rrr, TMS320C64X_INS_CMPGT2,",
          "492: #ifndef CAPSTONE_DIET",
          "493:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "494: #endif",
          "495:  },",
          "496:  {",
          "497:   TMS320C64x_CMPGTU4_s1_rrr, TMS320C64X_INS_CMPGTU4,",
          "498: #ifndef CAPSTONE_DIET",
          "499:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "500: #endif",
          "501:  },",
          "502:  {",
          "503:   TMS320C64x_CMPGT_l1_ipr, TMS320C64X_INS_CMPGT,",
          "504: #ifndef CAPSTONE_DIET",
          "505:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "506: #endif",
          "507:  },",
          "508:  {",
          "509:   TMS320C64x_CMPGT_l1_irr, TMS320C64X_INS_CMPGT,",
          "510: #ifndef CAPSTONE_DIET",
          "511:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "512: #endif",
          "513:  },",
          "514:  {",
          "515:   TMS320C64x_CMPGT_l1_rpr, TMS320C64X_INS_CMPGT,",
          "516: #ifndef CAPSTONE_DIET",
          "517:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "518: #endif",
          "519:  },",
          "520:  {",
          "521:   TMS320C64x_CMPGT_l1_rrr_x2, TMS320C64X_INS_CMPGT,",
          "522: #ifndef CAPSTONE_DIET",
          "523:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "524: #endif",
          "525:  },",
          "526:  {",
          "527:   TMS320C64x_CMPLTU_l1_ipr, TMS320C64X_INS_CMPLTU,",
          "528: #ifndef CAPSTONE_DIET",
          "529:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "530: #endif",
          "531:  },",
          "532:  {",
          "533:   TMS320C64x_CMPLTU_l1_irr, TMS320C64X_INS_CMPLTU,",
          "534: #ifndef CAPSTONE_DIET",
          "535:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "536: #endif",
          "537:  },",
          "538:  {",
          "539:   TMS320C64x_CMPLTU_l1_rpr, TMS320C64X_INS_CMPLTU,",
          "540: #ifndef CAPSTONE_DIET",
          "541:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "542: #endif",
          "543:  },",
          "544:  {",
          "545:   TMS320C64x_CMPLTU_l1_rrr_x2, TMS320C64X_INS_CMPLTU,",
          "546: #ifndef CAPSTONE_DIET",
          "547:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "548: #endif",
          "549:  },",
          "550:  {",
          "551:   TMS320C64x_CMPLT_l1_ipr, TMS320C64X_INS_CMPLT,",
          "552: #ifndef CAPSTONE_DIET",
          "553:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "554: #endif",
          "555:  },",
          "556:  {",
          "557:   TMS320C64x_CMPLT_l1_irr, TMS320C64X_INS_CMPLT,",
          "558: #ifndef CAPSTONE_DIET",
          "559:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "560: #endif",
          "561:  },",
          "562:  {",
          "563:   TMS320C64x_CMPLT_l1_rpr, TMS320C64X_INS_CMPLT,",
          "564: #ifndef CAPSTONE_DIET",
          "565:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "566: #endif",
          "567:  },",
          "568:  {",
          "569:   TMS320C64x_CMPLT_l1_rrr_x2, TMS320C64X_INS_CMPLT,",
          "570: #ifndef CAPSTONE_DIET",
          "571:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "572: #endif",
          "573:  },",
          "574:  {",
          "575:   TMS320C64x_DEAL_m2_rr, TMS320C64X_INS_DEAL,",
          "576: #ifndef CAPSTONE_DIET",
          "577:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "578: #endif",
          "579:  },",
          "580:  {",
          "581:   TMS320C64x_DOTP2_m1_rrp, TMS320C64X_INS_DOTP2,",
          "582: #ifndef CAPSTONE_DIET",
          "583:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "584: #endif",
          "585:  },",
          "586:  {",
          "587:   TMS320C64x_DOTP2_m1_rrr, TMS320C64X_INS_DOTP2,",
          "588: #ifndef CAPSTONE_DIET",
          "589:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "590: #endif",
          "591:  },",
          "592:  {",
          "593:   TMS320C64x_DOTPN2_m1_rrr, TMS320C64X_INS_DOTPN2,",
          "594: #ifndef CAPSTONE_DIET",
          "595:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "596: #endif",
          "597:  },",
          "598:  {",
          "599:   TMS320C64x_DOTPNRSU2_m1_rrr, TMS320C64X_INS_DOTPNRSU2,",
          "600: #ifndef CAPSTONE_DIET",
          "601:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "602: #endif",
          "603:  },",
          "604:  {",
          "605:   TMS320C64x_DOTPRSU2_m1_rrr, TMS320C64X_INS_DOTPRSU2,",
          "606: #ifndef CAPSTONE_DIET",
          "607:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "608: #endif",
          "609:  },",
          "610:  {",
          "611:   TMS320C64x_DOTPSU4_m1_rrr, TMS320C64X_INS_DOTPSU4,",
          "612: #ifndef CAPSTONE_DIET",
          "613:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "614: #endif",
          "615:  },",
          "616:  {",
          "617:   TMS320C64x_DOTPU4_m1_rrr, TMS320C64X_INS_DOTPU4,",
          "618: #ifndef CAPSTONE_DIET",
          "619:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "620: #endif",
          "621:  },",
          "622:  {",
          "623:   TMS320C64x_EXTU_s15_riir, TMS320C64X_INS_EXTU,",
          "624: #ifndef CAPSTONE_DIET",
          "625:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "626: #endif",
          "627:  },",
          "628:  {",
          "629:   TMS320C64x_EXTU_s1_rrr, TMS320C64X_INS_EXTU,",
          "630: #ifndef CAPSTONE_DIET",
          "631:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "632: #endif",
          "633:  },",
          "634:  {",
          "635:   TMS320C64x_EXT_s15_riir, TMS320C64X_INS_EXT,",
          "636: #ifndef CAPSTONE_DIET",
          "637:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "638: #endif",
          "639:  },",
          "640:  {",
          "641:   TMS320C64x_EXT_s1_rrr, TMS320C64X_INS_EXT,",
          "642: #ifndef CAPSTONE_DIET",
          "643:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "644: #endif",
          "645:  },",
          "646:  {",
          "647:   TMS320C64x_GMPGTU_l1_ipr, TMS320C64X_INS_GMPGTU,",
          "648: #ifndef CAPSTONE_DIET",
          "649:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "650: #endif",
          "651:  },",
          "652:  {",
          "653:   TMS320C64x_GMPGTU_l1_irr, TMS320C64X_INS_GMPGTU,",
          "654: #ifndef CAPSTONE_DIET",
          "655:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "656: #endif",
          "657:  },",
          "658:  {",
          "659:   TMS320C64x_GMPGTU_l1_rpr, TMS320C64X_INS_GMPGTU,",
          "660: #ifndef CAPSTONE_DIET",
          "661:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "662: #endif",
          "663:  },",
          "664:  {",
          "665:   TMS320C64x_GMPGTU_l1_rrr_x2, TMS320C64X_INS_GMPGTU,",
          "666: #ifndef CAPSTONE_DIET",
          "667:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "668: #endif",
          "669:  },",
          "670:  {",
          "671:   TMS320C64x_GMPY4_m1_rrr, TMS320C64X_INS_GMPY4,",
          "672: #ifndef CAPSTONE_DIET",
          "673:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "674: #endif",
          "675:  },",
          "676:  {",
          "677:   TMS320C64x_LDBU_d5_mr, TMS320C64X_INS_LDBU,",
          "678: #ifndef CAPSTONE_DIET",
          "679:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "680: #endif",
          "681:  },",
          "682:  {",
          "683:   TMS320C64x_LDBU_d6_mr, TMS320C64X_INS_LDBU,",
          "684: #ifndef CAPSTONE_DIET",
          "685:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "686: #endif",
          "687:  },",
          "688:  {",
          "689:   TMS320C64x_LDB_d5_mr, TMS320C64X_INS_LDB,",
          "690: #ifndef CAPSTONE_DIET",
          "691:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "692: #endif",
          "693:  },",
          "694:  {",
          "695:   TMS320C64x_LDB_d6_mr, TMS320C64X_INS_LDB,",
          "696: #ifndef CAPSTONE_DIET",
          "697:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "698: #endif",
          "699:  },",
          "700:  {",
          "701:   TMS320C64x_LDDW_d7_mp, TMS320C64X_INS_LDDW,",
          "702: #ifndef CAPSTONE_DIET",
          "703:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "704: #endif",
          "705:  },",
          "706:  {",
          "707:   TMS320C64x_LDHU_d5_mr, TMS320C64X_INS_LDHU,",
          "708: #ifndef CAPSTONE_DIET",
          "709:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "710: #endif",
          "711:  },",
          "712:  {",
          "713:   TMS320C64x_LDHU_d6_mr, TMS320C64X_INS_LDHU,",
          "714: #ifndef CAPSTONE_DIET",
          "715:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "716: #endif",
          "717:  },",
          "718:  {",
          "719:   TMS320C64x_LDH_d5_mr, TMS320C64X_INS_LDH,",
          "720: #ifndef CAPSTONE_DIET",
          "721:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "722: #endif",
          "723:  },",
          "724:  {",
          "725:   TMS320C64x_LDH_d6_mr, TMS320C64X_INS_LDH,",
          "726: #ifndef CAPSTONE_DIET",
          "727:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "728: #endif",
          "729:  },",
          "730:  {",
          "731:   TMS320C64x_LDNDW_d8_mp, TMS320C64X_INS_LDNDW,",
          "732: #ifndef CAPSTONE_DIET",
          "733:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "734: #endif",
          "735:  },",
          "736:  {",
          "737:   TMS320C64x_LDNW_d5_mr, TMS320C64X_INS_LDNW,",
          "738: #ifndef CAPSTONE_DIET",
          "739:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "740: #endif",
          "741:  },",
          "742:  {",
          "743:   TMS320C64x_LDW_d5_mr, TMS320C64X_INS_LDW,",
          "744: #ifndef CAPSTONE_DIET",
          "745:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "746: #endif",
          "747:  },",
          "748:  {",
          "749:   TMS320C64x_LDW_d6_mr, TMS320C64X_INS_LDW,",
          "750: #ifndef CAPSTONE_DIET",
          "751:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "752: #endif",
          "753:  },",
          "754:  {",
          "755:   TMS320C64x_LMBD_l1_irr, TMS320C64X_INS_LMBD,",
          "756: #ifndef CAPSTONE_DIET",
          "757:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "758: #endif",
          "759:  },",
          "760:  {",
          "761:   TMS320C64x_LMBD_l1_rrr_x2, TMS320C64X_INS_LMBD,",
          "762: #ifndef CAPSTONE_DIET",
          "763:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "764: #endif",
          "765:  },",
          "766:  {",
          "767:   TMS320C64x_MAX2_l1_rrr_x2, TMS320C64X_INS_MAX2,",
          "768: #ifndef CAPSTONE_DIET",
          "769:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "770: #endif",
          "771:  },",
          "772:  {",
          "773:   TMS320C64x_MAXU4_l1_rrr_x2, TMS320C64X_INS_MAXU4,",
          "774: #ifndef CAPSTONE_DIET",
          "775:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "776: #endif",
          "777:  },",
          "778:  {",
          "779:   TMS320C64x_MIN2_l1_rrr_x2, TMS320C64X_INS_MIN2,",
          "780: #ifndef CAPSTONE_DIET",
          "781:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "782: #endif",
          "783:  },",
          "784:  {",
          "785:   TMS320C64x_MINU4_l1_rrr_x2, TMS320C64X_INS_MINU4,",
          "786: #ifndef CAPSTONE_DIET",
          "787:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "788: #endif",
          "789:  },",
          "790:  {",
          "791:   TMS320C64x_MPY2_m1_rrp, TMS320C64X_INS_MPY2,",
          "792: #ifndef CAPSTONE_DIET",
          "793:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "794: #endif",
          "795:  },",
          "796:  {",
          "797:   TMS320C64x_MPYHIR_m1_rrr, TMS320C64X_INS_MPYHIR,",
          "798: #ifndef CAPSTONE_DIET",
          "799:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "800: #endif",
          "801:  },",
          "802:  {",
          "803:   TMS320C64x_MPYHI_m1_rrp, TMS320C64X_INS_MPYHI,",
          "804: #ifndef CAPSTONE_DIET",
          "805:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "806: #endif",
          "807:  },",
          "808:  {",
          "809:   TMS320C64x_MPYHLU_m4_rrr, TMS320C64X_INS_MPYHLU,",
          "810: #ifndef CAPSTONE_DIET",
          "811:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "812: #endif",
          "813:  },",
          "814:  {",
          "815:   TMS320C64x_MPYHL_m4_rrr, TMS320C64X_INS_MPYHL,",
          "816: #ifndef CAPSTONE_DIET",
          "817:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "818: #endif",
          "819:  },",
          "820:  {",
          "821:   TMS320C64x_MPYHSLU_m4_rrr, TMS320C64X_INS_MPYHSLU,",
          "822: #ifndef CAPSTONE_DIET",
          "823:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "824: #endif",
          "825:  },",
          "826:  {",
          "827:   TMS320C64x_MPYHSU_m4_rrr, TMS320C64X_INS_MPYHSU,",
          "828: #ifndef CAPSTONE_DIET",
          "829:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "830: #endif",
          "831:  },",
          "832:  {",
          "833:   TMS320C64x_MPYHULS_m4_rrr, TMS320C64X_INS_MPYHULS,",
          "834: #ifndef CAPSTONE_DIET",
          "835:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "836: #endif",
          "837:  },",
          "838:  {",
          "839:   TMS320C64x_MPYHUS_m4_rrr, TMS320C64X_INS_MPYHUS,",
          "840: #ifndef CAPSTONE_DIET",
          "841:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "842: #endif",
          "843:  },",
          "844:  {",
          "845:   TMS320C64x_MPYHU_m4_rrr, TMS320C64X_INS_MPYHU,",
          "846: #ifndef CAPSTONE_DIET",
          "847:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "848: #endif",
          "849:  },",
          "850:  {",
          "851:   TMS320C64x_MPYH_m4_rrr, TMS320C64X_INS_MPYH,",
          "852: #ifndef CAPSTONE_DIET",
          "853:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "854: #endif",
          "855:  },",
          "856:  {",
          "857:   TMS320C64x_MPYLHU_m4_rrr, TMS320C64X_INS_MPYLHU,",
          "858: #ifndef CAPSTONE_DIET",
          "859:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "860: #endif",
          "861:  },",
          "862:  {",
          "863:   TMS320C64x_MPYLH_m4_rrr, TMS320C64X_INS_MPYLH,",
          "864: #ifndef CAPSTONE_DIET",
          "865:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "866: #endif",
          "867:  },",
          "868:  {",
          "869:   TMS320C64x_MPYLIR_m1_rrr, TMS320C64X_INS_MPYLIR,",
          "870: #ifndef CAPSTONE_DIET",
          "871:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "872: #endif",
          "873:  },",
          "874:  {",
          "875:   TMS320C64x_MPYLI_m1_rrp, TMS320C64X_INS_MPYLI,",
          "876: #ifndef CAPSTONE_DIET",
          "877:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "878: #endif",
          "879:  },",
          "880:  {",
          "881:   TMS320C64x_MPYLSHU_m4_rrr, TMS320C64X_INS_MPYLSHU,",
          "882: #ifndef CAPSTONE_DIET",
          "883:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "884: #endif",
          "885:  },",
          "886:  {",
          "887:   TMS320C64x_MPYLUHS_m4_rrr, TMS320C64X_INS_MPYLUHS,",
          "888: #ifndef CAPSTONE_DIET",
          "889:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "890: #endif",
          "891:  },",
          "892:  {",
          "893:   TMS320C64x_MPYSU4_m1_rrp, TMS320C64X_INS_MPYSU4,",
          "894: #ifndef CAPSTONE_DIET",
          "895:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "896: #endif",
          "897:  },",
          "898:  {",
          "899:   TMS320C64x_MPYSU_m4_irr, TMS320C64X_INS_MPYSU,",
          "900: #ifndef CAPSTONE_DIET",
          "901:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "902: #endif",
          "903:  },",
          "904:  {",
          "905:   TMS320C64x_MPYSU_m4_rrr, TMS320C64X_INS_MPYSU,",
          "906: #ifndef CAPSTONE_DIET",
          "907:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "908: #endif",
          "909:  },",
          "910:  {",
          "911:   TMS320C64x_MPYU4_m1_rrp, TMS320C64X_INS_MPYU4,",
          "912: #ifndef CAPSTONE_DIET",
          "913:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "914: #endif",
          "915:  },",
          "916:  {",
          "917:   TMS320C64x_MPYUS_m4_rrr, TMS320C64X_INS_MPYUS,",
          "918: #ifndef CAPSTONE_DIET",
          "919:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "920: #endif",
          "921:  },",
          "922:  {",
          "923:   TMS320C64x_MPYU_m4_rrr, TMS320C64X_INS_MPYU,",
          "924: #ifndef CAPSTONE_DIET",
          "925:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "926: #endif",
          "927:  },",
          "928:  {",
          "929:   TMS320C64x_MPY_m4_irr, TMS320C64X_INS_MPY,",
          "930: #ifndef CAPSTONE_DIET",
          "931:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "932: #endif",
          "933:  },",
          "934:  {",
          "935:   TMS320C64x_MPY_m4_rrr, TMS320C64X_INS_MPY,",
          "936: #ifndef CAPSTONE_DIET",
          "937:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "938: #endif",
          "939:  },",
          "940:  {",
          "941:   TMS320C64x_MVC_s1_rr, TMS320C64X_INS_MVC,",
          "942: #ifndef CAPSTONE_DIET",
          "943:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "944: #endif",
          "945:  },",
          "946:  {",
          "947:   TMS320C64x_MVC_s1_rr2, TMS320C64X_INS_MVC,",
          "948: #ifndef CAPSTONE_DIET",
          "949:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "950: #endif",
          "951:  },",
          "952:  {",
          "953:   TMS320C64x_MVD_m2_rr, TMS320C64X_INS_MVD,",
          "954: #ifndef CAPSTONE_DIET",
          "955:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "956: #endif",
          "957:  },",
          "958:  {",
          "959:   TMS320C64x_MVKLH_s12_ir, TMS320C64X_INS_MVKLH,",
          "960: #ifndef CAPSTONE_DIET",
          "961:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "962: #endif",
          "963:  },",
          "964:  {",
          "965:   TMS320C64x_MVKL_s12_ir, TMS320C64X_INS_MVKL,",
          "966: #ifndef CAPSTONE_DIET",
          "967:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "968: #endif",
          "969:  },",
          "970:  {",
          "971:   TMS320C64x_MVK_d1_rr, TMS320C64X_INS_MVK,",
          "972: #ifndef CAPSTONE_DIET",
          "973:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "974: #endif",
          "975:  },",
          "976:  {",
          "977:   TMS320C64x_MVK_l2_ir, TMS320C64X_INS_MVK,",
          "978: #ifndef CAPSTONE_DIET",
          "979:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "980: #endif",
          "981:  },",
          "982:  {",
          "983:   TMS320C64x_NOP_n, TMS320C64X_INS_NOP,",
          "984: #ifndef CAPSTONE_DIET",
          "985:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_NO, 0 }, 0, 0",
          "986: #endif",
          "987:  },",
          "988:  {",
          "989:   TMS320C64x_NORM_l1_pr, TMS320C64X_INS_NORM,",
          "990: #ifndef CAPSTONE_DIET",
          "991:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "992: #endif",
          "993:  },",
          "994:  {",
          "995:   TMS320C64x_NORM_l1_rr, TMS320C64X_INS_NORM,",
          "996: #ifndef CAPSTONE_DIET",
          "997:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "998: #endif",
          "999:  },",
          "1000:  {",
          "1001:   TMS320C64x_OR_d2_rir, TMS320C64X_INS_OR,",
          "1002: #ifndef CAPSTONE_DIET",
          "1003:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1004: #endif",
          "1005:  },",
          "1006:  {",
          "1007:   TMS320C64x_OR_d2_rrr, TMS320C64X_INS_OR,",
          "1008: #ifndef CAPSTONE_DIET",
          "1009:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1010: #endif",
          "1011:  },",
          "1012:  {",
          "1013:   TMS320C64x_OR_l1_irr, TMS320C64X_INS_OR,",
          "1014: #ifndef CAPSTONE_DIET",
          "1015:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1016: #endif",
          "1017:  },",
          "1018:  {",
          "1019:   TMS320C64x_OR_l1_rrr_x2, TMS320C64X_INS_OR,",
          "1020: #ifndef CAPSTONE_DIET",
          "1021:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1022: #endif",
          "1023:  },",
          "1024:  {",
          "1025:   TMS320C64x_OR_s1_irr, TMS320C64X_INS_OR,",
          "1026: #ifndef CAPSTONE_DIET",
          "1027:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1028: #endif",
          "1029:  },",
          "1030:  {",
          "1031:   TMS320C64x_OR_s1_rrr, TMS320C64X_INS_OR,",
          "1032: #ifndef CAPSTONE_DIET",
          "1033:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1034: #endif",
          "1035:  },",
          "1036:  {",
          "1037:   TMS320C64x_PACK2_l1_rrr_x2, TMS320C64X_INS_PACK2,",
          "1038: #ifndef CAPSTONE_DIET",
          "1039:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1040: #endif",
          "1041:  },",
          "1042:  {",
          "1043:   TMS320C64x_PACK2_s4_rrr, TMS320C64X_INS_PACK2,",
          "1044: #ifndef CAPSTONE_DIET",
          "1045:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1046: #endif",
          "1047:  },",
          "1048:  {",
          "1049:   TMS320C64x_PACKH2_l1_rrr_x2, TMS320C64X_INS_PACKH2,",
          "1050: #ifndef CAPSTONE_DIET",
          "1051:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1052: #endif",
          "1053:  },",
          "1054:  {",
          "1055:   TMS320C64x_PACKH2_s1_rrr, TMS320C64X_INS_PACKH2,",
          "1056: #ifndef CAPSTONE_DIET",
          "1057:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1058: #endif",
          "1059:  },",
          "1060:  {",
          "1061:   TMS320C64x_PACKH4_l1_rrr_x2, TMS320C64X_INS_PACKH4,",
          "1062: #ifndef CAPSTONE_DIET",
          "1063:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1064: #endif",
          "1065:  },",
          "1066:  {",
          "1067:   TMS320C64x_PACKHL2_l1_rrr_x2, TMS320C64X_INS_PACKHL2,",
          "1068: #ifndef CAPSTONE_DIET",
          "1069:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1070: #endif",
          "1071:  },",
          "1072:  {",
          "1073:   TMS320C64x_PACKHL2_s1_rrr, TMS320C64X_INS_PACKHL2,",
          "1074: #ifndef CAPSTONE_DIET",
          "1075:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1076: #endif",
          "1077:  },",
          "1078:  {",
          "1079:   TMS320C64x_PACKL4_l1_rrr_x2, TMS320C64X_INS_PACKL4,",
          "1080: #ifndef CAPSTONE_DIET",
          "1081:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1082: #endif",
          "1083:  },",
          "1084:  {",
          "1085:   TMS320C64x_PACKLH2_l1_rrr_x2, TMS320C64X_INS_PACKLH2,",
          "1086: #ifndef CAPSTONE_DIET",
          "1087:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1088: #endif",
          "1089:  },",
          "1090:  {",
          "1091:   TMS320C64x_PACKLH2_s1_rrr, TMS320C64X_INS_PACKLH2,",
          "1092: #ifndef CAPSTONE_DIET",
          "1093:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1094: #endif",
          "1095:  },",
          "1096:  {",
          "1097:   TMS320C64x_ROTL_m1_rir, TMS320C64X_INS_ROTL,",
          "1098: #ifndef CAPSTONE_DIET",
          "1099:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1100: #endif",
          "1101:  },",
          "1102:  {",
          "1103:   TMS320C64x_ROTL_m1_rrr, TMS320C64X_INS_ROTL,",
          "1104: #ifndef CAPSTONE_DIET",
          "1105:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1106: #endif",
          "1107:  },",
          "1108:  {",
          "1109:   TMS320C64x_SADD2_s4_rrr, TMS320C64X_INS_SADD2,",
          "1110: #ifndef CAPSTONE_DIET",
          "1111:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1112: #endif",
          "1113:  },",
          "1114:  {",
          "1115:   TMS320C64x_SADDU4_s4_rrr, TMS320C64X_INS_SADDU4,",
          "1116: #ifndef CAPSTONE_DIET",
          "1117:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1118: #endif",
          "1119:  },",
          "1120:  {",
          "1121:   TMS320C64x_SADDUS2_s4_rrr, TMS320C64X_INS_SADDUS2,",
          "1122: #ifndef CAPSTONE_DIET",
          "1123:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1124: #endif",
          "1125:  },",
          "1126:  {",
          "1127:   TMS320C64x_SADD_l1_ipp, TMS320C64X_INS_SADD,",
          "1128: #ifndef CAPSTONE_DIET",
          "1129:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1130: #endif",
          "1131:  },",
          "1132:  {",
          "1133:   TMS320C64x_SADD_l1_irr, TMS320C64X_INS_SADD,",
          "1134: #ifndef CAPSTONE_DIET",
          "1135:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1136: #endif",
          "1137:  },",
          "1138:  {",
          "1139:   TMS320C64x_SADD_l1_rpp, TMS320C64X_INS_SADD,",
          "1140: #ifndef CAPSTONE_DIET",
          "1141:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1142: #endif",
          "1143:  },",
          "1144:  {",
          "1145:   TMS320C64x_SADD_l1_rrr_x2, TMS320C64X_INS_SADD,",
          "1146: #ifndef CAPSTONE_DIET",
          "1147:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1148: #endif",
          "1149:  },",
          "1150:  {",
          "1151:   TMS320C64x_SADD_s1_rrr, TMS320C64X_INS_SADD,",
          "1152: #ifndef CAPSTONE_DIET",
          "1153:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1154: #endif",
          "1155:  },",
          "1156:  {",
          "1157:   TMS320C64x_SAT_l1_pr, TMS320C64X_INS_SAT,",
          "1158: #ifndef CAPSTONE_DIET",
          "1159:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1160: #endif",
          "1161:  },",
          "1162:  {",
          "1163:   TMS320C64x_SET_s15_riir, TMS320C64X_INS_SET,",
          "1164: #ifndef CAPSTONE_DIET",
          "1165:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1166: #endif",
          "1167:  },",
          "1168:  {",
          "1169:   TMS320C64x_SET_s1_rrr, TMS320C64X_INS_SET,",
          "1170: #ifndef CAPSTONE_DIET",
          "1171:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1172: #endif",
          "1173:  },",
          "1174:  {",
          "1175:   TMS320C64x_SHFL_m2_rr, TMS320C64X_INS_SHFL,",
          "1176: #ifndef CAPSTONE_DIET",
          "1177:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1178: #endif",
          "1179:  },",
          "1180:  {",
          "1181:   TMS320C64x_SHLMB_l1_rrr_x2, TMS320C64X_INS_SHLMB,",
          "1182: #ifndef CAPSTONE_DIET",
          "1183:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1184: #endif",
          "1185:  },",
          "1186:  {",
          "1187:   TMS320C64x_SHLMB_s4_rrr, TMS320C64X_INS_SHLMB,",
          "1188: #ifndef CAPSTONE_DIET",
          "1189:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1190: #endif",
          "1191:  },",
          "1192:  {",
          "1193:   TMS320C64x_SHL_s1_pip, TMS320C64X_INS_SHL,",
          "1194: #ifndef CAPSTONE_DIET",
          "1195:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1196: #endif",
          "1197:  },",
          "1198:  {",
          "1199:   TMS320C64x_SHL_s1_prp, TMS320C64X_INS_SHL,",
          "1200: #ifndef CAPSTONE_DIET",
          "1201:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1202: #endif",
          "1203:  },",
          "1204:  {",
          "1205:   TMS320C64x_SHL_s1_rip, TMS320C64X_INS_SHL,",
          "1206: #ifndef CAPSTONE_DIET",
          "1207:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1208: #endif",
          "1209:  },",
          "1210:  {",
          "1211:   TMS320C64x_SHL_s1_rir, TMS320C64X_INS_SHL,",
          "1212: #ifndef CAPSTONE_DIET",
          "1213:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1214: #endif",
          "1215:  },",
          "1216:  {",
          "1217:   TMS320C64x_SHL_s1_rrp, TMS320C64X_INS_SHL,",
          "1218: #ifndef CAPSTONE_DIET",
          "1219:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1220: #endif",
          "1221:  },",
          "1222:  {",
          "1223:   TMS320C64x_SHL_s1_rrr, TMS320C64X_INS_SHL,",
          "1224: #ifndef CAPSTONE_DIET",
          "1225:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1226: #endif",
          "1227:  },",
          "1228:  {",
          "1229:   TMS320C64x_SHR2_s1_rir, TMS320C64X_INS_SHR2,",
          "1230: #ifndef CAPSTONE_DIET",
          "1231:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1232: #endif",
          "1233:  },",
          "1234:  {",
          "1235:   TMS320C64x_SHR2_s4_rrr, TMS320C64X_INS_SHR2,",
          "1236: #ifndef CAPSTONE_DIET",
          "1237:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1238: #endif",
          "1239:  },",
          "1240:  {",
          "1241:   TMS320C64x_SHRMB_l1_rrr_x2, TMS320C64X_INS_SHRMB,",
          "1242: #ifndef CAPSTONE_DIET",
          "1243:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1244: #endif",
          "1245:  },",
          "1246:  {",
          "1247:   TMS320C64x_SHRMB_s4_rrr, TMS320C64X_INS_SHRMB,",
          "1248: #ifndef CAPSTONE_DIET",
          "1249:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1250: #endif",
          "1251:  },",
          "1252:  {",
          "1253:   TMS320C64x_SHRU2_s1_rir, TMS320C64X_INS_SHRU2,",
          "1254: #ifndef CAPSTONE_DIET",
          "1255:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1256: #endif",
          "1257:  },",
          "1258:  {",
          "1259:   TMS320C64x_SHRU2_s4_rrr, TMS320C64X_INS_SHRU2,",
          "1260: #ifndef CAPSTONE_DIET",
          "1261:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1262: #endif",
          "1263:  },",
          "1264:  {",
          "1265:   TMS320C64x_SHRU_s1_pip, TMS320C64X_INS_SHRU,",
          "1266: #ifndef CAPSTONE_DIET",
          "1267:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1268: #endif",
          "1269:  },",
          "1270:  {",
          "1271:   TMS320C64x_SHRU_s1_prp, TMS320C64X_INS_SHRU,",
          "1272: #ifndef CAPSTONE_DIET",
          "1273:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1274: #endif",
          "1275:  },",
          "1276:  {",
          "1277:   TMS320C64x_SHRU_s1_rir, TMS320C64X_INS_SHRU,",
          "1278: #ifndef CAPSTONE_DIET",
          "1279:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1280: #endif",
          "1281:  },",
          "1282:  {",
          "1283:   TMS320C64x_SHRU_s1_rrr, TMS320C64X_INS_SHRU,",
          "1284: #ifndef CAPSTONE_DIET",
          "1285:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1286: #endif",
          "1287:  },",
          "1288:  {",
          "1289:   TMS320C64x_SHR_s1_pip, TMS320C64X_INS_SHR,",
          "1290: #ifndef CAPSTONE_DIET",
          "1291:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1292: #endif",
          "1293:  },",
          "1294:  {",
          "1295:   TMS320C64x_SHR_s1_prp, TMS320C64X_INS_SHR,",
          "1296: #ifndef CAPSTONE_DIET",
          "1297:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1298: #endif",
          "1299:  },",
          "1300:  {",
          "1301:   TMS320C64x_SHR_s1_rir, TMS320C64X_INS_SHR,",
          "1302: #ifndef CAPSTONE_DIET",
          "1303:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1304: #endif",
          "1305:  },",
          "1306:  {",
          "1307:   TMS320C64x_SHR_s1_rrr, TMS320C64X_INS_SHR,",
          "1308: #ifndef CAPSTONE_DIET",
          "1309:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1310: #endif",
          "1311:  },",
          "1312:  {",
          "1313:   TMS320C64x_SMPY2_m1_rrp, TMS320C64X_INS_SMPY2,",
          "1314: #ifndef CAPSTONE_DIET",
          "1315:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1316: #endif",
          "1317:  },",
          "1318:  {",
          "1319:   TMS320C64x_SMPYHL_m4_rrr, TMS320C64X_INS_SMPYHL,",
          "1320: #ifndef CAPSTONE_DIET",
          "1321:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1322: #endif",
          "1323:  },",
          "1324:  {",
          "1325:   TMS320C64x_SMPYH_m4_rrr, TMS320C64X_INS_SMPYH,",
          "1326: #ifndef CAPSTONE_DIET",
          "1327:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1328: #endif",
          "1329:  },",
          "1330:  {",
          "1331:   TMS320C64x_SMPYLH_m4_rrr, TMS320C64X_INS_SMPYLH,",
          "1332: #ifndef CAPSTONE_DIET",
          "1333:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1334: #endif",
          "1335:  },",
          "1336:  {",
          "1337:   TMS320C64x_SMPY_m4_rrr, TMS320C64X_INS_SMPY,",
          "1338: #ifndef CAPSTONE_DIET",
          "1339:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1340: #endif",
          "1341:  },",
          "1342:  {",
          "1343:   TMS320C64x_SPACK2_s4_rrr, TMS320C64X_INS_SPACK2,",
          "1344: #ifndef CAPSTONE_DIET",
          "1345:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1346: #endif",
          "1347:  },",
          "1348:  {",
          "1349:   TMS320C64x_SPACKU4_s4_rrr, TMS320C64X_INS_SPACKU4,",
          "1350: #ifndef CAPSTONE_DIET",
          "1351:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1352: #endif",
          "1353:  },",
          "1354:  {",
          "1355:   TMS320C64x_SSHL_s1_rir, TMS320C64X_INS_SSHL,",
          "1356: #ifndef CAPSTONE_DIET",
          "1357:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1358: #endif",
          "1359:  },",
          "1360:  {",
          "1361:   TMS320C64x_SSHL_s1_rrr, TMS320C64X_INS_SSHL,",
          "1362: #ifndef CAPSTONE_DIET",
          "1363:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1364: #endif",
          "1365:  },",
          "1366:  {",
          "1367:   TMS320C64x_SSHVL_m1_rrr, TMS320C64X_INS_SSHVL,",
          "1368: #ifndef CAPSTONE_DIET",
          "1369:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1370: #endif",
          "1371:  },",
          "1372:  {",
          "1373:   TMS320C64x_SSHVR_m1_rrr, TMS320C64X_INS_SSHVR,",
          "1374: #ifndef CAPSTONE_DIET",
          "1375:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1376: #endif",
          "1377:  },",
          "1378:  {",
          "1379:   TMS320C64x_SSUB_l1_ipp, TMS320C64X_INS_SSUB,",
          "1380: #ifndef CAPSTONE_DIET",
          "1381:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1382: #endif",
          "1383:  },",
          "1384:  {",
          "1385:   TMS320C64x_SSUB_l1_irr, TMS320C64X_INS_SSUB,",
          "1386: #ifndef CAPSTONE_DIET",
          "1387:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1388: #endif",
          "1389:  },",
          "1390:  {",
          "1391:   TMS320C64x_SSUB_l1_rrr_x1, TMS320C64X_INS_SSUB,",
          "1392: #ifndef CAPSTONE_DIET",
          "1393:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1394: #endif",
          "1395:  },",
          "1396:  {",
          "1397:   TMS320C64x_SSUB_l1_rrr_x2, TMS320C64X_INS_SSUB,",
          "1398: #ifndef CAPSTONE_DIET",
          "1399:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1400: #endif",
          "1401:  },",
          "1402:  {",
          "1403:   TMS320C64x_STB_d5_rm, TMS320C64X_INS_STB,",
          "1404: #ifndef CAPSTONE_DIET",
          "1405:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1406: #endif",
          "1407:  },",
          "1408:  {",
          "1409:   TMS320C64x_STB_d6_rm, TMS320C64X_INS_STB,",
          "1410: #ifndef CAPSTONE_DIET",
          "1411:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1412: #endif",
          "1413:  },",
          "1414:  {",
          "1415:   TMS320C64x_STDW_d7_pm, TMS320C64X_INS_STDW,",
          "1416: #ifndef CAPSTONE_DIET",
          "1417:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1418: #endif",
          "1419:  },",
          "1420:  {",
          "1421:   TMS320C64x_STH_d5_rm, TMS320C64X_INS_STH,",
          "1422: #ifndef CAPSTONE_DIET",
          "1423:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1424: #endif",
          "1425:  },",
          "1426:  {",
          "1427:   TMS320C64x_STH_d6_rm, TMS320C64X_INS_STH,",
          "1428: #ifndef CAPSTONE_DIET",
          "1429:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1430: #endif",
          "1431:  },",
          "1432:  {",
          "1433:   TMS320C64x_STNDW_d8_pm, TMS320C64X_INS_STNDW,",
          "1434: #ifndef CAPSTONE_DIET",
          "1435:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1436: #endif",
          "1437:  },",
          "1438:  {",
          "1439:   TMS320C64x_STNW_d5_rm, TMS320C64X_INS_STNW,",
          "1440: #ifndef CAPSTONE_DIET",
          "1441:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1442: #endif",
          "1443:  },",
          "1444:  {",
          "1445:   TMS320C64x_STW_d5_rm, TMS320C64X_INS_STW,",
          "1446: #ifndef CAPSTONE_DIET",
          "1447:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1448: #endif",
          "1449:  },",
          "1450:  {",
          "1451:   TMS320C64x_STW_d6_rm, TMS320C64X_INS_STW,",
          "1452: #ifndef CAPSTONE_DIET",
          "1453:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1454: #endif",
          "1455:  },",
          "1456:  {",
          "1457:   TMS320C64x_SUB2_d2_rrr, TMS320C64X_INS_SUB2,",
          "1458: #ifndef CAPSTONE_DIET",
          "1459:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1460: #endif",
          "1461:  },",
          "1462:  {",
          "1463:   TMS320C64x_SUB2_l1_rrr_x2, TMS320C64X_INS_SUB2,",
          "1464: #ifndef CAPSTONE_DIET",
          "1465:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1466: #endif",
          "1467:  },",
          "1468:  {",
          "1469:   TMS320C64x_SUB2_s1_rrr, TMS320C64X_INS_SUB2,",
          "1470: #ifndef CAPSTONE_DIET",
          "1471:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1472: #endif",
          "1473:  },",
          "1474:  {",
          "1475:   TMS320C64x_SUB4_l1_rrr_x2, TMS320C64X_INS_SUB4,",
          "1476: #ifndef CAPSTONE_DIET",
          "1477:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1478: #endif",
          "1479:  },",
          "1480:  {",
          "1481:   TMS320C64x_SUBABS4_l1_rrr_x2, TMS320C64X_INS_SUBABS4,",
          "1482: #ifndef CAPSTONE_DIET",
          "1483:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1484: #endif",
          "1485:  },",
          "1486:  {",
          "1487:   TMS320C64x_SUBAB_d1_rir, TMS320C64X_INS_SUBAB,",
          "1488: #ifndef CAPSTONE_DIET",
          "1489:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1490: #endif",
          "1491:  },",
          "1492:  {",
          "1493:   TMS320C64x_SUBAB_d1_rrr, TMS320C64X_INS_SUBAB,",
          "1494: #ifndef CAPSTONE_DIET",
          "1495:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1496: #endif",
          "1497:  },",
          "1498:  {",
          "1499:   TMS320C64x_SUBAH_d1_rir, TMS320C64X_INS_SUBAH,",
          "1500: #ifndef CAPSTONE_DIET",
          "1501:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1502: #endif",
          "1503:  },",
          "1504:  {",
          "1505:   TMS320C64x_SUBAH_d1_rrr, TMS320C64X_INS_SUBAH,",
          "1506: #ifndef CAPSTONE_DIET",
          "1507:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1508: #endif",
          "1509:  },",
          "1510:  {",
          "1511:   TMS320C64x_SUBAW_d1_rir, TMS320C64X_INS_SUBAW,",
          "1512: #ifndef CAPSTONE_DIET",
          "1513:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1514: #endif",
          "1515:  },",
          "1516:  {",
          "1517:   TMS320C64x_SUBAW_d1_rrr, TMS320C64X_INS_SUBAW,",
          "1518: #ifndef CAPSTONE_DIET",
          "1519:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1520: #endif",
          "1521:  },",
          "1522:  {",
          "1523:   TMS320C64x_SUBC_l1_rrr_x2, TMS320C64X_INS_SUBC,",
          "1524: #ifndef CAPSTONE_DIET",
          "1525:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1526: #endif",
          "1527:  },",
          "1528:  {",
          "1529:   TMS320C64x_SUBU_l1_rrp_x1, TMS320C64X_INS_SUBU,",
          "1530: #ifndef CAPSTONE_DIET",
          "1531:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1532: #endif",
          "1533:  },",
          "1534:  {",
          "1535:   TMS320C64x_SUBU_l1_rrp_x2, TMS320C64X_INS_SUBU,",
          "1536: #ifndef CAPSTONE_DIET",
          "1537:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1538: #endif",
          "1539:  },",
          "1540:  {",
          "1541:   TMS320C64x_SUB_d1_rir, TMS320C64X_INS_SUB,",
          "1542: #ifndef CAPSTONE_DIET",
          "1543:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1544: #endif",
          "1545:  },",
          "1546:  {",
          "1547:   TMS320C64x_SUB_d1_rrr, TMS320C64X_INS_SUB,",
          "1548: #ifndef CAPSTONE_DIET",
          "1549:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1550: #endif",
          "1551:  },",
          "1552:  {",
          "1553:   TMS320C64x_SUB_d2_rrr, TMS320C64X_INS_SUB,",
          "1554: #ifndef CAPSTONE_DIET",
          "1555:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1556: #endif",
          "1557:  },",
          "1558:  {",
          "1559:   TMS320C64x_SUB_l1_ipp, TMS320C64X_INS_SUB,",
          "1560: #ifndef CAPSTONE_DIET",
          "1561:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1562: #endif",
          "1563:  },",
          "1564:  {",
          "1565:   TMS320C64x_SUB_l1_irr, TMS320C64X_INS_SUB,",
          "1566: #ifndef CAPSTONE_DIET",
          "1567:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1568: #endif",
          "1569:  },",
          "1570:  {",
          "1571:   TMS320C64x_SUB_l1_rrp_x1, TMS320C64X_INS_SUB,",
          "1572: #ifndef CAPSTONE_DIET",
          "1573:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1574: #endif",
          "1575:  },",
          "1576:  {",
          "1577:   TMS320C64x_SUB_l1_rrp_x2, TMS320C64X_INS_SUB,",
          "1578: #ifndef CAPSTONE_DIET",
          "1579:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1580: #endif",
          "1581:  },",
          "1582:  {",
          "1583:   TMS320C64x_SUB_l1_rrr_x1, TMS320C64X_INS_SUB,",
          "1584: #ifndef CAPSTONE_DIET",
          "1585:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1586: #endif",
          "1587:  },",
          "1588:  {",
          "1589:   TMS320C64x_SUB_l1_rrr_x2, TMS320C64X_INS_SUB,",
          "1590: #ifndef CAPSTONE_DIET",
          "1591:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1592: #endif",
          "1593:  },",
          "1594:  {",
          "1595:   TMS320C64x_SUB_s1_irr, TMS320C64X_INS_SUB,",
          "1596: #ifndef CAPSTONE_DIET",
          "1597:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1598: #endif",
          "1599:  },",
          "1600:  {",
          "1601:   TMS320C64x_SUB_s1_rrr, TMS320C64X_INS_SUB,",
          "1602: #ifndef CAPSTONE_DIET",
          "1603:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1604: #endif",
          "1605:  },",
          "1606:  {",
          "1607:   TMS320C64x_SUB_s4_rrr, TMS320C64X_INS_SUB,",
          "1608: #ifndef CAPSTONE_DIET",
          "1609:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1610: #endif",
          "1611:  },",
          "1612:  {",
          "1613:   TMS320C64x_SWAP4_l2_rr, TMS320C64X_INS_SWAP4,",
          "1614: #ifndef CAPSTONE_DIET",
          "1615:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1616: #endif",
          "1617:  },",
          "1618:  {",
          "1619:   TMS320C64x_UNPKHU4_l2_rr, TMS320C64X_INS_UNPKHU4,",
          "1620: #ifndef CAPSTONE_DIET",
          "1621:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1622: #endif",
          "1623:  },",
          "1624:  {",
          "1625:   TMS320C64x_UNPKHU4_s14_rr, TMS320C64X_INS_UNPKHU4,",
          "1626: #ifndef CAPSTONE_DIET",
          "1627:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1628: #endif",
          "1629:  },",
          "1630:  {",
          "1631:   TMS320C64x_UNPKLU4_l2_rr, TMS320C64X_INS_UNPKLU4,",
          "1632: #ifndef CAPSTONE_DIET",
          "1633:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1634: #endif",
          "1635:  },",
          "1636:  {",
          "1637:   TMS320C64x_UNPKLU4_s14_rr, TMS320C64X_INS_UNPKLU4,",
          "1638: #ifndef CAPSTONE_DIET",
          "1639:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1640: #endif",
          "1641:  },",
          "1642:  {",
          "1643:   TMS320C64x_XOR_d2_rir, TMS320C64X_INS_XOR,",
          "1644: #ifndef CAPSTONE_DIET",
          "1645:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1646: #endif",
          "1647:  },",
          "1648:  {",
          "1649:   TMS320C64x_XOR_d2_rrr, TMS320C64X_INS_XOR,",
          "1650: #ifndef CAPSTONE_DIET",
          "1651:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_D, 0 }, 0, 0",
          "1652: #endif",
          "1653:  },",
          "1654:  {",
          "1655:   TMS320C64x_XOR_l1_irr, TMS320C64X_INS_XOR,",
          "1656: #ifndef CAPSTONE_DIET",
          "1657:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1658: #endif",
          "1659:  },",
          "1660:  {",
          "1661:   TMS320C64x_XOR_l1_rrr_x2, TMS320C64X_INS_XOR,",
          "1662: #ifndef CAPSTONE_DIET",
          "1663:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_L, 0 }, 0, 0",
          "1664: #endif",
          "1665:  },",
          "1666:  {",
          "1667:   TMS320C64x_XOR_s1_irr, TMS320C64X_INS_XOR,",
          "1668: #ifndef CAPSTONE_DIET",
          "1669:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1670: #endif",
          "1671:  },",
          "1672:  {",
          "1673:   TMS320C64x_XOR_s1_rrr, TMS320C64X_INS_XOR,",
          "1674: #ifndef CAPSTONE_DIET",
          "1675:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_S, 0 }, 0, 0",
          "1676: #endif",
          "1677:  },",
          "1678:  {",
          "1679:   TMS320C64x_XPND2_m2_rr, TMS320C64X_INS_XPND2,",
          "1680: #ifndef CAPSTONE_DIET",
          "1681:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1682: #endif",
          "1683:  },",
          "1684:  {",
          "1685:   TMS320C64x_XPND4_m2_rr, TMS320C64X_INS_XPND4,",
          "1686: #ifndef CAPSTONE_DIET",
          "1687:   { 0 }, { 0 }, { TMS320C64X_GRP_FUNIT_M, 0 }, 0, 0",
          "1688: #endif",
          "1689:  },",
          "1690: };",
          "1692: void TMS320C64x_get_insn_id(cs_struct *h, cs_insn *insn, unsigned int id)",
          "1693: {",
          "1694:  unsigned short i;",
          "1696:  i = insn_find(insns, ARR_SIZE(insns), id, &h->insn_cache);",
          "1697:  if (i != 0) {",
          "1698:   insn->id = insns[i].mapid;",
          "1700:   if (h->detail) {",
          "1701: #ifndef CAPSTONE_DIET",
          "1702:    memcpy(insn->detail->regs_read, insns[i].regs_use, sizeof(insns[i].regs_use));",
          "1703:    insn->detail->regs_read_count = (uint8_t)count_positive(insns[i].regs_use);",
          "1705:    memcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));",
          "1706:    insn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);",
          "1708:    memcpy(insn->detail->groups, insns[i].groups, sizeof(insns[i].groups));",
          "1709:    insn->detail->groups_count = (uint8_t)count_positive8(insns[i].groups);",
          "1711:    if (insns[i].branch || insns[i].indirect_branch) {",
          "1712:     insn->detail->groups[insn->detail->groups_count] = TMS320C64X_GRP_JUMP;",
          "1713:     insn->detail->groups_count++;",
          "1714:    }",
          "1715: #endif",
          "1716:   }",
          "1717:  }",
          "1718: }",
          "1720: #ifndef CAPSTONE_DIET",
          "1721: static name_map insn_name_maps[] = {",
          "1722:  { TMS320C64X_INS_INVALID, NULL },",
          "1724:  { TMS320C64X_INS_ADD, \"add\" },",
          "1725:  { TMS320C64X_INS_NOP, \"nop\" },",
          "1726: };",
          "1729: static name_map alias_insn_names[] = {",
          "1730:  { 0, NULL }",
          "1731: };",
          "1732: #endif",
          "1734: const char *TMS320C64x_insn_name(csh handle, unsigned int id)",
          "1735: {",
          "1736: #ifndef CAPSTONE_DIET",
          "1737:  unsigned int i;",
          "1739:  if (id >= TMS320C64X_INS_ENDING)",
          "1740:   return NULL;",
          "1743:  for (i = 0; i < ARR_SIZE(alias_insn_names); i++) {",
          "1744:   if (alias_insn_names[i].id == id)",
          "1745:    return alias_insn_names[i].name;",
          "1746:  }",
          "1748:  return insn_name_maps[id].name;",
          "1749: #else",
          "1750:  return NULL;",
          "1751: #endif",
          "1752: }",
          "1754: #ifndef CAPSTONE_DIET",
          "1755: static name_map group_name_maps[] = {",
          "1756:  { TMS320C64X_GRP_INVALID, NULL },",
          "1757:  { TMS320C64X_GRP_FUNIT_D, \"funit_d\" },",
          "1758:  { TMS320C64X_GRP_FUNIT_L, \"funit_l\" },",
          "1759:  { TMS320C64X_GRP_FUNIT_M, \"funit_m\" },",
          "1760:  { TMS320C64X_GRP_FUNIT_S, \"funit_s\" },",
          "1761:  { TMS320C64X_GRP_FUNIT_NO, \"funit_no\" },",
          "1762:  { TMS320C64X_GRP_JUMP, \"jump\" },",
          "1763: };",
          "1764: #endif",
          "1766: const char *TMS320C64x_group_name(csh handle, unsigned int id)",
          "1767: {",
          "1768: #ifndef CAPSTONE_DIET",
          "1769:  if (id >= TMS320C64X_GRP_ENDING)",
          "1770:   return NULL;",
          "1772:  return group_name_maps[id].name;",
          "1773: #else",
          "1774:  return NULL;",
          "1775: #endif",
          "1776: }",
          "1778: tms320c64x_reg TMS320C64x_map_register(unsigned int r)",
          "1779: {",
          "1780:  static unsigned int map[] = { 0,",
          "1781:  };",
          "1783:  if (r < ARR_SIZE(map))",
          "1784:   return map[r];",
          "1786:  return 0;",
          "1787: }",
          "1789: #endif",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xMapping.h||arch/TMS320C64x/TMS320C64xMapping.h": [
          "File: arch/TMS320C64x/TMS320C64xMapping.h -> arch/TMS320C64x/TMS320C64xMapping.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef CS_TMS320C64X_MAP_H",
          "5: #define CS_TMS320C64X_MAP_H",
          "7: #include \"capstone/capstone.h\"",
          "10: const char *TMS320C64x_reg_name(csh handle, unsigned int reg);",
          "13: void TMS320C64x_get_insn_id(cs_struct *h, cs_insn *insn, unsigned int id);",
          "15: const char *TMS320C64x_insn_name(csh handle, unsigned int id);",
          "17: const char *TMS320C64x_group_name(csh handle, unsigned int id);",
          "20: tms320c64x_reg TMS320C64x_map_register(unsigned int r);",
          "23: tms320c64x_reg TMS320C64x_reg_id(char *name);",
          "25: #endif",
          "",
          "---------------"
        ],
        "arch/TMS320C64x/TMS320C64xModule.c||arch/TMS320C64x/TMS320C64xModule.c": [
          "File: arch/TMS320C64x/TMS320C64xModule.c -> arch/TMS320C64x/TMS320C64xModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifdef CAPSTONE_HAS_TMS320C64X",
          "6: #include \"../../utils.h\"",
          "7: #include \"../../MCRegisterInfo.h\"",
          "8: #include \"TMS320C64xDisassembler.h\"",
          "9: #include \"TMS320C64xInstPrinter.h\"",
          "10: #include \"TMS320C64xMapping.h\"",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "16:  mri = cs_mem_malloc(sizeof(*mri));",
          "18:  TMS320C64x_init(mri);",
          "19:  ud->printer = TMS320C64x_printInst;",
          "20:  ud->printer_info = mri;",
          "21:  ud->getinsn_info = mri;",
          "22:  ud->disasm = TMS320C64x_getInstruction;",
          "23:  ud->post_printer = TMS320C64x_post_printer;",
          "25:  ud->reg_name = TMS320C64x_reg_name;",
          "26:  ud->insn_id = TMS320C64x_get_insn_id;",
          "27:  ud->insn_name = TMS320C64x_insn_name;",
          "28:  ud->group_name = TMS320C64x_group_name;",
          "30:  return CS_ERR_OK;",
          "31: }",
          "33: static cs_err option(cs_struct *handle, cs_opt_type type, size_t value)",
          "34: {",
          "35:  return CS_ERR_OK;",
          "36: }",
          "38: void TMS320C64x_enable(void)",
          "39: {",
          "40:  arch_init[CS_ARCH_TMS320C64X] = init;",
          "41:  arch_option[CS_ARCH_TMS320C64X] = option;",
          "43:  all_arch |= (1 << CS_ARCH_TMS320C64X);",
          "44: }",
          "46: #endif",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     'CS_ARCH_SYSZ',",
          "33:     'CS_ARCH_XCORE',",
          "34:     'CS_ARCH_M68K',",
          "35:     'CS_ARCH_ALL',",
          "37:     'CS_MODE_LITTLE_ENDIAN',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     'CS_ARCH_TMS320C64X',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: CS_ARCH_SYSZ = 6",
          "135: CS_ARCH_XCORE = 7",
          "136: CS_ARCH_M68K = 8",
          "138: CS_ARCH_ALL = 0xFFFF",
          "140: # disasm mode",
          "",
          "[Removed Lines]",
          "137: CS_ARCH_MAX = 9",
          "",
          "[Added Lines]",
          "138: CS_ARCH_TMS320C64X = 9",
          "139: CS_ARCH_MAX = 10",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:         ('sparc', sparc.CsSparc),",
          "312:         ('sysz', systemz.CsSysz),",
          "313:         ('xcore', xcore.CsXcore),",
          "314:     )",
          "316: class _cs_detail(ctypes.Structure):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:         ('tms320c64x', tms320c64x.CsTMS320C64x),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "613:             (self.cc, self.operands) = systemz.get_arch_info(self._raw.detail.contents.arch.sysz)",
          "614:         elif arch == CS_ARCH_XCORE:",
          "615:             (self.operands) = xcore.get_arch_info(self._raw.detail.contents.arch.xcore)",
          "618:     def __getattr__(self, name):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:         elif arch == CS_ARCH_TMS320C64X:",
          "620:             (self.condition, self.funit, self.parallel, self.operands) = tms320c64x.get_arch_info(self._raw.detail.contents.arch.tms320c64x)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1037:     archs = { \"arm\": CS_ARCH_ARM, \"arm64\": CS_ARCH_ARM64, \"m68k\": CS_ARCH_M68K, \\",
          "1038:         \"mips\": CS_ARCH_MIPS, \"ppc\": CS_ARCH_PPC, \"sparc\": CS_ARCH_SPARC, \\",
          "1041:     all_archs = \"\"",
          "1042:     keys = archs.keys()",
          "",
          "[Removed Lines]",
          "1039:         \"sysz\": CS_ARCH_SYSZ, 'xcore': CS_ARCH_XCORE }",
          "",
          "[Added Lines]",
          "1044:         \"sysz\": CS_ARCH_SYSZ, 'xcore': CS_ARCH_XCORE, \"tms320c64x\": CS_ARCH_TMS320C64X }",
          "",
          "---------------"
        ],
        "bindings/python/capstone/tms320c64x.py||bindings/python/capstone/tms320c64x.py": [
          "File: bindings/python/capstone/tms320c64x.py -> bindings/python/capstone/tms320c64x.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Capstone Python bindings, by Fotis Loukos <me@fotisl.com>",
          "3: import ctypes, copy",
          "4: from .tms320c64x_const import *",
          "6: # define the API",
          "7: class TMS320C64xOpMem(ctypes.Structure):",
          "8:     _fields_ = (",
          "9:         ('base', ctypes.c_int),",
          "10:         ('disp', ctypes.c_int),",
          "11:         ('unit', ctypes.c_int),",
          "12:         ('scaled', ctypes.c_int),",
          "13:         ('disptype', ctypes.c_int),",
          "14:         ('direction', ctypes.c_int),",
          "15:         ('modify', ctypes.c_int),",
          "16:     )",
          "18: class TMS320C64xOpValue(ctypes.Union):",
          "19:     _fields_ = (",
          "20:         ('reg', ctypes.c_uint),",
          "21:         ('imm', ctypes.c_int32),",
          "22:         ('mem', TMS320C64xOpMem),",
          "23:     )",
          "25: class TMS320C64xCondition(ctypes.Structure):",
          "26:     _fields_ = (",
          "27:         ('reg', ctypes.c_uint),",
          "28:         ('zero', ctypes.c_uint),",
          "29:     )",
          "31: class TMS320C64xFunctionalUnit(ctypes.Structure):",
          "32:     _fields_ = (",
          "33:         ('unit', ctypes.c_uint),",
          "34:         ('side', ctypes.c_uint),",
          "35:         ('crosspath', ctypes.c_uint),",
          "36:     )",
          "38: class TMS320C64xOp(ctypes.Structure):",
          "39:     _fields_ = (",
          "40:         ('type', ctypes.c_uint),",
          "41:         ('value', TMS320C64xOpValue),",
          "42:     )",
          "44:     @property",
          "45:     def imm(self):",
          "46:         return self.value.imm",
          "48:     @property",
          "49:     def reg(self):",
          "50:         return self.value.reg",
          "52:     @property",
          "53:     def mem(self):",
          "54:         return self.value.mem",
          "56: class CsTMS320C64x(ctypes.Structure):",
          "57:     _fields_ = (",
          "58:         ('op_count', ctypes.c_uint8),",
          "59:         ('operands', TMS320C64xOp * 8),",
          "60:         ('condition', TMS320C64xCondition),",
          "61:         ('funit', TMS320C64xFunctionalUnit),",
          "62:         ('parallel', ctypes.c_uint),",
          "63:     )",
          "65: def get_arch_info(a):",
          "66:     return (a.condition, a.funit, a.parallel, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/tms320c64x_const.py||bindings/python/capstone/tms320c64x_const.py": [
          "File: bindings/python/capstone/tms320c64x_const.py -> bindings/python/capstone/tms320c64x_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # For Capstone Engine. AUTO-GENERATED FILE, DO NOT EDIT [tms320c64x_const.py]",
          "3: TMS320C64X_OP_INVALID = 0",
          "4: TMS320C64X_OP_REG = 1",
          "5: TMS320C64X_OP_IMM = 2",
          "6: TMS320C64X_OP_MEM = 3",
          "7: TMS320C64X_OP_REGPAIR = 64",
          "9: TMS320C64X_MEM_DISP_INVALID = 0",
          "10: TMS320C64X_MEM_DISP_CONSTANT = 1",
          "11: TMS320C64X_MEM_DISP_REGISTER = 2",
          "13: TMS320C64X_MEM_DIR_INVALID = 0",
          "14: TMS320C64X_MEM_DIR_FW = 1",
          "15: TMS320C64X_MEM_DIR_BW = 2",
          "17: TMS320C64X_MEM_MOD_INVALID = 0",
          "18: TMS320C64X_MEM_MOD_NO = 1",
          "19: TMS320C64X_MEM_MOD_PRE = 2",
          "20: TMS320C64X_MEM_MOD_POST = 3",
          "22: TMS320C64X_REG_INVALID = 0",
          "23: TMS320C64X_REG_AMR = 1",
          "24: TMS320C64X_REG_CSR = 2",
          "25: TMS320C64X_REG_DIER = 3",
          "26: TMS320C64X_REG_DNUM = 4",
          "27: TMS320C64X_REG_ECR = 5",
          "28: TMS320C64X_REG_GFPGFR = 6",
          "29: TMS320C64X_REG_GPLYA = 7",
          "30: TMS320C64X_REG_GPLYB = 8",
          "31: TMS320C64X_REG_ICR = 9",
          "32: TMS320C64X_REG_IER = 10",
          "33: TMS320C64X_REG_IERR = 11",
          "34: TMS320C64X_REG_ILC = 12",
          "35: TMS320C64X_REG_IRP = 13",
          "36: TMS320C64X_REG_ISR = 14",
          "37: TMS320C64X_REG_ISTP = 15",
          "38: TMS320C64X_REG_ITSR = 16",
          "39: TMS320C64X_REG_NRP = 17",
          "40: TMS320C64X_REG_NTSR = 18",
          "41: TMS320C64X_REG_REP = 19",
          "42: TMS320C64X_REG_RILC = 20",
          "43: TMS320C64X_REG_SSR = 21",
          "44: TMS320C64X_REG_TSCH = 22",
          "45: TMS320C64X_REG_TSCL = 23",
          "46: TMS320C64X_REG_TSR = 24",
          "47: TMS320C64X_REG_A0 = 25",
          "48: TMS320C64X_REG_A1 = 26",
          "49: TMS320C64X_REG_A2 = 27",
          "50: TMS320C64X_REG_A3 = 28",
          "51: TMS320C64X_REG_A4 = 29",
          "52: TMS320C64X_REG_A5 = 30",
          "53: TMS320C64X_REG_A6 = 31",
          "54: TMS320C64X_REG_A7 = 32",
          "55: TMS320C64X_REG_A8 = 33",
          "56: TMS320C64X_REG_A9 = 34",
          "57: TMS320C64X_REG_A10 = 35",
          "58: TMS320C64X_REG_A11 = 36",
          "59: TMS320C64X_REG_A12 = 37",
          "60: TMS320C64X_REG_A13 = 38",
          "61: TMS320C64X_REG_A14 = 39",
          "62: TMS320C64X_REG_A15 = 40",
          "63: TMS320C64X_REG_A16 = 41",
          "64: TMS320C64X_REG_A17 = 42",
          "65: TMS320C64X_REG_A18 = 43",
          "66: TMS320C64X_REG_A19 = 44",
          "67: TMS320C64X_REG_A20 = 45",
          "68: TMS320C64X_REG_A21 = 46",
          "69: TMS320C64X_REG_A22 = 47",
          "70: TMS320C64X_REG_A23 = 48",
          "71: TMS320C64X_REG_A24 = 49",
          "72: TMS320C64X_REG_A25 = 50",
          "73: TMS320C64X_REG_A26 = 51",
          "74: TMS320C64X_REG_A27 = 52",
          "75: TMS320C64X_REG_A28 = 53",
          "76: TMS320C64X_REG_A29 = 54",
          "77: TMS320C64X_REG_A30 = 55",
          "78: TMS320C64X_REG_A31 = 56",
          "79: TMS320C64X_REG_B0 = 57",
          "80: TMS320C64X_REG_B1 = 58",
          "81: TMS320C64X_REG_B2 = 59",
          "82: TMS320C64X_REG_B3 = 60",
          "83: TMS320C64X_REG_B4 = 61",
          "84: TMS320C64X_REG_B5 = 62",
          "85: TMS320C64X_REG_B6 = 63",
          "86: TMS320C64X_REG_B7 = 64",
          "87: TMS320C64X_REG_B8 = 65",
          "88: TMS320C64X_REG_B9 = 66",
          "89: TMS320C64X_REG_B10 = 67",
          "90: TMS320C64X_REG_B11 = 68",
          "91: TMS320C64X_REG_B12 = 69",
          "92: TMS320C64X_REG_B13 = 70",
          "93: TMS320C64X_REG_B14 = 71",
          "94: TMS320C64X_REG_B15 = 72",
          "95: TMS320C64X_REG_B16 = 73",
          "96: TMS320C64X_REG_B17 = 74",
          "97: TMS320C64X_REG_B18 = 75",
          "98: TMS320C64X_REG_B19 = 76",
          "99: TMS320C64X_REG_B20 = 77",
          "100: TMS320C64X_REG_B21 = 78",
          "101: TMS320C64X_REG_B22 = 79",
          "102: TMS320C64X_REG_B23 = 80",
          "103: TMS320C64X_REG_B24 = 81",
          "104: TMS320C64X_REG_B25 = 82",
          "105: TMS320C64X_REG_B26 = 83",
          "106: TMS320C64X_REG_B27 = 84",
          "107: TMS320C64X_REG_B28 = 85",
          "108: TMS320C64X_REG_B29 = 86",
          "109: TMS320C64X_REG_B30 = 87",
          "110: TMS320C64X_REG_B31 = 88",
          "111: TMS320C64X_REG_PCE1 = 89",
          "112: TMS320C64X_REG_ENDING = 90",
          "113: TMS320C64X_REG_EFR = TMS320C64X_REG_ECR",
          "114: TMS320C64X_REG_IFR = TMS320C64X_REG_ISR",
          "116: TMS320C64X_INS_INVALID = 0",
          "117: TMS320C64X_INS_ABS = 1",
          "118: TMS320C64X_INS_ABS2 = 2",
          "119: TMS320C64X_INS_ADD = 3",
          "120: TMS320C64X_INS_ADD2 = 4",
          "121: TMS320C64X_INS_ADD4 = 5",
          "122: TMS320C64X_INS_ADDAB = 6",
          "123: TMS320C64X_INS_ADDAD = 7",
          "124: TMS320C64X_INS_ADDAH = 8",
          "125: TMS320C64X_INS_ADDAW = 9",
          "126: TMS320C64X_INS_ADDK = 10",
          "127: TMS320C64X_INS_ADDKPC = 11",
          "128: TMS320C64X_INS_ADDU = 12",
          "129: TMS320C64X_INS_AND = 13",
          "130: TMS320C64X_INS_ANDN = 14",
          "131: TMS320C64X_INS_AVG2 = 15",
          "132: TMS320C64X_INS_AVGU4 = 16",
          "133: TMS320C64X_INS_B = 17",
          "134: TMS320C64X_INS_BDEC = 18",
          "135: TMS320C64X_INS_BITC4 = 19",
          "136: TMS320C64X_INS_BNOP = 20",
          "137: TMS320C64X_INS_BPOS = 21",
          "138: TMS320C64X_INS_CLR = 22",
          "139: TMS320C64X_INS_CMPEQ = 23",
          "140: TMS320C64X_INS_CMPEQ2 = 24",
          "141: TMS320C64X_INS_CMPEQ4 = 25",
          "142: TMS320C64X_INS_CMPGT = 26",
          "143: TMS320C64X_INS_CMPGT2 = 27",
          "144: TMS320C64X_INS_CMPGTU4 = 28",
          "145: TMS320C64X_INS_CMPLT = 29",
          "146: TMS320C64X_INS_CMPLTU = 30",
          "147: TMS320C64X_INS_DEAL = 31",
          "148: TMS320C64X_INS_DOTP2 = 32",
          "149: TMS320C64X_INS_DOTPN2 = 33",
          "150: TMS320C64X_INS_DOTPNRSU2 = 34",
          "151: TMS320C64X_INS_DOTPRSU2 = 35",
          "152: TMS320C64X_INS_DOTPSU4 = 36",
          "153: TMS320C64X_INS_DOTPU4 = 37",
          "154: TMS320C64X_INS_EXT = 38",
          "155: TMS320C64X_INS_EXTU = 39",
          "156: TMS320C64X_INS_GMPGTU = 40",
          "157: TMS320C64X_INS_GMPY4 = 41",
          "158: TMS320C64X_INS_LDB = 42",
          "159: TMS320C64X_INS_LDBU = 43",
          "160: TMS320C64X_INS_LDDW = 44",
          "161: TMS320C64X_INS_LDH = 45",
          "162: TMS320C64X_INS_LDHU = 46",
          "163: TMS320C64X_INS_LDNDW = 47",
          "164: TMS320C64X_INS_LDNW = 48",
          "165: TMS320C64X_INS_LDW = 49",
          "166: TMS320C64X_INS_LMBD = 50",
          "167: TMS320C64X_INS_MAX2 = 51",
          "168: TMS320C64X_INS_MAXU4 = 52",
          "169: TMS320C64X_INS_MIN2 = 53",
          "170: TMS320C64X_INS_MINU4 = 54",
          "171: TMS320C64X_INS_MPY = 55",
          "172: TMS320C64X_INS_MPY2 = 56",
          "173: TMS320C64X_INS_MPYH = 57",
          "174: TMS320C64X_INS_MPYHI = 58",
          "175: TMS320C64X_INS_MPYHIR = 59",
          "176: TMS320C64X_INS_MPYHL = 60",
          "177: TMS320C64X_INS_MPYHLU = 61",
          "178: TMS320C64X_INS_MPYHSLU = 62",
          "179: TMS320C64X_INS_MPYHSU = 63",
          "180: TMS320C64X_INS_MPYHU = 64",
          "181: TMS320C64X_INS_MPYHULS = 65",
          "182: TMS320C64X_INS_MPYHUS = 66",
          "183: TMS320C64X_INS_MPYLH = 67",
          "184: TMS320C64X_INS_MPYLHU = 68",
          "185: TMS320C64X_INS_MPYLI = 69",
          "186: TMS320C64X_INS_MPYLIR = 70",
          "187: TMS320C64X_INS_MPYLSHU = 71",
          "188: TMS320C64X_INS_MPYLUHS = 72",
          "189: TMS320C64X_INS_MPYSU = 73",
          "190: TMS320C64X_INS_MPYSU4 = 74",
          "191: TMS320C64X_INS_MPYU = 75",
          "192: TMS320C64X_INS_MPYU4 = 76",
          "193: TMS320C64X_INS_MPYUS = 77",
          "194: TMS320C64X_INS_MVC = 78",
          "195: TMS320C64X_INS_MVD = 79",
          "196: TMS320C64X_INS_MVK = 80",
          "197: TMS320C64X_INS_MVKL = 81",
          "198: TMS320C64X_INS_MVKLH = 82",
          "199: TMS320C64X_INS_NOP = 83",
          "200: TMS320C64X_INS_NORM = 84",
          "201: TMS320C64X_INS_OR = 85",
          "202: TMS320C64X_INS_PACK2 = 86",
          "203: TMS320C64X_INS_PACKH2 = 87",
          "204: TMS320C64X_INS_PACKH4 = 88",
          "205: TMS320C64X_INS_PACKHL2 = 89",
          "206: TMS320C64X_INS_PACKL4 = 90",
          "207: TMS320C64X_INS_PACKLH2 = 91",
          "208: TMS320C64X_INS_ROTL = 92",
          "209: TMS320C64X_INS_SADD = 93",
          "210: TMS320C64X_INS_SADD2 = 94",
          "211: TMS320C64X_INS_SADDU4 = 95",
          "212: TMS320C64X_INS_SADDUS2 = 96",
          "213: TMS320C64X_INS_SAT = 97",
          "214: TMS320C64X_INS_SET = 98",
          "215: TMS320C64X_INS_SHFL = 99",
          "216: TMS320C64X_INS_SHL = 100",
          "217: TMS320C64X_INS_SHLMB = 101",
          "218: TMS320C64X_INS_SHR = 102",
          "219: TMS320C64X_INS_SHR2 = 103",
          "220: TMS320C64X_INS_SHRMB = 104",
          "221: TMS320C64X_INS_SHRU = 105",
          "222: TMS320C64X_INS_SHRU2 = 106",
          "223: TMS320C64X_INS_SMPY = 107",
          "224: TMS320C64X_INS_SMPY2 = 108",
          "225: TMS320C64X_INS_SMPYH = 109",
          "226: TMS320C64X_INS_SMPYHL = 110",
          "227: TMS320C64X_INS_SMPYLH = 111",
          "228: TMS320C64X_INS_SPACK2 = 112",
          "229: TMS320C64X_INS_SPACKU4 = 113",
          "230: TMS320C64X_INS_SSHL = 114",
          "231: TMS320C64X_INS_SSHVL = 115",
          "232: TMS320C64X_INS_SSHVR = 116",
          "233: TMS320C64X_INS_SSUB = 117",
          "234: TMS320C64X_INS_STB = 118",
          "235: TMS320C64X_INS_STDW = 119",
          "236: TMS320C64X_INS_STH = 120",
          "237: TMS320C64X_INS_STNDW = 121",
          "238: TMS320C64X_INS_STNW = 122",
          "239: TMS320C64X_INS_STW = 123",
          "240: TMS320C64X_INS_SUB = 124",
          "241: TMS320C64X_INS_SUB2 = 125",
          "242: TMS320C64X_INS_SUB4 = 126",
          "243: TMS320C64X_INS_SUBAB = 127",
          "244: TMS320C64X_INS_SUBABS4 = 128",
          "245: TMS320C64X_INS_SUBAH = 129",
          "246: TMS320C64X_INS_SUBAW = 130",
          "247: TMS320C64X_INS_SUBC = 131",
          "248: TMS320C64X_INS_SUBU = 132",
          "249: TMS320C64X_INS_SWAP4 = 133",
          "250: TMS320C64X_INS_UNPKHU4 = 134",
          "251: TMS320C64X_INS_UNPKLU4 = 135",
          "252: TMS320C64X_INS_XOR = 136",
          "253: TMS320C64X_INS_XPND2 = 137",
          "254: TMS320C64X_INS_XPND4 = 138",
          "255: TMS320C64X_INS_IDLE = 139",
          "256: TMS320C64X_INS_MV = 140",
          "257: TMS320C64X_INS_NEG = 141",
          "258: TMS320C64X_INS_NOT = 142",
          "259: TMS320C64X_INS_SWAP2 = 143",
          "260: TMS320C64X_INS_ZERO = 144",
          "261: TMS320C64X_INS_ENDING = 145",
          "263: TMS320C64X_GRP_INVALID = 0",
          "264: TMS320C64X_GRP_JUMP = 1",
          "265: TMS320C64X_GRP_FUNIT_D = 128",
          "266: TMS320C64X_GRP_FUNIT_L = 129",
          "267: TMS320C64X_GRP_FUNIT_M = 130",
          "268: TMS320C64X_GRP_FUNIT_S = 131",
          "269: TMS320C64X_GRP_FUNIT_NO = 132",
          "270: TMS320C64X_GRP_ENDING = 133",
          "272: TMS320C64X_FUNIT_INVALID = 0",
          "273: TMS320C64X_FUNIT_D = 1",
          "274: TMS320C64X_FUNIT_L = 2",
          "275: TMS320C64X_FUNIT_M = 3",
          "276: TMS320C64X_FUNIT_S = 4",
          "277: TMS320C64X_FUNIT_NO = 5",
          "",
          "---------------"
        ],
        "bindings/python/pyx/ccapstone.pyx||bindings/python/pyx/ccapstone.pyx": [
          "File: bindings/python/pyx/ccapstone.pyx -> bindings/python/pyx/ccapstone.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: cimport pyx.ccapstone as cc",
          "4: import capstone, ctypes",
          "7: _diet = cc.cs_support(capstone.CS_SUPPORT_DIET)",
          "",
          "[Removed Lines]",
          "5: from . import arm, x86, mips, ppc, arm64, sparc, systemz, xcore, CsError",
          "",
          "[Added Lines]",
          "5: from . import arm, x86, mips, ppc, arm64, sparc, systemz, xcore, tms320c64x, CsError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:             (self.cc, self.operands) = systemz.get_arch_info(detail.arch.sysz)",
          "46:         elif arch == capstone.CS_ARCH_XCORE:",
          "47:                 self.operands = xcore.get_arch_info(detail.arch.xcore)",
          "50: cdef class CsInsn(object):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:         elif arch == capstone.CS_ARCH_TMS320C64X:",
          "49:                 (self.condition, self.funit, self.parallel, self.operands) = tms320c64x.get_arch_info(self._detail.arch.tms320c64x)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:     archs = { \"arm\": capstone.CS_ARCH_ARM, \"arm64\": capstone.CS_ARCH_ARM64, \\",
          "340:         \"mips\": capstone.CS_ARCH_MIPS, \"ppc\": capstone.CS_ARCH_PPC, \\",
          "341:         \"sparc\": capstone.CS_ARCH_SPARC, \"sysz\": capstone.CS_ARCH_SYSZ, \\",
          "344:     all_archs = \"\"",
          "345:     keys = archs.keys()",
          "",
          "[Removed Lines]",
          "342:   \"xcore\": capstone.CS_ARCH_XCORE }",
          "",
          "[Added Lines]",
          "344:   \"xcore\": capstone.CS_ARCH_XCORE, \"tms320c64x\": capstone.CS_ARCH_TMS320C64X }",
          "",
          "---------------"
        ],
        "bindings/python/test_all.py||bindings/python/test_all.py": [
          "File: bindings/python/test_all.py -> bindings/python/test_all.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "3: import test_basic, test_arm, test_arm64, test_detail, test_lite, test_m68k, test_mips, \\",
          "7: test_basic.test_class()",
          "",
          "[Removed Lines]",
          "4:     test_ppc, test_x86, test_skipdata, test_sparc, test_systemz, test_customized_mnem",
          "",
          "[Added Lines]",
          "4:     test_ppc, test_x86, test_skipdata, test_sparc, test_systemz, test_tms320c64x, test_customized_mnem",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: test_sparc.test_class()",
          "16: test_systemz.test_class()",
          "17: test_x86.test_class()",
          "18: test_skipdata.test_class()",
          "19: test_customized_mnem.test()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: test_tms320c64x.test_class()",
          "",
          "---------------"
        ],
        "bindings/python/test_tms320c64x.py||bindings/python/test_tms320c64x.py": [
          "File: bindings/python/test_tms320c64x.py -> bindings/python/test_tms320c64x.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "3: # Capstone Python bindings, by Fotis Loukos <me@fotisl.com>",
          "5: from __future__ import print_function",
          "6: from capstone import *",
          "7: from capstone.tms320c64x import *",
          "8: from xprint import to_x, to_hex, to_x_32",
          "11: TMS320C64X_CODE = b\"\\x01\\xac\\x88\\x40\\x81\\xac\\x88\\x43\\x00\\x00\\x00\\x00\\x02\\x90\\x32\\x96\\x02\\x80\\x46\\x9e\\x05\\x3c\\x83\\xe6\\x0b\\x0c\\x8b\\x24\"",
          "13: all_tests = (",
          "14:         (CS_ARCH_TMS320C64X, 0, TMS320C64X_CODE, \"TMS320C64x\"),",
          "15: )",
          "18: def print_insn_detail(insn):",
          "19:     # print address, mnemonic and operands",
          "20:     print(\"0x%x:\\t%s\\t%s\" % (insn.address, insn.mnemonic, insn.op_str))",
          "22:     # \"data\" instruction generated by SKIPDATA option has no detail",
          "23:     if insn.id == 0:",
          "24:         return",
          "26:     if len(insn.operands) > 0:",
          "27:         print(\"\\top_count: %u\" % len(insn.operands))",
          "28:         c = 0",
          "29:         for i in insn.operands:",
          "30:             if i.type == TMS320C64X_OP_REG:",
          "31:                 print(\"\\t\\toperands[%u].type: REG = %s\" % (c, insn.reg_name(i.reg)))",
          "32:             if i.type == TMS320C64X_OP_IMM:",
          "33:                 print(\"\\t\\toperands[%u].type: IMM = 0x%s\" % (c, to_x(i.imm)))",
          "34:             if i.type == TMS320C64X_OP_MEM:",
          "35:                 print(\"\\t\\toperands[%u].type: MEM\" % c)",
          "36:                 if i.mem.base != 0:",
          "37:                     print(\"\\t\\t\\toperands[%u].mem.base: REG = %s\" \\",
          "38:                         % (c, insn.reg_name(i.mem.base)))",
          "39:                 if i.mem.disptype == TMS320C64X_MEM_DISP_INVALID:",
          "40:                     print(\"\\t\\t\\toperands[%u].mem.disptype: Invalid\" % (c))",
          "41:                     print(\"\\t\\t\\toperands[%u].mem.disp: 0x%s\" \\",
          "42:                         % (c, to_x(i.mem.disp)))",
          "43:                 if i.mem.disptype == TMS320C64X_MEM_DISP_CONSTANT:",
          "44:                     print(\"\\t\\t\\toperands[%u].mem.disptype: Constant\" % (c))",
          "45:                     print(\"\\t\\t\\toperands[%u].mem.disp: 0x%s\" \\",
          "46:                         % (c, to_x(i.mem.disp)))",
          "47:                 if i.mem.disptype == TMS320C64X_MEM_DISP_REGISTER:",
          "48:                     print(\"\\t\\t\\toperands[%u].mem.disptype: Register\" % (c))",
          "49:                     print(\"\\t\\t\\toperands[%u].mem.disp: %s\" \\",
          "50:                         % (c, insn.reg_name(i.mem.disp)))",
          "51:                 print(\"\\t\\t\\toperands[%u].mem.unit: %u\" % (c, i.mem.unit))",
          "52:                 if i.mem.direction == TMS320C64X_MEM_DIR_INVALID:",
          "53:                     print(\"\\t\\t\\toperands[%u].mem.direction: Invalid\" % (c))",
          "54:                 if i.mem.direction == TMS320C64X_MEM_DIR_FW:",
          "55:                     print(\"\\t\\t\\toperands[%u].mem.direction: Forward\" % (c))",
          "56:                 if i.mem.direction == TMS320C64X_MEM_DIR_BW:",
          "57:                     print(\"\\t\\t\\toperands[%u].mem.direction: Backward\" % (c))",
          "58:                 if i.mem.modify == TMS320C64X_MEM_MOD_INVALID:",
          "59:                     print(\"\\t\\t\\toperands[%u].mem.modify: Invalid\" % (c))",
          "60:                 if i.mem.modify == TMS320C64X_MEM_MOD_NO:",
          "61:                     print(\"\\t\\t\\toperands[%u].mem.modify: No\" % (c))",
          "62:                 if i.mem.modify == TMS320C64X_MEM_MOD_PRE:",
          "63:                     print(\"\\t\\t\\toperands[%u].mem.modify: Pre\" % (c))",
          "64:                 if i.mem.modify == TMS320C64X_MEM_MOD_POST:",
          "65:                     print(\"\\t\\t\\toperands[%u].mem.modify: Post\" % (c))",
          "66:                 print(\"\\t\\t\\toperands[%u].mem.scaled: %u\" % (c, i.mem.scaled))",
          "67:             if i.type == TMS320C64X_OP_REGPAIR:",
          "68:                 print(\"\\t\\toperands[%u].type: REGPAIR = %s:%s\" % (c, insn.reg_name(i.reg + 1), insn.reg_name(i.reg)))",
          "69:             c += 1",
          "72: # ## Test class Cs",
          "73: def test_class():",
          "75:     for (arch, mode, code, comment) in all_tests:",
          "76:         print(\"*\" * 16)",
          "77:         print(\"Platform: %s\" %comment)",
          "78:         print(\"Code: %s\" % to_hex(code))",
          "79:         print(\"Disasm:\")",
          "81:         try:",
          "82:             md = Cs(arch, mode)",
          "83:             md.detail = True",
          "84:             for insn in md.disasm(code, 0x1000):",
          "85:                 print_insn_detail(insn)",
          "86:                 print ()",
          "87:             print(\"0x%x:\\n\" % (insn.address + insn.size))",
          "88:         except CsError as e:",
          "89:             print(\"ERROR: %s\" %e)",
          "92: if __name__ == '__main__':",
          "93:     test_class()",
          "",
          "---------------"
        ],
        "config.mk||config.mk": [
          "File: config.mk -> config.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ################################################################################",
          "5: # Specify which archs you want to compile in. By default, we build all archs.",
          "10: ################################################################################",
          "",
          "[Removed Lines]",
          "7: CAPSTONE_ARCHS ?= arm aarch64 m68k mips powerpc sparc systemz x86 xcore",
          "",
          "[Added Lines]",
          "7: CAPSTONE_ARCHS ?= arm aarch64 m68k mips powerpc sparc systemz x86 xcore tms320c64x",
          "",
          "---------------"
        ],
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: extern void Sparc_enable(void);",
          "61: extern void SystemZ_enable(void);",
          "62: extern void XCore_enable(void);",
          "64: static void archs_enable(void)",
          "65: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: extern void TMS320C64x_enable(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: #ifdef CAPSTONE_HAS_XCORE",
          "96:  XCore_enable();",
          "97: #endif",
          "100:  initialized = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: #ifdef CAPSTONE_HAS_TMS320C64X",
          "100:  TMS320C64x_enable();",
          "101: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:   return all_arch == ((1 << CS_ARCH_ARM) | (1 << CS_ARCH_ARM64) |",
          "174:     (1 << CS_ARCH_MIPS) | (1 << CS_ARCH_X86) |",
          "175:     (1 << CS_ARCH_PPC) | (1 << CS_ARCH_SPARC) |",
          "178:  if ((unsigned int)query < CS_ARCH_MAX)",
          "179:   return all_arch & (1 << query);",
          "",
          "[Removed Lines]",
          "176:     (1 << CS_ARCH_SYSZ) | (1 << CS_ARCH_XCORE));",
          "",
          "[Added Lines]",
          "180:     (1 << CS_ARCH_SYSZ) | (1 << CS_ARCH_XCORE) |",
          "181:     (1 << CS_ARCH_TMS320C64X));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "427:   case CS_ARCH_M68K:",
          "429:    return 2;",
          "430:  }",
          "431: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:   case CS_ARCH_TMS320C64X:",
          "437:    return 4;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1106:     if (insn->detail->xcore.operands[i].type == (xcore_op_type)op_type)",
          "1107:      count++;",
          "1108:    break;",
          "1109:  }",
          "1111:  return count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:   case CS_ARCH_TMS320C64X:",
          "1118:    for (i = 0; i < insn->detail->tms320c64x.op_count; i++)",
          "1119:     if (insn->detail->tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)",
          "1120:      count++;",
          "1121:    break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1207:      return i;",
          "1208:    }",
          "1209:    break;",
          "1210:  }",
          "1212:  return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:   case CS_ARCH_TMS320C64X:",
          "1224:    for (i = 0; i < insn->detail->tms320c64x.op_count; i++) {",
          "1225:     if (insn->detail->tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)",
          "1226:      count++;",
          "1227:     if (count == post)",
          "1228:      return i;",
          "1229:    }",
          "1230:    break;",
          "",
          "---------------"
        ],
        "cs_priv.h||cs_priv.h": [
          "File: cs_priv.h -> cs_priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  struct insn_mnem *mnem_list; // linked list of customized instruction mnemonic",
          "77: };",
          "82: extern cs_err (*arch_init[MAX_ARCH]) (cs_struct *);",
          "",
          "[Removed Lines]",
          "79: #define MAX_ARCH 9",
          "",
          "[Added Lines]",
          "79: #define MAX_ARCH 10",
          "",
          "---------------"
        ],
        "include/capstone/capstone.h||include/capstone/capstone.h": [
          "File: include/capstone/capstone.h -> include/capstone/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  CS_ARCH_SYSZ,  // SystemZ architecture",
          "82:  CS_ARCH_XCORE,  // XCore architecture",
          "83:  CS_ARCH_M68K,  // 68K architecture",
          "84:  CS_ARCH_MAX,",
          "85:  CS_ARCH_ALL = 0xFFFF, // All architectures - for cs_support()",
          "86: } cs_arch;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:  CS_ARCH_TMS320C64X, // TMS320C64x architecture",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255: #include \"systemz.h\"",
          "256: #include \"x86.h\"",
          "257: #include \"xcore.h\"",
          "260: typedef struct cs_detail {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259: #include \"tms320c64x.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:   cs_sparc sparc; // Sparc architecture",
          "279:   cs_sysz sysz; // SystemZ architecture",
          "280:   cs_xcore xcore; // XCore architecture",
          "281:  };",
          "282: } cs_detail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:   cs_tms320c64x tms320c64x; // TMS320C64x architecture",
          "",
          "---------------"
        ],
        "include/capstone/tms320c64x.h||include/capstone/tms320c64x.h": [
          "File: include/capstone/tms320c64x.h -> include/capstone/tms320c64x.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef CAPSTONE_TMS320C64X_H",
          "5: #define CAPSTONE_TMS320C64X_H",
          "7: #ifdef __cplusplus",
          "8: extern \"C\" {",
          "9: #endif",
          "11: #include <stdint.h>",
          "12: #include \"platform.h\"",
          "14: #ifdef _MSC_VER",
          "15: #pragma warning(disable:4201)",
          "16: #endif",
          "18: typedef enum tms320c64x_op_type {",
          "19:  TMS320C64X_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).",
          "20:  TMS320C64X_OP_REG, // = CS_OP_REG (Register operand).",
          "21:  TMS320C64X_OP_IMM, // = CS_OP_IMM (Immediate operand).",
          "22:  TMS320C64X_OP_MEM, // = CS_OP_MEM (Memory operand).",
          "23:  TMS320C64X_OP_REGPAIR = 64, // Register pair for double word ops",
          "24: } tms320c64x_op_type;",
          "26: typedef enum tms320c64x_mem_disp {",
          "27:  TMS320C64X_MEM_DISP_INVALID = 0,",
          "28:  TMS320C64X_MEM_DISP_CONSTANT,",
          "29:  TMS320C64X_MEM_DISP_REGISTER,",
          "30: } tms320c64x_mem_disp;",
          "32: typedef enum tms320c64x_mem_dir {",
          "33:  TMS320C64X_MEM_DIR_INVALID = 0,",
          "34:  TMS320C64X_MEM_DIR_FW,",
          "35:  TMS320C64X_MEM_DIR_BW,",
          "36: } tms320c64x_mem_dir;",
          "38: typedef enum tms320c64x_mem_mod {",
          "39:  TMS320C64X_MEM_MOD_INVALID = 0,",
          "40:  TMS320C64X_MEM_MOD_NO,",
          "41:  TMS320C64X_MEM_MOD_PRE,",
          "42:  TMS320C64X_MEM_MOD_POST,",
          "43: } tms320c64x_mem_mod;",
          "45: typedef struct tms320c64x_op_mem {",
          "46:  unsigned int base; // base register",
          "47:  unsigned int disp; // displacement/offset value",
          "48:  unsigned int unit; // unit of base and offset register",
          "49:  unsigned int scaled; // offset scaled",
          "50:  unsigned int disptype; // displacement type",
          "51:  unsigned int direction; // direction",
          "52:  unsigned int modify; // modification",
          "53: } tms320c64x_op_mem;",
          "55: typedef struct cs_tms320c64x_op {",
          "56:  tms320c64x_op_type type; // operand type",
          "57:  union {",
          "58:   unsigned int reg; // register value for REG operand or first register for REGPAIR operand",
          "59:   int32_t imm;  // immediate value for IMM operand",
          "60:   tms320c64x_op_mem mem;  // base/disp value for MEM operand",
          "61:  };",
          "62: } cs_tms320c64x_op;",
          "64: typedef struct cs_tms320c64x {",
          "65:  uint8_t op_count;",
          "66:  cs_tms320c64x_op operands[8]; // operands for this instruction.",
          "67:  struct {",
          "68:   unsigned int reg;",
          "69:   unsigned int zero;",
          "70:  } condition;",
          "71:  struct {",
          "72:   unsigned int unit;",
          "73:   unsigned int side;",
          "74:   unsigned int crosspath;",
          "75:  } funit;",
          "76:  unsigned int parallel;",
          "77: } cs_tms320c64x;",
          "79: typedef enum tms320c64x_reg {",
          "80:  TMS320C64X_REG_INVALID = 0,",
          "82:  TMS320C64X_REG_AMR,",
          "83:  TMS320C64X_REG_CSR,",
          "84:  TMS320C64X_REG_DIER,",
          "85:  TMS320C64X_REG_DNUM,",
          "86:  TMS320C64X_REG_ECR,",
          "87:  TMS320C64X_REG_GFPGFR,",
          "88:  TMS320C64X_REG_GPLYA,",
          "89:  TMS320C64X_REG_GPLYB,",
          "90:  TMS320C64X_REG_ICR,",
          "91:  TMS320C64X_REG_IER,",
          "92:  TMS320C64X_REG_IERR,",
          "93:  TMS320C64X_REG_ILC,",
          "94:  TMS320C64X_REG_IRP,",
          "95:  TMS320C64X_REG_ISR,",
          "96:  TMS320C64X_REG_ISTP,",
          "97:  TMS320C64X_REG_ITSR,",
          "98:  TMS320C64X_REG_NRP,",
          "99:  TMS320C64X_REG_NTSR,",
          "100:  TMS320C64X_REG_REP,",
          "101:  TMS320C64X_REG_RILC,",
          "102:  TMS320C64X_REG_SSR,",
          "103:  TMS320C64X_REG_TSCH,",
          "104:  TMS320C64X_REG_TSCL,",
          "105:  TMS320C64X_REG_TSR,",
          "106:  TMS320C64X_REG_A0,",
          "107:  TMS320C64X_REG_A1,",
          "108:  TMS320C64X_REG_A2,",
          "109:  TMS320C64X_REG_A3,",
          "110:  TMS320C64X_REG_A4,",
          "111:  TMS320C64X_REG_A5,",
          "112:  TMS320C64X_REG_A6,",
          "113:  TMS320C64X_REG_A7,",
          "114:  TMS320C64X_REG_A8,",
          "115:  TMS320C64X_REG_A9,",
          "116:  TMS320C64X_REG_A10,",
          "117:  TMS320C64X_REG_A11,",
          "118:  TMS320C64X_REG_A12,",
          "119:  TMS320C64X_REG_A13,",
          "120:  TMS320C64X_REG_A14,",
          "121:  TMS320C64X_REG_A15,",
          "122:  TMS320C64X_REG_A16,",
          "123:  TMS320C64X_REG_A17,",
          "124:  TMS320C64X_REG_A18,",
          "125:  TMS320C64X_REG_A19,",
          "126:  TMS320C64X_REG_A20,",
          "127:  TMS320C64X_REG_A21,",
          "128:  TMS320C64X_REG_A22,",
          "129:  TMS320C64X_REG_A23,",
          "130:  TMS320C64X_REG_A24,",
          "131:  TMS320C64X_REG_A25,",
          "132:  TMS320C64X_REG_A26,",
          "133:  TMS320C64X_REG_A27,",
          "134:  TMS320C64X_REG_A28,",
          "135:  TMS320C64X_REG_A29,",
          "136:  TMS320C64X_REG_A30,",
          "137:  TMS320C64X_REG_A31,",
          "138:  TMS320C64X_REG_B0,",
          "139:  TMS320C64X_REG_B1,",
          "140:  TMS320C64X_REG_B2,",
          "141:  TMS320C64X_REG_B3,",
          "142:  TMS320C64X_REG_B4,",
          "143:  TMS320C64X_REG_B5,",
          "144:  TMS320C64X_REG_B6,",
          "145:  TMS320C64X_REG_B7,",
          "146:  TMS320C64X_REG_B8,",
          "147:  TMS320C64X_REG_B9,",
          "148:  TMS320C64X_REG_B10,",
          "149:  TMS320C64X_REG_B11,",
          "150:  TMS320C64X_REG_B12,",
          "151:  TMS320C64X_REG_B13,",
          "152:  TMS320C64X_REG_B14,",
          "153:  TMS320C64X_REG_B15,",
          "154:  TMS320C64X_REG_B16,",
          "155:  TMS320C64X_REG_B17,",
          "156:  TMS320C64X_REG_B18,",
          "157:  TMS320C64X_REG_B19,",
          "158:  TMS320C64X_REG_B20,",
          "159:  TMS320C64X_REG_B21,",
          "160:  TMS320C64X_REG_B22,",
          "161:  TMS320C64X_REG_B23,",
          "162:  TMS320C64X_REG_B24,",
          "163:  TMS320C64X_REG_B25,",
          "164:  TMS320C64X_REG_B26,",
          "165:  TMS320C64X_REG_B27,",
          "166:  TMS320C64X_REG_B28,",
          "167:  TMS320C64X_REG_B29,",
          "168:  TMS320C64X_REG_B30,",
          "169:  TMS320C64X_REG_B31,",
          "170:  TMS320C64X_REG_PCE1,",
          "172:  TMS320C64X_REG_ENDING, // <-- mark the end of the list of registers",
          "175:  TMS320C64X_REG_EFR = TMS320C64X_REG_ECR,",
          "176:  TMS320C64X_REG_IFR = TMS320C64X_REG_ISR,",
          "177: } tms320c64x_reg;",
          "179: typedef enum tms320c64x_insn {",
          "180:  TMS320C64X_INS_INVALID = 0,",
          "182:  TMS320C64X_INS_ABS,",
          "183:  TMS320C64X_INS_ABS2,",
          "184:  TMS320C64X_INS_ADD,",
          "185:  TMS320C64X_INS_ADD2,",
          "186:  TMS320C64X_INS_ADD4,",
          "187:  TMS320C64X_INS_ADDAB,",
          "188:  TMS320C64X_INS_ADDAD,",
          "189:  TMS320C64X_INS_ADDAH,",
          "190:  TMS320C64X_INS_ADDAW,",
          "191:  TMS320C64X_INS_ADDK,",
          "192:  TMS320C64X_INS_ADDKPC,",
          "193:  TMS320C64X_INS_ADDU,",
          "194:  TMS320C64X_INS_AND,",
          "195:  TMS320C64X_INS_ANDN,",
          "196:  TMS320C64X_INS_AVG2,",
          "197:  TMS320C64X_INS_AVGU4,",
          "198:  TMS320C64X_INS_B,",
          "199:  TMS320C64X_INS_BDEC,",
          "200:  TMS320C64X_INS_BITC4,",
          "201:  TMS320C64X_INS_BNOP,",
          "202:  TMS320C64X_INS_BPOS,",
          "203:  TMS320C64X_INS_CLR,",
          "204:  TMS320C64X_INS_CMPEQ,",
          "205:  TMS320C64X_INS_CMPEQ2,",
          "206:  TMS320C64X_INS_CMPEQ4,",
          "207:  TMS320C64X_INS_CMPGT,",
          "208:  TMS320C64X_INS_CMPGT2,",
          "209:  TMS320C64X_INS_CMPGTU4,",
          "210:  TMS320C64X_INS_CMPLT,",
          "211:  TMS320C64X_INS_CMPLTU,",
          "212:  TMS320C64X_INS_DEAL,",
          "213:  TMS320C64X_INS_DOTP2,",
          "214:  TMS320C64X_INS_DOTPN2,",
          "215:  TMS320C64X_INS_DOTPNRSU2,",
          "216:  TMS320C64X_INS_DOTPRSU2,",
          "217:  TMS320C64X_INS_DOTPSU4,",
          "218:  TMS320C64X_INS_DOTPU4,",
          "219:  TMS320C64X_INS_EXT,",
          "220:  TMS320C64X_INS_EXTU,",
          "221:  TMS320C64X_INS_GMPGTU,",
          "222:  TMS320C64X_INS_GMPY4,",
          "223:  TMS320C64X_INS_LDB,",
          "224:  TMS320C64X_INS_LDBU,",
          "225:  TMS320C64X_INS_LDDW,",
          "226:  TMS320C64X_INS_LDH,",
          "227:  TMS320C64X_INS_LDHU,",
          "228:  TMS320C64X_INS_LDNDW,",
          "229:  TMS320C64X_INS_LDNW,",
          "230:  TMS320C64X_INS_LDW,",
          "231:  TMS320C64X_INS_LMBD,",
          "232:  TMS320C64X_INS_MAX2,",
          "233:  TMS320C64X_INS_MAXU4,",
          "234:  TMS320C64X_INS_MIN2,",
          "235:  TMS320C64X_INS_MINU4,",
          "236:  TMS320C64X_INS_MPY,",
          "237:  TMS320C64X_INS_MPY2,",
          "238:  TMS320C64X_INS_MPYH,",
          "239:  TMS320C64X_INS_MPYHI,",
          "240:  TMS320C64X_INS_MPYHIR,",
          "241:  TMS320C64X_INS_MPYHL,",
          "242:  TMS320C64X_INS_MPYHLU,",
          "243:  TMS320C64X_INS_MPYHSLU,",
          "244:  TMS320C64X_INS_MPYHSU,",
          "245:  TMS320C64X_INS_MPYHU,",
          "246:  TMS320C64X_INS_MPYHULS,",
          "247:  TMS320C64X_INS_MPYHUS,",
          "248:  TMS320C64X_INS_MPYLH,",
          "249:  TMS320C64X_INS_MPYLHU,",
          "250:  TMS320C64X_INS_MPYLI,",
          "251:  TMS320C64X_INS_MPYLIR,",
          "252:  TMS320C64X_INS_MPYLSHU,",
          "253:  TMS320C64X_INS_MPYLUHS,",
          "254:  TMS320C64X_INS_MPYSU,",
          "255:  TMS320C64X_INS_MPYSU4,",
          "256:  TMS320C64X_INS_MPYU,",
          "257:  TMS320C64X_INS_MPYU4,",
          "258:  TMS320C64X_INS_MPYUS,",
          "259:  TMS320C64X_INS_MVC,",
          "260:  TMS320C64X_INS_MVD,",
          "261:  TMS320C64X_INS_MVK,",
          "262:  TMS320C64X_INS_MVKL,",
          "263:  TMS320C64X_INS_MVKLH,",
          "264:  TMS320C64X_INS_NOP,",
          "265:  TMS320C64X_INS_NORM,",
          "266:  TMS320C64X_INS_OR,",
          "267:  TMS320C64X_INS_PACK2,",
          "268:  TMS320C64X_INS_PACKH2,",
          "269:  TMS320C64X_INS_PACKH4,",
          "270:  TMS320C64X_INS_PACKHL2,",
          "271:  TMS320C64X_INS_PACKL4,",
          "272:  TMS320C64X_INS_PACKLH2,",
          "273:  TMS320C64X_INS_ROTL,",
          "274:  TMS320C64X_INS_SADD,",
          "275:  TMS320C64X_INS_SADD2,",
          "276:  TMS320C64X_INS_SADDU4,",
          "277:  TMS320C64X_INS_SADDUS2,",
          "278:  TMS320C64X_INS_SAT,",
          "279:  TMS320C64X_INS_SET,",
          "280:  TMS320C64X_INS_SHFL,",
          "281:  TMS320C64X_INS_SHL,",
          "282:  TMS320C64X_INS_SHLMB,",
          "283:  TMS320C64X_INS_SHR,",
          "284:  TMS320C64X_INS_SHR2,",
          "285:  TMS320C64X_INS_SHRMB,",
          "286:  TMS320C64X_INS_SHRU,",
          "287:  TMS320C64X_INS_SHRU2,",
          "288:  TMS320C64X_INS_SMPY,",
          "289:  TMS320C64X_INS_SMPY2,",
          "290:  TMS320C64X_INS_SMPYH,",
          "291:  TMS320C64X_INS_SMPYHL,",
          "292:  TMS320C64X_INS_SMPYLH,",
          "293:  TMS320C64X_INS_SPACK2,",
          "294:  TMS320C64X_INS_SPACKU4,",
          "295:  TMS320C64X_INS_SSHL,",
          "296:  TMS320C64X_INS_SSHVL,",
          "297:  TMS320C64X_INS_SSHVR,",
          "298:  TMS320C64X_INS_SSUB,",
          "299:  TMS320C64X_INS_STB,",
          "300:  TMS320C64X_INS_STDW,",
          "301:  TMS320C64X_INS_STH,",
          "302:  TMS320C64X_INS_STNDW,",
          "303:  TMS320C64X_INS_STNW,",
          "304:  TMS320C64X_INS_STW,",
          "305:  TMS320C64X_INS_SUB,",
          "306:  TMS320C64X_INS_SUB2,",
          "307:  TMS320C64X_INS_SUB4,",
          "308:  TMS320C64X_INS_SUBAB,",
          "309:  TMS320C64X_INS_SUBABS4,",
          "310:  TMS320C64X_INS_SUBAH,",
          "311:  TMS320C64X_INS_SUBAW,",
          "312:  TMS320C64X_INS_SUBC,",
          "313:  TMS320C64X_INS_SUBU,",
          "314:  TMS320C64X_INS_SWAP4,",
          "315:  TMS320C64X_INS_UNPKHU4,",
          "316:  TMS320C64X_INS_UNPKLU4,",
          "317:  TMS320C64X_INS_XOR,",
          "318:  TMS320C64X_INS_XPND2,",
          "319:  TMS320C64X_INS_XPND4,",
          "321:  TMS320C64X_INS_IDLE,",
          "322:  TMS320C64X_INS_MV,",
          "323:  TMS320C64X_INS_NEG,",
          "324:  TMS320C64X_INS_NOT,",
          "325:  TMS320C64X_INS_SWAP2,",
          "326:  TMS320C64X_INS_ZERO,",
          "328:  TMS320C64X_INS_ENDING,   // <-- mark the end of the list of instructions",
          "329: } tms320c64x_insn;",
          "331: typedef enum tms320c64x_insn_group {",
          "332:  TMS320C64X_GRP_INVALID = 0, // = CS_GRP_INVALID",
          "334:  TMS320C64X_GRP_JUMP, // = CS_GRP_JUMP",
          "336:  TMS320C64X_GRP_FUNIT_D = 128,",
          "337:  TMS320C64X_GRP_FUNIT_L,",
          "338:  TMS320C64X_GRP_FUNIT_M,",
          "339:  TMS320C64X_GRP_FUNIT_S,",
          "340:  TMS320C64X_GRP_FUNIT_NO,",
          "342:  TMS320C64X_GRP_ENDING,   // <-- mark the end of the list of groups",
          "343: } tms320c64x_insn_group;",
          "345: typedef enum tms320c64x_funit {",
          "346:  TMS320C64X_FUNIT_INVALID = 0,",
          "347:  TMS320C64X_FUNIT_D,",
          "348:  TMS320C64X_FUNIT_L,",
          "349:  TMS320C64X_FUNIT_M,",
          "350:  TMS320C64X_FUNIT_S,",
          "351:  TMS320C64X_FUNIT_NO",
          "352: } tms320c64x_funit;",
          "354: #ifdef __cplusplus",
          "355: }",
          "356: #endif",
          "358: #endif",
          "",
          "---------------"
        ],
        "tests/test_tms320c64x.c||tests/test_tms320c64x.c": [
          "File: tests/test_tms320c64x.c -> tests/test_tms320c64x.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include \"../myinttypes.h\"",
          "7: #include <capstone/capstone.h>",
          "9: struct platform {",
          "10:  cs_arch arch;",
          "11:  cs_mode mode;",
          "12:  unsigned char *code;",
          "13:  size_t size;",
          "14:  char *comment;",
          "15: };",
          "17: static csh handle;",
          "19: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "20: {",
          "21:  unsigned char *c;",
          "23:  printf(\"%s\", comment);",
          "24:  for (c = str; c < str + len; c++) {",
          "25:   printf(\"0x%02x \", *c & 0xff);",
          "26:  }",
          "28:  printf(\"\\n\");",
          "29: }",
          "31: static void print_insn_detail(cs_insn *ins)",
          "32: {",
          "33:  cs_tms320c64x *tms320c64x;",
          "34:  int i;",
          "37:  if (ins->detail == NULL)",
          "38:   return;",
          "40:  tms320c64x = &(ins->detail->tms320c64x);",
          "41:  if (tms320c64x->op_count)",
          "42:   printf(\"\\top_count: %u\\n\", tms320c64x->op_count);",
          "44:  for (i = 0; i < tms320c64x->op_count; i++) {",
          "45:   cs_tms320c64x_op *op = &(tms320c64x->operands[i]);",
          "46:   switch((int)op->type) {",
          "47:    default:",
          "48:     break;",
          "49:    case TMS320C64X_OP_REG:",
          "50:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "51:     break;",
          "52:    case TMS320C64X_OP_IMM:",
          "53:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "54:     break;",
          "55:    case TMS320C64X_OP_MEM:",
          "56:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "57:     if (op->mem.base != TMS320C64X_REG_INVALID)",
          "58:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "59:        i, cs_reg_name(handle, op->mem.base));",
          "60:     printf(\"\\t\\t\\toperands[%u].mem.disptype: \", i);",
          "61:     if(op->mem.disptype == TMS320C64X_MEM_DISP_INVALID) {",
          "62:      printf(\"Invalid\\n\");",
          "63:      printf(\"\\t\\t\\toperands[%u].mem.disp: %u\\n\", i, op->mem.disp);",
          "64:     }",
          "65:     if(op->mem.disptype == TMS320C64X_MEM_DISP_CONSTANT) {",
          "66:      printf(\"Constant\\n\");",
          "67:      printf(\"\\t\\t\\toperands[%u].mem.disp: %u\\n\", i, op->mem.disp);",
          "68:     }",
          "69:     if(op->mem.disptype == TMS320C64X_MEM_DISP_REGISTER) {",
          "70:      printf(\"Register\\n\");",
          "71:      printf(\"\\t\\t\\toperands[%u].mem.disp: %s\\n\", i, cs_reg_name(handle, op->mem.disp));",
          "72:     }",
          "73:     printf(\"\\t\\t\\toperands[%u].mem.unit: %u\\n\", i, op->mem.unit);",
          "74:     printf(\"\\t\\t\\toperands[%u].mem.direction: \", i);",
          "75:     if(op->mem.direction == TMS320C64X_MEM_DIR_INVALID)",
          "76:      printf(\"Invalid\\n\");",
          "77:     if(op->mem.direction == TMS320C64X_MEM_DIR_FW)",
          "78:      printf(\"Forward\\n\");",
          "79:     if(op->mem.direction == TMS320C64X_MEM_DIR_BW)",
          "80:      printf(\"Backward\\n\");",
          "81:     printf(\"\\t\\t\\toperands[%u].mem.modify: \", i);",
          "82:     if(op->mem.modify == TMS320C64X_MEM_MOD_INVALID)",
          "83:      printf(\"Invalid\\n\");",
          "84:     if(op->mem.modify == TMS320C64X_MEM_MOD_NO)",
          "85:      printf(\"No\\n\");",
          "86:     if(op->mem.modify == TMS320C64X_MEM_MOD_PRE)",
          "87:      printf(\"Pre\\n\");",
          "88:     if(op->mem.modify == TMS320C64X_MEM_MOD_POST)",
          "89:      printf(\"Post\\n\");",
          "90:     printf(\"\\t\\t\\toperands[%u].mem.scaled: %u\\n\", i, op->mem.scaled);",
          "93:     break;",
          "94:    case TMS320C64X_OP_REGPAIR:",
          "95:     printf(\"\\t\\toperands[%u].type: REGPAIR = %s:%s\\n\", i, cs_reg_name(handle, op->reg + 1), cs_reg_name(handle, op->reg));",
          "96:     break;",
          "97:   }",
          "98:  }",
          "100:  printf(\"\\tFunctional unit: \");",
          "101:  switch(tms320c64x->funit.unit) {",
          "102:   case TMS320C64X_FUNIT_D:",
          "103:    printf(\"D%u\\n\", tms320c64x->funit.side);",
          "104:    break;",
          "105:   case TMS320C64X_FUNIT_L:",
          "106:    printf(\"L%u\\n\", tms320c64x->funit.side);",
          "107:    break;",
          "108:   case TMS320C64X_FUNIT_M:",
          "109:    printf(\"M%u\\n\", tms320c64x->funit.side);",
          "110:    break;",
          "111:   case TMS320C64X_FUNIT_S:",
          "112:    printf(\"S%u\\n\", tms320c64x->funit.side);",
          "113:    break;",
          "114:   case TMS320C64X_FUNIT_NO:",
          "115:    printf(\"No Functional Unit\\n\");",
          "116:    break;",
          "117:   default:",
          "118:    printf(\"Unknown (Unit %u, Side %u)\\n\", tms320c64x->funit.unit, tms320c64x->funit.side);",
          "119:    break;",
          "120:  }",
          "121:  if(tms320c64x->funit.crosspath == 1)",
          "122:   printf(\"\\tCrosspath: 1\\n\");",
          "124:  if(tms320c64x->condition.reg != TMS320C64X_REG_INVALID)",
          "125:   printf(\"\\tCondition: [%c%s]\\n\", (tms320c64x->condition.zero == 1) ? '!' : ' ', cs_reg_name(handle, tms320c64x->condition.reg));",
          "126:  printf(\"\\tParallel: %s\\n\", (tms320c64x->parallel == 1) ? \"true\" : \"false\");",
          "128:  printf(\"\\n\");",
          "129: }",
          "131: static void test()",
          "132: {",
          "133: #define TMS320C64X_CODE \"\\x01\\xac\\x88\\x40\\x81\\xac\\x88\\x43\\x00\\x00\\x00\\x00\\x02\\x90\\x32\\x96\\x02\\x80\\x46\\x9e\\x05\\x3c\\x83\\xe6\\x0b\\x0c\\x8b\\x24\"",
          "135:  struct platform platforms[] = {",
          "136:   {",
          "137:    CS_ARCH_TMS320C64X,",
          "138:    CS_MODE_BIG_ENDIAN,",
          "139:    (unsigned char*)TMS320C64X_CODE,",
          "140:    sizeof(TMS320C64X_CODE) - 1,",
          "141:    \"TMS320C64x\",",
          "142:   },",
          "143:  };",
          "145:  uint64_t address = 0x1000;",
          "146:  cs_insn *insn;",
          "147:  int i;",
          "148:  size_t count;",
          "150:  for (i = 0; i < sizeof(platforms)/sizeof(platforms[0]); i++) {",
          "151:   cs_err err = cs_open(platforms[i].arch, platforms[i].mode, &handle);",
          "152:   if (err) {",
          "153:    printf(\"Failed on cs_open() with error returned: %u\\n\", err);",
          "154:    continue;",
          "155:   }",
          "157:   cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "159:   count = cs_disasm(handle, platforms[i].code, platforms[i].size, address, 0, &insn);",
          "160:   if (count) {",
          "161:    size_t j;",
          "163:    printf(\"****************\\n\");",
          "164:    printf(\"Platform: %s\\n\", platforms[i].comment);",
          "165:    print_string_hex(\"Code:\", platforms[i].code, platforms[i].size);",
          "166:    printf(\"Disasm:\\n\");",
          "168:    for (j = 0; j < count; j++) {",
          "169:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "170:     print_insn_detail(&insn[j]);",
          "171:    }",
          "172:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "175:    cs_free(insn, count);",
          "176:   } else {",
          "177:    printf(\"****************\\n\");",
          "178:    printf(\"Platform: %s\\n\", platforms[i].comment);",
          "179:    print_string_hex(\"Code:\", platforms[i].code, platforms[i].size);",
          "180:    printf(\"ERROR: Failed to disasm given code!\\n\");",
          "181:   }",
          "183:   printf(\"\\n\");",
          "185:   cs_close(&handle);",
          "186:  }",
          "187: }",
          "189: int main()",
          "190: {",
          "191:  test();",
          "193:  return 0;",
          "194: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44ca0e3ab343c011ffce512419934ee69a556ae8",
      "candidate_info": {
        "commit_hash": "44ca0e3ab343c011ffce512419934ee69a556ae8",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/44ca0e3ab343c011ffce512419934ee69a556ae8",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_tms320c64x.c"
        ],
        "message": "Added cstool support for tms320c64x",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_tms320c64x.c||cstool/cstool_tms320c64x.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: void print_insn_detail_sysz(csh handle, cs_insn *ins);",
          "15: void print_insn_detail_xcore(csh handle, cs_insn *ins);",
          "16: void print_insn_detail_m68k(csh handle, cs_insn *ins);",
          "18: void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "19: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: void print_insn_detail_tms320c64x(csh handle, cs_insn *ins);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   printf(\"        m68k40:    m68k_040\\n\");",
          "124:  }",
          "126:  printf(\"\\n\");",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (cs_support(CS_ARCH_TMS320C64X)) {",
          "128:   printf(\"        tms320c64x:TMS320C64x\\n\");",
          "129:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:   err = cs_open(CS_ARCH_M68K, CS_MODE_M68K_040, &handle);",
          "320:  }",
          "323:  if (err) {",
          "324:   printf(\"ERROR: Failed on cs_open(), quit!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:  if (!strcmp(mode,\"tms320c64x\")) {",
          "328:   arch = CS_ARCH_TMS320C64X;",
          "329:   err = cs_open(CS_ARCH_TMS320C64X, CS_MODE_BIG_ENDIAN, &handle);",
          "330:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "383:      case CS_ARCH_M68K:",
          "384:         print_insn_detail_m68k(handle, &insn[i]);",
          "385:         break;",
          "386:     }",
          "388:     if (insn[i].detail->groups_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:      case CS_ARCH_TMS320C64X:",
          "397:         print_insn_detail_tms320c64x(handle, &insn[i]);",
          "398:         break;",
          "",
          "---------------"
        ],
        "cstool/cstool_tms320c64x.c||cstool/cstool_tms320c64x.c": [
          "File: cstool/cstool_tms320c64x.c -> cstool/cstool_tms320c64x.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include <capstone/capstone.h>",
          "7: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "9: void print_insn_detail_tms320c64x(csh handle, cs_insn *ins)",
          "10: {",
          "11:  cs_tms320c64x *tms320c64x;",
          "12:  int i;",
          "15:  if (ins->detail == NULL)",
          "16:   return;",
          "18:  tms320c64x = &(ins->detail->tms320c64x);",
          "19:  if (tms320c64x->op_count)",
          "20:   printf(\"\\top_count: %u\\n\", tms320c64x->op_count);",
          "22:  for (i = 0; i < tms320c64x->op_count; i++) {",
          "23:   cs_tms320c64x_op *op = &(tms320c64x->operands[i]);",
          "24:   switch((int)op->type) {",
          "25:    default:",
          "26:     break;",
          "27:    case TMS320C64X_OP_REG:",
          "28:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "29:     break;",
          "30:    case TMS320C64X_OP_IMM:",
          "31:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "32:     break;",
          "33:    case TMS320C64X_OP_MEM:",
          "34:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "35:     if (op->mem.base != TMS320C64X_REG_INVALID)",
          "36:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "37:        i, cs_reg_name(handle, op->mem.base));",
          "38:     printf(\"\\t\\t\\toperands[%u].mem.disptype: \", i);",
          "39:     if(op->mem.disptype == TMS320C64X_MEM_DISP_INVALID) {",
          "40:      printf(\"Invalid\\n\");",
          "41:      printf(\"\\t\\t\\toperands[%u].mem.disp: %u\\n\", i, op->mem.disp);",
          "42:     }",
          "43:     if(op->mem.disptype == TMS320C64X_MEM_DISP_CONSTANT) {",
          "44:      printf(\"Constant\\n\");",
          "45:      printf(\"\\t\\t\\toperands[%u].mem.disp: %u\\n\", i, op->mem.disp);",
          "46:     }",
          "47:     if(op->mem.disptype == TMS320C64X_MEM_DISP_REGISTER) {",
          "48:      printf(\"Register\\n\");",
          "49:      printf(\"\\t\\t\\toperands[%u].mem.disp: %s\\n\", i, cs_reg_name(handle, op->mem.disp));",
          "50:     }",
          "51:     printf(\"\\t\\t\\toperands[%u].mem.unit: %u\\n\", i, op->mem.unit);",
          "52:     printf(\"\\t\\t\\toperands[%u].mem.direction: \", i);",
          "53:     if(op->mem.direction == TMS320C64X_MEM_DIR_INVALID)",
          "54:      printf(\"Invalid\\n\");",
          "55:     if(op->mem.direction == TMS320C64X_MEM_DIR_FW)",
          "56:      printf(\"Forward\\n\");",
          "57:     if(op->mem.direction == TMS320C64X_MEM_DIR_BW)",
          "58:      printf(\"Backward\\n\");",
          "59:     printf(\"\\t\\t\\toperands[%u].mem.modify: \", i);",
          "60:     if(op->mem.modify == TMS320C64X_MEM_MOD_INVALID)",
          "61:      printf(\"Invalid\\n\");",
          "62:     if(op->mem.modify == TMS320C64X_MEM_MOD_NO)",
          "63:      printf(\"No\\n\");",
          "64:     if(op->mem.modify == TMS320C64X_MEM_MOD_PRE)",
          "65:      printf(\"Pre\\n\");",
          "66:     if(op->mem.modify == TMS320C64X_MEM_MOD_POST)",
          "67:      printf(\"Post\\n\");",
          "68:     printf(\"\\t\\t\\toperands[%u].mem.scaled: %u\\n\", i, op->mem.scaled);",
          "70:     break;",
          "71:    case TMS320C64X_OP_REGPAIR:",
          "72:     printf(\"\\t\\toperands[%u].type: REGPAIR = %s:%s\\n\", i, cs_reg_name(handle, op->reg + 1), cs_reg_name(handle, op->reg));",
          "73:     break;",
          "74:   }",
          "75:  }",
          "77:  printf(\"\\tFunctional unit: \");",
          "78:  switch(tms320c64x->funit.unit) {",
          "79:   case TMS320C64X_FUNIT_D:",
          "80:    printf(\"D%u\\n\", tms320c64x->funit.side);",
          "81:    break;",
          "82:   case TMS320C64X_FUNIT_L:",
          "83:    printf(\"L%u\\n\", tms320c64x->funit.side);",
          "84:    break;",
          "85:   case TMS320C64X_FUNIT_M:",
          "86:    printf(\"M%u\\n\", tms320c64x->funit.side);",
          "87:    break;",
          "88:   case TMS320C64X_FUNIT_S:",
          "89:    printf(\"S%u\\n\", tms320c64x->funit.side);",
          "90:    break;",
          "91:   case TMS320C64X_FUNIT_NO:",
          "92:    printf(\"No Functional Unit\\n\");",
          "93:    break;",
          "94:   default:",
          "95:    printf(\"Unknown (Unit %u, Side %u)\\n\", tms320c64x->funit.unit, tms320c64x->funit.side);",
          "96:    break;",
          "97:  }",
          "98:  if(tms320c64x->funit.crosspath == 1)",
          "99:   printf(\"\\tCrosspath: 1\\n\");",
          "101:  if(tms320c64x->condition.reg != TMS320C64X_REG_INVALID)",
          "102:   printf(\"\\tCondition: [%c%s]\\n\", (tms320c64x->condition.zero == 1) ? '!' : ' ', cs_reg_name(handle, tms320c64x->condition.reg));",
          "103:  printf(\"\\tParallel: %s\\n\", (tms320c64x->parallel == 1) ? \"true\" : \"false\");",
          "105:  printf(\"\\n\");",
          "106: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "565b6c3363766daea7489c7ef3ad25d0d8455f25",
      "candidate_info": {
        "commit_hash": "565b6c3363766daea7489c7ef3ad25d0d8455f25",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/565b6c3363766daea7489c7ef3ad25d0d8455f25",
        "files": [
          "COMPILE_MSVC.TXT",
          "HACK.TXT",
          "contrib/cs_driver/cs_driver/cs_driver.c",
          "docs/README",
          "include/capstone/x86.h",
          "tests/test_winkernel.cpp",
          "windows/winkernel_mm.c",
          "windows/winkernel_mm.h"
        ],
        "message": "fix typo, style\n\nSigned-off-by: Satoshi Tanda <tanda.sat@gmail.com>",
        "before_after_code_files": [
          "contrib/cs_driver/cs_driver/cs_driver.c||contrics_driver/cs_driver/cs_driver.c",
          "include/capstone/x86.h||include/capstone/x86.h",
          "tests/test_winkernel.cpp||tests/test_winkernel.cpp",
          "windows/winkernel_mm.c||windows/winkernel_mm.c",
          "windows/winkernel_mm.h||windows/winkernel_mm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "contrib/cs_driver/cs_driver/cs_driver.c||contrics_driver/cs_driver/cs_driver.c": [
          "File: contrib/cs_driver/cs_driver/cs_driver.c -> contrics_driver/cs_driver/cs_driver.c"
        ],
        "include/capstone/x86.h||include/capstone/x86.h": [
          "File: include/capstone/x86.h -> include/capstone/x86.h"
        ],
        "tests/test_winkernel.cpp||tests/test_winkernel.cpp": [
          "File: tests/test_winkernel.cpp -> tests/test_winkernel.cpp"
        ],
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  return new_ptr;",
          "78: }",
          "83: #pragma warning(push)",
          "87: int CAPSTONE_API cs_winkernel_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr)",
          "88: {",
          "89:  int result = _vsnprintf(buffer, count, format, argptr);",
          "94:  if (result == -1 || (size_t)result == count) {",
          "95:   buffer[count - 1] = '\\0';",
          "96:  }",
          "98:  if (result == -1) {",
          "",
          "[Removed Lines]",
          "84: #pragma warning(disable : 28719)  // Banned API Usage : _vsnprintf is a Banned",
          "",
          "[Added Lines]",
          "87: #pragma warning(disable : 28719)",
          "",
          "---------------"
        ],
        "windows/winkernel_mm.h||windows/winkernel_mm.h": [
          "File: windows/winkernel_mm.h -> windows/winkernel_mm.h"
        ]
      }
    }
  ]
}