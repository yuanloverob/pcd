{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c758e127c9d81791cb55043abb418ce624dfcaf",
      "candidate_info": {
        "commit_hash": "8c758e127c9d81791cb55043abb418ce624dfcaf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8c758e127c9d81791cb55043abb418ce624dfcaf",
        "files": [
          "lib/http.js"
        ],
        "message": "Don't destroy on timeout",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1346:   var self = this;",
          "1347:   function emitTimeout() {",
          "1348:     self.emit('timeout');",
          "1350:   }",
          "1352:   if (this.socket && this.socket.writable) {",
          "",
          "[Removed Lines]",
          "1349:     self.destroy(new Error('timeout'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c02f9b7c844909cf5977d065b793c99eb0f9c45",
      "candidate_info": {
        "commit_hash": "8c02f9b7c844909cf5977d065b793c99eb0f9c45",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8c02f9b7c844909cf5977d065b793c99eb0f9c45",
        "files": [
          "src/node_buffer.cc",
          "src/node_buffer.h",
          "src/v8_typed_array.cc",
          "test/pummel/test-buffer-big.js"
        ],
        "message": "buffer: throw from constructor if length > kMaxLength\n\nThrow, don't abort. `new Buffer(0x3fffffff + 1)` used to bring down the process\nwith the following error message:\n\n  FATAL ERROR: v8::Object::SetIndexedPropertiesToExternalArrayData() length\n  exceeds max acceptable value\n\nFixes #2280.",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "src/node_buffer.h||src/node_buffer.h",
          "src/v8_typed_array.cc||src/v8_typed_array.cc",
          "test/pummel/test-buffer-big.js||test/pummel/test-buffer-big.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   HandleScope scope;",
          "180:   }",
          "181:   return args.This();",
          "182: }",
          "",
          "[Removed Lines]",
          "174:   if (args[0]->IsInt32()) {",
          "176:     size_t length = args[0]->Uint32Value();",
          "177:     new Buffer(args.This(), length);",
          "178:   } else {",
          "179:     return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "",
          "[Added Lines]",
          "174:   if (!args[0]->IsUint32()) return ThrowTypeError(\"Bad argument\");",
          "176:   size_t length = args[0]->Uint32Value();",
          "177:   if (length > Buffer::kMaxLength) {",
          "178:     return ThrowRangeError(\"length > kMaxLength\");",
          "180:   new Buffer(args.This(), length);",
          "",
          "---------------"
        ],
        "src/node_buffer.h||src/node_buffer.h": [
          "File: src/node_buffer.h -> src/node_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: class NODE_EXTERN Buffer: public ObjectWrap {",
          "67:  public:",
          "68:   static v8::Persistent<v8::FunctionTemplate> constructor_template;",
          "70:   static bool HasInstance(v8::Handle<v8::Value> val);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   static const int kMaxLength = 0x3fffffff;",
          "",
          "---------------"
        ],
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     }",
          "93:     size_t num_bytes = args[0]->Uint32Value();",
          "94:     void* buf = calloc(num_bytes, 1);",
          "95:     if (!buf)",
          "96:       return ThrowError(\"Unable to allocate ArrayBuffer.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     if (num_bytes > node::Buffer::kMaxLength) {",
          "95:       return ThrowRangeError(\"length > kMaxLength\");",
          "96:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:           v8::Integer::NewFromUnsigned(length * TBytes)};",
          "225:       buffer = ArrayBuffer::GetTemplate()->",
          "226:                  GetFunction()->NewInstance(1, argv);",
          "228:       void* buf = buffer->GetPointerFromInternalField(0);",
          "229:       args.This()->SetIndexedPropertiesToExternalArrayData(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:       if (buffer.IsEmpty()) return v8::Undefined(); // constructor failed",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253:       buffer = ArrayBuffer::GetTemplate()->",
          "254:                  GetFunction()->NewInstance(1, argv);",
          "257:       args.This()->SetIndexedPropertiesToExternalArrayData(",
          "258:           buf, TEAType, length);",
          "",
          "[Removed Lines]",
          "255:       void* buf = buffer->GetPointerFromInternalField(0);",
          "",
          "[Added Lines]",
          "260:       if (buffer.IsEmpty()) return v8::Undefined(); // constructor failed",
          "262:       void* buf = buffer->GetPointerFromInternalField(0);",
          "",
          "---------------"
        ],
        "test/pummel/test-buffer-big.js||test/pummel/test-buffer-big.js": [
          "File: test/pummel/test-buffer-big.js -> test/pummel/test-buffer-big.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "26: assert.throws(function() { new Buffer(0x3fffffff + 1) }, RangeError);",
          "27: assert.throws(function() { new Int8Array(0x3fffffff + 1) }, RangeError);",
          "28: assert.throws(function() { new ArrayBuffer(0x3fffffff + 1) }, RangeError);",
          "29: assert.throws(function() { new Float64Array(0x7ffffff + 1) }, RangeError);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8b33dc14787213a47a0f10f37137ec476d92952",
      "candidate_info": {
        "commit_hash": "d8b33dc14787213a47a0f10f37137ec476d92952",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d8b33dc14787213a47a0f10f37137ec476d92952",
        "files": [
          "lib/domain.js"
        ],
        "message": "lint",
        "before_after_code_files": [
          "lib/domain.js||lidomain.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/domain.js||lidomain.js": [
          "File: lib/domain.js -> lidomain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var inherits = util.inherits;",
          "",
          "[Removed Lines]",
          "28: var endMethods = [ 'end', 'abort', 'destroy', 'destroySoon' ];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ccdedab795a09c65336bba36005c2a96846fe36",
      "candidate_info": {
        "commit_hash": "0ccdedab795a09c65336bba36005c2a96846fe36",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0ccdedab795a09c65336bba36005c2a96846fe36",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.8.9",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "27: #define NODE_PATCH_VERSION 8",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "27: #define NODE_PATCH_VERSION 9",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0109a9f90acdfdb287436676f2384f7b072fbb6a",
      "candidate_info": {
        "commit_hash": "0109a9f90acdfdb287436676f2384f7b072fbb6a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0109a9f90acdfdb287436676f2384f7b072fbb6a",
        "files": [
          "src/node.cc",
          "src/node.js"
        ],
        "message": "Move MakeCallback to JS",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: static Persistent<String> uncaught_exception_symbol;",
          "114: static Persistent<String> emit_symbol;",
          "121: static bool print_eval = false;",
          "",
          "[Removed Lines]",
          "116: static Persistent<String> enter_symbol;",
          "117: static Persistent<String> exit_symbol;",
          "118: static Persistent<String> disposed_symbol;",
          "",
          "[Added Lines]",
          "116: static Persistent<Function> process_makeCallback;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1011:   TryCatch try_catch;",
          "1028:     }",
          "1031:   }",
          "1036:   }",
          "1050:   if (try_catch.HasCaught()) {",
          "1051:     FatalException(try_catch);",
          "",
          "[Removed Lines]",
          "1013:   if (enter_symbol.IsEmpty()) {",
          "1014:     enter_symbol = NODE_PSYMBOL(\"enter\");",
          "1015:     exit_symbol = NODE_PSYMBOL(\"exit\");",
          "1016:     disposed_symbol = NODE_PSYMBOL(\"_disposed\");",
          "1017:   }",
          "1019:   Local<Value> domain_v = object->Get(domain_symbol);",
          "1020:   Local<Object> domain;",
          "1021:   Local<Function> enter;",
          "1022:   Local<Function> exit;",
          "1023:   if (!domain_v->IsUndefined()) {",
          "1024:     domain = domain_v->ToObject();",
          "1025:     if (domain->Get(disposed_symbol)->BooleanValue()) {",
          "1027:       return Undefined();",
          "1029:     enter = Local<Function>::Cast(domain->Get(enter_symbol));",
          "1030:     enter->Call(domain, 0, NULL);",
          "1033:   if (try_catch.HasCaught()) {",
          "1034:     FatalException(try_catch);",
          "1035:     return Undefined();",
          "1038:   Local<Value> ret = callback->Call(object, argc, argv);",
          "1040:   if (try_catch.HasCaught()) {",
          "1041:     FatalException(try_catch);",
          "1042:     return Undefined();",
          "1043:   }",
          "1045:   if (!domain_v->IsUndefined()) {",
          "1046:     exit = Local<Function>::Cast(domain->Get(exit_symbol));",
          "1047:     exit->Call(domain, 0, NULL);",
          "1048:   }",
          "",
          "[Added Lines]",
          "1011:   if (process_makeCallback.IsEmpty()) {",
          "1012:     Local<Value> cb_v = process->Get(String::New(\"_makeCallback\"));",
          "1013:     if (!cb_v->IsFunction()) {",
          "1014:       fprintf(stderr, \"process._makeCallback assigned to non-function\\n\");",
          "1015:       abort();",
          "1017:     Local<Function> cb = cb_v.As<Function>();",
          "1018:     process_makeCallback = Persistent<Function>::New(cb);",
          "1021:   Local<Array> argArray = Array::New(argc);",
          "1022:   for (int i = 0; i < argc; i++) {",
          "1023:     argArray->Set(Integer::New(i), argv[i]);",
          "1026:   Local<Value> object_l = Local<Value>::New(object);",
          "1027:   Local<Value> callback_l = Local<Value>::New(callback);",
          "1029:   Local<Value> args[3] = { object_l, callback_l, argArray };",
          "1031:   Local<Value> ret = process_makeCallback->Call(process, ARRAY_SIZE(args), args);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1858:     ReportException(event_try_catch, true);",
          "1859:     exit(1);",
          "1860:   }",
          "1864: }",
          "",
          "[Removed Lines]",
          "1863:   StartTickSpinner();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     startup.processAssert();",
          "46:     startup.processConfig();",
          "47:     startup.processNextTick();",
          "48:     startup.processStdio();",
          "49:     startup.processKillAndExit();",
          "50:     startup.processSignalHandlers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     startup.processMakeCallback();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:       if (value === 'false') return false;",
          "225:       return value;",
          "226:     });",
          "229:   startup.processNextTick = function() {",
          "230:     var nextTickQueue = [];",
          "231:     var nextTickIndex = 0;",
          "233:     process._tickCallback = function() {",
          "234:       var nextTickLength = nextTickQueue.length;",
          "235:       if (nextTickLength === 0) return;",
          "237:       while (nextTickIndex < nextTickLength) {",
          "238:         var tock = nextTickQueue[nextTickIndex++];",
          "",
          "[Removed Lines]",
          "227:   }",
          "",
          "[Added Lines]",
          "228:   };",
          "230:   startup.processMakeCallback = function() {",
          "231:     process._makeCallback = function(obj, fn, args) {",
          "232:       var domain = obj.domain;",
          "233:       if (domain) {",
          "234:         if (domain._disposed) return;",
          "235:         domain.enter();",
          "236:       }",
          "238:       var ret = fn.apply(obj, args);",
          "240:       if (domain) domain.exit();",
          "242:       return ret;",
          "243:     };",
          "244:   };",
          "249:     var inTick = false;",
          "251:     function tickDone() {",
          "252:       nextTickQueue.splice(0, nextTickIndex);",
          "253:       nextTickIndex = 0;",
          "254:       inTick = false;",
          "255:       if (nextTickQueue.length) {",
          "256:         process._needTickCallback();",
          "257:       }",
          "258:     }",
          "261:       if (inTick) return;",
          "264:       inTick = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:           if (tock.domain._disposed) continue;",
          "242:           tock.domain.enter();",
          "243:         }",
          "245:         if (tock.domain) {",
          "246:           tock.domain.exit();",
          "247:         }",
          "248:       }",
          "252:     };",
          "254:     process.nextTick = function(callback) {",
          "",
          "[Removed Lines]",
          "244:         callback();",
          "250:       nextTickQueue.splice(0, nextTickIndex);",
          "251:       nextTickIndex = 0;",
          "",
          "[Added Lines]",
          "273:         var threw = true;",
          "274:         try {",
          "275:           callback();",
          "276:           threw = false;",
          "277:         } finally {",
          "278:           if (threw) tickDone();",
          "279:         }",
          "285:       tickDone();",
          "",
          "---------------"
        ]
      }
    }
  ]
}