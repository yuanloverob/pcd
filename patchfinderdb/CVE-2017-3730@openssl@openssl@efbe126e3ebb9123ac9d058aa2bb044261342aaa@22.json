{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9590d00fc7c269f3e90b93cf6ac17238f0ca2c6",
      "candidate_info": {
        "commit_hash": "e9590d00fc7c269f3e90b93cf6ac17238f0ca2c6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e9590d00fc7c269f3e90b93cf6ac17238f0ca2c6",
        "files": [
          "crypto/bn/bn_lib.c",
          "crypto/bn/bn_print.c",
          "crypto/bn/bn_rand.c",
          "doc/crypto/BN_bn2bin.pod",
          "doc/crypto/BN_rand.pod"
        ],
        "message": "Misc BN fixes\n\nNever output -0; make \"negative zero\" an impossibility.\nDo better checking on BN_rand top/bottom requirements and #bits.\nUpdate doc.\nIgnoring trailing garbage in BN_asc2bn.\n\nPort this commit from boringSSL: https://boringssl.googlesource.com/boringssl/+/899b9b19a4cd3fe526aaf5047ab9234cdca19f7d%5E!/\n        Ensure |BN_div| never gives negative zero in the no_branch code.\n\n        Have |bn_correct_top| fix |bn->neg| if the input is zero so that we\n        don't have negative zeros lying around.\n\n        Thanks to Brian Smith for noticing.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 01c09f9fde5793e0b3712d602b02e2aed4908e8d)",
        "before_after_code_files": [
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/bn/bn_print.c||crypto/bn/bn_print.c",
          "crypto/bn/bn_rand.c||crypto/bn/bn_rand.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:         }",
          "1032:         a->top = tmp_top;",
          "1033:     }",
          "1034:     bn_pollute(a);",
          "1035: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:     if (a->top == 0)",
          "1035:         a->neg = 0;",
          "",
          "---------------"
        ],
        "crypto/bn/bn_print.c||crypto/bn/bn_print.c": [
          "File: crypto/bn/bn_print.c -> crypto/bn/bn_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     char *buf;",
          "24:     char *p;",
          "32:     if (buf == NULL) {",
          "33:         BNerr(BN_F_BN_BN2HEX, ERR_R_MALLOC_FAILURE);",
          "34:         goto err;",
          "",
          "[Removed Lines]",
          "26:     if (a->neg && BN_is_zero(a)) {",
          "28:         buf = OPENSSL_malloc(3);",
          "29:     } else {",
          "30:         buf = OPENSSL_malloc(a->top * BN_BYTES * 2 + 2);",
          "31:     }",
          "",
          "[Added Lines]",
          "26:     if (BN_is_zero(a))",
          "27:         return OPENSSL_strdup(\"0\");",
          "28:     buf = OPENSSL_malloc(a->top * BN_BYTES * 2 + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:     }",
          "187:     ret->top = h;",
          "188:     bn_correct_top(ret);",
          "192:     bn_check_top(ret);",
          "193:     return (num);",
          "194:  err:",
          "195:     if (*bn == NULL)",
          "",
          "[Removed Lines]",
          "189:     ret->neg = neg;",
          "",
          "[Added Lines]",
          "190:     if (ret->top != 0)",
          "191:         ret->neg = neg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:     if (j == BN_DEC_NUM)",
          "242:         j = 0;",
          "243:     l = 0;",
          "245:         l *= 10;",
          "246:         l += *a - '0';",
          "247:         a++;",
          "",
          "[Removed Lines]",
          "244:     while (*a) {",
          "",
          "[Added Lines]",
          "243:     while (--i >= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:             j = 0;",
          "254:         }",
          "255:     }",
          "258:     bn_correct_top(ret);",
          "260:     bn_check_top(ret);",
          "261:     return (num);",
          "262:  err:",
          "263:     if (*bn == NULL)",
          "",
          "[Removed Lines]",
          "256:     ret->neg = neg;",
          "",
          "[Added Lines]",
          "260:     if (ret->top != 0)",
          "261:         ret->neg = neg;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:         if (!BN_dec2bn(bn, p))",
          "279:             return 0;",
          "280:     }",
          "282:         (*bn)->neg = 1;",
          "283:     return 1;",
          "284: }",
          "",
          "[Removed Lines]",
          "281:     if (*a == '-')",
          "",
          "[Added Lines]",
          "284:     if (*a == '-' && (*bn)->top != 0)",
          "",
          "---------------"
        ],
        "crypto/bn/bn_rand.c||crypto/bn/bn_rand.c": [
          "File: crypto/bn/bn_rand.c -> crypto/bn/bn_rand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     int ret = 0, bit, bytes, mask;",
          "21:     time_t tim;",
          "28:     if (bits == 0) {",
          "29:         BN_zero(rnd);",
          "30:         return 1;",
          "31:     }",
          "33:     bytes = (bits + 7) / 8;",
          "34:     bit = (bits - 1) % 8;",
          "",
          "[Removed Lines]",
          "23:     if (bits < 0 || (bits == 1 && top > 0)) {",
          "24:         BNerr(BN_F_BNRAND, BN_R_BITS_TOO_SMALL);",
          "25:         return 0;",
          "26:     }",
          "",
          "[Added Lines]",
          "24:         if (top != BN_RAND_TOP_ANY || bottom != BN_RAND_BOTTOM_ANY)",
          "25:             goto toosmall;",
          "29:     if (bits < 0 || (bits == 1 && top > 0))",
          "30:         goto toosmall;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     OPENSSL_clear_free(buf, bytes);",
          "89:     bn_check_top(rnd);",
          "90:     return (ret);",
          "91: }",
          "93: int BN_rand(BIGNUM *rnd, int bits, int top, int bottom)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: toosmall:",
          "92:     BNerr(BN_F_BNRAND, BN_R_BITS_TOO_SMALL);",
          "93:     return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c088325b42cee1236f7b4996dd71f93ecc95bd5d",
      "candidate_info": {
        "commit_hash": "c088325b42cee1236f7b4996dd71f93ecc95bd5d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c088325b42cee1236f7b4996dd71f93ecc95bd5d",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Fix SSL_get0_raw_cipherlist()\n\nSSL_get0_raw_cipherlist() was a little too \"raw\" in the case of an SSLv2\ncompat ClientHello. In 1.0.2 and below, during version negotiation, if\nwe received an SSLv2 compat ClientHello but actually wanted to do SSLv3+\nthen we would construct a \"fake\" SSLv3+ ClientHello. This \"fake\" ClientHello\nwould have its ciphersuite list converted to the SSLv3+ format. It was\nthis \"fake\" raw list that got saved away to later be returned by a call to\nSSL_get0_raw_cipherlist().\n\nIn 1.1.0+ version negotiation works differently and we process an SSLv2\ncompat ClientHello directly without the need for an intermediary \"fake\"\nClientHello. This meant that the raw ciphersuite list being saved was in\nthe SSLv2 format. Any caller of this function would not expect that and\npotentially overread the returned buffer by one byte.\n\nFixes #2189\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2280)\n(cherry picked from commit 07afdf3c3ac97af4f2b4eec22a97f7230f8227e0)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3256:         return NULL;",
          "3257:     }",
          "3269:     }",
          "3274:         goto err;",
          "3275:     }",
          "",
          "[Removed Lines]",
          "3259:     if ((skp == NULL) || (*skp == NULL)) {",
          "3261:         if (sk == NULL) {",
          "3262:             SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST, ERR_R_MALLOC_FAILURE);",
          "3264:             return NULL;",
          "3265:         }",
          "3266:     } else {",
          "3267:         sk = *skp;",
          "3268:         sk_SSL_CIPHER_zero(sk);",
          "3271:     if (!PACKET_memdup(cipher_suites, &s->s3->tmp.ciphers_raw,",
          "3272:                        &s->s3->tmp.ciphers_rawlen)) {",
          "",
          "[Added Lines]",
          "3259:     sk = sk_SSL_CIPHER_new_null();",
          "3260:     if (sk == NULL) {",
          "3261:         SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST, ERR_R_MALLOC_FAILURE);",
          "3263:         return NULL;",
          "3266:     if (sslv2format) {",
          "3267:         size_t numciphers = PACKET_remaining(cipher_suites) / n;",
          "3268:         PACKET sslv2ciphers = *cipher_suites;",
          "3269:         unsigned int leadbyte;",
          "3270:         unsigned char *raw;",
          "3279:         raw = s->s3->tmp.ciphers_raw = OPENSSL_malloc(numciphers * n);",
          "3280:         if (raw == NULL) {",
          "3282:             goto err;",
          "3283:         }",
          "3284:         for (s->s3->tmp.ciphers_rawlen = 0;",
          "3285:              PACKET_remaining(&sslv2ciphers) > 0;",
          "3286:              raw += TLS_CIPHER_LEN) {",
          "3287:             if (!PACKET_get_1(&sslv2ciphers, &leadbyte)",
          "3288:                     || (leadbyte == 0",
          "3289:                         && !PACKET_copy_bytes(&sslv2ciphers, raw,",
          "3290:                                               TLS_CIPHER_LEN))",
          "3291:                     || (leadbyte != 0",
          "3292:                         && !PACKET_forward(&sslv2ciphers, TLS_CIPHER_LEN))) {",
          "3294:                 OPENSSL_free(raw);",
          "3295:                 s->s3->tmp.ciphers_raw = NULL;",
          "3296:                 s->s3->tmp.ciphers_rawlen = 0;",
          "3297:                 goto err;",
          "3298:             }",
          "3299:             if (leadbyte == 0)",
          "3300:                 s->s3->tmp.ciphers_rawlen += TLS_CIPHER_LEN;",
          "3301:         }",
          "3302:     } else if (!PACKET_memdup(cipher_suites, &s->s3->tmp.ciphers_raw,",
          "3303:                            &s->s3->tmp.ciphers_rawlen)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3330:         goto err;",
          "3331:     }",
          "3336:  err:",
          "3339:     return NULL;",
          "3340: }",
          "",
          "[Removed Lines]",
          "3333:     if (skp != NULL)",
          "3335:     return (sk);",
          "3337:     if ((skp == NULL) || (*skp == NULL))",
          "3338:         sk_SSL_CIPHER_free(sk);",
          "",
          "[Added Lines]",
          "3365:     return sk;",
          "3367:     sk_SSL_CIPHER_free(sk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35c2aca31f943bf35a425128fb7068d52309bc94",
      "candidate_info": {
        "commit_hash": "35c2aca31f943bf35a425128fb7068d52309bc94",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/35c2aca31f943bf35a425128fb7068d52309bc94",
        "files": [
          "test/recipes/70-test_sslcbcpadding.t"
        ],
        "message": "Add missing parameter.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 243ecf19ddc0dc2366de1be5c404d66d483b196d)",
        "before_after_code_files": [
          "test/recipes/70-test_sslcbcpadding.t||test/recipes/70-test_sslcbcpadding.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/70-test_sslcbcpadding.t||test/recipes/70-test_sslcbcpadding.t": [
          "File: test/recipes/70-test_sslcbcpadding.t -> test/recipes/70-test_sslcbcpadding.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:             TLSProxy::Record::RT_APPLICATION_DATA,",
          "98:             TLSProxy::Record::VERS_TLS_1_2,",
          "99:             length($data),",
          "100:             length($data),",
          "101:             $plaintext_len,",
          "102:             $data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:             0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a59ab1c4dd27a4c7c6e88f3c33747532fd144412",
      "candidate_info": {
        "commit_hash": "a59ab1c4dd27a4c7c6e88f3c33747532fd144412",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a59ab1c4dd27a4c7c6e88f3c33747532fd144412",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix OCSP Status Request extension unbounded memory growth\n\nA malicious client can send an excessively large OCSP Status Request\nextension. If that client continually requests renegotiation,\nsending a large OCSP Status Request extension each time, then there will\nbe unbounded memory growth on the server. This will eventually lead to a\nDenial Of Service attack through memory exhaustion. Servers with a\ndefault configuration are vulnerable even if they do not support OCSP.\nBuilds using the \"no-ocsp\" build time option are not affected.\n\nI have also checked other extensions to see if they suffer from a similar\nproblem but I could not find any other issues.\n\nCVE-2016-6304\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2030:                     (&extension, &responder_id_list))",
          "2031:                     return 0;",
          "2033:                 while (PACKET_remaining(&responder_id_list) > 0) {",
          "2034:                     OCSP_RESPID *id;",
          "2035:                     PACKET responder_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2037:                 sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids,",
          "2038:                                         OCSP_RESPID_free);",
          "2039:                 if (PACKET_remaining(&responder_id_list) > 0) {",
          "2040:                     s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "2041:                     if (s->tlsext_ocsp_ids == NULL) {",
          "2043:                         return 0;",
          "2044:                     }",
          "2045:                 } else {",
          "2046:                     s->tlsext_ocsp_ids = NULL;",
          "2047:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2041:                         return 0;",
          "2042:                     }",
          "2051:                     id_data = PACKET_data(&responder_id);",
          "2052:                     id = d2i_OCSP_RESPID(NULL, &id_data,",
          "2053:                                          PACKET_remaining(&responder_id));",
          "",
          "[Removed Lines]",
          "2044:                     if (s->tlsext_ocsp_ids == NULL",
          "2045:                         && (s->tlsext_ocsp_ids =",
          "2046:                             sk_OCSP_RESPID_new_null()) == NULL) {",
          "2048:                         return 0;",
          "2049:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4cdd19a6a8a0845c08c8101538347f2d5a0d96c",
      "candidate_info": {
        "commit_hash": "f4cdd19a6a8a0845c08c8101538347f2d5a0d96c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f4cdd19a6a8a0845c08c8101538347f2d5a0d96c",
        "files": [
          "test/recipes/80-test_ssl_new.t"
        ],
        "message": "VMS fix of test/recipes/80-test_ssl_new.t\n\nOn VMS, file names with more than one period get all but the last get\nescaped with a ^, so 21-key-update.conf.in becomes 21-key-update^.conf.in\nThat means that %conf_dependent_tests and %skip become useless unless\nwe massage the file names that are used as indexes.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2678)\n(cherry picked from commit d89f66412ba5168e7d6fd9dd88619d927d716f55)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t": [
          "File: test/recipes/80-test_ssl_new.t -> test/recipes/80-test_ssl_new.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: my @conf_srcs =  glob(srctop_file(\"test\", \"ssl-tests\", \"*.conf.in\"));",
          "26: map { s/;.*// } @conf_srcs if $^O eq \"VMS\";",
          "30: # We hard-code the number of tests to double-check that the globbing above",
          "31: # finds all files as expected.",
          "",
          "[Removed Lines]",
          "27: my @conf_files = map { basename($_) } @conf_srcs;",
          "28: map { s/\\.in// } @conf_files;",
          "",
          "[Added Lines]",
          "27: my @conf_files = map { basename($_, \".in\") } @conf_srcs;",
          "28: map { s/\\^// } @conf_files if $^O eq \"VMS\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}