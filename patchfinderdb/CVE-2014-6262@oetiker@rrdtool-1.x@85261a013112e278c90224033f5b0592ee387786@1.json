{
  "cve_id": "CVE-2014-6262",
  "cve_desc": "Multiple format string vulnerabilities in the python module in RRDtool, as used in Zenoss Core before 4.2.5 and other products, allow remote attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted third argument to the rrdtool.graph function, aka ZEN-15415, a related issue to CVE-2013-2131.",
  "repo": "oetiker/rrdtool-1.x",
  "patch_hash": "85261a013112e278c90224033f5b0592ee387786",
  "patch_info": {
    "commit_hash": "85261a013112e278c90224033f5b0592ee387786",
    "repo": "oetiker/rrdtool-1.x",
    "commit_url": "https://github.com/oetiker/rrdtool-1.x/commit/85261a013112e278c90224033f5b0592ee387786",
    "files": [
      "src/rrd_graph.c",
      "src/rrd_graph.h"
    ],
    "message": "a proper fix to the bad_format checking misery",
    "before_after_code_files": [
      "src/rrd_graph.c||src/rrd_graph.c",
      "src/rrd_graph.h||src/rrd_graph.h"
    ]
  },
  "patch_diff": {
    "src/rrd_graph.c||src/rrd_graph.c": [
      "File: src/rrd_graph.c -> src/rrd_graph.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <sys/stat.h>",
      "10: #ifdef WIN32",
      "11: #include \"strftime.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: #include <glib.h>   // will use regex",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1622:                     prline.u_str = (char*)malloc((FMT_LEG_LEN + 2) * sizeof(char));",
      "1623:                     strftime(prline.u_str,",
      "1624:                              FMT_LEG_LEN, im->gdes[i].format, &tmvdef);",
      "1628:                     return -1;",
      "1629:                 } else {",
      "1630:                     prline.u_str =",
      "",
      "[Removed Lines]",
      "1625:                 } else if (bad_format(im->gdes[i].format)) {",
      "1626:                     rrd_set_error",
      "1627:                         (\"bad format for PRINT in '%s'\", im->gdes[i].format);",
      "",
      "[Added Lines]",
      "1626:                 } else if (bad_format_print(im->gdes[i].format)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1641:                     strftime(im->gdes[i].legend,",
      "1642:                              FMT_LEG_LEN, im->gdes[i].format, &tmvdef);",
      "1643:                 } else {",
      "1649:                     }",
      "1650: #ifdef HAVE_SNPRINTF",
      "1651:                     snprintf(im->gdes[i].legend,",
      "",
      "[Removed Lines]",
      "1644:                     if (bad_format(im->gdes[i].format)) {",
      "1645:                         rrd_set_error",
      "1646:                             (\"bad format for GPRINT in '%s'\",",
      "1647:                              im->gdes[i].format);",
      "1648:                         return -1;",
      "",
      "[Added Lines]",
      "1643:                     if (bad_format_print(im->gdes[i].format)) {",
      "1644:                        return -1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3959:     return 0;",
      "3960: }",
      "",
      "[Removed Lines]",
      "3963: static int bad_format_imginfo( char *fmt);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4036:         if (bad_format_imginfo(im.imginfo)) {",
      "4037:             rrd_info_free(im.grinfo);",
      "4038:             im_free(&im);",
      "4040:             return NULL;",
      "4041:         }",
      "4042:         path = strdup(im.graphfile);",
      "",
      "[Removed Lines]",
      "4039:             rrd_set_error(\"bad format for imginfo\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4479:             im->second_axis_legend[150]='\\0';",
      "4480:             break;",
      "4481:         case 1004:",
      "4484:                 return;",
      "4485:             }",
      "4486:             strncpy(im->second_axis_format,optarg,150);",
      "4487:             im->second_axis_format[150]='\\0';",
      "4488:             break;",
      "4489:         case 1010:",
      "4492:                 return;",
      "4493:             }",
      "4494:             strncpy(im->primary_axis_format,optarg,150);",
      "",
      "[Removed Lines]",
      "4482:             if (bad_format(optarg)){",
      "4483:                 rrd_set_error(\"use either %le or %lf formats\");",
      "4490:             if (bad_format(optarg)){",
      "4491:                 rrd_set_error(\"use either %le or %lf formats\");",
      "",
      "[Added Lines]",
      "4474:             if (bad_format_axis(optarg)){",
      "4481:             if (bad_format_axis(optarg)){",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4805: }",
      "4854: }",
      "4899: }",
      "4902: int vdef_parse(",
      "4903:     struct graph_desc_t",
      "",
      "[Removed Lines]",
      "4808: int bad_format(",
      "4809:     char *fmt)",
      "4810: {",
      "4811:     char     *ptr;",
      "4812:     int       n = 0;",
      "4814:     ptr = fmt;",
      "4815:     while (*ptr != '\\0')",
      "4816:         if (*ptr++ == '%') {",
      "4819:             if (*ptr == '\\0')",
      "4820:                 return 1;",
      "4822:             if (*ptr == 's' || *ptr == 'S' || *ptr == '%')",
      "4823:                 ptr++;",
      "4825:             else if (*ptr == 'c') {",
      "4826:                 ptr++;",
      "4827:                 n = 1;",
      "4828:             }",
      "4831:             else {",
      "4833:                 if (*ptr == ' ' || *ptr == '+' || *ptr == '-')",
      "4834:                     ptr++;",
      "4836:                 while (*ptr >= '0' && *ptr <= '9')",
      "4837:                     ptr++;",
      "4838:                 if (*ptr == '.')",
      "4839:                     ptr++;",
      "4840:                 while (*ptr >= '0' && *ptr <= '9')",
      "4841:                     ptr++;",
      "4843:                 if (*ptr++ != 'l')",
      "4844:                     return 1;",
      "4845:                 if (*ptr == 'e' || *ptr == 'f' || *ptr == 'g')",
      "4846:                     ptr++;",
      "4847:                 else",
      "4848:                     return 1;",
      "4849:                 n++;",
      "4850:             }",
      "4851:         }",
      "4853:     return (n != 1);",
      "4857: static int bad_format_imginfo(",
      "4858:     char *fmt)",
      "4859: {",
      "4860:     char     *ptr;",
      "4861:     int       n = 0;",
      "4863:     ptr = fmt;",
      "4864:     while (*ptr != '\\0')",
      "4865:         if (*ptr++ == '%') {",
      "4868:             if (*ptr == '\\0')",
      "4869:                 return 1;",
      "4871:             if (*ptr == '%')",
      "4872:                 ptr++;",
      "4874:             else if (*ptr == 's' || *ptr == 'S') {",
      "4875:                 n = 1;",
      "4876:                 ptr++;",
      "4877:             }",
      "4880:             else {",
      "4882:                 if (*ptr == ' ')",
      "4883:                     ptr++;",
      "4885:                 while (*ptr >= '0' && *ptr <= '9')",
      "4886:                     ptr++;",
      "4888:                 if (*ptr++ != 'l')",
      "4889:                     return 1;",
      "4890:                 if (*ptr == 'u')",
      "4891:                     ptr++;",
      "4892:                 else",
      "4893:                     return 1;",
      "4894:                 n++;",
      "4895:             }",
      "4896:         }",
      "4898:     return (n != 3);",
      "",
      "[Added Lines]",
      "4798: static int bad_format_check(const char *pattern, char *fmt) {",
      "4799:     GError *gerr = NULL;",
      "4800:     GRegex *re = g_regex_new(pattern, G_REGEX_EXTENDED, 0, &gerr);",
      "4801:     GMatchInfo *mi;",
      "4802:     if (gerr != NULL) {",
      "4803:         rrd_set_error(\"cannot compile regular expression: %s (%s)\", gerr->message,pattern);",
      "4804:         return 1;",
      "4805:     }",
      "4806:     int m = g_regex_match(re, fmt, 0, &mi);",
      "4807:     g_match_info_free (mi);",
      "4808:     g_regex_unref(re);",
      "4809:     if (!m) {",
      "4810:         rrd_set_error(\"invalid format string '%s' (should match '%s')\",fmt,pattern);",
      "4811:         return 1;",
      "4812:     }",
      "4813:     return 0;",
      "4816: #define SAFE_STRING \"(?:[^%]+|%%)*\"",
      "4818: int bad_format_imginfo(char *fmt){",
      "4819:     return bad_format_check(\"^\" SAFE_STRING \"%s\" SAFE_STRING \"%lu\" SAFE_STRING \"%lu\" SAFE_STRING \"$\",fmt);",
      "4820: }",
      "4821: #define FLOAT_STRING \"%[+- 0#]?[0-9]*([.][0-9]+)?l[eEfF]\"",
      "4823: int bad_format_axis(char *fmt){",
      "4824:     return bad_format_check(\"^\" SAFE_STRING FLOAT_STRING SAFE_STRING \"$\",fmt);",
      "4827: int bad_format_print(char *fmt){",
      "4828:     return bad_format_check(\"^\" SAFE_STRING FLOAT_STRING SAFE_STRING \"%s\" SAFE_STRING \"$\",fmt);",
      "4829: }",
      "",
      "---------------"
    ],
    "src/rrd_graph.h||src/rrd_graph.h": [
      "File: src/rrd_graph.h -> src/rrd_graph.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "396:     char *,",
      "397:     char *,",
      "398:     int);",
      "400:     char *);",
      "401: int       vdef_parse(",
      "402:     struct graph_desc_t *,",
      "",
      "[Removed Lines]",
      "399: int       bad_format(",
      "",
      "[Added Lines]",
      "399: int       bad_format_axis(",
      "400:     char *);",
      "401: int       bad_format_print(",
      "402:     char *);",
      "403: int       bad_format_imginfo(",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11090488bf5146feb3693ef24145d4ef5a2969c0",
      "candidate_info": {
        "commit_hash": "11090488bf5146feb3693ef24145d4ef5a2969c0",
        "repo": "oetiker/rrdtool-1.x",
        "commit_url": "https://github.com/oetiker/rrdtool-1.x/commit/11090488bf5146feb3693ef24145d4ef5a2969c0",
        "files": [
          "src/rrd_graph.c"
        ],
        "message": "the %s portion of the printf format is optional",
        "before_after_code_files": [
          "src/rrd_graph.c||src/rrd_graph.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rrd_graph.c||src/rrd_graph.c"
          ],
          "candidate": [
            "src/rrd_graph.c||src/rrd_graph.c"
          ]
        }
      },
      "candidate_diff": {
        "src/rrd_graph.c||src/rrd_graph.c": [
          "File: src/rrd_graph.c -> src/rrd_graph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4825: }",
          "4827: int bad_format_print(char *fmt){",
          "4829: }",
          "4831: int vdef_parse(",
          "",
          "[Removed Lines]",
          "4828:     return bad_format_check(\"^\" SAFE_STRING FLOAT_STRING SAFE_STRING \"%s\" SAFE_STRING \"$\",fmt);",
          "",
          "[Added Lines]",
          "4828:     return bad_format_check(\"^\" SAFE_STRING FLOAT_STRING SAFE_STRING \"(?:%s)?\" SAFE_STRING \"$\",fmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64ed5314af1255ab6dded45f70b39cdeab5ae2ec",
      "candidate_info": {
        "commit_hash": "64ed5314af1255ab6dded45f70b39cdeab5ae2ec",
        "repo": "oetiker/rrdtool-1.x",
        "commit_url": "https://github.com/oetiker/rrdtool-1.x/commit/64ed5314af1255ab6dded45f70b39cdeab5ae2ec",
        "files": [
          "src/rrd_graph.c",
          "src/rrd_graph.h"
        ],
        "message": "a proper fix to the bad_format checking misery\n\nConflicts:\n\n\tsrc/rrd_graph.c",
        "before_after_code_files": [
          "src/rrd_graph.c||src/rrd_graph.c",
          "src/rrd_graph.h||src/rrd_graph.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/rrd_graph.c||src/rrd_graph.c",
            "src/rrd_graph.h||src/rrd_graph.h"
          ],
          "candidate": [
            "src/rrd_graph.c||src/rrd_graph.c",
            "src/rrd_graph.h||src/rrd_graph.h"
          ]
        }
      },
      "candidate_diff": {
        "src/rrd_graph.c||src/rrd_graph.c": [
          "File: src/rrd_graph.c -> src/rrd_graph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <sys/stat.h>",
          "10: #ifdef WIN32",
          "11: #include \"strftime.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <glib.h>   // will use regex",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1674:                         strftime(prline.u_str,",
          "1675:                                  FMT_LEG_LEN, im->gdes[i].format, &tmvdef);",
          "1676:                     }",
          "1680:                     return -1;",
          "1681:                 } else {",
          "1682:                     prline.u_str =",
          "",
          "[Removed Lines]",
          "1677:                 } else if (bad_format(im->gdes[i].format)) {",
          "1678:                     rrd_set_error",
          "1679:                         (\"bad format for PRINT in '%s'\", im->gdes[i].format);",
          "",
          "[Added Lines]",
          "1678:                 } else if (bad_format_print(im->gdes[i].format)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1697:                                  FMT_LEG_LEN, im->gdes[i].format, &tmvdef);",
          "1698:                     }",
          "1699:                 } else {",
          "1705:                     }",
          "1706:                     snprintf(im->gdes[i].legend,",
          "1707:                              FMT_LEG_LEN - 2,",
          "",
          "[Removed Lines]",
          "1700:                     if (bad_format(im->gdes[i].format)) {",
          "1701:                         rrd_set_error",
          "1702:                             (\"bad format for GPRINT in '%s'\",",
          "1703:                              im->gdes[i].format);",
          "1704:                         return -1;",
          "",
          "[Added Lines]",
          "1699:                     if (bad_format_print(im->gdes[i].format)) {",
          "1700:                        return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4243:         if (bad_format_imginfo(im.imginfo)) {",
          "4244:             rrd_info_free(im.grinfo);",
          "4245:             im_free(&im);",
          "4247:             return NULL;",
          "4248:         }",
          "4249:         path = strdup(im.graphfile);",
          "",
          "[Removed Lines]",
          "4246:             rrd_set_error(\"bad format for imginfo\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4717:             }",
          "4718:             break;",
          "4719:         case 1004:",
          "4722:                 return;",
          "4723:             }",
          "4724:             im->second_axis_format=strdup(optarg);",
          "",
          "[Removed Lines]",
          "4720:             if (bad_format(optarg)){",
          "4721:                 rrd_set_error(\"use either %le or %lf formats\");",
          "",
          "[Added Lines]",
          "4714:             if (bad_format_axis(optarg)){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4728:             }",
          "4729:             break;",
          "4730:         case 1012:",
          "4733:                 return;",
          "4734:             }",
          "4735:             im->primary_axis_format=strdup(optarg);",
          "",
          "[Removed Lines]",
          "4731:             if (bad_format(optarg)){",
          "4732:                 rrd_set_error(\"use either %le or %lf formats\");",
          "",
          "[Added Lines]",
          "4724:             if (bad_format_axis(optarg)){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5067: }",
          "5116: }",
          "5161: }",
          "5164: int vdef_parse(",
          "5165:     struct graph_desc_t",
          "",
          "[Removed Lines]",
          "5070: int bad_format(",
          "5071:     char *fmt)",
          "5072: {",
          "5073:     char     *ptr;",
          "5074:     int       n = 0;",
          "5076:     ptr = fmt;",
          "5077:     while (*ptr != '\\0')",
          "5078:         if (*ptr++ == '%') {",
          "5081:             if (*ptr == '\\0')",
          "5082:                 return 1;",
          "5084:             if (*ptr == 's' || *ptr == 'S' || *ptr == '%')",
          "5085:                 ptr++;",
          "5087:             else if (*ptr == 'c') {",
          "5088:                 ptr++;",
          "5089:                 n = 1;",
          "5090:             }",
          "5093:             else {",
          "5095:                 if (*ptr == ' ' || *ptr == '+' || *ptr == '-')",
          "5096:                     ptr++;",
          "5098:                 while (*ptr >= '0' && *ptr <= '9')",
          "5099:                     ptr++;",
          "5100:                 if (*ptr == '.')",
          "5101:                     ptr++;",
          "5102:                 while (*ptr >= '0' && *ptr <= '9')",
          "5103:                     ptr++;",
          "5105:                 if (*ptr++ != 'l')",
          "5106:                     return 1;",
          "5107:                 if (*ptr == 'e' || *ptr == 'f' || *ptr == 'g')",
          "5108:                     ptr++;",
          "5109:                 else",
          "5110:                     return 1;",
          "5111:                 n++;",
          "5112:             }",
          "5113:         }",
          "5115:     return (n != 1);",
          "5119: int bad_format_imginfo(",
          "5120:     char *fmt)",
          "5121: {",
          "5122:     char     *ptr;",
          "5123:     int       n = 0;",
          "5125:     ptr = fmt;",
          "5126:     while (*ptr != '\\0')",
          "5127:         if (*ptr++ == '%') {",
          "5130:             if (*ptr == '\\0')",
          "5131:                 return 1;",
          "5133:             if (*ptr == '%')",
          "5134:                 ptr++;",
          "5136:             else if (*ptr == 's' || *ptr == 'S') {",
          "5137:                 n = 1;",
          "5138:                 ptr++;",
          "5139:             }",
          "5142:             else {",
          "5144:                 if (*ptr == ' ')",
          "5145:                     ptr++;",
          "5147:                 while (*ptr >= '0' && *ptr <= '9')",
          "5148:                     ptr++;",
          "5150:                 if (*ptr++ != 'l')",
          "5151:                     return 1;",
          "5152:                 if (*ptr == 'u')",
          "5153:                     ptr++;",
          "5154:                 else",
          "5155:                     return 1;",
          "5156:                 n++;",
          "5157:             }",
          "5158:         }",
          "5160:     return (n != 3);",
          "",
          "[Added Lines]",
          "5062: static int bad_format_check(const char *pattern, char *fmt) {",
          "5063:     GError *gerr = NULL;",
          "5064:     GRegex *re = g_regex_new(pattern, G_REGEX_EXTENDED, 0, &gerr);",
          "5065:     GMatchInfo *mi;",
          "5066:     if (gerr != NULL) {",
          "5067:         rrd_set_error(\"cannot compile regular expression: %s (%s)\", gerr->message,pattern);",
          "5068:         return 1;",
          "5069:     }",
          "5070:     int m = g_regex_match(re, fmt, 0, &mi);",
          "5071:     g_match_info_free (mi);",
          "5072:     g_regex_unref(re);",
          "5073:     if (!m) {",
          "5074:         rrd_set_error(\"invalid format string '%s' (should match '%s')\",fmt,pattern);",
          "5075:         return 1;",
          "5076:     }",
          "5077:     return 0;",
          "5080: #define SAFE_STRING \"(?:[^%]+|%%)*\"",
          "5082: int bad_format_imginfo(char *fmt){",
          "5083:     return bad_format_check(\"^\" SAFE_STRING \"%s\" SAFE_STRING \"%lu\" SAFE_STRING \"%lu\" SAFE_STRING \"$\",fmt);",
          "5084: }",
          "5085: #define FLOAT_STRING \"%[+- 0#]?[0-9]*([.][0-9]+)?l[eEfF]\"",
          "5087: int bad_format_axis(char *fmt){",
          "5088:     return bad_format_check(\"^\" SAFE_STRING FLOAT_STRING SAFE_STRING \"$\",fmt);",
          "5091: int bad_format_print(char *fmt){",
          "5092:     return bad_format_check(\"^\" SAFE_STRING FLOAT_STRING SAFE_STRING \"%s\" SAFE_STRING \"$\",fmt);",
          "5093: }",
          "",
          "---------------"
        ],
        "src/rrd_graph.h||src/rrd_graph.h": [
          "File: src/rrd_graph.h -> src/rrd_graph.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:     char *,",
          "454:     char *,",
          "455:     int);",
          "457:     char *);",
          "458: int       bad_format_imginfo(",
          "459:     char *);",
          "",
          "[Removed Lines]",
          "456: int       bad_format(",
          "",
          "[Added Lines]",
          "456: int       bad_format_axis(",
          "457:     char *);",
          "458: int       bad_format_print(",
          "459:     char *);",
          "460: int       bad_format_imginfo(",
          "",
          "---------------"
        ]
      }
    }
  ]
}