{
  "cve_id": "CVE-2016-5157",
  "cve_desc": "Heap-based buffer overflow in the opj_dwt_interleave_v function in dwt.c in OpenJPEG, as used in PDFium in Google Chrome before 53.0.2785.89 on Windows and OS X and before 53.0.2785.92 on Linux, allows remote attackers to execute arbitrary code via crafted coordinate values in JPEG 2000 data.",
  "repo": "uclouvain/openjpeg",
  "patch_hash": "e078172b1c3f98d2219c37076b238fb759c751ea",
  "patch_info": {
    "commit_hash": "e078172b1c3f98d2219c37076b238fb759c751ea",
    "repo": "uclouvain/openjpeg",
    "commit_url": "https://github.com/uclouvain/openjpeg/commit/e078172b1c3f98d2219c37076b238fb759c751ea",
    "files": [
      "src/lib/openjp2/tcd.c",
      "tests/compare_dump_files.c",
      "tests/nonregression/test_suite.ctest.in"
    ],
    "message": "Add sanity check for tile coordinates (#823)\n\nCoordinates are casted from OPJ_UINT32 to OPJ_INT32\nAdd sanity check for negative values and upper bound becoming lower\nthan lower bound.\nSee also\nhttps://pdfium.googlesource.com/pdfium/+/b6befb2ed2485a3805cddea86dc7574510178ea9",
    "before_after_code_files": [
      "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
      "tests/compare_dump_files.c||tests/compare_dump_files.c",
      "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
    ]
  },
  "patch_diff": {
    "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
      "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "697:  l_tile->x0 = (OPJ_INT32)opj_uint_max(l_tx0, l_image->x0);",
      "698:  l_tile->x1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_tx0, l_cp->tdx), l_image->x1);",
      "700:  l_tile->y0 = (OPJ_INT32)opj_uint_max(l_ty0, l_image->y0);",
      "701:  l_tile->y1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_ty0, l_cp->tdy), l_image->y1);",
      "704:  if (l_tccp->numresolutions == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "700:  if ((l_tile->x0 < 0) || (l_tile->x1 <= l_tile->x0)) {",
      "701:   opj_event_msg(manager, EVT_ERROR, \"Tile X coordinates are not supported\\n\");",
      "702:   return OPJ_FALSE;",
      "703:  }",
      "708:  if ((l_tile->y0 < 0) || (l_tile->y1 <= l_tile->y0)) {",
      "709:   opj_event_msg(manager, EVT_ERROR, \"Tile Y coordinates are not supported\\n\");",
      "710:   return OPJ_FALSE;",
      "711:  }",
      "",
      "---------------"
    ],
    "tests/compare_dump_files.c||tests/compare_dump_files.c": [
      "File: tests/compare_dump_files.c -> tests/compare_dump_files.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:   test_cmp_parameters inParam;",
      "119:   FILE *fbase=NULL, *ftest=NULL;",
      "120:   int same = 0;",
      "126:   if( parse_cmdline_cmp(argc, argv, &inParam) == 1 )",
      "127:     {",
      "",
      "[Removed Lines]",
      "121:   char lbase[256];",
      "122:   char strbase[256];",
      "123:   char ltest[256];",
      "124:   char strtest[256];",
      "",
      "[Added Lines]",
      "121:   char lbase[512];",
      "122:   char strbase[512];",
      "123:   char ltest[512];",
      "124:   char strtest[512];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:   while (fgets(lbase, sizeof(lbase), fbase) && fgets(ltest,sizeof(ltest),ftest))",
      "156:     {",
      "160:     if( nbase != 1 || ntest != 1 )",
      "161:       {",
      "162:       fprintf(stderr, \"could not parse line from files\\n\" );",
      "",
      "[Removed Lines]",
      "157:     int nbase = sscanf(lbase, \"%255[^\\r\\n]\", strbase);",
      "158:     int ntest = sscanf(ltest, \"%255[^\\r\\n]\", strtest);",
      "159:     assert( nbase != 255 && ntest != 255 );",
      "",
      "[Added Lines]",
      "157:     int nbase = sscanf(lbase, \"%511[^\\r\\n]\", strbase);",
      "158:     int ntest = sscanf(ltest, \"%511[^\\r\\n]\", strtest);",
      "159:     assert( nbase != 511 && ntest != 511 );",
      "",
      "---------------"
    ],
    "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
      "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "566: !opj_decompress -i @INPUT_NR_PATH@/issue775-2.j2k -o @TEMP_PATH@/issue775-2.png",
      "567: # issue 818",
      "568: opj_decompress -i @INPUT_NR_PATH@/issue818.jp2 -o @TEMP_PATH@/issue818.png",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "569: # issue 823 (yes, not a typo, test image is issue822)",
      "570: !opj_decompress -i @INPUT_NR_PATH@/issue822.jp2 -o @TEMP_PATH@/issue822.png",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f9e9942330f476b66ac4a35d0ae521200878f343",
      "candidate_info": {
        "commit_hash": "f9e9942330f476b66ac4a35d0ae521200878f343",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/f9e9942330f476b66ac4a35d0ae521200878f343",
        "files": [
          "CMakeLists.txt",
          "src/lib/openjp2/CMakeLists.txt",
          "src/lib/openjp2/bench_dwt.c",
          "src/lib/openjp2/dwt.c",
          "src/lib/openjp2/dwt.h",
          "src/lib/openjp2/j2k.c",
          "src/lib/openjp2/opj_includes.h",
          "src/lib/openjp2/sparse_array.c",
          "src/lib/openjp2/sparse_array.h",
          "src/lib/openjp2/t1.c",
          "src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tcd.h",
          "src/lib/openjp2/test_sparse_array.c"
        ],
        "message": "Sub-tile decoding: only allocate tile component buffer of the needed dimension\n\nInstead of being the full tile size.\n\n* Use a sparse array mechanism to store code-blocks and intermediate stages of\n  IDWT.\n* IDWT, DC level shift and MCT stages are done just on that smaller array.\n* Improve copy of tile component array to final image, by saving an intermediate\n  buffer.\n* For full-tile decoding at reduced resolution, only allocate the tile buffer to\n  the reduced size, instead of the full-resolution size.",
        "before_after_code_files": [
          "src/lib/openjp2/bench_dwt.c||src/lib/openjp2/bench_dwt.c",
          "src/lib/openjp2/dwt.c||src/lib/openjp2/dwt.c",
          "src/lib/openjp2/dwt.h||src/lib/openjp2/dwt.h",
          "src/lib/openjp2/j2k.c||src/lib/openjp2/j2k.c",
          "src/lib/openjp2/opj_includes.h||src/lib/openjp2/opj_includes.h",
          "src/lib/openjp2/sparse_array.c||src/lib/openjp2/sparse_array.c",
          "src/lib/openjp2/sparse_array.h||src/lib/openjp2/sparse_array.h",
          "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c",
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tcd.h||src/lib/openjp2/tcd.h",
          "src/lib/openjp2/test_sparse_array.c||src/lib/openjp2/test_sparse_array.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/bench_dwt.c||src/lib/openjp2/bench_dwt.c": [
          "File: src/lib/openjp2/bench_dwt.c -> src/lib/openjp2/bench_dwt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     memset(&tcd, 0, sizeof(tcd));",
          "200:     tcd.thread_pool = tp;",
          "205:     tcd.tcd_image = &tcd_image;",
          "206:     memset(&tcd_image, 0, sizeof(tcd_image));",
          "207:     tcd_image.tiles = &tcd_tile;",
          "",
          "[Removed Lines]",
          "201:     tcd.decoded_x0 = (OPJ_UINT32)tilec.x0;",
          "202:     tcd.decoded_y0 = (OPJ_UINT32)tilec.y0;",
          "203:     tcd.decoded_x1 = (OPJ_UINT32)tilec.x1;",
          "204:     tcd.decoded_y1 = (OPJ_UINT32)tilec.y1;",
          "",
          "[Added Lines]",
          "201:     tcd.whole_tile_decoding = OPJ_TRUE;",
          "202:     tcd.win_x0 = (OPJ_UINT32)tilec.x0;",
          "203:     tcd.win_y0 = (OPJ_UINT32)tilec.y0;",
          "204:     tcd.win_x1 = (OPJ_UINT32)tilec.x1;",
          "205:     tcd.win_y1 = (OPJ_UINT32)tilec.y1;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/dwt.c||src/lib/openjp2/dwt.c": [
          "File: src/lib/openjp2/dwt.c -> src/lib/openjp2/dwt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: static OPJ_BOOL opj_dwt_decode_tile(opj_thread_pool_t* tp,",
          "152:                                     opj_tcd_tilecomp_t* tilec, OPJ_UINT32 i);",
          "158: static OPJ_BOOL opj_dwt_encode_procedure(opj_tcd_tilecomp_t * tilec,",
          "159:         void (*p_function)(OPJ_INT32 *, OPJ_INT32, OPJ_INT32, OPJ_INT32));",
          "",
          "[Removed Lines]",
          "154: static OPJ_BOOL opj_dwt_decode_partial_tile(opj_tcd_t *p_tcd,",
          "155:         opj_tcd_tilecomp_t* tilec,",
          "156:         OPJ_UINT32 numres);",
          "",
          "[Added Lines]",
          "154: static OPJ_BOOL opj_dwt_decode_partial_tile(",
          "155:     opj_tcd_tilecomp_t* tilec,",
          "156:     OPJ_UINT32 numres);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1194:     return opj_dwt_encode_procedure(tilec, opj_dwt_encode_1);",
          "1195: }",
          "1234: OPJ_BOOL opj_dwt_decode(opj_tcd_t *p_tcd, opj_tcd_tilecomp_t* tilec,",
          "1235:                         OPJ_UINT32 numres)",
          "1236: {",
          "1238:         return opj_dwt_decode_tile(p_tcd->thread_pool, tilec, numres);",
          "1239:     } else {",
          "1241:     }",
          "1242: }",
          "",
          "[Removed Lines]",
          "1197: static OPJ_BOOL opj_dwt_is_whole_tile_decoding(opj_tcd_t *p_tcd,",
          "1198:         opj_tcd_tilecomp_t* tilec, OPJ_UINT32 numres)",
          "1199: {",
          "1200:     opj_image_comp_t* image_comp = &(p_tcd->image->comps[tilec->compno]);",
          "1203:     OPJ_UINT32 tcx0 = opj_uint_max(",
          "1204:                           (OPJ_UINT32)tilec->x0,",
          "1205:                           opj_uint_ceildiv(p_tcd->decoded_x0, image_comp->dx));",
          "1206:     OPJ_UINT32 tcy0 = opj_uint_max(",
          "1207:                           (OPJ_UINT32)tilec->y0,",
          "1208:                           opj_uint_ceildiv(p_tcd->decoded_y0, image_comp->dy));",
          "1209:     OPJ_UINT32 tcx1 = opj_uint_min(",
          "1210:                           (OPJ_UINT32)tilec->x1,",
          "1211:                           opj_uint_ceildiv(p_tcd->decoded_x1, image_comp->dx));",
          "1212:     OPJ_UINT32 tcy1 = opj_uint_min(",
          "1213:                           (OPJ_UINT32)tilec->y1,",
          "1214:                           opj_uint_ceildiv(p_tcd->decoded_y1, image_comp->dy));",
          "1216:     OPJ_UINT32 shift = tilec->numresolutions - numres;",
          "1220:     return (tcx0 >= (OPJ_UINT32)tilec->x0 &&",
          "1221:             tcy0 >= (OPJ_UINT32)tilec->y0 &&",
          "1222:             tcx1 <= (OPJ_UINT32)tilec->x1 &&",
          "1223:             tcy1 <= (OPJ_UINT32)tilec->y1 &&",
          "1224:             (shift >= 32 ||",
          "1225:              (((tcx0 - (OPJ_UINT32)tilec->x0) >> shift) == 0 &&",
          "1226:               ((tcy0 - (OPJ_UINT32)tilec->y0) >> shift) == 0 &&",
          "1227:               (((OPJ_UINT32)tilec->x1 - tcx1) >> shift) == 0 &&",
          "1228:               (((OPJ_UINT32)tilec->y1 - tcy1) >> shift) == 0)));",
          "1229: }",
          "1237:     if (opj_dwt_is_whole_tile_decoding(p_tcd, tilec, numres)) {",
          "1240:         return opj_dwt_decode_partial_tile(p_tcd, tilec, numres);",
          "",
          "[Added Lines]",
          "1203:     if (p_tcd->whole_tile_decoding) {",
          "1206:         return opj_dwt_decode_partial_tile(tilec, numres);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1403:     OPJ_UINT32 rh = (OPJ_UINT32)(tr->y1 -",
          "1407:     size_t h_mem_size;",
          "1408:     int num_threads;",
          "",
          "[Removed Lines]",
          "1406:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "",
          "[Added Lines]",
          "1372:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->resolutions[tilec->minimum_num_resolutions -",
          "1373:                                                                1].x1 -",
          "1374:                                 tilec->resolutions[tilec->minimum_num_resolutions - 1].x0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1553: static void opj_dwt_interleave_partial_h(OPJ_INT32 *dest,",
          "1554:         OPJ_INT32 cas,",
          "1561: {",
          "1575: }",
          "1577: static void opj_dwt_interleave_partial_v(OPJ_INT32 *dest,",
          "1578:         OPJ_INT32 cas,",
          "1586: {",
          "1600: }",
          "1602: static void opj_dwt_decode_partial_1(OPJ_INT32 *a, OPJ_INT32 dn, OPJ_INT32 sn,",
          "",
          "[Removed Lines]",
          "1555:         const OPJ_INT32* src,",
          "1556:         OPJ_INT32 sn,",
          "1557:         OPJ_INT32 win_l_x0,",
          "1558:         OPJ_INT32 win_l_x1,",
          "1559:         OPJ_INT32 win_h_x0,",
          "1560:         OPJ_INT32 win_h_x1)",
          "1562:     const OPJ_INT32 *ai = src;",
          "1563:     OPJ_INT32 *bi = dest + cas;",
          "1564:     OPJ_INT32  i;",
          "1566:     for (i = win_l_x0; i < win_l_x1; i++) {",
          "1567:         bi[2 * i] = ai[i];",
          "1568:     }",
          "1570:     ai  = src + sn;",
          "1571:     bi  = dest + 1 - cas;",
          "1572:     for (i = win_h_x0; i < win_h_x1; i++) {",
          "1573:         bi[2 * i] = ai[i];",
          "1574:     }",
          "1579:         const OPJ_INT32* src,",
          "1580:         OPJ_INT32 sn,",
          "1581:         OPJ_INT32 stride,",
          "1582:         OPJ_INT32 win_l_y0,",
          "1583:         OPJ_INT32 win_l_y1,",
          "1584:         OPJ_INT32 win_h_y0,",
          "1585:         OPJ_INT32 win_h_y1)",
          "1587:     const OPJ_INT32 *ai = src;",
          "1588:     OPJ_INT32 *bi = dest + cas;",
          "1589:     OPJ_INT32  i;",
          "1591:     for (i = win_l_y0; i < win_l_y1; i++) {",
          "1592:         bi[2 * i] = ai[i * stride];",
          "1593:     }",
          "1595:     ai  = src + sn * stride;",
          "1596:     bi  = dest + 1 - cas;",
          "1597:     for (i = win_h_y0; i < win_h_y1; i++) {",
          "1598:         bi[2 * i] = ai[i * stride];",
          "1599:     }",
          "",
          "[Added Lines]",
          "1523:         opj_sparse_array_int32_t* sa,",
          "1524:         OPJ_UINT32 sa_line,",
          "1525:         OPJ_UINT32 sn,",
          "1526:         OPJ_UINT32 win_l_x0,",
          "1527:         OPJ_UINT32 win_l_x1,",
          "1528:         OPJ_UINT32 win_h_x0,",
          "1529:         OPJ_UINT32 win_h_x1)",
          "1531:     OPJ_BOOL ret;",
          "1532:     ret = opj_sparse_array_int32_read(sa,",
          "1533:                                       win_l_x0, sa_line,",
          "1534:                                       win_l_x1, sa_line + 1,",
          "1535:                                       dest + cas + 2 * win_l_x0,",
          "1536:                                       2, 0, OPJ_TRUE);",
          "1537:     assert(ret);",
          "1538:     ret = opj_sparse_array_int32_read(sa,",
          "1539:                                       sn + win_h_x0, sa_line,",
          "1540:                                       sn + win_h_x1, sa_line + 1,",
          "1541:                                       dest + 1 - cas + 2 * win_h_x0,",
          "1542:                                       2, 0, OPJ_TRUE);",
          "1543:     assert(ret);",
          "1549:         opj_sparse_array_int32_t* sa,",
          "1550:         OPJ_UINT32 sa_col,",
          "1551:         OPJ_UINT32 sn,",
          "1552:         OPJ_UINT32 win_l_y0,",
          "1553:         OPJ_UINT32 win_l_y1,",
          "1554:         OPJ_UINT32 win_h_y0,",
          "1555:         OPJ_UINT32 win_h_y1)",
          "1557:     OPJ_BOOL ret;",
          "1558:     ret  = opj_sparse_array_int32_read(sa,",
          "1559:                                        sa_col, win_l_y0,",
          "1560:                                        sa_col + 1, win_l_y1,",
          "1561:                                        dest + cas + 2 * win_l_y0,",
          "1562:                                        0, 2, OPJ_TRUE);",
          "1563:     assert(ret);",
          "1564:     ret = opj_sparse_array_int32_read(sa,",
          "1565:                                       sa_col, sn + win_h_y0,",
          "1566:                                       sa_col + 1, sn + win_h_y1,",
          "1567:                                       dest + 1 - cas + 2 * win_h_y0,",
          "1568:                                       0, 2, OPJ_TRUE);",
          "1569:     assert(ret);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1684: }",
          "1689: {",
          "1690:     opj_dwt_t h;",
          "1691:     opj_dwt_t v;",
          "1692:     OPJ_UINT32 resno;",
          "",
          "[Removed Lines]",
          "1686: static OPJ_BOOL opj_dwt_decode_partial_tile(opj_tcd_t *tcd,",
          "1687:         opj_tcd_tilecomp_t* tilec,",
          "1688:         OPJ_UINT32 numres)",
          "",
          "[Added Lines]",
          "1657: static opj_sparse_array_int32_t* opj_dwt_init_sparse_array(",
          "1658:     opj_tcd_tilecomp_t* tilec,",
          "1659:     OPJ_UINT32 numres)",
          "1660: {",
          "1661:     opj_tcd_resolution_t* tr_max = &(tilec->resolutions[numres - 1]);",
          "1662:     OPJ_UINT32 w = (OPJ_UINT32)(tr_max->x1 - tr_max->x0);",
          "1663:     OPJ_UINT32 h = (OPJ_UINT32)(tr_max->y1 - tr_max->y0);",
          "1664:     OPJ_UINT32 resno, bandno, precno, cblkno;",
          "1665:     opj_sparse_array_int32_t* sa = opj_sparse_array_int32_create(",
          "1666:                                        w, h, opj_uint_min(w, 64), opj_uint_min(h, 64));",
          "1667:     if (sa == NULL) {",
          "1668:         return NULL;",
          "1669:     }",
          "1671:     for (resno = 0; resno < numres; ++resno) {",
          "1672:         opj_tcd_resolution_t* res = &tilec->resolutions[resno];",
          "1674:         for (bandno = 0; bandno < res->numbands; ++bandno) {",
          "1675:             opj_tcd_band_t* band = &res->bands[bandno];",
          "1677:             for (precno = 0; precno < res->pw * res->ph; ++precno) {",
          "1678:                 opj_tcd_precinct_t* precinct = &band->precincts[precno];",
          "1679:                 for (cblkno = 0; cblkno < precinct->cw * precinct->ch; ++cblkno) {",
          "1680:                     opj_tcd_cblk_dec_t* cblk = &precinct->cblks.dec[cblkno];",
          "1681:                     if (cblk->decoded_data != NULL) {",
          "1682:                         OPJ_UINT32 x = (OPJ_UINT32)(cblk->x0 - band->x0);",
          "1683:                         OPJ_UINT32 y = (OPJ_UINT32)(cblk->y0 - band->y0);",
          "1684:                         OPJ_UINT32 cblk_w = (OPJ_UINT32)(cblk->x1 - cblk->x0);",
          "1685:                         OPJ_UINT32 cblk_h = (OPJ_UINT32)(cblk->y1 - cblk->y0);",
          "1687:                         if (band->bandno & 1) {",
          "1688:                             opj_tcd_resolution_t* pres = &tilec->resolutions[resno - 1];",
          "1689:                             x += (OPJ_UINT32)(pres->x1 - pres->x0);",
          "1690:                         }",
          "1691:                         if (band->bandno & 2) {",
          "1692:                             opj_tcd_resolution_t* pres = &tilec->resolutions[resno - 1];",
          "1693:                             y += (OPJ_UINT32)(pres->y1 - pres->y0);",
          "1694:                         }",
          "1696:                         if (!opj_sparse_array_int32_write(sa, x, y,",
          "1697:                                                           x + cblk_w, y + cblk_h,",
          "1698:                                                           cblk->decoded_data,",
          "1699:                                                           1, cblk_w, OPJ_TRUE)) {",
          "1700:                             opj_sparse_array_int32_free(sa);",
          "1701:                             return NULL;",
          "1702:                         }",
          "1703:                     }",
          "1704:                 }",
          "1705:             }",
          "1706:         }",
          "1707:     }",
          "1709:     return sa;",
          "1710: }",
          "1713: static OPJ_BOOL opj_dwt_decode_partial_tile(",
          "1714:     opj_tcd_tilecomp_t* tilec,",
          "1715:     OPJ_UINT32 numres)",
          "1717:     opj_sparse_array_int32_t* sa;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1695:     const OPJ_UINT32 filter_width = 2U;",
          "1697:     opj_tcd_resolution_t* tr = tilec->resolutions;",
          "1699:     OPJ_UINT32 rw = (OPJ_UINT32)(tr->x1 -",
          "1701:     OPJ_UINT32 rh = (OPJ_UINT32)(tr->y1 -",
          "1705:     size_t h_mem_size;",
          "1723:     if (numres == 1U) {",
          "1724:         return OPJ_TRUE;",
          "1725:     }",
          "1726:     h_mem_size = opj_dwt_max_resolution(tr, numres);",
          "1728:     if (h_mem_size > (SIZE_MAX / sizeof(OPJ_INT32))) {",
          "1730:         return OPJ_FALSE;",
          "1731:     }",
          "",
          "[Removed Lines]",
          "1704:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "1707:     opj_image_comp_t* image_comp = &(tcd->image->comps[tilec->compno]);",
          "1710:     OPJ_UINT32 win_tcx0 = opj_uint_max(",
          "1711:                               (OPJ_UINT32)tilec->x0,",
          "1712:                               opj_uint_ceildiv(tcd->decoded_x0, image_comp->dx));",
          "1713:     OPJ_UINT32 win_tcy0 = opj_uint_max(",
          "1714:                               (OPJ_UINT32)tilec->y0,",
          "1715:                               opj_uint_ceildiv(tcd->decoded_y0, image_comp->dy));",
          "1716:     OPJ_UINT32 win_tcx1 = opj_uint_min(",
          "1717:                               (OPJ_UINT32)tilec->x1,",
          "1718:                               opj_uint_ceildiv(tcd->decoded_x1, image_comp->dx));",
          "1719:     OPJ_UINT32 win_tcy1 = opj_uint_min(",
          "1720:                               (OPJ_UINT32)tilec->y1,",
          "1721:                               opj_uint_ceildiv(tcd->decoded_y1, image_comp->dy));",
          "",
          "[Added Lines]",
          "1726:     opj_tcd_resolution_t* tr_max = &(tilec->resolutions[numres - 1]);",
          "1737:     OPJ_UINT32 win_tcx0 = tilec->win_x0;",
          "1738:     OPJ_UINT32 win_tcy0 = tilec->win_y0;",
          "1739:     OPJ_UINT32 win_tcx1 = tilec->win_x1;",
          "1740:     OPJ_UINT32 win_tcy1 = tilec->win_y1;",
          "1742:     sa = opj_dwt_init_sparse_array(tilec, numres);",
          "1745:         OPJ_BOOL ret = opj_sparse_array_int32_read(sa,",
          "1746:                        tr_max->win_x0 - (OPJ_UINT32)tr_max->x0,",
          "1747:                        tr_max->win_y0 - (OPJ_UINT32)tr_max->y0,",
          "1748:                        tr_max->win_x1 - (OPJ_UINT32)tr_max->x0,",
          "1749:                        tr_max->win_y1 - (OPJ_UINT32)tr_max->y0,",
          "1750:                        tilec->data_win,",
          "1751:                        1, tr_max->win_x1 - tr_max->win_x0,",
          "1752:                        OPJ_TRUE);",
          "1753:         assert(ret);",
          "1754:         opj_sparse_array_int32_free(sa);",
          "1761:         opj_sparse_array_int32_free(sa);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1734:     h.mem = (OPJ_INT32*)opj_aligned_32_malloc(h_mem_size);",
          "1735:     if (! h.mem) {",
          "1737:         return OPJ_FALSE;",
          "1738:     }",
          "1740:     v.mem = h.mem;",
          "1744:         OPJ_UINT32 i, j;",
          "1746:         OPJ_UINT32 win_ll_x0, win_ll_y0, win_ll_x1, win_ll_y1;",
          "",
          "[Removed Lines]",
          "1742:     for (resno = 1; --numres > 0; resno ++) {",
          "1743:         OPJ_INT32 * OPJ_RESTRICT tiledp = tilec->data;",
          "",
          "[Added Lines]",
          "1769:         opj_sparse_array_int32_free(sa);",
          "1775:     for (resno = 1; resno < numres; resno ++) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1826:         for (j = 0; j < rh; ++j) {",
          "1827:             if ((j >= win_ll_y0 && j < win_ll_y1) ||",
          "1828:                     (j >= win_lh_y0 + (OPJ_UINT32)v.sn && j < win_lh_y1 + (OPJ_UINT32)v.sn)) {",
          "1830:                 opj_dwt_interleave_partial_h(h.mem,",
          "1831:                                              h.cas,",
          "1838:                 opj_dwt_decode_partial_1(h.mem, h.dn, h.sn, h.cas,",
          "1839:                                          (OPJ_INT32)win_ll_x0,",
          "1840:                                          (OPJ_INT32)win_ll_x1,",
          "1841:                                          (OPJ_INT32)win_hl_x0,",
          "1842:                                          (OPJ_INT32)win_hl_x1);",
          "1845:             }",
          "1846:         }",
          "1848:         for (i = win_tr_x0; i < win_tr_x1; ++i) {",
          "1850:             opj_dwt_interleave_partial_v(v.mem,",
          "1851:                                          v.cas,",
          "1859:             opj_dwt_decode_partial_1(v.mem, v.dn, v.sn, v.cas,",
          "1860:                                      (OPJ_INT32)win_ll_y0,",
          "1861:                                      (OPJ_INT32)win_ll_y1,",
          "1862:                                      (OPJ_INT32)win_lh_y0,",
          "1863:                                      (OPJ_INT32)win_lh_y1);",
          "1866:             }",
          "1867:         }",
          "1868:     }",
          "1869:     opj_aligned_free(h.mem);",
          "1870:     return OPJ_TRUE;",
          "1871: }",
          "",
          "[Removed Lines]",
          "1829:                 memset(h.mem, 0, (OPJ_UINT32)(h.sn + h.dn) * sizeof(OPJ_INT32));",
          "1832:                                              &tiledp[j * w],",
          "1833:                                              h.sn,",
          "1834:                                              (OPJ_INT32)win_ll_x0,",
          "1835:                                              (OPJ_INT32)win_ll_x1,",
          "1836:                                              (OPJ_INT32)win_hl_x0,",
          "1837:                                              (OPJ_INT32)win_hl_x1);",
          "1843:                 memcpy(&tiledp[j * w] + win_tr_x0, h.mem + win_tr_x0,",
          "1844:                        (win_tr_x1 - win_tr_x0) * sizeof(OPJ_INT32));",
          "1849:             memset(v.mem, 0, (OPJ_UINT32)(v.sn + v.dn) * sizeof(OPJ_INT32));",
          "1852:                                          tiledp + i,",
          "1853:                                          v.sn,",
          "1854:                                          (OPJ_INT32)w,",
          "1855:                                          (OPJ_INT32)win_ll_y0,",
          "1856:                                          (OPJ_INT32)win_ll_y1,",
          "1857:                                          (OPJ_INT32)win_lh_y0,",
          "1858:                                          (OPJ_INT32)win_lh_y1);",
          "1864:             for (j = win_tr_y0; j < win_tr_y1; j++) {",
          "1865:                 tiledp[j * w + i] = v.mem[j];",
          "",
          "[Added Lines]",
          "1863:                                              sa,",
          "1864:                                              j,",
          "1865:                                              (OPJ_UINT32)h.sn,",
          "1866:                                              win_ll_x0,",
          "1867:                                              win_ll_x1,",
          "1868:                                              win_hl_x0,",
          "1869:                                              win_hl_x1);",
          "1875:                 if (!opj_sparse_array_int32_write(sa,",
          "1876:                                                   win_tr_x0, j,",
          "1877:                                                   win_tr_x1, j + 1,",
          "1878:                                                   h.mem + win_tr_x0,",
          "1879:                                                   1, 0, OPJ_TRUE)) {",
          "1881:                     opj_sparse_array_int32_free(sa);",
          "1882:                     opj_aligned_free(h.mem);",
          "1883:                     return OPJ_FALSE;",
          "1884:                 }",
          "1891:                                          sa,",
          "1892:                                          i,",
          "1893:                                          (OPJ_UINT32)v.sn,",
          "1894:                                          win_ll_y0,",
          "1895:                                          win_ll_y1,",
          "1896:                                          win_lh_y0,",
          "1897:                                          win_lh_y1);",
          "1903:             if (!opj_sparse_array_int32_write(sa,",
          "1904:                                               i, win_tr_y0,",
          "1905:                                               i + 1, win_tr_y1,",
          "1906:                                               v.mem + win_tr_y0,",
          "1907:                                               0, 1, OPJ_TRUE)) {",
          "1909:                 opj_sparse_array_int32_free(sa);",
          "1910:                 opj_aligned_free(h.mem);",
          "1911:                 return OPJ_FALSE;",
          "1917:     {",
          "1918:         OPJ_BOOL ret = opj_sparse_array_int32_read(sa,",
          "1919:                        tr_max->win_x0 - (OPJ_UINT32)tr_max->x0,",
          "1920:                        tr_max->win_y0 - (OPJ_UINT32)tr_max->y0,",
          "1921:                        tr_max->win_x1 - (OPJ_UINT32)tr_max->x0,",
          "1922:                        tr_max->win_y1 - (OPJ_UINT32)tr_max->y0,",
          "1923:                        tilec->data_win,",
          "1924:                        1, tr_max->win_x1 - tr_max->win_x0,",
          "1925:                        OPJ_TRUE);",
          "1926:         assert(ret);",
          "1927:     }",
          "1928:     opj_sparse_array_int32_free(sa);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1924:     }",
          "1925: }",
          "1927: static void opj_v4dwt_interleave_v(opj_v4dwt_t* OPJ_RESTRICT dwt,",
          "1928:                                    OPJ_FLOAT32* OPJ_RESTRICT a,",
          "1929:                                    OPJ_UINT32 width,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1986: static void opj_v4dwt_interleave_partial_h(opj_v4dwt_t* dwt,",
          "1987:         opj_sparse_array_int32_t* sa,",
          "1988:         OPJ_UINT32 sa_line,",
          "1989:         OPJ_UINT32 remaining_height)",
          "1990: {",
          "1991:     OPJ_UINT32 i;",
          "1992:     for (i = 0; i < remaining_height; i++) {",
          "1993:         OPJ_BOOL ret;",
          "1994:         ret = opj_sparse_array_int32_read(sa,",
          "1995:                                           dwt->win_l_x0, sa_line + i,",
          "1996:                                           dwt->win_l_x1, sa_line + i + 1,",
          "1998:                                           (OPJ_INT32*)(dwt->wavelet + dwt->cas + 2 * dwt->win_l_x0) + i,",
          "1999:                                           8, 0, OPJ_TRUE);",
          "2000:         assert(ret);",
          "2001:         ret = opj_sparse_array_int32_read(sa,",
          "2002:                                           (OPJ_UINT32)dwt->sn + dwt->win_h_x0, sa_line + i,",
          "2003:                                           (OPJ_UINT32)dwt->sn + dwt->win_h_x1, sa_line + i + 1,",
          "2005:                                           (OPJ_INT32*)(dwt->wavelet + 1 - dwt->cas + 2 * dwt->win_h_x0) + i,",
          "2006:                                           8, 0, OPJ_TRUE);",
          "2007:         assert(ret);",
          "2008:     }",
          "2009: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1944:     }",
          "1945: }",
          "1947: #ifdef __SSE__",
          "1949: static void opj_v4dwt_decode_step1_sse(opj_v4_t* w,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2031: static void opj_v4dwt_interleave_partial_v(opj_v4dwt_t* OPJ_RESTRICT dwt,",
          "2032:         opj_sparse_array_int32_t* sa,",
          "2033:         OPJ_UINT32 sa_col,",
          "2034:         OPJ_UINT32 nb_elts_read)",
          "2035: {",
          "2036:     OPJ_UINT32 i;",
          "2037:     for (i = 0; i < nb_elts_read; i++) {",
          "2038:         OPJ_BOOL ret;",
          "2039:         ret = opj_sparse_array_int32_read(sa,",
          "2040:                                           sa_col + i, dwt->win_l_x0,",
          "2041:                                           sa_col + i + 1, dwt->win_l_x1,",
          "2042:                                           (OPJ_INT32*)(dwt->wavelet + dwt->cas + 2 * dwt->win_l_x0) + i,",
          "2043:                                           0, 8, OPJ_TRUE);",
          "2044:         assert(ret);",
          "2045:         ret = opj_sparse_array_int32_read(sa,",
          "2046:                                           sa_col + i, (OPJ_UINT32)dwt->sn + dwt->win_h_x0,",
          "2047:                                           sa_col + i + 1, (OPJ_UINT32)dwt->sn + dwt->win_h_x1,",
          "2048:                                           (OPJ_INT32*)(dwt->wavelet + 1 - dwt->cas + 2 * dwt->win_h_x0) + i,",
          "2049:                                           0, 8, OPJ_TRUE);",
          "2050:         assert(ret);",
          "2051:     }",
          "2052: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2146:     OPJ_UINT32 rh = (OPJ_UINT32)(res->y1 -",
          "2151:     size_t l_data_size;",
          "",
          "[Removed Lines]",
          "2149:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "",
          "[Added Lines]",
          "2256:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->resolutions[tilec->minimum_num_resolutions -",
          "2257:                                                                1].x1 -",
          "2258:                                 tilec->resolutions[tilec->minimum_num_resolutions - 1].x0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2262: }",
          "2264: static",
          "2267:                                    OPJ_UINT32 numres)",
          "2268: {",
          "2269:     opj_v4dwt_t h;",
          "2270:     opj_v4dwt_t v;",
          "2271:     OPJ_UINT32 resno;",
          "",
          "[Removed Lines]",
          "2265: OPJ_BOOL opj_dwt_decode_partial_97(opj_tcd_t *tcd,",
          "2266:                                    opj_tcd_tilecomp_t* OPJ_RESTRICT tilec,",
          "",
          "[Added Lines]",
          "2374: OPJ_BOOL opj_dwt_decode_partial_97(opj_tcd_tilecomp_t* OPJ_RESTRICT tilec,",
          "2377:     opj_sparse_array_int32_t* sa;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2275:     const OPJ_UINT32 filter_width = 4U;",
          "2277:     opj_tcd_resolution_t* tr = tilec->resolutions;",
          "2279:     OPJ_UINT32 rw = (OPJ_UINT32)(tr->x1 -",
          "2281:     OPJ_UINT32 rh = (OPJ_UINT32)(tr->y1 -",
          "2286:     size_t l_data_size;",
          "2304:     l_data_size = opj_dwt_max_resolution(tr, numres);",
          "",
          "[Removed Lines]",
          "2284:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "2288:     opj_image_comp_t* image_comp = &(tcd->image->comps[tilec->compno]);",
          "2291:     OPJ_UINT32 win_tcx0 = opj_uint_max(",
          "2292:                               (OPJ_UINT32)tilec->x0,",
          "2293:                               opj_uint_ceildiv(tcd->decoded_x0, image_comp->dx));",
          "2294:     OPJ_UINT32 win_tcy0 = opj_uint_max(",
          "2295:                               (OPJ_UINT32)tilec->y0,",
          "2296:                               opj_uint_ceildiv(tcd->decoded_y0, image_comp->dy));",
          "2297:     OPJ_UINT32 win_tcx1 = opj_uint_min(",
          "2298:                               (OPJ_UINT32)tilec->x1,",
          "2299:                               opj_uint_ceildiv(tcd->decoded_x1, image_comp->dx));",
          "2300:     OPJ_UINT32 win_tcy1 = opj_uint_min(",
          "2301:                               (OPJ_UINT32)tilec->y1,",
          "2302:                               opj_uint_ceildiv(tcd->decoded_y1, image_comp->dy));",
          "",
          "[Added Lines]",
          "2387:     opj_tcd_resolution_t* tr_max = &(tilec->resolutions[numres - 1]);",
          "2398:     OPJ_UINT32 win_tcx0 = tilec->win_x0;",
          "2399:     OPJ_UINT32 win_tcy0 = tilec->win_y0;",
          "2400:     OPJ_UINT32 win_tcx1 = tilec->win_x1;",
          "2401:     OPJ_UINT32 win_tcy1 = tilec->win_y1;",
          "2403:     sa = opj_dwt_init_sparse_array(tilec, numres);",
          "2405:     if (numres == 1U) {",
          "2406:         OPJ_BOOL ret = opj_sparse_array_int32_read(sa,",
          "2407:                        tr_max->win_x0 - (OPJ_UINT32)tr_max->x0,",
          "2408:                        tr_max->win_y0 - (OPJ_UINT32)tr_max->y0,",
          "2409:                        tr_max->win_x1 - (OPJ_UINT32)tr_max->x0,",
          "2410:                        tr_max->win_y1 - (OPJ_UINT32)tr_max->y0,",
          "2411:                        tilec->data_win,",
          "2412:                        1, tr_max->win_x1 - tr_max->win_x0,",
          "2413:                        OPJ_TRUE);",
          "2414:         assert(ret);",
          "2415:         opj_sparse_array_int32_free(sa);",
          "2416:         return OPJ_TRUE;",
          "2417:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2320:     }",
          "2321:     v.wavelet = h.wavelet;",
          "2325:         OPJ_UINT32 j;",
          "2327:         OPJ_UINT32 win_ll_x0, win_ll_y0, win_ll_x1, win_ll_y1;",
          "",
          "[Removed Lines]",
          "2323:     for (resno = 1; --numres; resno++) {",
          "2324:         OPJ_FLOAT32 * OPJ_RESTRICT aj = (OPJ_FLOAT32*) tilec->data;",
          "",
          "[Added Lines]",
          "2438:     for (resno = 1; resno < numres; resno ++) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2408:         h.win_l_x1 = win_ll_x1;",
          "2409:         h.win_h_x0 = win_hl_x0;",
          "2410:         h.win_h_x1 = win_hl_x1;",
          "2412:             if ((j + 3 >= win_ll_y0 && j < win_ll_y1) ||",
          "2413:                     (j + 3 >= win_lh_y0 + (OPJ_UINT32)v.sn &&",
          "2414:                      j < win_lh_y1 + (OPJ_UINT32)v.sn)) {",
          "2415:                 OPJ_UINT32 k;",
          "2417:                 opj_v4dwt_decode(&h);",
          "2424:                 }",
          "2425:             }",
          "2426:         }",
          "",
          "[Removed Lines]",
          "2411:         for (j = 0; j + 3 < rh; j += 4, aj += w * 4) {",
          "2416:                 opj_v4dwt_interleave_h(&h, aj, w, rh - j);",
          "2419:                 for (k = win_tr_x0; k < win_tr_x1; k++) {",
          "2420:                     aj[k        ] = h.wavelet[k].f[0];",
          "2421:                     aj[k + w    ] = h.wavelet[k].f[1];",
          "2422:                     aj[k + w * 2] = h.wavelet[k].f[2];",
          "2423:                     aj[k + w * 3] = h.wavelet[k].f[3];",
          "",
          "[Added Lines]",
          "2525:         for (j = 0; j + 3 < rh; j += 4) {",
          "2530:                 opj_v4dwt_interleave_partial_h(&h, sa, j, opj_uint_min(4U, rh - j));",
          "2532:                 for (k = 0; k < 4; k++) {",
          "2533:                     if (!opj_sparse_array_int32_write(sa,",
          "2534:                                                       win_tr_x0, j + k,",
          "2535:                                                       win_tr_x1, j + k + 1,",
          "2536:                                                       (OPJ_INT32*)&h.wavelet[win_tr_x0].f[k],",
          "2537:                                                       4, 0, OPJ_TRUE)) {",
          "2539:                         opj_sparse_array_int32_free(sa);",
          "2540:                         opj_aligned_free(h.wavelet);",
          "2541:                         return OPJ_FALSE;",
          "2542:                     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2430:                  (j + 3 >= win_lh_y0 + (OPJ_UINT32)v.sn &&",
          "2431:                   j < win_lh_y1 + (OPJ_UINT32)v.sn))) {",
          "2432:             OPJ_UINT32 k;",
          "2434:             opj_v4dwt_decode(&h);",
          "2445:                 }",
          "2446:             }",
          "2447:         }",
          "",
          "[Removed Lines]",
          "2433:             opj_v4dwt_interleave_h(&h, aj, w, rh - j);",
          "2435:             for (k = win_tr_x0; k < win_tr_x1; k++) {",
          "2436:                 switch (rh - j) {",
          "2437:                 case 3:",
          "2438:                     aj[k + w * 2] = h.wavelet[k].f[2];",
          "2440:                 case 2:",
          "2441:                     aj[k + w    ] = h.wavelet[k].f[1];",
          "2443:                 case 1:",
          "2444:                     aj[k        ] = h.wavelet[k].f[0];",
          "",
          "[Added Lines]",
          "2552:             opj_v4dwt_interleave_partial_h(&h, sa, j, rh - j);",
          "2554:             for (k = 0; k < rh - j; k++) {",
          "2555:                 if (!opj_sparse_array_int32_write(sa,",
          "2556:                                                   win_tr_x0, j + k,",
          "2557:                                                   win_tr_x1, j + k + 1,",
          "2558:                                                   (OPJ_INT32*)&h.wavelet[win_tr_x0].f[k],",
          "2559:                                                   4, 0, OPJ_TRUE)) {",
          "2561:                     opj_sparse_array_int32_free(sa);",
          "2562:                     opj_aligned_free(h.wavelet);",
          "2563:                     return OPJ_FALSE;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2450:         v.win_l_x1 = win_ll_y1;",
          "2451:         v.win_h_x0 = win_lh_y0;",
          "2452:         v.win_h_x1 = win_lh_y1;",
          "2456:             OPJ_UINT32 nb_elts = opj_uint_min(4U, win_tr_x1 - j);",
          "2457:             OPJ_UINT32 k;",
          "2460:             opj_v4dwt_decode(&v);",
          "2464:             }",
          "2465:         }",
          "2466:     }",
          "2468:     opj_aligned_free(h.wavelet);",
          "2469:     return OPJ_TRUE;",
          "2470: }",
          "",
          "[Removed Lines]",
          "2453:         aj = (OPJ_FLOAT32*) tilec->data;",
          "2454:         aj += win_tr_x0;",
          "2455:         for (j = win_tr_x0; j < win_tr_x1; j += 4, aj += 4) {",
          "2459:             opj_v4dwt_interleave_v(&v, aj, w, nb_elts);",
          "2462:             for (k = win_tr_y0; k < win_tr_y1; ++k) {",
          "2463:                 memcpy(&aj[k * w], &v.wavelet[k], nb_elts * sizeof(OPJ_FLOAT32));",
          "",
          "[Added Lines]",
          "2572:         for (j = win_tr_x0; j < win_tr_x1; j += 4) {",
          "2576:             opj_v4dwt_interleave_partial_v(&v, sa, j, nb_elts);",
          "2579:             for (k = 0; k < nb_elts; k++) {",
          "2580:                 if (!opj_sparse_array_int32_write(sa,",
          "2581:                                                   j + k, win_tr_y0,",
          "2582:                                                   j + k + 1, win_tr_y1,",
          "2583:                                                   (OPJ_INT32*)&h.wavelet[win_tr_y0].f[k],",
          "2584:                                                   0, 4, OPJ_TRUE)) {",
          "2586:                     opj_sparse_array_int32_free(sa);",
          "2587:                     opj_aligned_free(h.wavelet);",
          "2588:                     return OPJ_FALSE;",
          "2589:                 }",
          "2594:     {",
          "2595:         OPJ_BOOL ret = opj_sparse_array_int32_read(sa,",
          "2596:                        tr_max->win_x0 - (OPJ_UINT32)tr_max->x0,",
          "2597:                        tr_max->win_y0 - (OPJ_UINT32)tr_max->y0,",
          "2598:                        tr_max->win_x1 - (OPJ_UINT32)tr_max->x0,",
          "2599:                        tr_max->win_y1 - (OPJ_UINT32)tr_max->y0,",
          "2600:                        tilec->data_win,",
          "2601:                        1, tr_max->win_x1 - tr_max->win_x0,",
          "2602:                        OPJ_TRUE);",
          "2603:         assert(ret);",
          "2604:     }",
          "2605:     opj_sparse_array_int32_free(sa);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2474:                              opj_tcd_tilecomp_t* OPJ_RESTRICT tilec,",
          "2475:                              OPJ_UINT32 numres)",
          "2476: {",
          "2478:         return opj_dwt_decode_tile_97(tilec, numres);",
          "2479:     } else {",
          "2481:     }",
          "2482: }",
          "",
          "[Removed Lines]",
          "2477:     if (opj_dwt_is_whole_tile_decoding(p_tcd, tilec, numres)) {",
          "2480:         return opj_dwt_decode_partial_97(p_tcd, tilec, numres);",
          "",
          "[Added Lines]",
          "2616:     if (p_tcd->whole_tile_decoding) {",
          "2619:         return opj_dwt_decode_partial_97(tilec, numres);",
          "",
          "---------------"
        ],
        "src/lib/openjp2/dwt.h||src/lib/openjp2/dwt.h": [
          "File: src/lib/openjp2/dwt.h -> src/lib/openjp2/dwt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: Inverse 5-3 wavelet transform in 2-D.",
          "65: Apply a reversible inverse DWT transform to a component of an image.",
          "67: @param tilec Tile component information (current tile)",
          "68: @param numres Number of resolution levels to decode",
          "",
          "[Removed Lines]",
          "66: @param tcd TCD handle",
          "",
          "[Added Lines]",
          "66: @param p_tcd TCD handle",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: Inverse 9-7 wavelet transform in 2-D.",
          "95: Apply an irreversible inverse DWT transform to a component of an image.",
          "97: @param tilec Tile component information (current tile)",
          "98: @param numres Number of resolution levels to decode",
          "",
          "[Removed Lines]",
          "96: @param tcd TCD handle",
          "",
          "[Added Lines]",
          "96: @param p_tcd TCD handle",
          "",
          "---------------"
        ],
        "src/lib/openjp2/j2k.c||src/lib/openjp2/j2k.c": [
          "File: src/lib/openjp2/j2k.c -> src/lib/openjp2/j2k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "52: #define OPJ_UNUSED(x) (void)x",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:                                        opj_stream_private_t *p_stream,",
          "372:                                        opj_event_mgr_t * p_manager);",
          "375:         opj_image_t* p_output_image);",
          "377: static void opj_get_tile_dimensions(opj_image_t * l_image,",
          "",
          "[Removed Lines]",
          "374: static OPJ_BOOL opj_j2k_update_image_data(opj_tcd_t * p_tcd, OPJ_BYTE * p_data,",
          "",
          "[Added Lines]",
          "372: static OPJ_BOOL opj_j2k_update_image_data(opj_tcd_t * p_tcd,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8902:     return OPJ_TRUE;",
          "8903: }",
          "8906:         opj_image_t* p_output_image)",
          "8907: {",
          "8909:     OPJ_UINT32 l_width_src, l_height_src;",
          "8910:     OPJ_UINT32 l_width_dest, l_height_dest;",
          "8911:     OPJ_INT32 l_offset_x0_src, l_offset_y0_src, l_offset_x1_src, l_offset_y1_src;",
          "8913:     OPJ_UINT32 l_start_x_dest, l_start_y_dest;",
          "8914:     OPJ_UINT32 l_x0_dest, l_y0_dest, l_x1_dest, l_y1_dest;",
          "8917:     opj_image_comp_t * l_img_comp_src = 00;",
          "8918:     opj_image_comp_t * l_img_comp_dest = 00;",
          "8920:     opj_tcd_tilecomp_t * l_tilec = 00;",
          "8921:     opj_image_t * l_image_src = 00;",
          "8923:     OPJ_INT32 * l_dest_ptr;",
          "8926:     l_tilec = p_tcd->tcd_image->tiles->comps;",
          "8927:     l_image_src = p_tcd->image;",
          "",
          "[Removed Lines]",
          "8905: static OPJ_BOOL opj_j2k_update_image_data(opj_tcd_t * p_tcd, OPJ_BYTE * p_data,",
          "8908:     OPJ_UINT32 i, j, k = 0;",
          "8912:     OPJ_SIZE_T l_start_offset_src, l_line_offset_src, l_end_offset_src ;",
          "8915:     OPJ_SIZE_T l_start_offset_dest, l_line_offset_dest;",
          "8922:     OPJ_UINT32 l_size_comp, l_remaining;",
          "8924:     opj_tcd_resolution_t* l_res = 00;",
          "",
          "[Added Lines]",
          "8903: static OPJ_BOOL opj_j2k_update_image_data(opj_tcd_t * p_tcd,",
          "8906:     OPJ_UINT32 i, j;",
          "8910:     OPJ_SIZE_T l_start_offset_src;",
          "8913:     OPJ_SIZE_T l_start_offset_dest;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8930:     l_img_comp_dest = p_output_image->comps;",
          "8932:     for (i = 0; i < l_image_src->numcomps; i++) {",
          "8935:         if (!l_img_comp_dest->data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8929:         OPJ_INT32 res_x0, res_x1, res_y0, res_y1;",
          "8930:         OPJ_UINT32 src_data_stride;",
          "8931:         const OPJ_INT32* p_src_data;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8954:         l_img_comp_dest->resno_decoded = l_img_comp_src->resno_decoded;",
          "8964:         }",
          "8973:         fprintf(stdout, \"SRC: l_res_x0=%d, l_res_x1=%d, l_res_y0=%d, l_res_y1=%d\\n\",",
          "8981:         l_x0_dest = opj_uint_ceildivpow2(l_img_comp_dest->x0, l_img_comp_dest->factor);",
          "",
          "[Removed Lines]",
          "8960:         l_res = l_tilec->resolutions + l_img_comp_src->resno_decoded;",
          "8962:         if (l_remaining) {",
          "8963:             ++l_size_comp;",
          "8966:         if (l_size_comp == 3) {",
          "8967:             l_size_comp = 4;",
          "8968:         }",
          "8974:                         l_res->x0, l_res->x1, l_res->y0, l_res->y1);",
          "8977:         l_width_src = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "8978:         l_height_src = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "",
          "[Added Lines]",
          "8955:         if (p_tcd->whole_tile_decoding) {",
          "8956:             opj_tcd_resolution_t* l_res = l_tilec->resolutions +",
          "8957:                                           l_img_comp_src->resno_decoded;",
          "8958:             res_x0 = l_res->x0;",
          "8959:             res_y0 = l_res->y0;",
          "8960:             res_x1 = l_res->x1;",
          "8961:             res_y1 = l_res->y1;",
          "8962:             src_data_stride = (OPJ_UINT32)(",
          "8963:                                   l_tilec->resolutions[l_tilec->minimum_num_resolutions - 1].x1 -",
          "8964:                                   l_tilec->resolutions[l_tilec->minimum_num_resolutions - 1].x0);",
          "8965:             p_src_data = l_tilec->data;",
          "8966:         } else {",
          "8967:             opj_tcd_resolution_t* l_res = l_tilec->resolutions +",
          "8968:                                           l_img_comp_src->resno_decoded;",
          "8969:             res_x0 = (OPJ_INT32)l_res->win_x0;",
          "8970:             res_y0 = (OPJ_INT32)l_res->win_y0;",
          "8971:             res_x1 = (OPJ_INT32)l_res->win_x1;",
          "8972:             res_y1 = (OPJ_INT32)l_res->win_y1;",
          "8973:             src_data_stride = l_res->win_x1 - l_res->win_x0;",
          "8974:             p_src_data = l_tilec->data_win;",
          "8977:         l_width_src = (OPJ_UINT32)(res_x1 - res_x0);",
          "8978:         l_height_src = (OPJ_UINT32)(res_y1 - res_y0);",
          "8984:                         res_x0, res_x1, res_y0, res_y1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9003:             l_offset_x0_src = 0;",
          "9006:                 l_width_dest = l_width_src;",
          "9007:                 l_offset_x1_src = 0;",
          "9008:             } else {",
          "9010:                 l_offset_x1_src = (OPJ_INT32)(l_width_src - l_width_dest);",
          "9011:             }",
          "9012:         } else {",
          "9013:             l_start_x_dest = 0U;",
          "9017:                 l_width_dest = l_width_src - (OPJ_UINT32)l_offset_x0_src;",
          "9018:                 l_offset_x1_src = 0;",
          "9019:             } else {",
          "9020:                 l_width_dest = l_img_comp_dest->w ;",
          "9022:             }",
          "9023:         }",
          "9027:             l_offset_y0_src = 0;",
          "9030:                 l_height_dest = l_height_src;",
          "9031:                 l_offset_y1_src = 0;",
          "9032:             } else {",
          "9034:                 l_offset_y1_src = (OPJ_INT32)(l_height_src - l_height_dest);",
          "9035:             }",
          "9036:         } else {",
          "9037:             l_start_y_dest = 0U;",
          "9041:                 l_height_dest = l_height_src - (OPJ_UINT32)l_offset_y0_src;",
          "9042:                 l_offset_y1_src = 0;",
          "9043:             } else {",
          "9044:                 l_height_dest = l_img_comp_dest->h ;",
          "9046:             }",
          "9047:         }",
          "",
          "[Removed Lines]",
          "8999:         assert(l_res->x0 >= 0);",
          "9000:         assert(l_res->x1 >= 0);",
          "9001:         if (l_x0_dest < (OPJ_UINT32)l_res->x0) {",
          "9002:             l_start_x_dest = (OPJ_UINT32)l_res->x0 - l_x0_dest;",
          "9005:             if (l_x1_dest >= (OPJ_UINT32)l_res->x1) {",
          "9009:                 l_width_dest = l_x1_dest - (OPJ_UINT32)l_res->x0 ;",
          "9014:             l_offset_x0_src = (OPJ_INT32)l_x0_dest - l_res->x0;",
          "9016:             if (l_x1_dest >= (OPJ_UINT32)l_res->x1) {",
          "9021:                 l_offset_x1_src = l_res->x1 - (OPJ_INT32)l_x1_dest;",
          "9025:         if (l_y0_dest < (OPJ_UINT32)l_res->y0) {",
          "9026:             l_start_y_dest = (OPJ_UINT32)l_res->y0 - l_y0_dest;",
          "9029:             if (l_y1_dest >= (OPJ_UINT32)l_res->y1) {",
          "9033:                 l_height_dest = l_y1_dest - (OPJ_UINT32)l_res->y0 ;",
          "9038:             l_offset_y0_src = (OPJ_INT32)l_y0_dest - l_res->y0;",
          "9040:             if (l_y1_dest >= (OPJ_UINT32)l_res->y1) {",
          "9045:                 l_offset_y1_src = l_res->y1 - (OPJ_INT32)l_y1_dest;",
          "",
          "[Added Lines]",
          "9007:         assert(res_x0 >= 0);",
          "9008:         assert(res_x1 >= 0);",
          "9009:         if (l_x0_dest < (OPJ_UINT32)res_x0) {",
          "9010:             l_start_x_dest = (OPJ_UINT32)res_x0 - l_x0_dest;",
          "9013:             if (l_x1_dest >= (OPJ_UINT32)res_x1) {",
          "9017:                 l_width_dest = l_x1_dest - (OPJ_UINT32)res_x0 ;",
          "9022:             l_offset_x0_src = (OPJ_INT32)l_x0_dest - res_x0;",
          "9024:             if (l_x1_dest >= (OPJ_UINT32)res_x1) {",
          "9029:                 l_offset_x1_src = res_x1 - (OPJ_INT32)l_x1_dest;",
          "9033:         if (l_y0_dest < (OPJ_UINT32)res_y0) {",
          "9034:             l_start_y_dest = (OPJ_UINT32)res_y0 - l_y0_dest;",
          "9037:             if (l_y1_dest >= (OPJ_UINT32)res_y1) {",
          "9041:                 l_height_dest = l_y1_dest - (OPJ_UINT32)res_y0 ;",
          "9046:             l_offset_y0_src = (OPJ_INT32)l_y0_dest - res_y0;",
          "9048:             if (l_y1_dest >= (OPJ_UINT32)res_y1) {",
          "9053:                 l_offset_y1_src = res_y1 - (OPJ_INT32)l_y1_dest;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9060:         l_start_offset_src = (OPJ_SIZE_T)l_offset_x0_src + (OPJ_SIZE_T)l_offset_y0_src",
          "9067:         l_start_offset_dest = (OPJ_SIZE_T)l_start_x_dest + (OPJ_SIZE_T)l_start_y_dest",
          "9072:         l_dest_ptr = l_img_comp_dest->data + l_start_offset_dest;",
          "9157:             l_src_ptr += l_start_offset_src;",
          "9159:             for (j = 0; j < l_height_dest; ++j) {",
          "9160:                 memcpy(l_dest_ptr, l_src_ptr, l_width_dest * sizeof(OPJ_INT32));",
          "9163:             }",
          "9169:         }",
          "9171:         ++l_img_comp_dest;",
          "",
          "[Removed Lines]",
          "9062:         l_line_offset_src  = (OPJ_SIZE_T)l_offset_x1_src + (OPJ_SIZE_T)l_offset_x0_src;",
          "9063:         l_end_offset_src   = (OPJ_SIZE_T)l_offset_y1_src * (OPJ_SIZE_T)l_width_src -",
          "9064:                              (OPJ_SIZE_T)l_offset_x0_src;",
          "9069:         l_line_offset_dest  = (OPJ_SIZE_T)l_img_comp_dest->w - (OPJ_SIZE_T)l_width_dest;",
          "9075:                 fprintf(stdout, \"COMPO[%d]:\\n\",i);",
          "9076:                 fprintf(stdout, \"SRC: l_start_x_src=%d, l_start_y_src=%d, l_width_src=%d, l_height_src=%d\\n\"",
          "9077:                                 \"\\t tile offset:%d, %d, %d, %d\\n\"",
          "9078:                                 \"\\t buffer offset: %d; %d, %d\\n\",",
          "9079:                                 l_res->x0, l_res->y0, l_width_src, l_height_src,",
          "9080:                                 l_offset_x0_src, l_offset_y0_src, l_offset_x1_src, l_offset_y1_src,",
          "9081:                                 l_start_offset_src, l_line_offset_src, l_end_offset_src);",
          "9083:                 fprintf(stdout, \"DEST: l_start_x_dest=%d, l_start_y_dest=%d, l_width_dest=%d, l_height_dest=%d\\n\"",
          "9084:                                 \"\\t start offset: %d, line offset= %d\\n\",",
          "9085:                                 l_start_x_dest, l_start_y_dest, l_width_dest, l_height_dest, l_start_offset_dest, l_line_offset_dest);",
          "9088:         switch (l_size_comp) {",
          "9089:         case 1: {",
          "9090:             OPJ_CHAR * l_src_ptr = (OPJ_CHAR*) p_data;",
          "9093:             if (l_img_comp_src->sgnd) {",
          "9094:                 for (j = 0 ; j < l_height_dest ; ++j) {",
          "9095:                     for (k = 0 ; k < l_width_dest ; ++k) {",
          "9098:                     }",
          "9100:                     l_dest_ptr +=",
          "9103:                 }",
          "9104:             } else {",
          "9105:                 for (j = 0 ; j < l_height_dest ; ++j) {",
          "9106:                     for (k = 0 ; k < l_width_dest ; ++k) {",
          "9108:                     }",
          "9110:                     l_dest_ptr += l_line_offset_dest;",
          "9111:                     l_src_ptr += l_line_offset_src;",
          "9112:                 }",
          "9113:             }",
          "9115:             l_src_ptr +=",
          "9117:             p_data = (OPJ_BYTE*)",
          "9119:         }",
          "9120:         break;",
          "9121:         case 2: {",
          "9122:             OPJ_INT16 * l_src_ptr = (OPJ_INT16 *) p_data;",
          "9123:             l_src_ptr += l_start_offset_src;",
          "9125:             if (l_img_comp_src->sgnd) {",
          "9126:                 for (j = 0; j < l_height_dest; ++j) {",
          "9127:                     for (k = 0; k < l_width_dest; ++k) {",
          "9128:                         OPJ_INT16 val;",
          "9129:                         memcpy(&val, l_src_ptr, sizeof(val));",
          "9130:                         l_src_ptr ++;",
          "9132:                     }",
          "9134:                     l_dest_ptr += l_line_offset_dest;",
          "9135:                     l_src_ptr += l_line_offset_src ;",
          "9136:                 }",
          "9137:             } else {",
          "9138:                 for (j = 0; j < l_height_dest; ++j) {",
          "9139:                     for (k = 0; k < l_width_dest; ++k) {",
          "9140:                         OPJ_INT16 val;",
          "9141:                         memcpy(&val, l_src_ptr, sizeof(val));",
          "9142:                         l_src_ptr ++;",
          "9144:                     }",
          "9146:                     l_dest_ptr += l_line_offset_dest;",
          "9147:                     l_src_ptr += l_line_offset_src ;",
          "9148:                 }",
          "9149:             }",
          "9151:             l_src_ptr += l_end_offset_src;",
          "9152:             p_data = (OPJ_BYTE*) l_src_ptr;",
          "9153:         }",
          "9154:         break;",
          "9155:         case 4: {",
          "9156:             OPJ_INT32 * l_src_ptr = (OPJ_INT32 *) p_data;",
          "9161:                 l_dest_ptr += l_width_dest + l_line_offset_dest;",
          "9162:                 l_src_ptr += l_width_dest + l_line_offset_src ;",
          "9165:             l_src_ptr += l_end_offset_src;",
          "9166:             p_data = (OPJ_BYTE*) l_src_ptr;",
          "9167:         }",
          "9168:         break;",
          "",
          "[Added Lines]",
          "9078:         {",
          "9079:             const OPJ_INT32 * l_src_ptr = p_src_data;",
          "9084:                 l_dest_ptr += l_img_comp_dest->w;",
          "9085:                 l_src_ptr += src_data_stride;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10548: {",
          "10549:     OPJ_BOOL l_go_on = OPJ_TRUE;",
          "10550:     OPJ_UINT32 l_current_tile_no;",
          "10552:     OPJ_INT32 l_tile_x0, l_tile_y0, l_tile_x1, l_tile_y1;",
          "10553:     OPJ_UINT32 l_nb_comps;",
          "10555:     OPJ_UINT32 nr_tiles = 0;",
          "",
          "[Removed Lines]",
          "10551:     OPJ_UINT32 l_data_size, l_max_data_size;",
          "10554:     OPJ_BYTE * l_current_data;",
          "",
          "[Added Lines]",
          "10469:     OPJ_UINT32 l_data_size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10595:         return OPJ_TRUE;",
          "10596:     }",
          "10605:     for (;;) {",
          "10606:         if (! opj_j2k_read_tile_header(p_j2k,",
          "10607:                                        &l_current_tile_no,",
          "",
          "[Removed Lines]",
          "10598:     l_current_data = (OPJ_BYTE*)opj_malloc(1000);",
          "10599:     if (! l_current_data) {",
          "10600:         opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory to decode tiles\\n\");",
          "10601:         return OPJ_FALSE;",
          "10602:     }",
          "10603:     l_max_data_size = 1000;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10612:                                        &l_go_on,",
          "10613:                                        p_stream,",
          "10614:                                        p_manager)) {",
          "10616:             return OPJ_FALSE;",
          "10617:         }",
          "",
          "[Removed Lines]",
          "10615:             opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10620:             break;",
          "10621:         }",
          "10637:                                   p_stream, p_manager)) {",
          "10639:             opj_event_msg(p_manager, EVT_ERROR, \"Failed to decode tile %d/%d\\n\",",
          "10640:                           l_current_tile_no + 1, p_j2k->m_cp.th * p_j2k->m_cp.tw);",
          "10641:             return OPJ_FALSE;",
          "10642:         }",
          "10643:         opj_event_msg(p_manager, EVT_INFO, \"Tile %d/%d has been decoded.\\n\",",
          "10644:                       l_current_tile_no + 1, p_j2k->m_cp.th * p_j2k->m_cp.tw);",
          "10647:                                         p_j2k->m_output_image)) {",
          "10649:             return OPJ_FALSE;",
          "10650:         }",
          "10651:         opj_event_msg(p_manager, EVT_INFO,",
          "10652:                       \"Image data has been updated with tile %d.\\n\\n\", l_current_tile_no + 1);",
          "",
          "[Removed Lines]",
          "10623:         if (l_data_size > l_max_data_size) {",
          "10624:             OPJ_BYTE *l_new_current_data = (OPJ_BYTE *) opj_realloc(l_current_data,",
          "10625:                                            l_data_size);",
          "10626:             if (! l_new_current_data) {",
          "10627:                 opj_free(l_current_data);",
          "10628:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory to decode tile %d/%d\\n\",",
          "10629:                               l_current_tile_no + 1, p_j2k->m_cp.th * p_j2k->m_cp.tw);",
          "10630:                 return OPJ_FALSE;",
          "10631:             }",
          "10632:             l_current_data = l_new_current_data;",
          "10633:             l_max_data_size = l_data_size;",
          "10634:         }",
          "10636:         if (! opj_j2k_decode_tile(p_j2k, l_current_tile_no, l_current_data, l_data_size,",
          "10638:             opj_free(l_current_data);",
          "10646:         if (! opj_j2k_update_image_data(p_j2k->m_tcd, l_current_data,",
          "10648:             opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "10532:         if (! opj_j2k_decode_tile(p_j2k, l_current_tile_no, NULL, 0,",
          "10542:         if (! opj_j2k_update_image_data(p_j2k->m_tcd,",
          "10546:         opj_j2k_tcp_data_destroy(&p_j2k->m_cp.tcps[l_current_tile_no]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10660:         }",
          "10661:     }",
          "10665:     return OPJ_TRUE;",
          "10666: }",
          "",
          "[Removed Lines]",
          "10663:     opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10694:     OPJ_BOOL l_go_on = OPJ_TRUE;",
          "10695:     OPJ_UINT32 l_current_tile_no;",
          "10696:     OPJ_UINT32 l_tile_no_to_dec;",
          "10698:     OPJ_INT32 l_tile_x0, l_tile_y0, l_tile_x1, l_tile_y1;",
          "10699:     OPJ_UINT32 l_nb_comps;",
          "10701:     OPJ_UINT32 l_nb_tiles;",
          "10702:     OPJ_UINT32 i;",
          "10712:     if (!p_j2k->cstr_index->tile_index) {",
          "10713:         if (!opj_j2k_allocate_tile_element_cstr_index(p_j2k)) {",
          "10715:             return OPJ_FALSE;",
          "10716:         }",
          "10717:     }",
          "",
          "[Removed Lines]",
          "10697:     OPJ_UINT32 l_data_size, l_max_data_size;",
          "10700:     OPJ_BYTE * l_current_data;",
          "10704:     l_current_data = (OPJ_BYTE*)opj_malloc(1000);",
          "10705:     if (! l_current_data) {",
          "10706:         opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory to decode one tile\\n\");",
          "10707:         return OPJ_FALSE;",
          "10708:     }",
          "10709:     l_max_data_size = 1000;",
          "10714:             opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "10592:     OPJ_UINT32 l_data_size;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10726:                 if (!(opj_stream_read_seek(p_stream,",
          "10727:                                            p_j2k->m_specific_param.m_decoder.m_last_sot_read_pos + 2, p_manager))) {",
          "10728:                     opj_event_msg(p_manager, EVT_ERROR, \"Problem with seek function\\n\");",
          "10730:                     return OPJ_FALSE;",
          "10731:                 }",
          "10732:             } else {",
          "",
          "[Removed Lines]",
          "10729:                     opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "10734:                                            p_j2k->cstr_index->tile_index[l_tile_no_to_dec].tp_index[0].start_pos + 2,",
          "10735:                                            p_manager))) {",
          "10736:                     opj_event_msg(p_manager, EVT_ERROR, \"Problem with seek function\\n\");",
          "10738:                     return OPJ_FALSE;",
          "10739:                 }",
          "10740:             }",
          "",
          "[Removed Lines]",
          "10737:                     opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "10763:                                        &l_go_on,",
          "10764:                                        p_stream,",
          "10765:                                        p_manager)) {",
          "10767:             return OPJ_FALSE;",
          "10768:         }",
          "",
          "[Removed Lines]",
          "10766:             opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "10771:             break;",
          "10772:         }",
          "10789:                                   p_stream, p_manager)) {",
          "10791:             return OPJ_FALSE;",
          "10792:         }",
          "10793:         opj_event_msg(p_manager, EVT_INFO, \"Tile %d/%d has been decoded.\\n\",",
          "10794:                       l_current_tile_no + 1, p_j2k->m_cp.th * p_j2k->m_cp.tw);",
          "10797:                                         p_j2k->m_output_image)) {",
          "10799:             return OPJ_FALSE;",
          "10800:         }",
          "10801:         opj_event_msg(p_manager, EVT_INFO,",
          "10802:                       \"Image data has been updated with tile %d.\\n\\n\", l_current_tile_no + 1);",
          "",
          "[Removed Lines]",
          "10774:         if (l_data_size > l_max_data_size) {",
          "10775:             OPJ_BYTE *l_new_current_data = (OPJ_BYTE *) opj_realloc(l_current_data,",
          "10776:                                            l_data_size);",
          "10777:             if (! l_new_current_data) {",
          "10778:                 opj_free(l_current_data);",
          "10779:                 l_current_data = NULL;",
          "10780:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory to decode tile %d/%d\\n\",",
          "10781:                               l_current_tile_no + 1, p_j2k->m_cp.th * p_j2k->m_cp.tw);",
          "10782:                 return OPJ_FALSE;",
          "10783:             }",
          "10784:             l_current_data = l_new_current_data;",
          "10785:             l_max_data_size = l_data_size;",
          "10786:         }",
          "10788:         if (! opj_j2k_decode_tile(p_j2k, l_current_tile_no, l_current_data, l_data_size,",
          "10790:             opj_free(l_current_data);",
          "10796:         if (! opj_j2k_update_image_data(p_j2k->m_tcd, l_current_data,",
          "10798:             opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "10657:         if (! opj_j2k_decode_tile(p_j2k, l_current_tile_no, NULL, 0,",
          "10664:         if (! opj_j2k_update_image_data(p_j2k->m_tcd,",
          "10668:         opj_j2k_tcp_data_destroy(&p_j2k->m_cp.tcps[l_current_tile_no]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "10806:             if (!(opj_stream_read_seek(p_stream, p_j2k->cstr_index->main_head_end + 2,",
          "10807:                                        p_manager))) {",
          "10808:                 opj_event_msg(p_manager, EVT_ERROR, \"Problem with seek function\\n\");",
          "10810:                 return OPJ_FALSE;",
          "10811:             }",
          "10812:             break;",
          "",
          "[Removed Lines]",
          "10809:                 opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10819:     }",
          "10823:     return OPJ_TRUE;",
          "10824: }",
          "",
          "[Removed Lines]",
          "10821:     opj_free(l_current_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/openjp2/opj_includes.h||src/lib/openjp2/opj_includes.h": [
          "File: src/lib/openjp2/opj_includes.h -> src/lib/openjp2/opj_includes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: typedef unsigned int OPJ_BITFIELD;",
          "219: #include \"opj_inttypes.h\"",
          "220: #include \"opj_clock.h\"",
          "221: #include \"opj_malloc.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: #define OPJ_UNUSED(x) (void)x",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243: #include \"t2.h\"",
          "244: #include \"mct.h\"",
          "245: #include \"opj_intmath.h\"",
          "247: #ifdef USE_JPIP",
          "248: #include \"cidx_manager.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: #include \"sparse_array.h\"",
          "",
          "---------------"
        ],
        "src/lib/openjp2/sparse_array.c||src/lib/openjp2/sparse_array.c": [
          "File: src/lib/openjp2/sparse_array.c -> src/lib/openjp2/sparse_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"opj_includes.h\"",
          "35: struct opj_sparse_array_int32 {",
          "36:     OPJ_UINT32 width;",
          "37:     OPJ_UINT32 height;",
          "38:     OPJ_UINT32 block_width;",
          "39:     OPJ_UINT32 block_height;",
          "40:     OPJ_UINT32 block_count_hor;",
          "41:     OPJ_UINT32 block_count_ver;",
          "42:     OPJ_INT32** data_blocks;",
          "43: };",
          "45: opj_sparse_array_int32_t* opj_sparse_array_int32_create(OPJ_UINT32 width,",
          "46:         OPJ_UINT32 height,",
          "47:         OPJ_UINT32 block_width,",
          "48:         OPJ_UINT32 block_height)",
          "49: {",
          "50:     opj_sparse_array_int32_t* sa;",
          "52:     if (width == 0 || height == 0 || block_width == 0 || block_height == 0) {",
          "53:         return NULL;",
          "54:     }",
          "55:     if (block_width > ((OPJ_UINT32)~0U) / block_height / sizeof(OPJ_INT32)) {",
          "56:         return NULL;",
          "57:     }",
          "59:     sa = opj_calloc(1, sizeof(opj_sparse_array_int32_t));",
          "60:     sa->width = width;",
          "61:     sa->height = height;",
          "62:     sa->block_width = block_width;",
          "63:     sa->block_height = block_height;",
          "64:     sa->block_count_hor = opj_uint_ceildiv(width, block_width);",
          "65:     sa->block_count_ver = opj_uint_ceildiv(height, block_height);",
          "66:     if (sa->block_count_hor > ((OPJ_UINT32)~0U) / sa->block_count_ver) {",
          "67:         opj_free(sa);",
          "68:         return NULL;",
          "69:     }",
          "70:     sa->data_blocks = opj_calloc(sizeof(OPJ_INT32*),",
          "71:                                  sa->block_count_hor * sa->block_count_ver);",
          "72:     if (sa->data_blocks == NULL) {",
          "73:         opj_free(sa);",
          "74:         return NULL;",
          "75:     }",
          "77:     return sa;",
          "78: }",
          "80: void opj_sparse_array_int32_free(opj_sparse_array_int32_t* sa)",
          "81: {",
          "82:     if (sa) {",
          "83:         OPJ_UINT32 i;",
          "84:         for (i = 0; i < sa->block_count_hor * sa->block_count_ver; i++) {",
          "85:             if (sa->data_blocks[i]) {",
          "86:                 opj_free(sa->data_blocks[i]);",
          "87:             }",
          "88:         }",
          "89:         opj_free(sa->data_blocks);",
          "90:         opj_free(sa);",
          "91:     }",
          "92: }",
          "94: OPJ_BOOL opj_sparse_array_is_region_valid(opj_sparse_array_int32_t* sa,",
          "95:         OPJ_UINT32 x0,",
          "96:         OPJ_UINT32 y0,",
          "97:         OPJ_UINT32 x1,",
          "98:         OPJ_UINT32 y1)",
          "99: {",
          "100:     return !(x0 >= sa->width || x1 <= x0 || x1 > sa->width ||",
          "101:              y0 >= sa->height || y1 <= y0 || y1 > sa->height);",
          "102: }",
          "104: static OPJ_BOOL opj_sparse_array_int32_read_or_write(",
          "105:     opj_sparse_array_int32_t* sa,",
          "106:     OPJ_UINT32 x0,",
          "107:     OPJ_UINT32 y0,",
          "108:     OPJ_UINT32 x1,",
          "109:     OPJ_UINT32 y1,",
          "110:     OPJ_INT32* buf,",
          "111:     OPJ_UINT32 buf_col_stride,",
          "112:     OPJ_UINT32 buf_line_stride,",
          "113:     OPJ_BOOL forgiving,",
          "114:     OPJ_BOOL is_read_op)",
          "115: {",
          "116:     OPJ_UINT32 y, block_y;",
          "117:     OPJ_UINT32 y_incr = 0;",
          "118:     if (!opj_sparse_array_is_region_valid(sa, x0, y0, x1, y1)) {",
          "119:         return forgiving;",
          "120:     }",
          "122:     block_y = y0 / sa->block_height;",
          "123:     for (y = y0; y < y1; block_y ++, y += y_incr) {",
          "124:         OPJ_UINT32 x, block_x;",
          "125:         OPJ_UINT32 x_incr = 0;",
          "126:         OPJ_UINT32 block_y_offset;",
          "127:         y_incr = (y == y0) ? sa->block_height - (y0 % sa->block_height) :",
          "128:                  sa->block_height;",
          "129:         block_y_offset = sa->block_height - y_incr;",
          "130:         y_incr = opj_uint_min(y_incr, y1 - y);",
          "131:         block_x = x0 / sa->block_width;",
          "132:         for (x = x0; x < x1; block_x ++, x += x_incr) {",
          "133:             OPJ_UINT32 j;",
          "134:             OPJ_UINT32 block_x_offset;",
          "135:             OPJ_INT32* src_block;",
          "136:             x_incr = (x == x0) ? sa->block_width - (x0 % sa->block_width) : sa->block_width;",
          "137:             block_x_offset = sa->block_width - x_incr;",
          "138:             x_incr = opj_uint_min(x_incr, x1 - x);",
          "139:             src_block = sa->data_blocks[block_y * sa->block_count_hor + block_x];",
          "140:             if (is_read_op) {",
          "141:                 if (src_block == NULL) {",
          "142:                     for (j = 0; j < y_incr; j++) {",
          "143:                         if (buf_col_stride == 1) {",
          "144:                             memset(buf + (y - y0 + j) * buf_line_stride + (x - x0) * buf_col_stride,",
          "145:                                    0,",
          "146:                                    sizeof(OPJ_INT32) * x_incr);",
          "147:                         } else {",
          "148:                             OPJ_UINT32 k;",
          "149:                             for (k = 0; k < x_incr; k++) {",
          "151:                             }",
          "152:                         }",
          "153:                     }",
          "154:                 } else {",
          "155:                     for (j = 0; j < y_incr; j++) {",
          "156:                         if (buf_col_stride == 1) {",
          "157:                             memcpy(buf + (y - y0 + j) * buf_line_stride + (x - x0) * buf_col_stride,",
          "158:                                    src_block + (block_y_offset + j) * sa->block_width + block_x_offset,",
          "159:                                    sizeof(OPJ_INT32) * x_incr);",
          "160:                         } else {",
          "161:                             OPJ_UINT32 k;",
          "162:                             for (k = 0; k < x_incr; k++) {",
          "165:                             }",
          "166:                         }",
          "167:                     }",
          "168:                 }",
          "169:             } else {",
          "170:                 if (src_block == NULL) {",
          "171:                     src_block = opj_calloc(1,",
          "172:                                            sa->block_width * sa->block_height * sizeof(OPJ_INT32));",
          "173:                     if (src_block == NULL) {",
          "174:                         return OPJ_FALSE;",
          "175:                     }",
          "176:                     sa->data_blocks[block_y * sa->block_count_hor + block_x] = src_block;",
          "177:                 }",
          "179:                 for (j = 0; j < y_incr; j++) {",
          "180:                     if (buf_col_stride == 1) {",
          "181:                         memcpy(src_block + (block_y_offset + j) * sa->block_width + block_x_offset,",
          "182:                                buf + (y - y0 + j) * buf_line_stride + (x - x0) * buf_col_stride,",
          "183:                                sizeof(OPJ_INT32) * x_incr);",
          "184:                     } else {",
          "185:                         OPJ_UINT32 k;",
          "186:                         for (k = 0; k < x_incr; k++) {",
          "189:                         }",
          "190:                     }",
          "191:                 }",
          "192:             }",
          "193:         }",
          "194:     }",
          "196:     return OPJ_TRUE;",
          "197: }",
          "199: OPJ_BOOL opj_sparse_array_int32_read(opj_sparse_array_int32_t* sa,",
          "200:                                      OPJ_UINT32 x0,",
          "201:                                      OPJ_UINT32 y0,",
          "202:                                      OPJ_UINT32 x1,",
          "203:                                      OPJ_UINT32 y1,",
          "204:                                      OPJ_INT32* dest,",
          "205:                                      OPJ_UINT32 dest_col_stride,",
          "206:                                      OPJ_UINT32 dest_line_stride,",
          "207:                                      OPJ_BOOL forgiving)",
          "208: {",
          "209:     return opj_sparse_array_int32_read_or_write(sa, x0, y0, x1, y1,",
          "210:             dest,",
          "211:             dest_col_stride,",
          "212:             dest_line_stride,",
          "213:             forgiving,",
          "214:             OPJ_TRUE);",
          "215: }",
          "217: OPJ_BOOL opj_sparse_array_int32_write(opj_sparse_array_int32_t* sa,",
          "218:                                       OPJ_UINT32 x0,",
          "219:                                       OPJ_UINT32 y0,",
          "220:                                       OPJ_UINT32 x1,",
          "221:                                       OPJ_UINT32 y1,",
          "222:                                       const OPJ_INT32* src,",
          "223:                                       OPJ_UINT32 src_col_stride,",
          "224:                                       OPJ_UINT32 src_line_stride,",
          "225:                                       OPJ_BOOL forgiving)",
          "226: {",
          "227:     return opj_sparse_array_int32_read_or_write(sa, x0, y0, x1, y1,",
          "228:             (OPJ_INT32*)src,",
          "229:             src_col_stride,",
          "230:             src_line_stride,",
          "231:             forgiving,",
          "232:             OPJ_FALSE);",
          "233: }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/sparse_array.h||src/lib/openjp2/sparse_array.h": [
          "File: src/lib/openjp2/sparse_array.h -> src/lib/openjp2/sparse_array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"opj_includes.h\"",
          "34: #ifndef OPJ_SPARSE_ARRAY_H",
          "35: #define OPJ_SPARSE_ARRAY_H",
          "37: @file sparse_array.h",
          "38: @brief Sparse array management",
          "40: The functions in this file manage sparse arrays. Sparse arrays are arrays with",
          "41: potential big dimensions, but with very few samples actually set. Such sparse",
          "42: arrays require allocating a low amount of memory, by just allocating memory",
          "43: for blocks of the array that are set. The minimum memory allocation unit is a",
          "44: a block. There is a trade-off to pick up an appropriate dimension for blocks.",
          "45: If it is too big, and pixels set are far from each other, too much memory will",
          "46: be used. If blocks are too small, the book-keeping costs of blocks will raise.",
          "53: typedef struct opj_sparse_array_int32 opj_sparse_array_int32_t;",
          "62: opj_sparse_array_int32_t* opj_sparse_array_int32_create(OPJ_UINT32 width,",
          "63:         OPJ_UINT32 height,",
          "64:         OPJ_UINT32 block_width,",
          "65:         OPJ_UINT32 block_height);",
          "70: void opj_sparse_array_int32_free(opj_sparse_array_int32_t* sa);",
          "80: OPJ_BOOL opj_sparse_array_is_region_valid(opj_sparse_array_int32_t* sa,",
          "81:         OPJ_UINT32 x0,",
          "82:         OPJ_UINT32 y0,",
          "83:         OPJ_UINT32 x1,",
          "84:         OPJ_UINT32 y1);",
          "102: OPJ_BOOL opj_sparse_array_int32_read(opj_sparse_array_int32_t* sa,",
          "103:                                      OPJ_UINT32 x0,",
          "104:                                      OPJ_UINT32 y0,",
          "105:                                      OPJ_UINT32 x1,",
          "106:                                      OPJ_UINT32 y1,",
          "107:                                      OPJ_INT32* dest,",
          "108:                                      OPJ_UINT32 dest_col_stride,",
          "109:                                      OPJ_UINT32 dest_line_stride,",
          "110:                                      OPJ_BOOL forgiving);",
          "129: OPJ_BOOL opj_sparse_array_int32_write(opj_sparse_array_int32_t* sa,",
          "130:                                       OPJ_UINT32 x0,",
          "131:                                       OPJ_UINT32 y0,",
          "132:                                       OPJ_UINT32 x1,",
          "133:                                       OPJ_UINT32 y1,",
          "134:                                       const OPJ_INT32* src,",
          "135:                                       OPJ_UINT32 src_col_stride,",
          "136:                                       OPJ_UINT32 src_line_stride,",
          "137:                                       OPJ_BOOL forgiving);",
          "",
          "---------------"
        ],
        "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c": [
          "File: src/lib/openjp2/t1.c -> src/lib/openjp2/t1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1601:     band = job->band;",
          "1602:     tilec = job->tilec;",
          "1603:     tccp = job->tccp;",
          "1606:     if (!*(job->pret)) {",
          "1607:         opj_free(job);",
          "",
          "[Removed Lines]",
          "1604:     tile_w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "",
          "[Added Lines]",
          "1604:     tile_w = (OPJ_UINT32)(tilec->resolutions[tilec->minimum_num_resolutions - 1].x1",
          "1605:                           -",
          "1606:                           tilec->resolutions[tilec->minimum_num_resolutions - 1].x0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1640:         y += pres->y1 - pres->y0;",
          "1641:     }",
          "1644:     cblk_w = t1->w;",
          "1645:     cblk_h = t1->h;",
          "",
          "[Removed Lines]",
          "1643:     datap = t1->data;",
          "",
          "[Added Lines]",
          "1645:     datap = cblk->decoded_data ? cblk->decoded_data : t1->data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1665:             }",
          "1666:         }",
          "1667:     }",
          "1669:         OPJ_INT32* OPJ_RESTRICT tiledp = &tilec->data[(OPJ_UINT32)y * tile_w +",
          "1670:                                                        (OPJ_UINT32)x];",
          "1671:         for (j = 0; j < cblk_h; ++j) {",
          "",
          "[Removed Lines]",
          "1668:     if (tccp->qmfbid == 1) {",
          "",
          "[Added Lines]",
          "1671:     if (cblk->decoded_data) {",
          "1672:         if (tccp->qmfbid == 1) {",
          "1673:             for (j = 0; j < cblk_h; ++j) {",
          "1674:                 i = 0;",
          "1675:                 for (; i < (cblk_w & ~(OPJ_UINT32)3U); i += 4U) {",
          "1676:                     OPJ_INT32 tmp0 = datap[(j * cblk_w) + i + 0U];",
          "1677:                     OPJ_INT32 tmp1 = datap[(j * cblk_w) + i + 1U];",
          "1678:                     OPJ_INT32 tmp2 = datap[(j * cblk_w) + i + 2U];",
          "1679:                     OPJ_INT32 tmp3 = datap[(j * cblk_w) + i + 3U];",
          "1680:                     datap[(j * cblk_w) + i + 0U] = tmp0 / 2;",
          "1681:                     datap[(j * cblk_w) + i + 1U] = tmp1 / 2;",
          "1682:                     datap[(j * cblk_w) + i + 2U] = tmp2 / 2;",
          "1683:                     datap[(j * cblk_w) + i + 3U] = tmp3 / 2;",
          "1684:                 }",
          "1685:                 for (; i < cblk_w; ++i) {",
          "1686:                     datap[(j * cblk_w) + i] /= 2;",
          "1687:                 }",
          "1688:             }",
          "1690:             for (j = 0; j < cblk_h; ++j) {",
          "1691:                 for (i = 0; i < cblk_w; ++i) {",
          "1692:                     OPJ_FLOAT32 tmp = ((OPJ_FLOAT32)(*datap)) * band->stepsize;",
          "1693:                     memcpy(datap, &tmp, sizeof(tmp));",
          "1694:                     datap++;",
          "1695:                 }",
          "1696:             }",
          "1697:         }",
          "1698:     } else if (tccp->qmfbid == 1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1725:             for (precno = 0; precno < res->pw * res->ph; ++precno) {",
          "1726:                 opj_tcd_precinct_t* precinct = &band->precincts[precno];",
          "1729:                 if (!opj_tcd_is_subband_area_of_interest(tcd,",
          "1730:                         tilec->compno,",
          "",
          "[Removed Lines]",
          "1727:                 OPJ_BOOL skip_precinct = OPJ_FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1734:                         (OPJ_UINT32)precinct->y0,",
          "1735:                         (OPJ_UINT32)precinct->x1,",
          "1736:                         (OPJ_UINT32)precinct->y1)) {",
          "1740:                 }",
          "1742:                 for (cblkno = 0; cblkno < precinct->cw * precinct->ch; ++cblkno) {",
          "1743:                     opj_tcd_cblk_dec_t* cblk = &precinct->cblks.dec[cblkno];",
          "1744:                     opj_t1_cblk_decode_processing_job_t* job;",
          "1763:                         OPJ_UINT32 cblk_w = (OPJ_UINT32)(cblk->x1 - cblk->x0);",
          "1764:                         OPJ_UINT32 cblk_h = (OPJ_UINT32)(cblk->y1 - cblk->y0);",
          "1773:                         }",
          "1780:                         }",
          "1782:                     }",
          "1784:                     job = (opj_t1_cblk_decode_processing_job_t*) opj_calloc(1,",
          "",
          "[Removed Lines]",
          "1737:                     skip_precinct = OPJ_TRUE;",
          "1746:                     if (skip_precinct ||",
          "1747:                             !opj_tcd_is_subband_area_of_interest(tcd,",
          "1748:                                     tilec->compno,",
          "1749:                                     resno,",
          "1750:                                     band->bandno,",
          "1751:                                     (OPJ_UINT32)cblk->x0,",
          "1752:                                     (OPJ_UINT32)cblk->y0,",
          "1753:                                     (OPJ_UINT32)cblk->x1,",
          "1754:                                     (OPJ_UINT32)cblk->y1)) {",
          "1758:                         OPJ_UINT32 j;",
          "1759:                         OPJ_INT32 x = cblk->x0 - band->x0;",
          "1760:                         OPJ_INT32 y = cblk->y0 - band->y0;",
          "1761:                         OPJ_INT32* OPJ_RESTRICT tiledp;",
          "1762:                         OPJ_UINT32 tile_w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "1766:                         if (band->bandno & 1) {",
          "1767:                             opj_tcd_resolution_t* pres = &tilec->resolutions[resno - 1];",
          "1768:                             x += pres->x1 - pres->x0;",
          "1769:                         }",
          "1770:                         if (band->bandno & 2) {",
          "1771:                             opj_tcd_resolution_t* pres = &tilec->resolutions[resno - 1];",
          "1772:                             y += pres->y1 - pres->y0;",
          "1775:                         tiledp = &tilec->data[(OPJ_UINT32)y * tile_w +",
          "1776:                                                             (OPJ_UINT32)x];",
          "1778:                         for (j = 0; j < cblk_h; ++j) {",
          "1779:                             memset(tiledp + j * tile_w, 0, cblk_w * sizeof(OPJ_INT32));",
          "1781:                         continue;",
          "",
          "[Added Lines]",
          "1766:                     continue;",
          "1773:                     assert(cblk->decoded_data == NULL);",
          "1775:                     if (!opj_tcd_is_subband_area_of_interest(tcd,",
          "1776:                             tilec->compno,",
          "1777:                             resno,",
          "1778:                             band->bandno,",
          "1779:                             (OPJ_UINT32)cblk->x0,",
          "1780:                             (OPJ_UINT32)cblk->y0,",
          "1781:                             (OPJ_UINT32)cblk->x1,",
          "1782:                             (OPJ_UINT32)cblk->y1)) {",
          "1783:                         continue;",
          "1784:                     }",
          "1786:                     if (!tcd->whole_tile_decoding) {",
          "1789:                         if (cblk_w == 0 || cblk_h == 0) {",
          "1790:                             continue;",
          "1793:                         cblk->decoded_data = opj_calloc(1, cblk_w * cblk_h * sizeof(OPJ_INT32));",
          "1794:                         if (cblk->decoded_data == NULL) {",
          "1795:                             if (p_manager_mutex) {",
          "1796:                                 opj_mutex_lock(p_manager_mutex);",
          "1797:                             }",
          "1798:                             opj_event_msg(p_manager, EVT_ERROR,",
          "1799:                                           \"Cannot allocate cblk->decoded_data\\n\");",
          "1800:                             if (p_manager_mutex) {",
          "1801:                                 opj_mutex_unlock(p_manager_mutex);",
          "1802:                             }",
          "1804:                             return;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1827:     OPJ_BYTE* cblkdata = NULL;",
          "1828:     OPJ_UINT32 cblkdataindex = 0;",
          "1831:     mqc->lut_ctxno_zc_orient = lut_ctxno_zc + (orient << 9);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1854:     OPJ_INT32* original_t1_data = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1893:         cblkdata = cblk->chunks[0].data;",
          "1894:     }",
          "1896:     for (segno = 0; segno < cblk->real_num_segs; ++segno) {",
          "1897:         opj_tcd_seg_t *seg = &cblk->segs[segno];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1923:     if (cblk->decoded_data) {",
          "1924:         original_t1_data = t1->data;",
          "1925:         t1->data = cblk->decoded_data;",
          "1926:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1972:         }",
          "1973:     }",
          "1975:     return OPJ_TRUE;",
          "1976: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2008:     if (cblk->decoded_data) {",
          "2009:         t1->data = original_t1_data;",
          "2010:     }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:         opj_codestream_info_t *p_cstr_info,",
          "191:         opj_event_mgr_t *p_manager);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: static OPJ_BOOL opj_tcd_is_whole_tilecomp_decoding(opj_tcd_t *tcd,",
          "195:         OPJ_UINT32 compno);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "679:             ((l_tilec->data_size_needed > l_tilec->data_size) &&",
          "680:              (l_tilec->ownsData == OPJ_FALSE))) {",
          "681:         l_tilec->data = (OPJ_INT32 *) opj_image_data_alloc(l_tilec->data_size_needed);",
          "683:             return OPJ_FALSE;",
          "684:         }",
          "",
          "[Removed Lines]",
          "682:         if (! l_tilec->data) {",
          "",
          "[Added Lines]",
          "686:         if (!l_tilec->data && l_tilec->data_size_needed != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "794:         l_tilec->compno = compno;",
          "813:         l_tilec->numresolutions = l_tccp->numresolutions;",
          "814:         if (l_tccp->numresolutions < l_cp->m_specific_param.m_dec.m_reduce) {",
          "815:             l_tilec->minimum_num_resolutions = 1;",
          "",
          "[Removed Lines]",
          "798:         l_data_size = (OPJ_UINT32)(l_tilec->x1 - l_tilec->x0);",
          "800:         if ((l_data_size > 0U) &&",
          "801:                 ((((OPJ_UINT32) - 1) / l_data_size) < (OPJ_UINT32)(l_tilec->y1 -",
          "802:                         l_tilec->y0))) {",
          "803:             opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "804:             return OPJ_FALSE;",
          "805:         }",
          "806:         l_data_size = l_data_size * (OPJ_UINT32)(l_tilec->y1 - l_tilec->y0);",
          "808:         if ((((OPJ_UINT32) - 1) / (OPJ_UINT32)sizeof(OPJ_UINT32)) < l_data_size) {",
          "809:             opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "810:             return OPJ_FALSE;",
          "811:         }",
          "812:         l_data_size = l_data_size * (OPJ_UINT32)sizeof(OPJ_UINT32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "818:                                                l_cp->m_specific_param.m_dec.m_reduce;",
          "819:         }",
          "825:         }",
          "827:         l_data_size = l_tilec->numresolutions * (OPJ_UINT32)sizeof(",
          "828:                           opj_tcd_resolution_t);",
          "830:         if (l_tilec->resolutions == 00) {",
          "831:             l_tilec->resolutions = (opj_tcd_resolution_t *) opj_malloc(l_data_size);",
          "832:             if (! l_tilec->resolutions) {",
          "",
          "[Removed Lines]",
          "821:         l_tilec->data_size_needed = l_data_size;",
          "822:         if (p_tcd->m_is_decoder && !opj_alloc_tile_component_data(l_tilec)) {",
          "823:             opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "824:             return OPJ_FALSE;",
          "",
          "[Added Lines]",
          "809:         if (isEncoder) {",
          "811:             l_data_size = (OPJ_UINT32)(l_tilec->x1 - l_tilec->x0);",
          "813:             if ((l_data_size > 0U) &&",
          "814:                     ((((OPJ_UINT32) - 1) / l_data_size) < (OPJ_UINT32)(l_tilec->y1 -",
          "815:                             l_tilec->y0))) {",
          "816:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "817:                 return OPJ_FALSE;",
          "818:             }",
          "819:             l_data_size = l_data_size * (OPJ_UINT32)(l_tilec->y1 - l_tilec->y0);",
          "821:             if ((((OPJ_UINT32) - 1) / (OPJ_UINT32)sizeof(OPJ_UINT32)) < l_data_size) {",
          "822:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "823:                 return OPJ_FALSE;",
          "824:             }",
          "825:             l_data_size = l_data_size * (OPJ_UINT32)sizeof(OPJ_UINT32);",
          "827:             l_tilec->data_size_needed = l_data_size;",
          "833:         opj_aligned_free(l_tilec->data_win);",
          "834:         l_tilec->data_win = NULL;",
          "835:         l_tilec->win_x0 = 0;",
          "836:         l_tilec->win_y0 = 0;",
          "837:         l_tilec->win_x1 = 0;",
          "838:         l_tilec->win_y1 = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "875:             l_res->y0 = opj_int_ceildivpow2(l_tilec->y0, (OPJ_INT32)l_level_no);",
          "876:             l_res->x1 = opj_int_ceildivpow2(l_tilec->x1, (OPJ_INT32)l_level_no);",
          "877:             l_res->y1 = opj_int_ceildivpow2(l_tilec->y1, (OPJ_INT32)l_level_no);",
          "880:             l_pdx = l_tccp->prcw[resno];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:             if (!isEncoder && resno + 1 == l_tilec->minimum_num_resolutions) {",
          "891:                 OPJ_UINT32 res_w = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "892:                 OPJ_UINT32 res_h = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "895:                 if (res_h > 0 && res_h > (((OPJ_UINT32) - 1) / res_h)) {",
          "896:                     opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "897:                     return OPJ_FALSE;",
          "898:                 }",
          "899:                 l_data_size = res_w * res_h;",
          "901:                 if ((((OPJ_UINT32) - 1) / (OPJ_UINT32)sizeof(OPJ_UINT32)) < l_data_size) {",
          "902:                     opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "903:                     return OPJ_FALSE;",
          "904:                 }",
          "905:                 l_data_size *= (OPJ_UINT32)sizeof(OPJ_UINT32);",
          "907:                 l_tilec->data_size_needed = l_data_size;",
          "908:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1249:         OPJ_UINT32 l_numchunksalloc = p_code_block->numchunksalloc;",
          "1250:         OPJ_UINT32 i;",
          "1252:         memset(p_code_block, 0, sizeof(opj_tcd_cblk_dec_t));",
          "1253:         p_code_block->segs = l_segs;",
          "1254:         p_code_block->m_current_max_segs = l_current_max_segs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1284:         opj_free(p_code_block->decoded_data);",
          "1285:         p_code_block->decoded_data = 00;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1262:     return OPJ_TRUE;",
          "1263: }",
          "1266: {",
          "1267:     OPJ_UINT32 i;",
          "1268:     OPJ_UINT32 l_data_size = 0;",
          "",
          "[Removed Lines]",
          "1265: OPJ_UINT32 opj_tcd_get_decoded_tile_size(opj_tcd_t *p_tcd)",
          "",
          "[Added Lines]",
          "1300: OPJ_UINT32 opj_tcd_get_decoded_tile_size(opj_tcd_t *p_tcd,",
          "1301:         OPJ_BOOL take_into_account_partial_decoding)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1288:         }",
          "1290:         l_res = l_tile_comp->resolutions + l_tile_comp->minimum_num_resolutions - 1;",
          "1293:         if (l_size_comp && UINT_MAX / l_size_comp < l_temp) {",
          "1294:             return UINT_MAX;",
          "1295:         }",
          "",
          "[Removed Lines]",
          "1291:         l_temp = (OPJ_UINT32)((l_res->x1 - l_res->x0) * (l_res->y1 -",
          "",
          "[Added Lines]",
          "1327:         if (take_into_account_partial_decoding && !p_tcd->whole_tile_decoding) {",
          "1328:             l_temp = (l_res->win_x1 - l_res->win_x0) *",
          "1329:                      (l_res->win_y1 - l_res->win_y0);",
          "1330:         } else {",
          "1331:             l_temp = (OPJ_UINT32)((l_res->x1 - l_res->x0) * (l_res->y1 -",
          "1333:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1401: }",
          "1403: OPJ_BOOL opj_tcd_decode_tile(opj_tcd_t *p_tcd,",
          "1408:                              OPJ_BYTE *p_src,",
          "1409:                              OPJ_UINT32 p_max_length,",
          "1410:                              OPJ_UINT32 p_tile_no,",
          "",
          "[Removed Lines]",
          "1404:                              OPJ_UINT32 decoded_x0,",
          "1405:                              OPJ_UINT32 decoded_y0,",
          "1406:                              OPJ_UINT32 decoded_x1,",
          "1407:                              OPJ_UINT32 decoded_y1,",
          "",
          "[Added Lines]",
          "1445:                              OPJ_UINT32 win_x0,",
          "1446:                              OPJ_UINT32 win_y0,",
          "1447:                              OPJ_UINT32 win_x1,",
          "1448:                              OPJ_UINT32 win_y1,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1413:                             )",
          "1414: {",
          "1415:     OPJ_UINT32 l_data_read;",
          "1416:     p_tcd->tcd_tileno = p_tile_no;",
          "1417:     p_tcd->tcp = &(p_tcd->cp->tcps[p_tile_no]);",
          "",
          "[Removed Lines]",
          "1418:     p_tcd->decoded_x0 = decoded_x0;",
          "1419:     p_tcd->decoded_y0 = decoded_y0;",
          "1420:     p_tcd->decoded_x1 = decoded_x1;",
          "1421:     p_tcd->decoded_y1 = decoded_y1;",
          "",
          "[Added Lines]",
          "1457:     OPJ_UINT32 compno;",
          "1461:     p_tcd->win_x0 = win_x0;",
          "1462:     p_tcd->win_y0 = win_y0;",
          "1463:     p_tcd->win_x1 = win_x1;",
          "1464:     p_tcd->win_y1 = win_y1;",
          "1465:     p_tcd->whole_tile_decoding = OPJ_TRUE;",
          "1467:     for (compno = 0; compno < p_tcd->image->numcomps; compno++) {",
          "1468:         if (!opj_tcd_is_whole_tilecomp_decoding(p_tcd, compno)) {",
          "1469:             p_tcd->whole_tile_decoding = OPJ_FALSE;",
          "1470:             break;",
          "1471:         }",
          "1472:     }",
          "1474:     if (p_tcd->whole_tile_decoding) {",
          "1475:         for (compno = 0; compno < p_tcd->image->numcomps; compno++) {",
          "1476:             if (!opj_alloc_tile_component_data(&(p_tcd->tcd_image->tiles->comps[compno]))) {",
          "1477:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1478:                 return OPJ_FALSE;",
          "1479:             }",
          "1480:         }",
          "1481:     } else {",
          "1485:         for (compno = 0; compno < p_tcd->image->numcomps; compno++) {",
          "1486:             OPJ_UINT32 resno;",
          "1487:             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "1488:             opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);",
          "1491:             tilec->win_x0 = opj_uint_max(",
          "1492:                                 (OPJ_UINT32)tilec->x0,",
          "1493:                                 opj_uint_ceildiv(p_tcd->win_x0, image_comp->dx));",
          "1494:             tilec->win_y0 = opj_uint_max(",
          "1495:                                 (OPJ_UINT32)tilec->y0,",
          "1496:                                 opj_uint_ceildiv(p_tcd->win_y0, image_comp->dy));",
          "1497:             tilec->win_x1 = opj_uint_min(",
          "1498:                                 (OPJ_UINT32)tilec->x1,",
          "1499:                                 opj_uint_ceildiv(p_tcd->win_x1, image_comp->dx));",
          "1500:             tilec->win_y1 = opj_uint_min(",
          "1501:                                 (OPJ_UINT32)tilec->y1,",
          "1502:                                 opj_uint_ceildiv(p_tcd->win_y1, image_comp->dy));",
          "1504:             for (resno = 0; resno < tilec->numresolutions; ++resno) {",
          "1505:                 opj_tcd_resolution_t *res = tilec->resolutions + resno;",
          "1506:                 res->win_x0 = opj_uint_ceildivpow2(tilec->win_x0,",
          "1507:                                                    tilec->numresolutions - 1 - resno);",
          "1508:                 res->win_y0 = opj_uint_ceildivpow2(tilec->win_y0,",
          "1509:                                                    tilec->numresolutions - 1 - resno);",
          "1510:                 res->win_x1 = opj_uint_ceildivpow2(tilec->win_x1,",
          "1511:                                                    tilec->numresolutions - 1 - resno);",
          "1512:                 res->win_y1 = opj_uint_ceildivpow2(tilec->win_y1,",
          "1513:                                                    tilec->numresolutions - 1 - resno);",
          "1514:             }",
          "1515:         }",
          "1516:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1461:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:     if (!p_tcd->whole_tile_decoding) {",
          "1563:         for (compno = 0; compno < p_tcd->image->numcomps; compno++) {",
          "1564:             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "1565:             opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);",
          "1566:             opj_tcd_resolution_t *res = tilec->resolutions + image_comp->resno_decoded;",
          "1567:             OPJ_UINT32 w = res->win_x1 - res->win_x0;",
          "1568:             OPJ_UINT32 h = res->win_y1 - res->win_y0;",
          "1569:             OPJ_UINT32 l_data_size;",
          "1571:             opj_aligned_free(tilec->data_win);",
          "1572:             tilec->data_win = NULL;",
          "1574:             if (w > 0 && h > 0) {",
          "1575:                 if (w > ((OPJ_UINT32) - 1) / h) {",
          "1576:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1577:                     return OPJ_FALSE;",
          "1578:                 }",
          "1579:                 l_data_size = w * h;",
          "1580:                 if (l_data_size > ((OPJ_UINT32) - 1) / sizeof(OPJ_INT32)) {",
          "1581:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1582:                     return OPJ_FALSE;",
          "1583:                 }",
          "1584:                 l_data_size *= (OPJ_UINT32)sizeof(OPJ_INT32);",
          "1586:                 tilec->data_win = opj_aligned_malloc(l_data_size);",
          "1587:                 if (tilec->data_win == NULL) {",
          "1588:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1589:                     return OPJ_FALSE;",
          "1590:                 }",
          "1591:             }",
          "1592:         }",
          "1593:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1502:     OPJ_UINT32 l_size_comp, l_remaining;",
          "1503:     OPJ_UINT32 l_stride, l_width, l_height;",
          "1506:     if (l_data_size == UINT_MAX || l_data_size > p_dest_length) {",
          "1507:         return OPJ_FALSE;",
          "1508:     }",
          "",
          "[Removed Lines]",
          "1505:     l_data_size = opj_tcd_get_decoded_tile_size(p_tcd);",
          "",
          "[Added Lines]",
          "1636:     l_data_size = opj_tcd_get_decoded_tile_size(p_tcd, OPJ_TRUE);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1511:     l_img_comp = p_tcd->image->comps;",
          "1513:     for (i = 0; i < p_tcd->image->numcomps; ++i) {",
          "1516:         l_res = l_tilec->resolutions + l_img_comp->resno_decoded;",
          "1521:         if (l_remaining) {",
          "1522:             ++l_size_comp;",
          "",
          "[Removed Lines]",
          "1517:         l_width = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "1518:         l_height = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "1519:         l_stride = (OPJ_UINT32)(l_tilec->x1 - l_tilec->x0) - l_width;",
          "",
          "[Added Lines]",
          "1645:         const OPJ_INT32* l_src_data;",
          "1649:         if (p_tcd->whole_tile_decoding) {",
          "1650:             l_width = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "1651:             l_height = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "1652:             l_stride = (OPJ_UINT32)(l_tilec->resolutions[l_tilec->minimum_num_resolutions -",
          "1653:                                                                      1].x1 -",
          "1654:                                     l_tilec->resolutions[l_tilec->minimum_num_resolutions - 1].x0) - l_width;",
          "1655:             l_src_data = l_tilec->data;",
          "1656:         } else {",
          "1657:             l_width = l_res->win_x1 - l_res->win_x0;",
          "1658:             l_height = l_res->win_y1 - l_res->win_y0;",
          "1659:             l_stride = 0;",
          "1660:             l_src_data = l_tilec->data_win;",
          "1661:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1529:         switch (l_size_comp) {",
          "1530:         case 1: {",
          "1531:             OPJ_CHAR * l_dest_ptr = (OPJ_CHAR *) p_dest;",
          "1534:             if (l_img_comp->sgnd) {",
          "1535:                 for (j = 0; j < l_height; ++j) {",
          "",
          "[Removed Lines]",
          "1532:             const OPJ_INT32 * l_src_ptr = l_tilec->data;",
          "",
          "[Added Lines]",
          "1674:             const OPJ_INT32 * l_src_ptr = l_src_data;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1551:         }",
          "1552:         break;",
          "1553:         case 2: {",
          "1555:             OPJ_INT16 * l_dest_ptr = (OPJ_INT16 *) p_dest;",
          "1557:             if (l_img_comp->sgnd) {",
          "",
          "[Removed Lines]",
          "1554:             const OPJ_INT32 * l_src_ptr = l_tilec->data;",
          "",
          "[Added Lines]",
          "1696:             const OPJ_INT32 * l_src_ptr = l_src_data;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1579:         break;",
          "1580:         case 4: {",
          "1581:             OPJ_INT32 * l_dest_ptr = (OPJ_INT32 *) p_dest;",
          "1584:             for (j = 0; j < l_height; ++j) {",
          "1585:                 memcpy(l_dest_ptr, l_src_ptr, l_width * sizeof(OPJ_INT32));",
          "",
          "[Removed Lines]",
          "1582:             OPJ_INT32 * l_src_ptr = l_tilec->data;",
          "",
          "[Added Lines]",
          "1724:             const OPJ_INT32 * l_src_ptr = l_src_data;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1674:             l_tile_comp->data_size = 0;",
          "1675:             l_tile_comp->data_size_needed = 0;",
          "1676:         }",
          "1677:         ++l_tile_comp;",
          "1678:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1820:         opj_aligned_free(l_tile_comp->data_win);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1764:     opj_image_comp_t * l_img_comp = p_tcd->image->comps;",
          "1766:     for (compno = 0; compno < l_tile->numcomps; compno++) {",
          "1780:         if (l_tccp->qmfbid == 1) {",
          "1781:             if (! opj_dwt_decode(p_tcd, l_tile_comp,",
          "",
          "[Removed Lines]",
          "1768:         if (tcd->cp->reduce != 0) {",
          "1769:                 tcd->image->comps[compno].resno_decoded =",
          "1770:                         tile->comps[compno].numresolutions - tcd->cp->reduce - 1;",
          "1771:                 if (tcd->image->comps[compno].resno_decoded < 0)",
          "1772:                 {",
          "1773:                         return false;",
          "1774:                 }",
          "1775:         }",
          "1776:         numres2decode = tcd->image->comps[compno].resno_decoded + 1;",
          "1777:         if(numres2decode > 0){",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1807:         return OPJ_TRUE;",
          "1808:     }",
          "1813:     if (l_tile->numcomps >= 3) {",
          "1821:             opj_event_msg(p_manager, EVT_ERROR,",
          "1822:                           \"Tiles don't all have the same dimension. Skip the MCT step.\\n\");",
          "1823:             return OPJ_FALSE;",
          "",
          "[Removed Lines]",
          "1810:     l_samples = (OPJ_UINT32)((l_tile_comp->x1 - l_tile_comp->x0) *",
          "1811:                              (l_tile_comp->y1 - l_tile_comp->y0));",
          "1815:         if ((l_tile->comps[0].x1 - l_tile->comps[0].x0) * (l_tile->comps[0].y1 -",
          "1816:                 l_tile->comps[0].y0) < (OPJ_INT32)l_samples ||",
          "1817:                 (l_tile->comps[1].x1 - l_tile->comps[1].x0) * (l_tile->comps[1].y1 -",
          "1818:                         l_tile->comps[1].y0) < (OPJ_INT32)l_samples ||",
          "1819:                 (l_tile->comps[2].x1 - l_tile->comps[2].x0) * (l_tile->comps[2].y1 -",
          "1820:                         l_tile->comps[2].y0) < (OPJ_INT32)l_samples) {",
          "",
          "[Added Lines]",
          "1944:     if (p_tcd->whole_tile_decoding) {",
          "1948:         l_samples = (OPJ_UINT32)((",
          "1949:                                      l_tile_comp->resolutions[l_tile_comp->minimum_num_resolutions - 1].x1 -",
          "1950:                                      l_tile_comp->resolutions[l_tile_comp->minimum_num_resolutions - 1].x0) *",
          "1951:                                  (l_tile_comp->resolutions[l_tile_comp->minimum_num_resolutions - 1].y1 -",
          "1952:                                   l_tile_comp->resolutions[l_tile_comp->minimum_num_resolutions - 1].y0));",
          "1953:     } else {",
          "1954:         opj_tcd_resolution_t* l_res;",
          "1955:         l_res = l_tile_comp->resolutions + p_tcd->image->comps[0].resno_decoded;",
          "1956:         l_samples = (l_res->win_x1 - l_res->win_x0) *",
          "1957:                     (l_res->win_y1 - l_res->win_y0);",
          "1958:     }",
          "1961:         opj_tcd_resolution_t* res_comp0 = l_tile->comps[0].resolutions +",
          "1962:                                           p_tcd->image->comps[0].resno_decoded;",
          "1963:         opj_tcd_resolution_t* res_comp1 = l_tile->comps[1].resolutions +",
          "1964:                                           p_tcd->image->comps[1].resno_decoded;",
          "1965:         opj_tcd_resolution_t* res_comp2 = l_tile->comps[2].resolutions +",
          "1966:                                           p_tcd->image->comps[2].resno_decoded;",
          "1967:         OPJ_INT32 l_res_samples = (OPJ_INT32)(res_comp0->x1 - res_comp0->x0) *",
          "1968:                                   (res_comp0->y1 - res_comp0->y0);",
          "1970:         if (p_tcd->image->comps[0].resno_decoded !=",
          "1971:                 p_tcd->image->comps[1].resno_decoded ||",
          "1972:                 p_tcd->image->comps[0].resno_decoded !=",
          "1973:                 p_tcd->image->comps[2].resno_decoded ||",
          "1974:                 (res_comp1->x1 - res_comp1->x0) * (res_comp1->y1 -",
          "1975:                         res_comp1->y0) != l_res_samples ||",
          "1976:                 (res_comp2->x1 - res_comp2->x0) * (res_comp2->y1 -",
          "1977:                         res_comp2->y0) != l_res_samples) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1834:             }",
          "1836:             for (i = 0; i < l_tile->numcomps; ++i) {",
          "1838:                 ++l_tile_comp;",
          "1839:             }",
          "",
          "[Removed Lines]",
          "1837:                 l_data[i] = (OPJ_BYTE*) l_tile_comp->data;",
          "",
          "[Added Lines]",
          "1994:                 if (p_tcd->whole_tile_decoding) {",
          "1995:                     l_data[i] = (OPJ_BYTE*) l_tile_comp->data;",
          "1996:                 } else {",
          "1997:                     l_data[i] = (OPJ_BYTE*) l_tile_comp->data_win;",
          "1998:                 }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1855:             opj_free(l_data);",
          "1856:         } else {",
          "1857:             if (l_tcp->tccps->qmfbid == 1) {",
          "1862:             } else {",
          "1867:             }",
          "1868:         }",
          "1869:     } else {",
          "",
          "[Removed Lines]",
          "1858:                 opj_mct_decode(l_tile->comps[0].data,",
          "1859:                                l_tile->comps[1].data,",
          "1860:                                l_tile->comps[2].data,",
          "1861:                                l_samples);",
          "1863:                 opj_mct_decode_real((OPJ_FLOAT32*)l_tile->comps[0].data,",
          "1864:                                     (OPJ_FLOAT32*)l_tile->comps[1].data,",
          "1865:                                     (OPJ_FLOAT32*)l_tile->comps[2].data,",
          "1866:                                     l_samples);",
          "",
          "[Added Lines]",
          "2019:                 if (p_tcd->whole_tile_decoding) {",
          "2020:                     opj_mct_decode(l_tile->comps[0].data,",
          "2021:                                    l_tile->comps[1].data,",
          "2022:                                    l_tile->comps[2].data,",
          "2023:                                    l_samples);",
          "2024:                 } else {",
          "2025:                     opj_mct_decode(l_tile->comps[0].data_win,",
          "2026:                                    l_tile->comps[1].data_win,",
          "2027:                                    l_tile->comps[2].data_win,",
          "2028:                                    l_samples);",
          "2029:                 }",
          "2031:                 if (p_tcd->whole_tile_decoding) {",
          "2032:                     opj_mct_decode_real((OPJ_FLOAT32*)l_tile->comps[0].data,",
          "2033:                                         (OPJ_FLOAT32*)l_tile->comps[1].data,",
          "2034:                                         (OPJ_FLOAT32*)l_tile->comps[2].data,",
          "2035:                                         l_samples);",
          "2036:                 } else {",
          "2037:                     opj_mct_decode_real((OPJ_FLOAT32*)l_tile->comps[0].data_win,",
          "2038:                                         (OPJ_FLOAT32*)l_tile->comps[1].data_win,",
          "2039:                                         (OPJ_FLOAT32*)l_tile->comps[2].data_win,",
          "2040:                                         l_samples);",
          "2041:                 }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1897:     for (compno = 0; compno < l_tile->numcomps; compno++) {",
          "1898:         l_res = l_tile_comp->resolutions + l_img_comp->resno_decoded;",
          "1906:         if (l_img_comp->sgnd) {",
          "1907:             l_min = -(1 << (l_img_comp->prec - 1));",
          "",
          "[Removed Lines]",
          "1899:         l_width = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "1900:         l_height = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "1901:         l_stride = (OPJ_UINT32)(l_tile_comp->x1 - l_tile_comp->x0) - l_width;",
          "1903:         assert(l_height == 0 ||",
          "",
          "[Added Lines]",
          "2075:         if (!p_tcd->whole_tile_decoding) {",
          "2076:             l_width = l_res->win_x1 - l_res->win_x0;",
          "2077:             l_height = l_res->win_y1 - l_res->win_y0;",
          "2078:             l_stride = 0;",
          "2079:             l_current_ptr = l_tile_comp->data_win;",
          "2080:         } else {",
          "2081:             l_width = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "2082:             l_height = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "2083:             l_stride = (OPJ_UINT32)(",
          "2084:                            l_tile_comp->resolutions[l_tile_comp->minimum_num_resolutions - 1].x1 -",
          "2085:                            l_tile_comp->resolutions[l_tile_comp->minimum_num_resolutions - 1].x0)",
          "2086:                        - l_width;",
          "2087:             l_current_ptr = l_tile_comp->data;",
          "2089:             assert(l_height == 0 ||",
          "2091:         }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1911:             l_max = (OPJ_INT32)((1U << l_img_comp->prec) - 1);",
          "1912:         }",
          "1916:         if (l_tccp->qmfbid == 1) {",
          "1917:             for (j = 0; j < l_height; ++j) {",
          "",
          "[Removed Lines]",
          "1914:         l_current_ptr = l_tile_comp->data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1981:                 l_code_block->chunks = 00;",
          "1982:             }",
          "1984:             ++l_code_block;",
          "1985:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2170:             opj_free(l_code_block->decoded_data);",
          "2171:             l_code_block->decoded_data = NULL;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2397:     OPJ_UINT32 tcx0 = opj_uint_max(",
          "2398:                           (OPJ_UINT32)tilec->x0,",
          "2400:     OPJ_UINT32 tcy0 = opj_uint_max(",
          "2401:                           (OPJ_UINT32)tilec->y0,",
          "2403:     OPJ_UINT32 tcx1 = opj_uint_min(",
          "2404:                           (OPJ_UINT32)tilec->x1,",
          "2406:     OPJ_UINT32 tcy1 = opj_uint_min(",
          "2407:                           (OPJ_UINT32)tilec->y1,",
          "2410:     OPJ_UINT32 nb = (resno == 0) ?",
          "2411:                     tilec->numresolutions - 1 :",
          "",
          "[Removed Lines]",
          "2399:                           opj_uint_ceildiv(tcd->decoded_x0, image_comp->dx));",
          "2402:                           opj_uint_ceildiv(tcd->decoded_y0, image_comp->dy));",
          "2405:                           opj_uint_ceildiv(tcd->decoded_x1, image_comp->dx));",
          "2408:                           opj_uint_ceildiv(tcd->decoded_y1, image_comp->dy));",
          "",
          "[Added Lines]",
          "2588:                           opj_uint_ceildiv(tcd->win_x0, image_comp->dx));",
          "2591:                           opj_uint_ceildiv(tcd->win_y0, image_comp->dy));",
          "2594:                           opj_uint_ceildiv(tcd->win_x1, image_comp->dx));",
          "2597:                           opj_uint_ceildiv(tcd->win_y1, image_comp->dy));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2452: #endif",
          "2453:     return intersects;",
          "2454: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2652: static OPJ_BOOL opj_tcd_is_whole_tilecomp_decoding(opj_tcd_t *p_tcd,",
          "2653:         OPJ_UINT32 compno)",
          "2654: {",
          "2655:     opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "2656:     opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);",
          "2659:     OPJ_UINT32 tcx0 = opj_uint_max(",
          "2660:                           (OPJ_UINT32)tilec->x0,",
          "2661:                           opj_uint_ceildiv(p_tcd->win_x0, image_comp->dx));",
          "2662:     OPJ_UINT32 tcy0 = opj_uint_max(",
          "2663:                           (OPJ_UINT32)tilec->y0,",
          "2664:                           opj_uint_ceildiv(p_tcd->win_y0, image_comp->dy));",
          "2665:     OPJ_UINT32 tcx1 = opj_uint_min(",
          "2666:                           (OPJ_UINT32)tilec->x1,",
          "2667:                           opj_uint_ceildiv(p_tcd->win_x1, image_comp->dx));",
          "2668:     OPJ_UINT32 tcy1 = opj_uint_min(",
          "2669:                           (OPJ_UINT32)tilec->y1,",
          "2670:                           opj_uint_ceildiv(p_tcd->win_y1, image_comp->dy));",
          "2672:     OPJ_UINT32 shift = tilec->numresolutions - tilec->minimum_num_resolutions;",
          "2675:     return (tcx0 >= (OPJ_UINT32)tilec->x0 &&",
          "2676:             tcy0 >= (OPJ_UINT32)tilec->y0 &&",
          "2677:             tcx1 <= (OPJ_UINT32)tilec->x1 &&",
          "2678:             tcy1 <= (OPJ_UINT32)tilec->y1 &&",
          "2679:             (shift >= 32 ||",
          "2680:              (((tcx0 - (OPJ_UINT32)tilec->x0) >> shift) == 0 &&",
          "2681:               ((tcy0 - (OPJ_UINT32)tilec->y0) >> shift) == 0 &&",
          "2682:               (((OPJ_UINT32)tilec->x1 - tcx1) >> shift) == 0 &&",
          "2683:               (((OPJ_UINT32)tilec->y1 - tcy1) >> shift) == 0)));",
          "2684: }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tcd.h||src/lib/openjp2/tcd.h": [
          "File: src/lib/openjp2/tcd.h -> src/lib/openjp2/tcd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: } opj_tcd_cblk_dec_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     OPJ_INT32* decoded_data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:     OPJ_UINT32 numbands;",
          "177:     opj_tcd_band_t bands[3];",
          "178: } opj_tcd_resolution_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     OPJ_UINT32 win_x0;",
          "183:     OPJ_UINT32 win_y0;",
          "184:     OPJ_UINT32 win_x1;",
          "185:     OPJ_UINT32 win_y1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:     OPJ_UINT32 data_size_needed;",
          "201:     OPJ_UINT32 data_size;",
          "203:     OPJ_INT32 numpix;",
          "204: } opj_tcd_tilecomp_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     OPJ_INT32 *data_win;",
          "215:     OPJ_UINT32 win_x0;",
          "216:     OPJ_UINT32 win_y0;",
          "217:     OPJ_UINT32 win_x1;",
          "218:     OPJ_UINT32 win_y1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "257:     opj_thread_pool_t* thread_pool;",
          "263: } opj_tcd_t;",
          "",
          "[Removed Lines]",
          "259:     OPJ_UINT32 decoded_x0;",
          "260:     OPJ_UINT32 decoded_y0;",
          "261:     OPJ_UINT32 decoded_x1;",
          "262:     OPJ_UINT32 decoded_y1;",
          "",
          "[Added Lines]",
          "277:     OPJ_UINT32 win_x0;",
          "278:     OPJ_UINT32 win_y0;",
          "279:     OPJ_UINT32 win_x1;",
          "280:     OPJ_UINT32 win_y1;",
          "282:     OPJ_BOOL   whole_tile_decoding;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "334: OPJ_UINT32 opj_tcd_get_decoded_tile_size(opj_tcd_t *p_tcd);",
          "",
          "[Added Lines]",
          "354: OPJ_UINT32 opj_tcd_get_decoded_tile_size(opj_tcd_t *p_tcd,",
          "355:         OPJ_BOOL take_into_account_partial_decoding);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "357: Decode a tile from a buffer into a raw image",
          "358: @param tcd TCD handle",
          "363: @param src Source buffer",
          "364: @param len Length of source buffer",
          "365: @param tileno Number that identifies one of the tiles to be decoded",
          "",
          "[Removed Lines]",
          "359: @param decoded_x0 Upper left x of region to decode (in grid coordinates)",
          "360: @param decoded_y0 Upper left y of region to decode (in grid coordinates)",
          "361: @param decoded_x1 Lower right x of region to decode (in grid coordinates)",
          "362: @param decoded_y1 Lower right y of region to decode (in grid coordinates)",
          "",
          "[Added Lines]",
          "380: @param win_x0 Upper left x of region to decode (in grid coordinates)",
          "381: @param win_y0 Upper left y of region to decode (in grid coordinates)",
          "382: @param win_x1 Lower right x of region to decode (in grid coordinates)",
          "383: @param win_y1 Lower right y of region to decode (in grid coordinates)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "367: @param manager the event manager.",
          "369: OPJ_BOOL opj_tcd_decode_tile(opj_tcd_t *tcd,",
          "374:                              OPJ_BYTE *src,",
          "375:                              OPJ_UINT32 len,",
          "376:                              OPJ_UINT32 tileno,",
          "",
          "[Removed Lines]",
          "370:                              OPJ_UINT32 decoded_x0,",
          "371:                              OPJ_UINT32 decoded_y0,",
          "372:                              OPJ_UINT32 decoded_x1,",
          "373:                              OPJ_UINT32 decoded_y1,",
          "",
          "[Added Lines]",
          "391:                              OPJ_UINT32 win_x0,",
          "392:                              OPJ_UINT32 win_y0,",
          "393:                              OPJ_UINT32 win_x1,",
          "394:                              OPJ_UINT32 win_y1,",
          "",
          "---------------"
        ],
        "src/lib/openjp2/test_sparse_array.c||src/lib/openjp2/test_sparse_array.c": [
          "File: src/lib/openjp2/test_sparse_array.c -> src/lib/openjp2/test_sparse_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"opj_includes.h\"",
          "34: int main()",
          "35: {",
          "36:     OPJ_UINT32 i, j, w, h;",
          "37:     OPJ_INT32 buffer[ 99 * 101 ];",
          "38:     OPJ_BOOL ret;",
          "39:     opj_sparse_array_int32_t* sa;",
          "41:     sa = opj_sparse_array_int32_create(0, 1, 1, 1);",
          "42:     assert(sa == NULL);",
          "43:     opj_sparse_array_int32_free(sa);",
          "45:     sa = opj_sparse_array_int32_create(1, 0, 1, 1);",
          "46:     assert(sa == NULL);",
          "48:     sa = opj_sparse_array_int32_create(1, 1, 0, 1);",
          "49:     assert(sa == NULL);",
          "51:     sa = opj_sparse_array_int32_create(1, 1, 1, 0);",
          "52:     assert(sa == NULL);",
          "54:     sa = opj_sparse_array_int32_create(99, 101, ~0U, ~0U);",
          "55:     assert(sa == NULL);",
          "57:     sa = opj_sparse_array_int32_create(99, 101, 15, 17);",
          "58:     opj_sparse_array_int32_free(sa);",
          "60:     sa = opj_sparse_array_int32_create(99, 101, 15, 17);",
          "61:     ret = opj_sparse_array_int32_read(sa, 0, 0, 0, 1, buffer, 1, 1, OPJ_FALSE);",
          "62:     assert(!ret);",
          "63:     ret = opj_sparse_array_int32_read(sa, 0, 0, 1, 0, buffer, 1, 1, OPJ_FALSE);",
          "64:     assert(!ret);",
          "65:     ret = opj_sparse_array_int32_read(sa, 0, 0, 100, 1, buffer, 1, 1, OPJ_FALSE);",
          "66:     assert(!ret);",
          "67:     ret = opj_sparse_array_int32_read(sa, 0, 0, 1, 102, buffer, 1, 1, OPJ_FALSE);",
          "68:     assert(!ret);",
          "69:     ret = opj_sparse_array_int32_read(sa, 1, 0, 0, 1, buffer, 1, 1, OPJ_FALSE);",
          "70:     assert(!ret);",
          "71:     ret = opj_sparse_array_int32_read(sa, 0, 1, 1, 0, buffer, 1, 1, OPJ_FALSE);",
          "72:     assert(!ret);",
          "73:     ret = opj_sparse_array_int32_read(sa, 99, 101, 99, 101, buffer, 1, 1,",
          "74:                                       OPJ_FALSE);",
          "75:     assert(!ret);",
          "77:     buffer[0] = 1;",
          "78:     ret = opj_sparse_array_int32_read(sa, 0, 0, 1, 1, buffer, 1, 1, OPJ_FALSE);",
          "79:     assert(ret);",
          "80:     assert(buffer[0] == 0);",
          "82:     memset(buffer, 0xFF, sizeof(buffer));",
          "83:     ret = opj_sparse_array_int32_read(sa, 0, 0, 99, 101, buffer, 1, 99, OPJ_FALSE);",
          "84:     assert(ret);",
          "85:     for (i = 0; i < 99 * 101; i++) {",
          "86:         assert(buffer[i] == 0);",
          "87:     }",
          "89:     buffer[0] = 1;",
          "90:     ret = opj_sparse_array_int32_write(sa, 4, 5, 4 + 1, 5 + 1, buffer, 1, 1,",
          "91:                                        OPJ_FALSE);",
          "92:     assert(ret);",
          "93:     buffer[0] = 2;",
          "94:     ret = opj_sparse_array_int32_write(sa, 4, 5, 4 + 1, 5 + 1, buffer, 1, 1,",
          "95:                                        OPJ_FALSE);",
          "96:     assert(ret);",
          "98:     buffer[0] = 0;",
          "99:     buffer[1] = 0xFF;",
          "100:     ret = opj_sparse_array_int32_read(sa, 4, 5, 4 + 1, 5 + 1, buffer, 1, 1,",
          "101:                                       OPJ_FALSE);",
          "102:     assert(ret);",
          "103:     assert(buffer[0] == 2);",
          "104:     assert(buffer[1] == 0xFF);",
          "106:     w = 15 + 1;",
          "107:     h = 17 + 1;",
          "108:     memset(buffer, 0xFF, sizeof(buffer));",
          "109:     ret = opj_sparse_array_int32_read(sa, 2, 1, 2 + w, 1 + h, buffer, 1, w,",
          "110:                                       OPJ_FALSE);",
          "111:     assert(ret);",
          "112:     for (j = 0; j < h; j++) {",
          "113:         for (i = 0; i < w; i++) {",
          "114:             if (i == 4 - 2 && j == 5 - 1) {",
          "115:                 assert(buffer[ j * w + i ] == 2);",
          "116:             } else {",
          "117:                 assert(buffer[ j * w + i ] == 0);",
          "118:             }",
          "119:         }",
          "120:     }",
          "122:     opj_sparse_array_int32_free(sa);",
          "125:     sa = opj_sparse_array_int32_create(99, 101, 15, 17);",
          "126:     memset(buffer, 0xFF, sizeof(buffer));",
          "127:     ret = opj_sparse_array_int32_read(sa, 0, 0, 2, 1, buffer, 2, 4, OPJ_FALSE);",
          "128:     assert(ret);",
          "129:     assert(buffer[0] == 0);",
          "130:     assert(buffer[1] == -1);",
          "131:     assert(buffer[2] == 0);",
          "133:     buffer[0] = 1;",
          "134:     buffer[2] = 3;",
          "135:     ret = opj_sparse_array_int32_write(sa, 0, 0, 2, 1, buffer, 2, 4, OPJ_FALSE);",
          "136:     assert(ret);",
          "138:     memset(buffer, 0xFF, sizeof(buffer));",
          "139:     ret = opj_sparse_array_int32_read(sa, 0, 0, 2, 1, buffer, 2, 4, OPJ_FALSE);",
          "140:     assert(ret);",
          "141:     assert(buffer[0] == 1);",
          "142:     assert(buffer[1] == -1);",
          "143:     assert(buffer[2] == 3);",
          "145:     opj_sparse_array_int32_free(sa);",
          "147:     return 0;",
          "148: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a43f1bea6273e87d9e5cb6e428f560ae7a59223b",
      "candidate_info": {
        "commit_hash": "a43f1bea6273e87d9e5cb6e428f560ae7a59223b",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/a43f1bea6273e87d9e5cb6e428f560ae7a59223b",
        "files": [
          "src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tgt.c"
        ],
        "message": "Remove warnings related to empty tag-trees.\n\nDecoding some valid .jp2 files like Sentinel2 datasets leads to warnings like:\nNo incltree created.\ntgt_create tree->numnodes == 0, no tree created.\nNo imsbtree created.\ntgt_create tree->numnodes == 0, no tree created.\n\nBesides that, the image is correctly decoded. So there is no reason to emit\nthose warnings.",
        "before_after_code_files": [
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tgt.c||src/lib/openjp2/tgt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "987:       l_current_precinct->incltree = opj_tgt_init(l_current_precinct->incltree, l_current_precinct->cw, l_current_precinct->ch, manager);",
          "988:      }",
          "995:      if (! l_current_precinct->imsbtree) {",
          "996:       l_current_precinct->imsbtree = opj_tgt_create(l_current_precinct->cw, l_current_precinct->ch, manager);",
          "997:      }",
          "",
          "[Removed Lines]",
          "990:      if (! l_current_precinct->incltree)     {",
          "991:       opj_event_msg(manager, EVT_WARNING, \"No incltree created.\\n\");",
          "993:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "999:       l_current_precinct->imsbtree = opj_tgt_init(l_current_precinct->imsbtree, l_current_precinct->cw, l_current_precinct->ch, manager);",
          "1000:      }",
          "1007:      for (cblkno = 0; cblkno < l_nb_code_blocks; ++cblkno) {",
          "1008:       OPJ_INT32 cblkxstart = tlcblkxstart + (OPJ_INT32)(cblkno % l_current_precinct->cw) * (1 << cblkwidthexpn);",
          "1009:       OPJ_INT32 cblkystart = tlcblkystart + (OPJ_INT32)(cblkno / l_current_precinct->cw) * (1 << cblkheightexpn);",
          "",
          "[Removed Lines]",
          "1002:      if (! l_current_precinct->imsbtree) {",
          "1003:       opj_event_msg(manager, EVT_WARNING, \"No imsbtree created.\\n\");",
          "1005:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tgt.c||src/lib/openjp2/tgt.c": [
          "File: src/lib/openjp2/tgt.c -> src/lib/openjp2/tgt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         if (tree->numnodes == 0) {",
          "83:                 opj_free(tree);",
          "85:                 return 00;",
          "86:         }",
          "",
          "[Removed Lines]",
          "84:                 opj_event_msg(manager, EVT_WARNING, \"tgt_create tree->numnodes == 0, no tree created.\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73d1510d473b7dcfccfdee57e0e511e6791d5091",
      "candidate_info": {
        "commit_hash": "73d1510d473b7dcfccfdee57e0e511e6791d5091",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/73d1510d473b7dcfccfdee57e0e511e6791d5091",
        "files": [
          "src/lib/openjp2/t1.c",
          "src/lib/openjp2/t2.c",
          "src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tcd.h",
          "tests/nonregression/test_suite.ctest.in"
        ],
        "message": "Encoder: fix packet writing of empty sub-bands (#891, #892)\n\nThere are situations where, given a tile size, at a resolution level,\nthere are sub-bands with x0==x1 or y0==y1, that consequently don't have any\nvalid codeblocks, but the other sub-bands may be non-empty.\nGiven that we recycle the memory from one tile to another one, those\nghost codeblocks might be non-0 and thus candidate for packet inclusion.",
        "before_after_code_files": [
          "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c",
          "src/lib/openjp2/t2.c||src/lib/openjp2/t2.c",
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tcd.h||src/lib/openjp2/tcd.h",
          "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
            "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
            "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c": [
          "File: src/lib/openjp2/t1.c -> src/lib/openjp2/t1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2009:             for (bandno = 0; bandno < res->numbands; ++bandno) {",
          "2010:                 opj_tcd_band_t* OPJ_RESTRICT band = &res->bands[bandno];",
          "2013:                 for (precno = 0; precno < res->pw * res->ph; ++precno) {",
          "2014:                     opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Removed Lines]",
          "2011:                 OPJ_INT32 bandconst = 8192 * 8192 / ((OPJ_INT32) floor(band->stepsize * 8192));",
          "",
          "[Added Lines]",
          "2011:                 OPJ_INT32 bandconst;",
          "2014:                 if (opj_tcd_is_band_empty(band)) {",
          "2015:                     continue;",
          "2016:                 }",
          "2018:                 bandconst = 8192 * 8192 / ((OPJ_INT32) floor(band->stepsize * 8192));",
          "",
          "---------------"
        ],
        "src/lib/openjp2/t2.c||src/lib/openjp2/t2.c": [
          "File: src/lib/openjp2/t2.c -> src/lib/openjp2/t2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     if (!layno) {",
          "634:         band = res->bands;",
          "639:             opj_tgt_reset(prc->incltree);",
          "640:             opj_tgt_reset(prc->imsbtree);",
          "",
          "[Removed Lines]",
          "636:         for (bandno = 0; bandno < res->numbands; ++bandno) {",
          "637:             opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Added Lines]",
          "636:         for (bandno = 0; bandno < res->numbands; ++bandno, ++band) {",
          "637:             opj_tcd_precinct_t *prc;",
          "640:             if (opj_tcd_is_band_empty(band)) {",
          "641:                 continue;",
          "642:             }",
          "644:             prc = &band->precincts[precno];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:                 cblk->numpasses = 0;",
          "647:                 opj_tgt_setvalue(prc->imsbtree, cblkno, band->numbps - (OPJ_INT32)cblk->numbps);",
          "648:             }",
          "650:         }",
          "651:     }",
          "",
          "[Removed Lines]",
          "649:             ++band;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "662:     band = res->bands;",
          "666:         l_nb_blocks = prc->cw * prc->ch;",
          "667:         cblk = prc->cblks.enc;",
          "",
          "[Removed Lines]",
          "663:     for (bandno = 0; bandno < res->numbands; ++bandno)      {",
          "664:         opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Added Lines]",
          "668:     for (bandno = 0; bandno < res->numbands; ++bandno, ++band)      {",
          "669:         opj_tcd_precinct_t *prc;",
          "672:         if (opj_tcd_is_band_empty(band)) {",
          "673:             continue;",
          "674:         }",
          "676:         prc = &band->precincts[precno];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:             ++cblk;",
          "747:         }",
          "750:     }",
          "752:     if (!opj_bio_flush(bio)) {",
          "",
          "[Removed Lines]",
          "749:         ++band;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "782:     band = res->bands;",
          "786:         l_nb_blocks = prc->cw * prc->ch;",
          "787:         cblk = prc->cblks.enc;",
          "",
          "[Removed Lines]",
          "783:     for (bandno = 0; bandno < res->numbands; bandno++) {",
          "784:         opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Added Lines]",
          "792:     for (bandno = 0; bandno < res->numbands; bandno++, ++band) {",
          "793:         opj_tcd_precinct_t *prc;",
          "796:         if (opj_tcd_is_band_empty(band)) {",
          "797:             continue;",
          "798:         }",
          "800:         prc = &band->precincts[precno];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "815:             ++cblk;",
          "817:         }",
          "819:     }",
          "821:     assert(c >= dest);",
          "",
          "[Removed Lines]",
          "818:         ++band;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "904:         for (bandno = 0; bandno < l_res->numbands; ++bandno) {",
          "906:                 opj_tcd_precinct_t *l_prc = &l_band->precincts[p_pi->precno];",
          "907:                 if (!(p_pi->precno < (l_band->precincts_data_size / sizeof(",
          "908:                                           opj_tcd_precinct_t)))) {",
          "",
          "[Removed Lines]",
          "905:             if (!((l_band->x1 - l_band->x0 == 0) || (l_band->y1 - l_band->y0 == 0))) {",
          "",
          "[Added Lines]",
          "919:             if (!opj_tcd_is_band_empty(l_band)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1011:     }",
          "1013:     l_band = l_res->bands;",
          "1015:         opj_tcd_precinct_t *l_prc = &(l_band->precincts[p_pi->precno]);",
          "1019:             continue;",
          "1020:         }",
          "",
          "[Removed Lines]",
          "1014:     for (bandno = 0; bandno < l_res->numbands; ++bandno) {",
          "1017:         if ((l_band->x1 - l_band->x0 == 0) || (l_band->y1 - l_band->y0 == 0)) {",
          "1018:             ++l_band;",
          "",
          "[Added Lines]",
          "1028:     for (bandno = 0; bandno < l_res->numbands; ++bandno, ++l_band) {",
          "1031:         if (opj_tcd_is_band_empty(l_band)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1102:             ++l_cblk;",
          "1103:         }",
          "1106:     }",
          "1108:     if (!opj_bio_inalign(l_bio)) {",
          "",
          "[Removed Lines]",
          "1105:         ++l_band;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:             for (bandno = 0; bandno < res->numbands; bandno++) {",
          "246:                 opj_tcd_band_t *band = &res->bands[bandno];",
          "248:                 for (precno = 0; precno < res->pw * res->ph; precno++) {",
          "249:                     opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:                 if (opj_tcd_is_band_empty(band)) {",
          "250:                     continue;",
          "251:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:             for (bandno = 0; bandno < res->numbands; bandno++) {",
          "348:                 opj_tcd_band_t *band = &res->bands[bandno];",
          "350:                 for (precno = 0; precno < res->pw * res->ph; precno++) {",
          "351:                     opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:                 if (opj_tcd_is_band_empty(band)) {",
          "357:                     continue;",
          "358:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:             for (bandno = 0; bandno < res->numbands; bandno++) {",
          "448:                 opj_tcd_band_t *band = &res->bands[bandno];",
          "450:                 for (precno = 0; precno < res->pw * res->ph; precno++) {",
          "451:                     opj_tcd_precinct_t *prc = &band->precincts[precno];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:                 if (opj_tcd_is_band_empty(band)) {",
          "462:                     continue;",
          "463:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "906:             cblkheightexpn = opj_uint_min(l_tccp->cblkh, cbgheightexpn);",
          "907:             l_band = l_res->bands;",
          "910:                 OPJ_INT32 numbps;",
          "",
          "[Removed Lines]",
          "909:             for (bandno = 0; bandno < l_res->numbands; ++bandno) {",
          "",
          "[Added Lines]",
          "924:             for (bandno = 0; bandno < l_res->numbands; ++bandno, ++l_band, ++l_step_size) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "933:                                                        l_level_no), (OPJ_INT32)(l_level_no + 1));",
          "934:                 }",
          "937:                 l_gain = (*l_gain_ptr)(l_band->bandno);",
          "938:                 numbps = (OPJ_INT32)(l_image_comp->prec + l_gain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951:                 if (isEncoder) {",
          "953:                     if (opj_tcd_is_band_empty(l_band)) {",
          "957:                         continue;",
          "958:                     }",
          "959:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1099:                     }",
          "1100:                     ++l_current_precinct;",
          "1105:             ++l_res;",
          "",
          "[Removed Lines]",
          "1102:                 ++l_band;",
          "1103:                 ++l_step_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2281:     return OPJ_TRUE;",
          "2282: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2307: OPJ_BOOL opj_tcd_is_band_empty(opj_tcd_band_t* band)",
          "2308: {",
          "2309:     return (band->x1 - band->x0 == 0) || (band->y1 - band->y0 == 0);",
          "2310: }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tcd.h||src/lib/openjp2/tcd.h": [
          "File: src/lib/openjp2/tcd.h -> src/lib/openjp2/tcd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: OPJ_BOOL opj_alloc_tile_component_data(opj_tcd_tilecomp_t *l_tilec);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: OPJ_BOOL opj_tcd_is_band_empty(opj_tcd_band_t* band);",
          "",
          "---------------"
        ],
        "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
          "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: opj_compress -i @INPUT_NR_PATH@/Bretagne2.ppm -o @TEMP_PATH@/Bretagne2_bypass_termall_pterm.j2k -M 21",
          "165: opj_compress -i @INPUT_NR_PATH@/Bretagne2.ppm -o @TEMP_PATH@/Bretagne2_bypass_vsc_reset_termall_pterm_segsym.j2k -M 63",
          "167: # DECODER TEST SUITE",
          "168: opj_decompress -i  @INPUT_NR_PATH@/Bretagne2.j2k -o @TEMP_PATH@/Bretagne2.j2k.pgx",
          "169: opj_decompress -i  @INPUT_NR_PATH@/_00042.j2k -o @TEMP_PATH@/_00042.j2k.pgx",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: # Test fix for #891/#892 (tiles smaller than decomposition levels)",
          "168: opj_compress -i @INPUT_NR_PATH@/Bretagne2.ppm -o @TEMP_PATH@/Bretagne2_empty_band.j2k -t 2591,1943 -n 2",
          "169: # Same rate as Bretagne2_4.j2k",
          "170: opj_compress -i @INPUT_NR_PATH@/Bretagne2.ppm -o @TEMP_PATH@/Bretagne2_empty_band_r800.j2k -t 2591,1943 -n 2 -r 800",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b75acb3bb9e0fdf0f167f0a3331470c0a6e5ff3e",
      "candidate_info": {
        "commit_hash": "b75acb3bb9e0fdf0f167f0a3331470c0a6e5ff3e",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/b75acb3bb9e0fdf0f167f0a3331470c0a6e5ff3e",
        "files": [
          "src/lib/openjp2/tcd.c",
          "tests/compare_dump_files.c",
          "tests/nonregression/test_suite.ctest.in"
        ],
        "message": "Add sanity check for tile coordinates (#823)\n\nCoordinates are casted from OPJ_UINT32 to OPJ_INT32\nAdd sanity check for negative values and upper bound becoming lower\nthan lower bound.\nSee also\nhttps://pdfium.googlesource.com/pdfium/+/b6befb2ed2485a3805cddea86dc7574510178ea9",
        "before_after_code_files": [
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
          "tests/compare_dump_files.c||tests/compare_dump_files.c",
          "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
            "tests/compare_dump_files.c||tests/compare_dump_files.c",
            "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
            "tests/compare_dump_files.c||tests/compare_dump_files.c",
            "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "697:  l_tile->x0 = (OPJ_INT32)opj_uint_max(l_tx0, l_image->x0);",
          "698:  l_tile->x1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_tx0, l_cp->tdx), l_image->x1);",
          "700:  l_tile->y0 = (OPJ_INT32)opj_uint_max(l_ty0, l_image->y0);",
          "701:  l_tile->y1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_ty0, l_cp->tdy), l_image->y1);",
          "704:  if (l_tccp->numresolutions == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700:  if ((l_tile->x0 < 0) || (l_tile->x1 <= l_tile->x0)) {",
          "701:   opj_event_msg(manager, EVT_ERROR, \"Tile X coordinates are not supported\\n\");",
          "702:   return OPJ_FALSE;",
          "703:  }",
          "708:  if ((l_tile->y0 < 0) || (l_tile->y1 <= l_tile->y0)) {",
          "709:   opj_event_msg(manager, EVT_ERROR, \"Tile Y coordinates are not supported\\n\");",
          "710:   return OPJ_FALSE;",
          "711:  }",
          "",
          "---------------"
        ],
        "tests/compare_dump_files.c||tests/compare_dump_files.c": [
          "File: tests/compare_dump_files.c -> tests/compare_dump_files.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   test_cmp_parameters inParam;",
          "119:   FILE *fbase=NULL, *ftest=NULL;",
          "120:   int same = 0;",
          "126:   if( parse_cmdline_cmp(argc, argv, &inParam) == 1 )",
          "127:     {",
          "",
          "[Removed Lines]",
          "121:   char lbase[256];",
          "122:   char strbase[256];",
          "123:   char ltest[256];",
          "124:   char strtest[256];",
          "",
          "[Added Lines]",
          "121:   char lbase[512];",
          "122:   char strbase[512];",
          "123:   char ltest[512];",
          "124:   char strtest[512];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   while (fgets(lbase, sizeof(lbase), fbase) && fgets(ltest,sizeof(ltest),ftest))",
          "156:     {",
          "160:     if( nbase != 1 || ntest != 1 )",
          "161:       {",
          "162:       fprintf(stderr, \"could not parse line from files\\n\" );",
          "",
          "[Removed Lines]",
          "157:     int nbase = sscanf(lbase, \"%255[^\\r\\n]\", strbase);",
          "158:     int ntest = sscanf(ltest, \"%255[^\\r\\n]\", strtest);",
          "159:     assert( nbase != 255 && ntest != 255 );",
          "",
          "[Added Lines]",
          "157:     int nbase = sscanf(lbase, \"%511[^\\r\\n]\", strbase);",
          "158:     int ntest = sscanf(ltest, \"%511[^\\r\\n]\", strtest);",
          "159:     assert( nbase != 511 && ntest != 511 );",
          "",
          "---------------"
        ],
        "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
          "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "566: !opj_decompress -i @INPUT_NR_PATH@/issue775-2.j2k -o @TEMP_PATH@/issue775-2.png",
          "567: # issue 818",
          "568: opj_decompress -i @INPUT_NR_PATH@/issue818.jp2 -o @TEMP_PATH@/issue818.png",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569: # issue 823 (yes, not a typo, test image is issue822)",
          "570: !opj_decompress -i @INPUT_NR_PATH@/issue822.jp2 -o @TEMP_PATH@/issue822.png",
          "",
          "---------------"
        ]
      }
    }
  ]
}