{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76a1fce53b5ff2b97d166eda9cae9ba570551dcb",
      "candidate_info": {
        "commit_hash": "76a1fce53b5ff2b97d166eda9cae9ba570551dcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76a1fce53b5ff2b97d166eda9cae9ba570551dcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c"
        ],
        "message": "In the TCL interface, add the ability to change the SQLITE_DBCONFIG_TRUSTED_SCHEMA setting using the \"db config\" method.\n\nFossilOrigin-Name: 1accfa8cf05856b03cecab7a2cd0c0337842a0003cfbec207b6f0acdd93e8f15",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c8ce526adb60b8061e55151599ca8b11f1ec2e968d3bacc73a2a249e9e95ee1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2341:       const char *zName;",
          "2342:       int op;",
          "2343:     } aDbConfig[] = {",
          "2344:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "2345:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "2346:         { \"enable_view\",        SQLITE_DBCONFIG_ENABLE_VIEW           },",
          "2347:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "2348:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "2349:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "2352:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "2354:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "2358:     };",
          "2359:     Tcl_Obj *pResult;",
          "2360:     int ii;",
          "",
          "[Removed Lines]",
          "2350:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "2351:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "2353:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "2355:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "2356:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "2357:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "[Added Lines]",
          "2344:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "2345:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "2346:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "2348:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "2352:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "2353:         { \"legacy_file_format\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    },",
          "2357:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "2358:         { \"trusted_schema\",     SQLITE_DBCONFIG_TRUSTED_SCHEMA        },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "262efe4a43c587b32be358c50a1a7d9765ead28a",
      "candidate_info": {
        "commit_hash": "262efe4a43c587b32be358c50a1a7d9765ead28a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/262efe4a43c587b32be358c50a1a7d9765ead28a",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix an instance of an undefined behaviour (a left-shift of a 64-bit unsigned integer by a value greater than 64) that could occur in fts3.\n\nFossilOrigin-Name: e1f12978b53683114ab0ef0e84a14dd4fabc72750b214aac19cd9da22a582a27",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1154c39ba0f8caec70d330e6d5bec745c93ec9a7eafedb3e3730fadc8b8277c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:   {[a70] [a71] [a72]}",
          "588: }",
          "590: set sqlite_fts3_enable_parentheses 0",
          "591: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591: #-------------------------------------------------------------------------",
          "592: # Request a snippet from a query with more than 64 phrases.",
          "593: #",
          "594: reset_db",
          "595: do_execsql_test 6.0 {",
          "596:   CREATE VIRTUAL TABLE f USING fts3(b);",
          "597:   INSERT INTO f VALUES ( x'746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218');",
          "598: }",
          "600: do_execsql_test 6.1 {",
          "601:   SELECT  length(snippet(f))>0  FROM f WHERE b MATCH x'1065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a010f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c2a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e0f42';",
          "602: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75b5f22c01373bbc83bdf2f1407653ecb066db29",
      "candidate_info": {
        "commit_hash": "75b5f22c01373bbc83bdf2f1407653ecb066db29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75b5f22c01373bbc83bdf2f1407653ecb066db29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/util.c",
          "test/cse.test",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db",
          "test/select4.test"
        ],
        "message": "Merge recent trunk enhancements into the bytecode-function branch.\n\nFossilOrigin-Name: 7e6576ec00fde277c5c7abac264f7ec7e531de00c4e112bf733a07fe703fadcc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "test/cse.test||test/cse.test",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/select4.test||test/select4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 348c40136c8ec20f36ccdd4c8a6d4ec2d8274328b86b25b385813e3aae31ea8b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:   for(i=0; i<pNew->nCol; i++){",
          "470:     Column *pCol = &pNew->aCol[i];",
          "471:     pCol->zName = sqlite3DbStrDup(db, pCol->zName);",
          "472:     pCol->zColl = 0;",
          "473:     pCol->pDflt = 0;",
          "474:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:     pCol->hName = sqlite3StrIHash(pCol->zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:   RenameToken *pNew;",
          "698:   assert( pPtr || pParse->db->mallocFailed );",
          "699:   renameTokenCheckAll(pParse, pPtr);",
          "701:     pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "702:     if( pNew ){",
          "703:       pNew->p = pPtr;",
          "",
          "[Removed Lines]",
          "700:   if( pParse->eParseMode!=PARSE_MODE_UNMAP ){",
          "",
          "[Added Lines]",
          "701:   if( ALWAYS(pParse->eParseMode!=PARSE_MODE_UNMAP) ){",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:   assert( pTable!=0 );",
          "591:   if( (pCol = pTable->aCol)!=0 ){",
          "592:     for(i=0; i<pTable->nCol; i++, pCol++){",
          "593:       sqlite3DbFree(db, pCol->zName);",
          "594:       sqlite3ExprDelete(db, pCol->pDflt);",
          "595:       sqlite3DbFree(db, pCol->zColl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:       assert( pCol->zName==0 || pCol->hName==sqlite3StrIHash(pCol->zName) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1238:   pCol = &p->aCol[p->nCol];",
          "1239:   memset(pCol, 0, sizeof(p->aCol[0]));",
          "1240:   pCol->zName = z;",
          "1241:   sqlite3ColumnPropertiesFromName(p, pCol);",
          "1243:   if( pType->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:   pCol->hName = sqlite3StrIHash(z);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788: ){",
          "1789:   assert( pList!=0 || pParse->db->mallocFailed!=0 );",
          "1790:   if( pList ){",
          "1791:     struct ExprList_item *pItem;",
          "1792:     assert( pList->nExpr>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790:   assert( pParse->eParseMode!=PARSE_MODE_UNMAP || dequote==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1794:     assert( pItem->zEName==0 );",
          "1795:     assert( pItem->eEName==ENAME_NAME );",
          "1796:     pItem->zEName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1800:     }",
          "1801:   }",
          "1802: }",
          "",
          "[Removed Lines]",
          "1797:     if( dequote ) sqlite3Dequote(pItem->zEName);",
          "1798:     if( IN_RENAME_OBJECT ){",
          "1799:       sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "",
          "[Added Lines]",
          "1798:     if( dequote ){",
          "1802:       sqlite3Dequote(pItem->zEName);",
          "1803:       if( IN_RENAME_OBJECT ){",
          "1804:         sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "1805:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3185:   assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "3186:   pLeft = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3190:   u8 okConstFactor = pParse->okConstFactor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3229:   rLhsOrig = exprCodeVector(pParse, pLeft, &iDummy);",
          "3231:   if( i==nVector ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3239:   assert( pParse->okConstFactor==okConstFactor );",
          "3240:   pParse->okConstFactor = 0;",
          "3242:   pParse->okConstFactor = okConstFactor;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3832:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3833:           assert( SQLITE_AFF_BLOB=='A' );",
          "3834:           assert( SQLITE_AFF_TEXT=='B' );",
          "3839:           sqlite3VdbeAddOp4(v, OP_Affinity, iReg, 1, 0,",
          "3840:                             &zAff[(aff-'B')*2], P4_STATIC);",
          "3841:         }",
          "",
          "[Removed Lines]",
          "3835:           if( iReg!=target ){",
          "3836:             sqlite3VdbeAddOp2(v, OP_SCopy, iReg, target);",
          "3837:             iReg = target;",
          "3838:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ){",
          "141:   int n;",
          "142:   const char *zSpan;",
          "144:   zSpan = pItem->zEName;",
          "145:   for(n=0; ALWAYS(zSpan[n]) && zSpan[n]!='.'; n++){}",
          "146:   if( zDb && (sqlite3StrNICmp(zSpan, zDb, n)!=0 || zDb[n]!=0) ){",
          "",
          "[Removed Lines]",
          "143:   if( NEVER(pItem->eEName!=ENAME_TAB) ) return 0;",
          "",
          "[Added Lines]",
          "143:   if( pItem->eEName!=ENAME_TAB ) return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:     if( pSrcList ){",
          "296:       for(i=0, pItem=pSrcList->a; i<pSrcList->nSrc; i++, pItem++){",
          "297:         pTab = pItem->pTab;",
          "298:         assert( pTab!=0 && pTab->zName!=0 );",
          "299:         assert( pTab->nCol>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:         u8 hCol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:         if( 0==(cntTab++) ){",
          "328:           pMatch = pItem;",
          "329:         }",
          "330:         for(j=0, pCol=pTab->aCol; j<pTab->nCol; j++, pCol++){",
          "",
          "[Removed Lines]",
          "331:           if( sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "[Added Lines]",
          "331:         hCol = sqlite3StrIHash(zCol);",
          "333:           if( pCol->hName==hCol && sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:       if( pTab ){",
          "391:         int iCol;",
          "392:         pSchema = pTab->pSchema;",
          "393:         cntTab++;",
          "394:         for(iCol=0, pCol=pTab->aCol; iCol<pTab->nCol; iCol++, pCol++){",
          "396:             if( iCol==pTab->iPKey ){",
          "397:               iCol = -1;",
          "398:             }",
          "",
          "[Removed Lines]",
          "395:           if( sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "[Added Lines]",
          "394:         u8 hCol = sqlite3StrIHash(zCol);",
          "398:           if( pCol->hName==hCol && sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1829: ){",
          "1830:   int i;",
          "1834:     }",
          "1835:   }",
          "1836:   return WRC_Continue;",
          "1837: }",
          "",
          "[Removed Lines]",
          "1831:   if( pList ){",
          "1832:     for(i=0; i<pList->nExpr; i++){",
          "1833:       if( sqlite3ResolveExprNames(pNC, pList->a[i].pExpr) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "1834:   int savedHasAgg = 0;",
          "1835:   Walker w;",
          "1836:   if( pList==0 ) return WRC_Continue;",
          "1837:   w.pParse = pNC->pParse;",
          "1838:   w.xExprCallback = resolveExprStep;",
          "1839:   w.xSelectCallback = resolveSelectStep;",
          "1840:   w.xSelectCallback2 = 0;",
          "1841:   w.u.pNC = pNC;",
          "1842:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1843:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1844:   for(i=0; i<pList->nExpr; i++){",
          "1845:     Expr *pExpr = pList->a[i].pExpr;",
          "1846:     if( pExpr==0 ) continue;",
          "1847: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1848:     w.pParse->nHeight += pExpr->nHeight;",
          "1849:     if( sqlite3ExprCheckHeight(w.pParse, w.pParse->nHeight) ){",
          "1850:       return WRC_Abort;",
          "1851:     }",
          "1852: #endif",
          "1853:     sqlite3WalkExpr(&w, pExpr);",
          "1854: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1855:     w.pParse->nHeight -= pExpr->nHeight;",
          "1856: #endif",
          "1857:     assert( EP_Agg==NC_HasAgg );",
          "1858:     assert( EP_Win==NC_HasWin );",
          "1859:     testcase( pNC->ncFlags & NC_HasAgg );",
          "1860:     testcase( pNC->ncFlags & NC_HasWin );",
          "1861:     if( pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin) ){",
          "1862:       ExprSetProperty(pExpr, pNC->ncFlags & (NC_HasAgg|NC_HasWin) );",
          "1863:       savedHasAgg |= pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1864:       pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1866:     if( pNC->nErr>0 || w.pParse->nErr>0 ) return WRC_Abort;",
          "1868:   pNC->ncFlags |= savedHasAgg;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2023:       if( cnt>3 ) sqlite3_randomness(sizeof(cnt), &cnt);",
          "2024:     }",
          "2025:     pCol->zName = zName;",
          "2026:     sqlite3ColumnPropertiesFromName(0, pCol);",
          "2027:     if( zName && sqlite3HashInsert(&ht, zName, pCol)==pCol ){",
          "2028:       sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2026:     pCol->hName = sqlite3StrIHash(zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3476:   ){",
          "3477:     pExpr->iRightJoinTable = pSubst->iNewTable;",
          "3478:   }",
          "3480:     if( pExpr->iColumn<0 ){",
          "3481:       pExpr->op = TK_NULL;",
          "3482:     }else{",
          "",
          "[Removed Lines]",
          "3479:   if( pExpr->op==TK_COLUMN && pExpr->iTable==pSubst->iTable ){",
          "",
          "[Added Lines]",
          "3480:   if( pExpr->op==TK_COLUMN",
          "3481:    && pExpr->iTable==pSubst->iTable",
          "3482:    && !ExprHasProperty(pExpr, EP_FixedCol)",
          "3483:   ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4567:   const char*",
          "4568: );",
          "4569: Bitmask sqlite3ExprColUsed(Expr*);",
          "4570: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4571: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4572: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4571: u8 sqlite3StrIHash(const char*);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   return N<0 ? 0 : UpperToLower[*a] - UpperToLower[*b];",
          "318: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: u8 sqlite3StrIHash(const char *z){",
          "324:   u8 h = 0;",
          "325:   if( z==0 ) return 0;",
          "326:   while( z[0] ){",
          "327:     h += UpperToLower[(unsigned char)z[0]];",
          "328:     z++;",
          "329:   }",
          "330:   return h;",
          "331: }",
          "",
          "---------------"
        ],
        "test/cse.test||test/cse.test": [
          "File: test/cse.test -> test/cse.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: set testdir [file dirname $argv0]",
          "20: source $testdir/tester.tcl",
          "22: do_test cse-1.1 {",
          "23:   execsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: set testprefix cse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   } $answer",
          "158: }",
          "160: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #-------------------------------------------------------------------------",
          "162: # Ticket fd1bda016d1a",
          "163: #",
          "164: reset_db",
          "165: do_execsql_test 3.0 {",
          "166:   CREATE TABLE t1(a TEXT, b);",
          "167:   INSERT INTO t1 VALUES('hello', 0);",
          "168:   INSERT INTO t1 VALUES('world', 0);",
          "170:   CREATE TABLE t2(x TEXT);",
          "171:   INSERT INTO t2 VALUES('hello');",
          "172:   INSERT INTO t2 VALUES('world');",
          "174:   CREATE TABLE t3(y);",
          "175:   INSERT INTO t3 VALUES(1000);",
          "176: } {}",
          "178: do_execsql_test 3.1 {",
          "179:   SELECT 1000 = y FROM t3",
          "180: } {1}",
          "182: do_execsql_test 3.2 {",
          "183:   SELECT 1000 IN (SELECT x FROM t2), 1000 = y FROM t3",
          "184: } {0 1}",
          "186: do_execsql_test 3.3 {",
          "187:   SELECT 0 IN (SELECT a), (SELECT a LIMIT 0) FROM t1",
          "188: } {0 {} 0 {}}",
          "190: do_execsql_test 3.4 {",
          "191:   SELECT 0 IN (SELECT a) FROM t1 WHERE a = 'hello' OR (SELECT a LIMIT 0);",
          "192: } {0}",
          "194: do_execsql_test 3.5 {",
          "195:   CREATE TABLE v0(v1 VARCHAR0);",
          "196:   INSERT INTO v0 VALUES(2), (3);",
          "197:   SELECT 0 IN(SELECT v1) FROM v0 WHERE v1 = 2 OR(SELECT v1 LIMIT 0);",
          "198: } {0}",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:   if( depthLimit>0 ){",
          "895:     sqlite3_limit(cx.db, SQLITE_LIMIT_EXPR_DEPTH, depthLimit);",
          "896:   }",
          "897:   sqlite3_hard_heap_limit64(heapLimit);",
          "899:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:   sqlite3_limit(cx.db, SQLITE_LIMIT_LIKE_PATTERN_LENGTH, 100);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1423: \"  -q|--quiet           Reduced output\\n\"",
          "1424: \"  --rebuild            Rebuild and vacuum the database file\\n\"",
          "1425: \"  --result-trace       Show the results of each SQL command\\n\"",
          "1426: \"  --sqlid N            Use only SQL where sqlid=N\\n\"",
          "1427: \"  --timeout N          Abort if any single test needs more than N seconds\\n\"",
          "1428: \"  -v|--verbose         Increased output.  Repeat for more output.\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427: \"  --spinner            Use a spinner to show progress\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1575:       if( strcmp(z,\"result-trace\")==0 ){",
          "1576:         runFlags |= SQL_OUTPUT;",
          "1577:       }else",
          "1578:       if( strcmp(z,\"sqlid\")==0 ){",
          "1579:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1580:         onlySqlid = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1581:       if( strcmp(z,\"spinner\")==0 ){",
          "1582:         bSpinner = 1;",
          "1583:       }else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1874:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1875:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1876:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1878:           printf(\"%s\\n\", g.zTestName);",
          "1879:           fflush(stdout);",
          "1880:         }else if( !quietFlag ){",
          "",
          "[Removed Lines]",
          "1873:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1877:         if( verboseFlag ){",
          "",
          "[Added Lines]",
          "1879:     if( !verboseFlag && !quietFlag && !bSpinner ) printf(\"%s:\", zDbName);",
          "1883:         if( bSpinner ){",
          "1884:           int nTotal =g.nSql;",
          "1885:           int idx = pSql->seq;",
          "1886:           printf(\"\\r%s: %d/%d   \", zDbName, idx, nTotal);",
          "1887:           fflush(stdout);",
          "1888:         }else if( verboseFlag ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1898:         const char *zVfs = \"inmem\";",
          "1899:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d,dbid=%d\",",
          "1900:                          pSql->id, pDb->id);",
          "1902:           printf(\"%s\\n\", g.zTestName);",
          "1903:           fflush(stdout);",
          "1904:         }else if( !quietFlag ){",
          "",
          "[Removed Lines]",
          "1901:         if( verboseFlag ){",
          "",
          "[Added Lines]",
          "1912:         if( bSpinner ){",
          "1913:           int nTotal = g.nDb*g.nSql;",
          "1914:           int idx = pSql->seq*g.nDb + pDb->id - 1;",
          "1915:           printf(\"\\r%s: %d/%d   \", zDbName, idx, nTotal);",
          "1916:           fflush(stdout);",
          "1917:         }else if( verboseFlag ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1977:         }",
          "1978:       }",
          "1979:     }",
          "1981:       printf(\" 100%% - %d tests\\n\", g.nDb*g.nSql);",
          "1982:     }",
          "",
          "[Removed Lines]",
          "1980:     if( !quietFlag && !verboseFlag ){",
          "",
          "[Added Lines]",
          "1996:     if( bSpinner ){",
          "1997:       printf(\"\\n\");",
          "1998:     }else if( !quietFlag && !verboseFlag ){",
          "",
          "---------------"
        ],
        "test/select4.test||test/select4.test": [
          "File: test/select4.test -> test/select4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1005:   ORDER BY +x;",
          "1006: } {1 {LIMIT clause should come after UNION not before}}",
          "1010: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008: # 2020-04-03 ticket 51166be0159fd2ce from Yong Heng.",
          "1009: # Adverse interaction between the constant propagation and push-down",
          "1010: # optimizations.",
          "1011: #",
          "1012: reset_db",
          "1013: do_execsql_test select4-18.1 {",
          "1014:   CREATE VIEW v0(v0) AS WITH v0 AS(SELECT 0 v0) SELECT(SELECT min(v0) OVER()) FROM v0 GROUP BY v0;",
          "1015:   SELECT *FROM v0 v1 JOIN v0 USING(v0) WHERE datetime(v0) = (v0.v0)AND v0 = 10;",
          "1016: } {}",
          "1017: do_execsql_test select4-18.2 {",
          "1018:   CREATE VIEW t1(aa) AS",
          "1019:      WITH t2(bb) AS (SELECT 123)",
          "1020:      SELECT (SELECT min(bb) OVER()) FROM t2 GROUP BY bb;",
          "1021:   SELECT * FROM t1;",
          "1022: } {123}",
          "1023: do_execsql_test select4-18.3 {",
          "1024:   SELECT * FROM t1 AS z1 JOIN t1 AS z2 USING(aa)",
          "1025:    WHERE abs(z1.aa)=z2.aa AND z1.aa=123;",
          "1026: } {123}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "988af251d86f57e57b77f0bf3e651bab2ff9f343",
      "candidate_info": {
        "commit_hash": "988af251d86f57e57b77f0bf3e651bab2ff9f343",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/988af251d86f57e57b77f0bf3e651bab2ff9f343",
        "files": [
          "ext/misc/series.c",
          "ext/misc/spellfix.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix the series.c and spellfix.c extensions to use SQLITE_VTAB_INNOCUOUS correctly.  Fix the documentation on sqlite3_vtab_config() to take into account SQLITE_VTAB_INNOCUOUS and SQLITE_VTAB_DIRECTONLY.\n\nFossilOrigin-Name: 9265cb7f026c0e959bd034d4cd94fe597744e0dd455d0a20736ee5f5bee880c8",
        "before_after_code_files": [
          "ext/misc/series.c||ext/misc/series.c",
          "ext/misc/spellfix.c||ext/misc/spellfix.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/series.c||ext/misc/series.c": [
          "File: ext/misc/series.c -> ext/misc/series.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     pNew = *ppVtab = sqlite3_malloc( sizeof(*pNew) );",
          "127:     if( pNew==0 ) return SQLITE_NOMEM;",
          "128:     memset(pNew, 0, sizeof(*pNew));",
          "130:   }",
          "131:   return rc;",
          "132: }",
          "",
          "[Removed Lines]",
          "129:     sqlite3_vtab_config(db, SQLITE_INNOCUOUS);",
          "",
          "[Added Lines]",
          "129:     sqlite3_vtab_config(db, SQLITE_VTAB_INNOCUOUS);",
          "",
          "---------------"
        ],
        "ext/misc/spellfix.c||ext/misc/spellfix.c": [
          "File: ext/misc/spellfix.c -> ext/misc/spellfix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2069:     if( pNew->zTableName==0 ){",
          "2070:       rc = SQLITE_NOMEM;",
          "2071:     }else{",
          "2073:       rc = sqlite3_declare_vtab(db,",
          "2074:            \"CREATE TABLE x(word,rank,distance,langid, \"",
          "2075:            \"score, matchlen, phonehash HIDDEN, \"",
          "",
          "[Removed Lines]",
          "2072:       sqlite3_vtab_config(db, SQLITE_INNOCUOUS);",
          "",
          "[Added Lines]",
          "2072:       sqlite3_vtab_config(db, SQLITE_VTAB_INNOCUOUS);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cffcf12f03906debeac6a974534b4439a4952cc72767e3bcb8e6d91da944d69f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "0dfa5255bc012a1991809e23ad2ac1a4089e1261",
      "candidate_info": {
        "commit_hash": "0dfa5255bc012a1991809e23ad2ac1a4089e1261",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0dfa5255bc012a1991809e23ad2ac1a4089e1261",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/fts3atoken.test",
          "test/func.test",
          "test/trustschema1.test"
        ],
        "message": "Check for whether or not it is safe to use non-innocuous functions as the function is being coded, not when its name is resolved.\n\nFossilOrigin-Name: 1da802d54b689a462e1fe899c6ffa08ef14d34f36728b14b055b5a76b1edc274",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/fts3atoken.test||test/fts3atoken.test",
          "test/func.test||test/func.test",
          "test/trustschema1.test||test/trustschema1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0138652b6c2f21fd67e59a23a396a5b9d6a16ee9b44701cddfc49b23fddfce5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:   return pNew;",
          "974: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987: void sqlite3ExprFunctionUsable(",
          "991: ){",
          "992:   assert( !IN_RENAME_OBJECT );",
          "993:   if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0",
          "994:    && ExprHasProperty(pExpr, EP_FromDDL)",
          "995:   ){",
          "996:     if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "997:      || (pParse->db->flags & SQLITE_TrustedSchema)==0",
          "998:     ){",
          "1006:       sqlite3ErrorMsg(pParse, \"unsafe use of %s()\", pDef->zName);",
          "1007:     }",
          "1008:   }",
          "1009: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4073:         break;",
          "4074:       }",
          "4075:       if( pDef->funcFlags & SQLITE_FUNC_INLINE ){",
          "4076:         return exprCodeInlineFunction(pParse, pFarg,",
          "4077:              SQLITE_PTR_TO_INT(pDef->pUserData), target);",
          "4078:       }",
          "4080:       for(i=0; i<nFarg; i++){",
          "4081:         if( i<32 && sqlite3ExprIsConstant(pFarg->a[i].pExpr) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4111:         assert( (pDef->funcFlags & SQLITE_FUNC_UNSAFE)==0 );",
          "4112:         assert( (pDef->funcFlags & SQLITE_FUNC_DIRECT)==0 );",
          "4116:       sqlite3ExprFunctionUsable(pParse, pExpr, pDef);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5740:             }else{",
          "5741:               pItem->iDistinct = -1;",
          "5742:             }",
          "5743:           }",
          "5744:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5781:             sqlite3ExprFunctionUsable(pParse, pExpr, pItem->pFunc);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:         }else{",
          "878:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "879:         }",
          "880:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "881:          && pParse->nested==0",
          "882:          && (pParse->db->mDbFlags & DBFLAG_InternalFunc)==0",
          "883:         ){",
          "886:           no_such_func = 1;",
          "887:           pDef = 0;",
          "906:         }",
          "907:       }",
          "",
          "[Removed Lines]",
          "888:         }else",
          "889:         if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0",
          "890:          && ExprHasProperty(pExpr, EP_FromDDL)",
          "891:          && !IN_RENAME_OBJECT",
          "892:         ){",
          "893:           if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "894:            || (pParse->db->flags & SQLITE_TrustedSchema)==0",
          "895:           ){",
          "903:             sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "904:                             pDef->zName);",
          "905:           }",
          "",
          "[Added Lines]",
          "879:           if( pExpr->op2 ) ExprSetProperty(pExpr, EP_FromDDL);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4056: Expr *sqlite3ExprAnd(Parse*,Expr*, Expr*);",
          "4057: Expr *sqlite3ExprSimplifiedAndOr(Expr*);",
          "4058: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "4059: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "4060: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "4061: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059: void sqlite3ExprFunctionUsable(Parse*,Expr*,FuncDef*);",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: } {0 {}}",
          "139: do_catchsql_test fts3atoken-1.11 {",
          "140:   SELECT * FROM v110;",
          "142: do_catchsql_test fts3atoken-1.12 {",
          "143:   CREATE TABLE t110(a,b);",
          "144:   CREATE TRIGGER r110 AFTER INSERT ON t110 BEGIN",
          "",
          "[Removed Lines]",
          "141: } {1 {fts3_tokenizer() prohibited in triggers and views}}",
          "",
          "[Added Lines]",
          "141: } {1 {unsafe use of fts3_tokenizer()}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: } {0 {}}",
          "148: do_catchsql_test fts3atoken-1.13 {",
          "149:   INSERT INTO t110(a,b) VALUES(1,2);",
          "151: do_catchsql_test fts3atoken-1.14 {",
          "152:   SELECT * FROM t110;",
          "153: } {0 {}}",
          "",
          "[Removed Lines]",
          "150: } {1 {fts3_tokenizer() prohibited in triggers and views}}",
          "",
          "[Added Lines]",
          "150: } {1 {unsafe use of fts3_tokenizer()}}",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1430: do_catchsql_test func-33.2 {",
          "1431:   CREATE VIEW v33(y) AS SELECT testdirectonly(15);",
          "1432:   SELECT * FROM v33;",
          "1434: do_execsql_test func-33.3 {",
          "1435:   SELECT * FROM (SELECT testdirectonly(15)) AS v33;",
          "1436: } {30}",
          "",
          "[Removed Lines]",
          "1433: } {1 {testdirectonly() prohibited in triggers and views}}",
          "",
          "[Added Lines]",
          "1433: } {1 {unsafe use of testdirectonly()}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441: do_catchsql_test func-33.5 {",
          "1442:   WITH c(x) AS (SELECT * FROM v33)",
          "1443:   SELECT * FROM c;",
          "1445: do_execsql_test func-33.10 {",
          "1446:   CREATE TABLE t33a(a,b);",
          "1447:   CREATE TABLE t33b(x,y);",
          "",
          "[Removed Lines]",
          "1444: } {1 {testdirectonly() prohibited in triggers and views}}",
          "",
          "[Added Lines]",
          "1444: } {1 {unsafe use of testdirectonly()}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1451: } {}",
          "1452: do_catchsql_test func-33.11 {",
          "1453:   INSERT INTO t33a VALUES(1,2);",
          "1455: do_execsql_test func-33.20 {",
          "1456:   ALTER TABLE t33a RENAME COLUMN a TO aaa;",
          "1457:   SELECT sql FROM sqlite_master WHERE name='r1';",
          "",
          "[Removed Lines]",
          "1454: } {1 {testdirectonly() prohibited in triggers and views}}",
          "",
          "[Added Lines]",
          "1454: } {1 {unsafe use of testdirectonly()}}",
          "",
          "---------------"
        ],
        "test/trustschema1.test||test/trustschema1.test": [
          "File: test/trustschema1.test -> test/trustschema1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020-01-08",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for managing execution of code snippets found in untrusted",
          "13: # schemas.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix trustschema1",
          "21: proc f1 {x} {return $x}",
          "22: do_test 1.100 {",
          "23:   db function f1 -innocuous -deterministic f1",
          "24:   db function f2 -deterministic f1",
          "25:   db function f3 -directonly -deterministic f1",
          "26:   db eval {",
          "27:     CREATE TABLE t1(a, b AS (f1(a+1)), c AS (f2(a+2)));",
          "28:     INSERT INTO t1 VALUES(100),(200);",
          "29:   }",
          "30: } {}",
          "31: do_catchsql_test 1.110 {",
          "32:   SELECT a, b, c FROM t1;",
          "33: } {0 {100 101 102 200 201 202}}",
          "34: do_execsql_test 1.120 {",
          "35:   PRAGMA trusted_schema=OFF;",
          "36: } {}",
          "37: do_catchsql_test 1.130 {",
          "38:   SELECT a, b FROM t1;",
          "39: } {0 {100 101 200 201}}",
          "40: do_catchsql_test 1.140 {",
          "41:   SELECT a, b, c FROM t1;",
          "42: } {1 {unsafe use of f2()}}",
          "44: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}