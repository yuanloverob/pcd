{
  "cve_id": "CVE-2019-20016",
  "cve_desc": "libmysofa before 2019-11-24 does not properly restrict recursive function calls, as demonstrated by reports of stack consumption in readOHDRHeaderMessageDatatype in dataobject.c and directblockRead in fractalhead.c. NOTE: a download of v0.9 after 2019-12-06 should fully remediate this issue.",
  "repo": "hoene/libmysofa",
  "patch_hash": "2e6fac6ab6156dae8e8c6f417741388084b70d6f",
  "patch_info": {
    "commit_hash": "2e6fac6ab6156dae8e8c6f417741388084b70d6f",
    "repo": "hoene/libmysofa",
    "commit_url": "https://github.com/hoene/libmysofa/commit/2e6fac6ab6156dae8e8c6f417741388084b70d6f",
    "files": [
      "src/hdf/fractalhead.c",
      "src/hdf/reader.h",
      "src/hrtf/reader.c"
    ],
    "message": "Fixed recursive function calls",
    "before_after_code_files": [
      "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
      "src/hdf/reader.h||src/hdf/reader.h",
      "src/hrtf/reader.c||src/hrtf/reader.c"
    ]
  },
  "patch_diff": {
    "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
      "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:  UNUSED(block_size);",
      "34:  UNUSED(block_offset);",
      "37:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHDB\", 4)) {",
      "38:   log(\"cannot read signature of fractal heap indirect block\\n\");",
      "39:   return MYSOFA_INVALID_FORMAT;",
      "40:  }",
      "43:  if (fgetc(reader->fhd) != 0) {",
      "44:   log(\"object FHDB must have version 0\\n\");",
      "",
      "[Removed Lines]",
      "41:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
      "",
      "[Added Lines]",
      "36:  if(reader->recursive_counter >= 10)",
      "37:   return MYSOFA_INVALID_FORMAT;",
      "38:  else",
      "39:   reader->recursive_counter++;",
      "46:  log(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t )ftell(reader->fhd) - 4, buf, reader->recursive_counter);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "219:  } while (typeandversion != 0);",
      "221:  return MYSOFA_OK;",
      "222: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:  reader->recursive_counter--;",
      "",
      "---------------"
    ],
    "src/hdf/reader.h||src/hdf/reader.h": [
      "File: src/hdf/reader.h -> src/hdf/reader.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:  struct SUPERBLOCK superblock;",
      "184:  struct GCOL *gcol;",
      "185: };",
      "187: int validAddress(struct READER *reader, uint64_t address);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "186:  int recursive_counter;",
      "",
      "---------------"
    ],
    "src/hrtf/reader.c||src/hrtf/reader.c": [
      "File: src/hrtf/reader.c -> src/hrtf/reader.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:  }",
      "245:  reader.gcol = NULL;",
      "246:  reader.all = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "247:  reader.recursive_counter = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "753adccb5fd404d83af00c49443ffd4794d2cd66",
      "candidate_info": {
        "commit_hash": "753adccb5fd404d83af00c49443ffd4794d2cd66",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/753adccb5fd404d83af00c49443ffd4794d2cd66",
        "files": [
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hdf/superblock.c",
          "src/hrtf/tools.h",
          "src/tests/json.h"
        ],
        "message": "Addressed code review",
        "before_after_code_files": [
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hdf/superblock.c||src/hdf/superblock.c",
          "src/hrtf/tools.h||src/hrtf/tools.h",
          "src/tests/json.h||src/tests/json.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:   case 3:",
          "406:     return readOHDRHeaderMessageDataFill3(reader);",
          "407:   default:",
          "409:           \"%d\\n\",",
          "410:           version);",
          "411:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "408:     mylog(\"object OHDR data storage fill value message must have version 3 not \"",
          "",
          "[Added Lines]",
          "408:     mylog(\"object OHDR data storage fill value message must have version 1,2, \"",
          "409:           \"or 3 not \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "689:     reference = readValue(reader, dt->size - 4);",
          "690:     mylog(\" REFERENCE size %d %\" PRIX64 \"\\n\", dt->size, reference);",
          "691:     if (!!(err = gcolRead(reader, gcol, reference, &dataobject))) {",
          "694:     }",
          "695:     referenceData = findDataobject(reader, dataobject);",
          "",
          "[Removed Lines]",
          "692:       return MYSOFA_OK; /* ignore error",
          "",
          "[Added Lines]",
          "692:       return MYSOFA_OK; /* ignore error. TODO: why?",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <stdlib.h>",
          "14: #include <string.h>",
          "16: static int log2i(int a) { return round(log2(a)); }",
          "18: static int directblockRead(struct READER *reader, struct DATAOBJECT *dataobject,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #define MAX_NAME_LENGTH (0x100)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:         len = fgetc(reader->fhd);",
          "193:         if (len < 0)",
          "194:           return MYSOFA_READ_ERROR;",
          "197:         if (!(name = malloc(len + 1)))",
          "198:           return MYSOFA_NO_MEMORY;",
          "",
          "[Removed Lines]",
          "195:         assert(len < 0x100);",
          "",
          "[Added Lines]",
          "197:         if (len > MAX_NAME_LENGTH)",
          "198:           return MYSOFA_INVALID_FORMAT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:     00 13  00 00 00 01 00 00 00 00  |ns..............| 00002820  00 00 00 53 69",
          "259:     6d 70 6c  65 46 72 65 65 46 69 65  |...SimpleFreeFie|",
          "262:           return MYSOFA_NO_MEMORY;",
          "263:         len = -1;",
          "265:           int c = fgetc(reader->fhd);",
          "267:             free(name);",
          "268:             return MYSOFA_READ_ERROR;",
          "269:           }",
          "",
          "[Removed Lines]",
          "261:         if (!(name = malloc(100)))",
          "264:         for (int i = 0; i < 100; i++) {",
          "266:           if (c < 0 || i == 100 - 1) {",
          "",
          "[Added Lines]",
          "264:         if (!(name = malloc(MAX_NAME_LENGTH)))",
          "267:         for (int i = 0; i < MAX_NAME_LENGTH; i++) {",
          "269:           if (c < 0 || i == MAX_NAME_LENGTH - 1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:             break;",
          "275:         }",
          "276:         name = realloc(name, len + 1);",
          "277:         mylog(\"name %d %s\\n\", len, name);",
          "279:         if (readValue(reader, 3) != 0x000000) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         if (!name)",
          "281:           return MYSOFA_NO_MEMORY;",
          "",
          "---------------"
        ],
        "src/hdf/superblock.c||src/hdf/superblock.c": [
          "File: src/hdf/superblock.c -> src/hdf/superblock.c"
        ],
        "src/hrtf/tools.h||src/hrtf/tools.h": [
          "File: src/hrtf/tools.h -> src/hrtf/tools.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: void convertCartesianToSpherical(float *values, int elements);",
          "21: void convertSphericalToCartesian(float *values, int elements);",
          "25: float radius(float *cartesian);",
          "",
          "[Removed Lines]",
          "23: #define fequals(a, b) (fabsf(a - b) < 0.00001)",
          "",
          "[Added Lines]",
          "23: #define fequals(a, b) (fabs(a - b) < 0.00001)",
          "",
          "---------------"
        ],
        "src/tests/json.h||src/tests/json.h": [
          "File: src/tests/json.h -> src/tests/json.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <stdio.h>",
          "3: void printJson(FILE *out, struct MYSOFA_HRTF *hrtf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include \"mysofa.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73a3889998bb68900af3cf0f4b81acc35850a738",
      "candidate_info": {
        "commit_hash": "73a3889998bb68900af3cf0f4b81acc35850a738",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/73a3889998bb68900af3cf0f4b81acc35850a738",
        "files": [
          "src/hdf/btree.c",
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hdf/gcol.c",
          "src/hdf/gunzip.c",
          "src/hdf/reader.h",
          "src/hdf/superblock.c",
          "src/hrtf/reader.c"
        ],
        "message": "rename log to mylog",
        "before_after_code_files": [
          "src/hdf/btree.c||src/hdf/btree.c",
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hdf/gcol.c||src/hdf/gcol.c",
          "src/hdf/gunzip.c||src/hdf/gunzip.c",
          "src/hdf/reader.h||src/hdf/reader.h",
          "src/hdf/superblock.c||src/hdf/superblock.c",
          "src/hrtf/reader.c||src/hrtf/reader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
            "src/hdf/reader.h||src/hdf/reader.h",
            "src/hrtf/reader.c||src/hrtf/reader.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
            "src/hdf/reader.h||src/hdf/reader.h",
            "src/hrtf/reader.c||src/hrtf/reader.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/btree.c||src/hdf/btree.c": [
          "File: src/hdf/btree.c -> src/hdf/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTLF\", 4)) {",
          "84:   return MYSOFA_INVALID_FORMAT;",
          "85:  }",
          "88:  if (fgetc(reader->fhd) != 0) {",
          "90:   return MYSOFA_INVALID_FORMAT;",
          "91:  }",
          "",
          "[Removed Lines]",
          "83:   log(\"cannot read signature of BTLF\\n\");",
          "86:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "89:   log(\"object BTLF must have version 0\\n\");",
          "",
          "[Added Lines]",
          "83:   mylog(\"cannot read signature of BTLF\\n\");",
          "86:  mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "89:   mylog(\"object BTLF must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:   case 5:",
          "99:    records->type5.hash_of_name = (uint32_t) readValue(reader, 4);",
          "100:    records->type5.heap_id = readValue(reader, 7);",
          "102:      records->type5.heap_id);",
          "103:    records++;",
          "104:    break;",
          "",
          "[Removed Lines]",
          "101:    log(\" type5 %08X %14\" PRIX64 \"\\n\", records->type5.hash_of_name,",
          "",
          "[Added Lines]",
          "101:    mylog(\" type5 %08X %14\" PRIX64 \"\\n\", records->type5.hash_of_name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:    break;",
          "133:   default:",
          "135:    return MYSOFA_INVALID_FORMAT;",
          "136:   }",
          "137:  }",
          "",
          "[Removed Lines]",
          "134:    log(\"object BTLF has unknown type %d\\n\", type);",
          "",
          "[Added Lines]",
          "134:    mylog(\"object BTLF has unknown type %d\\n\", type);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTHD\", 4)) {",
          "160:   return MYSOFA_INVALID_FORMAT;",
          "161:  }",
          "164:  if (fgetc(reader->fhd) != 0) {",
          "166:   return MYSOFA_INVALID_FORMAT;",
          "167:  }",
          "",
          "[Removed Lines]",
          "159:   log(\"cannot read signature of BTHD\\n\");",
          "162:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "165:   log(\"object BTHD must have version 0\\n\");",
          "",
          "[Added Lines]",
          "159:   mylog(\"cannot read signature of BTHD\\n\");",
          "162:  mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "165:   mylog(\"object BTHD must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:  UNUSED(key);",
          "227:  if (data->ds.dimensionality > 3) {",
          "229:   return MYSOFA_INVALID_FORMAT;",
          "230:  }",
          "233:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"TREE\", 4)) {",
          "235:   return MYSOFA_INVALID_FORMAT;",
          "236:  }",
          "239:  node_type = (uint8_t) fgetc(reader->fhd);",
          "240:  node_level = (uint8_t) fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "228:   log(\"TREE dimensions > 3\");",
          "234:   log(\"cannot read signature of TREE\\n\");",
          "237:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "228:   mylog(\"TREE dimensions > 3\");",
          "234:   mylog(\"cannot read signature of TREE\\n\");",
          "237:  mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:  szy = sz * sy;",
          "259:  size = data->datalayout_chunk[data->ds.dimensionality];",
          "263:  if (elements >= 0x100000 || size > 0x10)",
          "264:   return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "261:  log(\"elements %d size %d\\n\",elements,size);",
          "",
          "[Added Lines]",
          "261:  mylog(\"elements %d size %d\\n\",elements,size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:    size_of_chunk = (uint32_t) readValue(reader, 4);",
          "274:    filter_mask = (uint32_t) readValue(reader, 4);",
          "275:    if (filter_mask) {",
          "277:     free(output);",
          "278:     return MYSOFA_INVALID_FORMAT;",
          "279:    }",
          "281:    for (j = 0; j < data->ds.dimensionality; j++) {",
          "282:     start[j] = readValue(reader, 8);",
          "284:    }",
          "286:    if (readValue(reader, 8)) {",
          "",
          "[Removed Lines]",
          "276:     log(\"TREE all filters must be enabled\\n\");",
          "283:     log(\"start %d %\" PRIu64 \"\\n\",j,start[j]);",
          "",
          "[Added Lines]",
          "276:     mylog(\"TREE all filters must be enabled\\n\");",
          "283:     mylog(\"start %d %\" PRIu64 \"\\n\",j,start[j]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "290:    child_pointer = readValue(reader,",
          "291:      reader->superblock.size_of_offsets);",
          "295:    store = ftell(reader->fhd);",
          "",
          "[Removed Lines]",
          "292:    log(\" data at %\" PRIX64 \" len %u\\n\", child_pointer, size_of_chunk);",
          "",
          "[Added Lines]",
          "292:    mylog(\" data at %\" PRIX64 \" len %u\\n\", child_pointer, size_of_chunk);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "312:    err = gunzip(size_of_chunk, input, &olen, output);",
          "313:    free(input);",
          "316:    if (err || olen != elements * size) {",
          "317:     free(output);",
          "318:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "315:    log(\"   gunzip %d %d %d\\n\",err, olen, elements*size);",
          "",
          "[Added Lines]",
          "315:    mylog(\"   gunzip %d %d %d\\n\",err, olen, elements*size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "362:     }",
          "363:     break;",
          "364:    default:",
          "366:     return MYSOFA_INTERNAL_ERROR;",
          "367:    }",
          "",
          "[Removed Lines]",
          "365:     log(\"invalid dim\\n\");",
          "",
          "[Added Lines]",
          "365:     mylog(\"invalid dim\\n\");",
          "",
          "---------------"
        ],
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     if (i < 4) {",
          "68:       ds->dimension_size[i] =",
          "69:           readValue(reader, reader->superblock.size_of_lengths);",
          "71:     } else",
          "72:       readValue(reader, reader->superblock.size_of_lengths);",
          "73:   }",
          "",
          "[Removed Lines]",
          "70:       log(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "[Added Lines]",
          "70:       mylog(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   }",
          "85:   if (ds->flags & 2) {",
          "87:     return MYSOFA_INVALID_FORMAT;",
          "88:   }",
          "",
          "[Removed Lines]",
          "86:     log(\"permutation in OHDR not supported\\n\");",
          "",
          "[Added Lines]",
          "86:     mylog(\"permutation in OHDR not supported\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     if (i < 4) {",
          "102:       ds->dimension_size[i] =",
          "103:           readValue(reader, reader->superblock.size_of_lengths);",
          "105:     } else",
          "106:       readValue(reader, reader->superblock.size_of_lengths);",
          "107:   }",
          "",
          "[Removed Lines]",
          "104:       log(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "[Added Lines]",
          "104:       mylog(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:   ds->dimensionality = (uint8_t)fgetc(reader->fhd);",
          "128:   if (ds->dimensionality > 4) {",
          "130:     return MYSOFA_INVALID_FORMAT;",
          "131:   }",
          "",
          "[Removed Lines]",
          "129:     log(\"dimensionality must be lower than 5\\n\");",
          "",
          "[Added Lines]",
          "129:     mylog(\"dimensionality must be lower than 5\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:   case 2:",
          "139:     return readOHDRHeaderMessageDataspace2(reader, ds);",
          "140:   default:",
          "142:         \"%06X\\n\",",
          "143:         version, ftell(reader->fhd) - 1);",
          "144:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "141:     log(\"object OHDR dataspace message must have version 1 or 2 but is %X at \"",
          "",
          "[Added Lines]",
          "141:     mylog(\"object OHDR dataspace message must have version 1 or 2 but is %X at \"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:                                          struct LINKINFO *li) {",
          "159:   if (fgetc(reader->fhd) != 0) {",
          "161:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "162:   }",
          "",
          "[Removed Lines]",
          "160:     log(\"object OHDR link info message must have version 0\\n\");",
          "",
          "[Added Lines]",
          "160:     mylog(\"object OHDR link info message must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "198:   dt->class_and_version = (uint8_t)fgetc(reader->fhd);",
          "199:   if ((dt->class_and_version & 0xf0) != 0x10 &&",
          "200:       (dt->class_and_version & 0xf0) != 0x30) {",
          "202:         dt->class_and_version >> 4, ftell(reader->fhd) - 1);",
          "203:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "204:   }",
          "",
          "[Removed Lines]",
          "201:     log(\"object OHDR datatype message must have version 1 not %d at %06X\\n\",",
          "",
          "[Added Lines]",
          "201:     mylog(\"object OHDR datatype message must have version 1 not %d at %06X\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "213:     dt->u.i.bit_offset = readValue(reader, 2);",
          "214:     dt->u.i.bit_precision = readValue(reader, 2);",
          "216:         dt->class_and_version >> 4, dt->size);",
          "217:     break;",
          "",
          "[Removed Lines]",
          "215:     log(\"    INT bit %d %d %d %d\\n\", dt->u.i.bit_offset, dt->u.i.bit_precision,",
          "",
          "[Added Lines]",
          "215:     mylog(\"    INT bit %d %d %d %d\\n\", dt->u.i.bit_offset, dt->u.i.bit_precision,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:     dt->u.f.mantissa_size = (uint8_t)fgetc(reader->fhd);",
          "226:     dt->u.f.exponent_bias = (uint32_t)readValue(reader, 4);",
          "229:         dt->u.f.bit_offset, dt->u.f.bit_precision, dt->u.f.exponent_location,",
          "230:         dt->u.f.exponent_size, dt->u.f.mantissa_location, dt->u.f.mantissa_size,",
          "231:         dt->u.f.exponent_bias);",
          "",
          "[Removed Lines]",
          "228:     log(\"    FLOAT bit %d %d exponent %d %d MANTISSA %d %d OFFSET %d\\n\",",
          "",
          "[Added Lines]",
          "228:     mylog(\"    FLOAT bit %d %d exponent %d %d MANTISSA %d %d OFFSET %d\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "245:     break;",
          "249:     break;",
          "251:   case 6:",
          "253:     switch (dt->class_and_version >> 4) {",
          "254:     case 3:",
          "255:       for (i = 0; i < (dt->class_bit_field & 0xffff); i++) {",
          "",
          "[Removed Lines]",
          "248:     log(\"    STRING %d %02X\\n\", dt->size, dt->class_bit_field);",
          "252:     log(\"    COMPOUND %d %02X\\n\", dt->size, dt->class_bit_field);",
          "",
          "[Added Lines]",
          "248:     mylog(\"    STRING %d %02X\\n\", dt->size, dt->class_bit_field);",
          "252:     mylog(\"    COMPOUND %d %02X\\n\", dt->size, dt->class_bit_field);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "273:           c |= fgetc(reader->fhd) << (8 * j);",
          "274:         }",
          "279:          p = realloc(buffer, j);",
          "",
          "[Removed Lines]",
          "276:         log(\"   COMPOUND %s offset %d\\n\", buffer, c);",
          "",
          "[Added Lines]",
          "276:         mylog(\"   COMPOUND %s offset %d\\n\", buffer, c);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "309:         c = readValue(reader, 4);",
          "310:         uint8_t dimension = fgetc(reader->fhd);",
          "311:         if (dimension != 0) {",
          "313:           return MYSOFA_INVALID_FORMAT;",
          "314:         }",
          "",
          "[Removed Lines]",
          "312:           log(\"COMPOUND v1 with dimension not supported\");",
          "",
          "[Added Lines]",
          "312:           mylog(\"COMPOUND v1 with dimension not supported\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "317:         if (fseek(reader->fhd, 3 + 4 + 4 + 4 * 4, SEEK_CUR))",
          "318:           return MYSOFA_READ_ERROR;",
          "321:         err = readOHDRHeaderMessageDatatype(reader, &dt2);",
          "322:         if (err)",
          "323:           return err;",
          "324:       }",
          "325:       break;",
          "326:     default:",
          "328:           dt->class_and_version >> 4);",
          "329:       return MYSOFA_INVALID_FORMAT;",
          "330:     }",
          "331:     break;",
          "334:     break;",
          "337:     dt->list = dt->size;",
          "339:     err = readOHDRHeaderMessageDatatype(reader, dt);",
          "340:     if (err)",
          "341:       return err;",
          "342:     break;",
          "344:   default:",
          "346:         dt->class_and_version & 0xf);",
          "347:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "348:   }",
          "",
          "[Removed Lines]",
          "320:         log(\"  COMPOUND %s %d %d %X\\n\", name, c, dimension, ftell(reader->fhd));",
          "327:       log(\"object OHDR datatype message must have version 1 or 3 not %d\\n\",",
          "333:     log(\"    REFERENCE %d %02X\\n\", dt->size, dt->class_bit_field);",
          "338:     log(\"  LIST %d\\n\", dt->size);",
          "345:     log(\"object OHDR datatype message has unknown variable type %d\\n\",",
          "",
          "[Added Lines]",
          "320:         mylog(\"  COMPOUND %s %d %d %X\\n\", name, c, dimension, ftell(reader->fhd));",
          "327:       mylog(\"object OHDR datatype message must have version 1 or 3 not %d\\n\",",
          "333:     mylog(\"    REFERENCE %d %02X\\n\", dt->size, dt->class_bit_field);",
          "338:     mylog(\"  LIST %d\\n\", dt->size);",
          "345:     mylog(\"object OHDR datatype message has unknown variable type %d\\n\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "365:   if ((spaceAllocationTime & ~1) != 2 || fillValueWriteTime != 2 ||",
          "366:       (fillValueDefined & ~1) != 0) {",
          "368:         spaceAllocationTime, fillValueWriteTime, fillValueDefined);",
          "369:     return MYSOFA_INVALID_FORMAT;",
          "370:   }",
          "",
          "[Removed Lines]",
          "367:     log(\"spaceAllocationTime %d fillValueWriteTime %d fillValueDefined %d\\n\",",
          "",
          "[Added Lines]",
          "367:     mylog(\"spaceAllocationTime %d fillValueWriteTime %d fillValueDefined %d\\n\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "406:   case 3:",
          "407:     return readOHDRHeaderMessageDataFill3(reader);",
          "408:   default:",
          "410:         \"%d\\n\",",
          "411:         version);",
          "412:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "409:     log(\"object OHDR data storage fill value message must have version 3 not \"",
          "",
          "[Added Lines]",
          "409:     mylog(\"object OHDR data storage fill value message must have version 3 not \"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "459:   UNUSED(data_size);",
          "461:   if (fgetc(reader->fhd) != 3) {",
          "463:     return MYSOFA_INVALID_FORMAT;",
          "464:   }",
          "",
          "[Removed Lines]",
          "462:     log(\"object OHDR message data layout message must have version 3\\n\");",
          "",
          "[Added Lines]",
          "462:     mylog(\"object OHDR message data layout message must have version 3\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "470:  case 0:",
          "471:  data_size = readValue(reader, 2);",
          "472:  fseek(reader->fhd, data_size, SEEK_CUR);",
          "474:  break;",
          "475: #endif",
          "476:   case 1:",
          "477:     data_address = readValue(reader, reader->superblock.size_of_offsets);",
          "478:     data_size = readValue(reader, reader->superblock.size_of_lengths);",
          "480:     break;",
          "482:   case 2:",
          "",
          "[Removed Lines]",
          "473:  log(\"TODO 0 SIZE %u\\n\", data_size);",
          "479:     log(\"TODO 1 SIZE %\" PRIu64 \"\\n\", data_size);",
          "",
          "[Added Lines]",
          "473:  mylog(\"TODO 0 SIZE %u\\n\", data_size);",
          "479:     mylog(\"TODO 1 SIZE %\" PRIu64 \"\\n\", data_size);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "486:             sizeof(data->datalayout_chunk) / sizeof(data->datalayout_chunk)[0])",
          "487:       return MYSOFA_INVALID_FORMAT;",
          "488:     data_address = readValue(reader, reader->superblock.size_of_offsets);",
          "490:     for (i = 0; i < dimensionality; i++) {",
          "491:       data->datalayout_chunk[i] = readValue(reader, 4);",
          "493:     }",
          "",
          "[Removed Lines]",
          "489:     log(\" CHUNK %\" PRIX64 \"\\n\", data_address);",
          "492:       log(\" %d\\n\", data->datalayout_chunk[i]);",
          "",
          "[Added Lines]",
          "489:     mylog(\" CHUNK %\" PRIX64 \"\\n\", data_address);",
          "492:       mylog(\" %d\\n\", data->datalayout_chunk[i]);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "518:     break;",
          "520:   default:",
          "522:         \"%d\\n\",",
          "523:         layout_class);",
          "524:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "521:     log(\"object OHDR message data layout message has unknown layout class \"",
          "",
          "[Added Lines]",
          "521:     mylog(\"object OHDR message data layout message has unknown layout class \"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "538:                                           struct GROUPINFO *gi) {",
          "540:   if (fgetc(reader->fhd) != 0) {",
          "542:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "543:   }",
          "",
          "[Removed Lines]",
          "541:     log(\"object OHDR group info message must have version 0\\n\");",
          "",
          "[Added Lines]",
          "541:     mylog(\"object OHDR group info message must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "579:   UNUSED(length_of_entries);",
          "581:   if (fgetc(reader->fhd) != 2) {",
          "583:     return MYSOFA_INVALID_FORMAT;",
          "584:   }",
          "586:   filters = (uint8_t)fgetc(reader->fhd);",
          "587:   if (filters > 32) {",
          "589:         filters);",
          "590:     return MYSOFA_INVALID_FORMAT;",
          "591:   }",
          "",
          "[Removed Lines]",
          "582:     log(\"object OHDR filter pipeline message must have version 1\\n\");",
          "588:     log(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "",
          "[Added Lines]",
          "582:     mylog(\"object OHDR filter pipeline message must have version 1\\n\");",
          "588:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "597:     case 2:",
          "598:       break;",
          "599:     default:",
          "601:           \"%d\\n\",",
          "602:           filter_identification_value);",
          "603:       return MYSOFA_INVALID_FORMAT;",
          "604:     }",
          "606:     flags = (uint16_t)readValue(reader, 2);",
          "607:     number_client_data_values = (uint16_t)readValue(reader, 2);",
          "608:     if (number_client_data_values > 0x1000)",
          "",
          "[Removed Lines]",
          "600:       log(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "605:     log(\"  filter %d\\n\", filter_identification_value);",
          "",
          "[Added Lines]",
          "600:       mylog(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "605:     mylog(\"  filter %d\\n\", filter_identification_value);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "631:     } else {",
          "632:       gcol = readValue(reader, dt->list - dt->size);",
          "633:     }",
          "635:         ftell(reader->fhd));",
          "",
          "[Removed Lines]",
          "634:     log(\"    GCOL %d %8\" PRIX64 \" %8lX\\n\", dt->list - dt->size, gcol,",
          "",
          "[Added Lines]",
          "634:     mylog(\"    GCOL %d %8\" PRIX64 \" %8lX\\n\", dt->list - dt->size, gcol,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "641:   case 3:",
          "642:     buffer = malloc(dt->size + 1);",
          "643:     if (buffer == NULL) {",
          "645:       return MYSOFA_NO_MEMORY;",
          "646:     }",
          "647:     if (fread(buffer, 1, dt->size, reader->fhd) != dt->size) {",
          "648:       free(buffer);",
          "650:       return MYSOFA_READ_ERROR;",
          "651:     }",
          "652:     buffer[dt->size] = 0;",
          "654:     data->string = buffer;",
          "655:     break;",
          "",
          "[Removed Lines]",
          "644:       log(\"data reader no memory\\n\");",
          "649:       log(\"data reader cannot read\\n\");",
          "653:     log(\"STRING %s\\n\", buffer);",
          "",
          "[Added Lines]",
          "644:       mylog(\"data reader no memory\\n\");",
          "649:       mylog(\"data reader cannot read\\n\");",
          "653:     mylog(\"STRING %s\\n\", buffer);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "661:   case 6:",
          "664:     if (fseek(reader->fhd, dt->size, SEEK_CUR))",
          "665:       return errno;",
          "666:     break;",
          "",
          "[Removed Lines]",
          "663:     log(\"COMPONENT todo %lX %d\\n\", ftell(reader->fhd), dt->size);",
          "",
          "[Added Lines]",
          "663:     mylog(\"COMPONENT todo %lX %d\\n\", ftell(reader->fhd), dt->size);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "668:   case 7:",
          "670:     reference = readValue(reader, dt->size - 4);",
          "672:     if (!!(err = gcolRead(reader, gcol, reference, &dataobject))) {",
          "673:       return MYSOFA_OK; /* ignore error",
          "",
          "[Removed Lines]",
          "671:     log(\" REFERENCE size %d %\" PRIX64 \"\\n\", dt->size, reference);",
          "",
          "[Added Lines]",
          "671:     mylog(\" REFERENCE size %d %\" PRIX64 \"\\n\", dt->size, reference);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "680:       sprintf(number, \"REF%08lX\", (long unsigned int)reference);",
          "681:       buffer = number;",
          "682:     }",
          "684:         buffer);",
          "686:      return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Removed Lines]",
          "683:     log(\"    REFERENCE %\" PRIX64 \" %\" PRIX64 \" %s\\n\", reference, dataobject,",
          "",
          "[Added Lines]",
          "683:     mylog(\"    REFERENCE %\" PRIX64 \" %\" PRIX64 \" %s\\n\", reference, dataobject,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "696:     break;",
          "698:   default:",
          "700:     return MYSOFA_INTERNAL_ERROR;",
          "701:   }",
          "702:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "699:     log(\"data reader unknown type %d\\n\", dt->class_and_version & 0xf);",
          "",
          "[Added Lines]",
          "699:     mylog(\"data reader unknown type %d\\n\", dt->class_and_version & 0xf);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "747:   if (offset > 0x1000000 || length > 0x10000000)",
          "748:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "752:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "753:   else",
          "754:     reader->recursive_counter++;",
          "",
          "[Removed Lines]",
          "750:   log(\" continue %08\" PRIX64 \" %08\" PRIX64 \"\\n\", offset, length);",
          "751:   if (reader->recursive_counter >= 10)",
          "",
          "[Added Lines]",
          "750:   mylog(\" continue %08\" PRIX64 \" %08\" PRIX64 \"\\n\", offset, length);",
          "751:   if (reader->recursive_counter >= 20) {",
          "752:     mylog(\"recursive problem\");",
          "754:   }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "767:   if (fseek(reader->fhd, store, SEEK_SET) < 0)",
          "768:     return errno;",
          "771:   return MYSOFA_OK;",
          "772: }",
          "",
          "[Removed Lines]",
          "770:   log(\" continue back\\n\");",
          "",
          "[Added Lines]",
          "772:   mylog(\" continue back\\n\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "795:   uint8_t version = fgetc(reader->fhd);",
          "797:   if (version != 1 && version != 3) {",
          "799:     return MYSOFA_INVALID_FORMAT;",
          "800:   }",
          "",
          "[Removed Lines]",
          "798:     log(\"object OHDR attribute message must have version 1 or 3\\n\");",
          "",
          "[Added Lines]",
          "800:     mylog(\"object OHDR attribute message must have version 1 or 3\\n\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "822:   }",
          "824:   name[name_size] = 0;",
          "826:       ftell(reader->fhd));",
          "828:   if (version == 3 && (flags & 3)) {",
          "830:     free(name);",
          "831:     return MYSOFA_INVALID_FORMAT;",
          "832:   }",
          "833:   err = readOHDRHeaderMessageDatatype(reader, &d.dt);",
          "834:   if (err) {",
          "836:     free(name);",
          "837:     return MYSOFA_INVALID_FORMAT;",
          "838:   }",
          "",
          "[Removed Lines]",
          "825:   log(\"  attribute name %s %d %d %X\\n\", name, datatype_size, dataspace_size,",
          "829:     log(\"object OHDR attribute message must not have any flags set\\n\");",
          "835:     log(\"object OHDR attribute message read datatype error\\n\");",
          "",
          "[Added Lines]",
          "827:   mylog(\"  attribute name %s %d %d %X\\n\", name, datatype_size, dataspace_size,",
          "831:     mylog(\"object OHDR attribute message must not have any flags set\\n\");",
          "837:     mylog(\"object OHDR attribute message read datatype error\\n\");",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "842:   err = readOHDRHeaderMessageDataspace(reader, &d.ds);",
          "843:   if (err) {",
          "845:     free(name);",
          "846:     return MYSOFA_INVALID_FORMAT;",
          "847:   }",
          "",
          "[Removed Lines]",
          "844:     log(\"object OHDR attribute message read dataspace error\\n\");",
          "",
          "[Added Lines]",
          "846:     mylog(\"object OHDR attribute message read dataspace error\\n\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "851:   err = readData(reader, &d, &d.dt, &d.ds);",
          "852:   if (err) {",
          "854:     free(name);",
          "855:     return MYSOFA_INVALID_FORMAT;",
          "856:   }",
          "",
          "[Removed Lines]",
          "853:     log(\"object OHDR attribute message read data error\\n\");",
          "",
          "[Added Lines]",
          "855:     mylog(\"object OHDR attribute message read data error\\n\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "879:                                               struct ATTRIBUTEINFO *ai) {",
          "881:   if (fgetc(reader->fhd) != 0) {",
          "883:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "884:   }",
          "",
          "[Removed Lines]",
          "882:     log(\"object OHDR attribute info message must have version 0\\n\");",
          "",
          "[Added Lines]",
          "884:     mylog(\"object OHDR attribute info message must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "917:     uint16_t header_message_size = (uint16_t)readValue(reader, 2);",
          "918:     uint8_t header_message_flags = (uint8_t)fgetc(fhd);",
          "919:     if ((header_message_flags & ~5) != 0) {",
          "921:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "922:     }",
          "",
          "[Removed Lines]",
          "920:       log(\"OHDR unsupported OHDR message flag %02X\\n\", header_message_flags);",
          "",
          "[Added Lines]",
          "922:       mylog(\"OHDR unsupported OHDR message flag %02X\\n\", header_message_flags);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "926:       if (fseek(reader->fhd, 2, SEEK_CUR) < 0)",
          "927:         return errno;",
          "930:         ftell(fhd), header_message_size);",
          "932:     end = ftell(fhd) + header_message_size;",
          "",
          "[Removed Lines]",
          "929:     log(\" OHDR message type %2d offset %6lX len %4X\\n\", header_message_type,",
          "",
          "[Added Lines]",
          "931:     mylog(\" OHDR message type %2d offset %6lX len %4X\\n\", header_message_type,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "981:         return err;",
          "982:       break;",
          "983:     default:",
          "986:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "987:     }",
          "989:     if (ftell(fhd) != end) {",
          "991:       return MYSOFA_INTERNAL_ERROR;",
          "992:     }",
          "993:   }",
          "",
          "[Removed Lines]",
          "984:       log(\"OHDR unknown header message of type %d\\n\", header_message_type);",
          "990:       log(\"OHDR message length mismatch by %ld\\n\", ftell(fhd) - end);",
          "",
          "[Added Lines]",
          "986:       mylog(\"OHDR unknown header message of type %d\\n\", header_message_type);",
          "992:       mylog(\"OHDR message length mismatch by %ld\\n\", ftell(fhd) - end);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1007:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OCHK\", 4)) {",
          "1009:     return MYSOFA_INVALID_FORMAT;",
          "1010:   }",
          "1014:   if (err) {",
          "",
          "[Removed Lines]",
          "1008:     log(\"cannot read signature of OCHK\\n\");",
          "1011:   log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "1010:     mylog(\"cannot read signature of OCHK\\n\");",
          "1013:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1032:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OHDR\", 4)) {",
          "1034:     return MYSOFA_INVALID_FORMAT;",
          "1035:   }",
          "1038:   if (fgetc(reader->fhd) != 2) {",
          "1040:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "1041:   }",
          "",
          "[Removed Lines]",
          "1033:     log(\"cannot read signature of data object\\n\");",
          "1036:   log(\"%08\" PRIX64 \" %.4s\\n\", dataobject->address, buf);",
          "1039:     log(\"object OHDR must have version 2\\n\");",
          "",
          "[Added Lines]",
          "1035:     mylog(\"cannot read signature of data object\\n\");",
          "1038:   mylog(\"%08\" PRIX64 \" %.4s\\n\", dataobject->address, buf);",
          "1041:     mylog(\"object OHDR must have version 2\\n\");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1048:   }",
          "1052:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "1053:   }",
          "",
          "[Removed Lines]",
          "1051:     log(\"OHDR: unsupported flags bit 4: %02X\\n\", dataobject->flags);",
          "",
          "[Added Lines]",
          "1053:     mylog(\"OHDR: unsupported flags bit 4: %02X\\n\", dataobject->flags);",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   UNUSED(block_size);",
          "32:   UNUSED(block_offset);",
          "35:     return MYSOFA_INVALID_FORMAT;",
          "36:   else",
          "37:     reader->recursive_counter++;",
          "40:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHDB\", 4)) {",
          "42:     return MYSOFA_INVALID_FORMAT;",
          "43:   }",
          "45:       reader->recursive_counter);",
          "47:   if (fgetc(reader->fhd) != 0) {",
          "49:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "50:   }",
          "",
          "[Removed Lines]",
          "34:   if (reader->recursive_counter >= 10)",
          "41:     log(\"cannot read signature of fractal heap indirect block\\n\");",
          "44:   log(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t)ftell(reader->fhd) - 4, buf,",
          "48:     log(\"object FHDB must have version 0\\n\");",
          "",
          "[Added Lines]",
          "34:   if (reader->recursive_counter >= 20) {",
          "35:     mylog(\"recursive problem\");",
          "37:   }",
          "43:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "46:   mylog(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t)ftell(reader->fhd) - 4, buf,",
          "50:     mylog(\"object FHDB must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   else",
          "67:     length_size = ceilf(log2f(fractalheap->maximum_size) / 8);",
          "",
          "[Removed Lines]",
          "69:   log(\" %d %\" PRIu64 \" %d\\n\", size, block_offset, offset_size);",
          "",
          "[Added Lines]",
          "71:   mylog(\" %d %\" PRIu64 \" %d\\n\", size, block_offset, offset_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     if (offset > 0x10000000 || length > 0x10000000)",
          "92:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "95:         ftell(reader->fhd));",
          "",
          "[Removed Lines]",
          "94:     log(\" %d %4\" PRIX64 \" %\" PRIX64 \" %08lX\\n\", typeandversion, offset, length,",
          "",
          "[Added Lines]",
          "96:     mylog(\" %d %4\" PRIX64 \" %\" PRIX64 \" %08lX\\n\", typeandversion, offset, length,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:       if (readValue(reader, 5) != 0x0000040008) {",
          "105:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "106:       }",
          "",
          "[Removed Lines]",
          "104:         log(\"FHDB type 3 unsupported values\");",
          "",
          "[Added Lines]",
          "106:         mylog(\"FHDB type 3 unsupported values\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:       name[length] = 0;",
          "116:       if (readValue(reader, 4) != 0x00000013) {",
          "118:         free(name);",
          "119:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "120:       }",
          "",
          "[Removed Lines]",
          "117:         log(\"FHDB type 3 unsupported values\");",
          "",
          "[Added Lines]",
          "119:         mylog(\"FHDB type 3 unsupported values\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147:         }",
          "148:         strcpy(value, \"\");",
          "149:       } else {",
          "151:         free(name);",
          "153:         return MYSOFA_OK;",
          "154:       }",
          "157:       attr = malloc(sizeof(struct MYSOFA_ATTRIBUTE));",
          "158:       attr->name = name;",
          "",
          "[Removed Lines]",
          "150:         log(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown);",
          "155:       log(\" %s = %s\\n\", name, value);",
          "",
          "[Added Lines]",
          "152:         mylog(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown);",
          "157:       mylog(\" %s = %s\\n\", name, value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:       unknown = readValue(reader, 6);",
          "168:       if (unknown) {",
          "170:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "171:       }",
          "",
          "[Removed Lines]",
          "169:         log(\"FHDB type 1 unsupported values\\n\");",
          "",
          "[Added Lines]",
          "171:         mylog(\"FHDB type 1 unsupported values\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:       heap_header_address =",
          "187:           readValue(reader, reader->superblock.size_of_offsets);",
          "190:           \"\\n\",",
          "191:           length, name, heap_header_address);",
          "",
          "[Removed Lines]",
          "189:       log(\"fractal head type 1 length %4\" PRIX64 \" name %s address %\" PRIX64",
          "",
          "[Added Lines]",
          "191:       mylog(\"fractal head type 1 length %4\" PRIX64 \" name %s address %\" PRIX64",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "220:     } else if (typeandversion != 0) {",
          "224:       return MYSOFA_OK;",
          "225:     }",
          "",
          "[Removed Lines]",
          "222:       log(\"fractal head unknown type %d\\n\", typeandversion);",
          "",
          "[Added Lines]",
          "224:       mylog(\"fractal head unknown type %d\\n\", typeandversion);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "254:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHIB\", 4)) {",
          "256:     return MYSOFA_INVALID_FORMAT;",
          "257:   }",
          "260:   if (fgetc(reader->fhd) != 0) {",
          "262:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "263:   }",
          "",
          "[Removed Lines]",
          "255:     log(\"cannot read signature of fractal heap indirect block\\n\");",
          "258:   log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "261:     log(\"object FHIB must have version 0\\n\");",
          "",
          "[Added Lines]",
          "257:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "260:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "263:     mylog(\"object FHIB must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "269:   block_offset = readValue(reader, size);",
          "271:   if (block_offset) {",
          "273:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "274:   }",
          "",
          "[Removed Lines]",
          "272:     log(\"FHIB block offset is not 0\\n\");",
          "",
          "[Added Lines]",
          "274:     mylog(\"FHIB block offset is not 0\\n\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "302:       size_filtered = readValue(reader, reader->superblock.size_of_lengths);",
          "303:       filter_mask = readValue(reader, 4);",
          "304:     }",
          "306:     if (validAddress(reader, child_direct_block)) {",
          "307:       store = ftell(reader->fhd);",
          "308:       if (fseek(reader->fhd, child_direct_block, SEEK_SET) < 0)",
          "",
          "[Removed Lines]",
          "305:     log(\">> %d %\" PRIX64 \" %d\\n\", k, child_direct_block, size);",
          "",
          "[Added Lines]",
          "307:     mylog(\">> %d %\" PRIX64 \" %d\\n\", k, child_direct_block, size);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "366:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FRHP\", 4)) {",
          "368:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "369:   }",
          "372:   if (fgetc(reader->fhd) != 0) {",
          "374:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "375:   }",
          "",
          "[Removed Lines]",
          "367:     log(\"cannot read signature of fractal heap\\n\");",
          "370:   log(\"%\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "373:     log(\"object fractal heap must have version 0\\n\");",
          "",
          "[Added Lines]",
          "369:     mylog(\"cannot read signature of fractal heap\\n\");",
          "372:   mylog(\"%\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "375:     mylog(\"object fractal heap must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "443:   }",
          "445:   if (fractalheap->number_huge_objects) {",
          "447:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "448:   }",
          "450:   if (fractalheap->number_tiny_objects) {",
          "452:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "453:   }",
          "",
          "[Removed Lines]",
          "446:     log(\"cannot handle huge objects\\n\");",
          "451:     log(\"cannot handle tiny objects\\n\");",
          "",
          "[Added Lines]",
          "448:     mylog(\"cannot handle huge objects\\n\");",
          "453:     mylog(\"cannot handle tiny objects\\n\");",
          "",
          "---------------"
        ],
        "src/hdf/gcol.c||src/hdf/gcol.c": [
          "File: src/hdf/gcol.c -> src/hdf/gcol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"GCOL\", 4)) {",
          "28:   return MYSOFA_INVALID_FORMAT;",
          "29:  }",
          "31:  if (fgetc(reader->fhd) != 1) {",
          "33:   return MYSOFA_INVALID_FORMAT;",
          "34:  }",
          "35:  if (fgetc(reader->fhd) < 0 || fgetc(reader->fhd) < 0",
          "",
          "[Removed Lines]",
          "27:   log(\"cannot read signature of global heap collection\\n\");",
          "32:   log(\"object GCOL must have version 1\\n\");",
          "",
          "[Added Lines]",
          "27:   mylog(\"cannot read signature of global heap collection\\n\");",
          "32:   mylog(\"object GCOL must have version 1\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   }",
          "63:   gcol->value = readValue(reader, gcol->object_size);",
          "64:   gcol->address = address;",
          "66:     gcol->object_size, gcol->value);",
          "68:   gcol->next = reader->gcol;",
          "69:   reader->gcol = gcol;",
          "70:  }",
          "74:  return MYSOFA_OK;",
          "75: }",
          "",
          "[Removed Lines]",
          "65:   log(\" GCOL object %d size %\" PRIu64 \" value %08\" PRIX64 \"\\n\", gcol->heap_object_index,",
          "",
          "[Added Lines]",
          "65:   mylog(\" GCOL object %d size %\" PRIu64 \" value %08\" PRIX64 \"\\n\", gcol->heap_object_index,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:    p = p->next;",
          "98:   }",
          "99:   if (!p) {",
          "101:    return MYSOFA_INVALID_FORMAT;",
          "102:   }",
          "103:  }",
          "",
          "[Removed Lines]",
          "100:    log(\"unknown gcol %\" PRIX64 \" %d\\n\",gcol,reference);",
          "",
          "[Added Lines]",
          "100:    mylog(\"unknown gcol %\" PRIX64 \" %d\\n\",gcol,reference);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110: gcol = reader->gcol;",
          "111: for (;;) {",
          "112:  if (gcol == NULL) {",
          "114:   return MYSOFA_INVALID_FORMAT;",
          "115:  }",
          "116:  if (gcol->heap_object_index == reference) {",
          "118:   break;",
          "119:   pos = ftell(reader->fhd);",
          "120:   fseek(reader->fhd, gcol->object_pos, SEEK_SET);",
          "",
          "[Removed Lines]",
          "113:   log(\"reference unknown!\\n\");",
          "117:   log(\"found reference at %LX\\n\", gcol->object_pos);",
          "",
          "[Added Lines]",
          "113:   mylog(\"reference unknown!\\n\");",
          "117:   mylog(\"found reference at %LX\\n\", gcol->object_pos);",
          "",
          "---------------"
        ],
        "src/hdf/gunzip.c||src/hdf/gunzip.c": [
          "File: src/hdf/gunzip.c -> src/hdf/gunzip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  inflateEnd(&stream);",
          "29:  if (err && err != Z_STREAM_END) {",
          "31:   return err;",
          "32:  }",
          "",
          "[Removed Lines]",
          "30:   log(\" gunzip error %d %s\\n\",err,stream.msg);",
          "",
          "[Added Lines]",
          "30:   mylog(\" gunzip error %d %s\\n\",err,stream.msg);",
          "",
          "---------------"
        ],
        "src/hdf/reader.h||src/hdf/reader.h": [
          "File: src/hdf/reader.h -> src/hdf/reader.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"../hrtf/mysofa.h\"",
          "14: #ifdef VDEBUG",
          "16: #else",
          "18: #endif",
          "20: #define UNUSED(x) (void)(x)",
          "",
          "[Removed Lines]",
          "15: #define log(...) {fprintf (stderr, \"%s:%d: \", __FILE__, __LINE__);fprintf (stderr, __VA_ARGS__);}",
          "17: #define log(...)",
          "",
          "[Added Lines]",
          "15: #define mylog(...) {fprintf (stderr, \"%s:%d: \", __FILE__, __LINE__);fprintf (stderr, __VA_ARGS__);}",
          "17: #define mylog(...)",
          "",
          "---------------"
        ],
        "src/hdf/superblock.c||src/hdf/superblock.c": [
          "File: src/hdf/superblock.c -> src/hdf/superblock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   if (superblock->size_of_offsets < 2 || superblock->size_of_offsets > 8 ||",
          "27:       superblock->size_of_lengths < 2 || superblock->size_of_lengths > 8) {",
          "29:         superblock->size_of_offsets, superblock->size_of_lengths);",
          "30:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "31:   }",
          "",
          "[Removed Lines]",
          "28:     log(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "[Added Lines]",
          "28:     mylog(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:       readValue(reader, superblock->size_of_offsets);",
          "41:   if (superblock->base_address != 0) {",
          "43:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "44:   }",
          "",
          "[Removed Lines]",
          "42:     log(\"base address is not null\\n\");",
          "",
          "[Added Lines]",
          "42:     mylog(\"base address is not null\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     return errno;",
          "49:   if (superblock->end_of_file_address != ftell(reader->fhd)) {",
          "51:     return MYSOFA_INVALID_FORMAT;",
          "52:   }",
          "",
          "[Removed Lines]",
          "50:     log(\"file size mismatch\\n\");",
          "",
          "[Added Lines]",
          "50:     mylog(\"file size mismatch\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:   if (fseek(reader->fhd, superblock->root_group_object_header_address,",
          "58:             SEEK_SET)) {",
          "60:         superblock->root_group_object_header_address);",
          "61:     return errno;",
          "62:   }",
          "",
          "[Removed Lines]",
          "59:     log(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "[Added Lines]",
          "59:     mylog(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:   if (superblock->size_of_offsets < 2 || superblock->size_of_offsets > 8 ||",
          "91:       superblock->size_of_lengths < 2 || superblock->size_of_lengths > 8) {",
          "93:         superblock->size_of_offsets, superblock->size_of_lengths);",
          "94:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "95:   }",
          "",
          "[Removed Lines]",
          "92:     log(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "[Added Lines]",
          "92:     mylog(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:   superblock->base_address = readValue(reader, superblock->size_of_offsets);",
          "107:   if (superblock->base_address != 0) {",
          "109:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "110:   }",
          "",
          "[Removed Lines]",
          "108:     log(\"base address is not null\\n\");",
          "",
          "[Added Lines]",
          "108:     mylog(\"base address is not null\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:   if (readValue(reader, 4) != 0) {",
          "128:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "129:   }",
          "",
          "[Removed Lines]",
          "127:     log(\"cache type must be 0\\n\");",
          "",
          "[Added Lines]",
          "127:     mylog(\"cache type must be 0\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "132:     return errno;",
          "134:   if (superblock->end_of_file_address != ftell(reader->fhd)) {",
          "136:   }",
          "140:   if (fseek(reader->fhd, superblock->root_group_object_header_address,",
          "141:             SEEK_SET)) {",
          "143:         superblock->root_group_object_header_address);",
          "144:     return errno;",
          "145:   }",
          "",
          "[Removed Lines]",
          "135:     log(\"file size mismatch\\n\");",
          "142:     log(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "[Added Lines]",
          "135:     mylog(\"file size mismatch\\n\");",
          "142:     mylog(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "155:   if (fread(buf, 1, 8, reader->fhd) != 8 ||",
          "156:       strncmp(\"\\211HDF\\r\\n\\032\\n\", buf, 8)) {",
          "158:     return MYSOFA_INVALID_FORMAT;",
          "159:   }",
          "",
          "[Removed Lines]",
          "157:     log(\"file does not have correct signature\");",
          "",
          "[Added Lines]",
          "157:     mylog(\"file does not have correct signature\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "169:   case 3:",
          "170:     return superblockRead2or3(reader, superblock);",
          "171:   default:",
          "173:     return MYSOFA_INVALID_FORMAT;",
          "174:   }",
          "175: }",
          "",
          "[Removed Lines]",
          "172:     log(\"superblock must have version 0, 1, 2, or 3 but has %d\\n\", version);",
          "",
          "[Added Lines]",
          "172:     mylog(\"superblock must have version 0, 1, 2, or 3 but has %d\\n\", version);",
          "",
          "---------------"
        ],
        "src/hrtf/reader.c||src/hrtf/reader.c": [
          "File: src/hrtf/reader.c -> src/hrtf/reader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   return err;",
          "73:  while (attr) {",
          "76:   if (!strcmp(attr->name, \"NAME\")",
          "77:     && attr->value && !strncmp(attr->value,",
          "",
          "[Removed Lines]",
          "74:   log(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "[Added Lines]",
          "74:   mylog(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:    }",
          "84:    p++;",
          "87:    return MYSOFA_OK;",
          "88:   }",
          "89:   attr = attr->next;",
          "",
          "[Removed Lines]",
          "86:    log(\"NETCDF DIM %u\\n\",*dim);",
          "",
          "[Added Lines]",
          "86:    mylog(\"NETCDF DIM %u\\n\",*dim);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:  struct MYSOFA_ATTRIBUTE *attr = dataobject->attributes;",
          "100:  while (attr) {",
          "103:   attr = attr->next;",
          "104:  }",
          "",
          "[Removed Lines]",
          "101:   log(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "[Added Lines]",
          "101:   mylog(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:    case 'S':",
          "174:    default:",
          "176:     goto error;",
          "177:    }",
          "178:    if (*err)",
          "",
          "[Removed Lines]",
          "175:     log(\"UNKNOWN SOFA VARIABLE %s\", dir->dataobject.name);",
          "",
          "[Added Lines]",
          "175:     mylog(\"UNKNOWN SOFA VARIABLE %s\", dir->dataobject.name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:  }",
          "184:  if (dimensionflags != 0x3f || hrtf->I != 1 || hrtf->C != 3) {",
          "186:   goto error;",
          "187:  }",
          "",
          "[Removed Lines]",
          "185:   log(\"dimensions are missing or wrong\\n\");",
          "",
          "[Added Lines]",
          "185:   mylog(\"dimensions are missing or wrong\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:  while (dir) {",
          "192:   if(!dir->dataobject.name) {",
          "194:   }",
          "195:   else if (!strcmp(dir->dataobject.name, \"ListenerPosition\")) {",
          "",
          "[Removed Lines]",
          "193:    log(\"SOFA VARIABLE IS NULL.\\n\");",
          "",
          "[Added Lines]",
          "193:    mylog(\"SOFA VARIABLE IS NULL.\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "213:   } else {",
          "214:    if (!(dir->dataobject.name[0] && !dir->dataobject.name[1]))",
          "216:   }",
          "217:   dir = dir->next;",
          "218:  }",
          "",
          "[Removed Lines]",
          "215:     log(\"UNKNOWN SOFA VARIABLE %s.\\n\", dir->dataobject.name);",
          "",
          "[Added Lines]",
          "215:     mylog(\"UNKNOWN SOFA VARIABLE %s.\\n\", dir->dataobject.name);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:   reader.fhd = stdin;",
          "240:  if (!reader.fhd) {",
          "243:   return NULL;",
          "244:  }",
          "",
          "[Removed Lines]",
          "241:   log(\"cannot open file %s\\n\", filename);",
          "",
          "[Added Lines]",
          "241:   mylog(\"cannot open file %s\\n\", filename);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19c7d8408bcdd78d67b3e946401907e7290eb1c4",
      "candidate_info": {
        "commit_hash": "19c7d8408bcdd78d67b3e946401907e7290eb1c4",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/19c7d8408bcdd78d67b3e946401907e7290eb1c4",
        "files": [
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hrtf/check.c",
          "src/tests/check.c",
          "src/tests/easy.c",
          "src/tests/interpolate.c",
          "src/tests/loudness.c",
          "src/tests/minphase.c",
          "src/tests/neighbors.c",
          "src/tests/sofa2json.c"
        ],
        "message": "Fixed external tests",
        "before_after_code_files": [
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hrtf/check.c||src/hrtf/check.c",
          "src/tests/check.c||src/tests/check.c",
          "src/tests/easy.c||src/tests/easy.c",
          "src/tests/interpolate.c||src/tests/interpolate.c",
          "src/tests/loudness.c||src/tests/loudness.c",
          "src/tests/minphase.c||src/tests/minphase.c",
          "src/tests/neighbors.c||src/tests/neighbors.c",
          "src/tests/sofa2json.c||src/tests/sofa2json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   int i, j;",
          "605:   uint16_t filter_identification_value, flags, number_client_data_values;",
          "606:   uint32_t client_data;",
          "607:   uint64_t maximum_compact_value, minimum_dense_value, number_of_entries,",
          "",
          "[Removed Lines]",
          "602: static int readOHDRHeaderMessageFilterPipeline(struct READER *reader) {",
          "604:   uint8_t filters;",
          "",
          "[Added Lines]",
          "602: static int readOHDRHeaderMessageFilterPipelineV1(struct READER *reader, uint8_t filters) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   UNUSED(number_of_entries);",
          "615:   UNUSED(length_of_entries);",
          "622:   }",
          "633:   for (i = 0; i < filters; i++) {",
          "634:     filter_identification_value = (uint16_t)readValue(reader, 2);",
          "",
          "[Removed Lines]",
          "617:   if (fgetc(reader->fhd) != 2) {",
          "619:     mylog(\"object OHDR filter pipeline message must have version 2\\n\");",
          "620:     return MYSOFA_INVALID_FORMAT;",
          "624:   filters = (uint8_t)fgetc(reader->fhd);",
          "625:   if (filters > 32) {",
          "627:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "628:           filters);",
          "629:     return MYSOFA_INVALID_FORMAT;",
          "631:   }",
          "",
          "[Added Lines]",
          "616:   for (i = 0; i < filters; i++) {",
          "617:     filter_identification_value = (uint16_t)readValue(reader, 2);",
          "618:     switch (filter_identification_value) {",
          "619:     case 1:",
          "620:     case 2:",
          "621:       break;",
          "622:     default:",
          "624:       mylog(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "625:             \"%d\\n\",",
          "626:             filter_identification_value);",
          "627:       return MYSOFA_INVALID_FORMAT;",
          "629:     }",
          "630:     mylog(\"  filter %d\\n\", filter_identification_value);",
          "631:     flags = (uint16_t)readValue(reader, 2);",
          "632:     number_client_data_values = (uint16_t)readValue(reader, 2);",
          "633:     if (number_client_data_values > 0x1000)",
          "634:       return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "636:     for (j = 0; j < number_client_data_values; j++) {",
          "637:       client_data = readValue(reader, 4);",
          "638:     }",
          "641:   return MYSOFA_OK;",
          "642: }",
          "645: static int readOHDRHeaderMessageFilterPipelineV2(struct READER *reader, uint8_t filters) {",
          "646:   int i, j;",
          "647:   uint16_t filter_identification_value, flags, number_client_data_values;",
          "648:   uint32_t client_data;",
          "649:   uint64_t maximum_compact_value, minimum_dense_value, number_of_entries,",
          "650:       length_of_entries;",
          "652:   UNUSED(flags);",
          "653:   UNUSED(client_data);",
          "654:   UNUSED(maximum_compact_value);",
          "655:   UNUSED(minimum_dense_value);",
          "656:   UNUSED(number_of_entries);",
          "657:   UNUSED(length_of_entries);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "658:   return MYSOFA_OK;",
          "659: }",
          "661: int readDataVar(struct READER *reader, struct DATAOBJECT *data,",
          "662:                 struct DATATYPE *dt, struct DATASPACE *ds) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687: static int readOHDRHeaderMessageFilterPipeline(struct READER *reader) {",
          "688:   uint8_t filterversion, filters;",
          "690:   filterversion = fgetc(reader->fhd);",
          "692:   filters = (uint8_t)fgetc(reader->fhd);",
          "693:   if (filters > 32) {",
          "695:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "696:           filters);",
          "697:     return MYSOFA_INVALID_FORMAT;",
          "699:   }",
          "703:   switch(filterversion) {",
          "704:   case 1:",
          "705:     return readOHDRHeaderMessageFilterPipelineV1(reader, filters);",
          "706:   case 2:",
          "707:     return readOHDRHeaderMessageFilterPipelineV2(reader, filters);",
          "708:   default:",
          "710:     mylog(\"object OHDR filter pipeline message must have version 2 not %d\\n\",filterversion);",
          "711:     return MYSOFA_INVALID_FORMAT;",
          "713:   }",
          "714: }",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   char buf[5], *name, *value;",
          "24:   int size, offset_size, length_size, err, len;",
          "25:   uint8_t typeandversion;",
          "28:   long store;",
          "29:   struct DIR *dir;",
          "30:   struct MYSOFA_ATTRIBUTE *attr;",
          "",
          "[Removed Lines]",
          "26:   uint64_t unknown, heap_header_address, block_offset, block_size, offset,",
          "27:       length;",
          "",
          "[Added Lines]",
          "26:   uint64_t unknown1, unknown2, unknown3, unknown4, heap_header_address,",
          "27:       block_offset, block_size, offset, length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   mylog(\" %d %\" PRIu64 \" %d\\n\", size, block_offset, offset_size);",
          "79:    |.FHDB.@.........|",
          "101:   00002730  00 00 00 00 00 00 00 46  48 44 42 00 97 02 00 00  |.......FHDB.....|",
          "",
          "[Removed Lines]",
          "81:    00003e10  00 00 00 83 8d ac f6",
          "83:    >03  00 0c 00 08 00 04 00 00  |................|",
          "85:    00003e20  43 6f 6e 76 65 6e 74 69  6f 6e 73 00",
          "87:    13 00 00 00  |Conventions.....|",
          "89:    00003e30  04 00 00 00 02 00 00 00  53 4f 46 41< 03",
          "90:    00 08 00  |........SOFA....| 00003e40  08 00 04 00 00 56 65 72  73 69 6f 6e",
          "91:    00 13 00 00  |.....Version....| 00003e50  00 03 00 00 00 02 00 00  00 30 2e",
          "92:    36 03 00 10 00  |.........0.6....| 00003e60  08 00 04 00 00 53 4f 46  41 43",
          "93:    6f 6e 76 65 6e 74  |.....SOFAConvent| 00003e70  69 6f 6e 73 00 13 00 00  00",
          "94:    13 00 00 00 02 00 00  |ions............| 00003e80  00 53 69 6d 70 6c 65 46 72",
          "95:    65 65 46 69 65 6c 64  |.SimpleFreeField| 00003e90  48 52 49 52 03 00 17 00 08",
          "96:    00 04 00 00 53 4f 46  |HRIR.........SOF| 00003ea0  41 43 6f 6e 76 65 6e 74 69",
          "97:    6f 6e 73 56 65 72 73  |AConventionsVers| 00003eb0  69 6f 6e 00 13 00 00 00 03",
          "98:    00 00 00 02 00 00 00  |ion.............|",
          "",
          "[Added Lines]",
          "78:    00003e00  00 46 48 44 42 00 40 02  00 00 00 00 00 00 00 00",
          "80:    00003e10  00 00 00 83 8d ac f6 03  00 0c 00 08 00 04 00 00",
          "81:    |................|",
          "82:    00003e20  43 6f 6e 76 65 6e 74 69  6f 6e 73 00 13 00 00 00",
          "83:    |Conventions.....|",
          "84:    00003e30  04 00 00 00 02 00 00 00  53 4f 46 41 03 00 08 00",
          "85:    |........SOFA....|",
          "86:    00003e40  08 00 04 00 00 56 65 72  73 69 6f 6e 00 13 00 00",
          "87:    |.....Version....|",
          "88:    00003e50  00 03 00 00 00 02 00 00  00 30 2e 36 03 00 10 00",
          "89:    |.........0.6....|",
          "90:    00003e60  08 00 04 00 00 53 4f 46  41 43 6f 6e 76 65 6e 74",
          "91:    |.....SOFAConvent|",
          "92:    00003e70  69 6f 6e 73 00 13 00 00  00 13 00 00 00 02 00 00",
          "93:    |ions............|",
          "94:    00003e80  00 53 69 6d 70 6c 65 46  72 65 65 46 69 65 6c 64",
          "95:    |.SimpleFreeField|",
          "96:    00003e90  48 52 49 52 03 00 17 00  08 00 04 00 00 53 4f 46",
          "97:    |HRIR.........SOF|",
          "98:    00003ea0  41 43 6f 6e 76 65 6e 74  69 6f 6e 73 56 65 72 73",
          "99:    |AConventionsVers|",
          "100:    00003eb0  69 6f 6e 00 13 00 00 00  03 00 00 00 02 00 00 00",
          "101:    |ion.............|",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:       }",
          "150:         value = NULL;",
          "152:         if (!(value = malloc(len + 1))) {",
          "153:           free(name);              // LCOV_EXCL_LINE",
          "154:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "148:       unknown = readValue(reader, 6);",
          "149:       if (unknown == 0x000000020200)",
          "151:       else if (unknown == 0x000000020000) {",
          "",
          "[Added Lines]",
          "151:       unknown1 = readValue(reader, 6);",
          "152:       if (unknown1 == 0x000000020200)",
          "154:       else if (unknown1 == 0x000000020000) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "160:         }",
          "161:         value[len] = 0;",
          "163:         if (!(value = malloc(5))) {",
          "164:           free(name);              // LCOV_EXCL_LINE",
          "165:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "166:         }",
          "167:         strcpy(value, \"\");",
          "168:       } else {",
          "170:         free(name);",
          "172:         return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "162:       } else if (unknown == 0x20000020000) {",
          "169:         mylog(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown);",
          "",
          "[Added Lines]",
          "165:       } else if (unknown1 == 0x20000020000) {",
          "172:         mylog(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:       attr->value = value;",
          "185:       attr->next = dataobject->attributes;",
          "186:       dataobject->attributes = attr;",
          "188:     } else if (typeandversion == 1) {",
          "192:       case 0:",
          "197:         len = fgetc(reader->fhd);",
          "198:         if (len < 0)",
          "",
          "[Removed Lines]",
          "190:       unknown = readValue(reader, 4);",
          "191:       switch (unknown) {",
          "194:         unknown = readValue(reader, 2);",
          "195:         assert(unknown == 0x0000);",
          "",
          "[Added Lines]",
          "193:       unknown2 = readValue(reader, 4);",
          "194:       switch (unknown2) {",
          "198:         unknown3 = readValue(reader, 2);",
          "199:         assert(unknown3 == 0x0000);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:           return errno; // LCOV_EXCL_LINE",
          "244:         break;",
          "245:       case 0x00080008:",
          "249:     00002750  00 08 00 08 00 5f 4e 43  50 72 6f 70 65 72 74 69",
          "253:     00002770  00 00 00 00 00 76 65 72  73 69 6f 6e 3d 31 7c 6e",
          "267:         if (!(name = malloc(MAX_NAME_LENGTH)))",
          "268:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "269:         len = -1;",
          "",
          "[Removed Lines]",
          "248:             > 01 00 0e  |...........\\....|",
          "250:     |....._NCProperti| 00002760  65 73 00 00 00 13 00 00  00 37 00 00 00 01 00",
          "251:     00  |es.......7......|",
          "254:     |.....version=1|n| 00002780  65 74 63 64 66 6c 69 62  76 65 72 73 69 6f 6e",
          "255:     3d  |etcdflibversion=| 00002790  34 2e 36 2e 31 7c 68 64  66 35 6c 69 62 76",
          "256:     65 72  |4.6.1|hdf5libver| 000027a0  73 69 6f 6e 3d 31 2e 31  30 2e 34 00 01",
          "257:     00 0c 00  |sion=1.10.4.....| 000027b0  08 00 08 00 43 6f 6e 76  65 6e 74 69",
          "258:     6f 6e 73 00  |....Conventions.| 000027c0  00 00 00 00 13 00 00 00  04 00 00",
          "259:     00 01 00 00 00  |................| 000027d0  00 00 00 00 53 4f 46 41  01 00",
          "260:     08 00 08 00 08 00  |....SOFA........| 000027e0  56 65 72 73 69 6f 6e 00  13",
          "261:     00 00 00 03 00 00 00  |Version.........| 000027f0  01 00 00 00 00 00 00 00",
          "262:     31 2e 30 01 00 10 00 08  |........1.0.....| 00002800  00 08 00 53 4f 46 41",
          "263:     43  6f 6e 76 65 6e 74 69 6f  |...SOFAConventio| 00002810  6e 73 00 13 00 00",
          "264:     00 13  00 00 00 01 00 00 00 00  |ns..............| 00002820  00 00 00 53 69",
          "265:     6d 70 6c  65 46 72 65 65 46 69 65  |...SimpleFreeFie|",
          "",
          "[Added Lines]",
          "251:                                                       01 00 0e",
          "252:     |...........\\....|",
          "254:     |....._NCProperti|",
          "255:     00002760  65 73 00 00 00 13 00 00  00 37 00 00 00 01 00 00",
          "256:     |es.......7......|",
          "258:     |.....version=1|n|",
          "259:     00002780  65 74 63 64 66 6c 69 62  76 65 72 73 69 6f 6e 3d",
          "260:     |etcdflibversion=|",
          "261:     00002790  34 2e 36 2e 31 7c 68 64  66 35 6c 69 62 76 65 72",
          "262:     |4.6.1|hdf5libver|",
          "263:     000027a0  73 69 6f 6e 3d 31 2e 31  30 2e 34 00 01 00 0c 00",
          "264:     |sion=1.10.4.....|",
          "265:     000027b0  08 00 08 00 43 6f 6e 76  65 6e 74 69 6f 6e 73 00",
          "266:     |....Conventions.|",
          "267:     000027c0  00 00 00 00 13 00 00 00  04 00 00 00 01 00 00 00",
          "268:     |................|",
          "269:     000027d0  00 00 00 00 53 4f 46 41  01 00 08 00 08 00 08 00",
          "270:     |....SOFA........|",
          "271:     000027e0  56 65 72 73 69 6f 6e 00  13 00 00 00 03 00 00 00",
          "272:     |Version.........|",
          "273:     000027f0  01 00 00 00 00 00 00 00 31 2e 30 01 00 10 00 08",
          "274:     |........1.0.....|",
          "275:     00002800  00 08 00 53 4f 46 41 43  6f 6e 76 65 6e 74 69 6f",
          "276:     |...SOFAConventio|",
          "277:     00002810  6e 73 00 13 00 00 00 13  00 00 00 01 00 00 00 00",
          "278:     |ns..............|",
          "279:     00002820  00 00 00 53 69 6d 70 6c  65 46 72 65 65 46 69 65",
          "280:     |...SimpleFreeFie|",
          "284:         00004610           08 00 04 00 41  75 74 68 6f 72 43 6f 6e",
          "285:         |.......AuthorCon|",
          "286:         00004620  74 61 63 74 00 00 00 13  00 00 00 01 00 00 00 02",
          "287:         |tact............|",
          "288:         00004630  00 00 02 00 00 00 00 01  00 08 00 08 00 04 00 43",
          "289:         |...............C|",
          "290:         00004640  6f 6d 6d 65 6e 74 00 13  00 00 00 01 00 00 00 02",
          "291:         |omment..........|",
          "292:         00004650  00 00 02 00 00 00 00 01  00 09 00 08 00 08 00 44",
          "293:         |...............D|",
          "294:         00004660  61 74 61 54 79 70 65 00  00 00 00 00 00 00 00 13",
          "295:         |ataType.........|",
          "296:         00004670  00 00 00 03 00 00 00 01  00 00 00 00 00 00 00 46",
          "297:         |...............F|",
          "298:         00004680  49 52 01 00 08 00 08 00  08 00 48 69 73 74 6f 72",
          "299:         |IR........Histor|",
          "300:         00004690  79 00 13 00 00 00 34 00  00 00 01 00 00 00 00 00",
          "301:         |y.....4.........|",
          "302:         000046a0  00 00 43 6f 6e 76 65 72  74 65 64 20 66 72 6f 6d",
          "303:         |..Converted from|",
          "304:         000046b0  20 74 68 65 20 4d 49 54  20 66 6f 72 6d 61 74 0a",
          "305:         | the MIT format.|",
          "306:         000046c0  55 70 67 72 61 64 65 64  20 66 72 6f 6d 20 53 4f",
          "307:         |Upgraded from SO|",
          "308:         000046d0  46 41 20 30 2e 36 01 00  08 00 08 00 08 00 4c 69",
          "309:         |FA 0.6........Li|",
          "310:         000046e0  63 65 6e 73 65 00 13 00  00 00 32 00 00 00 01 00",
          "311:         |cense.....2.....|",
          "312:         000046f0  00 00 00 00 00 00 4e 6f  20 6c 69 63 65 6e 73 65",
          "313:         |......No license|",
          "314:         00004700  20 70 72 6f 76 69 64 65  64 2c 20 61 73 6b 20 74  | provided,",
          "315:         ask t| 00004710  68 65 20 61 75 74 68 6f  72 20 66 6f 72 20 70 65  |he",
          "316:         author for pe| 00004720  72 6d 69 73 73 69 6f 6e  01 00 0d 00 08 00 04",
          "317:         00  |rmission........| 00004730  4f 72 67 61 6e 69 7a 61  74 69 6f 6e 00",
          "318:         00 00 00  |Organization....| 00004740  13 00 00 00 01 00 00 00  02 00 00",
          "319:         02 00 00 00 00  |................| 00004750  01 00 0b 00 08 00 04 00  52",
          "320:         65 66 65 72 65 6e 63  |........Referenc| 00004760  65 73 00 00 00 00 00",
          "321:         00  13 00 00 00 01 00 00 00  |es..............| 00004770  02 00 00 02 00",
          "322:         00 00 00  01 00 09 00 08 00 08 00  |................| 00004780  52 6f 6f",
          "323:         6d 54 79 70 65  00 00 00 00 00 00 00 00  |RoomType........| 00004790  13",
          "324:         00 00 00 0a 00 00 00  01 00 00 00 00 00 00 00  |................|",
          "325:         000047a0  66 72 65 65 20 66 69 65  6c 64 01 00 07 00 08 00  |free",
          "326:         field......| 000047b0  04 00 4f 72 69 67 69 6e  00 00 13 00 00 00 01 00",
          "327:         |..Origin........| 000047c0  00 00 02 00 00 02 00 00  00 00 01 00 06 00",
          "328:         08 00  |................| 000047d0  04 00 54 69 74 6c 65 00  00 00 13 00",
          "329:         00 00 01 00  |..Title.........| 000047e0  00 00 02 00 00 02 00 00  00 00",
          "330:         00 00 00 00 00 00  |................| 000047f0  00 00 00 00 00 00 00 00",
          "331:         00 00 00 00 00 00 00 00  |................| 00004800  00 54 52 45 45 01",
          "332:         00 01  00 ff ff ff ff ff ff ff  |.TREE...........|",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:         mylog(\"name %d %s\\n\", len, name);",
          "287:         if (readValue(reader, 3) != 0x000000) {",
          "291:         }",
          "293:         len = (int)readValue(reader, 4);",
          "294:         if (len > 0x1000 || len < 0) {",
          "298:         }",
          "305:         }",
          "306:         if (!(value = malloc(len + 1))) {",
          "307:           free(name);              // LCOV_EXCL_LINE",
          "308:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "288:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "289:           free(name);                              // LCOV_EXCL_LINE",
          "290:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "295:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "296:           free(name);                              // LCOV_EXCL_LINE",
          "297:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "300:         unknown = (int)readValue(reader, 8);",
          "301:         if (unknown != 0x00000001) {",
          "302:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "303:           free(name);                              // LCOV_EXCL_LINE",
          "304:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "",
          "[Added Lines]",
          "356:           mylog(\"FHDB type 3 unsupported values: 3bytes\"); // LCOV_EXCL_LINE",
          "357:           free(name);                                      // LCOV_EXCL_LINE",
          "358:           return MYSOFA_UNSUPPORTED_FORMAT;                // LCOV_EXCL_LINE",
          "363:           mylog(\"FHDB type 3 unsupported values: len \"); // LCOV_EXCL_LINE",
          "364:           free(name);                                    // LCOV_EXCL_LINE",
          "365:           return MYSOFA_UNSUPPORTED_FORMAT;              // LCOV_EXCL_LINE",
          "369:         unknown4 = (int)readValue(reader, 8);",
          "370:         if (unknown4 != 0x00000001 /*&& unknown4 != 0x02000002*/) {",
          "371:           mylog(\"FHDB type 3 unsupported values: unknown4 %08lX\\n\",",
          "372:                 unknown4);                  // LCOV_EXCL_LINE",
          "373:           free(name);                       // LCOV_EXCL_LINE",
          "374:           return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "333:       default:",
          "334:         mylog(\"FHDB type 1 unsupported values %08\" PRIX64 \" %\" PRIX64 \"\\n\",",
          "336:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "338:       }",
          "340:     } else if (typeandversion != 0) {",
          "342:       mylog(\"fractal head unknown type %d\\n\", typeandversion);",
          "",
          "[Removed Lines]",
          "335:               unknown, (uint64_t)ftell(reader->fhd) - 4);",
          "",
          "[Added Lines]",
          "408:               unknown2, (uint64_t)ftell(reader->fhd) - 4);",
          "",
          "---------------"
        ],
        "src/hrtf/check.c||src/hrtf/check.c": [
          "File: src/hrtf/check.c -> src/hrtf/check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <string.h>",
          "7: static int compareValues(struct MYSOFA_ARRAY *array, const float *compare,",
          "11:     return 0;",
          "15:   return 1;",
          "16: }",
          "",
          "[Removed Lines]",
          "8:                          int elements) {",
          "9:   int i;",
          "10:   if (array->values == NULL || array->elements != elements)",
          "12:   for (i = 0; i < elements; i++)",
          "13:     if (!fequals(array->values[i], compare[i]))",
          "14:       return 0;",
          "",
          "[Added Lines]",
          "8:                          int elements, int size)",
          "9: {",
          "10:   int i, j;",
          "11:   if (array->values == NULL || array->elements != elements * size)",
          "13:   for (j = 0; j < array->elements;)",
          "14:     for (i = 0; i < elements; i++, j++)",
          "15:       if (!fequals(array->values[j], compare[i]))",
          "16:         return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: static const float array001[] = {0, 0, 1};",
          "20: static const float array100[] = {1, 0, 0};",
          "",
          "[Removed Lines]",
          "22: MYSOFA_EXPORT int mysofa_check(struct MYSOFA_HRTF *hrtf) {",
          "",
          "[Added Lines]",
          "24: MYSOFA_EXPORT int mysofa_check(struct MYSOFA_HRTF *hrtf)",
          "25: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   if (!verifyAttribute(hrtf->attributes, \"Conventions\", \"SOFA\") ||",
          "52:       !verifyAttribute(hrtf->attributes, \"SOFAConventions\",",
          "53:                        \"SimpleFreeFieldHRIR\") ||",
          "59:     return MYSOFA_INVALID_ATTRIBUTES; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "56:       !verifyAttribute(hrtf->attributes, \"DataType\", \"FIR\") ||",
          "57:       !verifyAttribute(hrtf->attributes, \"RoomType\", \"free field\"))",
          "",
          "[Added Lines]",
          "58:       !verifyAttribute(hrtf->attributes, \"DataType\", \"FIR\"))",
          "59:     return MYSOFA_INVALID_ATTRIBUTES; // LCOV_EXCL_LINE",
          "61:   if (!verifyAttribute(hrtf->attributes, \"RoomType\", \"free field\") &&",
          "62:       !verifyAttribute(hrtf->attributes, \"RoomType\", \"reverberant\") &&",
          "63:       !verifyAttribute(hrtf->attributes, \"RoomType\", \"shoebox\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     if (!verifyAttribute(hrtf->ListenerView.attributes, \"DIMENSION_LIST\",",
          "73:                          \"I,C\"))",
          "77:         return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "81:         return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "83:       return MYSOFA_INVALID_COORDINATE_TYPE; // LCOV_EXCL_LINE",
          "84:   }",
          "",
          "[Removed Lines]",
          "71:   if (hrtf->ListenerView.values) {",
          "74:       return MYSOFA_INVALID_DIMENSION_LIST; // LCOV_EXCL_LINE",
          "75:     if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\", \"cartesian\")) {",
          "76:       if (!compareValues(&hrtf->ListenerView, array100, 3))",
          "78:     } else if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\",",
          "79:                                \"spherical\")) {",
          "80:       if (!compareValues(&hrtf->ListenerView, array001, 3))",
          "82:     } else",
          "",
          "[Added Lines]",
          "76:   if (hrtf->ListenerView.values)",
          "77:   {",
          "78:     int m = 1;",
          "81:     {",
          "82:       if (!verifyAttribute(hrtf->ListenerView.attributes, \"DIMENSION_LIST\",",
          "83:                            \"M,C\"))",
          "84:       {",
          "85:         return MYSOFA_INVALID_DIMENSION_LIST; // LCOV_EXCL_LINE",
          "86:       }",
          "87:       m = hrtf->M;",
          "88:     }",
          "89:     if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\", \"cartesian\"))",
          "90:     {",
          "91:       if (!compareValues(&hrtf->ListenerView, array100, 3, m))",
          "93:     }",
          "94:     else if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\",",
          "95:                              \"spherical\"))",
          "96:     {",
          "97:       if (!compareValues(&hrtf->ListenerView, array001, 3, m))",
          "99:     }",
          "100:     else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:  return MYSOFA_INVALID_FORMAT;",
          "105: #endif",
          "108:   if (!verifyAttribute(hrtf->EmitterPosition.attributes, \"DIMENSION_LIST\",",
          "109:                        \"E,C,I\"))",
          "112:     return MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED; // LCOV_EXCL_LINE",
          "115:     if (!verifyAttribute(hrtf->DataDelay.attributes, \"DIMENSION_LIST\", \"I,R\") &&",
          "116:         !verifyAttribute(hrtf->DataDelay.attributes, \"DIMENSION_LIST\", \"M,R\"))",
          "117:       return MYSOFA_ONLY_DELAYS_WITH_IR_OR_MR_SUPPORTED; // LCOV_EXCL_LINE",
          "118:   }",
          "121:    sampling rate of 48000 However, so far, I have not seen any sofa files with",
          "",
          "[Removed Lines]",
          "110:     return MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED; // LCOV_EXCL_LINE",
          "111:   if (!compareValues(&hrtf->EmitterPosition, array000, 3))",
          "114:   if (hrtf->DataDelay.values) {",
          "",
          "[Added Lines]",
          "125:   int m = 1;",
          "128:   {",
          "129:     if (!verifyAttribute(hrtf->EmitterPosition.attributes, \"DIMENSION_LIST\",",
          "130:                          \"E,C,M\"))",
          "131:     {",
          "132:       return MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED; // LCOV_EXCL_LINE",
          "133:     }",
          "134:     m = hrtf->M;",
          "135:   }",
          "137:   if (!compareValues(&hrtf->EmitterPosition, array000, 3, m))",
          "140:   if (hrtf->DataDelay.values)",
          "141:   {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:                        \"I\"))",
          "125:     return MYSOFA_ONLY_THE_SAME_SAMPLING_RATE_SUPPORTED; // LCOV_EXCL_LINE",
          "129:     return MYSOFA_RECEIVERS_WITH_RCI_SUPPORTED; // LCOV_EXCL_LINE",
          "130:   if (!verifyAttribute(hrtf->ReceiverPosition.attributes, \"Type\", \"cartesian\"))",
          "131:     return MYSOFA_RECEIVERS_WITH_CARTESIAN_SUPPORTED; // LCOV_EXCL_LINE",
          "133:   if (!fequals(hrtf->ReceiverPosition.values[0], 0.) ||",
          "135:       !fequals(hrtf->ReceiverPosition.values[2], 0.) ||",
          "136:       !fequals(hrtf->ReceiverPosition.values[3], 0.) ||",
          "155:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "159:   }",
          "",
          "[Removed Lines]",
          "127:   if (!verifyAttribute(hrtf->ReceiverPosition.attributes, \"DIMENSION_LIST\",",
          "128:                        \"R,C,I\"))",
          "134:       hrtf->ReceiverPosition.values[1] > 0 ||",
          "137:       !fequals(hrtf->ReceiverPosition.values[4],",
          "138:                -hrtf->ReceiverPosition.values[1]) ||",
          "139:       !fequals(hrtf->ReceiverPosition.values[5], 0.)) {",
          "141:     if (!(hrtf->ReceiverPosition.values[1] > 0 &&",
          "142:           hrtf->ReceiverPosition.values[0] < hrtf->ReceiverPosition.values[1] &&",
          "143:           hrtf->ReceiverPosition.values[0] >",
          "144:               -hrtf->ReceiverPosition.values[1] &&",
          "145:           hrtf->ReceiverPosition.values[2] < hrtf->ReceiverPosition.values[1] &&",
          "146:           hrtf->ReceiverPosition.values[2] >",
          "147:               -hrtf->ReceiverPosition.values[1] &&",
          "148:           hrtf->ReceiverPosition.values[4] < 0 &&",
          "149:           hrtf->ReceiverPosition.values[3] > hrtf->ReceiverPosition.values[4] &&",
          "150:           hrtf->ReceiverPosition.values[3] <",
          "151:               -hrtf->ReceiverPosition.values[1] &&",
          "152:           hrtf->ReceiverPosition.values[5] > hrtf->ReceiverPosition.values[4] &&",
          "153:           hrtf->ReceiverPosition.values[5] <",
          "154:               -hrtf->ReceiverPosition.values[1])) {",
          "156:     }",
          "157:   } else {",
          "158:     mylog(\"WARNING: SOFA file is written with wrong receiver positions.\");",
          "",
          "[Added Lines]",
          "153:   double receiverPositions[6];",
          "154:   if (verifyAttribute(hrtf->ReceiverPosition.attributes, \"DIMENSION_LIST\",",
          "155:                       \"R,C,I\"))",
          "156:   {",
          "157:     memcpy(receiverPositions, hrtf->ReceiverPosition.values,",
          "158:            6 * sizeof(double));",
          "159:   }",
          "160:   else if (verifyAttribute(hrtf->ReceiverPosition.attributes,",
          "161:                            \"DIMENSION_LIST\", \"R,C,M\"))",
          "162:   {",
          "163:     for (int i = 0; i < 6; i++)",
          "164:     {",
          "165:       int offset = i * hrtf->M;",
          "166:       receiverPositions[i] = hrtf->ReceiverPosition.values[offset];",
          "167:       for (int j = 1; j < hrtf->M; j++)",
          "168:         if (!fequals(receiverPositions[i],",
          "169:                      hrtf->ReceiverPosition.values[offset + j]))",
          "170:           return MYSOFA_RECEIVERS_WITH_RCI_SUPPORTED; // LCOV_EXCL_LINE",
          "171:     }",
          "172:   }",
          "173:   else",
          "174:   {",
          "176:   }",
          "184:       !fequals(hrtf->ReceiverPosition.values[5], 0.))",
          "185:   {",
          "186:     return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "187:   }",
          "188:   if (!fequals(hrtf->ReceiverPosition.values[4],",
          "189:                -hrtf->ReceiverPosition.values[1]))",
          "190:     return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "191:   if (hrtf->ReceiverPosition.values[1] < 0)",
          "192:   {",
          "193:     if (!verifyAttribute(hrtf->attributes, \"APIName\",",
          "194:                          \"ARI SOFA API for Matlab/Octave\"))",
          "197:     const char *version = mysofa_getAttribute(hrtf->attributes, \"APIVersion\");",
          "198:     if (version == NULL)",
          "199:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "201:     int a, b, c;",
          "202:     int res = sscanf(version, \"%d.%d.%d\", &a, &b, &c);",
          "203:     if (res != 3)",
          "204:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "205:     if (a > 1)",
          "206:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "207:     if (a == 1 && b > 1)",
          "208:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "209:     if (a == 1 && b == 1 && c > 0)",
          "210:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "212:     if (hrtf->ReceiverPosition.values[1] >= 0)",
          "213:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "217:     mylog(\"WARNING: SOFA file is written with wrong receiver positions. %d \"",
          "218:           \"%d.%d.%d %f<>%f\\n\",",
          "219:           res, a, b, c, hrtf->ReceiverPosition.values[1],",
          "220:           hrtf->ReceiverPosition.values[4]);",
          "",
          "---------------"
        ],
        "src/tests/check.c||src/tests/check.c": [
          "File: src/tests/check.c -> src/tests/check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: void test_check() {",
          "31:   check(\"tests/Pulse.sofa\");",
          "33: }",
          "",
          "[Removed Lines]",
          "32:   check(\"share/MIT_KEMAR_normal_pinna.sofa\");",
          "",
          "[Added Lines]",
          "32:   check(\"tests/MIT_KEMAR_normal_pinna.old.sofa\");",
          "",
          "---------------"
        ],
        "src/tests/easy.c||src/tests/easy.c": [
          "File: src/tests/easy.c -> src/tests/easy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   int err = 0;",
          "20:   int filterlength;",
          "23:                      &err);",
          "24:   if (!easy) {",
          "25:     CU_FAIL_FATAL(\"Error reading file.\");",
          "",
          "[Removed Lines]",
          "22:   easy = mysofa_open(\"share/MIT_KEMAR_normal_pinna.sofa\", 8000., &filterlength,",
          "",
          "[Added Lines]",
          "22:   easy = mysofa_open(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", 8000., &filterlength,",
          "",
          "---------------"
        ],
        "src/tests/interpolate.c||src/tests/interpolate.c": [
          "File: src/tests/interpolate.c -> src/tests/interpolate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   int neighborhood[6] = {-1, -1, -1, -1, -1, -1};",
          "16:   float c[3];",
          "20:   if (!hrtf) {",
          "21:     CU_FAIL_FATAL(\"Error reading file.\");",
          "",
          "[Removed Lines]",
          "18:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "18:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------"
        ],
        "src/tests/loudness.c||src/tests/loudness.c": [
          "File: src/tests/loudness.c -> src/tests/loudness.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   CU_ASSERT(fequals(factor, 1));",
          "26:   mysofa_free(hrtf);",
          "29:   if (!hrtf) {",
          "30:     CU_FAIL_FATAL(\"Error reading file.\");",
          "31:   }",
          "33:   factor = mysofa_loudness(hrtf);",
          "34: #ifdef VDEBUG",
          "36: #endif",
          "37:   CU_ASSERT(fequals(factor, 1.116589));",
          "39:   factor = mysofa_loudness(hrtf);",
          "40: #ifdef VDEBUG",
          "42:          factor);",
          "43: #endif",
          "44:   CU_ASSERT(fequals(factor, 1.));",
          "",
          "[Removed Lines]",
          "28:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "35:   printf(\"loudness of MIT_KEMAR_normal_pinna.sofa %f\\n\", factor);",
          "41:   printf(\"loudness of MIT_KEMAR_normal_pinna.sofa after normalization %f\\n\",",
          "",
          "[Added Lines]",
          "28:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "35:   printf(\"loudness of MIT_KEMAR_normal_pinna.old.sofa %f\\n\", factor);",
          "41:   printf(\"loudness of MIT_KEMAR_normal_pinna.old.sofa after normalization %f\\n\",",
          "",
          "---------------"
        ],
        "src/tests/minphase.c||src/tests/minphase.c": [
          "File: src/tests/minphase.c -> src/tests/minphase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     CU_ASSERT(fequals(hrtf->DataIR.values[i], 1));",
          "28:   mysofa_free(hrtf);",
          "31:   if (!hrtf) {",
          "32:     CU_FAIL_FATAL(\"Error reading file.\");",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "30:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   CU_ASSERT(len == 361);",
          "40:   mysofa_free(hrtf);",
          "43:   if (!hrtf) {",
          "44:     CU_FAIL_FATAL(\"Error reading file.\");",
          "45:   }",
          "",
          "[Removed Lines]",
          "42:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "42:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   CU_ASSERT(len == 463);",
          "52:   mysofa_free(hrtf);",
          "55:   if (!hrtf) {",
          "56:     CU_FAIL_FATAL(\"Error reading file.\");",
          "57:   }",
          "",
          "[Removed Lines]",
          "54:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "54:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------"
        ],
        "src/tests/neighbors.c||src/tests/neighbors.c": [
          "File: src/tests/neighbors.c -> src/tests/neighbors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   const char *dir = \"RLUDFB\";",
          "18: #endif",
          "21:   if (!hrtf) {",
          "22:     CU_FAIL_FATAL(\"Error reading file.\");",
          "23:     return;",
          "",
          "[Removed Lines]",
          "20:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "20:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------"
        ],
        "src/tests/sofa2json.c||src/tests/sofa2json.c": [
          "File: src/tests/sofa2json.c -> src/tests/sofa2json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     result = \"invalid coordinate type\";",
          "56:     break;",
          "57:   case MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED:",
          "59:     break;",
          "60:   case MYSOFA_ONLY_DELAYS_WITH_IR_OR_MR_SUPPORTED:",
          "61:     result = \"only delays with IR or MR dimensions spported\";",
          "",
          "[Removed Lines]",
          "58:     result = \"only emtter with ECI dimensions supported\";",
          "",
          "[Added Lines]",
          "58:     result = \"only emitter with ECI dimensions supported\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a1e678f26bd9bfbf3cb23b5376aa9bb0944376a",
      "candidate_info": {
        "commit_hash": "3a1e678f26bd9bfbf3cb23b5376aa9bb0944376a",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/3a1e678f26bd9bfbf3cb23b5376aa9bb0944376a",
        "files": [
          "src/hdf/fractalhead.c"
        ],
        "message": "Fixed issue with string length 0",
        "before_after_code_files": [
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:           return errno; // LCOV_EXCL_LINE",
          "248:         break;",
          "249:       case 0x00080008:",
          "284:         00004610           08 00 04 00 41  75 74 68 6f 72 43 6f 6e",
          "285:         |.......AuthorCon|",
          "",
          "[Removed Lines]",
          "251:                                                       01 00 0e",
          "252:     |...........\\....|",
          "253:     00002750  00 08 00 08 00 5f 4e 43  50 72 6f 70 65 72 74 69",
          "254:     |....._NCProperti|",
          "255:     00002760  65 73 00 00 00 13 00 00  00 37 00 00 00 01 00 00",
          "256:     |es.......7......|",
          "257:     00002770  00 00 00 00 00 76 65 72  73 69 6f 6e 3d 31 7c 6e",
          "258:     |.....version=1|n|",
          "259:     00002780  65 74 63 64 66 6c 69 62  76 65 72 73 69 6f 6e 3d",
          "260:     |etcdflibversion=|",
          "261:     00002790  34 2e 36 2e 31 7c 68 64  66 35 6c 69 62 76 65 72",
          "262:     |4.6.1|hdf5libver|",
          "263:     000027a0  73 69 6f 6e 3d 31 2e 31  30 2e 34 00 01 00 0c 00",
          "264:     |sion=1.10.4.....|",
          "265:     000027b0  08 00 08 00 43 6f 6e 76  65 6e 74 69 6f 6e 73 00",
          "266:     |....Conventions.|",
          "267:     000027c0  00 00 00 00 13 00 00 00  04 00 00 00 01 00 00 00",
          "268:     |................|",
          "269:     000027d0  00 00 00 00 53 4f 46 41  01 00 08 00 08 00 08 00",
          "270:     |....SOFA........|",
          "271:     000027e0  56 65 72 73 69 6f 6e 00  13 00 00 00 03 00 00 00",
          "272:     |Version.........|",
          "273:     000027f0  01 00 00 00 00 00 00 00 31 2e 30 01 00 10 00 08",
          "274:     |........1.0.....|",
          "275:     00002800  00 08 00 53 4f 46 41 43  6f 6e 76 65 6e 74 69 6f",
          "276:     |...SOFAConventio|",
          "277:     00002810  6e 73 00 13 00 00 00 13  00 00 00 01 00 00 00 00",
          "278:     |ns..............|",
          "279:     00002820  00 00 00 53 69 6d 70 6c  65 46 72 65 65 46 69 65",
          "280:     |...SimpleFreeFie|",
          "",
          "[Added Lines]",
          "251:                                                     01 00 0e",
          "252:   |...........\\....|",
          "253:   00002750  00 08 00 08 00 5f 4e 43  50 72 6f 70 65 72 74 69",
          "254:   |....._NCProperti|",
          "255:   00002760  65 73 00 00 00 13 00 00  00 37 00 00 00 01 00 00",
          "256:   |es.......7......|",
          "257:   00002770  00 00 00 00 00 76 65 72  73 69 6f 6e 3d 31 7c 6e",
          "258:   |.....version=1|n|",
          "259:   00002780  65 74 63 64 66 6c 69 62  76 65 72 73 69 6f 6e 3d",
          "260:   |etcdflibversion=|",
          "261:   00002790  34 2e 36 2e 31 7c 68 64  66 35 6c 69 62 76 65 72",
          "262:   |4.6.1|hdf5libver|",
          "263:   000027a0  73 69 6f 6e 3d 31 2e 31  30 2e 34 00 01 00 0c 00",
          "264:   |sion=1.10.4.....|",
          "265:   000027b0  08 00 08 00 43 6f 6e 76  65 6e 74 69 6f 6e 73 00",
          "266:   |....Conventions.|",
          "267:   000027c0  00 00 00 00 13 00 00 00  04 00 00 00 01 00 00 00",
          "268:   |................|",
          "269:   000027d0  00 00 00 00 53 4f 46 41  01 00 08 00 08 00 08 00",
          "270:   |....SOFA........|",
          "271:   000027e0  56 65 72 73 69 6f 6e 00  13 00 00 00 03 00 00 00",
          "272:   |Version.........|",
          "273:   000027f0  01 00 00 00 00 00 00 00 31 2e 30 01 00 10 00 08",
          "274:   |........1.0.....|",
          "275:   00002800  00 08 00 53 4f 46 41 43  6f 6e 76 65 6e 74 69 6f",
          "276:   |...SOFAConventio|",
          "277:   00002810  6e 73 00 13 00 00 00 13  00 00 00 01 00 00 00 00",
          "278:   |ns..............|",
          "279:   00002820  00 00 00 53 69 6d 70 6c  65 46 72 65 65 46 69 65",
          "280:   |...SimpleFreeFie|",
          "282:       case 0x00040008:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:         unknown4 = (int)readValue(reader, 8);",
          "371:           mylog(\"FHDB type 3 unsupported values: unknown4 %08lX\\n\",",
          "372:                 unknown4);                  // LCOV_EXCL_LINE",
          "373:           free(name);                       // LCOV_EXCL_LINE",
          "374:           return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "375:         }",
          "379:         if (!(value = malloc(len + 1))) {",
          "380:           free(name);              // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "370:         if (unknown4 != 0x00000001 /*&& unknown4 != 0x02000002*/) {",
          "",
          "[Added Lines]",
          "370:         if (unknown4 != 0x00000001 && unknown4 != 0x02000002) {",
          "376:         if (unknown4 == 0x02000002)",
          "377:           len = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}