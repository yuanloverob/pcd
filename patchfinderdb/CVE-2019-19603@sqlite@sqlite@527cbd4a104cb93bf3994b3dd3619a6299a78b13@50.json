{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04c6747a804862554811113524b8a70d3a0675e1",
      "candidate_info": {
        "commit_hash": "04c6747a804862554811113524b8a70d3a0675e1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04c6747a804862554811113524b8a70d3a0675e1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqliteInt.h",
          "src/vdbeapi.c"
        ],
        "message": "Performance improvement in sqlite3_step() by creating a new mTrace flag for the legacy xProfile pointer that is set by sqlite3_profile().\n\nFossilOrigin-Name: e28584e8bc7b7405380064b60523fa6191f827f74075f6d117eb7732d752ba5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 893448265299f4c70c32c8e92ea66f8d33c1c213b21701f73fa3815514cd5ef6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1996:   sqlite3_mutex_enter(db->mutex);",
          "1997:   pOld = db->pTraceArg;",
          "1998:   db->mTrace = xTrace ? SQLITE_TRACE_LEGACY : 0;",
          "1999:   db->xTrace = (int(*)(u32,void*,void*,void*))xTrace;",
          "2000:   db->pTraceArg = pArg;",
          "2001:   sqlite3_mutex_leave(db->mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1999:   if( db->xProfile ) db->mTrace |= SQLITE_TRACE_XPROFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2020:   if( mTrace==0 ) xTrace = 0;",
          "2021:   if( xTrace==0 ) mTrace = 0;",
          "2022:   db->mTrace = mTrace;",
          "2023:   db->xTrace = xTrace;",
          "2024:   db->pTraceArg = pArg;",
          "2025:   sqlite3_mutex_leave(db->mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2024: #ifndef SQLITE_OMIT_DEPRECATED",
          "2025:   if( db->xProfile ) db->mTrace |= SQLITE_TRACE_XPROFILE;",
          "2026: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2052:   pOld = db->pProfileArg;",
          "2053:   db->xProfile = xProfile;",
          "2054:   db->pProfileArg = pArg;",
          "2055:   sqlite3_mutex_leave(db->mutex);",
          "2056:   return pOld;",
          "2057: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2059:   db->mTrace &= SQLITE_TRACE_NONLEGACY_MASK;",
          "2060:   if( db->xProfile ) db->mTrace |= SQLITE_TRACE_XPROFILE;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1360: #else",
          "",
          "[Removed Lines]",
          "1359: #define SQLITE_TRACE_LEGACY  0x80",
          "1361: #define SQLITE_TRACE_LEGACY  0",
          "",
          "[Added Lines]",
          "1362: #define SQLITE_TRACE_LEGACY          0",
          "1363: #define SQLITE_TRACE_XPROFILE        0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424: #ifndef SQLITE_OMIT_DEPRECATED",
          "1427: #endif",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   sqlite3_int64 iNow;",
          "63:   sqlite3_int64 iElapse;",
          "64:   assert( p->startTime>0 );",
          "66:   assert( db->init.busy==0 );",
          "67:   assert( p->zSql!=0 );",
          "68:   sqlite3OsCurrentTimeInt64(db->pVfs, &iNow);",
          "69:   iElapse = (iNow - p->startTime)*1000000;",
          "70:   if( db->xProfile ){",
          "71:     db->xProfile(db->pProfileArg, p->zSql, iElapse);",
          "72:   }",
          "73:   if( db->mTrace & SQLITE_TRACE_PROFILE ){",
          "74:     db->xTrace(SQLITE_TRACE_PROFILE, db->pTraceArg, p, (void*)&iElapse);",
          "75:   }",
          "",
          "[Removed Lines]",
          "65:   assert( db->xProfile!=0 || (db->mTrace & SQLITE_TRACE_PROFILE)!=0 );",
          "",
          "[Added Lines]",
          "65:   assert( (db->mTrace & (SQLITE_TRACE_PROFILE|SQLITE_TRACE_XPROFILE))!=0 );",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "74: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:     );",
          "604: #ifndef SQLITE_OMIT_TRACE",
          "606:         && !db->init.busy && p->zSql ){",
          "607:       sqlite3OsCurrentTimeInt64(db->pVfs, &p->startTime);",
          "608:     }else{",
          "",
          "[Removed Lines]",
          "605:     if( (db->xProfile || (db->mTrace & SQLITE_TRACE_PROFILE)!=0)",
          "",
          "[Added Lines]",
          "607:     if( (db->mTrace & (SQLITE_TRACE_PROFILE|SQLITE_TRACE_XPROFILE))!=0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ab61d7052d3d384e18f99af8dc4d70b42f93153",
      "candidate_info": {
        "commit_hash": "6ab61d7052d3d384e18f99af8dc4d70b42f93153",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ab61d7052d3d384e18f99af8dc4d70b42f93153",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/resolve.c",
          "src/update.c",
          "src/vdbe.c"
        ],
        "message": "Minor adjustments for clarity and test coverage.\n\nFossilOrigin-Name: 30065716878d4058e75eb510b0b27b68e5193d04625eb173210de8061f20f499",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/resolve.c||src/resolve.c",
          "src/update.c||src/update.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 812467fbf04ce00228a8381a5eee471e4e35cc63184a4538129fcd70b7cec979",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:   u8 eType = COLFLAG_VIRTUAL;",
          "1629:   Table *pTab = pParse->pNewTable;",
          "1630:   Column *pCol;",
          "1632:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1633:   if( IN_DECLARE_VTAB ){",
          "1634:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "",
          "[Removed Lines]",
          "1631:   if( pTab==0 ) goto generated_done;",
          "",
          "[Added Lines]",
          "1631:   if( NEVER(pTab==0) ) goto generated_done;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:   if( pColumn==0 && nColumn>0 ){",
          "858:     ipkColumn = pTab->iPKey;",
          "859: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "861:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "863:       for(i=ipkColumn-1; i>=0; i--){",
          "864:         if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "865:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "867:           ipkColumn--;",
          "868:         }",
          "869:       }",
          "",
          "[Removed Lines]",
          "860:     if( pTab->tabFlags & TF_HasGenerated ){",
          "862:       testcase( pTab->tabFlags & TF_HasGenerated );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "",
          "[Added Lines]",
          "860:     if( ipkColumn>=0 && (pTab->tabFlags & TF_HasGenerated)!=0 ){",
          "862:       testcase( pTab->tabFlags & TF_HasStored );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2414:     }",
          "2415: #endif",
          "2416:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2417:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2419:     }",
          "2420:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2422:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2416: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "2446:       }",
          "2447:     }",
          "2448: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2438:       }",
          "2439:     }",
          "2448:   }",
          "2449:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2450:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "2446:       }",
          "2447:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "637: #endif",
          "638:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "639:   }",
          "",
          "[Removed Lines]",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "[Added Lines]",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         }",
          "315: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "316:         else if( pTab->aCol[j].colFlags & COLFLAG_GENERATED ){",
          "319:           sqlite3ErrorMsg(pParse,",
          "320:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "321:              pTab->aCol[j].zName);",
          "",
          "[Removed Lines]",
          "317:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "317:           testcase( pTab->aCol[j].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[j].colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3375:       p->rc = rc = SQLITE_BUSY;",
          "3376:       goto vdbe_return;",
          "3377:     }",
          "3379:     sqlite3CloseSavepoints(db);",
          "3380:     if( p->rc==SQLITE_OK ){",
          "3381:       rc = SQLITE_DONE;",
          "",
          "[Removed Lines]",
          "3378:     assert( db->nStatement==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "269d322de2df4adb550acb17086e0e61596feffb",
      "candidate_info": {
        "commit_hash": "269d322de2df4adb550acb17086e0e61596feffb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/269d322de2df4adb550acb17086e0e61596feffb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/treeview.c",
          "test/rowvalue.test"
        ],
        "message": "When a vector comparison appears in the WHERE clause and the constraint side has a COLLATE clause on the first term of the vector, be sure to honor that COLLATE clause.  Ticket [135c9da7513e5a97].\n\nFossilOrigin-Name: 978b2d20cf95d0b7143e3104ce1e9d5c85002867b554dc6b21deb528b730bbc7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/treeview.c||src/treeview.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c118617cf08e17a6edfdfba86e3fc49132a780990b68b52724c2aaeac85f506",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:       p = p->pLeft;",
          "176:       continue;",
          "177:     }",
          "178:     if( op==TK_COLLATE ){",
          "179:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "180:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     if( op==TK_VECTOR ){",
          "179:       p = p->x.pList->a[0].pExpr;",
          "180:       continue;",
          "181:     }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1072:   if( A ){",
          "1073:     A->x.pList = pList;",
          "1074:   }else{",
          "1075:     sqlite3ExprListDelete(pParse->db, pList);",
          "1076:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:     if( pList->nExpr ){",
          "1075:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1076:     }",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       break;",
          "662:     }",
          "663:     case TK_VECTOR: {",
          "665:       break;",
          "666:     }",
          "667:     case TK_SELECT_COLUMN: {",
          "",
          "[Removed Lines]",
          "664:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, \"VECTOR\");",
          "",
          "[Added Lines]",
          "664:       char *z = sqlite3_mprintf(\"VECTOR%s\",zFlgs);",
          "665:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, z);",
          "666:       sqlite3_free(z);",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "598: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: # 2019-10-23 Ticket 135c9da7513e5a97",
          "599: do_execsql_test 25.10 {",
          "600:   DROP TABLE t0;",
          "601:   CREATE TABLE t0(c0 UNIQUE);",
          "602:   INSERT INTO t0(c0) VALUES('a');",
          "603:   SELECT (t0.c0, 0) < ('B' COLLATE NOCASE, 0) FROM t0;",
          "604:   SELECT 2 FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0);",
          "605: } {1 2}",
          "606: do_execsql_test 25.20 {",
          "607:   SELECT ('B' COLLATE NOCASE, 0)> (t0.c0, 0) FROM t0;",
          "608:   SELECT 2 FROM t0 WHERE ('B' COLLATE NOCASE, 0)> (t0.c0, 0);",
          "609: } {1 2}",
          "610: do_execsql_test 25.30 {",
          "611:   SELECT ('B', 0)> (t0.c0 COLLATE nocase, 0) FROM t0;",
          "612:   SELECT 2 FROM t0 WHERE ('B', 0)> (t0.c0 COLLATE nocase, 0);",
          "613: } {1 2}",
          "614: do_execsql_test 25.40 {",
          "615:   SELECT (t0.c0 COLLATE nocase, 0) < ('B', 0) FROM t0;",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
      "candidate_info": {
        "commit_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35a38e0836e64f9df6ab487a6844724e94fadce3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 63c67a54b4d3e501f3059dcdfc6bb50c6b8dad63a34eb773e4408d9e4e780d7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83c2adffbfb6dcdddb38ad9f888647b0e39fa24dc0bff344238e1f75a6c7d2ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
      "candidate_info": {
        "commit_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a8614259c17898e60a8f8da73d14bc404c0ebded",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Add the --progress, --using, and -q options to the index_usage utility program.\n\nFossilOrigin-Name: a5e6be7cbc5d931308ddcc073c9cd6275c9711cae055d72a7c4aa71c1d15914c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 19c739b4a8a43d894e37a99fa34838f3e3fa1fe0d019aefbc33f1d38d76af1a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string.h>",
          "23: static void usage(const char *argv0){",
          "25:   printf(",
          "26:     \"DATABASE is an SQLite database against which various statements\\n\"",
          "27:     \"have been run.  The SQL text is stored in LOG.  LOG is an SQLite\\n\"",
          "",
          "[Removed Lines]",
          "24:   printf(\"Usage: %s DATABASE LOG\\n\\n\", argv0);",
          "",
          "[Added Lines]",
          "24:   printf(\"Usage: %s [OPTIONS] DATABASE LOG\\n\\n\", argv0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     \"DATABASE only needs to contain the schema used by the statements in\\n\"",
          "37:     \"LOG. The content can be removed from DATABASE.\\n\"",
          "38:   );",
          "39:   printf(\"\\nAnalysis will be done by SQLite version %s dated %.20s\\n\"",
          "40:          \"checkin number %.40s. Different versions\\n\"",
          "41:          \"of SQLite might use different indexes.\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   printf(",
          "40:     \"\\nOPTIONS:\\n\\n\"",
          "41:     \"    --progress N   Show a progress message after every N input rows\\n\"",
          "42:     \"    -q             Omit error message when parsing log entries\\n\"",
          "43:     \"    --using NAME   Print SQL statements that use index NAME\\n\"",
          "44:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   char *zSql;",
          "50:   int nErr = 0;",
          "51:   int rc;",
          "53:   if( argc!=3 ) usage(argv[0]);",
          "54:   rc = sqlite3_open_v2(argv[1], &db, SQLITE_OPEN_READONLY, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   int bQuiet = 0;",
          "59:   int i, j;",
          "60:   const char *zUsing = 0;",
          "61:   sqlite3_stmt *pIncrCnt = 0;",
          "62:   int nRow = 0;",
          "63:   int iProgress = 0;",
          "65:   for(i=j=1; i<argc; i++){",
          "66:     const char *z = argv[i];",
          "67:     if( z[0]=='-' ){",
          "68:       z++;",
          "69:       if( z[0]=='-' ) z++;",
          "70:       if( strcmp(z,\"progress\")==0 ){",
          "71:         if( i+1<argc ){",
          "72:           iProgress = strtol(argv[++i],0,0);",
          "73:           continue;",
          "74:         }",
          "75:         printf(\"The --progress option requires an argument\\n\");",
          "76:         exit(0);",
          "77:       }",
          "78:       if( strcmp(z,\"q\")==0 ){",
          "79:         bQuiet = 1;",
          "80:         continue;",
          "81:       }",
          "82:       if( strcmp(z,\"using\")==0 ){",
          "83:         if( i+1<argc ){",
          "84:           zUsing = argv[++i];",
          "85:           continue;",
          "86:         }",
          "87:         printf(\"The --using option requires an argument\\n\");",
          "88:         exit(0);",
          "89:       }",
          "90:       if( strcmp(z, \"help\")==0 || strcmp(z, \"?\")==0 ){",
          "91:         usage(argv[0]);",
          "92:       }",
          "93:       printf(\"Unknown command-line option: \\\"%s\\\"\\n\", argv[i]);",
          "94:       exit(0);",
          "95:     }else{",
          "96:       if( j<i ) argv[j++] = argv[i];",
          "97:     }",
          "98:   }",
          "99:   argc = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:   pStmt = 0;",
          "67:   rc = sqlite3_exec(db,",
          "68:      \"CREATE TABLE temp.idxu(\\n\"",
          "71:      \"  cnt INT,\\n\"",
          "72:      \"  PRIMARY KEY(idx)\\n\"",
          "73:      \") WITHOUT ROWID;\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "69:      \"  tbl TEXT,\\n\"",
          "70:      \"  idx TEXT,\\n\"",
          "",
          "[Added Lines]",
          "117:      \"  tbl TEXT COLLATE nocase,\\n\"",
          "118:      \"  idx TEXT COLLATE nocase,\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:     goto errorOut;",
          "101:   }",
          "104:   while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "105:     const char *zLog = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   rc = sqlite3_prepare_v2(db,",
          "152:     \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx=?1\",",
          "153:     -1, &pIncrCnt, 0);",
          "154:   if( rc ){",
          "155:     printf(\"Cannot prepare a statement to increment a counter for \"",
          "156:            \"indexes used\\n\");",
          "157:     goto errorOut;",
          "158:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:     rc = sqlite3_prepare_v2(db, zSql, -1, &pS2, 0);",
          "110:     sqlite3_free(zSql);",
          "111:     if( rc ){",
          "113:              sqlite3_column_int(pStmt, 1), zLog, sqlite3_errmsg(db));",
          "114:       nErr++;",
          "115:     }else{",
          "116:       while( sqlite3_step(pS2)==SQLITE_ROW ){",
          "117:         const char *zExplain = (const char*)sqlite3_column_text(pS2,3);",
          "118:         const char *z1, *z2;",
          "",
          "[Removed Lines]",
          "112:       printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "",
          "[Added Lines]",
          "169:       if( !bQuiet ){",
          "170:         printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "172:         fflush(stdout);",
          "173:       }",
          "176:       nRow++;",
          "177:       if( iProgress>0 && (nRow%iProgress)==0 ){",
          "178:         printf(\"%d...\\n\", nRow);",
          "179:         fflush(stdout);",
          "180:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:         z1 += 13;",
          "124:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "125:         n = z2 - z1;",
          "132:       }",
          "133:     }",
          "134:     sqlite3_finalize(pS2);",
          "",
          "[Removed Lines]",
          "126:         zSql = sqlite3_mprintf(",
          "127:           \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx='%.*q'\", n, z1",
          "128:         );",
          "130:         sqlite3_exec(db, zSql, 0, 0, 0);",
          "131:         sqlite3_free(zSql);",
          "",
          "[Added Lines]",
          "191:         if( zUsing && sqlite3_strnicmp(zUsing, z1, n)==0 ){",
          "192:           printf(\"Using %s:\\n%s\\n\", zUsing, zLog);",
          "193:           fflush(stdout);",
          "194:         }",
          "195:         sqlite3_bind_text(pIncrCnt,1,z1,n,SQLITE_STATIC);",
          "196:         sqlite3_step(pIncrCnt);",
          "197:         sqlite3_reset(pIncrCnt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "160:   pStmt = 0;",
          "162: errorOut:",
          "163:   sqlite3_finalize(pStmt);",
          "164:   sqlite3_close(db);",
          "165:   return nErr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   sqlite3_finalize(pIncrCnt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}