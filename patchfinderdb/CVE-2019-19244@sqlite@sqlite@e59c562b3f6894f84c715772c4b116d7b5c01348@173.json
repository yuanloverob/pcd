{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ee3fa87fd7ca53713cffb9ff662a61f797b760d",
      "candidate_info": {
        "commit_hash": "6ee3fa87fd7ca53713cffb9ff662a61f797b760d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ee3fa87fd7ca53713cffb9ff662a61f797b760d",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lempar.c"
        ],
        "message": "Fix an unreachable branch in sqlite3ParserFallback()\n\nFossilOrigin-Name: e059178b47109caee2c2211b2db6e594c014af636677118a64e10edf01ac017d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47d3e091ae49eb7947af5abef9b5b96b16b86d349e51fe0677795649be6db473",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065: int ParseFallback(int iToken){",
          "1066: #ifdef YYFALLBACK",
          "1070: #else",
          "1071:   (void)iToken;",
          "1072: #endif",
          "",
          "[Removed Lines]",
          "1067:   if( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) ){",
          "1068:     return yyFallback[iToken];",
          "1069:   }",
          "",
          "[Added Lines]",
          "1067:   assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );",
          "1068:   return yyFallback[iToken];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d683394f1d27561cbf22c56e3c6be2413f1eb5d",
      "candidate_info": {
        "commit_hash": "7d683394f1d27561cbf22c56e3c6be2413f1eb5d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d683394f1d27561cbf22c56e3c6be2413f1eb5d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbemem.c",
          "test/fuzzdata8.db"
        ],
        "message": "Fix a faulty assert() in the sqlite3VdbeMemExpandBlob() routine.\n\nFossilOrigin-Name: df58774e994bd306b1a2e1f259e7e4408f01c5b1dc104673698168bbf8a63ce5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: edb095a9a679c8c702abd0a487e55ed4b09110b54bcd7d5275020576f2713a39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: #define MemSetTypeFlag(p, f) \\",
          "283:    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288: #define MemNullNochng(X) \\",
          "289:   ((X)->flags==(MEM_Null|MEM_Zero) && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:   testcase( bPreserve && pMem->z==0 );",
          "198:   assert( pMem->szMalloc==0",
          "",
          "[Removed Lines]",
          "195:   assert( bPreserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );",
          "",
          "[Added Lines]",
          "195:   assert( bPreserve==0",
          "196:        || pMem->flags&(MEM_Blob|MEM_Str)",
          "197:        || MemNullNochng(pMem)",
          "198:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: int sqlite3VdbeMemExpandBlob(Mem *pMem){",
          "299:   int nByte;",
          "300:   assert( pMem->flags & MEM_Zero );",
          "302:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "303:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "301:   assert( pMem->flags&MEM_Blob );",
          "",
          "[Added Lines]",
          "304:   assert( (pMem->flags&MEM_Blob)!=0 || MemNullNochng(pMem) );",
          "305:   testcase( MemNullNochng(pMem) )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "919458923dd9ea81db155fce5976a42207be11c7",
      "candidate_info": {
        "commit_hash": "919458923dd9ea81db155fce5976a42207be11c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/919458923dd9ea81db155fce5976a42207be11c7",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Update wapptest.tcl to use a simpler slave script. And to leave scripts wapptest_configure.sh and wapptest_make.sh in each test directory.\n\nFossilOrigin-Name: 07e527d781838412b2a434e64baaa49cbf7410a51c7393f54adc7b8eaffd5229",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1dbbb0101e8213b92b9a4c78c0fd2f9d0240a8ea3b40dff1033d1b8d71fb04ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   # The root of the SQLite source tree.",
          "38:   set G(srcdir)   [file dirname [file dirname [info script]]]",
          "43:   set G(sqlite_version) \"unknown\"",
          "45:   # Either \"config\", \"running\" or \"stopped\":",
          "",
          "[Removed Lines]",
          "40:   # releasetest.tcl script",
          "41:   set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "53: }",
          "57: #",
          "70: proc generate_fossil_info {} {",
          "71:   global G",
          "72:   set pwd [pwd]",
          "73:   cd $G(srcdir)",
          "76:   cd $pwd",
          "78:   foreach line [split $r1 \"\\n\"] {",
          "79:     if {[regexp {^checkout: *(.*)$} $line -> co]} {",
          "",
          "[Removed Lines]",
          "55: # Check to see if there are uncommitted changes in the SQLite source",
          "56: # directory. Return true if there are, or false otherwise.",
          "58: proc check_uncommitted {} {",
          "59:   global G",
          "60:   set ret 0",
          "61:   set pwd [pwd]",
          "62:   cd $G(srcdir)",
          "63:   if {[catch {exec fossil changes} res]==0 && [string trim $res]!=\"\"} {",
          "64:     set ret 1",
          "65:   }",
          "66:   cd $pwd",
          "67:   return $ret",
          "68: }",
          "74:   if {[catch {exec fossil info}    r1]} return",
          "75:   if {[catch {exec fossil changes} r2]} return",
          "",
          "[Added Lines]",
          "52: # Generate the text for the box at the top of the UI. The current SQLite",
          "53: # version, according to fossil, along with a warning if there are",
          "54: # uncommitted changes in the checkout.",
          "60:   set rc [catch {",
          "61:     set r1 [exec fossil info]",
          "62:     set r2 [exec fossil changes]",
          "63:   }]",
          "65:   if {$rc} return",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239:   do_some_stuff",
          "240: }",
          "242: proc do_some_stuff {} {",
          "243:   global G",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: proc wapptest_slave_script {} {",
          "232:   global G",
          "233:   set res {",
          "234:     proc readfile {filename} {",
          "235:       set fd [open $filename]",
          "236:       set data [read $fd]",
          "237:       close $fd",
          "238:       return $data",
          "239:     }",
          "240:   }",
          "242:   if {$G(msvc)==0} {",
          "243:     append res {",
          "244:       set cfg  [readfile wapptest_configure.sh]",
          "245:       set rc [catch { exec {*}$cfg >& test.log } msg]",
          "246:       if {$rc==0} {",
          "247:         set make [readfile wapptest_make.sh]",
          "248:         catch { exec {*}$make >>& test.log }",
          "249:       }",
          "250:     }",
          "251:   } else {",
          "252:     append res {",
          "253:       set make [readfile wapptest_make.sh]",
          "254:       catch { exec {*}$make >>& test.log }",
          "255:     }",
          "256:   }",
          "258:   set res",
          "259: }",
          "262: # Launch a slave process to run a test.",
          "263: #",
          "264: proc slave_launch {",
          "265:   name wtcl title dir configOpts testtarget makeOpts cflags opts",
          "266: } {",
          "267:   global G",
          "269:   catch { file mkdir $dir } msg",
          "270:   foreach f [glob -nocomplain [file join $dir *]] {",
          "271:     catch { file delete -force $f }",
          "272:   }",
          "274:   # Write the configure command to wapptest_configure.sh. This file",
          "275:   # is empty if using MSVC - MSVC does not use configure.",
          "276:   #",
          "277:   set fd1 [open [file join $dir wapptest_configure.sh] w]",
          "278:   if {$G(msvc)==0} {",
          "279:     puts $fd1 \"[file join .. $G(srcdir) configure] $wtcl $configOpts\"",
          "280:   }",
          "281:   close $fd1",
          "283:   # Write the make command to wapptest_make.sh. Using nmake for MSVC and",
          "284:   # make for all other systems.",
          "285:   #",
          "286:   set makecmd \"make\"",
          "287:   if {$G(msvc)} {",
          "288:     set nativedir [file nativename $G(srcdir)]",
          "289:     set nativedir [string map [list \"\\\\\" \"\\\\\\\\\"] $nativedir]",
          "290:     set makecmd \"nmake /f [file join $nativedir Makefile.msc] TOP=$nativedir\"",
          "291:   }",
          "292:   set fd2 [open [file join $dir wapptest_make.sh] w]",
          "293:   puts $fd2 \"$makecmd $makeOpts $testtarget \\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\"\"",
          "294:   close $fd2",
          "296:   # Write the wapptest_run.tcl script to the test directory. To run the",
          "297:   # commands in the other two files.",
          "298:   #",
          "299:   set fd3 [open [file join $dir wapptest_run.tcl] w]",
          "300:   puts $fd3 [wapptest_slave_script]",
          "301:   close $fd3",
          "303:   set pwd [pwd]",
          "304:   cd $dir",
          "305:   set fd [open \"|[info nameofexecutable] wapptest_run.tcl\" r+]",
          "306:   cd $pwd",
          "308:   set G(test.$name.channel) $fd",
          "309:   fconfigure $fd -blocking 0",
          "310:   fileevent $fd readable [list slave_fileevent $name]",
          "311: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:       if { ![info exists G(test.$name.channel)]",
          "276:         && ![info exists G(test.$name.done)]",
          "277:       } {",
          "278:         set target [dict get $j target]",
          "279:         set G(test.$name.start) [clock seconds]",
          "287:         set wtcl \"\"",
          "288:         if {$G(tcl)!=\"\"} { set wtcl \"--with-tcl=$G(tcl)\" }",
          "",
          "[Removed Lines]",
          "280:         set fd [open \"|[info nameofexecutable] $G(releaseTest) --slave\" r+]",
          "281:         set G(test.$name.channel) $fd",
          "282:         fconfigure $fd -blocking 0",
          "283:         fileevent $fd readable [list slave_fileevent $name]",
          "285:         puts $fd [list 0 $G(msvc) 0 $G(keep)]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "303:         }",
          "305:         set L [make_test_suite $G(msvc) $wtcl $name $target $opts]",
          "308:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "309:         incr nLaunch -1",
          "310:       }",
          "",
          "[Removed Lines]",
          "306:         puts $fd $L",
          "307:         flush $fd",
          "",
          "[Added Lines]",
          "371:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "372:         slave_launch $name $wtcl {*}$L",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae104741257a7b32870bb9f1563bb5746db5ae3c",
      "candidate_info": {
        "commit_hash": "ae104741257a7b32870bb9f1563bb5746db5ae3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae104741257a7b32870bb9f1563bb5746db5ae3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix possible integer overflow while running PRAGMA integrity_check on a database file with a badly corrupted freelist.\n\nFossilOrigin-Name: 395599116d801324f0763e59bc5e2fc8622aa5b7572e0c1c9a982efbb3cc8280",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ba3d9f38090c4bbbcffba1930e5c26f69ff61f49b72a4a5a59253d37341380f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9414:     }",
          "9415:     pOvflData = (unsigned char *)sqlite3PagerGetData(pOvflPage);",
          "9416:     if( isFreeList ){",
          "9418: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "9419:       if( pCheck->pBt->autoVacuum ){",
          "9420:         checkPtrmap(pCheck, iPage, PTRMAP_FREEPAGE, 0);",
          "9421:       }",
          "9422: #endif",
          "9424:         checkAppendMsg(pCheck,",
          "9425:            \"freelist leaf count too big on page %d\", iPage);",
          "9426:         N--;",
          "9427:       }else{",
          "9429:           Pgno iFreePage = get4byte(&pOvflData[8+i*4]);",
          "9430: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "9431:           if( pCheck->pBt->autoVacuum ){",
          "",
          "[Removed Lines]",
          "9417:       int n = get4byte(&pOvflData[4]);",
          "9423:       if( n>(int)pCheck->pBt->usableSize/4-2 ){",
          "9428:         for(i=0; i<n; i++){",
          "",
          "[Added Lines]",
          "9417:       u32 n = (u32)get4byte(&pOvflData[4]);",
          "9423:       if( n>pCheck->pBt->usableSize/4-2 ){",
          "9428:         for(i=0; i<(int)n; i++){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7d12f4ad4283f1b3a09d140c489319c9d2eb8f8",
      "candidate_info": {
        "commit_hash": "c7d12f4ad4283f1b3a09d140c489319c9d2eb8f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7d12f4ad4283f1b3a09d140c489319c9d2eb8f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c",
          "test/index6.test"
        ],
        "message": "When we play games with COLLATE in order to commute an operator in the WHERE clause processing, be sure not to use the commuted operator to qualify a partial index, as insufficient COLLATE information is preserved to verify that the expression will correctly qualify the index. Ticket [767a8cbc6d20bd68]\n\nFossilOrigin-Name: 5351e920f489562f959ab8a376ff720f845ea165e0cdc7c3a271aac53c2aa64a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e7b4527d32cc1be0294614b9d7363d4b59cf654a954b86515b3f6888975ce73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2800:   }",
          "2801:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2802:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2805:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "2806:     ){",
          "",
          "[Removed Lines]",
          "2803:     Expr *pExpr = pTerm->pExpr;",
          "",
          "[Added Lines]",
          "2803:     Expr *pExpr;",
          "2804:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "2805:     pExpr = pTerm->pExpr;",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "123:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "124:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "125:   if( expRight==expLeft ){",
          "",
          "[Removed Lines]",
          "121: static void exprCommute(Parse *pParse, Expr *pExpr){",
          "",
          "[Added Lines]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "129:   u16 wtFlags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:       pExpr->pRight->flags &= ~EP_Collate;",
          "131:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "135:       pExpr->pLeft->flags |= EP_Collate;",
          "136:     }",
          "137:   }",
          "138:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "145:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "146:   }",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   return wtFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1140:         pDup = pExpr;",
          "1141:         pNew = pTerm;",
          "1142:       }",
          "1144:       pNew->leftCursor = aiCurCol[0];",
          "1145:       pNew->u.leftColumn = aiCurCol[1];",
          "1146:       testcase( (prereqLeft | extraRight) != prereqLeft );",
          "",
          "[Removed Lines]",
          "1143:       exprCommute(pParse, pDup);",
          "",
          "[Added Lines]",
          "1152:       pNew->wtFlags |= exprCommute(pParse, pDup);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:   SELECT 1 FROM t0 WHERE (c0 IS FALSE) IN (FALSE);",
          "463: } {1}",
          "466: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: # 2019-09-03",
          "466: # Ticket https://sqlite.org/src/info/767a8cbc6d20bd68",
          "467: do_execsql_test index6-16.1 {",
          "468:   DROP TABLE t0;",
          "469:   CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
          "470:   CREATE INDEX i0 ON t0(0) WHERE c0 >= c1;",
          "471:   INSERT INTO t0 VALUES('a', 'B');",
          "472:   SELECT c1 <= c0, c0 >= c1 FROM t0;",
          "473: } {1 0}",
          "474: do_execsql_test index6-16.2 {",
          "475:   SELECT 2 FROM t0 WHERE c0 >= c1;",
          "476: } {}",
          "477: do_execsql_test index6-16.3 {",
          "478:   SELECT 3 FROM t0 WHERE c1 <= c0;",
          "479: } {3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}