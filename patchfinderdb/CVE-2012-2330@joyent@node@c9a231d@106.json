{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b187e96ec91b1aaf1ed4d7eed870cc5ba2e3259e",
      "candidate_info": {
        "commit_hash": "b187e96ec91b1aaf1ed4d7eed870cc5ba2e3259e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b187e96ec91b1aaf1ed4d7eed870cc5ba2e3259e",
        "files": [
          "doc/api/repl.markdown",
          "lib/repl.js"
        ],
        "message": "repl: add a 'writer' option to the repl\n\nPreviously this was a module-level setting, meaning that all REPL instances\nhad to share the same writer function. Turning it into one of the options\nallows individual REPL instances to use their own writer function.",
        "before_after_code_files": [
          "lib/repl.js||lirepl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   this.commands = {};",
          "160:   defineDefaultCommands(this);",
          "162:   if (rli.terminal && !exports.disableColors &&",
          "166:       return util.inspect(obj, showHidden, depth, true);",
          "167:     };",
          "168:   }",
          "",
          "[Removed Lines]",
          "163:       exports.writer === util.inspect) {",
          "165:     exports.writer = function(obj, showHidden, depth) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:                                 '\" already exists globally\\n');",
          "225:       } else {",
          "226:         self.context._ = self.context[cmd] = lib;",
          "228:       }",
          "229:       self.displayPrompt();",
          "230:       return;",
          "",
          "[Removed Lines]",
          "227:         self.outputStream.write(exports.writer(lib) + '\\n');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:       if (!e && (!self.ignoreUndefined || ret !== undefined)) {",
          "295:         self.context._ = ret;",
          "297:       }",
          "",
          "[Removed Lines]",
          "296:         self.outputStream.write(exports.writer(ret) + '\\n');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7aa5924dc6e8d80980a9b79f3d5fc6305bf1aea7",
      "candidate_info": {
        "commit_hash": "7aa5924dc6e8d80980a9b79f3d5fc6305bf1aea7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7aa5924dc6e8d80980a9b79f3d5fc6305bf1aea7",
        "files": [
          "lib/http.js",
          "test/simple/test-http-client-agent.js",
          "test/simple/test-http-keep-alive.js",
          "test/simple/test-http-upgrade-agent.js"
        ],
        "message": "http: fix resource leak\n\nFixes #2069",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-client-agent.js||test/simple/test-http-client-agent.js",
          "test/simple/test-http-keep-alive.js||test/simple/test-http-keep-alive.js",
          "test/simple/test-http-upgrade-agent.js||test/simple/test-http-upgrade-agent.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "896:     var name = host + ':' + port;",
          "897:     if (self.requests[name] && self.requests[name].length) {",
          "898:       self.requests[name].shift().onSocket(socket);",
          "899:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "963:     var index = this.sockets[name].indexOf(s);",
          "964:     if (index !== -1) {",
          "965:       this.sockets[name].splice(index, 1);",
          "966:     }",
          "971:   }",
          "972:   if (this.requests[name] && this.requests[name].length) {",
          "",
          "[Removed Lines]",
          "967:   } else if (this.sockets[name] && this.sockets[name].length === 0) {",
          "969:     delete this.sockets[name];",
          "970:     delete this.requests[name];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-client-agent.js||test/simple/test-http-client-agent.js": [
          "File: test/simple/test-http-client-agent.js -> test/simple/test-http-client-agent.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     var socket = req.socket;",
          "53:     socket.on('close', function() {",
          "54:       ++count;",
          "58:         server.close();",
          "59:       }",
          "60:     });",
          "",
          "[Removed Lines]",
          "55:       assert.equal(http.globalAgent.sockets[name].length, max - count);",
          "56:       assert.equal(http.globalAgent.sockets[name].indexOf(socket), -1);",
          "57:       if (count === max) {",
          "",
          "[Added Lines]",
          "55:       if (count < max) {",
          "56:         assert.equal(http.globalAgent.sockets[name].length, max - count);",
          "57:         assert.equal(http.globalAgent.sockets[name].indexOf(socket), -1);",
          "58:       } else {",
          "59:         assert(!http.globalAgent.sockets.hasOwnProperty(name));",
          "60:         assert(!http.globalAgent.requests.hasOwnProperty(name));",
          "",
          "---------------"
        ],
        "test/simple/test-http-keep-alive.js||test/simple/test-http-keep-alive.js": [
          "File: test/simple/test-http-keep-alive.js -> test/simple/test-http-keep-alive.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "27: var body = 'hello world\\n';",
          "30: var server = http.createServer(function(req, res) {",
          "31:   res.writeHead(200, {'Content-Length': body.length});",
          "",
          "[Removed Lines]",
          "25: var util = require('util');",
          "28: var headers = {'connection': 'keep-alive'};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: });",
          "36: var connectCount = 0;",
          "38: server.listen(common.PORT, function() {",
          "42:   });",
          "47:   });",
          "50:     response.on('end', function() {",
          "52:       server.close();",
          "53:     });",
          "54:   });",
          "56: });",
          "",
          "[Removed Lines]",
          "39:   var agent = new http.Agent({maxSockets: 1});",
          "40:   var request = http.request({method: 'GET', path: '/', headers: headers, port: common.PORT, agent: agent}, function() {",
          "41:     assert.equal(1, agent.sockets['localhost:' + common.PORT].length);",
          "43:   request.end();",
          "45:   request = http.request({method: 'GET', path: '/', headers: headers, port: common.PORT, agent: agent}, function() {",
          "46:     assert.equal(1, agent.sockets['localhost:' + common.PORT].length);",
          "48:   request.end();",
          "49:   request = http.request({method: 'GET', path: '/', headers: headers, port: common.PORT, agent: agent}, function(response) {",
          "51:       assert.equal(1, agent.sockets['localhost:' + common.PORT].length);",
          "55:   request.end();",
          "",
          "[Added Lines]",
          "35: var name = 'localhost:' + common.PORT;",
          "36: var agent = new http.Agent({maxSockets: 1});",
          "37: var headers = {'connection': 'keep-alive'};",
          "40:   http.get({",
          "41:     path: '/', headers: headers, port: common.PORT, agent: agent",
          "42:   }, function(response) {",
          "43:     assert.equal(agent.sockets[name].length, 1);",
          "44:     assert.equal(agent.requests[name].length, 2);",
          "47:   http.get({",
          "48:     path: '/', headers: headers, port: common.PORT, agent: agent",
          "49:   }, function(response) {",
          "50:     assert.equal(agent.sockets[name].length, 1);",
          "51:     assert.equal(agent.requests[name].length, 1);",
          "54:   http.get({",
          "55:     path: '/', headers: headers, port: common.PORT, agent: agent",
          "56:   }, function(response) {",
          "58:       assert.equal(agent.sockets[name].length, 1);",
          "59:       assert(!agent.requests.hasOwnProperty(name));",
          "63: });",
          "65: process.on('exit', function() {",
          "66:   assert(!agent.sockets.hasOwnProperty(name));",
          "67:   assert(!agent.requests.hasOwnProperty(name));",
          "",
          "---------------"
        ],
        "test/simple/test-http-upgrade-agent.js||test/simple/test-http-upgrade-agent.js": [
          "File: test/simple/test-http-upgrade-agent.js -> test/simple/test-http-upgrade-agent.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:       'upgrade': 'websocket'",
          "60:     }",
          "61:   };",
          "63:   var req = http.request(options);",
          "64:   req.end();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   var name = options.host + ':' + options.port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                             'connection': 'upgrade',",
          "74:                             'upgrade': 'websocket' };",
          "75:     assert.deepEqual(expectedHeaders, res.headers);",
          "78:     process.nextTick(function() {",
          "81:       socket.end();",
          "82:       srv.close();",
          "",
          "[Removed Lines]",
          "76:     assert.equal(http.globalAgent.sockets[options.host + ':' + options.port].length, 1);",
          "80:       assert.equal(http.globalAgent.sockets[options.host + ':' + options.port].length, 0);",
          "",
          "[Added Lines]",
          "77:     assert.equal(http.globalAgent.sockets[name].length, 1);",
          "81:       assert(!http.globalAgent.sockets.hasOwnProperty(name));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5041bc1b6cc8c6424ed8dee41bd178187af7c094",
      "candidate_info": {
        "commit_hash": "5041bc1b6cc8c6424ed8dee41bd178187af7c094",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5041bc1b6cc8c6424ed8dee41bd178187af7c094",
        "files": [
          "deps/v8/SConstruct",
          "deps/v8/build/common.gypi"
        ],
        "message": "Patches floating on V8\n\nOnly SConstruct and build/common.gypi at this point.  All\nothers are accepted upstream, which greatly simplifies things.",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:           }],  # OS==\"mac\"",
          "353:           ['OS==\"win\"', {",
          "354:             'msvs_configuration_attributes': {",
          "356:               'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "357:               'CharacterSet': '1',",
          "358:             },",
          "",
          "[Removed Lines]",
          "355:               'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1de43149bbb8c42b80cef4c25509390f3b4000cc",
      "candidate_info": {
        "commit_hash": "1de43149bbb8c42b80cef4c25509390f3b4000cc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1de43149bbb8c42b80cef4c25509390f3b4000cc",
        "files": [
          "lib/http.js"
        ],
        "message": "http: Clean up parser usage\n\nMove parsers.free(parser) to a single function, which also\nnulls all of the various references we hang on them.\n\nAlso, move the parser.on* methods out of the closure, so that\nthere's one shared definition of each, instead of re-defining\nfor each parser in a spot where they can close over references\nto other request-specific objects.\n\nConflicts:\n\n\tlib/http.js",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   debug = function() { };",
          "37: }",
          "93:       var k = headers[i];",
          "94:       var v = headers[i + 1];",
          "95:       parser.incoming._addHeaderLine(k.toLowerCase(), v);",
          "96:     }",
          "101:     } else {",
          "105:     }",
          "162:   return parser;",
          "163: });",
          "",
          "[Removed Lines]",
          "40: var parsers = new FreeList('parsers', 1000, function() {",
          "41:   var parser = new HTTPParser(HTTPParser.REQUEST);",
          "43:   parser._headers = [];",
          "44:   parser._url = '';",
          "51:   parser.onHeaders = function(headers, url) {",
          "53:     if (parser.maxHeaderPairs <= 0 ||",
          "54:         parser._headers.length < parser.maxHeaderPairs) {",
          "55:       parser._headers = parser._headers.concat(headers);",
          "56:     }",
          "57:     parser._url += url;",
          "58:   };",
          "65:   parser.onHeadersComplete = function(info) {",
          "66:     var headers = info.headers;",
          "67:     var url = info.url;",
          "69:     if (!headers) {",
          "70:       headers = parser._headers;",
          "71:       parser._headers = [];",
          "72:     }",
          "74:     if (!url) {",
          "75:       url = parser._url;",
          "76:       parser._url = '';",
          "77:     }",
          "79:     parser.incoming = new IncomingMessage(parser.socket);",
          "80:     parser.incoming.httpVersionMajor = info.versionMajor;",
          "81:     parser.incoming.httpVersionMinor = info.versionMinor;",
          "82:     parser.incoming.httpVersion = info.versionMajor + '.' + info.versionMinor;",
          "83:     parser.incoming.url = url;",
          "85:     var n = headers.length;",
          "88:     if (parser.maxHeaderPairs > 0) {",
          "89:       n = Math.min(n, parser.maxHeaderPairs);",
          "90:     }",
          "92:     for (var i = 0; i < n; i += 2) {",
          "98:     if (info.method) {",
          "100:       parser.incoming.method = info.method;",
          "103:       parser.incoming.statusCode = info.statusCode;",
          "107:     parser.incoming.upgrade = info.upgrade;",
          "109:     var skipBody = false; // response to HEAD or CONNECT",
          "111:     if (!info.upgrade) {",
          "115:       skipBody = parser.onIncoming(parser.incoming, info.shouldKeepAlive);",
          "116:     }",
          "118:     return skipBody;",
          "119:   };",
          "121:   parser.onBody = function(b, start, len) {",
          "123:     var slice = b.slice(start, start + len);",
          "124:     if (parser.incoming._paused || parser.incoming._pendings.length) {",
          "125:       parser.incoming._pendings.push(slice);",
          "126:     } else {",
          "127:       parser.incoming._emitData(slice);",
          "128:     }",
          "129:   };",
          "131:   parser.onMessageComplete = function() {",
          "132:     parser.incoming.complete = true;",
          "135:     var headers = parser._headers;",
          "136:     if (headers) {",
          "137:       for (var i = 0, n = headers.length; i < n; i += 2) {",
          "138:         var k = headers[i];",
          "139:         var v = headers[i + 1];",
          "140:         parser.incoming._addHeaderLine(k.toLowerCase(), v);",
          "141:       }",
          "142:       parser._headers = [];",
          "143:       parser._url = '';",
          "144:     }",
          "146:     if (!parser.incoming.upgrade) {",
          "148:       if (parser.incoming._paused || parser.incoming._pendings.length) {",
          "149:         parser.incoming._pendings.push(END_OF_FILE);",
          "150:       } else {",
          "151:         parser.incoming.readable = false;",
          "152:         parser.incoming._emitEnd();",
          "153:       }",
          "154:     }",
          "156:     if (parser.socket.readable) {",
          "158:       parser.socket.resume();",
          "159:     }",
          "160:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1230:   return error;",
          "1231: }",
          "1234: ClientRequest.prototype.onSocket = function(socket) {",
          "1235:   var req = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1255:     httpSocketSetup(socket);",
          "1272:     var errorListener = function(err) {",
          "1273:       debug('HTTP SOCKET ERROR: ' + err.message + '\\n' + err.stack);",
          "1274:       req.emit('error', err);",
          "",
          "[Removed Lines]",
          "1257:     var freeParser = function() {",
          "1258:       if (parser) {",
          "1259:         parser.onIncoming = null;",
          "1260:         parser.socket.onend = null;",
          "1261:         parser.socket.ondata = null;",
          "1262:         parser.socket = null;",
          "1263:         parser.incoming = null;",
          "1264:         parsers.free(parser);",
          "1265:         parser = null;",
          "1266:       }",
          "1267:       if (req) {",
          "1268:         req.parser = null;",
          "1269:       }",
          "1270:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1277:       req._hadError = true;",
          "1278:       if (parser) {",
          "1279:         parser.finish();",
          "1281:       }",
          "1282:       socket.destroy();",
          "1283:     }",
          "",
          "[Removed Lines]",
          "1280:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1299:       var ret = parser.execute(d, start, end - start);",
          "1300:       if (ret instanceof Error) {",
          "1301:         debug('parse error');",
          "1303:         socket.destroy(ret);",
          "1304:       } else if (parser.incoming && parser.incoming.upgrade) {",
          "",
          "[Removed Lines]",
          "1302:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1310:         socket.ondata = null;",
          "1311:         socket.onend = null;",
          "1312:         parser.finish();",
          "1316:         var bodyHead = d.slice(start + bytesParsed, end);",
          "",
          "[Removed Lines]",
          "1313:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1332:           socket.destroy();",
          "1333:         }",
          "1334:       } else if (parser.incoming && parser.incoming.complete &&",
          "1338:                  parser.incoming.statusCode !== 100) {",
          "1340:       }",
          "1341:     };",
          "",
          "[Removed Lines]",
          "1339:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1349:       }",
          "1350:       if (parser) {",
          "1351:         parser.finish();",
          "1353:       }",
          "1354:       socket.destroy();",
          "1355:     };",
          "",
          "[Removed Lines]",
          "1352:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1587:   function serverSocketCloseListener() {",
          "1588:     debug('server socket close');",
          "1592:     abortIncoming();",
          "1593:   }",
          "",
          "[Removed Lines]",
          "1590:     parsers.free(parser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1632:       socket.onend = null;",
          "1633:       socket.removeListener('close', serverSocketCloseListener);",
          "1634:       parser.finish();",
          "1638:       var bodyHead = d.slice(start + bytesParsed, end);",
          "",
          "[Removed Lines]",
          "1635:       parsers.free(parser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30fd2f7bb27addadaf4c620eacc77f29a5716e37",
      "candidate_info": {
        "commit_hash": "30fd2f7bb27addadaf4c620eacc77f29a5716e37",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/30fd2f7bb27addadaf4c620eacc77f29a5716e37",
        "files": [
          "tools/msvs/msi/product.wxs"
        ],
        "message": "Add npm msysgit bash shim to msi installer",
        "before_after_code_files": [
          "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs": [
          "File: tools/msvs/msi/product.wxs -> tools/msvs/msi/product.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:           <Component Id=\"npmcmd\" Guid=\"31e9986d-74cd-44e1-878c-194d3e997d32\">",
          "47:             <File Id=\"filenpmcmd\" KeyPath=\"yes\" Source=\"$(var.NPMSourceDir)\\bin\\npm.cmd\" />",
          "48:           </Component>",
          "49:           <?if $(var.Configuration) = Debug ?>",
          "50:           <Component Id=\"nodepdb\" Guid=\"BEC0F08E-89B3-4C35-A286-8DB8598597F2\">",
          "51:             <File Id=\"filenodepdb\" KeyPath=\"yes\" Source=\"$(var.sourcedir)\\node.pdb\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:           <Component Id=\"npmsh\" Guid=\"57754e12-9269-4198-a38c-2c098bf5276e\">",
          "50:             <File Id=\"filenpmcmd\" KeyPath=\"yes\" Source=\"$(var.NPMSourceDir)\\bin\\npm\" />",
          "51:           </Component>",
          "",
          "---------------"
        ]
      }
    }
  ]
}