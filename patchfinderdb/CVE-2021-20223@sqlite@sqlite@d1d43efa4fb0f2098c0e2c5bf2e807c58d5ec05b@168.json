{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "60c71b02ca6d2a964ab4ae9bbdd7dc0814b7402d",
      "candidate_info": {
        "commit_hash": "60c71b02ca6d2a964ab4ae9bbdd7dc0814b7402d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/60c71b02ca6d2a964ab4ae9bbdd7dc0814b7402d",
        "files": [
          "doc/lemon.html",
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Lemon updates:  (1) include the #defines for all tokens in the generated C file, so that the C-file can be stand-alone.  (2) If the grammar begins with a %include {...} directive on line one, make that directive the header for the generated C file.  (3) Enhance the lemon.html documentation.\n\nFossilOrigin-Name: 84d54eb35716174195ee7e5ac846f47308e5dbb0056e8ff568daa133860bab74",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35505c68c1945c35babd2496e02bc4907a15c8e7b8d77f05f230bd0e9d4891d7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: %include {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: %token_prefix TK_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: }",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2638:         }",
          "2639:         nOld = lemonStrlen(zOld);",
          "2640:         n = nOld + nNew + 20;",
          "2643:         if( addLineMacro ){",
          "2644:           for(z=psp->filename, nBack=0; *z; z++){",
          "2645:             if( *z=='\\\\' ) nBack++;",
          "",
          "[Removed Lines]",
          "2641:         addLineMacro = !psp->gp->nolinenosflag && psp->insertLineMacro &&",
          "2642:                         (psp->decllinenoslot==0 || psp->decllinenoslot[0]!=0);",
          "",
          "[Added Lines]",
          "2641:         addLineMacro = !psp->gp->nolinenosflag",
          "2642:                        && psp->insertLineMacro",
          "2643:                        && psp->tokenlineno>1",
          "2644:                        && (psp->decllinenoslot==0 || psp->decllinenoslot[0]!=0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3617:   }",
          "3618: }",
          "3622: PRIVATE FILE *tplt_open(struct lemon *lemp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3624: PRIVATE void tplt_skip_header(FILE *in, int *lineno)",
          "3625: {",
          "3626:   char line[LINESIZE];",
          "3627:   while( fgets(line,LINESIZE,in) && (line[0]!='%' || line[1]!='%') ){",
          "3628:     (*lineno)++;",
          "3629:   }",
          "3630: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4287:   int mnTknOfst, mxTknOfst;",
          "4288:   int mnNtOfst, mxNtOfst;",
          "4289:   struct axset *ax;",
          "4291:   lemp->minShiftReduce = lemp->nstate;",
          "4292:   lemp->errAction = lemp->minShiftReduce + lemp->nrule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4302:   char *prefix;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4375:     fprintf(sql, \"COMMIT;\\n\");",
          "4376:   }",
          "4377:   lineno = 1;",
          "4381:   tplt_print(out,lemp,lemp->include,&lineno);",
          "",
          "[Removed Lines]",
          "4378:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Added Lines]",
          "4395:   if( lemp->include==0 ) lemp->include = \"\";",
          "4396:   for(i=0; ISSPACE(lemp->include[i]); i++){",
          "4397:     if( lemp->include[i]=='\\n' ){",
          "4398:       lemp->include += i+1;",
          "4399:       i = -1;",
          "4400:     }",
          "4401:   }",
          "4402:   if( lemp->include[0]=='/' ){",
          "4403:     tplt_skip_header(in,&lineno);",
          "4404:   }else{",
          "4405:     tplt_xfer(lemp->name,in,out,&lineno);",
          "4406:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4387:   tplt_xfer(lemp->name,in,out,&lineno);",
          "4390:   if( mhflag ){",
          "4391:     const char *prefix;",
          "4392:     fprintf(out,\"#if INTERFACE\\n\"); lineno++;",
          "4400:   }",
          "4401:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "4393:     if( lemp->tokenprefix ) prefix = lemp->tokenprefix;",
          "4394:     else                    prefix = \"\";",
          "4395:     for(i=1; i<lemp->nterminal; i++){",
          "4396:       fprintf(out,\"#define %s%-30s %2d\\n\",prefix,lemp->symbols[i]->name,i);",
          "4397:       lineno++;",
          "4398:     }",
          "4399:     fprintf(out,\"#endif\\n\"); lineno++;",
          "",
          "[Added Lines]",
          "4418:   if( lemp->tokenprefix ) prefix = lemp->tokenprefix;",
          "4419:   else                    prefix = \"\";",
          "4423:   }else{",
          "4424:     fprintf(out,\"#ifndef %s%s\\n\", prefix, lemp->symbols[1]->name);",
          "4425:   }",
          "4426:   for(i=1; i<lemp->nterminal; i++){",
          "4427:     fprintf(out,\"#define %s%-30s %2d\\n\",prefix,lemp->symbols[i]->name,i);",
          "4428:     lineno++;",
          "4430:   fprintf(out,\"#endif\\n\"); lineno++;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: %%",
          "34: %%",
          "",
          "[Removed Lines]",
          "25: #include <stdio.h>",
          "26: #include <assert.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: #ifndef NDEBUG",
          "231: #include <stdio.h>",
          "232: static FILE *yyTraceFILE = 0;",
          "233: static char *yyTracePrompt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: #include <assert.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70d6b8327a70a34644a65e9c2166d35a24787b4f",
      "candidate_info": {
        "commit_hash": "70d6b8327a70a34644a65e9c2166d35a24787b4f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70d6b8327a70a34644a65e9c2166d35a24787b4f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Back out the NEVER() from check-in [40d10e7aad5b8992] because it is reachable after all. Ticket [892575cdba4e1e36]\n\nFossilOrigin-Name: f481636f1a0333c6e98906e5d4433bf1d046380bc29c760e8e7e2c2b3530b956",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea44c607b8038999a6bda4d761d95056aa4058d6c2891b7eee0715a50e703490",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "595:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "598:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "599:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "600:     return;",
          "",
          "[Removed Lines]",
          "597:   if( NEVER(pParse->nErr) ) return;",
          "",
          "[Added Lines]",
          "597:   if( pParse->nErr ) return;",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:   SELECT 3 FROM t1 LEFT JOIN t0 WHERE (c0, x'') != (NULL, 0);",
          "637: } {3}",
          "642: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639: # 2019-12-30 ticket 892575cdba4e1e36",
          "640: #",
          "641: reset_db",
          "642: do_catchsql_test 27.10 {",
          "643:   CREATE TABLE t0(c0 CHECK(((0, 0) > (0, c0))));",
          "644:   INSERT INTO t0(c0) VALUES(0) ON CONFLICT(c0) DO UPDATE SET c0 = 3;",
          "645: } {1 {ON CONFLICT clause does not match any PRIMARY KEY or UNIQUE constraint}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a8cd2e40ce5287e638f77d4922068dbf7ba7e03",
      "candidate_info": {
        "commit_hash": "5a8cd2e40ce5287e638f77d4922068dbf7ba7e03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5a8cd2e40ce5287e638f77d4922068dbf7ba7e03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Add compiler hints to disable TSAN for the routines that access the -shm file header in WAL mode using a double-read with memory barrier.\n\nFossilOrigin-Name: 3117c1b5a9e348fd8d16ba9d03fdafaad8514567fb3403f72b86d6162ad40bde",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb0a18e64f8d81c2ada9f698faaf5ca68a0666687bf6f3abc860324cb1997463",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "699:   }",
          "700: }",
          "708:   volatile WalIndexHdr *aHdr = walIndexHdr(pWal);",
          "709:   const int nCksum = offsetof(WalIndexHdr, aCksum);",
          "",
          "[Removed Lines]",
          "707: static void walIndexWriteHdr(Wal *pWal){",
          "",
          "[Added Lines]",
          "709: #if defined(__clang__) && !defined(SQLITE_NO_TSAN)",
          "710: # define SQLITE_NO_TSAN __attribute__((no_sanitize_thread))",
          "711: #else",
          "712: # define SQLITE_NO_TSAN",
          "713: #endif",
          "720: static SQLITE_NO_TSAN void walIndexWriteHdr(Wal *pWal){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2144: static int walIndexTryHdr(Wal *pWal, int *pChanged){",
          "",
          "[Added Lines]",
          "2157: static SQLITE_NO_TSAN int walIndexTryHdr(Wal *pWal, int *pChanged){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39ef8b31fb042db26736ca4704486d8da02909f0",
      "candidate_info": {
        "commit_hash": "39ef8b31fb042db26736ca4704486d8da02909f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39ef8b31fb042db26736ca4704486d8da02909f0",
        "files": [
          "ext/userauth/userauth.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem in the userauth extension causing it to occasionally set \"PRAGMA count_changes\" (and some others) to true.\n\nFossilOrigin-Name: 3a62f64222ebd176c06e89b9fe5275b7b1f09df0afbae1c5c148a4e527e9d80b",
        "before_after_code_files": [
          "ext/userauth/userauth.c||ext/userauth/userauth.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/userauth/userauth.c||ext/userauth/userauth.c": [
          "File: ext/userauth/userauth.c -> ext/userauth/userauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   char *zSql;",
          "41:   int rc;",
          "42:   va_list ap;",
          "45:   va_start(ap, zFormat);",
          "46:   zSql = sqlite3_vmprintf(zFormat, ap);",
          "",
          "[Removed Lines]",
          "43:   int savedFlags = db->flags;",
          "",
          "[Added Lines]",
          "43:   u64 savedFlags = db->flags;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9265cb7f026c0e959bd034d4cd94fe597744e0dd455d0a20736ee5f5bee880c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f683de8726e18096661033d5ac2e6fba014f4cd",
      "candidate_info": {
        "commit_hash": "9f683de8726e18096661033d5ac2e6fba014f4cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f683de8726e18096661033d5ac2e6fba014f4cd",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/misc/decimal.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c",
          "test/decimal.test"
        ],
        "message": "Add the decimal extension.  It is built into the shell, but is an optional add-on for the library.  It is not included in the amalgamation.\n\nFossilOrigin-Name: 5391687bf8563b3fdd157b436b2cbb6a0ee5f676727d41bbddfaa8eacc39729b",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c",
          "test/decimal.test||test/decimal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:   $(TOP)/ext/misc/carray.c \\",
          "444:   $(TOP)/ext/misc/closure.c \\",
          "445:   $(TOP)/ext/misc/csv.c \\",
          "446:   $(TOP)/ext/misc/eval.c \\",
          "447:   $(TOP)/ext/misc/explain.c \\",
          "448:   $(TOP)/ext/misc/fileio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:   $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1082:  $(TOP)/src/shell.c.in \\",
          "1083:         $(TOP)/ext/misc/appendvfs.c \\",
          "1084:  $(TOP)/ext/misc/shathree.c \\",
          "1085:  $(TOP)/ext/misc/fileio.c \\",
          "1086:  $(TOP)/ext/misc/completion.c \\",
          "1087:  $(TOP)/ext/misc/sqlar.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:         $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1560:   $(TOP)\\ext\\misc\\carray.c \\",
          "1561:   $(TOP)\\ext\\misc\\closure.c \\",
          "1562:   $(TOP)\\ext\\misc\\csv.c \\",
          "1563:   $(TOP)\\ext\\misc\\eval.c \\",
          "1564:   $(TOP)\\ext\\misc\\explain.c \\",
          "1565:   $(TOP)\\ext\\misc\\fileio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1563:   $(TOP)\\ext\\misc\\decimal.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2204:  $(TOP)\\src\\shell.c.in \\",
          "2205:  $(TOP)\\ext\\misc\\appendvfs.c \\",
          "2206:  $(TOP)\\ext\\misc\\shathree.c \\",
          "2207:  $(TOP)\\ext\\misc\\fileio.c \\",
          "2208:  $(TOP)\\ext\\misc\\completion.c \\",
          "2209:  $(TOP)\\ext\\misc\\uint.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2208:         $(TOP)\\ext\\misc\\decimal.c \\",
          "",
          "---------------"
        ],
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"sqlite3ext.h\"",
          "18: SQLITE_EXTENSION_INIT1",
          "19: #include <assert.h>",
          "20: #include <string.h>",
          "21: #include <ctype.h>",
          "22: #include <stdlib.h>",
          "26: typedef struct Decimal Decimal;",
          "27: struct Decimal {",
          "35: };",
          "40: static void decimal_clear(Decimal *p){",
          "41:   sqlite3_free(p->a);",
          "42: }",
          "47: static void decimal_free(Decimal *p){",
          "48:   if( p ){",
          "49:     decimal_clear(p);",
          "50:     sqlite3_free(p);",
          "51:   }",
          "52: }",
          "58: static Decimal *decimal_new(",
          "59:   sqlite3_context *pCtx,",
          "60:   sqlite3_value *pIn,",
          "61:   int nAlt,",
          "62:   const unsigned char *zAlt",
          "63: ){",
          "64:   Decimal *p;",
          "65:   int n, i;",
          "66:   const unsigned char *zIn;",
          "67:   int iExp = 0;",
          "68:   p = sqlite3_malloc( sizeof(*p) );",
          "69:   if( p==0 ) goto new_no_mem;",
          "70:   p->sign = 0;",
          "71:   p->oom = 0;",
          "72:   p->isInit = 1;",
          "73:   p->isNull = 0;",
          "74:   p->nDigit = 0;",
          "75:   p->nFrac = 0;",
          "76:   if( zAlt ){",
          "77:     n = nAlt,",
          "78:     zIn = zAlt;",
          "79:   }else{",
          "80:     if( sqlite3_value_type(pIn)==SQLITE_NULL ){",
          "81:       p->a = 0;",
          "82:       p->isNull = 1;",
          "83:       return p;",
          "84:     }",
          "85:     n = sqlite3_value_bytes(pIn);",
          "86:     zIn = sqlite3_value_text(pIn);",
          "87:   }",
          "88:   p->a = sqlite3_malloc64( n+1 );",
          "89:   if( p->a==0 ) goto new_no_mem;",
          "90:   for(i=0; isspace(zIn[i]); i++){}",
          "91:   if( zIn[i]=='-' ){",
          "92:     p->sign = 1;",
          "93:     i++;",
          "94:   }else if( zIn[i]=='+' ){",
          "95:     i++;",
          "96:   }",
          "97:   while( i<n && zIn[i]=='0' ) i++;",
          "98:   while( i<n ){",
          "99:     char c = zIn[i];",
          "100:     if( c>='0' && c<='9' ){",
          "101:       p->a[p->nDigit++] = c - '0';",
          "102:     }else if( c=='.' ){",
          "103:       p->nFrac = p->nDigit + 1;",
          "104:     }else if( c=='e' || c=='E' ){",
          "105:       int j = i+1;",
          "106:       int neg = 0;",
          "107:       if( j>=n ) break;",
          "108:       if( zIn[j]=='-' ){",
          "109:         neg = 1;",
          "110:         j++;",
          "111:       }else if( zIn[j]=='+' ){",
          "112:         j++;",
          "113:       }",
          "114:       while( j<n && iExp<1000000 ){",
          "115:         if( zIn[j]>='0' && zIn[j]<='9' ){",
          "116:           iExp = iExp*10 + zIn[j] - '0';",
          "117:         }",
          "118:         j++;",
          "119:       }",
          "120:       if( neg ) iExp = -iExp;",
          "121:       break;",
          "122:     }",
          "123:     i++;",
          "124:   }",
          "125:   if( p->nFrac ){",
          "126:     p->nFrac = p->nDigit - (p->nFrac - 1);",
          "127:   }",
          "128:   if( iExp>0 ){",
          "129:     if( p->nFrac>0 ){",
          "130:       if( iExp<=p->nFrac ){",
          "131:         p->nFrac -= iExp;",
          "132:         iExp = 0;",
          "133:       }else{",
          "134:         iExp -= p->nFrac;",
          "135:         p->nFrac = 0;",
          "136:       }",
          "137:     }",
          "138:     if( iExp>0 ){",
          "139:       p->a = sqlite3_realloc64(p->a, p->nDigit + iExp + 1 );",
          "140:       if( p->a==0 ) goto new_no_mem;",
          "141:       memset(p->a+p->nDigit, 0, iExp);",
          "142:       p->nDigit += iExp;",
          "143:     }",
          "144:   }else if( iExp<0 ){",
          "145:     int nExtra;",
          "146:     iExp = -iExp;",
          "147:     nExtra = p->nDigit - p->nFrac - 1;",
          "148:     if( nExtra ){",
          "149:       if( nExtra>=iExp ){",
          "150:         p->nFrac += iExp;",
          "151:         iExp  = 0;",
          "152:       }else{",
          "153:         iExp -= nExtra;",
          "154:         p->nFrac = p->nDigit - 1;",
          "155:       }",
          "156:     }",
          "157:     if( iExp>0 ){",
          "158:       p->a = sqlite3_realloc64(p->a, p->nDigit + iExp + 1 );",
          "159:       if( p->a==0 ) goto new_no_mem;",
          "160:       memmove(p->a+iExp, p->a, p->nDigit);",
          "161:       memset(p->a, 0, iExp);",
          "162:       p->nDigit += iExp;",
          "163:       p->nFrac += iExp;",
          "164:     }",
          "165:   }",
          "166:   return p;",
          "168: new_no_mem:",
          "169:   if( pCtx ) sqlite3_result_error_nomem(pCtx);",
          "170:   sqlite3_free(p);",
          "171:   return 0;",
          "172: }",
          "177: static void decimal_result(sqlite3_context *pCtx, Decimal *p){",
          "178:   char *z;",
          "179:   int i, j;",
          "180:   int n;",
          "181:   if( p==0 || p->oom ){",
          "182:     sqlite3_result_error_nomem(pCtx);",
          "183:     return;",
          "184:   }",
          "185:   if( p->isNull ){",
          "186:     sqlite3_result_null(pCtx);",
          "187:     return;",
          "188:   }",
          "189:   z = sqlite3_malloc( p->nDigit+4 );",
          "190:   if( z==0 ){",
          "191:     sqlite3_result_error_nomem(pCtx);",
          "192:     return;",
          "193:   }",
          "194:   i = 0;",
          "195:   if( p->nDigit==0 || (p->nDigit==1 && p->a[0]==0) ){",
          "196:     p->sign = 0;",
          "197:   }",
          "198:   if( p->sign ){",
          "199:     z[0] = '-';",
          "200:     i = 1;",
          "201:   }",
          "202:   n = p->nDigit - p->nFrac;",
          "203:   if( n<=0 ){",
          "204:     z[i++] = '0';",
          "205:   }",
          "206:   j = 0;",
          "207:   while( n>1 && p->a[j]==0 ){",
          "208:     j++;",
          "209:     n--;",
          "210:   }",
          "211:   while( n>0  ){",
          "212:     z[i++] = p->a[j] + '0';",
          "213:     j++;",
          "214:     n--;",
          "215:   }",
          "216:   if( p->nFrac ){",
          "217:     z[i++] = '.';",
          "218:     do{",
          "219:       z[i++] = p->a[j] + '0';",
          "220:       j++;",
          "221:     }while( j<p->nDigit );",
          "222:   }",
          "223:   z[i] = 0;",
          "224:   sqlite3_result_text(pCtx, z, i, sqlite3_free);",
          "225: }",
          "232: static void decimalFunc(",
          "233:   sqlite3_context *context,",
          "234:   int argc,",
          "235:   sqlite3_value **argv",
          "236: ){",
          "237:   Decimal *p = decimal_new(context, argv[0], 0, 0);",
          "238:   decimal_result(context, p);",
          "239:   decimal_free(p);",
          "240: }",
          "253: static int decimal_cmp(const Decimal *pA, const Decimal *pB){",
          "254:   int nASig, nBSig, rc, n;",
          "255:   if( pA->sign!=pB->sign ){",
          "256:     return pA->sign ? -1 : +1;",
          "257:   }",
          "258:   if( pA->sign ){",
          "259:     const Decimal *pTemp = pA;",
          "260:     pA = pB;",
          "261:     pB = pTemp;",
          "262:   }",
          "263:   nASig = pA->nDigit - pA->nFrac;",
          "264:   nBSig = pB->nDigit - pB->nFrac;",
          "265:   if( nASig!=nBSig ){",
          "266:     return nASig - nBSig;",
          "267:   }",
          "268:   n = pA->nDigit;",
          "269:   if( n>pB->nDigit ) n = pB->nDigit;",
          "270:   rc = memcmp(pA->a, pB->a, n);",
          "271:   if( rc==0 ){",
          "272:     rc = pA->nDigit - pB->nDigit;",
          "273:   }",
          "274:   return rc;",
          "275: }",
          "283: static void decimalCmpFunc(",
          "284:   sqlite3_context *context,",
          "285:   int argc,",
          "286:   sqlite3_value **argv",
          "287: ){",
          "288:   Decimal *pA = 0, *pB = 0;",
          "289:   int rc;",
          "291:   pA = decimal_new(context, argv[0], 0, 0);",
          "292:   if( pA==0 || pA->isNull ) goto cmp_done;",
          "293:   pB = decimal_new(context, argv[1], 0, 0);",
          "294:   if( pB==0 || pB->isNull ) goto cmp_done;",
          "295:   rc = decimal_cmp(pA, pB);",
          "296:   if( rc<0 ) rc = -1;",
          "297:   else if( rc>0 ) rc = +1;",
          "298:   sqlite3_result_int(context, rc);",
          "299: cmp_done:",
          "300:   decimal_free(pA);",
          "301:   decimal_free(pB);",
          "302: }",
          "308: static void decimal_expand(Decimal *p, int nDigit, int nFrac){",
          "309:   int nAddSig;",
          "310:   int nAddFrac;",
          "311:   if( p==0 ) return;",
          "312:   nAddFrac = nFrac - p->nFrac;",
          "313:   nAddSig = (nDigit - p->nDigit) - nAddFrac;",
          "314:   if( nAddFrac==0 && nAddSig==0 ) return;",
          "315:   p->a = sqlite3_realloc64(p->a, nDigit+1);",
          "316:   if( p->a==0 ){",
          "317:     p->oom = 1;",
          "318:     return;",
          "319:   }",
          "320:   if( nAddSig ){",
          "321:     memmove(p->a+nAddSig, p->a, p->nDigit);",
          "322:     memset(p->a, 0, nAddSig);",
          "323:     p->nDigit += nAddSig;",
          "324:   }",
          "325:   if( nAddFrac ){",
          "326:     memset(p->a+p->nDigit, 0, nAddFrac);",
          "327:     p->nDigit += nAddFrac;",
          "328:     p->nFrac += nAddFrac;",
          "329:   }",
          "330: }",
          "337: static void decimal_add(Decimal *pA, Decimal *pB){",
          "338:   int nSig, nFrac, nDigit;",
          "339:   int i, rc;",
          "340:   if( pA==0 ){",
          "341:     return;",
          "342:   }",
          "343:   if( pA->oom || pB==0 || pB->oom ){",
          "344:     pA->oom = 1;",
          "345:     return;",
          "346:   }",
          "347:   if( pA->isNull || pB->isNull ){",
          "348:     pA->isNull = 1;",
          "349:     return;",
          "350:   }",
          "351:   nSig = pA->nDigit - pA->nFrac;",
          "352:   if( nSig && pA->a[0]==0 ) nSig--;",
          "353:   if( nSig<pB->nDigit-pB->nFrac ){",
          "354:     nSig = pB->nDigit - pB->nFrac;",
          "355:   }",
          "356:   nFrac = pA->nFrac;",
          "357:   if( nFrac<pB->nFrac ) nFrac = pB->nFrac;",
          "358:   nDigit = nSig + nFrac + 1;",
          "359:   decimal_expand(pA, nDigit, nFrac);",
          "360:   decimal_expand(pB, nDigit, nFrac);",
          "361:   if( pA->oom || pB->oom ){",
          "362:     pA->oom = 1;",
          "363:   }else{",
          "364:     if( pA->sign==pB->sign ){",
          "365:       int carry = 0;",
          "366:       for(i=nDigit-1; i>=0; i--){",
          "367:         int x = pA->a[i] + pB->a[i] + carry;",
          "368:         if( x>=10 ){",
          "369:           carry = 1;",
          "370:           pA->a[i] = x - 10;",
          "371:         }else{",
          "372:           carry = 0;",
          "373:           pA->a[i] = x;",
          "374:         }",
          "375:       }",
          "376:     }else{",
          "377:       signed char *aA, *aB;",
          "378:       int borrow = 0;",
          "379:       rc = memcmp(pA->a, pB->a, nDigit);",
          "380:       if( rc<0 ){",
          "381:         aA = pB->a;",
          "382:         aB = pA->a;",
          "383:         pA->sign = !pA->sign;",
          "384:       }else{",
          "385:         aA = pA->a;",
          "386:         aB = pB->a;",
          "387:       }",
          "388:       for(i=nDigit-1; i>=0; i--){",
          "389:         int x = aA[i] - aB[i] - borrow;",
          "390:         if( x<0 ){",
          "391:           pA->a[i] = x+10;",
          "392:           borrow = 1;",
          "393:         }else{",
          "394:           pA->a[i] = x;",
          "395:           borrow = 0;",
          "396:         }",
          "397:       }",
          "398:     }",
          "399:   }",
          "400: }",
          "405: static int decimalCollFunc(",
          "406:   void *notUsed,",
          "407:   int nKey1, const void *pKey1,",
          "408:   int nKey2, const void *pKey2",
          "409: ){",
          "410:   const unsigned char *zA = (const unsigned char*)pKey1;",
          "411:   const unsigned char *zB = (const unsigned char*)pKey2;",
          "412:   Decimal *pA = decimal_new(0, 0, nKey1, zA);",
          "413:   Decimal *pB = decimal_new(0, 0, nKey2, zB);",
          "414:   int rc;",
          "415:   if( pA==0 || pB==0 ){",
          "416:     rc = 0;",
          "417:   }else{",
          "418:     rc = decimal_cmp(pA, pB);",
          "419:   }",
          "420:   decimal_free(pA);",
          "421:   decimal_free(pB);",
          "422:   return rc;",
          "423: }",
          "432: static void decimalAddFunc(",
          "433:   sqlite3_context *context,",
          "434:   int argc,",
          "435:   sqlite3_value **argv",
          "436: ){",
          "437:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "438:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "439:   decimal_add(pA, pB);",
          "440:   decimal_result(context, pA);",
          "441:   decimal_free(pA);",
          "442:   decimal_free(pB);",
          "443: }",
          "444: static void decimalSubFunc(",
          "445:   sqlite3_context *context,",
          "446:   int argc,",
          "447:   sqlite3_value **argv",
          "448: ){",
          "449:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "450:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "451:   if( pB==0 ) return;",
          "452:   pB->sign = !pB->sign;",
          "453:   decimal_add(pA, pB);",
          "454:   decimal_result(context, pA);",
          "455:   decimal_free(pA);",
          "456:   decimal_free(pB);",
          "457: }",
          "464: static void decimalSumStep(",
          "465:   sqlite3_context *context,",
          "466:   int argc,",
          "467:   sqlite3_value **argv",
          "468: ){",
          "469:   Decimal *p;",
          "470:   Decimal *pArg;",
          "471:   p = sqlite3_aggregate_context(context, sizeof(*p));",
          "472:   if( p==0 ) return;",
          "473:   if( !p->isInit ){",
          "474:     p->isInit = 1;",
          "475:     p->a = sqlite3_malloc(2);",
          "476:     if( p->a==0 ){",
          "477:       p->oom = 1;",
          "478:     }else{",
          "479:       p->a[0] = 0;",
          "480:     }",
          "481:     p->nDigit = 1;",
          "482:     p->nFrac = 0;",
          "483:   }",
          "484:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "485:   pArg = decimal_new(context, argv[0], 0, 0);",
          "486:   decimal_add(p, pArg);",
          "487:   decimal_free(pArg);",
          "488: }",
          "489: static void decimalSumInverse(",
          "490:   sqlite3_context *context,",
          "491:   int argc,",
          "492:   sqlite3_value **argv",
          "493: ){",
          "494:   Decimal *p;",
          "495:   Decimal *pArg;",
          "496:   p = sqlite3_aggregate_context(context, sizeof(*p));",
          "497:   if( p==0 ) return;",
          "498:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "499:   pArg = decimal_new(context, argv[0], 0, 0);",
          "500:   if( pArg ) pArg->sign = !pArg->sign;",
          "501:   decimal_add(p, pArg);",
          "502:   decimal_free(pArg);",
          "503: }",
          "504: static void decimalSumValue(sqlite3_context *context){",
          "505:   Decimal *p = sqlite3_aggregate_context(context, 0);",
          "506:   if( p==0 ) return;",
          "507:   decimal_result(context, p);",
          "508: }",
          "509: static void decimalSumFinalize(sqlite3_context *context){",
          "510:   Decimal *p = sqlite3_aggregate_context(context, 0);",
          "511:   if( p==0 ) return;",
          "512:   decimal_result(context, p);",
          "513:   decimal_clear(p);",
          "514: }",
          "526: static void decimalMulFunc(",
          "527:   sqlite3_context *context,",
          "528:   int argc,",
          "529:   sqlite3_value **argv",
          "530: ){",
          "531:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "532:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "533:   signed char *acc = 0;",
          "534:   int i, j, k;",
          "535:   int minFrac;",
          "536:   if( pA==0 || pA->oom || pA->isNull",
          "537:    || pB==0 || pB->oom || pB->isNull",
          "538:   ){",
          "539:     goto mul_end;",
          "540:   }",
          "541:   acc = sqlite3_malloc64( pA->nDigit + pB->nDigit + 2 );",
          "542:   if( acc==0 ){",
          "543:     sqlite3_result_error_nomem(context);",
          "544:     goto mul_end;",
          "545:   }",
          "546:   memset(acc, 0, pA->nDigit + pB->nDigit + 2);",
          "547:   minFrac = pA->nFrac;",
          "548:   if( pB->nFrac<minFrac ) minFrac = pB->nFrac;",
          "549:   for(i=pA->nDigit-1; i>=0; i--){",
          "550:     signed char f = pA->a[i];",
          "551:     int carry = 0, x;",
          "552:     for(j=pB->nDigit-1, k=i+j+3; j>=0; j--, k--){",
          "553:       x = acc[k] + f*pB->a[j] + carry;",
          "554:       acc[k] = x%10;",
          "555:       carry = x/10;",
          "556:     }",
          "557:     x = acc[k] + carry;",
          "558:     acc[k] = x%10;",
          "559:     acc[k-1] += x/10;",
          "560:   }",
          "561:   sqlite3_free(pA->a);",
          "562:   pA->a = acc;",
          "563:   acc = 0;",
          "564:   pA->nDigit += pB->nDigit + 2;",
          "565:   pA->nFrac += pB->nFrac;",
          "566:   pA->sign ^= pB->sign;",
          "567:   while( pA->nFrac>minFrac && pA->a[pA->nDigit-1]==0 ){",
          "568:     pA->nFrac--;",
          "569:     pA->nDigit--;",
          "570:   }",
          "571:   decimal_result(context, pA);",
          "573: mul_end:",
          "574:   sqlite3_free(acc);",
          "575:   decimal_free(pA);",
          "576:   decimal_free(pB);",
          "577: }",
          "579: #ifdef _WIN32",
          "580: __declspec(dllexport)",
          "581: #endif",
          "582: int sqlite3_decimal_init(",
          "583:   sqlite3 *db,",
          "584:   char **pzErrMsg,",
          "585:   const sqlite3_api_routines *pApi",
          "586: ){",
          "587:   int rc = SQLITE_OK;",
          "588:   SQLITE_EXTENSION_INIT2(pApi);",
          "589:   static const struct {",
          "590:     const char *zFuncName;",
          "591:     int nArg;",
          "592:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);",
          "593:   } aFunc[] = {",
          "594:     { \"decimal\",       1,   decimalFunc        },",
          "595:     { \"decimal_cmp\",   2,   decimalCmpFunc     },",
          "596:     { \"decimal_add\",   2,   decimalAddFunc     },",
          "597:     { \"decimal_sub\",   2,   decimalSubFunc     },",
          "598:     { \"decimal_mul\",   2,   decimalMulFunc     },",
          "599:   };",
          "600:   int i;",
          "603:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "604:     rc = sqlite3_create_function(db, aFunc[i].zFuncName, aFunc[i].nArg,",
          "605:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC,",
          "606:                    0, aFunc[i].xFunc, 0, 0);",
          "607:   }",
          "608:   if( rc==SQLITE_OK ){",
          "609:     rc = sqlite3_create_window_function(db, \"decimal_sum\", 1,",
          "610:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC, 0,",
          "611:                    decimalSumStep, decimalSumFinalize,",
          "612:                    decimalSumValue, decimalSumInverse, 0);",
          "613:   }",
          "614:   if( rc==SQLITE_OK ){",
          "615:     rc = sqlite3_create_collation(db, \"decimal\", SQLITE_UTF8,",
          "616:                                   0, decimalCollFunc);",
          "617:   }",
          "618:   return rc;",
          "619: }",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:   $(TOP)/ext/misc/carray.c \\",
          "364:   $(TOP)/ext/misc/closure.c \\",
          "365:   $(TOP)/ext/misc/csv.c \\",
          "366:   $(TOP)/ext/misc/eval.c \\",
          "367:   $(TOP)/ext/misc/explain.c \\",
          "368:   $(TOP)/ext/misc/fileio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:   $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742:  $(TOP)/src/shell.c.in \\",
          "743:         $(TOP)/ext/misc/appendvfs.c \\",
          "744:  $(TOP)/ext/misc/shathree.c \\",
          "745:  $(TOP)/ext/misc/fileio.c \\",
          "746:  $(TOP)/ext/misc/completion.c \\",
          "747:  $(TOP)/ext/misc/sqlar.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:         $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d45c27a3e5edaa2bd9ff0473e18c6536aa5d15f9a4d22dfee894a5ee4347f8d7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1011: INCLUDE ../ext/misc/appendvfs.c",
          "1012: INCLUDE ../ext/misc/memtrace.c",
          "1013: INCLUDE ../ext/misc/uint.c",
          "1014: #ifdef SQLITE_HAVE_ZLIB",
          "1015: INCLUDE ../ext/misc/zipfile.c",
          "1016: INCLUDE ../ext/misc/sqlar.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1014: INCLUDE ../ext/misc/decimal.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4556:     sqlite3_shathree_init(p->db, 0, 0);",
          "4557:     sqlite3_completion_init(p->db, 0, 0);",
          "4558:     sqlite3_uint_init(p->db, 0, 0);",
          "4559: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)",
          "4560:     sqlite3_dbdata_init(p->db, 0, 0);",
          "4561: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4560:     sqlite3_decimal_init(p->db, 0, 0);",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7257:   extern int sqlite3_eval_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7258:   extern int sqlite3_explain_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7259:   extern int sqlite3_fileio_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7260:   extern int sqlite3_fuzzer_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7261:   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7262:   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7260:   extern int sqlite3_decimal_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7282:     { \"carray\",                sqlite3_carray_init               },",
          "7283:     { \"closure\",               sqlite3_closure_init              },",
          "7284:     { \"csv\",                   sqlite3_csv_init                  },",
          "7285:     { \"eval\",                  sqlite3_eval_init                 },",
          "7286:     { \"explain\",               sqlite3_explain_init              },",
          "7287:     { \"fileio\",                sqlite3_fileio_init               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7286:     { \"decimal\",               sqlite3_decimal_init              },",
          "",
          "---------------"
        ],
        "test/decimal.test||test/decimal.test": [
          "File: test/decimal.test -> test/decimal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2017 December 9",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix decimal",
          "17: if {[catch {load_static_extension db decimal} error]} {",
          "18:   puts \"Skipping zipfile tests, hit load error: $error\"",
          "19:   finish_test; return",
          "20: }",
          "22: do_execsql_test 1000 {",
          "23:   SELECT decimal(1);",
          "24: } {1}",
          "25: do_execsql_test 1010 {",
          "26:   SELECT decimal(1.0);",
          "27: } {1.0}",
          "28: do_execsql_test 1020 {",
          "29:   SELECT decimal(0001.0);",
          "30: } {1.0}",
          "31: do_execsql_test 1030 {",
          "32:   SELECT decimal(+0001.0);",
          "33: } {1.0}",
          "34: do_execsql_test 1040 {",
          "35:   SELECT decimal(-0001.0);",
          "36: } {-1.0}",
          "37: do_execsql_test 1050 {",
          "38:   SELECT decimal(1.0e72);",
          "39: } {1000000000000000000000000000000000000000000000000000000000000000000000000}",
          "40: #   123456789 123456789 123456789 123456789 123456789 123456789 123456789 123",
          "41: do_execsql_test 1060 {",
          "42:   SELECT decimal(1.0e-72);",
          "43: } {0.0000000000000000000000000000000000000000000000000000000000000000000000010}",
          "44: #    123456789 123456789 123456789 123456789 123456789 123456789 123456789 123",
          "45: do_execsql_test 1070 {",
          "46:   SELECT decimal(-123e-4);",
          "47: } {-0.0123}",
          "48: do_execsql_test 1080 {",
          "49:   SELECT decimal(+123e+4);",
          "50: } {1230000.0}",
          "53: do_execsql_test 2000 {",
          "54:   CREATE TABLE t1(seq INTEGER PRIMARY KEY, val TEXT);",
          "55:   INSERT INTO t1 VALUES",
          "56:     (1, '-9999e99'),",
          "57:     (2, '-9998.000e+99'),",
          "58:     (3, '-9999.0'),",
          "59:     (4, '-1'),",
          "60:     (5, '-9999e-20'),",
          "61:     (6, '0'),",
          "62:     (7, '1e-30'),",
          "63:     (8, '1e-29'),",
          "64:     (9, '1'),",
          "65:     (10,'1.00000000000000001'),",
          "66:     (11,'+1.00001'),",
          "67:     (12,'99e+99');",
          "68:   SELECT *, '|'",
          "69:     FROM t1 AS a, t1 AS b",
          "70:    WHERE a.seq<b.seq",
          "71:      AND decimal_cmp(a.val,b.val)>=0;",
          "72: } {}",
          "73: do_execsql_test 2010 {",
          "74:   SELECT *, '|'",
          "75:     FROM t1 AS a, t1 AS b",
          "76:    WHERE a.seq<>b.seq",
          "77:      AND decimal_cmp(a.val,b.val)==0;",
          "78: } {}",
          "79: do_execsql_test 2020 {",
          "80:   SELECT *, '|'",
          "81:     FROM t1 AS a, t1 AS b",
          "82:    WHERE a.seq>b.seq",
          "83:      AND decimal_cmp(a.val,b.val)<=0;",
          "84: } {}",
          "85: do_execsql_test 2030 {",
          "86:   SELECT seq FROM t1 ORDER BY val COLLATE decimal;",
          "87: } {1 2 3 4 5 6 7 8 9 10 11 12}",
          "88: do_execsql_test 2040 {",
          "89:   SELECT seq FROM t1 ORDER BY val COLLATE decimal DESC;",
          "90: } {12 11 10 9 8 7 6 5 4 3 2 1}",
          "92: do_execsql_test 3000 {",
          "93:   CREATE TABLE t3(seq INTEGER PRIMARY KEY, val TEXT);",
          "94:   WITH RECURSIVE c(x) AS (VALUES(1) UNION SELECT x+1 FROM c WHERE x<10)",
          "95:     INSERT INTO t3(seq, val) SELECT x, x FROM c;",
          "96:   WITH RECURSIVE c(x) AS (VALUES(1) UNION SELECT x+1 FROM c WHERE x<5)",
          "97:     INSERT INTO t3(seq, val) SELECT x+10, x*1000 FROM c;",
          "98:   SELECT decimal(val) FROM t3 ORDER BY seq;",
          "99: } {1 2 3 4 5 6 7 8 9 10 1000 2000 3000 4000 5000}",
          "100: do_execsql_test 3020 {",
          "101:   SELECT decimal_add(val,'0.5') FROM t3 WHERE seq>5 ORDER BY seq",
          "102: } {6.5 7.5 8.5 9.5 10.5 1000.5 2000.5 3000.5 4000.5 5000.5}",
          "103: do_execsql_test 3030 {",
          "104:   SELECT decimal_add(val,'-10') FROM t3 ORDER BY seq;",
          "105: } {-9 -8 -7 -6 -5 -4 -3 -2 -1 0 990 1990 2990 3990 4990}",
          "107: do_execsql_test 4000 {",
          "108:   SELECT decimal_sum(val) FROM t3;",
          "109: } {15055}",
          "110: do_execsql_test 4010 {",
          "111:   SELECT decimal_sum(decimal_add(val,val||'e+10')) FROM t3;",
          "112: } {150550000015055}",
          "113: do_execsql_test 4010 {",
          "114:   SELECT decimal_sum(decimal_add(val||'e+20',decimal_add(val,val||'e-20')))",
          "115:     FROM t3;",
          "116: } {1505500000000000000015055.00000000000000015055}",
          "118: do_execsql_test 5000 {",
          "119:   WITH RECURSIVE c(x,y,z) AS (",
          "120:     VALUES(0,'1','1')",
          "121:     UNION ALL",
          "122:     SELECT x+1, decimal_mul(y,'2'), decimal_mul(z,'0.5')",
          "123:       FROM c WHERE x<32",
          "124:   )",
          "125:   SELECT count(*) FROM c WHERE decimal_mul(y,z)='1';",
          "126: } {33}",
          "128: do_execsql_test 5100 {",
          "129:   SELECT decimal_mul('1234.00','2.00');",
          "130: } {2468.00}",
          "131: do_execsql_test 5101 {",
          "132:   SELECT decimal_mul('1234.00','2.0000');",
          "133: } {2468.00}",
          "134: do_execsql_test 5102 {",
          "135:   SELECT decimal_mul('1234.0000','2.000');",
          "136: } {2468.000}",
          "137: do_execsql_test 5103 {",
          "138:   SELECT decimal_mul('1234.0000','2');",
          "139: } {2468}",
          "142: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}