{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "449b45e84055938bdcd7e31ae0c2d42aa576be12",
      "candidate_info": {
        "commit_hash": "449b45e84055938bdcd7e31ae0c2d42aa576be12",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/449b45e84055938bdcd7e31ae0c2d42aa576be12",
        "files": [
          "winpr/include/winpr/bitstream.h"
        ],
        "message": "Fixed BehaviorSantizer warnings.\n\n(cherry picked from commit 7a509fe27749e006a9a58854c4abb4522fc58c81)",
        "before_after_code_files": [
          "winpr/include/winpr/bitstream.h||winpr/include/winpr/bitstream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/bitstream.h||winpr/include/winpr/bitstream.h": [
          "File: winpr/include/winpr/bitstream.h -> winpr/include/winpr/bitstream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  {",
          "53:   (_bs->prefetch) = 0;",
          "54:   if (((UINT32)(_bs->pointer - _bs->buffer) + 4) < (_bs->capacity))",
          "56:   if (((UINT32)(_bs->pointer - _bs->buffer) + 5) < (_bs->capacity))",
          "58:   if (((UINT32)(_bs->pointer - _bs->buffer) + 6) < (_bs->capacity))",
          "60:   if (((UINT32)(_bs->pointer - _bs->buffer) + 7) < (_bs->capacity))",
          "62:  }",
          "64:  static INLINE void BitStream_Fetch(wBitStream* _bs)",
          "65:  {",
          "66:   (_bs->accumulator) = 0;",
          "67:   if (((UINT32)(_bs->pointer - _bs->buffer) + 0) < (_bs->capacity))",
          "69:   if (((UINT32)(_bs->pointer - _bs->buffer) + 1) < (_bs->capacity))",
          "71:   if (((UINT32)(_bs->pointer - _bs->buffer) + 2) < (_bs->capacity))",
          "73:   if (((UINT32)(_bs->pointer - _bs->buffer) + 3) < (_bs->capacity))",
          "75:   BitStream_Prefetch(_bs);",
          "76:  }",
          "78:  static INLINE void BitStream_Flush(wBitStream* _bs)",
          "79:  {",
          "80:   if (((UINT32)(_bs->pointer - _bs->buffer) + 0) < (_bs->capacity))",
          "82:   if (((UINT32)(_bs->pointer - _bs->buffer) + 1) < (_bs->capacity))",
          "84:   if (((UINT32)(_bs->pointer - _bs->buffer) + 2) < (_bs->capacity))",
          "86:   if (((UINT32)(_bs->pointer - _bs->buffer) + 3) < (_bs->capacity))",
          "88:  }",
          "90:  static INLINE void BitStream_Shift(wBitStream* _bs, UINT32 _nbits)",
          "",
          "[Removed Lines]",
          "55:    (_bs->prefetch) |= (*(_bs->pointer + 4) << 24);",
          "57:    (_bs->prefetch) |= (*(_bs->pointer + 5) << 16);",
          "59:    (_bs->prefetch) |= (*(_bs->pointer + 6) << 8);",
          "61:    (_bs->prefetch) |= (*(_bs->pointer + 7) << 0);",
          "68:    (_bs->accumulator) |= (*(_bs->pointer + 0) << 24);",
          "70:    (_bs->accumulator) |= (*(_bs->pointer + 1) << 16);",
          "72:    (_bs->accumulator) |= (*(_bs->pointer + 2) << 8);",
          "74:    (_bs->accumulator) |= (*(_bs->pointer + 3) << 0);",
          "",
          "[Added Lines]",
          "55:    (_bs->prefetch) |= ((UINT32) * (_bs->pointer + 4) << 24);",
          "57:    (_bs->prefetch) |= ((UINT32) * (_bs->pointer + 5) << 16);",
          "59:    (_bs->prefetch) |= ((UINT32) * (_bs->pointer + 6) << 8);",
          "61:    (_bs->prefetch) |= ((UINT32) * (_bs->pointer + 7) << 0);",
          "68:    (_bs->accumulator) |= ((UINT32) * (_bs->pointer + 0) << 24);",
          "70:    (_bs->accumulator) |= ((UINT32) * (_bs->pointer + 1) << 16);",
          "72:    (_bs->accumulator) |= ((UINT32) * (_bs->pointer + 2) << 8);",
          "74:    (_bs->accumulator) |= ((UINT32) * (_bs->pointer + 3) << 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:    _bs->offset += _nbits;",
          "100:    if (_bs->offset < 32)",
          "101:    {",
          "103:     _bs->accumulator |= ((_bs->prefetch >> (32 - _nbits)) & _bs->mask);",
          "104:     _bs->prefetch <<= _nbits;",
          "105:    }",
          "106:    else",
          "107:    {",
          "109:     _bs->accumulator |= ((_bs->prefetch >> (32 - _nbits)) & _bs->mask);",
          "110:     _bs->prefetch <<= _nbits;",
          "111:     _bs->offset -= 32;",
          "",
          "[Removed Lines]",
          "102:     _bs->mask = ((1 << _nbits) - 1);",
          "108:     _bs->mask = ((1 << _nbits) - 1);",
          "",
          "[Added Lines]",
          "102:     _bs->mask = ((1UL << _nbits) - 1);",
          "108:     _bs->mask = ((1UL << _nbits) - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:     BitStream_Prefetch(_bs);",
          "114:     if (_bs->offset)",
          "115:     {",
          "117:      _bs->accumulator |= ((_bs->prefetch >> (32 - _bs->offset)) & _bs->mask);",
          "118:      _bs->prefetch <<= _bs->offset;",
          "119:     }",
          "",
          "[Removed Lines]",
          "116:      _bs->mask = ((1 << _bs->offset) - 1);",
          "",
          "[Added Lines]",
          "116:      _bs->mask = ((1UL << _bs->offset) - 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:    _bs->pointer += 4;",
          "150:    if (_bs->offset)",
          "151:    {",
          "153:     _bs->accumulator |= ((_bits & _bs->mask) << (32 - _bs->offset));",
          "154:    }",
          "155:   }",
          "",
          "[Removed Lines]",
          "152:     _bs->mask = ((1 << _bs->offset) - 1);",
          "",
          "[Added Lines]",
          "152:     _bs->mask = ((1UL << _bs->offset) - 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "064a90c8b36b93f9d5c74dbb522203dfdca385c3",
      "candidate_info": {
        "commit_hash": "064a90c8b36b93f9d5c74dbb522203dfdca385c3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/064a90c8b36b93f9d5c74dbb522203dfdca385c3",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Fixed BehaviorSanitizer warnings\n\n(cherry picked from commit afdd81dab5c484ab95b977a0d71f3809c8fa89a3)",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2702:  if (Stream_GetRemainingLength(s) < 16)",
          "2703:   return FALSE;",
          "2704:  Stream_Read(s, g, 16);",
          "2708:  guid->Data4[0] = g[8];",
          "2709:  guid->Data4[1] = g[9];",
          "2710:  guid->Data4[2] = g[10];",
          "",
          "[Removed Lines]",
          "2705:  guid->Data1 = (g[3] << 24) | (g[2] << 16) | (g[1] << 8) | g[0];",
          "2706:  guid->Data2 = (g[5] << 8) | g[4];",
          "2707:  guid->Data3 = (g[7] << 8) | g[6];",
          "",
          "[Added Lines]",
          "2705:  guid->Data1 = ((UINT32)g[3] << 24U) | ((UINT32)g[2] << 16U) | (g[1] << 8U) | g[0];",
          "2706:  guid->Data2 = (g[5] << 8U) | g[4];",
          "2707:  guid->Data3 = (g[7] << 8U) | g[6];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
      "candidate_info": {
        "commit_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8305349a943c68b1bc8c158f431dc607655aadea",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed  GHSL-2020-102 heap overflow\n\n(cherry picked from commit 197b16cc15a12813c2e4fa2d6ae9cd9c4a57e581)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: static int crypto_rsa_common(const BYTE* input, int length, UINT32 key_length, const BYTE* modulus,",
          "97:                              const BYTE* exponent, int exponent_size, BYTE* output)",
          "98: {",
          "100:  int output_length = -1;",
          "107:  if (!input_reverse)",
          "108:   return -1;",
          "",
          "[Removed Lines]",
          "99:  BN_CTX* ctx;",
          "101:  BYTE* input_reverse;",
          "102:  BYTE* modulus_reverse;",
          "103:  BYTE* exponent_reverse;",
          "104:  BIGNUM *mod, *exp, *x, *y;",
          "105:  input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);",
          "",
          "[Added Lines]",
          "99:  BN_CTX* ctx = NULL;",
          "101:  BYTE* input_reverse = NULL;",
          "102:  BYTE* modulus_reverse = NULL;",
          "103:  BYTE* exponent_reverse = NULL;",
          "104:  BIGNUM* mod = NULL;",
          "105:  BIGNUM* exp = NULL;",
          "106:  BIGNUM* x = NULL;",
          "107:  BIGNUM* y = NULL;",
          "108:  size_t bufferSize = 2 * key_length + exponent_size;",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "113:  if (length > bufferSize)",
          "114:   bufferSize = length;",
          "116:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  if (!(y = BN_new()))",
          "132:   goto fail_bn_y;",
          "138:  output_length = BN_bn2bin(y, output);",
          "139:  crypto_reverse(output, output_length);",
          "142:   memset(output + output_length, 0, key_length - output_length);",
          "144:  BN_free(y);",
          "145: fail_bn_y:",
          "146:  BN_clear_free(x);",
          "",
          "[Removed Lines]",
          "134:  BN_bin2bn(modulus_reverse, key_length, mod);",
          "135:  BN_bin2bn(exponent_reverse, exponent_size, exp);",
          "136:  BN_bin2bn(input_reverse, length, x);",
          "137:  BN_mod_exp(y, x, exp, mod, ctx);",
          "141:  if (output_length < (int)key_length)",
          "",
          "[Added Lines]",
          "145:  if (!BN_bin2bn(modulus_reverse, key_length, mod))",
          "146:   goto fail;",
          "148:  if (!BN_bin2bn(exponent_reverse, exponent_size, exp))",
          "149:   goto fail;",
          "150:  if (!BN_bin2bn(input_reverse, length, x))",
          "151:   goto fail;",
          "152:  if (BN_mod_exp(y, x, exp, mod, ctx) != 1)",
          "153:   goto fail;",
          "155:  if (output_length < 0)",
          "156:   goto fail;",
          "159:  if (output_length < key_length)",
          "162: fail:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "228d16a8689e9e8c9ca0aacaa3d4acf607200c04",
      "candidate_info": {
        "commit_hash": "228d16a8689e9e8c9ca0aacaa3d4acf607200c04",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/228d16a8689e9e8c9ca0aacaa3d4acf607200c04",
        "files": [
          "server/proxy/freerdp_proxy.c"
        ],
        "message": "server: proxy: Register signal handler after modules finished loading.\n\nThis prevents a race where the signal handler free's structs that\nmodules use while initializing.\n\n(cherry picked from commit 42d99f4c6070a984afc43ec7e85650dc4e624af8)",
        "before_after_code_files": [
          "server/proxy/freerdp_proxy.c||server/proxy/freerdp_proxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/proxy/freerdp_proxy.c||server/proxy/freerdp_proxy.c": [
          "File: server/proxy/freerdp_proxy.c -> server/proxy/freerdp_proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if (argc >= 2)",
          "95:   config_path = argv[1];",
          "99:  config = pf_server_config_load(config_path);",
          "100:  if (!config)",
          "101:   goto fail;",
          "",
          "[Removed Lines]",
          "97:  pf_server_register_signal_handlers();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  if (!is_all_required_modules_loaded(config))",
          "114:   goto fail;",
          "116:  server = pf_server_new(config);",
          "117:  if (!server)",
          "118:   goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:  pf_server_register_signal_handlers();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e28385fbb5efd52dcad58e4acb623f1bd94a640",
      "candidate_info": {
        "commit_hash": "2e28385fbb5efd52dcad58e4acb623f1bd94a640",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2e28385fbb5efd52dcad58e4acb623f1bd94a640",
        "files": [
          "libfreerdp/codec/mppc.c"
        ],
        "message": "Fixed history buffer reset.\n\n(cherry picked from commit ccc9cbef2d5d0d9f5cf5ec7621f71bed33f41aba)",
        "before_after_code_files": [
          "libfreerdp/codec/mppc.c||libfreerdp/codec/mppc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/mppc.c||libfreerdp/codec/mppc.c": [
          "File: libfreerdp/codec/mppc.c -> libfreerdp/codec/mppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:  ZeroMemory(&(mppc->MatchBuffer), sizeof(mppc->MatchBuffer));",
          "774:  if (flush)",
          "775:   mppc->HistoryOffset = mppc->HistoryBufferSize + 1;",
          "776:  else",
          "777:   mppc->HistoryOffset = 0;",
          "779:  mppc->HistoryPtr = &(mppc->HistoryBuffer[mppc->HistoryOffset]);",
          "780: }",
          "782: MPPC_CONTEXT* mppc_context_new(DWORD CompressionLevel, BOOL Compressor)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:  {",
          "777:   mppc->HistoryPtr = mppc->HistoryBuffer;",
          "778:  }",
          "780:  {",
          "783:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}