{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e054c36294f9d8fc197c9d1b715ea2db334f6bf",
      "candidate_info": {
        "commit_hash": "3e054c36294f9d8fc197c9d1b715ea2db334f6bf",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3e054c36294f9d8fc197c9d1b715ea2db334f6bf",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "Now working on v0.11.13",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 12",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 13",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20e774c62a0d7ae952e5c5f068215b148be0c7aa",
      "candidate_info": {
        "commit_hash": "20e774c62a0d7ae952e5c5f068215b148be0c7aa",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/20e774c62a0d7ae952e5c5f068215b148be0c7aa",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows/fs: handle _open_osfhandle() failure correctly\n\nUntil now we assumed that _open_osfhandle() would set _doserrno on\nfailure. This assumption was very wrong in one obvious case, namely when\nthe CRT file descriptor table would fill up. In that case errno is set\nto EMFILE, but GetLastError() returns zero - which makes sense because\nit's not a win32 error but rather a CRT problem.",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:   DWORD disposition;",
          "391:   DWORD attributes = 0;",
          "392:   HANDLE file;",
          "394:   int flags = req->file_flags;",
          "",
          "[Removed Lines]",
          "393:   int result, current_umask;",
          "",
          "[Added Lines]",
          "393:   int fd, current_umask;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:     }",
          "503:     return;",
          "504:   }",
          "507:   return;",
          "509:  einval:",
          "",
          "[Removed Lines]",
          "505:   result = _open_osfhandle((intptr_t) file, flags);",
          "506:   SET_REQ_RESULT(req, result);",
          "",
          "[Added Lines]",
          "506:   fd = _open_osfhandle((intptr_t) file, flags);",
          "507:   if (fd < 0) {",
          "512:     if (errno == EMFILE)",
          "513:       SET_REQ_UV_ERROR(req, UV_EMFILE, ERROR_TOO_MANY_OPEN_FILES);",
          "514:     else if (GetLastError() != ERROR_SUCCESS)",
          "515:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "516:     else",
          "517:       SET_REQ_WIN32_ERROR(req, UV_UNKNOWN);",
          "518:     return;",
          "519:   }",
          "521:   SET_REQ_RESULT(req, fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6290755306d333ca8b4d481ad8b02effb1ffb1c",
      "candidate_info": {
        "commit_hash": "f6290755306d333ca8b4d481ad8b02effb1ffb1c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f6290755306d333ca8b4d481ad8b02effb1ffb1c",
        "files": [
          "src/win/pipe.c"
        ],
        "message": "win: open_named_pipe const argument",
        "before_after_code_files": [
          "src/win/pipe.c||src/win/pipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: }",
          "119:   HANDLE pipeHandle;",
          "",
          "[Removed Lines]",
          "118: static HANDLE open_named_pipe(WCHAR* name, DWORD* duplex_flags) {",
          "",
          "[Added Lines]",
          "118: static HANDLE open_named_pipe(const WCHAR* name, DWORD* duplex_flags) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "687322432d6c3ae1e97ee6217b783af77cf6be6d",
      "candidate_info": {
        "commit_hash": "687322432d6c3ae1e97ee6217b783af77cf6be6d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/687322432d6c3ae1e97ee6217b783af77cf6be6d",
        "files": [
          "src/win/util.c"
        ],
        "message": "win: minor coding style cleanup",
        "before_after_code_files": [
          "src/win/util.c||src/win/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   MEMORYSTATUSEX memory_status;",
          "315:   memory_status.dwLength = sizeof(memory_status);",
          "319:      return -1;",
          "320:   }",
          "",
          "[Removed Lines]",
          "317:   if(!GlobalMemoryStatusEx(&memory_status))",
          "318:   {",
          "",
          "[Added Lines]",
          "317:   if (!GlobalMemoryStatusEx(&memory_status)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:   MEMORYSTATUSEX memory_status;",
          "328:   memory_status.dwLength = sizeof(memory_status);",
          "332:     return -1;",
          "333:   }",
          "",
          "[Removed Lines]",
          "330:   if(!GlobalMemoryStatusEx(&memory_status))",
          "331:   {",
          "",
          "[Added Lines]",
          "329:   if (!GlobalMemoryStatusEx(&memory_status)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:   if (!length) {",
          "389:     err = GetLastError();",
          "390:     goto done;",
          "394:   if (length > MAX_TITLE_LENGTH) {",
          "",
          "[Removed Lines]",
          "391:   };",
          "",
          "[Added Lines]",
          "389:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82d01d5f6780d178f5176a01425ec297583c0811",
      "candidate_info": {
        "commit_hash": "82d01d5f6780d178f5176a01425ec297583c0811",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/82d01d5f6780d178f5176a01425ec297583c0811",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.09.03, Version 0.11.12 (Unstable)\n\nChanges since version 0.11.11:\n\n* test: fix epoll_wait() usage in test-embed.c (Ben Noordhuis)\n\n* include: uv_alloc_cb now takes uv_buf_t* (Ben Noordhuis)\n\n* include: uv_read{2}_cb now takes const uv_buf_t* (Ben Noordhuis)\n\n* include: uv_ip[46]_addr now takes sockaddr_in* (Ben Noordhuis)\n\n* include: uv_tcp_bind{6} now takes sockaddr_in* (Ben Noordhuis)\n\n* include: uv_tcp_connect{6} now takes sockaddr_in* (Ben Noordhuis)\n\n* include: uv_udp_recv_cb now takes const uv_buf_t* (Ben Noordhuis)\n\n* include: uv_udp_bind{6} now takes sockaddr_in* (Ben Noordhuis)\n\n* include: uv_udp_send{6} now takes sockaddr_in* (Ben Noordhuis)\n\n* include: uv_spawn takes const uv_process_options_t* (Ben Noordhuis)\n\n* include: make uv_write{2} const correct (Ben Noordhuis)\n\n* windows: fix flags assignment in uv_fs_readdir() (Ben Noordhuis)\n\n* windows: fix stray comments (Ben Noordhuis)\n\n* windows: remove unused is_path_dir() function (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 12",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}