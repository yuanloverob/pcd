{
  "cve_id": "CVE-2016-10011",
  "cve_desc": "authfile.c in sshd in OpenSSH before 7.4 does not properly consider the effects of realloc on buffer contents, which might allow local users to obtain sensitive private-key information by leveraging access to a privilege-separated child process.",
  "repo": "openbsd/src",
  "patch_hash": "ac8147a06ed2e2403fb6b9a0c03e618a9333c0e9",
  "patch_info": {
    "commit_hash": "ac8147a06ed2e2403fb6b9a0c03e618a9333c0e9",
    "repo": "openbsd/src",
    "commit_url": "https://github.com/openbsd/src/commit/ac8147a06ed2e2403fb6b9a0c03e618a9333c0e9",
    "files": [
      "usr.bin/ssh/authfile.c"
    ],
    "message": "use sshbuf_allocate() to pre-allocate the buffer used for loading keys. This avoids implicit realloc inside the buffer code, which might theoretically leave fragments of the key on the heap. This doesn't appear to happen in practice for normal sized keys, but was observed for novelty oversize ones.\n\nPointed out by Jann Horn of Project Zero; ok markus@",
    "before_after_code_files": [
      "usr.bin/ssh/authfile.c||usr.bin/ssh/authfile.c"
    ]
  },
  "patch_diff": {
    "usr.bin/ssh/authfile.c||usr.bin/ssh/authfile.c": [
      "File: usr.bin/ssh/authfile.c -> usr.bin/ssh/authfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "98:  u_char buf[1024];",
      "99:  size_t len;",
      "100:  struct stat st;",
      "103:  if (fstat(fd, &st) < 0)",
      "104:   return SSH_ERR_SYSTEM_ERROR;",
      "105:  if ((st.st_mode & (S_IFSOCK|S_IFCHR|S_IFIFO)) == 0 &&",
      "106:      st.st_size > MAX_KEY_FILE_SIZE)",
      "107:   return SSH_ERR_INVALID_FORMAT;",
      "108:  for (;;) {",
      "109:   if ((len = atomicio(read, fd, buf, sizeof(buf))) == 0) {",
      "110:    if (errno == EPIPE)",
      "",
      "[Removed Lines]",
      "101:  int r;",
      "",
      "[Added Lines]",
      "101:  int r, dontmax = 0;",
      "113:  if ((st.st_mode & S_IFREG) == 0 || st.st_size <= 0) {",
      "115:   dontmax = 1;",
      "116:  }",
      "117:  if ((r = sshbuf_allocate(blob, st.st_size)) != 0 ||",
      "118:      (dontmax && (r = sshbuf_set_max_size(blob, st.st_size)) != 0))",
      "119:   return r;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eaf8e3f625bd9364efecd3cd275b7db8f0a89776",
      "candidate_info": {
        "commit_hash": "eaf8e3f625bd9364efecd3cd275b7db8f0a89776",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/eaf8e3f625bd9364efecd3cd275b7db8f0a89776",
        "files": [
          "usr.bin/ssh/auth2-pubkey.c",
          "usr.bin/ssh/authfile.c",
          "usr.bin/ssh/bitmap.c",
          "usr.bin/ssh/clientloop.c",
          "usr.bin/ssh/hostfile.c",
          "usr.bin/ssh/krl.c",
          "usr.bin/ssh/misc.c",
          "usr.bin/ssh/scp.c",
          "usr.bin/ssh/session.c",
          "usr.bin/ssh/ssh-pkcs11.c",
          "usr.bin/ssh/sshbuf.c",
          "usr.bin/ssh/sshkey.c",
          "usr.bin/ssh/utf8.c",
          "usr.bin/ssh/xmalloc.c",
          "usr.bin/ssh/xmalloc.h"
        ],
        "message": "Switch to recallocarray() for a few operations.  Both growth and shrinkage are handled safely, and there also is no need for preallocation dances. Future changes in this area will be less error prone. Review and one bug found by markus",
        "before_after_code_files": [
          "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c",
          "usr.bin/ssh/authfile.c||usr.bin/ssh/authfile.c",
          "usr.bin/ssh/bitmap.c||usr.bin/ssh/bitmap.c",
          "usr.bin/ssh/clientloop.c||usr.bin/ssh/clientloop.c",
          "usr.bin/ssh/hostfile.c||usr.bin/ssh/hostfile.c",
          "usr.bin/ssh/krl.c||usr.bin/ssh/krl.c",
          "usr.bin/ssh/misc.c||usr.bin/ssh/misc.c",
          "usr.bin/ssh/scp.c||usr.bin/ssh/scp.c",
          "usr.bin/ssh/session.c||usr.bin/ssh/session.c",
          "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c",
          "usr.bin/ssh/sshbuf.c||usr.bin/ssh/sshbuf.c",
          "usr.bin/ssh/sshkey.c||usr.bin/ssh/sshkey.c",
          "usr.bin/ssh/utf8.c||usr.bin/ssh/utf8.c",
          "usr.bin/ssh/xmalloc.c||usr.bin/ssh/xmalloc.c",
          "usr.bin/ssh/xmalloc.h||usr.bin/ssh/xmalloc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/authfile.c||usr.bin/ssh/authfile.c"
          ],
          "candidate": [
            "usr.bin/ssh/authfile.c||usr.bin/ssh/authfile.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c": [
          "File: usr.bin/ssh/auth2-pubkey.c -> usr.bin/ssh/auth2-pubkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153:  struct sshkey **tmp;",
          "1155:  if (authctxt->nprev_userkeys >= INT_MAX ||",
          "1159:  authctxt->prev_userkeys = tmp;",
          "1160:  authctxt->prev_userkeys[authctxt->nprev_userkeys] = key;",
          "1161:  authctxt->nprev_userkeys++;",
          "",
          "[Removed Lines]",
          "1156:      (tmp = reallocarray(authctxt->prev_userkeys,",
          "1157:      authctxt->nprev_userkeys + 1, sizeof(*tmp))) == NULL)",
          "1158:   fatal(\"%s: reallocarray failed\", __func__);",
          "",
          "[Added Lines]",
          "1156:      (tmp = recallocarray(authctxt->prev_userkeys,",
          "1157:      authctxt->nprev_userkeys, authctxt->nprev_userkeys + 1,",
          "1158:      sizeof(*tmp))) == NULL)",
          "1159:   fatal(\"%s: recallocarray failed\", __func__);",
          "",
          "---------------"
        ],
        "usr.bin/ssh/authfile.c||usr.bin/ssh/authfile.c": [
          "File: usr.bin/ssh/authfile.c -> usr.bin/ssh/authfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  u_char buf[1024];",
          "99:  size_t len;",
          "100:  struct stat st;",
          "103:  if (fstat(fd, &st) < 0)",
          "104:   return SSH_ERR_SYSTEM_ERROR;",
          "105:  if ((st.st_mode & (S_IFSOCK|S_IFCHR|S_IFIFO)) == 0 &&",
          "106:      st.st_size > MAX_KEY_FILE_SIZE)",
          "107:   return SSH_ERR_INVALID_FORMAT;",
          "120:  for (;;) {",
          "121:   if ((len = atomicio(read, fd, buf, sizeof(buf))) == 0) {",
          "122:    if (errno == EPIPE)",
          "",
          "[Removed Lines]",
          "101:  int r, dontmax = 0;",
          "113:  if ((st.st_mode & S_IFREG) == 0 || st.st_size <= 0) {",
          "115:   dontmax = 1;",
          "116:  }",
          "117:  if ((r = sshbuf_allocate(blob, st.st_size)) != 0 ||",
          "118:      (dontmax && (r = sshbuf_set_max_size(blob, st.st_size)) != 0))",
          "119:   return r;",
          "",
          "[Added Lines]",
          "101:  int r;",
          "",
          "---------------"
        ],
        "usr.bin/ssh/bitmap.c||usr.bin/ssh/bitmap.c": [
          "File: usr.bin/ssh/bitmap.c -> usr.bin/ssh/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  nlen = (n / BITMAP_BITS) + 1;",
          "87:  if (b->len < nlen) {",
          "89:    return -1;",
          "90:   b->d = tmp;",
          "91:   memset(b->d + b->len, 0, (nlen - b->len) * BITMAP_BYTES);",
          "",
          "[Removed Lines]",
          "88:   if ((tmp = reallocarray(b->d, nlen, BITMAP_BYTES)) == NULL)",
          "",
          "[Added Lines]",
          "88:   if ((tmp = recallocarray(b->d, b->len, nlen, BITMAP_BYTES)) == NULL)",
          "",
          "---------------"
        ],
        "usr.bin/ssh/clientloop.c||usr.bin/ssh/clientloop.c": [
          "File: usr.bin/ssh/clientloop.c -> usr.bin/ssh/clientloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1798:  debug3(\"%s: deprecated %s key at %s:%ld\", __func__,",
          "1799:      sshkey_ssh_name(l->key), l->path, l->linenum);",
          "1801:      sizeof(*ctx->old_keys))) == NULL)",
          "1803:       __func__, ctx->nold);",
          "1804:  ctx->old_keys = tmp;",
          "1805:  ctx->old_keys[ctx->nold++] = l->key;",
          "",
          "[Removed Lines]",
          "1800:  if ((tmp = reallocarray(ctx->old_keys, ctx->nold + 1,",
          "1802:   fatal(\"%s: reallocarray failed nold = %zu\",",
          "",
          "[Added Lines]",
          "1800:  if ((tmp = recallocarray(ctx->old_keys, ctx->nold, ctx->nold + 1,",
          "1802:   fatal(\"%s: recallocarray failed nold = %zu\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2031:    }",
          "2032:   }",
          "2035:       sizeof(*ctx->keys))) == NULL)",
          "2037:        __func__, ctx->nkeys);",
          "2038:   ctx->keys = tmp;",
          "2039:   ctx->keys[ctx->nkeys++] = key;",
          "",
          "[Removed Lines]",
          "2034:   if ((tmp = reallocarray(ctx->keys, ctx->nkeys + 1,",
          "2036:    fatal(\"%s: reallocarray failed nkeys = %zu\",",
          "",
          "[Added Lines]",
          "2034:   if ((tmp = recallocarray(ctx->keys, ctx->nkeys, ctx->nkeys + 1,",
          "2036:    fatal(\"%s: recallocarray failed nkeys = %zu\",",
          "",
          "---------------"
        ],
        "usr.bin/ssh/hostfile.c||usr.bin/ssh/hostfile.c": [
          "File: usr.bin/ssh/hostfile.c -> usr.bin/ssh/hostfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:      l->marker == MRK_NONE ? \"\" :",
          "249:      (l->marker == MRK_CA ? \"ca \" : \"revoked \"),",
          "250:      sshkey_type(l->key), l->path, l->linenum);",
          "252:      hostkeys->num_entries + 1, sizeof(*hostkeys->entries))) == NULL)",
          "253:   return SSH_ERR_ALLOC_FAIL;",
          "254:  hostkeys->entries = tmp;",
          "",
          "[Removed Lines]",
          "251:  if ((tmp = reallocarray(hostkeys->entries,",
          "",
          "[Added Lines]",
          "251:  if ((tmp = recallocarray(hostkeys->entries, hostkeys->num_entries,",
          "",
          "---------------"
        ],
        "usr.bin/ssh/krl.c||usr.bin/ssh/krl.c": [
          "File: usr.bin/ssh/krl.c -> usr.bin/ssh/krl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1024:    }",
          "1025:   }",
          "1028:       sizeof(*ca_used));",
          "1029:   if (tmp_ca_used == NULL) {",
          "1030:    r = SSH_ERR_ALLOC_FAIL;",
          "",
          "[Removed Lines]",
          "1027:   tmp_ca_used = reallocarray(ca_used, nca_used + 1,",
          "",
          "[Added Lines]",
          "1027:   tmp_ca_used = recallocarray(ca_used, nca_used, nca_used + 1,",
          "",
          "---------------"
        ],
        "usr.bin/ssh/misc.c||usr.bin/ssh/misc.c": [
          "File: usr.bin/ssh/misc.c -> usr.bin/ssh/misc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:  } else if (args->num+2 >= nalloc)",
          "523:   nalloc *= 2;",
          "526:  args->nalloc = nalloc;",
          "527:  args->list[args->num++] = cp;",
          "528:  args->list[args->num] = NULL;",
          "",
          "[Removed Lines]",
          "525:  args->list = xreallocarray(args->list, nalloc, sizeof(char *));",
          "",
          "[Added Lines]",
          "525:  args->list = xrecallocarray(args->list, args->nalloc, nalloc, sizeof(char *));",
          "",
          "---------------"
        ],
        "usr.bin/ssh/scp.c||usr.bin/ssh/scp.c": [
          "File: usr.bin/ssh/scp.c -> usr.bin/ssh/scp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1333:   size = blksize;",
          "1334:  if (bp->cnt >= size)",
          "1335:   return (bp);",
          "1341:  bp->cnt = size;",
          "1342:  return (bp);",
          "1343: }",
          "",
          "[Removed Lines]",
          "1336:  if (bp->buf == NULL)",
          "1337:   bp->buf = xmalloc(size);",
          "1338:  else",
          "1339:   bp->buf = xreallocarray(bp->buf, 1, size);",
          "1340:  memset(bp->buf, 0, size);",
          "",
          "[Added Lines]",
          "1336:  bp->buf = xrecallocarray(bp->buf, bp->cnt, size, 1);",
          "",
          "---------------"
        ],
        "usr.bin/ssh/session.c||usr.bin/ssh/session.c": [
          "File: usr.bin/ssh/session.c -> usr.bin/ssh/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1348:    return NULL;",
          "1349:   debug2(\"%s: allocate (allocated %d max %d)\",",
          "1350:       __func__, sessions_nalloc, options.max_sessions);",
          "1353:   if (tmp == NULL) {",
          "1354:    error(\"%s: cannot allocate %d sessions\",",
          "1355:        __func__, sessions_nalloc + 1);",
          "",
          "[Removed Lines]",
          "1351:   tmp = xreallocarray(sessions, sessions_nalloc + 1,",
          "1352:       sizeof(*sessions));",
          "",
          "[Added Lines]",
          "1351:   tmp = xrecallocarray(sessions, sessions_nalloc,",
          "1352:       sessions_nalloc + 1, sizeof(*sessions));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1673:  for (i = 0; i < options.num_accept_env; i++) {",
          "1674:   if (match_pattern(name, options.accept_env[i])) {",
          "1675:    debug2(\"Setting env %d: %s=%s\", s->num_env, name, val);",
          "1678:    s->env[s->num_env].name = name;",
          "1679:    s->env[s->num_env].val = val;",
          "1680:    s->num_env++;",
          "",
          "[Removed Lines]",
          "1676:    s->env = xreallocarray(s->env, s->num_env + 1,",
          "1677:        sizeof(*s->env));",
          "",
          "[Added Lines]",
          "1676:    s->env = xrecallocarray(s->env, s->num_env,",
          "1677:        s->num_env + 1, sizeof(*s->env));",
          "",
          "---------------"
        ],
        "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c": [
          "File: usr.bin/ssh/ssh-pkcs11.c -> usr.bin/ssh/ssh-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:     sshkey_free(key);",
          "536:    } else {",
          "540:     (*keysp)[*nkeys] = key;",
          "542:     debug(\"have %d keys\", *nkeys);",
          "",
          "[Removed Lines]",
          "539:         sizeof(struct sshkey *));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshbuf.c||usr.bin/ssh/sshbuf.c": [
          "File: usr.bin/ssh/sshbuf.c -> usr.bin/ssh/sshbuf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   buf->off = buf->size;",
          "192:   return;",
          "193:  }",
          "196:  buf->off = buf->size = 0;",
          "197:  if (buf->alloc != SSHBUF_SIZE_INIT) {",
          "199:    buf->cd = buf->d = d;",
          "200:    buf->alloc = SSHBUF_SIZE_INIT;",
          "201:   }",
          "203: }",
          "205: size_t",
          "",
          "[Removed Lines]",
          "194:  if (sshbuf_check_sanity(buf) == 0)",
          "195:   explicit_bzero(buf->d, buf->alloc);",
          "198:   if ((d = realloc(buf->d, SSHBUF_SIZE_INIT)) != NULL) {",
          "202:  }",
          "",
          "[Added Lines]",
          "194:  (void) sshbuf_check_sanity(buf);",
          "197:   if ((d = recallocarray(buf->d, buf->alloc, SSHBUF_SIZE_INIT,",
          "198:       1)) != NULL) {",
          "202:  } else",
          "203:   explicit_bzero(buf->d, SSHBUF_SIZE_INIT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:    rlen = ROUNDUP(buf->size, SSHBUF_SIZE_INC);",
          "252:   if (rlen > max_size)",
          "253:    rlen = max_size;",
          "255:   SSHBUF_DBG((\"new alloc = %zu\", rlen));",
          "257:    return SSH_ERR_ALLOC_FAIL;",
          "258:   buf->cd = buf->d = dp;",
          "259:   buf->alloc = rlen;",
          "",
          "[Removed Lines]",
          "254:   explicit_bzero(buf->d + buf->size, buf->alloc - buf->size);",
          "256:   if ((dp = realloc(buf->d, rlen)) == NULL)",
          "",
          "[Added Lines]",
          "256:   if ((dp = recallocarray(buf->d, buf->alloc, rlen, 1)) == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:  if (rlen > buf->max_size)",
          "343:   rlen = buf->alloc + need;",
          "344:  SSHBUF_DBG((\"adjusted rlen %zu\", rlen));",
          "346:   SSHBUF_DBG((\"realloc fail\"));",
          "347:   return SSH_ERR_ALLOC_FAIL;",
          "348:  }",
          "",
          "[Removed Lines]",
          "345:  if ((dp = realloc(buf->d, rlen)) == NULL) {",
          "",
          "[Added Lines]",
          "345:  if ((dp = recallocarray(buf->d, buf->alloc, rlen, 1)) == NULL) {",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshkey.c||usr.bin/ssh/sshkey.c": [
          "File: usr.bin/ssh/sshkey.c -> usr.bin/ssh/sshkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1728:    goto out;",
          "1729:   }",
          "1730:   oprincipals = key->cert->principals;",
          "1733:   if (key->cert->principals == NULL) {",
          "1734:    free(principal);",
          "1735:    key->cert->principals = oprincipals;",
          "",
          "[Removed Lines]",
          "1731:   key->cert->principals = reallocarray(key->cert->principals,",
          "1732:       key->cert->nprincipals + 1, sizeof(*key->cert->principals));",
          "",
          "[Added Lines]",
          "1731:   key->cert->principals = recallocarray(key->cert->principals,",
          "1732:       key->cert->nprincipals, key->cert->nprincipals + 1,",
          "1733:       sizeof(*key->cert->principals));",
          "",
          "---------------"
        ],
        "usr.bin/ssh/utf8.c||usr.bin/ssh/utf8.c": [
          "File: usr.bin/ssh/utf8.c -> usr.bin/ssh/utf8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  tsz = *sz + 128;",
          "68:  if (tsz > maxsz)",
          "69:   tsz = maxsz;",
          "71:   return -1;",
          "",
          "[Removed Lines]",
          "70:  if ((tp = realloc(*dst, tsz)) == NULL)",
          "",
          "[Added Lines]",
          "70:  if ((tp = recallocarray(*dst, *sz, tsz, 1)) == NULL)",
          "",
          "---------------"
        ],
        "usr.bin/ssh/xmalloc.c||usr.bin/ssh/xmalloc.c": [
          "File: usr.bin/ssh/xmalloc.c -> usr.bin/ssh/xmalloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  return new_ptr;",
          "72: }",
          "74: char *",
          "75: xstrdup(const char *str)",
          "76: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: void *",
          "75: xrecallocarray(void *ptr, size_t onmemb, size_t nmemb, size_t size)",
          "76: {",
          "77:  void *new_ptr;",
          "79:  new_ptr = recallocarray(ptr, onmemb, nmemb, size);",
          "80:  if (new_ptr == NULL)",
          "81:   fatal(\"xrecallocarray: out of memory (%zu elements of %zu bytes)\",",
          "82:       nmemb, size);",
          "83:  return new_ptr;",
          "84: }",
          "",
          "---------------"
        ],
        "usr.bin/ssh/xmalloc.h||usr.bin/ssh/xmalloc.h": [
          "File: usr.bin/ssh/xmalloc.h -> usr.bin/ssh/xmalloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: void *xmalloc(size_t);",
          "21: void *xcalloc(size_t, size_t);",
          "22: void *xreallocarray(void *, size_t, size_t);",
          "23: char *xstrdup(const char *);",
          "24: int  xasprintf(char **, const char *, ...)",
          "25:                 __attribute__((__format__ (printf, 2, 3)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: void *xrecallocarray(void *, size_t, size_t, size_t);",
          "",
          "---------------"
        ]
      }
    }
  ]
}