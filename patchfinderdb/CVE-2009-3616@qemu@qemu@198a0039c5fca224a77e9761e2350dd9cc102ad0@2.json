{
  "cve_id": "CVE-2009-3616",
  "cve_desc": "Multiple use-after-free vulnerabilities in vnc.c in the VNC server in QEMU 0.10.6 and earlier might allow guest OS users to execute arbitrary code on the host OS by establishing a connection from a VNC client and then (1) disconnecting during data transfer, (2) sending a message using incorrect integer data types, or (3) using the Fuzzy Screen Mode protocol, related to double free vulnerabilities.",
  "repo": "qemu/qemu",
  "patch_hash": "198a0039c5fca224a77e9761e2350dd9cc102ad0",
  "patch_info": {
    "commit_hash": "198a0039c5fca224a77e9761e2350dd9cc102ad0",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/198a0039c5fca224a77e9761e2350dd9cc102ad0",
    "files": [
      "vnc.c"
    ],
    "message": "vnc: rework VncState release workflow.\n\nSplit socket closing and releasing of VncState into two steps.  First\nclose the socket and set the variable to -1 to indicate shutdown in\nprogress.  Do the actual release in a few places where we can be sure it\ndoesn't cause trouble in form of use-after-free.  Add some checks for a\nvalid socket handle to make sure we don't try to use the closed socket.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>",
    "before_after_code_files": [
      "vnc.c||vnc.c"
    ]
  },
  "patch_diff": {
    "vnc.c||vnc.c": [
      "File: vnc.c -> vnc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "218: static void vnc_update_client(void *opaque);",
      "220: static void vnc_colordepth(VncState *vs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219: static void vnc_disconnect_start(VncState *vs);",
      "220: static void vnc_disconnect_finish(VncState *vs);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "653: static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
      "654: {",
      "659:     vnc_write_u8(vs, 0);",
      "",
      "[Removed Lines]",
      "655:     vs->force_update = 1;",
      "656:     vnc_update_client(vs);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "667: static void vnc_dpy_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
      "668: {",
      "669:     VncDisplay *vd = ds->opaque;",
      "672:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT))",
      "673:             vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);",
      "675:             vnc_update(vs, dst_x, dst_y, w, h);",
      "677:     }",
      "678: }",
      "",
      "[Removed Lines]",
      "670:     VncState *vs = vd->clients;",
      "671:     while (vs != NULL) {",
      "676:         vs = vs->next;",
      "",
      "[Added Lines]",
      "669:     VncState *vs, *vn;",
      "671:     for (vs = vd->clients; vs != NULL; vs = vn) {",
      "672:         vn = vs->next;",
      "673:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {",
      "674:             vs->force_update = 1;",
      "675:             vnc_update_client(vs);",
      "677:         }",
      "678:     }",
      "680:     for (vs = vd->clients; vs != NULL; vs = vs->next) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "799:     if (vs->csock != -1) {",
      "800:         qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
      "801:     }",
      "803: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "809:     } else {",
      "810:         vnc_disconnect_finish(vs);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "868:     }",
      "869: }",
      "872: int vnc_client_io_error(VncState *vs, int ret, int last_errno)",
      "873: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881: static void vnc_disconnect_start(VncState *vs)",
      "882: {",
      "883:     if (vs->csock == -1)",
      "884:         return;",
      "885:     qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
      "886:     closesocket(vs->csock);",
      "887:     vs->csock = -1;",
      "888: }",
      "890: static void vnc_disconnect_finish(VncState *vs)",
      "891: {",
      "892:     qemu_del_timer(vs->timer);",
      "893:     qemu_free_timer(vs->timer);",
      "894:     if (vs->input.buffer) qemu_free(vs->input.buffer);",
      "895:     if (vs->output.buffer) qemu_free(vs->output.buffer);",
      "896: #ifdef CONFIG_VNC_TLS",
      "897:     vnc_tls_client_cleanup(vs);",
      "899: #ifdef CONFIG_VNC_SASL",
      "900:     vnc_sasl_client_cleanup(vs);",
      "902:     audio_del(vs);",
      "904:     VncState *p, *parent = NULL;",
      "905:     for (p = vs->vd->clients; p != NULL; p = p->next) {",
      "906:         if (p == vs) {",
      "907:             if (parent)",
      "908:                 parent->next = p->next;",
      "909:             else",
      "910:                 vs->vd->clients = p->next;",
      "911:             break;",
      "912:         }",
      "913:         parent = p;",
      "914:     }",
      "915:     if (!vs->vd->clients)",
      "916:         dcl->idle = 1;",
      "918:     qemu_free(vs->server.ds->data);",
      "919:     qemu_free(vs->server.ds);",
      "920:     qemu_free(vs->guest.ds);",
      "921:     qemu_free(vs);",
      "922: }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "885:             }",
      "886:         }",
      "922:         return 0;",
      "923:     }",
      "",
      "[Removed Lines]",
      "888:         VNC_DEBUG(\"Closing down client sock %d %d\\n\", ret, ret < 0 ? last_errno : 0);",
      "889:         qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
      "890:         closesocket(vs->csock);",
      "891:         qemu_del_timer(vs->timer);",
      "892:         qemu_free_timer(vs->timer);",
      "893:         if (vs->input.buffer) qemu_free(vs->input.buffer);",
      "894:         if (vs->output.buffer) qemu_free(vs->output.buffer);",
      "895: #ifdef CONFIG_VNC_TLS",
      "896:         vnc_tls_client_cleanup(vs);",
      "898: #ifdef CONFIG_VNC_SASL",
      "899:         vnc_sasl_client_cleanup(vs);",
      "901:         audio_del(vs);",
      "903:         VncState *p, *parent = NULL;",
      "904:         for (p = vs->vd->clients; p != NULL; p = p->next) {",
      "905:             if (p == vs) {",
      "906:                 if (parent)",
      "907:                     parent->next = p->next;",
      "908:                 else",
      "909:                     vs->vd->clients = p->next;",
      "910:                 break;",
      "911:             }",
      "912:             parent = p;",
      "913:         }",
      "914:         if (!vs->vd->clients)",
      "915:             dcl->idle = 1;",
      "917:         qemu_free(vs->server.ds->data);",
      "918:         qemu_free(vs->server.ds);",
      "919:         qemu_free(vs->guest.ds);",
      "920:         qemu_free(vs);",
      "",
      "[Added Lines]",
      "940:         VNC_DEBUG(\"Closing down client sock: ret %d, errno %d\\n\",",
      "941:                   ret, ret < 0 ? last_errno : 0);",
      "942:         vnc_disconnect_start(vs);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "928: void vnc_client_error(VncState *vs)",
      "929: {",
      "931: }",
      "",
      "[Removed Lines]",
      "930:     vnc_client_io_error(vs, -1, EINVAL);",
      "",
      "[Added Lines]",
      "952:     VNC_DEBUG(\"Closing down client sock: protocol error\\n\");",
      "953:     vnc_disconnect_start(vs);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1110:     else",
      "1112:         ret = vnc_client_read_plain(vs);",
      "1114:         return;",
      "1116:     while (vs->read_handler && vs->input.offset >= vs->read_handler_expect) {",
      "1117:         size_t len = vs->read_handler_expect;",
      "1118:         int ret;",
      "1120:         ret = vs->read_handler(vs, vs->input.buffer, len);",
      "1122:             return;",
      "1124:         if (!ret) {",
      "1125:             memmove(vs->input.buffer, vs->input.buffer + len, (vs->input.offset - len));",
      "",
      "[Removed Lines]",
      "1113:     if (!ret)",
      "1121:         if (vs->csock == -1)",
      "",
      "[Added Lines]",
      "1136:     if (!ret) {",
      "1137:         if (vs->csock == -1)",
      "1138:             vnc_disconnect_finish(vs);",
      "1140:     }",
      "1147:         if (vs->csock == -1) {",
      "1148:             vnc_disconnect_finish(vs);",
      "1150:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1134: {",
      "1135:     buffer_reserve(&vs->output, len);",
      "1138:         qemu_set_fd_handler2(vs->csock, NULL, vnc_client_read, vnc_client_write, vs);",
      "1139:     }",
      "",
      "[Removed Lines]",
      "1137:     if (buffer_empty(&vs->output)) {",
      "",
      "[Added Lines]",
      "1165:     if (vs->csock != -1 && buffer_empty(&vs->output)) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1176: void vnc_flush(VncState *vs)",
      "1177: {",
      "1179:         vnc_client_write(vs);",
      "1180: }",
      "",
      "[Removed Lines]",
      "1178:     if (vs->output.offset)",
      "",
      "[Added Lines]",
      "1206:     if (vs->csock != -1 && vs->output.offset)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2009:     vnc_write(vs, \"RFB 003.008\\n\", 12);",
      "2010:     vnc_flush(vs);",
      "2011:     vnc_read_when(vs, protocol_version, 12);",
      "2013:     reset_keys(vs);",
      "2015:     vs->next = vd->clients;",
      "2016:     vd->clients = vs;",
      "2017: }",
      "2019: static void vnc_listen_read(void *opaque)",
      "",
      "[Removed Lines]",
      "2012:     vnc_update_client(vs);",
      "",
      "[Added Lines]",
      "2045:     vnc_update_client(vs);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c2723a9606dae5af5c614a55296ee37e2ed7801a",
      "candidate_info": {
        "commit_hash": "c2723a9606dae5af5c614a55296ee37e2ed7801a",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/c2723a9606dae5af5c614a55296ee37e2ed7801a",
        "files": [
          "vnc.c"
        ],
        "message": "vnc: rework VncState release workflow\n\nSplit socket closing and releasing of VncState into two steps. First close\nthe socket and set the variable to -1 to indicate shutdown in progress. Do\nthe actual release in a few places where we can be sure it doesn't cause\ntrouble in form of use-after-free. Add some checks for a valid socket handle\nto make sure we don't try to use the closed socket.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\n\nBackported to 0.10-stable, removing references to vs->force_update and\nchanging vnc_disconnect_finish() to match the code in the 0.10 version of\nvnc_client_io_error() in place of the master branch version.\n\nSigned-off-by: Chris Webb <chris@arachsys.com>\nSigned-off-by: Glauber Costa <glommer@redhat.com>",
        "before_after_code_files": [
          "vnc.c||vnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "vnc.c||vnc.c"
          ],
          "candidate": [
            "vnc.c||vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: static void vnc_write_u8(VncState *vs, uint8_t value);",
          "201: static void vnc_flush(VncState *vs);",
          "202: static void vnc_update_client(void *opaque);",
          "203: static void vnc_client_read(void *opaque);",
          "205: static void vnc_colordepth(VncState *vs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: static void vnc_disconnect_start(VncState *vs);",
          "204: static void vnc_disconnect_finish(VncState *vs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670: static void vnc_dpy_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "671: {",
          "672:     VncDisplay *vd = ds->opaque;",
          "675:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT))",
          "676:             vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);",
          "678:             vnc_update(vs, dst_x, dst_y, w, h);",
          "680:     }",
          "681: }",
          "",
          "[Removed Lines]",
          "673:     VncState *vs = vd->clients;",
          "674:     while (vs != NULL) {",
          "679:         vs = vs->next;",
          "",
          "[Added Lines]",
          "675:     VncState *vs, *vn;",
          "677:     for (vs = vd->clients; vs != NULL; vs = vn) {",
          "678:         vn = vs->next;",
          "679:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {",
          "680:             vnc_update_client(vs);",
          "682:         }",
          "683:     }",
          "685:     for (vs = vd->clients; vs != NULL; vs = vs->next) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "787:     if (vs->csock != -1) {",
          "788:         qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "789:     }",
          "791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799:     } else {",
          "800:         vnc_disconnect_finish(vs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "855:     }",
          "856: }",
          "858: static int vnc_client_io_error(VncState *vs, int ret, int last_errno)",
          "859: {",
          "860:     if (ret == 0 || ret == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "870: static void vnc_disconnect_start(VncState *vs)",
          "871: {",
          "872:     if (vs->csock == -1)",
          "873:         return;",
          "874:     qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
          "875:     closesocket(vs->csock);",
          "876:     vs->csock = -1;",
          "877: }",
          "879: static void vnc_disconnect_finish(VncState *vs)",
          "880: {",
          "881:     qemu_del_timer(vs->timer);",
          "882:     qemu_free_timer(vs->timer);",
          "883:     if (vs->input.buffer) qemu_free(vs->input.buffer);",
          "884:     if (vs->output.buffer) qemu_free(vs->output.buffer);",
          "885: #ifdef CONFIG_VNC_TLS",
          "886:     if (vs->tls_session) {",
          "887:         gnutls_deinit(vs->tls_session);",
          "888:         vs->tls_session = NULL;",
          "889:     }",
          "891:     audio_del(vs);",
          "893:     VncState *p, *parent = NULL;",
          "894:     for (p = vs->vd->clients; p != NULL; p = p->next) {",
          "895:         if (p == vs) {",
          "896:             if (parent)",
          "897:                 parent->next = p->next;",
          "898:             else",
          "899:                 vs->vd->clients = p->next;",
          "900:             break;",
          "901:         }",
          "902:         parent = p;",
          "903:     }",
          "904:     if (!vs->vd->clients)",
          "905:         dcl->idle = 1;",
          "907:     qemu_free(vs->old_data);",
          "908:     qemu_free(vs);",
          "909: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "872:         }",
          "874:  VNC_DEBUG(\"Closing down client sock %d %d\\n\", ret, ret < 0 ? last_errno : 0);",
          "906:  return 0;",
          "907:     }",
          "",
          "[Removed Lines]",
          "875:  qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
          "876:  closesocket(vs->csock);",
          "877:         qemu_del_timer(vs->timer);",
          "878:         qemu_free_timer(vs->timer);",
          "879:         if (vs->input.buffer) qemu_free(vs->input.buffer);",
          "880:         if (vs->output.buffer) qemu_free(vs->output.buffer);",
          "881: #ifdef CONFIG_VNC_TLS",
          "882:  if (vs->tls_session) {",
          "883:      gnutls_deinit(vs->tls_session);",
          "884:      vs->tls_session = NULL;",
          "885:  }",
          "887:         audio_del(vs);",
          "889:         VncState *p, *parent = NULL;",
          "890:         for (p = vs->vd->clients; p != NULL; p = p->next) {",
          "891:             if (p == vs) {",
          "892:                 if (parent)",
          "893:                     parent->next = p->next;",
          "894:                 else",
          "895:                     vs->vd->clients = p->next;",
          "896:                 break;",
          "897:             }",
          "898:             parent = p;",
          "899:         }",
          "900:         if (!vs->vd->clients)",
          "901:             dcl->idle = 1;",
          "903:         qemu_free(vs->old_data);",
          "904:         qemu_free(vs);",
          "",
          "[Added Lines]",
          "928:         vnc_disconnect_start(vs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911: static void vnc_client_error(VncState *vs)",
          "912: {",
          "914: }",
          "916: static void vnc_client_write(void *opaque)",
          "",
          "[Removed Lines]",
          "913:     vnc_client_io_error(vs, -1, EINVAL);",
          "",
          "[Added Lines]",
          "937:     VNC_DEBUG(\"Closing down client sock: protocol error\\n\");",
          "938:     vnc_disconnect_start(vs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "971:  ret = recv(vs->csock, buffer_end(&vs->input), 4096, 0);",
          "972:     ret = vnc_client_io_error(vs, ret, socket_error());",
          "974:  return;",
          "976:     vs->input.offset += ret;",
          "",
          "[Removed Lines]",
          "973:     if (!ret)",
          "",
          "[Added Lines]",
          "998:     if (!ret) {",
          "999:         if (vs->csock == -1)",
          "1000:             vnc_disconnect_finish(vs);",
          "1002:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "980:  int ret;",
          "982:  ret = vs->read_handler(vs, vs->input.buffer, len);",
          "984:      return;",
          "986:  if (!ret) {",
          "987:      memmove(vs->input.buffer, vs->input.buffer + len, (vs->input.offset - len));",
          "",
          "[Removed Lines]",
          "983:  if (vs->csock == -1)",
          "",
          "[Added Lines]",
          "1011:  if (vs->csock == -1) {",
          "1012:             vnc_disconnect_finish(vs);",
          "1014:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "996: {",
          "997:     buffer_reserve(&vs->output, len);",
          "1000:  qemu_set_fd_handler2(vs->csock, NULL, vnc_client_read, vnc_client_write, vs);",
          "1001:     }",
          "",
          "[Removed Lines]",
          "999:     if (buffer_empty(&vs->output)) {",
          "",
          "[Added Lines]",
          "1029:     if (vs->csock != -1 && buffer_empty(&vs->output)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1038: static void vnc_flush(VncState *vs)",
          "1039: {",
          "1041:  vnc_client_write(vs);",
          "1042: }",
          "",
          "[Removed Lines]",
          "1040:     if (vs->output.offset)",
          "",
          "[Added Lines]",
          "1070:     if (vs->csock != -1 && vs->output.offset)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2305:     vnc_read_when(vs, protocol_version, 12);",
          "2306:     memset(vs->old_data, 0, ds_get_linesize(vs->ds) * ds_get_height(vs->ds));",
          "2307:     memset(vs->dirty_row, 0xFF, sizeof(vs->dirty_row));",
          "2309:     reset_keys(vs);",
          "2311:     vs->next = vd->clients;",
          "2312:     vd->clients = vs;",
          "2313: }",
          "2315: static void vnc_listen_read(void *opaque)",
          "",
          "[Removed Lines]",
          "2308:     vnc_update_client(vs);",
          "",
          "[Added Lines]",
          "2343:     vnc_update_client(vs);",
          "",
          "---------------"
        ]
      }
    }
  ]
}