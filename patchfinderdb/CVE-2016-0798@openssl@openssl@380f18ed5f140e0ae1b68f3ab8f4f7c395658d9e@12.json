{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6745fcf62784005edd5532c009e789440b8d8964",
      "candidate_info": {
        "commit_hash": "6745fcf62784005edd5532c009e789440b8d8964",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6745fcf62784005edd5532c009e789440b8d8964",
        "files": [
          "crypto/async/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4732: EVP_ENCODE_CTX_free                     5095 EXIST::FUNCTION:",
          "4733: EVP_ENCODE_CTX_num                      5096 EXIST::FUNCTION:",
          "4734: EVP_ENCODE_CTX_new                      5097 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4735: EVP_PKEY_up_ref                         5098 EXIST::FUNCTION:",
          "4736: EVP_PKEY_get0_EC_KEY                    5099 EXIST::FUNCTION:EC",
          "4737: EVP_PKEY_get0_DSA                       5100 EXIST::FUNCTION:DSA",
          "4738: EVP_PKEY_get0_DH                        5101 EXIST::FUNCTION:DH",
          "4739: X509_get0_pubkey                        5102 EXIST::FUNCTION:",
          "4740: X509_PUBKEY_get0                        5103 EXIST::FUNCTION:",
          "4741: EVP_PKEY_get0_RSA                       5104 EXIST::FUNCTION:RSA",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e47caff4830d2a117eda15b57a5feab89b846ae",
      "candidate_info": {
        "commit_hash": "3e47caff4830d2a117eda15b57a5feab89b846ae",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3e47caff4830d2a117eda15b57a5feab89b846ae",
        "files": [
          "crypto/engine/eng_dyn.c",
          "crypto/err/err.c",
          "include/openssl/engine.h",
          "include/openssl/err.h",
          "include/openssl/ossl_typ.h",
          "util/indent.pro",
          "util/libeay.num"
        ],
        "message": "ERR_ cleanup\n\nRemove ERR_[gs]et_implementation as they were not undocumented and\nuseless (the data structure was opaque).\n\nHalve the number of lock/unlock calls in almost all ERR_\nfunctions by letting the caller of get_hash or int_thread_set\nable to lock.  Very useful when looping, such as adding errors,\nor when getting the hash and immediately doing a lookup on it.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/engine/eng_dyn.c||crypto/engine/eng_dyn.c",
          "crypto/err/err.c||crypto/err/err.c",
          "include/openssl/engine.h||include/openssl/engine.h",
          "include/openssl/err.h||include/openssl/err.h",
          "include/openssl/ossl_typ.h||include/openssl/ossl_typ.h",
          "util/indent.pro||util/indent.pro",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/engine/eng_dyn.c||crypto/engine/eng_dyn.c": [
          "File: crypto/engine/eng_dyn.c -> crypto/engine/eng_dyn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:     fns.static_state = ENGINE_get_static_state();",
          "523:     fns.ex_data_fns = CRYPTO_get_ex_data_implementation();",
          "524:     CRYPTO_get_mem_functions(&fns.mem_fns.malloc_cb,",
          "525:                              &fns.mem_fns.realloc_cb, &fns.mem_fns.free_cb);",
          "",
          "[Removed Lines]",
          "522:     fns.err_fns = ERR_get_implementation();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/err/err.c||crypto/err/err.c": [
          "File: crypto/err/err.c -> crypto/err/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: };",
          "224: #endif",
          "247: static ERR_STRING_DATA *int_err_get_item(const ERR_STRING_DATA *);",
          "251: static void int_thread_release(LHASH_OF(ERR_STATE) **hash);",
          "252: static ERR_STATE *int_thread_get_item(const ERR_STATE *);",
          "253: static ERR_STATE *int_thread_set_item(ERR_STATE *);",
          "254: static void int_thread_del_item(const ERR_STATE *);",
          "284: static LHASH_OF(ERR_STRING_DATA) *int_error_hash = NULL;",
          "285: static LHASH_OF(ERR_STATE) *int_thread_hash = NULL;",
          "286: static int int_thread_hash_references = 0;",
          "287: static int int_err_library_number = ERR_LIB_USER;",
          "",
          "[Removed Lines]",
          "227: struct st_ERR_FNS {",
          "229:     LHASH_OF(ERR_STRING_DATA) *(*cb_err_get) (int create);",
          "230:     void (*cb_err_del) (void);",
          "231:     ERR_STRING_DATA *(*cb_err_get_item) (const ERR_STRING_DATA *);",
          "232:     ERR_STRING_DATA *(*cb_err_set_item) (ERR_STRING_DATA *);",
          "233:     ERR_STRING_DATA *(*cb_err_del_item) (ERR_STRING_DATA *);",
          "235:     LHASH_OF(ERR_STATE) *(*cb_thread_get) (int create);",
          "236:     void (*cb_thread_release) (LHASH_OF(ERR_STATE) **hash);",
          "237:     ERR_STATE *(*cb_thread_get_item) (const ERR_STATE *);",
          "238:     ERR_STATE *(*cb_thread_set_item) (ERR_STATE *);",
          "239:     void (*cb_thread_del_item) (const ERR_STATE *);",
          "241:     int (*cb_get_next_lib) (void);",
          "242: };",
          "245: static LHASH_OF(ERR_STRING_DATA) *int_err_get(int create);",
          "246: static void int_err_del(void);",
          "248: static ERR_STRING_DATA *int_err_set_item(ERR_STRING_DATA *);",
          "249: static ERR_STRING_DATA *int_err_del_item(ERR_STRING_DATA *);",
          "250: static LHASH_OF(ERR_STATE) *int_thread_get(int create);",
          "255: static int int_err_get_next_lib(void);",
          "257: static const ERR_FNS err_defaults = {",
          "258:     int_err_get,",
          "259:     int_err_del,",
          "260:     int_err_get_item,",
          "261:     int_err_set_item,",
          "262:     int_err_del_item,",
          "263:     int_thread_get,",
          "264:     int_thread_release,",
          "265:     int_thread_get_item,",
          "266:     int_thread_set_item,",
          "267:     int_thread_del_item,",
          "268:     int_err_get_next_lib",
          "269: };",
          "272: static const ERR_FNS *err_fns = NULL;",
          "275: #define ERRFN(a) err_fns->cb_##a",
          "293: static void err_fns_check(void)",
          "294: {",
          "295:     if (err_fns)",
          "296:         return;",
          "298:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "299:     if (!err_fns)",
          "300:         err_fns = &err_defaults;",
          "301:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "302: }",
          "306: const ERR_FNS *ERR_get_implementation(void)",
          "307: {",
          "308:     err_fns_check();",
          "309:     return err_fns;",
          "310: }",
          "312: int ERR_set_implementation(const ERR_FNS *fns)",
          "313: {",
          "314:     int ret = 0;",
          "316:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "321:     if (!err_fns) {",
          "322:         err_fns = fns;",
          "323:         ret = 1;",
          "324:     }",
          "325:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "326:     return ret;",
          "327: }",
          "",
          "[Added Lines]",
          "227: static LHASH_OF(ERR_STRING_DATA) *get_hash(int create, int lockit);",
          "229: static LHASH_OF(ERR_STATE) *int_thread_get(int create, int lockit);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357: static IMPLEMENT_LHASH_COMP_FN(err_string_data, ERR_STRING_DATA)",
          "360: {",
          "361:     LHASH_OF(ERR_STRING_DATA) *ret = NULL;",
          "364:     if (!int_error_hash && create) {",
          "366:         int_error_hash = lh_ERR_STRING_DATA_new();",
          "367:         CRYPTO_pop_info();",
          "368:     }",
          "369:     if (int_error_hash)",
          "370:         ret = int_error_hash;",
          "373:     return ret;",
          "374: }",
          "386: static ERR_STRING_DATA *int_err_get_item(const ERR_STRING_DATA *d)",
          "387: {",
          "389:     LHASH_OF(ERR_STRING_DATA) *hash;",
          "396:     CRYPTO_r_lock(CRYPTO_LOCK_ERR);",
          "398:     CRYPTO_r_unlock(CRYPTO_LOCK_ERR);",
          "400:     return p;",
          "401: }",
          "437: static unsigned long err_state_hash(const ERR_STATE *a)",
          "438: {",
          "439:     return CRYPTO_THREADID_hash(&a->tid) * 13;",
          "",
          "[Removed Lines]",
          "359: static LHASH_OF(ERR_STRING_DATA) *int_err_get(int create)",
          "363:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "365:         CRYPTO_push_info(\"int_err_get (err.c)\");",
          "371:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "376: static void int_err_del(void)",
          "377: {",
          "378:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "379:     if (int_error_hash) {",
          "380:         lh_ERR_STRING_DATA_free(int_error_hash);",
          "381:         int_error_hash = NULL;",
          "382:     }",
          "383:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "384: }",
          "388:     ERR_STRING_DATA *p;",
          "391:     err_fns_check();",
          "392:     hash = ERRFN(err_get) (0);",
          "393:     if (!hash)",
          "394:         return NULL;",
          "397:     p = lh_ERR_STRING_DATA_retrieve(hash, d);",
          "403: static ERR_STRING_DATA *int_err_set_item(ERR_STRING_DATA *d)",
          "404: {",
          "405:     ERR_STRING_DATA *p;",
          "406:     LHASH_OF(ERR_STRING_DATA) *hash;",
          "408:     err_fns_check();",
          "409:     hash = ERRFN(err_get) (1);",
          "410:     if (!hash)",
          "411:         return NULL;",
          "413:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "414:     p = lh_ERR_STRING_DATA_insert(hash, d);",
          "415:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "417:     return p;",
          "418: }",
          "420: static ERR_STRING_DATA *int_err_del_item(ERR_STRING_DATA *d)",
          "421: {",
          "422:     ERR_STRING_DATA *p;",
          "423:     LHASH_OF(ERR_STRING_DATA) *hash;",
          "425:     err_fns_check();",
          "426:     hash = ERRFN(err_get) (0);",
          "427:     if (!hash)",
          "428:         return NULL;",
          "430:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "431:     p = lh_ERR_STRING_DATA_delete(hash, d);",
          "432:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "434:     return p;",
          "435: }",
          "",
          "[Added Lines]",
          "271: static LHASH_OF(ERR_STRING_DATA) *get_hash(int create, int lockit)",
          "275:     if (lockit)",
          "276:         CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "278:         CRYPTO_push_info(\"get_hash (err.c)\");",
          "284:     if (lockit)",
          "285:         CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "292:     ERR_STRING_DATA *p = NULL;",
          "296:     hash = get_hash(0, 0);",
          "297:     if (hash)",
          "298:         p = lh_ERR_STRING_DATA_retrieve(hash, d);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449: static IMPLEMENT_LHASH_COMP_FN(err_state, ERR_STATE)",
          "452: {",
          "453:     LHASH_OF(ERR_STATE) *ret = NULL;",
          "456:     if (!int_thread_hash && create) {",
          "457:         CRYPTO_push_info(\"int_thread_get (err.c)\");",
          "458:         int_thread_hash = lh_ERR_STATE_new();",
          "",
          "[Removed Lines]",
          "451: static LHASH_OF(ERR_STATE) *int_thread_get(int create)",
          "455:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "",
          "[Added Lines]",
          "318: static LHASH_OF(ERR_STATE) *int_thread_get(int create, int lockit)",
          "322:     if (lockit)",
          "323:         CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "462:         int_thread_hash_references++;",
          "463:         ret = int_thread_hash;",
          "464:     }",
          "466:     return ret;",
          "467: }",
          "",
          "[Removed Lines]",
          "465:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "",
          "[Added Lines]",
          "333:     if (lockit)",
          "334:         CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "492: static ERR_STATE *int_thread_get_item(const ERR_STATE *d)",
          "493: {",
          "495:     LHASH_OF(ERR_STATE) *hash;",
          "502:     CRYPTO_r_lock(CRYPTO_LOCK_ERR);",
          "504:     CRYPTO_r_unlock(CRYPTO_LOCK_ERR);",
          "507:     return p;",
          "508: }",
          "510: static ERR_STATE *int_thread_set_item(ERR_STATE *d)",
          "511: {",
          "513:     LHASH_OF(ERR_STATE) *hash;",
          "520:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "522:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "525:     return p;",
          "526: }",
          "528: static void int_thread_del_item(const ERR_STATE *d)",
          "529: {",
          "531:     LHASH_OF(ERR_STATE) *hash;",
          "538:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "545:     }",
          "546:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "549:     if (p)",
          "550:         ERR_STATE_free(p);",
          "551: }",
          "564: #ifndef OPENSSL_NO_ERR",
          "565: # define NUM_SYS_STR_REASONS 127",
          "566: # define LEN_SYS_STR_REASON 32",
          "",
          "[Removed Lines]",
          "494:     ERR_STATE *p;",
          "497:     err_fns_check();",
          "498:     hash = ERRFN(thread_get) (0);",
          "499:     if (!hash)",
          "500:         return NULL;",
          "503:     p = lh_ERR_STATE_retrieve(hash, d);",
          "506:     ERRFN(thread_release) (&hash);",
          "512:     ERR_STATE *p;",
          "515:     err_fns_check();",
          "516:     hash = ERRFN(thread_get) (1);",
          "517:     if (!hash)",
          "518:         return NULL;",
          "521:     p = lh_ERR_STATE_insert(hash, d);",
          "524:     ERRFN(thread_release) (&hash);",
          "530:     ERR_STATE *p;",
          "533:     err_fns_check();",
          "534:     hash = ERRFN(thread_get) (0);",
          "535:     if (!hash)",
          "536:         return;",
          "539:     p = lh_ERR_STATE_delete(hash, d);",
          "541:     if (int_thread_hash_references == 1",
          "542:         && int_thread_hash && lh_ERR_STATE_num_items(int_thread_hash) == 0) {",
          "543:         lh_ERR_STATE_free(int_thread_hash);",
          "544:         int_thread_hash = NULL;",
          "548:     ERRFN(thread_release) (&hash);",
          "553: static int int_err_get_next_lib(void)",
          "554: {",
          "555:     int ret;",
          "557:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "558:     ret = int_err_library_number++;",
          "559:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "561:     return ret;",
          "562: }",
          "",
          "[Added Lines]",
          "363:     ERR_STATE *p = NULL;",
          "367:     hash = int_thread_get(0, 0);",
          "368:     if (hash)",
          "369:         p = lh_ERR_STATE_retrieve(hash, d);",
          "372:     int_thread_release(&hash);",
          "378:     ERR_STATE *p = NULL;",
          "382:     hash = int_thread_get(1, 0);",
          "383:     if (hash)",
          "384:         p = lh_ERR_STATE_insert(hash, d);",
          "387:     int_thread_release(&hash);",
          "393:     ERR_STATE *p = NULL;",
          "397:     hash = int_thread_get(0, 0);",
          "398:     if (hash) {",
          "399:         p = lh_ERR_STATE_delete(hash, d);",
          "402:         if (int_thread_hash_references == 1",
          "403:             && int_thread_hash",
          "404:             && lh_ERR_STATE_num_items(int_thread_hash) == 0) {",
          "405:             lh_ERR_STATE_free(int_thread_hash);",
          "406:             int_thread_hash = NULL;",
          "407:         }",
          "411:     int_thread_release(&hash);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "580: {",
          "582:     static char strerror_tab[NUM_SYS_STR_REASONS][LEN_SYS_STR_REASON];",
          "584:     static int init = 1;",
          "586:     CRYPTO_r_lock(CRYPTO_LOCK_ERR);",
          "587:     if (!init) {",
          "",
          "[Removed Lines]",
          "583:     int i;",
          "",
          "[Added Lines]",
          "436:     int i;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "660: void ERR_load_ERR_strings(void)",
          "661: {",
          "663: #ifndef OPENSSL_NO_ERR",
          "664:     err_load_strings(0, ERR_str_libraries);",
          "665:     err_load_strings(0, ERR_str_reasons);",
          "",
          "[Removed Lines]",
          "662:     err_fns_check();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "672: static void err_load_strings(int lib, ERR_STRING_DATA *str)",
          "673: {",
          "679:     }",
          "680: }",
          "682: void ERR_load_strings(int lib, ERR_STRING_DATA *str)",
          "",
          "[Removed Lines]",
          "674:     while (str->error) {",
          "675:         if (lib)",
          "676:             str->error |= ERR_PACK(lib, 0, 0);",
          "677:         ERRFN(err_set_item) (str);",
          "678:         str++;",
          "",
          "[Added Lines]",
          "525:     LHASH_OF(ERR_STRING_DATA) *hash;",
          "527:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "528:     hash = get_hash(1, 0);",
          "529:     if (hash) {",
          "530:         for (; str->error; str++) {",
          "531:             if (lib)",
          "532:                 str->error |= ERR_PACK(lib, 0, 0);",
          "533:             (void)lh_ERR_STRING_DATA_insert(hash, str);",
          "534:         }",
          "536:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "688: void ERR_unload_strings(int lib, ERR_STRING_DATA *str)",
          "689: {",
          "695:     }",
          "696: }",
          "698: void ERR_free_strings(void)",
          "699: {",
          "702: }",
          "",
          "[Removed Lines]",
          "690:     while (str->error) {",
          "691:         if (lib)",
          "692:             str->error |= ERR_PACK(lib, 0, 0);",
          "693:         ERRFN(err_del_item) (str);",
          "694:         str++;",
          "700:     err_fns_check();",
          "701:     ERRFN(err_del) ();",
          "",
          "[Added Lines]",
          "547:     LHASH_OF(ERR_STRING_DATA) *hash;",
          "549:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "550:     hash = get_hash(0, 0);",
          "551:     if (hash) {",
          "552:         for (; str->error; str++) {",
          "553:             if (lib)",
          "554:                 str->error |= ERR_PACK(lib, 0, 0);",
          "555:             (void)lh_ERR_STRING_DATA_delete(hash, str);",
          "556:         }",
          "558:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "563:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "564:     if (int_error_hash) {",
          "565:         lh_ERR_STRING_DATA_free(int_error_hash);",
          "566:         int_error_hash = NULL;",
          "567:     }",
          "568:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "933: LHASH_OF(ERR_STRING_DATA) *ERR_get_string_table(void)",
          "934: {",
          "937: }",
          "939: LHASH_OF(ERR_STATE) *ERR_get_err_state_table(void)",
          "940: {",
          "943: }",
          "945: void ERR_release_err_state_table(LHASH_OF(ERR_STATE) **hash)",
          "946: {",
          "949: }",
          "951: const char *ERR_lib_error_string(unsigned long e)",
          "",
          "[Removed Lines]",
          "935:     err_fns_check();",
          "936:     return ERRFN(err_get) (0);",
          "941:     err_fns_check();",
          "942:     return ERRFN(thread_get) (0);",
          "947:     err_fns_check();",
          "948:     ERRFN(thread_release) (hash);",
          "",
          "[Added Lines]",
          "802:     return get_hash(0, 1);",
          "807:     return int_thread_get(0, 1);",
          "812:     int_thread_release(hash);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "953:     ERR_STRING_DATA d, *p;",
          "954:     unsigned long l;",
          "957:     l = ERR_GET_LIB(e);",
          "958:     d.error = ERR_PACK(l, 0, 0);",
          "960:     return ((p == NULL) ? NULL : p->string);",
          "961: }",
          "",
          "[Removed Lines]",
          "956:     err_fns_check();",
          "959:     p = ERRFN(err_get_item) (&d);",
          "",
          "[Added Lines]",
          "822:     p = int_err_get_item(&d);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "965:     ERR_STRING_DATA d, *p;",
          "966:     unsigned long l, f;",
          "969:     l = ERR_GET_LIB(e);",
          "970:     f = ERR_GET_FUNC(e);",
          "971:     d.error = ERR_PACK(l, f, 0);",
          "973:     return ((p == NULL) ? NULL : p->string);",
          "974: }",
          "",
          "[Removed Lines]",
          "968:     err_fns_check();",
          "972:     p = ERRFN(err_get_item) (&d);",
          "",
          "[Added Lines]",
          "834:     p = int_err_get_item(&d);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "978:     ERR_STRING_DATA d, *p = NULL;",
          "979:     unsigned long l, r;",
          "982:     l = ERR_GET_LIB(e);",
          "983:     r = ERR_GET_REASON(e);",
          "984:     d.error = ERR_PACK(l, 0, r);",
          "986:     if (!p) {",
          "987:         d.error = ERR_PACK(0, 0, r);",
          "989:     }",
          "990:     return ((p == NULL) ? NULL : p->string);",
          "991: }",
          "",
          "[Removed Lines]",
          "981:     err_fns_check();",
          "985:     p = ERRFN(err_get_item) (&d);",
          "988:         p = ERRFN(err_get_item) (&d);",
          "",
          "[Added Lines]",
          "846:     p = int_err_get_item(&d);",
          "849:         p = int_err_get_item(&d);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "998:         CRYPTO_THREADID_cpy(&tmp.tid, id);",
          "999:     else",
          "1000:         CRYPTO_THREADID_current(&tmp.tid);",
          "1007: }",
          "1009: #ifndef OPENSSL_NO_DEPRECATED",
          "",
          "[Removed Lines]",
          "1001:     err_fns_check();",
          "1006:     ERRFN(thread_del_item) (&tmp);",
          "",
          "[Added Lines]",
          "866:     int_thread_del_item(&tmp);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1020:     int i;",
          "1021:     CRYPTO_THREADID tid;",
          "1024:     CRYPTO_THREADID_current(&tid);",
          "1025:     CRYPTO_THREADID_cpy(&tmp.tid, &tid);",
          "1029:     if (ret == NULL) {",
          "",
          "[Removed Lines]",
          "1023:     err_fns_check();",
          "1026:     ret = ERRFN(thread_get_item) (&tmp);",
          "",
          "[Added Lines]",
          "885:     ret = int_thread_get_item(&tmp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1037:             ret->err_data[i] = NULL;",
          "1038:             ret->err_data_flags[i] = 0;",
          "1039:         }",
          "1044:             return (&fallback);",
          "1045:         }",
          "",
          "[Removed Lines]",
          "1040:         tmpp = ERRFN(thread_set_item) (ret);",
          "1042:         if (ERRFN(thread_get_item) (ret) != ret) {",
          "",
          "[Added Lines]",
          "899:         tmpp = int_thread_set_item(ret);",
          "901:         if (int_thread_get_item(ret) != ret) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1056: int ERR_get_next_error_library(void)",
          "1057: {",
          "1060: }",
          "1062: void ERR_set_error_data(char *data, int flags)",
          "",
          "[Removed Lines]",
          "1058:     err_fns_check();",
          "1059:     return ERRFN(get_next_lib) ();",
          "",
          "[Added Lines]",
          "917:     int ret;",
          "919:     CRYPTO_w_lock(CRYPTO_LOCK_ERR);",
          "920:     ret = int_err_library_number++;",
          "921:     CRYPTO_w_unlock(CRYPTO_LOCK_ERR);",
          "922:     return ret;",
          "",
          "---------------"
        ],
        "include/openssl/engine.h||include/openssl/engine.h": [
          "File: include/openssl/engine.h -> include/openssl/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "777: typedef struct st_dynamic_fns {",
          "778:     void *static_state;",
          "780:     const CRYPTO_EX_DATA_IMPL *ex_data_fns;",
          "781:     dynamic_MEM_fns mem_fns;",
          "782:     dynamic_LOCK_fns lock_fns;",
          "",
          "[Removed Lines]",
          "779:     const ERR_FNS *err_fns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "837:                 CRYPTO_set_dynlock_destroy_callback(fns->lock_fns.dynlock_destroy_cb); \\",
          "838:                 if(!CRYPTO_set_ex_data_implementation(fns->ex_data_fns)) \\",
          "839:                         return 0; \\",
          "841:         skip_cbs: \\",
          "842:                 if(!fn(e,id)) return 0; \\",
          "843:                 return 1; }",
          "",
          "[Removed Lines]",
          "840:                 if(!ERR_set_implementation(fns->err_fns)) return 0; \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/err.h||include/openssl/err.h": [
          "File: include/openssl/err.h -> include/openssl/err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "362: int ERR_set_mark(void);",
          "363: int ERR_pop_to_mark(void);",
          "378: #ifdef  __cplusplus",
          "379: }",
          "380: #endif",
          "",
          "[Removed Lines]",
          "371: const ERR_FNS *ERR_get_implementation(void);",
          "376: int ERR_set_implementation(const ERR_FNS *fns);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/ossl_typ.h||include/openssl/ossl_typ.h": [
          "File: include/openssl/ossl_typ.h -> include/openssl/ossl_typ.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: typedef struct ui_st UI;",
          "173: typedef struct ui_method_st UI_METHOD;",
          "177: typedef struct engine_st ENGINE;",
          "178: typedef struct ssl_st SSL;",
          "179: typedef struct ssl_ctx_st SSL_CTX;",
          "",
          "[Removed Lines]",
          "175: typedef struct st_ERR_FNS ERR_FNS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/indent.pro||util/indent.pro": [
          "File: util/indent.pro -> util/indent.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "251: -T ENGINE_SSL_CLIENT_CERT_PTR",
          "252: -T ENGINE_TABLE",
          "253: -T ENUMERATED_NAMES",
          "255: -T ERR_STATE",
          "256: -T ERR_STRING_DATA",
          "257: -T ESS_CERT_ID",
          "",
          "[Removed Lines]",
          "254: -T ERR_FNS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "2033: OCSP_response_status_str                2598 EXIST::FUNCTION:",
          "2034: d2i_OCSP_REVOKEDINFO                    2599 EXIST::FUNCTION:",
          "2035: OCSP_basic_add1_cert                    2600 EXIST::FUNCTION:",
          "2037: EVP_CipherFinal_ex                      2602 EXIST::FUNCTION:",
          "2038: OCSP_CERTSTATUS_new                     2603 EXIST::FUNCTION:",
          "2039: CRYPTO_cleanup_all_ex_data              2604 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2036: ERR_get_implementation                  2601 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2036: ERR_get_implementation                  2601 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2337: ASN1_GENERALSTRING_new                  2846 EXIST::FUNCTION:",
          "2338: X509_SIG_it                             2847 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2339: X509_SIG_it                             2847 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "2341: ERR_load_EC_strings                     2849 EXIST::FUNCTION:EC",
          "2342: UI_get0_action_string                   2850 EXIST::FUNCTION:",
          "2343: OCSP_ONEREQ_get_ext                     2851 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2340: ERR_set_implementation                  2848 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2340: ERR_set_implementation                  2848 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68487a9b0631d27be9a1f4565e7e652ae9cb6aad",
      "candidate_info": {
        "commit_hash": "68487a9b0631d27be9a1f4565e7e652ae9cb6aad",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/68487a9b0631d27be9a1f4565e7e652ae9cb6aad",
        "files": [
          "apps/s_client.c",
          "apps/s_server.c",
          "crypto/async/arch/async_null.c",
          "crypto/async/arch/async_posix.c",
          "crypto/async/arch/async_posix.h",
          "crypto/async/async.c",
          "crypto/async/async_err.c",
          "crypto/async/async_locl.h",
          "doc/crypto/ASYNC_start_job.pod",
          "include/openssl/async.h",
          "test/asynctest.c",
          "util/libeay.num"
        ],
        "message": "Convert __thread to pthreads for Thread Local Storage\n\nIn theory the pthreads approach for Thread Local Storage should be more\nportable.\n\nThis also changes some APIs in order to accommodate this change. In\nparticular ASYNC_init_pool is renamed ASYNC_init_thread and\nASYNC_free_pool is renamed ASYNC_cleanup_thread. Also introduced ASYNC_init\nand ASYNC_cleanup.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "crypto/async/arch/async_null.c||crypto/async/arch/async_null.c",
          "crypto/async/arch/async_posix.c||crypto/async/arch/async_posix.c",
          "crypto/async/arch/async_posix.h||crypto/async/arch/async_posix.h",
          "crypto/async/async.c||crypto/async/async.c",
          "crypto/async/async_err.c||crypto/async/async_err.c",
          "crypto/async/async_locl.h||crypto/async/async_locl.h",
          "include/openssl/async.h||include/openssl/async.h",
          "test/asynctest.c||test/asynctest.c",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "apps/s_server.c||apps/s_server.c",
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "apps/s_server.c||apps/s_server.c",
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:     if (async) {",
          "1210:         SSL_CTX_set_mode(ctx, SSL_MODE_ASYNC);",
          "1212:     }",
          "1214:     if (!config_ctx(cctx, ssl_args, ctx, 1, jpake_secret == NULL))",
          "",
          "[Removed Lines]",
          "1211:         ASYNC_init_pool(0, 0);",
          "",
          "[Added Lines]",
          "1211:         ASYNC_init(1, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2102:         SSL_free(con);",
          "2103:     }",
          "2104:     if (async) {",
          "2106:     }",
          "2107: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "2108:     OPENSSL_free(next_proto.data);",
          "",
          "[Removed Lines]",
          "2105:         ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "2105:         ASYNC_cleanup(1);",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1661:     if (async) {",
          "1662:         SSL_CTX_set_mode(ctx, SSL_MODE_ASYNC);",
          "1664:     }",
          "1666: #ifndef OPENSSL_NO_SRTP",
          "",
          "[Removed Lines]",
          "1663:         ASYNC_init_pool(0, 0);",
          "",
          "[Added Lines]",
          "1663:         ASYNC_init(1, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1974:     BIO_free(bio_s_msg);",
          "1975:     bio_s_msg = NULL;",
          "1976:     if (async) {",
          "1978:     }",
          "1979:     return (ret);",
          "1980: }",
          "",
          "[Removed Lines]",
          "1977:         ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "1977:         ASYNC_cleanup(1);",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_null.c||crypto/async/arch/async_null.c": [
          "File: crypto/async/arch/async_null.c -> crypto/async/arch/async_null.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     return -1;",
          "62: }",
          "64: int async_write1(OSSL_ASYNC_FD fd, const void *buf)",
          "65: {",
          "66:     return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: int async_close_fd(OSSL_ASYNC_FD fd)",
          "65: {",
          "66:     return 0;",
          "67: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     return -1;",
          "72: }",
          "74: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: int async_thread_local_init(void)",
          "80: {",
          "81:     return 0;",
          "82: }",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_posix.c||crypto/async/arch/async_posix.c": [
          "File: crypto/async/arch/async_posix.c -> crypto/async/arch/async_posix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: # include <openssl/crypto.h>",
          "62: # include <openssl/async.h>",
          "67: #define STACKSIZE       32768",
          "69: int async_fibre_init(async_fibre *fibre)",
          "70: {",
          "71:     void *stack = NULL;",
          "",
          "[Removed Lines]",
          "64: __thread async_ctx *posixctx;",
          "65: __thread async_pool *posixpool;",
          "",
          "[Added Lines]",
          "64: pthread_key_t posixctx;",
          "65: pthread_key_t posixpool;",
          "69: int async_thread_local_init(void)",
          "70: {",
          "71:     if (pthread_key_create(&posixctx, NULL) != 0",
          "72:             || pthread_key_create(&posixpool, NULL) != 0)",
          "73:         return 0;",
          "75:     return 1;",
          "76: }",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_posix.h||crypto/async/arch/async_posix.h": [
          "File: crypto/async/arch/async_posix.h -> crypto/async/arch/async_posix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <openssl/e_os2.h>",
          "57: # include <unistd.h>",
          "59: # if _POSIX_VERSION >= 200112L",
          "61: #  define ASYNC_POSIX",
          "62: #  define ASYNC_ARCH",
          "",
          "[Removed Lines]",
          "55: #ifdef OPENSSL_SYS_UNIX",
          "",
          "[Added Lines]",
          "55: #if defined(OPENSSL_SYS_UNIX) && defined(OPENSSL_THREADS)",
          "61: # include <pthread.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: #  include <setjmp.h>",
          "74: #  include \"e_os.h\"",
          "79: typedef struct async_fibre_st {",
          "80:     ucontext_t fibre;",
          "",
          "[Removed Lines]",
          "76: extern __thread async_ctx *posixctx;",
          "77: extern __thread async_pool *posixpool;",
          "",
          "[Added Lines]",
          "78: extern pthread_key_t posixctx;",
          "79: extern pthread_key_t posixpool;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     int env_init;",
          "83: } async_fibre;",
          "90: static inline int async_fibre_swapcontext(async_fibre *o, async_fibre *n, int r)",
          "91: {",
          "",
          "[Removed Lines]",
          "85: #  define async_set_ctx(nctx)             (posixctx = (nctx))",
          "86: #  define async_get_ctx()                 (posixctx)",
          "87: #  define async_set_pool(p)               (posixpool = (p))",
          "88: #  define async_get_pool()                (posixpool)",
          "",
          "[Added Lines]",
          "87: #  define async_set_ctx(nctx)  (pthread_setspecific(posixctx , (nctx)) == 0)",
          "88: #  define async_get_ctx()      ((async_ctx *)pthread_getspecific(posixctx))",
          "89: #  define async_set_pool(p)    (pthread_setspecific(posixpool , (p)) == 0)",
          "90: #  define async_get_pool()     ((async_pool *)pthread_getspecific(posixpool))",
          "",
          "---------------"
        ],
        "crypto/async/async.c||crypto/async/async.c": [
          "File: crypto/async/async.c -> crypto/async/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:             return NULL;",
          "161:         pool = async_get_pool();",
          "162:     }",
          "",
          "[Removed Lines]",
          "159:         if (ASYNC_init_pool(0, 0) == 0)",
          "",
          "[Added Lines]",
          "159:         if (ASYNC_init_thread(0, 0) == 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:     } while (job);",
          "329: }",
          "332: {",
          "333:     async_pool *pool;",
          "334:     size_t curr_size = 0;",
          "343:         return 0;",
          "344:     }",
          "346:     pool = OPENSSL_zalloc(sizeof *pool);",
          "347:     if (pool == NULL) {",
          "349:         return 0;",
          "350:     }",
          "352:     pool->jobs = sk_ASYNC_JOB_new_null();",
          "353:     if (pool->jobs == NULL) {",
          "355:         OPENSSL_free(pool);",
          "356:         return 0;",
          "357:     }",
          "",
          "[Removed Lines]",
          "331: int ASYNC_init_pool(size_t max_size, size_t init_size)",
          "336:     if (init_size > max_size || max_size == 0) {",
          "337:         ASYNCerr(ASYNC_F_ASYNC_INIT_POOL, ASYNC_R_INVALID_POOL_SIZE);",
          "338:         return 0;",
          "339:     }",
          "341:     if(async_get_pool() != NULL) {",
          "342:         ASYNCerr(ASYNC_F_ASYNC_INIT_POOL, ASYNC_R_POOL_ALREADY_INITED);",
          "348:         ASYNCerr(ASYNC_F_ASYNC_INIT_POOL, ERR_R_MALLOC_FAILURE);",
          "354:         ASYNCerr(ASYNC_F_ASYNC_INIT_POOL, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "331: int ASYNC_init(int init_thread, size_t max_size, size_t init_size)",
          "332: {",
          "333:     if (!async_thread_local_init())",
          "334:         return 0;",
          "336:     if (init_thread)",
          "337:         return ASYNC_init_thread(max_size, init_size);",
          "339:     return 1;",
          "340: }",
          "342: int ASYNC_init_thread(size_t max_size, size_t init_size)",
          "347:     if (init_size > max_size) {",
          "348:         ASYNCerr(ASYNC_F_ASYNC_INIT_THREAD, ASYNC_R_INVALID_POOL_SIZE);",
          "354:         ASYNCerr(ASYNC_F_ASYNC_INIT_THREAD, ERR_R_MALLOC_FAILURE);",
          "360:         ASYNCerr(ASYNC_F_ASYNC_INIT_THREAD, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:     pool->curr_size = curr_size;",
          "381:     if (!async_set_pool(pool)) {",
          "383:         goto err;",
          "384:     }",
          "",
          "[Removed Lines]",
          "382:         ASYNCerr(ASYNC_F_ASYNC_INIT_POOL, ASYNC_R_FAILED_TO_SET_POOL);",
          "",
          "[Added Lines]",
          "388:         ASYNCerr(ASYNC_F_ASYNC_INIT_THREAD, ASYNC_R_FAILED_TO_SET_POOL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:     async_empty_pool(pool);",
          "398:     sk_ASYNC_JOB_free(pool->jobs);",
          "399:     OPENSSL_free(pool);",
          "401:     async_ctx_free();",
          "402: }",
          "405: {",
          "406:     async_free_pool_internal(async_get_pool());",
          "407: }",
          "409: ASYNC_JOB *ASYNC_get_current_job(void)",
          "410: {",
          "411:     async_ctx *ctx;",
          "",
          "[Removed Lines]",
          "400:     async_set_pool(NULL);",
          "404: void ASYNC_free_pool(void)",
          "",
          "[Added Lines]",
          "406:     (void)async_set_pool(NULL);",
          "410: void ASYNC_cleanup_thread(void)",
          "415: void ASYNC_cleanup(int cleanupthread)",
          "416: {",
          "421:     if (cleanupthread)",
          "422:         ASYNC_cleanup_thread();",
          "423: }",
          "",
          "---------------"
        ],
        "crypto/async/async_err.c||crypto/async/async_err.c": [
          "File: crypto/async/async_err.c -> crypto/async/async_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: static ERR_STRING_DATA ASYNC_str_functs[] = {",
          "73:     {ERR_FUNC(ASYNC_F_ASYNC_CTX_NEW), \"async_ctx_new\"},",
          "75:     {ERR_FUNC(ASYNC_F_ASYNC_JOB_NEW), \"async_job_new\"},",
          "76:     {ERR_FUNC(ASYNC_F_ASYNC_PAUSE_JOB), \"ASYNC_pause_job\"},",
          "77:     {ERR_FUNC(ASYNC_F_ASYNC_START_FUNC), \"async_start_func\"},",
          "",
          "[Removed Lines]",
          "74:     {ERR_FUNC(ASYNC_F_ASYNC_INIT_POOL), \"ASYNC_init_pool\"},",
          "",
          "[Added Lines]",
          "74:     {ERR_FUNC(ASYNC_F_ASYNC_INIT_THREAD), \"ASYNC_init_thread\"},",
          "",
          "---------------"
        ],
        "crypto/async/async_locl.h||crypto/async/async_locl.h": [
          "File: crypto/async/async_locl.h -> crypto/async/async_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     size_t max_size;",
          "87: };",
          "89: void async_start_func(void);",
          "90: int async_pipe(OSSL_ASYNC_FD *pipefds);",
          "91: int async_close_fd(OSSL_ASYNC_FD fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: int async_thread_local_init(void);",
          "",
          "---------------"
        ],
        "include/openssl/async.h||include/openssl/async.h": [
          "File: include/openssl/async.h -> include/openssl/async.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #define ASYNC_PAUSE    2",
          "76: #define ASYNC_FINISH   3",
          "81: int ASYNC_start_job(ASYNC_JOB **job, int *ret, int (*func)(void *),",
          "82:                          void *args, size_t size);",
          "",
          "[Removed Lines]",
          "78: int ASYNC_init_pool(size_t max_size, size_t init_size);",
          "79: void ASYNC_free_pool(void);",
          "",
          "[Added Lines]",
          "78: int ASYNC_init(int init_thread, size_t max_size, size_t init_size);",
          "79: void ASYNC_cleanup(int cleanupthread);",
          "80: int ASYNC_init_thread(size_t max_size, size_t init_size);",
          "81: void ASYNC_cleanup_thread(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: # define ASYNC_F_ASYNC_CTX_NEW                            100",
          "104: # define ASYNC_F_ASYNC_JOB_NEW                            102",
          "105: # define ASYNC_F_ASYNC_PAUSE_JOB                          103",
          "106: # define ASYNC_F_ASYNC_START_FUNC                         104",
          "",
          "[Removed Lines]",
          "103: # define ASYNC_F_ASYNC_INIT_POOL                          101",
          "",
          "[Added Lines]",
          "105: # define ASYNC_F_ASYNC_INIT_THREAD                        101",
          "",
          "---------------"
        ],
        "test/asynctest.c||test/asynctest.c": [
          "File: test/asynctest.c -> test/asynctest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #include <openssl/crypto.h>",
          "63: #include <../apps/apps.h>",
          "66: # include <unistd.h>",
          "67: # if _POSIX_VERSION >= 200112L",
          "68: #  define ASYNC_POSIX",
          "",
          "[Removed Lines]",
          "65: #ifdef OPENSSL_SYS_UNIX",
          "",
          "[Added Lines]",
          "65: #if defined(OPENSSL_SYS_UNIX) && defined(OPENSSL_THREADS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     return 1;",
          "125: }",
          "128: {",
          "129:     ASYNC_JOB *job1 = NULL, *job2 = NULL, *job3 = NULL;",
          "130:     int funcret1, funcret2, funcret3;",
          "133:             || ASYNC_start_job(&job1, &funcret1, only_pause, NULL, 0)",
          "134:                 != ASYNC_PAUSE",
          "135:             || ASYNC_start_job(&job2, &funcret2, only_pause, NULL, 0)",
          "",
          "[Removed Lines]",
          "127: static int test_ASYNC_init_pool()",
          "132:     if (       !ASYNC_init_pool(2, 0)",
          "",
          "[Added Lines]",
          "127: static int test_ASYNC_init()",
          "132:     if (       !ASYNC_init(1, 2, 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:             || funcret1 != 1",
          "148:             || funcret2 != 1",
          "149:             || funcret3 != 1) {",
          "152:         return 0;",
          "153:     }",
          "156:     return 1;",
          "157: }",
          "",
          "[Removed Lines]",
          "150:         fprintf(stderr, \"test_ASYNC_init_pool() failed\\n\");",
          "151:         ASYNC_free_pool();",
          "155:     ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "150:         fprintf(stderr, \"test_ASYNC_init() failed\\n\");",
          "151:         ASYNC_cleanup(1);",
          "155:     ASYNC_cleanup(1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     ctr = 0;",
          "167:             || ASYNC_start_job(&job, &funcret, add_two, NULL, 0) != ASYNC_PAUSE",
          "168:             || ctr != 1",
          "169:             || ASYNC_start_job(&job, &funcret, add_two, NULL, 0) != ASYNC_FINISH",
          "170:             || ctr != 2",
          "171:             || funcret != 2) {",
          "172:         fprintf(stderr, \"test_ASYNC_start_job() failed\\n\");",
          "174:         return 0;",
          "175:     }",
          "178:     return 1;",
          "179: }",
          "",
          "[Removed Lines]",
          "166:     if (       !ASYNC_init_pool(1, 0)",
          "173:         ASYNC_free_pool();",
          "177:     ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "166:     if (       !ASYNC_init(1, 1, 0)",
          "173:         ASYNC_cleanup(1);",
          "177:     ASYNC_cleanup(1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:     currjob = NULL;",
          "189:             || ASYNC_start_job(&job, &funcret, save_current, NULL, 0)",
          "190:                 != ASYNC_PAUSE",
          "191:             || currjob != job",
          "",
          "[Removed Lines]",
          "188:     if (       !ASYNC_init_pool(1, 0)",
          "",
          "[Added Lines]",
          "188:     if (       !ASYNC_init(1, 1, 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:                 != ASYNC_FINISH",
          "194:             || funcret != 1) {",
          "195:         fprintf(stderr, \"test_ASYNC_get_current_job() failed\\n\");",
          "197:         return 0;",
          "198:     }",
          "201:     return 1;",
          "202: }",
          "",
          "[Removed Lines]",
          "196:         ASYNC_free_pool();",
          "200:     ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "196:         ASYNC_cleanup(1);",
          "200:     ASYNC_cleanup(1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230:     int funcret;",
          "231:     OSSL_ASYNC_FD fd;",
          "234:             || ASYNC_start_job(&job, &funcret, wake, NULL, 0)",
          "235:                 != ASYNC_PAUSE",
          "236:             || (fd = ASYNC_get_wait_fd(job)) < 0",
          "",
          "[Removed Lines]",
          "233:     if (       !ASYNC_init_pool(1, 0)",
          "",
          "[Added Lines]",
          "233:     if (       !ASYNC_init(1, 1, 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "246:                 != ASYNC_FINISH",
          "247:             || funcret != 1) {",
          "248:         fprintf(stderr, \"test_ASYNC_get_wait_fd() failed\\n\");",
          "250:         return 0;",
          "251:     }",
          "254:     return 1;",
          "255: }",
          "",
          "[Removed Lines]",
          "249:         ASYNC_free_pool();",
          "253:     ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "249:         ASYNC_cleanup(1);",
          "253:     ASYNC_cleanup(1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "259:     ASYNC_JOB *job = NULL;",
          "260:     int funcret;",
          "263:             || ASYNC_start_job(&job, &funcret, blockpause, NULL, 0)",
          "264:                 != ASYNC_PAUSE",
          "265:             || ASYNC_start_job(&job, &funcret, blockpause, NULL, 0)",
          "266:                 != ASYNC_FINISH",
          "267:             || funcret != 1) {",
          "268:         fprintf(stderr, \"test_ASYNC_block_pause() failed\\n\");",
          "270:         return 0;",
          "271:     }",
          "274:     return 1;",
          "275: }",
          "",
          "[Removed Lines]",
          "262:     if (       !ASYNC_init_pool(1, 0)",
          "269:         ASYNC_free_pool();",
          "273:     ASYNC_free_pool();",
          "",
          "[Added Lines]",
          "262:     if (       !ASYNC_init(1, 1, 0)",
          "269:         ASYNC_cleanup(1);",
          "273:     ASYNC_cleanup(1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:     CRYPTO_set_mem_debug_options(V_CRYPTO_MDEBUG_ALL);",
          "287:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);",
          "290:             || !test_ASYNC_start_job()",
          "291:             || !test_ASYNC_get_current_job()",
          "292:             || !test_ASYNC_get_wait_fd()",
          "",
          "[Removed Lines]",
          "289:     if (       !test_ASYNC_init_pool()",
          "",
          "[Added Lines]",
          "289:     if (       !test_ASYNC_init()",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4652: ENGINE_load_dasync                      5012 EXIST::FUNCTION:ENGINE,STATIC_ENGINE",
          "4653: ASYNC_pause_job                         5013 EXIST::FUNCTION:",
          "4654: ASYNC_start_job                         5014 EXIST::FUNCTION:",
          "4657: ASYNC_wake                              5017 EXIST::FUNCTION:",
          "4658: ASYNC_clear_wake                        5018 EXIST::FUNCTION:",
          "4659: ASYNC_get_current_job                   5019 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4655: ASYNC_init_pool                         5015 EXIST::FUNCTION:",
          "4656: ASYNC_free_pool                         5016 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4655: ASYNC_init_thread                       5015 EXIST::FUNCTION:",
          "4656: ASYNC_cleanup_thread                    5016 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ed42bf639b12a2ec5bcc24ef5a45a1ca027ec95",
      "candidate_info": {
        "commit_hash": "2ed42bf639b12a2ec5bcc24ef5a45a1ca027ec95",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ed42bf639b12a2ec5bcc24ef5a45a1ca027ec95",
        "files": [
          "crypto/objects/obj_dat.h",
          "include/openssl/obj_mac.h",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/objects/obj_dat.h||crypto/objects/obj_dat.h",
          "include/openssl/obj_mac.h||include/openssl/obj_mac.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/objects/obj_dat.h||crypto/objects/obj_dat.h": [
          "File: crypto/objects/obj_dat.h -> crypto/objects/obj_dat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #define NUM_NID 973",
          "",
          "[Removed Lines]",
          "66: #define NUM_SN 967",
          "67: #define NUM_LN 967",
          "68: #define NUM_OBJ 903",
          "70: static const unsigned char lvalues[6361]={",
          "",
          "[Added Lines]",
          "66: #define NUM_SN 966",
          "67: #define NUM_LN 966",
          "68: #define NUM_OBJ 902",
          "70: static const unsigned char lvalues[6355]={",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1134: {\"RC5-ECB\",\"rc5-ecb\",NID_rc5_ecb,0,NULL,0},",
          "1135: {\"RC5-CFB\",\"rc5-cfb\",NID_rc5_cfb64,0,NULL,0},",
          "1136: {\"RC5-OFB\",\"rc5-ofb\",NID_rc5_ofb64,0,NULL,0},",
          "1139: {\"extendedKeyUsage\",\"X509v3 Extended Key Usage\",NID_ext_key_usage,3,",
          "1143: {\"serverAuth\",\"TLS Web Server Authentication\",NID_server_auth,8,",
          "1145: {\"clientAuth\",\"TLS Web Client Authentication\",NID_client_auth,8,",
          "1148: {\"emailProtection\",\"E-mail Protection\",NID_email_protect,8,",
          "1151: {\"msCodeInd\",\"Microsoft Individual Code Signing\",NID_ms_code_ind,10,",
          "1153: {\"msCodeCom\",\"Microsoft Commercial Code Signing\",NID_ms_code_com,10,",
          "1155: {\"msCTLSign\",\"Microsoft Trust List Signing\",NID_ms_ctl_sign,10,",
          "1158: {\"msEFS\",\"Microsoft Encrypted File System\",NID_ms_efs,10,",
          "1161: {\"deltaCRL\",\"X509v3 Delta CRL Indicator\",NID_delta_crl,3,",
          "1164: {\"invalidityDate\",\"Invalidity Date\",NID_invalidity_date,3,",
          "1167: {\"PBE-SHA1-RC4-128\",\"pbeWithSHA1And128BitRC4\",",
          "1169: {\"PBE-SHA1-RC4-40\",\"pbeWithSHA1And40BitRC4\",",
          "1171: {\"PBE-SHA1-3DES\",\"pbeWithSHA1And3-KeyTripleDES-CBC\",",
          "1173: {\"PBE-SHA1-2DES\",\"pbeWithSHA1And2-KeyTripleDES-CBC\",",
          "1175: {\"PBE-SHA1-RC2-128\",\"pbeWithSHA1And128BitRC2-CBC\",",
          "1177: {\"PBE-SHA1-RC2-40\",\"pbeWithSHA1And40BitRC2-CBC\",",
          "1180: {\"pkcs8ShroudedKeyBag\",\"pkcs8ShroudedKeyBag\",NID_pkcs8ShroudedKeyBag,",
          "1185: {\"safeContentsBag\",\"safeContentsBag\",NID_safeContentsBag,11,",
          "1189: {\"x509Certificate\",\"x509Certificate\",NID_x509Certificate,10,",
          "1191: {\"sdsiCertificate\",\"sdsiCertificate\",NID_sdsiCertificate,10,",
          "1198: {\"id-qt-unotice\",\"Policy Qualifier User Notice\",NID_id_qt_unotice,8,",
          "1200: {\"RC2-64-CBC\",\"rc2-64-cbc\",NID_rc2_64_cbc,0,NULL,0},",
          "1201: {\"SMIME-CAPS\",\"S/MIME Capabilities\",NID_SMIMECapabilities,9,",
          "1203: {\"PBE-MD2-RC2-64\",\"pbeWithMD2AndRC2-CBC\",NID_pbeWithMD2AndRC2_CBC,9,",
          "1205: {\"PBE-MD5-RC2-64\",\"pbeWithMD5AndRC2-CBC\",NID_pbeWithMD5AndRC2_CBC,9,",
          "1207: {\"PBE-SHA1-DES\",\"pbeWithSHA1AndDES-CBC\",NID_pbeWithSHA1AndDES_CBC,9,",
          "1209: {\"msExtReq\",\"Microsoft Extension Request\",NID_ms_ext_req,10,",
          "1216: {\"authorityInfoAccess\",\"Authority Information Access\",NID_info_access,",
          "1221: {\"ISO\",\"iso\",NID_iso,0,NULL,0},",
          "1236: {\"id-smime-mod-cms\",\"id-smime-mod-cms\",NID_id_smime_mod_cms,11,",
          "1238: {\"id-smime-mod-ess\",\"id-smime-mod-ess\",NID_id_smime_mod_ess,11,",
          "1240: {\"id-smime-mod-oid\",\"id-smime-mod-oid\",NID_id_smime_mod_oid,11,",
          "1242: {\"id-smime-mod-msg-v3\",\"id-smime-mod-msg-v3\",NID_id_smime_mod_msg_v3,",
          "1244: {\"id-smime-mod-ets-eSignature-88\",\"id-smime-mod-ets-eSignature-88\",",
          "1246: {\"id-smime-mod-ets-eSignature-97\",\"id-smime-mod-ets-eSignature-97\",",
          "1248: {\"id-smime-mod-ets-eSigPolicy-88\",\"id-smime-mod-ets-eSigPolicy-88\",",
          "1250: {\"id-smime-mod-ets-eSigPolicy-97\",\"id-smime-mod-ets-eSigPolicy-97\",",
          "1252: {\"id-smime-ct-receipt\",\"id-smime-ct-receipt\",NID_id_smime_ct_receipt,",
          "1254: {\"id-smime-ct-authData\",\"id-smime-ct-authData\",",
          "1256: {\"id-smime-ct-publishCert\",\"id-smime-ct-publishCert\",",
          "1258: {\"id-smime-ct-TSTInfo\",\"id-smime-ct-TSTInfo\",NID_id_smime_ct_TSTInfo,",
          "1260: {\"id-smime-ct-TDTInfo\",\"id-smime-ct-TDTInfo\",NID_id_smime_ct_TDTInfo,",
          "1262: {\"id-smime-ct-contentInfo\",\"id-smime-ct-contentInfo\",",
          "1264: {\"id-smime-ct-DVCSRequestData\",\"id-smime-ct-DVCSRequestData\",",
          "1266: {\"id-smime-ct-DVCSResponseData\",\"id-smime-ct-DVCSResponseData\",",
          "1268: {\"id-smime-aa-receiptRequest\",\"id-smime-aa-receiptRequest\",",
          "1270: {\"id-smime-aa-securityLabel\",\"id-smime-aa-securityLabel\",",
          "1272: {\"id-smime-aa-mlExpandHistory\",\"id-smime-aa-mlExpandHistory\",",
          "1274: {\"id-smime-aa-contentHint\",\"id-smime-aa-contentHint\",",
          "1276: {\"id-smime-aa-msgSigDigest\",\"id-smime-aa-msgSigDigest\",",
          "1278: {\"id-smime-aa-encapContentType\",\"id-smime-aa-encapContentType\",",
          "1280: {\"id-smime-aa-contentIdentifier\",\"id-smime-aa-contentIdentifier\",",
          "1282: {\"id-smime-aa-macValue\",\"id-smime-aa-macValue\",",
          "1284: {\"id-smime-aa-equivalentLabels\",\"id-smime-aa-equivalentLabels\",",
          "1286: {\"id-smime-aa-contentReference\",\"id-smime-aa-contentReference\",",
          "1288: {\"id-smime-aa-encrypKeyPref\",\"id-smime-aa-encrypKeyPref\",",
          "1290: {\"id-smime-aa-signingCertificate\",\"id-smime-aa-signingCertificate\",",
          "1292: {\"id-smime-aa-smimeEncryptCerts\",\"id-smime-aa-smimeEncryptCerts\",",
          "1294: {\"id-smime-aa-timeStampToken\",\"id-smime-aa-timeStampToken\",",
          "1296: {\"id-smime-aa-ets-sigPolicyId\",\"id-smime-aa-ets-sigPolicyId\",",
          "1298: {\"id-smime-aa-ets-commitmentType\",\"id-smime-aa-ets-commitmentType\",",
          "1300: {\"id-smime-aa-ets-signerLocation\",\"id-smime-aa-ets-signerLocation\",",
          "1302: {\"id-smime-aa-ets-signerAttr\",\"id-smime-aa-ets-signerAttr\",",
          "1304: {\"id-smime-aa-ets-otherSigCert\",\"id-smime-aa-ets-otherSigCert\",",
          "1306: {\"id-smime-aa-ets-contentTimestamp\",",
          "1307:  \"id-smime-aa-ets-contentTimestamp\",",
          "1309: {\"id-smime-aa-ets-CertificateRefs\",\"id-smime-aa-ets-CertificateRefs\",",
          "1311: {\"id-smime-aa-ets-RevocationRefs\",\"id-smime-aa-ets-RevocationRefs\",",
          "1313: {\"id-smime-aa-ets-certValues\",\"id-smime-aa-ets-certValues\",",
          "1315: {\"id-smime-aa-ets-revocationValues\",",
          "1316:  \"id-smime-aa-ets-revocationValues\",",
          "1318: {\"id-smime-aa-ets-escTimeStamp\",\"id-smime-aa-ets-escTimeStamp\",",
          "1320: {\"id-smime-aa-ets-certCRLTimestamp\",",
          "1321:  \"id-smime-aa-ets-certCRLTimestamp\",",
          "1323: {\"id-smime-aa-ets-archiveTimeStamp\",",
          "1324:  \"id-smime-aa-ets-archiveTimeStamp\",",
          "1326: {\"id-smime-aa-signatureType\",\"id-smime-aa-signatureType\",",
          "1328: {\"id-smime-aa-dvcs-dvc\",\"id-smime-aa-dvcs-dvc\",",
          "1330: {\"id-smime-alg-ESDHwith3DES\",\"id-smime-alg-ESDHwith3DES\",",
          "1332: {\"id-smime-alg-ESDHwithRC2\",\"id-smime-alg-ESDHwithRC2\",",
          "1334: {\"id-smime-alg-3DESwrap\",\"id-smime-alg-3DESwrap\",",
          "1336: {\"id-smime-alg-RC2wrap\",\"id-smime-alg-RC2wrap\",",
          "1338: {\"id-smime-alg-ESDH\",\"id-smime-alg-ESDH\",NID_id_smime_alg_ESDH,11,",
          "1340: {\"id-smime-alg-CMS3DESwrap\",\"id-smime-alg-CMS3DESwrap\",",
          "1342: {\"id-smime-alg-CMSRC2wrap\",\"id-smime-alg-CMSRC2wrap\",",
          "1344: {\"id-smime-cd-ldap\",\"id-smime-cd-ldap\",NID_id_smime_cd_ldap,11,",
          "1346: {\"id-smime-spq-ets-sqt-uri\",\"id-smime-spq-ets-sqt-uri\",",
          "1348: {\"id-smime-spq-ets-sqt-unotice\",\"id-smime-spq-ets-sqt-unotice\",",
          "1350: {\"id-smime-cti-ets-proofOfOrigin\",\"id-smime-cti-ets-proofOfOrigin\",",
          "1352: {\"id-smime-cti-ets-proofOfReceipt\",\"id-smime-cti-ets-proofOfReceipt\",",
          "1354: {\"id-smime-cti-ets-proofOfDelivery\",",
          "1355:  \"id-smime-cti-ets-proofOfDelivery\",",
          "1357: {\"id-smime-cti-ets-proofOfSender\",\"id-smime-cti-ets-proofOfSender\",",
          "1359: {\"id-smime-cti-ets-proofOfApproval\",",
          "1360:  \"id-smime-cti-ets-proofOfApproval\",",
          "1362: {\"id-smime-cti-ets-proofOfCreation\",",
          "1363:  \"id-smime-cti-ets-proofOfCreation\",",
          "1377: {\"id-pkix1-explicit-88\",\"id-pkix1-explicit-88\",",
          "1379: {\"id-pkix1-implicit-88\",\"id-pkix1-implicit-88\",",
          "1381: {\"id-pkix1-explicit-93\",\"id-pkix1-explicit-93\",",
          "1383: {\"id-pkix1-implicit-93\",\"id-pkix1-implicit-93\",",
          "1387: {\"id-mod-kea-profile-88\",\"id-mod-kea-profile-88\",",
          "1389: {\"id-mod-kea-profile-93\",\"id-mod-kea-profile-93\",",
          "1392: {\"id-mod-qualified-cert-88\",\"id-mod-qualified-cert-88\",",
          "1394: {\"id-mod-qualified-cert-93\",\"id-mod-qualified-cert-93\",",
          "1396: {\"id-mod-attribute-cert\",\"id-mod-attribute-cert\",",
          "1398: {\"id-mod-timestamp-protocol\",\"id-mod-timestamp-protocol\",",
          "1402: {\"id-mod-cmp2000\",\"id-mod-cmp2000\",NID_id_mod_cmp2000,8,",
          "1406: {\"ac-auditEntity\",\"ac-auditEntity\",NID_ac_auditEntity,8,",
          "1410: {\"sbgp-ipAddrBlock\",\"sbgp-ipAddrBlock\",NID_sbgp_ipAddrBlock,8,",
          "1412: {\"sbgp-autonomousSysNum\",\"sbgp-autonomousSysNum\",",
          "1414: {\"sbgp-routerIdentifier\",\"sbgp-routerIdentifier\",",
          "1417: {\"ipsecEndSystem\",\"IPSec End System\",NID_ipsecEndSystem,8,",
          "1422: {\"id-it-caProtEncCert\",\"id-it-caProtEncCert\",NID_id_it_caProtEncCert,",
          "1424: {\"id-it-signKeyPairTypes\",\"id-it-signKeyPairTypes\",",
          "1426: {\"id-it-encKeyPairTypes\",\"id-it-encKeyPairTypes\",",
          "1428: {\"id-it-preferredSymmAlg\",\"id-it-preferredSymmAlg\",",
          "1430: {\"id-it-caKeyUpdateInfo\",\"id-it-caKeyUpdateInfo\",",
          "1432: {\"id-it-currentCRL\",\"id-it-currentCRL\",NID_id_it_currentCRL,8,",
          "1434: {\"id-it-unsupportedOIDs\",\"id-it-unsupportedOIDs\",",
          "1436: {\"id-it-subscriptionRequest\",\"id-it-subscriptionRequest\",",
          "1438: {\"id-it-subscriptionResponse\",\"id-it-subscriptionResponse\",",
          "1440: {\"id-it-keyPairParamReq\",\"id-it-keyPairParamReq\",",
          "1442: {\"id-it-keyPairParamRep\",\"id-it-keyPairParamRep\",",
          "1444: {\"id-it-revPassphrase\",\"id-it-revPassphrase\",NID_id_it_revPassphrase,",
          "1446: {\"id-it-implicitConfirm\",\"id-it-implicitConfirm\",",
          "1448: {\"id-it-confirmWaitTime\",\"id-it-confirmWaitTime\",",
          "1450: {\"id-it-origPKIMessage\",\"id-it-origPKIMessage\",",
          "1454: {\"id-regCtrl-regToken\",\"id-regCtrl-regToken\",NID_id_regCtrl_regToken,",
          "1456: {\"id-regCtrl-authenticator\",\"id-regCtrl-authenticator\",",
          "1458: {\"id-regCtrl-pkiPublicationInfo\",\"id-regCtrl-pkiPublicationInfo\",",
          "1460: {\"id-regCtrl-pkiArchiveOptions\",\"id-regCtrl-pkiArchiveOptions\",",
          "1462: {\"id-regCtrl-oldCertID\",\"id-regCtrl-oldCertID\",",
          "1464: {\"id-regCtrl-protocolEncrKey\",\"id-regCtrl-protocolEncrKey\",",
          "1466: {\"id-regInfo-utf8Pairs\",\"id-regInfo-utf8Pairs\",",
          "1468: {\"id-regInfo-certReq\",\"id-regInfo-certReq\",NID_id_regInfo_certReq,9,",
          "1471: {\"id-alg-noSignature\",\"id-alg-noSignature\",NID_id_alg_noSignature,8,",
          "1473: {\"id-alg-dh-sig-hmac-sha1\",\"id-alg-dh-sig-hmac-sha1\",",
          "1476: {\"id-cmc-statusInfo\",\"id-cmc-statusInfo\",NID_id_cmc_statusInfo,8,",
          "1478: {\"id-cmc-identification\",\"id-cmc-identification\",",
          "1480: {\"id-cmc-identityProof\",\"id-cmc-identityProof\",",
          "1482: {\"id-cmc-dataReturn\",\"id-cmc-dataReturn\",NID_id_cmc_dataReturn,8,",
          "1484: {\"id-cmc-transactionId\",\"id-cmc-transactionId\",",
          "1486: {\"id-cmc-senderNonce\",\"id-cmc-senderNonce\",NID_id_cmc_senderNonce,8,",
          "1488: {\"id-cmc-recipientNonce\",\"id-cmc-recipientNonce\",",
          "1490: {\"id-cmc-addExtensions\",\"id-cmc-addExtensions\",",
          "1492: {\"id-cmc-encryptedPOP\",\"id-cmc-encryptedPOP\",NID_id_cmc_encryptedPOP,",
          "1494: {\"id-cmc-decryptedPOP\",\"id-cmc-decryptedPOP\",NID_id_cmc_decryptedPOP,",
          "1496: {\"id-cmc-lraPOPWitness\",\"id-cmc-lraPOPWitness\",",
          "1498: {\"id-cmc-getCert\",\"id-cmc-getCert\",NID_id_cmc_getCert,8,",
          "1501: {\"id-cmc-revokeRequest\",\"id-cmc-revokeRequest\",",
          "1503: {\"id-cmc-regInfo\",\"id-cmc-regInfo\",NID_id_cmc_regInfo,8,",
          "1505: {\"id-cmc-responseInfo\",\"id-cmc-responseInfo\",NID_id_cmc_responseInfo,",
          "1507: {\"id-cmc-queryPending\",\"id-cmc-queryPending\",NID_id_cmc_queryPending,",
          "1509: {\"id-cmc-popLinkRandom\",\"id-cmc-popLinkRandom\",",
          "1511: {\"id-cmc-popLinkWitness\",\"id-cmc-popLinkWitness\",",
          "1513: {\"id-cmc-confirmCertAcceptance\",\"id-cmc-confirmCertAcceptance\",",
          "1515: {\"id-on-personalData\",\"id-on-personalData\",NID_id_on_personalData,8,",
          "1517: {\"id-pda-dateOfBirth\",\"id-pda-dateOfBirth\",NID_id_pda_dateOfBirth,8,",
          "1519: {\"id-pda-placeOfBirth\",\"id-pda-placeOfBirth\",NID_id_pda_placeOfBirth,",
          "1521: {NULL,NULL,NID_undef,0,NULL,0},",
          "1523: {\"id-pda-countryOfCitizenship\",\"id-pda-countryOfCitizenship\",",
          "1525: {\"id-pda-countryOfResidence\",\"id-pda-countryOfResidence\",",
          "1527: {\"id-aca-authenticationInfo\",\"id-aca-authenticationInfo\",",
          "1529: {\"id-aca-accessIdentity\",\"id-aca-accessIdentity\",",
          "1531: {\"id-aca-chargingIdentity\",\"id-aca-chargingIdentity\",",
          "1535: {\"id-qcs-pkixQCSyntax-v1\",\"id-qcs-pkixQCSyntax-v1\",",
          "1538: {\"id-cct-PKIData\",\"id-cct-PKIData\",NID_id_cct_PKIData,8,",
          "1540: {\"id-cct-PKIResponse\",\"id-cct-PKIResponse\",NID_id_cct_PKIResponse,8,",
          "1542: {\"ad_timestamping\",\"AD Time Stamping\",NID_ad_timeStamping,8,",
          "1545: {\"basicOCSPResponse\",\"Basic OCSP Response\",NID_id_pkix_OCSP_basic,9,",
          "1549: {\"acceptableResponses\",\"Acceptable OCSP Responses\",",
          "1552: {\"archiveCutoff\",\"OCSP Archive Cutoff\",NID_id_pkix_OCSP_archiveCutoff,",
          "1554: {\"serviceLocator\",\"OCSP Service Locator\",",
          "1556: {\"extendedStatus\",\"Extended OCSP Status\",",
          "1560: {\"trustRoot\",\"Trust Root\",NID_id_pkix_OCSP_trustRoot,9,",
          "1564: {\"X500algorithms\",\"directory services - algorithms\",",
          "1580: {\"NULL\",\"NULL\",NID_joint_iso_ccitt,0,NULL,0},",
          "1581: {\"selected-attribute-types\",\"Selected Attribute Types\",",
          "1584: {\"RSA-MD4\",\"md4WithRSAEncryption\",NID_md4WithRSAEncryption,9,",
          "1587: {\"subjectInfoAccess\",\"Subject Information Access\",NID_sinfo_access,8,",
          "1589: {\"id-aca-encAttrs\",\"id-aca-encAttrs\",NID_id_aca_encAttrs,8,",
          "1592: {\"policyConstraints\",\"X509v3 Policy Constraints\",",
          "1594: {\"targetInformation\",\"X509v3 AC Targeting\",NID_target_information,3,",
          "1596: {\"noRevAvail\",\"X509v3 No Revocation Available\",NID_no_rev_avail,3,",
          "1598: {\"NULL\",\"NULL\",NID_ccitt,0,NULL,0},",
          "1601: {\"characteristic-two-field\",\"characteristic-two-field\",",
          "1603: {\"id-ecPublicKey\",\"id-ecPublicKey\",NID_X9_62_id_ecPublicKey,7,",
          "1612: {\"ecdsa-with-SHA1\",\"ecdsa-with-SHA1\",NID_ecdsa_with_SHA1,7,",
          "1627: {\"holdInstructionCode\",\"Hold Instruction Code\",",
          "1629: {\"holdInstructionNone\",\"Hold Instruction None\",",
          "1631: {\"holdInstructionCallIssuer\",\"Hold Instruction Call Issuer\",",
          "1633: {\"holdInstructionReject\",\"Hold Instruction Reject\",",
          "1639: {\"pilotAttributeType\",\"pilotAttributeType\",NID_pilotAttributeType,9,",
          "1641: {\"pilotAttributeSyntax\",\"pilotAttributeSyntax\",",
          "1643: {\"pilotObjectClass\",\"pilotObjectClass\",NID_pilotObjectClass,9,",
          "1646: {\"iA5StringSyntax\",\"iA5StringSyntax\",NID_iA5StringSyntax,10,",
          "1648: {\"caseIgnoreIA5StringSyntax\",\"caseIgnoreIA5StringSyntax\",",
          "1655: {\"documentSeries\",\"documentSeries\",NID_documentSeries,10,",
          "1657: {\"rFC822localPart\",\"rFC822localPart\",NID_rFC822localPart,10,",
          "1660: {\"domainRelatedObject\",\"domainRelatedObject\",NID_domainRelatedObject,",
          "1662: {\"friendlyCountry\",\"friendlyCountry\",NID_friendlyCountry,10,",
          "1664: {\"simpleSecurityObject\",\"simpleSecurityObject\",",
          "1666: {\"pilotOrganization\",\"pilotOrganization\",NID_pilotOrganization,10,",
          "1669: {\"qualityLabelledData\",\"qualityLabelledData\",NID_qualityLabelledData,",
          "1672: {\"textEncodedORAddress\",\"textEncodedORAddress\",",
          "1676: {\"favouriteDrink\",\"favouriteDrink\",NID_favouriteDrink,10,",
          "1683: {\"documentIdentifier\",\"documentIdentifier\",NID_documentIdentifier,10,",
          "1686: {\"documentVersion\",\"documentVersion\",NID_documentVersion,10,",
          "1688: {\"documentAuthor\",\"documentAuthor\",NID_documentAuthor,10,",
          "1690: {\"documentLocation\",\"documentLocation\",NID_documentLocation,10,",
          "1692: {\"homeTelephoneNumber\",\"homeTelephoneNumber\",NID_homeTelephoneNumber,",
          "1696: {\"lastModifiedTime\",\"lastModifiedTime\",NID_lastModifiedTime,10,",
          "1698: {\"lastModifiedBy\",\"lastModifiedBy\",NID_lastModifiedBy,10,",
          "1701: {\"pilotAttributeType27\",\"pilotAttributeType27\",",
          "1707: {\"associatedDomain\",\"associatedDomain\",NID_associatedDomain,10,",
          "1709: {\"associatedName\",\"associatedName\",NID_associatedName,10,",
          "1711: {\"homePostalAddress\",\"homePostalAddress\",NID_homePostalAddress,10,",
          "1714: {\"mobileTelephoneNumber\",\"mobileTelephoneNumber\",",
          "1716: {\"pagerTelephoneNumber\",\"pagerTelephoneNumber\",",
          "1718: {\"friendlyCountryName\",\"friendlyCountryName\",NID_friendlyCountryName,",
          "1720: {\"organizationalStatus\",\"organizationalStatus\",",
          "1723: {\"mailPreferenceOption\",\"mailPreferenceOption\",",
          "1727: {\"singleLevelQuality\",\"singleLevelQuality\",NID_singleLevelQuality,10,",
          "1729: {\"subtreeMinimumQuality\",\"subtreeMinimumQuality\",",
          "1731: {\"subtreeMaximumQuality\",\"subtreeMaximumQuality\",",
          "1733: {\"personalSignature\",\"personalSignature\",NID_personalSignature,10,",
          "1737: {\"documentPublisher\",\"documentPublisher\",NID_documentPublisher,10,",
          "1739: {\"x500UniqueIdentifier\",\"x500UniqueIdentifier\",",
          "1742: {\"mime-mhs-headings\",\"mime-mhs-headings\",NID_mime_mhs_headings,6,",
          "1744: {\"mime-mhs-bodies\",\"mime-mhs-bodies\",NID_mime_mhs_bodies,6,",
          "1746: {\"id-hex-partial-message\",\"id-hex-partial-message\",",
          "1748: {\"id-hex-multipart-message\",\"id-hex-multipart-message\",",
          "1750: {\"generationQualifier\",\"generationQualifier\",NID_generationQualifier,",
          "1753: {NULL,NULL,NID_undef,0,NULL,0},",
          "1754: {\"id-set\",\"Secure Electronic Transactions\",NID_id_set,2,",
          "1760: {\"set-certExt\",\"certificate extensions\",NID_set_certExt,3,",
          "1764: {\"setct-PANToken\",\"setct-PANToken\",NID_setct_PANToken,4,",
          "1770: {\"setct-PIDataUnsigned\",\"setct-PIDataUnsigned\",",
          "1772: {\"setct-HODInput\",\"setct-HODInput\",NID_setct_HODInput,4,",
          "1774: {\"setct-AuthResBaggage\",\"setct-AuthResBaggage\",",
          "1776: {\"setct-AuthRevReqBaggage\",\"setct-AuthRevReqBaggage\",",
          "1778: {\"setct-AuthRevResBaggage\",\"setct-AuthRevResBaggage\",",
          "1780: {\"setct-CapTokenSeq\",\"setct-CapTokenSeq\",NID_setct_CapTokenSeq,4,",
          "1782: {\"setct-PInitResData\",\"setct-PInitResData\",NID_setct_PInitResData,4,",
          "1785: {\"setct-PResData\",\"setct-PResData\",NID_setct_PResData,4,",
          "1787: {\"setct-AuthReqTBS\",\"setct-AuthReqTBS\",NID_setct_AuthReqTBS,4,",
          "1789: {\"setct-AuthResTBS\",\"setct-AuthResTBS\",NID_setct_AuthResTBS,4,",
          "1791: {\"setct-AuthResTBSX\",\"setct-AuthResTBSX\",NID_setct_AuthResTBSX,4,",
          "1793: {\"setct-AuthTokenTBS\",\"setct-AuthTokenTBS\",NID_setct_AuthTokenTBS,4,",
          "1795: {\"setct-CapTokenData\",\"setct-CapTokenData\",NID_setct_CapTokenData,4,",
          "1797: {\"setct-CapTokenTBS\",\"setct-CapTokenTBS\",NID_setct_CapTokenTBS,4,",
          "1799: {\"setct-AcqCardCodeMsg\",\"setct-AcqCardCodeMsg\",",
          "1801: {\"setct-AuthRevReqTBS\",\"setct-AuthRevReqTBS\",NID_setct_AuthRevReqTBS,",
          "1803: {\"setct-AuthRevResData\",\"setct-AuthRevResData\",",
          "1805: {\"setct-AuthRevResTBS\",\"setct-AuthRevResTBS\",NID_setct_AuthRevResTBS,",
          "1807: {\"setct-CapReqTBS\",\"setct-CapReqTBS\",NID_setct_CapReqTBS,4,",
          "1809: {\"setct-CapReqTBSX\",\"setct-CapReqTBSX\",NID_setct_CapReqTBSX,4,",
          "1811: {\"setct-CapResData\",\"setct-CapResData\",NID_setct_CapResData,4,",
          "1813: {\"setct-CapRevReqTBS\",\"setct-CapRevReqTBS\",NID_setct_CapRevReqTBS,4,",
          "1815: {\"setct-CapRevReqTBSX\",\"setct-CapRevReqTBSX\",NID_setct_CapRevReqTBSX,",
          "1817: {\"setct-CapRevResData\",\"setct-CapRevResData\",NID_setct_CapRevResData,",
          "1819: {\"setct-CredReqTBS\",\"setct-CredReqTBS\",NID_setct_CredReqTBS,4,",
          "1821: {\"setct-CredReqTBSX\",\"setct-CredReqTBSX\",NID_setct_CredReqTBSX,4,",
          "1823: {\"setct-CredResData\",\"setct-CredResData\",NID_setct_CredResData,4,",
          "1825: {\"setct-CredRevReqTBS\",\"setct-CredRevReqTBS\",NID_setct_CredRevReqTBS,",
          "1827: {\"setct-CredRevReqTBSX\",\"setct-CredRevReqTBSX\",",
          "1829: {\"setct-CredRevResData\",\"setct-CredRevResData\",",
          "1831: {\"setct-PCertReqData\",\"setct-PCertReqData\",NID_setct_PCertReqData,4,",
          "1833: {\"setct-PCertResTBS\",\"setct-PCertResTBS\",NID_setct_PCertResTBS,4,",
          "1835: {\"setct-BatchAdminReqData\",\"setct-BatchAdminReqData\",",
          "1837: {\"setct-BatchAdminResData\",\"setct-BatchAdminResData\",",
          "1839: {\"setct-CardCInitResTBS\",\"setct-CardCInitResTBS\",",
          "1841: {\"setct-MeAqCInitResTBS\",\"setct-MeAqCInitResTBS\",",
          "1843: {\"setct-RegFormResTBS\",\"setct-RegFormResTBS\",NID_setct_RegFormResTBS,",
          "1845: {\"setct-CertReqData\",\"setct-CertReqData\",NID_setct_CertReqData,4,",
          "1847: {\"setct-CertReqTBS\",\"setct-CertReqTBS\",NID_setct_CertReqTBS,4,",
          "1849: {\"setct-CertResData\",\"setct-CertResData\",NID_setct_CertResData,4,",
          "1851: {\"setct-CertInqReqTBS\",\"setct-CertInqReqTBS\",NID_setct_CertInqReqTBS,",
          "1853: {\"setct-ErrorTBS\",\"setct-ErrorTBS\",NID_setct_ErrorTBS,4,",
          "1855: {\"setct-PIDualSignedTBE\",\"setct-PIDualSignedTBE\",",
          "1857: {\"setct-PIUnsignedTBE\",\"setct-PIUnsignedTBE\",NID_setct_PIUnsignedTBE,",
          "1859: {\"setct-AuthReqTBE\",\"setct-AuthReqTBE\",NID_setct_AuthReqTBE,4,",
          "1861: {\"setct-AuthResTBE\",\"setct-AuthResTBE\",NID_setct_AuthResTBE,4,",
          "1863: {\"setct-AuthResTBEX\",\"setct-AuthResTBEX\",NID_setct_AuthResTBEX,4,",
          "1865: {\"setct-AuthTokenTBE\",\"setct-AuthTokenTBE\",NID_setct_AuthTokenTBE,4,",
          "1867: {\"setct-CapTokenTBE\",\"setct-CapTokenTBE\",NID_setct_CapTokenTBE,4,",
          "1869: {\"setct-CapTokenTBEX\",\"setct-CapTokenTBEX\",NID_setct_CapTokenTBEX,4,",
          "1871: {\"setct-AcqCardCodeMsgTBE\",\"setct-AcqCardCodeMsgTBE\",",
          "1873: {\"setct-AuthRevReqTBE\",\"setct-AuthRevReqTBE\",NID_setct_AuthRevReqTBE,",
          "1875: {\"setct-AuthRevResTBE\",\"setct-AuthRevResTBE\",NID_setct_AuthRevResTBE,",
          "1877: {\"setct-AuthRevResTBEB\",\"setct-AuthRevResTBEB\",",
          "1879: {\"setct-CapReqTBE\",\"setct-CapReqTBE\",NID_setct_CapReqTBE,4,",
          "1881: {\"setct-CapReqTBEX\",\"setct-CapReqTBEX\",NID_setct_CapReqTBEX,4,",
          "1883: {\"setct-CapResTBE\",\"setct-CapResTBE\",NID_setct_CapResTBE,4,",
          "1885: {\"setct-CapRevReqTBE\",\"setct-CapRevReqTBE\",NID_setct_CapRevReqTBE,4,",
          "1887: {\"setct-CapRevReqTBEX\",\"setct-CapRevReqTBEX\",NID_setct_CapRevReqTBEX,",
          "1889: {\"setct-CapRevResTBE\",\"setct-CapRevResTBE\",NID_setct_CapRevResTBE,4,",
          "1891: {\"setct-CredReqTBE\",\"setct-CredReqTBE\",NID_setct_CredReqTBE,4,",
          "1893: {\"setct-CredReqTBEX\",\"setct-CredReqTBEX\",NID_setct_CredReqTBEX,4,",
          "1895: {\"setct-CredResTBE\",\"setct-CredResTBE\",NID_setct_CredResTBE,4,",
          "1897: {\"setct-CredRevReqTBE\",\"setct-CredRevReqTBE\",NID_setct_CredRevReqTBE,",
          "1899: {\"setct-CredRevReqTBEX\",\"setct-CredRevReqTBEX\",",
          "1901: {\"setct-CredRevResTBE\",\"setct-CredRevResTBE\",NID_setct_CredRevResTBE,",
          "1903: {\"setct-BatchAdminReqTBE\",\"setct-BatchAdminReqTBE\",",
          "1905: {\"setct-BatchAdminResTBE\",\"setct-BatchAdminResTBE\",",
          "1907: {\"setct-RegFormReqTBE\",\"setct-RegFormReqTBE\",NID_setct_RegFormReqTBE,",
          "1909: {\"setct-CertReqTBE\",\"setct-CertReqTBE\",NID_setct_CertReqTBE,4,",
          "1911: {\"setct-CertReqTBEX\",\"setct-CertReqTBEX\",NID_setct_CertReqTBEX,4,",
          "1913: {\"setct-CertResTBE\",\"setct-CertResTBE\",NID_setct_CertResTBE,4,",
          "1915: {\"setct-CRLNotificationTBS\",\"setct-CRLNotificationTBS\",",
          "1917: {\"setct-CRLNotificationResTBS\",\"setct-CRLNotificationResTBS\",",
          "1919: {\"setct-BCIDistributionTBS\",\"setct-BCIDistributionTBS\",",
          "1921: {\"setext-genCrypt\",\"generic cryptogram\",NID_setext_genCrypt,4,",
          "1923: {\"setext-miAuth\",\"merchant initiated auth\",NID_setext_miAuth,4,",
          "1925: {\"setext-pinSecure\",\"setext-pinSecure\",NID_setext_pinSecure,4,",
          "1929: {\"setext-cv\",\"additional verification\",NID_setext_cv,4,",
          "1931: {\"set-policy-root\",\"set-policy-root\",NID_set_policy_root,4,",
          "1933: {\"setCext-hashedRoot\",\"setCext-hashedRoot\",NID_setCext_hashedRoot,4,",
          "1935: {\"setCext-certType\",\"setCext-certType\",NID_setCext_certType,4,",
          "1937: {\"setCext-merchData\",\"setCext-merchData\",NID_setCext_merchData,4,",
          "1939: {\"setCext-cCertRequired\",\"setCext-cCertRequired\",",
          "1941: {\"setCext-tunneling\",\"setCext-tunneling\",NID_setCext_tunneling,4,",
          "1943: {\"setCext-setExt\",\"setCext-setExt\",NID_setCext_setExt,4,",
          "1945: {\"setCext-setQualf\",\"setCext-setQualf\",NID_setCext_setQualf,4,",
          "1947: {\"setCext-PGWYcapabilities\",\"setCext-PGWYcapabilities\",",
          "1949: {\"setCext-TokenIdentifier\",\"setCext-TokenIdentifier\",",
          "1951: {\"setCext-Track2Data\",\"setCext-Track2Data\",NID_setCext_Track2Data,4,",
          "1953: {\"setCext-TokenType\",\"setCext-TokenType\",NID_setCext_TokenType,4,",
          "1955: {\"setCext-IssuerCapabilities\",\"setCext-IssuerCapabilities\",",
          "1958: {\"setAttr-PGWYcap\",\"payment gateway capabilities\",NID_setAttr_PGWYcap,",
          "1960: {\"setAttr-TokenType\",\"setAttr-TokenType\",NID_setAttr_TokenType,4,",
          "1962: {\"setAttr-IssCap\",\"issuer capabilities\",NID_setAttr_IssCap,4,",
          "1964: {\"set-rootKeyThumb\",\"set-rootKeyThumb\",NID_set_rootKeyThumb,5,",
          "1967: {\"setAttr-Token-EMV\",\"setAttr-Token-EMV\",NID_setAttr_Token_EMV,5,",
          "1969: {\"setAttr-Token-B0Prime\",\"setAttr-Token-B0Prime\",",
          "1971: {\"setAttr-IssCap-CVM\",\"setAttr-IssCap-CVM\",NID_setAttr_IssCap_CVM,5,",
          "1973: {\"setAttr-IssCap-T2\",\"setAttr-IssCap-T2\",NID_setAttr_IssCap_T2,5,",
          "1975: {\"setAttr-IssCap-Sig\",\"setAttr-IssCap-Sig\",NID_setAttr_IssCap_Sig,5,",
          "1977: {\"setAttr-GenCryptgrm\",\"generate cryptogram\",NID_setAttr_GenCryptgrm,",
          "1979: {\"setAttr-T2Enc\",\"encrypted track 2\",NID_setAttr_T2Enc,6,",
          "1981: {\"setAttr-T2cleartxt\",\"cleartext track 2\",NID_setAttr_T2cleartxt,6,",
          "1983: {\"setAttr-TokICCsig\",\"ICC or token signature\",NID_setAttr_TokICCsig,6,",
          "1985: {\"setAttr-SecDevSig\",\"secure device signature\",NID_setAttr_SecDevSig,",
          "1987: {\"set-brand-IATA-ATA\",\"set-brand-IATA-ATA\",NID_set_brand_IATA_ATA,4,",
          "1989: {\"set-brand-Diners\",\"set-brand-Diners\",NID_set_brand_Diners,4,",
          "1991: {\"set-brand-AmericanExpress\",\"set-brand-AmericanExpress\",",
          "1994: {\"set-brand-Visa\",\"set-brand-Visa\",NID_set_brand_Visa,4,",
          "1996: {\"set-brand-MasterCard\",\"set-brand-MasterCard\",",
          "1998: {\"set-brand-Novus\",\"set-brand-Novus\",NID_set_brand_Novus,5,",
          "2001: {\"rsaOAEPEncryptionSET\",\"rsaOAEPEncryptionSET\",",
          "2003: {\"ITU-T\",\"itu-t\",NID_itu_t,0,NULL,0},",
          "2004: {\"JOINT-ISO-ITU-T\",\"joint-iso-itu-t\",NID_joint_iso_itu_t,0,NULL,0},",
          "2005: {\"international-organizations\",\"International Organizations\",",
          "2007: {\"msSmartcardLogin\",\"Microsoft Smartcardlogin\",NID_ms_smartcard_login,",
          "2009: {\"msUPN\",\"Microsoft Universal Principal Name\",NID_ms_upn,10,",
          "2011: {\"AES-128-CFB1\",\"aes-128-cfb1\",NID_aes_128_cfb1,0,NULL,0},",
          "2012: {\"AES-192-CFB1\",\"aes-192-cfb1\",NID_aes_192_cfb1,0,NULL,0},",
          "2013: {\"AES-256-CFB1\",\"aes-256-cfb1\",NID_aes_256_cfb1,0,NULL,0},",
          "",
          "[Removed Lines]",
          "1137: {\"RLE\",\"run length compression\",NID_rle_compression,6,&(lvalues[626]),0},",
          "1138: {\"ZLIB\",\"zlib compression\",NID_zlib_compression,11,&(lvalues[632]),0},",
          "1140:  &(lvalues[643]),0},",
          "1141: {\"PKIX\",\"PKIX\",NID_id_pkix,6,&(lvalues[646]),0},",
          "1142: {\"id-kp\",\"id-kp\",NID_id_kp,7,&(lvalues[652]),0},",
          "1144:  &(lvalues[659]),0},",
          "1146:  &(lvalues[667]),0},",
          "1147: {\"codeSigning\",\"Code Signing\",NID_code_sign,8,&(lvalues[675]),0},",
          "1149:  &(lvalues[683]),0},",
          "1150: {\"timeStamping\",\"Time Stamping\",NID_time_stamp,8,&(lvalues[691]),0},",
          "1152:  &(lvalues[699]),0},",
          "1154:  &(lvalues[709]),0},",
          "1156:  &(lvalues[719]),0},",
          "1157: {\"msSGC\",\"Microsoft Server Gated Crypto\",NID_ms_sgc,10,&(lvalues[729]),0},",
          "1159:  &(lvalues[739]),0},",
          "1160: {\"nsSGC\",\"Netscape Server Gated Crypto\",NID_ns_sgc,9,&(lvalues[749]),0},",
          "1162:  &(lvalues[758]),0},",
          "1163: {\"CRLReason\",\"X509v3 CRL Reason Code\",NID_crl_reason,3,&(lvalues[761]),0},",
          "1165:  &(lvalues[764]),0},",
          "1166: {\"SXNetID\",\"Strong Extranet ID\",NID_sxnet,5,&(lvalues[767]),0},",
          "1168:  NID_pbe_WithSHA1And128BitRC4,10,&(lvalues[772]),0},",
          "1170:  NID_pbe_WithSHA1And40BitRC4,10,&(lvalues[782]),0},",
          "1172:  NID_pbe_WithSHA1And3_Key_TripleDES_CBC,10,&(lvalues[792]),0},",
          "1174:  NID_pbe_WithSHA1And2_Key_TripleDES_CBC,10,&(lvalues[802]),0},",
          "1176:  NID_pbe_WithSHA1And128BitRC2_CBC,10,&(lvalues[812]),0},",
          "1178:  NID_pbe_WithSHA1And40BitRC2_CBC,10,&(lvalues[822]),0},",
          "1179: {\"keyBag\",\"keyBag\",NID_keyBag,11,&(lvalues[832]),0},",
          "1181:  11,&(lvalues[843]),0},",
          "1182: {\"certBag\",\"certBag\",NID_certBag,11,&(lvalues[854]),0},",
          "1183: {\"crlBag\",\"crlBag\",NID_crlBag,11,&(lvalues[865]),0},",
          "1184: {\"secretBag\",\"secretBag\",NID_secretBag,11,&(lvalues[876]),0},",
          "1186:  &(lvalues[887]),0},",
          "1187: {\"friendlyName\",\"friendlyName\",NID_friendlyName,9,&(lvalues[898]),0},",
          "1188: {\"localKeyID\",\"localKeyID\",NID_localKeyID,9,&(lvalues[907]),0},",
          "1190:  &(lvalues[916]),0},",
          "1192:  &(lvalues[926]),0},",
          "1193: {\"x509Crl\",\"x509Crl\",NID_x509Crl,10,&(lvalues[936]),0},",
          "1194: {\"PBES2\",\"PBES2\",NID_pbes2,9,&(lvalues[946]),0},",
          "1195: {\"PBMAC1\",\"PBMAC1\",NID_pbmac1,9,&(lvalues[955]),0},",
          "1196: {\"hmacWithSHA1\",\"hmacWithSHA1\",NID_hmacWithSHA1,8,&(lvalues[964]),0},",
          "1197: {\"id-qt-cps\",\"Policy Qualifier CPS\",NID_id_qt_cps,8,&(lvalues[972]),0},",
          "1199:  &(lvalues[980]),0},",
          "1202:  &(lvalues[988]),0},",
          "1204:  &(lvalues[997]),0},",
          "1206:  &(lvalues[1006]),0},",
          "1208:  &(lvalues[1015]),0},",
          "1210:  &(lvalues[1024]),0},",
          "1211: {\"extReq\",\"Extension Request\",NID_ext_req,9,&(lvalues[1034]),0},",
          "1212: {\"name\",\"name\",NID_name,3,&(lvalues[1043]),0},",
          "1213: {\"dnQualifier\",\"dnQualifier\",NID_dnQualifier,3,&(lvalues[1046]),0},",
          "1214: {\"id-pe\",\"id-pe\",NID_id_pe,7,&(lvalues[1049]),0},",
          "1215: {\"id-ad\",\"id-ad\",NID_id_ad,7,&(lvalues[1056]),0},",
          "1217:  8,&(lvalues[1063]),0},",
          "1218: {\"OCSP\",\"OCSP\",NID_ad_OCSP,8,&(lvalues[1071]),0},",
          "1219: {\"caIssuers\",\"CA Issuers\",NID_ad_ca_issuers,8,&(lvalues[1079]),0},",
          "1220: {\"OCSPSigning\",\"OCSP Signing\",NID_OCSP_sign,8,&(lvalues[1087]),0},",
          "1222: {\"member-body\",\"ISO Member Body\",NID_member_body,1,&(lvalues[1095]),0},",
          "1223: {\"ISO-US\",\"ISO US Member Body\",NID_ISO_US,3,&(lvalues[1096]),0},",
          "1224: {\"X9-57\",\"X9.57\",NID_X9_57,5,&(lvalues[1099]),0},",
          "1225: {\"X9cm\",\"X9.57 CM ?\",NID_X9cm,6,&(lvalues[1104]),0},",
          "1226: {\"pkcs1\",\"pkcs1\",NID_pkcs1,8,&(lvalues[1110]),0},",
          "1227: {\"pkcs5\",\"pkcs5\",NID_pkcs5,8,&(lvalues[1118]),0},",
          "1228: {\"SMIME\",\"S/MIME\",NID_SMIME,9,&(lvalues[1126]),0},",
          "1229: {\"id-smime-mod\",\"id-smime-mod\",NID_id_smime_mod,10,&(lvalues[1135]),0},",
          "1230: {\"id-smime-ct\",\"id-smime-ct\",NID_id_smime_ct,10,&(lvalues[1145]),0},",
          "1231: {\"id-smime-aa\",\"id-smime-aa\",NID_id_smime_aa,10,&(lvalues[1155]),0},",
          "1232: {\"id-smime-alg\",\"id-smime-alg\",NID_id_smime_alg,10,&(lvalues[1165]),0},",
          "1233: {\"id-smime-cd\",\"id-smime-cd\",NID_id_smime_cd,10,&(lvalues[1175]),0},",
          "1234: {\"id-smime-spq\",\"id-smime-spq\",NID_id_smime_spq,10,&(lvalues[1185]),0},",
          "1235: {\"id-smime-cti\",\"id-smime-cti\",NID_id_smime_cti,10,&(lvalues[1195]),0},",
          "1237:  &(lvalues[1205]),0},",
          "1239:  &(lvalues[1216]),0},",
          "1241:  &(lvalues[1227]),0},",
          "1243:  11,&(lvalues[1238]),0},",
          "1245:  NID_id_smime_mod_ets_eSignature_88,11,&(lvalues[1249]),0},",
          "1247:  NID_id_smime_mod_ets_eSignature_97,11,&(lvalues[1260]),0},",
          "1249:  NID_id_smime_mod_ets_eSigPolicy_88,11,&(lvalues[1271]),0},",
          "1251:  NID_id_smime_mod_ets_eSigPolicy_97,11,&(lvalues[1282]),0},",
          "1253:  11,&(lvalues[1293]),0},",
          "1255:  NID_id_smime_ct_authData,11,&(lvalues[1304]),0},",
          "1257:  NID_id_smime_ct_publishCert,11,&(lvalues[1315]),0},",
          "1259:  11,&(lvalues[1326]),0},",
          "1261:  11,&(lvalues[1337]),0},",
          "1263:  NID_id_smime_ct_contentInfo,11,&(lvalues[1348]),0},",
          "1265:  NID_id_smime_ct_DVCSRequestData,11,&(lvalues[1359]),0},",
          "1267:  NID_id_smime_ct_DVCSResponseData,11,&(lvalues[1370]),0},",
          "1269:  NID_id_smime_aa_receiptRequest,11,&(lvalues[1381]),0},",
          "1271:  NID_id_smime_aa_securityLabel,11,&(lvalues[1392]),0},",
          "1273:  NID_id_smime_aa_mlExpandHistory,11,&(lvalues[1403]),0},",
          "1275:  NID_id_smime_aa_contentHint,11,&(lvalues[1414]),0},",
          "1277:  NID_id_smime_aa_msgSigDigest,11,&(lvalues[1425]),0},",
          "1279:  NID_id_smime_aa_encapContentType,11,&(lvalues[1436]),0},",
          "1281:  NID_id_smime_aa_contentIdentifier,11,&(lvalues[1447]),0},",
          "1283:  NID_id_smime_aa_macValue,11,&(lvalues[1458]),0},",
          "1285:  NID_id_smime_aa_equivalentLabels,11,&(lvalues[1469]),0},",
          "1287:  NID_id_smime_aa_contentReference,11,&(lvalues[1480]),0},",
          "1289:  NID_id_smime_aa_encrypKeyPref,11,&(lvalues[1491]),0},",
          "1291:  NID_id_smime_aa_signingCertificate,11,&(lvalues[1502]),0},",
          "1293:  NID_id_smime_aa_smimeEncryptCerts,11,&(lvalues[1513]),0},",
          "1295:  NID_id_smime_aa_timeStampToken,11,&(lvalues[1524]),0},",
          "1297:  NID_id_smime_aa_ets_sigPolicyId,11,&(lvalues[1535]),0},",
          "1299:  NID_id_smime_aa_ets_commitmentType,11,&(lvalues[1546]),0},",
          "1301:  NID_id_smime_aa_ets_signerLocation,11,&(lvalues[1557]),0},",
          "1303:  NID_id_smime_aa_ets_signerAttr,11,&(lvalues[1568]),0},",
          "1305:  NID_id_smime_aa_ets_otherSigCert,11,&(lvalues[1579]),0},",
          "1308:  NID_id_smime_aa_ets_contentTimestamp,11,&(lvalues[1590]),0},",
          "1310:  NID_id_smime_aa_ets_CertificateRefs,11,&(lvalues[1601]),0},",
          "1312:  NID_id_smime_aa_ets_RevocationRefs,11,&(lvalues[1612]),0},",
          "1314:  NID_id_smime_aa_ets_certValues,11,&(lvalues[1623]),0},",
          "1317:  NID_id_smime_aa_ets_revocationValues,11,&(lvalues[1634]),0},",
          "1319:  NID_id_smime_aa_ets_escTimeStamp,11,&(lvalues[1645]),0},",
          "1322:  NID_id_smime_aa_ets_certCRLTimestamp,11,&(lvalues[1656]),0},",
          "1325:  NID_id_smime_aa_ets_archiveTimeStamp,11,&(lvalues[1667]),0},",
          "1327:  NID_id_smime_aa_signatureType,11,&(lvalues[1678]),0},",
          "1329:  NID_id_smime_aa_dvcs_dvc,11,&(lvalues[1689]),0},",
          "1331:  NID_id_smime_alg_ESDHwith3DES,11,&(lvalues[1700]),0},",
          "1333:  NID_id_smime_alg_ESDHwithRC2,11,&(lvalues[1711]),0},",
          "1335:  NID_id_smime_alg_3DESwrap,11,&(lvalues[1722]),0},",
          "1337:  NID_id_smime_alg_RC2wrap,11,&(lvalues[1733]),0},",
          "1339:  &(lvalues[1744]),0},",
          "1341:  NID_id_smime_alg_CMS3DESwrap,11,&(lvalues[1755]),0},",
          "1343:  NID_id_smime_alg_CMSRC2wrap,11,&(lvalues[1766]),0},",
          "1345:  &(lvalues[1777]),0},",
          "1347:  NID_id_smime_spq_ets_sqt_uri,11,&(lvalues[1788]),0},",
          "1349:  NID_id_smime_spq_ets_sqt_unotice,11,&(lvalues[1799]),0},",
          "1351:  NID_id_smime_cti_ets_proofOfOrigin,11,&(lvalues[1810]),0},",
          "1353:  NID_id_smime_cti_ets_proofOfReceipt,11,&(lvalues[1821]),0},",
          "1356:  NID_id_smime_cti_ets_proofOfDelivery,11,&(lvalues[1832]),0},",
          "1358:  NID_id_smime_cti_ets_proofOfSender,11,&(lvalues[1843]),0},",
          "1361:  NID_id_smime_cti_ets_proofOfApproval,11,&(lvalues[1854]),0},",
          "1364:  NID_id_smime_cti_ets_proofOfCreation,11,&(lvalues[1865]),0},",
          "1365: {\"MD4\",\"md4\",NID_md4,8,&(lvalues[1876]),0},",
          "1366: {\"id-pkix-mod\",\"id-pkix-mod\",NID_id_pkix_mod,7,&(lvalues[1884]),0},",
          "1367: {\"id-qt\",\"id-qt\",NID_id_qt,7,&(lvalues[1891]),0},",
          "1368: {\"id-it\",\"id-it\",NID_id_it,7,&(lvalues[1898]),0},",
          "1369: {\"id-pkip\",\"id-pkip\",NID_id_pkip,7,&(lvalues[1905]),0},",
          "1370: {\"id-alg\",\"id-alg\",NID_id_alg,7,&(lvalues[1912]),0},",
          "1371: {\"id-cmc\",\"id-cmc\",NID_id_cmc,7,&(lvalues[1919]),0},",
          "1372: {\"id-on\",\"id-on\",NID_id_on,7,&(lvalues[1926]),0},",
          "1373: {\"id-pda\",\"id-pda\",NID_id_pda,7,&(lvalues[1933]),0},",
          "1374: {\"id-aca\",\"id-aca\",NID_id_aca,7,&(lvalues[1940]),0},",
          "1375: {\"id-qcs\",\"id-qcs\",NID_id_qcs,7,&(lvalues[1947]),0},",
          "1376: {\"id-cct\",\"id-cct\",NID_id_cct,7,&(lvalues[1954]),0},",
          "1378:  NID_id_pkix1_explicit_88,8,&(lvalues[1961]),0},",
          "1380:  NID_id_pkix1_implicit_88,8,&(lvalues[1969]),0},",
          "1382:  NID_id_pkix1_explicit_93,8,&(lvalues[1977]),0},",
          "1384:  NID_id_pkix1_implicit_93,8,&(lvalues[1985]),0},",
          "1385: {\"id-mod-crmf\",\"id-mod-crmf\",NID_id_mod_crmf,8,&(lvalues[1993]),0},",
          "1386: {\"id-mod-cmc\",\"id-mod-cmc\",NID_id_mod_cmc,8,&(lvalues[2001]),0},",
          "1388:  NID_id_mod_kea_profile_88,8,&(lvalues[2009]),0},",
          "1390:  NID_id_mod_kea_profile_93,8,&(lvalues[2017]),0},",
          "1391: {\"id-mod-cmp\",\"id-mod-cmp\",NID_id_mod_cmp,8,&(lvalues[2025]),0},",
          "1393:  NID_id_mod_qualified_cert_88,8,&(lvalues[2033]),0},",
          "1395:  NID_id_mod_qualified_cert_93,8,&(lvalues[2041]),0},",
          "1397:  NID_id_mod_attribute_cert,8,&(lvalues[2049]),0},",
          "1399:  NID_id_mod_timestamp_protocol,8,&(lvalues[2057]),0},",
          "1400: {\"id-mod-ocsp\",\"id-mod-ocsp\",NID_id_mod_ocsp,8,&(lvalues[2065]),0},",
          "1401: {\"id-mod-dvcs\",\"id-mod-dvcs\",NID_id_mod_dvcs,8,&(lvalues[2073]),0},",
          "1403:  &(lvalues[2081]),0},",
          "1404: {\"biometricInfo\",\"Biometric Info\",NID_biometricInfo,8,&(lvalues[2089]),0},",
          "1405: {\"qcStatements\",\"qcStatements\",NID_qcStatements,8,&(lvalues[2097]),0},",
          "1407:  &(lvalues[2105]),0},",
          "1408: {\"ac-targeting\",\"ac-targeting\",NID_ac_targeting,8,&(lvalues[2113]),0},",
          "1409: {\"aaControls\",\"aaControls\",NID_aaControls,8,&(lvalues[2121]),0},",
          "1411:  &(lvalues[2129]),0},",
          "1413:  NID_sbgp_autonomousSysNum,8,&(lvalues[2137]),0},",
          "1415:  NID_sbgp_routerIdentifier,8,&(lvalues[2145]),0},",
          "1416: {\"textNotice\",\"textNotice\",NID_textNotice,8,&(lvalues[2153]),0},",
          "1418:  &(lvalues[2161]),0},",
          "1419: {\"ipsecTunnel\",\"IPSec Tunnel\",NID_ipsecTunnel,8,&(lvalues[2169]),0},",
          "1420: {\"ipsecUser\",\"IPSec User\",NID_ipsecUser,8,&(lvalues[2177]),0},",
          "1421: {\"DVCS\",\"dvcs\",NID_dvcs,8,&(lvalues[2185]),0},",
          "1423:  8,&(lvalues[2193]),0},",
          "1425:  NID_id_it_signKeyPairTypes,8,&(lvalues[2201]),0},",
          "1427:  NID_id_it_encKeyPairTypes,8,&(lvalues[2209]),0},",
          "1429:  NID_id_it_preferredSymmAlg,8,&(lvalues[2217]),0},",
          "1431:  NID_id_it_caKeyUpdateInfo,8,&(lvalues[2225]),0},",
          "1433:  &(lvalues[2233]),0},",
          "1435:  NID_id_it_unsupportedOIDs,8,&(lvalues[2241]),0},",
          "1437:  NID_id_it_subscriptionRequest,8,&(lvalues[2249]),0},",
          "1439:  NID_id_it_subscriptionResponse,8,&(lvalues[2257]),0},",
          "1441:  NID_id_it_keyPairParamReq,8,&(lvalues[2265]),0},",
          "1443:  NID_id_it_keyPairParamRep,8,&(lvalues[2273]),0},",
          "1445:  8,&(lvalues[2281]),0},",
          "1447:  NID_id_it_implicitConfirm,8,&(lvalues[2289]),0},",
          "1449:  NID_id_it_confirmWaitTime,8,&(lvalues[2297]),0},",
          "1451:  NID_id_it_origPKIMessage,8,&(lvalues[2305]),0},",
          "1452: {\"id-regCtrl\",\"id-regCtrl\",NID_id_regCtrl,8,&(lvalues[2313]),0},",
          "1453: {\"id-regInfo\",\"id-regInfo\",NID_id_regInfo,8,&(lvalues[2321]),0},",
          "1455:  9,&(lvalues[2329]),0},",
          "1457:  NID_id_regCtrl_authenticator,9,&(lvalues[2338]),0},",
          "1459:  NID_id_regCtrl_pkiPublicationInfo,9,&(lvalues[2347]),0},",
          "1461:  NID_id_regCtrl_pkiArchiveOptions,9,&(lvalues[2356]),0},",
          "1463:  NID_id_regCtrl_oldCertID,9,&(lvalues[2365]),0},",
          "1465:  NID_id_regCtrl_protocolEncrKey,9,&(lvalues[2374]),0},",
          "1467:  NID_id_regInfo_utf8Pairs,9,&(lvalues[2383]),0},",
          "1469:  &(lvalues[2392]),0},",
          "1470: {\"id-alg-des40\",\"id-alg-des40\",NID_id_alg_des40,8,&(lvalues[2401]),0},",
          "1472:  &(lvalues[2409]),0},",
          "1474:  NID_id_alg_dh_sig_hmac_sha1,8,&(lvalues[2417]),0},",
          "1475: {\"id-alg-dh-pop\",\"id-alg-dh-pop\",NID_id_alg_dh_pop,8,&(lvalues[2425]),0},",
          "1477:  &(lvalues[2433]),0},",
          "1479:  NID_id_cmc_identification,8,&(lvalues[2441]),0},",
          "1481:  NID_id_cmc_identityProof,8,&(lvalues[2449]),0},",
          "1483:  &(lvalues[2457]),0},",
          "1485:  NID_id_cmc_transactionId,8,&(lvalues[2465]),0},",
          "1487:  &(lvalues[2473]),0},",
          "1489:  NID_id_cmc_recipientNonce,8,&(lvalues[2481]),0},",
          "1491:  NID_id_cmc_addExtensions,8,&(lvalues[2489]),0},",
          "1493:  8,&(lvalues[2497]),0},",
          "1495:  8,&(lvalues[2505]),0},",
          "1497:  NID_id_cmc_lraPOPWitness,8,&(lvalues[2513]),0},",
          "1499:  &(lvalues[2521]),0},",
          "1500: {\"id-cmc-getCRL\",\"id-cmc-getCRL\",NID_id_cmc_getCRL,8,&(lvalues[2529]),0},",
          "1502:  NID_id_cmc_revokeRequest,8,&(lvalues[2537]),0},",
          "1504:  &(lvalues[2545]),0},",
          "1506:  8,&(lvalues[2553]),0},",
          "1508:  8,&(lvalues[2561]),0},",
          "1510:  NID_id_cmc_popLinkRandom,8,&(lvalues[2569]),0},",
          "1512:  NID_id_cmc_popLinkWitness,8,&(lvalues[2577]),0},",
          "1514:  NID_id_cmc_confirmCertAcceptance,8,&(lvalues[2585]),0},",
          "1516:  &(lvalues[2593]),0},",
          "1518:  &(lvalues[2601]),0},",
          "1520:  8,&(lvalues[2609]),0},",
          "1522: {\"id-pda-gender\",\"id-pda-gender\",NID_id_pda_gender,8,&(lvalues[2617]),0},",
          "1524:  NID_id_pda_countryOfCitizenship,8,&(lvalues[2625]),0},",
          "1526:  NID_id_pda_countryOfResidence,8,&(lvalues[2633]),0},",
          "1528:  NID_id_aca_authenticationInfo,8,&(lvalues[2641]),0},",
          "1530:  NID_id_aca_accessIdentity,8,&(lvalues[2649]),0},",
          "1532:  NID_id_aca_chargingIdentity,8,&(lvalues[2657]),0},",
          "1533: {\"id-aca-group\",\"id-aca-group\",NID_id_aca_group,8,&(lvalues[2665]),0},",
          "1534: {\"id-aca-role\",\"id-aca-role\",NID_id_aca_role,8,&(lvalues[2673]),0},",
          "1536:  NID_id_qcs_pkixQCSyntax_v1,8,&(lvalues[2681]),0},",
          "1537: {\"id-cct-crs\",\"id-cct-crs\",NID_id_cct_crs,8,&(lvalues[2689]),0},",
          "1539:  &(lvalues[2697]),0},",
          "1541:  &(lvalues[2705]),0},",
          "1543:  &(lvalues[2713]),0},",
          "1544: {\"AD_DVCS\",\"ad dvcs\",NID_ad_dvcs,8,&(lvalues[2721]),0},",
          "1546:  &(lvalues[2729]),0},",
          "1547: {\"Nonce\",\"OCSP Nonce\",NID_id_pkix_OCSP_Nonce,9,&(lvalues[2738]),0},",
          "1548: {\"CrlID\",\"OCSP CRL ID\",NID_id_pkix_OCSP_CrlID,9,&(lvalues[2747]),0},",
          "1550:  NID_id_pkix_OCSP_acceptableResponses,9,&(lvalues[2756]),0},",
          "1551: {\"noCheck\",\"OCSP No Check\",NID_id_pkix_OCSP_noCheck,9,&(lvalues[2765]),0},",
          "1553:  9,&(lvalues[2774]),0},",
          "1555:  NID_id_pkix_OCSP_serviceLocator,9,&(lvalues[2783]),0},",
          "1557:  NID_id_pkix_OCSP_extendedStatus,9,&(lvalues[2792]),0},",
          "1558: {\"valid\",\"valid\",NID_id_pkix_OCSP_valid,9,&(lvalues[2801]),0},",
          "1559: {\"path\",\"path\",NID_id_pkix_OCSP_path,9,&(lvalues[2810]),0},",
          "1561:  &(lvalues[2819]),0},",
          "1562: {\"algorithm\",\"algorithm\",NID_algorithm,4,&(lvalues[2828]),0},",
          "1563: {\"rsaSignature\",\"rsaSignature\",NID_rsaSignature,5,&(lvalues[2832]),0},",
          "1565:  NID_X500algorithms,2,&(lvalues[2837]),0},",
          "1566: {\"ORG\",\"org\",NID_org,1,&(lvalues[2839]),0},",
          "1567: {\"DOD\",\"dod\",NID_dod,2,&(lvalues[2840]),0},",
          "1568: {\"IANA\",\"iana\",NID_iana,3,&(lvalues[2842]),0},",
          "1569: {\"directory\",\"Directory\",NID_Directory,4,&(lvalues[2845]),0},",
          "1570: {\"mgmt\",\"Management\",NID_Management,4,&(lvalues[2849]),0},",
          "1571: {\"experimental\",\"Experimental\",NID_Experimental,4,&(lvalues[2853]),0},",
          "1572: {\"private\",\"Private\",NID_Private,4,&(lvalues[2857]),0},",
          "1573: {\"security\",\"Security\",NID_Security,4,&(lvalues[2861]),0},",
          "1574: {\"snmpv2\",\"SNMPv2\",NID_SNMPv2,4,&(lvalues[2865]),0},",
          "1575: {\"Mail\",\"Mail\",NID_Mail,4,&(lvalues[2869]),0},",
          "1576: {\"enterprises\",\"Enterprises\",NID_Enterprises,5,&(lvalues[2873]),0},",
          "1577: {\"dcobject\",\"dcObject\",NID_dcObject,9,&(lvalues[2878]),0},",
          "1578: {\"DC\",\"domainComponent\",NID_domainComponent,10,&(lvalues[2887]),0},",
          "1579: {\"domain\",\"Domain\",NID_Domain,10,&(lvalues[2897]),0},",
          "1582:  NID_selected_attribute_types,3,&(lvalues[2907]),0},",
          "1583: {\"clearance\",\"clearance\",NID_clearance,4,&(lvalues[2910]),0},",
          "1585:  &(lvalues[2914]),0},",
          "1586: {\"ac-proxying\",\"ac-proxying\",NID_ac_proxying,8,&(lvalues[2923]),0},",
          "1588:  &(lvalues[2931]),0},",
          "1590:  &(lvalues[2939]),0},",
          "1591: {\"role\",\"role\",NID_role,3,&(lvalues[2947]),0},",
          "1593:  NID_policy_constraints,3,&(lvalues[2950]),0},",
          "1595:  &(lvalues[2953]),0},",
          "1597:  &(lvalues[2956]),0},",
          "1599: {\"ansi-X9-62\",\"ANSI X9.62\",NID_ansi_X9_62,5,&(lvalues[2959]),0},",
          "1600: {\"prime-field\",\"prime-field\",NID_X9_62_prime_field,7,&(lvalues[2964]),0},",
          "1602:  NID_X9_62_characteristic_two_field,7,&(lvalues[2971]),0},",
          "1604:  &(lvalues[2978]),0},",
          "1605: {\"prime192v1\",\"prime192v1\",NID_X9_62_prime192v1,8,&(lvalues[2985]),0},",
          "1606: {\"prime192v2\",\"prime192v2\",NID_X9_62_prime192v2,8,&(lvalues[2993]),0},",
          "1607: {\"prime192v3\",\"prime192v3\",NID_X9_62_prime192v3,8,&(lvalues[3001]),0},",
          "1608: {\"prime239v1\",\"prime239v1\",NID_X9_62_prime239v1,8,&(lvalues[3009]),0},",
          "1609: {\"prime239v2\",\"prime239v2\",NID_X9_62_prime239v2,8,&(lvalues[3017]),0},",
          "1610: {\"prime239v3\",\"prime239v3\",NID_X9_62_prime239v3,8,&(lvalues[3025]),0},",
          "1611: {\"prime256v1\",\"prime256v1\",NID_X9_62_prime256v1,8,&(lvalues[3033]),0},",
          "1613:  &(lvalues[3041]),0},",
          "1614: {\"CSPName\",\"Microsoft CSP Name\",NID_ms_csp_name,9,&(lvalues[3048]),0},",
          "1615: {\"AES-128-ECB\",\"aes-128-ecb\",NID_aes_128_ecb,9,&(lvalues[3057]),0},",
          "1616: {\"AES-128-CBC\",\"aes-128-cbc\",NID_aes_128_cbc,9,&(lvalues[3066]),0},",
          "1617: {\"AES-128-OFB\",\"aes-128-ofb\",NID_aes_128_ofb128,9,&(lvalues[3075]),0},",
          "1618: {\"AES-128-CFB\",\"aes-128-cfb\",NID_aes_128_cfb128,9,&(lvalues[3084]),0},",
          "1619: {\"AES-192-ECB\",\"aes-192-ecb\",NID_aes_192_ecb,9,&(lvalues[3093]),0},",
          "1620: {\"AES-192-CBC\",\"aes-192-cbc\",NID_aes_192_cbc,9,&(lvalues[3102]),0},",
          "1621: {\"AES-192-OFB\",\"aes-192-ofb\",NID_aes_192_ofb128,9,&(lvalues[3111]),0},",
          "1622: {\"AES-192-CFB\",\"aes-192-cfb\",NID_aes_192_cfb128,9,&(lvalues[3120]),0},",
          "1623: {\"AES-256-ECB\",\"aes-256-ecb\",NID_aes_256_ecb,9,&(lvalues[3129]),0},",
          "1624: {\"AES-256-CBC\",\"aes-256-cbc\",NID_aes_256_cbc,9,&(lvalues[3138]),0},",
          "1625: {\"AES-256-OFB\",\"aes-256-ofb\",NID_aes_256_ofb128,9,&(lvalues[3147]),0},",
          "1626: {\"AES-256-CFB\",\"aes-256-cfb\",NID_aes_256_cfb128,9,&(lvalues[3156]),0},",
          "1628:  NID_hold_instruction_code,3,&(lvalues[3165]),0},",
          "1630:  NID_hold_instruction_none,7,&(lvalues[3168]),0},",
          "1632:  NID_hold_instruction_call_issuer,7,&(lvalues[3175]),0},",
          "1634:  NID_hold_instruction_reject,7,&(lvalues[3182]),0},",
          "1635: {\"data\",\"data\",NID_data,1,&(lvalues[3189]),0},",
          "1636: {\"pss\",\"pss\",NID_pss,3,&(lvalues[3190]),0},",
          "1637: {\"ucl\",\"ucl\",NID_ucl,7,&(lvalues[3193]),0},",
          "1638: {\"pilot\",\"pilot\",NID_pilot,8,&(lvalues[3200]),0},",
          "1640:  &(lvalues[3208]),0},",
          "1642:  NID_pilotAttributeSyntax,9,&(lvalues[3217]),0},",
          "1644:  &(lvalues[3226]),0},",
          "1645: {\"pilotGroups\",\"pilotGroups\",NID_pilotGroups,9,&(lvalues[3235]),0},",
          "1647:  &(lvalues[3244]),0},",
          "1649:  NID_caseIgnoreIA5StringSyntax,10,&(lvalues[3254]),0},",
          "1650: {\"pilotObject\",\"pilotObject\",NID_pilotObject,10,&(lvalues[3264]),0},",
          "1651: {\"pilotPerson\",\"pilotPerson\",NID_pilotPerson,10,&(lvalues[3274]),0},",
          "1652: {\"account\",\"account\",NID_account,10,&(lvalues[3284]),0},",
          "1653: {\"document\",\"document\",NID_document,10,&(lvalues[3294]),0},",
          "1654: {\"room\",\"room\",NID_room,10,&(lvalues[3304]),0},",
          "1656:  &(lvalues[3314]),0},",
          "1658:  &(lvalues[3324]),0},",
          "1659: {\"dNSDomain\",\"dNSDomain\",NID_dNSDomain,10,&(lvalues[3334]),0},",
          "1661:  10,&(lvalues[3344]),0},",
          "1663:  &(lvalues[3354]),0},",
          "1665:  NID_simpleSecurityObject,10,&(lvalues[3364]),0},",
          "1667:  &(lvalues[3374]),0},",
          "1668: {\"pilotDSA\",\"pilotDSA\",NID_pilotDSA,10,&(lvalues[3384]),0},",
          "1670:  10,&(lvalues[3394]),0},",
          "1671: {\"UID\",\"userId\",NID_userId,10,&(lvalues[3404]),0},",
          "1673:  NID_textEncodedORAddress,10,&(lvalues[3414]),0},",
          "1674: {\"mail\",\"rfc822Mailbox\",NID_rfc822Mailbox,10,&(lvalues[3424]),0},",
          "1675: {\"info\",\"info\",NID_info,10,&(lvalues[3434]),0},",
          "1677:  &(lvalues[3444]),0},",
          "1678: {\"roomNumber\",\"roomNumber\",NID_roomNumber,10,&(lvalues[3454]),0},",
          "1679: {\"photo\",\"photo\",NID_photo,10,&(lvalues[3464]),0},",
          "1680: {\"userClass\",\"userClass\",NID_userClass,10,&(lvalues[3474]),0},",
          "1681: {\"host\",\"host\",NID_host,10,&(lvalues[3484]),0},",
          "1682: {\"manager\",\"manager\",NID_manager,10,&(lvalues[3494]),0},",
          "1684:  &(lvalues[3504]),0},",
          "1685: {\"documentTitle\",\"documentTitle\",NID_documentTitle,10,&(lvalues[3514]),0},",
          "1687:  &(lvalues[3524]),0},",
          "1689:  &(lvalues[3534]),0},",
          "1691:  &(lvalues[3544]),0},",
          "1693:  10,&(lvalues[3554]),0},",
          "1694: {\"secretary\",\"secretary\",NID_secretary,10,&(lvalues[3564]),0},",
          "1695: {\"otherMailbox\",\"otherMailbox\",NID_otherMailbox,10,&(lvalues[3574]),0},",
          "1697:  &(lvalues[3584]),0},",
          "1699:  &(lvalues[3594]),0},",
          "1700: {\"aRecord\",\"aRecord\",NID_aRecord,10,&(lvalues[3604]),0},",
          "1702:  NID_pilotAttributeType27,10,&(lvalues[3614]),0},",
          "1703: {\"mXRecord\",\"mXRecord\",NID_mXRecord,10,&(lvalues[3624]),0},",
          "1704: {\"nSRecord\",\"nSRecord\",NID_nSRecord,10,&(lvalues[3634]),0},",
          "1705: {\"sOARecord\",\"sOARecord\",NID_sOARecord,10,&(lvalues[3644]),0},",
          "1706: {\"cNAMERecord\",\"cNAMERecord\",NID_cNAMERecord,10,&(lvalues[3654]),0},",
          "1708:  &(lvalues[3664]),0},",
          "1710:  &(lvalues[3674]),0},",
          "1712:  &(lvalues[3684]),0},",
          "1713: {\"personalTitle\",\"personalTitle\",NID_personalTitle,10,&(lvalues[3694]),0},",
          "1715:  NID_mobileTelephoneNumber,10,&(lvalues[3704]),0},",
          "1717:  NID_pagerTelephoneNumber,10,&(lvalues[3714]),0},",
          "1719:  10,&(lvalues[3724]),0},",
          "1721:  NID_organizationalStatus,10,&(lvalues[3734]),0},",
          "1722: {\"janetMailbox\",\"janetMailbox\",NID_janetMailbox,10,&(lvalues[3744]),0},",
          "1724:  NID_mailPreferenceOption,10,&(lvalues[3754]),0},",
          "1725: {\"buildingName\",\"buildingName\",NID_buildingName,10,&(lvalues[3764]),0},",
          "1726: {\"dSAQuality\",\"dSAQuality\",NID_dSAQuality,10,&(lvalues[3774]),0},",
          "1728:  &(lvalues[3784]),0},",
          "1730:  NID_subtreeMinimumQuality,10,&(lvalues[3794]),0},",
          "1732:  NID_subtreeMaximumQuality,10,&(lvalues[3804]),0},",
          "1734:  &(lvalues[3814]),0},",
          "1735: {\"dITRedirect\",\"dITRedirect\",NID_dITRedirect,10,&(lvalues[3824]),0},",
          "1736: {\"audio\",\"audio\",NID_audio,10,&(lvalues[3834]),0},",
          "1738:  &(lvalues[3844]),0},",
          "1740:  NID_x500UniqueIdentifier,3,&(lvalues[3854]),0},",
          "1741: {\"mime-mhs\",\"MIME MHS\",NID_mime_mhs,5,&(lvalues[3857]),0},",
          "1743:  &(lvalues[3862]),0},",
          "1745:  &(lvalues[3868]),0},",
          "1747:  NID_id_hex_partial_message,7,&(lvalues[3874]),0},",
          "1749:  NID_id_hex_multipart_message,7,&(lvalues[3881]),0},",
          "1751:  3,&(lvalues[3888]),0},",
          "1752: {\"pseudonym\",\"pseudonym\",NID_pseudonym,3,&(lvalues[3891]),0},",
          "1755:  &(lvalues[3894]),0},",
          "1756: {\"set-ctype\",\"content types\",NID_set_ctype,3,&(lvalues[3896]),0},",
          "1757: {\"set-msgExt\",\"message extensions\",NID_set_msgExt,3,&(lvalues[3899]),0},",
          "1758: {\"set-attr\",\"set-attr\",NID_set_attr,3,&(lvalues[3902]),0},",
          "1759: {\"set-policy\",\"set-policy\",NID_set_policy,3,&(lvalues[3905]),0},",
          "1761:  &(lvalues[3908]),0},",
          "1762: {\"set-brand\",\"set-brand\",NID_set_brand,3,&(lvalues[3911]),0},",
          "1763: {\"setct-PANData\",\"setct-PANData\",NID_setct_PANData,4,&(lvalues[3914]),0},",
          "1765:  &(lvalues[3918]),0},",
          "1766: {\"setct-PANOnly\",\"setct-PANOnly\",NID_setct_PANOnly,4,&(lvalues[3922]),0},",
          "1767: {\"setct-OIData\",\"setct-OIData\",NID_setct_OIData,4,&(lvalues[3926]),0},",
          "1768: {\"setct-PI\",\"setct-PI\",NID_setct_PI,4,&(lvalues[3930]),0},",
          "1769: {\"setct-PIData\",\"setct-PIData\",NID_setct_PIData,4,&(lvalues[3934]),0},",
          "1771:  NID_setct_PIDataUnsigned,4,&(lvalues[3938]),0},",
          "1773:  &(lvalues[3942]),0},",
          "1775:  NID_setct_AuthResBaggage,4,&(lvalues[3946]),0},",
          "1777:  NID_setct_AuthRevReqBaggage,4,&(lvalues[3950]),0},",
          "1779:  NID_setct_AuthRevResBaggage,4,&(lvalues[3954]),0},",
          "1781:  &(lvalues[3958]),0},",
          "1783:  &(lvalues[3962]),0},",
          "1784: {\"setct-PI-TBS\",\"setct-PI-TBS\",NID_setct_PI_TBS,4,&(lvalues[3966]),0},",
          "1786:  &(lvalues[3970]),0},",
          "1788:  &(lvalues[3974]),0},",
          "1790:  &(lvalues[3978]),0},",
          "1792:  &(lvalues[3982]),0},",
          "1794:  &(lvalues[3986]),0},",
          "1796:  &(lvalues[3990]),0},",
          "1798:  &(lvalues[3994]),0},",
          "1800:  NID_setct_AcqCardCodeMsg,4,&(lvalues[3998]),0},",
          "1802:  4,&(lvalues[4002]),0},",
          "1804:  NID_setct_AuthRevResData,4,&(lvalues[4006]),0},",
          "1806:  4,&(lvalues[4010]),0},",
          "1808:  &(lvalues[4014]),0},",
          "1810:  &(lvalues[4018]),0},",
          "1812:  &(lvalues[4022]),0},",
          "1814:  &(lvalues[4026]),0},",
          "1816:  4,&(lvalues[4030]),0},",
          "1818:  4,&(lvalues[4034]),0},",
          "1820:  &(lvalues[4038]),0},",
          "1822:  &(lvalues[4042]),0},",
          "1824:  &(lvalues[4046]),0},",
          "1826:  4,&(lvalues[4050]),0},",
          "1828:  NID_setct_CredRevReqTBSX,4,&(lvalues[4054]),0},",
          "1830:  NID_setct_CredRevResData,4,&(lvalues[4058]),0},",
          "1832:  &(lvalues[4062]),0},",
          "1834:  &(lvalues[4066]),0},",
          "1836:  NID_setct_BatchAdminReqData,4,&(lvalues[4070]),0},",
          "1838:  NID_setct_BatchAdminResData,4,&(lvalues[4074]),0},",
          "1840:  NID_setct_CardCInitResTBS,4,&(lvalues[4078]),0},",
          "1842:  NID_setct_MeAqCInitResTBS,4,&(lvalues[4082]),0},",
          "1844:  4,&(lvalues[4086]),0},",
          "1846:  &(lvalues[4090]),0},",
          "1848:  &(lvalues[4094]),0},",
          "1850:  &(lvalues[4098]),0},",
          "1852:  4,&(lvalues[4102]),0},",
          "1854:  &(lvalues[4106]),0},",
          "1856:  NID_setct_PIDualSignedTBE,4,&(lvalues[4110]),0},",
          "1858:  4,&(lvalues[4114]),0},",
          "1860:  &(lvalues[4118]),0},",
          "1862:  &(lvalues[4122]),0},",
          "1864:  &(lvalues[4126]),0},",
          "1866:  &(lvalues[4130]),0},",
          "1868:  &(lvalues[4134]),0},",
          "1870:  &(lvalues[4138]),0},",
          "1872:  NID_setct_AcqCardCodeMsgTBE,4,&(lvalues[4142]),0},",
          "1874:  4,&(lvalues[4146]),0},",
          "1876:  4,&(lvalues[4150]),0},",
          "1878:  NID_setct_AuthRevResTBEB,4,&(lvalues[4154]),0},",
          "1880:  &(lvalues[4158]),0},",
          "1882:  &(lvalues[4162]),0},",
          "1884:  &(lvalues[4166]),0},",
          "1886:  &(lvalues[4170]),0},",
          "1888:  4,&(lvalues[4174]),0},",
          "1890:  &(lvalues[4178]),0},",
          "1892:  &(lvalues[4182]),0},",
          "1894:  &(lvalues[4186]),0},",
          "1896:  &(lvalues[4190]),0},",
          "1898:  4,&(lvalues[4194]),0},",
          "1900:  NID_setct_CredRevReqTBEX,4,&(lvalues[4198]),0},",
          "1902:  4,&(lvalues[4202]),0},",
          "1904:  NID_setct_BatchAdminReqTBE,4,&(lvalues[4206]),0},",
          "1906:  NID_setct_BatchAdminResTBE,4,&(lvalues[4210]),0},",
          "1908:  4,&(lvalues[4214]),0},",
          "1910:  &(lvalues[4218]),0},",
          "1912:  &(lvalues[4222]),0},",
          "1914:  &(lvalues[4226]),0},",
          "1916:  NID_setct_CRLNotificationTBS,4,&(lvalues[4230]),0},",
          "1918:  NID_setct_CRLNotificationResTBS,4,&(lvalues[4234]),0},",
          "1920:  NID_setct_BCIDistributionTBS,4,&(lvalues[4238]),0},",
          "1922:  &(lvalues[4242]),0},",
          "1924:  &(lvalues[4246]),0},",
          "1926:  &(lvalues[4250]),0},",
          "1927: {\"setext-pinAny\",\"setext-pinAny\",NID_setext_pinAny,4,&(lvalues[4254]),0},",
          "1928: {\"setext-track2\",\"setext-track2\",NID_setext_track2,4,&(lvalues[4258]),0},",
          "1930:  &(lvalues[4262]),0},",
          "1932:  &(lvalues[4266]),0},",
          "1934:  &(lvalues[4270]),0},",
          "1936:  &(lvalues[4274]),0},",
          "1938:  &(lvalues[4278]),0},",
          "1940:  NID_setCext_cCertRequired,4,&(lvalues[4282]),0},",
          "1942:  &(lvalues[4286]),0},",
          "1944:  &(lvalues[4290]),0},",
          "1946:  &(lvalues[4294]),0},",
          "1948:  NID_setCext_PGWYcapabilities,4,&(lvalues[4298]),0},",
          "1950:  NID_setCext_TokenIdentifier,4,&(lvalues[4302]),0},",
          "1952:  &(lvalues[4306]),0},",
          "1954:  &(lvalues[4310]),0},",
          "1956:  NID_setCext_IssuerCapabilities,4,&(lvalues[4314]),0},",
          "1957: {\"setAttr-Cert\",\"setAttr-Cert\",NID_setAttr_Cert,4,&(lvalues[4318]),0},",
          "1959:  4,&(lvalues[4322]),0},",
          "1961:  &(lvalues[4326]),0},",
          "1963:  &(lvalues[4330]),0},",
          "1965:  &(lvalues[4334]),0},",
          "1966: {\"set-addPolicy\",\"set-addPolicy\",NID_set_addPolicy,5,&(lvalues[4339]),0},",
          "1968:  &(lvalues[4344]),0},",
          "1970:  NID_setAttr_Token_B0Prime,5,&(lvalues[4349]),0},",
          "1972:  &(lvalues[4354]),0},",
          "1974:  &(lvalues[4359]),0},",
          "1976:  &(lvalues[4364]),0},",
          "1978:  6,&(lvalues[4369]),0},",
          "1980:  &(lvalues[4375]),0},",
          "1982:  &(lvalues[4381]),0},",
          "1984:  &(lvalues[4387]),0},",
          "1986:  6,&(lvalues[4393]),0},",
          "1988:  &(lvalues[4399]),0},",
          "1990:  &(lvalues[4403]),0},",
          "1992:  NID_set_brand_AmericanExpress,4,&(lvalues[4407]),0},",
          "1993: {\"set-brand-JCB\",\"set-brand-JCB\",NID_set_brand_JCB,4,&(lvalues[4411]),0},",
          "1995:  &(lvalues[4415]),0},",
          "1997:  NID_set_brand_MasterCard,4,&(lvalues[4419]),0},",
          "1999:  &(lvalues[4423]),0},",
          "2000: {\"DES-CDMF\",\"des-cdmf\",NID_des_cdmf,8,&(lvalues[4428]),0},",
          "2002:  NID_rsaOAEPEncryptionSET,9,&(lvalues[4436]),0},",
          "2006:  NID_international_organizations,1,&(lvalues[4445]),0},",
          "2008:  10,&(lvalues[4446]),0},",
          "2010:  &(lvalues[4456]),0},",
          "",
          "[Added Lines]",
          "1136: {NULL,NULL,NID_undef,0,NULL,0},",
          "1137: {\"ZLIB\",\"zlib compression\",NID_zlib_compression,11,&(lvalues[626]),0},",
          "1139:  &(lvalues[637]),0},",
          "1140: {\"PKIX\",\"PKIX\",NID_id_pkix,6,&(lvalues[640]),0},",
          "1141: {\"id-kp\",\"id-kp\",NID_id_kp,7,&(lvalues[646]),0},",
          "1143:  &(lvalues[653]),0},",
          "1145:  &(lvalues[661]),0},",
          "1146: {\"codeSigning\",\"Code Signing\",NID_code_sign,8,&(lvalues[669]),0},",
          "1148:  &(lvalues[677]),0},",
          "1149: {\"timeStamping\",\"Time Stamping\",NID_time_stamp,8,&(lvalues[685]),0},",
          "1151:  &(lvalues[693]),0},",
          "1153:  &(lvalues[703]),0},",
          "1155:  &(lvalues[713]),0},",
          "1156: {\"msSGC\",\"Microsoft Server Gated Crypto\",NID_ms_sgc,10,&(lvalues[723]),0},",
          "1158:  &(lvalues[733]),0},",
          "1159: {\"nsSGC\",\"Netscape Server Gated Crypto\",NID_ns_sgc,9,&(lvalues[743]),0},",
          "1161:  &(lvalues[752]),0},",
          "1162: {\"CRLReason\",\"X509v3 CRL Reason Code\",NID_crl_reason,3,&(lvalues[755]),0},",
          "1164:  &(lvalues[758]),0},",
          "1165: {\"SXNetID\",\"Strong Extranet ID\",NID_sxnet,5,&(lvalues[761]),0},",
          "1167:  NID_pbe_WithSHA1And128BitRC4,10,&(lvalues[766]),0},",
          "1169:  NID_pbe_WithSHA1And40BitRC4,10,&(lvalues[776]),0},",
          "1171:  NID_pbe_WithSHA1And3_Key_TripleDES_CBC,10,&(lvalues[786]),0},",
          "1173:  NID_pbe_WithSHA1And2_Key_TripleDES_CBC,10,&(lvalues[796]),0},",
          "1175:  NID_pbe_WithSHA1And128BitRC2_CBC,10,&(lvalues[806]),0},",
          "1177:  NID_pbe_WithSHA1And40BitRC2_CBC,10,&(lvalues[816]),0},",
          "1178: {\"keyBag\",\"keyBag\",NID_keyBag,11,&(lvalues[826]),0},",
          "1180:  11,&(lvalues[837]),0},",
          "1181: {\"certBag\",\"certBag\",NID_certBag,11,&(lvalues[848]),0},",
          "1182: {\"crlBag\",\"crlBag\",NID_crlBag,11,&(lvalues[859]),0},",
          "1183: {\"secretBag\",\"secretBag\",NID_secretBag,11,&(lvalues[870]),0},",
          "1185:  &(lvalues[881]),0},",
          "1186: {\"friendlyName\",\"friendlyName\",NID_friendlyName,9,&(lvalues[892]),0},",
          "1187: {\"localKeyID\",\"localKeyID\",NID_localKeyID,9,&(lvalues[901]),0},",
          "1189:  &(lvalues[910]),0},",
          "1191:  &(lvalues[920]),0},",
          "1192: {\"x509Crl\",\"x509Crl\",NID_x509Crl,10,&(lvalues[930]),0},",
          "1193: {\"PBES2\",\"PBES2\",NID_pbes2,9,&(lvalues[940]),0},",
          "1194: {\"PBMAC1\",\"PBMAC1\",NID_pbmac1,9,&(lvalues[949]),0},",
          "1195: {\"hmacWithSHA1\",\"hmacWithSHA1\",NID_hmacWithSHA1,8,&(lvalues[958]),0},",
          "1196: {\"id-qt-cps\",\"Policy Qualifier CPS\",NID_id_qt_cps,8,&(lvalues[966]),0},",
          "1198:  &(lvalues[974]),0},",
          "1201:  &(lvalues[982]),0},",
          "1203:  &(lvalues[991]),0},",
          "1205:  &(lvalues[1000]),0},",
          "1207:  &(lvalues[1009]),0},",
          "1209:  &(lvalues[1018]),0},",
          "1210: {\"extReq\",\"Extension Request\",NID_ext_req,9,&(lvalues[1028]),0},",
          "1211: {\"name\",\"name\",NID_name,3,&(lvalues[1037]),0},",
          "1212: {\"dnQualifier\",\"dnQualifier\",NID_dnQualifier,3,&(lvalues[1040]),0},",
          "1213: {\"id-pe\",\"id-pe\",NID_id_pe,7,&(lvalues[1043]),0},",
          "1214: {\"id-ad\",\"id-ad\",NID_id_ad,7,&(lvalues[1050]),0},",
          "1216:  8,&(lvalues[1057]),0},",
          "1217: {\"OCSP\",\"OCSP\",NID_ad_OCSP,8,&(lvalues[1065]),0},",
          "1218: {\"caIssuers\",\"CA Issuers\",NID_ad_ca_issuers,8,&(lvalues[1073]),0},",
          "1219: {\"OCSPSigning\",\"OCSP Signing\",NID_OCSP_sign,8,&(lvalues[1081]),0},",
          "1221: {\"member-body\",\"ISO Member Body\",NID_member_body,1,&(lvalues[1089]),0},",
          "1222: {\"ISO-US\",\"ISO US Member Body\",NID_ISO_US,3,&(lvalues[1090]),0},",
          "1223: {\"X9-57\",\"X9.57\",NID_X9_57,5,&(lvalues[1093]),0},",
          "1224: {\"X9cm\",\"X9.57 CM ?\",NID_X9cm,6,&(lvalues[1098]),0},",
          "1225: {\"pkcs1\",\"pkcs1\",NID_pkcs1,8,&(lvalues[1104]),0},",
          "1226: {\"pkcs5\",\"pkcs5\",NID_pkcs5,8,&(lvalues[1112]),0},",
          "1227: {\"SMIME\",\"S/MIME\",NID_SMIME,9,&(lvalues[1120]),0},",
          "1228: {\"id-smime-mod\",\"id-smime-mod\",NID_id_smime_mod,10,&(lvalues[1129]),0},",
          "1229: {\"id-smime-ct\",\"id-smime-ct\",NID_id_smime_ct,10,&(lvalues[1139]),0},",
          "1230: {\"id-smime-aa\",\"id-smime-aa\",NID_id_smime_aa,10,&(lvalues[1149]),0},",
          "1231: {\"id-smime-alg\",\"id-smime-alg\",NID_id_smime_alg,10,&(lvalues[1159]),0},",
          "1232: {\"id-smime-cd\",\"id-smime-cd\",NID_id_smime_cd,10,&(lvalues[1169]),0},",
          "1233: {\"id-smime-spq\",\"id-smime-spq\",NID_id_smime_spq,10,&(lvalues[1179]),0},",
          "1234: {\"id-smime-cti\",\"id-smime-cti\",NID_id_smime_cti,10,&(lvalues[1189]),0},",
          "1236:  &(lvalues[1199]),0},",
          "1238:  &(lvalues[1210]),0},",
          "1240:  &(lvalues[1221]),0},",
          "1242:  11,&(lvalues[1232]),0},",
          "1244:  NID_id_smime_mod_ets_eSignature_88,11,&(lvalues[1243]),0},",
          "1246:  NID_id_smime_mod_ets_eSignature_97,11,&(lvalues[1254]),0},",
          "1248:  NID_id_smime_mod_ets_eSigPolicy_88,11,&(lvalues[1265]),0},",
          "1250:  NID_id_smime_mod_ets_eSigPolicy_97,11,&(lvalues[1276]),0},",
          "1252:  11,&(lvalues[1287]),0},",
          "1254:  NID_id_smime_ct_authData,11,&(lvalues[1298]),0},",
          "1256:  NID_id_smime_ct_publishCert,11,&(lvalues[1309]),0},",
          "1258:  11,&(lvalues[1320]),0},",
          "1260:  11,&(lvalues[1331]),0},",
          "1262:  NID_id_smime_ct_contentInfo,11,&(lvalues[1342]),0},",
          "1264:  NID_id_smime_ct_DVCSRequestData,11,&(lvalues[1353]),0},",
          "1266:  NID_id_smime_ct_DVCSResponseData,11,&(lvalues[1364]),0},",
          "1268:  NID_id_smime_aa_receiptRequest,11,&(lvalues[1375]),0},",
          "1270:  NID_id_smime_aa_securityLabel,11,&(lvalues[1386]),0},",
          "1272:  NID_id_smime_aa_mlExpandHistory,11,&(lvalues[1397]),0},",
          "1274:  NID_id_smime_aa_contentHint,11,&(lvalues[1408]),0},",
          "1276:  NID_id_smime_aa_msgSigDigest,11,&(lvalues[1419]),0},",
          "1278:  NID_id_smime_aa_encapContentType,11,&(lvalues[1430]),0},",
          "1280:  NID_id_smime_aa_contentIdentifier,11,&(lvalues[1441]),0},",
          "1282:  NID_id_smime_aa_macValue,11,&(lvalues[1452]),0},",
          "1284:  NID_id_smime_aa_equivalentLabels,11,&(lvalues[1463]),0},",
          "1286:  NID_id_smime_aa_contentReference,11,&(lvalues[1474]),0},",
          "1288:  NID_id_smime_aa_encrypKeyPref,11,&(lvalues[1485]),0},",
          "1290:  NID_id_smime_aa_signingCertificate,11,&(lvalues[1496]),0},",
          "1292:  NID_id_smime_aa_smimeEncryptCerts,11,&(lvalues[1507]),0},",
          "1294:  NID_id_smime_aa_timeStampToken,11,&(lvalues[1518]),0},",
          "1296:  NID_id_smime_aa_ets_sigPolicyId,11,&(lvalues[1529]),0},",
          "1298:  NID_id_smime_aa_ets_commitmentType,11,&(lvalues[1540]),0},",
          "1300:  NID_id_smime_aa_ets_signerLocation,11,&(lvalues[1551]),0},",
          "1302:  NID_id_smime_aa_ets_signerAttr,11,&(lvalues[1562]),0},",
          "1304:  NID_id_smime_aa_ets_otherSigCert,11,&(lvalues[1573]),0},",
          "1307:  NID_id_smime_aa_ets_contentTimestamp,11,&(lvalues[1584]),0},",
          "1309:  NID_id_smime_aa_ets_CertificateRefs,11,&(lvalues[1595]),0},",
          "1311:  NID_id_smime_aa_ets_RevocationRefs,11,&(lvalues[1606]),0},",
          "1313:  NID_id_smime_aa_ets_certValues,11,&(lvalues[1617]),0},",
          "1316:  NID_id_smime_aa_ets_revocationValues,11,&(lvalues[1628]),0},",
          "1318:  NID_id_smime_aa_ets_escTimeStamp,11,&(lvalues[1639]),0},",
          "1321:  NID_id_smime_aa_ets_certCRLTimestamp,11,&(lvalues[1650]),0},",
          "1324:  NID_id_smime_aa_ets_archiveTimeStamp,11,&(lvalues[1661]),0},",
          "1326:  NID_id_smime_aa_signatureType,11,&(lvalues[1672]),0},",
          "1328:  NID_id_smime_aa_dvcs_dvc,11,&(lvalues[1683]),0},",
          "1330:  NID_id_smime_alg_ESDHwith3DES,11,&(lvalues[1694]),0},",
          "1332:  NID_id_smime_alg_ESDHwithRC2,11,&(lvalues[1705]),0},",
          "1334:  NID_id_smime_alg_3DESwrap,11,&(lvalues[1716]),0},",
          "1336:  NID_id_smime_alg_RC2wrap,11,&(lvalues[1727]),0},",
          "1338:  &(lvalues[1738]),0},",
          "1340:  NID_id_smime_alg_CMS3DESwrap,11,&(lvalues[1749]),0},",
          "1342:  NID_id_smime_alg_CMSRC2wrap,11,&(lvalues[1760]),0},",
          "1344:  &(lvalues[1771]),0},",
          "1346:  NID_id_smime_spq_ets_sqt_uri,11,&(lvalues[1782]),0},",
          "1348:  NID_id_smime_spq_ets_sqt_unotice,11,&(lvalues[1793]),0},",
          "1350:  NID_id_smime_cti_ets_proofOfOrigin,11,&(lvalues[1804]),0},",
          "1352:  NID_id_smime_cti_ets_proofOfReceipt,11,&(lvalues[1815]),0},",
          "1355:  NID_id_smime_cti_ets_proofOfDelivery,11,&(lvalues[1826]),0},",
          "1357:  NID_id_smime_cti_ets_proofOfSender,11,&(lvalues[1837]),0},",
          "1360:  NID_id_smime_cti_ets_proofOfApproval,11,&(lvalues[1848]),0},",
          "1363:  NID_id_smime_cti_ets_proofOfCreation,11,&(lvalues[1859]),0},",
          "1364: {\"MD4\",\"md4\",NID_md4,8,&(lvalues[1870]),0},",
          "1365: {\"id-pkix-mod\",\"id-pkix-mod\",NID_id_pkix_mod,7,&(lvalues[1878]),0},",
          "1366: {\"id-qt\",\"id-qt\",NID_id_qt,7,&(lvalues[1885]),0},",
          "1367: {\"id-it\",\"id-it\",NID_id_it,7,&(lvalues[1892]),0},",
          "1368: {\"id-pkip\",\"id-pkip\",NID_id_pkip,7,&(lvalues[1899]),0},",
          "1369: {\"id-alg\",\"id-alg\",NID_id_alg,7,&(lvalues[1906]),0},",
          "1370: {\"id-cmc\",\"id-cmc\",NID_id_cmc,7,&(lvalues[1913]),0},",
          "1371: {\"id-on\",\"id-on\",NID_id_on,7,&(lvalues[1920]),0},",
          "1372: {\"id-pda\",\"id-pda\",NID_id_pda,7,&(lvalues[1927]),0},",
          "1373: {\"id-aca\",\"id-aca\",NID_id_aca,7,&(lvalues[1934]),0},",
          "1374: {\"id-qcs\",\"id-qcs\",NID_id_qcs,7,&(lvalues[1941]),0},",
          "1375: {\"id-cct\",\"id-cct\",NID_id_cct,7,&(lvalues[1948]),0},",
          "1377:  NID_id_pkix1_explicit_88,8,&(lvalues[1955]),0},",
          "1379:  NID_id_pkix1_implicit_88,8,&(lvalues[1963]),0},",
          "1381:  NID_id_pkix1_explicit_93,8,&(lvalues[1971]),0},",
          "1383:  NID_id_pkix1_implicit_93,8,&(lvalues[1979]),0},",
          "1384: {\"id-mod-crmf\",\"id-mod-crmf\",NID_id_mod_crmf,8,&(lvalues[1987]),0},",
          "1385: {\"id-mod-cmc\",\"id-mod-cmc\",NID_id_mod_cmc,8,&(lvalues[1995]),0},",
          "1387:  NID_id_mod_kea_profile_88,8,&(lvalues[2003]),0},",
          "1389:  NID_id_mod_kea_profile_93,8,&(lvalues[2011]),0},",
          "1390: {\"id-mod-cmp\",\"id-mod-cmp\",NID_id_mod_cmp,8,&(lvalues[2019]),0},",
          "1392:  NID_id_mod_qualified_cert_88,8,&(lvalues[2027]),0},",
          "1394:  NID_id_mod_qualified_cert_93,8,&(lvalues[2035]),0},",
          "1396:  NID_id_mod_attribute_cert,8,&(lvalues[2043]),0},",
          "1398:  NID_id_mod_timestamp_protocol,8,&(lvalues[2051]),0},",
          "1399: {\"id-mod-ocsp\",\"id-mod-ocsp\",NID_id_mod_ocsp,8,&(lvalues[2059]),0},",
          "1400: {\"id-mod-dvcs\",\"id-mod-dvcs\",NID_id_mod_dvcs,8,&(lvalues[2067]),0},",
          "1402:  &(lvalues[2075]),0},",
          "1403: {\"biometricInfo\",\"Biometric Info\",NID_biometricInfo,8,&(lvalues[2083]),0},",
          "1404: {\"qcStatements\",\"qcStatements\",NID_qcStatements,8,&(lvalues[2091]),0},",
          "1406:  &(lvalues[2099]),0},",
          "1407: {\"ac-targeting\",\"ac-targeting\",NID_ac_targeting,8,&(lvalues[2107]),0},",
          "1408: {\"aaControls\",\"aaControls\",NID_aaControls,8,&(lvalues[2115]),0},",
          "1410:  &(lvalues[2123]),0},",
          "1412:  NID_sbgp_autonomousSysNum,8,&(lvalues[2131]),0},",
          "1414:  NID_sbgp_routerIdentifier,8,&(lvalues[2139]),0},",
          "1415: {\"textNotice\",\"textNotice\",NID_textNotice,8,&(lvalues[2147]),0},",
          "1417:  &(lvalues[2155]),0},",
          "1418: {\"ipsecTunnel\",\"IPSec Tunnel\",NID_ipsecTunnel,8,&(lvalues[2163]),0},",
          "1419: {\"ipsecUser\",\"IPSec User\",NID_ipsecUser,8,&(lvalues[2171]),0},",
          "1420: {\"DVCS\",\"dvcs\",NID_dvcs,8,&(lvalues[2179]),0},",
          "1422:  8,&(lvalues[2187]),0},",
          "1424:  NID_id_it_signKeyPairTypes,8,&(lvalues[2195]),0},",
          "1426:  NID_id_it_encKeyPairTypes,8,&(lvalues[2203]),0},",
          "1428:  NID_id_it_preferredSymmAlg,8,&(lvalues[2211]),0},",
          "1430:  NID_id_it_caKeyUpdateInfo,8,&(lvalues[2219]),0},",
          "1432:  &(lvalues[2227]),0},",
          "1434:  NID_id_it_unsupportedOIDs,8,&(lvalues[2235]),0},",
          "1436:  NID_id_it_subscriptionRequest,8,&(lvalues[2243]),0},",
          "1438:  NID_id_it_subscriptionResponse,8,&(lvalues[2251]),0},",
          "1440:  NID_id_it_keyPairParamReq,8,&(lvalues[2259]),0},",
          "1442:  NID_id_it_keyPairParamRep,8,&(lvalues[2267]),0},",
          "1444:  8,&(lvalues[2275]),0},",
          "1446:  NID_id_it_implicitConfirm,8,&(lvalues[2283]),0},",
          "1448:  NID_id_it_confirmWaitTime,8,&(lvalues[2291]),0},",
          "1450:  NID_id_it_origPKIMessage,8,&(lvalues[2299]),0},",
          "1451: {\"id-regCtrl\",\"id-regCtrl\",NID_id_regCtrl,8,&(lvalues[2307]),0},",
          "1452: {\"id-regInfo\",\"id-regInfo\",NID_id_regInfo,8,&(lvalues[2315]),0},",
          "1454:  9,&(lvalues[2323]),0},",
          "1456:  NID_id_regCtrl_authenticator,9,&(lvalues[2332]),0},",
          "1458:  NID_id_regCtrl_pkiPublicationInfo,9,&(lvalues[2341]),0},",
          "1460:  NID_id_regCtrl_pkiArchiveOptions,9,&(lvalues[2350]),0},",
          "1462:  NID_id_regCtrl_oldCertID,9,&(lvalues[2359]),0},",
          "1464:  NID_id_regCtrl_protocolEncrKey,9,&(lvalues[2368]),0},",
          "1466:  NID_id_regInfo_utf8Pairs,9,&(lvalues[2377]),0},",
          "1468:  &(lvalues[2386]),0},",
          "1469: {\"id-alg-des40\",\"id-alg-des40\",NID_id_alg_des40,8,&(lvalues[2395]),0},",
          "1471:  &(lvalues[2403]),0},",
          "1473:  NID_id_alg_dh_sig_hmac_sha1,8,&(lvalues[2411]),0},",
          "1474: {\"id-alg-dh-pop\",\"id-alg-dh-pop\",NID_id_alg_dh_pop,8,&(lvalues[2419]),0},",
          "1476:  &(lvalues[2427]),0},",
          "1478:  NID_id_cmc_identification,8,&(lvalues[2435]),0},",
          "1480:  NID_id_cmc_identityProof,8,&(lvalues[2443]),0},",
          "1482:  &(lvalues[2451]),0},",
          "1484:  NID_id_cmc_transactionId,8,&(lvalues[2459]),0},",
          "1486:  &(lvalues[2467]),0},",
          "1488:  NID_id_cmc_recipientNonce,8,&(lvalues[2475]),0},",
          "1490:  NID_id_cmc_addExtensions,8,&(lvalues[2483]),0},",
          "1492:  8,&(lvalues[2491]),0},",
          "1494:  8,&(lvalues[2499]),0},",
          "1496:  NID_id_cmc_lraPOPWitness,8,&(lvalues[2507]),0},",
          "1498:  &(lvalues[2515]),0},",
          "1499: {\"id-cmc-getCRL\",\"id-cmc-getCRL\",NID_id_cmc_getCRL,8,&(lvalues[2523]),0},",
          "1501:  NID_id_cmc_revokeRequest,8,&(lvalues[2531]),0},",
          "1503:  &(lvalues[2539]),0},",
          "1505:  8,&(lvalues[2547]),0},",
          "1507:  8,&(lvalues[2555]),0},",
          "1509:  NID_id_cmc_popLinkRandom,8,&(lvalues[2563]),0},",
          "1511:  NID_id_cmc_popLinkWitness,8,&(lvalues[2571]),0},",
          "1513:  NID_id_cmc_confirmCertAcceptance,8,&(lvalues[2579]),0},",
          "1515:  &(lvalues[2587]),0},",
          "1517:  &(lvalues[2595]),0},",
          "1519:  8,&(lvalues[2603]),0},",
          "1521: {\"id-pda-gender\",\"id-pda-gender\",NID_id_pda_gender,8,&(lvalues[2611]),0},",
          "1523:  NID_id_pda_countryOfCitizenship,8,&(lvalues[2619]),0},",
          "1525:  NID_id_pda_countryOfResidence,8,&(lvalues[2627]),0},",
          "1527:  NID_id_aca_authenticationInfo,8,&(lvalues[2635]),0},",
          "1529:  NID_id_aca_accessIdentity,8,&(lvalues[2643]),0},",
          "1531:  NID_id_aca_chargingIdentity,8,&(lvalues[2651]),0},",
          "1532: {\"id-aca-group\",\"id-aca-group\",NID_id_aca_group,8,&(lvalues[2659]),0},",
          "1533: {\"id-aca-role\",\"id-aca-role\",NID_id_aca_role,8,&(lvalues[2667]),0},",
          "1535:  NID_id_qcs_pkixQCSyntax_v1,8,&(lvalues[2675]),0},",
          "1536: {\"id-cct-crs\",\"id-cct-crs\",NID_id_cct_crs,8,&(lvalues[2683]),0},",
          "1538:  &(lvalues[2691]),0},",
          "1540:  &(lvalues[2699]),0},",
          "1542:  &(lvalues[2707]),0},",
          "1543: {\"AD_DVCS\",\"ad dvcs\",NID_ad_dvcs,8,&(lvalues[2715]),0},",
          "1545:  &(lvalues[2723]),0},",
          "1546: {\"Nonce\",\"OCSP Nonce\",NID_id_pkix_OCSP_Nonce,9,&(lvalues[2732]),0},",
          "1547: {\"CrlID\",\"OCSP CRL ID\",NID_id_pkix_OCSP_CrlID,9,&(lvalues[2741]),0},",
          "1549:  NID_id_pkix_OCSP_acceptableResponses,9,&(lvalues[2750]),0},",
          "1550: {\"noCheck\",\"OCSP No Check\",NID_id_pkix_OCSP_noCheck,9,&(lvalues[2759]),0},",
          "1552:  9,&(lvalues[2768]),0},",
          "1554:  NID_id_pkix_OCSP_serviceLocator,9,&(lvalues[2777]),0},",
          "1556:  NID_id_pkix_OCSP_extendedStatus,9,&(lvalues[2786]),0},",
          "1557: {\"valid\",\"valid\",NID_id_pkix_OCSP_valid,9,&(lvalues[2795]),0},",
          "1558: {\"path\",\"path\",NID_id_pkix_OCSP_path,9,&(lvalues[2804]),0},",
          "1560:  &(lvalues[2813]),0},",
          "1561: {\"algorithm\",\"algorithm\",NID_algorithm,4,&(lvalues[2822]),0},",
          "1562: {\"rsaSignature\",\"rsaSignature\",NID_rsaSignature,5,&(lvalues[2826]),0},",
          "1564:  NID_X500algorithms,2,&(lvalues[2831]),0},",
          "1565: {\"ORG\",\"org\",NID_org,1,&(lvalues[2833]),0},",
          "1566: {\"DOD\",\"dod\",NID_dod,2,&(lvalues[2834]),0},",
          "1567: {\"IANA\",\"iana\",NID_iana,3,&(lvalues[2836]),0},",
          "1568: {\"directory\",\"Directory\",NID_Directory,4,&(lvalues[2839]),0},",
          "1569: {\"mgmt\",\"Management\",NID_Management,4,&(lvalues[2843]),0},",
          "1570: {\"experimental\",\"Experimental\",NID_Experimental,4,&(lvalues[2847]),0},",
          "1571: {\"private\",\"Private\",NID_Private,4,&(lvalues[2851]),0},",
          "1572: {\"security\",\"Security\",NID_Security,4,&(lvalues[2855]),0},",
          "1573: {\"snmpv2\",\"SNMPv2\",NID_SNMPv2,4,&(lvalues[2859]),0},",
          "1574: {\"Mail\",\"Mail\",NID_Mail,4,&(lvalues[2863]),0},",
          "1575: {\"enterprises\",\"Enterprises\",NID_Enterprises,5,&(lvalues[2867]),0},",
          "1576: {\"dcobject\",\"dcObject\",NID_dcObject,9,&(lvalues[2872]),0},",
          "1577: {\"DC\",\"domainComponent\",NID_domainComponent,10,&(lvalues[2881]),0},",
          "1578: {\"domain\",\"Domain\",NID_Domain,10,&(lvalues[2891]),0},",
          "1581:  NID_selected_attribute_types,3,&(lvalues[2901]),0},",
          "1582: {\"clearance\",\"clearance\",NID_clearance,4,&(lvalues[2904]),0},",
          "1584:  &(lvalues[2908]),0},",
          "1585: {\"ac-proxying\",\"ac-proxying\",NID_ac_proxying,8,&(lvalues[2917]),0},",
          "1587:  &(lvalues[2925]),0},",
          "1589:  &(lvalues[2933]),0},",
          "1590: {\"role\",\"role\",NID_role,3,&(lvalues[2941]),0},",
          "1592:  NID_policy_constraints,3,&(lvalues[2944]),0},",
          "1594:  &(lvalues[2947]),0},",
          "1596:  &(lvalues[2950]),0},",
          "1598: {\"ansi-X9-62\",\"ANSI X9.62\",NID_ansi_X9_62,5,&(lvalues[2953]),0},",
          "1599: {\"prime-field\",\"prime-field\",NID_X9_62_prime_field,7,&(lvalues[2958]),0},",
          "1601:  NID_X9_62_characteristic_two_field,7,&(lvalues[2965]),0},",
          "1603:  &(lvalues[2972]),0},",
          "1604: {\"prime192v1\",\"prime192v1\",NID_X9_62_prime192v1,8,&(lvalues[2979]),0},",
          "1605: {\"prime192v2\",\"prime192v2\",NID_X9_62_prime192v2,8,&(lvalues[2987]),0},",
          "1606: {\"prime192v3\",\"prime192v3\",NID_X9_62_prime192v3,8,&(lvalues[2995]),0},",
          "1607: {\"prime239v1\",\"prime239v1\",NID_X9_62_prime239v1,8,&(lvalues[3003]),0},",
          "1608: {\"prime239v2\",\"prime239v2\",NID_X9_62_prime239v2,8,&(lvalues[3011]),0},",
          "1609: {\"prime239v3\",\"prime239v3\",NID_X9_62_prime239v3,8,&(lvalues[3019]),0},",
          "1610: {\"prime256v1\",\"prime256v1\",NID_X9_62_prime256v1,8,&(lvalues[3027]),0},",
          "1612:  &(lvalues[3035]),0},",
          "1613: {\"CSPName\",\"Microsoft CSP Name\",NID_ms_csp_name,9,&(lvalues[3042]),0},",
          "1614: {\"AES-128-ECB\",\"aes-128-ecb\",NID_aes_128_ecb,9,&(lvalues[3051]),0},",
          "1615: {\"AES-128-CBC\",\"aes-128-cbc\",NID_aes_128_cbc,9,&(lvalues[3060]),0},",
          "1616: {\"AES-128-OFB\",\"aes-128-ofb\",NID_aes_128_ofb128,9,&(lvalues[3069]),0},",
          "1617: {\"AES-128-CFB\",\"aes-128-cfb\",NID_aes_128_cfb128,9,&(lvalues[3078]),0},",
          "1618: {\"AES-192-ECB\",\"aes-192-ecb\",NID_aes_192_ecb,9,&(lvalues[3087]),0},",
          "1619: {\"AES-192-CBC\",\"aes-192-cbc\",NID_aes_192_cbc,9,&(lvalues[3096]),0},",
          "1620: {\"AES-192-OFB\",\"aes-192-ofb\",NID_aes_192_ofb128,9,&(lvalues[3105]),0},",
          "1621: {\"AES-192-CFB\",\"aes-192-cfb\",NID_aes_192_cfb128,9,&(lvalues[3114]),0},",
          "1622: {\"AES-256-ECB\",\"aes-256-ecb\",NID_aes_256_ecb,9,&(lvalues[3123]),0},",
          "1623: {\"AES-256-CBC\",\"aes-256-cbc\",NID_aes_256_cbc,9,&(lvalues[3132]),0},",
          "1624: {\"AES-256-OFB\",\"aes-256-ofb\",NID_aes_256_ofb128,9,&(lvalues[3141]),0},",
          "1625: {\"AES-256-CFB\",\"aes-256-cfb\",NID_aes_256_cfb128,9,&(lvalues[3150]),0},",
          "1627:  NID_hold_instruction_code,3,&(lvalues[3159]),0},",
          "1629:  NID_hold_instruction_none,7,&(lvalues[3162]),0},",
          "1631:  NID_hold_instruction_call_issuer,7,&(lvalues[3169]),0},",
          "1633:  NID_hold_instruction_reject,7,&(lvalues[3176]),0},",
          "1634: {\"data\",\"data\",NID_data,1,&(lvalues[3183]),0},",
          "1635: {\"pss\",\"pss\",NID_pss,3,&(lvalues[3184]),0},",
          "1636: {\"ucl\",\"ucl\",NID_ucl,7,&(lvalues[3187]),0},",
          "1637: {\"pilot\",\"pilot\",NID_pilot,8,&(lvalues[3194]),0},",
          "1639:  &(lvalues[3202]),0},",
          "1641:  NID_pilotAttributeSyntax,9,&(lvalues[3211]),0},",
          "1643:  &(lvalues[3220]),0},",
          "1644: {\"pilotGroups\",\"pilotGroups\",NID_pilotGroups,9,&(lvalues[3229]),0},",
          "1646:  &(lvalues[3238]),0},",
          "1648:  NID_caseIgnoreIA5StringSyntax,10,&(lvalues[3248]),0},",
          "1649: {\"pilotObject\",\"pilotObject\",NID_pilotObject,10,&(lvalues[3258]),0},",
          "1650: {\"pilotPerson\",\"pilotPerson\",NID_pilotPerson,10,&(lvalues[3268]),0},",
          "1651: {\"account\",\"account\",NID_account,10,&(lvalues[3278]),0},",
          "1652: {\"document\",\"document\",NID_document,10,&(lvalues[3288]),0},",
          "1653: {\"room\",\"room\",NID_room,10,&(lvalues[3298]),0},",
          "1655:  &(lvalues[3308]),0},",
          "1657:  &(lvalues[3318]),0},",
          "1658: {\"dNSDomain\",\"dNSDomain\",NID_dNSDomain,10,&(lvalues[3328]),0},",
          "1660:  10,&(lvalues[3338]),0},",
          "1662:  &(lvalues[3348]),0},",
          "1664:  NID_simpleSecurityObject,10,&(lvalues[3358]),0},",
          "1666:  &(lvalues[3368]),0},",
          "1667: {\"pilotDSA\",\"pilotDSA\",NID_pilotDSA,10,&(lvalues[3378]),0},",
          "1669:  10,&(lvalues[3388]),0},",
          "1670: {\"UID\",\"userId\",NID_userId,10,&(lvalues[3398]),0},",
          "1672:  NID_textEncodedORAddress,10,&(lvalues[3408]),0},",
          "1673: {\"mail\",\"rfc822Mailbox\",NID_rfc822Mailbox,10,&(lvalues[3418]),0},",
          "1674: {\"info\",\"info\",NID_info,10,&(lvalues[3428]),0},",
          "1676:  &(lvalues[3438]),0},",
          "1677: {\"roomNumber\",\"roomNumber\",NID_roomNumber,10,&(lvalues[3448]),0},",
          "1678: {\"photo\",\"photo\",NID_photo,10,&(lvalues[3458]),0},",
          "1679: {\"userClass\",\"userClass\",NID_userClass,10,&(lvalues[3468]),0},",
          "1680: {\"host\",\"host\",NID_host,10,&(lvalues[3478]),0},",
          "1681: {\"manager\",\"manager\",NID_manager,10,&(lvalues[3488]),0},",
          "1683:  &(lvalues[3498]),0},",
          "1684: {\"documentTitle\",\"documentTitle\",NID_documentTitle,10,&(lvalues[3508]),0},",
          "1686:  &(lvalues[3518]),0},",
          "1688:  &(lvalues[3528]),0},",
          "1690:  &(lvalues[3538]),0},",
          "1692:  10,&(lvalues[3548]),0},",
          "1693: {\"secretary\",\"secretary\",NID_secretary,10,&(lvalues[3558]),0},",
          "1694: {\"otherMailbox\",\"otherMailbox\",NID_otherMailbox,10,&(lvalues[3568]),0},",
          "1696:  &(lvalues[3578]),0},",
          "1698:  &(lvalues[3588]),0},",
          "1699: {\"aRecord\",\"aRecord\",NID_aRecord,10,&(lvalues[3598]),0},",
          "1701:  NID_pilotAttributeType27,10,&(lvalues[3608]),0},",
          "1702: {\"mXRecord\",\"mXRecord\",NID_mXRecord,10,&(lvalues[3618]),0},",
          "1703: {\"nSRecord\",\"nSRecord\",NID_nSRecord,10,&(lvalues[3628]),0},",
          "1704: {\"sOARecord\",\"sOARecord\",NID_sOARecord,10,&(lvalues[3638]),0},",
          "1705: {\"cNAMERecord\",\"cNAMERecord\",NID_cNAMERecord,10,&(lvalues[3648]),0},",
          "1707:  &(lvalues[3658]),0},",
          "1709:  &(lvalues[3668]),0},",
          "1711:  &(lvalues[3678]),0},",
          "1712: {\"personalTitle\",\"personalTitle\",NID_personalTitle,10,&(lvalues[3688]),0},",
          "1714:  NID_mobileTelephoneNumber,10,&(lvalues[3698]),0},",
          "1716:  NID_pagerTelephoneNumber,10,&(lvalues[3708]),0},",
          "1718:  10,&(lvalues[3718]),0},",
          "1720:  NID_organizationalStatus,10,&(lvalues[3728]),0},",
          "1721: {\"janetMailbox\",\"janetMailbox\",NID_janetMailbox,10,&(lvalues[3738]),0},",
          "1723:  NID_mailPreferenceOption,10,&(lvalues[3748]),0},",
          "1724: {\"buildingName\",\"buildingName\",NID_buildingName,10,&(lvalues[3758]),0},",
          "1725: {\"dSAQuality\",\"dSAQuality\",NID_dSAQuality,10,&(lvalues[3768]),0},",
          "1727:  &(lvalues[3778]),0},",
          "1729:  NID_subtreeMinimumQuality,10,&(lvalues[3788]),0},",
          "1731:  NID_subtreeMaximumQuality,10,&(lvalues[3798]),0},",
          "1733:  &(lvalues[3808]),0},",
          "1734: {\"dITRedirect\",\"dITRedirect\",NID_dITRedirect,10,&(lvalues[3818]),0},",
          "1735: {\"audio\",\"audio\",NID_audio,10,&(lvalues[3828]),0},",
          "1737:  &(lvalues[3838]),0},",
          "1739:  NID_x500UniqueIdentifier,3,&(lvalues[3848]),0},",
          "1740: {\"mime-mhs\",\"MIME MHS\",NID_mime_mhs,5,&(lvalues[3851]),0},",
          "1742:  &(lvalues[3856]),0},",
          "1744:  &(lvalues[3862]),0},",
          "1746:  NID_id_hex_partial_message,7,&(lvalues[3868]),0},",
          "1748:  NID_id_hex_multipart_message,7,&(lvalues[3875]),0},",
          "1750:  3,&(lvalues[3882]),0},",
          "1751: {\"pseudonym\",\"pseudonym\",NID_pseudonym,3,&(lvalues[3885]),0},",
          "1754:  &(lvalues[3888]),0},",
          "1755: {\"set-ctype\",\"content types\",NID_set_ctype,3,&(lvalues[3890]),0},",
          "1756: {\"set-msgExt\",\"message extensions\",NID_set_msgExt,3,&(lvalues[3893]),0},",
          "1757: {\"set-attr\",\"set-attr\",NID_set_attr,3,&(lvalues[3896]),0},",
          "1758: {\"set-policy\",\"set-policy\",NID_set_policy,3,&(lvalues[3899]),0},",
          "1760:  &(lvalues[3902]),0},",
          "1761: {\"set-brand\",\"set-brand\",NID_set_brand,3,&(lvalues[3905]),0},",
          "1762: {\"setct-PANData\",\"setct-PANData\",NID_setct_PANData,4,&(lvalues[3908]),0},",
          "1764:  &(lvalues[3912]),0},",
          "1765: {\"setct-PANOnly\",\"setct-PANOnly\",NID_setct_PANOnly,4,&(lvalues[3916]),0},",
          "1766: {\"setct-OIData\",\"setct-OIData\",NID_setct_OIData,4,&(lvalues[3920]),0},",
          "1767: {\"setct-PI\",\"setct-PI\",NID_setct_PI,4,&(lvalues[3924]),0},",
          "1768: {\"setct-PIData\",\"setct-PIData\",NID_setct_PIData,4,&(lvalues[3928]),0},",
          "1770:  NID_setct_PIDataUnsigned,4,&(lvalues[3932]),0},",
          "1772:  &(lvalues[3936]),0},",
          "1774:  NID_setct_AuthResBaggage,4,&(lvalues[3940]),0},",
          "1776:  NID_setct_AuthRevReqBaggage,4,&(lvalues[3944]),0},",
          "1778:  NID_setct_AuthRevResBaggage,4,&(lvalues[3948]),0},",
          "1780:  &(lvalues[3952]),0},",
          "1782:  &(lvalues[3956]),0},",
          "1783: {\"setct-PI-TBS\",\"setct-PI-TBS\",NID_setct_PI_TBS,4,&(lvalues[3960]),0},",
          "1785:  &(lvalues[3964]),0},",
          "1787:  &(lvalues[3968]),0},",
          "1789:  &(lvalues[3972]),0},",
          "1791:  &(lvalues[3976]),0},",
          "1793:  &(lvalues[3980]),0},",
          "1795:  &(lvalues[3984]),0},",
          "1797:  &(lvalues[3988]),0},",
          "1799:  NID_setct_AcqCardCodeMsg,4,&(lvalues[3992]),0},",
          "1801:  4,&(lvalues[3996]),0},",
          "1803:  NID_setct_AuthRevResData,4,&(lvalues[4000]),0},",
          "1805:  4,&(lvalues[4004]),0},",
          "1807:  &(lvalues[4008]),0},",
          "1809:  &(lvalues[4012]),0},",
          "1811:  &(lvalues[4016]),0},",
          "1813:  &(lvalues[4020]),0},",
          "1815:  4,&(lvalues[4024]),0},",
          "1817:  4,&(lvalues[4028]),0},",
          "1819:  &(lvalues[4032]),0},",
          "1821:  &(lvalues[4036]),0},",
          "1823:  &(lvalues[4040]),0},",
          "1825:  4,&(lvalues[4044]),0},",
          "1827:  NID_setct_CredRevReqTBSX,4,&(lvalues[4048]),0},",
          "1829:  NID_setct_CredRevResData,4,&(lvalues[4052]),0},",
          "1831:  &(lvalues[4056]),0},",
          "1833:  &(lvalues[4060]),0},",
          "1835:  NID_setct_BatchAdminReqData,4,&(lvalues[4064]),0},",
          "1837:  NID_setct_BatchAdminResData,4,&(lvalues[4068]),0},",
          "1839:  NID_setct_CardCInitResTBS,4,&(lvalues[4072]),0},",
          "1841:  NID_setct_MeAqCInitResTBS,4,&(lvalues[4076]),0},",
          "1843:  4,&(lvalues[4080]),0},",
          "1845:  &(lvalues[4084]),0},",
          "1847:  &(lvalues[4088]),0},",
          "1849:  &(lvalues[4092]),0},",
          "1851:  4,&(lvalues[4096]),0},",
          "1853:  &(lvalues[4100]),0},",
          "1855:  NID_setct_PIDualSignedTBE,4,&(lvalues[4104]),0},",
          "1857:  4,&(lvalues[4108]),0},",
          "1859:  &(lvalues[4112]),0},",
          "1861:  &(lvalues[4116]),0},",
          "1863:  &(lvalues[4120]),0},",
          "1865:  &(lvalues[4124]),0},",
          "1867:  &(lvalues[4128]),0},",
          "1869:  &(lvalues[4132]),0},",
          "1871:  NID_setct_AcqCardCodeMsgTBE,4,&(lvalues[4136]),0},",
          "1873:  4,&(lvalues[4140]),0},",
          "1875:  4,&(lvalues[4144]),0},",
          "1877:  NID_setct_AuthRevResTBEB,4,&(lvalues[4148]),0},",
          "1879:  &(lvalues[4152]),0},",
          "1881:  &(lvalues[4156]),0},",
          "1883:  &(lvalues[4160]),0},",
          "1885:  &(lvalues[4164]),0},",
          "1887:  4,&(lvalues[4168]),0},",
          "1889:  &(lvalues[4172]),0},",
          "1891:  &(lvalues[4176]),0},",
          "1893:  &(lvalues[4180]),0},",
          "1895:  &(lvalues[4184]),0},",
          "1897:  4,&(lvalues[4188]),0},",
          "1899:  NID_setct_CredRevReqTBEX,4,&(lvalues[4192]),0},",
          "1901:  4,&(lvalues[4196]),0},",
          "1903:  NID_setct_BatchAdminReqTBE,4,&(lvalues[4200]),0},",
          "1905:  NID_setct_BatchAdminResTBE,4,&(lvalues[4204]),0},",
          "1907:  4,&(lvalues[4208]),0},",
          "1909:  &(lvalues[4212]),0},",
          "1911:  &(lvalues[4216]),0},",
          "1913:  &(lvalues[4220]),0},",
          "1915:  NID_setct_CRLNotificationTBS,4,&(lvalues[4224]),0},",
          "1917:  NID_setct_CRLNotificationResTBS,4,&(lvalues[4228]),0},",
          "1919:  NID_setct_BCIDistributionTBS,4,&(lvalues[4232]),0},",
          "1921:  &(lvalues[4236]),0},",
          "1923:  &(lvalues[4240]),0},",
          "1925:  &(lvalues[4244]),0},",
          "1926: {\"setext-pinAny\",\"setext-pinAny\",NID_setext_pinAny,4,&(lvalues[4248]),0},",
          "1927: {\"setext-track2\",\"setext-track2\",NID_setext_track2,4,&(lvalues[4252]),0},",
          "1929:  &(lvalues[4256]),0},",
          "1931:  &(lvalues[4260]),0},",
          "1933:  &(lvalues[4264]),0},",
          "1935:  &(lvalues[4268]),0},",
          "1937:  &(lvalues[4272]),0},",
          "1939:  NID_setCext_cCertRequired,4,&(lvalues[4276]),0},",
          "1941:  &(lvalues[4280]),0},",
          "1943:  &(lvalues[4284]),0},",
          "1945:  &(lvalues[4288]),0},",
          "1947:  NID_setCext_PGWYcapabilities,4,&(lvalues[4292]),0},",
          "1949:  NID_setCext_TokenIdentifier,4,&(lvalues[4296]),0},",
          "1951:  &(lvalues[4300]),0},",
          "1953:  &(lvalues[4304]),0},",
          "1955:  NID_setCext_IssuerCapabilities,4,&(lvalues[4308]),0},",
          "1956: {\"setAttr-Cert\",\"setAttr-Cert\",NID_setAttr_Cert,4,&(lvalues[4312]),0},",
          "1958:  4,&(lvalues[4316]),0},",
          "1960:  &(lvalues[4320]),0},",
          "1962:  &(lvalues[4324]),0},",
          "1964:  &(lvalues[4328]),0},",
          "1965: {\"set-addPolicy\",\"set-addPolicy\",NID_set_addPolicy,5,&(lvalues[4333]),0},",
          "1967:  &(lvalues[4338]),0},",
          "1969:  NID_setAttr_Token_B0Prime,5,&(lvalues[4343]),0},",
          "1971:  &(lvalues[4348]),0},",
          "1973:  &(lvalues[4353]),0},",
          "1975:  &(lvalues[4358]),0},",
          "1977:  6,&(lvalues[4363]),0},",
          "1979:  &(lvalues[4369]),0},",
          "1981:  &(lvalues[4375]),0},",
          "1983:  &(lvalues[4381]),0},",
          "1985:  6,&(lvalues[4387]),0},",
          "1987:  &(lvalues[4393]),0},",
          "1989:  &(lvalues[4397]),0},",
          "1991:  NID_set_brand_AmericanExpress,4,&(lvalues[4401]),0},",
          "1992: {\"set-brand-JCB\",\"set-brand-JCB\",NID_set_brand_JCB,4,&(lvalues[4405]),0},",
          "1994:  &(lvalues[4409]),0},",
          "1996:  NID_set_brand_MasterCard,4,&(lvalues[4413]),0},",
          "1998:  &(lvalues[4417]),0},",
          "1999: {\"DES-CDMF\",\"des-cdmf\",NID_des_cdmf,8,&(lvalues[4422]),0},",
          "2001:  NID_rsaOAEPEncryptionSET,9,&(lvalues[4430]),0},",
          "2005:  NID_international_organizations,1,&(lvalues[4439]),0},",
          "2007:  10,&(lvalues[4440]),0},",
          "2009:  &(lvalues[4450]),0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2018: {\"DES-CFB8\",\"des-cfb8\",NID_des_cfb8,0,NULL,0},",
          "2019: {\"DES-EDE3-CFB1\",\"des-ede3-cfb1\",NID_des_ede3_cfb1,0,NULL,0},",
          "2020: {\"DES-EDE3-CFB8\",\"des-ede3-cfb8\",NID_des_ede3_cfb8,0,NULL,0},",
          "2024: {\"proxyCertInfo\",\"Proxy Certificate Information\",NID_proxyCertInfo,8,",
          "2026: {\"id-ppl-anyLanguage\",\"Any language\",NID_id_ppl_anyLanguage,8,",
          "2028: {\"id-ppl-inheritAll\",\"Inherit all\",NID_id_ppl_inheritAll,8,",
          "2030: {\"nameConstraints\",\"X509v3 Name Constraints\",NID_name_constraints,3,",
          "2033: {\"RSA-SHA256\",\"sha256WithRSAEncryption\",NID_sha256WithRSAEncryption,9,",
          "2035: {\"RSA-SHA384\",\"sha384WithRSAEncryption\",NID_sha384WithRSAEncryption,9,",
          "2037: {\"RSA-SHA512\",\"sha512WithRSAEncryption\",NID_sha512WithRSAEncryption,9,",
          "2039: {\"RSA-SHA224\",\"sha224WithRSAEncryption\",NID_sha224WithRSAEncryption,9,",
          "2045: {\"identified-organization\",\"identified-organization\",",
          "2050: {\"id-characteristic-two-basis\",\"id-characteristic-two-basis\",",
          "2106: {\"wap-wsg-idm-ecid-wtls1\",\"wap-wsg-idm-ecid-wtls1\",",
          "2108: {\"wap-wsg-idm-ecid-wtls3\",\"wap-wsg-idm-ecid-wtls3\",",
          "2110: {\"wap-wsg-idm-ecid-wtls4\",\"wap-wsg-idm-ecid-wtls4\",",
          "2112: {\"wap-wsg-idm-ecid-wtls5\",\"wap-wsg-idm-ecid-wtls5\",",
          "2114: {\"wap-wsg-idm-ecid-wtls6\",\"wap-wsg-idm-ecid-wtls6\",",
          "2116: {\"wap-wsg-idm-ecid-wtls7\",\"wap-wsg-idm-ecid-wtls7\",",
          "2118: {\"wap-wsg-idm-ecid-wtls8\",\"wap-wsg-idm-ecid-wtls8\",",
          "2120: {\"wap-wsg-idm-ecid-wtls9\",\"wap-wsg-idm-ecid-wtls9\",",
          "2122: {\"wap-wsg-idm-ecid-wtls10\",\"wap-wsg-idm-ecid-wtls10\",",
          "2124: {\"wap-wsg-idm-ecid-wtls11\",\"wap-wsg-idm-ecid-wtls11\",",
          "2126: {\"wap-wsg-idm-ecid-wtls12\",\"wap-wsg-idm-ecid-wtls12\",",
          "2129: {\"policyMappings\",\"X509v3 Policy Mappings\",NID_policy_mappings,3,",
          "2131: {\"inhibitAnyPolicy\",\"X509v3 Inhibit Any Policy\",",
          "2133: {\"Oakley-EC2N-3\",\"ipsec3\",NID_ipsec3,0,NULL,0},",
          "2134: {\"Oakley-EC2N-4\",\"ipsec4\",NID_ipsec4,0,NULL,0},",
          "2135: {\"CAMELLIA-128-CBC\",\"camellia-128-cbc\",NID_camellia_128_cbc,11,",
          "2137: {\"CAMELLIA-192-CBC\",\"camellia-192-cbc\",NID_camellia_192_cbc,11,",
          "2139: {\"CAMELLIA-256-CBC\",\"camellia-256-cbc\",NID_camellia_256_cbc,11,",
          "2141: {\"CAMELLIA-128-ECB\",\"camellia-128-ecb\",NID_camellia_128_ecb,8,",
          "2143: {\"CAMELLIA-192-ECB\",\"camellia-192-ecb\",NID_camellia_192_ecb,8,",
          "2145: {\"CAMELLIA-256-ECB\",\"camellia-256-ecb\",NID_camellia_256_ecb,8,",
          "2147: {\"CAMELLIA-128-CFB\",\"camellia-128-cfb\",NID_camellia_128_cfb128,8,",
          "2149: {\"CAMELLIA-192-CFB\",\"camellia-192-cfb\",NID_camellia_192_cfb128,8,",
          "2151: {\"CAMELLIA-256-CFB\",\"camellia-256-cfb\",NID_camellia_256_cfb128,8,",
          "2153: {\"CAMELLIA-128-CFB1\",\"camellia-128-cfb1\",NID_camellia_128_cfb1,0,NULL,0},",
          "2154: {\"CAMELLIA-192-CFB1\",\"camellia-192-cfb1\",NID_camellia_192_cfb1,0,NULL,0},",
          "2155: {\"CAMELLIA-256-CFB1\",\"camellia-256-cfb1\",NID_camellia_256_cfb1,0,NULL,0},",
          "",
          "[Removed Lines]",
          "2021: {\"street\",\"streetAddress\",NID_streetAddress,3,&(lvalues[4466]),0},",
          "2022: {\"postalCode\",\"postalCode\",NID_postalCode,3,&(lvalues[4469]),0},",
          "2023: {\"id-ppl\",\"id-ppl\",NID_id_ppl,7,&(lvalues[4472]),0},",
          "2025:  &(lvalues[4479]),0},",
          "2027:  &(lvalues[4487]),0},",
          "2029:  &(lvalues[4495]),0},",
          "2031:  &(lvalues[4503]),0},",
          "2032: {\"id-ppl-independent\",\"Independent\",NID_Independent,8,&(lvalues[4506]),0},",
          "2034:  &(lvalues[4514]),0},",
          "2036:  &(lvalues[4523]),0},",
          "2038:  &(lvalues[4532]),0},",
          "2040:  &(lvalues[4541]),0},",
          "2041: {\"SHA256\",\"sha256\",NID_sha256,9,&(lvalues[4550]),0},",
          "2042: {\"SHA384\",\"sha384\",NID_sha384,9,&(lvalues[4559]),0},",
          "2043: {\"SHA512\",\"sha512\",NID_sha512,9,&(lvalues[4568]),0},",
          "2044: {\"SHA224\",\"sha224\",NID_sha224,9,&(lvalues[4577]),0},",
          "2046:  NID_identified_organization,1,&(lvalues[4586]),0},",
          "2047: {\"certicom-arc\",\"certicom-arc\",NID_certicom_arc,3,&(lvalues[4587]),0},",
          "2048: {\"wap\",\"wap\",NID_wap,2,&(lvalues[4590]),0},",
          "2049: {\"wap-wsg\",\"wap-wsg\",NID_wap_wsg,3,&(lvalues[4592]),0},",
          "2051:  NID_X9_62_id_characteristic_two_basis,8,&(lvalues[4595]),0},",
          "2052: {\"onBasis\",\"onBasis\",NID_X9_62_onBasis,9,&(lvalues[4603]),0},",
          "2053: {\"tpBasis\",\"tpBasis\",NID_X9_62_tpBasis,9,&(lvalues[4612]),0},",
          "2054: {\"ppBasis\",\"ppBasis\",NID_X9_62_ppBasis,9,&(lvalues[4621]),0},",
          "2055: {\"c2pnb163v1\",\"c2pnb163v1\",NID_X9_62_c2pnb163v1,8,&(lvalues[4630]),0},",
          "2056: {\"c2pnb163v2\",\"c2pnb163v2\",NID_X9_62_c2pnb163v2,8,&(lvalues[4638]),0},",
          "2057: {\"c2pnb163v3\",\"c2pnb163v3\",NID_X9_62_c2pnb163v3,8,&(lvalues[4646]),0},",
          "2058: {\"c2pnb176v1\",\"c2pnb176v1\",NID_X9_62_c2pnb176v1,8,&(lvalues[4654]),0},",
          "2059: {\"c2tnb191v1\",\"c2tnb191v1\",NID_X9_62_c2tnb191v1,8,&(lvalues[4662]),0},",
          "2060: {\"c2tnb191v2\",\"c2tnb191v2\",NID_X9_62_c2tnb191v2,8,&(lvalues[4670]),0},",
          "2061: {\"c2tnb191v3\",\"c2tnb191v3\",NID_X9_62_c2tnb191v3,8,&(lvalues[4678]),0},",
          "2062: {\"c2onb191v4\",\"c2onb191v4\",NID_X9_62_c2onb191v4,8,&(lvalues[4686]),0},",
          "2063: {\"c2onb191v5\",\"c2onb191v5\",NID_X9_62_c2onb191v5,8,&(lvalues[4694]),0},",
          "2064: {\"c2pnb208w1\",\"c2pnb208w1\",NID_X9_62_c2pnb208w1,8,&(lvalues[4702]),0},",
          "2065: {\"c2tnb239v1\",\"c2tnb239v1\",NID_X9_62_c2tnb239v1,8,&(lvalues[4710]),0},",
          "2066: {\"c2tnb239v2\",\"c2tnb239v2\",NID_X9_62_c2tnb239v2,8,&(lvalues[4718]),0},",
          "2067: {\"c2tnb239v3\",\"c2tnb239v3\",NID_X9_62_c2tnb239v3,8,&(lvalues[4726]),0},",
          "2068: {\"c2onb239v4\",\"c2onb239v4\",NID_X9_62_c2onb239v4,8,&(lvalues[4734]),0},",
          "2069: {\"c2onb239v5\",\"c2onb239v5\",NID_X9_62_c2onb239v5,8,&(lvalues[4742]),0},",
          "2070: {\"c2pnb272w1\",\"c2pnb272w1\",NID_X9_62_c2pnb272w1,8,&(lvalues[4750]),0},",
          "2071: {\"c2pnb304w1\",\"c2pnb304w1\",NID_X9_62_c2pnb304w1,8,&(lvalues[4758]),0},",
          "2072: {\"c2tnb359v1\",\"c2tnb359v1\",NID_X9_62_c2tnb359v1,8,&(lvalues[4766]),0},",
          "2073: {\"c2pnb368w1\",\"c2pnb368w1\",NID_X9_62_c2pnb368w1,8,&(lvalues[4774]),0},",
          "2074: {\"c2tnb431r1\",\"c2tnb431r1\",NID_X9_62_c2tnb431r1,8,&(lvalues[4782]),0},",
          "2075: {\"secp112r1\",\"secp112r1\",NID_secp112r1,5,&(lvalues[4790]),0},",
          "2076: {\"secp112r2\",\"secp112r2\",NID_secp112r2,5,&(lvalues[4795]),0},",
          "2077: {\"secp128r1\",\"secp128r1\",NID_secp128r1,5,&(lvalues[4800]),0},",
          "2078: {\"secp128r2\",\"secp128r2\",NID_secp128r2,5,&(lvalues[4805]),0},",
          "2079: {\"secp160k1\",\"secp160k1\",NID_secp160k1,5,&(lvalues[4810]),0},",
          "2080: {\"secp160r1\",\"secp160r1\",NID_secp160r1,5,&(lvalues[4815]),0},",
          "2081: {\"secp160r2\",\"secp160r2\",NID_secp160r2,5,&(lvalues[4820]),0},",
          "2082: {\"secp192k1\",\"secp192k1\",NID_secp192k1,5,&(lvalues[4825]),0},",
          "2083: {\"secp224k1\",\"secp224k1\",NID_secp224k1,5,&(lvalues[4830]),0},",
          "2084: {\"secp224r1\",\"secp224r1\",NID_secp224r1,5,&(lvalues[4835]),0},",
          "2085: {\"secp256k1\",\"secp256k1\",NID_secp256k1,5,&(lvalues[4840]),0},",
          "2086: {\"secp384r1\",\"secp384r1\",NID_secp384r1,5,&(lvalues[4845]),0},",
          "2087: {\"secp521r1\",\"secp521r1\",NID_secp521r1,5,&(lvalues[4850]),0},",
          "2088: {\"sect113r1\",\"sect113r1\",NID_sect113r1,5,&(lvalues[4855]),0},",
          "2089: {\"sect113r2\",\"sect113r2\",NID_sect113r2,5,&(lvalues[4860]),0},",
          "2090: {\"sect131r1\",\"sect131r1\",NID_sect131r1,5,&(lvalues[4865]),0},",
          "2091: {\"sect131r2\",\"sect131r2\",NID_sect131r2,5,&(lvalues[4870]),0},",
          "2092: {\"sect163k1\",\"sect163k1\",NID_sect163k1,5,&(lvalues[4875]),0},",
          "2093: {\"sect163r1\",\"sect163r1\",NID_sect163r1,5,&(lvalues[4880]),0},",
          "2094: {\"sect163r2\",\"sect163r2\",NID_sect163r2,5,&(lvalues[4885]),0},",
          "2095: {\"sect193r1\",\"sect193r1\",NID_sect193r1,5,&(lvalues[4890]),0},",
          "2096: {\"sect193r2\",\"sect193r2\",NID_sect193r2,5,&(lvalues[4895]),0},",
          "2097: {\"sect233k1\",\"sect233k1\",NID_sect233k1,5,&(lvalues[4900]),0},",
          "2098: {\"sect233r1\",\"sect233r1\",NID_sect233r1,5,&(lvalues[4905]),0},",
          "2099: {\"sect239k1\",\"sect239k1\",NID_sect239k1,5,&(lvalues[4910]),0},",
          "2100: {\"sect283k1\",\"sect283k1\",NID_sect283k1,5,&(lvalues[4915]),0},",
          "2101: {\"sect283r1\",\"sect283r1\",NID_sect283r1,5,&(lvalues[4920]),0},",
          "2102: {\"sect409k1\",\"sect409k1\",NID_sect409k1,5,&(lvalues[4925]),0},",
          "2103: {\"sect409r1\",\"sect409r1\",NID_sect409r1,5,&(lvalues[4930]),0},",
          "2104: {\"sect571k1\",\"sect571k1\",NID_sect571k1,5,&(lvalues[4935]),0},",
          "2105: {\"sect571r1\",\"sect571r1\",NID_sect571r1,5,&(lvalues[4940]),0},",
          "2107:  NID_wap_wsg_idm_ecid_wtls1,5,&(lvalues[4945]),0},",
          "2109:  NID_wap_wsg_idm_ecid_wtls3,5,&(lvalues[4950]),0},",
          "2111:  NID_wap_wsg_idm_ecid_wtls4,5,&(lvalues[4955]),0},",
          "2113:  NID_wap_wsg_idm_ecid_wtls5,5,&(lvalues[4960]),0},",
          "2115:  NID_wap_wsg_idm_ecid_wtls6,5,&(lvalues[4965]),0},",
          "2117:  NID_wap_wsg_idm_ecid_wtls7,5,&(lvalues[4970]),0},",
          "2119:  NID_wap_wsg_idm_ecid_wtls8,5,&(lvalues[4975]),0},",
          "2121:  NID_wap_wsg_idm_ecid_wtls9,5,&(lvalues[4980]),0},",
          "2123:  NID_wap_wsg_idm_ecid_wtls10,5,&(lvalues[4985]),0},",
          "2125:  NID_wap_wsg_idm_ecid_wtls11,5,&(lvalues[4990]),0},",
          "2127:  NID_wap_wsg_idm_ecid_wtls12,5,&(lvalues[4995]),0},",
          "2128: {\"anyPolicy\",\"X509v3 Any Policy\",NID_any_policy,4,&(lvalues[5000]),0},",
          "2130:  &(lvalues[5004]),0},",
          "2132:  NID_inhibit_any_policy,3,&(lvalues[5007]),0},",
          "2136:  &(lvalues[5010]),0},",
          "2138:  &(lvalues[5021]),0},",
          "2140:  &(lvalues[5032]),0},",
          "2142:  &(lvalues[5043]),0},",
          "2144:  &(lvalues[5051]),0},",
          "2146:  &(lvalues[5059]),0},",
          "2148:  &(lvalues[5067]),0},",
          "2150:  &(lvalues[5075]),0},",
          "2152:  &(lvalues[5083]),0},",
          "",
          "[Added Lines]",
          "2020: {\"street\",\"streetAddress\",NID_streetAddress,3,&(lvalues[4460]),0},",
          "2021: {\"postalCode\",\"postalCode\",NID_postalCode,3,&(lvalues[4463]),0},",
          "2022: {\"id-ppl\",\"id-ppl\",NID_id_ppl,7,&(lvalues[4466]),0},",
          "2024:  &(lvalues[4473]),0},",
          "2026:  &(lvalues[4481]),0},",
          "2028:  &(lvalues[4489]),0},",
          "2030:  &(lvalues[4497]),0},",
          "2031: {\"id-ppl-independent\",\"Independent\",NID_Independent,8,&(lvalues[4500]),0},",
          "2033:  &(lvalues[4508]),0},",
          "2035:  &(lvalues[4517]),0},",
          "2037:  &(lvalues[4526]),0},",
          "2039:  &(lvalues[4535]),0},",
          "2040: {\"SHA256\",\"sha256\",NID_sha256,9,&(lvalues[4544]),0},",
          "2041: {\"SHA384\",\"sha384\",NID_sha384,9,&(lvalues[4553]),0},",
          "2042: {\"SHA512\",\"sha512\",NID_sha512,9,&(lvalues[4562]),0},",
          "2043: {\"SHA224\",\"sha224\",NID_sha224,9,&(lvalues[4571]),0},",
          "2045:  NID_identified_organization,1,&(lvalues[4580]),0},",
          "2046: {\"certicom-arc\",\"certicom-arc\",NID_certicom_arc,3,&(lvalues[4581]),0},",
          "2047: {\"wap\",\"wap\",NID_wap,2,&(lvalues[4584]),0},",
          "2048: {\"wap-wsg\",\"wap-wsg\",NID_wap_wsg,3,&(lvalues[4586]),0},",
          "2050:  NID_X9_62_id_characteristic_two_basis,8,&(lvalues[4589]),0},",
          "2051: {\"onBasis\",\"onBasis\",NID_X9_62_onBasis,9,&(lvalues[4597]),0},",
          "2052: {\"tpBasis\",\"tpBasis\",NID_X9_62_tpBasis,9,&(lvalues[4606]),0},",
          "2053: {\"ppBasis\",\"ppBasis\",NID_X9_62_ppBasis,9,&(lvalues[4615]),0},",
          "2054: {\"c2pnb163v1\",\"c2pnb163v1\",NID_X9_62_c2pnb163v1,8,&(lvalues[4624]),0},",
          "2055: {\"c2pnb163v2\",\"c2pnb163v2\",NID_X9_62_c2pnb163v2,8,&(lvalues[4632]),0},",
          "2056: {\"c2pnb163v3\",\"c2pnb163v3\",NID_X9_62_c2pnb163v3,8,&(lvalues[4640]),0},",
          "2057: {\"c2pnb176v1\",\"c2pnb176v1\",NID_X9_62_c2pnb176v1,8,&(lvalues[4648]),0},",
          "2058: {\"c2tnb191v1\",\"c2tnb191v1\",NID_X9_62_c2tnb191v1,8,&(lvalues[4656]),0},",
          "2059: {\"c2tnb191v2\",\"c2tnb191v2\",NID_X9_62_c2tnb191v2,8,&(lvalues[4664]),0},",
          "2060: {\"c2tnb191v3\",\"c2tnb191v3\",NID_X9_62_c2tnb191v3,8,&(lvalues[4672]),0},",
          "2061: {\"c2onb191v4\",\"c2onb191v4\",NID_X9_62_c2onb191v4,8,&(lvalues[4680]),0},",
          "2062: {\"c2onb191v5\",\"c2onb191v5\",NID_X9_62_c2onb191v5,8,&(lvalues[4688]),0},",
          "2063: {\"c2pnb208w1\",\"c2pnb208w1\",NID_X9_62_c2pnb208w1,8,&(lvalues[4696]),0},",
          "2064: {\"c2tnb239v1\",\"c2tnb239v1\",NID_X9_62_c2tnb239v1,8,&(lvalues[4704]),0},",
          "2065: {\"c2tnb239v2\",\"c2tnb239v2\",NID_X9_62_c2tnb239v2,8,&(lvalues[4712]),0},",
          "2066: {\"c2tnb239v3\",\"c2tnb239v3\",NID_X9_62_c2tnb239v3,8,&(lvalues[4720]),0},",
          "2067: {\"c2onb239v4\",\"c2onb239v4\",NID_X9_62_c2onb239v4,8,&(lvalues[4728]),0},",
          "2068: {\"c2onb239v5\",\"c2onb239v5\",NID_X9_62_c2onb239v5,8,&(lvalues[4736]),0},",
          "2069: {\"c2pnb272w1\",\"c2pnb272w1\",NID_X9_62_c2pnb272w1,8,&(lvalues[4744]),0},",
          "2070: {\"c2pnb304w1\",\"c2pnb304w1\",NID_X9_62_c2pnb304w1,8,&(lvalues[4752]),0},",
          "2071: {\"c2tnb359v1\",\"c2tnb359v1\",NID_X9_62_c2tnb359v1,8,&(lvalues[4760]),0},",
          "2072: {\"c2pnb368w1\",\"c2pnb368w1\",NID_X9_62_c2pnb368w1,8,&(lvalues[4768]),0},",
          "2073: {\"c2tnb431r1\",\"c2tnb431r1\",NID_X9_62_c2tnb431r1,8,&(lvalues[4776]),0},",
          "2074: {\"secp112r1\",\"secp112r1\",NID_secp112r1,5,&(lvalues[4784]),0},",
          "2075: {\"secp112r2\",\"secp112r2\",NID_secp112r2,5,&(lvalues[4789]),0},",
          "2076: {\"secp128r1\",\"secp128r1\",NID_secp128r1,5,&(lvalues[4794]),0},",
          "2077: {\"secp128r2\",\"secp128r2\",NID_secp128r2,5,&(lvalues[4799]),0},",
          "2078: {\"secp160k1\",\"secp160k1\",NID_secp160k1,5,&(lvalues[4804]),0},",
          "2079: {\"secp160r1\",\"secp160r1\",NID_secp160r1,5,&(lvalues[4809]),0},",
          "2080: {\"secp160r2\",\"secp160r2\",NID_secp160r2,5,&(lvalues[4814]),0},",
          "2081: {\"secp192k1\",\"secp192k1\",NID_secp192k1,5,&(lvalues[4819]),0},",
          "2082: {\"secp224k1\",\"secp224k1\",NID_secp224k1,5,&(lvalues[4824]),0},",
          "2083: {\"secp224r1\",\"secp224r1\",NID_secp224r1,5,&(lvalues[4829]),0},",
          "2084: {\"secp256k1\",\"secp256k1\",NID_secp256k1,5,&(lvalues[4834]),0},",
          "2085: {\"secp384r1\",\"secp384r1\",NID_secp384r1,5,&(lvalues[4839]),0},",
          "2086: {\"secp521r1\",\"secp521r1\",NID_secp521r1,5,&(lvalues[4844]),0},",
          "2087: {\"sect113r1\",\"sect113r1\",NID_sect113r1,5,&(lvalues[4849]),0},",
          "2088: {\"sect113r2\",\"sect113r2\",NID_sect113r2,5,&(lvalues[4854]),0},",
          "2089: {\"sect131r1\",\"sect131r1\",NID_sect131r1,5,&(lvalues[4859]),0},",
          "2090: {\"sect131r2\",\"sect131r2\",NID_sect131r2,5,&(lvalues[4864]),0},",
          "2091: {\"sect163k1\",\"sect163k1\",NID_sect163k1,5,&(lvalues[4869]),0},",
          "2092: {\"sect163r1\",\"sect163r1\",NID_sect163r1,5,&(lvalues[4874]),0},",
          "2093: {\"sect163r2\",\"sect163r2\",NID_sect163r2,5,&(lvalues[4879]),0},",
          "2094: {\"sect193r1\",\"sect193r1\",NID_sect193r1,5,&(lvalues[4884]),0},",
          "2095: {\"sect193r2\",\"sect193r2\",NID_sect193r2,5,&(lvalues[4889]),0},",
          "2096: {\"sect233k1\",\"sect233k1\",NID_sect233k1,5,&(lvalues[4894]),0},",
          "2097: {\"sect233r1\",\"sect233r1\",NID_sect233r1,5,&(lvalues[4899]),0},",
          "2098: {\"sect239k1\",\"sect239k1\",NID_sect239k1,5,&(lvalues[4904]),0},",
          "2099: {\"sect283k1\",\"sect283k1\",NID_sect283k1,5,&(lvalues[4909]),0},",
          "2100: {\"sect283r1\",\"sect283r1\",NID_sect283r1,5,&(lvalues[4914]),0},",
          "2101: {\"sect409k1\",\"sect409k1\",NID_sect409k1,5,&(lvalues[4919]),0},",
          "2102: {\"sect409r1\",\"sect409r1\",NID_sect409r1,5,&(lvalues[4924]),0},",
          "2103: {\"sect571k1\",\"sect571k1\",NID_sect571k1,5,&(lvalues[4929]),0},",
          "2104: {\"sect571r1\",\"sect571r1\",NID_sect571r1,5,&(lvalues[4934]),0},",
          "2106:  NID_wap_wsg_idm_ecid_wtls1,5,&(lvalues[4939]),0},",
          "2108:  NID_wap_wsg_idm_ecid_wtls3,5,&(lvalues[4944]),0},",
          "2110:  NID_wap_wsg_idm_ecid_wtls4,5,&(lvalues[4949]),0},",
          "2112:  NID_wap_wsg_idm_ecid_wtls5,5,&(lvalues[4954]),0},",
          "2114:  NID_wap_wsg_idm_ecid_wtls6,5,&(lvalues[4959]),0},",
          "2116:  NID_wap_wsg_idm_ecid_wtls7,5,&(lvalues[4964]),0},",
          "2118:  NID_wap_wsg_idm_ecid_wtls8,5,&(lvalues[4969]),0},",
          "2120:  NID_wap_wsg_idm_ecid_wtls9,5,&(lvalues[4974]),0},",
          "2122:  NID_wap_wsg_idm_ecid_wtls10,5,&(lvalues[4979]),0},",
          "2124:  NID_wap_wsg_idm_ecid_wtls11,5,&(lvalues[4984]),0},",
          "2126:  NID_wap_wsg_idm_ecid_wtls12,5,&(lvalues[4989]),0},",
          "2127: {\"anyPolicy\",\"X509v3 Any Policy\",NID_any_policy,4,&(lvalues[4994]),0},",
          "2129:  &(lvalues[4998]),0},",
          "2131:  NID_inhibit_any_policy,3,&(lvalues[5001]),0},",
          "2135:  &(lvalues[5004]),0},",
          "2137:  &(lvalues[5015]),0},",
          "2139:  &(lvalues[5026]),0},",
          "2141:  &(lvalues[5037]),0},",
          "2143:  &(lvalues[5045]),0},",
          "2145:  &(lvalues[5053]),0},",
          "2147:  &(lvalues[5061]),0},",
          "2149:  &(lvalues[5069]),0},",
          "2151:  &(lvalues[5077]),0},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2157: {\"CAMELLIA-192-CFB8\",\"camellia-192-cfb8\",NID_camellia_192_cfb8,0,NULL,0},",
          "2158: {\"CAMELLIA-256-CFB8\",\"camellia-256-cfb8\",NID_camellia_256_cfb8,0,NULL,0},",
          "2159: {\"CAMELLIA-128-OFB\",\"camellia-128-ofb\",NID_camellia_128_ofb128,8,",
          "2161: {\"CAMELLIA-192-OFB\",\"camellia-192-ofb\",NID_camellia_192_ofb128,8,",
          "2163: {\"CAMELLIA-256-OFB\",\"camellia-256-ofb\",NID_camellia_256_ofb128,8,",
          "2165: {\"subjectDirectoryAttributes\",\"X509v3 Subject Directory Attributes\",",
          "2167: {\"issuingDistributionPoint\",\"X509v3 Issuing Distribution Point\",",
          "2169: {\"certificateIssuer\",\"X509v3 Certificate Issuer\",",
          "2171: {NULL,NULL,NID_undef,0,NULL,0},",
          "2173: {NULL,NULL,NID_undef,0,NULL,0},",
          "2174: {NULL,NULL,NID_undef,0,NULL,0},",
          "2181: {\"id-PasswordBasedMAC\",\"password based MAC\",NID_id_PasswordBasedMAC,9,",
          "2183: {\"id-DHBasedMac\",\"Diffie-Hellman based MAC\",NID_id_DHBasedMac,9,",
          "2185: {\"id-it-suppLangTags\",\"id-it-suppLangTags\",NID_id_it_suppLangTags,8,",
          "2188: {\"id-smime-ct-compressedData\",\"id-smime-ct-compressedData\",",
          "2190: {\"id-ct-asciiTextWithCRLF\",\"id-ct-asciiTextWithCRLF\",",
          "2192: {\"id-aes128-wrap\",\"id-aes128-wrap\",NID_id_aes128_wrap,9,",
          "2194: {\"id-aes192-wrap\",\"id-aes192-wrap\",NID_id_aes192_wrap,9,",
          "2196: {\"id-aes256-wrap\",\"id-aes256-wrap\",NID_id_aes256_wrap,9,",
          "2198: {\"ecdsa-with-Recommended\",\"ecdsa-with-Recommended\",",
          "2200: {\"ecdsa-with-Specified\",\"ecdsa-with-Specified\",",
          "2202: {\"ecdsa-with-SHA224\",\"ecdsa-with-SHA224\",NID_ecdsa_with_SHA224,8,",
          "2204: {\"ecdsa-with-SHA256\",\"ecdsa-with-SHA256\",NID_ecdsa_with_SHA256,8,",
          "2206: {\"ecdsa-with-SHA384\",\"ecdsa-with-SHA384\",NID_ecdsa_with_SHA384,8,",
          "2208: {\"ecdsa-with-SHA512\",\"ecdsa-with-SHA512\",NID_ecdsa_with_SHA512,8,",
          "2211: {\"hmacWithSHA224\",\"hmacWithSHA224\",NID_hmacWithSHA224,8,",
          "2213: {\"hmacWithSHA256\",\"hmacWithSHA256\",NID_hmacWithSHA256,8,",
          "2215: {\"hmacWithSHA384\",\"hmacWithSHA384\",NID_hmacWithSHA384,8,",
          "2217: {\"hmacWithSHA512\",\"hmacWithSHA512\",NID_hmacWithSHA512,8,",
          "2219: {\"dsa_with_SHA224\",\"dsa_with_SHA224\",NID_dsa_with_SHA224,9,",
          "2221: {\"dsa_with_SHA256\",\"dsa_with_SHA256\",NID_dsa_with_SHA256,9,",
          "2226: {\"id-GostR3411-94-with-GostR3410-2001\",",
          "2227:  \"GOST R 34.11-94 with GOST R 34.10-2001\",",
          "2229: {\"id-GostR3411-94-with-GostR3410-94\",",
          "2230:  \"GOST R 34.11-94 with GOST R 34.10-94\",",
          "2233: {\"id-HMACGostR3411-94\",\"HMAC GOST 34.11-94\",NID_id_HMACGostR3411_94,6,",
          "2235: {\"gost2001\",\"GOST R 34.10-2001\",NID_id_GostR3410_2001,6,",
          "2239: {\"gost89-cnt\",\"gost89-cnt\",NID_gost89_cnt,0,NULL,0},",
          "2240: {\"gost-mac\",\"GOST 28147-89 MAC\",NID_id_Gost28147_89_MAC,6,",
          "2242: {\"prf-gostr3411-94\",\"GOST R 34.11-94 PRF\",NID_id_GostR3411_94_prf,6,",
          "2244: {\"id-GostR3410-2001DH\",\"GOST R 34.10-2001 DH\",NID_id_GostR3410_2001DH,",
          "2246: {\"id-GostR3410-94DH\",\"GOST R 34.10-94 DH\",NID_id_GostR3410_94DH,6,",
          "2248: {\"id-Gost28147-89-CryptoPro-KeyMeshing\",",
          "2249:  \"id-Gost28147-89-CryptoPro-KeyMeshing\",",
          "2251: {\"id-Gost28147-89-None-KeyMeshing\",\"id-Gost28147-89-None-KeyMeshing\",",
          "2253: {\"id-GostR3411-94-TestParamSet\",\"id-GostR3411-94-TestParamSet\",",
          "2255: {\"id-GostR3411-94-CryptoProParamSet\",",
          "2256:  \"id-GostR3411-94-CryptoProParamSet\",",
          "2258: {\"id-Gost28147-89-TestParamSet\",\"id-Gost28147-89-TestParamSet\",",
          "2260: {\"id-Gost28147-89-CryptoPro-A-ParamSet\",",
          "2261:  \"id-Gost28147-89-CryptoPro-A-ParamSet\",",
          "2263: {\"id-Gost28147-89-CryptoPro-B-ParamSet\",",
          "2264:  \"id-Gost28147-89-CryptoPro-B-ParamSet\",",
          "2266: {\"id-Gost28147-89-CryptoPro-C-ParamSet\",",
          "2267:  \"id-Gost28147-89-CryptoPro-C-ParamSet\",",
          "2269: {\"id-Gost28147-89-CryptoPro-D-ParamSet\",",
          "2270:  \"id-Gost28147-89-CryptoPro-D-ParamSet\",",
          "2272: {\"id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet\",",
          "2273:  \"id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet\",",
          "2275:  0},",
          "2276: {\"id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet\",",
          "2277:  \"id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet\",",
          "2279:  0},",
          "2280: {\"id-Gost28147-89-CryptoPro-RIC-1-ParamSet\",",
          "2281:  \"id-Gost28147-89-CryptoPro-RIC-1-ParamSet\",",
          "2283: {\"id-GostR3410-94-TestParamSet\",\"id-GostR3410-94-TestParamSet\",",
          "2285: {\"id-GostR3410-94-CryptoPro-A-ParamSet\",",
          "2286:  \"id-GostR3410-94-CryptoPro-A-ParamSet\",",
          "2288: {\"id-GostR3410-94-CryptoPro-B-ParamSet\",",
          "2289:  \"id-GostR3410-94-CryptoPro-B-ParamSet\",",
          "2291: {\"id-GostR3410-94-CryptoPro-C-ParamSet\",",
          "2292:  \"id-GostR3410-94-CryptoPro-C-ParamSet\",",
          "2294: {\"id-GostR3410-94-CryptoPro-D-ParamSet\",",
          "2295:  \"id-GostR3410-94-CryptoPro-D-ParamSet\",",
          "2297: {\"id-GostR3410-94-CryptoPro-XchA-ParamSet\",",
          "2298:  \"id-GostR3410-94-CryptoPro-XchA-ParamSet\",",
          "2300: {\"id-GostR3410-94-CryptoPro-XchB-ParamSet\",",
          "2301:  \"id-GostR3410-94-CryptoPro-XchB-ParamSet\",",
          "2303: {\"id-GostR3410-94-CryptoPro-XchC-ParamSet\",",
          "2304:  \"id-GostR3410-94-CryptoPro-XchC-ParamSet\",",
          "2306: {\"id-GostR3410-2001-TestParamSet\",\"id-GostR3410-2001-TestParamSet\",",
          "2308: {\"id-GostR3410-2001-CryptoPro-A-ParamSet\",",
          "2309:  \"id-GostR3410-2001-CryptoPro-A-ParamSet\",",
          "2311: {\"id-GostR3410-2001-CryptoPro-B-ParamSet\",",
          "2312:  \"id-GostR3410-2001-CryptoPro-B-ParamSet\",",
          "2314: {\"id-GostR3410-2001-CryptoPro-C-ParamSet\",",
          "2315:  \"id-GostR3410-2001-CryptoPro-C-ParamSet\",",
          "2317: {\"id-GostR3410-2001-CryptoPro-XchA-ParamSet\",",
          "2318:  \"id-GostR3410-2001-CryptoPro-XchA-ParamSet\",",
          "2321: {\"id-GostR3410-2001-CryptoPro-XchB-ParamSet\",",
          "2322:  \"id-GostR3410-2001-CryptoPro-XchB-ParamSet\",",
          "2325: {\"id-GostR3410-94-a\",\"id-GostR3410-94-a\",NID_id_GostR3410_94_a,7,",
          "2327: {\"id-GostR3410-94-aBis\",\"id-GostR3410-94-aBis\",",
          "2329: {\"id-GostR3410-94-b\",\"id-GostR3410-94-b\",NID_id_GostR3410_94_b,7,",
          "2331: {\"id-GostR3410-94-bBis\",\"id-GostR3410-94-bBis\",",
          "2333: {\"id-Gost28147-89-cc\",\"GOST 28147-89 Cryptocom ParamSet\",",
          "2335: {\"gost94cc\",\"GOST 34.10-94 Cryptocom\",NID_id_GostR3410_94_cc,8,",
          "2337: {\"gost2001cc\",\"GOST 34.10-2001 Cryptocom\",NID_id_GostR3410_2001_cc,8,",
          "2339: {\"id-GostR3411-94-with-GostR3410-94-cc\",",
          "2340:  \"GOST R 34.11-94 with GOST R 34.10-94 Cryptocom\",",
          "2342: {\"id-GostR3411-94-with-GostR3410-2001-cc\",",
          "2343:  \"GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom\",",
          "2345: {\"id-GostR3410-2001-ParamSet-cc\",",
          "2346:  \"GOST R 3410-2001 Parameter Set Cryptocom\",",
          "2348: {\"HMAC\",\"hmac\",NID_hmac,0,NULL,0},",
          "2349: {\"LocalKeySet\",\"Microsoft Local Key set\",NID_LocalKeySet,9,",
          "2351: {\"freshestCRL\",\"X509v3 Freshest CRL\",NID_freshest_crl,3,",
          "2353: {\"id-on-permanentIdentifier\",\"Permanent Identifier\",",
          "2356: {\"businessCategory\",\"businessCategory\",NID_businessCategory,3,",
          "2360: {\"physicalDeliveryOfficeName\",\"physicalDeliveryOfficeName\",",
          "2362: {\"telephoneNumber\",\"telephoneNumber\",NID_telephoneNumber,3,",
          "2365: {\"teletexTerminalIdentifier\",\"teletexTerminalIdentifier\",",
          "2367: {\"facsimileTelephoneNumber\",\"facsimileTelephoneNumber\",",
          "2370: {\"internationaliSDNNumber\",\"internationaliSDNNumber\",",
          "2372: {\"registeredAddress\",\"registeredAddress\",NID_registeredAddress,3,",
          "2374: {\"destinationIndicator\",\"destinationIndicator\",",
          "2376: {\"preferredDeliveryMethod\",\"preferredDeliveryMethod\",",
          "2378: {\"presentationAddress\",\"presentationAddress\",NID_presentationAddress,",
          "2380: {\"supportedApplicationContext\",\"supportedApplicationContext\",",
          "2387: {\"userCertificate\",\"userCertificate\",NID_userCertificate,3,",
          "2390: {\"authorityRevocationList\",\"authorityRevocationList\",",
          "2392: {\"certificateRevocationList\",\"certificateRevocationList\",",
          "2394: {\"crossCertificatePair\",\"crossCertificatePair\",",
          "2396: {\"enhancedSearchGuide\",\"enhancedSearchGuide\",NID_enhancedSearchGuide,",
          "2398: {\"protocolInformation\",\"protocolInformation\",NID_protocolInformation,",
          "2400: {\"distinguishedName\",\"distinguishedName\",NID_distinguishedName,3,",
          "2403: {\"houseIdentifier\",\"houseIdentifier\",NID_houseIdentifier,3,",
          "2405: {\"supportedAlgorithms\",\"supportedAlgorithms\",NID_supportedAlgorithms,",
          "2407: {\"deltaRevocationList\",\"deltaRevocationList\",NID_deltaRevocationList,",
          "2410: {\"id-alg-PWRI-KEK\",\"id-alg-PWRI-KEK\",NID_id_alg_PWRI_KEK,11,",
          "2412: {\"CMAC\",\"cmac\",NID_cmac,0,NULL,0},",
          "2415: {\"id-aes128-wrap-pad\",\"id-aes128-wrap-pad\",NID_id_aes128_wrap_pad,9,",
          "2419: {\"id-aes192-wrap-pad\",\"id-aes192-wrap-pad\",NID_id_aes192_wrap_pad,9,",
          "2423: {\"id-aes256-wrap-pad\",\"id-aes256-wrap-pad\",NID_id_aes256_wrap_pad,9,",
          "2425: {\"AES-128-CTR\",\"aes-128-ctr\",NID_aes_128_ctr,0,NULL,0},",
          "2426: {\"AES-192-CTR\",\"aes-192-ctr\",NID_aes_192_ctr,0,NULL,0},",
          "2427: {\"AES-256-CTR\",\"aes-256-ctr\",NID_aes_256_ctr,0,NULL,0},",
          "2428: {\"id-camellia128-wrap\",\"id-camellia128-wrap\",NID_id_camellia128_wrap,",
          "2430: {\"id-camellia192-wrap\",\"id-camellia192-wrap\",NID_id_camellia192_wrap,",
          "2432: {\"id-camellia256-wrap\",\"id-camellia256-wrap\",NID_id_camellia256_wrap,",
          "2434: {\"anyExtendedKeyUsage\",\"Any Extended Key Usage\",",
          "2438: {\"AES-128-XTS\",\"aes-128-xts\",NID_aes_128_xts,0,NULL,0},",
          "2439: {\"AES-256-XTS\",\"aes-256-xts\",NID_aes_256_xts,0,NULL,0},",
          "2440: {\"RC4-HMAC-MD5\",\"rc4-hmac-md5\",NID_rc4_hmac_md5,0,NULL,0},",
          "",
          "[Removed Lines]",
          "2160:  &(lvalues[5091]),0},",
          "2162:  &(lvalues[5099]),0},",
          "2164:  &(lvalues[5107]),0},",
          "2166:  NID_subject_directory_attributes,3,&(lvalues[5115]),0},",
          "2168:  NID_issuing_distribution_point,3,&(lvalues[5118]),0},",
          "2170:  NID_certificate_issuer,3,&(lvalues[5121]),0},",
          "2172: {\"KISA\",\"kisa\",NID_kisa,6,&(lvalues[5124]),0},",
          "2175: {\"SEED-ECB\",\"seed-ecb\",NID_seed_ecb,8,&(lvalues[5130]),0},",
          "2176: {\"SEED-CBC\",\"seed-cbc\",NID_seed_cbc,8,&(lvalues[5138]),0},",
          "2177: {\"SEED-OFB\",\"seed-ofb\",NID_seed_ofb128,8,&(lvalues[5146]),0},",
          "2178: {\"SEED-CFB\",\"seed-cfb\",NID_seed_cfb128,8,&(lvalues[5154]),0},",
          "2179: {\"HMAC-MD5\",\"hmac-md5\",NID_hmac_md5,8,&(lvalues[5162]),0},",
          "2180: {\"HMAC-SHA1\",\"hmac-sha1\",NID_hmac_sha1,8,&(lvalues[5170]),0},",
          "2182:  &(lvalues[5178]),0},",
          "2184:  &(lvalues[5187]),0},",
          "2186:  &(lvalues[5196]),0},",
          "2187: {\"caRepository\",\"CA Repository\",NID_caRepository,8,&(lvalues[5204]),0},",
          "2189:  NID_id_smime_ct_compressedData,11,&(lvalues[5212]),0},",
          "2191:  NID_id_ct_asciiTextWithCRLF,11,&(lvalues[5223]),0},",
          "2193:  &(lvalues[5234]),0},",
          "2195:  &(lvalues[5243]),0},",
          "2197:  &(lvalues[5252]),0},",
          "2199:  NID_ecdsa_with_Recommended,7,&(lvalues[5261]),0},",
          "2201:  NID_ecdsa_with_Specified,7,&(lvalues[5268]),0},",
          "2203:  &(lvalues[5275]),0},",
          "2205:  &(lvalues[5283]),0},",
          "2207:  &(lvalues[5291]),0},",
          "2209:  &(lvalues[5299]),0},",
          "2210: {\"hmacWithMD5\",\"hmacWithMD5\",NID_hmacWithMD5,8,&(lvalues[5307]),0},",
          "2212:  &(lvalues[5315]),0},",
          "2214:  &(lvalues[5323]),0},",
          "2216:  &(lvalues[5331]),0},",
          "2218:  &(lvalues[5339]),0},",
          "2220:  &(lvalues[5347]),0},",
          "2222:  &(lvalues[5356]),0},",
          "2223: {\"whirlpool\",\"whirlpool\",NID_whirlpool,6,&(lvalues[5365]),0},",
          "2224: {\"cryptopro\",\"cryptopro\",NID_cryptopro,5,&(lvalues[5371]),0},",
          "2225: {\"cryptocom\",\"cryptocom\",NID_cryptocom,5,&(lvalues[5376]),0},",
          "2228:  NID_id_GostR3411_94_with_GostR3410_2001,6,&(lvalues[5381]),0},",
          "2231:  NID_id_GostR3411_94_with_GostR3410_94,6,&(lvalues[5387]),0},",
          "2232: {\"md_gost94\",\"GOST R 34.11-94\",NID_id_GostR3411_94,6,&(lvalues[5393]),0},",
          "2234:  &(lvalues[5399]),0},",
          "2236:  &(lvalues[5405]),0},",
          "2237: {\"gost94\",\"GOST R 34.10-94\",NID_id_GostR3410_94,6,&(lvalues[5411]),0},",
          "2238: {\"gost89\",\"GOST 28147-89\",NID_id_Gost28147_89,6,&(lvalues[5417]),0},",
          "2241:  &(lvalues[5423]),0},",
          "2243:  &(lvalues[5429]),0},",
          "2245:  6,&(lvalues[5435]),0},",
          "2247:  &(lvalues[5441]),0},",
          "2250:  NID_id_Gost28147_89_CryptoPro_KeyMeshing,7,&(lvalues[5447]),0},",
          "2252:  NID_id_Gost28147_89_None_KeyMeshing,7,&(lvalues[5454]),0},",
          "2254:  NID_id_GostR3411_94_TestParamSet,7,&(lvalues[5461]),0},",
          "2257:  NID_id_GostR3411_94_CryptoProParamSet,7,&(lvalues[5468]),0},",
          "2259:  NID_id_Gost28147_89_TestParamSet,7,&(lvalues[5475]),0},",
          "2262:  NID_id_Gost28147_89_CryptoPro_A_ParamSet,7,&(lvalues[5482]),0},",
          "2265:  NID_id_Gost28147_89_CryptoPro_B_ParamSet,7,&(lvalues[5489]),0},",
          "2268:  NID_id_Gost28147_89_CryptoPro_C_ParamSet,7,&(lvalues[5496]),0},",
          "2271:  NID_id_Gost28147_89_CryptoPro_D_ParamSet,7,&(lvalues[5503]),0},",
          "2274:  NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet,7,&(lvalues[5510]),",
          "2278:  NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet,7,&(lvalues[5517]),",
          "2282:  NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet,7,&(lvalues[5524]),0},",
          "2284:  NID_id_GostR3410_94_TestParamSet,7,&(lvalues[5531]),0},",
          "2287:  NID_id_GostR3410_94_CryptoPro_A_ParamSet,7,&(lvalues[5538]),0},",
          "2290:  NID_id_GostR3410_94_CryptoPro_B_ParamSet,7,&(lvalues[5545]),0},",
          "2293:  NID_id_GostR3410_94_CryptoPro_C_ParamSet,7,&(lvalues[5552]),0},",
          "2296:  NID_id_GostR3410_94_CryptoPro_D_ParamSet,7,&(lvalues[5559]),0},",
          "2299:  NID_id_GostR3410_94_CryptoPro_XchA_ParamSet,7,&(lvalues[5566]),0},",
          "2302:  NID_id_GostR3410_94_CryptoPro_XchB_ParamSet,7,&(lvalues[5573]),0},",
          "2305:  NID_id_GostR3410_94_CryptoPro_XchC_ParamSet,7,&(lvalues[5580]),0},",
          "2307:  NID_id_GostR3410_2001_TestParamSet,7,&(lvalues[5587]),0},",
          "2310:  NID_id_GostR3410_2001_CryptoPro_A_ParamSet,7,&(lvalues[5594]),0},",
          "2313:  NID_id_GostR3410_2001_CryptoPro_B_ParamSet,7,&(lvalues[5601]),0},",
          "2316:  NID_id_GostR3410_2001_CryptoPro_C_ParamSet,7,&(lvalues[5608]),0},",
          "2319:  NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet,7,&(lvalues[5615]),0},",
          "2323:  NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet,7,&(lvalues[5622]),0},",
          "2326:  &(lvalues[5629]),0},",
          "2328:  NID_id_GostR3410_94_aBis,7,&(lvalues[5636]),0},",
          "2330:  &(lvalues[5643]),0},",
          "2332:  NID_id_GostR3410_94_bBis,7,&(lvalues[5650]),0},",
          "2334:  NID_id_Gost28147_89_cc,8,&(lvalues[5657]),0},",
          "2336:  &(lvalues[5665]),0},",
          "2338:  &(lvalues[5673]),0},",
          "2341:  NID_id_GostR3411_94_with_GostR3410_94_cc,8,&(lvalues[5681]),0},",
          "2344:  NID_id_GostR3411_94_with_GostR3410_2001_cc,8,&(lvalues[5689]),0},",
          "2347:  NID_id_GostR3410_2001_ParamSet_cc,8,&(lvalues[5697]),0},",
          "2350:  &(lvalues[5705]),0},",
          "2352:  &(lvalues[5714]),0},",
          "2354:  NID_id_on_permanentIdentifier,8,&(lvalues[5717]),0},",
          "2355: {\"searchGuide\",\"searchGuide\",NID_searchGuide,3,&(lvalues[5725]),0},",
          "2357:  &(lvalues[5728]),0},",
          "2358: {\"postalAddress\",\"postalAddress\",NID_postalAddress,3,&(lvalues[5731]),0},",
          "2359: {\"postOfficeBox\",\"postOfficeBox\",NID_postOfficeBox,3,&(lvalues[5734]),0},",
          "2361:  NID_physicalDeliveryOfficeName,3,&(lvalues[5737]),0},",
          "2363:  &(lvalues[5740]),0},",
          "2364: {\"telexNumber\",\"telexNumber\",NID_telexNumber,3,&(lvalues[5743]),0},",
          "2366:  NID_teletexTerminalIdentifier,3,&(lvalues[5746]),0},",
          "2368:  NID_facsimileTelephoneNumber,3,&(lvalues[5749]),0},",
          "2369: {\"x121Address\",\"x121Address\",NID_x121Address,3,&(lvalues[5752]),0},",
          "2371:  NID_internationaliSDNNumber,3,&(lvalues[5755]),0},",
          "2373:  &(lvalues[5758]),0},",
          "2375:  NID_destinationIndicator,3,&(lvalues[5761]),0},",
          "2377:  NID_preferredDeliveryMethod,3,&(lvalues[5764]),0},",
          "2379:  3,&(lvalues[5767]),0},",
          "2381:  NID_supportedApplicationContext,3,&(lvalues[5770]),0},",
          "2382: {\"member\",\"member\",NID_member,3,&(lvalues[5773]),0},",
          "2383: {\"owner\",\"owner\",NID_owner,3,&(lvalues[5776]),0},",
          "2384: {\"roleOccupant\",\"roleOccupant\",NID_roleOccupant,3,&(lvalues[5779]),0},",
          "2385: {\"seeAlso\",\"seeAlso\",NID_seeAlso,3,&(lvalues[5782]),0},",
          "2386: {\"userPassword\",\"userPassword\",NID_userPassword,3,&(lvalues[5785]),0},",
          "2388:  &(lvalues[5788]),0},",
          "2389: {\"cACertificate\",\"cACertificate\",NID_cACertificate,3,&(lvalues[5791]),0},",
          "2391:  NID_authorityRevocationList,3,&(lvalues[5794]),0},",
          "2393:  NID_certificateRevocationList,3,&(lvalues[5797]),0},",
          "2395:  NID_crossCertificatePair,3,&(lvalues[5800]),0},",
          "2397:  3,&(lvalues[5803]),0},",
          "2399:  3,&(lvalues[5806]),0},",
          "2401:  &(lvalues[5809]),0},",
          "2402: {\"uniqueMember\",\"uniqueMember\",NID_uniqueMember,3,&(lvalues[5812]),0},",
          "2404:  &(lvalues[5815]),0},",
          "2406:  3,&(lvalues[5818]),0},",
          "2408:  3,&(lvalues[5821]),0},",
          "2409: {\"dmdName\",\"dmdName\",NID_dmdName,3,&(lvalues[5824]),0},",
          "2411:  &(lvalues[5827]),0},",
          "2413: {\"id-aes128-GCM\",\"aes-128-gcm\",NID_aes_128_gcm,9,&(lvalues[5838]),0},",
          "2414: {\"id-aes128-CCM\",\"aes-128-ccm\",NID_aes_128_ccm,9,&(lvalues[5847]),0},",
          "2416:  &(lvalues[5856]),0},",
          "2417: {\"id-aes192-GCM\",\"aes-192-gcm\",NID_aes_192_gcm,9,&(lvalues[5865]),0},",
          "2418: {\"id-aes192-CCM\",\"aes-192-ccm\",NID_aes_192_ccm,9,&(lvalues[5874]),0},",
          "2420:  &(lvalues[5883]),0},",
          "2421: {\"id-aes256-GCM\",\"aes-256-gcm\",NID_aes_256_gcm,9,&(lvalues[5892]),0},",
          "2422: {\"id-aes256-CCM\",\"aes-256-ccm\",NID_aes_256_ccm,9,&(lvalues[5901]),0},",
          "2424:  &(lvalues[5910]),0},",
          "2429:  11,&(lvalues[5919]),0},",
          "2431:  11,&(lvalues[5930]),0},",
          "2433:  11,&(lvalues[5941]),0},",
          "2435:  NID_anyExtendedKeyUsage,4,&(lvalues[5952]),0},",
          "2436: {\"MGF1\",\"mgf1\",NID_mgf1,9,&(lvalues[5956]),0},",
          "2437: {\"RSASSA-PSS\",\"rsassaPss\",NID_rsassaPss,9,&(lvalues[5965]),0},",
          "",
          "[Added Lines]",
          "2159:  &(lvalues[5085]),0},",
          "2161:  &(lvalues[5093]),0},",
          "2163:  &(lvalues[5101]),0},",
          "2165:  NID_subject_directory_attributes,3,&(lvalues[5109]),0},",
          "2167:  NID_issuing_distribution_point,3,&(lvalues[5112]),0},",
          "2169:  NID_certificate_issuer,3,&(lvalues[5115]),0},",
          "2171: {\"KISA\",\"kisa\",NID_kisa,6,&(lvalues[5118]),0},",
          "2174: {\"SEED-ECB\",\"seed-ecb\",NID_seed_ecb,8,&(lvalues[5124]),0},",
          "2175: {\"SEED-CBC\",\"seed-cbc\",NID_seed_cbc,8,&(lvalues[5132]),0},",
          "2176: {\"SEED-OFB\",\"seed-ofb\",NID_seed_ofb128,8,&(lvalues[5140]),0},",
          "2177: {\"SEED-CFB\",\"seed-cfb\",NID_seed_cfb128,8,&(lvalues[5148]),0},",
          "2178: {\"HMAC-MD5\",\"hmac-md5\",NID_hmac_md5,8,&(lvalues[5156]),0},",
          "2179: {\"HMAC-SHA1\",\"hmac-sha1\",NID_hmac_sha1,8,&(lvalues[5164]),0},",
          "2181:  &(lvalues[5172]),0},",
          "2183:  &(lvalues[5181]),0},",
          "2185:  &(lvalues[5190]),0},",
          "2186: {\"caRepository\",\"CA Repository\",NID_caRepository,8,&(lvalues[5198]),0},",
          "2188:  NID_id_smime_ct_compressedData,11,&(lvalues[5206]),0},",
          "2190:  NID_id_ct_asciiTextWithCRLF,11,&(lvalues[5217]),0},",
          "2192:  &(lvalues[5228]),0},",
          "2194:  &(lvalues[5237]),0},",
          "2196:  &(lvalues[5246]),0},",
          "2198:  NID_ecdsa_with_Recommended,7,&(lvalues[5255]),0},",
          "2200:  NID_ecdsa_with_Specified,7,&(lvalues[5262]),0},",
          "2202:  &(lvalues[5269]),0},",
          "2204:  &(lvalues[5277]),0},",
          "2206:  &(lvalues[5285]),0},",
          "2208:  &(lvalues[5293]),0},",
          "2209: {\"hmacWithMD5\",\"hmacWithMD5\",NID_hmacWithMD5,8,&(lvalues[5301]),0},",
          "2211:  &(lvalues[5309]),0},",
          "2213:  &(lvalues[5317]),0},",
          "2215:  &(lvalues[5325]),0},",
          "2217:  &(lvalues[5333]),0},",
          "2219:  &(lvalues[5341]),0},",
          "2221:  &(lvalues[5350]),0},",
          "2222: {\"whirlpool\",\"whirlpool\",NID_whirlpool,6,&(lvalues[5359]),0},",
          "2223: {\"cryptopro\",\"cryptopro\",NID_cryptopro,5,&(lvalues[5365]),0},",
          "2224: {\"cryptocom\",\"cryptocom\",NID_cryptocom,5,&(lvalues[5370]),0},",
          "2227:  NID_id_GostR3411_94_with_GostR3410_2001,6,&(lvalues[5375]),0},",
          "2230:  NID_id_GostR3411_94_with_GostR3410_94,6,&(lvalues[5381]),0},",
          "2231: {\"md_gost94\",\"GOST R 34.11-94\",NID_id_GostR3411_94,6,&(lvalues[5387]),0},",
          "2233:  &(lvalues[5393]),0},",
          "2235:  &(lvalues[5399]),0},",
          "2236: {\"gost94\",\"GOST R 34.10-94\",NID_id_GostR3410_94,6,&(lvalues[5405]),0},",
          "2237: {\"gost89\",\"GOST 28147-89\",NID_id_Gost28147_89,6,&(lvalues[5411]),0},",
          "2240:  &(lvalues[5417]),0},",
          "2242:  &(lvalues[5423]),0},",
          "2244:  6,&(lvalues[5429]),0},",
          "2246:  &(lvalues[5435]),0},",
          "2249:  NID_id_Gost28147_89_CryptoPro_KeyMeshing,7,&(lvalues[5441]),0},",
          "2251:  NID_id_Gost28147_89_None_KeyMeshing,7,&(lvalues[5448]),0},",
          "2253:  NID_id_GostR3411_94_TestParamSet,7,&(lvalues[5455]),0},",
          "2256:  NID_id_GostR3411_94_CryptoProParamSet,7,&(lvalues[5462]),0},",
          "2258:  NID_id_Gost28147_89_TestParamSet,7,&(lvalues[5469]),0},",
          "2261:  NID_id_Gost28147_89_CryptoPro_A_ParamSet,7,&(lvalues[5476]),0},",
          "2264:  NID_id_Gost28147_89_CryptoPro_B_ParamSet,7,&(lvalues[5483]),0},",
          "2267:  NID_id_Gost28147_89_CryptoPro_C_ParamSet,7,&(lvalues[5490]),0},",
          "2270:  NID_id_Gost28147_89_CryptoPro_D_ParamSet,7,&(lvalues[5497]),0},",
          "2273:  NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet,7,&(lvalues[5504]),",
          "2277:  NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet,7,&(lvalues[5511]),",
          "2281:  NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet,7,&(lvalues[5518]),0},",
          "2283:  NID_id_GostR3410_94_TestParamSet,7,&(lvalues[5525]),0},",
          "2286:  NID_id_GostR3410_94_CryptoPro_A_ParamSet,7,&(lvalues[5532]),0},",
          "2289:  NID_id_GostR3410_94_CryptoPro_B_ParamSet,7,&(lvalues[5539]),0},",
          "2292:  NID_id_GostR3410_94_CryptoPro_C_ParamSet,7,&(lvalues[5546]),0},",
          "2295:  NID_id_GostR3410_94_CryptoPro_D_ParamSet,7,&(lvalues[5553]),0},",
          "2298:  NID_id_GostR3410_94_CryptoPro_XchA_ParamSet,7,&(lvalues[5560]),0},",
          "2301:  NID_id_GostR3410_94_CryptoPro_XchB_ParamSet,7,&(lvalues[5567]),0},",
          "2304:  NID_id_GostR3410_94_CryptoPro_XchC_ParamSet,7,&(lvalues[5574]),0},",
          "2306:  NID_id_GostR3410_2001_TestParamSet,7,&(lvalues[5581]),0},",
          "2309:  NID_id_GostR3410_2001_CryptoPro_A_ParamSet,7,&(lvalues[5588]),0},",
          "2312:  NID_id_GostR3410_2001_CryptoPro_B_ParamSet,7,&(lvalues[5595]),0},",
          "2315:  NID_id_GostR3410_2001_CryptoPro_C_ParamSet,7,&(lvalues[5602]),0},",
          "2318:  NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet,7,&(lvalues[5609]),0},",
          "2322:  NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet,7,&(lvalues[5616]),0},",
          "2325:  &(lvalues[5623]),0},",
          "2327:  NID_id_GostR3410_94_aBis,7,&(lvalues[5630]),0},",
          "2329:  &(lvalues[5637]),0},",
          "2331:  NID_id_GostR3410_94_bBis,7,&(lvalues[5644]),0},",
          "2333:  NID_id_Gost28147_89_cc,8,&(lvalues[5651]),0},",
          "2335:  &(lvalues[5659]),0},",
          "2337:  &(lvalues[5667]),0},",
          "2340:  NID_id_GostR3411_94_with_GostR3410_94_cc,8,&(lvalues[5675]),0},",
          "2343:  NID_id_GostR3411_94_with_GostR3410_2001_cc,8,&(lvalues[5683]),0},",
          "2346:  NID_id_GostR3410_2001_ParamSet_cc,8,&(lvalues[5691]),0},",
          "2349:  &(lvalues[5699]),0},",
          "2351:  &(lvalues[5708]),0},",
          "2353:  NID_id_on_permanentIdentifier,8,&(lvalues[5711]),0},",
          "2354: {\"searchGuide\",\"searchGuide\",NID_searchGuide,3,&(lvalues[5719]),0},",
          "2356:  &(lvalues[5722]),0},",
          "2357: {\"postalAddress\",\"postalAddress\",NID_postalAddress,3,&(lvalues[5725]),0},",
          "2358: {\"postOfficeBox\",\"postOfficeBox\",NID_postOfficeBox,3,&(lvalues[5728]),0},",
          "2360:  NID_physicalDeliveryOfficeName,3,&(lvalues[5731]),0},",
          "2362:  &(lvalues[5734]),0},",
          "2363: {\"telexNumber\",\"telexNumber\",NID_telexNumber,3,&(lvalues[5737]),0},",
          "2365:  NID_teletexTerminalIdentifier,3,&(lvalues[5740]),0},",
          "2367:  NID_facsimileTelephoneNumber,3,&(lvalues[5743]),0},",
          "2368: {\"x121Address\",\"x121Address\",NID_x121Address,3,&(lvalues[5746]),0},",
          "2370:  NID_internationaliSDNNumber,3,&(lvalues[5749]),0},",
          "2372:  &(lvalues[5752]),0},",
          "2374:  NID_destinationIndicator,3,&(lvalues[5755]),0},",
          "2376:  NID_preferredDeliveryMethod,3,&(lvalues[5758]),0},",
          "2378:  3,&(lvalues[5761]),0},",
          "2380:  NID_supportedApplicationContext,3,&(lvalues[5764]),0},",
          "2381: {\"member\",\"member\",NID_member,3,&(lvalues[5767]),0},",
          "2382: {\"owner\",\"owner\",NID_owner,3,&(lvalues[5770]),0},",
          "2383: {\"roleOccupant\",\"roleOccupant\",NID_roleOccupant,3,&(lvalues[5773]),0},",
          "2384: {\"seeAlso\",\"seeAlso\",NID_seeAlso,3,&(lvalues[5776]),0},",
          "2385: {\"userPassword\",\"userPassword\",NID_userPassword,3,&(lvalues[5779]),0},",
          "2387:  &(lvalues[5782]),0},",
          "2388: {\"cACertificate\",\"cACertificate\",NID_cACertificate,3,&(lvalues[5785]),0},",
          "2390:  NID_authorityRevocationList,3,&(lvalues[5788]),0},",
          "2392:  NID_certificateRevocationList,3,&(lvalues[5791]),0},",
          "2394:  NID_crossCertificatePair,3,&(lvalues[5794]),0},",
          "2396:  3,&(lvalues[5797]),0},",
          "2398:  3,&(lvalues[5800]),0},",
          "2400:  &(lvalues[5803]),0},",
          "2401: {\"uniqueMember\",\"uniqueMember\",NID_uniqueMember,3,&(lvalues[5806]),0},",
          "2403:  &(lvalues[5809]),0},",
          "2405:  3,&(lvalues[5812]),0},",
          "2407:  3,&(lvalues[5815]),0},",
          "2408: {\"dmdName\",\"dmdName\",NID_dmdName,3,&(lvalues[5818]),0},",
          "2410:  &(lvalues[5821]),0},",
          "2412: {\"id-aes128-GCM\",\"aes-128-gcm\",NID_aes_128_gcm,9,&(lvalues[5832]),0},",
          "2413: {\"id-aes128-CCM\",\"aes-128-ccm\",NID_aes_128_ccm,9,&(lvalues[5841]),0},",
          "2415:  &(lvalues[5850]),0},",
          "2416: {\"id-aes192-GCM\",\"aes-192-gcm\",NID_aes_192_gcm,9,&(lvalues[5859]),0},",
          "2417: {\"id-aes192-CCM\",\"aes-192-ccm\",NID_aes_192_ccm,9,&(lvalues[5868]),0},",
          "2419:  &(lvalues[5877]),0},",
          "2420: {\"id-aes256-GCM\",\"aes-256-gcm\",NID_aes_256_gcm,9,&(lvalues[5886]),0},",
          "2421: {\"id-aes256-CCM\",\"aes-256-ccm\",NID_aes_256_ccm,9,&(lvalues[5895]),0},",
          "2423:  &(lvalues[5904]),0},",
          "2428:  11,&(lvalues[5913]),0},",
          "2430:  11,&(lvalues[5924]),0},",
          "2432:  11,&(lvalues[5935]),0},",
          "2434:  NID_anyExtendedKeyUsage,4,&(lvalues[5946]),0},",
          "2435: {\"MGF1\",\"mgf1\",NID_mgf1,9,&(lvalues[5950]),0},",
          "2436: {\"RSASSA-PSS\",\"rsassaPss\",NID_rsassaPss,9,&(lvalues[5959]),0},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2444:  NID_aes_192_cbc_hmac_sha1,0,NULL,0},",
          "2445: {\"AES-256-CBC-HMAC-SHA1\",\"aes-256-cbc-hmac-sha1\",",
          "2446:  NID_aes_256_cbc_hmac_sha1,0,NULL,0},",
          "2449: {\"brainpoolP160r1\",\"brainpoolP160r1\",NID_brainpoolP160r1,9,",
          "2451: {\"brainpoolP160t1\",\"brainpoolP160t1\",NID_brainpoolP160t1,9,",
          "2453: {\"brainpoolP192r1\",\"brainpoolP192r1\",NID_brainpoolP192r1,9,",
          "2455: {\"brainpoolP192t1\",\"brainpoolP192t1\",NID_brainpoolP192t1,9,",
          "2457: {\"brainpoolP224r1\",\"brainpoolP224r1\",NID_brainpoolP224r1,9,",
          "2459: {\"brainpoolP224t1\",\"brainpoolP224t1\",NID_brainpoolP224t1,9,",
          "2461: {\"brainpoolP256r1\",\"brainpoolP256r1\",NID_brainpoolP256r1,9,",
          "2463: {\"brainpoolP256t1\",\"brainpoolP256t1\",NID_brainpoolP256t1,9,",
          "2465: {\"brainpoolP320r1\",\"brainpoolP320r1\",NID_brainpoolP320r1,9,",
          "2467: {\"brainpoolP320t1\",\"brainpoolP320t1\",NID_brainpoolP320t1,9,",
          "2469: {\"brainpoolP384r1\",\"brainpoolP384r1\",NID_brainpoolP384r1,9,",
          "2471: {\"brainpoolP384t1\",\"brainpoolP384t1\",NID_brainpoolP384t1,9,",
          "2473: {\"brainpoolP512r1\",\"brainpoolP512r1\",NID_brainpoolP512r1,9,",
          "2475: {\"brainpoolP512t1\",\"brainpoolP512t1\",NID_brainpoolP512t1,9,",
          "2478: {\"dhSinglePass-stdDH-sha1kdf-scheme\",",
          "2479:  \"dhSinglePass-stdDH-sha1kdf-scheme\",",
          "2481: {\"dhSinglePass-stdDH-sha224kdf-scheme\",",
          "2482:  \"dhSinglePass-stdDH-sha224kdf-scheme\",",
          "2484: {\"dhSinglePass-stdDH-sha256kdf-scheme\",",
          "2485:  \"dhSinglePass-stdDH-sha256kdf-scheme\",",
          "2487: {\"dhSinglePass-stdDH-sha384kdf-scheme\",",
          "2488:  \"dhSinglePass-stdDH-sha384kdf-scheme\",",
          "2490: {\"dhSinglePass-stdDH-sha512kdf-scheme\",",
          "2491:  \"dhSinglePass-stdDH-sha512kdf-scheme\",",
          "2493: {\"dhSinglePass-cofactorDH-sha1kdf-scheme\",",
          "2494:  \"dhSinglePass-cofactorDH-sha1kdf-scheme\",",
          "2496: {\"dhSinglePass-cofactorDH-sha224kdf-scheme\",",
          "2497:  \"dhSinglePass-cofactorDH-sha224kdf-scheme\",",
          "2499: {\"dhSinglePass-cofactorDH-sha256kdf-scheme\",",
          "2500:  \"dhSinglePass-cofactorDH-sha256kdf-scheme\",",
          "2502: {\"dhSinglePass-cofactorDH-sha384kdf-scheme\",",
          "2503:  \"dhSinglePass-cofactorDH-sha384kdf-scheme\",",
          "2505: {\"dhSinglePass-cofactorDH-sha512kdf-scheme\",",
          "2506:  \"dhSinglePass-cofactorDH-sha512kdf-scheme\",",
          "2508: {\"dh-std-kdf\",\"dh-std-kdf\",NID_dh_std_kdf,0,NULL,0},",
          "2509: {\"dh-cofactor-kdf\",\"dh-cofactor-kdf\",NID_dh_cofactor_kdf,0,NULL,0},",
          "2510: {\"AES-128-CBC-HMAC-SHA256\",\"aes-128-cbc-hmac-sha256\",",
          "",
          "[Removed Lines]",
          "2447: {\"RSAES-OAEP\",\"rsaesOaep\",NID_rsaesOaep,9,&(lvalues[5974]),0},",
          "2448: {\"dhpublicnumber\",\"X9.42 DH\",NID_dhpublicnumber,7,&(lvalues[5983]),0},",
          "2450:  &(lvalues[5990]),0},",
          "2452:  &(lvalues[5999]),0},",
          "2454:  &(lvalues[6008]),0},",
          "2456:  &(lvalues[6017]),0},",
          "2458:  &(lvalues[6026]),0},",
          "2460:  &(lvalues[6035]),0},",
          "2462:  &(lvalues[6044]),0},",
          "2464:  &(lvalues[6053]),0},",
          "2466:  &(lvalues[6062]),0},",
          "2468:  &(lvalues[6071]),0},",
          "2470:  &(lvalues[6080]),0},",
          "2472:  &(lvalues[6089]),0},",
          "2474:  &(lvalues[6098]),0},",
          "2476:  &(lvalues[6107]),0},",
          "2477: {\"PSPECIFIED\",\"pSpecified\",NID_pSpecified,9,&(lvalues[6116]),0},",
          "2480:  NID_dhSinglePass_stdDH_sha1kdf_scheme,9,&(lvalues[6125]),0},",
          "2483:  NID_dhSinglePass_stdDH_sha224kdf_scheme,6,&(lvalues[6134]),0},",
          "2486:  NID_dhSinglePass_stdDH_sha256kdf_scheme,6,&(lvalues[6140]),0},",
          "2489:  NID_dhSinglePass_stdDH_sha384kdf_scheme,6,&(lvalues[6146]),0},",
          "2492:  NID_dhSinglePass_stdDH_sha512kdf_scheme,6,&(lvalues[6152]),0},",
          "2495:  NID_dhSinglePass_cofactorDH_sha1kdf_scheme,9,&(lvalues[6158]),0},",
          "2498:  NID_dhSinglePass_cofactorDH_sha224kdf_scheme,6,&(lvalues[6167]),0},",
          "2501:  NID_dhSinglePass_cofactorDH_sha256kdf_scheme,6,&(lvalues[6173]),0},",
          "2504:  NID_dhSinglePass_cofactorDH_sha384kdf_scheme,6,&(lvalues[6179]),0},",
          "2507:  NID_dhSinglePass_cofactorDH_sha512kdf_scheme,6,&(lvalues[6185]),0},",
          "",
          "[Added Lines]",
          "2446: {\"RSAES-OAEP\",\"rsaesOaep\",NID_rsaesOaep,9,&(lvalues[5968]),0},",
          "2447: {\"dhpublicnumber\",\"X9.42 DH\",NID_dhpublicnumber,7,&(lvalues[5977]),0},",
          "2449:  &(lvalues[5984]),0},",
          "2451:  &(lvalues[5993]),0},",
          "2453:  &(lvalues[6002]),0},",
          "2455:  &(lvalues[6011]),0},",
          "2457:  &(lvalues[6020]),0},",
          "2459:  &(lvalues[6029]),0},",
          "2461:  &(lvalues[6038]),0},",
          "2463:  &(lvalues[6047]),0},",
          "2465:  &(lvalues[6056]),0},",
          "2467:  &(lvalues[6065]),0},",
          "2469:  &(lvalues[6074]),0},",
          "2471:  &(lvalues[6083]),0},",
          "2473:  &(lvalues[6092]),0},",
          "2475:  &(lvalues[6101]),0},",
          "2476: {\"PSPECIFIED\",\"pSpecified\",NID_pSpecified,9,&(lvalues[6110]),0},",
          "2479:  NID_dhSinglePass_stdDH_sha1kdf_scheme,9,&(lvalues[6119]),0},",
          "2482:  NID_dhSinglePass_stdDH_sha224kdf_scheme,6,&(lvalues[6128]),0},",
          "2485:  NID_dhSinglePass_stdDH_sha256kdf_scheme,6,&(lvalues[6134]),0},",
          "2488:  NID_dhSinglePass_stdDH_sha384kdf_scheme,6,&(lvalues[6140]),0},",
          "2491:  NID_dhSinglePass_stdDH_sha512kdf_scheme,6,&(lvalues[6146]),0},",
          "2494:  NID_dhSinglePass_cofactorDH_sha1kdf_scheme,9,&(lvalues[6152]),0},",
          "2497:  NID_dhSinglePass_cofactorDH_sha224kdf_scheme,6,&(lvalues[6161]),0},",
          "2500:  NID_dhSinglePass_cofactorDH_sha256kdf_scheme,6,&(lvalues[6167]),0},",
          "2503:  NID_dhSinglePass_cofactorDH_sha384kdf_scheme,6,&(lvalues[6173]),0},",
          "2506:  NID_dhSinglePass_cofactorDH_sha512kdf_scheme,6,&(lvalues[6179]),0},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2514: {\"AES-256-CBC-HMAC-SHA256\",\"aes-256-cbc-hmac-sha256\",",
          "2515:  NID_aes_256_cbc_hmac_sha256,0,NULL,0},",
          "2516: {\"ct_precert_scts\",\"CT Precertificate SCTs\",NID_ct_precert_scts,10,",
          "2518: {\"ct_precert_poison\",\"CT Precertificate Poison\",NID_ct_precert_poison,",
          "2520: {\"ct_precert_signer\",\"CT Precertificate Signer\",NID_ct_precert_signer,",
          "2522: {\"ct_cert_scts\",\"CT Certificate SCTs\",NID_ct_cert_scts,10,",
          "2524: {\"jurisdictionL\",\"jurisdictionLocalityName\",",
          "2526: {\"jurisdictionST\",\"jurisdictionStateOrProvinceName\",",
          "2528: {\"jurisdictionC\",\"jurisdictionCountryName\",",
          "2530: {\"AES-128-OCB\",\"aes-128-ocb\",NID_aes_128_ocb,0,NULL,0},",
          "2531: {\"AES-192-OCB\",\"aes-192-ocb\",NID_aes_192_ocb,0,NULL,0},",
          "2532: {\"AES-256-OCB\",\"aes-256-ocb\",NID_aes_256_ocb,0,NULL,0},",
          "2533: {\"CAMELLIA-128-GCM\",\"camellia-128-gcm\",NID_camellia_128_gcm,8,",
          "2535: {\"CAMELLIA-128-CCM\",\"camellia-128-ccm\",NID_camellia_128_ccm,8,",
          "2537: {\"CAMELLIA-128-CTR\",\"camellia-128-ctr\",NID_camellia_128_ctr,8,",
          "2539: {\"CAMELLIA-128-CMAC\",\"camellia-128-cmac\",NID_camellia_128_cmac,8,",
          "2541: {\"CAMELLIA-192-GCM\",\"camellia-192-gcm\",NID_camellia_192_gcm,8,",
          "2543: {\"CAMELLIA-192-CCM\",\"camellia-192-ccm\",NID_camellia_192_ccm,8,",
          "2545: {\"CAMELLIA-192-CTR\",\"camellia-192-ctr\",NID_camellia_192_ctr,8,",
          "2547: {\"CAMELLIA-192-CMAC\",\"camellia-192-cmac\",NID_camellia_192_cmac,8,",
          "2549: {\"CAMELLIA-256-GCM\",\"camellia-256-gcm\",NID_camellia_256_gcm,8,",
          "2551: {\"CAMELLIA-256-CCM\",\"camellia-256-ccm\",NID_camellia_256_ccm,8,",
          "2553: {\"CAMELLIA-256-CTR\",\"camellia-256-ctr\",NID_camellia_256_ctr,8,",
          "2555: {\"CAMELLIA-256-CMAC\",\"camellia-256-cmac\",NID_camellia_256_cmac,8,",
          "2557: };",
          "2559: static const unsigned int sn_objs[NUM_SN]={",
          "",
          "[Removed Lines]",
          "2517:  &(lvalues[6191]),0},",
          "2519:  10,&(lvalues[6201]),0},",
          "2521:  10,&(lvalues[6211]),0},",
          "2523:  &(lvalues[6221]),0},",
          "2525:  NID_jurisdictionLocalityName,11,&(lvalues[6231]),0},",
          "2527:  NID_jurisdictionStateOrProvinceName,11,&(lvalues[6242]),0},",
          "2529:  NID_jurisdictionCountryName,11,&(lvalues[6253]),0},",
          "2534:  &(lvalues[6264]),0},",
          "2536:  &(lvalues[6272]),0},",
          "2538:  &(lvalues[6280]),0},",
          "2540:  &(lvalues[6288]),0},",
          "2542:  &(lvalues[6296]),0},",
          "2544:  &(lvalues[6304]),0},",
          "2546:  &(lvalues[6312]),0},",
          "2548:  &(lvalues[6320]),0},",
          "2550:  &(lvalues[6328]),0},",
          "2552:  &(lvalues[6336]),0},",
          "2554:  &(lvalues[6344]),0},",
          "2556:  &(lvalues[6352]),0},",
          "",
          "[Added Lines]",
          "2516:  &(lvalues[6185]),0},",
          "2518:  10,&(lvalues[6195]),0},",
          "2520:  10,&(lvalues[6205]),0},",
          "2522:  &(lvalues[6215]),0},",
          "2524:  NID_jurisdictionLocalityName,11,&(lvalues[6225]),0},",
          "2526:  NID_jurisdictionStateOrProvinceName,11,&(lvalues[6236]),0},",
          "2528:  NID_jurisdictionCountryName,11,&(lvalues[6247]),0},",
          "2533:  &(lvalues[6258]),0},",
          "2535:  &(lvalues[6266]),0},",
          "2537:  &(lvalues[6274]),0},",
          "2539:  &(lvalues[6282]),0},",
          "2541:  &(lvalues[6290]),0},",
          "2543:  &(lvalues[6298]),0},",
          "2545:  &(lvalues[6306]),0},",
          "2547:  &(lvalues[6314]),0},",
          "2549:  &(lvalues[6322]),0},",
          "2551:  &(lvalues[6330]),0},",
          "2553:  &(lvalues[6338]),0},",
          "2555:  &(lvalues[6346]),0},",
          "",
          "---------------"
        ],
        "include/openssl/obj_mac.h||include/openssl/obj_mac.h": [
          "File: include/openssl/obj_mac.h -> include/openssl/obj_mac.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2579: #define NID_id_hex_multipart_message            508",
          "2580: #define OBJ_id_hex_multipart_message            OBJ_mime_mhs_headings,2L",
          "2587: #define SN_zlib_compression             \"ZLIB\"",
          "2588: #define LN_zlib_compression             \"zlib compression\"",
          "2589: #define NID_zlib_compression            125",
          "",
          "[Removed Lines]",
          "2582: #define SN_rle_compression              \"RLE\"",
          "2583: #define LN_rle_compression              \"run length compression\"",
          "2584: #define NID_rle_compression             124",
          "2585: #define OBJ_rle_compression             1L,1L,1L,1L,666L,1L",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1115: PKCS7_get_signed_attribute              1143 EXIST::FUNCTION:",
          "1116: COMP_compress_block                     1144 EXIST::FUNCTION:",
          "1117: COMP_expand_block                       1145 EXIST::FUNCTION:",
          "1119: COMP_zlib                               1147 EXIST::FUNCTION:",
          "1120: ms_time_diff                            1148 NOEXIST::FUNCTION:",
          "1121: ms_time_new                             1149 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1118: COMP_rle                                1146 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1118: COMP_rle                                1146 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a555706a3fb8f6622e1049ab510a12f4e1bc6a2",
      "candidate_info": {
        "commit_hash": "9a555706a3fb8f6622e1049ab510a12f4e1bc6a2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9a555706a3fb8f6622e1049ab510a12f4e1bc6a2",
        "files": [
          "crypto/comp/Makefile",
          "crypto/comp/c_zlib.c",
          "crypto/comp/comp_lcl.h",
          "crypto/comp/comp_lib.c",
          "include/openssl/comp.h",
          "include/openssl/ossl_typ.h",
          "include/openssl/ssl.h",
          "ssl/ssl_ciph.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_txt.c",
          "test/ssltest.c",
          "util/libeay.num",
          "util/ssleay.num"
        ],
        "message": "Make COMP_CTX and COMP_METHOD opaque\n\nSince COMP_METHOD is now defined in comp_lcl.h, it is no\nlonger possible to create new TLS compression methods without\nusing the OpenSSL source.  Only ZLIB is supported by default.\nAlso, since the types are opaque, #ifdef guards to use \"char *\"\ninstead of the real type aren't necessary.\n\nThe changes are actually minor.  Adding missing copyright to some\nfiles makes the diff misleadingly big.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/comp/c_zlib.c||crypto/comp/c_zlib.c",
          "crypto/comp/comp_lcl.h||crypto/comp/comp_lcl.h",
          "crypto/comp/comp_lib.c||crypto/comp/comp_lib.c",
          "include/openssl/comp.h||include/openssl/comp.h",
          "include/openssl/ossl_typ.h||include/openssl/ossl_typ.h",
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_txt.c||ssl/ssl_txt.c",
          "test/ssltest.c||test/ssltest.c",
          "util/libeay.num||util/libeay.num",
          "util/ssleay.num||util/ssleay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/comp/c_zlib.c||crypto/comp/c_zlib.c": [
          "File: crypto/comp/c_zlib.c -> crypto/comp/c_zlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "3: #include <string.h>",
          "4: #include <openssl/objects.h>",
          "5: #include <openssl/comp.h>",
          "6: #include <openssl/err.h>",
          "8: COMP_METHOD *COMP_zlib(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include \"comp_lcl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     NULL,",
          "15:     NULL,",
          "16:     NULL,",
          "19: };",
          "21: #ifndef ZLIB",
          "",
          "[Removed Lines]",
          "17:     NULL,",
          "18:     NULL,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/comp/comp_lcl.h||crypto/comp/comp_lcl.h": [
          "File: crypto/comp/comp_lcl.h -> crypto/comp/comp_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: struct comp_method_st {",
          "58:     int (*init) (COMP_CTX *ctx);",
          "59:     void (*finish) (COMP_CTX *ctx);",
          "60:     int (*compress) (COMP_CTX *ctx,",
          "61:                      unsigned char *out, unsigned int olen,",
          "62:                      unsigned char *in, unsigned int ilen);",
          "63:     int (*expand) (COMP_CTX *ctx,",
          "64:                    unsigned char *out, unsigned int olen,",
          "65:                    unsigned char *in, unsigned int ilen);",
          "66: };",
          "68: struct comp_ctx_st {",
          "69:     struct comp_method_st *meth;",
          "70:     unsigned long compress_in;",
          "71:     unsigned long compress_out;",
          "72:     unsigned long expand_in;",
          "73:     unsigned long expand_out;",
          "74: };",
          "",
          "---------------"
        ],
        "crypto/comp/comp_lib.c||crypto/comp/comp_lib.c": [
          "File: crypto/comp/comp_lib.c -> crypto/comp/comp_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "3: #include <string.h>",
          "4: #include <openssl/objects.h>",
          "5: #include <openssl/comp.h>",
          "7: COMP_CTX *COMP_CTX_new(COMP_METHOD *meth)",
          "8: {",
          "9:     COMP_CTX *ret;",
          "13:         return (NULL);",
          "15:     memset(ret, 0, sizeof(*ret));",
          "16:     ret->meth = meth;",
          "17:     if ((ret->meth->init != NULL) && !ret->meth->init(ret)) {",
          "",
          "[Removed Lines]",
          "11:     if ((ret = OPENSSL_malloc(sizeof(*ret))) == NULL) {",
          "14:     }",
          "",
          "[Added Lines]",
          "60: #include \"comp_lcl.h\"",
          "66:     if ((ret = OPENSSL_malloc(sizeof(*ret))) == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:     return (ret);",
          "22: }",
          "24: void COMP_CTX_free(COMP_CTX *ctx)",
          "25: {",
          "26:     if (ctx == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: const COMP_METHOD *COMP_CTX_get_method(const COMP_CTX *ctx)",
          "78: {",
          "79:     return ctx->meth;",
          "80: }",
          "82: int COMP_get_type(const COMP_METHOD *meth)",
          "83: {",
          "84:     return meth->type;",
          "85: }",
          "87: const char *COMP_get_name(const COMP_METHOD *meth)",
          "88: {",
          "89:     return meth->name;",
          "90: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     }",
          "65:     return (ret);",
          "66: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: int COMP_CTX_get_type(const COMP_CTX* comp)",
          "135: {",
          "136:     return comp->meth ? comp->meth->type : NID_undef;",
          "137: }",
          "",
          "---------------"
        ],
        "include/openssl/comp.h||include/openssl/comp.h": [
          "File: include/openssl/comp.h -> include/openssl/comp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "40: COMP_CTX *COMP_CTX_new(COMP_METHOD *meth);",
          "41: void COMP_CTX_free(COMP_CTX *ctx);",
          "42: int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,",
          "43:                         unsigned char *in, int ilen);",
          "44: int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,",
          "45:                       unsigned char *in, int ilen);",
          "46: COMP_METHOD *COMP_zlib(void);",
          "47: void COMP_zlib_cleanup(void);",
          "",
          "[Removed Lines]",
          "11: typedef struct comp_ctx_st COMP_CTX;",
          "13: typedef struct comp_method_st {",
          "16:     int (*init) (COMP_CTX *ctx);",
          "17:     void (*finish) (COMP_CTX *ctx);",
          "18:     int (*compress) (COMP_CTX *ctx,",
          "19:                      unsigned char *out, unsigned int olen,",
          "20:                      unsigned char *in, unsigned int ilen);",
          "21:     int (*expand) (COMP_CTX *ctx,",
          "22:                    unsigned char *out, unsigned int olen,",
          "23:                    unsigned char *in, unsigned int ilen);",
          "27:     long (*ctrl) (void);",
          "28:     long (*callback_ctrl) (void);",
          "29: } COMP_METHOD;",
          "31: struct comp_ctx_st {",
          "32:     COMP_METHOD *meth;",
          "33:     unsigned long compress_in;",
          "34:     unsigned long compress_out;",
          "35:     unsigned long expand_in;",
          "36:     unsigned long expand_out;",
          "37:     CRYPTO_EX_DATA ex_data;",
          "38: };",
          "",
          "[Added Lines]",
          "67: const COMP_METHOD *COMP_CTX_get_method(const COMP_CTX *ctx);",
          "68: int COMP_CTX_get_type(const COMP_CTX* comp);",
          "69: int COMP_get_type(const COMP_METHOD *meth);",
          "70: const char *COMP_get_name(const COMP_METHOD *meth);",
          "",
          "---------------"
        ],
        "include/openssl/ossl_typ.h||include/openssl/ossl_typ.h": [
          "File: include/openssl/ossl_typ.h -> include/openssl/ossl_typ.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: typedef struct ssl_st SSL;",
          "177: typedef struct ssl_ctx_st SSL_CTX;",
          "179: typedef struct X509_POLICY_NODE_st X509_POLICY_NODE;",
          "180: typedef struct X509_POLICY_LEVEL_st X509_POLICY_LEVEL;",
          "181: typedef struct X509_POLICY_TREE_st X509_POLICY_TREE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: typedef struct comp_ctx_st COMP_CTX;",
          "180: typedef struct comp_method_st COMP_METHOD;",
          "",
          "---------------"
        ],
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: # include <openssl/e_os2.h>",
          "151: # include <openssl/bio.h>",
          "152: # ifdef OPENSSL_USE_DEPRECATED",
          "153: #  include <openssl/x509.h>",
          "",
          "[Removed Lines]",
          "148: # ifndef OPENSSL_NO_COMP",
          "149: #  include <openssl/comp.h>",
          "150: # endif",
          "",
          "[Added Lines]",
          "148: # include <openssl/comp.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "703: typedef int (*GEN_SESSION_CB) (const SSL *ssl, unsigned char *id,",
          "704:                                unsigned int *id_len);",
          "709: # define SSL_SESS_CACHE_OFF                      0x0000",
          "710: # define SSL_SESS_CACHE_CLIENT                   0x0001",
          "711: # define SSL_SESS_CACHE_SERVER                   0x0002",
          "",
          "[Removed Lines]",
          "706: typedef struct ssl_comp_st SSL_COMP;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1774:                                                 int keylength));",
          "1775: # endif",
          "1778: __owur const COMP_METHOD *SSL_get_current_compression(SSL *s);",
          "1779: __owur const COMP_METHOD *SSL_get_current_expansion(SSL *s);",
          "1780: __owur const char *SSL_COMP_get_name(const COMP_METHOD *comp);",
          "",
          "[Removed Lines]",
          "1777: # ifndef OPENSSL_NO_COMP",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1784: void SSL_COMP_free_compression_methods(void);",
          "1785: __owur int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);",
          "1794: const SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr);",
          "1795: int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);",
          "",
          "[Removed Lines]",
          "1786: # else",
          "1787: __owur const void *SSL_get_current_compression(SSL *s);",
          "1788: __owur const void *SSL_get_current_expansion(SSL *s);",
          "1789: __owur const char *SSL_COMP_get_name(const void *comp);",
          "1790: void *SSL_COMP_get_compression_methods(void);",
          "1791: __owur int SSL_COMP_add_compression_method(int id, void *cm);",
          "1792: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:         if (ssl_comp_methods == NULL) {",
          "497:             SSL_COMP *comp = NULL;",
          "499:             MemCheck_off();",
          "500:             ssl_comp_methods = sk_SSL_COMP_new(sk_comp_cmp);",
          "502:                 comp = OPENSSL_malloc(sizeof(*comp));",
          "503:                 if (comp != NULL) {",
          "512:                 }",
          "514:             }",
          "515:             MemCheck_on();",
          "516:         }",
          "",
          "[Removed Lines]",
          "501:             if (ssl_comp_methods != NULL) {",
          "504:                     comp->method = COMP_zlib();",
          "505:                     if (comp->method && comp->method->type == NID_undef)",
          "506:                         OPENSSL_free(comp);",
          "507:                     else {",
          "508:                         comp->id = SSL_COMP_ZLIB_IDX;",
          "509:                         comp->name = comp->method->name;",
          "510:                         sk_SSL_COMP_push(ssl_comp_methods, comp);",
          "511:                     }",
          "513:                 sk_SSL_COMP_sort(ssl_comp_methods);",
          "",
          "[Added Lines]",
          "498:             COMP_METHOD *method = COMP_zlib();",
          "502:             if (COMP_get_type(method) != NID_undef",
          "503:                 && ssl_comp_methods != NULL) {",
          "506:                     comp->method = method;",
          "507:                     comp->id = SSL_COMP_ZLIB_IDX;",
          "508:                     comp->name = COMP_get_name(method);",
          "509:                     sk_SSL_COMP_push(ssl_comp_methods, comp);",
          "510:                     sk_SSL_COMP_sort(ssl_comp_methods);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870: }",
          "1872: #ifdef OPENSSL_NO_COMP",
          "1874: {",
          "1875:     return NULL;",
          "1876: }",
          "1879: {",
          "1881: }",
          "1884: {",
          "1886: }",
          "1887: #else",
          "1888: STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void)",
          "1889: {",
          "",
          "[Removed Lines]",
          "1873: void *SSL_COMP_get_compression_methods(void)",
          "1878: int SSL_COMP_add_compression_method(int id, void *cm)",
          "1880:     return 1;",
          "1883: const char *SSL_COMP_get_name(const void *comp)",
          "1885:     return NULL;",
          "",
          "[Added Lines]",
          "1871: STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void)",
          "1875: STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)",
          "1878:     return meths;",
          "1880: void SSL_COMP_free_compression_methods(void)",
          "1883: int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)",
          "1884: {",
          "1885:     return 1;",
          "1886: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1915: {",
          "1916:     SSL_COMP *comp;",
          "1919:         return 1;",
          "",
          "[Removed Lines]",
          "1918:     if (cm == NULL || cm->type == NID_undef)",
          "",
          "[Added Lines]",
          "1919:     if (cm == NULL || COMP_get_type(cm) == NID_undef)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1960:         return (0);",
          "1961:     }",
          "1962: }",
          "1964: const char *SSL_COMP_get_name(const COMP_METHOD *comp)",
          "1965: {",
          "1968:     return NULL;",
          "1970: #endif",
          "1972: int ssl_cipher_get_cert_index(const SSL_CIPHER *c)",
          "1973: {",
          "",
          "[Removed Lines]",
          "1966:     if (comp)",
          "1967:         return comp->name;",
          "1969: }",
          "",
          "[Added Lines]",
          "1964: #endif",
          "1968: #ifndef OPENSSL_NO_COMP",
          "1969:     return comp ? COMP_get_name(comp) : NULL;",
          "1970: #else",
          "1973: }",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2882:     return (NULL);",
          "2883: }",
          "2897: const COMP_METHOD *SSL_get_current_compression(SSL *s)",
          "2898: {",
          "2902: }",
          "2904: const COMP_METHOD *SSL_get_current_expansion(SSL *s)",
          "2905: {",
          "2910: #endif",
          "2912: int ssl_init_wbio_buffer(SSL *s, int push)",
          "2913: {",
          "",
          "[Removed Lines]",
          "2885: #ifdef OPENSSL_NO_COMP",
          "2886: const void *SSL_get_current_compression(SSL *s)",
          "2887: {",
          "2888:     return NULL;",
          "2889: }",
          "2891: const void *SSL_get_current_expansion(SSL *s)",
          "2892: {",
          "2893:     return NULL;",
          "2894: }",
          "2895: #else",
          "2899:     if (s->compress != NULL)",
          "2900:         return (s->compress->meth);",
          "2901:     return (NULL);",
          "2906:     if (s->expand != NULL)",
          "2907:         return (s->expand->meth);",
          "2908:     return (NULL);",
          "2909: }",
          "",
          "[Added Lines]",
          "2887: #ifndef OPENSSL_NO_COMP",
          "2888:     return s->compress ? COMP_CTX_get_method(s->compress) : NULL;",
          "2889: #else",
          "2890:     return NULL;",
          "2891: #endif",
          "2896: #ifndef OPENSSL_NO_COMP",
          "2897:     return s->expand ? COMP_CTX_get_method(s->expand) : NULL;",
          "2898: #else",
          "2899:     return NULL;",
          "2901: }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "706: # endif",
          "709: struct ssl_comp_st {",
          "710:     int id;",
          "711:     const char *name;",
          "713:     COMP_METHOD *method;",
          "717: };",
          "719: DECLARE_STACK_OF(SSL_COMP)",
          "",
          "[Removed Lines]",
          "712: #  ifndef OPENSSL_NO_COMP",
          "714: #  else",
          "715:     char *method;",
          "716: #  endif",
          "",
          "[Added Lines]",
          "708: typedef struct ssl_comp_st SSL_COMP;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1045:     int mac_flags;",
          "",
          "[Removed Lines]",
          "1048: #  ifndef OPENSSL_NO_COMP",
          "1050: #  else",
          "1051:     char *expand;",
          "1052: #  endif",
          "1055: #  ifndef OPENSSL_NO_COMP",
          "1057: #  else",
          "1058:     char *compress;",
          "1059: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1357: struct dtls1_retransmit_state {",
          "1365:     SSL_SESSION *session;",
          "1366:     unsigned short epoch;",
          "1367: };",
          "",
          "[Removed Lines]",
          "1360: #  ifndef OPENSSL_NO_COMP",
          "1362: #  else",
          "1363:     char *compress;",
          "1364: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_txt.c||ssl/ssl_txt.c": [
          "File: ssl/ssl_txt.c -> ssl/ssl_txt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:                 0)",
          "222:                 goto err;",
          "223:         } else {",
          "227:                 goto err;",
          "228:         }",
          "229:     }",
          "",
          "[Removed Lines]",
          "224:             if (BIO_printf",
          "225:                 (bp, \"\\n    Compression: %d (%s)\", comp->id,",
          "226:                  comp->method->name) <= 0)",
          "",
          "[Added Lines]",
          "224:             if (BIO_printf(bp, \"\\n    Compression: %d (%s)\", comp->id,",
          "225:                  comp->name) <= 0)",
          "",
          "---------------"
        ],
        "test/ssltest.c||test/ssltest.c": [
          "File: test/ssltest.c -> test/ssltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     int print_time = 0;",
          "996:     clock_t s_time = 0, c_time = 0;",
          "997: #ifndef OPENSSL_NO_COMP",
          "999:     COMP_METHOD *cm = NULL;",
          "1000:     STACK_OF(SSL_COMP) *ssl_comp_methods = NULL;",
          "1001: #endif",
          "",
          "[Removed Lines]",
          "998:     int comp = 0;",
          "",
          "[Added Lines]",
          "998:     int n, comp = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004:     int fips_mode = 0;",
          "1005: #endif",
          "1006:     int no_protocol = 0;",
          "1009:     SSL_CONF_CTX *s_cctx = NULL, *c_cctx = NULL;",
          "1010:     STACK_OF(OPENSSL_STRING) *conf_args = NULL;",
          "",
          "[Removed Lines]",
          "1007:     int n;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1373:     if (comp == COMP_ZLIB)",
          "1374:         cm = COMP_zlib();",
          "1375:     if (cm != NULL) {",
          "1377:             if (SSL_COMP_add_compression_method(comp, cm) != 0) {",
          "1378:                 fprintf(stderr, \"Failed to add compression method\\n\");",
          "1379:                 ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "1376:         if (cm->type != NID_undef) {",
          "",
          "[Added Lines]",
          "1375:         if (COMP_get_type(cm) != NID_undef) {",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4557: ASN1_TYPE_unpack_sequence               4916 EXIST::FUNCTION:",
          "4558: CRYPTO_clean_free                       4917 NOEXIST::FUNCTION:",
          "4559: CRYPTO_clear_free                       4918 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4560: COMP_CTX_get_method                     4919 EXIST::FUNCTION:",
          "4561: COMP_CTX_get_type                       4920 EXIST::FUNCTION:",
          "4562: COMP_get_name                           4921 EXIST::FUNCTION:",
          "4563: COMP_get_type                           4922 EXIST::FUNCTION:",
          "",
          "---------------"
        ],
        "util/ssleay.num||util/ssleay.num": [
          "File: util/ssleay.num -> util/ssleay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: SSL_CTX_set_cert_store                  181 EXIST::FUNCTION:",
          "165: SSL_want                                182 EXIST::FUNCTION:",
          "166: SSL_library_init                        183 EXIST::FUNCTION:",
          "168: SSL_add_file_cert_subjects_to_stack     185 EXIST:!VMS:FUNCTION:STDIO",
          "169: SSL_add_file_cert_subjs_to_stk          185 EXIST:VMS:FUNCTION:STDIO",
          "170: SSL_set_tmp_rsa_callback                186 EXIST::FUNCTION:RSA",
          "",
          "[Removed Lines]",
          "167: SSL_COMP_add_compression_method         184 EXIST::FUNCTION:COMP",
          "",
          "[Added Lines]",
          "167: SSL_COMP_add_compression_method         184 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219: DTLSv1_client_method                    268 EXIST::FUNCTION:",
          "220: SSL_CTX_set_tmp_ecdh_callback           269 EXIST::FUNCTION:EC",
          "221: SSL_set_tmp_ecdh_callback               270 EXIST::FUNCTION:EC",
          "224: DTLSv1_method                           273 EXIST::FUNCTION:",
          "226: DTLSv1_server_method                    275 EXIST::FUNCTION:",
          "229: SSL_SESSION_get_id                      277 EXIST::FUNCTION:",
          "230: SSL_CTX_sess_set_new_cb                 278 EXIST::FUNCTION:",
          "231: SSL_CTX_sess_get_get_cb                 279 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "222: SSL_COMP_get_name                       271 EXIST::FUNCTION:COMP",
          "223: SSL_get_current_compression             272 EXIST::FUNCTION:COMP",
          "225: SSL_get_current_expansion               274 EXIST::FUNCTION:COMP",
          "227: SSL_COMP_get_compression_methods        276 EXIST:!VMS:FUNCTION:COMP",
          "228: SSL_COMP_get_compress_methods           276 EXIST:VMS:FUNCTION:COMP",
          "",
          "[Added Lines]",
          "222: SSL_COMP_get_name                       271 EXIST::FUNCTION:",
          "223: SSL_get_current_compression             272 EXIST::FUNCTION:",
          "225: SSL_get_current_expansion               274 EXIST::FUNCTION:",
          "227: SSL_COMP_get_compression_methods        276 EXIST:!VMS:FUNCTION:",
          "228: SSL_COMP_get_compress_methods           276 EXIST:VMS:FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333: SSL_CONF_cmd_argv                       372 EXIST::FUNCTION:",
          "334: DTLSv1_2_server_method                  373 EXIST::FUNCTION:",
          "335: SSL_COMP_set0_compress_methods          374 NOEXIST::FUNCTION:",
          "338: SSL_CTX_set_cert_cb                     375 EXIST::FUNCTION:",
          "339: SSL_CTX_add_client_custom_ext           376 EXIST::FUNCTION:TLSEXT",
          "340: SSL_is_server                           377 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "336: SSL_COMP_set0_compression_methods       374 EXIST:!VMS:FUNCTION:COMP",
          "337: SSL_COMP_set0_compr_methods             374 EXIST:VMS:FUNCTION:COMP",
          "",
          "[Added Lines]",
          "336: SSL_COMP_set0_compression_methods       374 EXIST:!VMS:FUNCTION:",
          "337: SSL_COMP_set0_compr_methods             374 EXIST:VMS:FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "367: DTLS_server_method                      405 EXIST::FUNCTION:",
          "368: SSL_CTX_use_serverinfo_file             406 EXIST::FUNCTION:STDIO,TLSEXT",
          "369: SSL_COMP_free_compress_methods          407 NOEXIST::FUNCTION:",
          "372: SSL_extension_supported                 409 EXIST::FUNCTION:TLSEXT",
          "373: SSL_CTX_get_security_callback           410 EXIST::FUNCTION:",
          "374: SSL_SESSION_print_keylog                411 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "370: SSL_COMP_free_compression_methods       407 EXIST:!VMS:FUNCTION:COMP",
          "371: SSL_COMP_free_compr_methods             407 EXIST:VMS:FUNCTION:COMP",
          "",
          "[Added Lines]",
          "370: SSL_COMP_free_compression_methods       407 EXIST:!VMS:FUNCTION:",
          "371: SSL_COMP_free_compr_methods             407 EXIST:VMS:FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}