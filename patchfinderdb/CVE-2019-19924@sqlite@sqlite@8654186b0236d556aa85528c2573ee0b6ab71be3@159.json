{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01996dae49cbf5928d44bf0b9c68965e17656f98",
      "candidate_info": {
        "commit_hash": "01996dae49cbf5928d44bf0b9c68965e17656f98",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01996dae49cbf5928d44bf0b9c68965e17656f98",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Back out check-in [008112bcef561a8], reenabling deprecated PRAGMAs when the SQLITE_OMIT_DEPRECATED compile-time option is used, because way too many TH3 tests depend on those deprecated PRAGMAs.\n\nFossilOrigin-Name: 9dbf512d1c4627a28d60f4e7238cb100d7a4e11f976139b07ad1c59e9b584c7d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d0a949fd92e19fbf243a2e3a1a7c2cdb111f9a6943949d2420dd846bc7d9285",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: #endif",
          "212: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "214:  {/* zName:     */ \"count_changes\",",
          "219: #endif",
          "221: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "222:  {/* zName:     */ \"data_store_directory\",",
          "",
          "[Removed Lines]",
          "213: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "220: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241: #endif",
          "244:  {/* zName:     */ \"default_cache_size\",",
          "249: #endif",
          "251: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "252: #if !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "253:  {/* zName:     */ \"defer_foreign_keys\",",
          "",
          "[Removed Lines]",
          "242: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "243: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "250: #endif",
          "",
          "[Added Lines]",
          "240: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258: #endif",
          "259: #endif",
          "260: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "262:  {/* zName:     */ \"empty_result_callbacks\",",
          "267: #endif",
          "269: #if !defined(SQLITE_OMIT_UTF16)",
          "270:  {/* zName:     */ \"encoding\",",
          "",
          "[Removed Lines]",
          "261: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "268: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305: #endif",
          "306: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "308:  {/* zName:     */ \"full_column_names\",",
          "316:  {/* zName:     */ \"fullfsync\",",
          "",
          "[Removed Lines]",
          "307: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "313: #endif",
          "314: #endif",
          "315: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "542: #endif",
          "543: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "545:  {/* zName:     */ \"short_column_names\",",
          "551: #endif",
          "552:  {/* zName:     */ \"shrink_memory\",",
          "",
          "[Removed Lines]",
          "544: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "550: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   TYPE: FLAG",
          "26:   ARG:  SQLITE_FullColNames",
          "27:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "30:   NAME: short_column_names",
          "31:   TYPE: FLAG",
          "32:   ARG:  SQLITE_ShortColNames",
          "33:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "36:   NAME: count_changes",
          "37:   TYPE: FLAG",
          "38:   ARG:  SQLITE_CountRows",
          "39:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "42:   NAME: empty_result_callbacks",
          "43:   TYPE: FLAG",
          "44:   ARG:  SQLITE_NullCallback",
          "45:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "48:   NAME: legacy_file_format",
          "49:   TYPE: FLAG",
          "",
          "[Removed Lines]",
          "28:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "34:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "40:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "46:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   NAME: default_cache_size",
          "157:   FLAG: NeedSchema Result0 SchemaReq NoColumns1",
          "158:   COLS: cache_size",
          "163:   NAME: page_size",
          "164:   FLAG: Result0 SchemaReq NoColumns1",
          "",
          "[Removed Lines]",
          "159:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "160:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "155:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
      "candidate_info": {
        "commit_hash": "9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Unless the \"--freelist-corrupt\" option is specified, do not have the .recover command attempt to recover data from pages that are on the database free-list.\n\nFossilOrigin-Name: 8d2f52bb640d6d0f84b18d746043e56f45a73ace93239be1d036701f7f4018fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 959bbd11e92cc789973daf20dfcb8a6d8dc724dd603b286cbdd59e5d1fdb2909",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3943: static void shellInt32(",
          "3944:   sqlite3_context *context,",
          "3945:   int argc,",
          "3946:   sqlite3_value **argv",
          "3947: ){",
          "3948:   const unsigned char *pBlob;",
          "3949:   int nBlob;",
          "3950:   int iInt;",
          "3952:   nBlob = sqlite3_value_bytes(argv[0]);",
          "3953:   pBlob = (const unsigned char*)sqlite3_value_blob(argv[0]);",
          "3954:   iInt = sqlite3_value_int(argv[1]);",
          "3956:   if( iInt>=0 && (iInt+1)*4<=nBlob ){",
          "3957:     const unsigned char *a = &pBlob[iInt*4];",
          "3958:     sqlite3_int64 iVal = ((sqlite3_int64)a[0]<<24)",
          "3959:                        + ((sqlite3_int64)a[1]<<16)",
          "3960:                        + ((sqlite3_int64)a[2]<< 8)",
          "3961:                        + ((sqlite3_int64)a[3]<< 0);",
          "3962:     sqlite3_result_int64(context, iVal);",
          "3963:   }",
          "3964: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4105:                             shellPutsFunc, 0, 0);",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "4108: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4109:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4110:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4137:     sqlite3_create_function(p->db, \"shell_int32\", 2, SQLITE_UTF8, 0,",
          "4138:                             shellInt32, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6378:   shellExec(pState->db, &rc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6408:   int i;",
          "6411:   for(i=1; i<nArg; i++){",
          "6412:     char *z = azArg[i];",
          "6413:     int n;",
          "6414:     if( z[0]=='-' && z[1]=='-' ) z++;",
          "6415:     n = strlen(z);",
          "6416:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6417:       bFreelist = 0;",
          "6418:     }",
          "6419:     else{",
          "6420:       raw_printf(stderr,",
          "6421:         \"unexpected option: %s - expected \\\"--freelist-corrupt\\\"\\n\",",
          "6422:         azArg[i]",
          "6423:       );",
          "6424:       return 1;",
          "6425:     }",
          "6426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6395:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6396:     \");\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6448:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\"",
          "6449:   );",
          "6451:   if( bFreelist ){",
          "6452:     shellExec(pState->db, &rc,",
          "6453:       \"WITH trunk(pgno) AS (\"",
          "6454:       \"  SELECT shell_int32(\"",
          "6455:       \"      (SELECT data FROM sqlite_dbpage WHERE pgno=1), 8) AS x \"",
          "6456:       \"      WHERE x>0\"",
          "6457:       \"    UNION\"",
          "6458:       \"  SELECT shell_int32(\"",
          "6459:       \"      (SELECT data FROM sqlite_dbpage WHERE pgno=trunk.pgno), 0) AS x \"",
          "6460:       \"      FROM trunk WHERE x>0\"",
          "6461:       \"),\"",
          "6462:       \"freelist(data, n, freepgno) AS (\"",
          "6463:       \"  SELECT data, shell_int32(data, 1)-1, t.pgno \"",
          "6464:       \"      FROM trunk t, sqlite_dbpage s WHERE s.pgno=t.pgno\"",
          "6465:       \"    UNION ALL\"",
          "6466:       \"  SELECT data, n-1, shell_int32(data, 2+n) \"",
          "6467:       \"      FROM freelist WHERE n>=0\"",
          "6468:       \")\"",
          "6469:       \"REPLACE INTO recovery.freelist SELECT freepgno FROM freelist;\"",
          "6470:     );",
          "6471:   }",
          "6473:   shellExec(pState->db, &rc,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6424:     \"    )\"",
          "6425:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6426:     \") \"",
          "6428:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6429:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6430:     \");\"",
          "",
          "[Removed Lines]",
          "6427:     \"FROM pages WHERE maxlen > 0;\"",
          "",
          "[Added Lines]",
          "6503:     \"FROM pages WHERE maxlen > 0 AND i NOT IN freelist;\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1757fed87f0705c8df065e5d697e989acd295a29",
      "candidate_info": {
        "commit_hash": "1757fed87f0705c8df065e5d697e989acd295a29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1757fed87f0705c8df065e5d697e989acd295a29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c"
        ],
        "message": "Adjustments to the page cache to try to avoid harmless TSAN warnings.\n\nFossilOrigin-Name: 383437be276719ac1c72688ae81017c63907ac561f2ffb8e42c43b012248f294",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc5ecc88f8a0855ba90039177ee284721b2035e4de56a1024e323216f011f0af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:       pGroup->mxPinned = pGroup->nMaxPage + 10 - pGroup->nMinPage;",
          "786:       pCache->pnPurgeable = &pGroup->nPurgeable;",
          "787:     }else{",
          "790:     }",
          "791:     pcache1LeaveMutex(pGroup);",
          "792:     if( pCache->nHash==0 ){",
          "",
          "[Removed Lines]",
          "788:       static unsigned int dummyCurrentPage;",
          "789:       pCache->pnPurgeable = &dummyCurrentPage;",
          "",
          "[Added Lines]",
          "789:       pCache->pnPurgeable = &pCache->nPurgeableDummy;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "978256f3d8dc66152825fe4d4175994750b0fd68",
      "candidate_info": {
        "commit_hash": "978256f3d8dc66152825fe4d4175994750b0fd68",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/978256f3d8dc66152825fe4d4175994750b0fd68",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Restore the on-line \".help\" for the \".explain\" command in the CLI.\n\nFossilOrigin-Name: 28b8f1036d569bccce56b4e7042348024b5dd1ffa04850cbeddab1e35c49e5b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f0ebea35d9d6b69a7bb4242fb79ff3db4267e429855fa6969f9f52ffee1c7a99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3511:   \".excel                   Display the output of next command in spreadsheet\",",
          "3512:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3513:   \".expert                  EXPERIMENTAL. Suggest indexes for queries\",",
          "3517:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3518:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "3519:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3514:   \".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
      "candidate_info": {
        "commit_hash": "ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/delete.c",
          "src/expr.c",
          "src/fkey.c",
          "src/insert.c",
          "src/pragma.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/update.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "A new implementation of sqlite3VdbeMakeLabel() is faster and makes fewer memory allocations by deferring memory allocation until sqlite3VdbeResolveLabel() is called, at which point the code generator has a better idea of how big the relocation table needs to be. The sqlite3VdbeMakeLabel() routine now takes a Parse* parameter instead of Vdbe*.\n\nFossilOrigin-Name: 4a0929ac76d8aa5dd65eac3b83d6bbf41e505e01d175ca0fb2b19ba02d439415",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/update.c||src/update.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 891f1f72187f0f9ec0d24fda98cc08be3ae3c3ff8b27c4e409ee7135c3106398",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1156:     addrNextRow = sqlite3VdbeCurrentAddr(v);",
          "1158:     if( nColTest>0 ){",
          "1161:       aGotoChng = sqlite3DbMallocRawNN(db, sizeof(int)*nColTest);",
          "1162:       if( aGotoChng==0 ) continue;",
          "",
          "[Removed Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     if( eOnePass!=ONEPASS_OFF ){",
          "521:     }else{",
          "522:       sqlite3WhereEnd(pWInfo);",
          "523:     }",
          "",
          "[Removed Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   opSeek = HasRowid(pTab) ? OP_NotExists : OP_NotFound;",
          "711:   if( eMode==ONEPASS_OFF ){",
          "712:     sqlite3VdbeAddOp4Int(v, opSeek, iDataCur, iLabel, iPk, nPk);",
          "",
          "[Removed Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   int regLeft = 0;",
          "554:   int regRight = 0;",
          "555:   u8 opx = op;",
          "558:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "559:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3033:   if( eType==IN_INDEX_NOOP ){",
          "3034:     ExprList *pList = pExpr->x.pList;",
          "3035:     CollSeq *pColl = sqlite3ExprCollSeq(pParse, pExpr->pLeft);",
          "3037:     int r2, regToFree;",
          "3038:     int regCkNull = 0;",
          "3039:     int ii;",
          "",
          "[Removed Lines]",
          "3036:     int labelOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3036:     int labelOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3077:   if( destIfNull==destIfFalse ){",
          "3078:     destStep2 = destIfFalse;",
          "3079:   }else{",
          "3081:   }",
          "3082:   for(i=0; i<nVector; i++){",
          "3083:     Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);",
          "",
          "[Removed Lines]",
          "3080:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3080:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3139:   }else{",
          "",
          "[Removed Lines]",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3702:       if( pDef->funcFlags & SQLITE_FUNC_COALESCE ){",
          "3704:         assert( nFarg>=2 );",
          "3705:         sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);",
          "3706:         for(i=1; i<nFarg; i++){",
          "",
          "[Removed Lines]",
          "3703:         int endCoalesce = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3703:         int endCoalesce = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3848:       return pExpr->pLeft->iTable + pExpr->iColumn;",
          "3849:     }",
          "3850:     case TK_IN: {",
          "3853:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3854:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "3855:       sqlite3VdbeAddOp2(v, OP_Integer, 1, target);",
          "",
          "[Removed Lines]",
          "3851:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "3852:       int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3851:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "3852:       int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3989:       pEList = pExpr->x.pList;",
          "3990:       aListelem = pEList->a;",
          "3991:       nExpr = pEList->nExpr;",
          "3993:       if( (pX = pExpr->pLeft)!=0 ){",
          "3994:         tempX = *pX;",
          "3995:         testcase( pX->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "3992:       endLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3992:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4012:         }else{",
          "4013:           pTest = aListelem[i].pExpr;",
          "4014:         }",
          "4016:         testcase( pTest->op==TK_COLUMN );",
          "4017:         sqlite3ExprIfFalse(pParse, pTest, nextCase, SQLITE_JUMPIFNULL);",
          "4018:         testcase( aListelem[i+1].pExpr->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "4015:         nextCase = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4015:         nextCase = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4381:   op = pExpr->op;",
          "4382:   switch( op ){",
          "4383:     case TK_AND: {",
          "4385:       testcase( jumpIfNull==0 );",
          "4386:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4387:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4384:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4384:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4467:     }",
          "4468: #ifndef SQLITE_OMIT_SUBQUERY",
          "4469:     case TK_IN: {",
          "4471:       int destIfNull = jumpIfNull ? dest : destIfFalse;",
          "4472:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "4473:       sqlite3VdbeGoto(v, dest);",
          "",
          "[Removed Lines]",
          "4470:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4470:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4554:       break;",
          "4555:     }",
          "4556:     case TK_OR: {",
          "4558:       testcase( jumpIfNull==0 );",
          "4559:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4560:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4557:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4557:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4638:       if( jumpIfNull ){",
          "4639:         sqlite3ExprCodeIN(pParse, pExpr, dest, dest);",
          "4640:       }else{",
          "4642:         sqlite3ExprCodeIN(pParse, pExpr, dest, destIfNull);",
          "4643:         sqlite3VdbeResolveLabel(v, destIfNull);",
          "4644:       }",
          "",
          "[Removed Lines]",
          "4641:         int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4641:         int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:         if( p->isDeferred || (db->flags & SQLITE_DeferFKs) ) break;",
          "730:       }",
          "731:       if( !p ) return;",
          "733:       sqlite3VdbeAddOp2(v, OP_FkIfZero, 1, iSkip); VdbeCoverage(v);",
          "734:     }",
          "",
          "[Removed Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   if( tmask & TRIGGER_BEFORE ){",
          "871:     int regCols = sqlite3GetTempRange(pParse, pTab->nCol+1);",
          "",
          "[Removed Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1356:     switch( onError ){",
          "1357:       case OE_Replace: {",
          "1358:         assert( onError==OE_Replace );",
          "1360:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1361:           VdbeCoverage(v);",
          "1362:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "",
          "[Removed Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:         continue;",
          "1409:       }",
          "1411:       sqlite3VdbeVerifyAbortable(v, onError);",
          "1412:       sqlite3ExprIfTrue(pParse, pExpr, allOk, SQLITE_JUMPIFNULL);",
          "1413:       if( onError==OE_Ignore ){",
          "",
          "[Removed Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1476:   if( pkChng && pPk==0 ){",
          "1480:     onError = pTab->keyConf;",
          "",
          "[Removed Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1624:       VdbeComment((v, \"Skip upsert subroutine\"));",
          "1625:       sqlite3VdbeJumpHere(v, upsertJump);",
          "1626:     }else{",
          "1628:     }",
          "1629:     if( bAffinityDone==0 && (pUpIdx==0 || pUpIdx==pIdx) ){",
          "1630:       sqlite3TableAffinity(v, pTab, regNewData+1);",
          "",
          "[Removed Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:           x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, &aiCols);",
          "1377:           assert( x==0 );",
          "1378:         }",
          "",
          "[Removed Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:         if( pTab->pCheck && (db->flags & SQLITE_IgnoreChecks)==0 ){",
          "1597:           ExprList *pCheck = sqlite3ExprListDup(db, pTab->pCheck, 0);",
          "1598:           if( db->mallocFailed==0 ){",
          "1601:             char *zErr;",
          "1602:             int k;",
          "1603:             pParse->iSelfTab = iDataCur + 1;",
          "",
          "[Removed Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(v);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(pParse);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1621:           for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){",
          "1622:             int jmp2, jmp3, jmp4, jmp5;",
          "1624:             if( pPk==pIdx ) continue;",
          "1625:             r1 = sqlite3GenerateIndexKey(pParse, pIdx, iDataCur, 0, 0, &jmp3,",
          "1626:                                          pPrior, r1);",
          "",
          "[Removed Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1643:             if( IsUniqueIndex(pIdx) ){",
          "1645:               int jmp6;",
          "1646:               int kk;",
          "1647:               for(kk=0; kk<pIdx->nKeyCol; kk++){",
          "",
          "[Removed Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:   }",
          "632:   assert( pSelect->iOffset==0 || pSelect->iLimit!=0 );",
          "633:   iLimit = pSelect->iOffset ? pSelect->iOffset+1 : pSelect->iLimit;",
          "635:   sqlite3ExprCodeExprList(pParse, pSort->pOrderBy, regBase, regOrigData,",
          "636:                           SQLITE_ECEL_DUP | (regOrigData? SQLITE_ECEL_REF : 0));",
          "637:   if( bSeq ){",
          "",
          "[Removed Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:                                            pKI->nAllField-pKI->nKeyField-1);",
          "671:     addrJmp = sqlite3VdbeCurrentAddr(v);",
          "672:     sqlite3VdbeAddOp3(v, OP_Jump, addrJmp+1, 0, addrJmp+1); VdbeCoverage(v);",
          "674:     pSort->regReturn = ++pParse->nMem;",
          "675:     sqlite3VdbeAddOp2(v, OP_Gosub, pSort->regReturn, pSort->labelBkOut);",
          "676:     sqlite3VdbeAddOp1(v, OP_ResetSorter, pSort->iECursor);",
          "",
          "[Removed Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2329:   if( sqlite3AuthCheck(pParse, SQLITE_RECURSIVE, 0, 0, 0) ) return;",
          "2334:   computeLimitRegisters(pParse, p, addrBreak);",
          "2335:   pLimit = p->pLimit;",
          "",
          "[Removed Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2399:   sqlite3VdbeAddOp1(v, OP_Delete, iQueue);",
          "2403:   codeOffset(v, regOffset, addrCont);",
          "2404:   selectInnerLoop(pParse, p, iCurrent,",
          "2405:       0, 0, pDest, addrCont, addrBreak);",
          "",
          "[Removed Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2707:         if( dest.eDest!=priorOp ){",
          "2708:           int iCont, iBreak, iStart;",
          "2709:           assert( p->pEList );",
          "2712:           computeLimitRegisters(pParse, p, iBreak);",
          "2713:           sqlite3VdbeAddOp2(v, OP_Rewind, unionTab, iBreak); VdbeCoverage(v);",
          "2714:           iStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(v);",
          "2711:           iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2711:           iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2778:         assert( p->pEList );",
          "2781:         computeLimitRegisters(pParse, p, iBreak);",
          "2782:         sqlite3VdbeAddOp2(v, OP_Rewind, tab1, iBreak); VdbeCoverage(v);",
          "2783:         r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(v);",
          "2780:         iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2780:         iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2907:   int addr;",
          "2909:   addr = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3144:   db = pParse->db;",
          "3145:   v = pParse->pVdbe;",
          "",
          "[Removed Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(v);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(pParse);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5330:       regAgg = 0;",
          "5331:     }",
          "5332:     if( pF->iDistinct>=0 ){",
          "5336:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6042:   if( (p->selFlags & SF_FixedLimit)==0 ){",
          "6044:   }",
          "",
          "[Removed Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6105:     assert( p->pEList==pEList );",
          "6106: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6107:     if( pWin ){",
          "6111:       int regGosub = ++pParse->nMem;",
          "6113:       sqlite3WindowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(v);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(v);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(pParse);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(pParse);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6182:     }",
          "",
          "[Removed Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6271:       iUseFlag = ++pParse->nMem;",
          "6272:       iAbortFlag = ++pParse->nMem;",
          "6273:       regOutputRow = ++pParse->nMem;",
          "6275:       regReset = ++pParse->nMem;",
          "6277:       iAMem = pParse->nMem + 1;",
          "6278:       pParse->nMem += pGroupBy->nExpr;",
          "6279:       iBMem = pParse->nMem + 1;",
          "",
          "[Removed Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(v);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(pParse);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:       if( SQLITE_OK==sqlite3ResolveExprNames(&sNC, pWhen)",
          "945:        && db->mallocFailed==0",
          "946:       ){",
          "948:         sqlite3ExprIfFalse(pSubParse, pWhen, iEndTrigger, SQLITE_JUMPIFNULL);",
          "949:       }",
          "950:       sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(pSubParse);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: #endif",
          "",
          "[Removed Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         VdbeCoverage(v);",
          "577:       }",
          "578:       if( eOnePass!=ONEPASS_SINGLE ){",
          "580:       }",
          "581:       sqlite3VdbeAddOp2(v, OP_IsNull, pPk ? regKey : regOldRowid, labelBreak);",
          "582:       VdbeCoverageIf(v, pPk==0);",
          "583:       VdbeCoverageIf(v, pPk!=0);",
          "584:     }else if( pPk ){",
          "586:       sqlite3VdbeAddOp2(v, OP_Rewind, iEph, labelBreak); VdbeCoverage(v);",
          "587:       addrTop = sqlite3VdbeAddOp2(v, OP_RowData, iEph, regKey);",
          "588:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, regKey, 0);",
          "",
          "[Removed Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(v);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "231: void sqlite3VdbeUsesBtree(Vdbe*, int);",
          "232: VdbeOp *sqlite3VdbeGetOp(Vdbe*, int);",
          "234: void sqlite3VdbeRunOnlyOnce(Vdbe*);",
          "235: void sqlite3VdbeReusable(Vdbe*);",
          "236: void sqlite3VdbeDelete(Vdbe*);",
          "",
          "[Removed Lines]",
          "233: int sqlite3VdbeMakeLabel(Vdbe*);",
          "",
          "[Added Lines]",
          "233: int sqlite3VdbeMakeLabel(Parse*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: }",
          "",
          "[Removed Lines]",
          "451: int sqlite3VdbeMakeLabel(Vdbe *v){",
          "452:   Parse *p = v->pParse;",
          "453:   int i = p->nLabel++;",
          "454:   assert( v->magic==VDBE_MAGIC_INIT );",
          "455:   if( (i & (i-1))==0 ){",
          "456:     p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "457:                                        (i*2+1)*sizeof(p->aLabel[0]));",
          "458:   }",
          "459:   if( p->aLabel ){",
          "460:     p->aLabel[i] = -1;",
          "461:   }",
          "462:   return ADDR(i);",
          "",
          "[Added Lines]",
          "451: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "452:   return ADDR(pParse->nLabel++);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: void sqlite3VdbeResolveLabel(Vdbe *v, int x){",
          "471:   Parse *p = v->pParse;",
          "472:   int j = ADDR(x);",
          "473:   assert( v->magic==VDBE_MAGIC_INIT );",
          "474:   assert( j<p->nLabel );",
          "475:   assert( j>=0 );",
          "477: #ifdef SQLITE_DEBUG",
          "481: #endif",
          "483:     p->aLabel[j] = v->nOp;",
          "484:   }",
          "",
          "[Removed Lines]",
          "476:   if( p->aLabel ){",
          "478:     if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "479:       printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "480:     }",
          "",
          "[Added Lines]",
          "460: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "461:   int nNewSize = p->nLabel+10;",
          "462:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "463:                      nNewSize*sizeof(p->aLabel[0]));",
          "464:   if( p->aLabel==0 ){",
          "465:     p->nLabelAlloc = 0;",
          "466:   }else{",
          "467: #ifdef SQLITE_DEBUG",
          "468:     int i;",
          "469:     for(i=p->nLabelAlloc; i<nNewSize; i++) p->aLabel[i] = -1;",
          "470: #endif",
          "471:     p->nLabelAlloc = nNewSize;",
          "472:     p->aLabel[j] = v->nOp;",
          "473:   }",
          "474: }",
          "482:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "483:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "484:   }",
          "486:   if( p->nLabelAlloc < p->nLabel ){",
          "487:     resizeResolveLabel(p,v,j);",
          "488:   }else{",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:     addrTop = sqlite3VdbeAddOp1(v, OP_Rewind, pLevel->iTabCur); VdbeCoverage(v);",
          "838:   }",
          "839:   if( pPartial ){",
          "841:     sqlite3ExprIfFalse(pParse, pPartial, iContinue, SQLITE_JUMPIFNULL);",
          "842:     pLoop->wsFlags |= WHERE_PARTIALIDX;",
          "843:   }",
          "",
          "[Removed Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4643:   pWInfo->pResultSet = pResultSet;",
          "4644:   pWInfo->aiCurOnePass[0] = pWInfo->aiCurOnePass[1] = -1;",
          "4645:   pWInfo->nLevel = nTabList;",
          "4647:   pWInfo->wctrlFlags = wctrlFlags;",
          "4648:   pWInfo->iLimit = iAuxArg;",
          "4649:   pWInfo->savedNQueryLoop = pParse->nQueryLoop;",
          "",
          "[Removed Lines]",
          "4646:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4646:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     pLoop->wsFlags |= WHERE_IN_ABLE;",
          "567:     if( pLevel->u.in.nIn==0 ){",
          "569:     }",
          "571:     i = pLevel->u.in.nIn;",
          "",
          "[Removed Lines]",
          "568:       pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "568:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1216:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "1217:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1216:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "1217:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:      || pFunc->zName==first_valueName",
          "1331:     ){",
          "1332:       int csr = pWin->csrApp;",
          "1334:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1335:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "",
          "[Removed Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:       int nArg = pWin->pOwner->x.pList->nExpr;",
          "1354:       int iEph = pMWin->iEphCsr;",
          "1355:       int csr = pWin->csrApp;",
          "1357:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1359:       if( nArg<3 ){",
          "",
          "[Removed Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1616:   regFlushPart = ++pParse->nMem;",
          "1620:   regStart = ++pParse->nMem;",
          "1621:   regEnd = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1725:    || pMWin->eStart==TK_PRECEDING",
          "1726:    || pMWin->eStart==TK_FOLLOWING",
          "1727:   ){",
          "1729:     if( pMWin->eStart==TK_PRECEDING ){",
          "1730:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1731:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(v);;",
          "",
          "[Added Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1890:        || (pMWin->eStart==TK_CURRENT && pMWin->eEnd==TK_UNBOUNDED)",
          "1891:   );",
          "1894:   regNewPeer = pParse->nMem+1;",
          "1895:   pParse->nMem += nPeer;",
          "1898:   regFlushPart = ++pParse->nMem;",
          "1901:   csrLead = pParse->nTab++;",
          "1902:   regCtr = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(v);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(pParse);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ]
      }
    }
  ]
}