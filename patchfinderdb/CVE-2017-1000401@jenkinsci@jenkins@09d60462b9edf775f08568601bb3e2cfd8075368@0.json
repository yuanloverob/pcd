{
  "cve_id": "CVE-2017-1000401",
  "cve_desc": "The Jenkins 2.73.1 and earlier, 2.83 and earlier default form control for passwords and other secrets, <f:password/>, supports form validation (e.g. for API keys). The form validation AJAX requests were sent via GET, which could result in secrets being logged to a HTTP access log in non-default configurations of Jenkins, and made available to users with access to these log files. Form validation for <f:password/> is now always sent via POST, which is typically not logged.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "09d60462b9edf775f08568601bb3e2cfd8075368",
  "patch_info": {
    "commit_hash": "09d60462b9edf775f08568601bb3e2cfd8075368",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/09d60462b9edf775f08568601bb3e2cfd8075368",
    "files": [
      "core/src/main/resources/lib/form/password.jelly",
      "test/src/test/java/lib/form/PasswordTest.java"
    ],
    "message": "[SECURITY-616] Password fields should use POST requests for form validation to avoid disclosing secrets in request URLs.",
    "before_after_code_files": [
      "core/src/main/resources/lib/form/password.jelly||core/src/main/resources/lib/form/password.jelly",
      "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/resources/lib/form/password.jelly||core/src/main/resources/lib/form/password.jelly": [
      "File: core/src/main/resources/lib/form/password.jelly -> core/src/main/resources/lib/form/password.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:          name =\"${attrs.name ?: '_.'+attrs.field}\"",
      "59:          value=\"${h.getPasswordValue(attrs.value ?: instance[attrs.field])}\"",
      "60:          type=\"password\"",
      "61:          ATTRIBUTES=\"${attrs}\" EXCEPT=\"field clazz\" />",
      "62:   <!-- TODO consider customizedFields -->",
      "63: </j:jelly>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:          checkMethod=\"post\"",
      "",
      "---------------"
    ],
    "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
      "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
      "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "29: import hudson.Extension;",
      "30: import hudson.cli.CopyJobCommand;",
      "31: import hudson.cli.GetJobCommand;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37: import hudson.model.JobPropertyDescriptor;",
      "38: import hudson.model.User;",
      "39: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "40: import hudson.util.Secret;",
      "41: import java.io.ByteArrayOutputStream;",
      "42: import java.io.PrintStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: import hudson.util.FormValidation;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55: import org.jvnet.hudson.test.Issue;",
      "56: import org.jvnet.hudson.test.TestExtension;",
      "57: import org.kohsuke.stapler.DataBoundConstructor;",
      "62: public class PasswordTest extends HudsonTestCase implements Describable<PasswordTest> {",
      "63:     public Secret secret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: import org.kohsuke.stapler.QueryParameter;",
      "61: import org.kohsuke.stapler.Stapler;",
      "62: import org.kohsuke.stapler.StaplerRequest;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "160:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
      "161:         }",
      "162:     }",
      "163:     public static class VulnerableProperty extends JobProperty<FreeStyleProject> {",
      "164:         public final Secret secret;",
      "165:         @DataBoundConstructor",
      "166:         public VulnerableProperty(Secret secret) {",
      "167:             this.secret = secret;",
      "168:         }",
      "170:         public static class DescriptorImpl extends JobPropertyDescriptor {",
      "174:             }",
      "175:         }",
      "176:     }",
      "",
      "[Removed Lines]",
      "169:         @TestExtension(\"testExposedCiphertext\")",
      "171:             @Override // TODO delete in 1.635+",
      "172:             public String getDisplayName() {",
      "173:                 return \"VulnerableProperty\";",
      "",
      "[Added Lines]",
      "166:     @Issue(\"SECURITY-616\")",
      "167:     public void testCheckMethod() throws Exception {",
      "168:         FreeStyleProject p = createFreeStyleProject(\"p\");",
      "169:         p.addProperty(new VulnerableProperty(Secret.fromString(\"\")));",
      "170:         HtmlPasswordInput field = createWebClient().getPage(p, \"configure\").getFormByName(\"config\").getInputByName(\"_.secret\");",
      "171:         while (VulnerableProperty.DescriptorImpl.incomingURL == null) { // waitForBackgroundJavaScript does not work well",
      "172:             Thread.sleep(100); // form validation of saved value",
      "173:         }",
      "174:         VulnerableProperty.DescriptorImpl.incomingURL = null;",
      "175:         String secret = \"s3cr3t\";",
      "176:         field.setText(secret);",
      "177:         while (VulnerableProperty.DescriptorImpl.incomingURL == null) {",
      "178:             Thread.sleep(100); // form validation of edited value",
      "179:         }",
      "180:         assertThat(VulnerableProperty.DescriptorImpl.incomingURL, not(containsString(secret)));",
      "181:         assertEquals(secret, VulnerableProperty.DescriptorImpl.checkedSecret);",
      "182:     }",
      "190:         @TestExtension",
      "192:             static String incomingURL;",
      "193:             static String checkedSecret;",
      "194:             public FormValidation doCheckSecret(@QueryParameter String value) {",
      "195:                 StaplerRequest req = Stapler.getCurrentRequest();",
      "196:                 incomingURL = req.getRequestURIWithQueryString();",
      "197:                 System.err.println(\"processing \" + incomingURL + \" via \" + req.getMethod() + \": \" + value);",
      "198:                 checkedSecret = value;",
      "199:                 return FormValidation.ok();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "814d202716a6c61c7d371c6a62755d296fe199a5",
      "candidate_info": {
        "commit_hash": "814d202716a6c61c7d371c6a62755d296fe199a5",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/814d202716a6c61c7d371c6a62755d296fe199a5",
        "files": [
          "core/src/main/java/jenkins/security/ApiCrumbExclusion.java",
          "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "test/pom.xml",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java",
          "test/src/test/java/hudson/model/AbstractProjectTest.java",
          "test/src/test/java/hudson/model/ExecutorTest.java",
          "test/src/test/java/hudson/model/ItemsTest.java",
          "test/src/test/java/hudson/model/JobTest.java",
          "test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java",
          "test/src/test/java/hudson/model/ProjectTest.java",
          "test/src/test/java/hudson/model/QueueTest.java",
          "test/src/test/java/hudson/model/UserTest.java",
          "test/src/test/java/hudson/model/ViewTest.java",
          "test/src/test/java/hudson/security/ExtendedReadPermissionTest.java",
          "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
          "test/src/test/java/hudson/security/LoginTest.java",
          "test/src/test/java/hudson/util/RobustReflectionConverterTest.java",
          "test/src/test/java/jenkins/model/JenkinsTest.java",
          "test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java",
          "test/src/test/java/jenkins/security/Security380Test.java",
          "test/src/test/java/lib/form/PasswordTest.java",
          "test/src/test/resources/lib/form/PasswordTest/SecretNotPlainText/index.jelly",
          "test/src/test/resources/lib/form/PasswordTest/test1.jelly"
        ],
        "message": "[JENKINS-22474] API Token does not require CSRF token (#3129)\n\n* [JENKINS-22474] API Token does not require CSRF token\n- in order to ease the use of the api, we are not requiring the request to have a crumb\n- in terms of security it's not a problem normally since the CSRF attacks use the cookies and in case of API Token, it's session-less / cookie-less\n\n* - adjust the license header\n\n* - add test for basic authentication\n- add test for login process\n\n* - add test for form submission using ui (htmlunit), not just login form\n\n* - modification requested by Jesse\n\n* - pom.xml update to use the last version of jenkins-test-harness (with the token helper methods)\n- beginning of the simplification of tests\n\n* - using the try-with-resource approach to ease readability\n\n* - using closure method now\n\n* - add missing login transformation\n\n* - add unit test\n\n* - use withToken\n- remove useless crumb for GET method\n- add fail (otherwise the assert in catch is not as useful as it could be)\n\n* another bunch of test cases\n\n* - for HudsonTestCase, some additional modifications are required: changing the view / different type of management for the variable inside the views\n\n* - small other tests\n\n* - last batch for the login method\n\n* - crumb is not more required since we are using API Token\n\n* - converting auth to ApiToken to avoid crumb method\n\n* - converting auth to ApiToken to avoid crumb method (second)\n\n* - remove usage of closure aware methods\n\n* - update the pom using the snapshot as adviced by Jesse\n- modifications on other class to adapt to the last modifications in JTH\n\n* - modifications requested during code review\n\n* - also put back my changes to the conflicted file\n\n* - correction of the merge :)",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiCrumbExclusion.java||core/src/main/java/jenkins/security/ApiCrumbExclusion.java",
          "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java||test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java",
          "test/src/test/java/hudson/model/AbstractProjectTest.java||test/src/test/java/hudson/model/AbstractProjectTest.java",
          "test/src/test/java/hudson/model/ExecutorTest.java||test/src/test/java/hudson/model/ExecutorTest.java",
          "test/src/test/java/hudson/model/ItemsTest.java||test/src/test/java/hudson/model/ItemsTest.java",
          "test/src/test/java/hudson/model/JobTest.java||test/src/test/java/hudson/model/JobTest.java",
          "test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java||test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java",
          "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java",
          "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java",
          "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java",
          "test/src/test/java/hudson/model/ViewTest.java||test/src/test/java/hudson/model/ViewTest.java",
          "test/src/test/java/hudson/security/ExtendedReadPermissionTest.java||test/src/test/java/hudson/security/ExtendedReadPermissionTest.java",
          "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
          "test/src/test/java/hudson/security/LoginTest.java||test/src/test/java/hudson/security/LoginTest.java",
          "test/src/test/java/hudson/util/RobustReflectionConverterTest.java||test/src/test/java/hudson/util/RobustReflectionConverterTest.java",
          "test/src/test/java/jenkins/model/JenkinsTest.java||test/src/test/java/jenkins/model/JenkinsTest.java",
          "test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java||test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java||test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java",
          "test/src/test/java/jenkins/security/Security380Test.java||test/src/test/java/jenkins/security/Security380Test.java",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java",
          "test/src/test/resources/lib/form/PasswordTest/test1.jelly||test/src/test/resources/lib/form/PasswordTest/SecretNotPlainText/index.jelly"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiCrumbExclusion.java||core/src/main/java/jenkins/security/ApiCrumbExclusion.java": [
          "File: core/src/main/java/jenkins/security/ApiCrumbExclusion.java -> core/src/main/java/jenkins/security/ApiCrumbExclusion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security;",
          "26: import hudson.Extension;",
          "27: import hudson.security.csrf.CrumbExclusion;",
          "28: import org.jenkinsci.Symbol;",
          "29: import org.kohsuke.accmod.Restricted;",
          "30: import org.kohsuke.accmod.restrictions.DoNotUse;",
          "32: import javax.servlet.FilterChain;",
          "33: import javax.servlet.ServletException;",
          "34: import javax.servlet.http.HttpServletRequest;",
          "35: import javax.servlet.http.HttpServletResponse;",
          "36: import java.io.IOException;",
          "41: @Symbol(\"apiToken\")",
          "42: @Extension",
          "43: @Restricted(DoNotUse.class)",
          "44: public class ApiCrumbExclusion extends CrumbExclusion {",
          "45:     @Override",
          "46:     public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {",
          "47:         if (Boolean.TRUE.equals(request.getAttribute(BasicHeaderApiTokenAuthenticator.class.getName()))) {",
          "48:             chain.doFilter(request, response);",
          "49:             return true;",
          "50:         }",
          "51:         return false;",
          "52:     }",
          "53: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java": [
          "File: core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java -> core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:         User u = User.getById(username, true);",
          "33:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "34:         if (t!=null && t.matchesPassword(password)) {",
          "35:             try {",
          "36:                 UserDetails userDetails = u.getUserDetailsForImpersonation();",
          "39:                 SecurityListener.fireAuthenticated(userDetails);",
          "42:             } catch (UsernameNotFoundException x) {",
          "",
          "[Removed Lines]",
          "37:                 Authentication auth = u.impersonate(userDetails);",
          "41:                 return auth;",
          "",
          "[Added Lines]",
          "35:             Authentication auth;",
          "38:                 auth = u.impersonate(userDetails);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:             } catch (DataAccessException x) {",
          "48:                 throw new ServletException(x);",
          "49:             }",
          "50:         }",
          "51:         return null;",
          "52:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:             req.setAttribute(BasicHeaderApiTokenAuthenticator.class.getName(), true);",
          "51:             return auth;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
          "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import hudson.cli.util.ScriptLoader;",
          "32: import hudson.model.Node.Mode;",
          "33: import hudson.model.Slave;",
          "34: import hudson.remoting.Channel;",
          "35: import hudson.slaves.JNLPLauncher;",
          "36: import hudson.slaves.RetentionStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import hudson.model.User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     public void anonymousCanAlwaysLoadJARs() throws Exception {",
          "87:         r.jenkins.setNodes(Collections.singletonList(createNewJnlpSlave(\"test\")));",
          "88:         JenkinsRule.WebClient wc = r.createWebClient();",
          "92:         JenkinsRule.WebClient jnlpAgent = r.createWebClient();",
          "",
          "[Removed Lines]",
          "89:         HtmlPage p = wc.login(\"alice\").goTo(\"computer/test/\");",
          "",
          "[Added Lines]",
          "90:         HtmlPage p = wc.withBasicApiToken(User.getById(\"alice\", true)).goTo(\"computer/test/\");",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java||test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java": [
          "File: test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java -> test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import com.gargoylesoftware.htmlunit.util.NameValuePair;",
          "12: import hudson.model.User;",
          "13: import hudson.security.GlobalMatrixAuthorizationStrategy;",
          "16: import jenkins.model.Jenkins;",
          "18: import org.junit.Rule;",
          "19: import org.junit.Test;",
          "20: import org.jvnet.hudson.test.Issue;",
          "",
          "[Removed Lines]",
          "14: import hudson.security.HudsonPrivateSecurityRealm;",
          "15: import hudson.security.Permission;",
          "17: import org.acegisecurity.context.SecurityContextHolder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import com.gargoylesoftware.htmlunit.ElementNotFoundException;",
          "27: import java.io.IOException;",
          "28: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.net.URL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         auth.add(Jenkins.READ, \"users\");",
          "74:         j.jenkins.setAuthorizationStrategy(auth);",
          "77:         NameValuePair param = new NameValuePair(\"no\", \"true\");",
          "78:         request.setRequestParameters(Collections.singletonList(param));",
          "80:         HudsonHomeDiskUsageMonitor mon = HudsonHomeDiskUsageMonitor.get();",
          "82:         try {",
          "84:             wc.getPage(request);",
          "85:         } catch (FailingHttpStatusCodeException e) {",
          "86:             assertEquals(403, e.getStatusCode());",
          "87:         }",
          "88:         assertTrue(mon.isEnabled());",
          "90:         try {",
          "93:         } catch (FailingHttpStatusCodeException e) {",
          "94:             assertEquals(403, e.getStatusCode());",
          "95:         }",
          "98:         wc.getPage(request);",
          "99:         assertFalse(mon.isEnabled());",
          "",
          "[Removed Lines]",
          "76:         WebRequest request = new WebRequest(wc.createCrumbedUrl(\"administrativeMonitor/hudsonHomeIsFull/act\"), HttpMethod.POST);",
          "83:             wc.login(\"bob\");",
          "91:             WebRequest getIndex = new WebRequest(wc.createCrumbedUrl(\"administrativeMonitor/hudsonHomeIsFull\"), HttpMethod.GET);",
          "92:             wc.getPage(getIndex);",
          "97:         wc.login(\"administrator\");",
          "",
          "[Added Lines]",
          "74:         User bob = User.getById(\"bob\", true);",
          "75:         User administrator = User.getById(\"administrator\", true);",
          "77:         WebRequest request = new WebRequest(new URL(wc.getContextPath() + \"administrativeMonitor/hudsonHomeIsFull/act\"), HttpMethod.POST);",
          "83:         wc.withBasicApiToken(bob);",
          "86:             fail();",
          "92:         WebRequest requestReadOnly = new WebRequest(new URL(wc.getContextPath() + \"administrativeMonitor/hudsonHomeIsFull\"), HttpMethod.GET);",
          "94:             wc.getPage(requestReadOnly);",
          "95:             fail();",
          "100:         wc.withBasicApiToken(administrator);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/AbstractProjectTest.java||test/src/test/java/hudson/model/AbstractProjectTest.java": [
          "File: test/src/test/java/hudson/model/AbstractProjectTest.java -> test/src/test/java/hudson/model/AbstractProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:                 grant(Item.READ).everywhere().to(\"alice\").",
          "630:                 grant(Item.READ).onItems(us).to(\"bob\").",
          "631:                 grant(Item.READ).onItems(ds).to(\"charlie\"));",
          "633:         System.out.println(api);",
          "634:         assertThat(api, containsString(\"downstream-project\"));",
          "636:         System.out.println(api);",
          "637:         assertThat(api, containsString(\"upstream-project\"));",
          "639:         System.out.println(api);",
          "640:         assertThat(api, not(containsString(\"downstream-project\")));",
          "642:         System.out.println(api);",
          "643:         assertThat(api, not(containsString(\"upstream-project\")));",
          "644:     }",
          "",
          "[Removed Lines]",
          "632:         String api = j.createWebClient().login(\"alice\").goTo(us.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "635:         api = j.createWebClient().login(\"alice\").goTo(ds.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "638:         api = j.createWebClient().login(\"bob\").goTo(us.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "641:         api = j.createWebClient().login(\"charlie\").goTo(ds.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "",
          "[Added Lines]",
          "632:         String api = j.createWebClient().withBasicCredentials(\"alice\").goTo(us.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "635:         api = j.createWebClient().withBasicCredentials(\"alice\").goTo(ds.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "638:         api = j.createWebClient().withBasicCredentials(\"bob\").goTo(us.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "641:         api = j.createWebClient().withBasicCredentials(\"charlie\").goTo(ds.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ExecutorTest.java||test/src/test/java/hudson/model/ExecutorTest.java": [
          "File: test/src/test/java/hudson/model/ExecutorTest.java -> test/src/test/java/hudson/model/ExecutorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:             grant(Jenkins.READ).everywhere().toEveryone().",
          "137:             grant(Item.READ).onItems(publicProject).toEveryone().",
          "138:             grant(Item.READ).onItems(secretProject).to(\"has-security-clearance\"));",
          "140:         System.out.println(api);",
          "141:         assertThat(api, allOf(containsString(\"public-project\"), containsString(\"secret-project\")));",
          "143:         System.out.println(api);",
          "144:         assertThat(api, allOf(containsString(\"public-project\"), not(containsString(\"secret-project\"))));",
          "145:     }",
          "",
          "[Removed Lines]",
          "139:         String api = j.createWebClient().login(\"has-security-clearance\").goTo(slave.toComputer().getUrl() + \"api/json?pretty&depth=1\", null).getWebResponse().getContentAsString();",
          "142:         api = j.createWebClient().login(\"regular-joe\").goTo(slave.toComputer().getUrl() + \"api/json?pretty&depth=1\", null).getWebResponse().getContentAsString();",
          "",
          "[Added Lines]",
          "140:         JenkinsRule.WebClient wc = j.createWebClient();",
          "141:         wc.withBasicCredentials(\"has-security-clearance\");",
          "142:         String api = wc.goTo(slave.toComputer().getUrl() + \"api/json?pretty&depth=1\", null).getWebResponse().getContentAsString();",
          "146:         wc = j.createWebClient();",
          "147:         wc.withBasicCredentials(\"regular-joe\");",
          "148:         api = wc.goTo(slave.toComputer().getUrl() + \"api/json?pretty&depth=1\", null).getWebResponse().getContentAsString();",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ItemsTest.java||test/src/test/java/hudson/model/ItemsTest.java": [
          "File: test/src/test/java/hudson/model/ItemsTest.java -> test/src/test/java/hudson/model/ItemsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: import org.acegisecurity.context.SecurityContextHolder;",
          "46: import org.apache.commons.httpclient.HttpStatus;",
          "48: import org.junit.Test;",
          "50: import static org.hamcrest.Matchers.containsInAnyOrder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import org.junit.Before;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     private void overwriteTargetSetUp() throws Exception {",
          "127:         r.createFreeStyleProject(\"visible\").setDescription(\"visible\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:         User.getById(\"attacker\", true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:                 JenkinsRule.WebClient wc = wc(r);",
          "186:                 wc.getOptions().setRedirectEnabled(false);",
          "187:                 wc.getOptions().setThrowExceptionOnFailingStatusCode(false); // redirect perversely counts as a failure",
          "189:                 if (webResponse.getStatusCode() != HttpStatus.SC_MOVED_TEMPORARILY) {",
          "190:                     throw new FailingHttpStatusCodeException(webResponse);",
          "191:                 }",
          "",
          "[Removed Lines]",
          "188:                 WebResponse webResponse = wc.getPage(new WebRequest(createCrumbedUrl(r, wc, \"createItem?name=\" + target + \"&mode=hudson.model.FreeStyleProject\"), HttpMethod.POST)).getWebResponse();",
          "",
          "[Added Lines]",
          "191:                 WebResponse webResponse = wc.getPage(new WebRequest(new URL(wc.getContextPath() + \"createItem?name=\" + target + \"&mode=hudson.model.FreeStyleProject\"), HttpMethod.POST)).getWebResponse();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:                 JenkinsRule.WebClient wc = wc(r);",
          "199:                 wc.getOptions().setRedirectEnabled(false);",
          "200:                 wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "202:                 r.jenkins.getItem(\"dupe\").delete();",
          "203:                 if (webResponse.getStatusCode() != HttpStatus.SC_MOVED_TEMPORARILY) {",
          "204:                     throw new FailingHttpStatusCodeException(webResponse);",
          "",
          "[Removed Lines]",
          "201:                 WebResponse webResponse = wc.getPage(new WebRequest(createCrumbedUrl(r, wc, \"createItem?name=\" + target + \"&mode=copy&from=dupe\"), HttpMethod.POST)).getWebResponse();",
          "",
          "[Added Lines]",
          "204:                 WebResponse webResponse = wc.getPage(new WebRequest(new URL(wc.getContextPath() + \"createItem?name=\" + target + \"&mode=copy&from=dupe\"), HttpMethod.POST)).getWebResponse();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:         REST_CREATE {",
          "210:             @Override void run(JenkinsRule r, String target) throws Exception {",
          "211:                 JenkinsRule.WebClient wc = wc(r);",
          "213:                 req.setAdditionalHeader(\"Content-Type\", \"application/xml\");",
          "214:                 req.setRequestBody(\"<project/>\");",
          "215:                 wc.getPage(req);",
          "",
          "[Removed Lines]",
          "212:                 WebRequest req = new WebRequest(createCrumbedUrl(r, wc, \"createItem?name=\" + target), HttpMethod.POST);",
          "",
          "[Added Lines]",
          "215:                 WebRequest req = new WebRequest(new URL(wc.getContextPath() + \"createItem?name=\" + target), HttpMethod.POST);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:                 JenkinsRule.WebClient wc = wc(r);",
          "223:                 wc.getOptions().setRedirectEnabled(false);",
          "224:                 wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "226:                 if (webResponse.getStatusCode() != HttpStatus.SC_MOVED_TEMPORARILY) {",
          "227:                     r.jenkins.getItem(\"dupe\").delete();",
          "228:                     throw new FailingHttpStatusCodeException(webResponse);",
          "",
          "[Removed Lines]",
          "225:                 WebResponse webResponse = wc.getPage(new WebRequest(createCrumbedUrl(r, wc, \"job/dupe/doRename?newName=\" + target), HttpMethod.POST)).getWebResponse();",
          "",
          "[Added Lines]",
          "228:                 WebResponse webResponse = wc.getPage(new WebRequest(new URL(wc.getContextPath() + \"job/dupe/doRename?newName=\" + target), HttpMethod.POST)).getWebResponse();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "275:         };",
          "276:         abstract void run(JenkinsRule r, String target) throws Exception;",
          "277:         private static final JenkinsRule.WebClient wc(JenkinsRule r) throws Exception {",
          "286:         }",
          "287:     }",
          "",
          "[Removed Lines]",
          "278:             return r.createWebClient().login(\"attacker\");",
          "279:         }",
          "281:         private static URL createCrumbedUrl(JenkinsRule r, JenkinsRule.WebClient wc, String relativePath) throws IOException {",
          "282:             CrumbIssuer issuer = r.jenkins.getCrumbIssuer();",
          "283:             String crumbName = issuer.getDescriptor().getCrumbRequestField();",
          "284:             String crumb = issuer.getCrumb(null);",
          "285:             return new URL(wc.getContextPath() + relativePath + (relativePath.contains(\"?\") ? \"&\" : \"?\") + crumbName + \"=\" + crumb);",
          "",
          "[Added Lines]",
          "281:             return r.createWebClient().withBasicApiToken(\"attacker\");",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/JobTest.java||test/src/test/java/hudson/model/JobTest.java": [
          "File: test/src/test/java/hudson/model/JobTest.java -> test/src/test/java/hudson/model/JobTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:         JenkinsRule.WebClient wc = j.createWebClient();",
          "203:         wc.assertFails(\"job/testJob/\", HttpURLConnection.HTTP_NOT_FOUND);",
          "204:         wc.assertFails(\"jobCaseInsensitive/testJob/\", HttpURLConnection.HTTP_NOT_FOUND);",
          "207:         wc.goTo(\"job/testJob/\");",
          "208:         wc.goTo(\"jobCaseInsensitive/TESTJOB/\");",
          "",
          "[Removed Lines]",
          "205:         wc.login(\"joe\");  // Has Item.READ permission",
          "",
          "[Added Lines]",
          "205:         wc.withBasicCredentials(\"joe\");  // Has Item.READ permission",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:         Item.EXTENDED_READ.setEnabled(true);",
          "217:         try {",
          "218:             wc.assertFails(\"job/testJob/config.xml\", HttpURLConnection.HTTP_FORBIDDEN);",
          "220:             tryConfigDotXml(wc, 500, \"Both perms; should get 500\");",
          "222:             tryConfigDotXml(wc, 500, \"Config perm should imply EXTENDED_READ\");",
          "224:             tryConfigDotXml(wc, 403, \"No permission, should get 403\");",
          "225:         } finally {",
          "226:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
          "",
          "[Removed Lines]",
          "219:             wc.login(\"alice\");  // Has CONFIGURE and EXTENDED_READ permission",
          "221:             wc.login(\"bob\");  // Has only CONFIGURE permission (this should imply EXTENDED_READ)",
          "223:             wc.login(\"charlie\");  // Has only EXTENDED_READ permission",
          "",
          "[Added Lines]",
          "220:             wc.withBasicApiToken(User.getById(\"alice\", true));  // Has CONFIGURE and EXTENDED_READ permission",
          "223:             wc.withBasicApiToken(User.getById(\"bob\", true));  // Has only CONFIGURE permission (this should imply EXTENDED_READ)",
          "226:             wc.withBasicApiToken(User.getById(\"charlie\", true));  // Has only EXTENDED_READ permission",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java||test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java": [
          "File: test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java -> test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:                 return true;",
          "63:             }",
          "64:         });",
          "65:         JenkinsRule.WebClient wc = j.createWebClient();",
          "66:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false); // ParametersDefinitionProperty/index.jelly sends a 405 but really it is OK",
          "69:         j.waitUntilNoActivity();",
          "70:         FreeStyleBuild b1 = p.getLastBuild();",
          "71:         assertEquals(1, b1.getNumber());",
          "72:         j.assertLogContains(\"I heard about a s3cr3t!\", j.assertBuildStatusSuccess(b1));",
          "75:         HtmlPasswordInput input = form.getInputByName(\"value\");",
          "76:         input.setText(\"rumor\");",
          "77:         j.submit(form);",
          "",
          "[Removed Lines]",
          "68:         j.submit(wc.login(\"admin\").getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\"));",
          "74:         HtmlForm form = wc.login(\"dev\").getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\");",
          "",
          "[Added Lines]",
          "66:         User admin = User.getById(\"admin\", true);",
          "67:         User dev = User.getById(\"dev\", true);",
          "72:         j.submit(wc.withBasicApiToken(admin).getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\"));",
          "79:         HtmlForm form = wc.withBasicApiToken(dev).getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         FreeStyleBuild b2 = p.getLastBuild();",
          "80:         assertEquals(2, b2.getNumber());",
          "81:         j.assertLogContains(\"I heard about a rumor!\", j.assertBuildStatusSuccess(b2));",
          "84:         j.waitUntilNoActivity();",
          "85:         FreeStyleBuild b3 = p.getLastBuild();",
          "86:         assertEquals(3, b3.getNumber());",
          "87:         j.assertLogContains(\"I heard about a s3cr3t!\", j.assertBuildStatusSuccess(b3));",
          "90:         input = form.getInputByName(\"value\");",
          "91:         input.setText(\"\");",
          "92:         j.submit(form);",
          "",
          "[Removed Lines]",
          "83:         j.submit(wc.login(\"dev\").getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\"));",
          "89:         form = wc.login(\"dev\").getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\");",
          "",
          "[Added Lines]",
          "89:         j.submit(wc.withBasicApiToken(dev).getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\"));",
          "96:         form = wc.withBasicApiToken(dev).getPage(p, \"build?delay=0sec\").getFormByName(\"parameters\");",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java": [
          "File: test/src/test/java/hudson/model/ProjectTest.java -> test/src/test/java/hudson/model/ProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import hudson.security.HudsonPrivateSecurityRealm;",
          "33: import hudson.security.GlobalMatrixAuthorizationStrategy;",
          "35: import java.net.URL;",
          "36: import java.util.Collections;",
          "38: import org.jvnet.hudson.reactor.ReactorException;",
          "39: import org.jvnet.hudson.test.FakeChangeLogSCM;",
          "40: import hudson.scm.SCMRevisionState;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.io.Closeable;",
          "36: import java.net.HttpURLConnection;",
          "40: import hudson.util.Scrambler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
          "554:         j.jenkins.setAuthorizationStrategy(auth);",
          "555:         j.jenkins.setCrumbIssuer(null);",
          "559:         try (ACLContext as = ACL.as(user)) {",
          "560:             project.doDoDelete(null, null);",
          "561:             fail(\"User should not have permission to build project\");",
          "",
          "[Removed Lines]",
          "556:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
          "557:         j.jenkins.setSecurityRealm(realm);",
          "558:         User user = realm.createAccount(\"John Smith\", \"password\");",
          "",
          "[Added Lines]",
          "559:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "560:         User user = User.getById(\"john\", true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "568:         auth.add(Jenkins.READ, user.getId());",
          "569:         auth.add(Job.READ, user.getId());",
          "570:         auth.add(Job.DELETE, user.getId());",
          "572:         for(HtmlForm form:forms){",
          "573:             if(\"doDelete\".equals(form.getAttribute(\"action\"))){",
          "574:                 j.submit(form);",
          "",
          "[Removed Lines]",
          "571:         List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl() + \"delete\").getForms();",
          "",
          "[Added Lines]",
          "575:         JenkinsRule.WebClient wc = j.createWebClient();",
          "576:         wc.withBasicCredentials(user.getId());",
          "577:         HtmlPage p = wc.goTo(project.getUrl() + \"delete\");",
          "579:         List<HtmlForm> forms = p.getForms();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:         String cmd = \"echo hello > change.log\";",
          "606:         project.getBuildersList().add(Functions.isWindows()? new BatchFile(cmd) : new Shell(cmd));",
          "607:         j.buildAndAssertSuccess(project);",
          "609:         WebRequest request = new WebRequest(new URL(wc.getContextPath() + project.getUrl() + \"doWipeOutWorkspace\"), HttpMethod.POST);",
          "610:         HtmlPage p = wc.getPage(request);",
          "611:         Thread.sleep(500);",
          "612:         assertFalse(\"Workspace should not exist.\", project.getSomeWorkspace().exists());",
          "613:     }",
          "",
          "[Removed Lines]",
          "608:         JenkinsRule.WebClient wc = j.createWebClient().login(user.getId(), \"password\");",
          "",
          "[Added Lines]",
          "617:         JenkinsRule.WebClient wc = j.createWebClient();",
          "618:         wc.withBasicCredentials(user.getId(), \"password\");",
          "621:         assertEquals(p.getWebResponse().getStatusCode(), 200);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "633:         auth.add(Job.READ, user.getId());",
          "634:         auth.add(Job.CONFIGURE, user.getId());",
          "635:         auth.add(Jenkins.READ, user.getId());",
          "637:         for(HtmlForm form:forms){",
          "638:             if(\"disable\".equals(form.getAttribute(\"action\"))){",
          "639:                 j.submit(form);",
          "",
          "[Removed Lines]",
          "636:         List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();",
          "",
          "[Added Lines]",
          "649:         JenkinsRule.WebClient wc = j.createWebClient();",
          "650:         wc.withBasicCredentials(user.getId(), \"password\");",
          "651:         HtmlPage p = wc.goTo(project.getUrl());",
          "653:         List<HtmlForm> forms = p.getForms();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "666:         auth.add(Job.READ, user.getId());",
          "667:         auth.add(Job.CONFIGURE, user.getId());",
          "668:         auth.add(Jenkins.READ, user.getId());",
          "670:         for(HtmlForm form:forms){",
          "671:             if(\"enable\".equals(form.getAttribute(\"action\"))){",
          "672:                 j.submit(form);",
          "",
          "[Removed Lines]",
          "669:         List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();",
          "",
          "[Added Lines]",
          "687:         JenkinsRule.WebClient wc = j.createWebClient();",
          "688:         wc.withBasicCredentials(user.getId(), \"password\");",
          "689:         HtmlPage p = wc.goTo(project.getUrl());",
          "691:         List<HtmlForm> forms = p.getForms();",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java": [
          "File: test/src/test/java/hudson/model/QueueTest.java -> test/src/test/java/hudson/model/QueueTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "943:         project.getBuildersList().add(new SleepBuilder(10));",
          "944:         project.scheduleBuild2(0);",
          "946:         JenkinsRule.WebClient webClient = r.createWebClient();",
          "948:         XmlPage p = webClient.goToXml(\"queue/api/xml\");",
          "",
          "[Removed Lines]",
          "947:         webClient.login(\"bob\", \"bob\");",
          "",
          "[Added Lines]",
          "946:         User alice = User.getById(\"alice\", true);",
          "947:         User bob = User.getById(\"bob\", true);",
          "948:         User james = User.getById(\"james\", true);",
          "951:         webClient.withBasicApiToken(bob);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959:                 }",
          "960:             }",
          "961:         }",
          "962:         webClient = r.createWebClient();",
          "964:         XmlPage p2 = webClient.goToXml(\"queue/api/xml\");",
          "966:         assertTrue(p2.getByXPath(\"/queue/node()\").isEmpty());",
          "967:         webClient = r.createWebClient();",
          "969:         XmlPage p3 = webClient.goToXml(\"queue/api/xml\");",
          "",
          "[Removed Lines]",
          "963:         webClient.login(\"alice\");",
          "968:         webClient.login(\"james\");",
          "",
          "[Added Lines]",
          "968:         webClient.withBasicApiToken(alice);",
          "974:         webClient.withBasicApiToken(james);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:         String url = project.getQueueItem().getUrl() + \"api/xml\";",
          "981:     }",
          "",
          "[Removed Lines]",
          "978:         r.createWebClient().login(\"bob\").goToXml(url); // OK, 200",
          "979:         r.createWebClient().login(\"james\").assertFails(url, HttpURLConnection.HTTP_FORBIDDEN); // only DISCOVER \u2192 AccessDeniedException",
          "980:         r.createWebClient().login(\"alice\").assertFails(url, HttpURLConnection.HTTP_NOT_FOUND); // not even DISCOVER",
          "",
          "[Added Lines]",
          "984:         r.createWebClient().withBasicApiToken(bob).goToXml(url); // OK, 200",
          "985:         r.createWebClient().withBasicApiToken(james).assertFails(url, HttpURLConnection.HTTP_FORBIDDEN); // only DISCOVER \u2192 AccessDeniedException",
          "986:         r.createWebClient().withBasicApiToken(alice).assertFails(url, HttpURLConnection.HTTP_NOT_FOUND); // not even DISCOVER",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
          "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:         auth.add(Jenkins.ADMINISTER, user.getId());",
          "416:         auth.add(Jenkins.READ, user2.getId());",
          "417:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
          "419:         form.getInputByName(\"_.fullName\").setValueAttribute(\"Alice Smith\");",
          "420:         j.submit(form);",
          "421:         assertEquals(\"User should have full name Alice Smith.\", \"Alice Smith\", user2.getFullName());",
          "",
          "[Removed Lines]",
          "418:         HtmlForm form = j.createWebClient().login(user.getId(), \"password\").goTo(user2.getUrl() + \"/configure\").getFormByName(\"config\");",
          "",
          "[Added Lines]",
          "418:         HtmlForm form = j.createWebClient().withBasicCredentials(user.getId(), \"password\").goTo(user2.getUrl() + \"/configure\").getFormByName(\"config\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:                fail(\"AccessDeniedException should be thrown.\");",
          "430:             }",
          "431:         }",
          "434:         form.getInputByName(\"_.fullName\").setValueAttribute(\"John\");",
          "435:         j.submit(form);",
          "",
          "[Removed Lines]",
          "432:         form = j.createWebClient().login(user2.getId(), \"password\").goTo(user2.getUrl() + \"/configure\").getFormByName(\"config\");",
          "",
          "[Added Lines]",
          "432:         form = j.createWebClient().withBasicCredentials(user2.getId(), \"password\").goTo(user2.getUrl() + \"/configure\").getFormByName(\"config\");",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ViewTest.java||test/src/test/java/hudson/model/ViewTest.java": [
          "File: test/src/test/java/hudson/model/ViewTest.java -> test/src/test/java/hudson/model/ViewTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:                 return null;",
          "530:             }",
          "531:         });",
          "533:         assertEquals(\"original ${rootURL}/checkJobName still supported\", \"<div/>\", wc.goTo(\"checkJobName?value=stuff\").getWebResponse().getContentAsString());",
          "534:         assertEquals(\"but now possible on a view in a folder\", \"<div/>\", wc.goTo(\"job/d1/view/All/checkJobName?value=stuff\").getWebResponse().getContentAsString());",
          "535:     }",
          "",
          "[Removed Lines]",
          "532:         JenkinsRule.WebClient wc = j.createWebClient().login(\"admin\");",
          "",
          "[Added Lines]",
          "532:         JenkinsRule.WebClient wc = j.createWebClient().withBasicCredentials(\"admin\");",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/ExtendedReadPermissionTest.java||test/src/test/java/hudson/security/ExtendedReadPermissionTest.java": [
          "File: test/src/test/java/hudson/security/ExtendedReadPermissionTest.java -> test/src/test/java/hudson/security/ExtendedReadPermissionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         GlobalMatrixAuthorizationStrategy gas = (GlobalMatrixAuthorizationStrategy)as;",
          "53:         assertTrue(\"Charlie should have extended read for this test\", gas.hasExplicitPermission(\"charlie\",Item.EXTENDED_READ));",
          "56:         HtmlPage page = wc.goTo(\"job/a/configure\");",
          "57:         HtmlForm form = page.getFormByName(\"config\");",
          "58:         HtmlButton saveButton = r.getButtonByCaption(form,\"Save\");",
          "",
          "[Removed Lines]",
          "55:         JenkinsRule.WebClient wc = r.createWebClient().login(\"charlie\",\"charlie\");",
          "",
          "[Added Lines]",
          "55:         JenkinsRule.WebClient wc = r.createWebClient();",
          "56:         wc.withBasicCredentials(\"charlie\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         GlobalMatrixAuthorizationStrategy gas = (GlobalMatrixAuthorizationStrategy)as;",
          "69:         assertFalse(\"Charlie should not have extended read for this test\", gas.hasExplicitPermission(\"charlie\",Item.EXTENDED_READ));",
          "72:         wc.assertFails(\"job/a/configure\", HttpURLConnection.HTTP_FORBIDDEN);",
          "73:     }",
          "",
          "[Removed Lines]",
          "71:         JenkinsRule.WebClient wc = r.createWebClient().login(\"charlie\",\"charlie\");",
          "",
          "[Added Lines]",
          "73:         JenkinsRule.WebClient wc = r.createWebClient();",
          "74:         wc.withBasicCredentials(\"charlie\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         GlobalMatrixAuthorizationStrategy gas = (GlobalMatrixAuthorizationStrategy)as;",
          "82:         assertFalse(\"Bob should not have extended read for this test\", gas.hasExplicitPermission(\"bob\",Item.EXTENDED_READ));",
          "85:         wc.assertFails(\"job/a/configure\", HttpURLConnection.HTTP_FORBIDDEN);",
          "86:     }",
          "",
          "[Removed Lines]",
          "84:         JenkinsRule.WebClient wc = r.createWebClient().login(\"bob\",\"bob\");",
          "",
          "[Added Lines]",
          "88:         JenkinsRule.WebClient wc = r.createWebClient();",
          "89:         wc.withBasicCredentials(\"bob\");",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java": [
          "File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java -> test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:             j.createWebClient().login(\"bob\", \"bob\");",
          "94:         } catch (FailingHttpStatusCodeException e) {",
          "95:             assertEquals(401,e.getStatusCode());",
          "96:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:             fail();",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/LoginTest.java||test/src/test/java/hudson/security/LoginTest.java": [
          "File: test/src/test/java/hudson/security/LoginTest.java -> test/src/test/java/hudson/security/LoginTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "12: import com.gargoylesoftware.htmlunit.html.HtmlCheckBoxInput;",
          "14: import org.junit.Rule;",
          "15: import org.junit.Test;",
          "16: import org.jvnet.hudson.test.JenkinsRule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import hudson.model.User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:         WebClient wc = j.createWebClient();",
          "57:         wc.assertFails(\"loginError\", SC_UNAUTHORIZED);",
          "60:     }",
          "62:     private HtmlForm prepareLoginFormWithRememberMeChecked(WebClient wc) throws IOException, org.xml.sax.SAXException {",
          "",
          "[Removed Lines]",
          "59:         verifyNotError(wc.login(\"alice\"));",
          "",
          "[Added Lines]",
          "60:         verifyNotError(wc.withBasicApiToken(User.getById(\"alice\", true)));",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/util/RobustReflectionConverterTest.java||test/src/test/java/hudson/util/RobustReflectionConverterTest.java": [
          "File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java -> test/src/test/java/hudson/util/RobustReflectionConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.cli.CLICommandInvoker;",
          "28: import hudson.diagnosis.OldDataMonitor;",
          "29: import hudson.model.AbstractDescribableImpl;",
          "33: import hudson.model.Descriptor;",
          "34: import hudson.model.FreeStyleProject;",
          "35: import hudson.model.Job;",
          "36: import hudson.model.Saveable;",
          "37: import hudson.security.ACL;",
          "39: import java.io.ByteArrayInputStream;",
          "40: import java.util.Collections;",
          "41: import java.util.Map;",
          "",
          "[Removed Lines]",
          "30: import hudson.model.Items;",
          "31: import hudson.model.JobProperty;",
          "32: import hudson.model.JobPropertyDescriptor;",
          "",
          "[Added Lines]",
          "32: import hudson.model.Items;",
          "34: import hudson.model.JobProperty;",
          "35: import hudson.model.JobPropertyDescriptor;",
          "37: import hudson.model.User;",
          "41: import java.net.URL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         public static final String ACCEPT_KEYWORD = \"accept\";",
          "86:         private final String keyword;",
          "",
          "[Removed Lines]",
          "84:     public static class AcceptOnlySpecificKeyword extends AbstractDescribableImpl<AcceptOnlySpecificKeyword>{",
          "",
          "[Added Lines]",
          "86:     public static class AcceptOnlySpecificKeyword extends AbstractDescribableImpl<AcceptOnlySpecificKeyword> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:     @Test",
          "186:     public void testRestInterfaceFailure() throws Exception {",
          "187:         Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");",
          "190:         {",
          "191:             FreeStyleProject p = r.createFreeStyleProject();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:         User test = User.getById(\"test\", true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:             r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
          "200:             WebClient wc = r.createWebClient();",
          "206:             req.setEncodingType(null);",
          "207:             req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));",
          "208:             wc.getPage(req);",
          "",
          "[Removed Lines]",
          "201:             wc.login(\"test\", \"test\");",
          "202:             WebRequest req = new WebRequest(",
          "203:                     wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),",
          "204:                     HttpMethod.POST",
          "205:             );",
          "",
          "[Added Lines]",
          "205:             wc.withBasicApiToken(test);",
          "206:             WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:             r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
          "233:             WebClient wc = r.createWebClient();",
          "239:             req.setEncodingType(null);",
          "240:             req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));",
          "",
          "[Removed Lines]",
          "234:             wc.login(\"test\", \"test\");",
          "235:             WebRequest req = new WebRequest(",
          "236:                     wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),",
          "237:                     HttpMethod.POST",
          "238:             );",
          "",
          "[Added Lines]",
          "235:             wc.withBasicApiToken(test);",
          "236:             WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/model/JenkinsTest.java||test/src/test/java/jenkins/model/JenkinsTest.java": [
          "File: test/src/test/java/jenkins/model/JenkinsTest.java -> test/src/test/java/jenkins/model/JenkinsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:             grant(Jenkins.READ).everywhere().to(\"bob\").",
          "315:             grantWithoutImplication(Jenkins.ADMINISTER, Jenkins.READ).everywhere().to(\"charlie\"));",
          "316:         WebClient wc = j.createWebClient();",
          "318:         wc.goTo(\"script\");",
          "319:         wc.assertFails(\"script?script=System.setProperty('hack','me')\", HttpURLConnection.HTTP_BAD_METHOD);",
          "320:         assertNull(System.getProperty(\"hack\"));",
          "321:         WebRequest req = new WebRequest(new URL(wc.getContextPath() + \"script?script=System.setProperty('hack','me')\"), HttpMethod.POST);",
          "323:         assertEquals(\"me\", System.getProperty(\"hack\"));",
          "324:         wc.assertFails(\"scriptText?script=System.setProperty('hack','me')\", HttpURLConnection.HTTP_BAD_METHOD);",
          "325:         req = new WebRequest(new URL(wc.getContextPath() + \"scriptText?script=System.setProperty('huck','you')\"), HttpMethod.POST);",
          "327:         assertEquals(\"you\", System.getProperty(\"huck\"));",
          "329:         wc.assertFails(\"script\", HttpURLConnection.HTTP_FORBIDDEN);",
          "331:         wc.assertFails(\"script\", HttpURLConnection.HTTP_FORBIDDEN);",
          "332:     }",
          "",
          "[Removed Lines]",
          "317:         wc.login(\"alice\");",
          "322:         wc.getPage(wc.addCrumb(req));",
          "326:         wc.getPage(wc.addCrumb(req));",
          "328:         wc.login(\"bob\");",
          "330:         wc.login(\"charlie\");",
          "",
          "[Added Lines]",
          "318:         wc.withBasicApiToken(User.getById(\"alice\", true));",
          "323:         wc.getPage(req);",
          "327:         wc.getPage(req);",
          "330:         wc.withBasicApiToken(User.getById(\"bob\", true));",
          "333:         wc.withBasicApiToken(User.getById(\"charlie\", true));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:             grant(Jenkins.ADMINISTER).everywhere().to(\"alice\").",
          "339:             grant(Jenkins.READ).everywhere().to(\"bob\").",
          "340:             grantWithoutImplication(Jenkins.ADMINISTER, Jenkins.READ).everywhere().to(\"charlie\"));",
          "341:         WebClient wc = j.createWebClient();",
          "343:         wc.assertFails(\"eval\", HttpURLConnection.HTTP_BAD_METHOD);",
          "344:         assertEquals(\"3\", eval(wc));",
          "346:         try {",
          "347:             eval(wc);",
          "348:             fail(\"bob has only READ\");",
          "349:         } catch (FailingHttpStatusCodeException e) {",
          "350:             assertEquals(HttpURLConnection.HTTP_FORBIDDEN, e.getStatusCode());",
          "351:         }",
          "353:         try {",
          "354:             eval(wc);",
          "355:             fail(\"charlie has ADMINISTER but not RUN_SCRIPTS\");",
          "",
          "[Removed Lines]",
          "342:         wc.login(\"alice\");",
          "345:         wc.login(\"bob\");",
          "352:         wc.login(\"charlie\");",
          "",
          "[Added Lines]",
          "347:         wc.withBasicApiToken(User.getById(\"alice\", true));",
          "351:         wc.withBasicApiToken(User.getById(\"bob\", true));",
          "359:         wc.withBasicApiToken(User.getById(\"charlie\", true));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:         }",
          "359:     }",
          "360:     private String eval(WebClient wc) throws Exception {",
          "362:         req.setEncodingType(null);",
          "363:         req.setRequestBody(\"<j:jelly xmlns:j='jelly:core'>${1+2}</j:jelly>\");",
          "364:         return wc.getPage(req).getWebResponse().getContentAsString();",
          "",
          "[Removed Lines]",
          "361:         WebRequest req = new WebRequest(wc.createCrumbedUrl(\"eval\"), HttpMethod.POST);",
          "",
          "[Added Lines]",
          "368:         WebRequest req = new WebRequest(new URL(wc.getContextPath() + \"eval\"), HttpMethod.POST);",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java||test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java": [
          "File: test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java -> test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security;",
          "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "27: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "28: import com.gargoylesoftware.htmlunit.Page;",
          "29: import com.gargoylesoftware.htmlunit.WebRequest;",
          "30: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "31: import com.gargoylesoftware.htmlunit.html.HtmlFormUtil;",
          "32: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "33: import hudson.model.UnprotectedRootAction;",
          "34: import hudson.model.User;",
          "35: import hudson.security.csrf.DefaultCrumbIssuer;",
          "36: import hudson.util.HttpResponses;",
          "37: import hudson.util.Scrambler;",
          "38: import org.junit.Rule;",
          "39: import org.junit.Test;",
          "40: import org.jvnet.hudson.test.Issue;",
          "41: import org.jvnet.hudson.test.JenkinsRule;",
          "42: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "43: import org.jvnet.hudson.test.TestExtension;",
          "44: import org.kohsuke.stapler.HttpResponse;",
          "45: import org.xml.sax.SAXException;",
          "47: import java.io.IOException;",
          "48: import java.net.URL;",
          "50: import static org.junit.Assert.assertEquals;",
          "51: import static org.junit.Assert.fail;",
          "53: public class ApiCrumbExclusionTest {",
          "54:     @Rule",
          "55:     public JenkinsRule j = new JenkinsRule();",
          "57:     private WebClient wc;",
          "59:     @Test",
          "60:     @Issue(\"JENKINS-22474\")",
          "61:     public void callUsingApiTokenDoesNotRequireCSRFToken() throws Exception {",
          "62:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "63:         j.jenkins.setCrumbIssuer(null);",
          "64:         User foo = User.get(\"foo\");",
          "66:         wc = j.createWebClient();",
          "69:         wc.withBasicApiToken(foo);",
          "70:         makeRequestAndVerify(\"foo\");",
          "73:         wc = j.createWebClient();",
          "74:         wc.withBasicCredentials(\"foo\");",
          "75:         makeRequestAndVerify(\"foo\");",
          "77:         wc = j.createWebClient();",
          "78:         wc.login(\"foo\");",
          "79:         checkWeCanChangeMyDescription(200);",
          "81:         wc = j.createWebClient();",
          "82:         j.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));",
          "85:         wc.withBasicApiToken(foo);",
          "86:         makeRequestAndVerify(\"foo\");",
          "89:         wc = j.createWebClient();",
          "90:         wc.withBasicCredentials(\"foo\");",
          "91:         makeRequestAndFail(403);",
          "93:         wc = j.createWebClient();",
          "94:         wc.login(\"foo\");",
          "95:         checkWeCanChangeMyDescription(200);",
          "96:     }",
          "98:     private void makeRequestAndVerify(String expected) throws IOException, SAXException {",
          "99:         WebRequest req = new WebRequest(new URL(j.getURL(), \"test-post\"));",
          "100:         req.setHttpMethod(HttpMethod.POST);",
          "101:         req.setEncodingType(null);",
          "102:         Page p = wc.getPage(req);",
          "103:         assertEquals(expected, p.getWebResponse().getContentAsString());",
          "104:     }",
          "106:     private void makeRequestAndFail(int expectedCode) throws IOException, SAXException {",
          "107:         try {",
          "108:             makeRequestAndVerify(\"-\");",
          "109:             fail();",
          "110:         } catch (FailingHttpStatusCodeException e) {",
          "111:             assertEquals(expectedCode, e.getStatusCode());",
          "112:         }",
          "113:     }",
          "115:     private void checkWeCanChangeMyDescription(int expectedCode) throws IOException, SAXException {",
          "116:         HtmlPage page = wc.goTo(\"me/configure\");",
          "117:         HtmlForm form = page.getFormByName(\"config\");",
          "118:         form.getTextAreaByName(\"_.description\").setText(\"random description: \" + Math.random());",
          "120:         Page result = HtmlFormUtil.submit(form);",
          "121:         assertEquals(expectedCode, result.getWebResponse().getStatusCode());",
          "122:     }",
          "124:     @TestExtension",
          "125:     public static class WhoAmI implements UnprotectedRootAction {",
          "126:         @Override",
          "127:         public String getIconFileName() {",
          "128:             return null;",
          "129:         }",
          "131:         @Override",
          "132:         public String getDisplayName() {",
          "133:             return null;",
          "134:         }",
          "136:         @Override",
          "137:         public String getUrlName() {",
          "138:             return \"test-post\";",
          "139:         }",
          "141:         public HttpResponse doIndex() {",
          "142:             User u = User.current();",
          "143:             return HttpResponses.text(u != null ? u.getId() : \"anonymous\");",
          "144:         }",
          "145:     }",
          "146: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         wc.getOptions().setThrowExceptionOnFailingStatusCode(true);",
          "123:         WebRequest request = new WebRequest(new URL(j.getURL().toString() + foo.getUrl() + \"/\" + descriptor.getDescriptorUrl()+ \"/changeToken\"), HttpMethod.POST);",
          "125:         HtmlPage res = wc.getPage(request);",
          "",
          "[Removed Lines]",
          "124:         wc.addCrumb(request);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java||test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java": [
          "File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java -> test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import hudson.model.UnprotectedRootAction;",
          "8: import hudson.model.User;",
          "9: import hudson.util.HttpResponses;",
          "12: import org.junit.Before;",
          "13: import org.junit.Rule;",
          "14: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "10: import hudson.util.Scrambler;",
          "11: import org.junit.After;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: import java.io.IOException;",
          "22: import java.net.URL;",
          "24: import static org.junit.Assert.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.nio.charset.StandardCharsets;",
          "22: import java.util.Base64;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     @Test",
          "47:     public void testVariousWaysToCall() throws Exception {",
          "48:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "52:         wc = j.createWebClient();",
          "56:         spySecurityListener.authenticatedCalls.assertNoNewEvents();",
          "57:         spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();",
          "65:         spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals(\"foo\"));",
          "69:         spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");",
          "73:         spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals(\"foo\"));",
          "77:         spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");",
          "80:         wc.login(\"bar\");",
          "81:         spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals(\"bar\"));",
          "82:         spySecurityListener.loggedInCalls.assertLastEventIsAndThenRemoveIt(\"bar\");",
          "86:         spySecurityListener.authenticatedCalls.assertNoNewEvents();",
          "87:         spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();",
          "91:         spySecurityListener.authenticatedCalls.assertNoNewEvents();",
          "92:         spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();",
          "96:         spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");",
          "97:     }",
          "121:     }",
          "130:     }",
          "132:     @Test",
          "",
          "[Removed Lines]",
          "49:         User foo = User.get(\"foo\");",
          "50:         User bar = User.get(\"bar\");",
          "55:         makeRequestWithAuthAndVerify(null, \"anonymous\");",
          "60:         ApiTokenProperty t = foo.getProperty(ApiTokenProperty.class);",
          "61:         final String token = t.getApiToken();",
          "62:         makeRequestWithAuthAndVerify(\"foo:\"+token, \"foo\");",
          "68:         makeRequestAndFail(\"foo:abcd\"+token);",
          "72:         makeRequestWithAuthAndVerify(\"foo:foo\", \"foo\");",
          "76:         makeRequestAndFail(\"foo:bar\");",
          "85:         makeRequestWithAuthAndVerify(null, \"bar\");",
          "90:         makeRequestWithAuthAndVerify(\"bar:bar\", \"bar\");",
          "95:         makeRequestAndFail(\"foo:bar\");",
          "99:     private void makeRequestAndFail(String userAndPass) throws IOException, SAXException {",
          "100:         makeRequestWithAuthCodeAndFail(encode(\"Basic\", userAndPass));",
          "101:     }",
          "103:     private String encode(String prefix, String userAndPass) {",
          "104:         if (userAndPass==null) {",
          "105:             return null;",
          "106:         }",
          "107:         return prefix+\" \"+Scrambler.scramble(userAndPass);",
          "108:     }",
          "110:     private void makeRequestWithAuthCodeAndFail(String authCode) throws IOException, SAXException {",
          "111:         try {",
          "112:             makeRequestWithAuthCodeAndVerify(authCode, \"-\");",
          "113:             fail();",
          "114:         } catch (FailingHttpStatusCodeException e) {",
          "115:             assertEquals(401, e.getStatusCode());",
          "116:         }",
          "117:     }",
          "119:     private void makeRequestWithAuthAndVerify(String userAndPass, String username) throws IOException, SAXException {",
          "120:         makeRequestWithAuthCodeAndVerify(encode(\"Basic\", userAndPass), username);",
          "123:     private void makeRequestWithAuthCodeAndVerify(String authCode, String expected) throws IOException, SAXException {",
          "124:         WebRequest req = new WebRequest(new URL(j.getURL(),\"test\"));",
          "125:         req.setEncodingType(null);",
          "126:         if (authCode!=null)",
          "127:             req.setAdditionalHeader(\"Authorization\", authCode);",
          "128:         Page p = wc.getPage(req);",
          "129:         assertEquals(expected, p.getWebResponse().getContentAsString().trim());",
          "",
          "[Added Lines]",
          "49:         User foo = User.getById(\"foo\", true);",
          "50:         User.getById(\"bar\", true);",
          "55:         makeRequestAndVerify(\"anonymous\");",
          "60:         wc = j.createWebClient();",
          "61:         wc.withBasicApiToken(\"foo\");",
          "62:         makeRequestAndVerify(\"foo\");",
          "66:         wc = j.createWebClient();",
          "67:         wc.withBasicCredentials(\"foo\", \"abcd\" + foo.getProperty(ApiTokenProperty.class).getApiToken());",
          "68:         makeRequestAndFail();",
          "72:         wc = j.createWebClient();",
          "73:         wc.withBasicCredentials(\"foo\");",
          "74:         makeRequestAndVerify(\"foo\");",
          "78:         wc = j.createWebClient();",
          "79:         wc.withBasicCredentials(\"foo\", \"bar\");",
          "80:         makeRequestAndFail();",
          "83:         wc = j.createWebClient();",
          "89:         makeRequestAndVerify(\"bar\");",
          "94:         wc.withBasicCredentials(\"bar\");",
          "95:         makeRequestAndVerify(\"bar\");",
          "100:         wc.withBasicCredentials(\"foo\", \"bar\");",
          "101:         makeRequestAndFail();",
          "105:     private void makeRequestAndFail() throws IOException, SAXException {",
          "106:         makeRequestWithAuthCodeAndFail(null);",
          "109:     private void makeRequestAndVerify(String expectedLogin) throws IOException, SAXException {",
          "110:         makeRequestWithAuthCodeAndVerify(null, expectedLogin);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:         }",
          "163:     }",
          "165:     @TestExtension",
          "166:     public static class WhoAmI implements UnprotectedRootAction {",
          "167:         @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     private String encode(String prefix, String userAndPass) {",
          "147:         if (userAndPass==null) {",
          "148:             return null;",
          "149:         }",
          "150:         return prefix + \" \" + Base64.getEncoder().encodeToString(userAndPass.getBytes(StandardCharsets.UTF_8));",
          "151:     }",
          "153:     private void makeRequestWithAuthCodeAndVerify(String authCode, String expectedLogin) throws IOException, SAXException {",
          "154:         WebRequest req = new WebRequest(new URL(j.getURL(),\"test\"));",
          "155:         req.setEncodingType(null);",
          "156:         if (authCode!=null)",
          "157:             req.setAdditionalHeader(\"Authorization\", authCode);",
          "158:         Page p = wc.getPage(req);",
          "159:         assertEquals(expectedLogin, p.getWebResponse().getContentAsString());",
          "160:     }",
          "162:     private void makeRequestWithAuthCodeAndFail(String authCode) throws IOException, SAXException {",
          "163:         try {",
          "164:             makeRequestWithAuthCodeAndVerify(authCode, \"-\");",
          "165:             fail();",
          "166:         } catch (FailingHttpStatusCodeException e) {",
          "167:             assertEquals(401, e.getStatusCode());",
          "168:         }",
          "169:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:         public HttpResponse doIndex() {",
          "183:             User u = User.current();",
          "185:         }",
          "186:     }",
          "",
          "[Removed Lines]",
          "184:             return HttpResponses.plainText(u!=null ? u.getId() : \"anonymous\");",
          "",
          "[Added Lines]",
          "190:             return HttpResponses.text(u!=null ? u.getId() : \"anonymous\");",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/Security380Test.java||test/src/test/java/jenkins/security/Security380Test.java": [
          "File: test/src/test/java/jenkins/security/Security380Test.java -> test/src/test/java/jenkins/security/Security380Test.java"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "29: import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;",
          "31: import hudson.cli.CopyJobCommand;",
          "32: import hudson.cli.GetJobCommand;",
          "40: import hudson.util.FormValidation;",
          "41: import hudson.util.Secret;",
          "42: import java.io.ByteArrayOutputStream;",
          "",
          "[Removed Lines]",
          "30: import hudson.Extension;",
          "33: import hudson.model.Describable;",
          "34: import hudson.model.Descriptor;",
          "35: import hudson.model.FreeStyleProject;",
          "36: import hudson.model.Item;",
          "37: import hudson.model.JobProperty;",
          "38: import hudson.model.JobPropertyDescriptor;",
          "39: import hudson.model.User;",
          "",
          "[Added Lines]",
          "32: import hudson.model.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: import static org.hamcrest.Matchers.containsString;",
          "52: import static org.hamcrest.Matchers.not;",
          "53: import static org.hamcrest.core.Is.is;",
          "56: import org.jvnet.hudson.test.Issue;",
          "57: import org.jvnet.hudson.test.JenkinsRule;",
          "58: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
          "",
          "[Removed Lines]",
          "54: import static org.junit.Assert.assertThat;",
          "55: import org.jvnet.hudson.test.HudsonTestCase;",
          "",
          "[Added Lines]",
          "47: import static org.junit.Assert.*;",
          "49: import org.junit.Rule;",
          "50: import org.junit.Test;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: import org.kohsuke.stapler.Stapler;",
          "63: import org.kohsuke.stapler.StaplerRequest;",
          "71:         String value = ((HtmlInput)p.getElementById(\"password\")).getValueAttribute();",
          "72:         assertFalse(\"password shouldn't be plain text\",value.equals(\"secret\"));",
          "73:         assertEquals(\"secret\",Secret.fromString(value).getPlainText());",
          "74:     }",
          "83:     @Issue({\"SECURITY-266\", \"SECURITY-304\"})",
          "84:     public void testExposedCiphertext() throws Exception {",
          "85:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
          "86:         Item.EXTENDED_READ.setEnabled(true);",
          "",
          "[Removed Lines]",
          "65: public class PasswordTest extends HudsonTestCase implements Describable<PasswordTest> {",
          "66:     public Secret secret;",
          "68:     public void test1() throws Exception {",
          "69:         secret = Secret.fromString(\"secret\");",
          "70:         HtmlPage p = createWebClient().goTo(\"self/test1\");",
          "76:     public DescriptorImpl getDescriptor() {",
          "77:         return jenkins.getDescriptorByType(DescriptorImpl.class);",
          "78:     }",
          "80:     @Extension",
          "81:     public static final class DescriptorImpl extends Descriptor<PasswordTest> {}",
          "",
          "[Added Lines]",
          "60: public class PasswordTest {",
          "62:     @Rule",
          "63:     public JenkinsRule j = new JenkinsRule();",
          "65:     @Test",
          "66:     public void secretNotPlainText() throws Exception {",
          "67:         SecretNotPlainText.secret = Secret.fromString(\"secret\");",
          "68:         HtmlPage p = j.createWebClient().goTo(\"secretNotPlainText\");",
          "74:     @TestExtension(\"secretNotPlainText\")",
          "75:     public static class SecretNotPlainText implements RootAction {",
          "77:         public static Secret secret;",
          "79:         @Override",
          "80:         public String getIconFileName() {",
          "81:             return null;",
          "82:         }",
          "84:         @Override",
          "85:         public String getDisplayName() {",
          "86:             return null;",
          "87:         }",
          "89:         @Override",
          "90:         public String getUrlName() {",
          "91:             return \"secretNotPlainText\";",
          "92:         }",
          "93:     }",
          "96:     @Test",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:             assertThat(xml_regex_pattern.matcher(staticTest).find(), is(true));",
          "98:                 grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").",
          "99:                 grant(Jenkins.READ, Item.READ, Item.EXTENDED_READ,",
          "100:                     Item.CREATE // so we can show CopyJobCommand would barf; more realistic would be to grant it only in a subfolder",
          "101:                 ).everywhere().to(\"dev\"));",
          "102:             Secret s = Secret.fromString(\"s3cr3t\");",
          "105:             p.setDisplayName(\"Unicode here \u2190\");",
          "106:             p.setDescription(\"This+looks+like+Base64+but+is+not+a+secret\");",
          "107:             p.addProperty(new VulnerableProperty(s));",
          "111:             HtmlPage configure = wc.getPage(p, \"configure\");",
          "112:             assertThat(xml_regex_pattern.matcher(configure.getWebResponse().getContentAsString()).find(), is(true));",
          "114:             VulnerableProperty vp = p.getProperty(VulnerableProperty.class);",
          "115:             assertNotNull(vp);",
          "116:             assertEquals(s, vp.secret);",
          "",
          "[Removed Lines]",
          "96:             jenkins.setSecurityRealm(new JenkinsRule().createDummySecurityRealm());",
          "97:             jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().",
          "104:             FreeStyleProject p = createFreeStyleProject(\"p\");",
          "108:             WebClient wc = createWebClient();",
          "110:             wc.login(\"admin\");",
          "113:             submit(configure.getFormByName(\"config\"));",
          "",
          "[Added Lines]",
          "109:             j.jenkins.setSecurityRealm(new JenkinsRule().createDummySecurityRealm());",
          "110:             j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().",
          "117:             FreeStyleProject p = j.createFreeStyleProject(\"p\");",
          "122:             User admin = User.getById(\"admin\", true);",
          "123:             User dev = User.getById(\"dev\", true);",
          "125:             JenkinsRule.WebClient wc = j.createWebClient();",
          "127:             wc.withBasicApiToken(admin);",
          "130:             j.submit(configure.getFormByName(\"config\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:             copyJobCommand.setTransportAuth(adminAuth);",
          "133:             String pAdminName = pName + \"-admin\";",
          "134:             assertEquals(0, copyJobCommand.main(Arrays.asList(pName, pAdminName), Locale.ENGLISH, System.in, System.out, System.err));",
          "136:             assertNotNull(pAdmin);",
          "137:             pAdmin.setDisplayName(p.getDisplayName()); // counteract DisplayNameListener",
          "138:             assertEquals(p.getConfigFile().asString(), pAdmin.getConfigFile().asString());",
          "141:             configure = wc.getPage(p, \"configure\");",
          "142:             assertThat(xml_regex_pattern.matcher(configure.getWebResponse().getContentAsString()).find(), is(false));",
          "143:             configXml = wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");",
          "",
          "[Removed Lines]",
          "135:             FreeStyleProject pAdmin = jenkins.getItemByFullName(pAdminName, FreeStyleProject.class);",
          "140:             wc.login(\"dev\");",
          "",
          "[Added Lines]",
          "152:             FreeStyleProject pAdmin = j.jenkins.getItemByFullName(pAdminName, FreeStyleProject.class);",
          "158:             wc.withBasicApiToken(dev);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:             copyJobCommand.setTransportAuth(devAuth);",
          "155:             String pDevName = pName + \"-dev\";",
          "156:             assertThat(copyJobCommand.main(Arrays.asList(pName, pDevName), Locale.ENGLISH, System.in, System.out, System.err), not(0));",
          "159:         } finally {",
          "160:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
          "161:         }",
          "162:     }",
          "164:     @Issue(\"SECURITY-616\")",
          "165:     public void testCheckMethod() throws Exception {",
          "167:         p.addProperty(new VulnerableProperty(Secret.fromString(\"\")));",
          "169:         while (VulnerableProperty.DescriptorImpl.incomingURL == null) { // waitForBackgroundJavaScript does not work well",
          "170:             Thread.sleep(100); // form validation of saved value",
          "171:         }",
          "",
          "[Removed Lines]",
          "157:             assertNull(jenkins.getItemByFullName(pDevName, FreeStyleProject.class));",
          "166:         FreeStyleProject p = createFreeStyleProject(\"p\");",
          "168:         HtmlPasswordInput field = createWebClient().getPage(p, \"configure\").getFormByName(\"config\").getInputByName(\"_.secret\");",
          "",
          "[Added Lines]",
          "175:             assertNull(j.jenkins.getItemByFullName(pDevName, FreeStyleProject.class));",
          "182:     @Test",
          "185:         FreeStyleProject p = j.createFreeStyleProject(\"p\");",
          "187:         HtmlPasswordInput field = j.createWebClient().getPage(p, \"configure\").getFormByName(\"config\").getInputByName(\"_.secret\");",
          "",
          "---------------"
        ],
        "test/src/test/resources/lib/form/PasswordTest/test1.jelly||test/src/test/resources/lib/form/PasswordTest/SecretNotPlainText/index.jelly": [
          "File: test/src/test/resources/lib/form/PasswordTest/test1.jelly -> test/src/test/resources/lib/form/PasswordTest/SecretNotPlainText/index.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   Config page",
          "27: -->",
          "28: <?jelly escape-by-default='true'?>",
          "30: <l:layout title=\"Making sure the password field gets an encrypted value\">",
          "31:   <l:main-panel>",
          "32:     <f:form method=\"post\" name=\"config\" action=\"thisFormWillNotBeSubmitted\">",
          "",
          "[Removed Lines]",
          "29: <j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\">",
          "",
          "[Added Lines]",
          "29: <j:jelly xmlns:j=\"jelly:core\" xmlns:l=\"/lib/layout\" xmlns:f=\"/lib/form\">",
          "",
          "---------------"
        ]
      }
    }
  ]
}