{
  "cve_id": "CVE-2016-5357",
  "cve_desc": "wiretap/netscreen.c in the NetScreen file parser in Wireshark 1.12.x before 1.12.12 and 2.x before 2.0.4 mishandles sscanf unsigned-integer processing, which allows remote attackers to cause a denial of service (application crash) via a crafted file.",
  "repo": "wireshark/wireshark",
  "patch_hash": "11edc83b98a61e890d7bb01855389d40e984ea82",
  "patch_info": {
    "commit_hash": "11edc83b98a61e890d7bb01855389d40e984ea82",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/11edc83b98a61e890d7bb01855389d40e984ea82",
    "files": [
      "wiretap/netscreen.c"
    ],
    "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12396\nChange-Id: I54fe8f61f42c32b5ef33da633ece51bbcda8c95f\nReviewed-on: https://code.wireshark.org/review/15220\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "wiretap/netscreen.c||wiretap/netscreen.c"
    ]
  },
  "patch_diff": {
    "wiretap/netscreen.c||wiretap/netscreen.c": [
      "File: wiretap/netscreen.c -> wiretap/netscreen.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "263: parse_netscreen_packet(FILE_T fh, struct wtap_pkthdr *phdr, Buffer* buf,",
      "264:     char *line, int *err, gchar **err_info)",
      "265: {",
      "266:  int  sec;",
      "267:  int  dsec;",
      "268:  char  cap_int[NETSCREEN_MAX_INT_NAME_LENGTH];",
      "269:  char  direction[2];",
      "271:  char  cap_src[13];",
      "272:  char  cap_dst[13];",
      "273:  guint8  *pd;",
      "274:  gchar  *p;",
      "275:  int  n, i = 0;",
      "277:  gchar  dststr[13];",
      "279:  phdr->rec_type = REC_TYPE_PACKET;",
      "280:  phdr->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN;",
      "283:      &sec, &dsec, cap_int, direction, &pkt_len, cap_src, cap_dst) < 5) {",
      "286:   return -1;",
      "287:  }",
      "288:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
      "",
      "[Removed Lines]",
      "270:  guint  pkt_len;",
      "276:  guint  offset = 0;",
      "282:  if (sscanf(line, \"%9d.%9d: %15[a-z0-9/:.-](%1[io]) len=%9u:%12s->%12s/\",",
      "",
      "[Added Lines]",
      "266:  int  pkt_len;",
      "276:  int  offset = 0;",
      "282:  if (sscanf(line, \"%9d.%9d: %15[a-z0-9/:.-](%1[io]) len=%9d:%12s->%12s/\",",
      "288:  if (pkt_len < 0) {",
      "291:   return FALSE;",
      "292:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5e7e039caef55c8a5d87d0b82e2d55326ed6d47",
      "candidate_info": {
        "commit_hash": "f5e7e039caef55c8a5d87d0b82e2d55326ed6d47",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f5e7e039caef55c8a5d87d0b82e2d55326ed6d47",
        "files": [
          "wiretap/toshiba.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12394\nChange-Id: I4b19b95f2e1ffc96dac5c91bff6698c246f52007\nReviewed-on: https://code.wireshark.org/review/15230\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 3270dfac43da861c714df76513456b46765ff47f)\nReviewed-on: https://code.wireshark.org/review/15231",
        "before_after_code_files": [
          "wiretap/toshiba.c||wiretap/toshiba.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/toshiba.c||wiretap/toshiba.c": [
          "File: wiretap/toshiba.c -> wiretap/toshiba.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "249:  char line[TOSHIBA_LINE_LENGTH];",
          "250:  int num_items_scanned;",
          "253:  char channel[10], direction[10];",
          "254:  int i, hex_lines;",
          "255:  guint8 *pd;",
          "",
          "[Removed Lines]",
          "251:  guint pkt_len;",
          "252:  int pktnum, hr, min, sec, csec;",
          "",
          "[Added Lines]",
          "251:  int pkt_len, pktnum, hr, min, sec, csec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:  } while (strcmp(line, \"OFFSET 0001-0203\") != 0);",
          "305:  if (num_items_scanned != 1) {",
          "308:   return FALSE;",
          "309:  }",
          "310:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "304:  num_items_scanned = sscanf(line+64, \"LEN=%9u\", &pkt_len);",
          "",
          "[Added Lines]",
          "303:  num_items_scanned = sscanf(line+64, \"LEN=%9d\", &pkt_len);",
          "309:  if (pkt_len < 0) {",
          "312:   return FALSE;",
          "313:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed57db580b07a2a2c9589dc08041660cc74da87a",
      "candidate_info": {
        "commit_hash": "ed57db580b07a2a2c9589dc08041660cc74da87a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ed57db580b07a2a2c9589dc08041660cc74da87a",
        "files": [
          "wiretap/cosine.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12395\nChange-Id: I43b458a73b0934e9a5c2c89d34eac5a8f21a7455\nReviewed-on: https://code.wireshark.org/review/15223\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit a66628e425db725df1ac52a3c573a03357060ddd)\nReviewed-on: https://code.wireshark.org/review/15225\n(cherry picked from commit 1635420a4a024ac500f650bee338e389279d0704)\nReviewed-on: https://code.wireshark.org/review/16114\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/cosine.c||wiretap/cosine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/cosine.c||wiretap/cosine.c": [
          "File: wiretap/cosine.c -> wiretap/cosine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333: {",
          "334:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "335:  int num_items_scanned;",
          "338:  int pro, off, pri, rm, error;",
          "339:  guint code1, code2;",
          "340:  char if_name[COSINE_MAX_IF_NAME_LEN] = \"\", direction[6] = \"\";",
          "",
          "[Removed Lines]",
          "336:  int yy, mm, dd, hr, min, sec, csec;",
          "337:  guint pkt_len;",
          "",
          "[Added Lines]",
          "336:  int yy, mm, dd, hr, min, sec, csec, pkt_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:      &yy, &mm, &dd, &hr, &min, &sec, &csec) == 7) {",
          "348:   num_items_scanned = sscanf(line,",
          "350:    &yy, &mm, &dd, &hr, &min, &sec, &csec,",
          "351:        direction, if_name, &pkt_len,",
          "352:        &pro, &off, &pri, &rm, &error,",
          "",
          "[Removed Lines]",
          "349:      \"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "[Added Lines]",
          "348:      \"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:  } else {",
          "362:   num_items_scanned = sscanf(line,",
          "364:        direction, if_name, &pkt_len,",
          "365:        &pro, &off, &pri, &rm, &error,",
          "366:        &code1, &code2);",
          "",
          "[Removed Lines]",
          "363:      \"%5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "[Added Lines]",
          "362:      \"%5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:   }",
          "373:   yy = mm = dd = hr = min = sec = csec = 0;",
          "374:  }",
          "375:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:  if (pkt_len < 0) {",
          "377:   return FALSE;",
          "378:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45fc8043e01540f0cac7ace8c359aae1d9e8c677",
      "candidate_info": {
        "commit_hash": "45fc8043e01540f0cac7ace8c359aae1d9e8c677",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/45fc8043e01540f0cac7ace8c359aae1d9e8c677",
        "files": [
          "wiretap/cosine.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12395\nChange-Id: I43b458a73b0934e9a5c2c89d34eac5a8f21a7455\nReviewed-on: https://code.wireshark.org/review/15223\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit a66628e425db725df1ac52a3c573a03357060ddd)\nReviewed-on: https://code.wireshark.org/review/15224",
        "before_after_code_files": [
          "wiretap/cosine.c||wiretap/cosine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/cosine.c||wiretap/cosine.c": [
          "File: wiretap/cosine.c -> wiretap/cosine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330: {",
          "331:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "332:  int num_items_scanned;",
          "335:  int pro, off, pri, rm, error;",
          "336:  guint code1, code2;",
          "337:  char if_name[COSINE_MAX_IF_NAME_LEN] = \"\", direction[6] = \"\";",
          "",
          "[Removed Lines]",
          "333:  int yy, mm, dd, hr, min, sec, csec;",
          "334:  guint pkt_len;",
          "",
          "[Added Lines]",
          "333:  int yy, mm, dd, hr, min, sec, csec, pkt_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:      &yy, &mm, &dd, &hr, &min, &sec, &csec) == 7) {",
          "345:   num_items_scanned = sscanf(line,",
          "347:    &yy, &mm, &dd, &hr, &min, &sec, &csec,",
          "348:        direction, if_name, &pkt_len,",
          "349:        &pro, &off, &pri, &rm, &error,",
          "",
          "[Removed Lines]",
          "346:      \"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "[Added Lines]",
          "345:      \"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:  } else {",
          "359:   num_items_scanned = sscanf(line,",
          "361:        direction, if_name, &pkt_len,",
          "362:        &pro, &off, &pri, &rm, &error,",
          "363:        &code1, &code2);",
          "",
          "[Removed Lines]",
          "360:      \"%5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "[Added Lines]",
          "359:      \"%5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:   }",
          "370:   yy = mm = dd = hr = min = sec = csec = 0;",
          "371:  }",
          "372:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:  if (pkt_len < 0) {",
          "374:   return FALSE;",
          "375:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5788a9fc9b9a43c2815f2d72f0a04830a92d496f",
      "candidate_info": {
        "commit_hash": "5788a9fc9b9a43c2815f2d72f0a04830a92d496f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5788a9fc9b9a43c2815f2d72f0a04830a92d496f",
        "files": [
          "wiretap/toshiba.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nBug: 12394\nChange-Id: I4b19b95f2e1ffc96dac5c91bff6698c246f52007\nReviewed-on: https://code.wireshark.org/review/15230\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 3270dfac43da861c714df76513456b46765ff47f)\nReviewed-on: https://code.wireshark.org/review/15232\n(cherry picked from commit edbed5a120e878725ed3ba31484045ee7e817e58)\nReviewed-on: https://code.wireshark.org/review/16112\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/toshiba.c||wiretap/toshiba.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/toshiba.c||wiretap/toshiba.c": [
          "File: wiretap/toshiba.c -> wiretap/toshiba.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;",
          "251:  char line[TOSHIBA_LINE_LENGTH];",
          "252:  int num_items_scanned;",
          "255:  char channel[10], direction[10];",
          "256:  int i, hex_lines;",
          "257:  guint8 *pd;",
          "",
          "[Removed Lines]",
          "253:  guint pkt_len;",
          "254:  int pktnum, hr, min, sec, csec;",
          "",
          "[Added Lines]",
          "253:  int pkt_len, pktnum, hr, min, sec, csec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:  } while (strcmp(line, \"OFFSET 0001-0203\") != 0);",
          "307:  if (num_items_scanned != 1) {",
          "310:   return FALSE;",
          "311:  }",
          "312:  if (pkt_len > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "306:  num_items_scanned = sscanf(line+64, \"LEN=%9u\", &pkt_len);",
          "",
          "[Added Lines]",
          "305:  num_items_scanned = sscanf(line+64, \"LEN=%9d\", &pkt_len);",
          "311:  if (pkt_len < 0) {",
          "314:   return FALSE;",
          "315:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb8cc59104faa7815ee15ab7152a93173db870be",
      "candidate_info": {
        "commit_hash": "eb8cc59104faa7815ee15ab7152a93173db870be",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/eb8cc59104faa7815ee15ab7152a93173db870be",
        "files": [
          "wiretap/dbs-etherwatch.c"
        ],
        "message": "Don't treat the packet length as unsigned.\n\nThe scanf family of functions are as annoyingly bad at handling unsigned\nnumbers as strtoul() is - both of them are perfectly willing to accept a\nvalue beginning with a negative sign as an unsigned value.  When using\nstrtoul(), you can compensate for this by explicitly checking for a '-'\nas the first character of the string, but you can't do that with\nsscanf().\n\nSo revert to having pkt_len be signed, and scanning it with %d, but\ncheck for a negative value and fail if we see a negative value.\n\nChange-Id: Idc5392fe414da4558a95ec3c99f36ae5e267e6d1\nReviewed-on: https://code.wireshark.org/review/15219\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/dbs-etherwatch.c||wiretap/dbs-etherwatch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "wiretap/dbs-etherwatch.c||wiretap/dbs-etherwatch.c": [
          "File: wiretap/dbs-etherwatch.c -> wiretap/dbs-etherwatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:  guint8 *pd;",
          "276:  char line[DBS_ETHERWATCH_LINE_LENGTH];",
          "277:  int num_items_scanned;",
          "280:  int length_pos, length_from, length;",
          "281:  struct tm tm;",
          "282:  char mon[4] = \"xxx\";",
          "283:  gchar *p;",
          "284:  static const gchar months[] = \"JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC\";",
          "288:  buffer_assure_space(buf, DBS_ETHERWATCH_MAX_ETHERNET_PACKET_LEN);",
          "",
          "[Removed Lines]",
          "278:  int eth_hdr_len, csec;",
          "279:  guint pkt_len;",
          "285:  guint count, line_count;",
          "",
          "[Added Lines]",
          "278:  int eth_hdr_len, pkt_len, csec;",
          "284:  int count, line_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:  }",
          "355:  num_items_scanned = sscanf(line + LENGTH_POS,",
          "357:     &pkt_len,",
          "358:     &tm.tm_mday, mon,",
          "359:     &tm.tm_year, &tm.tm_hour, &tm.tm_min,",
          "",
          "[Removed Lines]",
          "356:     \"%9u byte buffer at %2d-%3s-%4d %2d:%2d:%2d.%9d\",",
          "",
          "[Added Lines]",
          "355:     \"%9d byte buffer at %2d-%3s-%4d %2d:%2d:%2d.%9d\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:   return FALSE;",
          "366:  }",
          "369:  if(strncmp(&line[ETH_II_CHECK_POS], ETH_II_CHECK_STR,",
          "370:   strlen(ETH_II_CHECK_STR)) == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:  if (pkt_len < 0) {",
          "370:   return FALSE;",
          "371:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}