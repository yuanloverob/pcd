{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4361596b92b4117652254ce9ced361fadd8de3b9",
      "candidate_info": {
        "commit_hash": "4361596b92b4117652254ce9ced361fadd8de3b9",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/4361596b92b4117652254ce9ced361fadd8de3b9",
        "files": [
          "utils.h"
        ],
        "message": "fix compilation from within a macOS kernel extension",
        "before_after_code_files": [
          "utils.h||utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "utils.h||utils.h": [
          "File: utils.h -> utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_UTILS_H",
          "5: #define CS_UTILS_H",
          "7: #include <stddef.h>",
          "8: #include \"include/capstone.h\"",
          "9: #include \"cs_priv.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if defined(CAPSTONE_HAS_OSXKERNEL)",
          "8: #include <libkern/libkern.h>",
          "9: #else",
          "11: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2897a80caf41c7c34689ea7e72802e204a60fa10",
      "candidate_info": {
        "commit_hash": "2897a80caf41c7c34689ea7e72802e204a60fa10",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/2897a80caf41c7c34689ea7e72802e204a60fa10",
        "files": [
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c",
          "cstool/cstool_x86.c",
          "cstool/cstool_xcore.c"
        ],
        "message": "cstool: fix compilation bug",
        "before_after_code_files": [
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_ppc.c||cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c||cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c||cstool/cstool_systemz.c",
          "cstool/cstool_x86.c||cstool/cstool_x86.c",
          "cstool/cstool_xcore.c||cstool/cstool_xcore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "6: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "4: #include <capstone.h>",
          "",
          "[Added Lines]",
          "4: #include <capstone/capstone.h>",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "7: #include <capstone.h>",
          "",
          "[Added Lines]",
          "7: #include <capstone/capstone.h>",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "7: #include <capstone.h>",
          "",
          "[Added Lines]",
          "7: #include <capstone/capstone.h>",
          "",
          "---------------"
        ],
        "cstool/cstool_ppc.c||cstool/cstool_ppc.c": [
          "File: cstool/cstool_ppc.c -> cstool/cstool_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "8: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "6: #include <capstone.h>",
          "",
          "[Added Lines]",
          "4: #include <inttypes.h>",
          "7: #include <capstone/capstone.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "59:     break;",
          "60:    case PPC_OP_IMM:",
          "62:     break;",
          "63:    case PPC_OP_MEM:",
          "64:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "61:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "",
          "[Added Lines]",
          "62:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\"PRIx64\"\\n\", i, op->imm);",
          "",
          "---------------"
        ],
        "cstool/cstool_sparc.c||cstool/cstool_sparc.c": [
          "File: cstool/cstool_sparc.c -> cstool/cstool_sparc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "8: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "6: #include <capstone.h>",
          "",
          "[Added Lines]",
          "6: #include <capstone/capstone.h>",
          "",
          "---------------"
        ],
        "cstool/cstool_systemz.c||cstool/cstool_systemz.c": [
          "File: cstool/cstool_systemz.c -> cstool/cstool_systemz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "8: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "6: #include <capstone.h>",
          "",
          "[Added Lines]",
          "6: #include <capstone/capstone.h>",
          "",
          "---------------"
        ],
        "cstool/cstool_x86.c||cstool/cstool_x86.c": [
          "File: cstool/cstool_x86.c -> cstool/cstool_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "7: #include <capstone.h>",
          "",
          "[Added Lines]",
          "7: #include <capstone/capstone.h>",
          "",
          "---------------"
        ],
        "cstool/cstool_xcore.c||cstool/cstool_xcore.c": [
          "File: cstool/cstool_xcore.c -> cstool/cstool_xcore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "7: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "",
          "[Removed Lines]",
          "5: #include <capstone.h>",
          "",
          "[Added Lines]",
          "5: #include <capstone/capstone.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb2d98479695d66155a35d335812deeb73cc2ac5",
      "candidate_info": {
        "commit_hash": "cb2d98479695d66155a35d335812deeb73cc2ac5",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/cb2d98479695d66155a35d335812deeb73cc2ac5",
        "files": [
          "msvc/capstone_static/capstone_static.vcxproj"
        ],
        "message": "unwind the last commit",
        "before_after_code_files": [
          "msvc/capstone_static/capstone_static.vcxproj||msvc/capstone_static/capstone_static.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msvc/capstone_static/capstone_static.vcxproj||msvc/capstone_static/capstone_static.vcxproj": [
          "File: msvc/capstone_static/capstone_static.vcxproj -> msvc/capstone_static/capstone_static.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:       </PrecompiledHeader>",
          "195:       <WarningLevel>Level3</WarningLevel>",
          "196:       <Optimization>Disabled</Optimization>",
          "198:       <SDLCheck>true</SDLCheck>",
          "199:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "200:       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>",
          "",
          "[Removed Lines]",
          "197:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;CAPSTONE_USE_SYS_DYN_MEM;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "197:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;CAPSTONE_USE_SYS_DYN_MEM;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:       </PrecompiledHeader>",
          "211:       <WarningLevel>Level3</WarningLevel>",
          "212:       <Optimization>Disabled</Optimization>",
          "214:       <SDLCheck>true</SDLCheck>",
          "215:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "216:       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>",
          "",
          "[Removed Lines]",
          "213:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "213:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:       </PrecompiledHeader>",
          "230:       <WarningLevel>Level3</WarningLevel>",
          "231:       <Optimization>Disabled</Optimization>",
          "233:       <SDLCheck>true</SDLCheck>",
          "234:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "235:       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>",
          "",
          "[Removed Lines]",
          "232:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;CAPSTONE_USE_SYS_DYN_MEM;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "232:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;CAPSTONE_USE_SYS_DYN_MEM;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:       </PrecompiledHeader>",
          "246:       <WarningLevel>Level3</WarningLevel>",
          "247:       <Optimization>Disabled</Optimization>",
          "249:       <SDLCheck>true</SDLCheck>",
          "250:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "251:       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>",
          "",
          "[Removed Lines]",
          "248:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "248:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266:       <Optimization>MaxSpeed</Optimization>",
          "267:       <FunctionLevelLinking>true</FunctionLevelLinking>",
          "268:       <IntrinsicFunctions>true</IntrinsicFunctions>",
          "270:       <SDLCheck>true</SDLCheck>",
          "271:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "272:       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>",
          "",
          "[Removed Lines]",
          "269:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;CAPSTONE_USE_SYS_DYN_MEM;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "269:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;CAPSTONE_USE_SYS_DYN_MEM;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "286:       <Optimization>MaxSpeed</Optimization>",
          "287:       <FunctionLevelLinking>true</FunctionLevelLinking>",
          "288:       <IntrinsicFunctions>true</IntrinsicFunctions>",
          "290:       <SDLCheck>true</SDLCheck>",
          "291:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "292:       <RuntimeLibrary>",
          "",
          "[Removed Lines]",
          "289:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "289:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:       <Optimization>MaxSpeed</Optimization>",
          "309:       <FunctionLevelLinking>true</FunctionLevelLinking>",
          "310:       <IntrinsicFunctions>true</IntrinsicFunctions>",
          "312:       <SDLCheck>true</SDLCheck>",
          "313:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "314:       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>",
          "",
          "[Removed Lines]",
          "311:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;CAPSTONE_USE_SYS_DYN_MEM;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "311:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;CAPSTONE_USE_SYS_DYN_MEM;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "328:       <Optimization>MaxSpeed</Optimization>",
          "329:       <FunctionLevelLinking>true</FunctionLevelLinking>",
          "330:       <IntrinsicFunctions>true</IntrinsicFunctions>",
          "332:       <SDLCheck>true</SDLCheck>",
          "333:       <AdditionalIncludeDirectories>..\\..\\include;..\\headers;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>",
          "334:       <RuntimeLibrary>",
          "",
          "[Removed Lines]",
          "331:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE;CAPSTONE_DIET;CAPSTONE_X86_REDUCE;CAPSTONE_HAS_X86;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "[Added Lines]",
          "331:       <PreprocessorDefinitions>CAPSTONE_X86_ATT_DISABLE_NO;CAPSTONE_DIET_NO;CAPSTONE_X86_REDUCE_NO;CAPSTONE_HAS_ARM;CAPSTONE_HAS_ARM64;CAPSTONE_HAS_MIPS;CAPSTONE_HAS_POWERPC;CAPSTONE_HAS_SPARC;CAPSTONE_HAS_SYSZ;CAPSTONE_HAS_X86;CAPSTONE_HAS_XCORE;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35c96234cf4171a56028a341aa8de3fadb3c8ff8",
      "candidate_info": {
        "commit_hash": "35c96234cf4171a56028a341aa8de3fadb3c8ff8",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/35c96234cf4171a56028a341aa8de3fadb3c8ff8",
        "files": [
          "arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KInstPrinter.c",
          "bindings/python/capstone/m68k.py",
          "include/capstone/m68k.h"
        ],
        "message": "(M68k) make displacements signed (#836)\n\n* (M68k) make displacements signed\n\n* (M68k) revert group changes\n\n* (m68k) signed displacement in python bindings",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c",
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py",
          "include/capstone/m68k.h||include/capstone/m68k.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:    op->address_mode = M68K_AM_REGI_ADDR_DISP;",
          "463:    op->mem.base_reg = M68K_REG_A0 + (instruction & 7);",
          "465:    break;",
          "467:   case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37:",
          "",
          "[Removed Lines]",
          "464:    op->mem.disp = (uint16_t)read_imm_16(info);",
          "",
          "[Added Lines]",
          "464:    op->mem.disp = (int16_t)read_imm_16(info);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:   case 0x3a:",
          "486:    op->address_mode = M68K_AM_PCI_DISP;",
          "488:    break;",
          "490:   case 0x3b:",
          "",
          "[Removed Lines]",
          "487:    op->mem.disp = (uint16_t)read_imm_16(info);",
          "",
          "[Added Lines]",
          "487:    op->mem.disp = (int16_t)read_imm_16(info);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1114:  op1->address_mode = M68K_AM_REGI_ADDR_DISP;",
          "1115:  op1->type = M68K_OP_MEM;",
          "1116:  op1->mem.base_reg = M68K_REG_A0 + (info->ir & 7);",
          "1118: }",
          "1120: static void build_movep_er(m68k_info *info, int size)",
          "",
          "[Removed Lines]",
          "1117:  op1->mem.disp = (uint16_t)read_imm_16(info);",
          "",
          "[Added Lines]",
          "1117:  op1->mem.disp = (int16_t)read_imm_16(info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1129:  op0->address_mode = M68K_AM_REGI_ADDR_DISP;",
          "1130:  op0->type = M68K_OP_MEM;",
          "1131:  op0->mem.base_reg = M68K_REG_A0 + (info->ir & 7);",
          "1134:  op1->reg = M68K_REG_D0 + ((info->ir >> 9) & 7);",
          "1135: }",
          "",
          "[Removed Lines]",
          "1132:  op0->mem.disp = (uint16_t)read_imm_16(info);",
          "",
          "[Added Lines]",
          "1132:  op0->mem.disp = (int16_t)read_imm_16(info);",
          "",
          "---------------"
        ],
        "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c": [
          "File: arch/M68K/M68KInstPrinter.c -> arch/M68K/M68KInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   case M68K_AM_REGI_ADDR: SStream_concat(O, \"(a%d)\", (op->reg - M68K_REG_A0)); break;",
          "146:   case M68K_AM_REGI_ADDR_POST_INC: SStream_concat(O, \"(a%d)+\", (op->reg - M68K_REG_A0)); break;",
          "147:   case M68K_AM_REGI_ADDR_PRE_DEC: SStream_concat(O, \"-(a%d)\", (op->reg - M68K_REG_A0)); break;",
          "150:   case M68K_AM_ABSOLUTE_DATA_SHORT: SStream_concat(O, \"$%x.w\", op->imm); break;",
          "151:   case M68K_AM_ABSOLUTE_DATA_LONG: SStream_concat(O, \"$%x.l\", op->imm); break;",
          "152:   case M68K_AM_IMMEDIATE:",
          "",
          "[Removed Lines]",
          "148:   case M68K_AM_REGI_ADDR_DISP: SStream_concat(O, \"$%x(a%d)\", op->mem.disp, (op->reg - M68K_REG_A0)); break;",
          "149:   case M68K_AM_PCI_DISP: SStream_concat(O, \"$%x(pc)\", op->mem.disp); break;",
          "",
          "[Added Lines]",
          "148:   case M68K_AM_REGI_ADDR_DISP: SStream_concat(O, \"%s$%x(a%d)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp), (op->reg - M68K_REG_A0)); break;",
          "149:   case M68K_AM_PCI_DISP: SStream_concat(O, \"%s$%x(pc)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp)); break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:     SStream_concat(O, \"#$%x\", op->imm);",
          "169:     break;",
          "170:   case M68K_AM_PCI_INDEX_8_BIT_DISP:",
          "172:    break;",
          "173:   case M68K_AM_AREGI_INDEX_8_BIT_DISP:",
          "175:    break;",
          "176:   case M68K_AM_PCI_INDEX_BASE_DISP:",
          "177:   case M68K_AM_AREGI_INDEX_BASE_DISP:",
          "",
          "[Removed Lines]",
          "171:    SStream_concat(O, \"$%x(pc,%s%s.%c)\", op->mem.disp, s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "174:    SStream_concat(O, \"$%x(%s,%s%s.%c)\", op->mem.disp, getRegName(op->mem.base_reg), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "",
          "[Added Lines]",
          "171:    SStream_concat(O, \"%s$%x(pc,%s%s.%c)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "174:    SStream_concat(O, \"%s$%x(%s,%s%s.%c)\", op->mem.disp < 0 ? \"-\" : \"\", abs(op->mem.disp), getRegName(op->mem.base_reg), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:         ('in_base_reg', ctypes.c_uint),",
          "13:         ('in_disp', ctypes.c_uint),",
          "14:         ('out_disp', ctypes.c_uint),",
          "16:         ('scale', ctypes.c_ubyte),",
          "17:         ('bitfield', ctypes.c_ubyte),",
          "18:         ('width', ctypes.c_ubyte),",
          "",
          "[Removed Lines]",
          "15:         ('disp', ctypes.c_ushort),",
          "",
          "[Added Lines]",
          "15:         ('disp', ctypes.c_short),",
          "",
          "---------------"
        ],
        "include/capstone/m68k.h||include/capstone/m68k.h": [
          "File: include/capstone/m68k.h -> include/capstone/m68k.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:  m68k_reg in_base_reg;   // indirect base register (or M68K_REG_INVALID if irrelevant)",
          "127:  uint32_t in_disp;      // indirect displacement",
          "128:  uint32_t out_disp;      // other displacement",
          "130:  uint8_t scale;         // scale for index register",
          "131:  uint8_t bitfield;       // set to true if the two values below should be used",
          "132:  uint8_t width;         // used for bf* instructions",
          "",
          "[Removed Lines]",
          "129:  uint16_t disp;         // displacement value",
          "",
          "[Added Lines]",
          "129:  int16_t disp;         // displacement value",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32238dc8c59610e98408160c36a936d198ee4b20",
      "candidate_info": {
        "commit_hash": "32238dc8c59610e98408160c36a936d198ee4b20",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/32238dc8c59610e98408160c36a936d198ee4b20",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c",
          "cstool/cstool_x86.c",
          "cstool/cstool_xcore.c"
        ],
        "message": "cstool: cleanup",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_ppc.c||cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c||cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c||cstool/cstool_systemz.c",
          "cstool/cstool_x86.c||cstool/cstool_x86.c",
          "cstool/cstool_xcore.c||cstool/cstool_xcore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: void print_insn_detail_sysz(csh handle, cs_insn *ins);",
          "19: void print_insn_detail_xcore(csh handle, cs_insn *ins);",
          "22: static uint8_t char_to_hexnum(char c)",
          "23: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "22: {",
          "23:  unsigned char *c;",
          "25:  printf(\"%s\", comment);",
          "26:  for (c = str; c < str + len; c++) {",
          "27:   printf(\"0x%02x \", *c & 0xff);",
          "28:  }",
          "30:  printf(\"\\n\");",
          "31: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: static void usage(char *prog)",
          "63: {",
          "64:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\\n\", VERSION);",
          "66:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "68:  if (cs_support(CS_ARCH_X86)) {",
          "",
          "[Removed Lines]",
          "65:  printf(\"Syntax: %s [-d:print all debug information] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "",
          "[Added Lines]",
          "77:  printf(\"Syntax: %s [-d:print all detail information] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:  cs_insn *insn;",
          "125:  cs_err err;",
          "126:  cs_mode md;",
          "130:  if (argc != 3 && argc != 4 && argc != 5) {",
          "131:   usage(argv[0]);",
          "",
          "[Removed Lines]",
          "127:  char *arch;",
          "128:  bool debug_flag = false;",
          "",
          "[Added Lines]",
          "139:  cs_arch arch;",
          "140:  bool detail_flag = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:  }",
          "135:  if (!strcmp(argv[1], \"-d\")) {",
          "141:   mode = argv[2];",
          "142:   assembly = preprocess(argv[3], &size);",
          "143:   if (argc == 5) {",
          "",
          "[Removed Lines]",
          "136:    if (argc == 3) {",
          "137:     usage(argv[0]);",
          "138:     return -1;",
          "139:  }",
          "140:   debug_flag = true;",
          "",
          "[Added Lines]",
          "148:   if (argc == 3) {",
          "149:    usage(argv[0]);",
          "150:    return -1;",
          "151:   }",
          "152:   detail_flag = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:    }",
          "172:   }",
          "173:  }",
          "175:  if (!strcmp(mode, \"arm\")) {",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "178:  }",
          "180:  if (!strcmp(mode, \"armb\")) {",
          "182:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "183:  }",
          "185:  if (!strcmp(mode, \"arml\")) {",
          "187:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "188:  }",
          "190:  if (!strcmp(mode, \"thumb\")) {",
          "192:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "193:  }",
          "195:  if (!strcmp(mode, \"thumbbe\")) {",
          "197:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "198:  }",
          "200:  if (!strcmp(mode, \"thumble\")) {",
          "202:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "203:  }",
          "205:  if (!strcmp(mode, \"arm64\")) {",
          "207:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "208:  }",
          "210:  if (!strcmp(mode, \"mips\")) {",
          "212:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "213:  }",
          "215:  if (!strcmp(mode, \"mipsbe\")) {",
          "217:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "218:  }",
          "220:  if (!strcmp(mode, \"mips64\")) {",
          "222:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "223:  }",
          "225:  if (!strcmp(mode, \"mips64be\")) {",
          "227:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "228:  }",
          "230:  if (!strcmp(mode, \"x16\")) {",
          "231:   md = CS_MODE_16;",
          "233:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "234:  }",
          "236:  if (!strcmp(mode, \"x32\")) {",
          "237:   md = CS_MODE_32;",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "240:  }",
          "242:  if (!strcmp(mode, \"x64\")) {",
          "243:   md = CS_MODE_64;",
          "245:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "246:  }",
          "248:  if (!strcmp(mode, \"x16att\")) {",
          "249:   md = CS_MODE_16;",
          "251:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:   if (!err) {",
          "253:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "176:   arch = \"arm\";",
          "181:   arch = \"arm\";",
          "186:   arch = \"arm\";",
          "191:   arch = \"arm\";",
          "196:   arch = \"arm\";",
          "201:   arch = \"arm\";",
          "206:   arch = \"arm64\";",
          "211:   arch = \"mips\";",
          "216:   arch = \"mips\";",
          "221:   arch = \"mips\";",
          "226:   arch = \"mips\";",
          "232:   arch = \"x86\";",
          "238:   arch = \"x86\";",
          "244:   arch = \"x86\";",
          "250:   arch = \"x86\";",
          "",
          "[Added Lines]",
          "188:   arch = CS_ARCH_ARM;",
          "193:   arch = CS_ARCH_ARM;",
          "198:   arch = CS_ARCH_ARM;",
          "203:   arch = CS_ARCH_ARM;",
          "208:   arch = CS_ARCH_ARM;",
          "213:   arch = CS_ARCH_ARM;",
          "218:   arch = CS_ARCH_ARM64;",
          "223:   arch = CS_ARCH_MIPS;",
          "228:   arch = CS_ARCH_MIPS;",
          "233:   arch = CS_ARCH_MIPS;",
          "238:   arch = CS_ARCH_MIPS;",
          "244:   arch = CS_ARCH_X86;",
          "250:   arch = CS_ARCH_X86;",
          "256:   arch = CS_ARCH_X86;",
          "262:   arch = CS_ARCH_X86;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "257:  if (!strcmp(mode,\"x32att\")) {",
          "258:   md = CS_MODE_32;",
          "260:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "261:   if (!err) {",
          "262:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "259:   arch = \"x86\";",
          "",
          "[Added Lines]",
          "271:   arch = CS_ARCH_X86;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "266:  if (!strcmp(mode,\"x64att\")) {",
          "267:   md = CS_MODE_64;",
          "269:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "270:   if (!err) {",
          "271:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "268:   arch = \"x86\";",
          "",
          "[Added Lines]",
          "280:   arch = CS_ARCH_X86;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "273:  }",
          "275:  if (!strcmp(mode,\"ppc64\")) {",
          "277:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "278:  }",
          "280:  if (!strcmp(mode,\"ppc64be\")) {",
          "282:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "283:  }",
          "285:  if (!strcmp(mode,\"sparc\")) {",
          "287:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "288:  }",
          "290:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "292:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "293:  }",
          "295:  if (!strcmp(mode,\"xcore\")) {",
          "297:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "298:  }",
          "",
          "[Removed Lines]",
          "276:   arch = \"ppc\";",
          "281:   arch = \"ppc\";",
          "286:   arch = \"sparc\";",
          "291:   arch = \"sysz\";",
          "296:   arch = \"xcore\";",
          "",
          "[Added Lines]",
          "288:   arch = CS_ARCH_PPC;",
          "293:   arch = CS_ARCH_PPC;",
          "298:   arch = CS_ARCH_SPARC;",
          "303:   arch = CS_ARCH_SYSZ;",
          "308:   arch = CS_ARCH_XCORE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "303:   return -1;",
          "304:  }",
          "307:   cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:  }",
          "",
          "[Removed Lines]",
          "306:  if (debug_flag) {",
          "",
          "[Added Lines]",
          "318:  if (detail_flag) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:    }",
          "323:     for (; j < 16; j++) {",
          "324:      printf(\"  \");",
          "325:     }",
          "326:    }",
          "327:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "330:      print_insn_detail_x86(handle, md, &insn[i]);",
          "331:     }",
          "334:      print_insn_detail_arm(handle, &insn[i]);",
          "335:     }",
          "338:      print_insn_detail_arm64(handle,&insn[i]);",
          "339:     }",
          "342:      print_insn_detail_mips(handle, &insn[i]);",
          "343:     }",
          "346:      print_insn_detail_ppc(handle, &insn[i]);",
          "347:     }",
          "350:      print_insn_detail_sparc(handle, &insn[i]);",
          "351:     }",
          "354:      print_insn_detail_sysz(handle, &insn[i]);",
          "355:     }",
          "358:      print_insn_detail_xcore(handle, &insn[i]);",
          "359:     }",
          "360:    }",
          "",
          "[Removed Lines]",
          "322:    if (!strcmp(arch, \"x86\")) {",
          "328:    if (debug_flag) {",
          "329:     if (!strcmp(arch, \"x86\")) {",
          "333:     if (!strcmp(arch, \"arm\")) {",
          "337:     if (!strcmp(arch,\"arm64\")) {",
          "341:     if (!strcmp(arch, \"mips\")) {",
          "345:     if (!strcmp(arch, \"ppc\")) {",
          "349:     if (!strcmp(arch, \"sparc\")) {",
          "353:     if (!strcmp(arch, \"sysz\")) {",
          "357:     if (!strcmp(arch, \"xcore\")) {",
          "",
          "[Added Lines]",
          "334:    if (arch == CS_ARCH_X86) {",
          "343:    if (detail_flag) {",
          "344:     if (arch == CS_ARCH_X86) {",
          "348:     if (arch == CS_ARCH_ARM) {",
          "352:     if (arch == CS_ARCH_ARM64) {",
          "356:     if (arch == CS_ARCH_MIPS) {",
          "360:     if (arch == CS_ARCH_PPC) {",
          "364:     if (arch == CS_ARCH_SPARC) {",
          "368:     if (arch == CS_ARCH_SYSZ) {",
          "372:     if (arch == CS_ARCH_XCORE) {",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <capstone.h>",
          "18: void print_insn_detail_arm(csh handle, cs_insn *ins)",
          "19: {",
          "44: #if defined(_KERNEL_MODE)",
          "47: #else",
          "49: #endif",
          "125: }",
          "",
          "[Removed Lines]",
          "6: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "7: {",
          "8:     unsigned char *c;",
          "10:     printf(\"%s\", comment);",
          "11:     for (c = str; c < str + len; c++) {",
          "12:         printf(\"0x%02x \", *c & 0xff);",
          "13:     }",
          "15:     printf(\"\\n\");",
          "16: }",
          "20:     cs_arm *arm;",
          "21:     int i;",
          "24:     if (ins->detail == NULL)",
          "25:         return;",
          "27:     arm = &(ins->detail->arm);",
          "29:     if (arm->op_count)",
          "30:         printf(\"\\top_count: %u\\n\", arm->op_count);",
          "32:     for (i = 0; i < arm->op_count; i++) {",
          "33:         cs_arm_op *op = &(arm->operands[i]);",
          "34:         switch((int)op->type) {",
          "35:             default:",
          "36:                 break;",
          "37:             case ARM_OP_REG:",
          "38:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "39:                 break;",
          "40:             case ARM_OP_IMM:",
          "41:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "42:                 break;",
          "43:             case ARM_OP_FP:",
          "46:                 printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "48:                 printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "50:                 break;",
          "51:             case ARM_OP_MEM:",
          "52:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "53:                 if (op->mem.base != X86_REG_INVALID)",
          "54:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "55:                            i, cs_reg_name(handle, op->mem.base));",
          "56:                 if (op->mem.index != X86_REG_INVALID)",
          "57:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "58:                            i, cs_reg_name(handle, op->mem.index));",
          "59:                 if (op->mem.scale != 1)",
          "60:                     printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "61:                 if (op->mem.disp != 0)",
          "62:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "64:                 break;",
          "65:             case ARM_OP_PIMM:",
          "66:                 printf(\"\\t\\toperands[%u].type: P-IMM = %u\\n\", i, op->imm);",
          "67:                 break;",
          "68:             case ARM_OP_CIMM:",
          "69:                 printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, op->imm);",
          "70:                 break;",
          "71:             case ARM_OP_SETEND:",
          "72:                 printf(\"\\t\\toperands[%u].type: SETEND = %s\\n\", i, op->setend == ARM_SETEND_BE? \"be\" : \"le\");",
          "73:                 break;",
          "74:             case ARM_OP_SYSREG:",
          "75:                 printf(\"\\t\\toperands[%u].type: SYSREG = %u\\n\", i, op->reg);",
          "76:                 break;",
          "77:         }",
          "79:         if (op->shift.type != ARM_SFT_INVALID && op->shift.value) {",
          "80:             if (op->shift.type < ARM_SFT_ASR_REG)",
          "82:                 printf(\"\\t\\t\\tShift: %u = %u\\n\", op->shift.type, op->shift.value);",
          "83:             else",
          "85:                 printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "86:                        cs_reg_name(handle, op->shift.value));",
          "87:         }",
          "89:         if (op->vector_index != -1) {",
          "90:             printf(\"\\t\\toperands[%u].vector_index = %u\\n\", i, op->vector_index);",
          "91:         }",
          "93:         if (op->subtracted)",
          "94:             printf(\"\\t\\tSubtracted: True\\n\");",
          "95:     }",
          "97:     if (arm->cc != ARM_CC_AL && arm->cc != ARM_CC_INVALID)",
          "98:         printf(\"\\tCode condition: %u\\n\", arm->cc);",
          "100:     if (arm->update_flags)",
          "101:         printf(\"\\tUpdate-flags: True\\n\");",
          "103:     if (arm->writeback)",
          "104:         printf(\"\\tWrite-back: True\\n\");",
          "106:     if (arm->cps_mode)",
          "107:         printf(\"\\tCPSI-mode: %u\\n\", arm->cps_mode);",
          "109:     if (arm->cps_flag)",
          "110:         printf(\"\\tCPSI-flag: %u\\n\", arm->cps_flag);",
          "112:     if (arm->vector_data)",
          "113:         printf(\"\\tVector-data: %u\\n\", arm->vector_data);",
          "115:     if (arm->vector_size)",
          "116:         printf(\"\\tVector-size: %u\\n\", arm->vector_size);",
          "118:     if (arm->usermode)",
          "119:         printf(\"\\tUser-mode: True\\n\");",
          "121:     if (arm->mem_barrier)",
          "122:         printf(\"\\tMemory-barrier: %u\\n\", arm->mem_barrier);",
          "124:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "6: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "10:  cs_arm *arm;",
          "11:  int i;",
          "14:  if (ins->detail == NULL)",
          "15:   return;",
          "17:  arm = &(ins->detail->arm);",
          "19:  if (arm->op_count)",
          "20:   printf(\"\\top_count: %u\\n\", arm->op_count);",
          "22:  for (i = 0; i < arm->op_count; i++) {",
          "23:   cs_arm_op *op = &(arm->operands[i]);",
          "24:   switch((int)op->type) {",
          "25:    default:",
          "26:     break;",
          "27:    case ARM_OP_REG:",
          "28:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "29:     break;",
          "30:    case ARM_OP_IMM:",
          "31:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "32:     break;",
          "33:    case ARM_OP_FP:",
          "36:     printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "38:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "40:     break;",
          "41:    case ARM_OP_MEM:",
          "42:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "43:     if (op->mem.base != X86_REG_INVALID)",
          "44:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "45:        i, cs_reg_name(handle, op->mem.base));",
          "46:     if (op->mem.index != X86_REG_INVALID)",
          "47:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "48:        i, cs_reg_name(handle, op->mem.index));",
          "49:     if (op->mem.scale != 1)",
          "50:      printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "51:     if (op->mem.disp != 0)",
          "52:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "54:     break;",
          "55:    case ARM_OP_PIMM:",
          "56:     printf(\"\\t\\toperands[%u].type: P-IMM = %u\\n\", i, op->imm);",
          "57:     break;",
          "58:    case ARM_OP_CIMM:",
          "59:     printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, op->imm);",
          "60:     break;",
          "61:    case ARM_OP_SETEND:",
          "62:     printf(\"\\t\\toperands[%u].type: SETEND = %s\\n\", i, op->setend == ARM_SETEND_BE? \"be\" : \"le\");",
          "63:     break;",
          "64:    case ARM_OP_SYSREG:",
          "65:     printf(\"\\t\\toperands[%u].type: SYSREG = %u\\n\", i, op->reg);",
          "66:     break;",
          "67:   }",
          "69:   if (op->shift.type != ARM_SFT_INVALID && op->shift.value) {",
          "70:    if (op->shift.type < ARM_SFT_ASR_REG)",
          "72:     printf(\"\\t\\t\\tShift: %u = %u\\n\", op->shift.type, op->shift.value);",
          "73:    else",
          "75:     printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "76:       cs_reg_name(handle, op->shift.value));",
          "77:   }",
          "79:   if (op->vector_index != -1) {",
          "80:    printf(\"\\t\\toperands[%u].vector_index = %u\\n\", i, op->vector_index);",
          "81:   }",
          "83:   if (op->subtracted)",
          "84:    printf(\"\\t\\tSubtracted: True\\n\");",
          "85:  }",
          "87:  if (arm->cc != ARM_CC_AL && arm->cc != ARM_CC_INVALID)",
          "88:   printf(\"\\tCode condition: %u\\n\", arm->cc);",
          "90:  if (arm->update_flags)",
          "91:   printf(\"\\tUpdate-flags: True\\n\");",
          "93:  if (arm->writeback)",
          "94:   printf(\"\\tWrite-back: True\\n\");",
          "96:  if (arm->cps_mode)",
          "97:   printf(\"\\tCPSI-mode: %u\\n\", arm->cps_mode);",
          "99:  if (arm->cps_flag)",
          "100:   printf(\"\\tCPSI-flag: %u\\n\", arm->cps_flag);",
          "102:  if (arm->vector_data)",
          "103:   printf(\"\\tVector-data: %u\\n\", arm->vector_data);",
          "105:  if (arm->vector_size)",
          "106:   printf(\"\\tVector-size: %u\\n\", arm->vector_size);",
          "108:  if (arm->usermode)",
          "109:   printf(\"\\tUser-mode: True\\n\");",
          "111:  if (arm->mem_barrier)",
          "112:   printf(\"\\tMemory-barrier: %u\\n\", arm->mem_barrier);",
          "114:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <capstone.h>",
          "21: void print_insn_detail_arm64(csh handle, cs_insn *ins)",
          "22: {",
          "46: #if defined(_KERNEL_MODE)",
          "49: #else",
          "51: #endif",
          "114: }",
          "",
          "[Removed Lines]",
          "9: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "10: {",
          "11:     unsigned char *c;",
          "13:     printf(\"%s\", comment);",
          "14:     for (c = str; c < str + len; c++) {",
          "15:         printf(\"0x%02x \", *c & 0xff);",
          "16:     }",
          "18:     printf(\"\\n\");",
          "19: }",
          "23:     cs_arm64 *arm64;",
          "24:     int i;",
          "27:     if (ins->detail == NULL)",
          "28:         return;",
          "30:     arm64 = &(ins->detail->arm64);",
          "31:     if (arm64->op_count)",
          "32:         printf(\"\\top_count: %u\\n\", arm64->op_count);",
          "34:     for (i = 0; i < arm64->op_count; i++) {",
          "35:         cs_arm64_op *op = &(arm64->operands[i]);",
          "36:         switch(op->type) {",
          "37:             default:",
          "38:                 break;",
          "39:             case ARM64_OP_REG:",
          "40:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "41:                 break;",
          "42:             case ARM64_OP_IMM:",
          "43:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "44:                 break;",
          "45:             case ARM64_OP_FP:",
          "48:                 printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "50:                 printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "52:                 break;",
          "53:             case ARM64_OP_MEM:",
          "54:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "55:                 if (op->mem.base != ARM64_REG_INVALID)",
          "56:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(handle, op->mem.base));",
          "57:                 if (op->mem.index != ARM64_REG_INVALID)",
          "58:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(handle, op->mem.index));",
          "59:                 if (op->mem.disp != 0)",
          "60:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "62:                 break;",
          "63:             case ARM64_OP_CIMM:",
          "64:                 printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, (int)op->imm);",
          "65:                 break;",
          "66:             case ARM64_OP_REG_MRS:",
          "67:                 printf(\"\\t\\toperands[%u].type: REG_MRS = 0x%x\\n\", i, op->reg);",
          "68:                 break;",
          "69:             case ARM64_OP_REG_MSR:",
          "70:                 printf(\"\\t\\toperands[%u].type: REG_MSR = 0x%x\\n\", i, op->reg);",
          "71:                 break;",
          "72:             case ARM64_OP_PSTATE:",
          "73:                 printf(\"\\t\\toperands[%u].type: PSTATE = 0x%x\\n\", i, op->pstate);",
          "74:                 break;",
          "75:             case ARM64_OP_SYS:",
          "76:                 printf(\"\\t\\toperands[%u].type: SYS = 0x%x\\n\", i, op->sys);",
          "77:                 break;",
          "78:             case ARM64_OP_PREFETCH:",
          "79:                 printf(\"\\t\\toperands[%u].type: PREFETCH = 0x%x\\n\", i, op->prefetch);",
          "80:                 break;",
          "81:             case ARM64_OP_BARRIER:",
          "82:                 printf(\"\\t\\toperands[%u].type: BARRIER = 0x%x\\n\", i, op->barrier);",
          "83:                 break;",
          "84:         }",
          "86:         if (op->shift.type != ARM64_SFT_INVALID &&",
          "87:             op->shift.value)",
          "88:             printf(\"\\t\\t\\tShift: type = %u, value = %u\\n\",",
          "89:                    op->shift.type, op->shift.value);",
          "91:         if (op->ext != ARM64_EXT_INVALID)",
          "92:             printf(\"\\t\\t\\tExt: %u\\n\", op->ext);",
          "94:         if (op->vas != ARM64_VAS_INVALID)",
          "95:             printf(\"\\t\\t\\tVector Arrangement Specifier: 0x%x\\n\", op->vas);",
          "97:         if (op->vess != ARM64_VESS_INVALID)",
          "98:             printf(\"\\t\\t\\tVector Element Size Specifier: %u\\n\", op->vess);",
          "100:         if (op->vector_index != -1)",
          "101:             printf(\"\\t\\t\\tVector Index: %u\\n\", op->vector_index);",
          "102:     }",
          "104:     if (arm64->update_flags)",
          "105:         printf(\"\\tUpdate-flags: True\\n\");",
          "107:     if (arm64->writeback)",
          "108:         printf(\"\\tWrite-back: True\\n\");",
          "110:     if (arm64->cc)",
          "111:         printf(\"\\tCode-condition: %u\\n\", arm64->cc);",
          "113:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "13:  cs_arm64 *arm64;",
          "14:  int i;",
          "17:  if (ins->detail == NULL)",
          "18:   return;",
          "20:  arm64 = &(ins->detail->arm64);",
          "21:  if (arm64->op_count)",
          "22:   printf(\"\\top_count: %u\\n\", arm64->op_count);",
          "24:  for (i = 0; i < arm64->op_count; i++) {",
          "25:   cs_arm64_op *op = &(arm64->operands[i]);",
          "26:   switch(op->type) {",
          "27:    default:",
          "28:     break;",
          "29:    case ARM64_OP_REG:",
          "30:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "31:     break;",
          "32:    case ARM64_OP_IMM:",
          "33:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "34:     break;",
          "35:    case ARM64_OP_FP:",
          "38:     printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "40:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "42:     break;",
          "43:    case ARM64_OP_MEM:",
          "44:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "45:     if (op->mem.base != ARM64_REG_INVALID)",
          "46:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(handle, op->mem.base));",
          "47:     if (op->mem.index != ARM64_REG_INVALID)",
          "48:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(handle, op->mem.index));",
          "49:     if (op->mem.disp != 0)",
          "50:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "52:     break;",
          "53:    case ARM64_OP_CIMM:",
          "54:     printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, (int)op->imm);",
          "55:     break;",
          "56:    case ARM64_OP_REG_MRS:",
          "57:     printf(\"\\t\\toperands[%u].type: REG_MRS = 0x%x\\n\", i, op->reg);",
          "58:     break;",
          "59:    case ARM64_OP_REG_MSR:",
          "60:     printf(\"\\t\\toperands[%u].type: REG_MSR = 0x%x\\n\", i, op->reg);",
          "61:     break;",
          "62:    case ARM64_OP_PSTATE:",
          "63:     printf(\"\\t\\toperands[%u].type: PSTATE = 0x%x\\n\", i, op->pstate);",
          "64:     break;",
          "65:    case ARM64_OP_SYS:",
          "66:     printf(\"\\t\\toperands[%u].type: SYS = 0x%x\\n\", i, op->sys);",
          "67:     break;",
          "68:    case ARM64_OP_PREFETCH:",
          "69:     printf(\"\\t\\toperands[%u].type: PREFETCH = 0x%x\\n\", i, op->prefetch);",
          "70:     break;",
          "71:    case ARM64_OP_BARRIER:",
          "72:     printf(\"\\t\\toperands[%u].type: BARRIER = 0x%x\\n\", i, op->barrier);",
          "73:     break;",
          "74:   }",
          "76:   if (op->shift.type != ARM64_SFT_INVALID &&",
          "77:     op->shift.value)",
          "78:    printf(\"\\t\\t\\tShift: type = %u, value = %u\\n\",",
          "79:      op->shift.type, op->shift.value);",
          "81:   if (op->ext != ARM64_EXT_INVALID)",
          "82:    printf(\"\\t\\t\\tExt: %u\\n\", op->ext);",
          "84:   if (op->vas != ARM64_VAS_INVALID)",
          "85:    printf(\"\\t\\t\\tVector Arrangement Specifier: 0x%x\\n\", op->vas);",
          "87:   if (op->vess != ARM64_VESS_INVALID)",
          "88:    printf(\"\\t\\t\\tVector Element Size Specifier: %u\\n\", op->vess);",
          "90:   if (op->vector_index != -1)",
          "91:    printf(\"\\t\\t\\tVector Index: %u\\n\", op->vector_index);",
          "92:  }",
          "94:  if (arm64->update_flags)",
          "95:   printf(\"\\tUpdate-flags: True\\n\");",
          "97:  if (arm64->writeback)",
          "98:   printf(\"\\tWrite-back: True\\n\");",
          "100:  if (arm64->cc)",
          "101:   printf(\"\\tCode-condition: %u\\n\", arm64->cc);",
          "103:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <capstone.h>",
          "21: void print_insn_detail_mips(csh handle, cs_insn *ins)",
          "22: {",
          "59: }",
          "",
          "[Removed Lines]",
          "9: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "10: {",
          "11:     unsigned char *c;",
          "13:     printf(\"%s\", comment);",
          "14:     for (c = str; c < str + len; c++) {",
          "15:         printf(\"0x%02x \", *c & 0xff);",
          "16:     }",
          "18:     printf(\"\\n\");",
          "19: }",
          "23:     int i;",
          "24:     cs_mips *mips;",
          "27:     if (ins->detail == NULL)",
          "28:         return;",
          "30:     mips = &(ins->detail->mips);",
          "31:     if (mips->op_count)",
          "32:         printf(\"\\top_count: %u\\n\", mips->op_count);",
          "34:     for (i = 0; i < mips->op_count; i++) {",
          "35:         cs_mips_op *op = &(mips->operands[i]);",
          "36:         switch((int)op->type) {",
          "37:             default:",
          "38:                 break;",
          "39:             case MIPS_OP_REG:",
          "40:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "41:                 break;",
          "42:             case MIPS_OP_IMM:",
          "43:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "44:                 break;",
          "45:             case MIPS_OP_MEM:",
          "46:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "47:                 if (op->mem.base != X86_REG_INVALID)",
          "48:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "49:                            i, cs_reg_name(handle, op->mem.base));",
          "50:                 if (op->mem.disp != 0)",
          "51:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "53:                 break;",
          "54:         }",
          "56:     }",
          "58:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "13:  int i;",
          "14:  cs_mips *mips;",
          "17:  if (ins->detail == NULL)",
          "18:   return;",
          "20:  mips = &(ins->detail->mips);",
          "21:  if (mips->op_count)",
          "22:   printf(\"\\top_count: %u\\n\", mips->op_count);",
          "24:  for (i = 0; i < mips->op_count; i++) {",
          "25:   cs_mips_op *op = &(mips->operands[i]);",
          "26:   switch((int)op->type) {",
          "27:    default:",
          "28:     break;",
          "29:    case MIPS_OP_REG:",
          "30:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "31:     break;",
          "32:    case MIPS_OP_IMM:",
          "33:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "34:     break;",
          "35:    case MIPS_OP_MEM:",
          "36:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "37:     if (op->mem.base != X86_REG_INVALID)",
          "38:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "39:        i, cs_reg_name(handle, op->mem.base));",
          "40:     if (op->mem.disp != 0)",
          "41:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "43:     break;",
          "44:   }",
          "46:  }",
          "48:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_ppc.c||cstool/cstool_ppc.c": [
          "File: cstool/cstool_ppc.c -> cstool/cstool_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <capstone.h>",
          "22: static const char* get_bc_name(int bc)",
          "23: {",
          "49: }",
          "51: void print_insn_detail_ppc(csh handle, cs_insn *ins)",
          "52: {",
          "103: }",
          "",
          "[Removed Lines]",
          "8: static csh handle;",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "24:     switch(bc) {",
          "25:         default:",
          "26:         case PPC_BC_INVALID:",
          "27:             return (\"invalid\");",
          "28:         case PPC_BC_LT:",
          "29:             return (\"lt\");",
          "30:         case PPC_BC_LE:",
          "31:             return (\"le\");",
          "32:         case PPC_BC_EQ:",
          "33:             return (\"eq\");",
          "34:         case PPC_BC_GE:",
          "35:             return (\"ge\");",
          "36:         case PPC_BC_GT:",
          "37:             return (\"gt\");",
          "38:         case PPC_BC_NE:",
          "39:             return (\"ne\");",
          "40:         case PPC_BC_UN:",
          "41:             return (\"un\");",
          "42:         case PPC_BC_NU:",
          "43:             return (\"nu\");",
          "44:         case PPC_BC_SO:",
          "45:             return (\"so\");",
          "46:         case PPC_BC_NS:",
          "47:             return (\"ns\");",
          "48:     }",
          "53:     cs_ppc *ppc;",
          "54:     int i;",
          "57:     if (ins->detail == NULL)",
          "58:         return;",
          "60:     ppc = &(ins->detail->ppc);",
          "61:     if (ppc->op_count)",
          "62:         printf(\"\\top_count: %u\\n\", ppc->op_count);",
          "64:     for (i = 0; i < ppc->op_count; i++) {",
          "65:         cs_ppc_op *op = &(ppc->operands[i]);",
          "66:         switch((int)op->type) {",
          "67:             default:",
          "68:                 break;",
          "69:             case PPC_OP_REG:",
          "70:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "71:                 break;",
          "72:             case PPC_OP_IMM:",
          "73:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "74:                 break;",
          "75:             case PPC_OP_MEM:",
          "76:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "77:                 if (op->mem.base != PPC_REG_INVALID)",
          "78:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "79:                            i, cs_reg_name(handle, op->mem.base));",
          "80:                 if (op->mem.disp != 0)",
          "81:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "83:                 break;",
          "84:             case PPC_OP_CRX:",
          "85:                 printf(\"\\t\\toperands[%u].type: CRX\\n\", i);",
          "86:                 printf(\"\\t\\t\\toperands[%u].crx.scale: %d\\n\", i, op->crx.scale);",
          "87:                 printf(\"\\t\\t\\toperands[%u].crx.reg: %s\\n\", i, cs_reg_name(handle, op->crx.reg));",
          "88:                 printf(\"\\t\\t\\toperands[%u].crx.cond: %s\\n\", i, get_bc_name(op->crx.cond));",
          "89:                 break;",
          "90:         }",
          "91:     }",
          "93:     if (ppc->bc != 0)",
          "94:         printf(\"\\tBranch code: %u\\n\", ppc->bc);",
          "96:     if (ppc->bh != 0)",
          "97:         printf(\"\\tBranch hint: %u\\n\", ppc->bh);",
          "99:     if (ppc->update_cr0)",
          "100:         printf(\"\\tUpdate-CR0: True\\n\");",
          "102:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "8: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "12:  switch(bc) {",
          "13:   default:",
          "14:   case PPC_BC_INVALID:",
          "15:    return (\"invalid\");",
          "16:   case PPC_BC_LT:",
          "17:    return (\"lt\");",
          "18:   case PPC_BC_LE:",
          "19:    return (\"le\");",
          "20:   case PPC_BC_EQ:",
          "21:    return (\"eq\");",
          "22:   case PPC_BC_GE:",
          "23:    return (\"ge\");",
          "24:   case PPC_BC_GT:",
          "25:    return (\"gt\");",
          "26:   case PPC_BC_NE:",
          "27:    return (\"ne\");",
          "28:   case PPC_BC_UN:",
          "29:    return (\"un\");",
          "30:   case PPC_BC_NU:",
          "31:    return (\"nu\");",
          "32:   case PPC_BC_SO:",
          "33:    return (\"so\");",
          "34:   case PPC_BC_NS:",
          "35:    return (\"ns\");",
          "36:  }",
          "41:  cs_ppc *ppc;",
          "42:  int i;",
          "45:  if (ins->detail == NULL)",
          "46:   return;",
          "48:  ppc = &(ins->detail->ppc);",
          "49:  if (ppc->op_count)",
          "50:   printf(\"\\top_count: %u\\n\", ppc->op_count);",
          "52:  for (i = 0; i < ppc->op_count; i++) {",
          "53:   cs_ppc_op *op = &(ppc->operands[i]);",
          "54:   switch((int)op->type) {",
          "55:    default:",
          "56:     break;",
          "57:    case PPC_OP_REG:",
          "58:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "59:     break;",
          "60:    case PPC_OP_IMM:",
          "61:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "62:     break;",
          "63:    case PPC_OP_MEM:",
          "64:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "65:     if (op->mem.base != PPC_REG_INVALID)",
          "66:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "67:        i, cs_reg_name(handle, op->mem.base));",
          "68:     if (op->mem.disp != 0)",
          "69:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "71:     break;",
          "72:    case PPC_OP_CRX:",
          "73:     printf(\"\\t\\toperands[%u].type: CRX\\n\", i);",
          "74:     printf(\"\\t\\t\\toperands[%u].crx.scale: %d\\n\", i, op->crx.scale);",
          "75:     printf(\"\\t\\t\\toperands[%u].crx.reg: %s\\n\", i, cs_reg_name(handle, op->crx.reg));",
          "76:     printf(\"\\t\\t\\toperands[%u].crx.cond: %s\\n\", i, get_bc_name(op->crx.cond));",
          "77:     break;",
          "78:   }",
          "79:  }",
          "81:  if (ppc->bc != 0)",
          "82:   printf(\"\\tBranch code: %u\\n\", ppc->bc);",
          "84:  if (ppc->bh != 0)",
          "85:   printf(\"\\tBranch hint: %u\\n\", ppc->bh);",
          "87:  if (ppc->update_cr0)",
          "88:   printf(\"\\tUpdate-CR0: True\\n\");",
          "90:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_sparc.c||cstool/cstool_sparc.c": [
          "File: cstool/cstool_sparc.c -> cstool/cstool_sparc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <capstone.h>",
          "20: void print_insn_detail_sparc(csh handle, cs_insn *ins)",
          "21: {",
          "66: }",
          "",
          "[Removed Lines]",
          "8: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "9: {",
          "10:     unsigned char *c;",
          "12:     printf(\"%s\", comment);",
          "13:     for (c = str; c < str + len; c++) {",
          "14:         printf(\"0x%02x \", *c & 0xff);",
          "15:     }",
          "17:     printf(\"\\n\");",
          "18: }",
          "22:     cs_sparc *sparc;",
          "23:     int i;",
          "26:     if (ins->detail == NULL)",
          "27:         return;",
          "29:     sparc = &(ins->detail->sparc);",
          "30:     if (sparc->op_count)",
          "31:         printf(\"\\top_count: %u\\n\", sparc->op_count);",
          "33:     for (i = 0; i < sparc->op_count; i++) {",
          "34:         cs_sparc_op *op = &(sparc->operands[i]);",
          "35:         switch((int)op->type) {",
          "36:             default:",
          "37:                 break;",
          "38:             case SPARC_OP_REG:",
          "39:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "40:                 break;",
          "41:             case SPARC_OP_IMM:",
          "42:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "43:                 break;",
          "44:             case SPARC_OP_MEM:",
          "45:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "46:                 if (op->mem.base != X86_REG_INVALID)",
          "47:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "48:                            i, cs_reg_name(handle, op->mem.base));",
          "49:                 if (op->mem.index != X86_REG_INVALID)",
          "50:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "51:                            i, cs_reg_name(handle, op->mem.index));",
          "52:                 if (op->mem.disp != 0)",
          "53:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "55:                 break;",
          "56:         }",
          "57:     }",
          "59:     if (sparc->cc != 0)",
          "60:         printf(\"\\tCode condition: %u\\n\", sparc->cc);",
          "62:     if (sparc->hint != 0)",
          "63:         printf(\"\\tHint code: %u\\n\", sparc->hint);",
          "65:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "8: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "12:  cs_sparc *sparc;",
          "13:  int i;",
          "16:  if (ins->detail == NULL)",
          "17:   return;",
          "19:  sparc = &(ins->detail->sparc);",
          "20:  if (sparc->op_count)",
          "21:   printf(\"\\top_count: %u\\n\", sparc->op_count);",
          "23:  for (i = 0; i < sparc->op_count; i++) {",
          "24:   cs_sparc_op *op = &(sparc->operands[i]);",
          "25:   switch((int)op->type) {",
          "26:    default:",
          "27:     break;",
          "28:    case SPARC_OP_REG:",
          "29:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "30:     break;",
          "31:    case SPARC_OP_IMM:",
          "32:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "33:     break;",
          "34:    case SPARC_OP_MEM:",
          "35:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "36:     if (op->mem.base != X86_REG_INVALID)",
          "37:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "38:        i, cs_reg_name(handle, op->mem.base));",
          "39:     if (op->mem.index != X86_REG_INVALID)",
          "40:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "41:        i, cs_reg_name(handle, op->mem.index));",
          "42:     if (op->mem.disp != 0)",
          "43:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "45:     break;",
          "46:   }",
          "47:  }",
          "49:  if (sparc->cc != 0)",
          "50:   printf(\"\\tCode condition: %u\\n\", sparc->cc);",
          "52:  if (sparc->hint != 0)",
          "53:   printf(\"\\tHint code: %u\\n\", sparc->hint);",
          "55:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_systemz.c||cstool/cstool_systemz.c": [
          "File: cstool/cstool_systemz.c -> cstool/cstool_systemz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <capstone.h>",
          "20: void print_insn_detail_sysz(csh handle, cs_insn *ins)",
          "21: {",
          "68: }",
          "",
          "[Removed Lines]",
          "8: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "9: {",
          "10:     unsigned char *c;",
          "12:     printf(\"%s\", comment);",
          "13:     for (c = str; c < str + len; c++) {",
          "14:         printf(\"0x%02x \", *c & 0xff);",
          "15:     }",
          "17:     printf(\"\\n\");",
          "18: }",
          "22:     cs_sysz *sysz;",
          "23:     int i;",
          "26:     if (ins->detail == NULL)",
          "27:         return;",
          "29:     sysz = &(ins->detail->sysz);",
          "30:     if (sysz->op_count)",
          "31:         printf(\"\\top_count: %u\\n\", sysz->op_count);",
          "33:     for (i = 0; i < sysz->op_count; i++) {",
          "34:         cs_sysz_op *op = &(sysz->operands[i]);",
          "35:         switch((int)op->type) {",
          "36:             default:",
          "37:                 break;",
          "38:             case SYSZ_OP_REG:",
          "39:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "40:                 break;",
          "41:             case SYSZ_OP_ACREG:",
          "42:                 printf(\"\\t\\toperands[%u].type: ACREG = %u\\n\", i, op->reg);",
          "43:                 break;",
          "44:             case SYSZ_OP_IMM:",
          "45:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "46:                 break;",
          "47:             case SYSZ_OP_MEM:",
          "48:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "49:                 if (op->mem.base != SYSZ_REG_INVALID)",
          "50:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "51:                            i, cs_reg_name(handle, op->mem.base));",
          "52:                 if (op->mem.index != SYSZ_REG_INVALID)",
          "53:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "54:                            i, cs_reg_name(handle, op->mem.index));",
          "55:                 if (op->mem.length != 0)",
          "56:                     printf(\"\\t\\t\\toperands[%u].mem.length: 0x%\" PRIx64 \"\\n\", i, op->mem.length);",
          "57:                 if (op->mem.disp != 0)",
          "58:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "60:                 break;",
          "61:         }",
          "62:     }",
          "64:     if (sysz->cc != 0)",
          "65:         printf(\"\\tCode condition: %u\\n\", sysz->cc);",
          "67:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "8: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "12:  cs_sysz *sysz;",
          "13:  int i;",
          "16:  if (ins->detail == NULL)",
          "17:   return;",
          "19:  sysz = &(ins->detail->sysz);",
          "20:  if (sysz->op_count)",
          "21:   printf(\"\\top_count: %u\\n\", sysz->op_count);",
          "23:  for (i = 0; i < sysz->op_count; i++) {",
          "24:   cs_sysz_op *op = &(sysz->operands[i]);",
          "25:   switch((int)op->type) {",
          "26:    default:",
          "27:     break;",
          "28:    case SYSZ_OP_REG:",
          "29:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "30:     break;",
          "31:    case SYSZ_OP_ACREG:",
          "32:     printf(\"\\t\\toperands[%u].type: ACREG = %u\\n\", i, op->reg);",
          "33:     break;",
          "34:    case SYSZ_OP_IMM:",
          "35:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "36:     break;",
          "37:    case SYSZ_OP_MEM:",
          "38:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "39:     if (op->mem.base != SYSZ_REG_INVALID)",
          "40:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "41:        i, cs_reg_name(handle, op->mem.base));",
          "42:     if (op->mem.index != SYSZ_REG_INVALID)",
          "43:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "44:        i, cs_reg_name(handle, op->mem.index));",
          "45:     if (op->mem.length != 0)",
          "46:      printf(\"\\t\\t\\toperands[%u].mem.length: 0x%\" PRIx64 \"\\n\", i, op->mem.length);",
          "47:     if (op->mem.disp != 0)",
          "48:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "50:     break;",
          "51:   }",
          "52:  }",
          "54:  if (sysz->cc != 0)",
          "55:   printf(\"\\tCode condition: %u\\n\", sysz->cc);",
          "57:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_x86.c||cstool/cstool_x86.c": [
          "File: cstool/cstool_x86.c -> cstool/cstool_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <capstone.h>",
          "21: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins)",
          "22: {",
          "123: }",
          "",
          "[Removed Lines]",
          "9: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "10: {",
          "11:     unsigned char *c;",
          "13:     printf(\"%s\", comment);",
          "14:     for (c = str; c < str + len; c++) {",
          "15:         printf(\"0x%02x \", *c & 0xff);",
          "16:     }",
          "18:     printf(\"\\n\");",
          "19: }",
          "23:     int count, i;",
          "24:     cs_x86 *x86;",
          "27:     if (ins->detail == NULL)",
          "28:         return;",
          "30:     x86 = &(ins->detail->x86);",
          "32:     print_string_hex(\"\\tPrefix:\", x86->prefix, 4);",
          "34:     print_string_hex(\"\\tOpcode:\", x86->opcode, 4);",
          "36:     printf(\"\\trex: 0x%x\\n\", x86->rex);",
          "38:     printf(\"\\taddr_size: %u\\n\", x86->addr_size);",
          "39:     printf(\"\\tmodrm: 0x%x\\n\", x86->modrm);",
          "40:     printf(\"\\tdisp: 0x%x\\n\", x86->disp);",
          "43:     if ((mode & CS_MODE_16) == 0) {",
          "44:         printf(\"\\tsib: 0x%x\\n\", x86->sib);",
          "45:         if (x86->sib_base != X86_REG_INVALID)",
          "46:             printf(\"\\t\\tsib_base: %s\\n\", cs_reg_name(ud, x86->sib_base));",
          "47:         if (x86->sib_index != X86_REG_INVALID)",
          "48:             printf(\"\\t\\tsib_index: %s\\n\", cs_reg_name(ud, x86->sib_index));",
          "49:         if (x86->sib_scale != 0)",
          "50:             printf(\"\\t\\tsib_scale: %d\\n\", x86->sib_scale);",
          "51:     }",
          "54:     if (x86->sse_cc != X86_SSE_CC_INVALID) {",
          "55:         printf(\"\\tsse_cc: %u\\n\", x86->sse_cc);",
          "56:     }",
          "59:     if (x86->avx_cc != X86_AVX_CC_INVALID) {",
          "60:         printf(\"\\tavx_cc: %u\\n\", x86->avx_cc);",
          "61:     }",
          "64:     if (x86->avx_sae) {",
          "65:         printf(\"\\tavx_sae: %u\\n\", x86->avx_sae);",
          "66:     }",
          "69:     if (x86->avx_rm != X86_AVX_RM_INVALID) {",
          "70:         printf(\"\\tavx_rm: %u\\n\", x86->avx_rm);",
          "71:     }",
          "73:     count = cs_op_count(ud, ins, X86_OP_IMM);",
          "74:     if (count) {",
          "75:         printf(\"\\timm_count: %u\\n\", count);",
          "76:         for (i = 1; i < count + 1; i++) {",
          "77:             int index = cs_op_index(ud, ins, X86_OP_IMM, i);",
          "78:             printf(\"\\t\\timms[%u]: 0x%\" PRIx64 \"\\n\", i, x86->operands[index].imm);",
          "79:         }",
          "80:     }",
          "82:     if (x86->op_count)",
          "83:         printf(\"\\top_count: %u\\n\", x86->op_count);",
          "84:     for (i = 0; i < x86->op_count; i++) {",
          "85:         cs_x86_op *op = &(x86->operands[i]);",
          "87:         switch((int)op->type) {",
          "88:             case X86_OP_REG:",
          "89:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(ud, op->reg));",
          "90:                 break;",
          "91:             case X86_OP_IMM:",
          "92:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "93:                 break;",
          "94:             case X86_OP_MEM:",
          "95:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "96:                 if (op->mem.segment != X86_REG_INVALID)",
          "97:                     printf(\"\\t\\t\\toperands[%u].mem.segment: REG = %s\\n\", i, cs_reg_name(ud, op->mem.segment));",
          "98:                 if (op->mem.base != X86_REG_INVALID)",
          "99:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(ud, op->mem.base));",
          "100:                 if (op->mem.index != X86_REG_INVALID)",
          "101:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(ud, op->mem.index));",
          "102:                 if (op->mem.scale != 1)",
          "103:                     printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "104:                 if (op->mem.disp != 0)",
          "105:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "106:                 break;",
          "107:             default:",
          "108:                 break;",
          "109:         }",
          "112:         if (op->avx_bcast != X86_AVX_BCAST_INVALID)",
          "113:             printf(\"\\t\\toperands[%u].avx_bcast: %u\\n\", i, op->avx_bcast);",
          "116:         if (op->avx_zero_opmask != false)",
          "117:             printf(\"\\t\\toperands[%u].avx_zero_opmask: TRUE\\n\", i);",
          "119:         printf(\"\\t\\toperands[%u].size: %u\\n\", i, op->size);",
          "120:     }",
          "122:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "13:  int count, i;",
          "14:  cs_x86 *x86;",
          "17:  if (ins->detail == NULL)",
          "18:   return;",
          "20:  x86 = &(ins->detail->x86);",
          "22:  print_string_hex(\"\\tPrefix:\", x86->prefix, 4);",
          "24:  print_string_hex(\"\\tOpcode:\", x86->opcode, 4);",
          "26:  printf(\"\\trex: 0x%x\\n\", x86->rex);",
          "28:  printf(\"\\taddr_size: %u\\n\", x86->addr_size);",
          "29:  printf(\"\\tmodrm: 0x%x\\n\", x86->modrm);",
          "30:  printf(\"\\tdisp: 0x%x\\n\", x86->disp);",
          "33:  if ((mode & CS_MODE_16) == 0) {",
          "34:   printf(\"\\tsib: 0x%x\\n\", x86->sib);",
          "35:   if (x86->sib_base != X86_REG_INVALID)",
          "36:    printf(\"\\t\\tsib_base: %s\\n\", cs_reg_name(ud, x86->sib_base));",
          "37:   if (x86->sib_index != X86_REG_INVALID)",
          "38:    printf(\"\\t\\tsib_index: %s\\n\", cs_reg_name(ud, x86->sib_index));",
          "39:   if (x86->sib_scale != 0)",
          "40:    printf(\"\\t\\tsib_scale: %d\\n\", x86->sib_scale);",
          "41:  }",
          "44:  if (x86->sse_cc != X86_SSE_CC_INVALID) {",
          "45:   printf(\"\\tsse_cc: %u\\n\", x86->sse_cc);",
          "46:  }",
          "49:  if (x86->avx_cc != X86_AVX_CC_INVALID) {",
          "50:   printf(\"\\tavx_cc: %u\\n\", x86->avx_cc);",
          "51:  }",
          "54:  if (x86->avx_sae) {",
          "55:   printf(\"\\tavx_sae: %u\\n\", x86->avx_sae);",
          "56:  }",
          "59:  if (x86->avx_rm != X86_AVX_RM_INVALID) {",
          "60:   printf(\"\\tavx_rm: %u\\n\", x86->avx_rm);",
          "61:  }",
          "63:  count = cs_op_count(ud, ins, X86_OP_IMM);",
          "64:  if (count) {",
          "65:   printf(\"\\timm_count: %u\\n\", count);",
          "66:   for (i = 1; i < count + 1; i++) {",
          "67:    int index = cs_op_index(ud, ins, X86_OP_IMM, i);",
          "68:    printf(\"\\t\\timms[%u]: 0x%\" PRIx64 \"\\n\", i, x86->operands[index].imm);",
          "69:   }",
          "70:  }",
          "72:  if (x86->op_count)",
          "73:   printf(\"\\top_count: %u\\n\", x86->op_count);",
          "74:  for (i = 0; i < x86->op_count; i++) {",
          "75:   cs_x86_op *op = &(x86->operands[i]);",
          "77:   switch((int)op->type) {",
          "78:    case X86_OP_REG:",
          "79:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(ud, op->reg));",
          "80:     break;",
          "81:    case X86_OP_IMM:",
          "82:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "83:     break;",
          "84:    case X86_OP_MEM:",
          "85:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "86:     if (op->mem.segment != X86_REG_INVALID)",
          "87:      printf(\"\\t\\t\\toperands[%u].mem.segment: REG = %s\\n\", i, cs_reg_name(ud, op->mem.segment));",
          "88:     if (op->mem.base != X86_REG_INVALID)",
          "89:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(ud, op->mem.base));",
          "90:     if (op->mem.index != X86_REG_INVALID)",
          "91:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(ud, op->mem.index));",
          "92:     if (op->mem.scale != 1)",
          "93:      printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "94:     if (op->mem.disp != 0)",
          "95:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "96:     break;",
          "97:    default:",
          "98:     break;",
          "99:   }",
          "102:   if (op->avx_bcast != X86_AVX_BCAST_INVALID)",
          "103:    printf(\"\\t\\toperands[%u].avx_bcast: %u\\n\", i, op->avx_bcast);",
          "106:   if (op->avx_zero_opmask != false)",
          "107:    printf(\"\\t\\toperands[%u].avx_zero_opmask: TRUE\\n\", i);",
          "109:   printf(\"\\t\\toperands[%u].size: %u\\n\", i, op->size);",
          "110:  }",
          "112:  printf(\"\\n\");",
          "",
          "---------------"
        ],
        "cstool/cstool_xcore.c||cstool/cstool_xcore.c": [
          "File: cstool/cstool_xcore.c -> cstool/cstool_xcore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <capstone.h>",
          "19: void print_insn_detail_xcore(csh handle, cs_insn *ins)",
          "20: {",
          "62: }",
          "",
          "[Removed Lines]",
          "7: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "8: {",
          "9:     unsigned char *c;",
          "11:     printf(\"%s\", comment);",
          "12:     for (c = str; c < str + len; c++) {",
          "13:         printf(\"0x%02x \", *c & 0xff);",
          "14:     }",
          "16:     printf(\"\\n\");",
          "17: }",
          "21:     cs_xcore *xcore;",
          "22:     int i;",
          "25:     if (ins->detail == NULL)",
          "26:         return;",
          "28:     xcore = &(ins->detail->xcore);",
          "29:     if (xcore->op_count)",
          "30:         printf(\"\\top_count: %u\\n\", xcore->op_count);",
          "32:     for (i = 0; i < xcore->op_count; i++) {",
          "33:         cs_xcore_op *op = &(xcore->operands[i]);",
          "34:         switch((int)op->type) {",
          "35:             default:",
          "36:                 break;",
          "37:             case XCORE_OP_REG:",
          "38:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "39:                 break;",
          "40:             case XCORE_OP_IMM:",
          "41:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "42:                 break;",
          "43:             case XCORE_OP_MEM:",
          "44:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "45:                 if (op->mem.base != XCORE_REG_INVALID)",
          "46:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "47:                            i, cs_reg_name(handle, op->mem.base));",
          "48:                 if (op->mem.index != XCORE_REG_INVALID)",
          "49:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "50:                            i, cs_reg_name(handle, op->mem.index));",
          "51:                 if (op->mem.disp != 0)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "53:                 if (op->mem.direct != 1)",
          "54:                     printf(\"\\t\\t\\toperands[%u].mem.direct: -1\\n\", i);",
          "57:                 break;",
          "58:         }",
          "59:     }",
          "61:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "7: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "11:  cs_xcore *xcore;",
          "12:  int i;",
          "15:  if (ins->detail == NULL)",
          "16:   return;",
          "18:  xcore = &(ins->detail->xcore);",
          "19:  if (xcore->op_count)",
          "20:   printf(\"\\top_count: %u\\n\", xcore->op_count);",
          "22:  for (i = 0; i < xcore->op_count; i++) {",
          "23:   cs_xcore_op *op = &(xcore->operands[i]);",
          "24:   switch((int)op->type) {",
          "25:    default:",
          "26:     break;",
          "27:    case XCORE_OP_REG:",
          "28:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "29:     break;",
          "30:    case XCORE_OP_IMM:",
          "31:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "32:     break;",
          "33:    case XCORE_OP_MEM:",
          "34:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "35:     if (op->mem.base != XCORE_REG_INVALID)",
          "36:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "37:        i, cs_reg_name(handle, op->mem.base));",
          "38:     if (op->mem.index != XCORE_REG_INVALID)",
          "39:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "40:        i, cs_reg_name(handle, op->mem.index));",
          "41:     if (op->mem.disp != 0)",
          "42:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "43:     if (op->mem.direct != 1)",
          "44:      printf(\"\\t\\t\\toperands[%u].mem.direct: -1\\n\", i);",
          "47:     break;",
          "48:   }",
          "49:  }",
          "51:  printf(\"\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}