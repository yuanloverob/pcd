{
  "cve_id": "CVE-2020-1898",
  "cve_desc": "The fb_unserialize function did not impose a depth limit for nested deserialization. That meant a maliciously constructed string could cause deserialization to recurse, leading to stack exhaustion. This issue affected HHVM prior to v4.32.3, between versions 4.33.0 and 4.56.0, 4.57.0, 4.58.0, 4.58.1, 4.59.0, 4.60.0, 4.61.0, 4.62.0.",
  "repo": "facebook/hhvm",
  "patch_hash": "1746dfb11fc0048366f34669e74318b8278a684c",
  "patch_info": {
    "commit_hash": "1746dfb11fc0048366f34669e74318b8278a684c",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/1746dfb11fc0048366f34669e74318b8278a684c",
    "files": [
      "hphp/hack/hhi/builtins_fb.hhi",
      "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
      "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
      "hphp/runtime/ext/fb/VariantController.h",
      "hphp/runtime/ext/fb/ext_fb.cpp",
      "hphp/test/slow/ext_fb/unserialize-bad-set.php",
      "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
      "hphp/test/slow/ext_fb/unserialize_max_depth.php",
      "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
    ],
    "message": "CVE-2020-1898\n\nDon't allow for unlimited nesting in FBUnserialize or fb_compact_unserialize",
    "before_after_code_files": [
      "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
      "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
      "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
      "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
      "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp",
      "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_fb/unserialize-bad-set.php",
      "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
      "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_fb/unserialize_max_depth.php",
      "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
    ]
  },
  "patch_diff": {
    "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi": [
      "File: hphp/hack/hhi/builtins_fb.hhi -> hphp/hack/hhi/builtins_fb.hhi",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: const FB_UNSERIALIZE_UNEXPECTED_END = 0;",
      "6: const FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE = 0;",
      "7: const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;",
      "9: const FB_SERIALIZE_HACK_ARRAYS = 0;",
      "10: const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: const FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED = 0;",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h": [
      "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h -> hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "406:   folly::StringPiece serialized) {",
      "408:   FBUnserializer<V> unserializer(serialized);",
      "410: }",
      "412: template <class V>",
      "",
      "[Removed Lines]",
      "409:   return unserializer.unserializeThing();",
      "",
      "[Added Lines]",
      "409:   return unserializer.unserializeThing(0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "524: }",
      "526: template <class V>",
      "528:   p_ += CODE_SIZE;",
      "530:   typename V::MapType ret = V::createMap();",
      "",
      "[Removed Lines]",
      "527: inline typename V::MapType FBUnserializer<V>::unserializeMap() {",
      "",
      "[Added Lines]",
      "527: inline typename V::MapType FBUnserializer<V>::unserializeMap(size_t depth) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "536:       case FB_SERIALIZE_STRING:",
      "537:         {",
      "538:           auto key = unserializeString();",
      "540:           V::mapSet(ret, std::move(key), std::move(value));",
      "541:         }",
      "542:         break;",
      "543:       default:",
      "544:         {",
      "545:           auto key = unserializeInt64();",
      "547:           V::mapSet(ret, std::move(key), std::move(value));",
      "548:         }",
      "549:     }",
      "",
      "[Removed Lines]",
      "539:           auto value = unserializeThing();",
      "546:           auto value = unserializeThing();",
      "",
      "[Added Lines]",
      "539:           auto value = unserializeThing(depth + 1);",
      "546:           auto value = unserializeThing(depth + 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "556: }",
      "558: template <class V>",
      "560:   p_ += CODE_SIZE;",
      "562:   typename V::VectorType ret = V::createVector();",
      "564:   size_t code = nextCode();",
      "565:   while (code != FB_SERIALIZE_STOP) {",
      "567:     code = nextCode();",
      "568:   }",
      "569:   p_ += CODE_SIZE;",
      "",
      "[Removed Lines]",
      "559: inline typename V::VectorType FBUnserializer<V>::unserializeVector() {",
      "566:     V::vectorAppend(ret, unserializeThing());",
      "",
      "[Added Lines]",
      "559: inline typename V::VectorType",
      "560: FBUnserializer<V>::unserializeVector(size_t depth) {",
      "567:     V::vectorAppend(ret, unserializeThing(depth + 1));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "571: }",
      "573: template <class V>",
      "575:   p_ += CODE_SIZE;",
      "",
      "[Removed Lines]",
      "574: inline typename V::VectorType FBUnserializer<V>::unserializeList() {",
      "",
      "[Added Lines]",
      "575: inline typename V::VectorType FBUnserializer<V>::unserializeList(size_t depth) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "583:   size_t code = nextCode();",
      "584:   while (code != FB_SERIALIZE_STOP) {",
      "586:     code = nextCode();",
      "587:   }",
      "588:   p_ += CODE_SIZE;",
      "",
      "[Removed Lines]",
      "585:     V::vectorAppend(ret, unserializeThing());",
      "",
      "[Added Lines]",
      "586:     V::vectorAppend(ret, unserializeThing(depth + 1));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "590: }",
      "592: template <class V>",
      "594:   p_ += CODE_SIZE;",
      "",
      "[Removed Lines]",
      "593: inline typename V::SetType FBUnserializer<V>::unserializeSet() {",
      "",
      "[Added Lines]",
      "594: inline typename V::SetType FBUnserializer<V>::unserializeSet(size_t depth) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "602:   size_t code = nextCode();",
      "603:   while (code != FB_SERIALIZE_STOP) {",
      "605:     code = nextCode();",
      "606:   }",
      "607:   p_ += CODE_SIZE;",
      "",
      "[Removed Lines]",
      "604:     V::setAppend(ret, unserializeThing());",
      "",
      "[Added Lines]",
      "605:     V::setAppend(ret, unserializeThing(depth + 1));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "664: }",
      "666: template <class V>",
      "668:   size_t code = nextCode();",
      "670:   switch (code) {",
      "",
      "[Removed Lines]",
      "667: inline typename V::VariantType FBUnserializer<V>::unserializeThing() {",
      "",
      "[Added Lines]",
      "668: inline typename V::VariantType",
      "669: FBUnserializer<V>::unserializeThing(size_t depth) {",
      "670:   if (UNLIKELY(depth > 1024)) {",
      "671:     throw UnserializeError(\"depth > 1024\");",
      "672:   }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "677:     case FB_SERIALIZE_STRING:",
      "678:       return V::fromString(unserializeString());",
      "679:     case FB_SERIALIZE_STRUCT:",
      "681:     case FB_SERIALIZE_NULL:",
      "682:       ++p_;",
      "683:       return V::createNull();",
      "",
      "[Removed Lines]",
      "680:       return V::fromMap(unserializeMap());",
      "",
      "[Added Lines]",
      "686:       return V::fromMap(unserializeMap(depth));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "686:     case FB_SERIALIZE_BOOLEAN:",
      "687:       return V::fromBool(unserializeBoolean());",
      "688:     case FB_SERIALIZE_VECTOR:",
      "690:     case FB_SERIALIZE_LIST:",
      "692:     case FB_SERIALIZE_SET:",
      "694:     default:",
      "695:       throw UnserializeError(\"Invalid code: \" + folly::to<std::string>(code)",
      "696:                              + \" at location \" + folly::to<std::string>(p_));",
      "",
      "[Removed Lines]",
      "689:       return V::fromVector(unserializeVector());",
      "691:       return V::fromVector(unserializeList());",
      "693:       return V::fromSet(unserializeSet());",
      "",
      "[Added Lines]",
      "695:       return V::fromVector(unserializeVector(depth));",
      "697:       return V::fromVector(unserializeList(depth));",
      "699:       return V::fromSet(unserializeSet(depth));",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h": [
      "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize.h -> hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "165:   double unserializeDouble();",
      "166:   typename V::StringType unserializeString();",
      "167:   folly::StringPiece unserializeStringPiece();",
      "174:   folly::StringPiece getSerializedMap();",
      "177:   void advance(size_t delta);",
      "178:   Code nextCode() const;",
      "",
      "[Removed Lines]",
      "168:   typename V::MapType unserializeMap();",
      "169:   typename V::VectorType unserializeVector();",
      "170:   typename V::VectorType unserializeList();",
      "171:   typename V::SetType unserializeSet();",
      "175:   typename V::VariantType unserializeThing();",
      "",
      "[Added Lines]",
      "168:   typename V::MapType unserializeMap(size_t depth);",
      "169:   typename V::VectorType unserializeVector(size_t depth);",
      "170:   typename V::VectorType unserializeList(size_t depth);",
      "171:   typename V::SetType unserializeSet(size_t depth);",
      "175:   typename V::VariantType unserializeThing(size_t depth);",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h": [
      "File: hphp/runtime/ext/fb/VariantController.h -> hphp/runtime/ext/fb/VariantController.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "283:     return set.size();",
      "284:   }",
      "285:   static void setAppend(SetType& set, const VariantType& v) {",
      "289:       throw HPHP::serialize::UnserializeError(",
      "292:     }",
      "293:     set.append(v);",
      "294:   }",
      "",
      "[Removed Lines]",
      "286:     auto value_type = type(v);",
      "287:     if (value_type != HPHP::serialize::Type::INT64 &&",
      "288:         value_type != HPHP::serialize::Type::STRING) {",
      "290:           \"Unsupported keyset element of type \" +",
      "291:           folly::to<std::string>(value_type));",
      "",
      "[Added Lines]",
      "286:     if (!v.isInteger() && !v.isString()) {",
      "288:         \"Keysets can only contain integers or strings\"",
      "289:       );",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp": [
      "File: hphp/runtime/ext/fb/ext_fb.cpp -> hphp/runtime/ext/fb/ext_fb.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "66: #define FB_UNSERIALIZE_UNEXPECTED_END            0x0002",
      "67: #define FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE  0x0003",
      "68: #define FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE 0x0004",
      "70: #ifdef FACEBOOK",
      "71: # define HHVM_FACEBOOK true",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: #define FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED        0x0005",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "705: const StaticString s_empty(\"\");",
      "707: int fb_compact_unserialize_from_buffer(",
      "710:   CHECK_ENOUGH(1, p, n);",
      "711:   int code = (unsigned char)buf[p];",
      "",
      "[Removed Lines]",
      "708:   Variant& out, const char* buf, int n, int& p) {",
      "",
      "[Added Lines]",
      "709:     Variant& out, const char* buf, int n, int& p, size_t depth) {",
      "710:   if (UNLIKELY(depth > 1024)) {",
      "711:     return FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED;",
      "712:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "774:       Array arr = Array::CreateVArray();",
      "775:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
      "776:         Variant value;",
      "778:         if (err) {",
      "779:           return err;",
      "780:         }",
      "",
      "[Removed Lines]",
      "777:         int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
      "",
      "[Added Lines]",
      "781:         int err =",
      "782:           fb_compact_unserialize_from_buffer(value, buf, n, p, depth + 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "799:           ++p;",
      "800:         } else {",
      "801:           Variant value;",
      "803:           if (err) {",
      "804:             return err;",
      "805:           }",
      "",
      "[Removed Lines]",
      "802:           int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
      "",
      "[Added Lines]",
      "807:           int err =",
      "808:             fb_compact_unserialize_from_buffer(value, buf, n, p, depth + 1);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "820:       Array arr = Array::CreateDArray();",
      "821:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
      "822:         Variant key;",
      "824:         if (err) {",
      "825:           return err;",
      "826:         }",
      "827:         Variant value;",
      "829:         if (err) {",
      "830:           return err;",
      "831:         }",
      "",
      "[Removed Lines]",
      "823:         int err = fb_compact_unserialize_from_buffer(key, buf, n, p);",
      "828:         err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
      "",
      "[Added Lines]",
      "829:         int err = fb_compact_unserialize_from_buffer(key, buf, n, p, depth + 1);",
      "834:         err = fb_compact_unserialize_from_buffer(value, buf, n, p, depth + 1);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "862:   Variant ret;",
      "863:   int p = 0;",
      "865:   if (err) {",
      "866:     success = false;",
      "867:     errcode = err;",
      "",
      "[Removed Lines]",
      "864:   int err = fb_compact_unserialize_from_buffer(ret, str, len, p);",
      "",
      "[Added Lines]",
      "870:   int err = fb_compact_unserialize_from_buffer(ret, str, len, p, 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1313:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_END);",
      "1314:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE);",
      "1315:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE);",
      "1317:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);",
      "1318:     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1322:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED);",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_fb/unserialize-bad-set.php": [
      "File: hphp/test/slow/ext_fb/unserialize-bad-set.php -> hphp/test/slow/ext_fb/unserialize-bad-set.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?hh",
      "4: <<__EntryPoint>>",
      "5: function main() {",
      "6:   $ret = null;",
      "7:   var_dump(fb_unserialize(\"\\x14\\x02\\x01\\x14\\x02\\x01\\x02\\x01\\x01\\x01\", inout $ret));",
      "8:   var_dump($ret);",
      "9: }",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_fb/unserialize-bad-set.php.expect": [
      "File: hphp/test/slow/ext_fb/unserialize-bad-set.php.expect -> hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: bool(false)",
      "2: bool(false)",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_fb/unserialize_max_depth.php": [
      "File: hphp/test/slow/ext_fb/unserialize_max_depth.php -> hphp/test/slow/ext_fb/unserialize_max_depth.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?hh",
      "4: function make_fb_serialize_struct($size) {",
      "5:   return str_repeat(\"\\x0a\\x02\\x01\", $size) . \"\\x02\\x01\" . str_repeat(\"\\x01\", $size);",
      "6: }",
      "8: function make_fb_serialize_vector($size) {",
      "9:   return str_repeat(\"\\x12\", $size) . str_repeat(\"\\x01\", $size);",
      "10: }",
      "12: function make_fb_serialize_list($size) {",
      "13:   return str_repeat(\"\\x13\\x02\\x01\", $size) . \"\\x02\\x01\" . str_repeat(\"\\x01\", $size);",
      "14: }",
      "16: function make_fb_cs_list_map($size) {",
      "17:   return str_repeat(\"\\xfa\\xfd\", $size) . str_repeat(\"\\xfc\", $size);",
      "18: }",
      "20: function make_fb_cs_map($size) {",
      "21:   return str_repeat(\"\\xfb\\x01\", $size) . \"\\x01\" . str_repeat(\"\\xfc\", $size);",
      "22: }",
      "24: function make_fb_cs_vector($size) {",
      "25:   return str_repeat(\"\\xfe\", $size) . str_repeat(\"\\xfc\", $size);",
      "26: }",
      "28: function test($serialized) {",
      "29:   $ret = null;",
      "30:   var_dump(",
      "31:     fb_unserialize(",
      "32:       $serialized,",
      "33:       inout $ret,",
      "34:       FB_SERIALIZE_HACK_ARRAYS",
      "35:     )",
      "36:   );",
      "37:   var_dump($ret);",
      "38: }",
      "40: function tests($size) {",
      "41:   test(make_fb_serialize_struct($size));",
      "42:   test(make_fb_serialize_vector($size));",
      "43:   test(make_fb_serialize_list($size));",
      "44:   test(make_fb_cs_list_map($size));",
      "45:   test(make_fb_cs_map($size));",
      "46:   test(make_fb_cs_vector($size));",
      "47: }",
      "49: <<__EntryPoint>>",
      "50: function main() {",
      "51:   tests(10);",
      "52:   tests(1026);",
      "53: }",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_fb/unserialize_max_depth.php.expect": [
      "File: hphp/test/slow/ext_fb/unserialize_max_depth.php.expect -> hphp/test/slow/ext_fb/unserialize_max_depth.php.expect",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: dict(1) {",
      "2:   [1]=>",
      "3:   dict(1) {",
      "4:     [1]=>",
      "5:     dict(1) {",
      "6:       [1]=>",
      "7:       dict(1) {",
      "8:         [1]=>",
      "9:         dict(1) {",
      "10:           [1]=>",
      "11:           dict(1) {",
      "12:             [1]=>",
      "13:             dict(1) {",
      "14:               [1]=>",
      "15:               dict(1) {",
      "16:                 [1]=>",
      "17:                 dict(1) {",
      "18:                   [1]=>",
      "19:                   dict(1) {",
      "20:                     [1]=>",
      "21:                     int(1)",
      "22:                   }",
      "23:                 }",
      "24:               }",
      "25:             }",
      "26:           }",
      "27:         }",
      "28:       }",
      "29:     }",
      "30:   }",
      "31: }",
      "32: bool(true)",
      "33: vec(1) {",
      "34:   vec(1) {",
      "35:     vec(1) {",
      "36:       vec(1) {",
      "37:         vec(1) {",
      "38:           vec(1) {",
      "39:             vec(1) {",
      "40:               vec(1) {",
      "41:                 vec(1) {",
      "42:                   vec(0) {",
      "43:                   }",
      "44:                 }",
      "45:               }",
      "46:             }",
      "47:           }",
      "48:         }",
      "49:       }",
      "50:     }",
      "51:   }",
      "52: }",
      "53: bool(true)",
      "54: vec(1) {",
      "55:   vec(1) {",
      "56:     vec(1) {",
      "57:       vec(1) {",
      "58:         vec(1) {",
      "59:           vec(1) {",
      "60:             vec(1) {",
      "61:               vec(1) {",
      "62:                 vec(1) {",
      "63:                   vec(1) {",
      "64:                     int(1)",
      "65:                   }",
      "66:                 }",
      "67:               }",
      "68:             }",
      "69:           }",
      "70:         }",
      "71:       }",
      "72:     }",
      "73:   }",
      "74: }",
      "75: bool(true)",
      "76: array(1) {",
      "77:   [1]=>",
      "78:   array(1) {",
      "79:     [1]=>",
      "80:     array(1) {",
      "81:       [1]=>",
      "82:       array(1) {",
      "83:         [1]=>",
      "84:         array(1) {",
      "85:           [1]=>",
      "86:           array(1) {",
      "87:             [1]=>",
      "88:             array(1) {",
      "89:               [1]=>",
      "90:               array(1) {",
      "91:                 [1]=>",
      "92:                 array(1) {",
      "93:                   [1]=>",
      "94:                   array(0) {",
      "95:                   }",
      "96:                 }",
      "97:               }",
      "98:             }",
      "99:           }",
      "100:         }",
      "101:       }",
      "102:     }",
      "103:   }",
      "104: }",
      "105: bool(true)",
      "106: array(1) {",
      "107:   [1]=>",
      "108:   array(1) {",
      "109:     [1]=>",
      "110:     array(1) {",
      "111:       [1]=>",
      "112:       array(1) {",
      "113:         [1]=>",
      "114:         array(1) {",
      "115:           [1]=>",
      "116:           array(1) {",
      "117:             [1]=>",
      "118:             array(1) {",
      "119:               [1]=>",
      "120:               array(1) {",
      "121:                 [1]=>",
      "122:                 array(1) {",
      "123:                   [1]=>",
      "124:                   array(1) {",
      "125:                     [1]=>",
      "126:                     int(1)",
      "127:                   }",
      "128:                 }",
      "129:               }",
      "130:             }",
      "131:           }",
      "132:         }",
      "133:       }",
      "134:     }",
      "135:   }",
      "136: }",
      "137: bool(true)",
      "138: array(1) {",
      "139:   [0]=>",
      "140:   array(1) {",
      "141:     [0]=>",
      "142:     array(1) {",
      "143:       [0]=>",
      "144:       array(1) {",
      "145:         [0]=>",
      "146:         array(1) {",
      "147:           [0]=>",
      "148:           array(1) {",
      "149:             [0]=>",
      "150:             array(1) {",
      "151:               [0]=>",
      "152:               array(1) {",
      "153:                 [0]=>",
      "154:                 array(1) {",
      "155:                   [0]=>",
      "156:                   array(0) {",
      "157:                   }",
      "158:                 }",
      "159:               }",
      "160:             }",
      "161:           }",
      "162:         }",
      "163:       }",
      "164:     }",
      "165:   }",
      "166: }",
      "167: bool(true)",
      "168: bool(false)",
      "169: bool(false)",
      "170: bool(false)",
      "171: bool(false)",
      "172: bool(false)",
      "173: bool(false)",
      "174: bool(false)",
      "175: bool(false)",
      "176: bool(false)",
      "177: bool(false)",
      "178: bool(false)",
      "179: bool(false)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "735dc67d4086338cf074286b40758d288971460e",
      "candidate_info": {
        "commit_hash": "735dc67d4086338cf074286b40758d288971460e",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/735dc67d4086338cf074286b40758d288971460e",
        "files": [
          "hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/base/type-array.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp",
          "hphp/runtime/ext/fb/ext_fb.h",
          "hphp/runtime/ext/fb/ext_fb.php",
          "hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php",
          "hphp/test/slow/keyset/fb_serialize.php",
          "hphp/test/slow/keyset/fb_serialize.php.expect",
          "hphp/test/slow/vec/fb_serialize.php.expect"
        ],
        "message": "new fb_serialize mode, which supports keysets\n\nSummary:\nI've been looking at HHVM serialization code this week anyway, and recalled a recurring feature request for keysets in fb_serialize. Since I've already have the relevant context paged-in, building support for keysets serialization was a matter of few hours.\n\nThis diff adds new fb_serialize mode, which supports serializing keysets. For now, users would need to opt into this behavior at serialization time by passing in FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option.\n\nTo implement this, I added new `FB_SERIALIZE_SET` (20) tag with serialization format very similar to `FB_SERIALIZE_LIST` (which is used for serializing `vec`s).\n\nFB_SERIALIZE_SET will only be produced by HHVM fb_serialized implementation and only if FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS is passed in. This means, there will be no behavior changes to any existing code (including memcache serialization). The only way to get new behavior is for a call site to explicitly opt-in via `fb_serialize($val, FB_SERIALIZE_HACK_ARRAYS_AND_KEYSET)`.\n\nOn deserialization side I'm adding support for deserializing FB_SERIALIZE_SETS into all major FBSerialize implementations without extra gating. It also means, fb_unserialize() will be able to unserialize keyset even if FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS is not passed in.\nI have considered an alternative approach - only support deserializing FB_SERIALIZE_SET on opt-in basis (e.g. require FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS in hack), but I don't think it is good idea:\n- allowing FB_SERIALIZE_SET means a slight behavior change on deserialization side - what was previously malformed serialized data may no deserialize into keyset correctly. However, this is extremely low risk. Previously FB_SERIALIZE_SET tag would be rejected by every existing FBSerialize implementation, and to my best knowledge the tag value \"20\" have been never used before. There are no plausible scenarios, which would lead to confusing output being constructed\n- allowing FB_SERIALIZE_SET deserialization by default, especially in non-Hack serializers, makes it possible to eventually allow keysets in fb_serialize by default, if we want to do so (with appropriate migration to preserve behavior of WWW code). If C++/Python deserializers treat FB_SERIALIZE_SET as invalid value, we'll never be able to allow it in WWW by default for fear of cross-language compatibility issues. It's also much harder to change semantics, once FB_SERIALIZE_SET is actually being used anywhere.\n\nFuture possibilities:\n- replace FB_SERIALIZE_HACK_ARRAYS with FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS - i.e. allow keysets by default. We should wait for 3-6 months before we consider this to ensure, that support for deserializing FB_SERIALIZE_SET is pushed out fleet-wide in fbcode. It's totally up to us whether we want to do it, but technically this will be couple of days of active work.\n- enable python's fb_serialize implementation to serialize python sets int FB_SERIALIZE_SET. Python has `set` type, which is slightly more flexible than keyset (it can store any hashable objects, not just ints or strings), but is close enough fit. I do not plan on adding support for serializing python sets (currently not supported by fb_serialize in python), but it's possible to do in future if anyone wants it.\n\nReviewed By: billf\n\nDifferential Revision: D19636679\n\nfbshipit-source-id: c32aece64a00e4abc5a04249074a083153be9cc8",
        "before_after_code_files": [
          "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/base/type-array.h||hphp/runtime/base/type-array.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp",
          "hphp/runtime/ext/fb/ext_fb.h||hphp/runtime/ext/fb/ext_fb.h",
          "hphp/runtime/ext/fb/ext_fb.php||hphp/runtime/ext/fb/ext_fb.php",
          "hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php||hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php",
          "hphp/test/slow/keyset/fb_serialize.php||hphp/test/slow/keyset/fb_serialize.php",
          "hphp/test/slow/keyset/fb_serialize.php.expect||hphp/test/slow/keyset/fb_serialize.php.expect",
          "hphp/test/slow/vec/fb_serialize.php.expect||hphp/test/slow/vec/fb_serialize.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp"
          ],
          "candidate": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi": [
          "File: hphp/hack/hhi/builtins_fb.hhi -> hphp/hack/hhi/builtins_fb.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;",
          "9: const FB_SERIALIZE_HACK_ARRAYS = 0;",
          "10: const FB_SERIALIZE_VARRAY_DARRAY = 0;",
          "12: const XHPROF_FLAGS_NO_BUILTINS = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/type-array.h||hphp/runtime/base/type-array.h": [
          "File: hphp/runtime/base/type-array.h -> hphp/runtime/base/type-array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   return Array::attach(ArrayData::CreateDict());",
          "636: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638: ALWAYS_INLINE Array empty_keyset() {",
          "639:   return Array::attach(ArrayData::CreateKeyset());",
          "640: }",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h -> hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   writeCode(FB_SERIALIZE_STOP);",
          "160: }",
          "162: template <class V>",
          "163: template <typename Vector>",
          "164: void FBSerializer<V>::serializeVector(const Vector& vec, size_t depth) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: template <class V>",
          "163: template <typename Set>",
          "164: void FBSerializer<V>::serializeSet(const Set& set, size_t depth) {",
          "165:   writeCode(FB_SERIALIZE_SET);",
          "168:   serializeInt64(V::setSize(set));",
          "170:   for (auto it = V::setIterator(set);",
          "171:        V::setNotEnd(set, it);",
          "172:        V::setNext(it)) {",
          "173:     serializeThing(V::setValue(it), depth + 1);",
          "174:   }",
          "175:   writeCode(FB_SERIALIZE_STOP);",
          "176: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:       serializeList(V::asVector(thing), depth);",
          "217:       break;",
          "219:     default:",
          "220:       throw SerializeError(\"Unknown type\");",
          "221:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:     case Type::SET:",
          "236:       serializeSet(V::asSet(thing), depth);",
          "237:       break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:       return serializedSizeList(V::asVector(thing), depth);",
          "269:       break;",
          "271:     default:",
          "272:       throw SerializeError(\"Unknown type\");",
          "273:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:     case Type::SET:",
          "292:       return serializedSizeSet(V::asSet(thing), depth);",
          "293:       break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:   return ret;",
          "359: }",
          "361: template <class V>",
          "362: inline typename V::VariantType FBUnserializer<V>::unserialize(",
          "363:   folly::StringPiece serialized) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: template <class V>",
          "386: template <typename Set>",
          "387: size_t FBSerializer<V>::serializedSizeSet(",
          "388:   const Set& set,",
          "389:   size_t depth) {",
          "391:   size_t ret = CODE_SIZE + CODE_SIZE;",
          "393:   ret += serializedSizeInt64(V::setSize(set));",
          "395:   for (auto it = V::setIterator(set);",
          "396:        V::setNotEnd(set, it);",
          "397:        V::setNext(it)) {",
          "398:     ret += serializedSizeThing(V::setValue(it), depth + 1);",
          "399:   }",
          "401:   return ret;",
          "402: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "546:   return ret;",
          "547: }",
          "549: template <class V>",
          "550: inline folly::StringPiece FBUnserializer<V>::getSerializedMap() {",
          "551:   const char* head = p_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592: template <class V>",
          "593: inline typename V::SetType FBUnserializer<V>::unserializeSet() {",
          "594:   p_ += CODE_SIZE;",
          "598:   unserializeInt64();",
          "600:   typename V::SetType ret = V::createSet();",
          "602:   size_t code = nextCode();",
          "603:   while (code != FB_SERIALIZE_STOP) {",
          "604:     V::setAppend(ret, unserializeThing());",
          "605:     code = nextCode();",
          "606:   }",
          "607:   p_ += CODE_SIZE;",
          "608:   return ret;",
          "609: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "627:       return V::fromVector(unserializeVector());",
          "628:     case FB_SERIALIZE_LIST:",
          "629:       return V::fromVector(unserializeList());",
          "630:     default:",
          "631:       throw UnserializeError(\"Invalid code: \" + folly::to<std::string>(code)",
          "632:                              + \" at location \" + folly::to<std::string>(p_));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692:     case FB_SERIALIZE_SET:",
          "693:       return V::fromSet(unserializeSet());",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize.h -> hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   STRING,",
          "75:   OBJECT,",
          "76:   LIST,",
          "77: };",
          "79: struct FBSerializeBase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   SET,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     FB_SERIALIZE_BOOLEAN = 17,",
          "92:     FB_SERIALIZE_VECTOR  = 18,",
          "93:     FB_SERIALIZE_LIST    = 19,",
          "94:   };",
          "96:   static const size_t CODE_SIZE = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     FB_SERIALIZE_SET     = 20,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:   void serializeVector(const Vector& vec, size_t depth);",
          "128:   template <typename Vector>",
          "129:   void serializeList(const Vector& vec, size_t depth);",
          "130:   template <typename Variant>",
          "131:   void serializeThing(const Variant& thing, size_t depth);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   template <typename Set>",
          "138:   void serializeSet(const Set& set, size_t depth);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:   static size_t serializedSizeVector(const Vector& v, size_t depth);",
          "140:   template <typename Vector>",
          "141:   static size_t serializedSizeList(const Vector& v, size_t depth);",
          "142:   template <typename Variant>",
          "143:   static size_t serializedSizeThing(const Variant& v, size_t depth);",
          "144: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   template <typename Set>",
          "152:   static size_t serializedSizeSet(const Set& v, size_t depth);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:   typename V::MapType unserializeMap();",
          "158:   typename V::VectorType unserializeVector();",
          "159:   typename V::VectorType unserializeList();",
          "162:   folly::StringPiece getSerializedMap();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   typename V::SetType unserializeSet();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h": [
          "File: hphp/runtime/ext/fb/VariantController.h -> hphp/runtime/ext/fb/VariantController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   }",
          "46: }",
          "50:   OFF,",
          "52:   ON,",
          "55:   MIGRATORY,",
          "56: };",
          "",
          "[Removed Lines]",
          "48: enum VariantControllerHackArraysMode {",
          "",
          "[Added Lines]",
          "48: enum class VariantControllerHackArraysMode {",
          "59:   ON_AND_KEYSET,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   typedef Variant VariantType;",
          "64:   typedef Array MapType;",
          "65:   typedef Array VectorType;",
          "66:   typedef String StringType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   typedef Array SetType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:         return HPHP::serialize::Type::MAP;",
          "93:       case KindOfPersistentDict:",
          "94:       case KindOfDict: {",
          "96:           return HPHP::serialize::Type::MAP;",
          "97:         }",
          "98:         if (RuntimeOption::EvalHackArrCompatFBSerializeHackArraysNotices) {",
          "",
          "[Removed Lines]",
          "95:         if (HackArraysMode == VariantControllerHackArraysMode::ON) {",
          "",
          "[Added Lines]",
          "101:         if (HackArraysMode == VariantControllerHackArraysMode::ON ||",
          "102:             HackArraysMode == VariantControllerHackArraysMode::ON_AND_KEYSET) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:       }",
          "105:       case KindOfPersistentVec:",
          "106:       case KindOfVec: {",
          "108:           return HPHP::serialize::Type::LIST;",
          "109:         }",
          "110:         if (RuntimeOption::EvalHackArrCompatFBSerializeHackArraysNotices) {",
          "",
          "[Removed Lines]",
          "107:         if (HackArraysMode == VariantControllerHackArraysMode::ON) {",
          "",
          "[Added Lines]",
          "114:         if (HackArraysMode == VariantControllerHackArraysMode::ON ||",
          "115:             HackArraysMode == VariantControllerHackArraysMode::ON_AND_KEYSET) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:       }",
          "117:       case KindOfPersistentKeyset:",
          "118:       case KindOfKeyset:",
          "119:         throw HPHP::serialize::KeysetSerializeError{};",
          "121:       case KindOfClsMeth:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:         if (HackArraysMode == VariantControllerHackArraysMode::ON_AND_KEYSET) {",
          "128:           return HPHP::serialize::Type::SET;",
          "129:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "138:   static String asString(const_variant_ref obj) { return obj.toString(); }",
          "139:   static Array asMap(const_variant_ref obj) { return obj.toArray(); }",
          "140:   static Array asVector(const_variant_ref obj) { return obj.toArray(); }",
          "143:   static VariantType createNull() { return init_null(); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:   static Array asSet(const_variant_ref obj) { return obj.toArray(); }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "147:   static VariantType fromString(const StringType& str) { return str; }",
          "148:   static VariantType fromMap(const MapType& map) { return map; }",
          "149:   static VariantType fromVector(const VectorType& vec) { return vec; }",
          "152:   static MapType createMap() {",
          "153:     switch (HackArraysMode) {",
          "154:       case VariantControllerHackArraysMode::ON:",
          "155:         return empty_dict_array();",
          "156:       case VariantControllerHackArraysMode::OFF:",
          "157:         return empty_darray();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:   static VariantType fromSet(const SetType& set) { return set; }",
          "169:       case VariantControllerHackArraysMode::ON_AND_KEYSET:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "165:     auto arrayData = map.toArray().detach();",
          "166:     switch (HackArraysMode) {",
          "167:       case VariantControllerHackArraysMode::ON:",
          "168:         return Array::attach(arrayData->toDict(false));",
          "169:       case VariantControllerHackArraysMode::OFF:",
          "170:         return Array::attach(arrayData->toDArray(false));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:       case VariantControllerHackArraysMode::ON_AND_KEYSET:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "181:     ArrayData* empty;",
          "182:     switch (HackArraysMode) {",
          "183:       case VariantControllerHackArraysMode::ON:",
          "184:         empty = ArrayData::CreateDict();",
          "185:         break;",
          "186:       case VariantControllerHackArraysMode::OFF:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:       case VariantControllerHackArraysMode::ON_AND_KEYSET:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "229:   static VectorType createVector() {",
          "230:     switch (HackArraysMode) {",
          "231:       case VariantControllerHackArraysMode::ON:",
          "232:         return empty_vec_array();",
          "233:       case VariantControllerHackArraysMode::OFF:",
          "234:         return empty_darray();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:       case VariantControllerHackArraysMode::ON_AND_KEYSET:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "255:     return it.secondRef();",
          "256:   }",
          "259:   static StringType createMutableString(size_t n) {",
          "260:     String ret(n, ReserveString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:   static SetType createSet() {",
          "278:     return empty_keyset();",
          "279:   }",
          "280:   static int64_t setSize(const SetType& set) {",
          "281:     return set.size();",
          "282:   }",
          "283:   static void setAppend(SetType& set, const VariantType& v) {",
          "284:     auto value_type = type(v);",
          "285:     if (value_type != HPHP::serialize::Type::INT64 &&",
          "286:         value_type != HPHP::serialize::Type::STRING) {",
          "287:       throw HPHP::serialize::UnserializeError(",
          "288:           \"Unsupported keyset element of type \" +",
          "289:           folly::to<std::string>(value_type));",
          "290:     }",
          "291:     set.append(v);",
          "292:   }",
          "293:   static ArrayIter setIterator(const VectorType& set) {",
          "294:     return ArrayIter(set);",
          "295:   }",
          "296:   static bool setNotEnd(const SetType& /*set*/, ArrayIter& it) {",
          "297:     return !it.end();",
          "298:   }",
          "299:   static void setNext(ArrayIter& it) { ++it; }",
          "300:   static const_variant_ref setValue(ArrayIter& it) {",
          "301:     return it.secondRef();",
          "302:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "290:   ALWAYS_INLINE",
          "291:   static void traceSerialization(const_variant_ref thing) {",
          "292:     if (LIKELY(!RuntimeOption::EvalLogArrayProvenance)) return;",
          "294:     if (!thing.isArray()) return;",
          "295:     auto const ad = thing.getArrayData();",
          "",
          "[Removed Lines]",
          "293:     if (HackArraysMode != VariantControllerHackArraysMode::ON) return;",
          "",
          "[Added Lines]",
          "339:     if (HackArraysMode != VariantControllerHackArraysMode::ON &&",
          "340:         HackArraysMode != VariantControllerHackArraysMode::ON_AND_KEYSET) {",
          "341:       return;",
          "342:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "306:   VariantControllerImpl<VariantControllerHackArraysMode::OFF>;",
          "307: using VariantControllerUsingHackArrays =",
          "308:   VariantControllerImpl<VariantControllerHackArraysMode::ON>;",
          "309: using VariantControllerUsingVarrayDarray =",
          "310:   VariantControllerImpl<VariantControllerHackArraysMode::MIGRATORY>;",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: using VariantControllerUsingHackArraysAndKeyset =",
          "359:   VariantControllerImpl<VariantControllerHackArraysMode::ON_AND_KEYSET>;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp": [
          "File: hphp/runtime/ext/fb/ext_fb.cpp -> hphp/runtime/ext/fb/ext_fb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: const int64_t k_FB_SERIALIZE_HACK_ARRAYS = 1<<1;",
          "58: const int64_t k_FB_SERIALIZE_VARRAY_DARRAY = 1<<2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: const int64_t k_FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 1<<3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:         ::serialize(thing, s.mutableData());",
          "116:       s.setSize(len);",
          "117:       return s;",
          "118:     } else if (options & k_FB_SERIALIZE_VARRAY_DARRAY) {",
          "119:       size_t len = HPHP::serialize",
          "120:         ::FBSerializer<VariantControllerUsingVarrayDarray>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     } else if (options & k_FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS) {",
          "120:       size_t len = HPHP::serialize",
          "121:         ::FBSerializer<VariantControllerUsingHackArraysAndKeyset>",
          "122:         ::serializedSize(thing);",
          "123:       String s(len, ReserveString);",
          "124:       HPHP::serialize",
          "125:         ::FBSerializer<VariantControllerUsingHackArraysAndKeyset>",
          "126:         ::serialize(thing, s.mutableData());",
          "127:       s.setSize(len);",
          "128:       return s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     }",
          "137:   } catch (const HPHP::serialize::KeysetSerializeError&) {",
          "138:     SystemLib::throwInvalidArgumentExceptionObject(",
          "140:     );",
          "141:   } catch (const HPHP::serialize::HackArraySerializeError&) {",
          "142:     SystemLib::throwInvalidArgumentExceptionObject(",
          "",
          "[Removed Lines]",
          "139:       \"Keysets cannot be serialized with fb_serialize\"",
          "",
          "[Added Lines]",
          "150:       \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS \"",
          "151:       \"option to be provided\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:         ::unserialize(folly::StringPiece(str, len));",
          "180:       success = true;",
          "181:       return res;",
          "182:     } else if (options & k_FB_SERIALIZE_VARRAY_DARRAY) {",
          "183:       auto res = HPHP::serialize",
          "184:         ::FBUnserializer<VariantControllerUsingVarrayDarray>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     } else if (options & k_FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS) {",
          "195:       auto res = HPHP::serialize",
          "196:         ::FBUnserializer<VariantControllerUsingHackArraysAndKeyset>",
          "197:         ::unserialize(folly::StringPiece(str, len));",
          "198:       success = true;",
          "199:       return res;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1294:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);",
          "1295:     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);",
          "1297:     HHVM_FE(fb_serialize);",
          "1298:     HHVM_FE(fb_unserialize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1314:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS,",
          "1315:                 k_FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.h||hphp/runtime/ext/fb/ext_fb.h": [
          "File: hphp/runtime/ext/fb/ext_fb.h -> hphp/runtime/ext/fb/ext_fb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: extern const int64_t k_FB_SERIALIZE_HACK_ARRAYS;",
          "27: extern const int64_t k_FB_SERIALIZE_VARRAY_DARRAY;",
          "29: Variant HHVM_FUNCTION(fb_serialize, const Variant& thing, int64_t options = 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: extern const int64_t k_FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.php||hphp/runtime/ext/fb/ext_fb.php": [
          "File: hphp/runtime/ext/fb/ext_fb.php -> hphp/runtime/ext/fb/ext_fb.php"
        ],
        "hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php||hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php": [
          "File: hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php -> hphp/test/slow/ext_fb/fb_serialize_hack_array_notices.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     fb_serialize(keyset[], FB_SERIALIZE_HACK_ARRAYS);",
          "44:     echo \"fail\\n\";",
          "45:   } catch (Exception $e) {}",
          "46: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   fb_serialize(varray[], FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "48:   fb_serialize(darray[], FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "49:   fb_serialize(vec[], FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "50:   fb_serialize(dict[], FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "51:   fb_serialize(keyset[], FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "",
          "---------------"
        ],
        "hphp/test/slow/keyset/fb_serialize.php||hphp/test/slow/keyset/fb_serialize.php": [
          "File: hphp/test/slow/keyset/fb_serialize.php -> hphp/test/slow/keyset/fb_serialize.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: function serde($v) {",
          "5:   try {",
          "6:     $ser = fb_serialize($v, FB_SERIALIZE_HACK_ARRAYS);",
          "8:     var_dump($ret);",
          "9:     var_dump($unser);",
          "10:   } catch (Exception $e) {",
          "",
          "[Removed Lines]",
          "7:     $unser = fb_unserialize($ser, $ret, FB_SERIALIZE_HACK_ARRAYS);",
          "",
          "[Added Lines]",
          "5:   $ret = null;",
          "6:   try {",
          "7:     $ser = fb_serialize($v, FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "8:     $unser = fb_unserialize($ser, inout $ret, FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS);",
          "9:     var_dump($ret);",
          "10:     var_dump($unser);",
          "11:   } catch (Exception $e) {",
          "12:     var_dump($e->getMessage());",
          "13:   }",
          "17:     $unser = fb_unserialize($ser, inout $ret, FB_SERIALIZE_HACK_ARRAYS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:   try {",
          "15:     $ser = fb_serialize($v);",
          "17:     var_dump($ret);",
          "18:     var_dump($unser);",
          "19:   } catch (Exception $e) {",
          "",
          "[Removed Lines]",
          "16:     $unser = fb_unserialize($ser, $ret);",
          "",
          "[Added Lines]",
          "26:     $unser = fb_unserialize($ser, inout $ret);",
          "",
          "---------------"
        ],
        "hphp/test/slow/keyset/fb_serialize.php.expect||hphp/test/slow/keyset/fb_serialize.php.expect": [
          "File: hphp/test/slow/keyset/fb_serialize.php.expect -> hphp/test/slow/keyset/fb_serialize.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: string(83) \"Serializing Hack arrays requires the FB_SERIALIZE_HACK_ARRAYS option to be provided\"",
          "14: string(83) \"Serializing Hack arrays requires the FB_SERIALIZE_HACK_ARRAYS option to be provided\"",
          "",
          "[Removed Lines]",
          "1: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "2: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "3: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "4: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "5: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "6: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "7: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "8: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "9: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "11: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "12: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "13: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "",
          "[Added Lines]",
          "1: bool(true)",
          "2: keyset(0) {",
          "3: }",
          "4: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "5: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "6: bool(true)",
          "7: keyset(3) {",
          "8:   int(1)",
          "9:   int(2)",
          "10:   int(3)",
          "11: }",
          "12: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "13: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "14: bool(true)",
          "15: keyset(3) {",
          "16:   string(1) \"a\"",
          "17:   string(1) \"b\"",
          "18:   string(1) \"c\"",
          "19: }",
          "20: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "21: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "22: bool(true)",
          "23: dict(5) {",
          "24:   [0]=>",
          "25:   int(1)",
          "26:   [1]=>",
          "27:   int(2)",
          "28:   [2]=>",
          "29:   keyset(3) {",
          "30:     int(1)",
          "31:     int(2)",
          "32:     int(3)",
          "33:   }",
          "34:   [3]=>",
          "35:   keyset(3) {",
          "36:     string(1) \"a\"",
          "37:     string(1) \"b\"",
          "38:     string(1) \"c\"",
          "39:   }",
          "40:   [4]=>",
          "41:   keyset(0) {",
          "42:   }",
          "43: }",
          "44: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "45: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "46: bool(true)",
          "47: vec(5) {",
          "48:   int(1)",
          "49:   int(2)",
          "50:   keyset(3) {",
          "51:     int(1)",
          "52:     int(2)",
          "53:     int(3)",
          "54:   }",
          "55:   keyset(3) {",
          "56:     string(1) \"a\"",
          "57:     string(1) \"b\"",
          "58:     string(1) \"c\"",
          "59:   }",
          "60:   keyset(0) {",
          "61:   }",
          "62: }",
          "63: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "65: bool(true)",
          "66: dict(5) {",
          "67:   [\"a\"]=>",
          "68:   int(1)",
          "69:   [\"b\"]=>",
          "70:   int(2)",
          "71:   [\"c\"]=>",
          "72:   keyset(3) {",
          "73:     int(1)",
          "74:     int(2)",
          "75:     int(3)",
          "76:   }",
          "77:   [\"d\"]=>",
          "78:   keyset(3) {",
          "79:     string(1) \"a\"",
          "80:     string(1) \"b\"",
          "81:     string(1) \"c\"",
          "82:   }",
          "83:   [\"e\"]=>",
          "84:   keyset(0) {",
          "85:   }",
          "86: }",
          "87: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "88: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "89: bool(true)",
          "90: dict(5) {",
          "91:   [\"a\"]=>",
          "92:   int(1)",
          "93:   [\"b\"]=>",
          "94:   int(2)",
          "95:   [\"c\"]=>",
          "96:   keyset(3) {",
          "97:     int(1)",
          "98:     int(2)",
          "99:     int(3)",
          "100:   }",
          "101:   [\"d\"]=>",
          "102:   keyset(3) {",
          "103:     string(1) \"a\"",
          "104:     string(1) \"b\"",
          "105:     string(1) \"c\"",
          "106:   }",
          "107:   [\"e\"]=>",
          "108:   keyset(0) {",
          "109:   }",
          "110: }",
          "111: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "",
          "---------------"
        ],
        "hphp/test/slow/vec/fb_serialize.php.expect||hphp/test/slow/vec/fb_serialize.php.expect": [
          "File: hphp/test/slow/vec/fb_serialize.php.expect -> hphp/test/slow/vec/fb_serialize.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: }",
          "88: string(83) \"Serializing Hack arrays requires the FB_SERIALIZE_HACK_ARRAYS option to be provided\"",
          "90: string(83) \"Serializing Hack arrays requires the FB_SERIALIZE_HACK_ARRAYS option to be provided\"",
          "91: bool(true)",
          "92: dict(5) {",
          "",
          "[Removed Lines]",
          "89: string(46) \"Keysets cannot be serialized with fb_serialize\"",
          "",
          "[Added Lines]",
          "89: string(91) \"Serializing Keysets requires the FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS option to be provided\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   vec(0) {",
          "134:   }",
          "135: }",
          "",
          "[Removed Lines]",
          "136: string(83) \"Serializing Hack arrays requires the FB_SERIALIZE_HACK_ARRAYS option to be provided\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27c1547f8de431d0341a12396bd3ebd475592d95",
      "candidate_info": {
        "commit_hash": "27c1547f8de431d0341a12396bd3ebd475592d95",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/27c1547f8de431d0341a12396bd3ebd475592d95",
        "files": [
          "hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
        ],
        "message": "CVE-2020-1898\n\nDon't allow for unlimited nesting in FBUnserialize or fb_compact_unserialize",
        "before_after_code_files": [
          "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_fb/unserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_fb/unserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
          ],
          "candidate": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi": [
          "File: hphp/hack/hhi/builtins_fb.hhi -> hphp/hack/hhi/builtins_fb.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const FB_UNSERIALIZE_UNEXPECTED_END = 0;",
          "6: const FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE = 0;",
          "7: const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;",
          "9: const FB_SERIALIZE_HACK_ARRAYS = 0;",
          "10: const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: const FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED = 0;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h -> hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:   folly::StringPiece serialized) {",
          "408:   FBUnserializer<V> unserializer(serialized);",
          "410: }",
          "412: template <class V>",
          "",
          "[Removed Lines]",
          "409:   return unserializer.unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524: }",
          "526: template <class V>",
          "528:   p_ += CODE_SIZE;",
          "530:   typename V::MapType ret = V::createMap();",
          "",
          "[Removed Lines]",
          "527: inline typename V::MapType FBUnserializer<V>::unserializeMap() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:       case FB_SERIALIZE_STRING:",
          "537:         {",
          "538:           auto key = unserializeString();",
          "540:           V::mapSet(ret, std::move(key), std::move(value));",
          "541:         }",
          "542:         break;",
          "543:       default:",
          "544:         {",
          "545:           auto key = unserializeInt64();",
          "547:           V::mapSet(ret, std::move(key), std::move(value));",
          "548:         }",
          "549:     }",
          "",
          "[Removed Lines]",
          "539:           auto value = unserializeThing();",
          "546:           auto value = unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556: }",
          "558: template <class V>",
          "560:   p_ += CODE_SIZE;",
          "562:   typename V::VectorType ret = V::createVector();",
          "564:   size_t code = nextCode();",
          "565:   while (code != FB_SERIALIZE_STOP) {",
          "567:     code = nextCode();",
          "568:   }",
          "569:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "559: inline typename V::VectorType FBUnserializer<V>::unserializeVector() {",
          "566:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571: }",
          "573: template <class V>",
          "575:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "574: inline typename V::VectorType FBUnserializer<V>::unserializeList() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "583:   size_t code = nextCode();",
          "584:   while (code != FB_SERIALIZE_STOP) {",
          "586:     code = nextCode();",
          "587:   }",
          "588:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "585:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "590: }",
          "592: template <class V>",
          "594:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "593: inline typename V::SetType FBUnserializer<V>::unserializeSet() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602:   size_t code = nextCode();",
          "603:   while (code != FB_SERIALIZE_STOP) {",
          "605:     code = nextCode();",
          "606:   }",
          "607:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "604:     V::setAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664: }",
          "666: template <class V>",
          "668:   size_t code = nextCode();",
          "670:   switch (code) {",
          "",
          "[Removed Lines]",
          "667: inline typename V::VariantType FBUnserializer<V>::unserializeThing() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "677:     case FB_SERIALIZE_STRING:",
          "678:       return V::fromString(unserializeString());",
          "679:     case FB_SERIALIZE_STRUCT:",
          "681:     case FB_SERIALIZE_NULL:",
          "682:       ++p_;",
          "683:       return V::createNull();",
          "",
          "[Removed Lines]",
          "680:       return V::fromMap(unserializeMap());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686:     case FB_SERIALIZE_BOOLEAN:",
          "687:       return V::fromBool(unserializeBoolean());",
          "688:     case FB_SERIALIZE_VECTOR:",
          "690:     case FB_SERIALIZE_LIST:",
          "692:     case FB_SERIALIZE_SET:",
          "694:     default:",
          "695:       throw UnserializeError(\"Invalid code: \" + folly::to<std::string>(code)",
          "696:                              + \" at location \" + folly::to<std::string>(p_));",
          "",
          "[Removed Lines]",
          "689:       return V::fromVector(unserializeVector());",
          "691:       return V::fromVector(unserializeList());",
          "693:       return V::fromSet(unserializeSet());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize.h -> hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   double unserializeDouble();",
          "166:   typename V::StringType unserializeString();",
          "167:   folly::StringPiece unserializeStringPiece();",
          "174:   folly::StringPiece getSerializedMap();",
          "177:   void advance(size_t delta);",
          "178:   Code nextCode() const;",
          "",
          "[Removed Lines]",
          "168:   typename V::MapType unserializeMap();",
          "169:   typename V::VectorType unserializeVector();",
          "170:   typename V::VectorType unserializeList();",
          "171:   typename V::SetType unserializeSet();",
          "175:   typename V::VariantType unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h": [
          "File: hphp/runtime/ext/fb/VariantController.h -> hphp/runtime/ext/fVariantController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     return set.size();",
          "284:   }",
          "285:   static void setAppend(SetType& set, const VariantType& v) {",
          "289:       throw HPHP::serialize::UnserializeError(",
          "292:     }",
          "293:     set.append(v);",
          "294:   }",
          "",
          "[Removed Lines]",
          "286:     auto value_type = type(v);",
          "287:     if (value_type != HPHP::serialize::Type::INT64 &&",
          "288:         value_type != HPHP::serialize::Type::STRING) {",
          "290:           \"Unsupported keyset element of type \" +",
          "291:           folly::to<std::string>(value_type));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp": [
          "File: hphp/runtime/ext/fb/ext_fb.cpp -> hphp/runtime/ext/fext_fb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #define FB_UNSERIALIZE_UNEXPECTED_END            0x0002",
          "67: #define FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE  0x0003",
          "68: #define FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE 0x0004",
          "70: #ifdef FACEBOOK",
          "71: # define HHVM_FACEBOOK true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705: const StaticString s_empty(\"\");",
          "707: int fb_compact_unserialize_from_buffer(",
          "710:   CHECK_ENOUGH(1, p, n);",
          "711:   int code = (unsigned char)buf[p];",
          "",
          "[Removed Lines]",
          "708:   Variant& out, const char* buf, int n, int& p) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:       Array arr = Array::CreateVArray();",
          "775:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "776:         Variant value;",
          "778:         if (err) {",
          "779:           return err;",
          "780:         }",
          "",
          "[Removed Lines]",
          "777:         int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "799:           ++p;",
          "800:         } else {",
          "801:           Variant value;",
          "803:           if (err) {",
          "804:             return err;",
          "805:           }",
          "",
          "[Removed Lines]",
          "802:           int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:       Array arr = Array::CreateDArray();",
          "821:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "822:         Variant key;",
          "824:         if (err) {",
          "825:           return err;",
          "826:         }",
          "827:         Variant value;",
          "829:         if (err) {",
          "830:           return err;",
          "831:         }",
          "",
          "[Removed Lines]",
          "823:         int err = fb_compact_unserialize_from_buffer(key, buf, n, p);",
          "828:         err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "862:   Variant ret;",
          "863:   int p = 0;",
          "865:   if (err) {",
          "866:     success = false;",
          "867:     errcode = err;",
          "",
          "[Removed Lines]",
          "864:   int err = fb_compact_unserialize_from_buffer(ret, str, len, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1313:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_END);",
          "1314:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE);",
          "1315:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE);",
          "1317:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);",
          "1318:     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php -> hphp/test/slow/ext_funserialize-bad-set.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php.expect -> hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php -> hphp/test/slow/ext_funserialize_max_depth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php.expect -> hphp/test/slow/ext_funserialize_max_depth.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d0367a363a587505b3592b4f1022841d83594f6",
      "candidate_info": {
        "commit_hash": "2d0367a363a587505b3592b4f1022841d83594f6",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/2d0367a363a587505b3592b4f1022841d83594f6",
        "files": [
          "hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
        ],
        "message": "CVE-2020-1898\n\nDon't allow for unlimited nesting in FBUnserialize or fb_compact_unserialize",
        "before_after_code_files": [
          "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_fb/unserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_fb/unserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
          ],
          "candidate": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi": [
          "File: hphp/hack/hhi/builtins_fb.hhi -> hphp/hack/hhi/builtins_fb.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const FB_UNSERIALIZE_UNEXPECTED_END = 0;",
          "6: const FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE = 0;",
          "7: const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;",
          "9: const FB_SERIALIZE_HACK_ARRAYS = 0;",
          "10: const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: const FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED = 0;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h -> hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:   folly::StringPiece serialized) {",
          "408:   FBUnserializer<V> unserializer(serialized);",
          "410: }",
          "412: template <class V>",
          "",
          "[Removed Lines]",
          "409:   return unserializer.unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524: }",
          "526: template <class V>",
          "528:   p_ += CODE_SIZE;",
          "530:   typename V::MapType ret = V::createMap();",
          "",
          "[Removed Lines]",
          "527: inline typename V::MapType FBUnserializer<V>::unserializeMap() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:       case FB_SERIALIZE_STRING:",
          "537:         {",
          "538:           auto key = unserializeString();",
          "540:           V::mapSet(ret, std::move(key), std::move(value));",
          "541:         }",
          "542:         break;",
          "543:       default:",
          "544:         {",
          "545:           auto key = unserializeInt64();",
          "547:           V::mapSet(ret, std::move(key), std::move(value));",
          "548:         }",
          "549:     }",
          "",
          "[Removed Lines]",
          "539:           auto value = unserializeThing();",
          "546:           auto value = unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556: }",
          "558: template <class V>",
          "560:   p_ += CODE_SIZE;",
          "562:   typename V::VectorType ret = V::createVector();",
          "564:   size_t code = nextCode();",
          "565:   while (code != FB_SERIALIZE_STOP) {",
          "567:     code = nextCode();",
          "568:   }",
          "569:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "559: inline typename V::VectorType FBUnserializer<V>::unserializeVector() {",
          "566:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571: }",
          "573: template <class V>",
          "575:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "574: inline typename V::VectorType FBUnserializer<V>::unserializeList() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "583:   size_t code = nextCode();",
          "584:   while (code != FB_SERIALIZE_STOP) {",
          "586:     code = nextCode();",
          "587:   }",
          "588:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "585:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "590: }",
          "592: template <class V>",
          "594:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "593: inline typename V::SetType FBUnserializer<V>::unserializeSet() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602:   size_t code = nextCode();",
          "603:   while (code != FB_SERIALIZE_STOP) {",
          "605:     code = nextCode();",
          "606:   }",
          "607:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "604:     V::setAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664: }",
          "666: template <class V>",
          "668:   size_t code = nextCode();",
          "670:   switch (code) {",
          "",
          "[Removed Lines]",
          "667: inline typename V::VariantType FBUnserializer<V>::unserializeThing() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "677:     case FB_SERIALIZE_STRING:",
          "678:       return V::fromString(unserializeString());",
          "679:     case FB_SERIALIZE_STRUCT:",
          "681:     case FB_SERIALIZE_NULL:",
          "682:       ++p_;",
          "683:       return V::createNull();",
          "",
          "[Removed Lines]",
          "680:       return V::fromMap(unserializeMap());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686:     case FB_SERIALIZE_BOOLEAN:",
          "687:       return V::fromBool(unserializeBoolean());",
          "688:     case FB_SERIALIZE_VECTOR:",
          "690:     case FB_SERIALIZE_LIST:",
          "692:     case FB_SERIALIZE_SET:",
          "694:     default:",
          "695:       throw UnserializeError(\"Invalid code: \" + folly::to<std::string>(code)",
          "696:                              + \" at location \" + folly::to<std::string>(p_));",
          "",
          "[Removed Lines]",
          "689:       return V::fromVector(unserializeVector());",
          "691:       return V::fromVector(unserializeList());",
          "693:       return V::fromSet(unserializeSet());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize.h -> hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   double unserializeDouble();",
          "166:   typename V::StringType unserializeString();",
          "167:   folly::StringPiece unserializeStringPiece();",
          "174:   folly::StringPiece getSerializedMap();",
          "177:   void advance(size_t delta);",
          "178:   Code nextCode() const;",
          "",
          "[Removed Lines]",
          "168:   typename V::MapType unserializeMap();",
          "169:   typename V::VectorType unserializeVector();",
          "170:   typename V::VectorType unserializeList();",
          "171:   typename V::SetType unserializeSet();",
          "175:   typename V::VariantType unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h": [
          "File: hphp/runtime/ext/fb/VariantController.h -> hphp/runtime/ext/fVariantController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     return set.size();",
          "284:   }",
          "285:   static void setAppend(SetType& set, const VariantType& v) {",
          "289:       throw HPHP::serialize::UnserializeError(",
          "292:     }",
          "293:     set.append(v);",
          "294:   }",
          "",
          "[Removed Lines]",
          "286:     auto value_type = type(v);",
          "287:     if (value_type != HPHP::serialize::Type::INT64 &&",
          "288:         value_type != HPHP::serialize::Type::STRING) {",
          "290:           \"Unsupported keyset element of type \" +",
          "291:           folly::to<std::string>(value_type));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp": [
          "File: hphp/runtime/ext/fb/ext_fb.cpp -> hphp/runtime/ext/fext_fb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #define FB_UNSERIALIZE_UNEXPECTED_END            0x0002",
          "67: #define FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE  0x0003",
          "68: #define FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE 0x0004",
          "70: #ifdef FACEBOOK",
          "71: # define HHVM_FACEBOOK true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705: const StaticString s_empty(\"\");",
          "707: int fb_compact_unserialize_from_buffer(",
          "710:   CHECK_ENOUGH(1, p, n);",
          "711:   int code = (unsigned char)buf[p];",
          "",
          "[Removed Lines]",
          "708:   Variant& out, const char* buf, int n, int& p) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:       Array arr = Array::CreateVArray();",
          "775:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "776:         Variant value;",
          "778:         if (err) {",
          "779:           return err;",
          "780:         }",
          "",
          "[Removed Lines]",
          "777:         int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "799:           ++p;",
          "800:         } else {",
          "801:           Variant value;",
          "803:           if (err) {",
          "804:             return err;",
          "805:           }",
          "",
          "[Removed Lines]",
          "802:           int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:       Array arr = Array::CreateDArray();",
          "821:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "822:         Variant key;",
          "824:         if (err) {",
          "825:           return err;",
          "826:         }",
          "827:         Variant value;",
          "829:         if (err) {",
          "830:           return err;",
          "831:         }",
          "",
          "[Removed Lines]",
          "823:         int err = fb_compact_unserialize_from_buffer(key, buf, n, p);",
          "828:         err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "862:   Variant ret;",
          "863:   int p = 0;",
          "865:   if (err) {",
          "866:     success = false;",
          "867:     errcode = err;",
          "",
          "[Removed Lines]",
          "864:   int err = fb_compact_unserialize_from_buffer(ret, str, len, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1313:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_END);",
          "1314:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE);",
          "1315:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE);",
          "1317:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);",
          "1318:     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php -> hphp/test/slow/ext_funserialize-bad-set.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php.expect -> hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php -> hphp/test/slow/ext_funserialize_max_depth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php.expect -> hphp/test/slow/ext_funserialize_max_depth.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd6eac168b56de57edd83dcfa1ac168c3988d265",
      "candidate_info": {
        "commit_hash": "dd6eac168b56de57edd83dcfa1ac168c3988d265",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/dd6eac168b56de57edd83dcfa1ac168c3988d265",
        "files": [
          "hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
        ],
        "message": "CVE-2020-1898\n\nDon't allow for unlimited nesting in FBUnserialize or fb_compact_unserialize",
        "before_after_code_files": [
          "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_fb/unserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_fb/unserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
          ],
          "candidate": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi": [
          "File: hphp/hack/hhi/builtins_fb.hhi -> hphp/hack/hhi/builtins_fb.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const FB_UNSERIALIZE_UNEXPECTED_END = 0;",
          "6: const FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE = 0;",
          "7: const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;",
          "9: const FB_SERIALIZE_HACK_ARRAYS = 0;",
          "10: const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: const FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED = 0;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h -> hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:   folly::StringPiece serialized) {",
          "408:   FBUnserializer<V> unserializer(serialized);",
          "410: }",
          "412: template <class V>",
          "",
          "[Removed Lines]",
          "409:   return unserializer.unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524: }",
          "526: template <class V>",
          "528:   p_ += CODE_SIZE;",
          "530:   typename V::MapType ret = V::createMap();",
          "",
          "[Removed Lines]",
          "527: inline typename V::MapType FBUnserializer<V>::unserializeMap() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:       case FB_SERIALIZE_STRING:",
          "537:         {",
          "538:           auto key = unserializeString();",
          "540:           V::mapSet(ret, std::move(key), std::move(value));",
          "541:         }",
          "542:         break;",
          "543:       default:",
          "544:         {",
          "545:           auto key = unserializeInt64();",
          "547:           V::mapSet(ret, std::move(key), std::move(value));",
          "548:         }",
          "549:     }",
          "",
          "[Removed Lines]",
          "539:           auto value = unserializeThing();",
          "546:           auto value = unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556: }",
          "558: template <class V>",
          "560:   p_ += CODE_SIZE;",
          "562:   typename V::VectorType ret = V::createVector();",
          "564:   size_t code = nextCode();",
          "565:   while (code != FB_SERIALIZE_STOP) {",
          "567:     code = nextCode();",
          "568:   }",
          "569:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "559: inline typename V::VectorType FBUnserializer<V>::unserializeVector() {",
          "566:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571: }",
          "573: template <class V>",
          "575:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "574: inline typename V::VectorType FBUnserializer<V>::unserializeList() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "583:   size_t code = nextCode();",
          "584:   while (code != FB_SERIALIZE_STOP) {",
          "586:     code = nextCode();",
          "587:   }",
          "588:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "585:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "590: }",
          "592: template <class V>",
          "594:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "593: inline typename V::SetType FBUnserializer<V>::unserializeSet() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602:   size_t code = nextCode();",
          "603:   while (code != FB_SERIALIZE_STOP) {",
          "605:     code = nextCode();",
          "606:   }",
          "607:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "604:     V::setAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664: }",
          "666: template <class V>",
          "668:   size_t code = nextCode();",
          "670:   switch (code) {",
          "",
          "[Removed Lines]",
          "667: inline typename V::VariantType FBUnserializer<V>::unserializeThing() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "677:     case FB_SERIALIZE_STRING:",
          "678:       return V::fromString(unserializeString());",
          "679:     case FB_SERIALIZE_STRUCT:",
          "681:     case FB_SERIALIZE_NULL:",
          "682:       ++p_;",
          "683:       return V::createNull();",
          "",
          "[Removed Lines]",
          "680:       return V::fromMap(unserializeMap());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686:     case FB_SERIALIZE_BOOLEAN:",
          "687:       return V::fromBool(unserializeBoolean());",
          "688:     case FB_SERIALIZE_VECTOR:",
          "690:     case FB_SERIALIZE_LIST:",
          "692:     case FB_SERIALIZE_SET:",
          "694:     default:",
          "695:       throw UnserializeError(\"Invalid code: \" + folly::to<std::string>(code)",
          "696:                              + \" at location \" + folly::to<std::string>(p_));",
          "",
          "[Removed Lines]",
          "689:       return V::fromVector(unserializeVector());",
          "691:       return V::fromVector(unserializeList());",
          "693:       return V::fromSet(unserializeSet());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize.h -> hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   double unserializeDouble();",
          "166:   typename V::StringType unserializeString();",
          "167:   folly::StringPiece unserializeStringPiece();",
          "174:   folly::StringPiece getSerializedMap();",
          "177:   void advance(size_t delta);",
          "178:   Code nextCode() const;",
          "",
          "[Removed Lines]",
          "168:   typename V::MapType unserializeMap();",
          "169:   typename V::VectorType unserializeVector();",
          "170:   typename V::VectorType unserializeList();",
          "171:   typename V::SetType unserializeSet();",
          "175:   typename V::VariantType unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h": [
          "File: hphp/runtime/ext/fb/VariantController.h -> hphp/runtime/ext/fVariantController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     return set.size();",
          "284:   }",
          "285:   static void setAppend(SetType& set, const VariantType& v) {",
          "289:       throw HPHP::serialize::UnserializeError(",
          "292:     }",
          "293:     set.append(v);",
          "294:   }",
          "",
          "[Removed Lines]",
          "286:     auto value_type = type(v);",
          "287:     if (value_type != HPHP::serialize::Type::INT64 &&",
          "288:         value_type != HPHP::serialize::Type::STRING) {",
          "290:           \"Unsupported keyset element of type \" +",
          "291:           folly::to<std::string>(value_type));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp": [
          "File: hphp/runtime/ext/fb/ext_fb.cpp -> hphp/runtime/ext/fext_fb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #define FB_UNSERIALIZE_UNEXPECTED_END            0x0002",
          "67: #define FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE  0x0003",
          "68: #define FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE 0x0004",
          "70: #ifdef FACEBOOK",
          "71: # define HHVM_FACEBOOK true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705: const StaticString s_empty(\"\");",
          "707: int fb_compact_unserialize_from_buffer(",
          "710:   CHECK_ENOUGH(1, p, n);",
          "711:   int code = (unsigned char)buf[p];",
          "",
          "[Removed Lines]",
          "708:   Variant& out, const char* buf, int n, int& p) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:       Array arr = Array::CreateVArray();",
          "775:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "776:         Variant value;",
          "778:         if (err) {",
          "779:           return err;",
          "780:         }",
          "",
          "[Removed Lines]",
          "777:         int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "799:           ++p;",
          "800:         } else {",
          "801:           Variant value;",
          "803:           if (err) {",
          "804:             return err;",
          "805:           }",
          "",
          "[Removed Lines]",
          "802:           int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:       Array arr = Array::CreateDArray();",
          "821:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "822:         Variant key;",
          "824:         if (err) {",
          "825:           return err;",
          "826:         }",
          "827:         Variant value;",
          "829:         if (err) {",
          "830:           return err;",
          "831:         }",
          "",
          "[Removed Lines]",
          "823:         int err = fb_compact_unserialize_from_buffer(key, buf, n, p);",
          "828:         err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "862:   Variant ret;",
          "863:   int p = 0;",
          "865:   if (err) {",
          "866:     success = false;",
          "867:     errcode = err;",
          "",
          "[Removed Lines]",
          "864:   int err = fb_compact_unserialize_from_buffer(ret, str, len, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1313:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_END);",
          "1314:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE);",
          "1315:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE);",
          "1317:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);",
          "1318:     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php -> hphp/test/slow/ext_funserialize-bad-set.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php.expect -> hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php -> hphp/test/slow/ext_funserialize_max_depth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php.expect -> hphp/test/slow/ext_funserialize_max_depth.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e42c204b115fa4165afc033eb48ed430b1350dbd",
      "candidate_info": {
        "commit_hash": "e42c204b115fa4165afc033eb48ed430b1350dbd",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/e42c204b115fa4165afc033eb48ed430b1350dbd",
        "files": [
          "hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
        ],
        "message": "CVE-2020-1898\n\nDon't allow for unlimited nesting in FBUnserialize or fb_compact_unserialize",
        "before_after_code_files": [
          "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
          "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
          "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
          "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fb/FBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fb/VariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fb/ext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_fb/unserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_fb/unserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_fb/unserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_fb/unserialize_max_depth.php.expect"
          ],
          "candidate": [
            "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
            "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h",
            "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h",
            "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php",
            "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php",
            "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/builtins_fb.hhi||hphp/hack/hhi/builtins_fb.hhi": [
          "File: hphp/hack/hhi/builtins_fb.hhi -> hphp/hack/hhi/builtins_fb.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const FB_UNSERIALIZE_UNEXPECTED_END = 0;",
          "6: const FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE = 0;",
          "7: const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;",
          "9: const FB_SERIALIZE_HACK_ARRAYS = 0;",
          "10: const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: const FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED = 0;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h||hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h -> hphp/runtime/ext/fFBSerialize/FBSerialize-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:   folly::StringPiece serialized) {",
          "408:   FBUnserializer<V> unserializer(serialized);",
          "410: }",
          "412: template <class V>",
          "",
          "[Removed Lines]",
          "409:   return unserializer.unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524: }",
          "526: template <class V>",
          "528:   p_ += CODE_SIZE;",
          "530:   typename V::MapType ret = V::createMap();",
          "",
          "[Removed Lines]",
          "527: inline typename V::MapType FBUnserializer<V>::unserializeMap() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:       case FB_SERIALIZE_STRING:",
          "537:         {",
          "538:           auto key = unserializeString();",
          "540:           V::mapSet(ret, std::move(key), std::move(value));",
          "541:         }",
          "542:         break;",
          "543:       default:",
          "544:         {",
          "545:           auto key = unserializeInt64();",
          "547:           V::mapSet(ret, std::move(key), std::move(value));",
          "548:         }",
          "549:     }",
          "",
          "[Removed Lines]",
          "539:           auto value = unserializeThing();",
          "546:           auto value = unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556: }",
          "558: template <class V>",
          "560:   p_ += CODE_SIZE;",
          "562:   typename V::VectorType ret = V::createVector();",
          "564:   size_t code = nextCode();",
          "565:   while (code != FB_SERIALIZE_STOP) {",
          "567:     code = nextCode();",
          "568:   }",
          "569:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "559: inline typename V::VectorType FBUnserializer<V>::unserializeVector() {",
          "566:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571: }",
          "573: template <class V>",
          "575:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "574: inline typename V::VectorType FBUnserializer<V>::unserializeList() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "583:   size_t code = nextCode();",
          "584:   while (code != FB_SERIALIZE_STOP) {",
          "586:     code = nextCode();",
          "587:   }",
          "588:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "585:     V::vectorAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "590: }",
          "592: template <class V>",
          "594:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "593: inline typename V::SetType FBUnserializer<V>::unserializeSet() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602:   size_t code = nextCode();",
          "603:   while (code != FB_SERIALIZE_STOP) {",
          "605:     code = nextCode();",
          "606:   }",
          "607:   p_ += CODE_SIZE;",
          "",
          "[Removed Lines]",
          "604:     V::setAppend(ret, unserializeThing());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664: }",
          "666: template <class V>",
          "668:   size_t code = nextCode();",
          "670:   switch (code) {",
          "",
          "[Removed Lines]",
          "667: inline typename V::VariantType FBUnserializer<V>::unserializeThing() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "677:     case FB_SERIALIZE_STRING:",
          "678:       return V::fromString(unserializeString());",
          "679:     case FB_SERIALIZE_STRUCT:",
          "681:     case FB_SERIALIZE_NULL:",
          "682:       ++p_;",
          "683:       return V::createNull();",
          "",
          "[Removed Lines]",
          "680:       return V::fromMap(unserializeMap());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686:     case FB_SERIALIZE_BOOLEAN:",
          "687:       return V::fromBool(unserializeBoolean());",
          "688:     case FB_SERIALIZE_VECTOR:",
          "690:     case FB_SERIALIZE_LIST:",
          "692:     case FB_SERIALIZE_SET:",
          "694:     default:",
          "695:       throw UnserializeError(\"Invalid code: \" + folly::to<std::string>(code)",
          "696:                              + \" at location \" + folly::to<std::string>(p_));",
          "",
          "[Removed Lines]",
          "689:       return V::fromVector(unserializeVector());",
          "691:       return V::fromVector(unserializeList());",
          "693:       return V::fromSet(unserializeSet());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/FBSerialize/FBSerialize.h||hphp/runtime/ext/fFBSerialize/FBSerialize.h": [
          "File: hphp/runtime/ext/fb/FBSerialize/FBSerialize.h -> hphp/runtime/ext/fFBSerialize/FBSerialize.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   double unserializeDouble();",
          "166:   typename V::StringType unserializeString();",
          "167:   folly::StringPiece unserializeStringPiece();",
          "174:   folly::StringPiece getSerializedMap();",
          "177:   void advance(size_t delta);",
          "178:   Code nextCode() const;",
          "",
          "[Removed Lines]",
          "168:   typename V::MapType unserializeMap();",
          "169:   typename V::VectorType unserializeVector();",
          "170:   typename V::VectorType unserializeList();",
          "171:   typename V::SetType unserializeSet();",
          "175:   typename V::VariantType unserializeThing();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/VariantController.h||hphp/runtime/ext/fVariantController.h": [
          "File: hphp/runtime/ext/fb/VariantController.h -> hphp/runtime/ext/fVariantController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     return set.size();",
          "280:   }",
          "281:   static void setAppend(SetType& set, const VariantType& v) {",
          "285:       throw HPHP::serialize::UnserializeError(",
          "288:     }",
          "289:     set.append(v);",
          "290:   }",
          "",
          "[Removed Lines]",
          "282:     auto value_type = type(v);",
          "283:     if (value_type != HPHP::serialize::Type::INT64 &&",
          "284:         value_type != HPHP::serialize::Type::STRING) {",
          "286:           \"Unsupported keyset element of type \" +",
          "287:           folly::to<std::string>(value_type));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/fb/ext_fb.cpp||hphp/runtime/ext/fext_fb.cpp": [
          "File: hphp/runtime/ext/fb/ext_fb.cpp -> hphp/runtime/ext/fext_fb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #define FB_UNSERIALIZE_UNEXPECTED_END            0x0002",
          "67: #define FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE  0x0003",
          "68: #define FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE 0x0004",
          "70: #ifdef FACEBOOK",
          "71: # define HHVM_FACEBOOK true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700: const StaticString s_empty(\"\");",
          "702: int fb_compact_unserialize_from_buffer(",
          "705:   CHECK_ENOUGH(1, p, n);",
          "706:   int code = (unsigned char)buf[p];",
          "",
          "[Removed Lines]",
          "703:   Variant& out, const char* buf, int n, int& p) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "769:       Array arr = Array::CreateVArray();",
          "770:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "771:         Variant value;",
          "773:         if (err) {",
          "774:           return err;",
          "775:         }",
          "",
          "[Removed Lines]",
          "772:         int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "794:           ++p;",
          "795:         } else {",
          "796:           Variant value;",
          "798:           if (err) {",
          "799:             return err;",
          "800:           }",
          "",
          "[Removed Lines]",
          "797:           int err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "815:       Array arr = Array::CreateDArray();",
          "816:       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {",
          "817:         Variant key;",
          "819:         if (err) {",
          "820:           return err;",
          "821:         }",
          "822:         Variant value;",
          "824:         if (err) {",
          "825:           return err;",
          "826:         }",
          "",
          "[Removed Lines]",
          "818:         int err = fb_compact_unserialize_from_buffer(key, buf, n, p);",
          "823:         err = fb_compact_unserialize_from_buffer(value, buf, n, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "857:   Variant ret;",
          "858:   int p = 0;",
          "860:   if (err) {",
          "861:     success = false;",
          "862:     errcode = err;",
          "",
          "[Removed Lines]",
          "859:   int err = fb_compact_unserialize_from_buffer(ret, str, len, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1308:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_END);",
          "1309:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE);",
          "1310:     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE);",
          "1312:     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);",
          "1313:     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php||hphp/test/slow/ext_funserialize-bad-set.php": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php -> hphp/test/slow/ext_funserialize-bad-set.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize-bad-set.php.expect||hphp/test/slow/ext_funserialize-bad-set.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize-bad-set.php.expect -> hphp/test/slow/ext_funserialize-bad-set.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php||hphp/test/slow/ext_funserialize_max_depth.php": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php -> hphp/test/slow/ext_funserialize_max_depth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_fb/unserialize_max_depth.php.expect||hphp/test/slow/ext_funserialize_max_depth.php.expect": [
          "File: hphp/test/slow/ext_fb/unserialize_max_depth.php.expect -> hphp/test/slow/ext_funserialize_max_depth.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}