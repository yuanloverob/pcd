{
  "cve_id": "CVE-2014-1690",
  "cve_desc": "The help function in net/netfilter/nf_nat_irc.c in the Linux kernel before 3.12.8 allows remote attackers to obtain sensitive information from kernel memory by establishing an IRC DCC session in which incorrect packet data is transmitted during use of the NAT mangle feature.",
  "repo": "torvalds/linux",
  "patch_hash": "2690d97ade05c5325cbf7c72b94b90d265659886",
  "patch_info": {
    "commit_hash": "2690d97ade05c5325cbf7c72b94b90d265659886",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/2690d97ade05c5325cbf7c72b94b90d265659886",
    "files": [
      "net/netfilter/nf_nat_irc.c"
    ],
    "message": "netfilter: nf_nat: fix access to uninitialized buffer in IRC NAT helper\n\nCommit 5901b6be885e attempted to introduce IPv6 support into\nIRC NAT helper. By doing so, the following code seemed to be removed\nby accident:\n\n  ip = ntohl(exp->master->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3.ip);\n  sprintf(buffer, \"%u %u\", ip, port);\n  pr_debug(\"nf_nat_irc: inserting '%s' == %pI4, port %u\\n\", buffer, &ip, port);\n\nThis leads to the fact that buffer[] was left uninitialized and\ncontained some stack value. When we call nf_nat_mangle_tcp_packet(),\nwe call strlen(buffer) on excatly this uninitialized buffer. If we\nare unlucky and the skb has enough tailroom, we overwrite resp. leak\ncontents with values that sit on our stack into the packet and send\nthat out to the receiver.\n\nSince the rather informal DCC spec [1] does not seem to specify\nIPv6 support right now, we log such occurences so that admins can\nact accordingly, and drop the packet. I've looked into XChat source,\nand IPv6 is not supported there: addresses are in u32 and print\nvia %u format string.\n\nTherefore, restore old behaviour as in IPv4, use snprintf(). The\nIRC helper does not support IPv6 by now. By this, we can safely use\nstrlen(buffer) in nf_nat_mangle_tcp_packet() and prevent a buffer\noverflow. Also simplify some code as we now have ct variable anyway.\n\n  [1] http://www.irchelp.org/irchelp/rfc/ctcpspec.html\n\nFixes: 5901b6be885e (\"netfilter: nf_nat: support IPv6 in IRC NAT helper\")\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nCc: Harald Welte <laforge@gnumonks.org>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
    "before_after_code_files": [
      "net/netfilter/nf_nat_irc.c||net/netfilter/nf_nat_irc.c"
    ]
  },
  "patch_diff": {
    "net/netfilter/nf_nat_irc.c||net/netfilter/nf_nat_irc.c": [
      "File: net/netfilter/nf_nat_irc.c -> net/netfilter/nf_nat_irc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:     struct nf_conntrack_expect *exp)",
      "35: {",
      "36:  char buffer[sizeof(\"4294967296 65635\")];",
      "37:  u_int16_t port;",
      "38:  unsigned int ret;",
      "41:  exp->saved_proto.tcp.port = exp->tuple.dst.u.tcp.port;",
      "42:  exp->dir = IP_CT_DIR_REPLY;",
      "43:  exp->expectfn = nf_nat_follow_master;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:  struct nf_conn *ct = exp->master;",
      "38:  union nf_inet_addr newaddr;",
      "43:  newaddr = ct->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:  }",
      "59:  if (port == 0) {",
      "61:   return NF_DROP;",
      "62:  }",
      "67:  if (ret != NF_ACCEPT) {",
      "69:   nf_ct_unexpect_related(exp);",
      "70:  }",
      "71:  return ret;",
      "72: }",
      "",
      "[Removed Lines]",
      "60:   nf_ct_helper_log(skb, exp->master, \"all ports in use\");",
      "64:  ret = nf_nat_mangle_tcp_packet(skb, exp->master, ctinfo,",
      "65:            protoff, matchoff, matchlen, buffer,",
      "66:            strlen(buffer));",
      "68:   nf_ct_helper_log(skb, exp->master, \"cannot mangle packet\");",
      "",
      "[Added Lines]",
      "64:   nf_ct_helper_log(skb, ct, \"all ports in use\");",
      "82:  snprintf(buffer, sizeof(buffer), \"%u %u\", ntohl(newaddr.ip), port);",
      "83:  pr_debug(\"nf_nat_irc: inserting '%s' == %pI4, port %u\\n\",",
      "84:    buffer, &newaddr.ip, port);",
      "86:  ret = nf_nat_mangle_tcp_packet(skb, ct, ctinfo, protoff, matchoff,",
      "87:            matchlen, buffer, strlen(buffer));",
      "89:   nf_ct_helper_log(skb, ct, \"cannot mangle packet\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b20ab9cc63ca4605aec154cf54faa8455749f3f6",
      "candidate_info": {
        "commit_hash": "b20ab9cc63ca4605aec154cf54faa8455749f3f6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b20ab9cc63ca4605aec154cf54faa8455749f3f6",
        "files": [
          "include/net/netfilter/nf_conntrack_helper.h",
          "net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c",
          "net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c",
          "net/netfilter/nf_conntrack_amanda.c",
          "net/netfilter/nf_conntrack_ftp.c",
          "net/netfilter/nf_conntrack_h323_main.c",
          "net/netfilter/nf_conntrack_helper.c",
          "net/netfilter/nf_conntrack_irc.c",
          "net/netfilter/nf_conntrack_sane.c",
          "net/netfilter/nf_conntrack_sip.c",
          "net/netfilter/nf_conntrack_tftp.c",
          "net/netfilter/nf_nat_amanda.c",
          "net/netfilter/nf_nat_ftp.c",
          "net/netfilter/nf_nat_irc.c",
          "net/netfilter/nf_nat_sip.c",
          "net/netfilter/nf_nat_tftp.c"
        ],
        "message": "netfilter: nf_ct_helper: better logging for dropped packets\n\nConnection tracking helpers have to drop packets under exceptional\nsituations. Currently, the user gets the following logging message\nin case that happens:\n\n\tnf_ct_%s: dropping packet ...\n\nHowever, depending on the helper, there are different reasons why a\npacket can be dropped.\n\nThis patch modifies the existing code to provide more specific\nerror message in the scope of each helper to help users to debug\nthe reason why the packet has been dropped, ie:\n\n\tnf_ct_%s: dropping packet: reason ...\n\nThanks to Joe Perches for many formatting suggestions.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/net/netfilter/nf_conntrack_helper.h||include/net/netfilter/nf_conntrack_helper.h",
          "net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c||net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c",
          "net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c||net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c",
          "net/netfilter/nf_conntrack_amanda.c||net/netfilter/nf_conntrack_amanda.c",
          "net/netfilter/nf_conntrack_ftp.c||net/netfilter/nf_conntrack_ftp.c",
          "net/netfilter/nf_conntrack_h323_main.c||net/netfilter/nf_conntrack_h323_main.c",
          "net/netfilter/nf_conntrack_helper.c||net/netfilter/nf_conntrack_helper.c",
          "net/netfilter/nf_conntrack_irc.c||net/netfilter/nf_conntrack_irc.c",
          "net/netfilter/nf_conntrack_sane.c||net/netfilter/nf_conntrack_sane.c",
          "net/netfilter/nf_conntrack_sip.c||net/netfilter/nf_conntrack_sip.c",
          "net/netfilter/nf_conntrack_tftp.c||net/netfilter/nf_conntrack_tftp.c",
          "net/netfilter/nf_nat_amanda.c||net/netfilter/nf_nat_amanda.c",
          "net/netfilter/nf_nat_ftp.c||net/netfilter/nf_nat_ftp.c",
          "net/netfilter/nf_nat_irc.c||net/netfilter/nf_nat_irc.c",
          "net/netfilter/nf_nat_sip.c||net/netfilter/nf_nat_sip.c",
          "net/netfilter/nf_nat_tftp.c||net/netfilter/nf_nat_tftp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/netfilter/nf_nat_irc.c||net/netfilter/nf_nat_irc.c"
          ],
          "candidate": [
            "net/netfilter/nf_nat_irc.c||net/netfilter/nf_nat_irc.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_conntrack_helper.h||include/net/netfilter/nf_conntrack_helper.h": [
          "File: include/net/netfilter/nf_conntrack_helper.h -> include/net/netfilter/nf_conntrack_helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  void (*expectfn)(struct nf_conn *ct, struct nf_conntrack_expect *exp);",
          "101: };",
          "103: void nf_ct_helper_expectfn_register(struct nf_ct_helper_expectfn *n);",
          "104: void nf_ct_helper_expectfn_unregister(struct nf_ct_helper_expectfn *n);",
          "105: struct nf_ct_helper_expectfn *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: __printf(3,4)",
          "104: void nf_ct_helper_log(struct sk_buff *skb, const struct nf_conn *ct,",
          "105:         const char *fmt, ...);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c||net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c": [
          "File: net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c -> net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  enum ip_conntrack_info ctinfo;",
          "101:  const struct nf_conn_help *help;",
          "102:  const struct nf_conntrack_helper *helper;",
          "106:  ct = nf_ct_get(skb, &ctinfo);",
          "",
          "[Removed Lines]",
          "103:  unsigned int ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:  if (!helper)",
          "117:   return NF_ACCEPT;",
          "126: }",
          "128: static unsigned int ipv4_confirm(unsigned int hooknum,",
          "",
          "[Removed Lines]",
          "119:  ret = helper->help(skb, skb_network_offset(skb) + ip_hdrlen(skb),",
          "120:       ct, ctinfo);",
          "121:  if (ret != NF_ACCEPT && (ret & NF_VERDICT_MASK) != NF_QUEUE) {",
          "122:   nf_log_packet(NFPROTO_IPV4, hooknum, skb, in, out, NULL,",
          "123:          \"nf_ct_%s: dropping packet\", helper->name);",
          "124:  }",
          "125:  return ret;",
          "",
          "[Added Lines]",
          "118:  return helper->help(skb, skb_network_offset(skb) + ip_hdrlen(skb),",
          "119:        ct, ctinfo);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c||net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c": [
          "File: net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c -> net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  const struct nf_conn_help *help;",
          "105:  const struct nf_conntrack_helper *helper;",
          "106:  enum ip_conntrack_info ctinfo;",
          "108:  __be16 frag_off;",
          "109:  int protoff;",
          "110:  u8 nexthdr;",
          "",
          "[Removed Lines]",
          "107:  unsigned int ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:   return NF_ACCEPT;",
          "131:  }",
          "139: }",
          "141: static unsigned int ipv6_confirm(unsigned int hooknum,",
          "",
          "[Removed Lines]",
          "133:  ret = helper->help(skb, protoff, ct, ctinfo);",
          "134:  if (ret != NF_ACCEPT && (ret & NF_VERDICT_MASK) != NF_QUEUE) {",
          "135:   nf_log_packet(NFPROTO_IPV6, hooknum, skb, in, out, NULL,",
          "136:          \"nf_ct_%s: dropping packet\", helper->name);",
          "137:  }",
          "138:  return ret;",
          "",
          "[Added Lines]",
          "132:  return helper->help(skb, protoff, ct, ctinfo);",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_amanda.c||net/netfilter/nf_conntrack_amanda.c": [
          "File: net/netfilter/nf_conntrack_amanda.c -> net/netfilter/nf_conntrack_amanda.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   exp = nf_ct_expect_alloc(ct);",
          "147:   if (exp == NULL) {",
          "148:    ret = NF_DROP;",
          "149:    goto out;",
          "150:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:    nf_ct_helper_log(skb, ct, \"cannot alloc expectation\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:   if (nf_nat_amanda && ct->status & IPS_NAT_MASK)",
          "159:    ret = nf_nat_amanda(skb, ctinfo, protoff,",
          "160:          off - dataoff, len, exp);",
          "162:    ret = NF_DROP;",
          "163:   nf_ct_expect_put(exp);",
          "164:  }",
          "",
          "[Removed Lines]",
          "161:   else if (nf_ct_expect_related(exp) != 0)",
          "",
          "[Added Lines]",
          "162:   else if (nf_ct_expect_related(exp) != 0) {",
          "163:    nf_ct_helper_log(skb, ct, \"cannot add expectation\");",
          "165:   }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_ftp.c||net/netfilter/nf_conntrack_ftp.c": [
          "File: net/netfilter/nf_conntrack_ftp.c -> net/netfilter/nf_conntrack_ftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:      connection tracking, not packet filtering.",
          "436:      However, it is necessary for accurate tracking in",
          "440:   ret = NF_DROP;",
          "441:   goto out;",
          "",
          "[Removed Lines]",
          "438:   pr_debug(\"conntrack_ftp: partial %s %u+%u\\n\",",
          "439:     search[dir][i].pattern,  ntohl(th->seq), datalen);",
          "",
          "[Added Lines]",
          "438:   nf_ct_helper_log(skb, ct, \"partial matching of `%s'\",",
          "439:             search[dir][i].pattern);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:  exp = nf_ct_expect_alloc(ct);",
          "452:  if (exp == NULL) {",
          "453:   ret = NF_DROP;",
          "454:   goto out;",
          "455:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:   nf_ct_helper_log(skb, ct, \"cannot alloc expectation\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "500:      protoff, matchoff, matchlen, exp);",
          "501:  else {",
          "504:    ret = NF_DROP;",
          "506:    ret = NF_ACCEPT;",
          "507:  }",
          "",
          "[Removed Lines]",
          "503:   if (nf_ct_expect_related(exp) != 0)",
          "505:   else",
          "",
          "[Added Lines]",
          "504:   if (nf_ct_expect_related(exp) != 0) {",
          "505:    nf_ct_helper_log(skb, ct, \"cannot add expectation\");",
          "507:   } else",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_h323_main.c||net/netfilter/nf_conntrack_h323_main.c": [
          "File: net/netfilter/nf_conntrack_h323_main.c -> net/netfilter/nf_conntrack_h323_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:       drop:",
          "625:  spin_unlock_bh(&nf_h323_lock);",
          "627:  return NF_DROP;",
          "628: }",
          "",
          "[Removed Lines]",
          "626:  net_info_ratelimited(\"nf_ct_h245: packet dropped\\n\");",
          "",
          "[Added Lines]",
          "626:  nf_ct_helper_log(skb, ct, \"cannot process H.245 message\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1198:       drop:",
          "1199:  spin_unlock_bh(&nf_h323_lock);",
          "1201:  return NF_DROP;",
          "1202: }",
          "",
          "[Removed Lines]",
          "1200:  net_info_ratelimited(\"nf_ct_q931: packet dropped\\n\");",
          "",
          "[Added Lines]",
          "1200:  nf_ct_helper_log(skb, ct, \"cannot process Q.931 message\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1796:       drop:",
          "1797:  spin_unlock_bh(&nf_h323_lock);",
          "1799:  return NF_DROP;",
          "1800: }",
          "",
          "[Removed Lines]",
          "1798:  net_info_ratelimited(\"nf_ct_ras: packet dropped\\n\");",
          "",
          "[Added Lines]",
          "1798:  nf_ct_helper_log(skb, ct, \"cannot process RAS message\");",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_helper.c||net/netfilter/nf_conntrack_helper.c": [
          "File: net/netfilter/nf_conntrack_helper.c -> net/netfilter/nf_conntrack_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <net/netfilter/nf_conntrack_helper.h>",
          "29: #include <net/netfilter/nf_conntrack_core.h>",
          "30: #include <net/netfilter/nf_conntrack_extend.h>",
          "32: static DEFINE_MUTEX(nf_ct_helper_mutex);",
          "33: struct hlist_head *nf_ct_helper_hash __read_mostly;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <net/netfilter/nf_log.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332: }",
          "333: EXPORT_SYMBOL_GPL(nf_ct_helper_expectfn_find_by_symbol);",
          "335: int nf_conntrack_helper_register(struct nf_conntrack_helper *me)",
          "336: {",
          "337:  int ret = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: __printf(3, 4)",
          "337: void nf_ct_helper_log(struct sk_buff *skb, const struct nf_conn *ct,",
          "338:         const char *fmt, ...)",
          "339: {",
          "340:  const struct nf_conn_help *help;",
          "341:  const struct nf_conntrack_helper *helper;",
          "344:  help = nfct_help(ct);",
          "347:  helper = rcu_dereference(help->helper);",
          "349:  nf_log_packet(nf_ct_l3num(ct), 0, skb, NULL, NULL, NULL,",
          "350:         \"nf_ct_%s: dropping packet: %s \", helper->name, fmt);",
          "351: }",
          "352: EXPORT_SYMBOL_GPL(nf_ct_helper_log);",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_irc.c||net/netfilter/nf_conntrack_irc.c": [
          "File: net/netfilter/nf_conntrack_irc.c -> net/netfilter/nf_conntrack_irc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:    exp = nf_ct_expect_alloc(ct);",
          "196:    if (exp == NULL) {",
          "197:     ret = NF_DROP;",
          "198:     goto out;",
          "199:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     nf_ct_helper_log(skb, ct,",
          "198:        \"cannot alloc expectation\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:        addr_beg_p - ib_ptr,",
          "211:        addr_end_p - addr_beg_p,",
          "212:        exp);",
          "214:     ret = NF_DROP;",
          "215:    nf_ct_expect_put(exp);",
          "216:    goto out;",
          "217:   }",
          "",
          "[Removed Lines]",
          "213:    else if (nf_ct_expect_related(exp) != 0)",
          "",
          "[Added Lines]",
          "215:    else if (nf_ct_expect_related(exp) != 0) {",
          "216:     nf_ct_helper_log(skb, ct,",
          "217:        \"cannot add expectation\");",
          "219:    }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_sane.c||net/netfilter/nf_conntrack_sane.c": [
          "File: net/netfilter/nf_conntrack_sane.c -> net/netfilter/nf_conntrack_sane.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  exp = nf_ct_expect_alloc(ct);",
          "140:  if (exp == NULL) {",
          "141:   ret = NF_DROP;",
          "142:   goto out;",
          "143:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:   nf_ct_helper_log(skb, ct, \"cannot alloc expectation\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:  nf_ct_dump_tuple(&exp->tuple);",
          "155:   ret = NF_DROP;",
          "157:  nf_ct_expect_put(exp);",
          "",
          "[Removed Lines]",
          "154:  if (nf_ct_expect_related(exp) != 0)",
          "",
          "[Added Lines]",
          "155:  if (nf_ct_expect_related(exp) != 0) {",
          "156:   nf_ct_helper_log(skb, ct, \"cannot add expectation\");",
          "158:  }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_sip.c||net/netfilter/nf_conntrack_sip.c": [
          "File: net/netfilter/nf_conntrack_sip.c -> net/netfilter/nf_conntrack_sip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1095:   port = simple_strtoul(*dptr + mediaoff, NULL, 10);",
          "1096:   if (port == 0)",
          "1097:    continue;",
          "1099:    return NF_DROP;",
          "1102:   maddr_len = 0;",
          "",
          "[Removed Lines]",
          "1098:   if (port < 1024 || port > 65535)",
          "",
          "[Added Lines]",
          "1098:   if (port < 1024 || port > 65535) {",
          "1099:    nf_ct_helper_log(skb, ct, \"wrong port %u\", port);",
          "1101:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1107:    memcpy(&rtp_addr, &maddr, sizeof(rtp_addr));",
          "1108:   } else if (caddr_len)",
          "1109:    memcpy(&rtp_addr, &caddr, sizeof(rtp_addr));",
          "1111:    return NF_DROP;",
          "1113:   ret = set_expected_rtp_rtcp(skb, protoff, dataoff,",
          "1114:          dptr, datalen,",
          "1115:          &rtp_addr, htons(port), t->class,",
          "1116:          mediaoff, medialen);",
          "1118:    return ret;",
          "1121:   if (maddr_len && nf_nat_sdp_addr && ct->status & IPS_NAT_MASK) {",
          "",
          "[Removed Lines]",
          "1110:   else",
          "1117:   if (ret != NF_ACCEPT)",
          "",
          "[Added Lines]",
          "1112:   else {",
          "1113:    nf_ct_helper_log(skb, ct, \"cannot parse SDP message\");",
          "1115:   }",
          "1121:   if (ret != NF_ACCEPT) {",
          "1122:    nf_ct_helper_log(skb, ct,",
          "1123:       \"cannot add expectation for voice\");",
          "1125:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123:            dptr, datalen, mediaoff,",
          "1124:            SDP_HDR_CONNECTION, SDP_HDR_MEDIA,",
          "1125:            &rtp_addr);",
          "1127:     return ret;",
          "1128:   }",
          "1129:   i++;",
          "1130:  }",
          "",
          "[Removed Lines]",
          "1126:    if (ret != NF_ACCEPT)",
          "",
          "[Added Lines]",
          "1133:    if (ret != NF_ACCEPT) {",
          "1134:     nf_ct_helper_log(skb, ct, \"cannot mangle SDP\");",
          "1136:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1258:  ret = ct_sip_parse_header_uri(ct, *dptr, NULL, *datalen,",
          "1259:           SIP_HDR_CONTACT, NULL,",
          "1260:           &matchoff, &matchlen, &daddr, &port);",
          "1262:   return NF_DROP;",
          "1264:   return NF_ACCEPT;",
          "",
          "[Removed Lines]",
          "1261:  if (ret < 0)",
          "1263:  else if (ret == 0)",
          "",
          "[Added Lines]",
          "1270:  if (ret < 0) {",
          "1271:   nf_ct_helper_log(skb, ct, \"cannot parse contact\");",
          "1273:  } else if (ret == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1274:  if (ct_sip_parse_numerical_param(ct, *dptr,",
          "1275:       matchoff + matchlen, *datalen,",
          "1277:   return NF_DROP;",
          "1279:  if (expires == 0) {",
          "1280:   ret = NF_ACCEPT;",
          "",
          "[Removed Lines]",
          "1276:       \"expires=\", NULL, NULL, &expires) < 0)",
          "",
          "[Added Lines]",
          "1286:       \"expires=\", NULL, NULL, &expires) < 0) {",
          "1287:   nf_ct_helper_log(skb, ct, \"cannot parse expires\");",
          "1289:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1282:  }",
          "1284:  exp = nf_ct_expect_alloc(ct);",
          "1286:   return NF_DROP;",
          "1288:  saddr = NULL;",
          "1289:  if (sip_direct_signalling)",
          "",
          "[Removed Lines]",
          "1285:  if (!exp)",
          "",
          "[Added Lines]",
          "1297:  if (!exp) {",
          "1298:   nf_ct_helper_log(skb, ct, \"cannot alloc expectation\");",
          "1300:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1300:   ret = nf_nat_sip_expect(skb, protoff, dataoff, dptr, datalen,",
          "1301:      exp, matchoff, matchlen);",
          "1302:  else {",
          "1304:    ret = NF_DROP;",
          "1306:    ret = NF_ACCEPT;",
          "1307:  }",
          "1308:  nf_ct_expect_put(exp);",
          "",
          "[Removed Lines]",
          "1303:   if (nf_ct_expect_related(exp) != 0)",
          "1305:   else",
          "",
          "[Added Lines]",
          "1317:   if (nf_ct_expect_related(exp) != 0) {",
          "1318:    nf_ct_helper_log(skb, ct, \"cannot add expectation\");",
          "1320:   } else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1356:            SIP_HDR_CONTACT, &in_contact,",
          "1357:            &matchoff, &matchlen,",
          "1358:            &addr, &port);",
          "1360:    return NF_DROP;",
          "1362:    break;",
          "",
          "[Removed Lines]",
          "1359:   if (ret < 0)",
          "1361:   else if (ret == 0)",
          "",
          "[Added Lines]",
          "1374:   if (ret < 0) {",
          "1375:    nf_ct_helper_log(skb, ct, \"cannot parse contact\");",
          "1377:   } else if (ret == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1373:          matchoff + matchlen,",
          "1375:          NULL, NULL, &c_expires);",
          "1377:    return NF_DROP;",
          "1378:   if (c_expires == 0)",
          "1379:    break;",
          "1380:   if (refresh_signalling_expectation(ct, &addr, proto, port,",
          "",
          "[Removed Lines]",
          "1376:   if (ret < 0)",
          "",
          "[Added Lines]",
          "1392:   if (ret < 0) {",
          "1393:    nf_ct_helper_log(skb, ct, \"cannot parse expires\");",
          "1395:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1408:  if (*datalen < strlen(\"SIP/2.0 200\"))",
          "1409:   return NF_ACCEPT;",
          "1410:  code = simple_strtoul(*dptr + strlen(\"SIP/2.0 \"), NULL, 10);",
          "1412:   return NF_DROP;",
          "1414:  if (ct_sip_get_header(ct, *dptr, 0, *datalen, SIP_HDR_CSEQ,",
          "1416:   return NF_DROP;",
          "1417:  cseq = simple_strtoul(*dptr + matchoff, NULL, 10);",
          "1419:   return NF_DROP;",
          "1420:  matchend = matchoff + matchlen + 1;",
          "1422:  for (i = 0; i < ARRAY_SIZE(sip_handlers); i++) {",
          "",
          "[Removed Lines]",
          "1411:  if (!code)",
          "1415:          &matchoff, &matchlen) <= 0)",
          "1418:  if (!cseq)",
          "",
          "[Added Lines]",
          "1429:  if (!code) {",
          "1430:   nf_ct_helper_log(skb, ct, \"cannot get code\");",
          "1432:  }",
          "1435:          &matchoff, &matchlen) <= 0) {",
          "1436:   nf_ct_helper_log(skb, ct, \"cannot parse cseq\");",
          "1438:  }",
          "1440:  if (!cseq) {",
          "1441:   nf_ct_helper_log(skb, ct, \"cannot get cseq\");",
          "1443:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1471:    continue;",
          "1473:   if (ct_sip_get_header(ct, *dptr, 0, *datalen, SIP_HDR_CSEQ,",
          "1475:    return NF_DROP;",
          "1476:   cseq = simple_strtoul(*dptr + matchoff, NULL, 10);",
          "1478:    return NF_DROP;",
          "1480:   return handler->request(skb, protoff, dataoff, dptr, datalen,",
          "1481:      cseq);",
          "",
          "[Removed Lines]",
          "1474:           &matchoff, &matchlen) <= 0)",
          "1477:   if (!cseq)",
          "",
          "[Added Lines]",
          "1498:           &matchoff, &matchlen) <= 0) {",
          "1499:    nf_ct_helper_log(skb, ct, \"cannot parse cseq\");",
          "1501:   }",
          "1503:   if (!cseq) {",
          "1504:    nf_ct_helper_log(skb, ct, \"cannot get cseq\");",
          "1506:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1498:  if (ret == NF_ACCEPT && ct->status & IPS_NAT_MASK) {",
          "1499:   nf_nat_sip = rcu_dereference(nf_nat_sip_hook);",
          "1500:   if (nf_nat_sip && !nf_nat_sip(skb, protoff, dataoff,",
          "1502:    ret = NF_DROP;",
          "1503:  }",
          "1505:  return ret;",
          "",
          "[Removed Lines]",
          "1501:            dptr, datalen))",
          "",
          "[Added Lines]",
          "1529:            dptr, datalen)) {",
          "1530:    nf_ct_helper_log(skb, ct, \"cannot NAT SIP message\");",
          "1532:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1563:   end += strlen(\"\\r\\n\\r\\n\") + clen;",
          "1565:   msglen = origlen = end - dptr;",
          "1567:    return NF_DROP;",
          "1569:   ret = process_sip_msg(skb, ct, protoff, dataoff,",
          "1570:           &dptr, &msglen);",
          "1571:   if (ret != NF_ACCEPT)",
          "1572:    break;",
          "1573:   diff     = msglen - origlen;",
          "",
          "[Removed Lines]",
          "1566:   if (msglen > datalen)",
          "",
          "[Added Lines]",
          "1596:   if (msglen > datalen) {",
          "1597:    nf_ct_helper_log(skb, ct, \"incomplete/bad SIP message\");",
          "1599:   }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_tftp.c||net/netfilter/nf_conntrack_tftp.c": [
          "File: net/netfilter/nf_conntrack_tftp.c -> net/netfilter/nf_conntrack_tftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   nf_ct_dump_tuple(&ct->tuplehash[IP_CT_DIR_REPLY].tuple);",
          "62:   exp = nf_ct_expect_alloc(ct);",
          "64:    return NF_DROP;",
          "65:   tuple = &ct->tuplehash[IP_CT_DIR_REPLY].tuple;",
          "66:   nf_ct_expect_init(exp, NF_CT_EXPECT_CLASS_DEFAULT,",
          "67:       nf_ct_l3num(ct),",
          "",
          "[Removed Lines]",
          "63:   if (exp == NULL)",
          "",
          "[Added Lines]",
          "63:   if (exp == NULL) {",
          "64:    nf_ct_helper_log(skb, ct, \"cannot alloc expectation\");",
          "66:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:   nf_nat_tftp = rcu_dereference(nf_nat_tftp_hook);",
          "75:   if (nf_nat_tftp && ct->status & IPS_NAT_MASK)",
          "76:    ret = nf_nat_tftp(skb, ctinfo, exp);",
          "78:    ret = NF_DROP;",
          "79:   nf_ct_expect_put(exp);",
          "80:   break;",
          "81:  case TFTP_OPCODE_DATA:",
          "",
          "[Removed Lines]",
          "77:   else if (nf_ct_expect_related(exp) != 0)",
          "",
          "[Added Lines]",
          "79:   else if (nf_ct_expect_related(exp) != 0) {",
          "80:    nf_ct_helper_log(skb, ct, \"cannot add expectation\");",
          "82:   }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_nat_amanda.c||net/netfilter/nf_nat_amanda.c": [
          "File: net/netfilter/nf_nat_amanda.c -> net/netfilter/nf_nat_amanda.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   }",
          "57:  }",
          "60:   return NF_DROP;",
          "62:  sprintf(buffer, \"%u\", port);",
          "63:  ret = nf_nat_mangle_udp_packet(skb, exp->master, ctinfo,",
          "64:            protoff, matchoff, matchlen,",
          "65:            buffer, strlen(buffer));",
          "67:   nf_ct_unexpect_related(exp);",
          "68:  return ret;",
          "69: }",
          "",
          "[Removed Lines]",
          "59:  if (port == 0)",
          "66:  if (ret != NF_ACCEPT)",
          "",
          "[Added Lines]",
          "59:  if (port == 0) {",
          "60:   nf_ct_helper_log(skb, exp->master, \"all ports in use\");",
          "62:  }",
          "68:  if (ret != NF_ACCEPT) {",
          "69:   nf_ct_helper_log(skb, exp->master, \"cannot mangle packet\");",
          "71:  }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_nat_ftp.c||net/netfilter/nf_nat_ftp.c": [
          "File: net/netfilter/nf_nat_ftp.c -> net/netfilter/nf_nat_ftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   }",
          "97:  }",
          "100:   return NF_DROP;",
          "102:  buflen = nf_nat_ftp_fmt_cmd(ct, type, buffer, sizeof(buffer),",
          "103:         &newaddr, port);",
          "",
          "[Removed Lines]",
          "99:  if (port == 0)",
          "",
          "[Added Lines]",
          "99:  if (port == 0) {",
          "100:   nf_ct_helper_log(skb, ct, \"all ports in use\");",
          "102:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  return NF_ACCEPT;",
          "115: out:",
          "116:  nf_ct_unexpect_related(exp);",
          "117:  return NF_DROP;",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:  nf_ct_helper_log(skb, ct, \"cannot mangle packet\");",
          "",
          "---------------"
        ],
        "net/netfilter/nf_nat_irc.c||net/netfilter/nf_nat_irc.c": [
          "File: net/netfilter/nf_nat_irc.c -> net/netfilter/nf_nat_irc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   }",
          "57:  }",
          "60:   return NF_DROP;",
          "62:  ret = nf_nat_mangle_tcp_packet(skb, exp->master, ctinfo,",
          "63:            protoff, matchoff, matchlen, buffer,",
          "64:            strlen(buffer));",
          "66:   nf_ct_unexpect_related(exp);",
          "67:  return ret;",
          "68: }",
          "",
          "[Removed Lines]",
          "59:  if (port == 0)",
          "65:  if (ret != NF_ACCEPT)",
          "",
          "[Added Lines]",
          "59:  if (port == 0) {",
          "60:   nf_ct_helper_log(skb, exp->master, \"all ports in use\");",
          "62:  }",
          "67:  if (ret != NF_ACCEPT) {",
          "68:   nf_ct_helper_log(skb, exp->master, \"cannot mangle packet\");",
          "70:  }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_nat_sip.c||net/netfilter/nf_nat_sip.c": [
          "File: net/netfilter/nf_nat_sip.c -> net/netfilter/nf_nat_sip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:       &matchoff, &matchlen,",
          "160:       &addr, &port) > 0 &&",
          "161:       !map_addr(skb, protoff, dataoff, dptr, datalen,",
          "163:    return NF_DROP;",
          "164:   request = 1;",
          "165:  } else",
          "166:   request = 0;",
          "",
          "[Removed Lines]",
          "162:          matchoff, matchlen, &addr, port))",
          "",
          "[Added Lines]",
          "162:          matchoff, matchlen, &addr, port)) {",
          "163:    nf_ct_helper_log(skb, ct, \"cannot mangle SIP message\");",
          "165:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:   olen = *datalen;",
          "195:   if (!map_addr(skb, protoff, dataoff, dptr, datalen,",
          "197:    return NF_DROP;",
          "199:   matchend = matchoff + matchlen + *datalen - olen;",
          "",
          "[Removed Lines]",
          "196:          matchoff, matchlen, &addr, port))",
          "",
          "[Added Lines]",
          "198:          matchoff, matchlen, &addr, port)) {",
          "199:    nf_ct_helper_log(skb, ct, \"cannot mangle Via header\");",
          "201:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:      &ct->tuplehash[!dir].tuple.dst.u3,",
          "210:      true);",
          "211:    if (!mangle_packet(skb, protoff, dataoff, dptr, datalen,",
          "213:     return NF_DROP;",
          "214:   }",
          "",
          "[Removed Lines]",
          "212:         poff, plen, buffer, buflen))",
          "",
          "[Added Lines]",
          "216:         poff, plen, buffer, buflen)) {",
          "217:     nf_ct_helper_log(skb, ct, \"cannot mangle maddr\");",
          "219:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:      false);",
          "226:    if (!mangle_packet(skb, protoff, dataoff, dptr, datalen,",
          "227:         poff, plen, buffer, buflen))",
          "228:     return NF_DROP;",
          "229:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:     nf_ct_helper_log(skb, ct, \"cannot mangle received\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:    __be16 p = ct->tuplehash[!dir].tuple.src.u.udp.port;",
          "239:    buflen = sprintf(buffer, \"%u\", ntohs(p));",
          "240:    if (!mangle_packet(skb, protoff, dataoff, dptr, datalen,",
          "242:     return NF_DROP;",
          "243:   }",
          "244:  }",
          "",
          "[Removed Lines]",
          "241:         poff, plen, buffer, buflen))",
          "",
          "[Added Lines]",
          "248:         poff, plen, buffer, buflen)) {",
          "249:     nf_ct_helper_log(skb, ct, \"cannot mangle rport\");",
          "251:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253:            &addr, &port) > 0) {",
          "254:   if (!map_addr(skb, protoff, dataoff, dptr, datalen,",
          "255:          matchoff, matchlen,",
          "257:    return NF_DROP;",
          "258:  }",
          "260:  if (!map_sip_addr(skb, protoff, dataoff, dptr, datalen, SIP_HDR_FROM) ||",
          "262:   return NF_DROP;",
          "265:  if (dir == IP_CT_DIR_REPLY && ct_sip_info->forced_dport) {",
          "266:   struct udphdr *uh;",
          "269:    return NF_DROP;",
          "271:   uh = (void *)skb->data + protoff;",
          "272:   uh->dest = ct_sip_info->forced_dport;",
          "274:   if (!nf_nat_mangle_udp_packet(skb, ct, ctinfo, protoff,",
          "276:    return NF_DROP;",
          "277:  }",
          "279:  return NF_ACCEPT;",
          "",
          "[Removed Lines]",
          "256:          &addr, port))",
          "261:      !map_sip_addr(skb, protoff, dataoff, dptr, datalen, SIP_HDR_TO))",
          "268:   if (!skb_make_writable(skb, skb->len))",
          "275:            0, 0, NULL, 0))",
          "",
          "[Added Lines]",
          "265:          &addr, port)) {",
          "266:    nf_ct_helper_log(skb, ct, \"cannot mangle contact\");",
          "268:   }",
          "272:      !map_sip_addr(skb, protoff, dataoff, dptr, datalen, SIP_HDR_TO)) {",
          "273:   nf_ct_helper_log(skb, ct, \"cannot mangle SIP from/to\");",
          "275:  }",
          "281:   if (!skb_make_writable(skb, skb->len)) {",
          "282:    nf_ct_helper_log(skb, ct, \"cannot mangle packet\");",
          "284:   }",
          "290:            0, 0, NULL, 0)) {",
          "291:    nf_ct_helper_log(skb, ct, \"cannot mangle packet\");",
          "293:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "372:   }",
          "373:  }",
          "376:   return NF_DROP;",
          "378:  if (!nf_inet_addr_cmp(&exp->tuple.dst.u3, &exp->saved_addr) ||",
          "379:      exp->tuple.dst.u.udp.port != exp->saved_proto.udp.port) {",
          "380:   buflen = sip_sprintf_addr_port(ct, buffer, &newaddr, port);",
          "381:   if (!mangle_packet(skb, protoff, dataoff, dptr, datalen,",
          "383:    goto err;",
          "384:  }",
          "385:  return NF_ACCEPT;",
          "",
          "[Removed Lines]",
          "375:  if (port == 0)",
          "382:        matchoff, matchlen, buffer, buflen))",
          "",
          "[Added Lines]",
          "392:  if (port == 0) {",
          "393:   nf_ct_helper_log(skb, ct, \"all ports in use for SIP\");",
          "395:  }",
          "401:        matchoff, matchlen, buffer, buflen)) {",
          "402:    nf_ct_helper_log(skb, ct, \"cannot mangle packet\");",
          "404:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "573:   }",
          "574:  }",
          "577:   goto err1;",
          "580:  if (rtp_exp->tuple.dst.u.udp.port != rtp_exp->saved_proto.udp.port &&",
          "581:      !nf_nat_sdp_port(skb, protoff, dataoff, dptr, datalen,",
          "583:   goto err2;",
          "585:  return NF_ACCEPT;",
          "",
          "[Removed Lines]",
          "576:  if (port == 0)",
          "582:         mediaoff, medialen, port))",
          "",
          "[Added Lines]",
          "597:  if (port == 0) {",
          "598:   nf_ct_helper_log(skb, ct, \"all ports in use for SDP media\");",
          "600:  }",
          "605:         mediaoff, medialen, port)) {",
          "606:   nf_ct_helper_log(skb, ct, \"cannot mangle SDP message\");",
          "608:  }",
          "",
          "---------------"
        ],
        "net/netfilter/nf_nat_tftp.c||net/netfilter/nf_nat_tftp.c": [
          "File: net/netfilter/nf_nat_tftp.c -> net/netfilter/nf_nat_tftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   = ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.udp.port;",
          "29:  exp->dir = IP_CT_DIR_REPLY;",
          "30:  exp->expectfn = nf_nat_follow_master;",
          "32:   return NF_DROP;",
          "33:  return NF_ACCEPT;",
          "34: }",
          "",
          "[Removed Lines]",
          "31:  if (nf_ct_expect_related(exp) != 0)",
          "",
          "[Added Lines]",
          "31:  if (nf_ct_expect_related(exp) != 0) {",
          "32:   nf_ct_helper_log(skb, exp->master, \"cannot add expectation\");",
          "34:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}