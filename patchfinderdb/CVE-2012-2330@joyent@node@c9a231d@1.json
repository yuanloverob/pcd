{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "382f22f22959e686b10a5f42333c468e6654cb97",
      "candidate_info": {
        "commit_hash": "382f22f22959e686b10a5f42333c468e6654cb97",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/382f22f22959e686b10a5f42333c468e6654cb97",
        "files": [
          "doc/api/timers.markdown",
          "lib/timers.js",
          "src/node.js",
          "test/common.js",
          "test/simple/test-timers-immediate.js"
        ],
        "message": "timers: implement setImmediate",
        "before_after_code_files": [
          "lib/timers.js||litimers.js",
          "src/node.js||src/node.js",
          "test/common.js||test/common.js",
          "test/simple/test-timers-immediate.js||test/simple/test-timers-immediate.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/timers.js||litimers.js": [
          "File: lib/timers.js -> litimers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:     exports.unenroll(this);",
          "278:   }",
          "279: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:       var t = NativeModule.require('timers');",
          "185:       return t.clearInterval.apply(this, arguments);",
          "186:     };",
          "187:   };",
          "189:   startup.globalConsole = function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     global.setImmediate = function() {",
          "189:       var t = NativeModule.require('timers');",
          "190:       return t.setImmediate.apply(this, arguments);",
          "191:     };",
          "193:     global.clearImmediate = function() {",
          "194:       var t = NativeModule.require('timers');",
          "195:       return t.clearImmediate.apply(this, arguments);",
          "196:     };",
          "",
          "---------------"
        ],
        "test/common.js||test/common.js": [
          "File: test/common.js -> test/common.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   if (!exports.globalCheck) return;",
          "82:   var knownGlobals = [setTimeout,",
          "83:                       setInterval,",
          "84:                       clearTimeout,",
          "85:                       clearInterval,",
          "86:                       console,",
          "87:                       Buffer,",
          "88:                       process,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:                       setImmediate,",
          "87:                       clearImmediate,",
          "",
          "---------------"
        ],
        "test/simple/test-timers-immediate.js||test/simple/test-timers-immediate.js": [
          "File: test/simple/test-timers-immediate.js -> test/simple/test-timers-immediate.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var immediateA = false,",
          "26:     immediateB = false,",
          "27:     immediateC = [],",
          "28:     before;",
          "30: setImmediate(function() {",
          "31:   try {",
          "32:     immediateA = process.hrtime(before);",
          "33:   } catch(e) {",
          "34:     console.log('failed to get hrtime with offset');",
          "35:   }",
          "36:   clearImmediate(immediateB);",
          "37: });",
          "39: before = process.hrtime();",
          "41: immediateB = setImmediate(function() {",
          "42:   immediateB = true;",
          "43: });",
          "45: setImmediate(function(x, y, z) {",
          "46:   immediateC = [x, y, z];",
          "47: }, 1, 2, 3);",
          "49: process.on('exit', function() {",
          "50:   assert.ok(immediateA, 'Immediate should happen after normal execution');",
          "51:   assert.notStrictEqual(immediateB, true, 'immediateB should not fire');",
          "52:   assert.deepEqual(immediateC, [1, 2, 3], 'immediateC args should match');",
          "53: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9130222bd36ac2c5dd7ae560f02bb99569749a7",
      "candidate_info": {
        "commit_hash": "a9130222bd36ac2c5dd7ae560f02bb99569749a7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a9130222bd36ac2c5dd7ae560f02bb99569749a7",
        "files": [
          "configure",
          "node.gyp"
        ],
        "message": "Revert \"build: support shared V8 properly\"\n\nThis reverts commit 3d1b67064085ef486a69c2fc69d195dc35f4f50c.\n\nBreaks build on windows.\nhttps://gist.github.com/1895279",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:       'dependencies': [",
          "56:         'deps/http_parser/http_parser.gyp:http_parser',",
          "57:         'deps/uv/uv.gyp:uv',",
          "58:         'deps/zlib/zlib.gyp:zlib',",
          "59:         'node_js2c#host',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         'deps/v8/tools/gyp/v8.gyp:v8',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         'src/stream_wrap.h',",
          "110:         'src/v8_typed_array.h',",
          "111:         'deps/http_parser/http_parser.h',",
          "112:         '<(SHARED_INTERMEDIATE_DIR)/node_natives.h',",
          "113:         # javascript files to make for an even more pleasant IDE experience",
          "114:         '<@(library_files)',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:         'deps/v8/include/v8.h',",
          "114:         'deps/v8/include/v8-debug.h',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:           ],",
          "145:         }],",
          "162:         [ 'OS==\"win\"', {",
          "163:           'sources': [",
          "164:             'tools/msvs/res/node.rc',",
          "",
          "[Removed Lines]",
          "147:         [ 'node_shared_v8==\"true\"', {",
          "148:           'sources': [",
          "149:             '<(node_shared_v8_includes)/v8.h',",
          "150:             '<(node_shared_v8_includes)/v8-debug.h',",
          "151:           ],",
          "152:         }],",
          "154:         [ 'node_shared_v8==\"false\"', {",
          "155:           'sources': [",
          "156:             'deps/v8/include/v8.h',",
          "157:             'deps/v8/include/v8-debug.h',",
          "158:           ],",
          "159:           'dependencies': [ 'deps/v8/tools/gyp/v8.gyp:v8' ],",
          "160:         }],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1513848f8801d7d1141c10c4960b6bfe47a53ed2",
      "candidate_info": {
        "commit_hash": "1513848f8801d7d1141c10c4960b6bfe47a53ed2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1513848f8801d7d1141c10c4960b6bfe47a53ed2",
        "files": [
          "lib/net.js"
        ],
        "message": "net: fix Socket({ fd: 42 }) api\n\nMake the implementation match the documentation. This should work:\n\n  var s = new net.Socket({ fd: 42, allowHalfOpen: true };\n\nAnd now it does.",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   Stream.call(this);",
          "137:     this._handle = createPipe();",
          "139:     this.readable = this.writable = true;",
          "146:   }",
          "147: }",
          "148: util.inherits(Socket, Stream);",
          "",
          "[Removed Lines]",
          "134:   if (typeof options == 'number') {",
          "136:     var fd = options;",
          "138:     this._handle.open(fd);",
          "140:     initSocketHandle(this);",
          "141:   } else {",
          "143:     this._handle = options && options.handle;",
          "144:     initSocketHandle(this);",
          "145:     this.allowHalfOpen = options && options.allowHalfOpen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e733dc3bc3bcc876a29f2b78c5a29bae9dedb0c3",
      "candidate_info": {
        "commit_hash": "e733dc3bc3bcc876a29f2b78c5a29bae9dedb0c3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e733dc3bc3bcc876a29f2b78c5a29bae9dedb0c3",
        "files": [
          "doc/api/cluster.markdown",
          "doc/api/http.markdown",
          "doc/api/net.markdown",
          "lib/cluster.js",
          "lib/net.js",
          "test/simple/test-cluster-basic.js",
          "test/simple/test-listen-fd-cluster.js",
          "test/simple/test-listen-fd-detached-inherit.js",
          "test/simple/test-listen-fd-detached.js",
          "test/simple/test-listen-fd-server.js"
        ],
        "message": "Fix #3388 Support listening on file descriptors\n\nThis implements server.listen({ fd: <filedescriptor> }).  The fd should\nrefer to an underlying resource that is already bound and listening, and\ncauses the new server to also accept connections on it.\n\nNot supported on Windows.  Raises ENOTSUP.",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js",
          "lib/net.js||linet.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js",
          "test/simple/test-listen-fd-cluster.js||test/simple/test-listen-fd-cluster.js",
          "test/simple/test-listen-fd-detached-inherit.js||test/simple/test-listen-fd-detached-inherit.js",
          "test/simple/test-listen-fd-detached.js||test/simple/test-listen-fd-detached.js",
          "test/simple/test-listen-fd-server.js||test/simple/test-listen-fd-server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     var key = args.join(':');",
          "198:     var handler;",
          "",
          "[Removed Lines]",
          "196:     var args = [message.address, message.port, message.addressType];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     worker.emit('listening', {",
          "217:       address: message.address,",
          "218:       port: message.port,",
          "220:     });",
          "221:     cluster.emit('listening', worker, {",
          "222:       address: message.address,",
          "223:       port: message.port,",
          "225:     });",
          "226:   };",
          "",
          "[Removed Lines]",
          "219:       addressType: message.addressType",
          "224:       addressType: message.addressType",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "508: };",
          "513:   assert(cluster.isWorker);",
          "517:   serverListeners[key] = tcpSelf;",
          "",
          "[Removed Lines]",
          "511: cluster._getServer = function(tcpSelf, address, port, addressType, cb) {",
          "516:   var key = [address, port, addressType].join(':');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523:       cmd: 'listening',",
          "524:       address: address,",
          "525:       port: port,",
          "527:     });",
          "528:   });",
          "",
          "[Removed Lines]",
          "526:       addressType: addressType",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "532:     cmd: 'queryServer',",
          "533:     address: address,",
          "534:     port: port,",
          "536:   };",
          "",
          "[Removed Lines]",
          "535:     addressType: addressType",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:   if (this.server) {",
          "361:     this.server._connections--;",
          "363:   }",
          "364: };",
          "",
          "[Removed Lines]",
          "362:     this.server._emitCloseIfDrained();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822: var createServerHandle = exports._createServerHandle =",
          "824:   var r = 0;",
          "826:   var handle;",
          "829:     handle = createPipe();",
          "830:     if (process.platform === 'win32') {",
          "831:       var instances = parseInt(process.env.NODE_PENDING_PIPE_INSTANCES);",
          "",
          "[Removed Lines]",
          "823:     function(address, port, addressType) {",
          "828:   if (port == -1 && addressType == -1) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "855: };",
          "859:   var self = this;",
          "860:   var r = 0;",
          "864:   if (!self._handle) {",
          "866:     if (!self._handle) {",
          "867:       process.nextTick(function() {",
          "868:         self.emit('error', errnoException(errno, 'listen'));",
          "",
          "[Removed Lines]",
          "858: Server.prototype._listen2 = function(address, port, addressType, backlog) {",
          "865:     self._handle = createServerHandle(address, port, addressType);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "897: };",
          "901:   if (!cluster) cluster = require('cluster');",
          "903:   if (cluster.isWorker) {",
          "905:       self._handle = handle;",
          "907:     });",
          "908:   } else {",
          "910:   }",
          "911: }",
          "",
          "[Removed Lines]",
          "900: function listen(self, address, port, addressType, backlog) {",
          "904:     cluster._getServer(self, address, port, addressType, function(handle) {",
          "906:       self._listen2(address, port, addressType, backlog);",
          "909:     self._listen2(address, port, addressType, backlog);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "933:     listen(self, null, null, backlog);",
          "939:   } else if (isPipeName(arguments[0])) {",
          "941:     var pipeName = self._pipeName = arguments[0];",
          "",
          "[Removed Lines]",
          "935:   } else if (arguments[0] instanceof TCP) {",
          "936:     self._handle = arguments[0];",
          "937:     listen(self, null, -1, -1, backlog);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:           assert.equal(arguments.length, 1);",
          "136:           var expect = { address: '127.0.0.1',",
          "137:                          port: common.PORT,",
          "139:           assert.deepEqual(arguments[0], expect);",
          "140:           break;",
          "",
          "[Removed Lines]",
          "138:                          addressType: 4 };",
          "",
          "[Added Lines]",
          "138:                          addressType: 4,",
          "139:                          fd: undefined };",
          "",
          "---------------"
        ],
        "test/simple/test-listen-fd-cluster.js||test/simple/test-listen-fd-cluster.js": [
          "File: test/simple/test-listen-fd-cluster.js -> test/simple/test-listen-fd-cluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "25: var net = require('net');",
          "26: var PORT = common.PORT;",
          "27: var spawn = require('child_process').spawn;",
          "28: var cluster = require('cluster');",
          "30: console.error('Cluster listen fd test', process.argv.slice(2));",
          "32: if (process.platform === 'win32') {",
          "33:   console.error('This test is disabled on windows.');",
          "34:   return;",
          "35: }",
          "37: switch (process.argv[2]) {",
          "38:   case 'master': return master();",
          "39:   case 'worker': return worker();",
          "40:   case 'parent': return parent();",
          "41:   default: return test();",
          "42: }",
          "50: function test() {",
          "51:   var parent = spawn(process.execPath, [__filename, 'parent'], {",
          "52:     stdio: [ 0, 'pipe', 2 ]",
          "53:   });",
          "54:   var json = '';",
          "55:   parent.stdout.on('data', function(c) {",
          "56:     json += c.toString();",
          "57:     if (json.indexOf('\\n') !== -1) next();",
          "58:   });",
          "59:   function next() {",
          "60:     console.error('output from parent = %s', json);",
          "61:     var cluster = JSON.parse(json);",
          "63:     http.get({",
          "64:       server: 'localhost',",
          "65:       port: PORT,",
          "66:       path: '/',",
          "67:     }).on('response', function (res) {",
          "68:       var s = '';",
          "69:       res.on('data', function(c) {",
          "70:         s += c.toString();",
          "71:       });",
          "72:       res.on('end', function() {",
          "75:         parent.kill();",
          "76:         process.kill(cluster.master, 'SIGKILL');",
          "78:         assert.equal(s, 'hello from worker\\n');",
          "79:         assert.equal(res.statusCode, 200);",
          "80:         console.log('ok');",
          "81:       });",
          "82:     })",
          "83:   }",
          "84: }",
          "86: function parent() {",
          "87:   console.error('about to listen in parent');",
          "88:   var server = net.createServer(function(conn) {",
          "89:     console.error('connection on parent');",
          "90:     conn.end('hello from parent\\n');",
          "91:   }).listen(PORT, function() {",
          "92:     console.error('server listening on %d', PORT);",
          "94:     var spawn = require('child_process').spawn;",
          "95:     var master = spawn(process.execPath, [__filename, 'master'], {",
          "96:       stdio: [ 0, 1, 2, server._handle ],",
          "97:       detached: true",
          "98:     });",
          "103:     server.close();",
          "105:     master.on('exit', function(code) {",
          "106:       console.error('master exited', code);",
          "107:     });",
          "109:     master.on('close', function() {",
          "110:       console.error('master closed');",
          "111:     });",
          "112:     console.error('master spawned');",
          "113:   });",
          "114: }",
          "116: function master() {",
          "117:   console.error('in master, spawning worker');",
          "118:   cluster.setupMaster({",
          "119:     args: [ 'worker' ]",
          "120:   });",
          "121:   var worker = cluster.fork();",
          "122:   console.log('%j\\n', { master: process.pid, worker: worker.pid });",
          "123: }",
          "126: function worker() {",
          "127:   console.error('worker, about to create server and listen on fd=3');",
          "129:   http.createServer(function(req, res) {",
          "130:     console.error('request on worker');",
          "131:     console.error('%s %s', req.method, req.url, req.headers);",
          "132:     res.end('hello from worker\\n');",
          "133:   }).listen({ fd: 3 }, function() {",
          "134:     console.error('worker listening on fd=3');",
          "135:   });",
          "136: }",
          "",
          "---------------"
        ],
        "test/simple/test-listen-fd-detached-inherit.js||test/simple/test-listen-fd-detached-inherit.js": [
          "File: test/simple/test-listen-fd-detached-inherit.js -> test/simple/test-listen-fd-detached-inherit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "25: var net = require('net');",
          "26: var PORT = common.PORT;",
          "27: var spawn = require('child_process').spawn;",
          "29: if (process.platform === 'win32') {",
          "30:   console.error('This test is disabled on windows.');",
          "31:   return;",
          "32: }",
          "34: switch (process.argv[2]) {",
          "35:   case 'child': return child();",
          "36:   case 'parent': return parent();",
          "37:   default: return test();",
          "38: }",
          "46: function test() {",
          "47:   var parent = spawn(process.execPath, [__filename, 'parent'], {",
          "48:     stdio: [ 0, 'pipe', 2 ]",
          "49:   });",
          "50:   var json = '';",
          "51:   parent.stdout.on('data', function(c) {",
          "52:     json += c.toString();",
          "53:     if (json.indexOf('\\n') !== -1) next();",
          "54:   });",
          "55:   function next() {",
          "56:     console.error('output from parent = %s', json);",
          "57:     var child = JSON.parse(json);",
          "59:     http.get({",
          "60:       server: 'localhost',",
          "61:       port: PORT,",
          "62:       path: '/',",
          "63:     }).on('response', function (res) {",
          "64:       var s = '';",
          "65:       res.on('data', function(c) {",
          "66:         s += c.toString();",
          "67:       });",
          "68:       res.on('end', function() {",
          "71:         process.kill(child.pid, 'SIGKILL');",
          "72:         try {",
          "73:           parent.kill();",
          "74:         } catch (e) {}",
          "76:         assert.equal(s, 'hello from child\\n');",
          "77:         assert.equal(res.statusCode, 200);",
          "78:       });",
          "79:     })",
          "80:   }",
          "81: }",
          "85: function parent() {",
          "86:   var server = net.createServer(function(conn) {",
          "87:     throw new Error('Should not see connections on parent');",
          "88:     conn.end('HTTP/1.1 403 Forbidden\\r\\n\\r\\nI got problems.\\r\\n');",
          "89:   }).listen(PORT, function() {",
          "90:     console.error('server listening on %d', PORT);",
          "92:     var child = spawn(process.execPath, [__filename, 'child'], {",
          "93:       stdio: [ 0, 1, 2, server._handle ],",
          "94:       detached: true",
          "95:     });",
          "97:     console.log('%j\\n', { pid: child.pid });",
          "103:     server.close();",
          "104:     child.unref();",
          "105:   });",
          "106: }",
          "109: function child() {",
          "111:   http.createServer(function(req, res) {",
          "112:     console.error('request on child');",
          "113:     console.error('%s %s', req.method, req.url, req.headers);",
          "114:     res.end('hello from child\\n');",
          "115:   }).listen({ fd: 3 }, function() {",
          "116:     console.error('child listening on fd=3');",
          "117:   });",
          "118: }",
          "",
          "---------------"
        ],
        "test/simple/test-listen-fd-detached.js||test/simple/test-listen-fd-detached.js": [
          "File: test/simple/test-listen-fd-detached.js -> test/simple/test-listen-fd-detached.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "25: var net = require('net');",
          "26: var PORT = common.PORT;",
          "27: var spawn = require('child_process').spawn;",
          "29: if (process.platform === 'win32') {",
          "30:   console.error('This test is disabled on windows.');",
          "31:   return;",
          "32: }",
          "34: switch (process.argv[2]) {",
          "35:   case 'child': return child();",
          "36:   case 'parent': return parent();",
          "37:   default: return test();",
          "38: }",
          "46: function test() {",
          "47:   var parent = spawn(process.execPath, [__filename, 'parent'], {",
          "48:     stdio: [ 0, 'pipe', 2 ]",
          "49:   });",
          "50:   var json = '';",
          "51:   parent.stdout.on('data', function(c) {",
          "52:     json += c.toString();",
          "53:     if (json.indexOf('\\n') !== -1) next();",
          "54:   });",
          "55:   function next() {",
          "56:     console.error('output from parent = %s', json);",
          "57:     var child = JSON.parse(json);",
          "59:     http.get({",
          "60:       server: 'localhost',",
          "61:       port: PORT,",
          "62:       path: '/',",
          "63:     }).on('response', function (res) {",
          "64:       var s = '';",
          "65:       res.on('data', function(c) {",
          "66:         s += c.toString();",
          "67:       });",
          "68:       res.on('end', function() {",
          "71:         process.kill(child.pid, 'SIGKILL');",
          "72:         try {",
          "73:           parent.kill();",
          "74:         } catch (e) {}",
          "76:         assert.equal(s, 'hello from child\\n');",
          "77:         assert.equal(res.statusCode, 200);",
          "78:       });",
          "79:     })",
          "80:   }",
          "81: }",
          "83: function parent() {",
          "84:   var server = net.createServer(function(conn) {",
          "85:     console.error('connection on parent');",
          "86:     conn.end('hello from parent\\n');",
          "87:   }).listen(PORT, function() {",
          "88:     console.error('server listening on %d', PORT);",
          "90:     var spawn = require('child_process').spawn;",
          "91:     var child = spawn(process.execPath, [__filename, 'child'], {",
          "92:       stdio: [ 'ignore', 'ignore', 'ignore', server._handle ],",
          "93:       detached: true",
          "94:     });",
          "96:     console.log('%j\\n', { pid: child.pid });",
          "102:     server.close();",
          "103:     child.unref();",
          "104:   });",
          "105: }",
          "107: function child() {",
          "109:   http.createServer(function(req, res) {",
          "110:     console.error('request on child');",
          "111:     console.error('%s %s', req.method, req.url, req.headers);",
          "112:     res.end('hello from child\\n');",
          "113:   }).listen({ fd: 3 }, function() {",
          "114:     console.error('child listening on fd=3');",
          "115:   });",
          "116: }",
          "",
          "---------------"
        ],
        "test/simple/test-listen-fd-server.js||test/simple/test-listen-fd-server.js": [
          "File: test/simple/test-listen-fd-server.js -> test/simple/test-listen-fd-server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "25: var net = require('net');",
          "26: var PORT = common.PORT;",
          "27: var spawn = require('child_process').spawn;",
          "29: if (process.platform === 'win32') {",
          "30:   console.error('This test is disabled on windows.');",
          "31:   return;",
          "32: }",
          "34: switch (process.argv[2]) {",
          "35:   case 'child': return child();",
          "36:   case 'parent': return parent();",
          "37:   default: return test();",
          "38: }",
          "46: function test() {",
          "47:   var parent = spawn(process.execPath, [__filename, 'parent'], {",
          "48:     stdio: [ 0, 'pipe', 2 ]",
          "49:   });",
          "50:   var json = '';",
          "51:   parent.stdout.on('data', function(c) {",
          "52:     json += c.toString();",
          "53:     if (json.indexOf('\\n') !== -1) next();",
          "54:   });",
          "55:   function next() {",
          "56:     console.error('output from parent = %s', json);",
          "57:     var child = JSON.parse(json);",
          "59:     http.get({",
          "60:       server: 'localhost',",
          "61:       port: PORT,",
          "62:       path: '/',",
          "63:     }).on('response', function (res) {",
          "64:       var s = '';",
          "65:       res.on('data', function(c) {",
          "66:         s += c.toString();",
          "67:       });",
          "68:       res.on('end', function() {",
          "71:         process.kill(child.pid, 'SIGKILL');",
          "72:         try {",
          "73:           parent.kill();",
          "74:         } catch (e) {}",
          "76:         assert.equal(s, 'hello from child\\n');",
          "77:         assert.equal(res.statusCode, 200);",
          "78:       });",
          "79:     })",
          "80:   }",
          "81: }",
          "83: function child() {",
          "85:   http.createServer(function(req, res) {",
          "86:     console.error('request on child');",
          "87:     console.error('%s %s', req.method, req.url, req.headers);",
          "88:     res.end('hello from child\\n');",
          "89:   }).listen({ fd: 3 }, function() {",
          "90:     console.error('child listening on fd=3');",
          "91:   });",
          "92: }",
          "94: function parent() {",
          "95:   var server = net.createServer(function(conn) {",
          "96:     console.error('connection on parent');",
          "97:     conn.end('hello from parent\\n');",
          "98:   }).listen(PORT, function() {",
          "99:     console.error('server listening on %d', PORT);",
          "101:     var spawn = require('child_process').spawn;",
          "102:     var child = spawn(process.execPath, [__filename, 'child'], {",
          "103:       stdio: [ 0, 1, 2, server._handle ]",
          "104:     });",
          "106:     console.log('%j\\n', { pid: child.pid });",
          "111:     server.close();",
          "113:     child.on('exit', function(code) {",
          "114:       console.error('child exited', code);",
          "115:     });",
          "117:     child.on('close', function() {",
          "118:       console.error('child closed');",
          "119:     });",
          "120:     console.error('child spawned');",
          "121:   });",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "296b7a580b106ce07c7d5fc3018c9f05dc3fb70d",
      "candidate_info": {
        "commit_hash": "296b7a580b106ce07c7d5fc3018c9f05dc3fb70d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/296b7a580b106ce07c7d5fc3018c9f05dc3fb70d",
        "files": [
          "src/pipe_wrap.cc",
          "src/pipe_wrap.h",
          "src/stream_wrap.cc",
          "test/simple/test-cluster-http-pipe.js"
        ],
        "message": "cluster: support passing of named pipes\n\nFixes triggered assertion:\n\n  Assertion failed: (0 && \"bad address family\"), function GetPeerName,\n  file ../src/tcp_wrap.cc, line 237.\n\nFixes #2870.",
        "before_after_code_files": [
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/pipe_wrap.h||src/pipe_wrap.h",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "test/simple/test-cluster-http-pipe.js||test/simple/test-cluster-http-pipe.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: }",
          "70: PipeWrap* PipeWrap::Unwrap(Local<Object> obj) {",
          "71:   assert(!obj.IsEmpty());",
          "72:   assert(obj->InternalFieldCount() > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: Local<Object> PipeWrap::Instantiate() {",
          "71:   HandleScope scope;",
          "72:   assert(!pipeConstructor.IsEmpty());",
          "73:   return scope.Close(pipeConstructor->NewInstance());",
          "74: }",
          "",
          "---------------"
        ],
        "src/pipe_wrap.h||src/pipe_wrap.h": [
          "File: src/pipe_wrap.h -> src/pipe_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  public:",
          "30:   uv_pipe_t* UVHandle();",
          "32:   static PipeWrap* Unwrap(v8::Local<v8::Object> obj);",
          "33:   static void Initialize(v8::Handle<v8::Object> target);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   static v8::Local<v8::Object> Instantiate();",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <node_buffer.h>",
          "24: #include <handle_wrap.h>",
          "25: #include <stream_wrap.h>",
          "26: #include <tcp_wrap.h>",
          "27: #include <req_wrap.h>",
          "30: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <pipe_wrap.h>",
          "30: #include <stdlib.h> // abort()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     slab_used -= (buf.len - nread);",
          "238:   }",
          "269:   }",
          "270: }",
          "",
          "[Removed Lines]",
          "240:   if (nread > 0) {",
          "241:     int argc = 3;",
          "242:     Local<Value> argv[4] = {",
          "243:       slab_v,",
          "244:       Integer::New(wrap->slab_offset_),",
          "245:       Integer::New(nread)",
          "246:     };",
          "249:     if (pending == UV_TCP) {",
          "251:       Local<Object> pending_obj = TCPWrap::Instantiate();",
          "254:       assert(pending_obj->InternalFieldCount() > 0);",
          "255:       TCPWrap* pending_wrap =",
          "256:           static_cast<TCPWrap*>(pending_obj->GetPointerFromInternalField(0));",
          "258:       int r = uv_accept(handle, pending_wrap->GetStream());",
          "259:       assert(r == 0);",
          "261:       argv[3] = pending_obj;",
          "262:       argc++;",
          "263:     } else {",
          "265:       assert(pending == UV_UNKNOWN_HANDLE);",
          "266:     }",
          "268:     MakeCallback(wrap->object_, \"onread\", argc, argv);",
          "",
          "[Added Lines]",
          "243:   if (nread == 0) return;",
          "245:   int argc = 3;",
          "246:   Local<Value> argv[4] = {",
          "247:     slab_v,",
          "248:     Integer::New(wrap->slab_offset_),",
          "249:     Integer::New(nread)",
          "250:   };",
          "252:   Local<Object> pending_obj;",
          "253:   if (pending == UV_TCP) {",
          "254:     pending_obj = TCPWrap::Instantiate();",
          "255:   } else if (pending == UV_NAMED_PIPE) {",
          "256:     pending_obj = PipeWrap::Instantiate();",
          "257:   } else {",
          "259:     assert(pending == UV_UNKNOWN_HANDLE);",
          "260:   }",
          "262:   if (!pending_obj.IsEmpty()) {",
          "263:     assert(pending_obj->InternalFieldCount() > 0);",
          "264:     StreamWrap* pending_wrap =",
          "265:       static_cast<StreamWrap*>(pending_obj->GetPointerFromInternalField(0));",
          "266:     if (uv_accept(handle, pending_wrap->GetStream())) abort();",
          "267:     argv[3] = pending_obj;",
          "268:     argc++;",
          "271:   MakeCallback(wrap->object_, \"onread\", argc, argv);",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-http-pipe.js||test/simple/test-cluster-http-pipe.js": [
          "File: test/simple/test-cluster-http-pipe.js -> test/simple/test-cluster-http-pipe.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var cluster = require('cluster');",
          "25: var http = require('http');",
          "27: if (cluster.isMaster) {",
          "28:   var ok = false;",
          "29:   var worker = cluster.fork();",
          "30:   worker.on('message', function(msg) {",
          "31:     assert.equal(msg, 'DONE');",
          "32:     ok = true;",
          "33:   });",
          "34:   worker.on('death', function() {",
          "35:     process.exit();",
          "36:   });",
          "37:   process.on('exit', function() {",
          "38:     assert(ok);",
          "39:   });",
          "40:   return;",
          "41: }",
          "43: http.createServer(function(req, res) {",
          "44:   assert.equal(req.connection.remoteAddress, undefined);",
          "45:   assert.equal(req.connection.localAddress, undefined); // TODO common.PIPE?",
          "46:   res.writeHead(200);",
          "47:   res.end('OK');",
          "48: }).listen(common.PIPE, function() {",
          "49:   var self = this;",
          "50:   http.get({ socketPath: common.PIPE, path: '/' }, function(res) {",
          "51:     res.on('end', function(err) {",
          "52:       if (err) throw err;",
          "53:       process.send('DONE');",
          "54:       process.exit();",
          "55:     });",
          "56:   });",
          "57: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}