{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d951d8cdef56aeeb6c08387531de943683e80ce",
      "candidate_info": {
        "commit_hash": "2d951d8cdef56aeeb6c08387531de943683e80ce",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2d951d8cdef56aeeb6c08387531de943683e80ce",
        "files": [
          "ssl/record/ssl3_record.c"
        ],
        "message": "Check for zero records and return immediately\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2822)\n(cherry picked from commit a3004c820370b6bee82c919721fb1cbe95f72f3f)",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ],
          "candidate": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     const EVP_CIPHER *enc;",
          "662:     unsigned int ctr;",
          "664:     if (send) {",
          "665:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "666:             int n = EVP_MD_CTX_size(s->write_hash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:     if (n_recs == 0)",
          "665:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef727bc5669182cdf8519734ae9924fc54cc4164",
      "candidate_info": {
        "commit_hash": "ef727bc5669182cdf8519734ae9924fc54cc4164",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ef727bc5669182cdf8519734ae9924fc54cc4164",
        "files": [
          "crypto/x509v3/v3_cpols.c"
        ],
        "message": "Fixed a crash in print_notice.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2935)\n(cherry picked from commit 29d1fad78899e5ae2997b19937a175784b21c996)",
        "before_after_code_files": [
          "crypto/x509v3/v3_cpols.c||crypto/x509v3/v3_cpols.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509v3/v3_cpols.c||crypto/x509v3/v3_cpols.c": [
          "File: crypto/x509v3/v3_cpols.c -> crypto/x509v3/v3_cpols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:             num = sk_ASN1_INTEGER_value(ref->noticenos, i);",
          "414:             if (i)",
          "415:                 BIO_puts(out, \", \");",
          "419:         }",
          "420:         BIO_puts(out, \"\\n\");",
          "421:     }",
          "",
          "[Removed Lines]",
          "416:             tmp = i2s_ASN1_INTEGER(NULL, num);",
          "417:             BIO_puts(out, tmp);",
          "418:             OPENSSL_free(tmp);",
          "",
          "[Added Lines]",
          "416:             if (num == NULL)",
          "417:                 BIO_puts(out, \"(null)\");",
          "418:             else {",
          "419:                 tmp = i2s_ASN1_INTEGER(NULL, num);",
          "420:                 if (tmp == NULL)",
          "421:                     return;",
          "422:                 BIO_puts(out, tmp);",
          "423:                 OPENSSL_free(tmp);",
          "424:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14cc893ca224cc89261b6e15eee3caaacb45e5e9",
      "candidate_info": {
        "commit_hash": "14cc893ca224cc89261b6e15eee3caaacb45e5e9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/14cc893ca224cc89261b6e15eee3caaacb45e5e9",
        "files": [
          "test/recipes/15-test_rsapss.t"
        ],
        "message": "Added a test case for RSA_padding_add_PKCS1_PSS_mgf1.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2881)",
        "before_after_code_files": [
          "test/recipes/15-test_rsapss.t||test/recipes/15-test_rsapss.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/15-test_rsapss.t||test/recipes/15-test_rsapss.t": [
          "File: test/recipes/15-test_rsapss.t -> test/recipes/15-test_rsapss.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use strict;",
          "11: use warnings;",
          "13: use File::Spec;",
          "14: use OpenSSL::Test qw/:DEFAULT with srctop_file/;",
          "15: use OpenSSL::Test::Utils;",
          "17: setup(\"test_rsapss\");",
          "19: plan tests => 5;",
          "21: #using test/testrsa.pem which happens to be a 512 bit RSA",
          "22: ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha1',",
          "23:             '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:-2',",
          "24:             '-sigopt', 'rsa_mgf1_md:sha512', srctop_file('test', 'testrsa.pem')],",
          "25:            stdout => 'testrsapss.sig')),",
          "26:    \"openssl dgst -sign\");",
          "28: with({ exit_checker => sub { return shift == 1; } },",
          "29:      sub { ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha512',",
          "30:                        '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:-2',",
          "31:                        '-sigopt', 'rsa_mgf1_md:sha512', srctop_file('test', 'testrsa.pem')])),",
          "32:               \"openssl dgst -sign, expect to fail gracefully\");",
          "33:            ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha512',",
          "34:                        '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:2147483647',",
          "35:                        '-sigopt', 'rsa_mgf1_md:sha1', srctop_file('test', 'testrsa.pem')])),",
          "36:               \"openssl dgst -sign, expect to fail gracefully\");",
          "37:            ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'), '-sha512',",
          "38:                        '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:-2',",
          "39:                        '-sigopt', 'rsa_mgf1_md:sha512', '-signature', 'testrsapss.sig',",
          "40:                        srctop_file('test', 'testrsa.pem')])),",
          "41:               \"openssl dgst -prverify, expect to fail gracefully\");",
          "42:          });",
          "44: ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'), '-sha1',",
          "45:             '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:-2',",
          "46:             '-sigopt', 'rsa_mgf1_md:sha512', '-signature', 'testrsapss.sig',",
          "47:             srctop_file('test', 'testrsa.pem')])),",
          "48:    \"openssl dgst -prverify\");",
          "49: unlink 'testrsapss.sig';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df0d9c6950ce194601a0513afa5af77cc9d78d8c",
      "candidate_info": {
        "commit_hash": "df0d9c6950ce194601a0513afa5af77cc9d78d8c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/df0d9c6950ce194601a0513afa5af77cc9d78d8c",
        "files": [
          "test/recipes/80-test_ssl_old.t"
        ],
        "message": "Skip ECDH tests for SSLv3\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1597)\n(cherry picked from commit 4f326dd8998d5b33f72b11432f110e0f2cfcb92b)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t": [
          "File: test/recipes/80-test_ssl_old.t -> test/recipes/80-test_ssl_old.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:  foreach my $protocol (@protocols) {",
          "469:      note \"Testing ciphersuites for $protocol\";",
          "470:      foreach my $cipher (@{$ciphersuites{$protocol}}) {",
          "474:      }",
          "475:             is(run(test([@ssltest,",
          "476:                          \"-s_cipher\", \"EDH\",",
          "",
          "[Removed Lines]",
          "471:   ok(run(test([@ssltest, @exkeys, \"-cipher\", $cipher,",
          "472:         $protocol eq \"SSLv3\" ? (\"-ssl3\") : ()])),",
          "473:      \"Testing $cipher\");",
          "",
          "[Added Lines]",
          "471:                 if ($protocol eq \"SSLv3\" && $cipher =~ /ECDH/ ) {",
          "472:                     note \"*****SKIPPING $protocol $cipher\";",
          "473:                     ok(1);",
          "474:                 } else {",
          "475:                     ok(run(test([@ssltest, @exkeys, \"-cipher\", $cipher,",
          "476:                                  $protocol eq \"SSLv3\" ? (\"-ssl3\") : ()])),",
          "477:                        \"Testing $cipher\");",
          "478:                }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb2efacaa20987f252bc54a587619690c99dbe5f",
      "candidate_info": {
        "commit_hash": "bb2efacaa20987f252bc54a587619690c99dbe5f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bb2efacaa20987f252bc54a587619690c99dbe5f",
        "files": [
          "include/openssl/err.h",
          "util/indent.pro"
        ],
        "message": "Clean dead macros and defines\n\n... mostly related to some old discarded modules .\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1906)\n(cherry picked from commit 31a51151fc163a7f5f4d07dff9478be50e4b5707)",
        "before_after_code_files": [
          "include/openssl/err.h||include/openssl/err.h",
          "util/indent.pro||util/indent.pro"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/err.h||include/openssl/err.h": [
          "File: include/openssl/err.h -> include/openssl/err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: # define ERR_LIB_CMS             46",
          "90: # define ERR_LIB_TS              47",
          "91: # define ERR_LIB_HMAC            48",
          "93: # define ERR_LIB_CT              50",
          "94: # define ERR_LIB_ASYNC           51",
          "95: # define ERR_LIB_KDF             52",
          "",
          "[Removed Lines]",
          "92: # define ERR_LIB_JPAKE           49",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: # define CMSerr(f,r) ERR_PUT_error(ERR_LIB_CMS,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "129: # define TSerr(f,r) ERR_PUT_error(ERR_LIB_TS,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "130: # define HMACerr(f,r) ERR_PUT_error(ERR_LIB_HMAC,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "132: # define CTerr(f,r) ERR_PUT_error(ERR_LIB_CT,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "133: # define ASYNCerr(f,r) ERR_PUT_error(ERR_LIB_ASYNC,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "134: # define KDFerr(f,r) ERR_PUT_error(ERR_LIB_KDF,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "",
          "[Removed Lines]",
          "131: # define JPAKEerr(f,r) ERR_PUT_error(ERR_LIB_JPAKE,(f),(r),OPENSSL_FILE,OPENSSL_LINE)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/indent.pro||util/indent.pro": [
          "File: util/indent.pro -> util/indent.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: -ts0",
          "36: -T ACCESS_DESCRIPTION",
          "37: -T ADDED_OBJ",
          "56: -T AES_KEY",
          "57: -T APP_INFO",
          "58: -T ARGS",
          "",
          "[Removed Lines]",
          "38: -T AEP_BBOOL",
          "39: -T AEP_CHAR",
          "40: -T AEP_CHAR_PTR",
          "41: -T AEP_CONNECTION_ENTRY",
          "42: -T AEP_CONNECTION_HNDL",
          "43: -T AEP_CONNECTION_HNDL_PTR",
          "44: -T AEP_FLAGS",
          "45: -T AEP_RV",
          "46: -T AEP_TRANSACTION_ID",
          "47: -T AEP_TRANSACTION_ID_PTR",
          "48: -T AEP_U16",
          "49: -T AEP_U32",
          "50: -T AEP_U32_PTR",
          "51: -T AEP_U64_PTR",
          "52: -T AEP_U8",
          "53: -T AEP_U8_PTR",
          "54: -T AEP_VOID_PTR",
          "55: -T AEP_VOID_PTR_PTR",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285: -T HEAPLIST32",
          "286: -T HEARTBEAT_TEST_FIXTURE",
          "287: -T HMAC_CTX",
          "292: -T IDEA_KEY_SCHEDULE",
          "293: -T IPAddrBlocks",
          "294: -T IPAddressFamily",
          "",
          "[Removed Lines]",
          "288: -T ICA_KEY_RSA_CRT",
          "289: -T ICA_KEY_RSA_CRT_REC",
          "290: -T ICA_KEY_RSA_MODEXPO",
          "291: -T ICA_KEY_RSA_MODEXPO_REC",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362: -T OPENSSL_ITEM",
          "363: -T OPENSSL_PSTRING",
          "364: -T OPENSSL_STRING",
          "366: -T OSSL_ASYNC_FD",
          "367: -T OTHERNAME",
          "368: -T P256_POINT",
          "",
          "[Removed Lines]",
          "365: -T OPENSSL_STRING",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434: -T SSL",
          "435: -T SSL2_STATE",
          "436: -T SSL3_BUFFER",
          "439: -T SSL3_COMP",
          "440: -T SSL3_ENC_METHOD",
          "441: -T SSL3_RECORD",
          "",
          "[Removed Lines]",
          "437: -T SSL3_BUF_FREELIST",
          "438: -T SSL3_BUF_FREELIST_ENTRY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450: -T SSL_SESSION",
          "451: -T SSL_SESSION_ASN1",
          "452: -T STACK_OF",
          "490: -T SXNET",
          "491: -T SXNETID",
          "492: -T TCHAR",
          "",
          "[Removed Lines]",
          "453: -T STORE",
          "454: -T STORE_ATTR_INFO",
          "455: -T STORE_ATTR_TYPES",
          "456: -T STORE_CERTIFICATE_STATUS",
          "457: -T STORE_CLEANUP_FUNC_PTR",
          "458: -T STORE_CTRL_FUNC_PTR",
          "459: -T STORE_END_OBJECT_FUNC_PTR",
          "460: -T STORE_GENERATE_OBJECT_FUNC_PTR",
          "461: -T STORE_GENERIC_FUNC_PTR",
          "462: -T STORE_GET_OBJECT_FUNC_PTR",
          "463: -T STORE_HANDLE_OBJECT_FUNC_PTR",
          "464: -T STORE_INITIALISE_FUNC_PTR",
          "465: -T STORE_METHOD",
          "466: -T STORE_MODIFY_OBJECT_FUNC_PTR",
          "467: -T STORE_NEXT_OBJECT_FUNC_PTR",
          "468: -T STORE_OBJECT",
          "469: -T STORE_OBJECT_TYPES",
          "470: -T STORE_PARAM_TYPES",
          "471: -T STORE_START_OBJECT_FUNC_PTR",
          "472: -T STORE_STORE_OBJECT_FUNC_PTR",
          "473: -T SW_ALGTYPE",
          "474: -T SW_BYTE",
          "475: -T SW_COMMAND_BITMAP",
          "476: -T SW_COMMAND_CODE",
          "477: -T SW_CONTEXT_HANDLE",
          "478: -T SW_CRT",
          "479: -T SW_DSA",
          "480: -T SW_EXP",
          "481: -T SW_LARGENUMBER",
          "482: -T SW_NVDATA",
          "483: -T SW_OSHANDLE",
          "484: -T SW_PARAM",
          "485: -T SW_STATE",
          "486: -T SW_STATUS",
          "487: -T SW_U16",
          "488: -T SW_U32",
          "489: -T SW_U64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "662: -T STACK_OF_SRTP_PROTECTION_PROFILE_",
          "663: -T STACK_OF_SSL_CIPHER_",
          "664: -T STACK_OF_SSL_COMP_",
          "666: -T STACK_OF_STRING_",
          "667: -T STACK_OF_SXNETID_",
          "668: -T STACK_OF_SingleResponse_",
          "",
          "[Removed Lines]",
          "665: -T STACK_OF_STORE_ATTR_INFO_",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}