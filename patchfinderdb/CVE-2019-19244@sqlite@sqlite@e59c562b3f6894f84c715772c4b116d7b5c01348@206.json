{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04fcef00eed718bcaea0ef6c9172500a27a1052e",
      "candidate_info": {
        "commit_hash": "04fcef00eed718bcaea0ef6c9172500a27a1052e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04fcef00eed718bcaea0ef6c9172500a27a1052e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "Fix a corner-case for the logic that cause an insert of a NULL into an INTEGER PRIMARY KEY column to be converted into a valid integer key, when the NULL results from a CASE expression that lacks an ELSE clause.\n\nFossilOrigin-Name: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10ffc1fe006a1766ff2f1ffc6129786afb86b6b1f8d3a17334e8ecb838d37b9c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:       }else if( pSelect ){",
          "954:         sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "955:       }else{",
          "961:           appendFlag = 1;",
          "966:         }",
          "967:       }",
          "",
          "[Removed Lines]",
          "956:         VdbeOp *pOp;",
          "957:         sqlite3ExprCode(pParse, pList->a[ipkColumn].pExpr, regRowid);",
          "958:         pOp = sqlite3VdbeGetOp(v, -1);",
          "959:         assert( pOp!=0 );",
          "960:         if( pOp->opcode==OP_Null && !IsVirtual(pTab) ){",
          "962:           pOp->opcode = OP_NewRowid;",
          "963:           pOp->p1 = iDataCur;",
          "964:           pOp->p2 = regRowid;",
          "965:           pOp->p3 = regAutoinc;",
          "",
          "[Added Lines]",
          "956:         Expr *pIpk = pList->a[ipkColumn].pExpr;",
          "957:         if( pIpk->op==TK_NULL && !IsVirtual(pTab) ){",
          "958:           sqlite3VdbeAddOp3(v, OP_NewRowid, iDataCur, regRowid, regAutoinc);",
          "960:         }else{",
          "961:           sqlite3ExprCode(pParse, pList->a[ipkColumn].pExpr, regRowid);",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:   SELECT * FROM t13 ORDER BY +b;",
          "450: } {2 0 6 2 1 5}",
          "452: integrity_check insert-99.0",
          "454: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452: # 2019-01-17.  From the chromium fuzzer.",
          "453: #",
          "454: do_execsql_test insert-14.1 {",
          "455:   DROP TABLE IF EXISTS t14;",
          "456:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "457:   INSERT INTO t14 VALUES(CASE WHEN 1 THEN null END);",
          "458:   SELECT x FROM t14;",
          "459: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9443dbc493612588608e5cc6d3c46891c1c8025e",
      "candidate_info": {
        "commit_hash": "9443dbc493612588608e5cc6d3c46891c1c8025e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9443dbc493612588608e5cc6d3c46891c1c8025e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the \".recover\" command so that it handles intkey pages linked into non-intkey b-trees, and vice-versa, better.\n\nFossilOrigin-Name: 9c458acba5a100a76148a3efb78ea9f57b85751e80788e4532694bd8976608a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: becaaa4d29d17ad613f2a120f0b173e53403b3de26f22beaf83f66ebf369bf60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6740:   );",
          "6741:   shellPrepare(pState->db, &rc,",
          "6742:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "6743:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6744:       \"GROUP BY cell\", &pCells",
          "6745:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6743:       \", min(field) \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6758:     int bNoop = 0;",
          "6759:     RecoverTable *pTab;",
          "6761:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6762:     if( bNoop || rc ) continue;",
          "6763:     if( pTab==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6762:     assert( bIntkey==0 || bIntkey==1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6779:       sqlite3_bind_int(pCells, 1, iPgno);",
          "6780:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6781:         int nField = sqlite3_column_int(pCells, 0);",
          "6782:         const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6784:         nField = nField+1;",
          "6786:           raw_printf(pState->out,",
          "6787:               \"INSERT INTO %s VALUES(%d, %d, %d, %s%s%s);\\n\",",
          "6790:           );",
          "6791:         }else{",
          "6792:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6794:           );",
          "6795:         }",
          "6796:       }",
          "",
          "[Removed Lines]",
          "6785:         if( pTab==pOrphan ){",
          "6788:               pTab->zQuoted, iRoot, iPgno, nField,",
          "6789:               bIntkey ? \"\" : \"NULL, \", zVal, pTab->azlCol[nField]",
          "6793:               pTab->zQuoted, pTab->azlCol[nField], zVal",
          "",
          "[Added Lines]",
          "6784:         int iMin = sqlite3_column_int(pCells, 2);",
          "6787:         RecoverTable *pTab2 = pTab;",
          "6788:         if( pTab!=pOrphan && (iMin<0)!=bIntkey ){",
          "6789:           if( pOrphan==0 ){",
          "6790:             pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "6791:           }",
          "6792:           pTab2 = pOrphan;",
          "6793:           if( pTab2==0 ) break;",
          "6794:         }",
          "6797:         if( pTab2==pOrphan ){",
          "6800:               pTab2->zQuoted, iRoot, iPgno, nField,",
          "6801:               iMin<0 ? \"\" : \"NULL, \", zVal, pTab2->azlCol[nField]",
          "6805:               pTab2->zQuoted, pTab2->azlCol[nField], zVal",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12fe9a0d2512ebbbcc9c492af187ff76404b913e",
      "candidate_info": {
        "commit_hash": "12fe9a0d2512ebbbcc9c492af187ff76404b913e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12fe9a0d2512ebbbcc9c492af187ff76404b913e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Fix an assert() that might not be true if the database file is corrupt.\n\nFossilOrigin-Name: f2d400db4dbfb05e2540178ed3662f97f8c57a95f8129886c7081c35e53adf0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0abace8a7aecca01c8677d07f3ec1bafb289ceffe5bcd60284701a7bf813f415",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8261:   }",
          "8262:   assert( sqlite3PagerIswriteable(pChild->pDbPage) );",
          "8263:   assert( sqlite3PagerIswriteable(pRoot->pDbPage) );",
          "8266:   TRACE((\"BALANCE: copy root %d into %d\\n\", pRoot->pgno, pChild->pgno));",
          "",
          "[Removed Lines]",
          "8264:   assert( pChild->nCell==pRoot->nCell );",
          "",
          "[Added Lines]",
          "8264:   assert( pChild->nCell==pRoot->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6214d93993a545b578e7139951f07840e049ee45",
      "candidate_info": {
        "commit_hash": "6214d93993a545b578e7139951f07840e049ee45",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6214d93993a545b578e7139951f07840e049ee45",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix an off-by-one error on a Goto in the code generator, that only causes problems for a REPLACE on an INTEGER PRIMARY KEY in non-debug builds.  Test case in TH3.\n\nFossilOrigin-Name: e35eb8776ed539afe1d5db099470ab1124d8dd2db73ee5db7c811f8df9a9576e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 703646b1b5c84d550fe0d74e399c0eeb729da1d263e4693320f69e6509678985",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1844:   if( ipkTop ){",
          "1846:     VdbeComment((v, \"Do IPK REPLACE\"));",
          "1847:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1848:   }",
          "",
          "[Removed Lines]",
          "1845:     sqlite3VdbeGoto(v, ipkTop+1);",
          "",
          "[Added Lines]",
          "1845:     sqlite3VdbeGoto(v, ipkTop);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff119f04b42a7ad3a16c306446af7e301d34026a",
      "candidate_info": {
        "commit_hash": "ff119f04b42a7ad3a16c306446af7e301d34026a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff119f04b42a7ad3a16c306446af7e301d34026a",
        "files": [
          "ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c",
          "ext/misc/closure.c",
          "ext/misc/fileio.c",
          "ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c",
          "ext/session/changeset.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings from MSVC.\n\nFossilOrigin-Name: f0f02d46e40667d0fc31c57eb26d459ce2f3a3c222c767fa371100b36e5335d1",
        "before_after_code_files": [
          "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c||ext/misc/amatch.c",
          "ext/misc/closure.c||ext/misc/closure.c",
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "ext/misc/fuzzer.c||ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c||ext/misc/unionvtab.c",
          "ext/session/changeset.c||ext/session/changeset.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c": [
          "File: ext/fts3/fts3_term.c -> ext/fts3/fts3_term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   nByte = sizeof(Fts3termTable) + sizeof(Fts3Table) + nDb + nFts3 + 2;",
          "99:   p = (Fts3termTable *)sqlite3_malloc64(nByte);",
          "100:   if( !p ) return SQLITE_NOMEM;",
          "103:   p->pFts3Tab = (Fts3Table *)&p[1];",
          "104:   p->pFts3Tab->zDb = (char *)&p->pFts3Tab[1];",
          "",
          "[Removed Lines]",
          "101:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "101:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "739:         int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "740:         for(; i<128 && i<n; i++){",
          "742:         }",
          "743:         iTbl++;",
          "744:       }",
          "",
          "[Removed Lines]",
          "741:           aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "741:           aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     if( p==0 ){",
          "582:       rc = SQLITE_NOMEM;",
          "583:     }else{",
          "585:       p->nPhrase = nPhrase;",
          "586:       p->aIDF = (double*)&p[1];",
          "587:       p->aFreq = &p->aIDF[nPhrase];",
          "",
          "[Removed Lines]",
          "584:       memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "584:       memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return 1;",
          "29:     }else{",
          "31:       pBuf->p = pNew;",
          "32:     }",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:       pBuf->nSpace = nNew;",
          "",
          "[Added Lines]",
          "30:       pBuf->nSpace = (int)nNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     if( pRet==0 ){",
          "252:       if( nByte>0 ) *pRc = SQLITE_NOMEM;",
          "253:     }else{",
          "255:     }",
          "256:   }",
          "257:   return pRet;",
          "",
          "[Removed Lines]",
          "254:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "254:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   if( zOut==0 ){",
          "437:   }else{",
          "439:     if( fts5_isopenquote(zOut[0]) ){",
          "440:       int ii = fts5Dequote(zOut);",
          "441:       zRet = &zIn[ii];",
          "",
          "[Removed Lines]",
          "438:     memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "438:     memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       if( pRet==0 ){",
          "1488:         pParse->rc = SQLITE_NOMEM;",
          "1489:       }else{",
          "1491:       }",
          "1492:     }else if( (pNear->nPhrase % SZALLOC)==0 ){",
          "1493:       int nNew = pNear->nPhrase + SZALLOC;",
          "",
          "[Removed Lines]",
          "1490:         memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "1490:         memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:     if( pSyn==0 ){",
          "1564:       rc = SQLITE_NOMEM;",
          "1565:     }else{",
          "1567:       pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);",
          "1568:       memcpy(pSyn->zTerm, pToken, nToken);",
          "1569:       pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;",
          "",
          "[Removed Lines]",
          "1566:       memset(pSyn, 0, nByte);",
          "",
          "[Added Lines]",
          "1566:       memset(pSyn, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:       nByte = sizeof(Fts5Colset) + (pColsetOrig->nCol-1) * sizeof(int);",
          "1724:       pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);",
          "1725:       if( pColset ){",
          "1727:       }",
          "1728:       pNew->pRoot->pNear->pColset = pColset;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:         memcpy(pColset, pColsetOrig, nByte);",
          "",
          "[Added Lines]",
          "1726:         memcpy(pColset, pColsetOrig, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     sqlite3_int64 nByte = sizeof(Fts5Colset) + (pOrig->nCol-1) * sizeof(int);",
          "1941:     pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);",
          "1942:     if( pRet ){",
          "1944:     }",
          "1945:   }else{",
          "1946:     pRet = 0;",
          "",
          "[Removed Lines]",
          "1943:       memcpy(pRet, pOrig, nByte);",
          "",
          "[Added Lines]",
          "1943:       memcpy(pRet, pOrig, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       rc = SQLITE_NOMEM;",
          "105:     }else{",
          "107:     }",
          "108:   }",
          "109:   return rc;",
          "",
          "[Removed Lines]",
          "106:       memset(pNew->aSlot, 0, nByte);",
          "",
          "[Added Lines]",
          "106:       memset(pNew->aSlot, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     p = (Fts5HashEntry*)sqlite3_malloc64(nByte);",
          "285:     if( !p ) return SQLITE_NOMEM;",
          "286:     memset(p, 0, sizeof(Fts5HashEntry));",
          "288:     zKey = fts5EntryKey(p);",
          "289:     zKey[0] = bByte;",
          "290:     memcpy(&zKey[1], pToken, nToken);",
          "",
          "[Removed Lines]",
          "287:     p->nAlloc = nByte;",
          "",
          "[Added Lines]",
          "287:     p->nAlloc = (int)nByte;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     pCsr = (Fts5Cursor*)sqlite3_malloc64(nByte);",
          "634:     if( pCsr ){",
          "635:       Fts5Global *pGlobal = pTab->pGlobal;",
          "637:       pCsr->aColumnSize = (int*)&pCsr[1];",
          "638:       pCsr->pNext = pGlobal->pCsr;",
          "639:       pGlobal->pCsr = pCsr;",
          "",
          "[Removed Lines]",
          "636:       memset(pCsr, 0, nByte);",
          "",
          "[Added Lines]",
          "636:       memset(pCsr, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:   nByte = sizeof(Fts5Sorter) + sizeof(int) * (nPhrase-1);",
          "915:   pSorter = (Fts5Sorter*)sqlite3_malloc64(nByte);",
          "916:   if( pSorter==0 ) return SQLITE_NOMEM;",
          "918:   pSorter->nIdx = nPhrase;",
          "",
          "[Removed Lines]",
          "917:   memset(pSorter, 0, nByte);",
          "",
          "[Added Lines]",
          "917:   memset(pSorter, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   if( !p ) return SQLITE_NOMEM;",
          "293:   p->aTotalSize = (i64*)&p[1];",
          "294:   p->pConfig = pConfig;",
          "295:   p->pIndex = pIndex;",
          "",
          "[Removed Lines]",
          "292:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "292:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "770:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "771:     for(; i<128 && i<n; i++){",
          "773:     }",
          "774:     iTbl++;",
          "775:   }",
          "",
          "[Removed Lines]",
          "772:       aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "772:       aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/misc/amatch.c||ext/misc/amatch.c": [
          "File: ext/misc/amatch.c -> ext/misc/amatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "751:     }else{",
          "",
          "[Removed Lines]",
          "750:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "750:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/closure.c||ext/misc/closure.c": [
          "File: ext/misc/closure.c -> ext/misc/closure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "435:     }else{",
          "",
          "[Removed Lines]",
          "434:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "434:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "ext/misc/fuzzer.c||ext/misc/fuzzer.c": [
          "File: ext/misc/fuzzer.c -> ext/misc/fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "460:     }else{",
          "",
          "[Removed Lines]",
          "459:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "459:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:       memset(pNew, 0, sizeof(*pNew));",
          "526:       pNew->zClassName = (char*)&pNew[1];",
          "529:       zTab = fuzzerDequote(argv[3]);",
          "530:       if( zTab==0 ){",
          "",
          "[Removed Lines]",
          "527:       memcpy(pNew->zClassName, zModule, nModule+1);",
          "",
          "[Added Lines]",
          "527:       memcpy(pNew->zClassName, zModule, (size_t)(nModule+1));",
          "",
          "---------------"
        ],
        "ext/misc/unionvtab.c||ext/misc/unionvtab.c": [
          "File: ext/misc/unionvtab.c -> ext/misc/unionvtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if( *pRc==SQLITE_OK ){",
          "257:     pRet = sqlite3_malloc64(nByte);",
          "258:     if( pRet ){",
          "260:     }else{",
          "262:     }",
          "",
          "[Removed Lines]",
          "259:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "259:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     sqlite3_int64 nByte = strlen(zIn) + 1;",
          "280:     zRet = unionMalloc(pRc, nByte);",
          "281:     if( zRet ){",
          "283:     }",
          "284:   }",
          "285:   return zRet;",
          "",
          "[Removed Lines]",
          "282:       memcpy(zRet, zIn, nByte);",
          "",
          "[Added Lines]",
          "282:       memcpy(zRet, zIn, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/session/changeset.c||ext/session/changeset.c": [
          "File: ext/session/changeset.c -> ext/session/changeset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "56:   if( pBuf==0 ){",
          "57:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "59:     exit(1);",
          "60:   }",
          "61:   if( sz>0 ){",
          "64:       exit(1);",
          "65:     }",
          "66:     fclose(f);",
          "67:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "58:             sz, zFilename);",
          "62:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "58:             (int)sz, zFilename);",
          "62:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "64:               (int)sz, zFilename);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90acdbfce9c088582d5165589f7eac462b00062bbfffacdcc786eb9cf3ea5377",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   assert( pPage->nCell>0",
          "2017:        || CORRUPT_DB );",
          "2019:   pPage->isInit = 1;",
          "",
          "[Removed Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==(int)pBt->usableSize",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "535:   for(i=k=0; i<n; i++){",
          "536:     unsigned char c = (unsigned char)zIn[i];",
          "537:     if( isxdigit(c) ){",
          "",
          "[Removed Lines]",
          "534:   memset(a, 0, nAlloc);",
          "",
          "[Added Lines]",
          "534:   memset(a, 0, (size_t)nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "",
          "[Removed Lines]",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "",
          "[Added Lines]",
          "571:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "",
          "---------------"
        ]
      }
    }
  ]
}