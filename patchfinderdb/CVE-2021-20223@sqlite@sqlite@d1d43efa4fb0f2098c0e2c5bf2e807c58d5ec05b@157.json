{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d5157e01b8c1d760035b8c72d7aa7f8659c1e0ea",
      "candidate_info": {
        "commit_hash": "d5157e01b8c1d760035b8c72d7aa7f8659c1e0ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d5157e01b8c1d760035b8c72d7aa7f8659c1e0ea",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/GetTclKit.bat"
        ],
        "message": "Enhancements to TclKit batch tool for MSVC.\n\nFossilOrigin-Name: 2a8a4552112be6e39e3475e9a8579582b5157086d3efd37971463c0e3958068d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/GetTclKit.bat||tool/GetTclKit.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 462adc7d6b14de3862c2a3e57dba7efaf2ba9c104e1c127a5801a7b892059872",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/GetTclKit.bat||tool/GetTclKit.bat": [
          "File: tool/GetTclKit.bat -> tool/GetTclKit.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   GOTO usage",
          "40: )",
          "47: SET TOOLS=%~dp0",
          "48: SET TOOLS=%TOOLS:~0,-1%",
          "",
          "[Removed Lines]",
          "42: SET ROOT=%~dp0\\..",
          "43: SET ROOT=%ROOT:\\\\=\\%",
          "45: %_VECHO% Root = '%ROOT%'",
          "",
          "[Added Lines]",
          "42: IF NOT DEFINED ENVDIR (",
          "43:   SET ENVDIR=%CD%",
          "44: )",
          "46: %_VECHO% EnvDir = '%ENVDIR%'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: %_VECHO% Temp = '%TEMP%'",
          "66: IF NOT DEFINED TCLKIT_URI (",
          "68: )",
          "70: %_VECHO% TclKitUri = '%TCLKIT_URI%'",
          "72: IF /I \"%PROCESSOR%\" == \"x86\" (",
          "73:   CALL :fn_TclKitX86Variables",
          "74: ) ELSE IF /I \"%PROCESSOR%\" == \"x64\" (",
          "75:   CALL :fn_TclKitX64Variables",
          "76: ) ELSE (",
          "77:   GOTO usage",
          "78: )",
          "80: %_VECHO% TclKitVersion = '%TCLKIT_VERSION%'",
          "81: %_VECHO% TclKitPatchLevel = '%TCLKIT_PATCHLEVEL%'",
          "82: %_VECHO% TclKitNoEnv = '%TCLKIT_NOENV%'",
          "83: %_VECHO% TclKitNoSdk = '%TCLKIT_NOSDK%'",
          "84: %_VECHO% TclKitExe = '%TCLKIT_EXE%'",
          "",
          "[Removed Lines]",
          "67:   SET TCLKIT_URI=https://tclsh.com/",
          "",
          "[Added Lines]",
          "68:   SET TCLKIT_URI=https://urn.to/r/tclsh/",
          "73: IF NOT DEFINED TCLKIT_PATCHLEVEL (",
          "74:   SET TCLKIT_PATCHLEVEL=8.6.6",
          "75: )",
          "77: %_VECHO% TclKitPatchLevel = '%TCLKIT_PATCHLEVEL%'",
          "79: IF NOT DEFINED TCLKIT_EXE_PATCHLEVEL (",
          "80:   SET TCLKIT_EXE_PATCHLEVEL=8.6.4",
          "81: )",
          "83: %_VECHO% TclKitExePatchLevel = '%TCLKIT_EXE_PATCHLEVEL%'",
          "88:   IF ERRORLEVEL 1 (",
          "89:     GOTO errors",
          "90:   )",
          "94:   IF ERRORLEVEL 1 (",
          "95:     GOTO errors",
          "96:   )",
          "103: %_VECHO% TclKitExePatchLevel = '%TCLKIT_EXE_PATCHLEVEL%'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174: IF DEFINED TCLKIT_NOENV GOTO skip_sdkEnvironment",
          "178: IF DEFINED TCLKIT_NOSDK GOTO skip_sdkVariables",
          "186: :skip_sdkVariables",
          "188: ECHO.",
          "190: ECHO Please run it to set the necessary Tcl environment variables.",
          "191: ECHO.",
          "",
          "[Removed Lines]",
          "176: %__ECHO% ECHO SET TCLSH_CMD=%TEMP%\\%TCLKIT_EXE%%OVERWRITE%\"%ROOT%\\SetTclKitEnv.bat\"",
          "180: %__ECHO% ECHO SET TCLINCDIR=%TEMP%\\%TCLKIT_SDK%\\include%APPEND%\"%ROOT%\\SetTclKitEnv.bat\"",
          "181: %__ECHO% ECHO SET TCLLIBDIR=%TEMP%\\%TCLKIT_SDK%\\lib%APPEND%\"%ROOT%\\SetTclKitEnv.bat\"",
          "182: %__ECHO% ECHO SET LIBTCLPATH=%TEMP%\\%TCLKIT_SDK%\\lib%APPEND%\"%ROOT%\\SetTclKitEnv.bat\"",
          "183: %__ECHO% ECHO SET LIBTCL=%TCLKIT_LIB%%APPEND%\"%ROOT%\\SetTclKitEnv.bat\"",
          "184: %__ECHO% ECHO SET LIBTCLSTUB=%TCLKIT_LIB_STUB%%APPEND%\"%ROOT%\\SetTclKitEnv.bat\"",
          "189: ECHO Wrote \"%ROOT%\\SetTclKitEnv.bat\".",
          "",
          "[Added Lines]",
          "198: %__ECHO% ECHO SET TCLSH_CMD=%TEMP%\\%TCLKIT_EXE%%OVERWRITE%\"%ENVDIR%\\SetTclKitEnv.bat\"",
          "202: %__ECHO% ECHO SET TCLINCDIR=%TEMP%\\%TCLKIT_SDK%\\include%APPEND%\"%ENVDIR%\\SetTclKitEnv.bat\"",
          "203: %__ECHO% ECHO SET TCLLIBDIR=%TEMP%\\%TCLKIT_SDK%\\lib%APPEND%\"%ENVDIR%\\SetTclKitEnv.bat\"",
          "204: %__ECHO% ECHO SET LIBTCLPATH=%TEMP%\\%TCLKIT_SDK%\\lib%APPEND%\"%ENVDIR%\\SetTclKitEnv.bat\"",
          "205: %__ECHO% ECHO SET LIBTCL=%TCLKIT_LIB%%APPEND%\"%ENVDIR%\\SetTclKitEnv.bat\"",
          "206: %__ECHO% ECHO SET LIBTCLSTUB=%TCLKIT_LIB_STUB%%APPEND%\"%ENVDIR%\\SetTclKitEnv.bat\"",
          "211: ECHO Wrote \"%ENVDIR%\\SetTclKitEnv.bat\".",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:   REM       to be available for download.",
          "203:   REM",
          "204:   IF NOT DEFINED TCLKIT_PATCHLEVEL (",
          "206:   )",
          "207:   SET TCLKIT_VERSION=%TCLKIT_PATCHLEVEL:.=%",
          "208:   SET TCLKIT_VERSION=%TCLKIT_VERSION:~0,2%",
          "211:   SET TCLKIT_LIB=libtclkit%TCLKIT_PATCHLEVEL:.=%.lib",
          "212:   SET TCLKIT_LIB_STUB=libtclstub%TCLKIT_VERSION:.=%.a",
          "213:   SET TCLKIT_SDK=libtclkit-sdk-x86-%TCLKIT_PATCHLEVEL%",
          "",
          "[Removed Lines]",
          "205:     SET TCLKIT_PATCHLEVEL=8.6.6",
          "209:   REM SET TCLKIT_EXE=tclkit-%TCLKIT_PATCHLEVEL%.exe",
          "210:   SET TCLKIT_EXE=tclkit-8.6.4.exe",
          "",
          "[Added Lines]",
          "227:     ECHO The TCLKIT_PATCHLEVEL environment variable must be set first.",
          "228:     CALL :fn_SetErrorLevel",
          "229:     GOTO :EOF",
          "233:   IF DEFINED TCLKIT_EXE_PATCHLEVEL (",
          "234:     SET TCLKIT_EXE=tclkit-%TCLKIT_EXE_PATCHLEVEL%.exe",
          "235:   ) ELSE (",
          "236:     SET TCLKIT_EXE=tclkit-%TCLKIT_PATCHLEVEL%.exe",
          "237:   )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:   REM       to be available for download.",
          "227:   REM",
          "228:   IF NOT DEFINED TCLKIT_PATCHLEVEL (",
          "230:   )",
          "231:   SET TCLKIT_VERSION=%TCLKIT_PATCHLEVEL:.=%",
          "232:   SET TCLKIT_VERSION=%TCLKIT_VERSION:~0,2%",
          "235:   SET TCLKIT_LIB=libtclkit%TCLKIT_PATCHLEVEL:.=%.lib",
          "236:   SET TCLKIT_LIB_STUB=libtclstub%TCLKIT_VERSION:.=%.a",
          "237:   SET TCLKIT_SDK=libtclkit-sdk-x64-%TCLKIT_PATCHLEVEL%",
          "",
          "[Removed Lines]",
          "229:     SET TCLKIT_PATCHLEVEL=8.6.6",
          "233:   REM SET TCLKIT_EXE=tclkit-%TCLKIT_PATCHLEVEL%.exe",
          "234:   SET TCLKIT_EXE=tclkit-8.6.4.exe",
          "",
          "[Added Lines]",
          "256:     ECHO The TCLKIT_PATCHLEVEL environment variable must be set first.",
          "257:     CALL :fn_SetErrorLevel",
          "258:     GOTO :EOF",
          "262:   IF DEFINED TCLKIT_EXE_PATCHLEVEL (",
          "263:     SET TCLKIT_EXE=tclkit-%TCLKIT_EXE_PATCHLEVEL%.exe",
          "264:   ) ELSE (",
          "265:     SET TCLKIT_EXE=tclkit-%TCLKIT_PATCHLEVEL%.exe",
          "266:   )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8103a03607878504d2ada2a975b37b837e8825f3",
      "candidate_info": {
        "commit_hash": "8103a03607878504d2ada2a975b37b837e8825f3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8103a03607878504d2ada2a975b37b837e8825f3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/sqliteInt.h",
          "src/whereexpr.c",
          "test/tabfunc01.test"
        ],
        "message": "Fix table-valued functions so that they will work as the right table in a LEFT JOIN.  Ticket [2ae0c599b735d59e]\n\nFossilOrigin-Name: 2c35d3f67b67a53ead08b1c395e7ca8e5bf65f94a5a962a0562994a3c66c95d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/whereexpr.c||src/whereexpr.c",
          "test/tabfunc01.test||test/tabfunc01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6399c47ea89c5766274bd6abdc9b6a85fe5b7f6c1078972c2f58e624bae59b7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:   while( p ){",
          "390:     ExprSetProperty(p, EP_FromJoin);",
          "391:     assert( !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) );",
          "",
          "[Removed Lines]",
          "388: static void setJoinExpr(Expr *p, int iTable){",
          "",
          "[Added Lines]",
          "388: void sqlite3SetJoinExpr(Expr *p, int iTable){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     if( p->op==TK_FUNCTION && p->x.pList ){",
          "395:       int i;",
          "396:       for(i=0; i<p->x.pList->nExpr; i++){",
          "398:       }",
          "399:     }",
          "401:     p = p->pRight;",
          "402:   }",
          "403: }",
          "",
          "[Removed Lines]",
          "397:         setJoinExpr(p->x.pList->a[i].pExpr, iTable);",
          "400:     setJoinExpr(p->pLeft, iTable);",
          "",
          "[Added Lines]",
          "397:         sqlite3SetJoinExpr(p->x.pList->a[i].pExpr, iTable);",
          "400:     sqlite3SetJoinExpr(p->pLeft, iTable);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491:     if( pRight->pOn ){",
          "493:       p->pWhere = sqlite3ExprAnd(pParse, p->pWhere, pRight->pOn);",
          "494:       pRight->pOn = 0;",
          "495:     }",
          "",
          "[Removed Lines]",
          "492:       if( isOuter ) setJoinExpr(pRight->pOn, pRight->iCursor);",
          "",
          "[Added Lines]",
          "492:       if( isOuter ) sqlite3SetJoinExpr(pRight->pOn, pRight->iCursor);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4055:     pWhere = pSub->pWhere;",
          "4056:     pSub->pWhere = 0;",
          "4057:     if( isLeftJoin>0 ){",
          "4059:     }",
          "4060:     pParent->pWhere = sqlite3ExprAnd(pParse, pWhere, pParent->pWhere);",
          "4061:     if( db->mallocFailed==0 ){",
          "",
          "[Removed Lines]",
          "4058:       setJoinExpr(pWhere, iNewParent);",
          "",
          "[Added Lines]",
          "4058:       sqlite3SetJoinExpr(pWhere, iNewParent);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4248: #endif",
          "4250: int sqlite3JoinType(Parse*, Token*, Token*, Token*);",
          "4251: void sqlite3CreateForeignKey(Parse*, ExprList*, Token*, ExprList*, int);",
          "4252: void sqlite3DeferForeignKey(Parse*, int);",
          "4253: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4251: void sqlite3SetJoinExpr(Expr*,int);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1594:     pRhs = sqlite3PExpr(pParse, TK_UPLUS,",
          "1595:         sqlite3ExprDup(pParse->db, pArgs->a[j].pExpr, 0), 0);",
          "1596:     pTerm = sqlite3PExpr(pParse, TK_EQ, pColRef, pRhs);",
          "1597:     whereClauseInsert(pWC, pTerm, TERM_DYNAMIC);",
          "1598:   }",
          "1599: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1597:     if( pItem->fg.jointype & JT_LEFT ){",
          "1598:       sqlite3SetJoinExpr(pTerm, pItem->iCursor);",
          "1599:     }",
          "",
          "---------------"
        ],
        "test/tabfunc01.test||test/tabfunc01.test": [
          "File: test/tabfunc01.test -> test/tabfunc01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   }",
          "219: } {5.0 x5 | 7.0 x7 | 13.0 x13 | 17.0 x17 | 23.0 x23 |}",
          "221: # Free up memory allocations",
          "222: intarray_addr",
          "223: int64array_addr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: # ticket https://www.sqlite.org/src/info/2ae0c599b735d59e",
          "222: do_test tabfunc01-751 {",
          "223:   db eval {",
          "224:     SELECT aa.value, bb.value, '|'",
          "225:       FROM carray(inttoptr($PTR4),5,'double') AS aa",
          "226:       LEFT JOIN carray(inttoptr($PTR5),5,'char*') AS bb ON aa.rowid=bb.rowid;",
          "227:   }",
          "228: } {5.0 x5 | 7.0 x7 | 13.0 x13 | 17.0 x17 | 23.0 x23 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "879f1a1ea6fa4a18219e5c3270f036be26409f6d",
      "candidate_info": {
        "commit_hash": "879f1a1ea6fa4a18219e5c3270f036be26409f6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/879f1a1ea6fa4a18219e5c3270f036be26409f6d",
        "files": [
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix a bad interaction between RBU and [df51ae19].\n\nFossilOrigin-Name: 0b9d8a1202c4220fd2ef299b6194533c1bf4018a0cd2d13da7e22c1a7de05ffa",
        "before_after_code_files": [
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4959:   }else{",
          "4960:     while( *z==0 ) z++;",
          "4961:   }",
          "4963:   return z;",
          "4964: }",
          "",
          "[Removed Lines]",
          "4962:   z += (n + 8 + 1);",
          "",
          "[Added Lines]",
          "4962:   z += (n + 8 + 2);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1ba9a37d7a68a6d31f8197c6350589ebe6a12f4e3c193a178dd7ead8bcd565a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4813:       z += strlen(z)+1;",
          "4814:       nUri++;",
          "4815:     }",
          "4817:     assert( nUriByte>=1 );",
          "4818:     if( rc==SQLITE_OK && nPathname+8>pVfs->mxPathname ){",
          "",
          "[Removed Lines]",
          "4816:     nUriByte = (int)(&z[2] - zUri);",
          "",
          "[Added Lines]",
          "4816:     nUriByte = (int)(&z[1] - zUri);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6712647c62f91a521ddfc74baa5423f39504f61",
      "candidate_info": {
        "commit_hash": "c6712647c62f91a521ddfc74baa5423f39504f61",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6712647c62f91a521ddfc74baa5423f39504f61",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improved quoting of the table name argument for the \".import\" command of the CLI.  See [forum:34591fefbe|forum post 34591fefbe].\n\nFossilOrigin-Name: ce97b56d63d6e03b909e049a0a62251d98c7bf643448193a28b42a5871899387",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57123b14a71027c21cb5eee089fcbc9330d07bf9091b01aecc4f9e3b9e4f7b09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8225:     while( (nSkip--)>0 ){",
          "8226:       while( xRead(&sCtx) && sCtx.cTerm==sCtx.cColSep ){}",
          "8227:     }",
          "8229:     if( zSql==0 ){",
          "8230:       import_cleanup(&sCtx);",
          "8231:       shell_out_of_memory();",
          "",
          "[Removed Lines]",
          "8228:     zSql = sqlite3_mprintf(\"SELECT * FROM %s\", zTable);",
          "",
          "[Added Lines]",
          "8228:     zSql = sqlite3_mprintf(\"SELECT * FROM \\\"%w\\\"\", zTable);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8234:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "8236:     if( rc && sqlite3_strglob(\"no such table: *\", sqlite3_errmsg(p->db))==0 ){",
          "8238:       char cSep = '(';",
          "8239:       while( xRead(&sCtx) ){",
          "8240:         zCreate = sqlite3_mprintf(\"%z%c\\n  \\\"%w\\\" TEXT\", zCreate, cSep, sCtx.z);",
          "",
          "[Removed Lines]",
          "8237:       char *zCreate = sqlite3_mprintf(\"CREATE TABLE %s\", zTable);",
          "",
          "[Added Lines]",
          "8237:       char *zCreate = sqlite3_mprintf(\"CREATE TABLE \\\"%w\\\"\", zTable);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8255:       rc = sqlite3_exec(p->db, zCreate, 0, 0, 0);",
          "8256:       sqlite3_free(zCreate);",
          "8257:       if( rc ){",
          "8259:                 sqlite3_errmsg(p->db));",
          "8260:         import_cleanup(&sCtx);",
          "8261:         rc = 1;",
          "",
          "[Removed Lines]",
          "8258:         utf8_printf(stderr, \"CREATE TABLE %s(...) failed: %s\\n\", zTable,",
          "",
          "[Added Lines]",
          "8258:         utf8_printf(stderr, \"CREATE TABLE \\\"%s\\\"(...) failed: %s\\n\", zTable,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0232dade79777574ffcc465bae831c6cfeb2539b",
      "candidate_info": {
        "commit_hash": "0232dade79777574ffcc465bae831c6cfeb2539b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0232dade79777574ffcc465bae831c6cfeb2539b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/trigger.c",
          "test/attach4.test"
        ],
        "message": "Avoid a crash that could occur when a database containing a table with a temp trigger that has the same name as a temp table is detached.\n\nFossilOrigin-Name: c4cb9708d48ead10ee9543f86878be8382cd6e850950d5384c95254bac4a8d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/trigger.c||src/trigger.c",
          "test/attach4.test||test/attach4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85d95abec4a596eb3ffd2ea19b4067dc1a6970264222ed5d69e75764ac21597c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:       Table *pTab = tableOfTrigger(pTrigger);",
          "663:       if( pTab ){",
          "664:         Trigger **pp;",
          "667:       }",
          "668:     }",
          "669:     sqlite3DeleteTrigger(db, pTrigger);",
          "",
          "[Removed Lines]",
          "665:         for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "",
          "[Added Lines]",
          "665:         for(pp=&pTab->pTrigger; *pp; pp=&((*pp)->pNext)){",
          "666:           if( *pp==pTrigger ){",
          "668:             break;",
          "669:           }",
          "670:         }",
          "",
          "---------------"
        ],
        "test/attach4.test||test/attach4.test": [
          "File: test/attach4.test -> test/attach4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: db close",
          "116: foreach {name f} $files { forcedelete $f }",
          "118: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: #-------------------------------------------------------------------------",
          "119: reset_db",
          "120: do_execsql_test 2.0 {",
          "121:   ATTACH DATABASE '' AS aux;",
          "122:   CREATE TABLE IF NOT EXISTS aux.t1(a, b);",
          "123:   CREATE TEMPORARY TRIGGER tr1 DELETE ON t1 BEGIN",
          "124:     DELETE FROM t1;",
          "125:   END;",
          "126:   CREATE TABLE temp.t1(a, b);",
          "127: }",
          "129: do_execsql_test 2.1 {",
          "130:   DETACH DATABASE aux;",
          "131: }",
          "133: do_execsql_test 2.2 {",
          "134:   DROP TRIGGER tr1;",
          "135: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}