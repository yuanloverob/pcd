{
  "cve_id": "CVE-2017-6058",
  "cve_desc": "Buffer overflow in NetRxPkt::ehdr_buf in hw/net/net_rx_pkt.c in QEMU (aka Quick Emulator), when the VLANSTRIP feature is enabled on the vmxnet3 device, allows remote attackers to cause a denial of service (out-of-bounds access and QEMU process crash) via vectors related to VLAN stripping.",
  "repo": "qemu/qemu",
  "patch_hash": "df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
  "patch_info": {
    "commit_hash": "df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
    "files": [
      "hw/net/net_rx_pkt.c"
    ],
    "message": "NetRxPkt: Fix memory corruption on VLAN header stripping\n\nThis patch fixed a problem that was introduced in commit eb700029.\n\nWhen net_rx_pkt_attach_iovec() calls eth_strip_vlan()\nthis can result in pkt->ehdr_buf being overflowed, because\nehdr_buf is only sizeof(struct eth_header) bytes large\nbut eth_strip_vlan() can write\nsizeof(struct eth_header) + sizeof(struct vlan_header)\nbytes into it.\n\nDevices affected by this problem: vmxnet3.\n\nCc: qemu-stable@nongnu.org\nReported-by: Peter Maydell <peter.maydell@linaro.org>\nSigned-off-by: Dmitry Fleytman <dmitry@daynix.com>\nSigned-off-by: Jason Wang <jasowang@redhat.com>",
    "before_after_code_files": [
      "hw/net/net_rx_pkt.c||hw/net/net_rx_pkt.c"
    ]
  },
  "patch_diff": {
    "hw/net/net_rx_pkt.c||hw/net/net_rx_pkt.c": [
      "File: hw/net/net_rx_pkt.c -> hw/net/net_rx_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: struct NetRxPkt {",
      "25:     struct virtio_net_hdr virt_hdr;",
      "27:     struct iovec *vec;",
      "28:     uint16_t vec_len_total;",
      "29:     uint16_t vec_len;",
      "30:     uint32_t tot_len;",
      "31:     uint16_t tci;",
      "33:     bool has_virt_hdr;",
      "34:     eth_pkt_types_e packet_type;",
      "",
      "[Removed Lines]",
      "26:     uint8_t ehdr_buf[sizeof(struct eth_header)];",
      "32:     bool vlan_stripped;",
      "",
      "[Added Lines]",
      "26:     uint8_t ehdr_buf[sizeof(struct eth_header) + sizeof(struct vlan_header)];",
      "32:     size_t ehdr_buf_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:                         const struct iovec *iov, int iovcnt,",
      "89:                         size_t ploff)",
      "90: {",
      "92:         net_rx_pkt_iovec_realloc(pkt, iovcnt + 1);",
      "94:         pkt->vec[0].iov_base = pkt->ehdr_buf;",
      "100:         pkt->vec_len = iov_copy(pkt->vec + 1, pkt->vec_len_total - 1,",
      "101:                                 iov, iovcnt, ploff, pkt->tot_len);",
      "102:     } else {",
      "",
      "[Removed Lines]",
      "91:     if (pkt->vlan_stripped) {",
      "95:         pkt->vec[0].iov_len = sizeof(pkt->ehdr_buf);",
      "97:         pkt->tot_len =",
      "98:             iov_size(iov, iovcnt) - ploff + sizeof(struct eth_header);",
      "",
      "[Added Lines]",
      "91:     if (pkt->ehdr_buf_len) {",
      "95:         pkt->vec[0].iov_len = pkt->ehdr_buf_len;",
      "97:         pkt->tot_len = iov_size(iov, iovcnt) - ploff + pkt->ehdr_buf_len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:     uint16_t tci = 0;",
      "124:     uint16_t ploff = iovoff;",
      "125:     assert(pkt);",
      "128:     if (strip_vlan) {",
      "131:     }",
      "133:     pkt->tci = tci;",
      "",
      "[Removed Lines]",
      "126:     pkt->vlan_stripped = false;",
      "129:         pkt->vlan_stripped = eth_strip_vlan(iov, iovcnt, iovoff, pkt->ehdr_buf,",
      "130:                                             &ploff, &tci);",
      "",
      "[Added Lines]",
      "126:         pkt->ehdr_buf_len = eth_strip_vlan(iov, iovcnt, iovoff, pkt->ehdr_buf,",
      "127:                                            &ploff, &tci);",
      "128:     } else {",
      "129:         pkt->ehdr_buf_len = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "143:     uint16_t tci = 0;",
      "144:     uint16_t ploff = iovoff;",
      "145:     assert(pkt);",
      "148:     if (strip_vlan) {",
      "152:     }",
      "154:     pkt->tci = tci;",
      "",
      "[Removed Lines]",
      "146:     pkt->vlan_stripped = false;",
      "149:         pkt->vlan_stripped = eth_strip_vlan_ex(iov, iovcnt, iovoff, vet,",
      "150:                                                pkt->ehdr_buf,",
      "151:                                                &ploff, &tci);",
      "",
      "[Added Lines]",
      "147:         pkt->ehdr_buf_len = eth_strip_vlan_ex(iov, iovcnt, iovoff, vet,",
      "148:                                               pkt->ehdr_buf,",
      "149:                                               &ploff, &tci);",
      "150:     } else {",
      "151:         pkt->ehdr_buf_len = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "161: #ifdef NET_RX_PKT_DEBUG",
      "162:     assert(pkt);",
      "166: #endif",
      "167: }",
      "",
      "[Removed Lines]",
      "164:     printf(\"RX PKT: tot_len: %d, vlan_stripped: %d, vlan_tag: %d\\n\",",
      "165:               pkt->tot_len, pkt->vlan_stripped, pkt->tci);",
      "",
      "[Added Lines]",
      "164:     printf(\"RX PKT: tot_len: %d, ehdr_buf_len: %lu, vlan_tag: %d\\n\",",
      "165:               pkt->tot_len, pkt->ehdr_buf_len, pkt->tci);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "425: {",
      "426:     assert(pkt);",
      "429: }",
      "431: bool net_rx_pkt_has_virt_hdr(struct NetRxPkt *pkt)",
      "",
      "[Removed Lines]",
      "428:     return pkt->vlan_stripped;",
      "",
      "[Added Lines]",
      "428:     return pkt->ehdr_buf_len ? true : false;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cfd9c114bdc39a9b94fb7a42058e421edd1d285",
      "candidate_info": {
        "commit_hash": "7cfd9c114bdc39a9b94fb7a42058e421edd1d285",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/7cfd9c114bdc39a9b94fb7a42058e421edd1d285",
        "files": [
          "hw/net/net_rx_pkt.c"
        ],
        "message": "NetRxPkt: Fix memory corruption on VLAN header stripping\n\nThis patch fixed a problem that was introduced in commit eb700029.\n\nWhen net_rx_pkt_attach_iovec() calls eth_strip_vlan()\nthis can result in pkt->ehdr_buf being overflowed, because\nehdr_buf is only sizeof(struct eth_header) bytes large\nbut eth_strip_vlan() can write\nsizeof(struct eth_header) + sizeof(struct vlan_header)\nbytes into it.\n\nDevices affected by this problem: vmxnet3.\n\nCc: qemu-stable@nongnu.org\nReported-by: Peter Maydell <peter.maydell@linaro.org>\nSigned-off-by: Dmitry Fleytman <dmitry@daynix.com>\nSigned-off-by: Jason Wang <jasowang@redhat.com>\n(cherry picked from commit df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/net/net_rx_pkt.c||hw/net/net_rx_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/net_rx_pkt.c||hw/net/net_rx_pkt.c"
          ],
          "candidate": [
            "hw/net/net_rx_pkt.c||hw/net/net_rx_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/net_rx_pkt.c||hw/net/net_rx_pkt.c": [
          "File: hw/net/net_rx_pkt.c -> hw/net/net_rx_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: struct NetRxPkt {",
          "25:     struct virtio_net_hdr virt_hdr;",
          "27:     struct iovec *vec;",
          "28:     uint16_t vec_len_total;",
          "29:     uint16_t vec_len;",
          "30:     uint32_t tot_len;",
          "31:     uint16_t tci;",
          "33:     bool has_virt_hdr;",
          "34:     eth_pkt_types_e packet_type;",
          "",
          "[Removed Lines]",
          "26:     uint8_t ehdr_buf[sizeof(struct eth_header)];",
          "32:     bool vlan_stripped;",
          "",
          "[Added Lines]",
          "26:     uint8_t ehdr_buf[sizeof(struct eth_header) + sizeof(struct vlan_header)];",
          "32:     size_t ehdr_buf_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                         const struct iovec *iov, int iovcnt,",
          "89:                         size_t ploff)",
          "90: {",
          "92:         net_rx_pkt_iovec_realloc(pkt, iovcnt + 1);",
          "94:         pkt->vec[0].iov_base = pkt->ehdr_buf;",
          "100:         pkt->vec_len = iov_copy(pkt->vec + 1, pkt->vec_len_total - 1,",
          "101:                                 iov, iovcnt, ploff, pkt->tot_len);",
          "102:     } else {",
          "",
          "[Removed Lines]",
          "91:     if (pkt->vlan_stripped) {",
          "95:         pkt->vec[0].iov_len = sizeof(pkt->ehdr_buf);",
          "97:         pkt->tot_len =",
          "98:             iov_size(iov, iovcnt) - ploff + sizeof(struct eth_header);",
          "",
          "[Added Lines]",
          "91:     if (pkt->ehdr_buf_len) {",
          "95:         pkt->vec[0].iov_len = pkt->ehdr_buf_len;",
          "97:         pkt->tot_len = iov_size(iov, iovcnt) - ploff + pkt->ehdr_buf_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     uint16_t tci = 0;",
          "124:     uint16_t ploff = iovoff;",
          "125:     assert(pkt);",
          "128:     if (strip_vlan) {",
          "131:     }",
          "133:     pkt->tci = tci;",
          "",
          "[Removed Lines]",
          "126:     pkt->vlan_stripped = false;",
          "129:         pkt->vlan_stripped = eth_strip_vlan(iov, iovcnt, iovoff, pkt->ehdr_buf,",
          "130:                                             &ploff, &tci);",
          "",
          "[Added Lines]",
          "126:         pkt->ehdr_buf_len = eth_strip_vlan(iov, iovcnt, iovoff, pkt->ehdr_buf,",
          "127:                                            &ploff, &tci);",
          "128:     } else {",
          "129:         pkt->ehdr_buf_len = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:     uint16_t tci = 0;",
          "144:     uint16_t ploff = iovoff;",
          "145:     assert(pkt);",
          "148:     if (strip_vlan) {",
          "152:     }",
          "154:     pkt->tci = tci;",
          "",
          "[Removed Lines]",
          "146:     pkt->vlan_stripped = false;",
          "149:         pkt->vlan_stripped = eth_strip_vlan_ex(iov, iovcnt, iovoff, vet,",
          "150:                                                pkt->ehdr_buf,",
          "151:                                                &ploff, &tci);",
          "",
          "[Added Lines]",
          "147:         pkt->ehdr_buf_len = eth_strip_vlan_ex(iov, iovcnt, iovoff, vet,",
          "148:                                               pkt->ehdr_buf,",
          "149:                                               &ploff, &tci);",
          "150:     } else {",
          "151:         pkt->ehdr_buf_len = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:     NetRxPkt *pkt = (NetRxPkt *)pkt;",
          "163:     assert(pkt);",
          "167: #endif",
          "168: }",
          "",
          "[Removed Lines]",
          "165:     printf(\"RX PKT: tot_len: %d, vlan_stripped: %d, vlan_tag: %d\\n\",",
          "166:               pkt->tot_len, pkt->vlan_stripped, pkt->tci);",
          "",
          "[Added Lines]",
          "165:     printf(\"RX PKT: tot_len: %d, ehdr_buf_len: %lu, vlan_tag: %d\\n\",",
          "166:               pkt->tot_len, pkt->ehdr_buf_len, pkt->tci);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "426: {",
          "427:     assert(pkt);",
          "430: }",
          "432: bool net_rx_pkt_has_virt_hdr(struct NetRxPkt *pkt)",
          "",
          "[Removed Lines]",
          "429:     return pkt->vlan_stripped;",
          "",
          "[Added Lines]",
          "429:     return pkt->ehdr_buf_len ? true : false;",
          "",
          "---------------"
        ]
      }
    }
  ]
}