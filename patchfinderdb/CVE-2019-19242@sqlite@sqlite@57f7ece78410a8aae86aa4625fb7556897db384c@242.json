{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
      "candidate_info": {
        "commit_hash": "dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Earlier detections of errors in the byte-offset-to-cell-content integer at offset 5 in the header of a btree page.\n\nFossilOrigin-Name: a0819086a521fb0ca4ffd12f959b168a89ea2e30a2844bbbd39831b2b9ecf29b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c75605b4652ae88659465d832953ac9d467369f9cb417f73b3d8599ec60b18b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1630:   top = get2byte(&data[hdr+5]);",
          "1632:   if( gap>top ){",
          "1634:       top = 65536;",
          "1635:     }else{",
          "1636:       return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1633:     if( top==0 && pPage->pBt->usableSize==65536 ){",
          "",
          "[Added Lines]",
          "1633:     if( top==0 && ALWAYS(pPage->pBt->usableSize==65536) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1929:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1930:   }",
          "1931:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "",
          "[Removed Lines]",
          "1928:   if( nFree>usableSize ){",
          "",
          "[Added Lines]",
          "1928:   if( nFree>usableSize || nFree<iCellFirst ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8068:     assert( sz<=pBt->maxLocal+23 );",
          "8069:     assert( iOvflSpace <= (int)pBt->pageSize );",
          "8070:     insertCell(pParent, nxDiv+i, pCell, sz, pTemp, pNew->pgno, &rc);",
          "8072:     assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "8073:   }",
          "",
          "[Removed Lines]",
          "8071:     if( rc!=SQLITE_OK ) goto balance_cleanup;",
          "",
          "[Added Lines]",
          "8071:     if( NEVER(rc!=SQLITE_OK) ) goto balance_cleanup;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "229ae1ae72d3693e675703be2b986f62fb536cb1",
      "candidate_info": {
        "commit_hash": "229ae1ae72d3693e675703be2b986f62fb536cb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/229ae1ae72d3693e675703be2b986f62fb536cb1",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a potential crash in fts5 caused by using an auxiliary function on a \"special\" query like '*id' or '*reads'.\n\nFossilOrigin-Name: 9490683ae883561fa347cbe54ebdd61188d849b4852d904b508250ba5d0807ef",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "988:   assert( pTab->p.base.zErrMsg==0 );",
          "989:   pCsr->ePlan = FTS5_PLAN_SPECIAL;",
          "992:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->p.pIndex);",
          "993:   }",
          "995:     pCsr->iSpecial = pCsr->iCsrId;",
          "996:   }",
          "997:   else{",
          "",
          "[Removed Lines]",
          "991:   if( 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "994:   else if( 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "",
          "[Added Lines]",
          "991:   if( n==5 && 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "994:   else if( n==2 && 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2239:   iCsrId = sqlite3_value_int64(argv[0]);",
          "2241:   pCsr = fts5CursorFromCsrid(pAux->pGlobal, iCsrId);",
          "2243:     char *zErr = sqlite3_mprintf(\"no such cursor: %lld\", iCsrId);",
          "2244:     sqlite3_result_error(context, zErr, -1);",
          "2245:     sqlite3_free(zErr);",
          "",
          "[Removed Lines]",
          "2242:   if( pCsr==0 ){",
          "",
          "[Added Lines]",
          "2242:   if( pCsr==0 || pCsr->ePlan==0 ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 02",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5misc",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "26: }",
          "28: do_catchsql_test 1.1.1 {",
          "29:   SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*');",
          "30: } {1 {unknown special query: }}",
          "31: do_catchsql_test 1.1.2 {",
          "32:   SELECT a FROM t1",
          "33:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*'));",
          "34: } {1 {unknown special query: }}",
          "36: do_catchsql_test 1.2.1 {",
          "37:   SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*id');",
          "38: } {0 {{}}}",
          "40: do_catchsql_test 1.2.2 {",
          "41:   SELECT a FROM t1",
          "42:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*id'));",
          "43: } {0 {}}",
          "45: do_catchsql_test 1.3.1 {",
          "46:   SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads');",
          "47: } {1 {no such cursor: 1}}",
          "49: do_catchsql_test 1.3.2 {",
          "50:   SELECT a FROM t1",
          "51:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads'));",
          "52: } {1 {no such cursor: 1}}",
          "54: db close",
          "55: sqlite3 db test.db",
          "57: do_catchsql_test 1.3.3 {",
          "58:   SELECT a FROM t1",
          "59:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads'));",
          "60: } {1 {no such cursor: 1}}",
          "62: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 88833a9c2849c959a37a80e0e4d2b211ce3c83a48319724c89b172b060c876b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c43dbad98188e7d75909ac764ac5104ce176f6e",
      "candidate_info": {
        "commit_hash": "6c43dbad98188e7d75909ac764ac5104ce176f6e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c43dbad98188e7d75909ac764ac5104ce176f6e",
        "files": [
          "ext/fts3/fts3_aux.c",
          "manifest",
          "manifest.uuid",
          "test/fts3aux2.test"
        ],
        "message": "Do not assume that text parameters passed to fts4aux queries do not contain embedded nul characters.\n\nFossilOrigin-Name: df04859a995571cd6faf1abe088725708f35e81195760274df9e2ec9bd47f69f",
        "before_after_code_files": [
          "ext/fts3/fts3_aux.c||ext/fts3/fts3_aux.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3aux2.test||test/fts3aux2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_aux.c||ext/fts3/fts3_aux.c": [
          "File: ext/fts3/fts3_aux.c -> ext/fts3/fts3_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:     assert( (iEq==0 && iGe==-1) || (iEq==-1 && iGe==0) );",
          "417:     if( zStr ){",
          "418:       pCsr->filter.zTerm = sqlite3_mprintf(\"%s\", zStr);",
          "420:       if( pCsr->filter.zTerm==0 ) return SQLITE_NOMEM;",
          "421:     }",
          "422:   }",
          "424:   if( iLe>=0 ){",
          "425:     pCsr->zStop = sqlite3_mprintf(\"%s\", sqlite3_value_text(apVal[iLe]));",
          "427:     if( pCsr->zStop==0 ) return SQLITE_NOMEM;",
          "428:   }",
          "430:   if( iLangid>=0 ){",
          "",
          "[Removed Lines]",
          "419:       pCsr->filter.nTerm = sqlite3_value_bytes(apVal[0]);",
          "426:     pCsr->nStop = sqlite3_value_bytes(apVal[iLe]);",
          "",
          "[Added Lines]",
          "420:       pCsr->filter.nTerm = strlen(pCsr->filter.zTerm);",
          "427:     pCsr->nStop = strlen(pCsr->zStop);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ce8e279a7d37594e865c2d9197a5efe5d647e11f074dbaf4a4ee31c74c71dbc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3aux2.test||test/fts3aux2.test": [
          "File: test/fts3aux2.test -> test/fts3aux2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   five * 1 1 2     five 0 1 1 2",
          "142: }",
          "144: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: #-------------------------------------------------------------------------",
          "145: do_execsql_test 2.0 {",
          "146:   CREATE VIRTUAL TABLE ft USING fts3();",
          "147:   INSERT INTO ft VALUES('a_234567890123456789');",
          "148:   INSERT INTO ft VALUES('b_234567890123456789');",
          "149:   INSERT INTO ft VALUES('c_234567890123456789');",
          "150:   CREATE VIRTUAL TABLE t2 USING fts4aux(ft);",
          "151: }",
          "153: do_execsql_test 2.1 {",
          "154:   SELECT term FROM t2 WHERE term=X'625f323334353637383930313233343536373839';",
          "155: }",
          "157: do_execsql_test 2.2 {",
          "158:   SELECT term FROM t2 WHERE term<X'625f003334353637383930313233343536373839';",
          "159: } {",
          "160:   234567890123456789 234567890123456789 a a b b",
          "161: }",
          "163: do_execsql_test 2.3 {",
          "164:   SELECT term FROM t2 WHERE term=X'625f003334353637383930313233343536373839';",
          "165: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f134f0267e79a78c76a78a1e8c2a0370db28a0a",
      "candidate_info": {
        "commit_hash": "0f134f0267e79a78c76a78a1e8c2a0370db28a0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f134f0267e79a78c76a78a1e8c2a0370db28a0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Small optimizations to the grammar for window functions save about 120 bytes of space in the parser tables.\n\nFossilOrigin-Name: bce01d9584e52b23d7c07c2e832d5fa5d6e6235711c856b903a296725f61ed6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc0fb1c324be2fd668bc4398c7d364b7e3c5a98537fe5fb58a125b66f3e6d041",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1694: frame_opt(A) ::= range_or_rows(X) frame_bound_s(Y) frame_exclude_opt(Z). {",
          "1695:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, TK_CURRENT, 0, Z);",
          "1696: }",
          "1698:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, Z.eType, Z.pExpr, W);",
          "1699: }",
          "1715: %type frame_exclude_opt {u8}",
          "1719: %type frame_exclude {u8}",
          "1726: %type window_clause {Window*}",
          "",
          "[Removed Lines]",
          "1697: frame_opt(A) ::= range_or_rows(X) BETWEEN frame_bound_s(Y) AND frame_bound_e(Z) frame_exclude_opt(W). {",
          "1701: range_or_rows(A) ::= RANGE.   { A = TK_RANGE; }",
          "1702: range_or_rows(A) ::= ROWS.    { A = TK_ROWS;  }",
          "1703: range_or_rows(A) ::= GROUPS.  { A = TK_GROUPS;}",
          "1706: frame_bound_s(A) ::= frame_bound(X). { A = X; }",
          "1707: frame_bound_s(A) ::= UNBOUNDED PRECEDING. {A.eType = TK_UNBOUNDED; A.pExpr = 0;}",
          "1708: frame_bound_e(A) ::= frame_bound(X). { A = X; }",
          "1709: frame_bound_e(A) ::= UNBOUNDED FOLLOWING. {A.eType = TK_UNBOUNDED; A.pExpr = 0;}",
          "1711: frame_bound(A) ::= expr(X) PRECEDING.   { A.eType = TK_PRECEDING; A.pExpr = X; }",
          "1712: frame_bound(A) ::= CURRENT ROW.         { A.eType = TK_CURRENT  ; A.pExpr = 0; }",
          "1713: frame_bound(A) ::= expr(X) FOLLOWING.   { A.eType = TK_FOLLOWING; A.pExpr = X; }",
          "1716: frame_exclude_opt(A) ::= . { A = 0; }",
          "1717: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). { A = X; }",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = TK_NO; }",
          "1721: frame_exclude(A) ::= CURRENT ROW. { A = TK_CURRENT; }",
          "1722: frame_exclude(A) ::= GROUP.       { A = TK_GROUP; }",
          "1723: frame_exclude(A) ::= TIES.        { A = TK_TIES; }",
          "",
          "[Added Lines]",
          "1697: frame_opt(A) ::= range_or_rows(X) BETWEEN frame_bound_s(Y) AND",
          "1698:                           frame_bound_e(Z) frame_exclude_opt(W). {",
          "1702: range_or_rows(A) ::= RANGE|ROWS|GROUPS(X).   {A = @X; /*A-overwrites-X*/}",
          "1704: frame_bound_s(A) ::= frame_bound(X).         {A = X;}",
          "1705: frame_bound_s(A) ::= UNBOUNDED(X) PRECEDING. {A.eType = @X; A.pExpr = 0;}",
          "1706: frame_bound_e(A) ::= frame_bound(X).         {A = X;}",
          "1707: frame_bound_e(A) ::= UNBOUNDED(X) FOLLOWING. {A.eType = @X; A.pExpr = 0;}",
          "1709: frame_bound(A) ::= expr(X) PRECEDING|FOLLOWING(Y).",
          "1710:                                              {A.eType = @Y; A.pExpr = X;}",
          "1711: frame_bound(A) ::= CURRENT(X) ROW.           {A.eType = @X; A.pExpr = 0;}",
          "1714: frame_exclude_opt(A) ::= . {A = 0;}",
          "1715: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). {A = X;}",
          "1718: frame_exclude(A) ::= NO(X) OTHERS.   {A = @X; /*A-overwrites-X*/}",
          "1719: frame_exclude(A) ::= CURRENT(X) ROW. {A = @X; /*A-overwrites-X*/}",
          "1720: frame_exclude(A) ::= GROUP|TIES(X).  {A = @X; /*A-overwrites-X*/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85a379b74b4229f9d6bf54936d2bc71c009929b9",
      "candidate_info": {
        "commit_hash": "85a379b74b4229f9d6bf54936d2bc71c009929b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/85a379b74b4229f9d6bf54936d2bc71c009929b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix a page-cache reference leak in the btree balancer when there is a corrupt database.\n\nFossilOrigin-Name: 9285899120dec24ff2944431ad455d7ae217ef408ae2f1a3e7bdfb897099028c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d43ee4000b71f5c6d49244dee96358c567f09ba3451b9d22895a796d3f61ad6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7550:   pgno = get4byte(pRight);",
          "7551:   while( 1 ){",
          "7552:     rc = getAndInitPage(pBt, pgno, &apOld[i], 0, 0);",
          "7556:     if( rc ){",
          "7557:       memset(apOld, 0, (i+1)*sizeof(MemPage*));",
          "7558:       goto balance_cleanup;",
          "7559:     }",
          "7560:     nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;",
          "7561:     if( (i--)==0 ) break;",
          "",
          "[Removed Lines]",
          "7553:     if( rc==0 && apOld[i]->nFree<0 ){",
          "7554:       rc = btreeComputeFreeSpace(apOld[i]);",
          "7555:     }",
          "",
          "[Added Lines]",
          "7557:     if( apOld[i]->nFree<0 ){",
          "7558:       rc = btreeComputeFreeSpace(apOld[i]);",
          "7559:       if( rc ){",
          "7560:         memset(apOld, 0, (i)*sizeof(MemPage*));",
          "7561:         goto balance_cleanup;",
          "7562:       }",
          "7563:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}