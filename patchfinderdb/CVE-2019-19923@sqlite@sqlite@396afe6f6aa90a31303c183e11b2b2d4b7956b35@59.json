{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
      "candidate_info": {
        "commit_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3967d946c7a1fe956e963b0a2e67a8353404a454",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix the query planner so that it is able to use an index on a CAST expression.\n\nFossilOrigin-Name: 2c886f3d49c9569e9f6ee28b89b57e2d4004c8972d11da0c23f7b2d2e0c9900a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   return 0;",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: static SQLITE_NOINLINE WhereTerm *whereScanInitIndexExpr(WhereScan *pScan){",
          "320:   pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "321:   return whereScanNext(pScan);",
          "322: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   pScan->pIdxExpr = 0;",
          "343:   pScan->idxaff = 0;",
          "344:   pScan->zCollName = 0;",
          "345:   if( pIdx ){",
          "346:     int j = iColumn;",
          "347:     iColumn = pIdx->aiColumn[j];",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   pScan->opMask = opMask;",
          "357:   pScan->k = 0;",
          "358:   pScan->aiCur[0] = iCur;",
          "359:   pScan->nEquiv = 1;",
          "360:   pScan->iEquiv = 1;",
          "367:       pScan->aiColumn[0] = XN_EXPR;",
          "368:       return whereScanInitIndexExpr(pScan);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:   }else if( iColumn==XN_EXPR ){",
          "358:     return 0;",
          "359:   }",
          "363:   pScan->aiColumn[0] = iColumn;",
          "366:   return whereScanNext(pScan);",
          "367: }",
          "",
          "[Removed Lines]",
          "360:   pScan->opMask = opMask;",
          "361:   pScan->k = 0;",
          "362:   pScan->aiCur[0] = iCur;",
          "364:   pScan->nEquiv = 1;",
          "365:   pScan->iEquiv = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
      "candidate_info": {
        "commit_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Experimental code that tries to put the computation of subqueries inside a subroutine, and reuse that subroutine if the same subquery is evaluated more than once.  Current code does not work for CHECK constraints.\n\nFossilOrigin-Name: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2544:     }",
          "2545:     assert( pX->op==TK_IN );",
          "2547:     if( rMayHaveNull ){",
          "2549:     }",
          "2550:     pParse->nQueryLoop = savedNQueryLoop;",
          "2553:   }",
          "2555:   if( aiMap && eType!=IN_INDEX_INDEX_ASC && eType!=IN_INDEX_INDEX_DESC ){",
          "",
          "[Removed Lines]",
          "2546:     sqlite3CodeRhsOfIN(pParse, pX, eType==IN_INDEX_ROWID);",
          "2548:       sqlite3SetHasNullFlag(v, pX->iTable, rMayHaveNull);",
          "2551:   }else{",
          "2552:     pX->iTable = iTab;",
          "",
          "[Added Lines]",
          "2547:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "2549:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2658: void sqlite3CodeRhsOfIN(",
          "2662: ){",
          "2671:   assert( v!=0 );",
          "2683:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2685:   }",
          "",
          "[Removed Lines]",
          "2670:   v = sqlite3GetVdbe(pParse);",
          "2684:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2675:   v = pParse->pVdbe;",
          "2693:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2694:       sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "2695:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2696:                         pExpr->y.sub.iAddr);",
          "2697:       sqlite3VdbeAddOp2(v, OP_OpenDup, iTab, pExpr->iTable);",
          "2698:       return;",
          "2699:     }",
          "2702:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2703:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2704:     pExpr->y.sub.iAddr =",
          "2705:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2706:     VdbeComment((v, \"return address\"));",
          "2708:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2696:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2697:       pExpr->iTable, (isRowid?0:nVal));",
          "2698:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "2700:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2695:   pExpr->iTable = pParse->nTab++;",
          "",
          "[Added Lines]",
          "2719:   pExpr->iTable = iTab;",
          "2722: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2723:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2724:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "2725:   }else{",
          "2726:     VdbeComment((v, \"RHS of IN operator\"));",
          "2727:   }",
          "2728: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2706:     Select *pSelect = pExpr->x.pSelect;",
          "2707:     ExprList *pEList = pSelect->pEList;",
          "2711:     ));",
          "2712:     assert( !isRowid );",
          "",
          "[Removed Lines]",
          "2709:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY\",",
          "2710:         jmpIfDynamic>=0?\"\":\"CORRELATED \"",
          "",
          "[Added Lines]",
          "2740:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2741:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2778:       }",
          "",
          "[Removed Lines]",
          "2775:       if( jmpIfDynamic>=0 && !sqlite3ExprIsConstant(pE2) ){",
          "2776:         sqlite3VdbeChangeToNoop(v, jmpIfDynamic);",
          "2777:         jmpIfDynamic = -1;",
          "",
          "[Added Lines]",
          "2806:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2807:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2808:         addrOnce = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2799:   if( pKeyInfo ){",
          "2800:     sqlite3VdbeChangeP4(v, addr, (void *)pKeyInfo, P4_KEYINFO);",
          "2801:   }",
          "2804:   }",
          "2805: }",
          "",
          "[Removed Lines]",
          "2802:   if( jmpIfDynamic>=0 ){",
          "2803:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2833:   if( addrOnce ){",
          "2834:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2836:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2837:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2822: #ifndef SQLITE_OMIT_SUBQUERY",
          "2823: int sqlite3CodeSubselect(Parse *pParse, Expr *pExpr){",
          "2831:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2830:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2843:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2845:   }",
          "",
          "[Removed Lines]",
          "2844:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2862:   pSel = pExpr->x.pSelect;",
          "2863:   ExplainQueryPlan((pParse, 1, \"%sSCALAR SUBQUERY\",",
          "2865:   nReg = pExpr->op==TK_SELECT ? pSel->pEList->nExpr : 1;",
          "2866:   sqlite3SelectDestInit(&dest, 0, pParse->nMem+1);",
          "2867:   pParse->nMem += nReg;",
          "",
          "[Removed Lines]",
          "2864:         jmpIfDynamic>=0?\"\":\"CORRELATED \"));",
          "",
          "[Added Lines]",
          "2912:         addrOnce?\"\":\"CORRELATED \"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2887:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "2888:     return 0;",
          "2889:   }",
          "2891:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2895:   }",
          "2897:   return rReg;",
          "2898: }",
          "",
          "[Removed Lines]",
          "2890:   rReg = dest.iSDParm;",
          "2893:   if( jmpIfDynamic>=0 ){",
          "2894:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2938:   pExpr->iTable = rReg = dest.iSDParm;",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2987:   VdbeNoopComment((v, \"begin IN expr\"));",
          "2988:   eType = sqlite3FindInIndex(pParse, pExpr,",
          "2989:                              IN_INDEX_MEMBERSHIP | IN_INDEX_NOOP_OK,",
          "2992:   assert( pParse->nErr || nVector==1 || eType==IN_INDEX_EPH",
          "2993:        || eType==IN_INDEX_INDEX_ASC || eType==IN_INDEX_INDEX_DESC",
          "",
          "[Removed Lines]",
          "2990:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull, aiMap);",
          "",
          "[Added Lines]",
          "3042:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull,",
          "3043:                              aiMap, &iTab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3099:     VdbeCoverage(v);",
          "3101:   }else{",
          "3102:     sqlite3VdbeAddOp4(v, OP_Affinity, rLhs, nVector, 0, zAff, nVector);",
          "3103:     if( destIfFalse==destIfNull ){",
          "3106:                            rLhs, nVector); VdbeCoverage(v);",
          "3107:       goto sqlite3ExprCodeIN_finished;",
          "3108:     }",
          "3111:                                       rLhs, nVector); VdbeCoverage(v);",
          "3112:   }",
          "",
          "[Removed Lines]",
          "3098:     sqlite3VdbeAddOp3(v, OP_SeekRowid, pExpr->iTable, destIfFalse, rLhs);",
          "3105:       sqlite3VdbeAddOp4Int(v, OP_NotFound, pExpr->iTable, destIfFalse,",
          "3110:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, pExpr->iTable, 0,",
          "",
          "[Added Lines]",
          "3151:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iTab, destIfFalse, rLhs);",
          "3158:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iTab, destIfFalse,",
          "3163:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, iTab, 0,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3134:   if( destStep6 ) sqlite3VdbeResolveLabel(v, destStep6);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Removed Lines]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "",
          "[Added Lines]",
          "3188:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, iTab, destIfFalse);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3147:     int r3 = sqlite3GetTempReg(pParse);",
          "3148:     p = sqlite3VectorFieldSubexpr(pLeft, i);",
          "3149:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "3151:     sqlite3VdbeAddOp4(v, OP_Ne, rLhs+i, destNotNull, r3,",
          "3152:                       (void*)pColl, P4_COLLSEQ);",
          "3153:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3150:     sqlite3VdbeAddOp3(v, OP_Column, pExpr->iTable, i, r3);",
          "",
          "[Added Lines]",
          "3203:     sqlite3VdbeAddOp3(v, OP_Column, iTab, i, r3);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3156:   sqlite3VdbeAddOp2(v, OP_Goto, 0, destIfNull);",
          "3157:   if( nVector>1 ){",
          "3158:     sqlite3VdbeResolveLabel(v, destNotNull);",
          "3160:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3159:     sqlite3VdbeAddOp2(v, OP_Next, pExpr->iTable, addrTop+1);",
          "",
          "[Added Lines]",
          "3212:     sqlite3VdbeAddOp2(v, OP_Next, iTab, addrTop+1);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2485:     Table *pTab;           /* TK_COLUMN: Table containing column. Can be NULL",
          "2488:   } y;",
          "2489: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:     } sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4258: int sqlite3GetToken(const unsigned char *, int *);",
          "4259: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4260: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4262: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4263: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4264: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4261: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4266: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4516: int sqlite3JournalOpen(sqlite3_vfs *, const char *, sqlite3_file *, int, int);",
          "4517: int sqlite3JournalSize(sqlite3_vfs *);",
          "",
          "[Removed Lines]",
          "4514: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*);",
          "",
          "[Added Lines]",
          "4519: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*, int*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3610:   pCx->isEphemeral = 1;",
          "3611:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3612:   pCx->isTable = pOrig->isTable;",
          "3614:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "3613:   rc = sqlite3BtreeCursor(pOrig->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3613:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3614:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3682:         assert( pgno==MASTER_ROOT+1 );",
          "3683:         assert( pKeyInfo->db==db );",
          "3684:         assert( pKeyInfo->enc==ENC(db) );",
          "3685:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "3686:                                 pKeyInfo, pCx->uc.pCursor);",
          "3687:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3686:         pCx->pgnoRoot = pgno;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3690:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3691:                               0, pCx->uc.pCursor);",
          "3692:       pCx->isTable = 1;",
          "3693:     }",
          "3694:   }",
          "3695:   if( rc ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3695:       pCx->pgnoRoot = MASTER_ROOT;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "855:                           pTabItem->regResult, 1);",
          "856:     sqlite3VdbeGoto(v, addrTop);",
          "857:   }else{",
          "858:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "859:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857:     pTabItem->fg.viaCoroutine = 0;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:       if( pLoop->aLTerm[i]->pExpr==pX ) nEq++;",
          "539:     }",
          "541:     if( (pX->flags & EP_xIsSelect)==0 || pX->x.pSelect->pEList->nExpr==1 ){",
          "543:     }else{",
          "544:       sqlite3 *db = pParse->db;",
          "545:       pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);",
          "547:       if( !db->mallocFailed ){",
          "548:         aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);",
          "551:       }",
          "552:       sqlite3ExprDelete(db, pX);",
          "553:       pX = pTerm->pExpr;",
          "",
          "[Removed Lines]",
          "542:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0);",
          "549:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap);",
          "550:         pTerm->pExpr->iTable = pX->iTable;",
          "",
          "[Added Lines]",
          "541:     iTab = 0;",
          "543:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0, &iTab);",
          "550:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap, &iTab);",
          "551:         pTerm->pExpr->iTable = iTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:       testcase( bRev );",
          "558:       bRev = !bRev;",
          "559:     }",
          "561:     sqlite3VdbeAddOp2(v, bRev ? OP_Last : OP_Rewind, iTab, 0);",
          "562:     VdbeCoverageIf(v, bRev);",
          "563:     VdbeCoverageIf(v, !bRev);",
          "",
          "[Removed Lines]",
          "560:     iTab = pX->iTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2197:     if( pAlt->wtFlags & (TERM_CODED) ) continue;",
          "2198:     if( (pAlt->eOperator & WO_IN)",
          "2199:      && (pAlt->pExpr->flags & EP_xIsSelect)",
          "2201:     ){",
          "2202:       continue;",
          "2203:     }",
          "",
          "[Removed Lines]",
          "2200:      && (pAlt->pExpr->x.pSelect->pEList->nExpr>1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05fbfd827c9fb79412fc8179ef460032c33b6dfc",
      "candidate_info": {
        "commit_hash": "05fbfd827c9fb79412fc8179ef460032c33b6dfc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05fbfd827c9fb79412fc8179ef460032c33b6dfc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Additional debugging information printed with the \".wheretrace 0x100\" option. No changes to normally delivered code.\n\nFossilOrigin-Name: fc72ec52c92ca6a953e765b48e21d52021fdb23a2cd84f737da4e43c642f6a5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ae8c0d52f6aa7f27537216f85456ef49dade040366cfb250c789206ecd4dc5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1816:   }else{",
          "1817:     char *z;",
          "1818:     if( p->u.vtab.idxStr ){",
          "1820:                 p->u.vtab.idxNum, p->u.vtab.idxStr, p->u.vtab.omitMask);",
          "1821:     }else{",
          "1822:       z = sqlite3_mprintf(\"(%d,%x)\", p->u.vtab.idxNum, p->u.vtab.omitMask);",
          "",
          "[Removed Lines]",
          "1819:       z = sqlite3_mprintf(\"(%d,\\\"%s\\\",%x)\",",
          "",
          "[Added Lines]",
          "1819:       z = sqlite3_mprintf(\"(%d,\\\"%s\\\",%#x)\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4810:     }",
          "4811:   }",
          "4813:     sqlite3WhereClausePrint(sWLB.pWC);",
          "4814:   }",
          "4815: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4813:     sqlite3DebugPrintf(\"---- WHERE clause at start of analysis:\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4948:       nTabList--;",
          "4949:     }",
          "4950:   }",
          "4951:   WHERETRACE(0xffff,(\"*** Optimizer Finished ***\\n\"));",
          "4952:   pWInfo->pParse->nQueryLoop += pWInfo->nRowOut;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4952: #if defined(WHERETRACE_ENABLED)",
          "4954:     sqlite3DebugPrintf(\"---- WHERE clause at end of analysis:\\n\");",
          "4955:     sqlite3WhereClausePrint(sWLB.pWC);",
          "4956:   }",
          "4958: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e0f794d17e110e145466d99fb8b106ac7ca30fe",
      "candidate_info": {
        "commit_hash": "8e0f794d17e110e145466d99fb8b106ac7ca30fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e0f794d17e110e145466d99fb8b106ac7ca30fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/like3.test"
        ],
        "message": "Enable the LIKE optimization when the ESCAPE keyword is present and the PRAGMA case_sensitive_like pragma is ON.\n\nFossilOrigin-Name: 6ae4b8c525f446ddb0e0bdd5e4e01e06e2ab975e3effa42fce6a1102b3a39830",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0edad5339e36d69aed9289bb3e60d35f9930386d76a62bb0194c4fdf420d16fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1806:   if( ALWAYS(pDef) ){",
          "1807:     pDef->funcFlags |= flagVal;",
          "1808:   }",
          "1809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1809:   pDef = sqlite3FindFunction(db, zName, 3, SQLITE_UTF8, 0);",
          "1810:   if( pDef ){",
          "1811:     pDef->funcFlags |= flagVal;",
          "1812:   }",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   `--SEARCH TABLE t5b USING COVERING INDEX sqlite_autoindex_t5b_1 (x>? AND x<?)",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # 2019-02-27",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "184: #",
          "185: do_execsql_test like3-6.100 {",
          "186:   DROP TABLE IF EXISTS t1;",
          "187:   CREATE TABLE t1(path TEXT COLLATE nocase PRIMARY KEY,a,b,c) WITHOUT ROWID;",
          "188: }",
          "189: do_eqp_test like3-6.110 {",
          "190:   SELECT * FROM t1 WHERE path LIKE 'a%';",
          "191: } {",
          "192:   QUERY PLAN",
          "193:   `--SEARCH TABLE t1 USING PRIMARY KEY (path>? AND path<?)",
          "194: }",
          "195: do_eqp_test like3-6.120 {",
          "196:   SELECT * FROM t1 WHERE path LIKE 'a%' ESCAPE '_';",
          "197: } {",
          "198:   QUERY PLAN",
          "199:   `--SEARCH TABLE t1 USING PRIMARY KEY (path>? AND path<?)",
          "200: }",
          "201: do_execsql_test like3-6.200 {",
          "202:   DROP TABLE IF EXISTS t2;",
          "203:   CREATE TABLE t2(path TEXT,x,y,z);",
          "204:   CREATE INDEX t2path ON t2(path COLLATE nocase);",
          "205:   CREATE INDEX t2path2 ON t2(path);",
          "206: }",
          "207: do_eqp_test like3-6.210 {",
          "208:   SELECT * FROM t2 WHERE path LIKE 'a%';",
          "209: } {",
          "210:   QUERY PLAN",
          "211:   `--SEARCH TABLE t2 USING INDEX t2path (path>? AND path<?)",
          "212: }",
          "213: do_eqp_test like3-6.220 {",
          "214:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '_';",
          "215: } {",
          "216:   QUERY PLAN",
          "217:   `--SEARCH TABLE t2 USING INDEX t2path (path>? AND path<?)",
          "218: }",
          "219: db eval {PRAGMA case_sensitive_like=ON}",
          "220: do_eqp_test like3-6.230 {",
          "221:   SELECT * FROM t2 WHERE path LIKE 'a%';",
          "222: } {",
          "223:   QUERY PLAN",
          "224:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "225: }",
          "226: do_eqp_test like3-6.240 {",
          "227:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '_';",
          "228: } {",
          "229:   QUERY PLAN",
          "230:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "231: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
      "candidate_info": {
        "commit_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5860a61d59e78da7d3bb24346c4791343568a5c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Further performance improvements to btreeInitPage().\n\nFossilOrigin-Name: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:   return SQLITE_OK;",
          "1930: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1936: static SQLITE_NOINLINE int btreeCellSizeCheck(MemPage *pPage){",
          "1946:   iCellFirst = pPage->cellOffset + 2*pPage->nCell;",
          "1947:   usableSize = pPage->pBt->usableSize;",
          "1948:   iCellLast = usableSize - 4;",
          "1949:   data = pPage->aData;",
          "1950:   cellOffset = pPage->cellOffset;",
          "1951:   if( !pPage->leaf ) iCellLast--;",
          "1952:   for(i=0; i<pPage->nCell; i++){",
          "1953:     pc = get2byteAligned(&data[cellOffset+i*2]);",
          "1954:     testcase( pc==iCellFirst );",
          "1955:     testcase( pc==iCellLast );",
          "1956:     if( pc<iCellFirst || pc>iCellLast ){",
          "1957:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1958:     }",
          "1959:     sz = pPage->xCellSize(pPage, &data[pc]);",
          "1960:     testcase( pc+sz==usableSize );",
          "1961:     if( pc+sz>usableSize ){",
          "1962:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1963:     }",
          "1964:   }",
          "1965:   return SQLITE_OK;",
          "1966: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1957:   assert( pPage->isInit==0 );",
          "1959:   pBt = pPage->pBt;",
          "1965:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1966:   }",
          "1967:   assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );",
          "1968:   pPage->maskPage = (u16)(pBt->pageSize - 1);",
          "1969:   pPage->nOverflow = 0;",
          "1978:   if( pPage->nCell>MX_CELL(pBt) ){",
          "1980:     return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1960:   hdr = pPage->hdrOffset;",
          "1961:   data = pPage->aData;",
          "1964:   if( decodeFlags(pPage, data[hdr]) ){",
          "1970:   usableSize = pBt->usableSize;",
          "1971:   pPage->cellOffset = cellOffset = hdr + 8 + pPage->childPtrSize;",
          "1972:   pPage->aDataEnd = &data[usableSize];",
          "1973:   pPage->aCellIdx = &data[cellOffset];",
          "1974:   pPage->aDataOfst = &data[pPage->childPtrSize];",
          "1977:   pPage->nCell = get2byte(&data[hdr+3]);",
          "",
          "[Added Lines]",
          "1990:   data = pPage->aData + pPage->hdrOffset;",
          "1993:   if( decodeFlags(pPage, data[0]) ){",
          "1999:   pPage->cellOffset = pPage->hdrOffset + 8 + pPage->childPtrSize;",
          "2000:   pPage->aCellIdx = data + pPage->childPtrSize + 8;",
          "2001:   pPage->aDataEnd = pPage->aData + pBt->usableSize;",
          "2002:   pPage->aDataOfst = pPage->aData + pPage->childPtrSize;",
          "2005:   pPage->nCell = get2byte(&data[3]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1987:   assert( pPage->nCell>0",
          "1989:        || CORRUPT_DB );",
          "2021:   pPage->isInit = 1;",
          "2022:   return SQLITE_OK;",
          "2023: }",
          "",
          "[Removed Lines]",
          "1988:        || get2byteNotZero(&data[hdr+5])==usableSize",
          "1998:   iCellFirst = cellOffset + 2*pPage->nCell;",
          "1999:   iCellLast = usableSize - 4;",
          "2000:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2004:     if( !pPage->leaf ) iCellLast--;",
          "2005:     for(i=0; i<pPage->nCell; i++){",
          "2006:       pc = get2byteAligned(&data[cellOffset+i*2]);",
          "2007:       testcase( pc==iCellFirst );",
          "2008:       testcase( pc==iCellLast );",
          "2009:       if( pc<iCellFirst || pc>iCellLast ){",
          "2010:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2011:       }",
          "2012:       sz = pPage->xCellSize(pPage, &data[pc]);",
          "2013:       testcase( pc+sz==usableSize );",
          "2014:       if( pc+sz>usableSize ){",
          "2015:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2016:       }",
          "2017:     }",
          "2018:     if( !pPage->leaf ) iCellLast++;",
          "2019:   }",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "2020:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2021:     return btreeCellSizeCheck(pPage);",
          "2022:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}