{
  "cve_id": "CVE-2013-2548",
  "cve_desc": "The crypto_report_one function in crypto/crypto_user.c in the report API in the crypto user configuration API in the Linux kernel through 3.8.2 uses an incorrect length value during a copy operation, which allows local users to obtain sensitive information from kernel memory by leveraging the CAP_NET_ADMIN capability.",
  "repo": "torvalds/linux",
  "patch_hash": "9a5467bf7b6e9e02ec9c3da4e23747c05faeaac6",
  "patch_info": {
    "commit_hash": "9a5467bf7b6e9e02ec9c3da4e23747c05faeaac6",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9a5467bf7b6e9e02ec9c3da4e23747c05faeaac6",
    "files": [
      "crypto/ablkcipher.c",
      "crypto/aead.c",
      "crypto/ahash.c",
      "crypto/blkcipher.c",
      "crypto/crypto_user.c",
      "crypto/pcompress.c",
      "crypto/rng.c",
      "crypto/shash.c"
    ],
    "message": "crypto: user - fix info leaks in report API\n\nThree errors resulting in kernel memory disclosure:\n\n1/ The structures used for the netlink based crypto algorithm report API\nare located on the stack. As snprintf() does not fill the remainder of\nthe buffer with null bytes, those stack bytes will be disclosed to users\nof the API. Switch to strncpy() to fix this.\n\n2/ crypto_report_one() does not initialize all field of struct\ncrypto_user_alg. Fix this to fix the heap info leak.\n\n3/ For the module name we should copy only as many bytes as\nmodule_name() returns -- not as much as the destination buffer could\nhold. But the current code does not and therefore copies random data\nfrom behind the end of the module name, as the module name is always\nshorter than CRYPTO_MAX_ALG_NAME.\n\nAlso switch to use strncpy() to copy the algorithm's name and\ndriver_name. They are strings, after all.\n\nSigned-off-by: Mathias Krause <minipli@googlemail.com>\nCc: Steffen Klassert <steffen.klassert@secunet.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
    "before_after_code_files": [
      "crypto/ablkcipher.c||crypto/ablkcipher.c",
      "crypto/aead.c||crypto/aead.c",
      "crypto/ahash.c||crypto/ahash.c",
      "crypto/blkcipher.c||crypto/blkcipher.c",
      "crypto/crypto_user.c||crypto/crypto_user.c",
      "crypto/pcompress.c||crypto/pcompress.c",
      "crypto/rng.c||crypto/rng.c",
      "crypto/shash.c||crypto/shash.c"
    ]
  },
  "patch_diff": {
    "crypto/ablkcipher.c||crypto/ablkcipher.c": [
      "File: crypto/ablkcipher.c -> crypto/ablkcipher.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "388: {",
      "389:  struct crypto_report_blkcipher rblkcipher;",
      "395:  rblkcipher.blocksize = alg->cra_blocksize;",
      "396:  rblkcipher.min_keysize = alg->cra_ablkcipher.min_keysize;",
      "",
      "[Removed Lines]",
      "391:  snprintf(rblkcipher.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"ablkcipher\");",
      "392:  snprintf(rblkcipher.geniv, CRYPTO_MAX_ALG_NAME, \"%s\",",
      "393:    alg->cra_ablkcipher.geniv ?: \"<default>\");",
      "",
      "[Added Lines]",
      "391:  strncpy(rblkcipher.type, \"ablkcipher\", sizeof(rblkcipher.type));",
      "392:  strncpy(rblkcipher.geniv, alg->cra_ablkcipher.geniv ?: \"<default>\",",
      "393:   sizeof(rblkcipher.geniv));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "469: {",
      "470:  struct crypto_report_blkcipher rblkcipher;",
      "476:  rblkcipher.blocksize = alg->cra_blocksize;",
      "477:  rblkcipher.min_keysize = alg->cra_ablkcipher.min_keysize;",
      "",
      "[Removed Lines]",
      "472:  snprintf(rblkcipher.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"givcipher\");",
      "473:  snprintf(rblkcipher.geniv, CRYPTO_MAX_ALG_NAME, \"%s\",",
      "474:    alg->cra_ablkcipher.geniv ?: \"<built-in>\");",
      "",
      "[Added Lines]",
      "472:  strncpy(rblkcipher.type, \"givcipher\", sizeof(rblkcipher.type));",
      "473:  strncpy(rblkcipher.geniv, alg->cra_ablkcipher.geniv ?: \"<built-in>\",",
      "474:   sizeof(rblkcipher.geniv));",
      "",
      "---------------"
    ],
    "crypto/aead.c||crypto/aead.c": [
      "File: crypto/aead.c -> crypto/aead.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:  struct crypto_report_aead raead;",
      "118:  struct aead_alg *aead = &alg->cra_aead;",
      "124:  raead.blocksize = alg->cra_blocksize;",
      "125:  raead.maxauthsize = aead->maxauthsize;",
      "",
      "[Removed Lines]",
      "120:  snprintf(raead.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"aead\");",
      "121:  snprintf(raead.geniv, CRYPTO_MAX_ALG_NAME, \"%s\",",
      "122:    aead->geniv ?: \"<built-in>\");",
      "",
      "[Added Lines]",
      "120:  strncpy(raead.type, \"aead\", sizeof(raead.type));",
      "121:  strncpy(raead.geniv, aead->geniv ?: \"<built-in>\", sizeof(raead.geniv));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "203:  struct crypto_report_aead raead;",
      "204:  struct aead_alg *aead = &alg->cra_aead;",
      "209:  raead.blocksize = alg->cra_blocksize;",
      "210:  raead.maxauthsize = aead->maxauthsize;",
      "",
      "[Removed Lines]",
      "206:  snprintf(raead.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"nivaead\");",
      "207:  snprintf(raead.geniv, CRYPTO_MAX_ALG_NAME, \"%s\", aead->geniv);",
      "",
      "[Added Lines]",
      "205:  strncpy(raead.type, \"nivaead\", sizeof(raead.type));",
      "206:  strncpy(raead.geniv, aead->geniv, sizeof(raead.geniv));",
      "",
      "---------------"
    ],
    "crypto/ahash.c||crypto/ahash.c": [
      "File: crypto/ahash.c -> crypto/ahash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "404: {",
      "405:  struct crypto_report_hash rhash;",
      "409:  rhash.blocksize = alg->cra_blocksize;",
      "410:  rhash.digestsize = __crypto_hash_alg_common(alg)->digestsize;",
      "",
      "[Removed Lines]",
      "407:  snprintf(rhash.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"ahash\");",
      "",
      "[Added Lines]",
      "407:  strncpy(rhash.type, \"ahash\", sizeof(rhash.type));",
      "",
      "---------------"
    ],
    "crypto/blkcipher.c||crypto/blkcipher.c": [
      "File: crypto/blkcipher.c -> crypto/blkcipher.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "499: {",
      "500:  struct crypto_report_blkcipher rblkcipher;",
      "506:  rblkcipher.blocksize = alg->cra_blocksize;",
      "507:  rblkcipher.min_keysize = alg->cra_blkcipher.min_keysize;",
      "",
      "[Removed Lines]",
      "502:  snprintf(rblkcipher.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"blkcipher\");",
      "503:  snprintf(rblkcipher.geniv, CRYPTO_MAX_ALG_NAME, \"%s\",",
      "504:    alg->cra_blkcipher.geniv ?: \"<default>\");",
      "",
      "[Added Lines]",
      "502:  strncpy(rblkcipher.type, \"blkcipher\", sizeof(rblkcipher.type));",
      "503:  strncpy(rblkcipher.geniv, alg->cra_blkcipher.geniv ?: \"<default>\",",
      "504:   sizeof(rblkcipher.geniv));",
      "",
      "---------------"
    ],
    "crypto/crypto_user.c||crypto/crypto_user.c": [
      "File: crypto/crypto_user.c -> crypto/crypto_user.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "75: {",
      "76:  struct crypto_report_cipher rcipher;",
      "80:  rcipher.blocksize = alg->cra_blocksize;",
      "81:  rcipher.min_keysize = alg->cra_cipher.cia_min_keysize;",
      "",
      "[Removed Lines]",
      "78:  snprintf(rcipher.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"cipher\");",
      "",
      "[Added Lines]",
      "78:  strncpy(rcipher.type, \"cipher\", sizeof(rcipher.type));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "94: {",
      "95:  struct crypto_report_comp rcomp;",
      "99:  if (nla_put(skb, CRYPTOCFGA_REPORT_COMPRESS,",
      "100:       sizeof(struct crypto_report_comp), &rcomp))",
      "101:   goto nla_put_failure;",
      "",
      "[Removed Lines]",
      "97:  snprintf(rcomp.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"compression\");",
      "",
      "[Added Lines]",
      "97:  strncpy(rcomp.type, \"compression\", sizeof(rcomp.type));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108: static int crypto_report_one(struct crypto_alg *alg,",
      "109:         struct crypto_user_alg *ualg, struct sk_buff *skb)",
      "110: {",
      "117:  ualg->cru_flags = alg->cra_flags;",
      "118:  ualg->cru_refcnt = atomic_read(&alg->cra_refcnt);",
      "",
      "[Removed Lines]",
      "111:  memcpy(&ualg->cru_name, &alg->cra_name, sizeof(ualg->cru_name));",
      "112:  memcpy(&ualg->cru_driver_name, &alg->cra_driver_name,",
      "113:         sizeof(ualg->cru_driver_name));",
      "114:  memcpy(&ualg->cru_module_name, module_name(alg->cra_module),",
      "115:         CRYPTO_MAX_ALG_NAME);",
      "",
      "[Added Lines]",
      "110:  strncpy(ualg->cru_name, alg->cra_name, sizeof(ualg->cru_name));",
      "111:  strncpy(ualg->cru_driver_name, alg->cra_driver_name,",
      "112:   sizeof(ualg->cru_driver_name));",
      "113:  strncpy(ualg->cru_module_name, module_name(alg->cra_module),",
      "114:   sizeof(ualg->cru_module_name));",
      "116:  ualg->cru_type = 0;",
      "117:  ualg->cru_mask = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:  if (alg->cra_flags & CRYPTO_ALG_LARVAL) {",
      "123:   struct crypto_report_larval rl;",
      "127:   if (nla_put(skb, CRYPTOCFGA_REPORT_LARVAL,",
      "128:        sizeof(struct crypto_report_larval), &rl))",
      "129:    goto nla_put_failure;",
      "",
      "[Removed Lines]",
      "125:   snprintf(rl.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"larval\");",
      "",
      "[Added Lines]",
      "126:   strncpy(rl.type, \"larval\", sizeof(rl.type));",
      "",
      "---------------"
    ],
    "crypto/pcompress.c||crypto/pcompress.c": [
      "File: crypto/pcompress.c -> crypto/pcompress.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: {",
      "54:  struct crypto_report_comp rpcomp;",
      "58:  if (nla_put(skb, CRYPTOCFGA_REPORT_COMPRESS,",
      "59:       sizeof(struct crypto_report_comp), &rpcomp))",
      "60:   goto nla_put_failure;",
      "",
      "[Removed Lines]",
      "56:  snprintf(rpcomp.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"pcomp\");",
      "",
      "[Added Lines]",
      "56:  strncpy(rpcomp.type, \"pcomp\", sizeof(rpcomp.type));",
      "",
      "---------------"
    ],
    "crypto/rng.c||crypto/rng.c": [
      "File: crypto/rng.c -> crypto/rng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: {",
      "66:  struct crypto_report_rng rrng;",
      "70:  rrng.seedsize = alg->cra_rng.seedsize;",
      "",
      "[Removed Lines]",
      "68:  snprintf(rrng.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"rng\");",
      "",
      "[Added Lines]",
      "68:  strncpy(rrng.type, \"rng\", sizeof(rrng.type));",
      "",
      "---------------"
    ],
    "crypto/shash.c||crypto/shash.c": [
      "File: crypto/shash.c -> crypto/shash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "530:  struct crypto_report_hash rhash;",
      "531:  struct shash_alg *salg = __crypto_shash_alg(alg);",
      "534:  rhash.blocksize = alg->cra_blocksize;",
      "535:  rhash.digestsize = salg->digestsize;",
      "",
      "[Removed Lines]",
      "533:  snprintf(rhash.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"shash\");",
      "",
      "[Added Lines]",
      "533:  strncpy(rhash.type, \"shash\", sizeof(rhash.type));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6662df33f85b87bb29f2ecad124efe7bb2c08e05",
      "candidate_info": {
        "commit_hash": "6662df33f85b87bb29f2ecad124efe7bb2c08e05",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6662df33f85b87bb29f2ecad124efe7bb2c08e05",
        "files": [
          "crypto/ablkcipher.c",
          "crypto/aead.c",
          "crypto/ahash.c",
          "crypto/blkcipher.c",
          "crypto/crypto_user.c",
          "crypto/pcompress.c",
          "crypto/rng.c",
          "crypto/shash.c"
        ],
        "message": "crypto: Stop using NLA_PUT*().\n\nThese macros contain a hidden goto, and are thus extremely error\nprone and make code hard to audit.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "crypto/ablkcipher.c||crypto/ablkcipher.c",
          "crypto/aead.c||crypto/aead.c",
          "crypto/ahash.c||crypto/ahash.c",
          "crypto/blkcipher.c||crypto/blkcipher.c",
          "crypto/crypto_user.c||crypto/crypto_user.c",
          "crypto/pcompress.c||crypto/pcompress.c",
          "crypto/rng.c||crypto/rng.c",
          "crypto/shash.c||crypto/shash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ablkcipher.c||crypto/ablkcipher.c",
            "crypto/aead.c||crypto/aead.c",
            "crypto/ahash.c||crypto/ahash.c",
            "crypto/blkcipher.c||crypto/blkcipher.c",
            "crypto/crypto_user.c||crypto/crypto_user.c",
            "crypto/pcompress.c||crypto/pcompress.c",
            "crypto/rng.c||crypto/rng.c",
            "crypto/shash.c||crypto/shash.c"
          ],
          "candidate": [
            "crypto/ablkcipher.c||crypto/ablkcipher.c",
            "crypto/aead.c||crypto/aead.c",
            "crypto/ahash.c||crypto/ahash.c",
            "crypto/blkcipher.c||crypto/blkcipher.c",
            "crypto/crypto_user.c||crypto/crypto_user.c",
            "crypto/pcompress.c||crypto/pcompress.c",
            "crypto/rng.c||crypto/rng.c",
            "crypto/shash.c||crypto/shash.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ablkcipher.c||crypto/ablkcipher.c": [
          "File: crypto/ablkcipher.c -> crypto/ablkcipher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:  rblkcipher.max_keysize = alg->cra_ablkcipher.max_keysize;",
          "398:  rblkcipher.ivsize = alg->cra_ablkcipher.ivsize;",
          "403:  return 0;",
          "405: nla_put_failure:",
          "",
          "[Removed Lines]",
          "400:  NLA_PUT(skb, CRYPTOCFGA_REPORT_BLKCIPHER,",
          "401:   sizeof(struct crypto_report_blkcipher), &rblkcipher);",
          "",
          "[Added Lines]",
          "400:  if (nla_put(skb, CRYPTOCFGA_REPORT_BLKCIPHER,",
          "401:       sizeof(struct crypto_report_blkcipher), &rblkcipher))",
          "402:   goto nla_put_failure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:  rblkcipher.max_keysize = alg->cra_ablkcipher.max_keysize;",
          "479:  rblkcipher.ivsize = alg->cra_ablkcipher.ivsize;",
          "484:  return 0;",
          "486: nla_put_failure:",
          "",
          "[Removed Lines]",
          "481:  NLA_PUT(skb, CRYPTOCFGA_REPORT_BLKCIPHER,",
          "482:   sizeof(struct crypto_report_blkcipher), &rblkcipher);",
          "",
          "[Added Lines]",
          "481:  if (nla_put(skb, CRYPTOCFGA_REPORT_BLKCIPHER,",
          "482:       sizeof(struct crypto_report_blkcipher), &rblkcipher))",
          "483:   goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/aead.c||crypto/aead.c": [
          "File: crypto/aead.c -> crypto/aead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  raead.maxauthsize = aead->maxauthsize;",
          "126:  raead.ivsize = aead->ivsize;",
          "131:  return 0;",
          "133: nla_put_failure:",
          "",
          "[Removed Lines]",
          "128:  NLA_PUT(skb, CRYPTOCFGA_REPORT_AEAD,",
          "129:   sizeof(struct crypto_report_aead), &raead);",
          "",
          "[Added Lines]",
          "128:  if (nla_put(skb, CRYPTOCFGA_REPORT_AEAD,",
          "129:       sizeof(struct crypto_report_aead), &raead))",
          "130:   goto nla_put_failure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:  raead.maxauthsize = aead->maxauthsize;",
          "211:  raead.ivsize = aead->ivsize;",
          "216:  return 0;",
          "218: nla_put_failure:",
          "",
          "[Removed Lines]",
          "213:  NLA_PUT(skb, CRYPTOCFGA_REPORT_AEAD,",
          "214:   sizeof(struct crypto_report_aead), &raead);",
          "",
          "[Added Lines]",
          "213:  if (nla_put(skb, CRYPTOCFGA_REPORT_AEAD,",
          "214:       sizeof(struct crypto_report_aead), &raead))",
          "215:   goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/ahash.c||crypto/ahash.c": [
          "File: crypto/ahash.c -> crypto/ahash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:  rhash.blocksize = alg->cra_blocksize;",
          "410:  rhash.digestsize = __crypto_hash_alg_common(alg)->digestsize;",
          "415:  return 0;",
          "417: nla_put_failure:",
          "",
          "[Removed Lines]",
          "412:  NLA_PUT(skb, CRYPTOCFGA_REPORT_HASH,",
          "413:   sizeof(struct crypto_report_hash), &rhash);",
          "",
          "[Added Lines]",
          "412:  if (nla_put(skb, CRYPTOCFGA_REPORT_HASH,",
          "413:       sizeof(struct crypto_report_hash), &rhash))",
          "414:   goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/blkcipher.c||crypto/blkcipher.c": [
          "File: crypto/blkcipher.c -> crypto/blkcipher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "508:  rblkcipher.max_keysize = alg->cra_blkcipher.max_keysize;",
          "509:  rblkcipher.ivsize = alg->cra_blkcipher.ivsize;",
          "514:  return 0;",
          "516: nla_put_failure:",
          "",
          "[Removed Lines]",
          "511:  NLA_PUT(skb, CRYPTOCFGA_REPORT_BLKCIPHER,",
          "512:   sizeof(struct crypto_report_blkcipher), &rblkcipher);",
          "",
          "[Added Lines]",
          "511:  if (nla_put(skb, CRYPTOCFGA_REPORT_BLKCIPHER,",
          "512:       sizeof(struct crypto_report_blkcipher), &rblkcipher))",
          "513:   goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/crypto_user.c||crypto/crypto_user.c": [
          "File: crypto/crypto_user.c -> crypto/crypto_user.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  rcipher.min_keysize = alg->cra_cipher.cia_min_keysize;",
          "78:  rcipher.max_keysize = alg->cra_cipher.cia_max_keysize;",
          "83:  return 0;",
          "85: nla_put_failure:",
          "",
          "[Removed Lines]",
          "80:  NLA_PUT(skb, CRYPTOCFGA_REPORT_CIPHER,",
          "81:   sizeof(struct crypto_report_cipher), &rcipher);",
          "",
          "[Added Lines]",
          "80:  if (nla_put(skb, CRYPTOCFGA_REPORT_CIPHER,",
          "81:       sizeof(struct crypto_report_cipher), &rcipher))",
          "82:   goto nla_put_failure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:  snprintf(rcomp.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"compression\");",
          "98:  return 0;",
          "100: nla_put_failure:",
          "",
          "[Removed Lines]",
          "95:  NLA_PUT(skb, CRYPTOCFGA_REPORT_COMPRESS,",
          "96:   sizeof(struct crypto_report_comp), &rcomp);",
          "",
          "[Added Lines]",
          "95:  if (nla_put(skb, CRYPTOCFGA_REPORT_COMPRESS,",
          "96:       sizeof(struct crypto_report_comp), &rcomp))",
          "97:   goto nla_put_failure;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  ualg->cru_flags = alg->cra_flags;",
          "114:  ualg->cru_refcnt = atomic_read(&alg->cra_refcnt);",
          "118:  if (alg->cra_flags & CRYPTO_ALG_LARVAL) {",
          "119:   struct crypto_report_larval rl;",
          "121:   snprintf(rl.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"larval\");",
          "126:   goto out;",
          "127:  }",
          "",
          "[Removed Lines]",
          "116:  NLA_PUT_U32(skb, CRYPTOCFGA_PRIORITY_VAL, alg->cra_priority);",
          "123:   NLA_PUT(skb, CRYPTOCFGA_REPORT_LARVAL,",
          "124:    sizeof(struct crypto_report_larval), &rl);",
          "",
          "[Added Lines]",
          "116:  if (nla_put_u32(skb, CRYPTOCFGA_PRIORITY_VAL, alg->cra_priority))",
          "117:   goto nla_put_failure;",
          "123:   if (nla_put(skb, CRYPTOCFGA_REPORT_LARVAL,",
          "124:        sizeof(struct crypto_report_larval), &rl))",
          "125:    goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/pcompress.c||crypto/pcompress.c": [
          "File: crypto/pcompress.c -> crypto/pcompress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  snprintf(rpcomp.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"pcomp\");",
          "61:  return 0;",
          "63: nla_put_failure:",
          "",
          "[Removed Lines]",
          "58:  NLA_PUT(skb, CRYPTOCFGA_REPORT_COMPRESS,",
          "59:   sizeof(struct crypto_report_comp), &rpcomp);",
          "",
          "[Added Lines]",
          "58:  if (nla_put(skb, CRYPTOCFGA_REPORT_COMPRESS,",
          "59:       sizeof(struct crypto_report_comp), &rpcomp))",
          "60:   goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/rng.c||crypto/rng.c": [
          "File: crypto/rng.c -> crypto/rng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  rrng.seedsize = alg->cra_rng.seedsize;",
          "75:  return 0;",
          "77: nla_put_failure:",
          "",
          "[Removed Lines]",
          "72:  NLA_PUT(skb, CRYPTOCFGA_REPORT_RNG,",
          "73:   sizeof(struct crypto_report_rng), &rrng);",
          "",
          "[Added Lines]",
          "72:  if (nla_put(skb, CRYPTOCFGA_REPORT_RNG,",
          "73:       sizeof(struct crypto_report_rng), &rrng))",
          "74:   goto nla_put_failure;",
          "",
          "---------------"
        ],
        "crypto/shash.c||crypto/shash.c": [
          "File: crypto/shash.c -> crypto/shash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "534:  rhash.blocksize = alg->cra_blocksize;",
          "535:  rhash.digestsize = salg->digestsize;",
          "540:  return 0;",
          "542: nla_put_failure:",
          "",
          "[Removed Lines]",
          "537:  NLA_PUT(skb, CRYPTOCFGA_REPORT_HASH,",
          "538:   sizeof(struct crypto_report_hash), &rhash);",
          "",
          "[Added Lines]",
          "537:  if (nla_put(skb, CRYPTOCFGA_REPORT_HASH,",
          "538:       sizeof(struct crypto_report_hash), &rhash))",
          "539:   goto nla_put_failure;",
          "",
          "---------------"
        ]
      }
    }
  ]
}