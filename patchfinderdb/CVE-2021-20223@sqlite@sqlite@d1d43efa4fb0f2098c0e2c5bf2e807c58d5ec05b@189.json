{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c415d91007e1680e4eb17def583b202c3c83c718",
      "candidate_info": {
        "commit_hash": "c415d91007e1680e4eb17def583b202c3c83c718",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c415d91007e1680e4eb17def583b202c3c83c718",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "In the event of a semantic error in an aggregate query, early-out the resetAccumulator() function to prevent problems due to incomplete or incorrect initialization of the AggInfo object. Fix for ticket [af4556bb5c285c08].\n\nFossilOrigin-Name: 4a302b42c7bf5e11ddb5522ca999f74aba397d3a7eb91b1844bb02852f772441",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 684293882c302600e112cf52553c19d84fdb31663d96e5dd7f8ac17dda00a026",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5388:   struct AggInfo_func *pFunc;",
          "5389:   int nReg = pAggInfo->nFunc + pAggInfo->nColumn;",
          "5390:   if( nReg==0 ) return;",
          "5391: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:   if( pParse->nErr ) return;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1653: SELECT * FROM (SELECT * FROM t1 NATURAL JOIN t1 WHERE a%1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum((SELECT * FROM (SELECT * FROM (SELECT * FROM t1 NATURAL JOIN t1 WHERE a%1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum((SELECT * FROM t1 NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)))OVER(ORDER BY a% 1 )) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND 10<=a)))OVER(ORDER BY a%5)) AND a<=10);",
          "1654: } {10.0}",
          "",
          "[Removed Lines]",
          "1656: finish_test",
          "",
          "[Added Lines]",
          "1656: # 2020-04-03 ticket af4556bb5c285c08",
          "1657: #",
          "1658: reset_db",
          "1659: do_catchsql_test 51.1 {",
          "1660:   CREATE TABLE a(b, c);",
          "1661:   SELECT c FROM a GROUP BY c",
          "1662:     HAVING(SELECT(sum(b) OVER(ORDER BY b),",
          "1663:                   sum(b) OVER(PARTITION BY min(DISTINCT c), c ORDER BY b)));",
          "1664: } {1 {row value misused}}",
          "1666: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acc175215aa4f641cd2c80d9f5d57f6d07cd1709",
      "candidate_info": {
        "commit_hash": "acc175215aa4f641cd2c80d9f5d57f6d07cd1709",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/acc175215aa4f641cd2c80d9f5d57f6d07cd1709",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c"
        ],
        "message": "Do not retry on a failed realloc() unless SQLITE_ENABLE_MEMORY_MANAGEMENT is available, meaning that the retry has some possibility of success.\n\nFossilOrigin-Name: e9a8f910b5e2b84dd77364783f0610bca970cc88aa037c88636c72145b99f411",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb299a090c81cdc5c116c4e15ab38fce112916f8b0fad0c7f2ab127e79238a94",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:       sqlite3MallocAlarm(nDiff);",
          "483:     }",
          "484:     pNew = sqlite3GlobalConfig.m.xRealloc(pOld, nNew);",
          "485:     if( pNew==0 && mem0.alarmThreshold>0 ){",
          "486:       sqlite3MallocAlarm((int)nBytes);",
          "487:       pNew = sqlite3GlobalConfig.m.xRealloc(pOld, nNew);",
          "488:     }",
          "489:     if( pNew ){",
          "490:       nNew = sqlite3MallocSize(pNew);",
          "491:       sqlite3StatusUp(SQLITE_STATUS_MEMORY_USED, nNew-nOld);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485: #ifdef SQLITE_ENABLE_MEMORY_MANAGEMENT",
          "490: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d41af23a48dc343fbe1b2d26b16a2d3fdeb72ca",
      "candidate_info": {
        "commit_hash": "9d41af23a48dc343fbe1b2d26b16a2d3fdeb72ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d41af23a48dc343fbe1b2d26b16a2d3fdeb72ca",
        "files": [
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Do not use HIDDEN columns for NATURAL joins. Fix for [7c0e06b16].\n\nFossilOrigin-Name: ab09ef427181130be09a087b7e572ad4cfb6b3e1b459769ee5ebf046b3ead682",
        "before_after_code_files": [
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "297: }",
          "299: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: #-------------------------------------------------------------------------",
          "300: # Ticket [7c0e06b16]",
          "301: #",
          "302: do_execsql_test 12.0 {",
          "303:   CREATE TABLE t1(a, b, rank);",
          "304:   INSERT INTO t1 VALUES('a', 'hello', '');",
          "305:   INSERT INTO t1 VALUES('b', 'world', '');",
          "307:   CREATE VIRTUAL TABLE ft USING fts5(a);",
          "308:   INSERT INTO ft VALUES('b');",
          "309:   INSERT INTO ft VALUES('y');",
          "311:   CREATE TABLE t2(x, y, ft);",
          "312:   INSERT INTO t2 VALUES(1, 2, 'x');",
          "313:   INSERT INTO t2 VALUES(3, 4, 'b');",
          "314: }",
          "316: do_execsql_test 12.1 {",
          "317:   SELECT * FROM t1 NATURAL JOIN ft WHERE ft MATCH('b')",
          "318: } {b world {}}",
          "319: do_execsql_test 12.2 {",
          "320:   SELECT * FROM ft NATURAL JOIN t1 WHERE ft MATCH('b')",
          "321: } {b world {}}",
          "322: do_execsql_test 12.3 {",
          "323:   SELECT * FROM t2 JOIN ft USING (ft)",
          "324: } {3 4 b b}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9e0354c992b0287608ddd18fd35fe7e6102a8f293d6e6e1b3488644bcda8168",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   for(i=0; i<N; i++){",
          "323:     iCol = columnIndex(pSrc->a[i].pTab, zCol);",
          "325:       if( piTab ){",
          "",
          "[Removed Lines]",
          "324:     if( iCol>=0 ){",
          "",
          "[Added Lines]",
          "325:     if( iCol>=0",
          "326:      && (bIgnoreHidden==0 || IsHiddenColumn(&pSrc->a[i].pTab->aCol[iCol])==0)",
          "327:     ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489:         zName = pRightTab->aCol[j].zName;",
          "491:           addWhereTerm(pParse, pSrc, iLeft, iLeftCol, i+1, j,",
          "493:         }",
          "494:       }",
          "495:     }",
          "",
          "[Removed Lines]",
          "490:         if( tableAndColumnIndex(pSrc, i+1, zName, &iLeft, &iLeftCol) ){",
          "492:                        isOuter, &p->pWhere);",
          "",
          "[Added Lines]",
          "492:         if( IsHiddenColumn(&pRightTab->aCol[j]) ) continue;",
          "494:         if( tableAndColumnIndex(pSrc, i+1, zName, &iLeft, &iLeftCol, 1) ){",
          "496:                 isOuter, &p->pWhere);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:         zName = pList->a[j].zName;",
          "530:         iRightCol = columnIndex(pRightTab, zName);",
          "531:         if( iRightCol<0",
          "533:         ){",
          "534:           sqlite3ErrorMsg(pParse, \"cannot join using column %s - column \"",
          "535:             \"not present in both tables\", zName);",
          "",
          "[Removed Lines]",
          "532:          || !tableAndColumnIndex(pSrc, i+1, zName, &iLeft, &iLeftCol)",
          "",
          "[Added Lines]",
          "536:          || !tableAndColumnIndex(pSrc, i+1, zName, &iLeft, &iLeftCol, 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5088:             if( i>0 && zTName==0 ){",
          "5089:               if( (pFrom->fg.jointype & JT_NATURAL)!=0",
          "5091:               ){",
          "",
          "[Removed Lines]",
          "5090:                 && tableAndColumnIndex(pTabList, i, zName, 0, 0)",
          "",
          "[Added Lines]",
          "5094:                 && tableAndColumnIndex(pTabList, i, zName, 0, 0, 1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4f31df02d77857252093c7be4641d9abb27476b",
      "candidate_info": {
        "commit_hash": "f4f31df02d77857252093c7be4641d9abb27476b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4f31df02d77857252093c7be4641d9abb27476b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c",
          "test/fuzzdata8.db"
        ],
        "message": "When creating a new virtual table, ensure that the OP_ParseSchema opcode processes the correct entry in the sqlite_master table even if there is a second entry with the same name and table values due to database corruption and the use of writable_schema=ON.  Dbsqlfuzz find.\n\nFossilOrigin-Name: 4dbb6e1cb094f3428c74ea8bdd86ab63341fecce978a062968ca01423f382e90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea721b34477ab8b49d182352c4bc198245933b850e9b6248b4f97600e80bb44b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:       zStmt,",
          "485:       pParse->regRowid",
          "486:     );",
          "488:     v = sqlite3GetVdbe(pParse);",
          "489:     sqlite3ChangeCookie(pParse, iDb);",
          "491:     sqlite3VdbeAddOp0(v, OP_Expire);",
          "493:     sqlite3VdbeAddParseSchemaOp(v, iDb, zWhere);",
          "495:     iReg = ++pParse->nMem;",
          "496:     sqlite3VdbeLoadString(v, iReg, pTab->zName);",
          "",
          "[Removed Lines]",
          "487:     sqlite3DbFree(db, zStmt);",
          "492:     zWhere = sqlite3MPrintf(db, \"name='%q' AND type='table'\", pTab->zName);",
          "",
          "[Added Lines]",
          "491:     zWhere = sqlite3MPrintf(db, \"name=%Q AND sql=%Q\", pTab->zName, zStmt);",
          "493:     sqlite3DbFree(db, zStmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efa78884a8f0049b73e581c7cc93d3070ab1a453",
      "candidate_info": {
        "commit_hash": "efa78884a8f0049b73e581c7cc93d3070ab1a453",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efa78884a8f0049b73e581c7cc93d3070ab1a453",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a problem handling constant integer expressions with collation sequences in PARTITION BY clauses.\n\nFossilOrigin-Name: 155e6649efe8614718be7ac6c3cccf5b073ae57496dc220db5e4313621f5188e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a16c0ce4d8851f79f670d94786032c8007619154ece44647dc9cc5b1f9654ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:     int i;",
          "896:     int nInit = pList ? pList->nExpr : 0;",
          "897:     for(i=0; i<pAppend->nExpr; i++){",
          "899:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "900:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
          "905:       }",
          "906:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "907:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "[Removed Lines]",
          "898:       int iDummy;",
          "901:       if( bIntToNull && pDup && sqlite3ExprIsInteger(pDup, &iDummy) ){",
          "902:         pDup->op = TK_NULL;",
          "903:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "904:         pDup->u.zToken = 0;",
          "",
          "[Added Lines]",
          "900:       if( bIntToNull && pDup ){",
          "901:         int iDummy;",
          "902:         Expr *pSub;",
          "903:         for(pSub=pDup; ExprHasProperty(pSub, EP_Skip); pSub=pSub->pLeft){",
          "904:           assert( pSub );",
          "905:         }",
          "906:         if( sqlite3ExprIsInteger(pSub, &iDummy) ){",
          "907:           pSub->op = TK_NULL;",
          "908:           pSub->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "909:           pSub->u.zToken = 0;",
          "910:         }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663:                   sum(b) OVER(PARTITION BY min(DISTINCT c), c ORDER BY b)));",
          "1664: } {1 {row value misused}}",
          "1666: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1666: #-------------------------------------------------------------------------",
          "1667: reset_db",
          "1668: do_execsql_test 52.1 {",
          "1669:   CREATE TABLE t1(a, b, c);",
          "1670:   INSERT INTO t1 VALUES('AA','bb',356);",
          "1671:   INSERT INTO t1 VALUES('CC','aa',158);",
          "1672:   INSERT INTO t1 VALUES('BB','aa',399);",
          "1673:   INSERT INTO t1 VALUES('FF','bb',938);",
          "1674: }",
          "1676: do_execsql_test 52.2 {",
          "1677:   SELECT",
          "1678:     count() OVER win1,",
          "1679:     sum(c) OVER win2,",
          "1680:     first_value(c) OVER win2,",
          "1681:     count(a) OVER (ORDER BY b)",
          "1682:       FROM t1",
          "1683:       WINDOW",
          "1684:       win1 AS (ORDER BY a),",
          "1685:     win2 AS (PARTITION BY 6 ORDER BY a",
          "1686:         RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING );",
          "1687: } {",
          "1688:   1 356 356 4",
          "1689:   2 399 399 2",
          "1690:   3 158 158 2",
          "1691:   4 938 938 4",
          "1692: }",
          "1694: do_execsql_test 52.3 {",
          "1695: SELECT",
          "1696:   count() OVER (),",
          "1697:   sum(c) OVER win2,",
          "1698:   first_value(c) OVER win2,",
          "1699:   count(a) OVER (ORDER BY b)",
          "1700: FROM t1",
          "1701: WINDOW",
          "1702:   win1 AS (ORDER BY a),",
          "1703:   win2 AS (PARTITION BY 6 COLLATE binary ORDER BY a",
          "1704:            RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING );",
          "1705: } {",
          "1706:   4 356 356 4",
          "1707:   4 399 399 2",
          "1708:   4 158 158 2",
          "1709:   4 938 938 4",
          "1710: }",
          "1712: do_execsql_test 52.4 {",
          "1713:   SELECT",
          "1714:     count() OVER win1,",
          "1715:     sum(c) OVER win2,",
          "1716:     first_value(c) OVER win2,",
          "1717:     count(a) OVER (ORDER BY b)",
          "1718:   FROM t1",
          "1719:   WINDOW",
          "1720:     win1 AS (ORDER BY a),",
          "1721:     win2 AS (PARTITION BY 6 COLLATE binary ORDER BY a",
          "1722:              RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING );",
          "1723: } {",
          "1724:   1 356 356 4",
          "1725:   2 399 399 2",
          "1726:   3 158 158 2",
          "1727:   4 938 938 4",
          "1728: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}