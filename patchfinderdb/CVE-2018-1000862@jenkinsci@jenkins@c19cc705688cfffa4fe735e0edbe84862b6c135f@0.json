{
  "cve_id": "CVE-2018-1000862",
  "cve_desc": "An information exposure vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in DirectoryBrowserSupport.java that allows attackers with the ability to control build output to browse the file system on agents running builds beyond the duration of the build using the workspace browser.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "c19cc705688cfffa4fe735e0edbe84862b6c135f",
  "patch_info": {
    "commit_hash": "c19cc705688cfffa4fe735e0edbe84862b6c135f",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/c19cc705688cfffa4fe735e0edbe84862b6c135f",
    "files": [
      "core/src/main/java/hudson/FilePath.java",
      "core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "core/src/main/java/hudson/model/Run.java",
      "core/src/main/java/jenkins/util/VirtualFile.java",
      "core/src/test/java/hudson/FilePathSEC904Test.java",
      "core/src/test/java/hudson/UtilSEC904Test.java",
      "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
      "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java",
      "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat"
    ],
    "message": "[SECURITY-904]",
    "before_after_code_files": [
      "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
      "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "core/src/main/java/hudson/model/Run.java||core/src/main/java/hudson/model/Run.java",
      "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java",
      "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java",
      "core/src/test/java/hudson/UtilSEC904Test.java||core/src/test/java/hudson/UtilSEC904Test.java",
      "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
      "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java",
      "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
      "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80: import java.nio.file.FileSystems;",
      "81: import java.nio.file.Files;",
      "82: import java.nio.file.InvalidPathException;",
      "83: import java.nio.file.Path;",
      "84: import java.nio.file.LinkOption;",
      "85: import java.nio.file.StandardCopyOption;",
      "86: import java.nio.file.attribute.FileAttribute;",
      "87: import java.nio.file.attribute.PosixFilePermission;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83: import java.nio.file.NoSuchFileException;",
      "86: import java.nio.file.Paths;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3044:             if (new File(potentialChildRelativePath).isAbsolute()) {",
      "3045:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
      "3046:             }",
      "3050:             String remainingPath = potentialChildRelativePath;",
      "3052:             while (!remainingPath.isEmpty()) {",
      "3058:                 if (childFileSymbolic == null) {",
      "3060:                 } else {",
      "3062:                 }",
      "3063:             }",
      "3068:         }",
      "3074:             }",
      "3075:             return current;",
      "3076:         }",
      "",
      "[Removed Lines]",
      "3048:             Path parent = parentFile.getAbsoluteFile().toPath().normalize();",
      "3051:             File currentFile = parentFile;",
      "3053:                 File directChild = this.getDirectChild(currentFile, remainingPath);",
      "3054:                 File childUsingFullPath = new File(currentFile, remainingPath);",
      "3055:                 remainingPath = childUsingFullPath.getAbsolutePath().substring(directChild.getAbsolutePath().length());",
      "3057:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild);",
      "3059:                     currentFile = directChild;",
      "3061:                     currentFile = childFileSymbolic;",
      "3066:             Path child = currentFile.getAbsoluteFile().toPath().normalize();",
      "3067:             return child.startsWith(parent);",
      "3070:         private @CheckForNull File getDirectChild(File parentFile, String childPath){",
      "3071:             File current = new File(parentFile, childPath);",
      "3072:             while (current != null && !parentFile.equals(current.getParentFile())) {",
      "3073:                 current = current.getParentFile();",
      "",
      "[Added Lines]",
      "3050:             Path parentAbsolutePath = Util.fileToPath(parentFile.getAbsoluteFile());",
      "3051:             Path parentRealPath;",
      "3052:             try {",
      "3053:                 parentRealPath = parentAbsolutePath.toRealPath();",
      "3054:             }",
      "3055:             catch(NoSuchFileException e) {",
      "3056:                 throw new IllegalArgumentException(\"The parent does not exist\");",
      "3057:             }",
      "3062:             Path currentFilePath = parentFile.toPath();",
      "3064:                 Path directChild = this.getDirectChild(currentFilePath, remainingPath);",
      "3065:                 Path childUsingFullPath = currentFilePath.resolve(remainingPath);",
      "3066:                 Path rel = directChild.toAbsolutePath().relativize(childUsingFullPath.toAbsolutePath());",
      "3067:                 remainingPath = rel.toString();",
      "3069:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild.toFile());",
      "3071:                     currentFilePath = directChild;",
      "3073:                     currentFilePath = childFileSymbolic.toPath();",
      "3074:                 }",
      "3076:                 Path currentFileAbsolutePath = currentFilePath.toAbsolutePath();",
      "3077:                 try{",
      "3078:                     Path child = currentFileAbsolutePath.toRealPath();",
      "3079:                     if (!child.startsWith(parentRealPath)) {",
      "3080:                         return false;",
      "3081:                     }",
      "3082:                 } catch (NoSuchFileException e) {",
      "3087:                     try {",
      "3088:                         Path child = currentFileAbsolutePath.normalize();",
      "3089:                         Path parent = parentAbsolutePath.normalize();",
      "3090:                         return child.startsWith(parent);",
      "3091:                     } catch (InvalidPathException e2) {",
      "3092:                         throw new IOException(e2);",
      "3093:                     }",
      "3097:             return true;",
      "3100:         private @CheckForNull Path getDirectChild(Path parentPath, String childPath){",
      "3101:             Path current = parentPath.resolve(childPath);",
      "3102:             while (current != null && !parentPath.equals(current.getParent())) {",
      "3103:                 current = current.getParent();",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java": [
      "File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java -> core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.model;",
      "26: import hudson.FilePath;",
      "27: import hudson.Util;",
      "28: import java.io.IOException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: import java.util.Comparator;",
      "37: import java.util.List;",
      "38: import java.util.Locale;",
      "39: import java.util.StringTokenizer;",
      "40: import java.util.logging.Level;",
      "41: import java.util.logging.Logger;",
      "42: import javax.servlet.ServletException;",
      "43: import javax.servlet.http.HttpServletResponse;",
      "44: import jenkins.model.Jenkins;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: import java.util.Objects;",
      "44: import java.util.stream.Collectors;",
      "45: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66: public final class DirectoryBrowserSupport implements HttpResponse {",
      "68:     public final ModelObject owner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Accessible via System Groovy Scripts\")",
      "73:     public static boolean ALLOW_SYMLINK_ESCAPE = Boolean.getBoolean(DirectoryBrowserSupport.class.getName() + \".allowSymlinkEscape\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "212:         String base = _base.toString();",
      "213:         String rest = _rest.toString();",
      "216:         VirtualFile baseFile = root.child(base);",
      "218:         if(baseFile.isDirectory()) {",
      "219:             if(zip) {",
      "220:                 rsp.setContentType(\"application/zip\");",
      "222:                 return;",
      "223:             }",
      "224:             if (plain) {",
      "",
      "[Removed Lines]",
      "221:                 zip(rsp.getOutputStream(), baseFile, rest);",
      "",
      "[Added Lines]",
      "222:         if(!ALLOW_SYMLINK_ESCAPE && (root.supportIsDescendant() && !root.isDescendant(base))){",
      "223:             LOGGER.log(Level.WARNING, \"Trying to access a file outside of the directory, target: \"+ base);",
      "224:             rsp.sendError(HttpServletResponse.SC_FORBIDDEN, \"Trying to access a file outside of the directory, target: \" + base);",
      "225:             return;",
      "226:         }",
      "234:                 zip(rsp, root, baseFile, rest);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "246:             }",
      "248:             List<List<Path>> glob = null;",
      "252:                 glob = patternScan(baseFile, rest, createBackRef(restSize));",
      "253:             } else",
      "",
      "[Removed Lines]",
      "250:             if(rest.length()>0) {",
      "",
      "[Added Lines]",
      "262:             boolean patternUsed = rest.length() > 0;",
      "263:             if(patternUsed) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "257:             }",
      "259:             if(glob!=null) {",
      "261:                 req.setAttribute(\"it\", this);",
      "262:                 List<Path> parentPaths = buildParentPath(base,restSize);",
      "263:                 req.setAttribute(\"parentPath\",parentPaths);",
      "264:                 req.setAttribute(\"backPath\", createBackRef(restSize));",
      "265:                 req.setAttribute(\"topPath\", createBackRef(parentPaths.size()+restSize));",
      "267:                 req.setAttribute(\"icon\", icon);",
      "268:                 req.setAttribute(\"path\", path);",
      "269:                 req.setAttribute(\"pattern\",rest);",
      "",
      "[Removed Lines]",
      "266:                 req.setAttribute(\"files\", glob);",
      "",
      "[Added Lines]",
      "273:                 List<List<Path>> filteredGlob = keepReadabilityOnlyOnDescendants(baseFile, patternUsed, glob);",
      "281:                 req.setAttribute(\"files\", filteredGlob);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "319:             rsp.serveFile(req, in, lastModified, -1, length, baseFile.getName() );",
      "320:         }",
      "321:     }",
      "323:     private String getPath(StaplerRequest req) {",
      "324:         String path = req.getRestOfPath();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "338:     private List<List<Path>> keepReadabilityOnlyOnDescendants(VirtualFile root, boolean patternUsed, List<List<Path>> pathFragmentsList){",
      "339:         Stream<List<Path>> pathFragmentsStream = pathFragmentsList.stream().map((List<Path> pathFragments) -> {",
      "340:             List<Path> mappedFragments = new ArrayList<>(pathFragments.size());",
      "341:             String relativePath = \"\";",
      "342:             for (int i = 0; i < pathFragments.size(); i++) {",
      "343:                 Path current = pathFragments.get(i);",
      "344:                 if (i == 0) {",
      "345:                     relativePath = current.title;",
      "346:                 } else {",
      "347:                     relativePath += \"/\" + current.title;",
      "348:                 }",
      "350:                 if (!current.isReadable) {",
      "351:                     if (patternUsed) {",
      "353:                         return null;",
      "354:                     }",
      "355:                     mappedFragments.add(current);",
      "356:                     return mappedFragments;",
      "357:                 } else {",
      "358:                     if (isDescendant(root, relativePath)) {",
      "359:                         mappedFragments.add(current);",
      "360:                     } else {",
      "361:                         if (patternUsed) {",
      "363:                             return null;",
      "364:                         }",
      "365:                         mappedFragments.add(Path.createNotReadableVersionOf(current));",
      "366:                         return mappedFragments;",
      "367:                     }",
      "368:                 }",
      "369:             }",
      "370:             return mappedFragments;",
      "371:         });",
      "373:         if (patternUsed) {",
      "374:             pathFragmentsStream = pathFragmentsStream.filter(Objects::nonNull);",
      "375:         }",
      "377:         return pathFragmentsStream.collect(Collectors.toList());",
      "378:     }",
      "380:     private boolean isDescendant(VirtualFile root, String relativePath){",
      "381:         try {",
      "382:             return ALLOW_SYMLINK_ESCAPE || !root.supportIsDescendant() || root.isDescendant(relativePath);",
      "383:         }",
      "384:         catch (IOException e) {",
      "385:             return false;",
      "386:         }",
      "387:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "352:         return buf.toString();",
      "353:     }",
      "356:         try (ZipOutputStream zos = new ZipOutputStream(outputStream)) {",
      "357:             zos.setEncoding(System.getProperty(\"file.encoding\")); // TODO JENKINS-20663 make this overridable via query parameter",
      "358:             for (String n : dir.list(glob.length() == 0 ? \"**\" : glob)) {",
      "",
      "[Removed Lines]",
      "355:     private static void zip(OutputStream outputStream, VirtualFile dir, String glob) throws IOException {",
      "",
      "[Added Lines]",
      "421:     private static void zip(StaplerResponse rsp, VirtualFile root, VirtualFile dir, String glob) throws IOException, InterruptedException {",
      "422:         OutputStream outputStream = rsp.getOutputStream();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "363:                 } else {",
      "364:                     relativePath = n;",
      "365:                 }",
      "376:                 }",
      "378:             }",
      "379:         }",
      "380:     }",
      "",
      "[Removed Lines]",
      "370:                 ZipEntry e = new ZipEntry(relativePath.replace('\\\\', '/'));",
      "371:                 VirtualFile f = dir.child(n);",
      "372:                 e.setTime(f.lastModified());",
      "373:                 zos.putNextEntry(e);",
      "374:                 try (InputStream in = f.open()) {",
      "375:                     IOUtils.copy(in, zos);",
      "377:                 zos.closeEntry();",
      "",
      "[Added Lines]",
      "434:                 String targetFile = dir.toString().substring(root.toString().length()) + n;",
      "435:                 if (!ALLOW_SYMLINK_ESCAPE && root.supportIsDescendant() && !root.isDescendant(targetFile)) {",
      "436:                     LOGGER.log(Level.INFO, \"Trying to access a file outside of the directory: \" + root + \", illicit target: \" + targetFile);",
      "437:                 } else {",
      "442:                     ZipEntry e = new ZipEntry(relativePath.replace('\\\\', '/'));",
      "443:                     VirtualFile f = dir.child(n);",
      "444:                     e.setTime(f.lastModified());",
      "445:                     zos.putNextEntry(e);",
      "446:                     try (InputStream in = f.open()) {",
      "447:                         IOUtils.copy(in, zos);",
      "448:                     }",
      "449:                     zos.closeEntry();",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "446:             return size;",
      "447:         }",
      "449:         private static final long serialVersionUID = 1L;",
      "450:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "522:         public static Path createNotReadableVersionOf(Path that){",
      "523:             return new Path(that.href, that.title, that.isFolder, that.size, false);",
      "524:         }",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/Run.java||core/src/main/java/hudson/model/Run.java": [
      "File: core/src/main/java/hudson/model/Run.java -> core/src/main/java/hudson/model/Run.java"
    ],
    "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
      "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: import java.nio.file.InvalidPathException;",
      "43: import java.nio.file.LinkOption;",
      "44: import java.util.ArrayList;",
      "45: import java.util.List;",
      "46: import java.util.logging.Level;",
      "47: import java.util.logging.Logger;",
      "48: import javax.annotation.Nonnull;",
      "50: import jenkins.MasterToSlaveFileCallable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import java.util.Deque;",
      "46: import java.util.LinkedList;",
      "53: import org.kohsuke.accmod.Restricted;",
      "54: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "208:         return callable.call();",
      "209:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "220:     @Restricted(NoExternalUse.class)",
      "221:     public boolean supportIsDescendant() {",
      "222:         return false;",
      "223:     }",
      "231:     @Restricted(NoExternalUse.class)",
      "232:     public boolean isDescendant(String childRelativePath) throws IOException {",
      "233:         return false;",
      "234:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "316:             }",
      "317:             return false;",
      "318:         }",
      "319:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "349:         @Override",
      "350:         @Restricted(NoExternalUse.class)",
      "351:         public boolean supportIsDescendant() {",
      "352:             return true;",
      "353:         }",
      "358:         @Override",
      "359:         @Restricted(NoExternalUse.class)",
      "360:         public boolean isDescendant(String potentialChildRelativePath) throws IOException {",
      "361:             if (new File(potentialChildRelativePath).isAbsolute()) {",
      "362:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
      "363:             }",
      "365:             FilePath root = new FilePath(this.root);",
      "366:             String relativePath = computeRelativePathToRoot();",
      "368:             try {",
      "369:                 return root.isDescendant(relativePath + potentialChildRelativePath);",
      "370:             }",
      "371:             catch (InterruptedException e) {",
      "372:                 return false;",
      "373:             }",
      "374:         }",
      "379:         private String computeRelativePathToRoot(){",
      "380:             if (this.root.equals(this.f)) {",
      "381:                 return \"\";",
      "382:             }",
      "384:             Deque<String> relativePath = new LinkedList<>();",
      "385:             File current = this.f;",
      "386:             while (current != null && !current.equals(this.root)) {",
      "387:                 relativePath.addFirst(current.getName());",
      "388:                 current = current.getParentFile();",
      "389:             }",
      "391:             return String.join(File.separator, relativePath) + File.separator;",
      "392:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "326:     public static VirtualFile forFilePath(final FilePath f) {",
      "328:     }",
      "329:     private static final class FilePathVF extends VirtualFile {",
      "330:         private final FilePath f;",
      "332:             this.f = f;",
      "333:         }",
      "334:             @Override public String getName() {",
      "335:                 return f.getName();",
      "",
      "[Removed Lines]",
      "327:         return new FilePathVF(f);",
      "331:         FilePathVF(FilePath f) {",
      "",
      "[Added Lines]",
      "401:         return new FilePathVF(f, f);",
      "405:         private final FilePath root;",
      "406:         FilePathVF(FilePath f, FilePath root) {",
      "408:             this.root = root;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "367:                     List<FilePath> kids = f.list();",
      "368:                     VirtualFile[] vfs = new VirtualFile[kids.size()];",
      "369:                     for (int i = 0; i < vfs.length; i++) {",
      "371:                     }",
      "372:                     return vfs;",
      "373:                 } catch (InterruptedException x) {",
      "",
      "[Removed Lines]",
      "370:                         vfs[i] = forFilePath(kids.get(i));",
      "",
      "[Added Lines]",
      "446:                         vfs[i] = new FilePathVF(kids.get(i), this.root);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "382:                 }",
      "383:             }",
      "384:             @Override public VirtualFile child(String name) {",
      "386:             }",
      "387:             @Override public long length() throws IOException {",
      "388:                 try {",
      "",
      "[Removed Lines]",
      "385:                 return forFilePath(f.child(name));",
      "",
      "[Added Lines]",
      "461:                 return new FilePathVF(f.child(name), this.root);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "419:                     throw (IOException) new IOException(x.toString()).initCause(x);",
      "420:                 }",
      "421:             }",
      "422:     }",
      "423:     private static final class Scanner extends MasterToSlaveFileCallable<String[]> {",
      "424:         private final String glob;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "502:         @Override",
      "503:         @Restricted(NoExternalUse.class)",
      "504:         public boolean supportIsDescendant() {",
      "505:             return true;",
      "506:         }",
      "511:         @Override",
      "512:         @Restricted(NoExternalUse.class)",
      "513:         public boolean isDescendant(String potentialChildRelativePath) throws IOException {",
      "514:             if (new File(potentialChildRelativePath).isAbsolute()) {",
      "515:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
      "516:             }",
      "518:             String relativePath = computeRelativePathToRoot();",
      "520:             try {",
      "521:                 return this.root.isDescendant(relativePath + potentialChildRelativePath);",
      "522:             }",
      "523:             catch (InterruptedException e) {",
      "524:                 return false;",
      "525:             }",
      "526:         }",
      "531:         private String computeRelativePathToRoot(){",
      "532:             if (this.root.equals(this.f)) {",
      "533:                 return \"\";",
      "534:             }",
      "536:             LinkedList<String> relativePath = new LinkedList<>();",
      "537:             FilePath current = this.f;",
      "538:             while (current != null && !current.equals(this.root)) {",
      "539:                 relativePath.addFirst(current.getName());",
      "540:                 current = current.getParent();",
      "541:             }",
      "543:             return String.join(File.separator, relativePath) + File.separator;",
      "544:         }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java": [
      "File: core/src/test/java/hudson/FilePathSEC904Test.java -> core/src/test/java/hudson/FilePathSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson;",
      "26: import org.junit.Rule;",
      "27: import org.junit.Test;",
      "28: import org.junit.rules.TemporaryFolder;",
      "29: import org.jvnet.hudson.test.Issue;",
      "31: import java.io.File;",
      "32: import java.io.IOException;",
      "33: import java.nio.charset.StandardCharsets;",
      "34: import java.util.concurrent.TimeUnit;",
      "36: import static org.junit.Assert.assertFalse;",
      "37: import static org.junit.Assert.assertTrue;",
      "38: import static org.junit.Assume.assumeTrue;",
      "41: public class FilePathSEC904Test {",
      "43:     @Rule",
      "44:     public TemporaryFolder temp = new TemporaryFolder();",
      "46:     @Test",
      "47:     @Issue(\"SECURITY-904\")",
      "48:     public void isDescendant_regularFiles() throws IOException, InterruptedException {",
      "56:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "57:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "58:         FilePath subFolder = workspaceFolder.child(\"sub\");",
      "59:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "61:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "62:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "63:         FilePath subRegularFile = subFolder.child(\"sub-regular.txt\");",
      "64:         subRegularFile.write(\"sub-regular-file\", StandardCharsets.UTF_8.name());",
      "66:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "67:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "69:         assertTrue(workspaceFolder.isDescendant(\".\"));",
      "70:         assertTrue(workspaceFolder.isDescendant(\"regular.txt\"));",
      "71:         assertTrue(workspaceFolder.isDescendant(\"./regular.txt\"));",
      "72:         assertTrue(workspaceFolder.isDescendant(\"sub/sub-regular.txt\"));",
      "73:         assertTrue(workspaceFolder.isDescendant(\"sub//sub-regular.txt\"));",
      "74:         assertTrue(workspaceFolder.isDescendant(\"sub/../sub/sub-regular.txt\"));",
      "75:         assertTrue(workspaceFolder.isDescendant(\"./sub/../sub/sub-regular.txt\"));",
      "78:         assertTrue(workspaceFolder.isDescendant(\"nonexistent.txt\"));",
      "79:         assertTrue(workspaceFolder.isDescendant(\"sub/nonexistent.txt\"));",
      "80:         assertTrue(workspaceFolder.isDescendant(\"nonexistent/nonexistent.txt\"));",
      "81:         assertFalse(workspaceFolder.isDescendant(\"../protected/nonexistent.txt\"));",
      "82:         assertFalse(workspaceFolder.isDescendant(\"../nonexistent/nonexistent.txt\"));",
      "85:         assertFalse(workspaceFolder.isDescendant(\"./../workspace\"));",
      "86:         assertFalse(workspaceFolder.isDescendant(\"./../workspace/\"));",
      "87:         assertFalse(workspaceFolder.isDescendant(\"./../workspace/regular.txt\"));",
      "88:         assertFalse(workspaceFolder.isDescendant(\"../workspace/regular.txt\"));",
      "89:         assertFalse(workspaceFolder.isDescendant(\"./../../root/workspace/regular.txt\"));",
      "92:         assertFalse(workspaceFolder.isDescendant(\"../protected/secret.txt\"));",
      "93:         assertFalse(workspaceFolder.isDescendant(\"./../protected/secret.txt\"));",
      "94:     }",
      "96:     @Test",
      "97:     @Issue(\"SECURITY-904\")",
      "98:     public void isDescendant_regularSymlinks() throws IOException, InterruptedException {",
      "113:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "114:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "115:         FilePath aFolder = workspaceFolder.child(\"a\");",
      "116:         FilePath bFolder = workspaceFolder.child(\"b\");",
      "117:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "119:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "120:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "121:         FilePath aFile = aFolder.child(\"a.txt\");",
      "122:         aFile.write(\"a-file\", StandardCharsets.UTF_8.name());",
      "123:         FilePath bFile = bFolder.child(\"a.txt\");",
      "124:         bFile.write(\"b-file\", StandardCharsets.UTF_8.name());",
      "125:         bFolder.child(\"_a\").symlinkTo(\"../a\", null);",
      "126:         bFolder.child(\"_atxt\").symlinkTo(\"../a/a.txt\", null);",
      "128:         workspaceFolder.child(\"_protected\").symlinkTo(\"../protected\", null);",
      "129:         workspaceFolder.child(\"_nonexistent\").symlinkTo(\"nonexistent\", null);",
      "130:         workspaceFolder.child(\"_nonexistentUp\").symlinkTo(\"../nonexistent\", null);",
      "131:         workspaceFolder.child(\"_secrettxt\").symlinkTo(\"../protected/secret.txt\", null);",
      "133:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "134:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "136:         assertTrue(workspaceFolder.isDescendant(\"regular.txt\"));",
      "137:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent\"));",
      "138:         assertTrue(workspaceFolder.isDescendant(\"a\"));",
      "139:         assertTrue(workspaceFolder.isDescendant(\"a/a.txt\"));",
      "140:         assertTrue(workspaceFolder.isDescendant(\"b\"));",
      "141:         assertTrue(workspaceFolder.isDescendant(\"b/_a/a.txt\"));",
      "142:         assertTrue(workspaceFolder.isDescendant(\"b/_atxt\"));",
      "145:         assertFalse(workspaceFolder.isDescendant(\"_nonexistentUp\"));",
      "147:         assertFalse(workspaceFolder.isDescendant(\"_protected\"));",
      "148:         assertFalse(workspaceFolder.isDescendant(\"_protected/\"));",
      "149:         assertFalse(workspaceFolder.isDescendant(\"_protected/secret.txt\"));",
      "150:         assertFalse(workspaceFolder.isDescendant(\"./_protected/secret.txt\"));",
      "151:         assertFalse(workspaceFolder.isDescendant(\"_secrettxt\"));",
      "152:         assertFalse(workspaceFolder.isDescendant(\"./_secrettxt\"));",
      "153:     }",
      "155:     @Test",
      "156:     @Issue(\"SECURITY-904\")",
      "157:     public void isDescendant_windowsSpecificSymlinks() throws Exception {",
      "158:         assumeTrue(Functions.isWindows());",
      "172:         File root = temp.newFolder(\"root\");",
      "173:         FilePath rootFolder = new FilePath(root);",
      "174:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "175:         FilePath aFolder = workspaceFolder.child(\"a\");",
      "176:         FilePath bFolder = workspaceFolder.child(\"b\");",
      "177:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "179:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "180:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "181:         FilePath aFile = aFolder.child(\"a.txt\");",
      "182:         aFile.write(\"a-file\", StandardCharsets.UTF_8.name());",
      "183:         FilePath bFile = bFolder.child(\"a.txt\");",
      "184:         bFile.write(\"b-file\", StandardCharsets.UTF_8.name());",
      "186:         createJunction(new File(root, \"/workspace/b/_a\"), new File(root, \"/workspace/a\"));",
      "187:         createJunction(new File(root, \"/workspace/_nonexistent\"), new File(root, \"/workspace/nonexistent\"));",
      "188:         createJunction(new File(root, \"/workspace/_nonexistentUp\"), new File(root, \"/nonexistent\"));",
      "189:         createJunction(new File(root, \"/workspace/_protected\"), new File(root, \"/protected\"));",
      "191:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "192:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "194:         assertTrue(workspaceFolder.isDescendant(\"b\"));",
      "195:         assertTrue(workspaceFolder.isDescendant(\"b/_a/a.txt\"));",
      "199:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent\"));",
      "200:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent/\"));",
      "201:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent/..\"));",
      "202:         assertTrue(workspaceFolder.isDescendant(\"_nonexistentUp\"));",
      "205:         assertFalse(workspaceFolder.isDescendant(\"_protected\"));",
      "206:         assertFalse(workspaceFolder.isDescendant(\"_protected/../a\"));",
      "207:     }",
      "209:     private void createJunction(File from, File to) throws Exception {",
      "210:         Process p = Runtime.getRuntime().exec(new String[]{\"cmd\", \"/c\", \"mklink\", \"/J\", from.getAbsolutePath(), to.getAbsolutePath()});",
      "211:         p.waitFor(2, TimeUnit.SECONDS);",
      "212:     }",
      "214:     @Test(expected = IllegalArgumentException.class)",
      "215:     @Issue(\"SECURITY-904\")",
      "216:     public void isDescendant_throwIfParentDoesNotExist_symlink() throws Exception {",
      "217:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "218:         FilePath aFolder = rootFolder.child(\"a\");",
      "219:         aFolder.mkdirs();",
      "220:         FilePath linkToNonexistent = aFolder.child(\"linkToNonexistent\");",
      "221:         linkToNonexistent.symlinkTo(\"__nonexistent__\", null);",
      "223:         linkToNonexistent.isDescendant(\".\");",
      "224:     }",
      "226:     @Test(expected = IllegalArgumentException.class)",
      "227:     @Issue(\"SECURITY-904\")",
      "228:     public void isDescendant_throwIfParentDoesNotExist_directNonexistent() throws Exception {",
      "229:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "230:         FilePath nonexistent = rootFolder.child(\"nonexistent\");",
      "231:         nonexistent.isDescendant(\".\");",
      "232:     }",
      "234:     @Test(expected = IllegalArgumentException.class)",
      "235:     @Issue(\"SECURITY-904\")",
      "236:     public void isDescendant_throwIfAbsolutePathGiven() throws Exception {",
      "237:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "238:         rootFolder.mkdirs();",
      "239:         rootFolder.isDescendant(temp.newFile().getAbsolutePath());",
      "240:     }",
      "242:     @Test",
      "243:     @Issue(\"SECURITY-904\")",
      "244:     public void isDescendant_worksEvenInSymbolicWorkspace() throws Exception {",
      "261:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "262:         FilePath wFolder = rootFolder.child(\"w\");",
      "263:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "264:         FilePath aFolder = workspaceFolder.child(\"a\");",
      "265:         FilePath bFolder = workspaceFolder.child(\"b\");",
      "266:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "268:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "269:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "270:         FilePath aFile = aFolder.child(\"a.txt\");",
      "271:         aFile.write(\"a-file\", StandardCharsets.UTF_8.name());",
      "272:         FilePath bFile = bFolder.child(\"a.txt\");",
      "273:         bFile.write(\"b-file\", StandardCharsets.UTF_8.name());",
      "274:         bFolder.child(\"_a\").symlinkTo(\"../a\", null);",
      "275:         bFolder.child(\"_atxt\").symlinkTo(\"../a/a.txt\", null);",
      "277:         workspaceFolder.child(\"_protected\").symlinkTo(\"../protected\", null);",
      "278:         workspaceFolder.child(\"_protected2\").symlinkTo(\"../../protected\", null);",
      "279:         workspaceFolder.child(\"_nonexistent\").symlinkTo(\"nonexistent\", null);",
      "280:         workspaceFolder.child(\"_nonexistentUp\").symlinkTo(\"../nonexistent\", null);",
      "281:         workspaceFolder.child(\"_secrettxt\").symlinkTo(\"../protected/secret.txt\", null);",
      "282:         workspaceFolder.child(\"_secrettxt2\").symlinkTo(\"../../protected/secret.txt\", null);",
      "284:         wFolder.mkdirs();",
      "285:         FilePath symbolicWorkspace = wFolder.child(\"_w\");",
      "286:         symbolicWorkspace.symlinkTo(\"../workspace\", null);",
      "288:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "289:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "291:         assertTrue(symbolicWorkspace.isDescendant(\"regular.txt\"));",
      "292:         assertTrue(symbolicWorkspace.isDescendant(\"_nonexistent\"));",
      "293:         assertTrue(symbolicWorkspace.isDescendant(\"a\"));",
      "294:         assertTrue(symbolicWorkspace.isDescendant(\"a/a.txt\"));",
      "295:         assertTrue(symbolicWorkspace.isDescendant(\"b\"));",
      "296:         assertTrue(symbolicWorkspace.isDescendant(\"b/_a/a.txt\"));",
      "297:         assertTrue(symbolicWorkspace.isDescendant(\"b/_atxt\"));",
      "300:         assertFalse(symbolicWorkspace.isDescendant(\"_nonexistentUp\"));",
      "302:         assertFalse(symbolicWorkspace.isDescendant(\"_protected\"));",
      "303:         assertFalse(symbolicWorkspace.isDescendant(\"_protected/\"));",
      "304:         assertFalse(symbolicWorkspace.isDescendant(\"_protected/secret.txt\"));",
      "305:         assertFalse(symbolicWorkspace.isDescendant(\"./_protected/secret.txt\"));",
      "306:         assertFalse(symbolicWorkspace.isDescendant(\"_protected2\"));",
      "307:         assertFalse(symbolicWorkspace.isDescendant(\"_protected2/secret.txt\"));",
      "308:         assertFalse(symbolicWorkspace.isDescendant(\"_secrettxt\"));",
      "309:         assertFalse(symbolicWorkspace.isDescendant(\"./_secrettxt\"));",
      "310:         assertFalse(symbolicWorkspace.isDescendant(\"_secrettxt2\"));",
      "311:     }",
      "312: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/UtilSEC904Test.java||core/src/test/java/hudson/UtilSEC904Test.java": [
      "File: core/src/test/java/hudson/UtilSEC904Test.java -> core/src/test/java/hudson/UtilSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package hudson;",
      "27: import hudson.model.TaskListener;",
      "28: import org.apache.commons.io.FileUtils;",
      "29: import org.junit.Rule;",
      "30: import org.junit.Test;",
      "31: import org.junit.rules.TemporaryFolder;",
      "33: import java.io.File;",
      "34: import java.nio.file.Files;",
      "36: import static org.junit.Assert.assertEquals;",
      "37: import static org.junit.Assert.assertNull;",
      "38: import static org.junit.Assert.assertTrue;",
      "44: public class UtilSEC904Test {",
      "46:     @Rule public TemporaryFolder tmp = new TemporaryFolder();",
      "48:     @Test",
      "49:     public void resolveSymlinkToFile() throws Exception {",
      "57:         File root = tmp.getRoot();",
      "58:         File a = new File(root, \"a\");",
      "59:         File aa = new File(a, \"aa\");",
      "60:         aa.mkdirs();",
      "61:         File aaTxt = new File(aa, \"aa.txt\");",
      "62:         FileUtils.write(aaTxt, \"aa\");",
      "64:         File b = new File(root, \"b\");",
      "65:         b.mkdir();",
      "67:         File _a = new File(b, \"_a\");",
      "68:         Util.createSymlink(_a.getParentFile(), a.getAbsolutePath(), _a.getName(), TaskListener.NULL);",
      "70:         File _b = new File(a, \"_b\");",
      "71:         Util.createSymlink(_b.getParentFile(), b.getAbsolutePath(), _b.getName(), TaskListener.NULL);",
      "73:         assertTrue(Files.isSymbolicLink(_a.toPath()));",
      "74:         assertTrue(Files.isSymbolicLink(_b.toPath()));",
      "77:         assertEquals(Util.resolveSymlinkToFile(_a), a);",
      "78:         assertEquals(Util.resolveSymlinkToFile(_b), b);",
      "81:         assertNull(Util.resolveSymlinkToFile(new File(_a, \"aa\")));",
      "82:         assertNull(Util.resolveSymlinkToFile(new File(_a, \"aa/aa.txt\")));",
      "83:     }",
      "84: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java": [
      "File: core/src/test/java/jenkins/util/VirtualFileSEC904Test.java -> core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package jenkins.util;",
      "27: import hudson.FilePath;",
      "28: import hudson.model.TaskListener;",
      "29: import org.apache.commons.io.FileUtils;",
      "30: import org.junit.Rule;",
      "31: import org.junit.Test;",
      "32: import org.junit.rules.ExpectedException;",
      "33: import org.junit.rules.TemporaryFolder;",
      "34: import org.jvnet.hudson.test.Issue;",
      "36: import java.io.File;",
      "38: import static org.junit.Assert.assertFalse;",
      "39: import static org.junit.Assert.assertTrue;",
      "40: import static org.junit.Assert.fail;",
      "43: public class VirtualFileSEC904Test {",
      "45:     @Rule",
      "46:     public TemporaryFolder tmp = new TemporaryFolder();",
      "61:     private void prepareFileStructureForIsDescendant() throws Exception {",
      "62:         File root = tmp.getRoot();",
      "63:         File a = new File(root, \"a\");",
      "64:         File aa = new File(a, \"aa\");",
      "65:         File aaa = new File(aa, \"aaa\");",
      "66:         aaa.mkdirs();",
      "67:         File aaTxt = new File(aa, \"aa.txt\");",
      "68:         FileUtils.write(aaTxt, \"aa\");",
      "70:         File ab = new File(a, \"ab\");",
      "71:         ab.mkdirs();",
      "72:         File abTxt = new File(ab, \"ab.txt\");",
      "73:         FileUtils.write(abTxt, \"ab\");",
      "75:         File b = new File(root, \"b\");",
      "77:         File ba = new File(b, \"ba\");",
      "78:         ba.mkdirs();",
      "79:         File baTxt = new File(ba, \"ba.txt\");",
      "80:         FileUtils.write(baTxt, \"ba\");",
      "82:         File _a = new File(b, \"_a\");",
      "83:         new FilePath(_a).symlinkTo(a.getAbsolutePath(), TaskListener.NULL);",
      "85:         File _b = new File(a, \"_b\");",
      "86:         new FilePath(_b).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);",
      "87:         File _b2 = new File(aaa, \"_b2\");",
      "88:         new FilePath(_b2).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);",
      "89:     }",
      "91:     @Issue(\"SECURITY-904\")",
      "92:     @Test public void forFile_isDescendant() throws Exception {",
      "93:         this.prepareFileStructureForIsDescendant();",
      "95:         File root = tmp.getRoot();",
      "96:         File a = new File(root, \"a\");",
      "97:         File aa = new File(a, \"aa\");",
      "98:         VirtualFile virtualRoot = VirtualFile.forFile(root);",
      "100:         VirtualFile virtualRootChildA = virtualRoot.child(\"a\");",
      "101:         VirtualFile virtualFromA = VirtualFile.forFile(a);",
      "103:         checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());",
      "104:     }",
      "106:     @Test",
      "107:     @Issue(\"SECURITY-904\")",
      "108:     public void forFilePath_isDescendant() throws Exception {",
      "109:         this.prepareFileStructureForIsDescendant();",
      "111:         File root = tmp.getRoot();",
      "112:         File a = new File(root, \"a\");",
      "113:         File aa = new File(a, \"aa\");",
      "114:         VirtualFile virtualRoot = VirtualFile.forFilePath(new FilePath(root));",
      "116:         VirtualFile virtualRootChildA = virtualRoot.child(\"a\");",
      "117:         VirtualFile virtualFromA = VirtualFile.forFilePath(new FilePath(a));",
      "119:         checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());",
      "120:     }",
      "122:     private void checkCommonAssertionForIsDescendant(VirtualFile virtualRoot, VirtualFile virtualRootChildA, VirtualFile virtualFromA, String absolutePath) throws Exception {",
      "123:         try {",
      "124:             virtualRootChildA.isDescendant(absolutePath);",
      "125:             fail(\"isDescendant should have refused the absolute path\");",
      "126:         } catch (IllegalArgumentException e) {}",
      "128:         assertTrue(virtualRootChildA.isDescendant(\"aa\"));",
      "129:         assertTrue(virtualRootChildA.isDescendant(\"aa/aa.txt\"));",
      "130:         assertTrue(virtualRootChildA.isDescendant(\"aa\\\\aa.txt\"));",
      "131:         assertTrue(virtualRootChildA.isDescendant(\"ab\"));",
      "132:         assertTrue(virtualRootChildA.isDescendant(\"ab/ab.txt\"));",
      "133:         assertTrue(virtualRootChildA.isDescendant(\"ab//ab.txt\"));",
      "134:         assertTrue(virtualRootChildA.isDescendant(\"ab/nonExistingFile.txt\"));",
      "135:         assertTrue(virtualRootChildA.isDescendant(\"nonExistingFolder\"));",
      "136:         assertTrue(virtualRootChildA.isDescendant(\"nonExistingFolder/nonExistingFile.txt\"));",
      "138:         assertTrue(virtualRootChildA.isDescendant(\"_b\"));",
      "139:         assertTrue(virtualRootChildA.isDescendant(\"_b/ba\"));",
      "140:         assertTrue(virtualRootChildA.isDescendant(\"_b/ba/ba.txt\"));",
      "141:         assertTrue(virtualRootChildA.isDescendant(\"aa/aaa/_b2\"));",
      "142:         assertTrue(virtualRootChildA.isDescendant(\"aa/aaa/_b2/ba\"));",
      "143:         assertTrue(virtualRootChildA.isDescendant(\"aa/aaa/_b2/ba/ba.txt\"));",
      "146:         assertTrue(virtualRootChildA.isDescendant(\"_b/ba/ba-unexistingFile.txt\"));",
      "149:         assertTrue(virtualRootChildA.isDescendant(\"_b/_a\"));",
      "150:         assertTrue(virtualRootChildA.isDescendant(\"_b/_a/aa\"));",
      "151:         assertTrue(virtualRootChildA.isDescendant(\"_b/_a/aa/aa.txt\"));",
      "153:         assertTrue(virtualFromA.isDescendant(\"aa\"));",
      "154:         assertFalse(virtualFromA.isDescendant(\"_b\"));",
      "155:         assertFalse(virtualFromA.isDescendant(\"_b/ba/ba-unexistingFile.txt\"));",
      "156:         assertFalse(virtualFromA.isDescendant(\"_b/_a\"));",
      "157:         assertFalse(virtualFromA.isDescendant(\"_b/_a/aa\"));",
      "158:         assertFalse(virtualFromA.isDescendant(\"_b/_a/aa/aa.txt\"));",
      "159:         assertFalse(virtualFromA.isDescendant(\"aa/aaa/_b2\"));",
      "160:         assertFalse(virtualFromA.isDescendant(\"aa/aaa/_b2/ba\"));",
      "161:         assertFalse(virtualFromA.isDescendant(\"aa/aaa/_b2/ba/ba.txt\"));",
      "163:         assertTrue(virtualRoot.isDescendant(\"aa\"));",
      "164:         assertTrue(virtualRoot.isDescendant(\"aa/aa.txt\"));",
      "165:         assertTrue(virtualRoot.isDescendant(\"ab\"));",
      "166:         assertTrue(virtualRoot.isDescendant(\"ab/ab.txt\"));",
      "167:         assertTrue(virtualRoot.isDescendant(\"ab/nonExistingFile.txt\"));",
      "168:         assertTrue(virtualRoot.isDescendant(\"nonExistingFolder\"));",
      "169:         assertTrue(virtualRoot.isDescendant(\"nonExistingFolder/nonExistingFile.txt\"));",
      "171:         assertTrue(virtualRoot.isDescendant(\"_b\"));",
      "172:         assertTrue(virtualRoot.isDescendant(\"_b/ba\"));",
      "173:         assertTrue(virtualRoot.isDescendant(\"_b/ba/ba.txt\"));",
      "174:         assertTrue(virtualRoot.isDescendant(\"_b/_a\"));",
      "175:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa\"));",
      "176:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/\"));",
      "177:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/../ab/ab.txt\"));",
      "178:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/aa.txt\"));",
      "179:     }",
      "180: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java": [
      "File: test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java -> test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import com.gargoylesoftware.htmlunit.UnexpectedPage;",
      "28: import hudson.FilePath;",
      "29: import hudson.Functions;",
      "30: import hudson.tasks.BatchFile;",
      "31: import hudson.tasks.Shell;",
      "32: import org.apache.commons.io.FileUtils;",
      "33: import org.apache.commons.io.IOUtils;",
      "34: import org.junit.Assume;",
      "35: import org.junit.Rule;",
      "36: import org.junit.Test;",
      "37: import org.jvnet.hudson.test.Issue;",
      "38: import org.jvnet.hudson.test.JenkinsRule;",
      "40: import java.io.File;",
      "41: import java.io.IOException;",
      "42: import java.io.InputStream;",
      "43: import java.io.OutputStream;",
      "44: import java.net.HttpURLConnection;",
      "45: import java.net.URI;",
      "46: import java.net.URISyntaxException;",
      "47: import java.net.URL;",
      "48: import java.nio.file.Files;",
      "49: import java.util.List;",
      "50: import java.util.stream.Collectors;",
      "51: import java.util.zip.ZipEntry;",
      "52: import java.util.zip.ZipFile;",
      "54: import static org.hamcrest.CoreMatchers.allOf;",
      "55: import static org.hamcrest.CoreMatchers.containsString;",
      "56: import static org.hamcrest.CoreMatchers.equalTo;",
      "57: import static org.hamcrest.CoreMatchers.not;",
      "58: import static org.hamcrest.Matchers.contains;",
      "59: import static org.hamcrest.Matchers.containsInAnyOrder;",
      "60: import static org.hamcrest.Matchers.hasSize;",
      "61: import static org.junit.Assert.assertEquals;",
      "62: import static org.junit.Assert.assertThat;",
      "63: import static org.junit.Assert.fail;",
      "65: public class DirectoryBrowserSupportSEC904Test {",
      "67:     @Rule",
      "68:     public JenkinsRule j = new JenkinsRule();",
      "70:     @Test",
      "71:     @Issue(\"SECURITY-904\")",
      "72:     public void symlink_outsideWorkspace_areNotAllowed() throws Exception {",
      "73:         FreeStyleProject p = j.createFreeStyleProject();",
      "75:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "76:         File secretTarget = new File(secretsFolder, \"goal.txt\");",
      "77:         String secretContent = \"secret\";",
      "78:         FileUtils.write(secretTarget, secretContent);",
      "95:         if (Functions.isWindows()) {",
      "99:             String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");",
      "100:             p.getBuildersList().add(new BatchFile(script));",
      "101:         } else {",
      "102:             String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");",
      "103:             p.getBuildersList().add(new Shell(script));",
      "104:         }",
      "106:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "108:         JenkinsRule.WebClient wc = j.createWebClient();",
      "109:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "110:         { // workspace root must be reachable (regular case)",
      "111:             Page page = wc.goTo(p.getUrl() + \"ws/\", null);",
      "112:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "113:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "114:             assertThat(workspaceContent, allOf(",
      "115:                     containsString(\"public1.key\"),",
      "116:                     containsString(\"intermediateFolder\"),",
      "117:                     containsString(\"to_secrets1\"),",
      "118:                     containsString(\"to_secrets_goal1\"),",
      "119:                     not(containsString(\"to_secrets2\")),",
      "120:                     not(containsString(\"to_secrets_goal2\"))",
      "121:             ));",
      "122:         }",
      "123:         { // to_secrets1 not reachable",
      "124:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);",
      "125:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "126:         }",
      "127:         { // to_secrets_goal1 not reachable",
      "128:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);",
      "129:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "130:         }",
      "131:         { // intermediateFolder must be reachable (regular case)",
      "132:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);",
      "133:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "134:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "135:             assertThat(workspaceContent, allOf(",
      "136:                     not(containsString(\"to_secrets1\")),",
      "137:                     not(containsString(\"to_secrets_goal1\")),",
      "138:                     containsString(\"to_secrets2\"),",
      "139:                     containsString(\"to_secrets_goal2\")",
      "140:             ));",
      "141:         }",
      "142:         { // to_secrets2 not reachable",
      "143:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);",
      "144:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "145:         }",
      "146:         { // using symbolic in the intermediate path",
      "147:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);",
      "148:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "149:         }",
      "150:         { // to_secrets_goal2 not reachable",
      "151:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);",
      "152:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "153:         }",
      "156:         { // the pattern allow us to search inside the files / folders,",
      "158:             Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);",
      "159:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "160:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "161:             assertThat(workspaceContent, allOf(",
      "162:                     not(containsString(\"master.key\")),",
      "163:                     containsString(\"public1.key\"),",
      "164:                     containsString(\"public2.key\")",
      "165:             ));",
      "166:         }",
      "169:         { // all the outside folders / files are not included in the zip",
      "170:             Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "171:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "173:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "174:             assertThat(entryNames, containsInAnyOrder(",
      "175:                     p.getName() + \"/intermediateFolder/public2.key\",",
      "176:                     p.getName() + \"/public1.key\"",
      "177:             ));",
      "178:         }",
      "179:         { // all the outside folders / files are not included in the zip",
      "180:             Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);",
      "181:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "183:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "184:             assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));",
      "185:         }",
      "186:     }",
      "192:     @Test",
      "193:     @Issue(\"SECURITY-904\")",
      "194:     public void symlink_avoidLeakingInformation_aboutIllegalFolder() throws Exception {",
      "195:         FreeStyleProject p = j.createFreeStyleProject();",
      "197:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "198:         File secretTarget = new File(secretsFolder, \"goal.txt\");",
      "199:         String secretContent = \"secret\";",
      "200:         FileUtils.write(secretTarget, secretContent);",
      "201:         FileUtils.write(new File(secretsFolder, \"public_fake1.key\"), secretContent);",
      "202:         FileUtils.write(new File(secretsFolder, \"public_fake2.key\"), secretContent);",
      "203:         FileUtils.write(new File(secretsFolder, \"public_fake3.key\"), secretContent);",
      "223:         if (Functions.isWindows()) {",
      "227:             String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");",
      "228:             p.getBuildersList().add(new BatchFile(script));",
      "229:         } else {",
      "230:             String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");",
      "231:             p.getBuildersList().add(new Shell(script));",
      "232:         }",
      "234:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "236:         JenkinsRule.WebClient wc = j.createWebClient();",
      "237:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "242:         { // without the patch the otherFolder and to_secrets[1,2,3] will appear in the results (once)",
      "243:             Page page = wc.goTo(p.getUrl() + \"ws/**/goal.txt\", null);",
      "244:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "245:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "246:             assertThat(workspaceContent, allOf(",
      "248:                     not(containsString(\"public1.key\")),",
      "249:                     not(containsString(\"public2.key\")),",
      "251:                     not(containsString(\"to_secrets\")),",
      "252:                     not(containsString(\"to_secrets2\")),",
      "253:                     not(containsString(\"to_secrets3\"))",
      "254:             ));",
      "255:         }",
      "256:         { // without the patch the otherFolder and to_secrets[1,2,3] will appear in the results (3 times each)",
      "257:             Page page = wc.goTo(p.getUrl() + \"ws/**/public*.key\", null);",
      "258:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "259:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "260:             assertThat(workspaceContent, allOf(",
      "261:                     containsString(\"public1.key\"),",
      "262:                     containsString(\"public2.key\"),",
      "264:                     not(containsString(\"otherFolder\")),",
      "265:                     not(containsString(\"to_secrets\")),",
      "266:                     not(containsString(\"to_secrets2\")),",
      "267:                     not(containsString(\"to_secrets3\"))",
      "268:             ));",
      "269:         }",
      "270:     }",
      "274:     @Test",
      "275:     @Issue(\"SECURITY-904\")",
      "276:     public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {",
      "277:         Assume.assumeTrue(Functions.isWindows());",
      "279:         FreeStyleProject p = j.createFreeStyleProject();",
      "281:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "282:         File secretTarget = new File(secretsFolder, \"goal.txt\");",
      "283:         String secretContent = \"secret\";",
      "284:         FileUtils.write(secretTarget, secretContent);",
      "304:         String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");",
      "305:         p.getBuildersList().add(new BatchFile(script));",
      "307:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "309:         JenkinsRule.WebClient wc = j.createWebClient();",
      "310:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "311:         { // workspace root must be reachable (regular case)",
      "312:             Page page = wc.goTo(p.getUrl() + \"ws/\", null);",
      "313:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "314:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "315:             assertThat(workspaceContent, allOf(",
      "316:                     containsString(\"public1.key\"),",
      "317:                     containsString(\"intermediateFolder\"),",
      "318:                     containsString(\"to_secrets1j\"),",
      "319:                     containsString(\"to_secrets1s\"),",
      "320:                     containsString(\"to_secrets_goal1\"),",
      "321:                     not(containsString(\"to_secrets2\")),",
      "322:                     not(containsString(\"to_secrets_goal2\"))",
      "323:             ));",
      "324:         }",
      "325:         { // to_secrets1s not reachable",
      "326:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);",
      "327:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "328:         }",
      "329:         { // to_secrets1j not reachable",
      "330:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);",
      "331:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "332:         }",
      "333:         { // to_secrets_goal1 not reachable",
      "334:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);",
      "335:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "336:         }",
      "337:         { // intermediateFolder must be reachable (regular case)",
      "338:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);",
      "339:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "340:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "341:             assertThat(workspaceContent, allOf(",
      "342:                     not(containsString(\"to_secrets1\")),",
      "343:                     not(containsString(\"to_secrets_goal1\")),",
      "344:                     containsString(\"to_secrets2s\"),",
      "345:                     containsString(\"to_secrets2j\"),",
      "346:                     containsString(\"to_secrets_goal2\")",
      "347:             ));",
      "348:         }",
      "349:         { // to_secrets2s not reachable",
      "350:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);",
      "351:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "352:         }",
      "353:         { // to_secrets2j not reachable",
      "354:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);",
      "355:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "356:         }",
      "357:         { // using symbolic in the intermediate path",
      "358:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);",
      "359:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "360:         }",
      "361:         { // using symbolic in the intermediate path",
      "362:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);",
      "363:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "364:         }",
      "365:         { // to_secrets_goal2 not reachable",
      "366:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);",
      "367:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "368:         }",
      "371:         { // the pattern allow us to search inside the files / folders,",
      "373:             Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);",
      "374:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "375:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "376:             assertThat(workspaceContent, allOf(",
      "377:                     not(containsString(\"master.key\")),",
      "378:                     containsString(\"public1.key\"),",
      "379:                     containsString(\"public2.key\"),",
      "380:                     containsString(\"intermediateFolder\"),",
      "381:                     not(containsString(\"otherFolder\")),",
      "382:                     not(containsString(\"to_secrets3j\")),",
      "383:                     not(containsString(\"to_secrets3s\")),",
      "384:                     not(containsString(\"to_secrets2j\")),",
      "385:                     not(containsString(\"to_secrets2s\")),",
      "386:                     not(containsString(\"to_secrets1j\")),",
      "387:                     not(containsString(\"to_secrets1s\"))",
      "388:             ));",
      "389:         }",
      "392:         { // all the outside folders / files are not included in the zip",
      "393:             Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "394:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "396:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "397:             assertThat(entryNames, containsInAnyOrder(",
      "398:                     p.getName() + \"/intermediateFolder/public2.key\",",
      "399:                     p.getName() + \"/public1.key\"",
      "400:             ));",
      "401:         }",
      "402:         { // all the outside folders / files are not included in the zip",
      "403:             Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);",
      "404:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "406:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "407:             assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));",
      "408:         }",
      "409:     }",
      "411:     private List<String> getListOfEntriesInDownloadedZip(UnexpectedPage zipPage) throws Exception {",
      "412:         List<String> result;",
      "414:         File zipfile = null;",
      "415:         ZipFile readzip = null;",
      "416:         try {",
      "417:             zipfile = download(zipPage);",
      "419:             readzip = new ZipFile(zipfile);",
      "420:             result = readzip.stream().map(ZipEntry::getName).collect(Collectors.toList());",
      "421:         }",
      "422:         finally {",
      "423:             if (readzip != null) {",
      "424:                 readzip.close();",
      "425:             }",
      "426:             if (zipfile != null) {",
      "427:                 zipfile.delete();",
      "428:             }",
      "429:         }",
      "430:         return result;",
      "431:     }",
      "434:     private File download(UnexpectedPage page) throws IOException {",
      "435:         File file = File.createTempFile(\"DirectoryBrowserSupport\", \"zipDownload\");",
      "436:         file.delete();",
      "437:         try (InputStream is = page.getInputStream();",
      "438:              OutputStream os = Files.newOutputStream(file.toPath())) {",
      "439:             IOUtils.copy(is, os);",
      "440:         }",
      "442:         return file;",
      "443:     }",
      "445:     @Test",
      "446:     @Issue(\"SECURITY-904\")",
      "447:     public void directSymlink_forTestingZip() throws Exception {",
      "448:         FreeStyleProject p = j.createFreeStyleProject();",
      "450:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "451:         FilePath ws = p.getSomeWorkspace();",
      "461:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "462:         FilePath a1 = ws.child(\"a1\");",
      "463:         a1.mkdirs();",
      "464:         a1.child(\"to_secrets1\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);",
      "465:         FilePath b2 = ws.child(\"b1\").child(\"b2\");",
      "466:         b2.mkdirs();",
      "467:         b2.child(\"to_secrets2\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);",
      "468:         FilePath c3 = ws.child(\"c1\").child(\"c2\").child(\"c3\");",
      "469:         c3.mkdirs();",
      "470:         c3.child(\"to_secrets3\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);",
      "472:         JenkinsRule.WebClient wc = j.createWebClient();",
      "473:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "474:         {",
      "475:             Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "476:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "478:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "479:             assertThat(entryNames, hasSize(0));",
      "480:         }",
      "481:         {",
      "482:             Page zipPage = wc.goTo(p.getUrl() + \"ws/a1/*zip*/a1.zip\", null);",
      "483:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "485:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "486:             assertThat(entryNames, hasSize(0));",
      "487:         }",
      "488:         {",
      "489:             Page zipPage = wc.goTo(p.getUrl() + \"ws/b1/b2/*zip*/b2.zip\", null);",
      "490:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "492:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "493:             assertThat(entryNames, hasSize(0));",
      "494:         }",
      "495:         {",
      "496:             Page zipPage = wc.goTo(p.getUrl() + \"ws/c1/c2/c3/*zip*/c3.zip\", null);",
      "497:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "499:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "500:             assertThat(entryNames, hasSize(0));",
      "501:         }",
      "502:     }",
      "504:     @Test",
      "505:     @Issue(\"SECURITY-904\")",
      "506:     public void symlink_insideWorkspace_areStillAllowed() throws Exception {",
      "507:         FreeStyleProject p = j.createFreeStyleProject();",
      "510:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "512:         File jobWorkspaceFolder = new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);",
      "513:         File folderInsideWorkspace = new File(jobWorkspaceFolder, \"asset\");",
      "514:         folderInsideWorkspace.mkdir();",
      "515:         File fileTarget = new File(folderInsideWorkspace, \"goal.txt\");",
      "516:         String publicContent = \"not-secret\";",
      "517:         FileUtils.write(fileTarget, publicContent);",
      "529:         if (Functions.isWindows()) {",
      "530:             String script = loadContentFromResource(\"insideWorkspaceStructure.bat\");",
      "531:             p.getBuildersList().add(new BatchFile(script));",
      "532:         } else {",
      "533:             String script = loadContentFromResource(\"insideWorkspaceStructure.sh\");",
      "534:             p.getBuildersList().add(new Shell(script));",
      "535:         }",
      "537:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "539:         JenkinsRule.WebClient wc = j.createWebClient();",
      "540:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "541:         { // workspace root must be reachable (regular case)",
      "542:             Page page = wc.goTo(p.getUrl() + \"ws/\", null);",
      "543:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "544:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "545:             assertThat(workspaceContent, allOf(",
      "546:                     containsString(\"asset\"),",
      "547:                     containsString(\"to_internal1\"),",
      "548:                     containsString(\"to_internal_goal1\"),",
      "549:                     containsString(\"intermediateFolder\"),",
      "550:                     not(containsString(\"to_internal2\")),",
      "551:                     not(containsString(\"to_internal_goal2\")",
      "552:             )));",
      "553:         }",
      "554:         { // to_internal1 reachable",
      "555:             Page page = wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);",
      "556:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "557:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "558:             assertThat(workspaceContent, containsString(\"goal.txt\"));",
      "559:         }",
      "560:         { // to_internal_goal1 reachable",
      "561:             Page page = wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);",
      "562:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "563:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "564:             assertThat(workspaceContent, containsString(publicContent));",
      "565:         }",
      "566:         { // to_internal2 reachable",
      "567:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);",
      "568:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "569:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "570:             assertThat(workspaceContent, containsString(\"goal.txt\"));",
      "571:         }",
      "572:         { // to_internal_goal2 reachable",
      "573:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);",
      "574:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "575:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "576:             assertThat(workspaceContent, containsString(publicContent));",
      "577:         }",
      "578:         { // direct to goal",
      "579:             Page page = wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);",
      "580:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "581:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "582:             assertThat(workspaceContent, containsString(publicContent));",
      "583:         }",
      "584:         { // the zip will only contain folder from inside the workspace",
      "585:             Page page = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "586:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "587:         }",
      "588:         { // the zip will only contain folder from inside the workspace",
      "589:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);",
      "590:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "591:         }",
      "592:         { // the zip will only contain folder from inside the workspace",
      "593:             Page page = wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);",
      "594:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "595:         }",
      "596:     }",
      "598:     private String loadContentFromResource(String fileNameInResources) throws IOException, URISyntaxException {",
      "599:         URL resourceUrl = DirectoryBrowserSupportSEC904Test.class.getResource(DirectoryBrowserSupportSEC904Test.class.getSimpleName() + \"/\" + fileNameInResources);",
      "600:         if (resourceUrl == null) {",
      "601:             fail(\"The resource with fileName \" + fileNameInResources + \" is not present in the resources of the test\");",
      "602:         }",
      "603:         File resourceFile = new File(resourceUrl.toURI());",
      "604:         return FileUtils.readFileToString(resourceFile);",
      "605:     }",
      "606: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java": [
      "File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java -> test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "163:         assertFalse(kids[0].isDirectory());",
      "164:         assertFalse(kids[0].isFile());",
      "165:         assertFalse(kids[0].exists());",
      "167:     }",
      "169:     static class CreateArtifact extends TestBuilder {",
      "",
      "[Removed Lines]",
      "166:         j.createWebClient().assertFails(b.getUrl() + \"artifact/hack\", HttpURLConnection.HTTP_NOT_FOUND);",
      "",
      "[Added Lines]",
      "166:         j.createWebClient().assertFails(b.getUrl() + \"artifact/hack\", HttpURLConnection.HTTP_FORBIDDEN);",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: mklink /D to_internal1 .\\asset",
      "2: mklink to_internal_goal1 .\\asset\\goal.txt",
      "4: mkdir intermediateFolder",
      "5: cd intermediateFolder",
      "6: mklink /D to_internal2 ..\\asset",
      "7: mklink to_internal_goal2 ..\\asset\\goal.txt",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/bin/sh",
      "2: ln -s ./asset to_internal1",
      "3: ln -s ./asset/goal.txt to_internal_goal1",
      "5: mkdir intermediateFolder",
      "6: cd intermediateFolder",
      "7: ln -s ../asset to_internal2",
      "8: ln -s ../asset/goal.txt to_internal_goal2",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: echo public-1 > public1.key",
      "2: mklink /D to_secrets1 ..\\..\\secrets",
      "3: mklink to_secrets_goal1 ..\\..\\secrets\\goal.txt",
      "5: mkdir intermediateFolder",
      "6: cd intermediateFolder",
      "7: echo public-2 > public2.key",
      "8: mklink /D to_secrets2 ..\\..\\..\\secrets",
      "9: mklink to_secrets_goal2 ..\\..\\..\\secrets\\goal.txt",
      "11: mkdir otherFolder",
      "12: cd otherFolder",
      "13: mklink /D to_secrets3 ..\\..\\..\\..\\secrets",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/bin/sh",
      "2: echo 'public-1' > public1.key",
      "3: ln -s ../../secrets to_secrets1",
      "4: ln -s ../../secrets/goal.txt to_secrets_goal1",
      "6: mkdir intermediateFolder",
      "7: cd intermediateFolder",
      "8: echo 'public-2' > public2.key",
      "9: ln -s ../../../secrets to_secrets2",
      "10: ln -s ../../../secrets/goal.txt to_secrets_goal2",
      "12: mkdir otherFolder",
      "13: cd otherFolder",
      "14: ln -s ../../../../secrets to_secrets3",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: echo public-1 > public1.key",
      "2: mklink /D to_secrets1s ..\\..\\secrets",
      "3: mklink /J to_secrets1j ..\\..\\secrets",
      "4: mklink to_secrets_goal1 ..\\..\\secrets\\goal.txt",
      "6: mkdir intermediateFolder",
      "7: cd intermediateFolder",
      "8: echo public-2 > public2.key",
      "9: mklink /D to_secrets2s ..\\..\\..\\secrets",
      "10: mklink /J to_secrets2j ..\\..\\..\\secrets",
      "11: mklink to_secrets_goal2 ..\\..\\..\\secrets\\goal.txt",
      "13: mkdir otherFolder",
      "14: cd otherFolder",
      "15: mklink /D to_secrets3s ..\\..\\..\\..\\secrets",
      "16: mklink /J to_secrets3j ..\\..\\..\\..\\secrets",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dca272db6ba41f6c2fc9357fa97be6468ec3b5a9",
      "candidate_info": {
        "commit_hash": "dca272db6ba41f6c2fc9357fa97be6468ec3b5a9",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/dca272db6ba41f6c2fc9357fa97be6468ec3b5a9",
        "files": [
          "core/src/main/java/hudson/FilePath.java"
        ],
        "message": "Removing gratuitous catch of InvalidPathException.",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: import java.net.URLConnection;",
          "82: import java.nio.file.FileSystems;",
          "83: import java.nio.file.Files;",
          "85: import java.nio.file.NoSuchFileException;",
          "86: import java.nio.file.Path;",
          "87: import java.nio.file.LinkOption;",
          "",
          "[Removed Lines]",
          "84: import java.nio.file.InvalidPathException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3316:                 }",
          "3317:             }",
          "",
          "[Removed Lines]",
          "3309:                     try {",
          "3310:                         Path child = currentFileAbsolutePath.normalize();",
          "3311:                         Path parent = parentAbsolutePath.normalize();",
          "3312:                         return child.startsWith(parent);",
          "3313:                     } catch (InvalidPathException e2) { // TODO which method would throw this?",
          "3314:                         throw new IOException(e2);",
          "3315:                     }",
          "",
          "[Added Lines]",
          "3308:                     Path child = currentFileAbsolutePath.normalize();",
          "3309:                     Path parent = parentAbsolutePath.normalize();",
          "3310:                     return child.startsWith(parent);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff52beb5e263d824f85baf93fe6dbf6e8a421d79",
      "candidate_info": {
        "commit_hash": "ff52beb5e263d824f85baf93fe6dbf6e8a421d79",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/ff52beb5e263d824f85baf93fe6dbf6e8a421d79",
        "files": [
          "core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/jenkins/util/VirtualFile.java"
        ],
        "message": "[JENKINS-56114] Correct behavior for Windows Server 2016 with Docker (#3914)\n\n* [JENKINS-56114] Correct behavior for Windows Server 2016 with Docker\n- also adjust the symlink escape hatch\n\n* Correct missing space + retrigger build\n\n* Improve performance with a check on the logger level\n\n* Run the specific code only under Windows\n\n* Rename the method as it's used only for Windows\n\n(cherry picked from commit 5562b2fec6428b730a7b88ad6390a7ed741ba792)",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: import org.jenkinsci.remoting.RoleSensitive;",
          "133: import org.kohsuke.accmod.Restricted;",
          "134: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "135: import org.kohsuke.stapler.Stapler;",
          "137: import static hudson.FilePath.TarCompression.GZIP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: import org.kohsuke.stapler.Function;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3264:             Path parentAbsolutePath = Util.fileToPath(parentFile.getAbsoluteFile());",
          "3265:             Path parentRealPath;",
          "3266:             try {",
          "3268:             }",
          "3270:                 return false;",
          "3271:             }",
          "",
          "[Removed Lines]",
          "3267:                 parentRealPath = parentAbsolutePath.toRealPath();",
          "3269:             catch(NoSuchFileException e) {",
          "",
          "[Added Lines]",
          "3268:                 if (Functions.isWindows()) {",
          "3269:                     parentRealPath = this.windowsToRealPath(parentAbsolutePath);",
          "3270:                 } else {",
          "3271:                     parentRealPath = parentAbsolutePath.toRealPath();",
          "3272:                 }",
          "3274:             catch (NoSuchFileException e) {",
          "3275:                 LOGGER.log(Level.FINE, String.format(\"Cannot find the real path to the parentFile: %s\", parentAbsolutePath), e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3298:                 try{",
          "3299:                     Path child = currentFileAbsolutePath.toRealPath();",
          "3300:                     if (!child.startsWith(parentRealPath)) {",
          "3301:                         return false;",
          "3302:                     }",
          "3303:                 } catch (NoSuchFileException e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3307:                         LOGGER.log(Level.FINE, \"Child [{0}] does not start with parent [{1}] => not descendant\", new Object[]{ child, parentRealPath });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3324:             }",
          "3325:             return current;",
          "3326:         }",
          "3327:     }",
          "3329:     private static final SoloFilePathFilter UNRESTRICTED = SoloFilePathFilter.wrap(FilePathFilter.UNRESTRICTED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3335:         private @Nonnull Path windowsToRealPath(@Nonnull Path path) throws IOException {",
          "3336:             try {",
          "3337:                 return path.toRealPath();",
          "3338:             }",
          "3339:             catch (IOException e) {",
          "3340:                 if (LOGGER.isLoggable(Level.FINE)) {",
          "3341:                     LOGGER.log(Level.FINE, String.format(\"relaxedToRealPath cannot use the regular toRealPath on %s, trying with toRealPath(LinkOption.NOFOLLOW_LINKS)\", path), e);",
          "3342:                 }",
          "3343:             }",
          "3347:             return path.toRealPath(LinkOption.NOFOLLOW_LINKS);",
          "3348:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
          "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:         private boolean isIllegalSymlink() {",
          "548:             try {",
          "550:             } catch (IOException x) {",
          "551:                 Logger.getLogger(VirtualFile.class.getName()).log(Level.FINE, \"could not determine symlink status of \" + f, x);",
          "552:             } catch (InvalidPathException x2) {",
          "",
          "[Removed Lines]",
          "549:                 return !this.isDescendant(\"\");",
          "",
          "[Added Lines]",
          "549:                 String myPath = f.toPath().toRealPath().toString();",
          "550:                 String rootPath = root.toPath().toRealPath().toString();",
          "551:                 if (!myPath.equals(rootPath) && !myPath.startsWith(rootPath + File.separatorChar)) {",
          "552:                     return true;",
          "553:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e8df1aebcd922e87058343bad062d320db62af8",
      "candidate_info": {
        "commit_hash": "9e8df1aebcd922e87058343bad062d320db62af8",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/9e8df1aebcd922e87058343bad062d320db62af8",
        "files": [
          "core/src/main/java/hudson/FilePath.java",
          "core/src/test/java/hudson/FilePathSEC904Test.java"
        ],
        "message": "Use different approach for relativize two paths due to Java 11",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
          "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3322:             while (!remainingPath.isEmpty()) {",
          "3323:                 Path directChild = this.getDirectChild(currentFilePath, remainingPath);",
          "3324:                 Path childUsingFullPath = currentFilePath.resolve(remainingPath);",
          "3328:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild.toFile());",
          "3329:                 if (childFileSymbolic == null) {",
          "",
          "[Removed Lines]",
          "3325:                 Path rel = directChild.toAbsolutePath().relativize(childUsingFullPath.toAbsolutePath());",
          "3326:                 remainingPath = rel.toString();",
          "",
          "[Added Lines]",
          "3325:                 String childUsingFullPathAbs = childUsingFullPath.toAbsolutePath().toString();",
          "3326:                 String directChildAbs = directChild.toAbsolutePath().toString();",
          "3328:                 if (childUsingFullPathAbs.length() == directChildAbs.length()) {",
          "3329:                     remainingPath = \"\";",
          "3330:                 } else {",
          "3331:                     remainingPath = childUsingFullPathAbs.substring(directChildAbs.length() + 1);",
          "3332:                 }",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java": [
          "File: core/src/test/java/hudson/FilePathSEC904Test.java -> core/src/test/java/hudson/FilePathSEC904Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         assertFalse(workspaceFolder.isDescendant(\"./../workspace\"));",
          "86:         assertFalse(workspaceFolder.isDescendant(\"./../workspace/\"));",
          "87:         assertFalse(workspaceFolder.isDescendant(\"./../workspace/regular.txt\"));",
          "88:         assertFalse(workspaceFolder.isDescendant(\"../workspace/regular.txt\"));",
          "89:         assertFalse(workspaceFolder.isDescendant(\"./../../root/workspace/regular.txt\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         assertFalse(workspaceFolder.isDescendant(\".\\\\..\\\\workspace\"));",
          "88:         assertFalse(workspaceFolder.isDescendant(\".\\\\..\\\\workspace\\\\\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent\"));",
          "138:         assertTrue(workspaceFolder.isDescendant(\"a\"));",
          "139:         assertTrue(workspaceFolder.isDescendant(\"a/a.txt\"));",
          "140:         assertTrue(workspaceFolder.isDescendant(\"b\"));",
          "141:         assertTrue(workspaceFolder.isDescendant(\"b/_a/a.txt\"));",
          "142:         assertTrue(workspaceFolder.isDescendant(\"b/_atxt\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         assertTrue(workspaceFolder.isDescendant(\"a/../a/a.txt\"));",
          "143:         assertTrue(workspaceFolder.isDescendant(\"b/../a/a.txt\"));",
          "145:         assertTrue(workspaceFolder.isDescendant(\"./b\"));",
          "146:         assertTrue(workspaceFolder.isDescendant(\".\\\\b\"));",
          "148:         assertTrue(workspaceFolder.isDescendant(\"b/_a\\\\a.txt\"));",
          "149:         assertTrue(workspaceFolder.isDescendant(\"b/_a/../a/a.txt\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3351d2e7c3edfee82b9470e9aa1168982296072",
      "candidate_info": {
        "commit_hash": "c3351d2e7c3edfee82b9470e9aa1168982296072",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/c3351d2e7c3edfee82b9470e9aa1168982296072",
        "files": [
          "core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/hudson/model/FileParameterValue.java",
          "test/src/test/java/hudson/model/FileParameterValueTest.java"
        ],
        "message": "[SECURITY-1074]",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java",
          "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: import java.net.URLConnection;",
          "80: import java.nio.file.Files;",
          "81: import java.nio.file.InvalidPathException;",
          "82: import java.util.ArrayList;",
          "83: import java.util.Arrays;",
          "84: import java.util.Comparator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2949:         return IOUtils.mkdirs(dir);",
          "2950:     }",
          "2952:     private static final SoloFilePathFilter UNRESTRICTED = SoloFilePathFilter.wrap(FilePathFilter.UNRESTRICTED);",
          "2953: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2958:     @Restricted(NoExternalUse.class)",
          "2959:     public boolean isDescendant(@Nonnull String potentialChildRelativePath) throws IOException, InterruptedException {",
          "2960:         return act(new IsDescendant(potentialChildRelativePath));",
          "2961:     }",
          "2963:     private class IsDescendant extends SecureFileCallable<Boolean> {",
          "2964:         private static final long serialVersionUID = 1L;",
          "2965:         private String potentialChildRelativePath;",
          "2967:         private IsDescendant(@Nonnull String potentialChildRelativePath){",
          "2968:             this.potentialChildRelativePath = potentialChildRelativePath;",
          "2969:         }",
          "2971:         @Override",
          "2972:         public Boolean invoke(@Nonnull File parentFile, @Nonnull VirtualChannel channel) throws IOException, InterruptedException {",
          "2973:             if (new File(potentialChildRelativePath).isAbsolute()) {",
          "2974:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
          "2975:             }",
          "2977:             Path parent = parentFile.getAbsoluteFile().toPath().normalize();",
          "2979:             String remainingPath = potentialChildRelativePath;",
          "2980:             File currentFile = parentFile;",
          "2981:             while (!remainingPath.isEmpty()) {",
          "2982:                 File directChild = this.getDirectChild(currentFile, remainingPath);",
          "2983:                 File childUsingFullPath = new File(currentFile, remainingPath);",
          "2984:                 remainingPath = childUsingFullPath.getAbsolutePath().substring(directChild.getAbsolutePath().length());",
          "2986:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild);",
          "2987:                 if (childFileSymbolic == null) {",
          "2988:                     currentFile = directChild;",
          "2989:                 } else {",
          "2990:                     currentFile = childFileSymbolic;",
          "2991:                 }",
          "2992:             }",
          "2995:             Path child = currentFile.getAbsoluteFile().toPath().normalize();",
          "2996:             return child.startsWith(parent);",
          "2997:         }",
          "2999:         private @CheckForNull File getDirectChild(File parentFile, String childPath){",
          "3000:             File current = new File(parentFile, childPath);",
          "3001:             while (current != null && !parentFile.equals(current.getParentFile())) {",
          "3002:                 current = current.getParentFile();",
          "3003:             }",
          "3004:             return current;",
          "3005:         }",
          "3006:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java": [
          "File: core/src/main/java/hudson/model/FileParameterValue.java -> core/src/main/java/hudson/model/FileParameterValue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import java.io.UnsupportedEncodingException;",
          "37: import java.nio.file.Files;",
          "38: import java.nio.file.InvalidPathException;",
          "39: import javax.servlet.ServletException;",
          "41: import org.apache.commons.fileupload.FileItem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import org.apache.commons.io.FilenameUtils;",
          "46: import org.apache.commons.io.IOUtils;",
          "47: import org.apache.commons.lang.StringUtils;",
          "48: import org.kohsuke.stapler.DataBoundConstructor;",
          "49: import org.kohsuke.stapler.StaplerRequest;",
          "50: import org.kohsuke.stapler.StaplerResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.kohsuke.accmod.Restricted;",
          "50: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: public class FileParameterValue extends ParameterValue {",
          "64:     private transient final FileItem file;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     private static final String FOLDER_NAME = \"fileParameters\";",
          "73:     @Restricted(NoExternalUse.class)",
          "74:     public static /* Script Console modifiable */ boolean ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE =",
          "75:             Boolean.getBoolean(FileParameterValue.class.getName() + \".allowFolderTraversalOutsideWorkspace\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:             public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {",
          "143:              if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {",
          "144:                  listener.getLogger().println(\"Copying file to \"+location);",
          "146:                     locationFilePath.getParent().mkdirs();",
          "147:                  locationFilePath.copyFrom(file);",
          "148:                     locationFilePath.copyTo(new FilePath(getLocationUnderBuild(build)));",
          "",
          "[Removed Lines]",
          "145:                     FilePath locationFilePath = build.getWorkspace().child(location);",
          "",
          "[Added Lines]",
          "161:                     FilePath ws = build.getWorkspace();",
          "162:                     if (ws == null) {",
          "163:                         throw new IllegalStateException(\"The workspace should be created when setUp method is called\");",
          "164:                     }",
          "165:                     if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && !ws.isDescendant(location)) {",
          "166:                         listener.error(\"Rejecting file path escaping base directory with relative path: \" + location);",
          "168:                         return null;",
          "169:                     }",
          "170:                     FilePath locationFilePath = ws.child(location);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:         if ((\"/\" + originalFileName).equals(request.getRestOfPath())) {",
          "205:             AbstractBuild build = (AbstractBuild)request.findAncestor(AbstractBuild.class).getObject();",
          "206:             File fileParameter = getLocationUnderBuild(build);",
          "207:             if (fileParameter.isFile()) {",
          "208:                 try (InputStream data = Files.newInputStream(fileParameter.toPath())) {",
          "209:                     long lastModified = fileParameter.lastModified();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:             if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE) {",
          "234:                 File fileParameterFolder = getFileParameterFolderUnderBuild(build);",
          "237:                 Path child = fileParameter.getAbsoluteFile().toPath().normalize();",
          "238:                 Path parent = fileParameterFolder.getAbsoluteFile().toPath().normalize();",
          "239:                 if (!child.startsWith(parent)) {",
          "240:                     throw new IllegalStateException(\"The fileParameter tried to escape the expected folder: \" + location);",
          "241:                 }",
          "242:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:     private File getLocationUnderBuild(AbstractBuild build) {",
          "231:     }",
          "",
          "[Removed Lines]",
          "230:         return new File(build.getRootDir(), \"fileParameters/\" + location);",
          "",
          "[Added Lines]",
          "267:         return new File(getFileParameterFolderUnderBuild(build), location);",
          "268:     }",
          "270:     private File getFileParameterFolderUnderBuild(AbstractBuild<?, ?> build){",
          "271:         return new File(build.getRootDir(), FOLDER_NAME);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java": [
          "File: test/src/test/java/hudson/model/FileParameterValueTest.java -> test/src/test/java/hudson/model/FileParameterValueTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.model;",
          "26: import com.gargoylesoftware.htmlunit.Page;",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "28: import hudson.FilePath;",
          "29: import hudson.Functions;",
          "30: import org.apache.commons.io.FileUtils;",
          "31: import org.junit.Assume;",
          "32: import org.junit.Rule;",
          "33: import org.junit.Test;",
          "34: import org.junit.rules.TemporaryFolder;",
          "35: import org.jvnet.hudson.test.Issue;",
          "36: import org.jvnet.hudson.test.JenkinsRule;",
          "37: import org.kohsuke.stapler.Function;",
          "39: import java.io.File;",
          "40: import java.nio.charset.StandardCharsets;",
          "41: import java.util.Arrays;",
          "42: import java.util.Collections;",
          "44: import static org.hamcrest.CoreMatchers.allOf;",
          "45: import static org.hamcrest.CoreMatchers.containsString;",
          "46: import static org.hamcrest.CoreMatchers.equalTo;",
          "47: import static org.hamcrest.CoreMatchers.not;",
          "48: import static org.junit.Assert.assertThat;",
          "49: import static org.junit.Assert.assertTrue;",
          "51: public class FileParameterValueTest {",
          "52:     @Rule",
          "53:     public JenkinsRule j = new JenkinsRule();",
          "55:     @Rule",
          "56:     public TemporaryFolder tmp = new TemporaryFolder();",
          "58:     @Test",
          "59:     @Issue(\"SECURITY-1074\")",
          "60:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder() throws Exception {",
          "63:         FilePath root = j.jenkins.getRootPath();",
          "65:         FreeStyleProject p = j.createFreeStyleProject();",
          "66:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "67:                 new FileParameterDefinition(\"../../../../../root-level.txt\", null)",
          "68:         )));",
          "70:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "72:         String uploadedContent = \"test-content\";",
          "73:         File uploadedFile = tmp.newFile();",
          "74:         FileUtils.write(uploadedFile, uploadedContent);",
          "76:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "77:                 new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")",
          "78:         )).get();",
          "80:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "81:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "84:         JenkinsRule.WebClient wc = j.createWebClient();",
          "85:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "87:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "89:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "91:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215root-level.txt/uploaded-file.txt\", uploadedContent);",
          "93:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "95:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt\", uploadedContent);",
          "96:     }",
          "98:     private void checkUrlNot200AndNotContains(JenkinsRule.WebClient wc, String url, String contentNotPresent) throws Exception {",
          "99:         Page pageForEncoded = wc.goTo(url, null);",
          "100:         assertThat(pageForEncoded.getWebResponse().getStatusCode(), not(equalTo(200)));",
          "101:         assertThat(pageForEncoded.getWebResponse().getContentAsString(), not(containsString(contentNotPresent)));",
          "102:     }",
          "104:     @Test",
          "105:     @Issue(\"SECURITY-1074\")",
          "106:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {",
          "107:         Assume.assumeTrue(\"Backslash are only dangerous on Windows\", Functions.isWindows());",
          "111:         FilePath root = j.jenkins.getRootPath();",
          "113:         FreeStyleProject p = j.createFreeStyleProject();",
          "114:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "115:                 new FileParameterDefinition(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", null)",
          "116:         )));",
          "118:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "120:         String uploadedContent = \"test-content\";",
          "121:         File uploadedFile = tmp.newFile();",
          "122:         FileUtils.write(uploadedFile, uploadedContent);",
          "124:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "125:                 new FileParameterValue(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", uploadedFile, \"uploaded-file.txt\")",
          "126:         )).get();",
          "128:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "129:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "132:         JenkinsRule.WebClient wc = j.createWebClient();",
          "133:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "135:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt/uploaded-file.txt\", uploadedContent);",
          "136:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "137:     }",
          "139:     @Test",
          "140:     @Issue(\"SECURITY-1074\")",
          "141:     public void fileParameter_withSingleDot() throws Exception {",
          "144:         FreeStyleProject p = j.createFreeStyleProject();",
          "145:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "146:                 new FileParameterDefinition(\".\", null)",
          "147:         )));",
          "149:         String uploadedContent = \"test-content\";",
          "150:         File uploadedFile = tmp.newFile();",
          "151:         FileUtils.write(uploadedFile, uploadedContent);",
          "153:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "154:                 new FileParameterValue(\".\", uploadedFile, \"uploaded-file.txt\")",
          "155:         )).get();",
          "157:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "160:         JenkinsRule.WebClient wc = j.createWebClient();",
          "161:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "163:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/uploaded-file.txt\", uploadedContent);",
          "164:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/./uploaded-file.txt\", uploadedContent);",
          "165:     }",
          "167:     @Test",
          "168:     @Issue(\"SECURITY-1074\")",
          "169:     public void fileParameter_withDoubleDot() throws Exception {",
          "172:         FreeStyleProject p = j.createFreeStyleProject();",
          "173:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "174:                 new FileParameterDefinition(\"..\", null)",
          "175:         )));",
          "177:         String uploadedContent = \"test-content\";",
          "178:         File uploadedFile = tmp.newFile();",
          "179:         FileUtils.write(uploadedFile, uploadedContent);",
          "181:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "182:                 new FileParameterValue(\"..\", uploadedFile, \"uploaded-file.txt\")",
          "183:         )).get();",
          "185:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "188:         JenkinsRule.WebClient wc = j.createWebClient();",
          "189:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "191:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/uploaded-file.txt\", uploadedContent);",
          "192:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/../uploaded-file.txt\", uploadedContent);",
          "193:     }",
          "195:     @Test",
          "196:     @Issue(\"SECURITY-1074\")",
          "197:     public void fileParameter_cannotEraseFile_outsideOfBuildFolder() throws Exception {",
          "200:         FilePath root = j.jenkins.getRootPath();",
          "202:         FreeStyleProject p = j.createFreeStyleProject();",
          "203:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "204:                 new FileParameterDefinition(\"../../../../../root-level.txt\", null)",
          "205:         )));",
          "207:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "208:         String initialContent = \"do-not-erase-me\";",
          "209:         root.child(\"root-level.txt\").write(initialContent, StandardCharsets.UTF_8.name());",
          "211:         String uploadedContent = \"test-content\";",
          "212:         File uploadedFile = tmp.newFile();",
          "213:         FileUtils.write(uploadedFile, uploadedContent);",
          "215:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "216:                 new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")",
          "217:         )).get();",
          "219:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "220:         assertThat(root.child(\"root-level.txt\").readToString(), equalTo(initialContent));",
          "223:         JenkinsRule.WebClient wc = j.createWebClient();",
          "224:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "226:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "227:     }",
          "229:     @Test",
          "230:     public void fileParameter_canStillUse_internalHierarchy() throws Exception {",
          "231:         FreeStyleProject p = j.createFreeStyleProject();",
          "232:         p.addProperty(new ParametersDefinitionProperty(Arrays.asList(",
          "233:                 new FileParameterDefinition(\"direct-child1.txt\", null),",
          "234:                 new FileParameterDefinition(\"parent/child2.txt\", null)",
          "235:         )));",
          "237:         File uploadedFile1 = tmp.newFile();",
          "238:         FileUtils.write(uploadedFile1, \"test1\");",
          "239:         File uploadedFile2 = tmp.newFile();",
          "240:         FileUtils.write(uploadedFile2, \"test2\");",
          "242:         FreeStyleBuild build = j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "243:                 new FileParameterValue(\"direct-child1.txt\", uploadedFile1, \"uploaded-file-1.txt\"),",
          "244:                 new FileParameterValue(\"parent/child2.txt\", uploadedFile2, \"uploaded-file-2.txt\")",
          "245:         )));",
          "248:         File directChild = new File(build.getRootDir(), \"fileParameters/\" + \"direct-child1.txt\");",
          "249:         assertTrue(directChild.exists());",
          "251:         File parentChild = new File(build.getRootDir(), \"fileParameters/\" + \"parent/child2.txt\");",
          "252:         assertTrue(parentChild.exists());",
          "255:         assertTrue(build.getWorkspace().child(\"direct-child1.txt\").exists());",
          "256:         assertTrue(build.getWorkspace().child(\"parent\").child(\"child2.txt\").exists());",
          "259:         JenkinsRule.WebClient wc = j.createWebClient();",
          "260:         HtmlPage workspacePage = wc.goTo(p.getUrl() + \"ws\");",
          "261:         String workspaceContent = workspacePage.getWebResponse().getContentAsString();",
          "262:         assertThat(workspaceContent, allOf(",
          "263:                 containsString(\"direct-child1.txt\"),",
          "264:                 containsString(\"parent\")",
          "265:         ));",
          "266:         HtmlPage workspaceParentPage = wc.goTo(p.getUrl() + \"ws\" + \"/parent\");",
          "267:         String workspaceParentContent = workspaceParentPage.getWebResponse().getContentAsString();",
          "268:         assertThat(workspaceParentContent, containsString(\"child2.txt\"));",
          "269:     }",
          "270: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7090b3747a2c972fbf005c17b6fb7ac197e84d66",
      "candidate_info": {
        "commit_hash": "7090b3747a2c972fbf005c17b6fb7ac197e84d66",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/7090b3747a2c972fbf005c17b6fb7ac197e84d66",
        "files": [
          "core/src/main/java/hudson/FilePath.java"
        ],
        "message": "More consistent use of Util.fileToPath from FilePath methods.",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: import hudson.util.io.Archiver;",
          "60: import hudson.util.io.ArchiverFactory;",
          "64: import java.io.BufferedOutputStream;",
          "65: import java.io.File;",
          "",
          "[Removed Lines]",
          "62: import static java.util.logging.Level.FINE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: import java.nio.file.NoSuchFileException;",
          "87: import java.nio.file.Path;",
          "88: import java.nio.file.LinkOption;",
          "90: import java.nio.file.StandardCopyOption;",
          "91: import java.nio.file.attribute.FileAttribute;",
          "92: import java.nio.file.attribute.PosixFilePermission;",
          "",
          "[Removed Lines]",
          "89: import java.nio.file.Paths;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137: import org.kohsuke.stapler.Stapler;",
          "139: import static hudson.FilePath.TarCompression.GZIP;",
          "141: import static hudson.Util.fileToPath;",
          "142: import static hudson.Util.fixEmpty;",
          "145: import java.util.Collections;",
          "146: import org.apache.tools.ant.BuildException;",
          "",
          "[Removed Lines]",
          "140: import static hudson.Util.deleteFile;",
          "143: import static hudson.Util.isSymlink;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1600:             @Override",
          "1601:             public Void invoke(File f, VirtualChannel channel) throws IOException {",
          "1602:                 if(!f.exists()) {",
          "1608:                 }",
          "1609:                 if(!stating(f).setLastModified(timestamp))",
          "1610:                     throw new IOException(\"Failed to set the timestamp of \"+f+\" to \"+timestamp);",
          "",
          "[Removed Lines]",
          "1603:                     try {",
          "1604:                         Files.newOutputStream(creating(f).toPath()).close();",
          "1605:                     } catch (InvalidPathException e) {",
          "1606:                         throw new IOException(e);",
          "1607:                     }",
          "",
          "[Added Lines]",
          "1599:                     Files.newOutputStream(fileToPath(creating(f))).close();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1948:     public InputStream read() throws IOException, InterruptedException {",
          "1949:         if(channel==null) {",
          "1955:         }",
          "1957:         final Pipe p = Pipe.createRemoteToLocal();",
          "",
          "[Removed Lines]",
          "1950:             try {",
          "1951:                 return Files.newInputStream(reading(new File(remote)).toPath());",
          "1952:             } catch (InvalidPathException e) {",
          "1953:                 throw new IOException(e);",
          "1954:             }",
          "",
          "[Added Lines]",
          "1942:             return Files.newInputStream(fileToPath(reading(new File(remote))));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1967:         }",
          "1968:         @Override",
          "1969:         public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {",
          "1971:                     OutputStream out = p.getOut()) {",
          "1972:                 org.apache.commons.io.IOUtils.copy(fis, out);",
          "1975:             } catch (Exception x) {",
          "1976:                 p.error(x);",
          "1977:             }",
          "",
          "[Removed Lines]",
          "1970:             try (InputStream fis = Files.newInputStream(reading(f).toPath());",
          "1973:             } catch (InvalidPathException e) {",
          "1974:                 p.error(new IOException(e));",
          "",
          "[Added Lines]",
          "1958:             try (InputStream fis = Files.newInputStream(fileToPath(reading(f)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2075:         if(channel==null) {",
          "2076:             File f = new File(remote).getAbsoluteFile();",
          "2077:             mkdirs(f.getParentFile());",
          "2083:         }",
          "2085:         return act(new WritePipe());",
          "",
          "[Removed Lines]",
          "2078:             try {",
          "2079:                 return Files.newOutputStream(writing(f).toPath());",
          "2080:             } catch (InvalidPathException e) {",
          "2081:                 throw new IOException(e);",
          "2082:             }",
          "",
          "[Added Lines]",
          "2064:             return Files.newOutputStream(fileToPath(writing(f)));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2090:             public OutputStream invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {",
          "2091:                 f = f.getAbsoluteFile();",
          "2092:                 mkdirs(f.getParentFile());",
          "2099:             }",
          "2100:     }",
          "",
          "[Removed Lines]",
          "2093:                 try {",
          "2094:                     OutputStream fos = Files.newOutputStream(writing(f).toPath());",
          "2095:                     return new RemoteOutputStream(fos);",
          "2096:                 } catch (InvalidPathException e) {",
          "2097:                     throw new IOException(e);",
          "2098:                 }",
          "",
          "[Added Lines]",
          "2075:                 return new RemoteOutputStream(Files.newOutputStream(fileToPath(writing(f))));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2120:         @Override",
          "2121:         public Void invoke(File f, VirtualChannel channel) throws IOException {",
          "2122:             mkdirs(f.getParentFile());",
          "2124:                     Writer w = encoding != null ? new OutputStreamWriter(fos, encoding) : new OutputStreamWriter(fos)) {",
          "2125:                 w.write(content);",
          "2128:             }",
          "2129:             return null;",
          "2130:         }",
          "",
          "[Removed Lines]",
          "2123:             try (OutputStream fos = Files.newOutputStream(writing(f).toPath());",
          "2126:             } catch (InvalidPathException e) {",
          "2127:                 throw new IOException(e);",
          "",
          "[Added Lines]",
          "2100:             try (OutputStream fos = Files.newOutputStream(fileToPath(writing(f)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2270:         }",
          "2271:         @Override",
          "2272:         public Void invoke(File f, VirtualChannel channel) throws IOException {",
          "2274:                 org.apache.commons.io.IOUtils.copy(fis, out);",
          "2275:                 return null;",
          "2278:             } finally {",
          "2279:                 out.close();",
          "2280:             }",
          "",
          "[Removed Lines]",
          "2273:             try (InputStream fis = Files.newInputStream(reading(f).toPath())) {",
          "2276:             } catch (InvalidPathException e) {",
          "2277:                 throw new IOException(e);",
          "",
          "[Added Lines]",
          "2248:             try (InputStream fis = Files.newInputStream(fileToPath(reading(f)))) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3337:                         Path child = currentFileAbsolutePath.normalize();",
          "3338:                         Path parent = parentAbsolutePath.normalize();",
          "3339:                         return child.startsWith(parent);",
          "3341:                         throw new IOException(e2);",
          "3342:                     }",
          "3343:                 }",
          "",
          "[Removed Lines]",
          "3340:                     } catch (InvalidPathException e2) {",
          "",
          "[Added Lines]",
          "3313:                     } catch (InvalidPathException e2) { // TODO which method would throw this?",
          "",
          "---------------"
        ]
      }
    }
  ]
}