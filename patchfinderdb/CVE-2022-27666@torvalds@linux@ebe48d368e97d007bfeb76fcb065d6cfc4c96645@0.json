{
  "cve_id": "CVE-2022-27666",
  "cve_desc": "A heap buffer overflow flaw was found in IPsec ESP transformation code in net/ipv4/esp4.c and net/ipv6/esp6.c. This flaw allows a local attacker with a normal user privilege to overwrite kernel heap objects and may cause a local privilege escalation threat.",
  "repo": "torvalds/linux",
  "patch_hash": "ebe48d368e97d007bfeb76fcb065d6cfc4c96645",
  "patch_info": {
    "commit_hash": "ebe48d368e97d007bfeb76fcb065d6cfc4c96645",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ebe48d368e97d007bfeb76fcb065d6cfc4c96645",
    "files": [
      "include/net/esp.h",
      "net/ipv4/esp4.c",
      "net/ipv6/esp6.c"
    ],
    "message": "esp: Fix possible buffer overflow in ESP transformation\n\nThe maximum message size that can be send is bigger than\nthe  maximum site that skb_page_frag_refill can allocate.\nSo it is possible to write beyond the allocated buffer.\n\nFix this by doing a fallback to COW in that case.\n\nv2:\n\nAvoid get get_order() costs as suggested by Linus Torvalds.\n\nFixes: cac2661c53f3 (\"esp4: Avoid skb_cow_data whenever possible\")\nFixes: 03e2a30f6a27 (\"esp6: Avoid skb_cow_data whenever possible\")\nReported-by: valis <sec@valis.email>\nSigned-off-by: Steffen Klassert <steffen.klassert@secunet.com>",
    "before_after_code_files": [
      "include/net/esp.h||include/net/esp.h",
      "net/ipv4/esp4.c||net/ipv4/esp4.c",
      "net/ipv6/esp6.c||net/ipv6/esp6.c"
    ]
  },
  "patch_diff": {
    "include/net/esp.h||include/net/esp.h": [
      "File: include/net/esp.h -> include/net/esp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include <linux/skbuff.h>",
      "7: struct ip_esp_hdr;",
      "9: static inline struct ip_esp_hdr *ip_esp_hdr(const struct sk_buff *skb)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #define ESP_SKB_FRAG_MAXSIZE (PAGE_SIZE << SKB_FRAG_PAGE_ORDER)",
      "",
      "---------------"
    ],
    "net/ipv4/esp4.c||net/ipv4/esp4.c": [
      "File: net/ipv4/esp4.c -> net/ipv4/esp4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "446:  struct page *page;",
      "447:  struct sk_buff *trailer;",
      "448:  int tailen = esp->tailen;",
      "451:  if (x->encap) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "449:  unsigned int allocsz;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "455:    return err;",
      "456:  }",
      "458:  if (!skb_cloned(skb)) {",
      "459:   if (tailen <= skb_tailroom(skb)) {",
      "460:    nfrags = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "459:  allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);",
      "460:  if (allocsz > ESP_SKB_FRAG_MAXSIZE)",
      "461:   goto cow;",
      "",
      "---------------"
    ],
    "net/ipv6/esp6.c||net/ipv6/esp6.c": [
      "File: net/ipv6/esp6.c -> net/ipv6/esp6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "482:  struct page *page;",
      "483:  struct sk_buff *trailer;",
      "484:  int tailen = esp->tailen;",
      "486:  if (x->encap) {",
      "487:   int err = esp6_output_encap(x, skb, esp);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "485:  unsigned int allocsz;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "490:    return err;",
      "491:  }",
      "493:  if (!skb_cloned(skb)) {",
      "494:   if (tailen <= skb_tailroom(skb)) {",
      "495:    nfrags = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "494:  allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);",
      "495:  if (allocsz > ESP_SKB_FRAG_MAXSIZE)",
      "496:   goto cow;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5bd8baab087dff657e05387aee802e70304cc813",
      "candidate_info": {
        "commit_hash": "5bd8baab087dff657e05387aee802e70304cc813",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5bd8baab087dff657e05387aee802e70304cc813",
        "files": [
          "include/net/esp.h",
          "net/ipv4/esp4.c",
          "net/ipv6/esp6.c"
        ],
        "message": "esp: limit skb_page_frag_refill use to a single page\n\nCommit ebe48d368e97 (\"esp: Fix possible buffer overflow in ESP\ntransformation\") tried to fix skb_page_frag_refill usage in ESP by\ncapping allocsize to 32k, but that doesn't completely solve the issue,\nas skb_page_frag_refill may return a single page. If that happens, we\nwill write out of bounds, despite the check introduced in the previous\npatch.\n\nThis patch forces COW in cases where we would end up calling\nskb_page_frag_refill with a size larger than a page (first in\nesp_output_head with tailen, then in esp_output_tail with\nskb->data_len).\n\nFixes: cac2661c53f3 (\"esp4: Avoid skb_cow_data whenever possible\")\nFixes: 03e2a30f6a27 (\"esp6: Avoid skb_cow_data whenever possible\")\nSigned-off-by: Sabrina Dubroca <sd@queasysnail.net>\nSigned-off-by: Steffen Klassert <steffen.klassert@secunet.com>",
        "before_after_code_files": [
          "include/net/esp.h||include/net/esp.h",
          "net/ipv4/esp4.c||net/ipv4/esp4.c",
          "net/ipv6/esp6.c||net/ipv6/esp6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/esp.h||include/net/esp.h",
            "net/ipv4/esp4.c||net/ipv4/esp4.c",
            "net/ipv6/esp6.c||net/ipv6/esp6.c"
          ],
          "candidate": [
            "include/net/esp.h||include/net/esp.h",
            "net/ipv4/esp4.c||net/ipv4/esp4.c",
            "net/ipv6/esp6.c||net/ipv6/esp6.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/esp.h||include/net/esp.h": [
          "File: include/net/esp.h -> include/net/esp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <linux/skbuff.h>",
          "9: struct ip_esp_hdr;",
          "11: static inline struct ip_esp_hdr *ip_esp_hdr(const struct sk_buff *skb)",
          "",
          "[Removed Lines]",
          "7: #define ESP_SKB_FRAG_MAXSIZE (PAGE_SIZE << SKB_FRAG_PAGE_ORDER)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/ipv4/esp4.c||net/ipv4/esp4.c": [
          "File: net/ipv4/esp4.c -> net/ipv4/esp4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:  struct page *page;",
          "447:  struct sk_buff *trailer;",
          "448:  int tailen = esp->tailen;",
          "452:  if (x->encap) {",
          "",
          "[Removed Lines]",
          "449:  unsigned int allocsz;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:    return err;",
          "457:  }",
          "461:   goto cow;",
          "463:  if (!skb_cloned(skb)) {",
          "",
          "[Removed Lines]",
          "459:  allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);",
          "460:  if (allocsz > ESP_SKB_FRAG_MAXSIZE)",
          "",
          "[Added Lines]",
          "458:  if (ALIGN(tailen, L1_CACHE_BYTES) > PAGE_SIZE ||",
          "459:      ALIGN(skb->data_len, L1_CACHE_BYTES) > PAGE_SIZE)",
          "",
          "---------------"
        ],
        "net/ipv6/esp6.c||net/ipv6/esp6.c": [
          "File: net/ipv6/esp6.c -> net/ipv6/esp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:  struct page *page;",
          "483:  struct sk_buff *trailer;",
          "484:  int tailen = esp->tailen;",
          "487:  if (x->encap) {",
          "488:   int err = esp6_output_encap(x, skb, esp);",
          "",
          "[Removed Lines]",
          "485:  unsigned int allocsz;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "491:    return err;",
          "492:  }",
          "496:   goto cow;",
          "498:  if (!skb_cloned(skb)) {",
          "",
          "[Removed Lines]",
          "494:  allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);",
          "495:  if (allocsz > ESP_SKB_FRAG_MAXSIZE)",
          "",
          "[Added Lines]",
          "493:  if (ALIGN(tailen, L1_CACHE_BYTES) > PAGE_SIZE ||",
          "494:      ALIGN(skb->data_len, L1_CACHE_BYTES) > PAGE_SIZE)",
          "",
          "---------------"
        ]
      }
    }
  ]
}