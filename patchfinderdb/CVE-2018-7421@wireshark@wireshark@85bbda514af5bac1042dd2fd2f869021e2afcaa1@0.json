{
  "cve_id": "CVE-2018-7421",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.12 and 2.4.0 to 2.4.4, the DMP dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-dmp.c by correctly supporting a bounded number of Security Categories for a DMP Security Classification.",
  "repo": "wireshark/wireshark",
  "patch_hash": "85bbda514af5bac1042dd2fd2f869021e2afcaa1",
  "patch_info": {
    "commit_hash": "85bbda514af5bac1042dd2fd2f869021e2afcaa1",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/85bbda514af5bac1042dd2fd2f869021e2afcaa1",
    "files": [
      "epan/dissectors/packet-dmp.c"
    ],
    "message": "DMP: Recurse only once.\n\nMake sure we call dissect_dmp_security_category from itself only once.\n\nBug: 14408\nChange-Id: Ia03fb32ca414e78ede572d3093b84f9d53ceb0b9\nReviewed-on: https://code.wireshark.org/review/25964\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
      "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3423: static gint dissect_dmp_security_category (tvbuff_t *tvb, packet_info *pinfo,",
      "3424:                                            proto_tree *tree,",
      "3425:                                            const gchar **label_string,",
      "3427: {",
      "3428:   proto_tree *field_tree = NULL;",
      "3429:   proto_item *tf = NULL, *tr = NULL;",
      "",
      "[Removed Lines]",
      "3426:                                            gint offset, guint8 ext)",
      "",
      "[Added Lines]",
      "3426:                                            gint offset, guint8 ext, gboolean extended)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3504:     tr = proto_tree_add_item (field_tree, hf_message_sec_cat_extended, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "3505:     if ((message & 0x01) && (message & 0x02)) {",
      "3506:       expert_add_info(pinfo, tr, &ei_reserved_value);",
      "3508:       proto_item_append_text (tf, \" (extended)\");",
      "3510:     }",
      "3512:     if (country_code) {",
      "",
      "[Removed Lines]",
      "3507:     } else if (message & 0x01 || message & 0x02) {",
      "3509:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03);",
      "",
      "[Added Lines]",
      "3507:     } else if ((message & 0x01 || message & 0x02) && !extended) {",
      "3509:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03, TRUE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3725:   if (dmp_sec_pol == NATO || dmp_sec_pol == NATIONAL || dmp_sec_pol == EXTENDED_NATIONAL) {",
      "3727:     proto_item_append_text (en, \", Security Label: %s\", label_string);",
      "3728:     tf = proto_tree_add_string (message_tree, hf_message_sec_label, tvb, loffset,",
      "3729:                                 offset - loffset + 1, label_string);",
      "",
      "[Removed Lines]",
      "3726:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0);",
      "",
      "[Added Lines]",
      "3726:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0, FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f14f76d12a3107f0a89884f084640925ba033b28",
      "candidate_info": {
        "commit_hash": "f14f76d12a3107f0a89884f084640925ba033b28",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f14f76d12a3107f0a89884f084640925ba033b28",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "dmp: Allow multiple SecurityCategories again\n\nA Security Classification in DMP may have multiple Security Categories\nso don't restrict this to only one.  Add a arbitrary limit of 255 to\navoid a long dissector loop in malformed packets.\n\nThis fixes a bug introduced in g85bbda51.\n\nBug: 14408\nChange-Id: I48e7a61a097c58dfcf21e9c9ed3147cf1573dae6\nReviewed-on: https://code.wireshark.org/review/26011\nPetri-Dish: Stig Bj\u00f8rlykke <stig@bjorlykke.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478: static expert_field ei_analysis_ack_unexpected = EI_INIT;",
          "479: static expert_field ei_analysis_msg_missing = EI_INIT;",
          "480: static expert_field ei_analysis_retrans_no = EI_INIT;",
          "482: static dissector_handle_t dmp_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: static expert_field ei_too_many_sec_cat = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3423: static gint dissect_dmp_security_category (tvbuff_t *tvb, packet_info *pinfo,",
          "3424:                                            proto_tree *tree,",
          "3425:                                            const gchar **label_string,",
          "3427: {",
          "3428:   proto_tree *field_tree = NULL;",
          "3429:   proto_item *tf = NULL, *tr = NULL;",
          "",
          "[Removed Lines]",
          "3426:                                            gint offset, guint8 ext, gboolean extended)",
          "",
          "[Added Lines]",
          "3427:                                            gint offset, guint8 *ext)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3436:                                    offset, 1, message, \"Security Categories\");",
          "3437:   field_tree = proto_item_add_subtree (tf, ett_message_sec_cat);",
          "3441:   case SEC_CAT_EXT_NONE:",
          "3442:     proto_tree_add_item (field_tree, hf_message_sec_cat_cl, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "3439:   switch (ext) {",
          "",
          "[Added Lines]",
          "3440:   switch (*ext) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3500:     if (message & 0x01) {",
          "3501:       expert_add_info(pinfo, tr, &ei_reserved_value);",
          "3502:     }",
          "3503:   } else {",
          "3504:     tr = proto_tree_add_item (field_tree, hf_message_sec_cat_extended, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3505:     if ((message & 0x01) && (message & 0x02)) {",
          "3506:       expert_add_info(pinfo, tr, &ei_reserved_value);",
          "3508:       proto_item_append_text (tf, \" (extended)\");",
          "3510:     }",
          "3512:     if (country_code) {",
          "3515:       proto_item_set_len (tf, 2);",
          "3517:     }",
          "3518:   }",
          "",
          "[Removed Lines]",
          "3507:     } else if ((message & 0x01 || message & 0x02) && !extended) {",
          "3509:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03, TRUE);",
          "3513:       proto_tree_add_item (field_tree, hf_message_sec_cat_country_code, tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "3514:       proto_item_append_text (tf, \" (rel-to country-code: %d)\", tvb_get_guint8 (tvb, offset+1));",
          "3516:       offset++;",
          "",
          "[Added Lines]",
          "3505:     offset += 1;",
          "3510:     } else if (message & 0x01 || message & 0x02) {",
          "3514:     offset += 1;",
          "3517:       proto_tree_add_item (field_tree, hf_message_sec_cat_country_code, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3518:       proto_item_append_text (tf, \" (rel-to country-code: %d)\", tvb_get_guint8 (tvb, offset));",
          "3520:       offset += 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3725:   if (dmp_sec_pol == NATO || dmp_sec_pol == NATIONAL || dmp_sec_pol == EXTENDED_NATIONAL) {",
          "3727:     proto_item_append_text (en, \", Security Label: %s\", label_string);",
          "3728:     tf = proto_tree_add_string (message_tree, hf_message_sec_label, tvb, loffset,",
          "3730:     PROTO_ITEM_SET_GENERATED (tf);",
          "3731:   } else {",
          "3732:     tf = proto_tree_add_item (message_tree, hf_message_sec_cat_val, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "3726:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0, FALSE);",
          "3729:                                 offset - loffset + 1, label_string);",
          "",
          "[Added Lines]",
          "3730:     guint8 ext = 0;",
          "3731:     guint  sec_cat_count = 0;",
          "3732:     do {",
          "3733:       offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, &ext);",
          "3734:       sec_cat_count++;",
          "3735:     } while (ext != 0 && sec_cat_count < G_MAXUINT8);",
          "3736:     if (sec_cat_count == G_MAXUINT8) {",
          "3738:       expert_add_info(pinfo, en, &ei_too_many_sec_cat);",
          "3739:     }",
          "3742:                                 offset - loffset, label_string);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3740:     proto_tree_add_item (field_tree, hf_message_sec_cat_bit2, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3741:     proto_tree_add_item (field_tree, hf_message_sec_cat_bit1, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3742:     proto_tree_add_item (field_tree, hf_message_sec_cat_bit0, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3743:   }",
          "3746:   if (dmp.msg_type == STANAG || dmp.msg_type == IPM) {",
          "",
          "[Removed Lines]",
          "3744:   offset += 1;",
          "",
          "[Added Lines]",
          "3756:     offset += 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4877:     { &ei_checksum_bad,",
          "4878:       { \"dmp.checksum_bad.expert\", PI_CHECKSUM, PI_WARN,",
          "4879:         \"Bad checksum\", EXPFILL } },",
          "4880:   };",
          "4882:   static uat_field_t attributes_flds[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4893:     { &ei_too_many_sec_cat,",
          "4894:       { \"dmp.too_many_security_categories\", PI_PROTOCOL, PI_ERROR,",
          "4895:         \"Too many security categories\", EXPFILL } },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8be5adae469ba563acfad2c2b98673e1afaf901",
      "candidate_info": {
        "commit_hash": "e8be5adae469ba563acfad2c2b98673e1afaf901",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e8be5adae469ba563acfad2c2b98673e1afaf901",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "DMP: Recurse only once.\n\nMake sure we call dissect_dmp_security_category from itself only once.\n\nBug: 14408\nChange-Id: Ia03fb32ca414e78ede572d3093b84f9d53ceb0b9\nReviewed-on: https://code.wireshark.org/review/25967\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3507: static gint dissect_dmp_security_category (tvbuff_t *tvb, packet_info *pinfo,",
          "3508:                                            proto_tree *tree,",
          "3509:                                            const gchar **label_string,",
          "3511: {",
          "3512:   proto_tree *field_tree = NULL;",
          "3513:   proto_item *tf = NULL, *tr = NULL;",
          "",
          "[Removed Lines]",
          "3510:                                            gint offset, guint8 ext)",
          "",
          "[Added Lines]",
          "3510:                                            gint offset, guint8 ext, gboolean extended)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3588:     tr = proto_tree_add_item (field_tree, hf_message_sec_cat_extended, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3589:     if ((message & 0x01) && (message & 0x02)) {",
          "3590:       expert_add_info(pinfo, tr, &ei_reserved_value);",
          "3592:       proto_item_append_text (tf, \" (extended)\");",
          "3594:     }",
          "3596:     if (country_code) {",
          "",
          "[Removed Lines]",
          "3591:     } else if (message & 0x01 || message & 0x02) {",
          "3593:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03);",
          "",
          "[Added Lines]",
          "3591:     } else if ((message & 0x01 || message & 0x02) && !extended) {",
          "3593:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3809:   if (dmp_sec_pol == NATO || dmp_sec_pol == NATIONAL || dmp_sec_pol == EXTENDED_NATIONAL) {",
          "3811:     proto_item_append_text (en, \", Security Label: %s\", label_string);",
          "3812:     tf = proto_tree_add_string (message_tree, hf_message_sec_label, tvb, loffset,",
          "3813:                                 offset - loffset + 1, label_string);",
          "",
          "[Removed Lines]",
          "3810:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0);",
          "",
          "[Added Lines]",
          "3810:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0, FALSE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de02ca72bf2e1e1dce42f9b020e613a788ad4cf",
      "candidate_info": {
        "commit_hash": "0de02ca72bf2e1e1dce42f9b020e613a788ad4cf",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0de02ca72bf2e1e1dce42f9b020e613a788ad4cf",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "DMP: Recurse only once.\n\nMake sure we call dissect_dmp_security_category from itself only once.\n\nBug: 14408\nChange-Id: Ia03fb32ca414e78ede572d3093b84f9d53ceb0b9\nReviewed-on: https://code.wireshark.org/review/25966\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3428: static gint dissect_dmp_security_category (tvbuff_t *tvb, packet_info *pinfo,",
          "3429:                                            proto_tree *tree,",
          "3430:                                            const gchar **label_string,",
          "3432: {",
          "3433:   proto_tree *field_tree = NULL;",
          "3434:   proto_item *tf = NULL, *tr = NULL;",
          "",
          "[Removed Lines]",
          "3431:                                            gint offset, guint8 ext)",
          "",
          "[Added Lines]",
          "3431:                                            gint offset, guint8 ext, gboolean extended)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3509:     tr = proto_tree_add_item (field_tree, hf_message_sec_cat_extended, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3510:     if ((message & 0x01) && (message & 0x02)) {",
          "3511:       expert_add_info(pinfo, tr, &ei_reserved_value);",
          "3513:       proto_item_append_text (tf, \" (extended)\");",
          "3515:     }",
          "3517:     if (country_code) {",
          "",
          "[Removed Lines]",
          "3512:     } else if (message & 0x01 || message & 0x02) {",
          "3514:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03);",
          "",
          "[Added Lines]",
          "3512:     } else if ((message & 0x01 || message & 0x02) && !extended) {",
          "3514:       offset = dissect_dmp_security_category (tvb, pinfo, tree, label_string, offset+1, message & 0x03, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3730:   if (dmp_sec_pol == NATO || dmp_sec_pol == NATIONAL || dmp_sec_pol == EXTENDED_NATIONAL) {",
          "3732:     proto_item_append_text (en, \", Security Label: %s\", label_string);",
          "3733:     tf = proto_tree_add_string (message_tree, hf_message_sec_label, tvb, loffset,",
          "3734:                                 offset - loffset + 1, label_string);",
          "",
          "[Removed Lines]",
          "3731:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0);",
          "",
          "[Added Lines]",
          "3731:     offset = dissect_dmp_security_category (tvb, pinfo, message_tree, &label_string, offset, 0, FALSE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}