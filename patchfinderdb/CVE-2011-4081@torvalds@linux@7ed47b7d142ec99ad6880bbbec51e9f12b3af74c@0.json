{
  "cve_id": "CVE-2011-4081",
  "cve_desc": "crypto/ghash-generic.c in the Linux kernel before 3.1 allows local users to cause a denial of service (NULL pointer dereference and OOPS) or possibly have unspecified other impact by triggering a failed or missing ghash_setkey function call, followed by a (1) ghash_update function call or (2) ghash_final function call, as demonstrated by a write operation on an AF_ALG socket.",
  "repo": "torvalds/linux",
  "patch_hash": "7ed47b7d142ec99ad6880bbbec51e9f12b3af74c",
  "patch_info": {
    "commit_hash": "7ed47b7d142ec99ad6880bbbec51e9f12b3af74c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7ed47b7d142ec99ad6880bbbec51e9f12b3af74c",
    "files": [
      "crypto/ghash-generic.c"
    ],
    "message": "crypto: ghash - Avoid null pointer dereference if no key is set\n\nThe ghash_update function passes a pointer to gf128mul_4k_lle which will\nbe NULL if ghash_setkey is not called or if the most recent call to\nghash_setkey failed to allocate memory.  This causes an oops.  Fix this\nup by returning an error code in the null case.\n\nThis is trivially triggered from unprivileged userspace through the\nAF_ALG interface by simply writing to the socket without setting a key.\n\nThe ghash_final function has a similar issue, but triggering it requires\na memory allocation failure in ghash_setkey _after_ at least one\nsuccessful call to ghash_update.\n\n  BUG: unable to handle kernel NULL pointer dereference at 00000670\n  IP: [<d88c92d4>] gf128mul_4k_lle+0x23/0x60 [gf128mul]\n  *pde = 00000000\n  Oops: 0000 [#1] PREEMPT SMP\n  Modules linked in: ghash_generic gf128mul algif_hash af_alg nfs lockd nfs_acl sunrpc bridge ipv6 stp llc\n\n  Pid: 1502, comm: hashatron Tainted: G        W   3.1.0-rc9-00085-ge9308cf #32 Bochs Bochs\n  EIP: 0060:[<d88c92d4>] EFLAGS: 00000202 CPU: 0\n  EIP is at gf128mul_4k_lle+0x23/0x60 [gf128mul]\n  EAX: d69db1f0 EBX: d6b8ddac ECX: 00000004 EDX: 00000000\n  ESI: 00000670 EDI: d6b8ddac EBP: d6b8ddc8 ESP: d6b8dda4\n   DS: 007b ES: 007b FS: 00d8 GS: 0033 SS: 0068\n  Process hashatron (pid: 1502, ti=d6b8c000 task=d6810000 task.ti=d6b8c000)\n  Stack:\n   00000000 d69db1f0 00000163 00000000 d6b8ddc8 c101a520 d69db1f0 d52aa000\n   00000ff0 d6b8dde8 d88d310f d6b8a3f8 d52aa000 00001000 d88d502c d6b8ddfc\n   00001000 d6b8ddf4 c11676ed d69db1e8 d6b8de24 c11679ad d52aa000 00000000\n  Call Trace:\n   [<c101a520>] ? kmap_atomic_prot+0x37/0xa6\n   [<d88d310f>] ghash_update+0x85/0xbe [ghash_generic]\n   [<c11676ed>] crypto_shash_update+0x18/0x1b\n   [<c11679ad>] shash_ahash_update+0x22/0x36\n   [<c11679cc>] shash_async_update+0xb/0xd\n   [<d88ce0ba>] hash_sendpage+0xba/0xf2 [algif_hash]\n   [<c121b24c>] kernel_sendpage+0x39/0x4e\n   [<d88ce000>] ? 0xd88cdfff\n   [<c121b298>] sock_sendpage+0x37/0x3e\n   [<c121b261>] ? kernel_sendpage+0x4e/0x4e\n   [<c10b4dbc>] pipe_to_sendpage+0x56/0x61\n   [<c10b4e1f>] splice_from_pipe_feed+0x58/0xcd\n   [<c10b4d66>] ? splice_from_pipe_begin+0x10/0x10\n   [<c10b51f5>] __splice_from_pipe+0x36/0x55\n   [<c10b4d66>] ? splice_from_pipe_begin+0x10/0x10\n   [<c10b6383>] splice_from_pipe+0x51/0x64\n   [<c10b63c2>] ? default_file_splice_write+0x2c/0x2c\n   [<c10b63d5>] generic_splice_sendpage+0x13/0x15\n   [<c10b4d66>] ? splice_from_pipe_begin+0x10/0x10\n   [<c10b527f>] do_splice_from+0x5d/0x67\n   [<c10b6865>] sys_splice+0x2bf/0x363\n   [<c129373b>] ? sysenter_exit+0xf/0x16\n   [<c104dc1e>] ? trace_hardirqs_on_caller+0x10e/0x13f\n   [<c129370c>] sysenter_do_call+0x12/0x32\n  Code: 83 c4 0c 5b 5e 5f c9 c3 55 b9 04 00 00 00 89 e5 57 8d 7d e4 56 53 8d 5d e4 83 ec 18 89 45 e0 89 55 dc 0f b6 70 0f c1 e6 04 01 d6 <f3> a5 be 0f 00 00 00 4e 89 d8 e8 48 ff ff ff 8b 45 e0 89 da 0f\n  EIP: [<d88c92d4>] gf128mul_4k_lle+0x23/0x60 [gf128mul] SS:ESP 0068:d6b8dda4\n  CR2: 0000000000000670\n  ---[ end trace 4eaa2a86a8e2da24 ]---\n  note: hashatron[1502] exited with preempt_count 1\n  BUG: scheduling while atomic: hashatron/1502/0x10000002\n  INFO: lockdep is turned off.\n  [...]\n\nSigned-off-by: Nick Bowler <nbowler@elliptictech.com>\nCc: stable@kernel.org [2.6.37+]\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
    "before_after_code_files": [
      "crypto/ghash-generic.c||crypto/ghash-generic.c"
    ]
  },
  "patch_diff": {
    "crypto/ghash-generic.c||crypto/ghash-generic.c": [
      "File: crypto/ghash-generic.c -> crypto/ghash-generic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:  struct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);",
      "68:  u8 *dst = dctx->buffer;",
      "70:  if (dctx->bytes) {",
      "71:   int n = min(srclen, dctx->bytes);",
      "72:   u8 *pos = dst + (GHASH_BLOCK_SIZE - dctx->bytes);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70:  if (!ctx->gf128)",
      "71:   return -ENOKEY;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119:  struct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);",
      "120:  u8 *buf = dctx->buffer;",
      "122:  ghash_flush(ctx, dctx);",
      "123:  memcpy(dst, buf, GHASH_BLOCK_SIZE);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "125:  if (!ctx->gf128)",
      "126:   return -ENOKEY;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f992ae801a7dec34a4ed99a6598bbbbfb82af4fb",
      "candidate_info": {
        "commit_hash": "f992ae801a7dec34a4ed99a6598bbbbfb82af4fb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f992ae801a7dec34a4ed99a6598bbbbfb82af4fb",
        "files": [
          "block/genhd.c",
          "fs/block_dev.c"
        ],
        "message": "block: make gendisk hold a reference to its queue\n\nThe following command sequence triggers an oops.\n\n# mount /dev/sdb1 /mnt\n# echo 1 > /sys/class/scsi_device/0\\:0\\:1\\:0/device/delete\n# umount /mnt\n\n general protection fault: 0000 [#1] PREEMPT SMP\n CPU 2\n Modules linked in:\n\n Pid: 791, comm: umount Not tainted 3.1.0-rc3-work+ #8 Bochs Bochs\n RIP: 0010:[<ffffffff810d0879>]  [<ffffffff810d0879>] __lock_acquire+0x389/0x1d60\n...\n Call Trace:\n  [<ffffffff810d2845>] lock_acquire+0x95/0x140\n  [<ffffffff81aed87b>] _raw_spin_lock+0x3b/0x50\n  [<ffffffff811573bc>] bdi_lock_two+0x5c/0x70\n  [<ffffffff811c2f6c>] bdev_inode_switch_bdi+0x4c/0xf0\n  [<ffffffff811c3fcb>] __blkdev_put+0x11b/0x1d0\n  [<ffffffff811c4010>] __blkdev_put+0x160/0x1d0\n  [<ffffffff811c40df>] blkdev_put+0x5f/0x190\n  [<ffffffff8118f18d>] kill_block_super+0x4d/0x80\n  [<ffffffff8118f4a5>] deactivate_locked_super+0x45/0x70\n  [<ffffffff8119003a>] deactivate_super+0x4a/0x70\n  [<ffffffff811ac4ad>] mntput_no_expire+0xed/0x130\n  [<ffffffff811acf2e>] sys_umount+0x7e/0x3a0\n  [<ffffffff81aeeeab>] system_call_fastpath+0x16/0x1b\n\nThis is because bdev holds on to disk but disk doesn't pin the\nassociated queue.  If a SCSI device is removed while the device is\nstill open, the sdev puts the base reference to the queue on release.\nWhen the bdev is finally released, the associated queue is already\ngone along with the bdi and bdev_inode_switch_bdi() ends up\ndereferencing already freed bdi.\n\nEven if it were not for this bug, disk not holding onto the associated\nqueue is very unusual and error-prone.\n\nFix it by making add_disk() take an extra reference to its queue and\nput it on disk_release() and ensuring that disk and its fops owner are\nput in that order after all accesses to the disk and queue are\ncomplete.\n\nSigned-off-by: Tejun Heo <tj@kernel.org>\nCc: Jens Axboe <axboe@kernel.dk>\nCc: stable@kernel.org\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "block/genhd.c||block/genhd.c",
          "fs/block_dev.c||fs/block_dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/genhd.c||block/genhd.c": [
          "File: block/genhd.c -> block/genhd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:  register_disk(disk);",
          "612:  blk_register_queue(disk);",
          "614:  retval = sysfs_create_link(&disk_to_dev(disk)->kobj, &bdi->dev->kobj,",
          "615:        \"bdi\");",
          "616:  WARN_ON(retval);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:  WARN_ON_ONCE(blk_get_queue(disk->queue));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1095:  disk_replace_part_tbl(disk, NULL);",
          "1096:  free_part_stats(&disk->part0);",
          "1097:  free_part_info(&disk->part0);",
          "1098:  kfree(disk);",
          "1099: }",
          "1100: struct class block_class = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  if (disk->queue)",
          "1105:   blk_put_queue(disk->queue);",
          "",
          "---------------"
        ],
        "fs/block_dev.c||fs/block_dev.c": [
          "File: fs/block_dev.c -> fs/block_dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085: static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)",
          "1086: {",
          "1087:  struct gendisk *disk;",
          "1088:  int ret;",
          "1089:  int partno;",
          "1090:  int perm = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088:  struct module *owner;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:  disk = get_gendisk(bdev->bd_dev, &partno);",
          "1111:  if (!disk)",
          "1112:   goto out;",
          "1114:  disk_block_events(disk);",
          "1115:  mutex_lock_nested(&bdev->bd_mutex, for_part);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:  owner = disk->fops->owner;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1137:      bdev->bd_disk = NULL;",
          "1138:      mutex_unlock(&bdev->bd_mutex);",
          "1139:      disk_unblock_events(disk);",
          "1141:      put_disk(disk);",
          "1142:      goto restart;",
          "1143:     }",
          "1144:    }",
          "",
          "[Removed Lines]",
          "1140:      module_put(disk->fops->owner);",
          "",
          "[Added Lines]",
          "1143:      module_put(owner);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1194:     goto out_unlock_bdev;",
          "1195:   }",
          "1198:   put_disk(disk);",
          "1199:  }",
          "1200:  bdev->bd_openers++;",
          "1201:  if (for_part)",
          "",
          "[Removed Lines]",
          "1197:   module_put(disk->fops->owner);",
          "",
          "[Added Lines]",
          "1200:   module_put(owner);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1215:  out_unlock_bdev:",
          "1216:  mutex_unlock(&bdev->bd_mutex);",
          "1217:  disk_unblock_events(disk);",
          "1219:  put_disk(disk);",
          "1220:  out:",
          "1221:  bdput(bdev);",
          "",
          "[Removed Lines]",
          "1218:  module_put(disk->fops->owner);",
          "",
          "[Added Lines]",
          "1221:  module_put(owner);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:  if (!bdev->bd_openers) {",
          "1443:   struct module *owner = disk->fops->owner;",
          "1447:   disk_put_part(bdev->bd_part);",
          "1448:   bdev->bd_part = NULL;",
          "1449:   bdev->bd_disk = NULL;",
          "1450:   if (bdev != bdev->bd_contains)",
          "1451:    victim = bdev->bd_contains;",
          "1452:   bdev->bd_contains = NULL;",
          "1453:  }",
          "1454:  mutex_unlock(&bdev->bd_mutex);",
          "1455:  bdput(bdev);",
          "",
          "[Removed Lines]",
          "1445:   put_disk(disk);",
          "1446:   module_put(owner);",
          "",
          "[Added Lines]",
          "1454:   put_disk(disk);",
          "1455:   module_put(owner);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a020436d8baf412bcf5997aee7796276ea773ae",
      "candidate_info": {
        "commit_hash": "0a020436d8baf412bcf5997aee7796276ea773ae",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0a020436d8baf412bcf5997aee7796276ea773ae",
        "files": [
          "drivers/target/loopback/tcm_loop.c"
        ],
        "message": "loopback: Prevent uninitialized use of tl_tpg in tcm_loop_queuecommand\n\nThis patch fixes a bug with tcm_loop where performing a scsi_host rescan was\ncausing an oops due to a received scsi_cmnd->device->id value not matching a\npreviously configured tcm_loop_tpg entry in tcm_loop_hba->tl_hba_tpgs[]\nobtained from within tcm_loop_queuecommand() code.\n\nThis fix adds an explict check for tcm_loop_tpg->tl_hba in order to ensure\ntcm_loop_make_naa_tpg() has already been invoked to initialize a given\ntcm_loop_tpg entry, and also adds an explict clear of tcm_loop_tpg->tl_hba\nfrom within the tcm_loop_drop_naa_tpg() release path.\n\nThis bug was manifesting itself with the following OOPs:\n\n[176289.430909] BUG: unable to handle kernel NULL pointer dereference at 0000000000000090\n[176289.431337] IP: [<ffffffffa0395617>] transport_processing_thread+0x1e3/0x794 [target_core_mod]\n[176289.431399] PGD 22e9b067 PUD 23375067 PMD 0\n[176289.431399] Oops: 0000 [#1] SMP\n[176289.431815] CPU 1\n[176289.431815] Modules linked in: tcm_loop target_core_stgt target_core_pscsi target_core_file target_core_iblock target_core_mod crc32c ib_cm ib_sa ib_mad ib_core qla2xxx scsi_tgt configfs fcoe libfcoe libfc scsi_transport_fc ipv6 iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi sr_mod cdrom sd_mod ata_piix libata e1000 mptspi mptscsih mptbase [last unloaded: target_core_mod]\n[176289.431815]\n[176289.431815] Pid: 12339, comm: LIO_iblock Tainted: G        W   3.1.0-rc8+\n[176289.431815] RIP: 0010:[<ffffffffa0395617>]  [<ffffffffa0395617>] transport_processing_thread+0x1e3/0x794 [target_core_mod]\n[176289.431815] RSP: 0018:ffff880023bfbe10  EFLAGS: 00010283\n[176289.431815] RAX: 0000000000000000 RBX: ffff88002d600040 RCX: ffff88002d600108\n[176289.431815] RDX: ffff88000c9e50bc RSI: 0000000000000246 RDI: 0000000000000246\n[176289.431815] RBP: ffff880023bfbee0 R08: ffff88002d600108 R09: 0000000000000000\n[176289.431815] R10: ffff88002fc8cc80 R11: ffffffff81671b60 R12: ffff88002d600108\n[176289.431815] R13: ffff88000c9e4f38 R14: ffff88000c9e50b8 R15: 0000000000000000\n[176289.431815] FS:  0000000000000000(0000) GS:ffff88002fc80000(0000) knlGS:0000000000000000\n[176289.431815] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b\n[176289.431815] CR2: 0000000000000090 CR3: 000000002a33f000 CR4: 00000000000006e0\n[176289.431815] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[176289.431815] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\n[176289.431815] Process LIO_iblock (pid: 12339, threadinfo ffff880023bfa000, task ffff88002a2e0000)\n[176289.431815] Stack:\n[176289.431815]  0000000000011280 0000000000000246 ffff88002a2e0000 ffff880023a58900\n[176289.431815]  ffff880023bfbed0 ffff880023bfa000 ffff880023bfa000 ffff88000c9e50d0\n[176289.431815]  ffff88000c9e50c0 ffff88000c9e50bc ffff880023bfa000 ffff880023bfbfd8\n[176289.431815] Call Trace:\n[176289.431815]  [<ffffffff81056657>] ? wake_up_bit+0x25/0x25\n[176289.431815]  [<ffffffffa0395434>] ? transport_handle_cdb_direct+0x92/0x92 [target_core_mod]\n[176289.431815]  [<ffffffff8105619a>] kthread+0x7d/0x85\n[176289.431815]  [<ffffffff813cbcb4>] kernel_thread_helper+0x4/0x10\n[176289.431815]  [<ffffffff8105611d>] ? kthread_worker_fn+0x16d/0x16d\n[176289.431815]  [<ffffffff813cbcb0>] ? gs_change+0x13/0x13\n[176289.431815] Code: 67 05 00 00 41 8b 84 24 4c ff ff ff ff c8 83 f8 11 0f 87 f0 04 00 00 89 c0 ff 24 c5 b0 c6 39 a0 0f 0b eb fe 48 8b 83 d8 00 00 00\n[176289.431815] RIP  [<ffffffffa0395617>] transport_processing_thread+0x1e3/0x794 [target_core_mod]\n[176289.431815]  RSP <ffff880023bfbe10>\n[176289.431815] CR2: 0000000000000090\n[176295.041004] ---[ end trace 85dc6865b23b8f3e ]---\n\nReported-by: Paolo Bonzini <pbonzini@redhat.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Nicholas Bellinger <nab@linux-iscsi.org>",
        "before_after_code_files": [
          "drivers/target/loopback/tcm_loop.c||drivers/target/loopback/tcm_loop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/target/loopback/tcm_loop.c||drivers/target/loopback/tcm_loop.c": [
          "File: drivers/target/loopback/tcm_loop.c -> drivers/target/loopback/tcm_loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:  tl_hba = *(struct tcm_loop_hba **)shost_priv(sc->device->host);",
          "292:  tl_tpg = &tl_hba->tl_hba_tpgs[sc->device->id];",
          "293:  se_tpg = &tl_tpg->tl_se_tpg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:  if (!tl_tpg->tl_hba) {",
          "298:   set_host_byte(sc, DID_NO_CONNECT);",
          "299:   sc->scsi_done(sc);",
          "300:   return 0;",
          "301:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1246:  core_tpg_deregister(se_tpg);",
          "1248:  pr_debug(\"TCM_Loop_ConfigFS: Deallocated Emulated %s\"",
          "1249:   \" Target Port %s,t,0x%04x\\n\", tcm_loop_dump_proto_id(tl_hba),",
          "1250:   config_item_name(&wwn->wwn_group.cg_item), tpgt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1257:  tl_tpg->tl_hba = NULL;",
          "1258:  tl_tpg->tl_tpgt = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23b1a99b87f3fc9e4242b98b2af3c9bed210f048",
      "candidate_info": {
        "commit_hash": "23b1a99b87f3fc9e4242b98b2af3c9bed210f048",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/23b1a99b87f3fc9e4242b98b2af3c9bed210f048",
        "files": [
          "drivers/mtd/nand/nand_base.c"
        ],
        "message": "mtd: nand: initialize ops.mode\n\nOur `ops' information was converted to a local variable recently, and\napparently, old code relied on the fact that the global version was\noften left in a valid mode. We can't make this assumption on local\nstructs, and we shouldn't be relying on a previous state anyway.\n\nInstead, we initialize mode to 0 for don't-care situations (i.e., the\noperation does not use OOB anyway) and MTD_OPS_PLACE_OOB when we want to\nplace OOB data.\n\nThis fixes a bug with nand_default_block_markbad(), where we catch on\nthe BUG() call in nand_fill_oob():\n\nKernel bug detected[#1]:\n...\nCall Trace:\n[<80307350>] nand_fill_oob.clone.5+0xa4/0x15c\n[<803075d8>] nand_do_write_oob+0x1d0/0x260\n[<803077c4>] nand_default_block_markbad+0x15c/0x1a8\n[<802e8c2c>] part_block_markbad+0x80/0x98\n[<802ebc74>] mtd_ioctl+0x6d8/0xbd0\n[<802ec1a4>] mtd_unlocked_ioctl+0x38/0x5c\n[<800d9c60>] do_vfs_ioctl+0xa4/0x6e4\n[<800da2e4>] sys_ioctl+0x44/0xa0\n[<8001381c>] stack_done+0x20/0x40\n\nSigned-off-by: Brian Norris <computersforpeace@gmail.com>\nSigned-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>",
        "before_after_code_files": [
          "drivers/mtd/nand/nand_base.c||drivers/mtd/nand/nand_base.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mtd/nand/nand_base.c||drivers/mtd/nand/nand_base.c": [
          "File: drivers/mtd/nand/nand_base.c -> drivers/mtd/nand/nand_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:   ops.datbuf = NULL;",
          "421:   ops.oobbuf = buf;",
          "422:   ops.ooboffs = chip->badblockpos & ~0x01;",
          "423:   do {",
          "424:    ret = nand_do_write_oob(mtd, ofs, &ops);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:   ops.mode = MTD_OPS_PLACE_OOB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:  ops.len = len;",
          "1597:  ops.datbuf = buf;",
          "1598:  ops.oobbuf = NULL;",
          "1600:  ret = nand_do_read_ops(mtd, from, &ops);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1600:  ops.mode = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2306:  ops.len = len;",
          "2307:  ops.datbuf = (uint8_t *)buf;",
          "2308:  ops.oobbuf = NULL;",
          "2310:  ret = nand_do_write_ops(mtd, to, &ops);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311:  ops.mode = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2341:  ops.len = len;",
          "2342:  ops.datbuf = (uint8_t *)buf;",
          "2343:  ops.oobbuf = NULL;",
          "2345:  ret = nand_do_write_ops(mtd, to, &ops);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2347:  ops.mode = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "523e1d399ce0e23bec562abe2b2f8d297af81161",
      "candidate_info": {
        "commit_hash": "523e1d399ce0e23bec562abe2b2f8d297af81161",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/523e1d399ce0e23bec562abe2b2f8d297af81161",
        "files": [
          "block/genhd.c",
          "fs/block_dev.c"
        ],
        "message": "block: make gendisk hold a reference to its queue\n\nThe following command sequence triggers an oops.\n\n# mount /dev/sdb1 /mnt\n# echo 1 > /sys/class/scsi_device/0\\:0\\:1\\:0/device/delete\n# umount /mnt\n\n general protection fault: 0000 [#1] PREEMPT SMP\n CPU 2\n Modules linked in:\n\n Pid: 791, comm: umount Not tainted 3.1.0-rc3-work+ #8 Bochs Bochs\n RIP: 0010:[<ffffffff810d0879>]  [<ffffffff810d0879>] __lock_acquire+0x389/0x1d60\n...\n Call Trace:\n  [<ffffffff810d2845>] lock_acquire+0x95/0x140\n  [<ffffffff81aed87b>] _raw_spin_lock+0x3b/0x50\n  [<ffffffff811573bc>] bdi_lock_two+0x5c/0x70\n  [<ffffffff811c2f6c>] bdev_inode_switch_bdi+0x4c/0xf0\n  [<ffffffff811c3fcb>] __blkdev_put+0x11b/0x1d0\n  [<ffffffff811c4010>] __blkdev_put+0x160/0x1d0\n  [<ffffffff811c40df>] blkdev_put+0x5f/0x190\n  [<ffffffff8118f18d>] kill_block_super+0x4d/0x80\n  [<ffffffff8118f4a5>] deactivate_locked_super+0x45/0x70\n  [<ffffffff8119003a>] deactivate_super+0x4a/0x70\n  [<ffffffff811ac4ad>] mntput_no_expire+0xed/0x130\n  [<ffffffff811acf2e>] sys_umount+0x7e/0x3a0\n  [<ffffffff81aeeeab>] system_call_fastpath+0x16/0x1b\n\nThis is because bdev holds on to disk but disk doesn't pin the\nassociated queue.  If a SCSI device is removed while the device is\nstill open, the sdev puts the base reference to the queue on release.\nWhen the bdev is finally released, the associated queue is already\ngone along with the bdi and bdev_inode_switch_bdi() ends up\ndereferencing already freed bdi.\n\nEven if it were not for this bug, disk not holding onto the associated\nqueue is very unusual and error-prone.\n\nFix it by making add_disk() take an extra reference to its queue and\nput it on disk_release() and ensuring that disk and its fops owner are\nput in that order after all accesses to the disk and queue are\ncomplete.\n\nSigned-off-by: Tejun Heo <tj@kernel.org>\nCc: stable@kernel.org\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "block/genhd.c||block/genhd.c",
          "fs/block_dev.c||fs/block_dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/genhd.c||block/genhd.c": [
          "File: block/genhd.c -> block/genhd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:  register_disk(disk);",
          "612:  blk_register_queue(disk);",
          "614:  retval = sysfs_create_link(&disk_to_dev(disk)->kobj, &bdi->dev->kobj,",
          "615:        \"bdi\");",
          "616:  WARN_ON(retval);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:  WARN_ON_ONCE(blk_get_queue(disk->queue));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1095:  disk_replace_part_tbl(disk, NULL);",
          "1096:  free_part_stats(&disk->part0);",
          "1097:  free_part_info(&disk->part0);",
          "1098:  kfree(disk);",
          "1099: }",
          "1100: struct class block_class = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  if (disk->queue)",
          "1105:   blk_put_queue(disk->queue);",
          "",
          "---------------"
        ],
        "fs/block_dev.c||fs/block_dev.c": [
          "File: fs/block_dev.c -> fs/block_dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085: static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)",
          "1086: {",
          "1087:  struct gendisk *disk;",
          "1088:  int ret;",
          "1089:  int partno;",
          "1090:  int perm = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088:  struct module *owner;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:  disk = get_gendisk(bdev->bd_dev, &partno);",
          "1111:  if (!disk)",
          "1112:   goto out;",
          "1114:  disk_block_events(disk);",
          "1115:  mutex_lock_nested(&bdev->bd_mutex, for_part);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:  owner = disk->fops->owner;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1137:      bdev->bd_disk = NULL;",
          "1138:      mutex_unlock(&bdev->bd_mutex);",
          "1139:      disk_unblock_events(disk);",
          "1141:      put_disk(disk);",
          "1142:      goto restart;",
          "1143:     }",
          "1144:    }",
          "",
          "[Removed Lines]",
          "1140:      module_put(disk->fops->owner);",
          "",
          "[Added Lines]",
          "1143:      module_put(owner);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1194:     goto out_unlock_bdev;",
          "1195:   }",
          "1198:   put_disk(disk);",
          "1199:  }",
          "1200:  bdev->bd_openers++;",
          "1201:  if (for_part)",
          "",
          "[Removed Lines]",
          "1197:   module_put(disk->fops->owner);",
          "",
          "[Added Lines]",
          "1200:   module_put(owner);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1215:  out_unlock_bdev:",
          "1216:  mutex_unlock(&bdev->bd_mutex);",
          "1217:  disk_unblock_events(disk);",
          "1219:  put_disk(disk);",
          "1220:  out:",
          "1221:  bdput(bdev);",
          "",
          "[Removed Lines]",
          "1218:  module_put(disk->fops->owner);",
          "",
          "[Added Lines]",
          "1221:  module_put(owner);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:  if (!bdev->bd_openers) {",
          "1443:   struct module *owner = disk->fops->owner;",
          "1447:   disk_put_part(bdev->bd_part);",
          "1448:   bdev->bd_part = NULL;",
          "1449:   bdev->bd_disk = NULL;",
          "1450:   if (bdev != bdev->bd_contains)",
          "1451:    victim = bdev->bd_contains;",
          "1452:   bdev->bd_contains = NULL;",
          "1453:  }",
          "1454:  mutex_unlock(&bdev->bd_mutex);",
          "1455:  bdput(bdev);",
          "",
          "[Removed Lines]",
          "1445:   put_disk(disk);",
          "1446:   module_put(owner);",
          "",
          "[Added Lines]",
          "1454:   put_disk(disk);",
          "1455:   module_put(owner);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87e040b6456fd3416a1f6831c1eedaef5c0a94ff",
      "candidate_info": {
        "commit_hash": "87e040b6456fd3416a1f6831c1eedaef5c0a94ff",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/87e040b6456fd3416a1f6831c1eedaef5c0a94ff",
        "files": [
          "arch/arm/Kconfig",
          "arch/arm/include/asm/bug.h",
          "arch/arm/kernel/traps.c",
          "arch/arm/kernel/vmlinux.lds.S"
        ],
        "message": "ARM: 7017/1: Use generic BUG() handler\n\nARM uses its own BUG() handler which makes its output slightly different\nfrom other archtectures.\n\nOne of the problems is that the ARM implementation doesn't report the function\nwith the BUG() in it, but always reports the PC being in __bug(). The generic\nimplementation doesn't have this problem.\n\nCurrently we get something like:\n\nkernel BUG at fs/proc/breakme.c:35!\nUnable to handle kernel NULL pointer dereference at virtual address 00000000\n...\nPC is at __bug+0x20/0x2c\n\nWith this patch it displays:\n\nkernel BUG at fs/proc/breakme.c:35!\nInternal error: Oops - undefined instruction: 0 [#1] PREEMPT SMP\n...\nPC is at write_breakme+0xd0/0x1b4\n\nThis implementation uses an undefined instruction to implement BUG, and sets up\na bug table containing the relevant information. Many versions of gcc do not\nsupport %c properly for ARM (inserting a # when they shouldn't) so we work\naround this using distasteful macro magic.\n\nv1: Initial version to replace existing ARM BUG() implementation with something\nmore similar to other architectures.\n\nv2: Add Thumb support, remove backtrace whitespace output changes. Change to\nuse macros instead of requiring the asm %d flag to work (thanks to\nDave Martin <dave.martin@linaro.org>)\n\nv3: Remove old BUG() implementation in favor of this one.\nRemove the Backtrace: message (will submit this separately).\nUse ARM_EXIT_KEEP() so that some architectures can dump exit text at link time\nthanks to Stephen Boyd <sboyd@codeaurora.org> (although since we always\ndefine GENERIC_BUG this might be academic.)\nRebase to linux-2.6.git master.\n\nv4: Allow BUGS in modules (these were not reported correctly in v3)\n(thanks to Stephen Boyd <sboyd@codeaurora.org> for suggesting that.)\nRemove __bug() as this is no longer needed.\n\nv5: Add %progbits as the section flags.\n\nSigned-off-by: Simon Glass <sjg@chromium.org>\nReviewed-by: Stephen Boyd <sboyd@codeaurora.org>\nTested-by: Stephen Boyd <sboyd@codeaurora.org>\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>",
        "before_after_code_files": [
          "arch/arm/include/asm/bug.h||arch/arm/include/asm/bug.h",
          "arch/arm/kernel/traps.c||arch/arm/kernel/traps.c",
          "arch/arm/kernel/vmlinux.lds.S||arch/arm/kernel/vmlinux.lds.S"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/arm/include/asm/bug.h||arch/arm/include/asm/bug.h": [
          "File: arch/arm/include/asm/bug.h -> arch/arm/include/asm/bug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #ifdef CONFIG_BUG",
          "12: #else",
          "19: #define HAVE_ARCH_BUG",
          "22: #include <asm-generic/bug.h>",
          "",
          "[Removed Lines]",
          "6: #ifdef CONFIG_DEBUG_BUGVERBOSE",
          "7: extern void __bug(const char *file, int line) __attribute__((noreturn));",
          "10: #define BUG()  __bug(__FILE__, __LINE__)",
          "15: #define BUG()  do { *(int *)0 = 0; } while (1)",
          "17: #endif",
          "20: #endif",
          "",
          "[Added Lines]",
          "12: #ifdef CONFIG_THUMB2_KERNEL",
          "13: #define BUG_INSTR_VALUE 0xde02",
          "14: #define BUG_INSTR_TYPE \".hword \"",
          "16: #define BUG_INSTR_VALUE 0xe7f001f2",
          "17: #define BUG_INSTR_TYPE \".word \"",
          "18: #endif",
          "21: #define BUG() _BUG(__FILE__, __LINE__, BUG_INSTR_VALUE)",
          "22: #define _BUG(file, line, value) __BUG(file, line, value)",
          "24: #ifdef CONFIG_DEBUG_BUGVERBOSE",
          "33: #define __BUG(__file, __line, __value)    \\",
          "34: do {        \\",
          "35:  BUILD_BUG_ON(sizeof(struct bug_entry) != 12);  \\",
          "36:  asm volatile(\"1:\\t\" BUG_INSTR_TYPE #__value \"\\n\" \\",
          "37:   \".pushsection .rodata.str, \\\"aMS\\\", %progbits, 1\\n\" \\",
          "38:   \"2:\\t.asciz \" #__file \"\\n\"    \\",
          "39:   \".popsection\\n\"     \\",
          "40:   \".pushsection __bug_table,\\\"a\\\"\\n\"  \\",
          "41:   \"3:\\t.word 1b, 2b\\n\"    \\",
          "42:   \"\\t.hword \" #__line \", 0\\n\"   \\",
          "43:   \".popsection\");     \\",
          "44:  unreachable();      \\",
          "45: } while (0)",
          "49: #define __BUG(__file, __line, __value)    \\",
          "50: do {        \\",
          "51:  asm volatile(BUG_INSTR_TYPE #__value);   \\",
          "52:  unreachable();      \\",
          "53: } while (0)",
          "",
          "---------------"
        ],
        "arch/arm/kernel/traps.c||arch/arm/kernel/traps.c": [
          "File: arch/arm/kernel/traps.c -> arch/arm/kernel/traps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <linux/kdebug.h>",
          "22: #include <linux/module.h>",
          "23: #include <linux/kexec.h>",
          "24: #include <linux/delay.h>",
          "25: #include <linux/init.h>",
          "26: #include <linux/sched.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <linux/bug.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:  spin_lock_irq(&die_lock);",
          "271:  console_verbose();",
          "272:  bust_spinlocks(1);",
          "273:  ret = __die(str, err, thread, regs);",
          "275:  if (regs && kexec_should_crash(thread->task))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:  if (!user_mode(regs))",
          "275:   report_bug(regs->ARM_pc, regs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:  }",
          "302: }",
          "304: static LIST_HEAD(undef_hook);",
          "305: static DEFINE_SPINLOCK(undef_lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: #ifdef CONFIG_GENERIC_BUG",
          "309: int is_valid_bugaddr(unsigned long pc)",
          "310: {",
          "311: #ifdef CONFIG_THUMB2_KERNEL",
          "312:  unsigned short bkpt;",
          "313: #else",
          "314:  unsigned long bkpt;",
          "315: #endif",
          "317:  if (probe_kernel_address((unsigned *)pc, bkpt))",
          "318:   return 0;",
          "320:  return bkpt == BUG_INSTR_VALUE;",
          "321: }",
          "323: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "706:  arm_notify_die(\"unknown data abort code\", regs, &info, instr, 0);",
          "707: }",
          "719: void __readwrite_bug(const char *fn)",
          "720: {",
          "721:  printk(\"%s called, but not implemented\\n\", fn);",
          "",
          "[Removed Lines]",
          "709: void __attribute__((noreturn)) __bug(const char *file, int line)",
          "710: {",
          "711:  printk(KERN_CRIT\"kernel BUG at %s:%d!\\n\", file, line);",
          "715:  for (;;);",
          "716: }",
          "717: EXPORT_SYMBOL(__bug);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/arm/kernel/vmlinux.lds.S||arch/arm/kernel/vmlinux.lds.S": [
          "File: arch/arm/kernel/vmlinux.lds.S -> arch/arm/kernel/vmlinux.lds.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define ARM_CPU_KEEP(x)",
          "22: #endif",
          "25: #define ARM_EXIT_KEEP(x) x",
          "26: #else",
          "27: #define ARM_EXIT_KEEP(x)",
          "",
          "[Removed Lines]",
          "24: #if defined(CONFIG_SMP_ON_UP) && !defined(CONFIG_DEBUG_SPINLOCK)",
          "",
          "[Added Lines]",
          "24: #if (defined(CONFIG_SMP_ON_UP) && !defined(CONFIG_DEBUG_SPINLOCK)) || \\",
          "25:  defined(CONFIG_GENERIC_BUG)",
          "",
          "---------------"
        ]
      }
    }
  ]
}