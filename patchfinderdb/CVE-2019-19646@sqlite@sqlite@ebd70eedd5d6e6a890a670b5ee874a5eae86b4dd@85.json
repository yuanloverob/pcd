{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
      "candidate_info": {
        "commit_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Fix the OP_Affinity operator so that when applying REAL affinity, it only sets MEM_IntReal if the integer value will fit in 6 bytes or less. Fix for ticket [ba2f4585cf495231]\n\nFossilOrigin-Name: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cea8a892f76bddc63b921ffc11ea8dce8f8cf649a2c77aa908c7c5c91eed7f4c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:     assert( memIsValid(pIn1) );",
          "2818:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2819:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2824:     }",
          "2825:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2826:     zAffinity++;",
          "",
          "[Removed Lines]",
          "2822:       pIn1->flags |= MEM_IntReal;",
          "2823:       pIn1->flags &= ~MEM_Int;",
          "",
          "[Added Lines]",
          "2824:       testcase( pIn1->u.i==140737488355328LL );",
          "2825:       testcase( pIn1->u.i==140737488355327LL );",
          "2826:       testcase( pIn1->u.i==-140737488355328LL );",
          "2827:       testcase( pIn1->u.i==-140737488355329LL );",
          "2828:       if( pIn1->u.i<=140737488355327LL && pIn1->u.i>=-140737488355328LL ){",
          "2829:         pIn1->flags |= MEM_IntReal;",
          "2830:         pIn1->flags &= ~MEM_Int;",
          "2831:       }else{",
          "2832:         pIn1->u.r = (double)pIn1->u.i;",
          "2833:         pIn1->flags |= MEM_Real;",
          "2834:         pIn1->flags &= ~MEM_Int;",
          "2835:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   );",
          "83: } [list a $D]",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # 2019-07-29 ticket ba2f4585cf495231",
          "86: #",
          "87: db close",
          "88: sqlite3 db :memory:",
          "89: do_execsql_test 3.0 {",
          "90:   CREATE TABLE t0 (c0 REAL, c1);",
          "91:   CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
          "92:   INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
          "93:   UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
          "94:   SELECT * FROM t0 ORDER BY t0.c1;",
          "95:   PRAGMA integrity_check;",
          "96: } {a {} ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
      "candidate_info": {
        "commit_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27a037354c9bc67a65f84e45584dc67c24c15f58",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a division-by-zero error in fts5 caused by a corrupt database.\n\nFossilOrigin-Name: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:     if( rc==SQLITE_OK ) rc = pApi->xRowCount(pFts, &nRow);",
          "589:     if( rc==SQLITE_OK ) rc = pApi->xColumnTotalSize(pFts, -1, &nToken);",
          "590:     if( rc==SQLITE_OK ) p->avgdl = (double)nToken  / (double)nRow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     assert( rc!=SQLITE_OK || nRow>0 );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1078: int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){",
          "1079:   int rc = fts5StorageLoadTotals(p, 0);",
          "1080:   if( rc==SQLITE_OK ){",
          "1082:   }",
          "1083:   return rc;",
          "1084: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:     if( p->nTotalRow<=0 ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "4657: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4655: #-------------------------------------------------------------------------",
          "4656: reset_db",
          "4657: do_execsql_test 38.0 {",
          "4658:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4659:   INSERT INTO t1 VALUES('a', 'b');",
          "4660:   INSERT INTO t1 VALUES('a', 'b');",
          "4661:   SELECT quote(block) FROM t1_data WHERE rowid=1;",
          "4662: } {X'020202'}",
          "4664: do_execsql_test 38.1 {",
          "4665:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4666: } {a b a b}",
          "4668: do_execsql_test 38.2 {",
          "4669:   UPDATE t1_data SET block = X'000202' WHERE rowid=1;",
          "4670: }",
          "4671: breakpoint",
          "4672: do_catchsql_test 38.3 {",
          "4673:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4674: } {1 {database disk image is malformed}}",
          "4676: db close",
          "4677: sqlite3 db test.db",
          "4678: do_catchsql_test 38.4 {",
          "4679:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4680: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cd56cad5efead5097e9918c87313bb46e583fe62bae0df1be60e10117e2c3cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb265343a9d10264ba4410dcc8fed2f467ebbb44",
      "candidate_info": {
        "commit_hash": "eb265343a9d10264ba4410dcc8fed2f467ebbb44",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eb265343a9d10264ba4410dcc8fed2f467ebbb44",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Ensure that the sqlite3BtreeLast() interface initializes the *pRes return to zero if the cursor is already sitting on the last entry of the table.\n\nFossilOrigin-Name: ebe4845cd0ffb96b30be3c69eb399d58e93149886bc2fa60a7ebd7b4fbe447a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 51d32173ff1f610b5d75a50f20fa1e0e4e22046299869e3b82e0bb446dba890c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    },
    {
      "candidate_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
      "candidate_info": {
        "commit_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/without_rowid1.test"
        ],
        "message": "Fix the xferCompatibleIndex() function so that it recognizes that a PRIMARY KEY index for a WITHOUT ROWID table is different from a UNIQUE constraint index on the primary key.  Ticket [302027baf1374498]\n\nFossilOrigin-Name: 34f64f11ca481996b1ff1686bdc5e278946635b6856cd1fe2355fce8e298e0f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 104a2beb57037f9353ffa77096aae0eb64e4682e667f31623bfd3d064dd8d881",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2367:   int i;",
          "2368:   assert( pDest && pSrc );",
          "2369:   assert( pDest->pTable!=pSrc->pTable );",
          "2372:   }",
          "2373:   if( pDest->onError!=pSrc->onError ){",
          "",
          "[Removed Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol ){",
          "",
          "[Added Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol || pDest->nColumn!=pSrc->nColumn ){",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   PRAGMA integrity_check;",
          "431: } {ok}",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: # 2019-11-07 ticket https://www.sqlite.org/src/info/302027baf1374498",
          "434: # The xferCompatibleIndex() function confuses a PRIMARY KEY index",
          "435: # with a UNIQUE index.",
          "436: #",
          "437: do_execsql_test 13.10 {",
          "438:   DROP TABLE IF EXISTS t0;",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t0(",
          "441:     c0,",
          "442:     c1 UNIQUE,",
          "443:     PRIMARY KEY(c1, c1)",
          "444:   ) WITHOUT ROWID;",
          "445:   INSERT INTO t0(c0,c1) VALUES('abc','xyz');",
          "446:   CREATE TABLE t1(",
          "447:     c0,",
          "448:     c1 UNIQUE,",
          "449:     PRIMARY KEY(c1, c1)",
          "450:   ) WITHOUT ROWID;",
          "451:   INSERT INTO t1 SELECT * FROM t0;",
          "452:   PRAGMA integrity_check;",
          "453:   SELECT * FROM t0, t1;",
          "454: } {ok abc xyz abc xyz}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efb02281a4266251292590b5e77ad56be22d1af9",
      "candidate_info": {
        "commit_hash": "efb02281a4266251292590b5e77ad56be22d1af9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efb02281a4266251292590b5e77ad56be22d1af9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c"
        ],
        "message": "Change sqlite3SelectDup() to always return NULL if an OOM has occurred.\n\nFossilOrigin-Name: 01ba4641ab436c6065c8725908fc0913f2abded4ea62e004b7534e0116b9451a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   int i;",
          "1417:   RenameCtx *p = pWalker->u.pRename;",
          "1418:   SrcList *pSrc = pSelect->pSrc;",
          "1421:     return WRC_Abort;",
          "1422:   }",
          "1423:   for(i=0; i<pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "1419:   if( pSrc==0 ){",
          "1420:     assert( pWalker->pParse->db->mallocFailed );",
          "",
          "[Added Lines]",
          "1419:   if( NEVER(pSrc==0) ){",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4143: void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){",
          "4144:   int i;",
          "4145:   struct SrcList_item *pItem;",
          "4148:     for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "4149:       if( pItem->iCursor>=0 ) break;",
          "4150:       pItem->iCursor = pParse->nTab++;",
          "",
          "[Removed Lines]",
          "4146:   assert(pList || pParse->db->mallocFailed );",
          "4147:   if( pList ){",
          "",
          "[Added Lines]",
          "4146:   if( ALWAYS(pList) ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:     pNext = pNew;",
          "1531:   }",
          "1533:   return pRet;",
          "1534: }",
          "1535: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1533:   if( db->mallocFailed ){",
          "1534:     sqlite3SelectDelete(db, pRet);",
          "1535:     pRet = 0;",
          "1536:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}