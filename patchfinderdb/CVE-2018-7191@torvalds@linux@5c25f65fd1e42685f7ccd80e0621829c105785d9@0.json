{
  "cve_id": "CVE-2018-7191",
  "cve_desc": "In the tun subsystem in the Linux kernel before 4.13.14, dev_get_valid_name is not called before register_netdevice. This allows local users to cause a denial of service (NULL pointer dereference and panic) via an ioctl(TUNSETIFF) call with a dev name containing a / character. This is similar to CVE-2013-4343.",
  "repo": "torvalds/linux",
  "patch_hash": "5c25f65fd1e42685f7ccd80e0621829c105785d9",
  "patch_info": {
    "commit_hash": "5c25f65fd1e42685f7ccd80e0621829c105785d9",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5c25f65fd1e42685f7ccd80e0621829c105785d9",
    "files": [
      "drivers/net/tun.c"
    ],
    "message": "tun: allow positive return values on dev_get_valid_name() call\n\nIf the name argument of dev_get_valid_name() contains \"%d\", it will try\nto assign it a unit number in __dev__alloc_name() and return either the\nunit number (>= 0) or an error code (< 0).\nConsidering positive values as error values prevent tun device creations\nrelying this mechanism, therefor we should only consider negative values\nas errors here.\n\nSigned-off-by: Julien Gomes <julien@arista.com>\nAcked-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/net/tun.c||drivers/net/tun.c"
    ]
  },
  "patch_diff": {
    "drivers/net/tun.c||drivers/net/tun.c": [
      "File: drivers/net/tun.c -> drivers/net/tun.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2028:   if (!dev)",
      "2029:    return -ENOMEM;",
      "2030:   err = dev_get_valid_name(net, dev, name);",
      "2032:    goto err_free_dev;",
      "2034:   dev_net_set(dev, net);",
      "",
      "[Removed Lines]",
      "2031:   if (err)",
      "",
      "[Added Lines]",
      "2031:   if (err < 0)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ad646c81b2182f7fa67ec0c8c825e0ee165696d",
      "candidate_info": {
        "commit_hash": "0ad646c81b2182f7fa67ec0c8c825e0ee165696d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0ad646c81b2182f7fa67ec0c8c825e0ee165696d",
        "files": [
          "drivers/net/tun.c",
          "include/linux/netdevice.h",
          "net/core/dev.c"
        ],
        "message": "tun: call dev_get_valid_name() before register_netdevice()\n\nregister_netdevice() could fail early when we have an invalid\ndev name, in which case ->ndo_uninit() is not called. For tun\ndevice, this is a problem because a timer etc. are already\ninitialized and it expects ->ndo_uninit() to clean them up.\n\nWe could move these initializations into a ->ndo_init() so\nthat register_netdevice() knows better, however this is still\ncomplicated due to the logic in tun_detach().\n\nTherefore, I choose to just call dev_get_valid_name() before\nregister_netdevice(), which is quicker and much easier to audit.\nAnd for this specific case, it is already enough.\n\nFixes: 96442e42429e (\"tuntap: choose the txq based on rxq\")\nReported-by: Dmitry Alexeev <avekceeb@gmail.com>\nCc: Jason Wang <jasowang@redhat.com>\nCc: \"Michael S. Tsirkin\" <mst@redhat.com>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/tun.c||drivers/net/tun.c",
          "include/linux/netdevice.h||include/linux/netdevice.h",
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/tun.c||drivers/net/tun.c"
          ],
          "candidate": [
            "drivers/net/tun.c||drivers/net/tun.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/tun.c||drivers/net/tun.c": [
          "File: drivers/net/tun.c -> drivers/net/tun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:   if (!dev)",
          "2029:    return -ENOMEM;",
          "2031:   dev_net_set(dev, net);",
          "2032:   dev->rtnl_link_ops = &tun_link_ops;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2030:   err = dev_get_valid_name(net, dev, name);",
          "2031:   if (err)",
          "2032:    goto err_free_dev;",
          "",
          "---------------"
        ],
        "include/linux/netdevice.h||include/linux/netdevice.h": [
          "File: include/linux/netdevice.h -> include/linux/netdevice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3694:         unsigned char name_assign_type,",
          "3695:         void (*setup)(struct net_device *),",
          "3696:         unsigned int txqs, unsigned int rxqs);",
          "3697: #define alloc_netdev(sizeof_priv, name, name_assign_type, setup) \\",
          "3698:  alloc_netdev_mqs(sizeof_priv, name, name_assign_type, setup, 1, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3697: int dev_get_valid_name(struct net *net, struct net_device *dev,",
          "3698:          const char *name);",
          "",
          "---------------"
        ],
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1147:  return ret;",
          "1148: }",
          "1153: {",
          "1154:  BUG_ON(!net);",
          "",
          "[Removed Lines]",
          "1150: static int dev_get_valid_name(struct net *net,",
          "1151:          struct net_device *dev,",
          "1152:          const char *name)",
          "",
          "[Added Lines]",
          "1150: int dev_get_valid_name(struct net *net, struct net_device *dev,",
          "1151:          const char *name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1166:  return 0;",
          "1167: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1167: EXPORT_SYMBOL(dev_get_valid_name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}