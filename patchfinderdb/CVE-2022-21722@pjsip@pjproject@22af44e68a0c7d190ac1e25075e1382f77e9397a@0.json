{
  "cve_id": "CVE-2022-21722",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In version 2.11.1 and prior, there are various cases where it is possible that certain incoming RTP/RTCP packets can potentially cause out-of-bound read access. This issue affects all users that use PJMEDIA and accept incoming RTP/RTCP. A patch is available as a commit in the `master` branch. There are no known workarounds.",
  "repo": "pjsip/pjproject",
  "patch_hash": "22af44e68a0c7d190ac1e25075e1382f77e9397a",
  "patch_info": {
    "commit_hash": "22af44e68a0c7d190ac1e25075e1382f77e9397a",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/22af44e68a0c7d190ac1e25075e1382f77e9397a",
    "files": [
      "pjmedia/src/pjmedia/rtcp.c",
      "pjmedia/src/pjmedia/rtcp_fb.c",
      "pjmedia/src/pjmedia/rtp.c"
    ],
    "message": "Merge pull request from GHSA-m66q-q64c-hv36\n\n* Prevent OOB read during RTP/RTCP parsing\n\n* Add log\n\n* Add more logs",
    "before_after_code_files": [
      "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
      "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c",
      "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c"
    ]
  },
  "patch_diff": {
    "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c": [
      "File: pjmedia/src/pjmedia/rtcp.c -> pjmedia/src/pjmedia/rtcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "504:     if (common->pt == RTCP_SR) {",
      "505:  sr = (pjmedia_rtcp_sr*) (((char*)pkt) + sizeof(pjmedia_rtcp_common));",
      "506:  if (common->count > 0 && size >= (sizeof(pjmedia_rtcp_sr_pkt))) {",
      "507:      rr = (pjmedia_rtcp_rr*)(((char*)pkt) + (sizeof(pjmedia_rtcp_common)",
      "508:         + sizeof(pjmedia_rtcp_sr)));",
      "509:  }",
      "510:     } else if (common->pt == RTCP_RR && common->count > 0) {",
      "511:  rr = (pjmedia_rtcp_rr*)(((char*)pkt) + sizeof(pjmedia_rtcp_common));",
      "512: #if defined(PJMEDIA_HAS_RTCP_XR) && (PJMEDIA_HAS_RTCP_XR != 0)",
      "513:     } else if (common->pt == RTCP_XR) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "505:         if (sizeof (pjmedia_rtcp_common) + sizeof (pjmedia_rtcp_sr) > size) {",
      "506:      TRACE_((sess->name, \"Discarding RTCP SR due to truncated size \"",
      "507:         \"%d bytes\", size));",
      "508:             return;",
      "509:         }",
      "516:  if (sizeof (pjmedia_rtcp_common) + sizeof (pjmedia_rtcp_rr) > size) {",
      "517:      TRACE_((sess->name, \"Discarding RTCP RR due to truncated size \"",
      "518:         \"%d bytes\", size));",
      "519:      return;",
      "520:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "826:     p = (pj_uint8_t*)pkt;",
      "827:     p_end = p + size;",
      "828:     while (p < p_end) {",
      "830:  unsigned len;",
      "832:  len = (pj_ntohs((pj_uint16_t)common->length)+1) * 4;",
      "834:      break;",
      "836:  switch(common->pt) {",
      "837:  case RTCP_SR:",
      "",
      "[Removed Lines]",
      "829:  pjmedia_rtcp_common *common = (pjmedia_rtcp_common*)p;",
      "833:  if (p + len > p_end)",
      "",
      "[Added Lines]",
      "839:  pjmedia_rtcp_common *common;",
      "842:  if (p + sizeof(pjmedia_rtcp_common) > p_end) {",
      "843:      TRACE_((sess->name, \"Receiving truncated RTCP packet (1)\"));",
      "844:      break;",
      "845:  }",
      "846:  common = (pjmedia_rtcp_common*)p;",
      "849:  if (p + len > p_end) {",
      "850:      TRACE_((sess->name, \"Receiving truncated RTCP packet (2)\"));",
      "852:  }",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c": [
      "File: pjmedia/src/pjmedia/rtcp_fb.c -> pjmedia/src/pjmedia/rtcp_fb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "631:     if (hdr->pt != RTCP_RTPFB || hdr->count != 1)",
      "632:  return PJ_ENOTFOUND;",
      "635:     if (length < (cnt+3)*4)",
      "636:  return PJ_ETOOSMALL;",
      "",
      "[Removed Lines]",
      "634:     cnt = pj_ntohs((pj_uint16_t)hdr->length) - 2;",
      "",
      "[Added Lines]",
      "634:     cnt = pj_ntohs((pj_uint16_t)hdr->length);",
      "635:     if (cnt > 2) cnt -= 2; else cnt = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "663:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
      "665:     PJ_ASSERT_RETURN(buf, PJ_EINVAL);",
      "669:     if (hdr->pt != RTCP_PSFB || hdr->count != 1)",
      "",
      "[Removed Lines]",
      "666:     PJ_ASSERT_RETURN(length >= 12, PJ_ETOOSMALL);",
      "",
      "[Added Lines]",
      "668:     if (length < 12)",
      "669:      return PJ_ETOOSMALL;",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c": [
      "File: pjmedia/src/pjmedia/rtp.c -> pjmedia/src/pjmedia/rtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:     if ((*hdr)->x) {",
      "193:         dec_hdr->ext_hdr = (pjmedia_rtp_ext_hdr*)(((pj_uint8_t*)pkt) + offset);",
      "194:         dec_hdr->ext = (pj_uint32_t*)(dec_hdr->ext_hdr + 1);",
      "195:         dec_hdr->ext_len = pj_ntohs((dec_hdr->ext_hdr)->length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "193:         if (offset + sizeof (pjmedia_rtp_ext_hdr) > pkt_len)",
      "194:             return PJMEDIA_RTP_EINLEN;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7faf16f14551dec55aabc963a227f983bbd2fd9c",
      "candidate_info": {
        "commit_hash": "7faf16f14551dec55aabc963a227f983bbd2fd9c",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/7faf16f14551dec55aabc963a227f983bbd2fd9c",
        "files": [
          "pjmedia/include/pjmedia/rtcp.h",
          "pjmedia/src/pjmedia/rtcp.c",
          "pjmedia/src/pjmedia/rtcp_fb.c"
        ],
        "message": "Merge pull request from GHSA-vhxv-phmx-g52q\n\n* Prevent OOB read/write when parsing RTCP FB RPSI\n\n* Add log information\n\n* Modification based on comments.",
        "before_after_code_files": [
          "pjmedia/include/pjmedia/rtcp.h||pjmedia/include/pjmedia/rtcp.h",
          "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
          "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
            "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
            "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/include/pjmedia/rtcp.h||pjmedia/include/pjmedia/rtcp.h": [
          "File: pjmedia/include/pjmedia/rtcp.h -> pjmedia/include/pjmedia/rtcp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: } pjmedia_rtcp_common;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: typedef struct pjmedia_rtcp_fb_common",
          "122: {",
          "123:     pjmedia_rtcp_common rtcp_common;",
          "125: } pjmedia_rtcp_fb_common;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     pjmedia_rtcp_fb_common  rtcp_fb_com;/**< Cached RTCP feedback common",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c": [
          "File: pjmedia/src/pjmedia/rtcp.c -> pjmedia/src/pjmedia/rtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     sess->rtcp_rr_pkt.common.pt = RTCP_RR;",
          "243:     sess->rtcp_rr_pkt.common.length = pj_htons(7);",
          "246:     pj_gettimeofday(&now);",
          "247:     sess->tv_base = now;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     pj_memcpy(&sess->rtcp_fb_com, &sr_pkt->common,",
          "247:        sizeof(pjmedia_rtcp_common));",
          "248:     sess->rtcp_fb_com.ssrc_src = 0;",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c": [
          "File: pjmedia/src/pjmedia/rtcp_fb.c -> pjmedia/src/pjmedia/rtcp_fb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:      unsigned nack_cnt,",
          "44:      const pjmedia_rtcp_fb_nack nack[])",
          "45: {",
          "47:     pj_uint8_t *p;",
          "48:     unsigned len, i;",
          "",
          "[Removed Lines]",
          "46:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "46:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  return PJ_ETOOSMALL;",
          "64:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "",
          "[Removed Lines]",
          "57:     hdr = (pjmedia_rtcp_common*)buf;",
          "58:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "59:     hdr->pt = RTCP_RTPFB;",
          "61:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "57:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "58:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "59:     hdr->rtcp_common.pt = RTCP_RTPFB;",
          "61:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:      void *buf,",
          "87:      pj_size_t *length)",
          "88: {",
          "90:     unsigned len;",
          "92:     PJ_ASSERT_RETURN(session && buf && length, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "89:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "89:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "99:     hdr = (pjmedia_rtcp_common*)buf;",
          "100:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "101:     hdr->pt = RTCP_PSFB;",
          "103:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "99:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "100:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "101:     hdr->rtcp_common.pt = RTCP_PSFB;",
          "103:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:      unsigned sli_cnt,",
          "120:      const pjmedia_rtcp_fb_sli sli[])",
          "121: {",
          "123:     pj_uint8_t *p;",
          "124:     unsigned len, i;",
          "",
          "[Removed Lines]",
          "122:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "122:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:  return PJ_ETOOSMALL;",
          "140:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "",
          "[Removed Lines]",
          "133:     hdr = (pjmedia_rtcp_common*)buf;",
          "134:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "135:     hdr->pt = RTCP_PSFB;",
          "137:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "133:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "134:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "135:     hdr->rtcp_common.pt = RTCP_PSFB;",
          "137:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "166:          pj_size_t *length,",
          "167:          const pjmedia_rtcp_fb_rpsi *rpsi)",
          "168: {",
          "170:     pj_uint8_t *p;",
          "171:     unsigned bitlen, padlen, len;",
          "",
          "[Removed Lines]",
          "169:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "169:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "179:  return PJ_ETOOSMALL;",
          "189:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "",
          "[Removed Lines]",
          "182:     hdr = (pjmedia_rtcp_common*)buf;",
          "183:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "184:     hdr->pt = RTCP_PSFB;",
          "186:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "182:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "183:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "184:     hdr->rtcp_common.pt = RTCP_PSFB;",
          "186:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:      unsigned *nack_cnt,",
          "621:      pjmedia_rtcp_fb_nack nack[])",
          "622: {",
          "624:     pj_uint8_t *p;",
          "625:     unsigned cnt, i;",
          "627:     PJ_ASSERT_RETURN(buf && nack_cnt && nack, PJ_EINVAL);",
          "632:  return PJ_ENOTFOUND;",
          "635:     if (cnt > 2) cnt -= 2; else cnt = 0;",
          "636:     if (length < (cnt+3)*4)",
          "637:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "623:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "628:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);",
          "631:     if (hdr->pt != RTCP_RTPFB || hdr->count != 1)",
          "634:     cnt = pj_ntohs((pj_uint16_t)hdr->length);",
          "",
          "[Added Lines]",
          "623:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "628:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "631:     if (hdr->rtcp_common.pt != RTCP_RTPFB || hdr->rtcp_common.count != 1)",
          "634:     cnt = pj_ntohs((pj_uint16_t)hdr->rtcp_common.length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "661:      const void *buf,",
          "662:      pj_size_t length)",
          "663: {",
          "666:     PJ_ASSERT_RETURN(buf, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "664:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "",
          "[Added Lines]",
          "664:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "669:      return PJ_ETOOSMALL;",
          "673:  return PJ_ENOTFOUND;",
          "675:     return PJ_SUCCESS;",
          "",
          "[Removed Lines]",
          "672:     if (hdr->pt != RTCP_PSFB || hdr->count != 1)",
          "",
          "[Added Lines]",
          "672:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 1)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "686:      unsigned *sli_cnt,",
          "687:      pjmedia_rtcp_fb_sli sli[])",
          "688: {",
          "690:     pj_uint8_t *p;",
          "691:     unsigned cnt, i;",
          "693:     PJ_ASSERT_RETURN(buf && sli_cnt && sli, PJ_EINVAL);",
          "698:  return PJ_ENOTFOUND;",
          "701:     if (length < (cnt+3)*4)",
          "702:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "689:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "694:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);",
          "697:     if (hdr->pt != RTCP_PSFB || hdr->count != 2)",
          "700:     cnt = pj_ntohs((pj_uint16_t)hdr->length) - 2;",
          "",
          "[Added Lines]",
          "689:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "694:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "697:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 2)",
          "700:     cnt = pj_ntohs((pj_uint16_t)hdr->rtcp_common.length) - 2;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "730:      pj_size_t length,",
          "731:      pjmedia_rtcp_fb_rpsi *rpsi)",
          "732: {",
          "734:     pj_uint8_t *p;",
          "735:     pj_uint8_t padlen;",
          "736:     pj_size_t rpsi_len;",
          "738:     PJ_ASSERT_RETURN(buf && rpsi, PJ_EINVAL);",
          "743:  return PJ_ENOTFOUND;",
          "746:     if (length < rpsi_len + 12)",
          "747:  return PJ_ETOOSMALL;",
          "749:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "750:     padlen = *p++;",
          "751:     rpsi->pt = (*p++ & 0x7F);",
          "752:     rpsi->rpsi_bit_len = rpsi_len*8 - 16 - padlen;",
          "753:     pj_strset(&rpsi->rpsi, (char*)p, (rpsi->rpsi_bit_len + 7)/8);",
          "",
          "[Removed Lines]",
          "733:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "739:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);",
          "742:     if (hdr->pt != RTCP_PSFB || hdr->count != 3)",
          "745:     rpsi_len = (pj_ntohs((pj_uint16_t)hdr->length)-2) * 4;",
          "",
          "[Added Lines]",
          "733:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "739:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "742:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 3)",
          "745:     if (hdr->rtcp_common.length < 3) {",
          "746:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,",
          "747:                       \"Failed parsing FB RPSI, invalid header length\"));",
          "748:  return PJ_ETOOSMALL;",
          "749:     }",
          "751:     rpsi_len = (pj_ntohs((pj_uint16_t)hdr->rtcp_common.length)-2) * 4;",
          "758:     if (padlen >= 32) {",
          "759:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOBIG,",
          "760:                       \"Failed parsing FB RPSI, invalid RPSI padding len\"));",
          "761:  return PJ_ETOOBIG;",
          "762:     }",
          "764:     if ((rpsi_len * 8) < (unsigned)(16 + padlen)) {",
          "765:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,",
          "766:                       \"Failed parsing FB RPSI, invalid RPSI bit len\"));",
          "767:  return PJ_ETOOSMALL;",
          "768:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11559e49e65bdf00922ad5ae28913ec6a198d508",
      "candidate_info": {
        "commit_hash": "11559e49e65bdf00922ad5ae28913ec6a198d508",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/11559e49e65bdf00922ad5ae28913ec6a198d508",
        "files": [
          "pjmedia/include/pjmedia/rtcp.h",
          "pjmedia/src/pjmedia/rtcp.c",
          "pjmedia/src/pjmedia/rtcp_fb.c"
        ],
        "message": "Merge pull request from GHSA-vhxv-phmx-g52q\n\n* Prevent OOB read/write when parsing RTCP FB RPSI\n\n* Add log information\n\n* Modification based on comments.",
        "before_after_code_files": [
          "pjmedia/include/pjmedia/rtcp.h||pjmedia/include/pjmedia/rtcp.h",
          "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
          "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
            "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
            "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/include/pjmedia/rtcp.h||pjmedia/include/pjmedia/rtcp.h": [
          "File: pjmedia/include/pjmedia/rtcp.h -> pjmedia/include/pjmedia/rtcp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: } pjmedia_rtcp_common;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: typedef struct pjmedia_rtcp_fb_common",
          "122: {",
          "123:     pjmedia_rtcp_common rtcp_common;",
          "125: } pjmedia_rtcp_fb_common;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     pjmedia_rtcp_fb_common  rtcp_fb_com;/**< Cached RTCP feedback common",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c": [
          "File: pjmedia/src/pjmedia/rtcp.c -> pjmedia/src/pjmedia/rtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     sess->rtcp_rr_pkt.common.pt = RTCP_RR;",
          "243:     sess->rtcp_rr_pkt.common.length = pj_htons(7);",
          "246:     pj_gettimeofday(&now);",
          "247:     sess->tv_base = now;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     pj_memcpy(&sess->rtcp_fb_com, &sr_pkt->common,",
          "247:        sizeof(pjmedia_rtcp_common));",
          "248:     sess->rtcp_fb_com.ssrc_src = 0;",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c": [
          "File: pjmedia/src/pjmedia/rtcp_fb.c -> pjmedia/src/pjmedia/rtcp_fb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:      unsigned nack_cnt,",
          "44:      const pjmedia_rtcp_fb_nack nack[])",
          "45: {",
          "47:     pj_uint8_t *p;",
          "48:     unsigned len, i;",
          "",
          "[Removed Lines]",
          "46:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "46:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  return PJ_ETOOSMALL;",
          "64:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "",
          "[Removed Lines]",
          "57:     hdr = (pjmedia_rtcp_common*)buf;",
          "58:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "59:     hdr->pt = RTCP_RTPFB;",
          "61:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "57:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "58:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "59:     hdr->rtcp_common.pt = RTCP_RTPFB;",
          "61:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:      void *buf,",
          "87:      pj_size_t *length)",
          "88: {",
          "90:     unsigned len;",
          "92:     PJ_ASSERT_RETURN(session && buf && length, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "89:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "89:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "99:     hdr = (pjmedia_rtcp_common*)buf;",
          "100:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "101:     hdr->pt = RTCP_PSFB;",
          "103:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "99:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "100:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "101:     hdr->rtcp_common.pt = RTCP_PSFB;",
          "103:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:      unsigned sli_cnt,",
          "120:      const pjmedia_rtcp_fb_sli sli[])",
          "121: {",
          "123:     pj_uint8_t *p;",
          "124:     unsigned len, i;",
          "",
          "[Removed Lines]",
          "122:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "122:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:  return PJ_ETOOSMALL;",
          "140:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "",
          "[Removed Lines]",
          "133:     hdr = (pjmedia_rtcp_common*)buf;",
          "134:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "135:     hdr->pt = RTCP_PSFB;",
          "137:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "133:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "134:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "135:     hdr->rtcp_common.pt = RTCP_PSFB;",
          "137:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "166:          pj_size_t *length,",
          "167:          const pjmedia_rtcp_fb_rpsi *rpsi)",
          "168: {",
          "170:     pj_uint8_t *p;",
          "171:     unsigned bitlen, padlen, len;",
          "",
          "[Removed Lines]",
          "169:     pjmedia_rtcp_common *hdr;",
          "",
          "[Added Lines]",
          "169:     pjmedia_rtcp_fb_common *hdr;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "179:  return PJ_ETOOSMALL;",
          "189:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "",
          "[Removed Lines]",
          "182:     hdr = (pjmedia_rtcp_common*)buf;",
          "183:     pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));",
          "184:     hdr->pt = RTCP_PSFB;",
          "186:     hdr->length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "[Added Lines]",
          "182:     hdr = (pjmedia_rtcp_fb_common*)buf;",
          "183:     pj_memcpy(hdr, &session->rtcp_fb_com, sizeof(*hdr));",
          "184:     hdr->rtcp_common.pt = RTCP_PSFB;",
          "186:     hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len/4 - 1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:      unsigned *nack_cnt,",
          "621:      pjmedia_rtcp_fb_nack nack[])",
          "622: {",
          "624:     pj_uint8_t *p;",
          "625:     unsigned cnt, i;",
          "627:     PJ_ASSERT_RETURN(buf && nack_cnt && nack, PJ_EINVAL);",
          "632:  return PJ_ENOTFOUND;",
          "635:     if (cnt > 2) cnt -= 2; else cnt = 0;",
          "636:     if (length < (cnt+3)*4)",
          "637:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "623:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "628:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);",
          "631:     if (hdr->pt != RTCP_RTPFB || hdr->count != 1)",
          "634:     cnt = pj_ntohs((pj_uint16_t)hdr->length);",
          "",
          "[Added Lines]",
          "623:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "628:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "631:     if (hdr->rtcp_common.pt != RTCP_RTPFB || hdr->rtcp_common.count != 1)",
          "634:     cnt = pj_ntohs((pj_uint16_t)hdr->rtcp_common.length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "661:      const void *buf,",
          "662:      pj_size_t length)",
          "663: {",
          "666:     PJ_ASSERT_RETURN(buf, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "664:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "",
          "[Added Lines]",
          "664:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "669:      return PJ_ETOOSMALL;",
          "673:  return PJ_ENOTFOUND;",
          "675:     return PJ_SUCCESS;",
          "",
          "[Removed Lines]",
          "672:     if (hdr->pt != RTCP_PSFB || hdr->count != 1)",
          "",
          "[Added Lines]",
          "672:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 1)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "686:      unsigned *sli_cnt,",
          "687:      pjmedia_rtcp_fb_sli sli[])",
          "688: {",
          "690:     pj_uint8_t *p;",
          "691:     unsigned cnt, i;",
          "693:     PJ_ASSERT_RETURN(buf && sli_cnt && sli, PJ_EINVAL);",
          "698:  return PJ_ENOTFOUND;",
          "701:     if (length < (cnt+3)*4)",
          "702:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "689:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "694:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);",
          "697:     if (hdr->pt != RTCP_PSFB || hdr->count != 2)",
          "700:     cnt = pj_ntohs((pj_uint16_t)hdr->length) - 2;",
          "",
          "[Added Lines]",
          "689:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "694:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "697:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 2)",
          "700:     cnt = pj_ntohs((pj_uint16_t)hdr->rtcp_common.length) - 2;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "730:      pj_size_t length,",
          "731:      pjmedia_rtcp_fb_rpsi *rpsi)",
          "732: {",
          "734:     pj_uint8_t *p;",
          "735:     pj_uint8_t padlen;",
          "736:     pj_size_t rpsi_len;",
          "738:     PJ_ASSERT_RETURN(buf && rpsi, PJ_EINVAL);",
          "743:  return PJ_ENOTFOUND;",
          "746:     if (length < rpsi_len + 12)",
          "747:  return PJ_ETOOSMALL;",
          "749:     p = (pj_uint8_t*)hdr + sizeof(*hdr);",
          "750:     padlen = *p++;",
          "751:     rpsi->pt = (*p++ & 0x7F);",
          "752:     rpsi->rpsi_bit_len = rpsi_len*8 - 16 - padlen;",
          "753:     pj_strset(&rpsi->rpsi, (char*)p, (rpsi->rpsi_bit_len + 7)/8);",
          "",
          "[Removed Lines]",
          "733:     pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;",
          "739:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);",
          "742:     if (hdr->pt != RTCP_PSFB || hdr->count != 3)",
          "745:     rpsi_len = (pj_ntohs((pj_uint16_t)hdr->length)-2) * 4;",
          "",
          "[Added Lines]",
          "733:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "739:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "742:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 3)",
          "745:     if (hdr->rtcp_common.length < 3) {",
          "746:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,",
          "747:                       \"Failed parsing FB RPSI, invalid header length\"));",
          "748:  return PJ_ETOOSMALL;",
          "749:     }",
          "751:     rpsi_len = (pj_ntohs((pj_uint16_t)hdr->rtcp_common.length)-2) * 4;",
          "758:     if (padlen >= 32) {",
          "759:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOBIG,",
          "760:                       \"Failed parsing FB RPSI, invalid RPSI padding len\"));",
          "761:  return PJ_ETOOBIG;",
          "762:     }",
          "764:     if ((rpsi_len * 8) < (unsigned)(16 + padlen)) {",
          "765:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,",
          "766:                       \"Failed parsing FB RPSI, invalid RPSI bit len\"));",
          "767:  return PJ_ETOOSMALL;",
          "768:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e196d82b788a5d21e2176c96f827c741923262a",
      "candidate_info": {
        "commit_hash": "8e196d82b788a5d21e2176c96f827c741923262a",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/8e196d82b788a5d21e2176c96f827c741923262a",
        "files": [
          "pjmedia/src/pjmedia/rtcp.c",
          "pjmedia/src/pjmedia/rtcp_fb.c"
        ],
        "message": "Add checks when parsing RTCP FB (#3055)",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
          "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
            "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c",
            "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/rtcp.c||pjmedia/src/pjmedia/rtcp.c": [
          "File: pjmedia/src/pjmedia/rtcp.c -> pjmedia/src/pjmedia/rtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:     pjmedia_event ev;",
          "804:     pj_timestamp ts_now;",
          "806:     pj_get_timestamp(&ts_now);",
          "808:     if (pjmedia_rtcp_fb_parse_nack(pkt, size, &cnt, nack)==PJ_SUCCESS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:     if (size < sizeof(pjmedia_rtcp_fb_common)) {",
          "807:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,",
          "808:                       \"Failed parsing RTCP FB, invalid packet length\"));",
          "809:  return;",
          "810:     }",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/rtcp_fb.c||pjmedia/src/pjmedia/rtcp_fb.c": [
          "File: pjmedia/src/pjmedia/rtcp_fb.c -> pjmedia/src/pjmedia/rtcp_fb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:     pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;",
          "666:     PJ_ASSERT_RETURN(buf, PJ_EINVAL);",
          "672:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 1)",
          "",
          "[Removed Lines]",
          "668:     if (length < 12)",
          "669:      return PJ_ETOOSMALL;",
          "",
          "[Added Lines]",
          "667:     PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:     if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 2)",
          "698:  return PJ_ENOTFOUND;",
          "700:     cnt = pj_ntohs((pj_uint16_t)hdr->rtcp_common.length) - 2;",
          "701:     if (length < (cnt+3)*4)",
          "702:  return PJ_ETOOSMALL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698:     if (hdr->rtcp_common.length < 3) {",
          "699:         PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,",
          "700:                       \"Failed parsing FB SLI, invalid header length\"));",
          "701:  return PJ_ETOOSMALL;",
          "702:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}