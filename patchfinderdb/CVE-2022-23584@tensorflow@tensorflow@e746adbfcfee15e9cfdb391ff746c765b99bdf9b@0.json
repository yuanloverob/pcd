{
  "cve_id": "CVE-2022-23584",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
  "patch_info": {
    "commit_hash": "e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
    "files": [
      "tensorflow/core/kernels/image/decode_image_op.cc"
    ],
    "message": "Prevent use after free in `DecodePng` kernel.\n\nWe are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\n\nPiperOrigin-RevId: 409299145\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254",
    "before_after_code_files": [
      "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
      "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     if (width != static_cast<int64_t>(decode.width) || width <= 0 ||",
      "340:         width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||",
      "341:         height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {",
      "343:       OP_REQUIRES(context, false,",
      "344:                   errors::InvalidArgument(\"PNG size too large for int: \",",
      "345:                                           decode.width, \" by \", decode.height));",
      "",
      "[Removed Lines]",
      "342:       png::CommonFreeDecode(&decode);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0f6fb4dd375f79bd8105864d2bbf31ab4efd0b2",
      "candidate_info": {
        "commit_hash": "b0f6fb4dd375f79bd8105864d2bbf31ab4efd0b2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b0f6fb4dd375f79bd8105864d2bbf31ab4efd0b2",
        "files": [
          "tensorflow/core/kernels/image/decode_image_op.cc"
        ],
        "message": "Prevent use after free in `DecodePng` kernel.\n\nWe are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\n\nPiperOrigin-RevId: 409299145\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
          "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     if (width != static_cast<int64_t>(decode.width) || width <= 0 ||",
          "340:         width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||",
          "341:         height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {",
          "343:       OP_REQUIRES(context, false,",
          "344:                   errors::InvalidArgument(\"PNG size too large for int: \",",
          "345:                                           decode.width, \" by \", decode.height));",
          "",
          "[Removed Lines]",
          "342:       png::CommonFreeDecode(&decode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "333851d98583dede73be52692d37a22af74f1d8d",
      "candidate_info": {
        "commit_hash": "333851d98583dede73be52692d37a22af74f1d8d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/333851d98583dede73be52692d37a22af74f1d8d",
        "files": [
          "tensorflow/core/kernels/image/decode_image_op.cc"
        ],
        "message": "Prevent use after free in `DecodePng` kernel.\n\nWe are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\n\nPiperOrigin-RevId: 409299145\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
          "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     if (width != static_cast<int64>(decode.width) || width <= 0 ||",
          "340:         width >= (1LL << 27) || height != static_cast<int64>(decode.height) ||",
          "341:         height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {",
          "343:       OP_REQUIRES(context, false,",
          "344:                   errors::InvalidArgument(\"PNG size too large for int: \",",
          "345:                                           decode.width, \" by \", decode.height));",
          "",
          "[Removed Lines]",
          "342:       png::CommonFreeDecode(&decode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b3783eb17f1b690f1cc44454038f6e630edb4da",
      "candidate_info": {
        "commit_hash": "1b3783eb17f1b690f1cc44454038f6e630edb4da",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1b3783eb17f1b690f1cc44454038f6e630edb4da",
        "files": [
          "tensorflow/core/kernels/image/decode_image_op.cc"
        ],
        "message": "Prevent use after free in `DecodePng` kernel.\n\nWe are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\n\nPiperOrigin-RevId: 409299145\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
          "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     if (width != static_cast<int64>(decode.width) || width <= 0 ||",
          "340:         width >= (1LL << 27) || height != static_cast<int64>(decode.height) ||",
          "341:         height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {",
          "343:       OP_REQUIRES(context, false,",
          "344:                   errors::InvalidArgument(\"PNG size too large for int: \",",
          "345:                                           decode.width, \" by \", decode.height));",
          "",
          "[Removed Lines]",
          "342:       png::CommonFreeDecode(&decode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}