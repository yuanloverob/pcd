{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "863f17f68c4cbac9c310603bb174bb641d521a15",
      "candidate_info": {
        "commit_hash": "863f17f68c4cbac9c310603bb174bb641d521a15",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/863f17f68c4cbac9c310603bb174bb641d521a15",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h"
        ],
        "message": "Move uv loop initialization into isolate",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1891: static void RunIsolate(void* arg) {",
          "1892:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(arg);",
          "1897:   StartThread(isolate, ti->argc_, ti->argv_);",
          "1898:   delete ti;",
          "",
          "[Removed Lines]",
          "1894:   uv_loop_t* loop = uv_loop_new();",
          "1895:   Isolate* isolate = Isolate::New(loop);",
          "",
          "[Added Lines]",
          "1894:   Isolate* isolate = Isolate::New();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2782:   node::Isolate::Initialize();",
          "2784:   StartThread(isolate, argc, argv);",
          "2785:   isolate->Dispose();",
          "",
          "[Removed Lines]",
          "2783:   Isolate* isolate = node::Isolate::New(uv_default_loop());",
          "",
          "[Added Lines]",
          "2782:   Isolate* isolate = node::Isolate::New();",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   }",
          "41: }",
          "45: }",
          "49:   assert(initialized && \"node::Isolate::Initialize() hasn't been called\");",
          "51:   uv_mutex_lock(&id_lock);",
          "52:   id_ = ++id;",
          "53:   uv_mutex_unlock(&id_lock);",
          "55:   ngx_queue_init(&at_exit_callbacks_);",
          "58:   v8_isolate_ = v8::Isolate::GetCurrent();",
          "59:   if (v8_isolate_ == NULL) {",
          "",
          "[Removed Lines]",
          "43: Isolate* Isolate::New(uv_loop_t* loop) {",
          "44:   return new Isolate(loop);",
          "48: Isolate::Isolate(uv_loop_t* loop) {",
          "56:   loop_ = loop;",
          "",
          "[Added Lines]",
          "44: Isolate* Isolate::New() {",
          "45:   return new Isolate();",
          "49: Isolate::Isolate() {",
          "56:   if (id_ == 1) {",
          "57:     loop_ = uv_default_loop();",
          "58:   } else {",
          "59:     loop_ = uv_loop_new();",
          "60:   }",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   typedef void (*AtExitCallback)(void* arg);",
          "53:   static Isolate* GetCurrent() {",
          "54:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "",
          "[Removed Lines]",
          "51:   static Isolate* New(uv_loop_t* loop);",
          "",
          "[Added Lines]",
          "51:   static Isolate* New();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   unsigned int id_;",
          "84: private:",
          "87:   struct AtExitCallbackInfo {",
          "88:     ngx_queue_t at_exit_callbacks_;",
          "",
          "[Removed Lines]",
          "85:   Isolate(uv_loop_t* loop);",
          "",
          "[Added Lines]",
          "85:   Isolate();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aadd4fe7678b35f0f4df55833bef081ec7b3ef5",
      "candidate_info": {
        "commit_hash": "3aadd4fe7678b35f0f4df55833bef081ec7b3ef5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3aadd4fe7678b35f0f4df55833bef081ec7b3ef5",
        "files": [
          "src/node.cc"
        ],
        "message": "Separate per-process and per-thread init logic.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2567: }",
          "2572:   uv_uptime(&prog_start_time);",
          "",
          "[Removed Lines]",
          "2570: char** Init(int argc, char *argv[]) {",
          "",
          "[Added Lines]",
          "2571: char** ProcessInit(int argc, char *argv[]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2610: #ifdef __POSIX__",
          "2612:   RegisterSignalHandler(SIGPIPE, SIG_IGN);",
          "2613:   RegisterSignalHandler(SIGINT, SignalExit);",
          "2614:   RegisterSignalHandler(SIGTERM, SignalExit);",
          "2615: #endif // __POSIX__",
          "2621:   uv_prepare_start(&prepare_tick_watcher, PrepareTick);",
          "2622:   uv_unref(loop);",
          "2625:   uv_check_start(&check_tick_watcher, node::CheckTick);",
          "2626:   uv_unref(loop);",
          "2629:   uv_unref(loop);",
          "2632:   uv_check_start(&gc_check, node::Check);",
          "2633:   uv_unref(loop);",
          "2636:   uv_unref(loop);",
          "2639:   uv_unref(loop);",
          "2641:   V8::SetFatalErrorHandler(node::OnFatalError);",
          "2646:   v8::Debug::SetDebugMessageDispatchHandler(node::DebugMessageDispatch);",
          "",
          "[Removed Lines]",
          "2618:   uv_loop_t* const loop = uv_default_loop();",
          "2620:   uv_prepare_init(uv_default_loop(), &prepare_tick_watcher);",
          "2624:   uv_check_init(uv_default_loop(), &check_tick_watcher);",
          "2628:   uv_idle_init(uv_default_loop(), &tick_spinner);",
          "2631:   uv_check_init(uv_default_loop(), &gc_check);",
          "2635:   uv_idle_init(uv_default_loop(), &gc_idle);",
          "2638:   uv_timer_init(uv_default_loop(), &gc_timer);",
          "",
          "[Added Lines]",
          "2619:   return argv;",
          "2620: }",
          "2623: void EmitExit(v8::Handle<v8::Object> process_l) {",
          "2625:   Local<Value> emit_v = process_l->Get(String::New(\"emit\"));",
          "2626:   assert(emit_v->IsFunction());",
          "2627:   Local<Function> emit = Local<Function>::Cast(emit_v);",
          "2628:   Local<Value> args[] = { String::New(\"exit\") };",
          "2629:   TryCatch try_catch;",
          "2630:   emit->Call(process_l, 1, args);",
          "2631:   if (try_catch.HasCaught()) {",
          "2632:     FatalException(try_catch);",
          "2633:   }",
          "2634: }",
          "2637: void StartThread(Isolate* isolate, int argc, char** argv) {",
          "2638:   uv_loop_t* loop = isolate->GetLoop();",
          "2640:   uv_prepare_init(loop, &prepare_tick_watcher);",
          "2644:   uv_check_init(loop, &check_tick_watcher);",
          "2648:   uv_idle_init(loop, &tick_spinner);",
          "2651:   uv_check_init(loop, &gc_check);",
          "2655:   uv_idle_init(loop, &gc_idle);",
          "2658:   uv_timer_init(loop, &gc_timer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2668: #endif // __POSIX__",
          "2669:   }",
          "2686: }",
          "2689: int Start(int argc, char *argv[]) {",
          "2693:   v8::V8::Initialize();",
          "2694:   v8::HandleScope handle_scope;",
          "",
          "[Removed Lines]",
          "2671:   return argv;",
          "2672: }",
          "2675: void EmitExit(v8::Handle<v8::Object> process_l) {",
          "2677:   Local<Value> emit_v = process_l->Get(String::New(\"emit\"));",
          "2678:   assert(emit_v->IsFunction());",
          "2679:   Local<Function> emit = Local<Function>::Cast(emit_v);",
          "2680:   Local<Value> args[] = { String::New(\"exit\") };",
          "2681:   TryCatch try_catch;",
          "2682:   emit->Call(process_l, 1, args);",
          "2683:   if (try_catch.HasCaught()) {",
          "2684:     FatalException(try_catch);",
          "2685:   }",
          "2691:   argv = Init(argc, argv);",
          "",
          "[Added Lines]",
          "2690:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "2691:   v8_typed_array::AttachBindings(v8::Context::GetCurrent()->Global());",
          "2695:   Load(process_l);",
          "2702:   uv_run(loop);",
          "2704:   EmitExit(process_l);",
          "2710:   argv = ProcessInit(argc, argv);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2701:   Isolate* isolate = Isolate::New(uv_default_loop());",
          "2720:   isolate->Dispose();",
          "2722: #ifndef NDEBUG",
          "",
          "[Removed Lines]",
          "2703:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "2705:   v8_typed_array::AttachBindings(context->Global());",
          "2709:   Load(process_l);",
          "2716:   uv_run(NODE_LOOP());",
          "2718:   EmitExit(process_l);",
          "",
          "[Added Lines]",
          "2721:   StartThread(isolate, argc, argv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "761e0c460a8e9a40cd1126cf0ba354e50e38d6da",
      "candidate_info": {
        "commit_hash": "761e0c460a8e9a40cd1126cf0ba354e50e38d6da",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/761e0c460a8e9a40cd1126cf0ba354e50e38d6da",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/loop.c",
          "deps/uv/src/unix/process.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/src/uv-common.h",
          "deps/uv/src/win/core.c",
          "deps/uv/src/win/process.c",
          "deps/uv/test/benchmark-spawn.c",
          "deps/uv/test/runner-win.c",
          "deps/uv/test/test-ipc.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-spawn.c",
          "deps/uv/test/test-stdio-over-pipes.c",
          "src/process_wrap.cc"
        ],
        "message": "deps: upgrade libuv to 7556590",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/loop.c||deps/uv/src/unix/loop.c",
          "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h",
          "deps/uv/src/win/core.c||deps/uv/src/win/core.c",
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c",
          "deps/uv/test/benchmark-spawn.c||deps/uv/test/benchmark-spawn.c",
          "deps/uv/test/runner-win.c||deps/uv/test/runner-win.c",
          "deps/uv/test/test-ipc.c||deps/uv/test/test-ipc.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-spawn.c||deps/uv/test/test-spawn.c",
          "deps/uv/test/test-stdio-over-pipes.c||deps/uv/test/test-stdio-over-pipes.c",
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: UV_EXTERN const char* uv_strerror(uv_err_t err);",
          "335: UV_EXTERN const char* uv_err_name(uv_err_t err);",
          "343: #define UV_REQ_FIELDS \\",
          "345:   void* data; \\",
          "348:   UV_REQ_PRIVATE_FIELDS \\",
          "350:   uv_req_type type; \\",
          "",
          "[Removed Lines]",
          "337: #ifndef UV_LEAN_AND_MEAN",
          "338: # define UV_REQ_EXTRA_FIELDS ngx_queue_t active_queue;",
          "339: #else",
          "340: # define UV_REQ_EXTRA_FIELDS",
          "341: #endif",
          "346:   UV_REQ_EXTRA_FIELDS \\",
          "",
          "[Added Lines]",
          "342:   ngx_queue_t active_queue; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: };",
          "387: #define UV_HANDLE_FIELDS                                                      \\",
          "389:   uv_loop_t* loop;                                                            \\",
          "",
          "[Removed Lines]",
          "381: #ifndef UV_LEAN_AND_MEAN",
          "382: # define UV_HANDLE_EXTRA_FIELDS ngx_queue_t active_queue;",
          "383: #else",
          "384: # define UV_HANDLE_EXTRA_FIELDS",
          "385: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:   uv_handle_type type;                                                        \\",
          "396:   UV_HANDLE_PRIVATE_FIELDS                                                    \\",
          "400: struct uv_handle_s {",
          "",
          "[Removed Lines]",
          "397:   UV_HANDLE_EXTRA_FIELDS                                                      \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1168: UV_EXTERN void uv_freeaddrinfo(struct addrinfo* ai);",
          "1171: typedef struct uv_process_options_s {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1159: typedef enum {",
          "1160:   UV_IGNORE        = 0x00,",
          "1161:   UV_CREATE_PIPE   = 0x01,",
          "1166:   UV_READABLE_PIPE = 0x02,",
          "1167:   UV_WRITABLE_PIPE = 0x04,",
          "1168:   UV_RAW_FD        = 0x08",
          "1169: } uv_stdio_flags;",
          "1171: typedef struct uv_stdio_container_s {",
          "1172:   uv_stdio_flags flags;",
          "1174:   union {",
          "1175:     uv_stream_t* stream;",
          "1176:     int fd;",
          "1177:   } data;",
          "1178: } uv_stdio_container_t;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1201:   uv_uid_t uid;",
          "1202:   uv_gid_t gid;",
          "1211: } uv_process_options_t;",
          "",
          "[Removed Lines]",
          "1208:   uv_pipe_t* stdin_stream;",
          "1209:   uv_pipe_t* stdout_stream;",
          "1210:   uv_pipe_t* stderr_stream;",
          "",
          "[Added Lines]",
          "1216:   uv_stdio_container_t* stdio;",
          "1217:   int stdio_count;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1659:   uv_counters_t counters;",
          "1661:   uv_err_t last_err;",
          "1663:   void* data;",
          "1671: };",
          "",
          "[Removed Lines]",
          "1664: #ifndef UV_LEAN_AND_MEAN",
          "1665:   ngx_queue_t active_reqs;",
          "1666:   ngx_queue_t active_handles;",
          "1667: #else",
          "1668:   unsigned int active_reqs;",
          "1669:   unsigned int active_handles;",
          "1670: #endif",
          "",
          "[Added Lines]",
          "1670:   unsigned int active_handles;",
          "1671:   ngx_queue_t active_reqs;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: static int uv__should_block(uv_loop_t* loop) {",
          "209: }",
          "",
          "[Removed Lines]",
          "207:   return ngx_queue_empty(&loop->idle_handles)",
          "208:       && !ngx_queue_empty(&loop->active_handles);",
          "",
          "[Added Lines]",
          "207:   return loop->active_handles && ngx_queue_empty(&loop->idle_handles);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:                                 uv_req_type type) {",
          "116:   loop->counters.req_init++;",
          "117:   req->type = type;",
          "123: }",
          "124: #define uv__req_init(loop, req, type) \\",
          "125:   uv__req_init((loop), (uv_req_t*)(req), (type))",
          "",
          "[Removed Lines]",
          "118: #ifndef UV_LEAN_AND_MEAN",
          "119:   ngx_queue_insert_tail(&loop->active_reqs, &req->active_queue);",
          "120: #else",
          "121:   loop->active_reqs++;",
          "122: #endif",
          "",
          "[Added Lines]",
          "118:   uv__req_register(loop, req);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/loop.c||deps/uv/src/unix/loop.c": [
          "File: deps/uv/src/unix/loop.c -> deps/uv/src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   memset(loop, 0, sizeof(*loop));",
          "44:   RB_INIT(&loop->ares_handles);",
          "45:   ngx_queue_init(&loop->idle_handles);",
          "46:   ngx_queue_init(&loop->check_handles);",
          "47:   ngx_queue_init(&loop->prepare_handles);",
          "",
          "[Removed Lines]",
          "39: #ifndef UV_LEAN_AND_MEAN",
          "40:   ngx_queue_init(&loop->active_handles);",
          "41:   ngx_queue_init(&loop->active_reqs);",
          "42: #endif",
          "",
          "[Added Lines]",
          "40:   ngx_queue_init(&loop->active_reqs);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c": [
          "File: deps/uv/src/unix/process.c -> deps/uv/src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return -1;",
          "145:   }",
          "151: }",
          "154: #ifndef SPAWN_WAIT_EXEC",
          "155: # define SPAWN_WAIT_EXEC 1",
          "156: #endif",
          "",
          "[Removed Lines]",
          "141: static int uv__process_init_pipe(uv_pipe_t* handle, int fds[2], int flags) {",
          "142:   if (handle->type != UV_NAMED_PIPE) {",
          "143:     errno = EINVAL;",
          "147:   if (handle->ipc)",
          "148:     return uv__make_socketpair(fds, flags);",
          "149:   else",
          "150:     return uv__make_pipe(fds, flags);",
          "",
          "[Added Lines]",
          "141: static int uv__process_init_stdio(uv_stdio_container_t* container, int fds[2],",
          "142:                                   int writable) {",
          "143:   if (container->flags == UV_IGNORE) {",
          "144:     return 0;",
          "145:   } else if (container->flags & UV_CREATE_PIPE) {",
          "146:     assert(container->data.stream != NULL);",
          "148:     if (container->data.stream->type != UV_NAMED_PIPE) {",
          "149:       errno = EINVAL;",
          "150:       return -1;",
          "151:     }",
          "153:     return uv__make_socketpair(fds, 0);",
          "154:   } else if (container->flags & UV_RAW_FD) {",
          "155:     if (container->data.fd == -1) {",
          "156:       errno = EINVAL;",
          "157:       return -1;",
          "158:     }",
          "160:     if (writable) {",
          "161:       fds[1] = container->data.fd;",
          "162:     } else {",
          "163:       fds[0] = container->data.fd;",
          "164:     }",
          "166:     return 0;",
          "167:   } else {",
          "168:     assert(0 && \"Unexpected flags\");",
          "171: }",
          "174: static int uv__process_stdio_flags(uv_stdio_container_t* container,",
          "175:                                    int writable) {",
          "176:   if (container->data.stream->type == UV_NAMED_PIPE &&",
          "177:       ((uv_pipe_t*)container->data.stream)->ipc) {",
          "178:     return UV_STREAM_READABLE | UV_STREAM_WRITABLE;",
          "179:   } else if (writable) {",
          "180:     return UV_STREAM_WRITABLE;",
          "181:   } else {",
          "182:     return UV_STREAM_READABLE;",
          "183:   }",
          "187: static int uv__process_open_stream(uv_stdio_container_t* container, int fds[2],",
          "188:                                    int writable) {",
          "189:   int fd = fds[writable ? 1 : 0];",
          "190:   int child_fd = fds[writable ? 0 : 1];",
          "191:   int flags;",
          "194:   if (!(container->flags & UV_CREATE_PIPE) || fd < 0) {",
          "195:     return 0;",
          "196:   }",
          "198:   assert(child_fd >= 0);",
          "199:   close(child_fd);",
          "201:   uv__nonblock(fd, 1);",
          "202:   flags = uv__process_stdio_flags(container, writable);",
          "204:   return uv__stream_open((uv_stream_t*)container->data.stream, fd, flags);",
          "205: }",
          "208: static void uv__process_close_stream(uv_stdio_container_t* container) {",
          "209:   if (!(container->flags & UV_CREATE_PIPE)) return;",
          "211:   uv__stream_close((uv_stream_t*)container->data.stream);",
          "212: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:   char** save_our_env = environ;",
          "168: #if SPAWN_WAIT_EXEC",
          "169:   int signal_pipe[2] = { -1, -1 };",
          "170:   struct pollfd pfd;",
          "171: #endif",
          "172:   int status;",
          "173:   pid_t pid;",
          "176:   assert(options.file != NULL);",
          "177:   assert(!(options.flags & ~(UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS |",
          "",
          "[Removed Lines]",
          "165:   int stdin_pipe[2] = { -1, -1 };",
          "166:   int stdout_pipe[2] = { -1, -1 };",
          "167:   int stderr_pipe[2] = { -1, -1 };",
          "174:   int flags;",
          "",
          "[Added Lines]",
          "226:   int* pipes = malloc(2 * options.stdio_count * sizeof(int));",
          "234:   int i;",
          "236:   if (pipes == NULL) {",
          "237:     errno = ENOMEM;",
          "238:     goto error;",
          "239:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:   process->exit_cb = options.exit_cb;",
          "196:   }",
          "201:   }",
          "",
          "[Removed Lines]",
          "188:   if (options.stdin_stream &&",
          "189:       uv__process_init_pipe(options.stdin_stream, stdin_pipe, 0)) {",
          "190:     goto error;",
          "191:   }",
          "193:   if (options.stdout_stream &&",
          "194:       uv__process_init_pipe(options.stdout_stream, stdout_pipe, 0)) {",
          "195:     goto error;",
          "198:   if (options.stderr_stream &&",
          "199:       uv__process_init_pipe(options.stderr_stream, stderr_pipe, 0)) {",
          "200:     goto error;",
          "",
          "[Added Lines]",
          "254:   for (i = 0; i < options.stdio_count; i++) {",
          "255:     pipes[i * 2] = -1;",
          "256:     pipes[i * 2 + 1] = -1;",
          "260:   for (i = 0; i < options.stdio_count; i++) {",
          "261:     if (uv__process_init_stdio(&options.stdio[i], pipes + i * 2, i != 0)) {",
          "262:       goto error;",
          "263:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:   }",
          "239:   if (pid == 0) {",
          "265:     }",
          "267:     if (options.cwd && chdir(options.cwd)) {",
          "",
          "[Removed Lines]",
          "240:     if (stdin_pipe[0] >= 0) {",
          "241:       close(stdin_pipe[1]);",
          "242:       dup2(stdin_pipe[0],  STDIN_FILENO);",
          "243:     } else {",
          "245:       uv__cloexec(STDIN_FILENO, 0);",
          "246:       uv__nonblock(STDIN_FILENO, 0);",
          "247:     }",
          "249:     if (stdout_pipe[1] >= 0) {",
          "250:       close(stdout_pipe[0]);",
          "251:       dup2(stdout_pipe[1], STDOUT_FILENO);",
          "252:     } else {",
          "254:       uv__cloexec(STDOUT_FILENO, 0);",
          "255:       uv__nonblock(STDOUT_FILENO, 0);",
          "256:     }",
          "258:     if (stderr_pipe[1] >= 0) {",
          "259:       close(stderr_pipe[0]);",
          "260:       dup2(stderr_pipe[1], STDERR_FILENO);",
          "261:     } else {",
          "263:       uv__cloexec(STDERR_FILENO, 0);",
          "264:       uv__nonblock(STDERR_FILENO, 0);",
          "",
          "[Added Lines]",
          "306:     for (i = 0; i < options.stdio_count; i++) {",
          "311:       int close_fd = i == 0 ? pipes[i * 2 + 1] : pipes[i * 2];",
          "312:       int use_fd = i == 0 ? pipes[i * 2] : pipes[i * 2 + 1];",
          "314:       if (use_fd >= 0) {",
          "315:         close(close_fd);",
          "316:         dup2(use_fd, i);",
          "317:       } else {",
          "319:         uv__cloexec(i, 0);",
          "320:         uv__nonblock(i, 0);",
          "321:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:   ev_child_start(process->loop->ev, &process->child_watcher);",
          "314:   process->child_watcher.data = process;",
          "336:   }",
          "349:   return 0;",
          "351: error:",
          "352:   uv__set_sys_error(process->loop, errno);",
          "359:   return -1;",
          "360: }",
          "",
          "[Removed Lines]",
          "316:   if (stdin_pipe[1] >= 0) {",
          "317:     assert(options.stdin_stream);",
          "318:     assert(stdin_pipe[0] >= 0);",
          "319:     close(stdin_pipe[0]);",
          "320:     uv__nonblock(stdin_pipe[1], 1);",
          "321:     flags = UV_STREAM_WRITABLE |",
          "322:             (options.stdin_stream->ipc ? UV_STREAM_READABLE : 0);",
          "323:     uv__stream_open((uv_stream_t*)options.stdin_stream, stdin_pipe[1],",
          "324:         flags);",
          "325:   }",
          "327:   if (stdout_pipe[0] >= 0) {",
          "328:     assert(options.stdout_stream);",
          "329:     assert(stdout_pipe[1] >= 0);",
          "330:     close(stdout_pipe[1]);",
          "331:     uv__nonblock(stdout_pipe[0], 1);",
          "332:     flags = UV_STREAM_READABLE |",
          "333:             (options.stdout_stream->ipc ? UV_STREAM_WRITABLE : 0);",
          "334:     uv__stream_open((uv_stream_t*)options.stdout_stream, stdout_pipe[0],",
          "335:         flags);",
          "338:   if (stderr_pipe[0] >= 0) {",
          "339:     assert(options.stderr_stream);",
          "340:     assert(stderr_pipe[1] >= 0);",
          "341:     close(stderr_pipe[1]);",
          "342:     uv__nonblock(stderr_pipe[0], 1);",
          "343:     flags = UV_STREAM_READABLE |",
          "344:             (options.stderr_stream->ipc ? UV_STREAM_WRITABLE : 0);",
          "345:     uv__stream_open((uv_stream_t*)options.stderr_stream, stderr_pipe[0],",
          "346:         flags);",
          "347:   }",
          "353:   close(stdin_pipe[0]);",
          "354:   close(stdin_pipe[1]);",
          "355:   close(stdout_pipe[0]);",
          "356:   close(stdout_pipe[1]);",
          "357:   close(stderr_pipe[0]);",
          "358:   close(stderr_pipe[1]);",
          "",
          "[Added Lines]",
          "373:   for (i = 0; i < options.stdio_count; i++) {",
          "374:     if (uv__process_open_stream(&options.stdio[i], pipes + i * 2, i == 0)) {",
          "375:       int j;",
          "377:       for (j = 0; j < i; j++) {",
          "378:         uv__process_close_stream(&options.stdio[j]);",
          "379:       }",
          "381:       goto error;",
          "382:     }",
          "385:   free(pipes);",
          "392:   for (i = 0; i < options.stdio_count; i++) {",
          "393:     close(pipes[i * 2]);",
          "394:     close(pipes[i * 2 + 1]);",
          "395:   }",
          "397:   free(pipes);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   assert(!flags);",
          "182:   if (loop->fs_fd == -1) {",
          "187:     loop->fs_fd = portfd;",
          "188:     first_run = 1;",
          "189:   }",
          "",
          "[Removed Lines]",
          "183:   if ((portfd = port_create()) == -1) {",
          "184:     uv__set_sys_error(loop, errno);",
          "185:     return -1;",
          "186:   }",
          "",
          "[Added Lines]",
          "183:     if ((portfd = port_create()) == -1) {",
          "184:       uv__set_sys_error(loop, errno);",
          "185:       return -1;",
          "186:     }",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h": [
          "File: deps/uv/src/uv-common.h -> deps/uv/src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                     struct sockaddr_in6 address,",
          "83:                     uv_connect_cb cb);",
          "91: UNUSED static int uv__has_active_reqs(const uv_loop_t* loop) {",
          "92:   return !ngx_queue_empty(&loop->active_reqs);",
          "93: }",
          "104: UNUSED static void uv__req_register(uv_loop_t* loop, uv_req_t* req) {",
          "105:   ngx_queue_insert_tail(&loop->active_reqs, &req->active_queue);",
          "106: }",
          "",
          "[Removed Lines]",
          "85: #ifndef UV_LEAN_AND_MEAN",
          "87: UNUSED static int uv__has_active_handles(const uv_loop_t* loop) {",
          "88:   return !ngx_queue_empty(&loop->active_handles);",
          "89: }",
          "95: UNUSED static void uv__active_handle_add(uv_handle_t* h) {",
          "96:   ngx_queue_insert_tail(&h->loop->active_handles, &h->active_queue);",
          "97: }",
          "99: UNUSED static void uv__active_handle_rm(uv_handle_t* h) {",
          "100:   assert(uv__has_active_handles(h->loop));",
          "101:   ngx_queue_remove(&h->active_queue);",
          "102: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:   ngx_queue_remove(&req->active_queue);",
          "111: }",
          "115: UNUSED static int uv__has_active_handles(const uv_loop_t* loop) {",
          "116:   return loop->active_handles > 0;",
          "117: }",
          "123: UNUSED static void uv__active_handle_add(uv_handle_t* h) {",
          "124:   h->loop->active_handles++;",
          "125: }",
          "127: UNUSED static void uv__active_handle_rm(uv_handle_t* h) {",
          "129:   h->loop->active_handles--;",
          "130: }",
          "145: #define uv__active_handle_add(h) uv__active_handle_add((uv_handle_t*)(h))",
          "146: #define uv__active_handle_rm(h) uv__active_handle_rm((uv_handle_t*)(h))",
          "",
          "[Removed Lines]",
          "119: UNUSED static int uv__has_active_reqs(const uv_loop_t* loop) {",
          "120:   return loop->active_reqs > 0;",
          "121: }",
          "128:   assert(h->loop->active_handles > 0);",
          "132: UNUSED static void uv__req_register(uv_loop_t* loop, uv_req_t* req) {",
          "133:   loop->active_reqs++;",
          "134:   (void) req;",
          "135: }",
          "137: UNUSED static void uv__req_unregister(uv_loop_t* loop, uv_req_t* req) {",
          "138:   assert(loop->active_reqs > 0);",
          "139:   loop->active_reqs--;",
          "140:   (void) req;",
          "141: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/win/core.c||deps/uv/src/win/core.c": [
          "File: deps/uv/src/win/core.c -> deps/uv/src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   uv_update_time(loop);",
          "71:   ngx_queue_init(&loop->active_reqs);",
          "73:   loop->active_handles = 0;",
          "77:   loop->pending_reqs_tail = NULL;",
          "",
          "[Removed Lines]",
          "69: #ifndef UV_LEAN_AND_MEAN",
          "70:   ngx_queue_init(&loop->active_handles);",
          "72: #else",
          "74:   loop->active_reqs = 0;",
          "75: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:   }",
          "216: }",
          "231: #define UV_LOOP_ONCE(loop, poll)                                              \\",
          "232:   do {                                                                        \\",
          "",
          "[Removed Lines]",
          "218: #ifndef UV_LEAN_AND_MEAN",
          "219: # define UV_LOOP_ALIVE(loop)                                                  \\",
          "220:       (!ngx_queue_empty(&(loop)->active_handles) ||                           \\",
          "221:        !ngx_queue_empty(&(loop)->active_reqs) ||                              \\",
          "222:        (loop)->endgame_handles != NULL)",
          "223: #else",
          "224: # define UV_LOOP_ALIVE(loop)                                                  \\",
          "225:       ((loop)->active_handles > 0 &&                                          \\",
          "226:        (loop)->active_reqs > 0 &&                                             \\",
          "227:        (loop)->endgame_handles != NULL)",
          "228: #endif",
          "",
          "[Added Lines]",
          "213: #define UV_LOOP_ALIVE(loop)                                                   \\",
          "214:     ((loop)->active_handles > 0 ||                                            \\",
          "215:      !ngx_queue_empty(&(loop)->active_reqs) ||                                \\",
          "216:      (loop)->endgame_handles != NULL)",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"internal.h\"",
          "25: #include <stdio.h>",
          "26: #include <assert.h>",
          "27: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <io.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:   char* buf = NULL;",
          "640:   DWORD count, written;",
          "664:   POST_COMPLETION_FOR_REQ(loop, &process->exit_req);",
          "",
          "[Removed Lines]",
          "642:   WriteFile(child_stderr, syscall, sizeof(syscall) - 1, &written, NULL);",
          "644:   count = FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER |",
          "645:                          FORMAT_MESSAGE_FROM_SYSTEM |",
          "646:                          FORMAT_MESSAGE_IGNORE_INSERTS,",
          "647:                          NULL,",
          "648:                          process->spawn_errno,",
          "649:                          MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),",
          "650:                          (LPSTR) &buf,",
          "651:                          0,",
          "652:                          NULL);",
          "654:   if (buf != NULL && count > 0) {",
          "655:     WriteFile(child_stderr, buf, count, &written, NULL);",
          "656:     LocalFree(buf);",
          "657:   } else {",
          "658:     WriteFile(child_stderr, unknown, sizeof(unknown) - 1, &written, NULL);",
          "659:   }",
          "661:   FlushFileBuffers(child_stderr);",
          "",
          "[Added Lines]",
          "643:   if (child_stderr != INVALID_HANDLE_VALUE) {",
          "644:     WriteFile(child_stderr, syscall, sizeof(syscall) - 1, &written, NULL);",
          "646:     count = FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER |",
          "647:                            FORMAT_MESSAGE_FROM_SYSTEM |",
          "648:                            FORMAT_MESSAGE_IGNORE_INSERTS,",
          "649:                            NULL,",
          "650:                            process->spawn_errno,",
          "651:                            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),",
          "652:                            (LPSTR) &buf,",
          "653:                            0,",
          "654:                            NULL);",
          "656:     if (buf != NULL && count > 0) {",
          "657:       WriteFile(child_stderr, buf, count, &written, NULL);",
          "658:       LocalFree(buf);",
          "659:     } else {",
          "660:       WriteFile(child_stderr, unknown, sizeof(unknown) - 1, &written, NULL);",
          "661:     }",
          "663:     FlushFileBuffers(child_stderr);",
          "664:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "674:   for (i = 0; i < ARRAY_SIZE(process->child_stdio); i++) {",
          "675:     handle = process->child_stdio[i];",
          "677:       CloseHandle(handle);",
          "678:       process->child_stdio[i] = INVALID_HANDLE_VALUE;",
          "679:     }",
          "",
          "[Removed Lines]",
          "676:     if (handle != NULL && handle != INVALID_HANDLE_VALUE) {",
          "",
          "[Added Lines]",
          "679:     if (handle != INVALID_HANDLE_VALUE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "830: }",
          "848:   if (!DuplicateHandle(current_process,",
          "849:                        handle,",
          "",
          "[Removed Lines]",
          "833: static int duplicate_std_handle(uv_loop_t* loop, DWORD id, HANDLE* dup) {",
          "834:   HANDLE handle;",
          "835:   HANDLE current_process = GetCurrentProcess();",
          "837:   handle = GetStdHandle(id);",
          "839:   if (handle == NULL) {",
          "841:     return 0;",
          "842:   } else if (handle == INVALID_HANDLE_VALUE) {",
          "844:     uv__set_sys_error(loop, GetLastError());",
          "845:     return -1;",
          "846:   }",
          "",
          "[Added Lines]",
          "836: static int duplicate_handle(uv_loop_t* loop, HANDLE handle, HANDLE* dup) {",
          "837:   HANDLE current_process;",
          "839:   current_process = GetCurrentProcess();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "861: }",
          "864: int uv_spawn(uv_loop_t* loop, uv_process_t* process,",
          "865:     uv_process_options_t options) {",
          "866:   int err = 0, keep_child_stdio_open = 0;",
          "867:   wchar_t* path = NULL;",
          "869:   BOOL result;",
          "870:   wchar_t* application_path = NULL, *application = NULL, *arguments = NULL,",
          "872:   HANDLE* child_stdio = process->child_stdio;",
          "873:   STARTUPINFOW startup;",
          "874:   PROCESS_INFORMATION info;",
          "876:   if (options.flags & (UV_PROCESS_SETGID | UV_PROCESS_SETUID)) {",
          "877:     uv__set_artificial_error(loop, UV_ENOTSUP);",
          "878:     return -1;",
          "879:   }",
          "881:   assert(options.file != NULL);",
          "882:   assert(!(options.flags & ~(UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS |",
          "883:                              UV_PROCESS_SETGID |",
          "",
          "[Removed Lines]",
          "868:   int size;",
          "",
          "[Added Lines]",
          "857: static int duplicate_fd(uv_loop_t* loop, int fd, HANDLE* dup) {",
          "858:   HANDLE handle;",
          "860:   if (fd == -1) {",
          "862:     uv__set_artificial_error(loop, UV_EBADF);",
          "863:     return -1;",
          "864:   }",
          "866:   handle = (HANDLE)_get_osfhandle(fd);",
          "867:   return duplicate_handle(loop, handle, dup);",
          "868: }",
          "875:   int size, i, overlapped;",
          "876:   DWORD server_access, child_access;",
          "883:   uv_pipe_t* pipe;",
          "891:   if (options.stdio_count > 3) {",
          "892:     uv__set_artificial_error(loop, UV_ENOTSUP);",
          "893:     return -1;",
          "894:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "927:     application_path = application;",
          "928:   }",
          "948:     }",
          "983:   }",
          "985:   startup.cb = sizeof(startup);",
          "",
          "[Removed Lines]",
          "931:   if (options.stdin_stream) {",
          "932:     if (options.stdin_stream->ipc) {",
          "933:       err = uv_create_stdio_pipe_pair(",
          "934:           loop,",
          "935:           options.stdin_stream,",
          "936:           &child_stdio[0],",
          "937:           PIPE_ACCESS_DUPLEX,",
          "938:           GENERIC_READ | FILE_WRITE_ATTRIBUTES | GENERIC_WRITE,",
          "939:           1);",
          "940:     } else {",
          "941:       err = uv_create_stdio_pipe_pair(",
          "942:           loop,",
          "943:           options.stdin_stream,",
          "944:           &child_stdio[0],",
          "945:           PIPE_ACCESS_OUTBOUND,",
          "946:           GENERIC_READ | FILE_WRITE_ATTRIBUTES,",
          "947:           0);",
          "949:   } else {",
          "950:     err = duplicate_std_handle(loop, STD_INPUT_HANDLE, &child_stdio[0]);",
          "951:   }",
          "952:   if (err) {",
          "953:     goto done;",
          "954:   }",
          "956:   if (options.stdout_stream) {",
          "957:     err = uv_create_stdio_pipe_pair(",
          "958:         loop, options.stdout_stream,",
          "959:         &child_stdio[1],",
          "960:         PIPE_ACCESS_INBOUND,",
          "961:         GENERIC_WRITE,",
          "962:         0);",
          "963:   } else {",
          "964:     err = duplicate_std_handle(loop, STD_OUTPUT_HANDLE, &child_stdio[1]);",
          "965:   }",
          "966:   if (err) {",
          "967:     goto done;",
          "968:   }",
          "970:   if (options.stderr_stream) {",
          "971:     err = uv_create_stdio_pipe_pair(",
          "972:         loop,",
          "973:         options.stderr_stream,",
          "974:         &child_stdio[2],",
          "975:         PIPE_ACCESS_INBOUND,",
          "976:         GENERIC_WRITE,",
          "977:         0);",
          "978:   } else {",
          "979:     err = duplicate_std_handle(loop, STD_ERROR_HANDLE, &child_stdio[2]);",
          "980:   }",
          "981:   if (err) {",
          "982:     goto done;",
          "",
          "[Added Lines]",
          "945:   for (i = 0; i < options.stdio_count || i < 3; i++) {",
          "946:     if (i >= options.stdio_count ||",
          "947:         options.stdio[i].flags == UV_IGNORE) {",
          "948:       child_stdio[i] = INVALID_HANDLE_VALUE;",
          "949:       continue;",
          "952:     if (options.stdio[i].flags & UV_RAW_FD) {",
          "953:       err = duplicate_fd(loop, options.stdio[i].data.fd, &child_stdio[i]);",
          "954:     } else if (options.stdio[i].data.stream->type == UV_NAMED_PIPE) {",
          "955:       pipe = (uv_pipe_t*)options.stdio[i].data.stream;",
          "957:       if (options.stdio[i].flags & UV_CREATE_PIPE) {",
          "958:         server_access = 0;",
          "959:         child_access = 0;",
          "960:         if (pipe->ipc) {",
          "961:           server_access = PIPE_ACCESS_DUPLEX;",
          "962:           child_access = GENERIC_READ | FILE_WRITE_ATTRIBUTES | GENERIC_WRITE;",
          "963:           overlapped = 1;",
          "964:         } else {",
          "965:           overlapped = 0;",
          "967:           if (options.stdio[i].flags & UV_READABLE_PIPE) {",
          "968:             server_access |= PIPE_ACCESS_OUTBOUND;",
          "969:             child_access |= GENERIC_READ | FILE_WRITE_ATTRIBUTES;",
          "970:           }",
          "972:           if (options.stdio[i].flags & UV_WRITABLE_PIPE) {",
          "973:             server_access |= PIPE_ACCESS_INBOUND;",
          "974:             child_access |= GENERIC_WRITE;",
          "975:           }",
          "976:         }",
          "978:         err = uv_create_stdio_pipe_pair(",
          "979:             loop,",
          "980:             pipe,",
          "981:             &child_stdio[i],",
          "982:             server_access,",
          "983:             child_access,",
          "984:             overlapped);",
          "985:       } else {",
          "986:         err = duplicate_handle(loop, pipe->handle, &child_stdio[i]);",
          "987:       }",
          "988:     } else if(options.stdio[i].data.stream->type == UV_TTY) {",
          "989:       err = duplicate_handle(loop,",
          "990:         ((uv_tty_t*)options.stdio[i].data.stream)->handle, &child_stdio[i]);",
          "991:     } else {",
          "992:       err = -1;",
          "993:       uv__set_artificial_error(loop, UV_ENOTSUP);",
          "994:     }",
          "996:     if (err) {",
          "997:       goto done;",
          "998:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1007:     process->process_handle = info.hProcess;",
          "1008:     process->pid = info.dwProcessId;",
          "1013:     }",
          "",
          "[Removed Lines]",
          "1010:     if (options.stdin_stream &&",
          "1011:         options.stdin_stream->ipc) {",
          "1012:       options.stdin_stream->ipc_pid = info.dwProcessId;",
          "",
          "[Added Lines]",
          "1026:     if (options.stdio_count > 0 &&",
          "1027:         options.stdio[0].flags & UV_CREATE_PIPE &&",
          "1028:         options.stdio[0].data.stream->type == UV_NAMED_PIPE &&",
          "1029:         ((uv_pipe_t*)options.stdio[0].data.stream)->ipc) {",
          "1030:       ((uv_pipe_t*)options.stdio[0].data.stream)->ipc_pid = info.dwProcessId;",
          "",
          "---------------"
        ],
        "deps/uv/test/benchmark-spawn.c||deps/uv/test/benchmark-spawn.c": [
          "File: deps/uv/test/benchmark-spawn.c -> deps/uv/test/benchmark-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static void spawn() {",
          "104:   int r;",
          "106:   ASSERT(process_open == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:   uv_stdio_container_t stdio[2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   options.exit_cb = exit_cb;",
          "116:   uv_pipe_init(loop, &out, 0);",
          "119:   r = uv_spawn(loop, &process, options);",
          "120:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "117:   options.stdout_stream = &out;",
          "",
          "[Added Lines]",
          "119:   options.stdio = stdio;",
          "120:   options.stdio_count = 2;",
          "121:   options.stdio[0].flags = UV_IGNORE;",
          "122:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "123:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "",
          "---------------"
        ],
        "deps/uv/test/runner-win.c||deps/uv/test/runner-win.c": [
          "File: deps/uv/test/runner-win.c -> deps/uv/test/runner-win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <io.h>",
          "23: #include <malloc.h>",
          "24: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX |",
          "45:       SEM_NOOPENFILEERRORBOX);",
          "48:   setvbuf(stdout, NULL, _IONBF, 0);",
          "49:   setvbuf(stderr, NULL, _IONBF, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   _setmode(0, _O_BINARY);",
          "49:   _setmode(1, _O_BINARY);",
          "50:   _setmode(2, _O_BINARY);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-ipc.c||deps/uv/test/test-ipc.c": [
          "File: deps/uv/test/test-ipc.c -> deps/uv/test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   char exepath[1024];",
          "201:   char* args[3];",
          "202:   int r;",
          "204:   r = uv_pipe_init(uv_default_loop(), channel, 1);",
          "205:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:   uv_stdio_container_t stdio[1];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   options.file = exepath;",
          "219:   options.args = args;",
          "220:   options.exit_cb = exit_cb;",
          "223:   r = uv_spawn(uv_default_loop(), process, options);",
          "224:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "221:   options.stdin_stream = channel;",
          "",
          "[Added Lines]",
          "223:   options.stdio = stdio;",
          "224:   options.stdio[0].flags = UV_CREATE_PIPE |",
          "225:     UV_READABLE_PIPE | UV_WRITABLE_PIPE;",
          "226:   options.stdio[0].data.stream = (uv_stream_t*)channel;",
          "227:   options.stdio_count = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "611:   ASSERT(close_cb_called == 4);",
          "613:   return 0;",
          "",
          "[Removed Lines]",
          "614: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: TEST_DECLARE   (spawn_and_ping)",
          "124: TEST_DECLARE   (spawn_setuid_fails)",
          "125: TEST_DECLARE   (spawn_setgid_fails)",
          "126: TEST_DECLARE   (kill)",
          "127: TEST_DECLARE   (fs_file_noent)",
          "128: TEST_DECLARE   (fs_file_nametoolong)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126: TEST_DECLARE   (spawn_stdout_to_file)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:   TEST_ENTRY  (spawn_and_ping)",
          "335:   TEST_ENTRY  (spawn_setuid_fails)",
          "336:   TEST_ENTRY  (spawn_setgid_fails)",
          "337:   TEST_ENTRY  (kill)",
          "338: #ifdef _WIN32",
          "339:   TEST_ENTRY  (spawn_detect_pipe_name_collisions_on_windows)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:   TEST_ENTRY  (spawn_stdout_to_file)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-spawn.c||deps/uv/test/test-spawn.c": [
          "File: deps/uv/test/test-spawn.c -> deps/uv/test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "24: #include <stdio.h>",
          "25: #include <stdlib.h>",
          "26: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: TEST_IMPL(spawn_stdout) {",
          "168:   int r;",
          "169:   uv_pipe_t out;",
          "171:   init_process_options(\"spawn_helper2\", exit_cb);",
          "173:   uv_pipe_init(uv_default_loop(), &out, 0);",
          "176:   r = uv_spawn(uv_default_loop(), &process, options);",
          "177:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "174:   options.stdout_stream = &out;",
          "",
          "[Added Lines]",
          "171:   uv_stdio_container_t stdio[2];",
          "176:   options.stdio = stdio;",
          "177:   options.stdio[0].flags = UV_IGNORE;",
          "178:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "179:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "180:   options.stdio_count = 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:   ASSERT(exit_cb_called == 1);",
          "187:   printf(\"output is: %s\", output);",
          "190:   return 0;",
          "191: }",
          "",
          "[Removed Lines]",
          "188:   ASSERT(strcmp(\"hello world\\n\", output) == 0 || strcmp(\"hello world\\r\\n\", output) == 0);",
          "",
          "[Added Lines]",
          "194:   ASSERT(strcmp(\"hello world\\n\", output) == 0);",
          "196:   return 0;",
          "197: }",
          "200: TEST_IMPL(spawn_stdout_to_file) {",
          "201:   int r;",
          "202:   uv_file file;",
          "203:   uv_fs_t fs_req;",
          "204:   uv_stdio_container_t stdio[2];",
          "207:   unlink(\"stdout_file\");",
          "209:   init_process_options(\"spawn_helper2\", exit_cb);",
          "211:   r = uv_fs_open(uv_default_loop(), &fs_req, \"stdout_file\", O_CREAT | O_RDWR,",
          "212:       S_IREAD | S_IWRITE, NULL);",
          "213:   ASSERT(r != -1);",
          "214:   uv_fs_req_cleanup(&fs_req);",
          "216:   file = r;",
          "218:   options.stdio = stdio;",
          "219:   options.stdio[0].flags = UV_IGNORE;",
          "220:   options.stdio[1].flags = UV_RAW_FD;",
          "221:   options.stdio[1].data.fd = file;",
          "222:   options.stdio_count = 2;",
          "224:   r = uv_spawn(uv_default_loop(), &process, options);",
          "225:   ASSERT(r == 0);",
          "227:   r = uv_run(uv_default_loop());",
          "228:   ASSERT(r == 0);",
          "230:   ASSERT(exit_cb_called == 1);",
          "231:   ASSERT(close_cb_called == 1);",
          "233:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "234:       0, NULL);",
          "235:   ASSERT(r == 12);",
          "236:   uv_fs_req_cleanup(&fs_req);",
          "238:   r = uv_fs_close(uv_default_loop(), &fs_req, file, NULL);",
          "239:   ASSERT(r == 0);",
          "240:   uv_fs_req_cleanup(&fs_req);",
          "242:   printf(\"output is: %s\", output);",
          "243:   ASSERT(strcmp(\"hello world\\n\", output) == 0);",
          "246:   unlink(\"stdout_file\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:   uv_pipe_t in;",
          "198:   uv_write_t write_req;",
          "199:   uv_buf_t buf;",
          "200:   char buffer[] = \"hello-from-spawn_stdin\";",
          "202:   init_process_options(\"spawn_helper3\", exit_cb);",
          "204:   uv_pipe_init(uv_default_loop(), &out, 0);",
          "205:   uv_pipe_init(uv_default_loop(), &in, 0);",
          "209:   r = uv_spawn(uv_default_loop(), &process, options);",
          "210:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "206:   options.stdout_stream = &out;",
          "207:   options.stdin_stream = &in;",
          "",
          "[Added Lines]",
          "258:   uv_stdio_container_t stdio[2];",
          "265:   options.stdio = stdio;",
          "266:   options.stdio[0].flags = UV_CREATE_PIPE | UV_READABLE_PIPE;",
          "267:   options.stdio[0].data.stream = (uv_stream_t*)&in;",
          "268:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "269:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "270:   options.stdio_count = 2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:   char message[] = \"Nancy's joining me because the message this evening is \"",
          "260:                    \"not my message but ours.\";",
          "261:   uv_buf_t buf;",
          "263:   init_process_options(\"spawn_helper4\", kill_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:   uv_stdio_container_t stdio[3];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:   r = uv_pipe_init(uv_default_loop(), &err, 0);",
          "272:   ASSERT(r == 0);",
          "278:   r = uv_spawn(uv_default_loop(), &process, options);",
          "279:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "274:   options.stdin_stream = &in;",
          "275:   options.stdout_stream = &out;",
          "276:   options.stderr_stream = &err;",
          "",
          "[Added Lines]",
          "338:   options.stdio = stdio;",
          "339:   options.stdio[0].flags = UV_CREATE_PIPE | UV_READABLE_PIPE;",
          "340:   options.stdio[0].data.stream = (uv_stream_t*)&in;",
          "341:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "342:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "343:   options.stdio[2].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "344:   options.stdio[2].data.stream = (uv_stream_t*)&err;",
          "345:   options.stdio_count = 3;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:   uv_write_t write_req;",
          "309:   uv_pipe_t in, out;",
          "310:   uv_buf_t buf;",
          "311:   int r;",
          "313:   init_process_options(\"spawn_helper3\", exit_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380:   uv_stdio_container_t stdio[2];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "316:   uv_pipe_init(uv_default_loop(), &out, 0);",
          "317:   uv_pipe_init(uv_default_loop(), &in, 0);",
          "321:   r = uv_spawn(uv_default_loop(), &process, options);",
          "322:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "318:   options.stdout_stream = &out;",
          "319:   options.stdin_stream = &in;",
          "",
          "[Added Lines]",
          "388:   options.stdio = stdio;",
          "389:   options.stdio[0].flags = UV_CREATE_PIPE | UV_READABLE_PIPE;",
          "390:   options.stdio[0].data.stream = (uv_stream_t*)&in;",
          "391:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "392:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "393:   options.stdio_count = 2;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "384:   uv_pipe_t out;",
          "385:   char name[64];",
          "386:   HANDLE pipe_handle;",
          "388:   init_process_options(\"spawn_helper2\", exit_cb);",
          "390:   uv_pipe_init(uv_default_loop(), &out, 0);",
          "394:   _snprintf(name, sizeof(name), \"\\\\\\\\.\\\\pipe\\\\uv\\\\%p-%d\", &out, GetCurrentProcessId());",
          "",
          "[Removed Lines]",
          "391:   options.stdout_stream = &out;",
          "",
          "[Added Lines]",
          "461:   uv_stdio_container_t stdio[2];",
          "466:   options.stdio = stdio;",
          "467:   options.stdio[0].flags = UV_IGNORE;",
          "468:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "469:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "470:   options.stdio_count = 2;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "414:   ASSERT(exit_cb_called == 1);",
          "416:   printf(\"output is: %s\", output);",
          "419:   return 0;",
          "420: }",
          "",
          "[Removed Lines]",
          "417:   ASSERT(strcmp(\"hello world\\n\", output) == 0 || strcmp(\"hello world\\r\\n\", output) == 0);",
          "",
          "[Added Lines]",
          "496:   ASSERT(strcmp(\"hello world\\n\", output) == 0);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-stdio-over-pipes.c||deps/uv/test/test-stdio-over-pipes.c": [
          "File: deps/uv/test/test-stdio-over-pipes.c -> deps/uv/test/test-stdio-over-pipes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: TEST_IMPL(stdio_over_pipes) {",
          "116:   int r;",
          "117:   uv_process_t process;",
          "118:   loop = uv_default_loop();",
          "120:   init_process_options(\"stdio_over_pipes_helper\", exit_cb);",
          "122:   uv_pipe_init(loop, &out, 0);",
          "124:   uv_pipe_init(loop, &in, 0);",
          "127:   r = uv_spawn(loop, &process, options);",
          "128:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "123:   options.stdout_stream = &out;",
          "125:   options.stdin_stream = &in;",
          "",
          "[Added Lines]",
          "118:   uv_stdio_container_t stdio[2];",
          "127:   options.stdio = stdio;",
          "128:   options.stdio[0].flags = UV_CREATE_PIPE | UV_READABLE_PIPE;",
          "129:   options.stdio[0].data.stream = (uv_stream_t*)&in;",
          "130:   options.stdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;",
          "131:   options.stdio[1].data.stream = (uv_stream_t*)&out;",
          "132:   options.stdio_count = 2;",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:       options.env[envc] = NULL;",
          "170:     }",
          "173:     Local<Value> stdin_stream_v = js_options->Get(",
          "174:         String::NewSymbol(\"stdinStream\"));",
          "175:     if (!stdin_stream_v.IsEmpty() && stdin_stream_v->IsObject()) {",
          "176:       PipeWrap* stdin_wrap = PipeWrap::Unwrap(stdin_stream_v->ToObject());",
          "178:     }",
          "",
          "[Removed Lines]",
          "177:       options.stdin_stream = stdin_wrap->UVHandle();",
          "",
          "[Added Lines]",
          "172:     uv_stdio_container_t stdio[3];",
          "173:     memset(stdio, 0, sizeof(stdio));",
          "175:     options.stdio = stdio;",
          "176:     options.stdio_count = 3;",
          "177:     options.stdio[0].flags = UV_IGNORE;",
          "178:     options.stdio[1].flags = UV_IGNORE;",
          "179:     options.stdio[2].flags = UV_IGNORE;",
          "186:       options.stdio[0].flags = static_cast<uv_stdio_flags>(",
          "187:           UV_CREATE_PIPE | UV_WRITABLE_PIPE);",
          "188:       options.stdio[0].data.stream = reinterpret_cast<uv_stream_t*>(",
          "189:           stdin_wrap->UVHandle());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:         String::NewSymbol(\"stdoutStream\"));",
          "183:     if (!stdout_stream_v.IsEmpty() && stdout_stream_v->IsObject()) {",
          "184:       PipeWrap* stdout_wrap = PipeWrap::Unwrap(stdout_stream_v->ToObject());",
          "186:     }",
          "",
          "[Removed Lines]",
          "185:       options.stdout_stream = stdout_wrap->UVHandle();",
          "",
          "[Added Lines]",
          "197:       options.stdio[1].flags = static_cast<uv_stdio_flags>(",
          "198:           UV_CREATE_PIPE | UV_READABLE_PIPE);",
          "199:       options.stdio[1].data.stream = reinterpret_cast<uv_stream_t*>(",
          "200:           stdout_wrap->UVHandle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:         String::NewSymbol(\"stderrStream\"));",
          "191:     if (!stderr_stream_v.IsEmpty() && stderr_stream_v->IsObject()) {",
          "192:       PipeWrap* stderr_wrap = PipeWrap::Unwrap(stderr_stream_v->ToObject());",
          "194:     }",
          "",
          "[Removed Lines]",
          "193:       options.stderr_stream = stderr_wrap->UVHandle();",
          "",
          "[Added Lines]",
          "208:       options.stdio[2].flags = static_cast<uv_stdio_flags>(",
          "209:           UV_CREATE_PIPE | UV_READABLE_PIPE);",
          "210:       options.stdio[2].data.stream = reinterpret_cast<uv_stream_t*>(",
          "211:           stderr_wrap->UVHandle());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "569acea0eefed2c7da7453b7dcef6ff47491ca1c",
      "candidate_info": {
        "commit_hash": "569acea0eefed2c7da7453b7dcef6ff47491ca1c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/569acea0eefed2c7da7453b7dcef6ff47491ca1c",
        "files": [
          "doc/api/domain.markdown",
          "lib/domain.js",
          "test/simple/test-domain.js"
        ],
        "message": "Fix #3379 prevent domain.intercept passing 1st arg to cb",
        "before_after_code_files": [
          "lib/domain.js||lidomain.js",
          "test/simple/test-domain.js||test/simple/test-domain.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/domain.js||lidomain.js": [
          "File: lib/domain.js -> lidomain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:       return;",
          "168:     }",
          "170:     self.enter();",
          "171:     var ret = cb.apply(this, arguments);",
          "172:     self.exit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-domain.js||test/simple/test-domain.js": [
          "File: test/simple/test-domain.js -> test/simple/test-domain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: var bound = d.intercept(fn);",
          "128: bound(new Error('bound'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: function fn2(data) {",
          "132:   assert.equal(data, 'data', 'should not be null err argument')",
          "133: }",
          "135: var bound = d.intercept(fn2);",
          "136: bound(null, 'data');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f00c8bcef856d7ff7da40eb67a3c74f13f086256",
      "candidate_info": {
        "commit_hash": "f00c8bcef856d7ff7da40eb67a3c74f13f086256",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f00c8bcef856d7ff7da40eb67a3c74f13f086256",
        "files": [
          "configure",
          "node.gyp"
        ],
        "message": "build: fix --shared-v8 option",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:             '<(SHARED_INTERMEDIATE_DIR)/node_etw_provider.rc',",
          "178:           ]",
          "179:         } ],",
          "186:           'sources': [",
          "187:             'deps/v8/include/v8.h',",
          "188:             'deps/v8/include/v8-debug.h',",
          "",
          "[Removed Lines]",
          "180:         [ 'node_shared_v8==\"true\"', {",
          "181:           'sources': [",
          "182:             '<(node_shared_v8_includes)/v8.h',",
          "183:             '<(node_shared_v8_includes)/v8-debug.h',",
          "184:           ],",
          "185:         }, {",
          "",
          "[Added Lines]",
          "180:         [ 'node_shared_v8==\"false\"', {",
          "",
          "---------------"
        ]
      }
    }
  ]
}