{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4fe315afadb935008de5466f60855e663caa653",
      "candidate_info": {
        "commit_hash": "c4fe315afadb935008de5466f60855e663caa653",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/c4fe315afadb935008de5466f60855e663caa653",
        "files": [
          "README.md",
          "jsish.c",
          "lib/Zip.jsi",
          "lib/web/app",
          "lib/web/md/Building.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Start.md",
          "lib/web/md/dev/Ledger.md",
          "lib/web/md/dev/jsi.js.md",
          "lib/web/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiZvfs.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4\": fix zip handling of dirs.\n\nFossilOrigin-Name: 9393cad26fca4ffe3a1388f50e08fcd55b4762cbeb9058205ba269721659fd4c",
        "before_after_code_files": [
          "jsish.c||jsish.c",
          "lib/Zip.jsi||lib/Zip.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "jsish.c||jsish.c": [
          "File: jsish.c -> jsish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"regex/tre-mem.c\"",
          "13: #include \"src/parser.h\"",
          "14: #include \"src/jsiInt.h\"",
          "15: #if JSI__MINIZ",
          "16: #include \"miniz/miniz.c\"",
          "17: #endif //JSI__MINIZ",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"src/linenoise.h\"",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             return usage(\"must give a directory to zip: \" + zdir);",
          "99:         var i = 0, zargs = [];",
          "100:         zargs[i++] = File.realpath(fname);",
          "102:         zargs[i++] = zdir;",
          "103:         for (var n = 3; n<args.length; n++) {",
          "104:             var ldir = args[n];",
          "107:             zargs[i++] = null;",
          "108:         }",
          "109:         Zvfs.create.apply({},zargs);",
          "",
          "[Removed Lines]",
          "101:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true});",
          "105:             zargs[i++] = File.glob(ldir, {recurse:true});",
          "106:             zargs[i-1].push(ldir);",
          "",
          "[Added Lines]",
          "101:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true}).sort();",
          "105:             zargs[i++] = File.glob(ldir, {recurse:true}).concat([ldir]).sort();",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "7: #define JSI_VERSION_RELEASE 0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   3",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   4",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5062: #endif",
          "5063:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5064:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "5066:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5067:     { \"moduleRun\",  SysModuleRunCmd, 1,  2, \"cmd:string|function, args:array=undefined\", .help=\"Invoke named module with given args or command-line args\", .retType=(uint)JSI_TT_ANY},",
          "5068:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "",
          "[Removed Lines]",
          "5065:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but also invokes the function/name if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "",
          "[Added Lines]",
          "5065:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but will invoke cmd if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5070:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "5071:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5072:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5074:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "5075:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "5076:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "",
          "[Removed Lines]",
          "5073:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|function=void, version:number|string=1, options:object=void\", .help=\"Provide a package for use with require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "",
          "[Added Lines]",
          "5073:     { \"provide\",    SysProvideCmd,   0,  3, \"cmd:string|function=void, version:number|string=1, options:object=void\", .help=\"Make a package available for use by require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:     Jsi_Write(interp, out, zHdr, 30);",
          "",
          "[Removed Lines]",
          "1731:     Jsi_Write(interp, out, zDest, nameLen);",
          "",
          "[Added Lines]",
          "1730:     Jsi_Write(interp, out, p->zName, nameLen);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: System.prototype.parseInt = function(val:any, base:number=10):number {};",
          "287: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "288: System.prototype.printf = function(format:string, ...):void {};",
          "290: System.prototype.puts = function(val:any, ...):void {};",
          "291: System.prototype.quote = function(val:string):string {};",
          "292: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "289: System.prototype.provide = function(name:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "[Added Lines]",
          "289: System.prototype.provide = function(cmd:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385: var parseInt = function(val:any, base:number=10):number {};",
          "386: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "387: var printf = function(format:string, ...):void {};",
          "389: var puts = function(val:any, ...):void {};",
          "390: var quote = function(val:string):string {};",
          "391: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "388: var provide = function(name:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "[Added Lines]",
          "388: var provide = function(cmd:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
      "candidate_info": {
        "commit_hash": "8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
        "files": [
          "lib/Cdata.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.42\": add Object.freeze and use in moduleOpts\n\nFossilOrigin-Name: 2a422416c84e10b15012de8195d1a9390b71533893631fe4d243cfdb2eb7965f",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         enumvals:{}, indata:'', infile:'', outFile:null, rootname:null,",
          "34:         lnstart:0, setCons:0, icode:[], outcode:'', addflags:'',",
          "35:         preface: '// DO NOT EDIT: file generated by ',",
          "37:     };",
          "38:     self.pkg = require('Cdata', 0);",
          "39:     self.version = self.pkg.version;",
          "",
          "[Removed Lines]",
          "36:         Trace       :false,",
          "",
          "[Added Lines]",
          "36:         Trace       :false, jscHeaderStr:'', parmFlags:'',",
          "37:         objOptCmdStr:'', objCmdStr:'', selfSuffix:'',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     var EV = { enum:[], struct:[], vars:[] };",
          "44:     moduleOpts(self, options, conf);",
          "46:     var defs = {structs:[], enums:[], types:[], vars:[], cmds:[]};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     Object.freeze(self, true, true);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 41",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 42",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     int traceCall;",
          "399:     bool coverage;",
          "400:     bool profile;",
          "401:     Jsi_Value *udata;",
          "402: } Jsi_ModuleConf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:     bool freeze;",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "858:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "859:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "860:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, freeze,  .help=\"Freeze self object: first arg to moduleOpts\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1085:             return JSI_ERROR;",
          "1086:         if (rc == JSI_OK) {",
          "1087:             Jsi_PkgOpts po = {};",
          "1088:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1089:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1090:                 rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1089:             po.conf.freeze = interp->subOpts.freeze;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1102:     return rc;",
          "1103: }",
          "1105: static Jsi_RC SysProvideCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1106:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1107:     return SysProvideCmdInt(interp, args, _this, ret, funcPtr, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107: #define FN_provide \"Default is the file tail-rootname\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4609: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4610:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4611: {",
          "4612:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "4613:     Jsi_TreeSearch search = {};",
          "4614:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4615:     bool freeze = interp->subOpts.freeze;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4764:             mo = &pf->pkg->popts.conf;",
          "4765:             pf->pkg->logmask = mo->logmask;",
          "4766:             pf->pkg->log = mo->log;",
          "4767:         }",
          "4768:         uint i;",
          "4769:         for (i=JSI_LOG_ASSERT; mo && i<=JSI_LOG_TEST; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4771:             freeze = mo->freeze;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4780:             }",
          "4781:         }",
          "4782:     }",
          "4783:     return rc;",
          "4784: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4788:     if (rc == JSI_OK && freeze) {",
          "4789:         Jsi_Obj *obj = v1->d.obj;",
          "4790:         obj->freeze = 1;",
          "4791:         obj->freezeModifyOk = 1;",
          "4792:         obj->freezeReadBad = 1;",
          "4793:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4943:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "4944:     { \"parseOpts\",  SysModuleOptsCmd,2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: same as moduleOpts\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "4945:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4947:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "4948:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "4949:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "",
          "[Removed Lines]",
          "4946:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, opts:object|function=void\", .help=\"Provide a package for use with require. Default is the file tail-rootname\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "4957:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object|function=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:                 Jsi_Value key = VALINIT, *kPtr = &key; // Note: a string key so no reset needed.",
          "865:                 Jsi_ValueMakeStringKey(interp, &kPtr, varname);",
          "866:                 v = jsi_ValueObjKeyAssign(interp, global_scope, &key, NULL, JSI_OM_DONTENUM);",
          "867:                 if (v->vt == JSI_VT_UNDEF) {",
          "868:                     v->d.lookupFail = varname;",
          "869:                     v->f.bits.lookupfailed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:                 if (!v)",
          "868:                     return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:         jsiPop(interp, 1);",
          "942:         return JSI_ERROR;",
          "943:     }",
          "944:     Jsi_String *str = jsi_ValueString(src);",
          "945:     if (str && Jsi_ValueIsNumber(interp, idx)) {",
          "946:         int bLen, cLen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:     int arrayindex = -1;",
          "948:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) {",
          "949:         arrayindex = (int)idx->d.num;",
          "950:     }",
          "952:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadBad) {",
          "953:         Jsi_Value *v;",
          "954:         char keyBuf[100], *keyStr = keyBuf;",
          "955:         if (arrayindex>=0)",
          "956:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "957:         else",
          "958:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "959:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "960:             return Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "961:         }",
          "962:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1227:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1228:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1229:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "1231:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1232:                     } else if (strict)",
          "1233:                         rc = Jsi_LogError(\"assign to a non-exist object\");",
          "",
          "[Removed Lines]",
          "1230:                         jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "",
          "[Added Lines]",
          "1250:                         if (!jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0))",
          "1251:                             rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2027:                 line = fp->child->filePtr->pkg->loadLine;",
          "2028:             }",
          "2029:         }",
          "2030:         if (fn && ((cp=Jsi_Strrchr(fn, '/'))))",
          "2031:             fn = cp +1;",
          "2032:         Jsi_DSPrintf(&dStr, \"#%d: %s:%d: \", fp->level, fn, line);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2051:         if (!line && fp->level == interp->framePtr->level)",
          "2052:             line = interp->curIp->Line;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:     uint isNoOp:1;",
          "523:     uint isBlob:1;",
          "526:         int val;",
          "527:         Jsi_Number num;",
          "",
          "[Removed Lines]",
          "524:     uint unused2:16;",
          "",
          "[Added Lines]",
          "524:     uint freeze:1;",
          "525:     uint freezeModifyOk:1;",
          "526:     uint freezeReadBad:1;",
          "527:     uint unused2:13;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:     bool outUndef;",
          "1028:     bool logAllowDups;",
          "1029:     bool logColNums;",
          "1030:     bool privKeys;",
          "1031:     bool compat;",
          "1032:     bool mutexUnlock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:     bool freeze;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     JSI_OPT(BOOL,  jsi_SubOptions, compat,      .help=\"Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser\" ),",
          "64:     JSI_OPT(INT,   jsi_SubOptions, dblPrec,     .help=\"Format precision of double where 0=max, -1=max-1, ... (max-1)\" ),",
          "65:     JSI_OPT(BOOL,  jsi_SubOptions, istty,       .help=\"Indicates interp is in interactive mode\", jsi_IIRO),",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, logColNums,  .help=\"Display column numbers in error messages\"),",
          "67:     JSI_OPT(BOOL,  jsi_SubOptions, logAllowDups,.help=\"Log should not filter out duplicate messages\"),",
          "68:     JSI_OPT(BOOL,  jsi_SubOptions, mutexUnlock, .help=\"Unlock own mutex when evaling in other interps (true)\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, freeze,      .help=\"Default freeze self object in: first arg to moduleOpts\" ),",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     return Jsi_FunctionCall(interp, args, _this, ret);",
          "363: }",
          "366: static Jsi_RC ObjectKeysCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "367:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static Jsi_RC ObjectFreezeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "372:     if (!val || !Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "373:         return Jsi_LogError(\"arg 1: expected object\");",
          "374:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "375:         return Jsi_LogError(\"arg 2: expected bool\");",
          "376:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "377:         return Jsi_LogError(\"arg 3: expected bool\");",
          "378:     bool bnum = 0, rnum = 0, fnum = 0;",
          "379:     if (bval)",
          "380:         Jsi_GetBoolFromValue(interp, bval, &bnum);",
          "381:     if (rval)",
          "382:         Jsi_GetBoolFromValue(interp, rval, &rnum);",
          "383:     if (fval)",
          "384:         Jsi_GetBoolFromValue(interp, fval, &fnum);",
          "385:     Jsi_Obj *obj = val->d.obj;",
          "386:     obj->freeze = !fnum;",
          "387:     obj->freezeModifyOk = bnum;",
          "388:     obj->freezeReadBad = rnum;",
          "389:     return JSI_OK;",
          "391: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:     { \"hasOwnProperty\", jsi_HasOwnPropertyCmd,  1, 1, \"name:string\", .help=\"Returns a true if object has the specified property\", .retType=(uint)JSI_TT_BOOLEAN },",
          "674:     { \"is\",             ObjectIsCmd, 2, 2, \"value1, value2\", .help=\"Tests if two values are equal\", .retType=(uint)JSI_TT_BOOLEAN },",
          "675:     { \"isPrototypeOf\",  ObjectIsPrototypeOfCmd, 1, 1, \"name\", .help=\"Tests for an object in another object's prototype chain\", .retType=(uint)JSI_TT_BOOLEAN },",
          "676:     { \"keys\",           ObjectKeysCmd,          0, 1, \"obj:object|function=void\", .help=\"Return the keys of an object or array\", .retType=(uint)JSI_TT_ARRAY },",
          "677:     { \"merge\",          ObjectMergeCmd,         1, 1, \"obj:object|function\", .help=\"Return new object containing merged values\", .retType=(uint)JSI_TT_OBJECT },",
          "678:     { \"propertyIsEnumerable\", ObjectPropertyIsEnumerableCmd,1, 1, \"name\", .help=\"Determine if a property is enumerable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false\", .help=\"Freeze an object optionally allowing modify (but not add)\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:     }",
          "1002:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "1003:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1004:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:     if (value && target->vt == JSI_VT_OBJECT && target->d.obj->ot == JSI_OT_OBJECT && target->d.obj->freeze) {",
          "1003:         Jsi_Obj *obj = target->d.obj;",
          "1004:         Jsi_Value *v;",
          "1005:         char keyBuf[100], *keyStr = keyBuf;",
          "1006:         if (arrayindex>=0)",
          "1007:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "1008:         else",
          "1009:             keyStr = Jsi_ValueString(interp, keyval, NULL);",
          "1010:         if (!obj->freezeModifyOk) {",
          "1011:             Jsi_LogError(\"frozen assign/modify key: %s\", keyStr);",
          "1012:             return NULL;",
          "1013:         }",
          "1014:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, target, keyStr, 0))) {",
          "1015:             Jsi_LogError(\"frozen assign key: %s\", keyStr);",
          "1016:             return NULL;",
          "1017:         }",
          "1018:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "220: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "221: Object.prototype.hasOwnProperty = function(name:string):boolean {};",
          "222: Object.prototype.is = function(value1, value2):boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: Object.prototype.freeze = function(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: System.prototype.parseInt = function(val:any, base:number=10):number {};",
          "315: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined=void):object {};",
          "316: System.prototype.printf = function(format:string, ...):void {};",
          "318: System.prototype.puts = function(val, ...):void {};",
          "319: System.prototype.quote = function(val:string):string {};",
          "320: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "317: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, opts:object|function=void):void {};",
          "",
          "[Added Lines]",
          "318: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, options:object|function=void):void {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408: var parseInt = function(val:any, base:number=10):number {};",
          "409: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined=void):object {};",
          "410: var printf = function(format:string, ...):void {};",
          "412: var puts = function(val, ...):void {};",
          "413: var quote = function(val:string):string {};",
          "414: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "411: var provide = function(name:string|null|function=void, version:number|string=void, opts:object|function=void):void {};",
          "",
          "[Added Lines]",
          "412: var provide = function(name:string|null|function=void, version:number|string=void, options:object|function=void):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "722: <tr><td>compat</td><td><i>BOOL</i></td><td>Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser.</td><td><i></i></td></tr>",
          "723: <tr><td>dblPrec</td><td><i>INT</i></td><td>Format precision of double where 0=max, -1=max-1, ... (max-1).</td><td><i></i></td></tr>",
          "724: <tr><td>istty</td><td><i>BOOL</i></td><td>Indicates interp is in interactive mode.</td><td><i>readOnly</i></td></tr>",
          "725: <tr><td>logColNums</td><td><i>BOOL</i></td><td>Display column numbers in error messages.</td><td><i></i></td></tr>",
          "726: <tr><td>logAllowDups</td><td><i>BOOL</i></td><td>Log should not filter out duplicate messages.</td><td><i></i></td></tr>",
          "727: <tr><td>mutexUnlock</td><td><i>BOOL</i></td><td>Unlock own mutex when evaling in other interps (true).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: <tr><td>freeze</td><td><i>BOOL</i></td><td>Default freeze self object in: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "964: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "965: <tr><td>Object</td><td>new Object(val:object|function|null=void):object </td><td>Object constructor.</td></tr>",
          "966: <tr><td>create</td><td>create(proto:null|object, properties:object=void):object </td><td>Create a new object with prototype object and properties.</td></tr>",
          "967: <tr><td>getPrototypeOf</td><td>getPrototypeOf(name:object|function):function|object </td><td>Return prototype of an object.</td></tr>",
          "968: <tr><td>hasOwnProperty</td><td>hasOwnProperty(name:string):boolean </td><td>Returns a true if object has the specified property.</td></tr>",
          "969: <tr><td>is</td><td>is(value1, value2):boolean </td><td>Tests if two values are equal.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void </td><td>Freeze an object optionally allowing modify (but not add).</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1372: <tr><td>parseInt</td><td>parseInt(val:any, base:number=10):number </td><td>Convert string to an integer.</td></tr>",
          "1373: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: same as moduleOpts.</td></tr>",
          "1374: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Formatted output to stdout.</td></tr>",
          "1376: <tr><td>puts</td><td>puts(val, ...):void </td><td>Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.</td></tr>",
          "1377: <tr><td>quote</td><td>quote(val:string):string </td><td>Return quoted string.</td></tr>",
          "1378: <tr><td>require</td><td>require(name:string=void, version:number|string=1, <a href='#System.requireOptions'>options</a>:object=void):number|array|object </td><td>Load/query packages. With no arguments, returns the list of all loaded packages.",
          "",
          "[Removed Lines]",
          "1375: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, opts:object|function=void):void </td><td>Provide a package for use with require. Default is the file tail-rootname.</td></tr>",
          "",
          "[Added Lines]",
          "1377: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, <a href='#System.provideOptions'>options</a>:object|function=void):void </td><td>Provide a package for use with require.. Default is the file tail-rootname</td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1421: </table>",
          "1424: <a name=\"System.requireOptions\"></a>",
          "1425: <a name=\"System.confOptions\"></a>",
          "1426: <h2>Options for \"System.require\"</h2>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1426: <a name=\"System.provideOptions\"></a>",
          "1427: <a name=\"System.confOptions\"></a>",
          "1428: <h2>Options for \"System.provide\"</h2>",
          "1429: <table border=\"1\" class=\"optstbl table\">",
          "1430: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1431: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1432: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1433: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1434: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "1435: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1436: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1437: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "1438: <tr><td>udata</td><td><i>OBJ</i></td><td>User data settable by require.</td><td><i></i></td></tr>",
          "1439: </table>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1429: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1430: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1431: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1432: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1433: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1434: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
      "candidate_info": {
        "commit_hash": "788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
        "files": [
          "lib/Websrv.jsi",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tests/func.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.4\": object member dup detection, returned function invoke\n\nFossilOrigin-Name: 364d399b70459f7a23ae78c2650f2ee5b12270a26c25aea12b12a165d4de4503",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tests/func.jsi||tests/func.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 .js scripts in file or dir and below, then exit.",
          "",
          "[Added Lines]",
          "30:         es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:         }",
          "401:     }",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "",
          "[Removed Lines]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "",
          "[Added Lines]",
          "403:     function es5lint() {",
          "404:         var d = self.es5lint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:         }",
          "414:     }",
          "419:     if (self.srcFile !== '')",
          "420:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "416:     if (self.es5test)",
          "417:         return es5test();",
          "",
          "[Added Lines]",
          "416:     if (self.es5lint)",
          "417:         return es5lint();",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1880:                 int itemcount = (uintptr_t)ip->data;",
          "1881:                 Assert(itemcount>=0);",
          "1882:                 jsiVarDeref(interp, itemcount * 2);",
          "1885:                 jsiClearStack(interp,1);",
          "1886:                 Jsi_ValueMakeObject(interp, &_jsi_TOP, obj);",
          "",
          "[Removed Lines]",
          "1883:                 Jsi_Obj *obj = Jsi_ObjNewObj(interp, _jsi_STACK+(fp->Sp-itemcount*2), itemcount*2);",
          "",
          "[Added Lines]",
          "1883:                 Jsi_Obj *obj = jsi_ObjNewObj(interp, _jsi_STACK+(fp->Sp-itemcount*2), itemcount*2, 1);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547: extern bool jsi_ModBlacklisted(Jsi_Interp *interp, const char *mod);",
          "1548: extern bool jsi_FuncIsNoop(Jsi_Interp* interp, Jsi_Value *func);",
          "1549: extern Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcsOnly, bool varsOnly, Jsi_Value **ret);",
          "1551: typedef enum {",
          "1552:     _JSI_CDATA_INFO=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: extern Jsi_Obj *jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count, bool unique);",
          "1551: extern Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     hPtr = Jsi_TreeEntryNew(treePtr, key, &isNew);",
          "39:     if (!hPtr)",
          "40:         return NULL;",
          "42:         Jsi_LogWarn(\"add duplicate key: %s\", key);",
          "43:     if (val)",
          "44:         SIGASSERT(val,VALUE);",
          "",
          "[Removed Lines]",
          "41:     if (unique && !isNew)",
          "",
          "[Added Lines]",
          "41:     if (unique && !isNew) // Want this only from OP_OBJECT in jsiEval.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: {",
          "496:     const char *key = NULL;",
          "497:     int flags = 0;",
          "",
          "[Removed Lines]",
          "494: static Jsi_RC ObjInsertFromValue(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *keyVal, Jsi_Value *nv)",
          "",
          "[Added Lines]",
          "494: static Jsi_RC ObjInsertFromValue(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *keyVal, Jsi_Value *nv, bool unique)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "508:         key = Jsi_ValueGetDString(interp, keyVal, &dStr, 0);",
          "509:     if (!key)",
          "510:         return JSI_ERROR;",
          "512: }",
          "514: Jsi_RC Jsi_ObjFreeze(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck) {",
          "",
          "[Removed Lines]",
          "511:     return Jsi_ObjInsert(interp, obj, key, nv, flags);",
          "",
          "[Added Lines]",
          "511:     return jsi_ObjValInsert(interp, obj, key, nv, NULL, flags, unique);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "660:     return adp;",
          "661: }",
          "664: {",
          "665:     Jsi_Obj *obj = Jsi_ObjNewType(interp, JSI_OT_OBJECT);",
          "666:     if (count%2) return obj;",
          "",
          "[Removed Lines]",
          "663: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "",
          "[Added Lines]",
          "663: Jsi_Obj *jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count, bool unique)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:             }",
          "698:         }",
          "699:         v = Jsi_ValueDup(interp, v);",
          "701:         Jsi_DecrRefCount(interp, v);",
          "702:     }",
          "703:     return obj;",
          "704: }",
          "706: void Jsi_ObjSetLength(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
          "707: {",
          "708:     if (obj->isarrlist) {",
          "",
          "[Removed Lines]",
          "700:         ObjInsertFromValue(interp, obj, items[i], v);",
          "",
          "[Added Lines]",
          "700:         ObjInsertFromValue(interp, obj, items[i], v, unique);",
          "706: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "707: {",
          "708:     return jsi_ObjNewObj(interp, items, count, 0);",
          "709: }",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     return rc;",
          "1400: }",
          "1403: {",
          "1404:     Jsi_TreeEntry *hPtr;",
          "1405:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "[Added Lines]",
          "1402: Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1442: {",
          "1444: }",
          "1446: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "",
          "[Removed Lines]",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 1);",
          "",
          "[Added Lines]",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 0);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:         int expr_cnt = opl ? opl->expr_counter:0;",
          "738:         $$ = codes_join3(ff, (opl ? opl : code_nop()), code_fcall(pstate, &@3, expr_cnt, NULL, NULL, opl, NULL));",
          "739:     }",
          "740:     | '(' expr ')' '(' exprlist_opt ')' {",
          "741:         Jsi_OpCodes *opl = $5;",
          "742:         int expr_cnt = opl ? opl->expr_counter:0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:     | fcall_exprs '(' exprlist_opt ')' {",
          "741:         Jsi_OpCodes *opl = $3;",
          "742:         int expr_cnt = opl ? opl->expr_counter:0;",
          "743:         $$ = codes_join4($1, code_chthis(pstate,&@1, 0), (opl ? opl : code_nop()), code_fcall(pstate, &@2,expr_cnt, NULL, NULL, opl, NULL));",
          "744:     }",
          "",
          "---------------"
        ],
        "tests/func.jsi||tests/func.jsi": [
          "File: tests/func.jsi -> tests/func.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     return sum;",
          "8: };",
          "10: ;'===Begin Test===';",
          "11: ;a(10);",
          "12: ;a(100);",
          "13: ;a(1000);",
          "16: =!EXPECTSTART!=",
          "17: '===Begin Test==='",
          "18: a(10) ==> 45",
          "19: a(100) ==> 4950",
          "20: a(1000) ==> 499500",
          "21: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: function foo() {",
          "11:   return function (x) { return('FOO',x); };",
          "12: }",
          "13: function bar() {",
          "14:   return function () { return foo(); };",
          "15: }",
          "22: ;'===Func return-invoke===';",
          "23: ;(foo())(1);",
          "24: ;foo()(2);",
          "25: ;bar()()(3);",
          "34: '===Func return-invoke==='",
          "35: (foo())(1) ==> 1",
          "36: foo()(2) ==> 2",
          "37: bar()()(3) ==> 3",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
      "candidate_info": {
        "commit_hash": "97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
        "files": [
          "lib/Cdata.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiProto.c",
          "src/jsiSqlite.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.41\": provide/require option changes\n\nFossilOrigin-Name: af2c94530bd223b842b50e10e2d6cfc3ba05fd90318caf44fd5e7177ba9063b6",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         name        :null,  // Name of group",
          "20:         noline      :false, // Do not add #line to c output file",
          "21:         O           :'',    // Output file, or '-' to return string. Default is FILE.c.",
          "22:         unkType     :true,  // Warn of unknown struct fields self will be ignored.",
          "23:         varSuffix   :'_Data'// Suffix to add to data used for object config.",
          "24:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:         prod        :false, // Set production mode: masks out --I log=debug,trace,test,assert",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1655:         vr.spec = Demo__Specs;",
          "1656:         vr.data = ddPtr;",
          "1657:         vr.cmdSpec = DemoCmds;",
          "1658:         if (Demo_PkgInfo) {",
          "1661:         }",
          "1662:         if (rc == JSI_OK)",
          "1663:             rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, &vr);",
          "1666: #else",
          "1667:         rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, NULL);",
          "1668: #endif",
          "",
          "[Removed Lines]",
          "1659:             vr.info = Jsi_ValueNew1(interp);",
          "1660:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.info, 0);",
          "1664:         if (vr.info)",
          "1665:             Jsi_DecrRefCount(interp, vr.info);",
          "",
          "[Added Lines]",
          "1659:         if (self.prod)",
          "1660:             vr.conf.logmask = Jsi_LogProdMask;",
          "1662:             vr.conf.info = Jsi_ValueNew1(interp);",
          "1663:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.conf.info, 0);",
          "1667:         if (vr.conf.info)",
          "1668:             Jsi_DecrRefCount(interp, vr.conf.info);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 40",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 41",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392: } Jsi_CmdSpec;",
          "394: typedef struct {",
          "396:     int traceCall;",
          "397:     bool coverage;",
          "398:     bool profile;",
          "399: } Jsi_ModuleConf;",
          "401: typedef struct {",
          "402:     struct Jsi_OptionSpec *spec;",
          "403:     void *data; // \"status\" output in Info.package",
          "404:     Jsi_CmdSpec *cmdSpec;",
          "409: } Jsi_PkgOpts;",
          "411: typedef struct {",
          "412:     char *str;",
          "413:     int32_t len;",
          "",
          "[Removed Lines]",
          "395:     uint log, logmask;",
          "405:     Jsi_Value *info;",
          "406:     void *reserved[3]; // Reserved for future use.",
          "407:     Jsi_ModuleConf modConf;",
          "408:     void *reserved2[3]; // Reserved for future use.",
          "",
          "[Added Lines]",
          "395:     Jsi_Value *info;",
          "396:     uint logmask; // Mask out interp->log. In production C sets to Jsi_LogProdMask and Js sets via self.Debug=false...",
          "397:     uint log;",
          "401:     Jsi_Value *udata;",
          "408:     Jsi_ModuleConf conf;",
          "409:     void *reserved[5]; // Reserved for future use.",
          "412: #define Jsi_LogProdMask (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "413: #define Jsi_LogDefVal ~Jsi_LogProdMask",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1247: #ifndef JSI_EXT_OPTS_OMIT",
          "1249: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1256: #else",
          "1257: #define Jsi_LogBugExt(fmt,...)",
          "1258: #define Jsi_LogErrorExt(fmt,...)",
          "",
          "[Removed Lines]",
          "1238: #define Jsi_LogBug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogWarn(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogInfo(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogTest(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogBugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1251: #define Jsi_LogWarnExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogInfoExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogTestExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "1242: #define Jsi_LogBug(fmt,...)   Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTest(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "859:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "860:     JSI_OPT_END(Jsi_ModuleConf, .help=\"Options for require command\")",
          "861: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "861:     JSI_OPT(OBJ,   Jsi_ModuleConf, udata,   .help=\"User data settable by require\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "874:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
          "875:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
          "876:         Jsi_ObjInsert(interp, nobj, \"loadFile\", Jsi_ValueNewStringDup(interp, cp), 0);",
          "878:         if (!fval || !Jsi_ValueIsFunction(interp, fval))",
          "879:             fval = Jsi_ValueNewNull(interp);",
          "880:         Jsi_ObjInsert(interp, nobj, \"func\", fval, 0);",
          "893:         fval = interp->NullValue;",
          "894:         if (ptr->popts.spec && ptr->popts.data) {",
          "895:             fval = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "877:         Jsi_Value *fval2, *fval = Jsi_NameLookup(interp, name);",
          "881:         fval = ptr->popts.info;",
          "882:         if (!fval) fval = interp->NullValue;",
          "883:         if (!Jsi_ValueIsObjType(interp, fval, JSI_OT_FUNCTION))",
          "884:             Jsi_ObjInsert(interp, nobj, \"info\", fval, 0);",
          "885:         else {",
          "886:             fval2 = Jsi_ValueNew1(interp);",
          "887:             Jsi_RC rc = Jsi_FunctionInvoke(interp, fval, NULL, &fval2, NULL);",
          "888:             if (rc != JSI_OK)",
          "889:                 Jsi_LogWarn(\"status call failed\");",
          "890:             Jsi_ObjInsert(interp, nobj, \"info\", fval2, 0);",
          "891:             Jsi_DecrRefCount(interp, fval2);",
          "892:         }",
          "",
          "[Added Lines]",
          "879:         Jsi_Value *fval = Jsi_NameLookup(interp, name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "900:             Jsi_DecrRefCount(interp, fval);",
          "902:         fval = Jsi_ValueNew1(interp);",
          "905:         Jsi_DecrRefCount(interp, fval);",
          "907:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "903:         Jsi_OptionsConf(interp, jsiModuleOptions, &ptr->popts.modConf, NULL, &fval, 0);",
          "904:         Jsi_ObjInsert(interp, nobj, \"moduleOpts\", fval, 0);",
          "",
          "[Added Lines]",
          "893:         Jsi_OptionsConf(interp, jsiModuleOptions, &ptr->popts.conf, NULL, &fval, 0);",
          "894:         Jsi_ObjInsert(interp, nobj, \"conf\", fval, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "955:         return JSI_ERROR;",
          "956:     Jsi_RC rc = JSI_OK;",
          "957:     if (argc==2) {",
          "959:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "960:         if (rc != JSI_OK)",
          "961:             return rc;",
          "",
          "[Removed Lines]",
          "958:         if (ver < n)",
          "",
          "[Added Lines]",
          "948:         if (ver < n)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "966:     if (opts != NULL) {",
          "967:         jsi_PkgInfo *pkg = jsi_PkgGet(interp, name);",
          "968:         if (!pkg) return JSI_ERROR;",
          "971:             return JSI_ERROR;",
          "972:     }",
          "",
          "[Removed Lines]",
          "969:         Jsi_ModuleConf *mptr = &pkg->popts.modConf;",
          "970:         if (Jsi_OptionsProcess(interp, jsiModuleOptions, mptr, opts, 0) < 0)",
          "",
          "[Added Lines]",
          "959:         Jsi_ModuleConf *mptr = &pkg->popts.conf;",
          "960:         if (Jsi_OptionsProcess(interp, jsiModuleOptions, mptr, opts, JSI_OPTS_IS_UPDATE) < 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "980: {",
          "981:     jsi_PkgInfo *ptr;",
          "982:     Jsi_HashEntry *hPtr = Jsi_HashEntryFind(interp->packageHash, name);",
          "984:     jsi_Frame *fp = interp->framePtr;",
          "985:     if (version<0) {",
          "986:         if (hPtr) {",
          "",
          "[Removed Lines]",
          "983:     Jsi_Value *opts = (popts?popts->info:NULL);",
          "",
          "[Added Lines]",
          "973:     Jsi_Value *opts = (popts?popts->conf.info:NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1008:         ptr->initProc = initProc;",
          "1009:         if (popts) {",
          "1010:             ptr->popts = *popts;",
          "1013:         }",
          "1014:         if (!initProc && fp->filePtr && fp->filePtr->fileName && fp->filePtr->fileName[0]) {",
          "1015:             ptr->filePtr = fp->filePtr;",
          "",
          "[Removed Lines]",
          "1011:             if (popts->info)",
          "1012:                 Jsi_IncrRefCount(interp, popts->info);",
          "",
          "[Added Lines]",
          "1001:             if (popts->conf.info)",
          "1002:                 Jsi_IncrRefCount(interp, popts->conf.info);",
          "1003:             if (popts->conf.udata)",
          "1004:                 Jsi_IncrRefCount(interp, popts->conf.udata);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1028:                 if (opts) {",
          "1029:                     nopts = Jsi_ValueNew1(interp->topInterp);",
          "1030:                     Jsi_CleanValue(interp, interp->topInterp, opts, &nopts);",
          "1032:                 }",
          "1033:                 Jsi_RC rc = Jsi_PkgProvideEx(interp->topInterp, name, version, initProc, &po);",
          "1034:                 if (nopts)",
          "",
          "[Removed Lines]",
          "1031:                     po.info = nopts;",
          "",
          "[Added Lines]",
          "1023:                     po.conf.info = nopts;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1093:             return JSI_ERROR;",
          "1094:         if (rc == JSI_OK) {",
          "1095:             Jsi_PkgOpts po = {};",
          "1098:         }",
          "1099:     }",
          "1100:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "1096:             po.info = Jsi_ValueArrayIndex(interp, args, 2);",
          "1097:             rc = Jsi_PkgProvideEx(interp, name, n, NULL, &po);",
          "",
          "[Added Lines]",
          "1088:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1089:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1090:                 rc = JSI_ERROR;",
          "1091:             else",
          "1092:                 rc = Jsi_PkgProvideEx(interp, name, n, NULL, &po);",
          "1093:             if (po.conf.info)",
          "1094:                 Jsi_DecrRefCount(interp, po.conf.info);",
          "1095:             if (po.conf.udata)",
          "1096:                 Jsi_DecrRefCount(interp, po.conf.udata);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1785:     return cp;",
          "1786: }",
          "1804: #define FN_assert JSI_INFO(\"\\",
          "1805: Assertions.  Enable with jsish --I Assert or using the -Assert module option.\")",
          "1806: Jsi_RC jsi_AssertCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1807:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1808: {",
          "1810:         return JSI_OK;",
          "1811:     int rc = 0;",
          "1812:     Jsi_RC rv = JSI_OK;",
          "",
          "[Removed Lines]",
          "1788: uint jsi_GetLogFlag(Jsi_Interp *interp, uint maskidx) {",
          "1789:     uint logflag = interp->log, logmask = 0;",
          "1790:     jsi_Frame* fp = interp->framePtr;",
          "1791:      if (fp->filePtr) {",
          "1792:         logflag |= fp->filePtr->log;",
          "1793:         if (fp->filePtr->pkg) {",
          "1794:             logflag |= fp->filePtr->pkg->log;",
          "1795:             logmask |= fp->filePtr->pkg->logmask;",
          "1796:         }",
          "1797:      }",
          "1798:     logflag &= ~logmask;",
          "1799:     if (maskidx)",
          "1800:         logflag = logflag&(1<<maskidx);",
          "1801:     return logflag;",
          "1802: }",
          "1809:     if (!jsi_GetLogFlag(interp,JSI_LOG_ASSERT))",
          "",
          "[Added Lines]",
          "1792:     if (!jsi_GetLogFlag(interp,JSI_LOG_ASSERT, NULL))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3990:         }",
          "3991: mismatch:",
          "3992:         ok = 0;",
          "3994:             rc = Jsi_LogError(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "3995:         else",
          "3996:             Jsi_LogWarn(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "",
          "[Removed Lines]",
          "3993:         if (jsi_GetLogFlag(interp, JSI_LOG_ASSERT) && !noerror)",
          "",
          "[Added Lines]",
          "3976:         if (jsi_GetLogFlag(interp, JSI_LOG_ASSERT, NULL) && !noerror)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4778:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4779:         Jsi_ModuleConf *mo = NULL;",
          "4780:         if (pf && pf->pkg) {",
          "4782:             pf->pkg->logmask = mo->logmask;",
          "4783:             pf->pkg->log = mo->log;",
          "4784:         }",
          "",
          "[Removed Lines]",
          "4781:             mo = &pf->pkg->popts.modConf;",
          "",
          "[Added Lines]",
          "4764:             mo = &pf->pkg->popts.conf;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:         jsi_NoOpCmd(interp, NULL, NULL, NULL, NULL);",
          "750:         goto empty_func;",
          "751:     }",
          "753:         goto empty_func;",
          "754:     const char *onam = funcPtr->name;",
          "",
          "[Removed Lines]",
          "752:     if (!jsi_GetLogFlag(interp, JSI_LOG_ASSERT) && funcPtr->callback == jsi_AssertCmd)",
          "",
          "[Added Lines]",
          "752:     if (!jsi_GetLogFlag(interp, JSI_LOG_ASSERT, NULL) && funcPtr->callback == jsi_AssertCmd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:         if (ip->logidx) { // Mask out LogDebug, etc if not enabled.",
          "1068:             interp->curIp = ip;",
          "1069:             if (!logflag2) {",
          "1070:                 ip++;",
          "",
          "[Removed Lines]",
          "1067:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx);",
          "",
          "[Added Lines]",
          "1067:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx, NULL);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:     if (--func->refCnt > 0)",
          "954:         return;",
          "955:     jsi_PkgInfo *pkg = func->pkg;",
          "958:     if (profile || cover) {",
          "959:         Jsi_DString dStr;",
          "960:         Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "956:     bool profile = (interp->profile || (pkg?pkg->popts.modConf.profile:0)),",
          "957:         cover = (interp->coverage || (pkg?pkg->popts.modConf.coverage:0));",
          "",
          "[Added Lines]",
          "956:     bool profile = (interp->profile || (pkg?pkg->popts.conf.profile:0)),",
          "957:         cover = (interp->coverage || (pkg?pkg->popts.conf.coverage:0));",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: } jsi_Sig;",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "264: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "267: struct jsi_OpCode;",
          "",
          "[Removed Lines]",
          "263: #define jsi_LogDefVal (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "265: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask);",
          "",
          "[Added Lines]",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901:     const char *loadFile;  // Full path of file name loaded.",
          "902:     Jsi_InitProc *initProc; // For C-extensions.",
          "903:     bool needInit;  // If a C-extension and _Init func needs calling in this interp.",
          "905:     Jsi_PkgOpts popts;",
          "906:     jsi_FileInfo* filePtr;",
          "907:     int log, logmask; // Runtime values set by moduleOps.",
          "",
          "[Removed Lines]",
          "904:     Jsi_Value *info;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574: static Jsi_RC packageHashFree(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *ptr) {",
          "575:     jsi_PkgInfo *p = (jsi_PkgInfo*)ptr;",
          "577:     Jsi_Free(p);",
          "578:     return JSI_OK;",
          "579: }",
          "",
          "[Removed Lines]",
          "576:     if (p->popts.info) Jsi_DecrRefCount(interp, p->popts.info);",
          "",
          "[Added Lines]",
          "576:     if (p->popts.conf.info) Jsi_DecrRefCount(interp, p->popts.conf.info);",
          "577:     if (p->popts.conf.udata) Jsi_DecrRefCount(interp, p->popts.conf.udata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:     interp->logOpts.func = 1;",
          "1111:     interp->logOpts.before = 1;",
          "1112:     interp->typeCheck.strict = 1;",
          "1114:     int argc = interp->opts.argc;",
          "1115:     char **argv = interp->opts.argv;",
          "1116:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1113:     interp->log = ~jsi_LogDefVal;",
          "",
          "[Added Lines]",
          "1114:     interp->log = Jsi_LogDefVal;",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2502:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "2503:     Jsi_JSONParseFmt(interp, &info, \"{pkgVer:%d}\", MYSQL_VERSION_ID);",
          "2505:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"MySql\", 1.1, Jsi_InitMySql, &dbPkgOpts);",
          "2506:     Jsi_DecrRefCount(interp, info);",
          "2507:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2504:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds, .info=info};",
          "",
          "[Added Lines]",
          "2504:     Jsi_ModuleConf modConf = {  .info=info, .logmask=Jsi_LogProdMask};",
          "2505:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds,.conf=modConf};",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         double timStart = 0;",
          "188:         jsi_PkgInfo *pkg = funcPtr->pkg;",
          "189:         if (pkg) {",
          "193:         }",
          "195:         interp->callDepth++;",
          "",
          "[Removed Lines]",
          "190:             tc |= pkg->popts.modConf.traceCall;",
          "191:             profile |= pkg->popts.modConf.profile;",
          "192:             coverage |= pkg->popts.modConf.coverage;",
          "",
          "[Added Lines]",
          "190:             tc |= pkg->popts.conf.traceCall;",
          "191:             profile |= pkg->popts.conf.profile;",
          "192:             coverage |= pkg->popts.conf.coverage;",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4653:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4654:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4655:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4657:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4658:     Jsi_DecrRefCount(interp, info);",
          "4659:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4656:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "[Added Lines]",
          "4656:     Jsi_ModuleConf modConf = { .info=info, .logmask=Jsi_LogProdMask};",
          "4657:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .conf=modConf };",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     }",
          "107: }",
          "109: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: uint jsi_GetLogFlag(Jsi_Interp *interp, uint maskidx, Jsi_PkgOpts* popts) {",
          "110:     uint log = 0, mask = 0, ilog = interp->log;",
          "111:     jsi_Frame* fp = interp->framePtr;",
          "112:      if (popts) {",
          "113:         mask = popts->conf.logmask;",
          "114:         log = popts->conf.log;",
          "115:      } else if (fp->filePtr) {",
          "116:         log = fp->filePtr->log;",
          "117:         if (fp->filePtr->pkg) {",
          "118:             log |= fp->filePtr->pkg->log;",
          "119:             mask |= fp->filePtr->pkg->logmask;",
          "120:         }",
          "121:      }",
          "122:      log |= (ilog&~mask);",
          "123:      if (maskidx)",
          "124:         log &= (1<<maskidx);",
          "125:     return log;",
          "126: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     if (!interp || Jsi_InterpGone(interp))",
          "114:         return JSI_ERROR;",
          "115:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "120:         mask = popts->modConf.logmask;",
          "123:         isExt = 1;",
          "124:         ftail = 1;",
          "125:     }",
          "",
          "[Removed Lines]",
          "116:     uint log = 0, mask, cshift = (1<<code);",
          "117:     if (!popts)",
          "118:         log = jsi_GetLogFlag(interp, code);",
          "119:     else {",
          "121:         log = popts->modConf.log;",
          "122:         log = ((~mask|log)&cshift);",
          "",
          "[Added Lines]",
          "136:     uint log = jsi_GetLogFlag(interp, code, popts);",
          "139:         log = popts->modConf.log|interp->log;",
          "141:     if (popts) {",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3347: #endif",
          "3348:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3349:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "3351:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3352:     Jsi_DecrRefCount(interp, info);",
          "3353:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "3350:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .info=info };",
          "",
          "[Added Lines]",
          "3350:     Jsi_ModuleConf modConf = { .info=info, .logmask=Jsi_LogProdMask};",
          "3351:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .conf=modConf };",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1429: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1430: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1431: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1432: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1433: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "1434: </table>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1432: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1435: <tr><td>udata</td><td><i>OBJ</i></td><td>User data settable by require.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
      "candidate_info": {
        "commit_hash": "4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
        "files": [
          "lib/Debug.jsi",
          "lib/Jsish.jsi",
          "lib/Zip.jsi",
          "lib/autoload.jsi",
          "lib/www/md/Logging.md",
          "lib/www/md/Misc.md",
          "lib/www/md/Modules.md",
          "lib/www/md/Reference.md",
          "lib/www/md/Start.md",
          "lib/www/md/Testing.md",
          "lib/www/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFileCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "tests/assert.jsi",
          "tests/file2.jsi",
          "tools/mkindex.jsi",
          "tools/protos.jsi",
          "tools/randtest.jsi",
          "tools/stubrenumber.jsi"
        ],
        "message": "Release \"3.4.5\": fix File.glob, add Interp.asserts, add Jsi_CopyDir, Zip -startDir\n\nFossilOrigin-Name: 27bcb4bd9f140eeafdafdab0249afec9620c87e333cb153f3baae27e3bed6f73",
        "before_after_code_files": [
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tests/assert.jsi||tests/assert.jsi",
          "tests/file2.jsi||tests/file2.jsi",
          "tools/mkindex.jsi||tools/mkindex.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/randtest.jsi||tools/randtest.jsi",
          "tools/stubrenumber.jsi||tools/stubrenumber.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:             args:self.args,",
          "484:             scriptFile:self.dbfile,",
          "485:             isSafe:self.safe,",
          "487:         };",
          "488:         self.interp = new Interp(dopts);",
          "489:         puts(\"Running in debugger: \"+self.dbfile+' '+self.args.toString());",
          "",
          "[Removed Lines]",
          "486:             name:'debugProg'",
          "",
          "[Added Lines]",
          "486:             name:'debugProg',",
          "487:             log:Interp.conf('log'),",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     return false;",
          "306: }",
          "308: if (Info.isMain()) {",
          "310:     var self = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: function Jsi_CopyDir(dir:string, to:string, globOpts:object=void) {",
          "309:     var opts = {recurse:true, types:'f', dir};",
          "310:     if (globOpts)",
          "311:          opts = Object.assign(opts, globopts);",
          "312:     var i, n, dn, d = File.glob(opts).sort();",
          "313:     to = File.realpath(to);",
          "314:     if (!File.exists(to))",
          "315:         File.mkdir(to);",
          "316:     for (i of d) {",
          "317:         n = File.join(to, i);",
          "318:         dn = File.dirname(n);",
          "319:         if (!File.exists(dn))",
          "320:             File.mkdir(dn);",
          "321:         File.copy(File.join(dir, i), n);",
          "322:     }",
          "323: }",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: function Zip(args:string|array, conf:object=void) {",
          "7:     const options = { // Implements zip functionality",
          "10:         indir       :'',        // Input directory",
          "12:     };",
          "13:     var self = parseOpts({}, options, conf);",
          "",
          "[Removed Lines]",
          "8:         userDir     :'',        // User directory to add to zip (zvfs)",
          "9:         outfile     :'',        // Output file for zvfs instead of appending \"sh\"",
          "11:         verbose     :false      // Echo file name of unzip.",
          "",
          "[Added Lines]",
          "9:         outfile     :'',        // Output file for zvfs instead of appending \"sh\"",
          "10:         startDir    :'',        // Start at dir for unzip.",
          "11:         userDir     :'',        // User directory to add to zip (zvfs)",
          "12:         verbose     :false,     // Echo file name of unzip.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         return 0;",
          "69:     }",
          "74:             zdir = '/zvfs';",
          "75:         else",
          "76:             zdir = Zvfs.mount(fname);",
          "80:         var flist = File.glob('*', {dir:zdir,recurse:true}).sort();",
          "81:         for (var i in flist) {",
          "",
          "[Removed Lines]",
          "71:     function unzip(fname:string, ddir='') {",
          "72:         fname = File.realpath(fname);",
          "73:         if (fname === Info.executable())",
          "77:         if (ddir !== '' && ddir.substr(-1,1) != '/')",
          "78:             ddir += '/';",
          "",
          "[Added Lines]",
          "72:     function unzip(fname:string, destDir='') {",
          "73:         if (fname)",
          "74:             fname = File.realpath(fname);",
          "75:         if (!fname || fname === Info.executable())",
          "79:         if (self.startDir)",
          "80:             zdir += '/'+self.startDir;",
          "81:         if (destDir !== '' && destDir.substr(-1,1) != '/')",
          "82:             destDir += '/';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:             if (ftyp[0] === 'd') continue;",
          "86:             if (self.verbose)",
          "87:                 puts(\"\"+fn);",
          "89:             if (fdir !== '.' && !File.isdir(fdir))",
          "90:                 File.mkdir(fdir, true);",
          "92:         }",
          "93:         return 0;",
          "94:     }",
          "",
          "[Removed Lines]",
          "88:             var fdir = File.dirname(ddir+fn);",
          "91:             File.write(ddir+fn, File.read(zdir+'/'+fn));",
          "",
          "[Added Lines]",
          "92:             var fdir = File.dirname(destDir+fn);",
          "95:             File.write(destDir+fn, File.read(zdir+'/'+fn));",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Jsi_Auto.Jsi_Opts       =",
          "12: Jsi_Auto.Jsi_SqlValues  =",
          "13: Jsi_Auto.Jsi_TableObj   =",
          "14: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "15: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "16: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: Jsi_Auto.Jsi_CopyDir    =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4709: }",
          "4711: bool jsi_isDebugKey(const char *key) {",
          "4713: }",
          "4715: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "4712:     return (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"));",
          "",
          "[Added Lines]",
          "4712:     return ((*key=='T' && (!Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")))",
          "4713:         ||  (*key=='A' && !Jsi_Strcmp(key, \"Assert\"))",
          "4714:         ||  (*key=='D' && !Jsi_Strcmp(key, \"Debug\")));",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:     Jsi_Value *dir;",
          "878:     const char *dirStr;",
          "879:     int dirLen;",
          "880:     const char *prefix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:     Jsi_Value *pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:     JSI_OPT(FUNC,   GlobData, filter,   .help=\"Filter function to call with each file, returning false to discard\", .flags=0, .custom=0, .data=(void*)\"file:string\"),",
          "889:     JSI_OPT(INT,    GlobData, limit,    .help=\"The maximum number of results to return/count: -1 is unlimited (Interp.maxArrayList)\"),",
          "890:     JSI_OPT(STRKEY, GlobData, noTypes,  .help=\"Filter files to exclude these \\\"types\\\"\"),",
          "891:     JSI_OPT(STRKEY, GlobData, prefix,   .help=\"String prefix to prepend to each file in result list\"),",
          "892:     JSI_OPT(BOOL,   GlobData, recurse,  .help=\"Recurse into sub-directories\"),",
          "893:     JSI_OPT(BOOL,   GlobData, retCount, .help=\"Return only the count of matches\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892:     JSI_OPT(VALUE,  GlobData, pattern,  .help=\"Pattern to use if arg 1 is null\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1166: #define FN_glob JSI_INFO(\"\\",
          "1167: With no arguments (or null) returns all files/directories in current directory.\\n\\",
          "1169: When the second argument is a function, it is called with each path, and filter on false.\\n\\",
          "1170: Otherwise second argument must be a set of options.\")",
          "1172:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1173: {",
          "1174:     int fo = 1, isOpts = 0;",
          "",
          "[Removed Lines]",
          "1168: The first argument can be a pattern (either a glob or regexp) of the files to return.\\n\\",
          "1171: static Jsi_RC FileGlobsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "1170: The first argument can be options, a pattern (either a glob or regexp) of the files to return.\\n\\",
          "1173: static Jsi_RC FileGlobCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1177:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 1);",
          "1178:     GlobData Data = {};",
          "1179:     Jsi_Obj *obj = NULL;",
          "1182:     const char *dcp, *zPattern = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182:     bool iso1 = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1186:     Data.flags = JSI_FILE_TYPE_FILES;",
          "1189:         switch (arg->vt) {",
          "1201:                         break;",
          "1204:             }",
          "1206:         }",
          "1210:     }",
          "1211:     if (isOpts && Jsi_OptionsProcess(interp, GlobOptions, &Data, arg, 0) < 0) {",
          "1212:         rc = JSI_ERROR;",
          "1213:         goto done;",
          "1214:     }",
          "1215:     if (!Data.limit)",
          "1216:         Data.limit = interp->maxArrayList;",
          "1217:     if (Data.dir) {",
          "",
          "[Removed Lines]",
          "1188:     if (arg)",
          "1190:         case JSI_VT_NULL: break;",
          "1191:         case JSI_VT_OBJECT:",
          "1192:         {",
          "1193:             Jsi_Obj *sobj = arg->d.obj;",
          "1194:             switch (sobj->ot) {",
          "1195:                 case JSI_OT_FUNCTION:",
          "1196:                     Data.filter = arg;",
          "1197:                     break;",
          "1198:                 case JSI_OT_OBJECT:",
          "1199:                     if (!sobj->isarrlist) {",
          "1200:                         isOpts = 1;",
          "1202:                     }",
          "1203:                 default: fo = 0;",
          "1205:             if (fo) break;",
          "1207:         default:",
          "1208:             rc = Jsi_LogError(\"arg2 must be a function, object or null\");",
          "1209:             goto done;",
          "",
          "[Added Lines]",
          "1191:     if (!arg && pat && Jsi_ValueIsObjType(interp, pat, JSI_OT_OBJECT)) {",
          "1192:         arg = pat;",
          "1193:         pat = NULL;",
          "1194:         iso1 = 1;",
          "1195:     }",
          "1196:     if (arg) {",
          "1198:             case JSI_VT_NULL: break;",
          "1199:             case JSI_VT_OBJECT:",
          "1200:             {",
          "1201:                 Jsi_Obj *sobj = arg->d.obj;",
          "1202:                 switch (sobj->ot) {",
          "1203:                     case JSI_OT_FUNCTION:",
          "1204:                         Data.filter = arg;",
          "1206:                     case JSI_OT_OBJECT:",
          "1207:                         if (!sobj->isarrlist) {",
          "1208:                             isOpts = 1;",
          "1209:                             break;",
          "1210:                         }",
          "1211:                     default: fo = 0;",
          "1212:                 }",
          "1213:                 if (fo) break;",
          "1215:             default:",
          "1216:                 rc = Jsi_LogError(\"arg2 must be a function, object or null\");",
          "1217:                 goto done;",
          "1224:     if (!iso1 && pat && pat->vt == JSI_VT_NULL && Data.pattern)",
          "1225:         pat = Data.pattern;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1220:             dcp = Jsi_FileRealpath(interp, Data.dir, NULL);",
          "1221:             if (!dcp)",
          "1222:                 dcp = Data.dirStr;",
          "1224:                 Data.dirLen = Jsi_Strlen(dcp);",
          "1225:         }",
          "1226:         Jsi_DSAppend(&dStr, dcp, (*dcp && dcp[Jsi_Strlen(dcp)-1]!='/')?\"/\":\"\", NULL);",
          "1227:     }",
          "",
          "[Removed Lines]",
          "1223:             else",
          "",
          "[Added Lines]",
          "1234:             else {",
          "1235:                 Jsi_DecrRefCount(interp, Data.dir);",
          "1236:                 Data.dir = Jsi_ValueNewStringDup(interp, dcp);",
          "1237:                 Jsi_IncrRefCount(interp, Data.dir);",
          "1239:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1285:     { \"isdir\",      FileIsdirCmd,       1,  1, \"file:string\",  .help=\"Return true if file is a directory\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1286:     { \"isfile\",     FileIsfileCmd,      1,  1, \"file:string\",  .help=\"Return true if file is a normal file\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1287:     { \"isrelative\", FileIsRelativeCmd,  1,  1, \"file:string\",  .help=\"Return true if file path is relative\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1289:     { \"link\",       FileLinkCmd,        2,  3, \"src:string, dest:string, ishard:boolean=false\",  .help=\"Link a file\", .retType=0, .flags=0, .info=FN_link },",
          "1290:     { \"lstat\",      FileLstatCmd,       1,  1, \"file:string\",  .help=\"Return status info for file\", .retType=(uint)JSI_TT_OBJECT },",
          "1291:     { \"mkdir\",      FileMkdirCmd,       1,  2, \"file:string,force:boolean=false\",  .help=\"Create a directory: force creates subdirs\" },",
          "",
          "[Removed Lines]",
          "1288:     { \"glob\",       FileGlobsCmd,        0,  2, \"pattern:regexp|string|null='*', options:function|object|null=void\", .help=\"Return list of files in dir with optional pattern match\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_glob, .opts=GlobOptions },",
          "",
          "[Added Lines]",
          "1303:     { \"glob\",       FileGlobCmd,        0,  2, \"options:regexp|string|object|null='*', opts:function|object|null=void\", .help=\"Return list of files in dir with optional pattern match\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_glob, .opts=GlobOptions },",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "971: } Jsi_TypeCheck;",
          "973: typedef enum {",
          "975:     jsi_AssertModeLog,",
          "977: } jsi_AssertMode;",
          "979: typedef struct {",
          "",
          "[Removed Lines]",
          "974:     jsi_AssertModeThrow,",
          "976:     jsi_AssertModePuts",
          "",
          "[Added Lines]",
          "975:     jsi_AssertModePuts,",
          "976:     jsi_AssertModeThrow",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1119:     int profileCnt;",
          "1120:     bool noNetwork;",
          "1121:     bool noInput;",
          "1122:     jsi_AssertMode assertMode;",
          "1123:     uint testMode;",
          "1124:     const char *jsppChars;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     bool asserts;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: static const char *jsi_SafeModeStrs[] = { \"none\", \"read\", \"write\", \"writeRead\", \"lockdown\", NULL };",
          "76: static const char *jsi_TypeChkStrs[] = { \"noreturn\", \"noundef\", \"nowith\", \"builtins\", \"funcdecl\", NULL };",
          "77: const char *jsi_callTraceStrs[] = { \"funcs\", \"cmds\", \"new\", \"return\", \"args\", \"notrunc\", \"noparent\", \"full\", \"before\", NULL};",
          "80: static Jsi_OptionSpec InterpOptions[] = {",
          "81:     JSI_OPT(ARRAY, Jsi_Interp, args,        .help=\"The console.arguments for interp\", jsi_IIOF),",
          "82:     JSI_OPT(CUSTOM,Jsi_Interp, assertMode,  .help=\"Action upon assert failure\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=jsi_AssertModeStrs ),",
          "83:     JSI_OPT(ARRAY, Jsi_Interp, autoFiles,   .help=\"File(s) to source for loading Jsi_Auto to handle unknown commands\"),",
          "84:     JSI_OPT(CUSTOM,Jsi_Interp, busyCallback,.help=\"Command in parent interp (or noOp) to periodically call\", .flags=0, .custom=Jsi_Opt_SwitchParentFunc, .data=(void*)\"interpName:string, opCnt:number\"),",
          "",
          "[Removed Lines]",
          "78: const char *jsi_AssertModeStrs[] = { \"throw\", \"log\", \"puts\", NULL};",
          "",
          "[Added Lines]",
          "78: const char *jsi_AssertModeStrs[] = { \"log\", \"puts\", \"throw\", NULL};",
          "82:     JSI_OPT(BOOL,  Jsi_Interp, asserts,     .help=\"Shortcut for toggling log:assert and assertMode=throw\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1074:         interp->tracePuts = 1;",
          "1075: }",
          "1077: static Jsi_Interp* jsi_InterpNew(Jsi_Interp *parent, Jsi_Value *opts, Jsi_InterpOpts *iopts)",
          "1078: {",
          "1079:     Jsi_Interp* interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078: static void jsi_interpAssertsUpdate(Jsi_Interp *interp) {",
          "1079:     if (interp->asserts) {",
          "1080:         interp->log |= JSI_LOG_ASSERT;",
          "1081:         interp->assertMode = jsi_AssertModeThrow;",
          "1082:     } else {",
          "1083:         interp->log &= ~JSI_LOG_ASSERT;",
          "1084:         interp->assertMode = jsi_AssertModePuts;",
          "1085:     }",
          "1086: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1446:     interp->framePtr->ingsc = interp->gsc = jsi_ScopeChainNew(interp, 0);",
          "1449:     jsi_UnitTestSetup(interp);",
          "1450:     if (interp->args && argc) {",
          "1451:         Jsi_LogBug(\"args may not be specified both as options and parameter\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     jsi_interpAssertsUpdate(interp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2879:     Jsi_RC rc;",
          "2880:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "2881:     Jsi_Interp *sinterp = interp;",
          "2882:     if (!udf || udf->subinterp == interp) {",
          "2883:         if (interp->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "2884:             return Jsi_LogError(\"Interp conf() is disabled for set\");",
          "2885:         rc = Jsi_OptionsConf(interp, InterpOptions, interp, opts, ret, 0);",
          "2886:     } else {",
          "2887:         sinterp = udf->subinterp;",
          "2888:         Jsi_Value *popts = opts;",
          "2889:         if (opts && opts->vt != JSI_VT_NULL && !Jsi_ValueString(interp, opts, NULL) && opts->vt == JSI_VT_OBJECT) {",
          "2890:             popts = Jsi_ValueNew1(sinterp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2894:     bool oasserts = interp->asserts;",
          "2901:         oasserts = interp->asserts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2895:             Jsi_DecrRefCount(sinterp, popts);",
          "2896:         Jsi_CleanValue(sinterp, interp, *ret, ret);",
          "2897:     }",
          "2898:     jsi_UnitTestSetup(sinterp);",
          "2899:     return rc;",
          "2900: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2912:     if (sinterp->asserts != oasserts)",
          "2913:         jsi_interpAssertsUpdate(sinterp);",
          "",
          "---------------"
        ],
        "tests/assert.jsi||tests/assert.jsi": [
          "File: tests/assert.jsi -> tests/assert.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ;assert(true,'true');",
          "5: ;assert(2*3 == 6,'math');",
          "6: try {",
          "7:     assert(false,'false');",
          "8: } catch(e) {",
          "9:     puts('caught error');",
          "10: }",
          "12: var x;",
          "13: ;x = 1;",
          "14: ;assert(false,'false2');",
          "",
          "[Removed Lines]",
          "11: ;Interp.conf({log:{assert:false}});",
          "",
          "[Added Lines]",
          "7: Interp.conf({asserts:true});",
          "14: ;Interp.conf({asserts:false});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: assert(true,'true') ==> undefined",
          "43: assert(2*3 == 6,'math') ==> undefined",
          "44: caught error",
          "46: x = 1 ==> 1",
          "49: Interp.conf({log:{assert:true}}) ==> undefined",
          "50: assert(function () { return (i<j); },'fail') ==> undefined",
          "53: assert(false,'this assert failed',{mode:'puts', noStderr:true}) ==> this assert failed",
          "54: undefined",
          "55: Interp.conf({assertMode:'puts', noStderr:true}) ==> undefined",
          "",
          "[Removed Lines]",
          "45: Interp.conf({log:{assert:false}}) ==> undefined",
          "47: assert(false,'false2') ==> undefined",
          "48: assert(false===true) ==> undefined",
          "51: caught error2: assert(false==true)",
          "52: assert(false,'false') ==> caught error2: false",
          "",
          "[Added Lines]",
          "48: Interp.conf({asserts:false}) ==> undefined",
          "50: assert(false,'false2') ==> false2",
          "51: undefined",
          "52: assert(false===true) ==> assert(false===true)`),puts(assert(false===true))",
          "53: undefined",
          "56: assert(false==true)",
          "57: assert(false,'false') ==> false",
          "58: undefined",
          "",
          "---------------"
        ],
        "tests/file2.jsi||tests/file2.jsi": [
          "File: tests/file2.jsi -> tests/file2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: File.mkdir('XX1/AA');",
          "5: File.mkdir('XX1/BB');",
          "6: File.rename('XX1/BB','XX1/CC.txt');",
          "7: ;File.glob(null,{dir:'XX1'}).sort();",
          "8: ;File.dirname('XX1/AA');",
          "9: ;File.rootname('XX1/CC.txt');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: ;File.glob({dir:'XX1'}).sort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: =!EXPECTSTART!=",
          "23: File.glob(null,{dir:'XX1'}).sort() ==> [ \"AA\", \"CC.txt\" ]",
          "24: File.dirname('XX1/AA') ==> XX1",
          "25: File.rootname('XX1/CC.txt') ==> XX1/CC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: File.glob({dir:'XX1'}).sort() ==> [ \"AA\", \"CC.txt\" ]",
          "",
          "---------------"
        ],
        "tools/mkindex.jsi||tools/mkindex.jsi": [
          "File: tools/mkindex.jsi -> tools/mkindex.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     puts(rv);",
          "22: }",
          "",
          "[Removed Lines]",
          "24: runModule(mkindex);",
          "",
          "[Added Lines]",
          "24: module(mkindex);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: File.prototype.executable = function(file:string):boolean {};",
          "62: File.prototype.exists = function(file:string):boolean {};",
          "63: File.prototype.extension = function(file:string):string {};",
          "65: File.prototype.isdir = function(file:string):boolean {};",
          "66: File.prototype.isfile = function(file:string):boolean {};",
          "67: File.prototype.isrelative = function(file:string):boolean {};",
          "",
          "[Removed Lines]",
          "64: File.prototype.glob = function(pattern:regexp|string|null='*', options:function|object|null=void):array {};",
          "",
          "[Added Lines]",
          "64: File.prototype.glob = function(options:regexp|string|object|null='*', opts:function|object|null=void):array {};",
          "",
          "---------------"
        ],
        "tools/randtest.jsi||tools/randtest.jsi": [
          "File: tools/randtest.jsi -> tools/randtest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     return;",
          "79: }",
          "",
          "[Removed Lines]",
          "81: runModule(randtest);",
          "",
          "[Added Lines]",
          "81: module(randtest);",
          "",
          "---------------"
        ],
        "tools/stubrenumber.jsi||tools/stubrenumber.jsi": [
          "File: tools/stubrenumber.jsi -> tools/stubrenumber.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     return rc;",
          "18: }",
          "",
          "[Removed Lines]",
          "20: runModule(stubrenumber);",
          "",
          "[Added Lines]",
          "20: module(stubrenumber);",
          "",
          "---------------"
        ]
      }
    }
  ]
}