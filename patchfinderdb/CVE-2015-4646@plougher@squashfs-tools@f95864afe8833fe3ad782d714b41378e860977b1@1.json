{
  "cve_id": "CVE-2015-4646",
  "cve_desc": "(1) unsquash-1.c, (2) unsquash-2.c, (3) unsquash-3.c, and (4) unsquash-4.c in Squashfs and sasquatch allow remote attackers to cause a denial of service (application crash) via a crafted input.",
  "repo": "plougher/squashfs-tools",
  "patch_hash": "f95864afe8833fe3ad782d714b41378e860977b1",
  "patch_info": {
    "commit_hash": "f95864afe8833fe3ad782d714b41378e860977b1",
    "repo": "plougher/squashfs-tools",
    "commit_url": "https://github.com/plougher/squashfs-tools/commit/f95864afe8833fe3ad782d714b41378e860977b1",
    "files": [
      "squashfs-tools/read_xattrs.c",
      "squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c"
    ],
    "message": "unsquashfs-4: Add more sanity checks + fix CVE-2015-4645/6\n\nAdd more filesystem table sanity checks to Unsquashfs-4 and\nalso properly fix CVE-2015-4645 and CVE-2015-4646.\n\nThe CVEs were raised due to Unsquashfs having variable\noveflow and stack overflow in a number of vulnerable\nfunctions.\n\nThe suggested patch only \"fixed\" one such function and fixed\nit badly, and so it was buggy and introduced extra bugs!\n\nThe suggested patch was not only buggy, but, it used the\nessentially wrong approach too.  It was \"fixing\" the\nsymptom but not the cause.  The symptom is wrong values\ncausing overflow, the cause is filesystem corruption.\nThis corruption should be detected and the filesystem\nrejected *before* trying to allocate memory.\n\nThis patch applies the following fixes:\n\n1. The filesystem super-block tables are checked, and the values\n   must match across the filesystem.\n\n   This will trap corrupted filesystems created by Mksquashfs.\n\n2. The maximum (theorectical) size the filesystem tables could grow\n   to, were analysed, and some variables were increased from int to\n   long long.\n\n   This analysis has been added as comments.\n\n3. Stack allocation was removed, and a shared buffer (which is\n   checked and increased as necessary) is used to read the\n   table indexes.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
    "before_after_code_files": [
      "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c",
      "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
    ]
  },
  "patch_diff": {
    "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c": [
      "File: squashfs-tools/read_xattrs.c -> squashfs-tools/read_xattrs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "151: int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk, int flag, long long *table_start)",
      "152: {",
      "154:  long long *index, start, end;",
      "155:  struct squashfs_xattr_table id_table;",
      "",
      "[Removed Lines]",
      "153:  int res, bytes, i, indexes, index_bytes, ids;",
      "",
      "[Added Lines]",
      "160:  int res, i, indexes, index_bytes;",
      "161:  unsigned int ids;",
      "162:  long long bytes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:  SQUASHFS_INSWAP_XATTR_TABLE(&id_table);",
      "180:   return id_table.xattr_ids;",
      "191:  index = malloc(index_bytes);",
      "192:  if(index == NULL)",
      "193:   MEM_ERROR();",
      "",
      "[Removed Lines]",
      "173:  if(flag) {",
      "181:  }",
      "187:  ids = id_table.xattr_ids;",
      "188:  xattr_table_start = id_table.xattr_table_start;",
      "189:  index_bytes = SQUASHFS_XATTR_BLOCK_BYTES(ids);",
      "190:  indexes = SQUASHFS_XATTR_BLOCKS(ids);",
      "",
      "[Added Lines]",
      "185:  ids = id_table.xattr_ids;",
      "186:  xattr_table_start = id_table.xattr_table_start;",
      "187:  index_bytes = SQUASHFS_XATTR_BLOCK_BYTES((long long) ids);",
      "188:  indexes = SQUASHFS_XATTR_BLOCKS((long long) ids);",
      "194:  if(index_bytes != (sBlk->bytes_used - (sBlk->xattr_id_table_start + sizeof(id_table)))) {",
      "195:   ERROR(\"read_xattrs_from_disk: Bad xattr_ids count in super block\\n\");",
      "196:   return 0;",
      "197:  }",
      "204:  if(table_start != NULL)",
      "213:  if(flag)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "207:  xattr_ids = malloc(bytes);",
      "208:  if(xattr_ids == NULL)",
      "209:   MEM_ERROR();",
      "",
      "[Removed Lines]",
      "206:  bytes = SQUASHFS_XATTR_BYTES(ids);",
      "",
      "[Added Lines]",
      "235:  bytes = SQUASHFS_XATTR_BYTES((long long) ids);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "213:      bytes & (SQUASHFS_METADATA_SIZE - 1);",
      "214:   int length = read_block(fd, index[i], NULL, expected,",
      "215:    ((unsigned char *) xattr_ids) +",
      "217:   TRACE(\"Read xattr id table block %d, from 0x%llx, length \"",
      "218:    \"%d\\n\", i, index[i], length);",
      "219:   if(length == 0) {",
      "",
      "[Removed Lines]",
      "216:    (i * SQUASHFS_METADATA_SIZE));",
      "",
      "[Added Lines]",
      "245:    ((long long) i * SQUASHFS_METADATA_SIZE));",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
      "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: static struct squashfs_fragment_entry *fragment_table;",
      "30: static unsigned int *id_table;",
      "33: {",
      "34:  int res, i;",
      "39:  TRACE(\"read_fragment_table: %d fragments, reading %d fragment indexes \"",
      "40:   \"from 0x%llx\\n\", sBlk.s.fragments, indexes,",
      "41:   sBlk.s.fragment_table_start);",
      "48:  fragment_table = malloc(bytes);",
      "49:  if(fragment_table == NULL)",
      "50:   EXIT_UNSQUASH(\"read_fragment_table: failed to allocate \"",
      "51:    \"fragment table\\n\");",
      "56:  if(res == FALSE) {",
      "57:   ERROR(\"read_fragment_table: failed to read fragment table \"",
      "58:    \"index\\n\");",
      "",
      "[Removed Lines]",
      "32: static int read_fragment_table(long long *directory_table_end)",
      "35:  int bytes = SQUASHFS_FRAGMENT_BYTES(sBlk.s.fragments);",
      "36:  int  indexes = SQUASHFS_FRAGMENT_INDEXES(sBlk.s.fragments);",
      "37:  long long fragment_table_index[indexes];",
      "43:  if(sBlk.s.fragments == 0) {",
      "45:   return TRUE;",
      "46:  }",
      "53:  res = read_fs_bytes(fd, sBlk.s.fragment_table_start,",
      "54:   SQUASHFS_FRAGMENT_INDEX_BYTES(sBlk.s.fragments),",
      "55:   fragment_table_index);",
      "",
      "[Added Lines]",
      "32: long long *alloc_index_table(int indexes)",
      "34:  static long long *alloc_table = NULL;",
      "35:  static int alloc_size = 0;",
      "36:  int length = indexes * sizeof(long long);",
      "38:  if(alloc_size < length) {",
      "39:   long long *table = realloc(alloc_table, length);",
      "41:   if(table == NULL)",
      "42:    EXIT_UNSQUASH(\"alloc_index_table: failed to allocate \"",
      "43:     \"index table\\n\");",
      "45:   alloc_table = table;",
      "46:   alloc_size = length;",
      "47:  }",
      "49:  return alloc_table;",
      "50: }",
      "53: static int read_fragment_table(long long *table_start)",
      "54: {",
      "63:  long long bytes = SQUASHFS_FRAGMENT_BYTES((long long) sBlk.s.fragments);",
      "64:  int indexes = SQUASHFS_FRAGMENT_INDEXES((long long) sBlk.s.fragments);",
      "65:  int length = SQUASHFS_FRAGMENT_INDEX_BYTES((long long) sBlk.s.fragments);",
      "66:  long long *fragment_table_index;",
      "72:  if(length != (*table_start - sBlk.s.fragment_table_start)) {",
      "73:   ERROR(\"read_fragment_table: Bad fragment count in super block\\n\");",
      "74:   return FALSE;",
      "75:  }",
      "81:  fragment_table_index = alloc_index_table(indexes);",
      "87:  res = read_fs_bytes(fd, sBlk.s.fragment_table_start, length,",
      "88:        fragment_table_index);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356: }",
      "360: {",
      "361:  int res, i;",
      "362:  int bytes = SQUASHFS_ID_BYTES(sBlk.s.no_ids);",
      "363:  int indexes = SQUASHFS_ID_BLOCKS(sBlk.s.no_ids);",
      "368:  id_table = malloc(bytes);",
      "369:  if(id_table == NULL) {",
      "371:   return FALSE;",
      "372:  }",
      "376:  if(res == FALSE) {",
      "378:   return FALSE;",
      "379:  }",
      "380:  SQUASHFS_INSWAP_ID_BLOCKS(id_index_table, indexes);",
      "",
      "[Removed Lines]",
      "359: static int read_uids_guids(long long *table_start)",
      "364:  long long id_index_table[indexes];",
      "366:  TRACE(\"read_uids_guids: no_ids %d\\n\", sBlk.s.no_ids);",
      "370:   ERROR(\"read_uids_guids: failed to allocate id table\\n\");",
      "374:  res = read_fs_bytes(fd, sBlk.s.id_table_start,",
      "375:   SQUASHFS_ID_BLOCK_BYTES(sBlk.s.no_ids), id_index_table);",
      "377:   ERROR(\"read_uids_guids: failed to read id index table\\n\");",
      "",
      "[Added Lines]",
      "392: static int read_id_table(long long *table_start)",
      "404:  int length = SQUASHFS_ID_BLOCK_BYTES(sBlk.s.no_ids);",
      "405:  long long *id_index_table;",
      "411:  if(length != (*table_start - sBlk.s.id_table_start)) {",
      "412:   ERROR(\"read_id_table: Bad id count in super block\\n\");",
      "413:   return FALSE;",
      "414:  }",
      "416:  TRACE(\"read_id_table: no_ids %d\\n\", sBlk.s.no_ids);",
      "418:  id_index_table = alloc_index_table(indexes);",
      "421:   ERROR(\"read_id_table: failed to allocate id table\\n\");",
      "425:  res = read_fs_bytes(fd, sBlk.s.id_table_start, length, id_index_table);",
      "427:   ERROR(\"read_id_table: failed to read id index table\\n\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "393:   res = read_block(fd, id_index_table[i], NULL, expected,",
      "394:    ((char *) id_table) + i * SQUASHFS_METADATA_SIZE);",
      "395:   if(res == FALSE) {",
      "397:     \"\\n\");",
      "398:    return FALSE;",
      "399:   }",
      "",
      "[Removed Lines]",
      "396:    ERROR(\"read_uids_guids: failed to read id table block\"",
      "",
      "[Added Lines]",
      "446:    ERROR(\"read_id_table: failed to read id table block\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "408: static int parse_exports_table(long long *table_start)",
      "409: {",
      "410:  int res;",
      "416:  if(res == FALSE) {",
      "417:   ERROR(\"parse_exports_table: failed to read export index table\\n\");",
      "418:   return FALSE;",
      "",
      "[Removed Lines]",
      "411:  int indexes = SQUASHFS_LOOKUP_BLOCKS(sBlk.s.inodes);",
      "412:  long long export_index_table[indexes];",
      "414:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start,",
      "415:   SQUASHFS_LOOKUP_BLOCK_BYTES(sBlk.s.inodes), export_index_table);",
      "",
      "[Added Lines]",
      "467:  int indexes = SQUASHFS_LOOKUP_BLOCKS((long long) sBlk.s.inodes);",
      "468:  int length = SQUASHFS_LOOKUP_BLOCK_BYTES((long long) sBlk.s.inodes);",
      "469:  long long *export_index_table;",
      "475:  if(length != (*table_start - sBlk.s.lookup_table_start)) {",
      "476:   ERROR(\"parse_exports_table: Bad inode count in super block\\n\");",
      "477:   return FALSE;",
      "478:  }",
      "480:  export_index_table = alloc_index_table(indexes);",
      "482:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start, length,",
      "483:        export_index_table);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "433: int read_filesystem_tables_4()",
      "434: {",
      "453:  if(read_directory_table(sBlk.s.directory_table_start,",
      "457:  if(no_xattrs)",
      "458:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
      "460:  return TRUE;",
      "461: }",
      "",
      "[Removed Lines]",
      "435:  long long directory_table_end, table_start;",
      "437:  if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
      "438:   return FALSE;",
      "440:  if(read_uids_guids(&table_start) == FALSE)",
      "441:   return FALSE;",
      "443:  if(parse_exports_table(&table_start) == FALSE)",
      "444:   return FALSE;",
      "446:  if(read_fragment_table(&directory_table_end) == FALSE)",
      "447:   return FALSE;",
      "449:  if(read_inode_table(sBlk.s.inode_table_start,",
      "450:     sBlk.s.directory_table_start) == FALSE)",
      "451:   return FALSE;",
      "454:     directory_table_end) == FALSE)",
      "455:   return FALSE;",
      "",
      "[Added Lines]",
      "503:  long long table_start;",
      "506:  if(sBlk.s.xattr_id_table_start != SQUASHFS_INVALID_BLK) {",
      "508:   if(sBlk.s.xattr_id_table_start >= sBlk.s.bytes_used) {",
      "509:    ERROR(\"read_filesystem_tables: xattr id table start too large in super block\\n\");",
      "510:    goto corrupted;",
      "511:   }",
      "513:   if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
      "514:    goto corrupted;",
      "515:  } else",
      "516:   table_start = sBlk.s.bytes_used;",
      "521:  if(sBlk.s.id_table_start >= table_start) {",
      "522:   ERROR(\"read_filesystem_tables: id table start too large in super block\\n\");",
      "523:   goto corrupted;",
      "524:  }",
      "527:  if(sBlk.s.no_ids == 0) {",
      "528:   ERROR(\"read_filesystem_tables: Bad id count in super block\\n\");",
      "529:   goto corrupted;",
      "530:  }",
      "536:  if(sBlk.s.no_ids > (sBlk.s.inodes * 2L)) {",
      "537:   ERROR(\"read_filesystem_tables: Bad id count in super block\\n\");",
      "538:   goto corrupted;",
      "539:  }",
      "541:  if(read_id_table(&table_start) == FALSE)",
      "542:   goto corrupted;",
      "545:  if(sBlk.s.lookup_table_start != SQUASHFS_INVALID_BLK) {",
      "548:   if(sBlk.s.lookup_table_start >= table_start) {",
      "549:    ERROR(\"read_filesystem_tables: lookup table start too large in super block\\n\");",
      "550:    goto corrupted;",
      "551:   }",
      "553:   if(parse_exports_table(&table_start) == FALSE)",
      "554:    goto corrupted;",
      "555:  }",
      "558:  if(sBlk.s.fragments != 0) {",
      "561:   if(sBlk.s.fragment_table_start >= table_start) {",
      "562:    ERROR(\"read_filesystem_tables: fragment table start too large in super block\\n\");",
      "563:    goto corrupted;",
      "564:   }",
      "567:   if(sBlk.s.fragments > sBlk.s.inodes) {",
      "568:    ERROR(\"read_filesystem_tables: Bad fragment count in super block\\n\");",
      "569:    goto corrupted;",
      "570:   }",
      "572:   if(read_fragment_table(&table_start) == FALSE)",
      "573:    goto corrupted;",
      "574:  } else {",
      "579:   if(sBlk.s.fragment_table_start != table_start) {",
      "580:    ERROR(\"read_filesystem_tables: fragment table start invalid in super block\\n\");",
      "581:    goto corrupted;",
      "582:   }",
      "583:  }",
      "588:  if(sBlk.s.directory_table_start >= table_start) {",
      "589:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
      "590:   goto corrupted;",
      "591:  }",
      "594:     table_start) == FALSE)",
      "595:   goto corrupted;",
      "600:  if(sBlk.s.inode_table_start >= sBlk.s.directory_table_start) {",
      "601:   ERROR(\"read_filesystem_tables: inode table start too large in super block\\n\");",
      "602:   goto corrupted;",
      "603:  }",
      "605:  if(read_inode_table(sBlk.s.inode_table_start,",
      "606:     sBlk.s.directory_table_start) == FALSE)",
      "607:   goto corrupted;",
      "614: corrupted:",
      "615:  ERROR(\"File system corruption detected\\n\");",
      "616:  return FALSE;",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
      "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2467: #define VERSION() \\",
      "2469:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
      "2470:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
      "2471:      printf(\"This program is free software; you can redistribute it and/or\"\\",
      "",
      "[Removed Lines]",
      "2468:  printf(\"unsquashfs version 4.3-git (2019/07/05)\\n\");\\",
      "",
      "[Added Lines]",
      "2468:  printf(\"unsquashfs version 4.3-git (2019/07/15)\\n\");\\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52eb4c279cd283ed9802dd1ceb686560b22ffb67",
      "candidate_info": {
        "commit_hash": "52eb4c279cd283ed9802dd1ceb686560b22ffb67",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/52eb4c279cd283ed9802dd1ceb686560b22ffb67",
        "files": [
          "ACKNOWLEDGEMENTS",
          "CHANGES",
          "INSTALL",
          "README-4.4",
          "RELEASE-README",
          "RELEASE-READMEs/README-4.4",
          "USAGE",
          "squashfs-tools/mksquashfs.c",
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Squashfs-tools 4.4 release\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "RELEASE-READMEs/README-4.4||README-4.4",
          "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "RELEASE-READMEs/README-4.4||README-4.4": [
          "File: RELEASE-READMEs/README-4.4 -> README-4.4",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: there are substantial improvements: reproducible builds, new compressors,",
          "9: CVE fixes, security hardening and new options for Mksquashfs/Unsquashfs.",
          "11: Summary of changes (and sections below)",
          "12: ---------------------------------------",
          "14: 1. Mksquashfs now generates reproducible images by default.  Mkfs time and",
          "15:    file timestamps can also be specified.",
          "19: 3. Pseudo files now support symbolic links.",
          "",
          "[Removed Lines]",
          "17: 2. Support for Zstandard (ZSTD) compression algorithm has been added.",
          "",
          "[Added Lines]",
          "11: Please see the INSTALL file for instructions on installing the tools,",
          "12: and the USAGE file for documentation on how to use the tools.",
          "20: 2. Support for the Zstandard (ZSTD) compression algorithm has been added.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: 9. Squashfs-tools 4.4 is compatible with all earlier 4.x filesystems",
          "32:    and releases.",
          "37: Ever since Mksquashfs was parallelised back in 2006, there",
          "38: has been a certain randomness in how fragments and multi-block",
          "",
          "[Removed Lines]",
          "34: 1. Reproducible builds",
          "35: -----------------------",
          "",
          "[Added Lines]",
          "38: 1. Introducing reproducible builds",
          "39: ----------------------------------",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: 4. CVE-2015-2015-4645 and CVE-2015-4646",
          "163: These CVEs were raised due to Unsquashfs having variable overflow and",
          "164: stack overflow in a number of vulnerable functions.",
          "",
          "[Removed Lines]",
          "161: ----------------------------------------",
          "",
          "[Added Lines]",
          "165: ---------------------------------------",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167: removed.",
          "173: The filesystem super-block values and filesystem metadata tables",
          "174: are further sanity checked.  More importantly, these values are now",
          "",
          "[Removed Lines]",
          "170: 5. Unsquashfs hardening against corrupted filestems",
          "171: ----------------------------------------------------",
          "",
          "[Added Lines]",
          "174: 5. Unsquashfs hardened against corrupted filestems",
          "175: --------------------------------------------------",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182: Unsquashfs splits errors into two categories: fatal errors and non-fatal",
          "183: errors.  In this release a significant number of errors that were previously",
          "186: Fatal errors are those which cause Unsquashfs to abort instantly.",
          "187: These are generally due to failure to read the filesystem (corruption),",
          "",
          "[Removed Lines]",
          "184: ignored have been hardened to fatal.",
          "",
          "[Added Lines]",
          "188: non-fatal have been hardened to fatal.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "192: output filesystem, and it can be considered to be an expected failure.",
          "193: This includes the inability to write extended attributes (xattrs) to",
          "194: a filesystem that doesn't support them, the inability to create files on",
          "196: inability to execute privileged operations as a user-process.",
          "198: The user may well know the filesystem cannot support certain operations",
          "",
          "[Removed Lines]",
          "195: filesystem that don't support it (i.e. symbolic links on VFAT), and the",
          "",
          "[Added Lines]",
          "199: filesystem that doesn't support them (i.e. symbolic links on VFAT), and the",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235: 7.3. -noId",
          "243: 7.4. -offset <offset>",
          "257: 7.7. Fix compilation with glibc 2.25+",
          "",
          "[Removed Lines]",
          "237: This is similar to the pre-existing -noI option, except, it",
          "238: specifies that only the Id table (uids and gids) should be",
          "239: uncompressed.  This option was added to enable a use-case",
          "240: where uids and gids need to be updated after filesystem",
          "241: generation.",
          "245: Skip <offset> bytes at the beginning of the output filesystem.",
          "247: Optionally a suffix of K, M or G can be given to specify",
          "248: Kbytes, Mbytes or Gbytes respectively.",
          "250: 7.5. Update lz4 wrapper to use new functions introduced in 1.7.0.",
          "252: 7.5. bug fix, don't allow \"/\" pseudo filenames",
          "254: 7.6. bug fix, allow quoting of pseudo files, to",
          "255:      better handle filenames with spaces.",
          "",
          "[Added Lines]",
          "241: This is similar to the pre-existing -noI option, except, it specifies that",
          "242: only the Id table (uids and gids) should be uncompressed.  This option was",
          "243: added to enable a use-case where uids and gids need to be updated after",
          "244: filesystem generation.",
          "248: This option skips <offset> bytes at the beginning of the output filesystem.",
          "250: Optionally a suffix of K, M or G can be given to specify Kbytes, Mbytes or",
          "251: Gbytes respectively.",
          "253: 7.5. Update lz4 wrapper to use new functions introduced in 1.7.0",
          "255: 7.5. Bug fix, don't allow \"/\" pseudo filenames",
          "257: 7.6. Bug fix, allow quoting of pseudo files, to better handle filenames with",
          "258:      spaces",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263: 8.1. -lln[umeric]",
          "268: 8.2. -lc option",
          "273: 8.3. -llc option",
          "",
          "[Removed Lines]",
          "265: This is similar to the \"-lls\" option same but displays uids and gids",
          "266: numerically.",
          "270: This is similar to the \"-ls\" option except it only displays files",
          "271: and empty directories.",
          "",
          "[Added Lines]",
          "268: This is similar to the \"-lls\" option but displays uids and gids numerically.",
          "272: This is similar to the \"-ls\" option except it only displays files and empty",
          "273: directories.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "277: 8.4. -offset <offset>",
          "284: 8.5. -quiet",
          "",
          "[Removed Lines]",
          "279: Skip <offset> bytes at the beginning of the input filesystem.",
          "281: Optionally a suffix of K, M or G can be given to specify",
          "282: Kbytes, Mbytes or Gbytes respectively.",
          "",
          "[Added Lines]",
          "281: This option skips <offset> bytes at the beginning of the input filesystem.",
          "283: Optionally a suffix of K, M or G can be given to specify Kbytes, Mbytes or",
          "284: Gbytes respectively.",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "291: This new option is useful for scripts.",
          "304: 9. Compatiblity",
          "",
          "[Removed Lines]",
          "293: 8.6. Update lz4 wrapper to use new functions introduced in 1.7.0.",
          "295: 8.7. bug fix, fatal and non-fatal errors now set the exit code to 1.",
          "297: 8.8. bug fix, fix time setting for symlinks",
          "299: 8.9. bug fix, try to set sticky-bit when running as a user process.",
          "301: 8.10. Fix compilation with glibc 2.25+",
          "",
          "[Added Lines]",
          "295: 8.6. -UTC",
          "297: This option makes Unsquashfs display all times in the UTC time zone rather",
          "298: than using the default local time zone.",
          "300: 8.7. Update lz4 wrapper to use new functions introduced in 1.7.0",
          "302: 8.8. Bug fix, fatal and non-fatal errors now set the exit code to 1",
          "304: 8.9. Bug fix, fix time setting for symlinks",
          "306: 8.10. Bug fix, try to set sticky-bit when running as a user process",
          "308: 8.11. Fix compilation with glibc 2.25+",
          "",
          "---------------"
        ],
        "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c": [
          "File: squashfs-tools/mksquashfs.c -> squashfs-tools/mksquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5352: #define VERSION() \\",
          "5354:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "5355:   \"<phillip@squashfs.org.uk>\\n\\n\"); \\",
          "5356:  printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "5353:  printf(\"mksquashfs version 4.4pre-git (2019/08/15)\\n\");\\",
          "",
          "[Added Lines]",
          "5353:  printf(\"mksquashfs version 4.4 (2019/08/29)\\n\");\\",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2612: #define VERSION() \\",
          "2614:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2615:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2616:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2613:  printf(\"unsquashfs version 4.4pre-git (2019/08/15)\\n\");\\",
          "",
          "[Added Lines]",
          "2613:  printf(\"unsquashfs version 4.4 (2019/08/29)\\n\");\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0061cbb4e95c797b8e1ebc0e394e255bfe6184e9",
      "candidate_info": {
        "commit_hash": "0061cbb4e95c797b8e1ebc0e394e255bfe6184e9",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/0061cbb4e95c797b8e1ebc0e394e255bfe6184e9",
        "files": [
          "squashfs-tools/mksquashfs.c",
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Update dates and versions\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c": [
          "File: squashfs-tools/mksquashfs.c -> squashfs-tools/mksquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5339: #define VERSION() \\",
          "5341:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "5342:   \"<phillip@squashfs.org.uk>\\n\\n\"); \\",
          "5343:  printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "5340:  printf(\"mksquashfs version 4.3-git (2019/07/31)\\n\");\\",
          "",
          "[Added Lines]",
          "5340:  printf(\"mksquashfs version 4.4pre-git (2019/08/15)\\n\");\\",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2583: #define VERSION() \\",
          "2585:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2586:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2587:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2584:  printf(\"unsquashfs version 4.3-git (2019/07/31)\\n\");\\",
          "",
          "[Added Lines]",
          "2584:  printf(\"unsquashfs version 4.4pre-git (2019/08/15)\\n\");\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17edbc5c913f500c15761c523ac4920fa24a49b8",
      "candidate_info": {
        "commit_hash": "17edbc5c913f500c15761c523ac4920fa24a49b8",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/17edbc5c913f500c15761c523ac4920fa24a49b8",
        "files": [
          "squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c"
        ],
        "message": "unsquashfs: no longer need to version and export some functions\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
          ],
          "candidate": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
          "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: }",
          "44: {",
          "45:  int res, i;",
          "46:  int bytes = SQUASHFS_FRAGMENT_BYTES_2(sBlk.s.fragments);",
          "",
          "[Removed Lines]",
          "43: int read_fragment_table_2(long long *directory_table_end)",
          "",
          "[Added Lines]",
          "43: static int read_fragment_table(long long *directory_table_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:  if(read_uids_guids_1() == FALSE)",
          "278:   return FALSE;",
          "281:   return FALSE;",
          "283:  if(read_inode_table(sBlk.s.inode_table_start,",
          "",
          "[Removed Lines]",
          "280:  if(read_fragment_table_2(&directory_table_end) == FALSE)",
          "",
          "[Added Lines]",
          "280:  if(read_fragment_table(&directory_table_end) == FALSE)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
          "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static squashfs_fragment_entry_3 *fragment_table;",
          "31: {",
          "32:  int res, i;",
          "33:  int bytes = SQUASHFS_FRAGMENT_BYTES_3(sBlk.s.fragments);",
          "",
          "[Removed Lines]",
          "30: int read_fragment_table_3(long long *directory_table_end)",
          "",
          "[Added Lines]",
          "30: static int read_fragment_table(long long *directory_table_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:  if(read_uids_guids_1() == FALSE)",
          "405:   return FALSE;",
          "408:   return FALSE;",
          "410:  if(read_inode_table(sBlk.s.inode_table_start,",
          "",
          "[Removed Lines]",
          "407:  if(read_fragment_table_3(&directory_table_end) == FALSE)",
          "",
          "[Added Lines]",
          "407:  if(read_fragment_table(&directory_table_end) == FALSE)",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static struct squashfs_fragment_entry *fragment_table;",
          "30: static unsigned int *id_table;",
          "33: {",
          "34:  int res, i;",
          "35:  int bytes = SQUASHFS_FRAGMENT_BYTES(sBlk.s.fragments);",
          "",
          "[Removed Lines]",
          "32: int read_fragment_table_4(long long *directory_table_end)",
          "",
          "[Added Lines]",
          "32: static int read_fragment_table(long long *directory_table_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356: }",
          "360: {",
          "361:  int res, i;",
          "362:  int bytes = SQUASHFS_ID_BYTES(sBlk.s.no_ids);",
          "",
          "[Removed Lines]",
          "359: int read_uids_guids_4()",
          "",
          "[Added Lines]",
          "359: static int read_uids_guids()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401: {",
          "402:  long long directory_table_end;",
          "405:   return FALSE;",
          "408:   return FALSE;",
          "410:  if(read_inode_table(sBlk.s.inode_table_start,",
          "",
          "[Removed Lines]",
          "404:  if(read_uids_guids_4() == FALSE)",
          "407:  if(read_fragment_table_4(&directory_table_end) == FALSE)",
          "",
          "[Added Lines]",
          "404:  if(read_uids_guids() == FALSE)",
          "407:  if(read_fragment_table(&directory_table_end) == FALSE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "456cd6bf5a3049348e7e687f93409db1ac497967",
      "candidate_info": {
        "commit_hash": "456cd6bf5a3049348e7e687f93409db1ac497967",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/456cd6bf5a3049348e7e687f93409db1ac497967",
        "files": [
          "squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h"
        ],
        "message": "unsquashfs: move fs table reading into the version specific files\n\nDoing across filesystem table sanity checking has been\ndifficult in Unsquashfs due to the layering.\n\nThis could not be done in Unsquashfs.c (where the tables were\nread), because Unsquashfs.c lacks filesystem layout knowledge\nwhich is different between versions.\n\nThis could not be done in the individual version helpers\nbecause these helpers were specialised to do one thing only -\nread a specific filesystem element.  There was no function\nwhich do could across table sanity checking because the work\nwas split between the helpers and Unsquashfs.c.\n\nFix this by moving filesystem table reading into the individual\nversion files with a new helper read_filesystem_tables().\n\nDue to work now being in the version specific files, these can\nhave sanity checking added.\n\nThis commit does the restructuring.  Further commits will add the\nextra sanity checking.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
          "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
          "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: }",
          "57: struct inode *read_inode_1(unsigned int start_block, unsigned int offset)",
          "58: {",
          "59:  static union squashfs_inode_header_1 header;",
          "",
          "[Removed Lines]",
          "49: int read_fragment_table_1(long long *directory_table_end)",
          "50: {",
          "51:  TRACE(\"read_fragment_table\\n\");",
          "53:  return TRUE;",
          "54: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:  return TRUE;",
          "361: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356: int read_filesystem_tables_1()",
          "357: {",
          "358:  if(read_uids_guids_1() == FALSE)",
          "359:   return FALSE;",
          "361:  if(read_inode_table(sBlk.s.inode_table_start,",
          "362:     sBlk.s.directory_table_start) == FALSE)",
          "363:   return FALSE;",
          "365:  if(read_directory_table(sBlk.s.directory_table_start,",
          "366:     sBlk.uid_start) == FALSE)",
          "367:   return FALSE;",
          "369:  return TRUE;",
          "370: }",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
          "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:  }",
          "269:  return &i;",
          "270: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: int read_filesystem_tables_2()",
          "274: {",
          "275:  long long directory_table_end;",
          "277:  if(read_uids_guids_1() == FALSE)",
          "278:   return FALSE;",
          "280:  if(read_fragment_table_2(&directory_table_end) == FALSE)",
          "281:   return FALSE;",
          "283:  if(read_inode_table(sBlk.s.inode_table_start,",
          "284:     sBlk.s.directory_table_start) == FALSE)",
          "285:   return FALSE;",
          "287:  if(read_directory_table(sBlk.s.directory_table_start,",
          "288:     directory_table_end) == FALSE)",
          "289:   return FALSE;",
          "291:  return TRUE;",
          "292: }",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
          "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:  free(dir);",
          "396:  return NULL;",
          "397: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: int read_filesystem_tables_3()",
          "401: {",
          "402:  long long directory_table_end;",
          "404:  if(read_uids_guids_1() == FALSE)",
          "405:   return FALSE;",
          "407:  if(read_fragment_table_3(&directory_table_end) == FALSE)",
          "408:   return FALSE;",
          "410:  if(read_inode_table(sBlk.s.inode_table_start,",
          "411:     sBlk.s.directory_table_start) == FALSE)",
          "412:   return FALSE;",
          "414:  if(read_directory_table(sBlk.s.directory_table_start,",
          "415:     directory_table_end) == FALSE)",
          "416:   return FALSE;",
          "418:  return TRUE;",
          "419: }",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"unsquashfs.h\"",
          "26: #include \"squashfs_swap.h\"",
          "28: static struct squashfs_fragment_entry *fragment_table;",
          "29: static unsigned int *id_table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"xattr.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:  return TRUE;",
          "396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: int read_filesystem_tables_4()",
          "401: {",
          "402:  long long directory_table_end;",
          "404:  if(read_uids_guids_4() == FALSE)",
          "405:   return FALSE;",
          "407:  if(read_fragment_table_4(&directory_table_end) == FALSE)",
          "408:   return FALSE;",
          "410:  if(read_inode_table(sBlk.s.inode_table_start,",
          "411:     sBlk.s.directory_table_start) == FALSE)",
          "412:   return FALSE;",
          "414:  if(read_directory_table(sBlk.s.directory_table_start,",
          "415:     directory_table_end) == FALSE)",
          "416:   return FALSE;",
          "418:  if(no_xattrs)",
          "419:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
          "421:  if(read_xattrs_from_disk(fd, &sBlk.s) == 0)",
          "422:   return FALSE;",
          "424:  return TRUE;",
          "425: }",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1777:  if(sBlk_4.s_magic == SQUASHFS_MAGIC && sBlk_4.s_major == 4 &&",
          "1778:    sBlk_4.s_minor == 0) {",
          "1779:   s_ops.squashfs_opendir = squashfs_opendir_4;",
          "1780:   s_ops.read_fragment = read_fragment_4;",
          "1782:   s_ops.read_block_list = read_block_list_2;",
          "1783:   s_ops.read_inode = read_inode_4;",
          "1785:   memcpy(&sBlk, &sBlk_4, sizeof(sBlk_4));",
          "",
          "[Removed Lines]",
          "1781:   s_ops.read_fragment_table = read_fragment_table_4;",
          "1784:   s_ops.read_uids_guids = read_uids_guids_4;",
          "",
          "[Added Lines]",
          "1779:   s_ops.read_filesystem_tables = read_filesystem_tables_4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1849:   if(sBlk.s.s_major == 1) {",
          "1850:    sBlk.s.block_size = sBlk_3.block_size_1;",
          "1851:    sBlk.s.fragment_table_start = sBlk.uid_start;",
          "1852:    s_ops.squashfs_opendir = squashfs_opendir_1;",
          "1854:    s_ops.read_block_list = read_block_list_1;",
          "1855:    s_ops.read_inode = read_inode_1;",
          "1857:   } else {",
          "1858:    sBlk.s.fragment_table_start =",
          "1859:     sBlk_3.fragment_table_start_2;",
          "1860:    s_ops.squashfs_opendir = squashfs_opendir_1;",
          "1861:    s_ops.read_fragment = read_fragment_2;",
          "1863:    s_ops.read_block_list = read_block_list_2;",
          "1864:    s_ops.read_inode = read_inode_2;",
          "1866:   }",
          "1867:  } else if(sBlk.s.s_major == 3) {",
          "1868:   s_ops.squashfs_opendir = squashfs_opendir_3;",
          "1869:   s_ops.read_fragment = read_fragment_3;",
          "1871:   s_ops.read_block_list = read_block_list_2;",
          "1872:   s_ops.read_inode = read_inode_3;",
          "1874:  } else {",
          "1875:   ERROR(\"Filesystem on %s is (%d:%d), \", source, sBlk.s.s_major,",
          "1876:    sBlk.s.s_minor);",
          "",
          "[Removed Lines]",
          "1853:    s_ops.read_fragment_table = read_fragment_table_1;",
          "1856:    s_ops.read_uids_guids = read_uids_guids_1;",
          "1862:    s_ops.read_fragment_table = read_fragment_table_2;",
          "1865:    s_ops.read_uids_guids = read_uids_guids_1;",
          "1870:   s_ops.read_fragment_table = read_fragment_table_3;",
          "1873:   s_ops.read_uids_guids = read_uids_guids_1;",
          "",
          "[Added Lines]",
          "1851:    s_ops.read_filesystem_tables = read_filesystem_tables_1;",
          "1858:    s_ops.read_filesystem_tables = read_filesystem_tables_2;",
          "1865:   s_ops.read_filesystem_tables = read_filesystem_tables_3;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2467: #define VERSION() \\",
          "2469:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2470:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2471:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2468:  printf(\"unsquashfs version 4.3-git (2019/06/07)\\n\");\\",
          "",
          "[Added Lines]",
          "2464:  printf(\"unsquashfs version 4.3-git (2019/07/05)\\n\");\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2489:  int n;",
          "2490:  struct pathnames *paths = NULL;",
          "2491:  struct pathname *path = NULL;",
          "2493:  int fragment_buffer_size = FRAGMENT_BUFFER_DEFAULT;",
          "2494:  int data_buffer_size = DATA_BUFFER_DEFAULT;",
          "",
          "[Removed Lines]",
          "2492:  long long directory_table_end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2744:  memset(created_inode, 0, sBlk.s.inodes * sizeof(char *));",
          "2766:  if(path) {",
          "2767:   paths = init_subdir();",
          "",
          "[Removed Lines]",
          "2746:  if(s_ops.read_uids_guids() == FALSE)",
          "2747:   EXIT_UNSQUASH(\"failed to uid/gid table\\n\");",
          "2749:  if(s_ops.read_fragment_table(&directory_table_end) == FALSE)",
          "2750:   EXIT_UNSQUASH(\"failed to read fragment table\\n\");",
          "2752:  if(read_inode_table(sBlk.s.inode_table_start,",
          "2753:     sBlk.s.directory_table_start) == FALSE)",
          "2754:   EXIT_UNSQUASH(\"failed to read inode table\\n\");",
          "2756:  if(read_directory_table(sBlk.s.directory_table_start,",
          "2757:     directory_table_end) == FALSE)",
          "2758:   EXIT_UNSQUASH(\"failed to read directory table\\n\");",
          "2760:  if(no_xattrs)",
          "2761:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
          "2763:  if(read_xattrs_from_disk(fd, &sBlk.s) == 0)",
          "2764:   EXIT_UNSQUASH(\"failed to read the xattr table\\n\");",
          "",
          "[Added Lines]",
          "2741:  if(s_ops.read_filesystem_tables() == FALSE)",
          "2742:   EXIT_UNSQUASH(\"failed to read file system tables\\n\");",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
          "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   unsigned int offset, struct inode **i);",
          "102:  void (*read_fragment)(unsigned int fragment, long long *start_block,",
          "103:   int *size);",
          "105:  void (*read_block_list)(unsigned int *block_list, char *block_ptr,",
          "106:   int blocks);",
          "107:  struct inode *(*read_inode)(unsigned int start_block,",
          "108:   unsigned int offset);",
          "110: } squashfs_operations;",
          "112: struct test {",
          "",
          "[Removed Lines]",
          "104:  int (*read_fragment_table)(long long *);",
          "109:  int (*read_uids_guids)();",
          "",
          "[Added Lines]",
          "108:  int (*read_filesystem_tables)();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234: extern int inode_number;",
          "235: extern int lookup_type[];",
          "236: extern int fd;",
          "237: extern struct queue *to_reader, *to_inflate, *to_writer;",
          "238: extern struct cache *fragment_cache, *data_cache;",
          "241: extern int lookup_entry(struct hash_table_entry **, long long);",
          "242: extern int read_fs_bytes(int fd, long long, int, void *);",
          "243: extern int read_block(int, long long, long long *, int, void *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: extern int no_xattrs;",
          "241: extern int read_inode_table(long long, long long);",
          "242: extern int read_directory_table(long long, long long);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250: extern void read_block_list_1(unsigned int *, char *, int);",
          "252: extern struct inode *read_inode_1(unsigned int, unsigned int);",
          "253: extern struct dir *squashfs_opendir_1(unsigned int, unsigned int,",
          "254:  struct inode **);",
          "",
          "[Removed Lines]",
          "251: extern int read_fragment_table_1(long long *);",
          "",
          "[Added Lines]",
          "253: extern int read_filesystem_tables_1();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258: extern void read_block_list_2(unsigned int *, char *, int);",
          "260: extern void read_fragment_2(unsigned int, long long *, int *);",
          "261: extern struct inode *read_inode_2(unsigned int, unsigned int);",
          "264: extern int read_fragment_table_3(long long *);",
          "265: extern void read_fragment_3(unsigned int, long long *, int *);",
          "266: extern struct inode *read_inode_3(unsigned int, unsigned int);",
          "267: extern struct dir *squashfs_opendir_3(unsigned int, unsigned int,",
          "",
          "[Removed Lines]",
          "259: extern int read_fragment_table_2(long long *);",
          "",
          "[Added Lines]",
          "261: extern int read_filesystem_tables_2();",
          "267: extern int read_filesystem_tables_3();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271: extern int read_fragment_table_4(long long *);",
          "272: extern void read_fragment_4(unsigned int, long long *, int *);",
          "273: extern struct inode *read_inode_4(unsigned int, unsigned int);",
          "274: extern struct dir *squashfs_opendir_4(unsigned int, unsigned int,",
          "275:  struct inode **);",
          "277: #endif",
          "",
          "[Removed Lines]",
          "276: extern int read_uids_guids_4();",
          "",
          "[Added Lines]",
          "275: extern int read_filesystem_tables_4();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04ce7e5f4f5a87e4b0fb8b8fa9b4287af2bffd07",
      "candidate_info": {
        "commit_hash": "04ce7e5f4f5a87e4b0fb8b8fa9b4287af2bffd07",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/04ce7e5f4f5a87e4b0fb8b8fa9b4287af2bffd07",
        "files": [
          "squashfs-tools/read_xattrs.c",
          "squashfs-tools/unsquash-4.c",
          "squashfs-tools/xattr.c",
          "squashfs-tools/xattr.h"
        ],
        "message": "unsquash-4: get fs table start and end points\n\nTo sanity check across the super-block we need to have\nthe start and end points of each filesystem table together\nin one place.\n\nFor the id lookup, and export tables this is a little\nbit tricky.  This is because they are in fact multi-level\ntables.  The super-block points to a index table.  This\nindex table consists of pointers to compressed metadata\nblocks.\n\nThe compressed metadata blocks are stored before the\nindex table (pointed to by the super-block), and\nso the true start of the table is given by index[0] -\nthe first compressed metadata block.\n\nFor xattrs things are more complex, but, it is the\nsame idea.\n\nWe have to read at least part of the table before we\nknow where the start is - and by definition the end of\nthe preceeding table.\n\nUnsquashfs doesn't need the exports table (if it exists),\nand so we never bothered to read it.\n\nBut we now need to partially read it in order to work out\nwhere the preceeding table ends.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c",
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
          "squashfs-tools/xattr.c||squashfs-tools/xattr.c",
          "squashfs-tools/xattr.h||squashfs-tools/xattr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c",
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
          ],
          "candidate": [
            "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c",
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c": [
          "File: squashfs-tools/read_xattrs.c -> squashfs-tools/read_xattrs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: {",
          "153:  int res, bytes, i, indexes, index_bytes, ids;",
          "154:  long long *index, start, end;",
          "",
          "[Removed Lines]",
          "151: int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk)",
          "",
          "[Added Lines]",
          "151: int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk, int flag, long long *table_start)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:  SQUASHFS_INSWAP_XATTR_TABLE(&id_table);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:  if(flag) {",
          "180:   return id_table.xattr_ids;",
          "181:  }",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356: }",
          "360: {",
          "361:  int res, i;",
          "362:  int bytes = SQUASHFS_ID_BYTES(sBlk.s.no_ids);",
          "",
          "[Removed Lines]",
          "359: static int read_uids_guids()",
          "",
          "[Added Lines]",
          "359: static int read_uids_guids(long long *table_start)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: }",
          "400: int read_filesystem_tables_4()",
          "401: {",
          "405:   return FALSE;",
          "407:  if(read_fragment_table(&directory_table_end) == FALSE)",
          "",
          "[Removed Lines]",
          "402:  long long directory_table_end;",
          "404:  if(read_uids_guids() == FALSE)",
          "",
          "[Added Lines]",
          "408: static int parse_exports_table(long long *table_start)",
          "409: {",
          "410:  int res;",
          "411:  int indexes = SQUASHFS_LOOKUP_BLOCKS(sBlk.s.inodes);",
          "412:  long long export_index_table[indexes];",
          "414:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start,",
          "415:   SQUASHFS_LOOKUP_BLOCK_BYTES(sBlk.s.inodes), export_index_table);",
          "416:  if(res == FALSE) {",
          "417:   ERROR(\"parse_exports_table: failed to read export index table\\n\");",
          "418:   return FALSE;",
          "419:  }",
          "420:  SQUASHFS_INSWAP_LOOKUP_BLOCKS(export_index_table, indexes);",
          "429:  return TRUE;",
          "430: }",
          "435:  long long directory_table_end, table_start;",
          "437:  if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
          "438:   return FALSE;",
          "440:  if(read_uids_guids(&table_start) == FALSE)",
          "441:   return FALSE;",
          "443:  if(parse_exports_table(&table_start) == FALSE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "418:  if(no_xattrs)",
          "419:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
          "424:  return TRUE;",
          "425: }",
          "",
          "[Removed Lines]",
          "421:  if(read_xattrs_from_disk(fd, &sBlk.s) == 0)",
          "422:   return FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "squashfs-tools/xattr.c||squashfs-tools/xattr.c": [
          "File: squashfs-tools/xattr.c -> squashfs-tools/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: extern char *pathname(struct dir_ent *);",
          "89: extern struct xattr_list *get_xattr(int, unsigned int *, int);",
          "90: extern struct prefix prefix_table[];",
          "",
          "[Removed Lines]",
          "88: extern int read_xattrs_from_disk(int, struct squashfs_super_block *);",
          "",
          "[Added Lines]",
          "88: extern int read_xattrs_from_disk(int, struct squashfs_super_block *, int, long long *);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "636:  TRACE(\"get_xattrs\\n\");",
          "639:  if(res == SQUASHFS_INVALID_BLK || res == 0)",
          "640:   goto done;",
          "641:  ids = res;",
          "",
          "[Removed Lines]",
          "638:  res = read_xattrs_from_disk(fd, sBlk);",
          "",
          "[Added Lines]",
          "638:  res = read_xattrs_from_disk(fd, sBlk, FALSE, NULL);",
          "",
          "---------------"
        ],
        "squashfs-tools/xattr.h||squashfs-tools/xattr.h": [
          "File: squashfs-tools/xattr.h -> squashfs-tools/xattr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: extern void restore_xattrs();",
          "74: extern unsigned int xattr_bytes, total_xattr_bytes;",
          "75: extern void write_xattr(char *, unsigned int);",
          "77: extern struct xattr_list *get_xattr(int, unsigned int *, int);",
          "78: extern void free_xattr(struct xattr_list *, int);",
          "79: #else",
          "",
          "[Removed Lines]",
          "76: extern int read_xattrs_from_disk(int, struct squashfs_super_block *);",
          "",
          "[Added Lines]",
          "76: extern int read_xattrs_from_disk(int, struct squashfs_super_block *, int, long long *);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: }",
          "119: {",
          "120:  if(sBlk->xattr_id_table_start != SQUASHFS_INVALID_BLK) {",
          "121:   fprintf(stderr, \"Xattrs in filesystem! These are not \"",
          "",
          "[Removed Lines]",
          "118: static inline int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk)",
          "",
          "[Added Lines]",
          "118: static inline int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk, int flag, long long *table_start)",
          "",
          "---------------"
        ]
      }
    }
  ]
}