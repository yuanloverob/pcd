{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d63f25ff84740b4fd955bc2de4bb5f55b9d79adf",
      "candidate_info": {
        "commit_hash": "d63f25ff84740b4fd955bc2de4bb5f55b9d79adf",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d63f25ff84740b4fd955bc2de4bb5f55b9d79adf",
        "files": [
          "crypto/ex_data.c",
          "doc/crypto/CRYPTO_get_ex_new_index.pod",
          "include/openssl/crypto.h",
          "test/exdatatest.c"
        ],
        "message": "Fix the error handling in CRYPTO_dup_ex_data. Fix a strict aliasing issue in ui_dup_method_data. Add test coverage for CRYPTO_dup_ex_data, use OPENSSL_assert.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2997)",
        "before_after_code_files": [
          "crypto/ex_data.c||crypto/ex_data.c",
          "include/openssl/crypto.h||include/openssl/crypto.h",
          "test/exdatatest.c||test/exdatatest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ex_data.c||crypto/ex_data.c": [
          "File: crypto/ex_data.c -> crypto/ex_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:                      void *from_d, int idx,",
          "125:                      long argl, void *argp)",
          "126: {",
          "128: }",
          "130: int CRYPTO_free_ex_index(int class_index, int idx)",
          "",
          "[Removed Lines]",
          "127:     return 0;",
          "",
          "[Added Lines]",
          "127:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:                        const CRYPTO_EX_DATA *from)",
          "255: {",
          "256:     int mx, j, i;",
          "258:     EX_CALLBACK *stack[10];",
          "259:     EX_CALLBACK **storage = NULL;",
          "260:     EX_CALLBACKS *ip;",
          "262:     if (from->sk == NULL)",
          "",
          "[Removed Lines]",
          "257:     char *ptr;",
          "",
          "[Added Lines]",
          "257:     void *ptr;",
          "261:     int toret = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:     }",
          "281:     CRYPTO_THREAD_unlock(ex_data_lock);",
          "284:         CRYPTOerr(CRYPTO_F_CRYPTO_DUP_EX_DATA, ERR_R_MALLOC_FAILURE);",
          "285:         return 0;",
          "286:     }",
          "288:     for (i = 0; i < mx; i++) {",
          "289:         ptr = CRYPTO_get_ex_data(from, i);",
          "290:         if (storage[i] && storage[i]->dup_func)",
          "293:         CRYPTO_set_ex_data(to, i, ptr);",
          "294:     }",
          "295:     if (storage != stack)",
          "296:         OPENSSL_free(storage);",
          "298: }",
          "",
          "[Removed Lines]",
          "283:     if (mx > 0 && storage == NULL) {",
          "291:             storage[i]->dup_func(to, from, &ptr, i,",
          "292:                                  storage[i]->argl, storage[i]->argp);",
          "297:     return 1;",
          "",
          "[Added Lines]",
          "284:     if (mx == 0)",
          "285:         return 1;",
          "286:     if (storage == NULL) {",
          "290:     if (!CRYPTO_set_ex_data(to, mx - 1, NULL))",
          "291:         goto err;",
          "296:             if (!storage[i]->dup_func(to, from, &ptr, i,",
          "297:                                       storage[i]->argl, storage[i]->argp))",
          "298:                 goto err;",
          "301:     toret = 1;",
          "302:  err:",
          "305:     return toret;",
          "",
          "---------------"
        ],
        "include/openssl/crypto.h||include/openssl/crypto.h": [
          "File: include/openssl/crypto.h -> include/openssl/crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "175:                              int idx, long argl, void *argp);",
          "176: typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,",
          "178: __owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,",
          "179:                             CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,",
          "180:                             CRYPTO_EX_free *free_func);",
          "",
          "[Removed Lines]",
          "177:                            void *srcp, int idx, long argl, void *argp);",
          "",
          "[Added Lines]",
          "177:                            void *from_d, int idx, long argl, void *argp);",
          "",
          "---------------"
        ],
        "test/exdatatest.c||test/exdatatest.c": [
          "File: test/exdatatest.c -> test/exdatatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <stdio.h>",
          "11: #include <string.h>",
          "12: #include <stdlib.h>",
          "14: #include <openssl/crypto.h>",
          "16: static long saved_argl;",
          "",
          "[Removed Lines]",
          "13: #include <assert.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: static void exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "21:           int idx, long argl, void *argp)",
          "22: {",
          "26: }",
          "28: static int exdup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,",
          "29:           void *from_d, int idx, long argl, void *argp)",
          "30: {",
          "35: }",
          "37: static void exfree(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "38:             int idx, long argl, void *argp)",
          "39: {",
          "43: }",
          "45: typedef struct myobj_st {",
          "",
          "[Removed Lines]",
          "23:     assert(idx == saved_idx);",
          "24:     assert(argl == saved_argl);",
          "25:     assert(argp == saved_argp);",
          "31:     assert(idx == saved_idx);",
          "32:     assert(argl == saved_argl);",
          "33:     assert(argp == saved_argp);",
          "34:     return 0;",
          "40:     assert(idx == saved_idx);",
          "41:     assert(argl == saved_argl);",
          "42:     assert(argp == saved_argp);",
          "",
          "[Added Lines]",
          "22:     OPENSSL_assert(idx == saved_idx);",
          "23:     OPENSSL_assert(argl == saved_argl);",
          "24:     OPENSSL_assert(argp == saved_argp);",
          "25:     OPENSSL_assert(ptr == NULL);",
          "31:     OPENSSL_assert(idx == saved_idx);",
          "32:     OPENSSL_assert(argl == saved_argl);",
          "33:     OPENSSL_assert(argp == saved_argp);",
          "34:     OPENSSL_assert(from_d != NULL);",
          "35:     return 1;",
          "41:     OPENSSL_assert(idx == saved_idx);",
          "42:     OPENSSL_assert(argl == saved_argl);",
          "43:     OPENSSL_assert(argp == saved_argp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     obj->id = ++count;",
          "57:     obj->st = CRYPTO_new_ex_data(CRYPTO_EX_INDEX_APP, obj, &obj->ex_data);",
          "59:     return obj;",
          "60: }",
          "62: static void MYOBJ_sethello(MYOBJ *obj, char *cp)",
          "63: {",
          "64:     obj->st = CRYPTO_set_ex_data(&obj->ex_data, saved_idx, cp);",
          "66: }",
          "68: static char *MYOBJ_gethello(MYOBJ *obj)",
          "",
          "[Removed Lines]",
          "58:     assert(obj->st != 0);",
          "65:     assert(obj->st != 0);",
          "",
          "[Added Lines]",
          "59:     OPENSSL_assert(obj->st != 0);",
          "66:     OPENSSL_assert(obj->st != 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:     OPENSSL_free(obj);",
          "77: }",
          "79: int main()",
          "80: {",
          "82:     const char *cp;",
          "83:     char *p;",
          "",
          "[Removed Lines]",
          "81:     MYOBJ *t1, *t2;",
          "",
          "[Added Lines]",
          "80: static MYOBJ *MYOBJ_dup(MYOBJ *in)",
          "81: {",
          "82:     MYOBJ *obj = MYOBJ_new();",
          "84:     obj->st = CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_APP, &obj->ex_data,",
          "85:                                  &in->ex_data);",
          "86:     OPENSSL_assert(obj->st != 0);",
          "87:     return obj;",
          "88: }",
          "92:     MYOBJ *t1, *t2, *t3;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:     t2 = MYOBJ_new();",
          "93:     MYOBJ_sethello(t1, p);",
          "94:     cp = MYOBJ_gethello(t1);",
          "96:     if (cp != p)",
          "97:         return 1;",
          "98:     cp = MYOBJ_gethello(t2);",
          "100:     if (cp != NULL)",
          "101:         return 1;",
          "102:     MYOBJ_free(t1);",
          "103:     MYOBJ_free(t2);",
          "104:     free(saved_argp);",
          "105:     free(p);",
          "106:     return 0;",
          "",
          "[Removed Lines]",
          "95:     assert(cp == p);",
          "99:     assert(cp == NULL);",
          "",
          "[Added Lines]",
          "106:     OPENSSL_assert(cp == p);",
          "110:     OPENSSL_assert(cp == NULL);",
          "113:     t3 = MYOBJ_dup(t1);",
          "114:     cp = MYOBJ_gethello(t3);",
          "115:     OPENSSL_assert(cp == p);",
          "116:     if (cp != p)",
          "117:         return 1;",
          "118:     cp = MYOBJ_gethello(t2);",
          "121:     MYOBJ_free(t3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7dbb4edce65446b8cd69b86ca73a48a1d7ea02a",
      "candidate_info": {
        "commit_hash": "e7dbb4edce65446b8cd69b86ca73a48a1d7ea02a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e7dbb4edce65446b8cd69b86ca73a48a1d7ea02a",
        "files": [
          "ssl/ssl_rsa.c"
        ],
        "message": "Use the callbacks from the SSL object instead of the SSL_CTX object\n\n... in functions dealing with the SSL object rather than the context.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2870)\n\n(cherry picked from commit d61461a7525322d188f9c6e3f90cfc93916cc636)",
        "before_after_code_files": [
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         x = d2i_X509_bio(in, NULL);",
          "56:     } else if (type == SSL_FILETYPE_PEM) {",
          "57:         j = ERR_R_PEM_LIB;",
          "60:     } else {",
          "61:         SSLerr(SSL_F_SSL_USE_CERTIFICATE_FILE, SSL_R_BAD_SSL_FILETYPE);",
          "62:         goto end;",
          "",
          "[Removed Lines]",
          "58:         x = PEM_read_bio_X509(in, NULL, ssl->ctx->default_passwd_callback,",
          "59:                               ssl->ctx->default_passwd_callback_userdata);",
          "",
          "[Added Lines]",
          "58:         x = PEM_read_bio_X509(in, NULL, ssl->default_passwd_callback,",
          "59:                               ssl->default_passwd_callback_userdata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:     } else if (type == SSL_FILETYPE_PEM) {",
          "188:         j = ERR_R_PEM_LIB;",
          "189:         rsa = PEM_read_bio_RSAPrivateKey(in, NULL,",
          "193:     } else {",
          "194:         SSLerr(SSL_F_SSL_USE_RSAPRIVATEKEY_FILE, SSL_R_BAD_SSL_FILETYPE);",
          "195:         goto end;",
          "",
          "[Removed Lines]",
          "190:                                          ssl->ctx->default_passwd_callback,",
          "191:                                          ssl->",
          "192:                                          ctx->default_passwd_callback_userdata);",
          "",
          "[Added Lines]",
          "190:                                          ssl->default_passwd_callback,",
          "191:                                          ssl->default_passwd_callback_userdata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     if (type == SSL_FILETYPE_PEM) {",
          "255:         j = ERR_R_PEM_LIB;",
          "256:         pkey = PEM_read_bio_PrivateKey(in, NULL,",
          "260:     } else if (type == SSL_FILETYPE_ASN1) {",
          "261:         j = ERR_R_ASN1_LIB;",
          "262:         pkey = d2i_PrivateKey_bio(in, NULL);",
          "",
          "[Removed Lines]",
          "257:                                        ssl->ctx->default_passwd_callback,",
          "258:                                        ssl->",
          "259:                                        ctx->default_passwd_callback_userdata);",
          "",
          "[Added Lines]",
          "256:                                        ssl->default_passwd_callback,",
          "257:                                        ssl->default_passwd_callback_userdata);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ae6ff57f2667614c0bd6310f9a2856b3f5defd2",
      "candidate_info": {
        "commit_hash": "6ae6ff57f2667614c0bd6310f9a2856b3f5defd2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6ae6ff57f2667614c0bd6310f9a2856b3f5defd2",
        "files": [
          "test/ct_test.c"
        ],
        "message": "Use valid signature in test_decode_tls_sct()\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit e2635c49f35c615820b1c6d92d180e31e28adeb2)",
        "before_after_code_files": [
          "test/ct_test.c||test/ct_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:     const char log_id[] = \"3xwuwRUAlFJHqWFoMl3cXHlZ6PfG04j8AC4LvT9012Q=\";",
          "514:     const uint64_t timestamp = 1;",
          "515:     const char extensions[] = \"\";",
          "519:     SETUP_CT_TEST_FIXTURE();",
          "",
          "[Removed Lines]",
          "516:     const char signature[] = \"RQIgSC9nUa8126ZUNr4f1mQPPb+aQUKUlZJFMCiPo+XiPgY\"",
          "517:         \"CIQDk7cDbOsVyseL16KtqaAZTmH3PQQJ9/v+hBVGdie2/CA==\";",
          "",
          "[Added Lines]",
          "516:     const char signature[] = \"BAMARzBAMiBIL2dRrzXbplQ2vh/WZA89v5pBQpSVkkUwKI+j5\"",
          "517:             \"eI+BgIhAOTtwNs6xXKx4vXoq2poBlOYfc9BAn3+/6EFUZ2J7b8I\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9a1525cdba39bfe1717773dda156fe6696102f8",
      "candidate_info": {
        "commit_hash": "c9a1525cdba39bfe1717773dda156fe6696102f8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c9a1525cdba39bfe1717773dda156fe6696102f8",
        "files": [
          "test/recipes/15-test_dsa.t",
          "test/recipes/15-test_rsa.t",
          "test/recipes/tconversion.pl"
        ],
        "message": "Add conversion test for MSBLOB format.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit d922634d0c63cee01c89869d79306cd2df628855)",
        "before_after_code_files": [
          "test/recipes/15-test_dsa.t||test/recipes/15-test_dsa.t",
          "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t",
          "test/recipes/tconversion.pl||test/recipes/tconversion.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/15-test_dsa.t||test/recipes/15-test_dsa.t": [
          "File: test/recipes/15-test_dsa.t -> test/recipes/15-test_dsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   tconversion(\"dsa\", srctop_file(\"test\",\"testdsa.pem\"), \"pkey\");",
          "35:      };",
          "36:      subtest 'dsa conversions -- public key' => sub {",
          "39:      };",
          "40: }",
          "",
          "[Removed Lines]",
          "37:   tconversion(\"dsa\", srctop_file(\"test\",\"testdsapub.pem\"), \"dsa\",",
          "38:        \"-pubin\", \"-pubout\");",
          "",
          "[Added Lines]",
          "37:   tconversion(\"msb\", srctop_file(\"test\",\"testdsapub.pem\"), \"dsa\",",
          "38:            \"-pubin\", \"-pubout\");",
          "",
          "---------------"
        ],
        "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t": [
          "File: test/recipes/15-test_rsa.t -> test/recipes/15-test_rsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   tconversion(\"rsa\", srctop_file(\"test\",\"testrsa.pem\"), \"pkey\");",
          "36:      };",
          "37:      subtest 'rsa conversions -- public key' => sub {",
          "39:        \"-pubin\", \"-pubout\");",
          "40:      };",
          "41: }",
          "",
          "[Removed Lines]",
          "38:   tconversion(\"rsa\", srctop_file(\"test\",\"testrsapub.pem\"), \"rsa\",",
          "",
          "[Added Lines]",
          "38:   tconversion(\"msb\", srctop_file(\"test\",\"testrsapub.pem\"), \"rsa\",",
          "",
          "---------------"
        ],
        "test/recipes/tconversion.pl||test/recipes/tconversion.pl": [
          "File: test/recipes/tconversion.pl -> test/recipes/tconversion.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     # Default conversion forms.  Other series may be added with",
          "20:     # specific test types as key.",
          "21:     \"*\"  => [ \"d\", \"p\" ],",
          "22:     );",
          "23: sub tconversion {",
          "24:     my $testtype = shift;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     \"msb\" => [ \"d\", \"p\", \"msblob\" ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb22c4057f31346b3d8f43929c759f692a7e7ef9",
      "candidate_info": {
        "commit_hash": "bb22c4057f31346b3d8f43929c759f692a7e7ef9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bb22c4057f31346b3d8f43929c759f692a7e7ef9",
        "files": [
          "apps/s_socket.c"
        ],
        "message": "Fix some variable references in init_client\n\nWe were incorrectly using \"res\" when we meant \"ai\"\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3287)",
        "before_after_code_files": [
          "apps/s_socket.c||apps/s_socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_socket.c||apps/s_socket.c": [
          "File: apps/s_socket.c -> apps/s_socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         if (*sock == INVALID_SOCKET) {",
          "",
          "[Removed Lines]",
          "78:         OPENSSL_assert((family == AF_UNSPEC || family == BIO_ADDRINFO_family(res))",
          "79:                        && (type == 0 || type == BIO_ADDRINFO_socktype(res)));",
          "82:                            BIO_ADDRINFO_protocol(res), 0);",
          "",
          "[Added Lines]",
          "78:         OPENSSL_assert((family == AF_UNSPEC",
          "79:                         || family == BIO_ADDRINFO_family(ai))",
          "80:                        && (type == 0 || type == BIO_ADDRINFO_socktype(ai)));",
          "83:                            BIO_ADDRINFO_protocol(ai), 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}