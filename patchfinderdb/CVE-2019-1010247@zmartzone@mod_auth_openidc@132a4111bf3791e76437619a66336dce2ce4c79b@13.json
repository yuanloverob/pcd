{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4d898ed0af616724d2e36c153abba0f6b3b834e8",
      "candidate_info": {
        "commit_hash": "4d898ed0af616724d2e36c153abba0f6b3b834e8",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/4d898ed0af616724d2e36c153abba0f6b3b834e8",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "bump to 2.3.8rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7af8a4714bf965187f3c35429a021554982a943b",
      "candidate_info": {
        "commit_hash": "7af8a4714bf965187f3c35429a021554982a943b",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/7af8a4714bf965187f3c35429a021554982a943b",
        "files": [
          "ChangeLog",
          "Makefile.in",
          "configure.ac",
          "src/proto.c"
        ],
        "message": "add option to use non-blocking random number generator\n\n- add USE_URANDOM compile time option to use /dev/urandom explicitly for\nnon-blocking random number generation; configure with\nAPXS2_OPTS=\"-DUSE_URANDOM\"\n- bump to 2.4.0rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "configure.ac||configure.ac",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: all: src/mod_auth_openidc.la",
          "65: src/mod_auth_openidc.la: $(SRC) $(HDRS)",
          "66:  @APXS2@ @APXS2_OPTS@ -Wc,\"-DNAMEVER=\\\"@NAMEVER@\\\" $(CFLAGS)\" -Wl,\"$(LIBS)\" -Wc,-Wall -Wc,-g -c $(SRC)",
          "",
          "[Removed Lines]",
          "62: CFLAGS=@OPENSSL_CFLAGS@ @CURL_CFLAGS@ @JANSSON_CFLAGS@ @CJOSE_CFLAGS@ @PCRE_CFLAGS@ $(REDIS_CFLAGS) $(JQ_CFLAGS)",
          "63: LIBS=@OPENSSL_LIBS@ @CURL_LIBS@ @JANSSON_LIBS@ @CJOSE_LIBS@ @PCRE_LIBS@ $(REDIS_LIBS) $(JQ_LIBS)",
          "",
          "[Added Lines]",
          "62: CFLAGS = @OPENSSL_CFLAGS@ @CURL_CFLAGS@ @JANSSON_CFLAGS@ @CJOSE_CFLAGS@ @PCRE_CFLAGS@ $(REDIS_CFLAGS) $(JQ_CFLAGS)",
          "63: LIBS = @OPENSSL_LIBS@ @CURL_LIBS@ @JANSSON_LIBS@ @CJOSE_LIBS@ @PCRE_LIBS@ $(REDIS_LIBS) $(JQ_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: # Replace any occurrences of @APXS2@ with the value of $APXS2 in the Makefile.",
          "41: AC_SUBST(APXS2)",
          "44: AC_ARG_VAR(APXS2_OPTS, [Additional command line options to pass to apxs2.])",
          "46: # We need the curl library for HTTP callouts.",
          "",
          "[Removed Lines]",
          "43: # Use environment varilable APXS2_OPTS to pass params to APXS2 command",
          "",
          "[Added Lines]",
          "43: # Use environment variable APXS2_OPTS to pass params to APXS2 command",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #include <openssl/opensslconf.h>",
          "61: #include <openssl/opensslv.h>",
          "63: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "68: static apr_byte_t oidc_proto_generate_random_string(request_rec *r,",
          "69:   char **output, int len) {",
          "70:  unsigned char *bytes = apr_pcalloc(r->pool, len);",
          "74:   return FALSE;",
          "75:  }",
          "77:  if (oidc_base64url_encode(r, output, (const char *) bytes, len, TRUE)",
          "78:    <= 0) {",
          "79:   oidc_error(r, \"oidc_base64url_encode returned an error\");",
          "",
          "[Removed Lines]",
          "71:  oidc_debug(r, \"apr_generate_random_bytes call for %d bytes\", len);",
          "72:  if (apr_generate_random_bytes(bytes, len) != APR_SUCCESS) {",
          "73:   oidc_error(r, \"apr_generate_random_bytes returned an error\");",
          "76:  oidc_debug(r, \"apr_generate_random_bytes returned\");",
          "",
          "[Added Lines]",
          "63: #ifdef USE_URANDOM",
          "65: #include <sys/stat.h>",
          "66: #include <fcntl.h>",
          "67: #include <unistd.h>",
          "69: #define DEV_RANDOM \"/dev/urandom\"",
          "71: #endif",
          "75: apr_status_t oidc_proto_generate_random_bytes(request_rec *r,",
          "76:   unsigned char *buf, apr_size_t length) {",
          "77:  apr_status_t rv;",
          "79: #ifndef USE_URANDOM",
          "81:  oidc_debug(r, \"apr_generate_random_bytes call for %\" APR_SIZE_T_FMT \" bytes\", length);",
          "82:  rv = apr_generate_random_bytes(buf, length);",
          "83:  oidc_debug(r, \"apr_generate_random_bytes returned\");",
          "85: #else",
          "87:  int fd = -1;",
          "89:  do {",
          "90:   apr_ssize_t rc;",
          "92:   if (fd == -1) {",
          "93:    fd = open(DEV_RANDOM, O_RDONLY);",
          "94:    if (fd == -1)",
          "95:     return errno;",
          "96:   }",
          "98:   do {",
          "99:    oidc_debug(r, \"read %s for %\" APR_SIZE_T_FMT \" bytes\", DEV_RANDOM,",
          "100:      length);",
          "101:    rc = read(fd, buf, length);",
          "102:    oidc_debug(r, \"read %s returned: %\"APR_SIZE_T_FMT, DEV_RANDOM \" bytes\", rc);",
          "103:   } while (rc == -1 && errno == EINTR);",
          "105:   if (rc < 0) {",
          "106:    int errnum = errno;",
          "107:    close(fd);",
          "108:    return errnum;",
          "109:   } else if (rc == 0) {",
          "110:    close(fd);",
          "112:   } else {",
          "113:    buf += rc;",
          "114:    length -= rc;",
          "115:   }",
          "116:  } while (length > 0);",
          "118:  close(fd);",
          "120:  rv = APR_SUCCESS;",
          "122: #endif",
          "124:  return rv;",
          "125: }",
          "133:  if (oidc_proto_generate_random_bytes(r, bytes, len) != APR_SUCCESS) {",
          "134:   oidc_error(r, \"oidc_proto_generate_random_bytes returned an error\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f2ff2364e8f2be43bfa822034e120d55b8ee9d0",
      "candidate_info": {
        "commit_hash": "1f2ff2364e8f2be43bfa822034e120d55b8ee9d0",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/1f2ff2364e8f2be43bfa822034e120d55b8ee9d0",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/mod_auth_openidc.h",
          "src/proto.c",
          "test/stub.c",
          "test/test.c"
        ],
        "message": "dynamically pass query params to the authorization request; closes #401\n\n- using `OIDCAuthRequestParams foo=#` and/or `OIDCPathAuthRequestParams\nfoo=#`\n- thanks Philip Causin and Chris Blount\n- bump to 2.3.11rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/proto.c||src/proto.c",
          "test/stub.c||test/stub.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: # As an alternative to this option, one may choose to add the parameters as",
          "118: # part of the URL set in OIDCProviderAuthorizationEndpoint or \"authorization_endpoint\"",
          "119: # in the .provider metadata (though that would not work with Discovery OPs).",
          "120: # The default is to not add extra parameters.",
          "121: # NB: this can be overridden on a per-OP basis in the .conf file using the key: auth_request_params",
          "122: #OIDCAuthRequestParams <query-encoded-string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: #",
          "121: # Since version 2.3.11rc1 one can pass on query parameters from the request to the authorization",
          "122: # request by adding e.g. \"foo=#\" which which will dynamically pull in the query parameter value",
          "123: # from the request query parameter and add it to the authentication request to the OP.",
          "124: #",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.11rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.11rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "566: #define OIDC_STR_FORWARD_SLASH \"/\"",
          "567: #define OIDC_STR_AT            \"@\"",
          "568: #define OIDC_STR_COMMA         \",\"",
          "570: #define OIDC_CHAR_EQUAL         '='",
          "571: #define OIDC_CHAR_COLON         ':'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569: #define OIDC_STR_HASH          \"#\"",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:    \"document.forms[0].submit()\", html_body, DONE);",
          "546: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548: void add_auth_request_params(request_rec *r, apr_table_t *params,",
          "549:   const char *auth_request_params) {",
          "550:  char *key = NULL;",
          "551:  char *val = NULL;",
          "553:  if (auth_request_params == NULL)",
          "554:   return;",
          "556:  while (*auth_request_params && (val = ap_getword(r->pool, &auth_request_params, OIDC_CHAR_AMP))) {",
          "557:   key = ap_getword(r->pool, (const char **)&val, OIDC_CHAR_EQUAL);",
          "558:   ap_unescape_url(key);",
          "559:   ap_unescape_url(val);",
          "560:   if (apr_strnatcmp(val, OIDC_STR_HASH) != 0) {",
          "561:    apr_table_add(params, key, val);",
          "562:    continue;",
          "563:   }",
          "564:   if (oidc_util_request_has_parameter(r, key) == TRUE) {",
          "565:    oidc_util_get_request_parameter(r, key, &val);",
          "566:    apr_table_add(params, key, val);",
          "567:   }",
          "568:  }",
          "569: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:  const char *scope = provider->scope;",
          "577:  if (path_scope != NULL)",
          "578:   scope = ((scope != NULL) && (apr_strnatcmp(scope, \"\") != 0)) ?",
          "582:  if (scope != NULL) {",
          "583:   if (!oidc_util_spaced_string_contains(r->pool, scope,",
          "",
          "[Removed Lines]",
          "579:     apr_pstrcat(r->pool, scope, OIDC_STR_SPACE, path_scope, NULL) :",
          "580:     path_scope;",
          "",
          "[Added Lines]",
          "602:     apr_pstrcat(r->pool, scope, OIDC_STR_SPACE, path_scope,",
          "603:       NULL) :",
          "604:       path_scope;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "629:   apr_table_setn(params, OIDC_PROTO_PROMPT, prompt);",
          "642:  if (provider->request_object != NULL)",
          "",
          "[Removed Lines]",
          "632:  if (provider->auth_request_params != NULL)",
          "633:   oidc_util_table_add_query_encoded_params(r->pool, params,",
          "634:     provider->auth_request_params);",
          "637:  if (auth_request_params != NULL)",
          "638:   oidc_util_table_add_query_encoded_params(r->pool, params,",
          "639:     auth_request_params);",
          "",
          "[Added Lines]",
          "656:  add_auth_request_params(r, params, provider->auth_request_params);",
          "659:  add_auth_request_params(r, params, auth_request_params);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "987: void oidc_proto_state_set_pkce_state(oidc_proto_state_t *proto_state,",
          "988:   const char *pkce_state) {",
          "991: }",
          "993: void oidc_proto_state_set_timestamp_now(oidc_proto_state_t *proto_state) {",
          "",
          "[Removed Lines]",
          "989:  oidc_proto_state_set_string_value(proto_state, OIDC_PROTO_STATE_PKCE_STATE,",
          "990:    pkce_state);",
          "",
          "[Added Lines]",
          "1009:  oidc_proto_state_set_string_value(proto_state,",
          "1010:    OIDC_PROTO_STATE_PKCE_STATE, pkce_state);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1019:  char *j_nonce = NULL;",
          "1021:    TRUE, &j_nonce, &err) == FALSE) {",
          "1022:   oidc_error(r,",
          "1023:     \"id_token JSON payload did not contain a \\\"%s\\\" string: %s\",",
          "",
          "[Removed Lines]",
          "1020:  if (oidc_jose_get_string(r->pool, jwt->payload.value.json, OIDC_CLAIM_NONCE,",
          "",
          "[Added Lines]",
          "1040:  if (oidc_jose_get_string(r->pool, jwt->payload.value.json,",
          "1041:    OIDC_CLAIM_NONCE,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1058:   oidc_provider_t *provider, oidc_jwt_payload_t *id_token_payload) {",
          "1060:  char *azp = NULL;",
          "1062:    FALSE, &azp,",
          "1063:    NULL);",
          "",
          "[Removed Lines]",
          "1061:  oidc_jose_get_string(r->pool, id_token_payload->value.json, OIDC_CLAIM_AZP,",
          "",
          "[Added Lines]",
          "1082:  oidc_jose_get_string(r->pool, id_token_payload->value.json,",
          "1083:    OIDC_CLAIM_AZP,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1075:  }",
          "1079:  if (aud != NULL) {",
          "",
          "[Removed Lines]",
          "1078:  json_t *aud = json_object_get(id_token_payload->value.json, OIDC_CLAIM_AUD);",
          "",
          "[Added Lines]",
          "1100:  json_t *aud = json_object_get(id_token_payload->value.json,",
          "1101:    OIDC_CLAIM_AUD);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1364:   char *s_x5t = NULL;",
          "1367:   if ((s_x5t != NULL) && (x5t != NULL)",
          "1368:     && (apr_strnatcmp(x5t, s_x5t) == 0)) {",
          "",
          "[Removed Lines]",
          "1365:   oidc_json_object_get_string(r->pool, elem, OIDC_JWK_X5T, &s_x5t, NULL);",
          "",
          "[Added Lines]",
          "1388:   oidc_json_object_get_string(r->pool, elem, OIDC_JWK_X5T, &s_x5t,",
          "1389:     NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1650:  oidc_jwt_t *jwt = *out;",
          "1652:  char *jti = NULL;",
          "1655:  json_object_set_new(jwt->payload.value.json, OIDC_CLAIM_ISS,",
          "1656:    json_string(client_id));",
          "",
          "[Removed Lines]",
          "1653:  oidc_proto_generate_random_string(r, &jti, OIDC_PROTO_ASSERTION_JTI_LEN);",
          "",
          "[Added Lines]",
          "1677:  oidc_proto_generate_random_string(r, &jti,",
          "1678:    OIDC_PROTO_ASSERTION_JTI_LEN);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1708:   return FALSE;",
          "1710:  oidc_jwk_t *jwk = oidc_jwk_create_symmetric_key(r->pool, NULL,",
          "1713:  if (jwk == NULL) {",
          "1714:   oidc_error(r, \"parsing of client secret into JWK failed: %s\",",
          "1715:     oidc_jose_e2s(r->pool, err));",
          "",
          "[Removed Lines]",
          "1711:    (const unsigned char *) client_secret, strlen(client_secret), FALSE,",
          "1712:    &err);",
          "",
          "[Added Lines]",
          "1736:    (const unsigned char *) client_secret, strlen(client_secret),",
          "1737:    FALSE, &err);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1855:  if (oidc_proto_token_endpoint_auth(r, cfg, provider->token_endpoint_auth,",
          "1856:    provider->client_id, provider->client_secret,",
          "1859:   return FALSE;",
          "",
          "[Removed Lines]",
          "1857:    provider->token_endpoint_url, params, NULL, &basic_auth,",
          "1858:    &bearer_auth) == FALSE)",
          "",
          "[Added Lines]",
          "1882:    provider->token_endpoint_url, params,",
          "1883:    NULL, &basic_auth, &bearer_auth) == FALSE)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2102:     const char *access_token = json_string_value(",
          "2103:       json_object_get(value,",
          "2104:         OIDC_COMPOSITE_CLAIM_ACCESS_TOKEN));",
          "2107:     if ((access_token != NULL) && (endpoint != NULL)) {",
          "2108:      oidc_util_http_get(r, endpoint,",
          "2109:        NULL, NULL, access_token, cfg->provider.ssl_validate_server,",
          "",
          "[Removed Lines]",
          "2105:     const char *endpoint = json_string_value(",
          "2106:       json_object_get(value, OIDC_COMPOSITE_CLAIM_ENDPOINT));",
          "",
          "[Added Lines]",
          "2130:     const char *endpoint = json_string_value(json_object_get(value,",
          "2131:       OIDC_COMPOSITE_CLAIM_ENDPOINT));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2503: apr_array_header_t *oidc_proto_supported_flows(apr_pool_t *pool) {",
          "2504:  apr_array_header_t *result = apr_array_make(pool, 6, sizeof(const char*));",
          "2508:    OIDC_PROTO_RESPONSE_TYPE_IDTOKEN_TOKEN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2532:    OIDC_PROTO_RESPONSE_TYPE_IDTOKEN;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2712:  const char *code = apr_table_get(params, OIDC_PROTO_CODE);",
          "2713:  const char *id_token = apr_table_get(params, OIDC_PROTO_ID_TOKEN);",
          "2715:  const char *iss = apr_table_get(params, OIDC_PROTO_ISS);",
          "2716:  const char *client_id = apr_table_get(params, OIDC_PROTO_CLIENT_ID);",
          "",
          "[Removed Lines]",
          "2714:  const char *access_token = apr_table_get(params, OIDC_PROTO_ACCESS_TOKEN);",
          "",
          "[Added Lines]",
          "2740:  const char *access_token = apr_table_get(params,",
          "2741:    OIDC_PROTO_ACCESS_TOKEN);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2829:  static const char *response_type = OIDC_PROTO_RESPONSE_TYPE_CODE_IDTOKEN;",
          "2831:  if (oidc_proto_validate_response_type_mode_issuer(r, response_type, params,",
          "2834:   return FALSE;",
          "2836:  if (oidc_proto_parse_idtoken_and_validate_code(r, c, proto_state, provider,",
          "",
          "[Removed Lines]",
          "2832:    proto_state, response_mode, OIDC_PROTO_RESPONSE_MODE_FRAGMENT,",
          "2833:    provider->issuer, provider->client_id) == FALSE)",
          "",
          "[Added Lines]",
          "2859:    proto_state, response_mode,",
          "2860:    OIDC_PROTO_RESPONSE_MODE_FRAGMENT, provider->issuer,",
          "2861:    provider->client_id) == FALSE)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2862:  static const char *response_type = OIDC_PROTO_RESPONSE_TYPE_CODE_TOKEN;",
          "2864:  if (oidc_proto_validate_response_type_mode_issuer(r, response_type, params,",
          "2867:   return FALSE;",
          "",
          "[Removed Lines]",
          "2865:    proto_state, response_mode, OIDC_PROTO_RESPONSE_MODE_FRAGMENT,",
          "2866:    provider->issuer, provider->client_id) == FALSE)",
          "",
          "[Added Lines]",
          "2893:    proto_state, response_mode,",
          "2894:    OIDC_PROTO_RESPONSE_MODE_FRAGMENT, provider->issuer,",
          "2895:    provider->client_id) == FALSE)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2893:  static const char *response_type = OIDC_PROTO_RESPONSE_TYPE_CODE;",
          "2895:  if (oidc_proto_validate_response_type_mode_issuer(r, response_type, params,",
          "2898:   return FALSE;",
          "",
          "[Removed Lines]",
          "2896:    proto_state, response_mode, OIDC_PROTO_RESPONSE_MODE_QUERY,",
          "2897:    provider->issuer, provider->client_id) == FALSE)",
          "",
          "[Added Lines]",
          "2925:    proto_state, response_mode,",
          "2926:    OIDC_PROTO_RESPONSE_MODE_QUERY, provider->issuer,",
          "2927:    provider->client_id) == FALSE)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2936:   const char *response_mode, oidc_jwt_t **jwt) {",
          "2938:  if (oidc_proto_validate_response_type_mode_issuer(r, response_type, params,",
          "2941:   return FALSE;",
          "2943:  if (oidc_proto_parse_idtoken_and_validate_code(r, c, proto_state, provider,",
          "",
          "[Removed Lines]",
          "2939:    proto_state, response_mode, OIDC_PROTO_RESPONSE_MODE_FRAGMENT,",
          "2940:    provider->issuer, provider->client_id) == FALSE)",
          "",
          "[Added Lines]",
          "2969:    proto_state, response_mode,",
          "2970:    OIDC_PROTO_RESPONSE_MODE_FRAGMENT, provider->issuer,",
          "2971:    provider->client_id) == FALSE)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2988:  oidc_debug(r, \"enter\");",
          "2992:  if (oidc_proto_handle_implicit_flow(r, c, response_type, proto_state,",
          "2993:    provider, params, response_mode, jwt) == FALSE)",
          "",
          "[Removed Lines]",
          "2990:  static const char *response_type = OIDC_PROTO_RESPONSE_TYPE_IDTOKEN_TOKEN;",
          "",
          "[Added Lines]",
          "3021:  static const char *response_type =",
          "3022:    OIDC_PROTO_RESPONSE_TYPE_IDTOKEN_TOKEN;",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <http_core.h>",
          "3: #include <http_config.h>",
          "4: #include <apr_global_mutex.h>",
          "5: #include <apr_lib.h>",
          "6: #include <http_log.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <apr_strings.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:  return 0;",
          "37: }",
          "41: }",
          "43: static char *substring_conf(apr_pool_t *p, const char *start, int len,",
          "",
          "[Removed Lines]",
          "39: AP_DECLARE(char *) ap_getword(apr_pool_t *p, const char **line, char stop) {",
          "40:  return \"\";",
          "",
          "[Added Lines]",
          "40: AP_DECLARE(char *) ap_getword(apr_pool_t *atrans, const char **line, char stop) {",
          "41:  const char *pos = *line;",
          "42:  int len;",
          "43:  char *res;",
          "45:  while ((*pos != stop) && *pos) {",
          "46:   ++pos;",
          "47:  }",
          "49:  len = pos - *line;",
          "50:  res = apr_pstrmemdup(atrans, *line, len);",
          "52:  if (stop) {",
          "53:   while (*pos == stop) {",
          "54:    ++pos;",
          "55:   }",
          "56:  }",
          "59:  return res;",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1043:  provider.client_id = \"client_id\";",
          "1044:  provider.client_secret = NULL;",
          "1045:  provider.response_type = \"code\";",
          "1047:  provider.request_object = NULL;",
          "1048:  provider.token_binding_policy = OIDC_TOKEN_BINDING_POLICY_OPTIONAL;",
          "1049:  provider.auth_request_method = OIDC_AUTH_REQUEST_METHOD_GET;",
          "",
          "[Removed Lines]",
          "1046:  provider.auth_request_params = NULL;",
          "",
          "[Added Lines]",
          "1046:  provider.auth_request_params = \"jan=piet&foo=#\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:  TST_ASSERT_STR(\"oidc_proto_authorization_request (2)\",",
          "1067:    apr_table_get(r->headers_out, \"Location\"),",
          "1070:  return 0;",
          "1071: }",
          "",
          "[Removed Lines]",
          "1068:    \"https://idp.example.com/authorize?response_type=code&scope=openid&client_id=client_id&state=12345&redirect_uri=https%3A%2F%2Fwww.example.com%2Fprotected%2F&nonce=anonce\");",
          "",
          "[Added Lines]",
          "1068:    \"https://idp.example.com/authorize?response_type=code&scope=openid&client_id=client_id&state=12345&redirect_uri=https%3A%2F%2Fwww.example.com%2Fprotected%2F&nonce=anonce&jan=piet&foo=bar\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1181:    r->pool, err);",
          "1183:  TST_ASSERT_ERR(\"oidc_proto_validate_jwt\",",
          "1187:  oidc_jwk_destroy(jwk);",
          "1188:  oidc_jwt_destroy(jwt);",
          "",
          "[Removed Lines]",
          "1184:    oidc_proto_validate_jwt(r, jwt, s_issuer, TRUE, TRUE, 10, OIDC_TOKEN_BINDING_POLICY_DISABLED), r->pool,",
          "1185:    err);",
          "",
          "[Added Lines]",
          "1184:    oidc_proto_validate_jwt(r, jwt, s_issuer, TRUE, TRUE, 10, OIDC_TOKEN_BINDING_POLICY_DISABLED),",
          "1185:    r->pool, err);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1198:  r->unparsed_uri = apr_pstrcat(r->pool, r->uri, \"?\", r->args, NULL);",
          "1200:  url = oidc_get_current_url(r);",
          "1203:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com\");",
          "1204:  url = oidc_get_current_url(r);",
          "1207:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com:654\");",
          "1208:  url = oidc_get_current_url(r);",
          "1211:  apr_table_set(r->headers_in, \"X-Forwarded-Port\", \"321\");",
          "1212:  url = oidc_get_current_url(r);",
          "1215:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http\");",
          "1216:  url = oidc_get_current_url(r);",
          "1219:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"https , http\");",
          "1220:  url = oidc_get_current_url(r);",
          "1223:  apr_table_unset(r->headers_in, \"X-Forwarded-Host\");",
          "1224:  apr_table_unset(r->headers_in, \"X-Forwarded-Port\");",
          "1225:  url = oidc_get_current_url(r);",
          "1228:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http \");",
          "1229:  apr_table_set(r->headers_in, \"Host\", \"remotehost:8380\");",
          "1230:  r->uri = \"http://remotehost:8380/private/\";",
          "1231:  url = oidc_get_current_url(r);",
          "1234:  return 0;",
          "1235: }",
          "",
          "[Removed Lines]",
          "1201:  TST_ASSERT_STR(\"test_current_url (1)\", url, \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1205:  TST_ASSERT_STR(\"test_current_url (2)\", url, \"https://www.outer.com/test?foo=bar&param1=value1\");",
          "1209:  TST_ASSERT_STR(\"test_current_url (3)\", url, \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1213:  TST_ASSERT_STR(\"test_current_url (4)\", url, \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1217:  TST_ASSERT_STR(\"test_current_url (5)\", url, \"http://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1221:  TST_ASSERT_STR(\"test_current_url (6)\", url, \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1226:  TST_ASSERT_STR(\"test_current_url (7)\", url, \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1232:  TST_ASSERT_STR(\"test_current_url (8)\", url, \"http://remotehost:8380/private/?foo=bar&param1=value1\");",
          "",
          "[Added Lines]",
          "1201:  TST_ASSERT_STR(\"test_current_url (1)\", url,",
          "1202:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1206:  TST_ASSERT_STR(\"test_current_url (2)\", url,",
          "1207:    \"https://www.outer.com/test?foo=bar&param1=value1\");",
          "1211:  TST_ASSERT_STR(\"test_current_url (3)\", url,",
          "1212:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1216:  TST_ASSERT_STR(\"test_current_url (4)\", url,",
          "1217:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1221:  TST_ASSERT_STR(\"test_current_url (5)\", url,",
          "1222:    \"http://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1226:  TST_ASSERT_STR(\"test_current_url (6)\", url,",
          "1227:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1232:  TST_ASSERT_STR(\"test_current_url (7)\", url,",
          "1233:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1239:  TST_ASSERT_STR(\"test_current_url (8)\", url,",
          "1240:    \"http://remotehost:8380/private/?foo=bar&param1=value1\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38172c73e027d1348225f6f08809f6e6c95db145",
      "candidate_info": {
        "commit_hash": "38172c73e027d1348225f6f08809f6e6c95db145",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/38172c73e027d1348225f6f08809f6e6c95db145",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "avoid crash on relative logout URL parameter; release 2.3.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2585:   }",
          "2589:    error_description =",
          "2590:      apr_psprintf(r->pool,",
          "2591:        \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "2593:    oidc_error(r, \"%s\", error_description);",
          "2594:    return oidc_util_html_send_error(r, c->error_template,",
          "2595:      \"Invalid Request\", error_description,",
          "",
          "[Removed Lines]",
          "2587:   if ((strstr(oidc_get_current_url_host(r), uri.hostname) == NULL)",
          "2588:     || (strstr(uri.hostname, oidc_get_current_url_host(r)) == NULL)) {",
          "2592:        apr_uri_unparse(r->pool, &uri, 0), oidc_get_current_url_host(r));",
          "",
          "[Added Lines]",
          "2587:   const char *c_host = oidc_get_current_url_host(r);",
          "2588:   if ((uri.hostname != NULL)",
          "2589:     && ((strstr(c_host, uri.hostname) == NULL)",
          "2590:       || (strstr(uri.hostname, c_host) == NULL))) {",
          "2594:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2618:   char *logout_request = apr_pstrdup(r->pool, end_session_endpoint);",
          "2619:   if (id_token_hint != NULL) {",
          "2620:    logout_request = apr_psprintf(r->pool, \"%s%sid_token_hint=%s\",",
          "2623:        OIDC_CHAR_QUERY) != NULL ?",
          "2624:          OIDC_STR_AMP :",
          "2625:          OIDC_STR_QUERY,",
          "",
          "[Removed Lines]",
          "2621:      logout_request,",
          "2622:      strchr(logout_request ? logout_request : \"\",",
          "",
          "[Added Lines]",
          "2623:      logout_request, strchr(logout_request ? logout_request : \"\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7783ea7e9dd69a99ddb0221af1935624d1841f51",
      "candidate_info": {
        "commit_hash": "7783ea7e9dd69a99ddb0221af1935624d1841f51",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/7783ea7e9dd69a99ddb0221af1935624d1841f51",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc24],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    }
  ]
}