{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db5ba5c385496191770a418e27607522474e611c",
      "candidate_info": {
        "commit_hash": "db5ba5c385496191770a418e27607522474e611c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db5ba5c385496191770a418e27607522474e611c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/like3.test"
        ],
        "message": "Omit tests of the LIKE optimization in like3.test when SQLITE_ENABLE_ICU is defined.\n\nFossilOrigin-Name: af53c41a127c314c0608f3fd016d3a26896783745e46cd180976a188400cdb75",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "184: #",
          "185: do_execsql_test like3-6.100 {",
          "186:   DROP TABLE IF EXISTS t1;",
          "187:   CREATE TABLE t1(path TEXT COLLATE nocase PRIMARY KEY,a,b,c) WITHOUT ROWID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: ifcapable !icu {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:   QUERY PLAN",
          "230:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "231: }",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b43ac0021ff4f9e389551fc36b57664e265d4bc0",
      "candidate_info": {
        "commit_hash": "b43ac0021ff4f9e389551fc36b57664e265d4bc0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b43ac0021ff4f9e389551fc36b57664e265d4bc0",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Fix an assert() that might not be true if the %_segdir table of FTS3 contains corrupt entries.\n\nFossilOrigin-Name: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352:     if( pReader->iCurrentBlock>=pReader->iLeafEndBlock ){",
          "1353:       return SQLITE_OK;",
          "1354:     }",
          "",
          "[Removed Lines]",
          "1351:     assert( pReader->iCurrentBlock<=pReader->iLeafEndBlock );",
          "",
          "[Added Lines]",
          "1351: #ifdef CORRUPT_DB",
          "1352:     assert( pReader->iCurrentBlock<=pReader->iLeafEndBlock || CORRUPT_DB );",
          "1353: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0cfb888723fb8ff0763bbc23acb7d21a53f6d1c40661d8468248644281b29d85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "687e20079c686882920ef23c68ebf743330601ba",
      "candidate_info": {
        "commit_hash": "687e20079c686882920ef23c68ebf743330601ba",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/687e20079c686882920ef23c68ebf743330601ba",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the node hash function in RTREE to ensure that it always returns a non-negative value.\n\nFossilOrigin-Name: 0bf4c70a6849da74797e8616a4f3730492ad02882ae67a0fe0f3b3cc3f1043b4",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570: }",
          "",
          "[Removed Lines]",
          "568: static int nodeHash(i64 iNode){",
          "569:   return iNode % HASHSIZE;",
          "",
          "[Added Lines]",
          "568: static unsigned int nodeHash(i64 iNode){",
          "569:   return ((unsigned)iNode) % HASHSIZE;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fdd3604eef880414682e9e6f74d714520fe1c63f267ec4da752d2dc1da6bf72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fc60429924d3141df71059c114352713b5548b2",
      "candidate_info": {
        "commit_hash": "3fc60429924d3141df71059c114352713b5548b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fc60429924d3141df71059c114352713b5548b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Improvements to VdbeCoverage macros.\n\nFossilOrigin-Name: 10ee9e337e5f8a846dc827f6deb07930a790ac9d290b62f73de59454e465d5a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:         u32 x = pLevel->iLikeRepCntr;",
          "2198:         if( x>0 ){",
          "2199:           skipLikeAddr = sqlite3VdbeAddOp1(v, (x&1)?OP_IfNot:OP_If,(int)(x>>1));",
          "2200:         }",
          "2202: #endif",
          "2203:       }",
          "",
          "[Removed Lines]",
          "2201:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2200:           VdbeCoverageIf(v, (x&1)==1);",
          "2201:           VdbeCoverageIf(v, (x&1)==0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1310:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1311:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1312:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1313:   }else{",
          "1314:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1315:   }",
          "1321:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "",
          "[Removed Lines]",
          "1316:   VdbeCoverageIf(v, eCond==0);",
          "1317:   VdbeCoverageIf(v, eCond==1);",
          "1318:   VdbeCoverageIf(v, eCond==2);",
          "1319:   VdbeCoverageIf(v, eCond==3);",
          "1320:   VdbeCoverageIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1313:     VdbeCoverage(v);",
          "1314:     assert( eCond==3 || eCond==4 );",
          "1315:     VdbeCoverageIf(v, eCond==3);",
          "1316:     VdbeCoverageIf(v, eCond==4);",
          "1319:     VdbeCoverage(v);",
          "1320:     assert( eCond==0 || eCond==1 || eCond==2 );",
          "1321:     VdbeCoverageIf(v, eCond==0);",
          "1322:     VdbeCoverageIf(v, eCond==1);",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   VdbeCoverage(v);",
          "1834:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1840:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1841:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1838:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1840:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1842:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1843:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1844:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1845:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1846:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2534:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2535:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2536:     VdbeCoverage(v);",
          "2537:     windowAggFinal(&s, 0);",
          "2538:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2539:     VdbeCoverageNeverTaken(v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2545:     VdbeCoverageIf(v, op==OP_Ge);",
          "2546:     VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ad35d980bd7cb4192cee33d173b229d69352ce9",
      "candidate_info": {
        "commit_hash": "2ad35d980bd7cb4192cee33d173b229d69352ce9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ad35d980bd7cb4192cee33d173b229d69352ce9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Documentation updates for the SQLITE_DIRECTONLY flag.\n\nFossilOrigin-Name: 5beb6dc9bc2d3d0003e33488df9c01aaf28c41c30fd9ca35543cbe3ec5a8d9ce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    }
  ]
}