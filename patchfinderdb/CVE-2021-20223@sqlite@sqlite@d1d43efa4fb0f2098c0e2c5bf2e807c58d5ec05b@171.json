{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b65ce3960781aacf8d80e15c2c9bca941b78e071",
      "candidate_info": {
        "commit_hash": "b65ce3960781aacf8d80e15c2c9bca941b78e071",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b65ce3960781aacf8d80e15c2c9bca941b78e071",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an assert() in fts3 that can fail when processing a corrupt record.\n\nFossilOrigin-Name: a58a6d6fb241a50c4c7c9af8a9c65bc4746e905b2ae12290c7182afa944053a2",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4524:   assert( nDoclist>0 );",
          "4525:   assert( *pbEof==0 );",
          "4527:   assert( !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) );",
          "4529:   if( p==0 ){",
          "",
          "[Removed Lines]",
          "4526:   assert( p || *piDocid==0 );",
          "",
          "[Added Lines]",
          "4526:   assert_fts3_nc( p || *piDocid==0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61782a7ae3c25cf59d7a676cb295eb024d17c46e532ae78c6fe871a91d712fa9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6091:     }",
          "6092:   }",
          "6093: } 0",
          "6096: set sqlite_fts3_enable_parentheses $saved",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6094: set sqlite_fts3_enable_parentheses $saved",
          "6096: #-------------------------------------------------------------------------",
          "6097: reset_db",
          "6098: set saved $sqlite_fts3_enable_parentheses",
          "6099: set sqlite_fts3_enable_parentheses 1",
          "6101: do_execsql_test 40.1 {",
          "6103:   CREATE VIRTUAL TABLE t0 USING fts3(col0 INTEGER PRIMARY KEY, col1, col2 ,col3 );",
          "6104:   INSERT INTO t0_segdir VALUES(0,0,0,0,'0 42',",
          "6105:       X'0001310301020001033233340500010102000004616161bc050101020200000462626262050101030200'",
          "6106:   );",
          "6107: }",
          "6109: do_execsql_test 40.2 {",
          "6110:   SELECT 0==matchinfo(t0,'sx') FROM t0 WHERE t0 MATCH '1* 2 3 4 5 6 OR 1';",
          "6111: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6473ba95a0325e21716940299761d6a1a3c43d59",
      "candidate_info": {
        "commit_hash": "6473ba95a0325e21716940299761d6a1a3c43d59",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6473ba95a0325e21716940299761d6a1a3c43d59",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/window1.test"
        ],
        "message": "Add a missing \"ifcapable rtree {...}\" line to the window1.test test module.\n\nFossilOrigin-Name: 4e6fbb1a5100fe29209bcf668fbecf3a733034b84925265d8a15b0a84baf6cf0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99609786f485653464d1caef1d207ae299d28c925bff3e8e94891759b4765dcc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1361:   SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0);",
          "1362: }",
          "1373: #-------------------------------------------------------------------------",
          "1374: reset_db",
          "",
          "[Removed Lines]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1366: reset_db",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {0 {}}",
          "",
          "[Added Lines]",
          "1364: ifcapable rtree {",
          "1365:   # 2019-12-25 ticket d87336c81c7d0873",
          "1366:   #",
          "1367:   reset_db",
          "1368:   do_catchsql_test 40.1 {",
          "1369:     CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1370:     SELECT * FROM t0",
          "1371:      WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1372:   } {0 {}}",
          "1373: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a1f2e48534f614638ed86bb3d66b0f2f735d900",
      "candidate_info": {
        "commit_hash": "9a1f2e48534f614638ed86bb3d66b0f2f735d900",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a1f2e48534f614638ed86bb3d66b0f2f735d900",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix a faulty assert() associated with query search limiting query plans.\n\nFossilOrigin-Name: 0d743585c242ebd898b232f42937a2306752aaed0a6756705e3ef1cf7593aa97",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d0b9109f7a5312d4e136395e08b11dad64d746bc106ad44d47675e5b1dcb4ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3502:         if( rc==SQLITE_OK ){",
          "3503:           rc = whereLoopAddOr(&sSubBuild, mPrereq, mUnusable);",
          "3504:         }",
          "3506:         if( sCur.n==0 ){",
          "3507:           sSum.n = 0;",
          "3508:           break;",
          "",
          "[Removed Lines]",
          "3505:         assert( rc==SQLITE_OK || sCur.n==0 );",
          "",
          "[Added Lines]",
          "3505:         assert( rc==SQLITE_OK || rc==SQLITE_DONE || sCur.n==0 );",
          "3506:         testcase( rc==SQLITE_DONE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4adb1d0000c8bd3d194518bf3e164d90cdecb93b",
      "candidate_info": {
        "commit_hash": "4adb1d0000c8bd3d194518bf3e164d90cdecb93b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4adb1d0000c8bd3d194518bf3e164d90cdecb93b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/nulls1.test"
        ],
        "message": "Change an assert() in where.c to a testcase() macro, since the condition may be false. This was a problem with the assert() only, there is no bug in release builds that omit assert().\n\nFossilOrigin-Name: 82be135dee7ccfde5f8a67f3621b7ced449dce89bae9cadf025154a4de848c11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9421b442cad9858ec21050c106aa935a1c0723ab08ef9a867a79638b040b6e68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1685:     ){",
          "1686:       assert( bSeekPastNull==0 && nExtraReg==0 && nBtm==0 && nTop==0 );",
          "1687:       assert( pRangeEnd==0 && pRangeStart==0 );",
          "1689:       nExtraReg = 1;",
          "1690:       bSeekPastNull = 1;",
          "1691:       pLevel->regBignull = regBignull = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1688:       assert( pLoop->nSkip==0 );",
          "",
          "[Added Lines]",
          "1688:       testcase( pLoop->nSkip>0 );",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:   CREATE TABLE t80(a, b INTEGER, PRIMARY KEY(b NULLS LAST)) WITHOUT ROWID;",
          "256: } {1 {unsupported use of NULLS LAST}}",
          "258: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #-------------------------------------------------------------------------",
          "259: reset_db",
          "260: do_execsql_test 9.0 {",
          "261:   CREATE TABLE v0 (c1, c2, c3);",
          "262:   CREATE INDEX v3 ON v0 (c1, c2, c3);",
          "263: }",
          "264: do_execsql_test 9.1 {",
          "265:   ANALYZE sqlite_master;",
          "266:   INSERT INTO sqlite_stat1 VALUES('v0','v3','648 324 81');",
          "267:   ANALYZE sqlite_master;",
          "268: }",
          "270: do_execsql_test 9.2 {",
          "271:   INSERT INTO v0 VALUES",
          "272:       (1, 10, 'b'),",
          "273:       (1, 10, 'd'),",
          "274:       (1, 10, NULL),",
          "275:       (2, 10, 'a'),",
          "276:       (2, 10, NULL),",
          "277:       (1, 10, 'c'),",
          "278:       (2, 10, 'b'),",
          "279:       (1, 10, 'a'),",
          "280:       (1, 10, NULL),",
          "281:       (2, 10, NULL),",
          "282:       (2, 10, 'd'),",
          "283:       (2, 10, 'c');",
          "284: }",
          "286: do_execsql_test 9.3 {",
          "287:   SELECT c1, c2, ifnull(c3, 'NULL') FROM v0",
          "288:   WHERE c2=10 ORDER BY c1, c3 NULLS LAST",
          "289: } {",
          "290:   1 10 a 1 10 b 1 10 c 1 10 d 1 10 NULL 1 10 NULL",
          "291:   2 10 a 2 10 b 2 10 c 2 10 d 2 10 NULL 2 10 NULL",
          "292: }",
          "294: do_eqp_test 9.4 {",
          "295:   SELECT c1, c2, ifnull(c3, 'NULL') FROM v0",
          "296:   WHERE c2=10 ORDER BY c1, c3 NULLS LAST",
          "297: } {SEARCH TABLE v0 USING COVERING INDEX v3 (ANY(c1) AND c2=?)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6907e299370683129fd6a7380ba052ee7b11a0e",
      "candidate_info": {
        "commit_hash": "b6907e299370683129fd6a7380ba052ee7b11a0e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6907e299370683129fd6a7380ba052ee7b11a0e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Extra assert() statements in the printf() logic.\n\nFossilOrigin-Name: b1b182be2ab34cec1d94c5570bc361331a34f727eb9fa4aadfabb7f1ef79f83e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 572105de1d44bca4f18c99d373458889163611384eebbc9659474874ee1701f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:     switch( xtype ){",
          "405:       case etPOINTER:",
          "406:         flag_long = sizeof(char*)==sizeof(i64) ? 2 :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:     assert( width>=0 );",
          "405:     assert( precision>=(-1) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}