{
  "cve_id": "CVE-2021-32132",
  "cve_desc": "The abst_box_size function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
  "repo": "gpac/gpac",
  "patch_hash": "e74be5976a6fee059c638050a237893f7e9a3b23",
  "patch_info": {
    "commit_hash": "e74be5976a6fee059c638050a237893f7e9a3b23",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/e74be5976a6fee059c638050a237893f7e9a3b23",
    "files": [
      "include/gpac/internal/isomedia_dev.h",
      "src/isomedia/box_code_adobe.c"
    ],
    "message": "fixed #1753",
    "before_after_code_files": [
      "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
      "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
    ]
  },
  "patch_diff": {
    "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
      "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "599:   }\\",
      "600:   __ptr->size -= bytes; \\",
      "603: #define ISOM_DECREASE_SIZE_NO_ERR(__ptr, bytes) if (__ptr->size < (bytes) ) {\\",
      "604:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d), skipping box\\n\", gf_4cc_to_str(__ptr->type), (u32) __ptr->size, (bytes), __FILE__, __LINE__ )); \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "602: #define ISOM_DECREASE_SIZE_GOTO_EXIT(__ptr, bytes) if (__ptr->size < (bytes) ) {\\",
      "603:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d)\\n\", gf_4cc_to_str(__ptr->type), (u32) __ptr->size, (bytes), __FILE__, __LINE__ )); \\",
      "604:    e = GF_ISOM_INVALID_FILE; \\",
      "605:    goto exit;\\",
      "606:   }\\",
      "607:   __ptr->size -= bytes; \\",
      "",
      "---------------"
    ],
    "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
      "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:  u32 tmp_strsize;",
      "81:  char *tmp_str;",
      "82:  Bool zfound=GF_FALSE;",
      "85:  ISOM_DECREASE_SIZE(ptr, 25)",
      "86:  ptr->bootstrapinfo_version = gf_bs_read_u32(bs);",
      "",
      "[Removed Lines]",
      "83:  GF_Err e;",
      "",
      "[Added Lines]",
      "83:  GF_Err e = GF_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "100:  memset(tmp_str, 0, sizeof(char)*tmp_strsize);",
      "102:  while (tmp_strsize) {",
      "104:   tmp_str[i] = gf_bs_read_u8(bs);",
      "105:   tmp_strsize--;",
      "106:   if (!tmp_str[i]) {",
      "",
      "[Removed Lines]",
      "103:   ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "[Added Lines]",
      "103:   ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:   }",
      "110:   i++;",
      "111:  }",
      "114:  if (i) {",
      "115:   ptr->movie_identifier = gf_strdup(tmp_str);",
      "116:  }",
      "119:  ptr->server_entry_count = gf_bs_read_u8(bs);",
      "120:  for (i=0; i<ptr->server_entry_count; i++) {",
      "121:   int j=0;",
      "122:   zfound = GF_FALSE;",
      "123:   tmp_strsize=(u32)ptr->size;",
      "124:   while (tmp_strsize) {",
      "126:    tmp_str[j] = gf_bs_read_u8(bs);",
      "127:    tmp_strsize--;",
      "128:    if (!tmp_str[j]) {",
      "",
      "[Removed Lines]",
      "112:  if (!zfound)",
      "113:   return GF_ISOM_INVALID_FILE;",
      "118:  ISOM_DECREASE_SIZE(ptr, 1)",
      "125:    ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "[Added Lines]",
      "112:  if (!zfound) {",
      "113:   e = GF_ISOM_INVALID_FILE;",
      "114:   goto exit;",
      "115:  }",
      "120:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "127:    ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "131:    }",
      "132:    j++;",
      "133:   }",
      "136:   if (j) {",
      "137:    gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
      "138:   }",
      "139:  }",
      "142:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
      "143:  for (i=0; i<ptr->quality_entry_count; i++) {",
      "144:   int j=0;",
      "145:   zfound = GF_FALSE;",
      "146:   tmp_strsize=(u32)ptr->size;",
      "147:   while (tmp_strsize) {",
      "149:    tmp_str[j] = gf_bs_read_u8(bs);",
      "150:    tmp_strsize--;",
      "151:    if (!tmp_str[j]) {",
      "",
      "[Removed Lines]",
      "134:   if (!zfound)",
      "135:    return GF_ISOM_INVALID_FILE;",
      "141:  ISOM_DECREASE_SIZE(ptr, 1)",
      "148:    ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "[Added Lines]",
      "136:   if (!zfound) {",
      "137:    e = GF_ISOM_INVALID_FILE;",
      "138:    goto exit;",
      "139:   }",
      "144:  if (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {",
      "145:   e = GF_ISOM_INVALID_FILE;",
      "146:   goto exit;",
      "147:  }",
      "149:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "156:    ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "155:    j++;",
      "156:   }",
      "160:   if (j) {",
      "161:    gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
      "162:   }",
      "163:  }",
      "165:  i=0;",
      "166:  tmp_strsize=(u32)ptr->size;",
      "167:  zfound = GF_FALSE;",
      "168:  while (tmp_strsize) {",
      "170:   tmp_str[i] = gf_bs_read_u8(bs);",
      "171:   tmp_strsize--;",
      "172:   if (!tmp_str[i]) {",
      "",
      "[Removed Lines]",
      "158:   if (!zfound)",
      "159:    return GF_ISOM_INVALID_FILE;",
      "169:   ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "[Added Lines]",
      "166:   if (!zfound) {",
      "167:    e = GF_ISOM_INVALID_FILE;",
      "168:    goto exit;",
      "169:   }",
      "174:  if (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {",
      "175:   e = GF_ISOM_INVALID_FILE;",
      "176:   goto exit;",
      "177:  }",
      "183:   ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "175:   }",
      "176:   i++;",
      "177:  }",
      "180:  if (i) {",
      "181:   ptr->drm_data = gf_strdup(tmp_str);",
      "182:  }",
      "",
      "[Removed Lines]",
      "178:  if (!zfound)",
      "179:   return GF_ISOM_INVALID_FILE;",
      "",
      "[Added Lines]",
      "192:  if (!zfound) {",
      "193:   e = GF_ISOM_INVALID_FILE;",
      "194:   goto exit;",
      "195:  }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "185:  tmp_strsize=(u32)ptr->size;",
      "186:  zfound = GF_FALSE;",
      "187:  while (tmp_strsize) {",
      "189:   tmp_str[i] = gf_bs_read_u8(bs);",
      "190:   tmp_strsize--;",
      "191:   if (!tmp_str[i]) {",
      "",
      "[Removed Lines]",
      "188:   ISOM_DECREASE_SIZE(ptr, 1)",
      "",
      "[Added Lines]",
      "205:   ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "194:   }",
      "195:   i++;",
      "196:  }",
      "199:  if (i) {",
      "200:   ptr->meta_data = gf_strdup(tmp_str);",
      "201:  }",
      "204:  ptr->segment_run_table_count = gf_bs_read_u8(bs);",
      "205:  for (i=0; i<ptr->segment_run_table_count; i++) {",
      "206:   GF_AdobeSegmentRunTableBox *asrt = NULL;",
      "207:   e = gf_isom_box_parse((GF_Box **)&asrt, bs);",
      "208:   if (e) {",
      "209:    if (asrt) gf_isom_box_del((GF_Box*)asrt);",
      "212:   }",
      "213:   gf_list_add(ptr->segment_run_table_entries, asrt);",
      "214:  }",
      "217:  ptr->fragment_run_table_count = gf_bs_read_u8(bs);",
      "218:  for (i=0; i<ptr->fragment_run_table_count; i++) {",
      "219:   GF_AdobeFragmentRunTableBox *afrt = NULL;",
      "220:   e = gf_isom_box_parse((GF_Box **)&afrt, bs);",
      "221:   if (e) {",
      "222:    if (afrt) gf_isom_box_del((GF_Box*)afrt);",
      "225:   }",
      "226:   gf_list_add(ptr->fragment_run_table_entries, afrt);",
      "227:  }",
      "229:  gf_free(tmp_str);",
      "232: }",
      "234: GF_Box *abst_box_new()",
      "",
      "[Removed Lines]",
      "197:  if (!zfound)",
      "198:   return GF_ISOM_INVALID_FILE;",
      "203:  ISOM_DECREASE_SIZE(ptr, 1)",
      "210:    gf_free(tmp_str);",
      "211:    return e;",
      "216:  ISOM_DECREASE_SIZE(ptr, 1)",
      "223:    gf_free(tmp_str);",
      "224:    return e;",
      "231:  return GF_OK;",
      "",
      "[Added Lines]",
      "214:  if (!zfound) {",
      "215:   e = GF_ISOM_INVALID_FILE;",
      "216:   goto exit;",
      "217:  }",
      "223:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "230:    goto exit;",
      "234:  if (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {",
      "235:   e = GF_ISOM_INVALID_FILE;",
      "236:   goto exit;",
      "237:  }",
      "239:  ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
      "246:    goto exit;",
      "250:  if (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {",
      "251:   e = GF_ISOM_INVALID_FILE;",
      "252:   goto exit;",
      "253:  }",
      "255: exit:",
      "257:  return e;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "758135e91e623d7dfe7f6aaad7aeb3f791b7a4e5",
      "candidate_info": {
        "commit_hash": "758135e91e623d7dfe7f6aaad7aeb3f791b7a4e5",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/758135e91e623d7dfe7f6aaad7aeb3f791b7a4e5",
        "files": [
          "src/isomedia/box_code_adobe.c"
        ],
        "message": "fixed #1733",
        "before_after_code_files": [
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  int i;",
          "80:  u32 tmp_strsize;",
          "81:  char *tmp_str;",
          "82:  GF_Err e;",
          "84:  ISOM_DECREASE_SIZE(ptr, 25)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  Bool zfound=GF_FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:   ISOM_DECREASE_SIZE(ptr, 1)",
          "103:   tmp_str[i] = gf_bs_read_u8(bs);",
          "104:   tmp_strsize--;",
          "106:    break;",
          "107:   i++;",
          "108:  }",
          "109:  if (i) {",
          "110:   ptr->movie_identifier = gf_strdup(tmp_str);",
          "111:  }",
          "",
          "[Removed Lines]",
          "105:   if (!tmp_str[i])",
          "",
          "[Added Lines]",
          "106:   if (!tmp_str[i]) {",
          "107:    zfound = GF_TRUE;",
          "109:   }",
          "112:  if (!zfound)",
          "113:   return GF_ISOM_INVALID_FILE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:  ptr->server_entry_count = gf_bs_read_u8(bs);",
          "115:  for (i=0; i<ptr->server_entry_count; i++) {",
          "116:   int j=0;",
          "117:   tmp_strsize=(u32)ptr->size;",
          "118:   while (tmp_strsize) {",
          "119:    ISOM_DECREASE_SIZE(ptr, 1)",
          "120:    tmp_str[j] = gf_bs_read_u8(bs);",
          "121:    tmp_strsize--;",
          "123:     break;",
          "124:    j++;",
          "125:   }",
          "126:   if (j) {",
          "127:    gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "128:   }",
          "",
          "[Removed Lines]",
          "122:    if (!tmp_str[j])",
          "",
          "[Added Lines]",
          "122:   zfound = GF_FALSE;",
          "128:    if (!tmp_str[j]) {",
          "129:     zfound = GF_TRUE;",
          "131:    }",
          "134:   if (!zfound)",
          "135:    return GF_ISOM_INVALID_FILE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "133:  for (i=0; i<ptr->quality_entry_count; i++) {",
          "134:   int j=0;",
          "135:   tmp_strsize=(u32)ptr->size;",
          "136:   while (tmp_strsize) {",
          "137:    ISOM_DECREASE_SIZE(ptr, 1)",
          "138:    tmp_str[j] = gf_bs_read_u8(bs);",
          "139:    tmp_strsize--;",
          "141:     break;",
          "142:    j++;",
          "143:   }",
          "145:   if (j) {",
          "146:    gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "147:   }",
          "",
          "[Removed Lines]",
          "140:    if (!tmp_str[j])",
          "",
          "[Added Lines]",
          "145:   zfound = GF_FALSE;",
          "151:    if (!tmp_str[j]) {",
          "152:     zfound = GF_TRUE;",
          "154:    }",
          "158:   if (!zfound)",
          "159:    return GF_ISOM_INVALID_FILE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:  i=0;",
          "151:  tmp_strsize=(u32)ptr->size;",
          "152:  while (tmp_strsize) {",
          "153:   ISOM_DECREASE_SIZE(ptr, 1)",
          "154:   tmp_str[i] = gf_bs_read_u8(bs);",
          "155:   tmp_strsize--;",
          "157:    break;",
          "158:   i++;",
          "159:  }",
          "160:  if (i) {",
          "161:   ptr->drm_data = gf_strdup(tmp_str);",
          "162:  }",
          "164:  i=0;",
          "165:  tmp_strsize=(u32)ptr->size;",
          "166:  while (tmp_strsize) {",
          "167:   ISOM_DECREASE_SIZE(ptr, 1)",
          "168:   tmp_str[i] = gf_bs_read_u8(bs);",
          "169:   tmp_strsize--;",
          "171:    break;",
          "172:   i++;",
          "173:  }",
          "174:  if (i) {",
          "175:   ptr->meta_data = gf_strdup(tmp_str);",
          "176:  }",
          "",
          "[Removed Lines]",
          "156:   if (!tmp_str[i])",
          "170:   if (!tmp_str[i])",
          "",
          "[Added Lines]",
          "167:  zfound = GF_FALSE;",
          "172:   if (!tmp_str[i]) {",
          "173:    zfound = GF_TRUE;",
          "175:   }",
          "178:  if (!zfound)",
          "179:   return GF_ISOM_INVALID_FILE;",
          "186:  zfound = GF_FALSE;",
          "191:   if (!tmp_str[i]) {",
          "192:    zfound = GF_TRUE;",
          "194:   }",
          "197:  if (!zfound)",
          "198:   return GF_ISOM_INVALID_FILE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afaa05c2f35bd5ac1b39cf9313d6dbd4471922ad",
      "candidate_info": {
        "commit_hash": "afaa05c2f35bd5ac1b39cf9313d6dbd4471922ad",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/afaa05c2f35bd5ac1b39cf9313d6dbd4471922ad",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "src/isomedia/avc_ext.c",
          "src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_apple.c",
          "src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_code_meta.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/hinting.c",
          "src/isomedia/iff.c",
          "src/media_tools/webvtt.c",
          "src/utils/error.c"
        ],
        "message": "isobmf cleanup of full_box functions",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c",
          "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_apple.c||src/isomedia/box_code_apple.c",
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/hinting.c||src/isomedia/hinting.c",
          "src/isomedia/iff.c||src/isomedia/iff.c",
          "src/media_tools/webvtt.c||src/media_tools/webvtt.c",
          "src/utils/error.c||src/utils/error.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: GF_Err gf_isom_box_add_default(GF_Box *a, GF_Box *subbox);",
          "108: GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box);",
          "116: GF_Err gf_isom_box_write_header(GF_Box *ptr, GF_BitStream *bs);",
          "118: GF_Err gf_isom_full_box_write(GF_Box *s, GF_BitStream *bs);",
          "119: void gf_isom_box_array_del(GF_List *other_boxes);",
          "120: GF_Err gf_isom_box_array_write(GF_Box *parent, GF_List *list, GF_BitStream *bs);",
          "121: GF_Err gf_isom_box_array_size(GF_Box *parent, GF_List *list);",
          "",
          "[Removed Lines]",
          "110: #define gf_isom_full_box_init(__pre)",
          "114: GF_Err gf_isom_box_get_size(GF_Box *ptr);",
          "115: GF_Err gf_isom_full_box_get_size(GF_Box *ptr);",
          "117: GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c": [
          "File: src/isomedia/avc_ext.c -> src/isomedia/avc_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1930: }",
          "1931: GF_Err btrt_Size(GF_Box *s)",
          "1932: {",
          "1934:  GF_BitRateBox *ptr = (GF_BitRateBox *)s;",
          "1936:  ptr->size += 12;",
          "1938: }",
          "",
          "[Removed Lines]",
          "1933:  GF_Err e;",
          "1935:  e = gf_isom_box_get_size(s);",
          "1937:  return e;",
          "",
          "[Added Lines]",
          "1935:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1995:  GF_Err e;",
          "1996:  u32 descSize = 0;",
          "1997:  GF_MPEG4ExtensionDescriptorsBox *ptr = (GF_MPEG4ExtensionDescriptorsBox *)s;",
          "2000:  e = gf_odf_desc_list_size(ptr->descriptors, &descSize);",
          "2001:  ptr->size += descSize;",
          "2002:  return e;",
          "",
          "[Removed Lines]",
          "1998:  e = gf_isom_box_get_size(s);",
          "1999:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2189:  GF_Err e;",
          "2190:  u32 i, count;",
          "2191:  GF_AVCConfigurationBox *ptr = (GF_AVCConfigurationBox *)s;",
          "2194:  if (!ptr->config) {",
          "2195:   ptr->size = 0;",
          "2196:   return e;",
          "",
          "[Removed Lines]",
          "2192:  e = gf_isom_box_get_size(s);",
          "2193:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2266:  GF_Err e;",
          "2267:  u32 i, count, j, subcount;",
          "2268:  GF_HEVCConfigurationBox *ptr = (GF_HEVCConfigurationBox *)s;",
          "2271:  if (!ptr->config) {",
          "2272:   ptr->size = 0;",
          "2273:   return e;",
          "",
          "[Removed Lines]",
          "2269:  e = gf_isom_box_get_size(s);",
          "2270:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
          "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: GF_Err gppc_Size(GF_Box *s)",
          "107: {",
          "109:  GF_3GPPConfigBox *ptr = (GF_3GPPConfigBox *)s;",
          "113:  s->size += 5;",
          "114:  switch (ptr->cfg.type) {",
          "115:  case GF_ISOM_SUBTYPE_3GP_H263:",
          "",
          "[Removed Lines]",
          "108:  GF_Err e;",
          "111:  e = gf_isom_box_get_size(s);",
          "112:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199: {",
          "200:  u32 i;",
          "201:  GF_FontTableBox *ptr = (GF_FontTableBox *)s;",
          "204:  s->size += 2;",
          "205:  for (i=0; i<ptr->entry_count; i++) {",
          "206:   s->size += 3;",
          "",
          "[Removed Lines]",
          "202:  GF_Err e = gf_isom_box_get_size(s);",
          "203:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "466: GF_Err tx3g_Size(GF_Box *s)",
          "467: {",
          "468:  GF_Tx3gSampleEntryBox *ptr = (GF_Tx3gSampleEntryBox*)s;",
          "472:  s->size += 18 + GPP_BOX_SIZE + GPP_STYLE_SIZE;",
          "473:  if (ptr->font_table) {",
          "",
          "[Removed Lines]",
          "469:  GF_Err e = gf_isom_box_get_size(s);",
          "470:  if (e) return e;",
          "",
          "[Added Lines]",
          "464:  GF_Err e;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "481: GF_Err text_Size(GF_Box *s)",
          "482: {",
          "483:  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;",
          "487:  s->size += 51 + 1;",
          "488:  if (ptr->textName)",
          "",
          "[Removed Lines]",
          "484:  GF_Err e = gf_isom_box_get_size(s);",
          "485:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "536: GF_Err styl_Size(GF_Box *s)",
          "537: {",
          "538:  GF_TextStyleBox*ptr = (GF_TextStyleBox*)s;",
          "541:  s->size += 2 + ptr->entry_count * GPP_STYLE_SIZE;",
          "542:  return GF_OK;",
          "543: }",
          "",
          "[Removed Lines]",
          "539:  GF_Err e = gf_isom_box_get_size(s);",
          "540:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "578: GF_Err hlit_Size(GF_Box *s)",
          "579: {",
          "582:  s->size += 4;",
          "583:  return GF_OK;",
          "584: }",
          "",
          "[Removed Lines]",
          "580:  GF_Err e = gf_isom_box_get_size(s);",
          "581:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "617: GF_Err hclr_Size(GF_Box *s)",
          "618: {",
          "621:  s->size += 4;",
          "622:  return GF_OK;",
          "623: }",
          "",
          "[Removed Lines]",
          "619:  GF_Err e = gf_isom_box_get_size(s);",
          "620:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "677: GF_Err krok_Size(GF_Box *s)",
          "678: {",
          "679:  GF_TextKaraokeBox*ptr = (GF_TextKaraokeBox*)s;",
          "682:  s->size += 6 * 8*ptr->nb_entries;",
          "683:  return GF_OK;",
          "684: }",
          "",
          "[Removed Lines]",
          "680:  GF_Err e = gf_isom_box_get_size(s);",
          "681:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "717: GF_Err dlay_Size(GF_Box *s)",
          "718: {",
          "721:  s->size += 4;",
          "722:  return GF_OK;",
          "723: }",
          "",
          "[Removed Lines]",
          "719:  GF_Err e = gf_isom_box_get_size(s);",
          "720:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "790: GF_Err href_Size(GF_Box *s)",
          "791: {",
          "792:  GF_TextHyperTextBox*ptr = (GF_TextHyperTextBox*)s;",
          "795:  s->size += 6;",
          "796:  if (ptr->URL) s->size += strlen(ptr->URL);",
          "797:  if (ptr->URL_hint) s->size += strlen(ptr->URL_hint);",
          "",
          "[Removed Lines]",
          "793:  GF_Err e = gf_isom_box_get_size(s);",
          "794:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "833: GF_Err tbox_Size(GF_Box *s)",
          "834: {",
          "837:  s->size += 8;",
          "838:  return GF_OK;",
          "839: }",
          "",
          "[Removed Lines]",
          "835:  GF_Err e = gf_isom_box_get_size(s);",
          "836:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "875: GF_Err blnk_Size(GF_Box *s)",
          "876: {",
          "879:  s->size += 4;",
          "880:  return GF_OK;",
          "881: }",
          "",
          "[Removed Lines]",
          "877:  GF_Err e = gf_isom_box_get_size(s);",
          "878:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "912: }",
          "913: GF_Err twrp_Size(GF_Box *s)",
          "914: {",
          "917:  s->size += 1;",
          "918:  return GF_OK;",
          "919: }",
          "",
          "[Removed Lines]",
          "915:  GF_Err e = gf_isom_box_get_size(s);",
          "916:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "934:  GF_Err e;",
          "935:  u32 i;",
          "936:  GF_TrackSelectionBox *ptr = (GF_TrackSelectionBox *) s;",
          "939:  ptr->switchGroup = gf_bs_read_u32(bs);",
          "940:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "937:  e = gf_isom_full_box_read(s, bs);",
          "938:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "953: GF_Box *tsel_New()",
          "954: {",
          "955:  ISOM_DECL_BOX_ALLOC(GF_TrackSelectionBox, GF_ISOM_BOX_TYPE_TSEL);",
          "957:  return (GF_Box *)tmp;",
          "958: }",
          "",
          "[Removed Lines]",
          "956:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "980: GF_Err tsel_Size(GF_Box *s)",
          "981: {",
          "983:  GF_TrackSelectionBox *ptr = (GF_TrackSelectionBox *) s;",
          "986:  ptr->size += 4 + (4*ptr->attributeListCount);",
          "987:  return GF_OK;",
          "988: }",
          "",
          "[Removed Lines]",
          "982:  GF_Err e;",
          "984:  e = gf_isom_full_box_get_size(s);",
          "985:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "993: GF_Box *dimC_New()",
          "994: {",
          "995:  ISOM_DECL_BOX_ALLOC(GF_DIMSSceneConfigBox, GF_ISOM_BOX_TYPE_DIMC);",
          "997:  return (GF_Box *)tmp;",
          "998: }",
          "999: void dimC_del(GF_Box *s)",
          "",
          "[Removed Lines]",
          "996:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1009:  char str[1024];",
          "1010:  u32 i;",
          "1011:  GF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;",
          "1015:  p->profile = gf_bs_read_u8(bs);",
          "1016:  p->level = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "1012:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "1013:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1064: GF_Err dimC_Size(GF_Box *s)",
          "1065: {",
          "1066:  GF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;",
          "1069:  s->size += 3 + 1 + strlen(p->textEncoding) + 1 + strlen(p->contentEncoding);",
          "1070:  return GF_OK;",
          "1071: }",
          "",
          "[Removed Lines]",
          "1067:  GF_Err e = gf_isom_full_box_get_size(s);",
          "1068:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1118: }",
          "1119: GF_Err diST_Size(GF_Box *s)",
          "1120: {",
          "1122:  GF_DIMSScriptTypesBox *p = (GF_DIMSScriptTypesBox *)s;",
          "1124:  s->size += p->content_script_types ? (strlen(p->content_script_types)+1) : 1;",
          "1125:  return GF_OK;",
          "1126: }",
          "",
          "[Removed Lines]",
          "1121:  GF_Err e = gf_isom_box_get_size(s);",
          "1123:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1193: GF_Err dims_Size(GF_Box *s)",
          "1194: {",
          "1196:  GF_DIMSSampleEntryBox *p = (GF_DIMSSampleEntryBox *)s;",
          "1198:  s->size += 8;",
          "1200:  if (p->config) {",
          "",
          "[Removed Lines]",
          "1195:  GF_Err e = gf_isom_box_get_size(s);",
          "1197:  if (e) return e;",
          "",
          "[Added Lines]",
          "1161:  GF_Err e;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  int i;",
          "79:  u32 tmp_strsize;",
          "80:  char *tmp_str;",
          "85:  ptr->bootstrapinfo_version = gf_bs_read_u32(bs);",
          "86:  ptr->profile = gf_bs_read_int(bs, 2);",
          "",
          "[Removed Lines]",
          "82:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "83:  if (e) return e;",
          "",
          "[Added Lines]",
          "81:  GF_Err e;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:  int i;",
          "260:  GF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;",
          "265:  s->size += 25",
          "266:             + (ptr->movie_identifier ? (strlen(ptr->movie_identifier) + 1) : 1)",
          "267:             + 1;",
          "",
          "[Removed Lines]",
          "262:  e = gf_isom_full_box_get_size(s);",
          "263:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:  unsigned int i;",
          "324:  GF_AdobeFragRandomAccessBox *ptr = (GF_AdobeFragRandomAccessBox *)s;",
          "329:  ptr->long_ids = gf_bs_read_int(bs, 1);",
          "330:  ptr->long_offsets = gf_bs_read_int(bs, 1);",
          "331:  ptr->global_entries = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "326:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "327:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:  GF_Err e;",
          "441:  GF_AdobeFragRandomAccessBox *ptr = (GF_AdobeFragRandomAccessBox *)s;",
          "446:  s->size += 9",
          "447:             + ptr->entry_count * (ptr->long_offsets ? 16 : 12)",
          "448:             + (ptr->global_entries ? 4 + ptr->global_entry_count * (4 + (ptr->long_offsets ? 16 : 8) + (ptr->long_ids ? 8 : 4)) : 0);",
          "",
          "[Removed Lines]",
          "443:  e = gf_isom_full_box_get_size(s);",
          "444:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "477:  unsigned int i;",
          "478:  GF_AdobeSegmentRunTableBox *ptr = (GF_AdobeSegmentRunTableBox *)s;",
          "483:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "484:  for (i=0; i<ptr->quality_entry_count; i++) {",
          "485:   int j=0;",
          "",
          "[Removed Lines]",
          "480:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "481:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "549:  GF_Err e;",
          "550:  GF_AdobeSegmentRunTableBox *ptr = (GF_AdobeSegmentRunTableBox *)s;",
          "555:  s->size += 5;",
          "557:  for (i=0; i<ptr->quality_entry_count; i++)",
          "",
          "[Removed Lines]",
          "552:  e = gf_isom_full_box_get_size(s);",
          "553:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "589:  unsigned int i;",
          "590:  GF_AdobeFragmentRunTableBox *ptr = (GF_AdobeFragmentRunTableBox *)s;",
          "595:  ptr->timescale = gf_bs_read_u32(bs);",
          "597:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "592:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "593:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "670:  GF_Err e;",
          "671:  GF_AdobeFragmentRunTableBox *ptr = (GF_AdobeFragmentRunTableBox *)s;",
          "676:  s->size += 5;",
          "678:  for (i=0; i<ptr->quality_entry_count; i++)",
          "",
          "[Removed Lines]",
          "673:  e = gf_isom_full_box_get_size(s);",
          "674:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_apple.c||src/isomedia/box_code_apple.c": [
          "File: src/isomedia/box_code_apple.c -> src/isomedia/box_code_apple.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: GF_Err ilst_Size(GF_Box *s)",
          "81: {",
          "88:  return GF_OK;",
          "89: }",
          "",
          "[Removed Lines]",
          "82:  GF_Err e;",
          "85:  e = gf_isom_box_get_size(s);",
          "86:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:  GF_Err e;",
          "170:  GF_ListItemBox *ptr = (GF_ListItemBox *)s;",
          "176:  if (ptr->data && ptr->data->type) {",
          "177:   e = gf_isom_box_size((GF_Box *)ptr->data);",
          "",
          "[Removed Lines]",
          "172:  e = gf_isom_box_get_size(s);",
          "173:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:  GF_Err e;",
          "203:  GF_DataBox *ptr = (GF_DataBox *)s;",
          "207:  ptr->reserved = gf_bs_read_int(bs, 32);",
          "208:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "205:  e = gf_isom_full_box_read(s, bs);",
          "206:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222: {",
          "223:  ISOM_DECL_BOX_ALLOC(GF_DataBox, GF_ISOM_BOX_TYPE_DATA);",
          "227:  return (GF_Box *)tmp;",
          "228: }",
          "",
          "[Removed Lines]",
          "225:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246: GF_Err databox_Size(GF_Box *s)",
          "247: {",
          "249:  GF_DataBox *ptr = (GF_DataBox *)s;",
          "252:  ptr->size += 4;",
          "253:  if(ptr->data != NULL && ptr->dataSize > 0) {",
          "254:   ptr->size += ptr->dataSize;",
          "",
          "[Removed Lines]",
          "248:  GF_Err e;",
          "250:  e = gf_isom_full_box_get_size(s);",
          "251:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  GF_Err e;",
          "44:  u32 entries;",
          "45:  GF_ChunkLargeOffsetBox *ptr = (GF_ChunkLargeOffsetBox *) s;",
          "48:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "50:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "[Removed Lines]",
          "46:  e = gf_isom_full_box_read(s, bs);",
          "47:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: GF_Box *co64_New()",
          "67: {",
          "68:  ISOM_DECL_BOX_ALLOC(GF_ChunkLargeOffsetBox, GF_ISOM_BOX_TYPE_CO64);",
          "70:  return (GF_Box *)tmp;",
          "71: }",
          "",
          "[Removed Lines]",
          "69:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91: GF_Err co64_Size(GF_Box *s)",
          "92: {",
          "94:  GF_ChunkLargeOffsetBox *ptr = (GF_ChunkLargeOffsetBox *) s;",
          "97:  ptr->size += 4 + (8 * ptr->nb_entries);",
          "98:  return GF_OK;",
          "99: }",
          "",
          "[Removed Lines]",
          "93:  GF_Err e;",
          "95:  e = gf_isom_full_box_get_size(s);",
          "96:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114: {",
          "115:  ISOM_DECL_BOX_ALLOC(GF_ChapterListBox, GF_ISOM_BOX_TYPE_CHPL);",
          "116:  tmp->list = gf_list_new();",
          "118:  tmp->version = 1;",
          "119:  return (GF_Box *)tmp;",
          "120: }",
          "",
          "[Removed Lines]",
          "117:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:  u32 nb_chaps, len, i, count;",
          "142:  GF_ChapterListBox *ptr = (GF_ChapterListBox *)s;",
          "148:  gf_bs_read_u32(bs);",
          "149:  nb_chaps = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "144:  e = gf_isom_full_box_read(s, bs);",
          "145:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "209: GF_Err chpl_Size(GF_Box *s)",
          "210: {",
          "212:  u32 count, i;",
          "213:  GF_ChapterListBox *ptr = (GF_ChapterListBox *)s;",
          "216:  ptr->size += 5;",
          "218:  count = gf_list_count(ptr->list);",
          "",
          "[Removed Lines]",
          "211:  GF_Err e;",
          "214:  e = gf_isom_full_box_get_size(s);",
          "215:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:  GF_Err e;",
          "233:  GF_CopyrightBox *ptr = (GF_CopyrightBox *)s;",
          "237:  gf_bs_read_int(bs, 1);",
          "239:  ptr->packedLanguageCode[0] = gf_bs_read_int(bs, 5);",
          "",
          "[Removed Lines]",
          "235:  e = gf_isom_full_box_read(s, bs);",
          "236:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263: GF_Box *cprt_New()",
          "264: {",
          "265:  ISOM_DECL_BOX_ALLOC(GF_CopyrightBox, GF_ISOM_BOX_TYPE_CPRT);",
          "268:  tmp->packedLanguageCode[0] = 'u';",
          "269:  tmp->packedLanguageCode[1] = 'n';",
          "270:  tmp->packedLanguageCode[2] = 'd';",
          "",
          "[Removed Lines]",
          "267:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "298: GF_Err cprt_Size(GF_Box *s)",
          "299: {",
          "301:  GF_CopyrightBox *ptr = (GF_CopyrightBox *)s;",
          "304:  ptr->size += 2;",
          "305:  if (ptr->notice)",
          "306:   ptr->size += strlen(ptr->notice) + 1;",
          "",
          "[Removed Lines]",
          "300:  GF_Err e;",
          "302:  e = gf_isom_full_box_get_size(s);",
          "303:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "323:  GF_Err e;",
          "324:  GF_KindBox *ptr = (GF_KindBox *)s;",
          "329:  if (ptr->size) {",
          "330:   u32 bytesToRead = (u32) ptr->size;",
          "331:   char *data;",
          "",
          "[Removed Lines]",
          "326:  e = gf_isom_full_box_read(s, bs);",
          "327:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "357: GF_Box *kind_New()",
          "358: {",
          "359:  ISOM_DECL_BOX_ALLOC(GF_KindBox, GF_ISOM_BOX_TYPE_KIND);",
          "361:  return (GF_Box *)tmp;",
          "362: }",
          "",
          "[Removed Lines]",
          "360:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "380: GF_Err kind_Size(GF_Box *s)",
          "381: {",
          "383:  GF_KindBox *ptr = (GF_KindBox *)s;",
          "386:  ptr->size += strlen(ptr->schemeURI) + 1;",
          "387:  if (ptr->value) {",
          "388:   ptr->size += strlen(ptr->value) + 1;",
          "",
          "[Removed Lines]",
          "382:  GF_Err e;",
          "384:  e = gf_isom_full_box_get_size(s);",
          "385:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "408:  u32 sampleCount;",
          "409:  GF_CompositionOffsetBox *ptr = (GF_CompositionOffsetBox *)s;",
          "413:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "414:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "411:  e = gf_isom_full_box_read(s, bs);",
          "412:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "439: GF_Box *ctts_New()",
          "440: {",
          "441:  ISOM_DECL_BOX_ALLOC(GF_CompositionOffsetBox, GF_ISOM_BOX_TYPE_CTTS);",
          "444:  return (GF_Box *) tmp;",
          "445: }",
          "",
          "[Removed Lines]",
          "443:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "471: GF_Err ctts_Size(GF_Box *s)",
          "472: {",
          "474:  GF_CompositionOffsetBox *ptr = (GF_CompositionOffsetBox *) s;",
          "478:  ptr->size += 4 + (8 * ptr->nb_entries);",
          "479:  return GF_OK;",
          "480: }",
          "",
          "[Removed Lines]",
          "473:  GF_Err e;",
          "476:  e = gf_isom_full_box_get_size(s);",
          "477:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "494:  GF_Err e;",
          "495:  GF_CompositionToDecodeBox *ptr = (GF_CompositionToDecodeBox *)s;",
          "499:  ptr->compositionToDTSShift = gf_bs_read_int(bs, 32);",
          "500:  ptr->leastDecodeToDisplayDelta = gf_bs_read_int(bs, 32);",
          "501:  ptr->greatestDecodeToDisplayDelta = gf_bs_read_int(bs, 32);",
          "",
          "[Removed Lines]",
          "497:  e = gf_isom_full_box_read(s, bs);",
          "498:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "507: GF_Box *cslg_New()",
          "508: {",
          "509:  ISOM_DECL_BOX_ALLOC(GF_CompositionToDecodeBox, GF_ISOM_BOX_TYPE_CSLG);",
          "512:  return (GF_Box *) tmp;",
          "513: }",
          "",
          "[Removed Lines]",
          "511:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "532: GF_Err cslg_Size(GF_Box *s)",
          "533: {",
          "535:  GF_CompositionToDecodeBox *ptr = (GF_CompositionToDecodeBox *)s;",
          "539:  ptr->size += 20;",
          "540:  return GF_OK;",
          "541: }",
          "",
          "[Removed Lines]",
          "534:  GF_Err e;",
          "537:  e = gf_isom_full_box_get_size(s);",
          "538:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "553:  GF_Err e;",
          "554:  GF_CodingConstraintsBox *ptr = (GF_CodingConstraintsBox *)s;",
          "558:  ISOM_DECREASE_SIZE(ptr, 4);",
          "559:  ptr->all_ref_pics_intra = gf_bs_read_int(bs, 1);",
          "560:  ptr->intra_pred_used = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "556:  e = gf_isom_full_box_read(s, bs);",
          "557:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "566: GF_Box *ccst_New()",
          "567: {",
          "568:  ISOM_DECL_BOX_ALLOC(GF_CodingConstraintsBox, GF_ISOM_BOX_TYPE_CCST);",
          "571:  return (GF_Box *) tmp;",
          "572: }",
          "",
          "[Removed Lines]",
          "570:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "590: GF_Err ccst_Size(GF_Box *s)",
          "591: {",
          "593:  GF_CodingConstraintsBox *ptr = (GF_CodingConstraintsBox *)s;",
          "596:  ptr->size += 4;",
          "597:  return GF_OK;",
          "598: }",
          "",
          "[Removed Lines]",
          "592:  GF_Err e;",
          "594:  e = gf_isom_full_box_get_size(s);",
          "595:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "614:  GF_Err e;",
          "615:  GF_DataEntryURLBox *ptr = (GF_DataEntryURLBox *)s;",
          "619:  if (ptr->size) {",
          "620:   ptr->location = (char*)gf_malloc((u32) ptr->size);",
          "621:   if (! ptr->location) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "617:  e = gf_isom_full_box_read(s, bs);",
          "618:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "627: GF_Box *url_New()",
          "628: {",
          "629:  ISOM_DECL_BOX_ALLOC(GF_DataEntryURLBox, GF_ISOM_BOX_TYPE_URL);",
          "631:  return (GF_Box *)tmp;",
          "632: }",
          "",
          "[Removed Lines]",
          "630:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "652: GF_Err url_Size(GF_Box *s)",
          "653: {",
          "655:  GF_DataEntryURLBox *ptr = (GF_DataEntryURLBox *)s;",
          "659:  if ( !(ptr->flags & 1)) {",
          "660:   if (ptr->location) ptr->size += 1 + strlen(ptr->location);",
          "661:  }",
          "",
          "[Removed Lines]",
          "654:  GF_Err e;",
          "657:  e = gf_isom_full_box_get_size(s);",
          "658:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "680:  u32 i, to_read;",
          "681:  char *tmpName;",
          "682:  GF_DataEntryURNBox *ptr = (GF_DataEntryURNBox *)s;",
          "685:  if (! ptr->size ) return GF_OK;",
          "",
          "[Removed Lines]",
          "683:  e = gf_isom_full_box_read(s, bs);",
          "684:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "729: GF_Box *urn_New()",
          "730: {",
          "731:  ISOM_DECL_BOX_ALLOC(GF_DataEntryURNBox, GF_ISOM_BOX_TYPE_URN);",
          "733:  return (GF_Box *)tmp;",
          "734: }",
          "",
          "[Removed Lines]",
          "732:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "759: GF_Err urn_Size(GF_Box *s)",
          "760: {",
          "762:  GF_DataEntryURNBox *ptr = (GF_DataEntryURNBox *)s;",
          "766:  if ( !(ptr->flags & 1)) {",
          "767:   if (ptr->nameURN) ptr->size += 1 + strlen(ptr->nameURN);",
          "768:   if (ptr->location) ptr->size += 1 + strlen(ptr->location);",
          "",
          "[Removed Lines]",
          "761:  GF_Err e;",
          "764:  e = gf_isom_full_box_get_size(s);",
          "765:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "862: {",
          "863:  GF_Err e;",
          "864:  GF_UnknownBox *ptr = (GF_UnknownBox *)s;",
          "868:  if (ptr->dataSize && ptr->data) {",
          "869:   ptr->size += ptr->dataSize;",
          "",
          "[Removed Lines]",
          "865:  e = gf_isom_box_get_size(s);",
          "866:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "901: GF_Err def_cont_box_Size(GF_Box *s)",
          "902: {",
          "904: }",
          "",
          "[Removed Lines]",
          "903:  return gf_isom_box_get_size(s);",
          "",
          "[Added Lines]",
          "845:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "955: GF_Err uuid_Size(GF_Box *s)",
          "956: {",
          "958:  GF_UnknownUUIDBox*ptr = (GF_UnknownUUIDBox*)s;",
          "961:  ptr->size += ptr->dataSize;",
          "962:  return GF_OK;",
          "963: }",
          "",
          "[Removed Lines]",
          "957:  GF_Err e;",
          "959:  e = gf_isom_box_get_size(s);",
          "960:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1028: {",
          "1029:  GF_Err e;",
          "1030:  GF_DataInformationBox *ptr = (GF_DataInformationBox *)s;",
          "1033:  if (ptr->dref) {",
          "1034:   e = gf_isom_box_size((GF_Box *) ptr->dref);",
          "1035:   if (e) return e;",
          "",
          "[Removed Lines]",
          "1031:  e = gf_isom_box_get_size(s);",
          "1032:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1069:  GF_DataReferenceBox *ptr = (GF_DataReferenceBox *)s;",
          "1071:  if (ptr == NULL) return GF_BAD_PARAM;",
          "1075:  gf_bs_read_u32(bs);",
          "1076:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "1072:  e = gf_isom_full_box_read(s, bs);",
          "1073:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1081: GF_Box *dref_New()",
          "1082: {",
          "1083:  ISOM_DECL_BOX_ALLOC(GF_DataReferenceBox, GF_ISOM_BOX_TYPE_DREF);",
          "1085:  return (GF_Box *)tmp;",
          "1086: }",
          "",
          "[Removed Lines]",
          "1084:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1105: GF_Err dref_Size(GF_Box *s)",
          "1106: {",
          "1108:  GF_DataReferenceBox *ptr = (GF_DataReferenceBox *)s;",
          "1109:  if (!s) return GF_BAD_PARAM;",
          "1113:  ptr->size += 4;",
          "1114:  return GF_OK;",
          "1115: }",
          "",
          "[Removed Lines]",
          "1107:  GF_Err e;",
          "1111:  e = gf_isom_full_box_get_size(s);",
          "1112:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1175:  if (!ptr->editList || ! gf_list_count(ptr->editList->entryList)) {",
          "1176:   ptr->size = 0;",
          "1177:  } else {",
          "1180:   e = gf_isom_box_size((GF_Box *)ptr->editList);",
          "1181:   if (e) return e;",
          "1182:   ptr->size += ptr->editList->size;",
          "",
          "[Removed Lines]",
          "1178:   e = gf_isom_box_get_size(s);",
          "1179:   if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1216:  GF_EdtsEntry *p;",
          "1217:  GF_EditListBox *ptr = (GF_EditListBox *)s;",
          "1221:  nb_entries = gf_bs_read_u32(bs);",
          "1222:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "1219:  e = gf_isom_full_box_read(s, bs);",
          "1220:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1255: GF_Box *elst_New()",
          "1256: {",
          "1257:  ISOM_DECL_BOX_ALLOC(GF_EditListBox, GF_ISOM_BOX_TYPE_ELST);",
          "1260:  tmp->entryList = gf_list_new();",
          "1261:  if (!tmp->entryList) {",
          "1262:   gf_free(tmp);",
          "",
          "[Removed Lines]",
          "1259:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1298: GF_Err elst_Size(GF_Box *s)",
          "1299: {",
          "1301:  u32 durtimebytes;",
          "1302:  u32 i, nb_entries;",
          "1303:  GF_EditListBox *ptr = (GF_EditListBox *)s;",
          "1308:  ptr->size += 4;",
          "1309:  nb_entries = gf_list_count(ptr->entryList);",
          "",
          "[Removed Lines]",
          "1300:  GF_Err e;",
          "1305:  e = gf_isom_full_box_get_size(s);",
          "1306:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1340:  u32 SLIsPredefined(GF_SLConfig *sl);",
          "1341:  GF_ESDBox *ptr = (GF_ESDBox *)s;",
          "1345:  descSize = (u32) (ptr->size);",
          "1347:  if (descSize) {",
          "",
          "[Removed Lines]",
          "1343:  e = gf_isom_full_box_read(s, bs);",
          "1344:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1382: GF_Box *esds_New()",
          "1383: {",
          "1384:  ISOM_DECL_BOX_ALLOC(GF_ESDBox, GF_ISOM_BOX_TYPE_ESDS);",
          "1387:  return (GF_Box *)tmp;",
          "1388: }",
          "",
          "[Removed Lines]",
          "1386:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1410: GF_Err esds_Size(GF_Box *s)",
          "1411: {",
          "1413:  u32 descSize = 0;",
          "1414:  GF_ESDBox *ptr = (GF_ESDBox *)s;",
          "1417:  descSize = gf_odf_desc_size((GF_Descriptor *)ptr->desc);",
          "1418:  ptr->size += descSize;",
          "1419:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1412:  GF_Err e;",
          "1415:  e = gf_isom_full_box_get_size(s);",
          "1416:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1484: GF_Err free_Size(GF_Box *s)",
          "1485: {",
          "1487:  GF_FreeSpaceBox *ptr = (GF_FreeSpaceBox *)s;",
          "1490:  ptr->size += ptr->dataSize;",
          "1491:  return GF_OK;",
          "1492: }",
          "",
          "[Removed Lines]",
          "1486:  GF_Err e;",
          "1488:  e = gf_isom_box_get_size(s);",
          "1489:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1553: GF_Err ftyp_Size(GF_Box *s)",
          "1554: {",
          "1556:  GF_FileTypeBox *ptr = (GF_FileTypeBox *)s;",
          "1560:  ptr->size += 8 + ptr->altCount * 4;",
          "1561:  return GF_OK;",
          "1562: }",
          "",
          "[Removed Lines]",
          "1555:  GF_Err e;",
          "1558:  e = gf_isom_box_get_size(s);",
          "1559:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1608: GF_Err gnrm_Size(GF_Box *s)",
          "1609: {",
          "1611:  GF_GenericSampleEntryBox *ptr = (GF_GenericSampleEntryBox *)s;",
          "1614:  s->type = GF_ISOM_BOX_TYPE_GNRM;",
          "1616:  ptr->size += 8+ptr->data_size;",
          "1617:  return GF_OK;",
          "1618: }",
          "",
          "[Removed Lines]",
          "1610:  GF_Err e;",
          "1612:  s->type = ptr->EntryType;",
          "1613:  e = gf_isom_box_get_size(s);",
          "1615:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1662: GF_Err gnrv_Size(GF_Box *s)",
          "1663: {",
          "1665:  GF_GenericVisualSampleEntryBox *ptr = (GF_GenericVisualSampleEntryBox *)s;",
          "1668:  s->type = GF_ISOM_BOX_TYPE_GNRV;",
          "1670:  gf_isom_video_sample_entry_size((GF_VisualSampleEntryBox *)s);",
          "1671:  ptr->size += ptr->data_size;",
          "1672:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1664:  GF_Err e;",
          "1666:  s->type = ptr->EntryType;",
          "1667:  e = gf_isom_box_get_size(s);",
          "1669:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1720: {",
          "1721:  GF_Err e;",
          "1722:  GF_GenericAudioSampleEntryBox *ptr = (GF_GenericAudioSampleEntryBox *)s;",
          "1725:  s->type = GF_ISOM_BOX_TYPE_GNRA;",
          "1727:  gf_isom_audio_sample_entry_size((GF_AudioSampleEntryBox *)s);",
          "1728:  ptr->size += ptr->data_size;",
          "1729:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1723:  s->type = ptr->EntryType;",
          "1724:  e = gf_isom_box_get_size(s);",
          "1726:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1745:  GF_Err e;",
          "1746:  GF_HandlerBox *ptr = (GF_HandlerBox *)s;",
          "1750:  ptr->reserved1 = gf_bs_read_u32(bs);",
          "1751:  ptr->handlerType = gf_bs_read_u32(bs);",
          "1752:  gf_bs_read_data(bs, (char*)ptr->reserved2, 12);",
          "",
          "[Removed Lines]",
          "1748:  e = gf_isom_full_box_read(s, bs);",
          "1749:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1780: GF_Box *hdlr_New()",
          "1781: {",
          "1782:  ISOM_DECL_BOX_ALLOC(GF_HandlerBox, GF_ISOM_BOX_TYPE_HDLR);",
          "1784:  return (GF_Box *)tmp;",
          "1785: }",
          "",
          "[Removed Lines]",
          "1783:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1815: GF_Err hdlr_Size(GF_Box *s)",
          "1816: {",
          "1818:  GF_HandlerBox *ptr = (GF_HandlerBox *)s;",
          "1821:  ptr->size += 20 + 1; //null term or counted string",
          "1822:  if (ptr->nameUTF8) {",
          "1823:   ptr->size += strlen(ptr->nameUTF8);",
          "",
          "[Removed Lines]",
          "1817:  GF_Err e;",
          "1819:  e = gf_isom_full_box_get_size(s);",
          "1820:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1877: GF_Err hinf_Size(GF_Box *s)",
          "1878: {",
          "1881: }",
          "",
          "[Removed Lines]",
          "1880:  return gf_isom_box_get_size(s);",
          "",
          "[Added Lines]",
          "1771:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1894:  GF_Err e;",
          "1895:  GF_HintMediaHeaderBox *ptr = (GF_HintMediaHeaderBox *)s;",
          "1899:  ptr->maxPDUSize = gf_bs_read_u16(bs);",
          "1900:  ptr->avgPDUSize = gf_bs_read_u16(bs);",
          "1901:  ptr->maxBitrate = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "1897:  e = gf_isom_full_box_read(s, bs);",
          "1898:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1907: GF_Box *hmhd_New()",
          "1908: {",
          "1909:  ISOM_DECL_BOX_ALLOC(GF_HintMediaHeaderBox, GF_ISOM_BOX_TYPE_HMHD);",
          "1912:  return (GF_Box *)tmp;",
          "1913: }",
          "",
          "[Removed Lines]",
          "1911:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1933: GF_Err hmhd_Size(GF_Box *s)",
          "1934: {",
          "1936:  GF_HintMediaHeaderBox *ptr = (GF_HintMediaHeaderBox *)s;",
          "1939:  ptr->size += 16;",
          "1940:  return GF_OK;",
          "1941: }",
          "",
          "[Removed Lines]",
          "1935:  GF_Err e;",
          "1937:  e = gf_isom_full_box_get_size(s);",
          "1938:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1986: GF_Err hnti_Size(GF_Box *s)",
          "1987: {",
          "1989: }",
          "",
          "[Removed Lines]",
          "1988:  return gf_isom_box_get_size(s);",
          "",
          "[Added Lines]",
          "1872:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2034: }",
          "2035: GF_Err sdp_Size(GF_Box *s)",
          "2036: {",
          "2038:  GF_SDPBox *ptr = (GF_SDPBox *)s;",
          "2042:  ptr->size += strlen(ptr->sdpText);",
          "2043:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2037:  GF_Err e;",
          "2039:  e = gf_isom_box_get_size(s);",
          "2040:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2097: GF_Err rtp_hnti_Size(GF_Box *s)",
          "2098: {",
          "2100:  GF_RTPBox *ptr = (GF_RTPBox *)s;",
          "2103:  ptr->size += 4 + strlen(ptr->sdpText);",
          "2104:  return GF_OK;",
          "2105: }",
          "",
          "[Removed Lines]",
          "2099:  GF_Err e;",
          "2101:  e = gf_isom_box_get_size(s);",
          "2102:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2141: }",
          "2142: GF_Err trpy_Size(GF_Box *s)",
          "2143: {",
          "2147:  s->size += 8;",
          "2148:  return GF_OK;",
          "2149: }",
          "",
          "[Removed Lines]",
          "2144:  GF_Err e;",
          "2145:  e = gf_isom_box_get_size(s);",
          "2146:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2183: }",
          "2184: GF_Err totl_Size(GF_Box *s)",
          "2185: {",
          "2189:  s->size += 4;",
          "2190:  return GF_OK;",
          "2191: }",
          "",
          "[Removed Lines]",
          "2186:  GF_Err e;",
          "2187:  e = gf_isom_box_get_size(s);",
          "2188:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2225: }",
          "2226: GF_Err nump_Size(GF_Box *s)",
          "2227: {",
          "2231:  s->size += 8;",
          "2232:  return GF_OK;",
          "2233: }",
          "",
          "[Removed Lines]",
          "2228:  GF_Err e;",
          "2229:  e = gf_isom_box_get_size(s);",
          "2230:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2266: }",
          "2267: GF_Err npck_Size(GF_Box *s)",
          "2268: {",
          "2272:  s->size += 4;",
          "2273:  return GF_OK;",
          "2274: }",
          "",
          "[Removed Lines]",
          "2269:  GF_Err e;",
          "2270:  e = gf_isom_box_get_size(s);",
          "2271:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2308: }",
          "2309: GF_Err tpyl_Size(GF_Box *s)",
          "2310: {",
          "2314:  s->size += 8;",
          "2315:  return GF_OK;",
          "2316: }",
          "",
          "[Removed Lines]",
          "2311:  GF_Err e;",
          "2312:  e = gf_isom_box_get_size(s);",
          "2313:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2348: }",
          "2349: GF_Err tpay_Size(GF_Box *s)",
          "2350: {",
          "2354:  s->size += 4;",
          "2355:  return GF_OK;",
          "2356: }",
          "",
          "[Removed Lines]",
          "2351:  GF_Err e;",
          "2352:  e = gf_isom_box_get_size(s);",
          "2353:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2392: }",
          "2393: GF_Err maxr_Size(GF_Box *s)",
          "2394: {",
          "2398:  s->size += 8;",
          "2399:  return GF_OK;",
          "2400: }",
          "",
          "[Removed Lines]",
          "2395:  GF_Err e;",
          "2396:  e = gf_isom_box_get_size(s);",
          "2397:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2433: }",
          "2434: GF_Err dmed_Size(GF_Box *s)",
          "2435: {",
          "2439:  s->size += 8;",
          "2440:  return GF_OK;",
          "2441: }",
          "",
          "[Removed Lines]",
          "2436:  GF_Err e;",
          "2437:  e = gf_isom_box_get_size(s);",
          "2438:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2473: }",
          "2474: GF_Err dimm_Size(GF_Box *s)",
          "2475: {",
          "2479:  s->size += 8;",
          "2480:  return GF_OK;",
          "2481: }",
          "",
          "[Removed Lines]",
          "2476:  GF_Err e;",
          "2477:  e = gf_isom_box_get_size(s);",
          "2478:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2513: }",
          "2514: GF_Err drep_Size(GF_Box *s)",
          "2515: {",
          "2519:  s->size += 8;",
          "2520:  return GF_OK;",
          "2521: }",
          "",
          "[Removed Lines]",
          "2516:  GF_Err e;",
          "2517:  e = gf_isom_box_get_size(s);",
          "2518:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2555: }",
          "2556: GF_Err tmin_Size(GF_Box *s)",
          "2557: {",
          "2561:  s->size += 4;",
          "2562:  return GF_OK;",
          "2563: }",
          "",
          "[Removed Lines]",
          "2558:  GF_Err e;",
          "2559:  e = gf_isom_box_get_size(s);",
          "2560:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2596: }",
          "2597: GF_Err tmax_Size(GF_Box *s)",
          "2598: {",
          "2602:  s->size += 4;",
          "2603:  return GF_OK;",
          "2604: }",
          "",
          "[Removed Lines]",
          "2599:  GF_Err e;",
          "2600:  e = gf_isom_box_get_size(s);",
          "2601:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2637: }",
          "2638: GF_Err pmax_Size(GF_Box *s)",
          "2639: {",
          "2643:  s->size += 4;",
          "2644:  return GF_OK;",
          "2645: }",
          "",
          "[Removed Lines]",
          "2640:  GF_Err e;",
          "2641:  e = gf_isom_box_get_size(s);",
          "2642:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2678: }",
          "2679: GF_Err dmax_Size(GF_Box *s)",
          "2680: {",
          "2684:  s->size += 4;",
          "2685:  return GF_OK;",
          "2686: }",
          "",
          "[Removed Lines]",
          "2681:  GF_Err e;",
          "2682:  e = gf_isom_box_get_size(s);",
          "2683:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2734: }",
          "2735: GF_Err payt_Size(GF_Box *s)",
          "2736: {",
          "2738:  GF_PAYTBox *ptr = (GF_PAYTBox *)s;",
          "2741:  s->size += 4;",
          "2742:  if (ptr->payloadString) ptr->size += strlen(ptr->payloadString) + 1;",
          "2743:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2737:  GF_Err e;",
          "2739:  e = gf_isom_box_get_size(s);",
          "2740:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2788: }",
          "2789: GF_Err name_Size(GF_Box *s)",
          "2790: {",
          "2792:  GF_NameBox *ptr = (GF_NameBox *)s;",
          "2795:  if (ptr->string) ptr->size += strlen(ptr->string) + 1;",
          "2796:  return GF_OK;",
          "2797: }",
          "",
          "[Removed Lines]",
          "2791:  GF_Err e;",
          "2793:  e = gf_isom_box_get_size(s);",
          "2794:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2828: }",
          "2829: GF_Err tssy_Size(GF_Box *s)",
          "2830: {",
          "2834:  s->size += 1;",
          "2835:  return GF_OK;",
          "2836: }",
          "",
          "[Removed Lines]",
          "2831:  GF_Err e;",
          "2832:  e = gf_isom_box_get_size(s);",
          "2833:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2864: GF_Err srpp_Read(GF_Box *s, GF_BitStream *bs)",
          "2865: {",
          "2866:  GF_SRTPProcessBox *ptr = (GF_SRTPProcessBox *)s;",
          "2869:  ISOM_DECREASE_SIZE(s, 16)",
          "2870:  ptr->encryption_algorithm_rtp = gf_bs_read_u32(bs);",
          "2871:  ptr->encryption_algorithm_rtcp = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "2867:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "2868:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2905: {",
          "2906:  GF_Err e;",
          "2907:  GF_SRTPProcessBox *ptr = (GF_SRTPProcessBox *)s;",
          "2910:  s->size += 16;",
          "2911:  if (ptr->info) {",
          "2912:   e = gf_isom_box_size((GF_Box*)ptr->info);",
          "",
          "[Removed Lines]",
          "2908:  e = gf_isom_full_box_get_size(s);",
          "2909:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2951: }",
          "2952: GF_Err rssr_Size(GF_Box *s)",
          "2953: {",
          "2957:  s->size += 4;",
          "2958:  return GF_OK;",
          "2959: }",
          "",
          "[Removed Lines]",
          "2954:  GF_Err e;",
          "2955:  e = gf_isom_box_get_size(s);",
          "2956:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2978:  char *desc;",
          "2979:  GF_ObjectDescriptorBox *ptr = (GF_ObjectDescriptorBox *)s;",
          "2984:  descSize = (u32) (ptr->size);",
          "2985:  desc = (char*)gf_malloc(sizeof(char) * descSize);",
          "",
          "[Removed Lines]",
          "2981:  e = gf_isom_full_box_read(s, bs);",
          "2982:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2993: GF_Box *iods_New()",
          "2994: {",
          "2995:  ISOM_DECL_BOX_ALLOC(GF_ObjectDescriptorBox, GF_ISOM_BOX_TYPE_IODS);",
          "2997:  return (GF_Box *)tmp;",
          "2998: }",
          "",
          "[Removed Lines]",
          "2996:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3021: GF_Err iods_Size(GF_Box *s)",
          "3022: {",
          "3024:  GF_ObjectDescriptorBox *ptr = (GF_ObjectDescriptorBox *)s;",
          "3027:  ptr->size += gf_odf_desc_size(ptr->descriptor);",
          "3028:  return GF_OK;",
          "3029: }",
          "",
          "[Removed Lines]",
          "3023:  GF_Err e;",
          "3025:  e = gf_isom_full_box_get_size(s);",
          "3026:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3077: GF_Err mdat_Size(GF_Box *s)",
          "3078: {",
          "3080:  GF_MediaDataBox *ptr = (GF_MediaDataBox *)s;",
          "3084:  ptr->size += ptr->dataSize;",
          "3085:  return GF_OK;",
          "3086: }",
          "",
          "[Removed Lines]",
          "3079:  GF_Err e;",
          "3081:  e = gf_isom_box_get_size(s);",
          "3082:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3099:  GF_Err e;",
          "3100:  GF_MediaHeaderBox *ptr = (GF_MediaHeaderBox *)s;",
          "3104:  if (ptr->version == 1) {",
          "3105:   ptr->creationTime = gf_bs_read_u64(bs);",
          "3106:   ptr->modificationTime = gf_bs_read_u64(bs);",
          "",
          "[Removed Lines]",
          "3102:  e = gf_isom_full_box_read(s, bs);",
          "3103:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3143: {",
          "3144:  ISOM_DECL_BOX_ALLOC(GF_MediaHeaderBox, GF_ISOM_BOX_TYPE_MDHD);",
          "3148:  tmp->packedLanguage[0] = 'u';",
          "3149:  tmp->packedLanguage[1] = 'n';",
          "3150:  tmp->packedLanguage[2] = 'd';",
          "",
          "[Removed Lines]",
          "3146:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3183: GF_Err mdhd_Size(GF_Box *s)",
          "3184: {",
          "3186:  GF_MediaHeaderBox *ptr = (GF_MediaHeaderBox *)s;",
          "3187:  ptr->version = (ptr->duration>0xFFFFFFFF) ? 1 : 0;",
          "3190:  ptr->size += 4;",
          "3191:  ptr->size += (ptr->version == 1) ? 28 : 16;",
          "3192:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3185:  GF_Err e;",
          "3188:  e = gf_isom_full_box_get_size(s);",
          "3189:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3288: {",
          "3289:  GF_Err e;",
          "3290:  GF_MediaBox *ptr = (GF_MediaBox *)s;",
          "3294:  if (ptr->mediaHeader) {",
          "3295:   e = gf_isom_box_size((GF_Box *) ptr->mediaHeader);",
          "",
          "[Removed Lines]",
          "3291:  e = gf_isom_box_get_size(s);",
          "3292:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3368: {",
          "3369:  GF_Err e;",
          "3370:  GF_MovieFragmentRandomAccessBox *ptr = (GF_MovieFragmentRandomAccessBox *)s;",
          "3373:  if (ptr->mfro) {",
          "3374:   e = gf_isom_box_size((GF_Box *)ptr->mfro);",
          "3375:   if (e) return e;",
          "",
          "[Removed Lines]",
          "3371:  e = gf_isom_box_get_size(s);",
          "3372:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3402:  GF_RandomAccessEntry *p = 0;",
          "3403:  GF_TrackFragmentRandomAccessBox *ptr = (GF_TrackFragmentRandomAccessBox *)s;",
          "3407:  if (ptr->size<12) return GF_ISOM_INVALID_FILE;",
          "3409:  ptr->track_id = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "3405:  e = gf_isom_full_box_read(s, bs);",
          "3406:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3499: GF_Err tfra_Size(GF_Box *s)",
          "3500: {",
          "3502:  GF_TrackFragmentRandomAccessBox *ptr = (GF_TrackFragmentRandomAccessBox *)s;",
          "3505:  ptr->size += 12;",
          "3507:  ptr->size += ptr->nb_entries * ( ((ptr->version==1) ? 16 : 8 ) + ptr->traf_bits + ptr->trun_bits + ptr->sample_bits);",
          "",
          "[Removed Lines]",
          "3501:  GF_Err e;",
          "3503:  e = gf_isom_full_box_get_size(s);",
          "3504:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3530:  GF_Err e;",
          "3531:  GF_MovieFragmentRandomAccessOffsetBox *ptr = (GF_MovieFragmentRandomAccessOffsetBox *)s;",
          "3535:  ptr->container_size = gf_bs_read_u32(bs);",
          "3536:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "3533:  e = gf_isom_full_box_read(s, bs);",
          "3534:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3556: GF_Err mfro_Size(GF_Box *s)",
          "3557: {",
          "3561:  s->size += 4;",
          "3562:  return GF_OK;",
          "3563: }",
          "",
          "[Removed Lines]",
          "3558:  GF_Err e;",
          "3559:  e = gf_isom_full_box_get_size(s);",
          "3560:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3578:  GF_Err e;",
          "3579:  GF_ExtendedLanguageBox *ptr = (GF_ExtendedLanguageBox *)s;",
          "3583:  if (ptr->size) {",
          "3584:   ptr->extended_language = (char*)gf_malloc((u32) ptr->size);",
          "3585:   if (ptr->extended_language == NULL) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "3581:  e = gf_isom_full_box_read(s, bs);",
          "3582:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3619: GF_Err elng_Size(GF_Box *s)",
          "3620: {",
          "3622:  GF_ExtendedLanguageBox *ptr = (GF_ExtendedLanguageBox *)s;",
          "3625:  ptr->size += 4;",
          "3626:  if (ptr->extended_language) {",
          "3627:   ptr->size += strlen(ptr->extended_language)+1;",
          "",
          "[Removed Lines]",
          "3621:  GF_Err e;",
          "3623:  e = gf_isom_box_get_size(s);",
          "3624:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3644: {",
          "3645:  GF_Err e;",
          "3646:  GF_MovieFragmentHeaderBox *ptr = (GF_MovieFragmentHeaderBox *)s;",
          "3649:  ptr->sequence_number = gf_bs_read_u32(bs);",
          "3650:  return GF_OK;",
          "3651: }",
          "",
          "[Removed Lines]",
          "3647:  e = gf_isom_full_box_read(s, bs);",
          "3648:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3675: GF_Err mfhd_Size(GF_Box *s)",
          "3676: {",
          "3682:  return GF_OK;",
          "3683: }",
          "",
          "[Removed Lines]",
          "3677:  GF_Err e;",
          "3678:  GF_MovieFragmentHeaderBox *ptr = (GF_MovieFragmentHeaderBox *)s;",
          "3679:  e = gf_isom_full_box_get_size(s);",
          "3680:  if (e) return e;",
          "3681:  ptr->size += 4;",
          "",
          "[Added Lines]",
          "3466:  s->size += 4;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3789:  GF_Err e;",
          "3790:  GF_MediaInformationBox *ptr = (GF_MediaInformationBox *)s;",
          "3794:  if (ptr->InfoHeader) {",
          "3795:   e = gf_isom_box_size((GF_Box *) ptr->InfoHeader);",
          "3796:   if (e) return e;",
          "",
          "[Removed Lines]",
          "3792:  e = gf_isom_box_get_size(s);",
          "3793:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3877: {",
          "3878:  GF_Err e;",
          "3879:  GF_MovieFragmentBox *ptr = (GF_MovieFragmentBox *)s;",
          "3884:  if (ptr->mfhd) {",
          "3885:   e = gf_isom_box_size((GF_Box *)ptr->mfhd);",
          "",
          "[Removed Lines]",
          "3880:  e = gf_isom_box_get_size(s);",
          "3881:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4034: {",
          "4035:  GF_Err e;",
          "4036:  GF_MovieBox *ptr = (GF_MovieBox *)s;",
          "4040:  if (ptr->mvhd) {",
          "4041:   e = gf_isom_box_size((GF_Box *) ptr->mvhd);",
          "",
          "[Removed Lines]",
          "4037:  e = gf_isom_box_get_size(s);",
          "4038:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4220: {",
          "4221:  GF_Err e;",
          "4222:  GF_MPEGAudioSampleEntryBox *ptr = (GF_MPEGAudioSampleEntryBox *)s;",
          "4226:  gf_isom_audio_sample_entry_size((GF_AudioSampleEntryBox*)s);",
          "4227:  if (ptr->esd) {",
          "",
          "[Removed Lines]",
          "4223:  e = gf_isom_box_get_size(s);",
          "4224:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "4318:  GF_Err e;",
          "4319:  GF_MPEGSampleEntryBox *ptr = (GF_MPEGSampleEntryBox *)s;",
          "4323:  ptr->size += 8;",
          "4324:  e = gf_isom_box_size((GF_Box *)ptr->esd);",
          "4325:  if (e) return e;",
          "",
          "[Removed Lines]",
          "4321:  e = gf_isom_box_get_size(s);",
          "4322:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "4532: {",
          "4533:  GF_Err e;",
          "4534:  GF_MPEGVisualSampleEntryBox *ptr = (GF_MPEGVisualSampleEntryBox *)s;",
          "4538:  gf_isom_video_sample_entry_size((GF_VisualSampleEntryBox *)s);",
          "",
          "[Removed Lines]",
          "4535:  e = gf_isom_box_get_size(s);",
          "4536:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4699: {",
          "4700:  GF_Err e;",
          "4701:  GF_MovieExtendsBox *ptr = (GF_MovieExtendsBox *)s;",
          "4704:  if (ptr->mehd) {",
          "4705:   e = gf_isom_box_size((GF_Box *)ptr->mehd);",
          "4706:   if (e) return e;",
          "",
          "[Removed Lines]",
          "4702:  e = gf_isom_box_get_size(s);",
          "4703:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4729:  GF_Err e;",
          "4730:  GF_MovieExtendsHeaderBox *ptr = (GF_MovieExtendsHeaderBox *)s;",
          "4734:  if (ptr->version==1) {",
          "4735:   ptr->fragment_duration = gf_bs_read_u64(bs);",
          "4736:  } else {",
          "",
          "[Removed Lines]",
          "4732:  e = gf_isom_full_box_read(s, bs);",
          "4733:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4753: }",
          "4754: GF_Err mehd_Size(GF_Box *s)",
          "4755: {",
          "4757:  GF_MovieExtendsHeaderBox *ptr = (GF_MovieExtendsHeaderBox *)s;",
          "4759:  ptr->version = (ptr->fragment_duration>0xFFFFFFFF) ? 1 : 0;",
          "4760:  s->size += (ptr->version == 1) ? 8 : 4;",
          "4761:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4756:  GF_Err e = gf_isom_full_box_get_size(s);",
          "4758:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "4778:  GF_Err e;",
          "4779:  GF_MovieHeaderBox *ptr = (GF_MovieHeaderBox *)s;",
          "4780:  if (ptr == NULL) return GF_BAD_PARAM;",
          "4783:  if (ptr->version == 1) {",
          "4784:   ptr->creationTime = gf_bs_read_u64(bs);",
          "4785:   ptr->modificationTime = gf_bs_read_u64(bs);",
          "",
          "[Removed Lines]",
          "4781:  e = gf_isom_full_box_read(s, bs);",
          "4782:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "4822: {",
          "4823:  ISOM_DECL_BOX_ALLOC(GF_MovieHeaderBox, GF_ISOM_BOX_TYPE_MVHD);",
          "4827:  tmp->preferredRate = (1<<16);",
          "4828:  tmp->preferredVolume = (1<<8);",
          "",
          "[Removed Lines]",
          "4825:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "4884:  GF_MovieHeaderBox *ptr = (GF_MovieHeaderBox *)s;",
          "4885:  if (ptr->duration==(u64) -1) ptr->version = 0;",
          "4886:  else ptr->version = (ptr->duration>0xFFFFFFFF) ? 1 : 0;",
          "4889:  ptr->size += (ptr->version == 1) ? 28 : 16;",
          "4890:  ptr->size += 80;",
          "4891:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4887:  e = gf_isom_full_box_get_size(s);",
          "4888:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "4906: GF_Err nmhd_Read(GF_Box *s, GF_BitStream *bs)",
          "4907: {",
          "4910:  return GF_OK;",
          "4911: }",
          "4913: GF_Box *nmhd_New()",
          "4914: {",
          "4915:  ISOM_DECL_BOX_ALLOC(GF_MPEGMediaHeaderBox, GF_ISOM_BOX_TYPE_NMHD);",
          "4917:  return (GF_Box *)tmp;",
          "4918: }",
          "",
          "[Removed Lines]",
          "4908:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "4909:  if (e) return e;",
          "4916:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "4928: GF_Err nmhd_Size(GF_Box *s)",
          "4929: {",
          "4931: }",
          "",
          "[Removed Lines]",
          "4930:  return gf_isom_full_box_get_size(s);",
          "",
          "[Added Lines]",
          "4689:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "4949:  u32 i;",
          "4950:  GF_PaddingBitsBox *ptr = (GF_PaddingBitsBox *)s;",
          "4955:  ptr->SampleCount = gf_bs_read_u32(bs);",
          "4957:  ptr->padbits = (u8 *)gf_malloc(sizeof(u8)*ptr->SampleCount);",
          "",
          "[Removed Lines]",
          "4952:  e = gf_isom_full_box_read( s, bs);",
          "4953:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "4971: GF_Box *padb_New()",
          "4972: {",
          "4973:  ISOM_DECL_BOX_ALLOC(GF_PaddingBitsBox, GF_ISOM_BOX_TYPE_PADB);",
          "4975:  return (GF_Box *)tmp;",
          "4976: }",
          "",
          "[Removed Lines]",
          "4974:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "5005: GF_Err padb_Size(GF_Box *s)",
          "5006: {",
          "5008:  GF_PaddingBitsBox *ptr = (GF_PaddingBitsBox *)s;",
          "5011:  ptr->size += 4;",
          "5012:  if (ptr->SampleCount) ptr->size += (ptr->SampleCount + 1) / 2;",
          "5015:  return GF_OK;",
          "5016: }",
          "",
          "[Removed Lines]",
          "5007:  GF_Err e;",
          "5009:  e = gf_isom_full_box_get_size(s);",
          "5010:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "5057: GF_Err rely_Size(GF_Box *s)",
          "5058: {",
          "5062:  s->size += 1;",
          "5063:  return GF_OK;",
          "5064: }",
          "",
          "[Removed Lines]",
          "5059:  GF_Err e;",
          "5060:  e = gf_isom_box_get_size(s);",
          "5061:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "5101: GF_Err rtpo_Size(GF_Box *s)",
          "5102: {",
          "5106:  s->size += 4;",
          "5107:  return GF_OK;",
          "5108: }",
          "",
          "[Removed Lines]",
          "5103:  GF_Err e;",
          "5104:  e = gf_isom_box_get_size(s);",
          "5105:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "5120: {",
          "5121:  GF_Err e;",
          "5122:  GF_SoundMediaHeaderBox *ptr = (GF_SoundMediaHeaderBox *)s;",
          "5125:  ptr->balance = gf_bs_read_u16(bs);",
          "5126:  ptr->reserved = gf_bs_read_u16(bs);",
          "5127:  return GF_OK;",
          "",
          "[Removed Lines]",
          "5123:  e = gf_isom_full_box_read(s, bs);",
          "5124:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "5130: GF_Box *smhd_New()",
          "5131: {",
          "5132:  ISOM_DECL_BOX_ALLOC(GF_SoundMediaHeaderBox, GF_ISOM_BOX_TYPE_SMHD);",
          "5134:  return (GF_Box *)tmp;",
          "5135: }",
          "",
          "[Removed Lines]",
          "5133:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "5151: GF_Err smhd_Size(GF_Box *s)",
          "5152: {",
          "5154:  GF_SoundMediaHeaderBox *ptr = (GF_SoundMediaHeaderBox *)s;",
          "5157:  ptr->reserved = 0;",
          "5158:  ptr->size += 4;",
          "5159:  return GF_OK;",
          "",
          "[Removed Lines]",
          "5153:  GF_Err e;",
          "5155:  e = gf_isom_full_box_get_size(s);",
          "5156:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "5199: GF_Err snro_Size(GF_Box *s)",
          "5200: {",
          "5204:  s->size += 4;",
          "5205:  return GF_OK;",
          "5206: }",
          "",
          "[Removed Lines]",
          "5201:  GF_Err e;",
          "5202:  e = gf_isom_box_get_size(s);",
          "5203:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "5465: {",
          "5466:  GF_Err e;",
          "5467:  GF_SampleTableBox *ptr = (GF_SampleTableBox *)s;",
          "5472:  if (ptr->SampleDescription) {",
          "",
          "[Removed Lines]",
          "5468:  e = gf_isom_box_get_size(s);",
          "5469:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "5582:  u32 entries;",
          "5583:  GF_ChunkOffsetBox *ptr = (GF_ChunkOffsetBox *)s;",
          "5587:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "5588:  ISOM_DECREASE_SIZE(ptr, 4);",
          "5589:  if (ptr->nb_entries > ptr->size / 4) {",
          "",
          "[Removed Lines]",
          "5585:  e = gf_isom_full_box_read(s, bs);",
          "5586:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "5606: GF_Box *stco_New()",
          "5607: {",
          "5608:  ISOM_DECL_BOX_ALLOC(GF_ChunkOffsetBox, GF_ISOM_BOX_TYPE_STCO);",
          "5610:  return (GF_Box *)tmp;",
          "5611: }",
          "",
          "[Removed Lines]",
          "5609:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "5632: GF_Err stco_Size(GF_Box *s)",
          "5633: {",
          "5635:  GF_ChunkOffsetBox *ptr = (GF_ChunkOffsetBox *)s;",
          "5638:  ptr->size += 4 + (4 * ptr->nb_entries);",
          "5639:  return GF_OK;",
          "5640: }",
          "",
          "[Removed Lines]",
          "5634:  GF_Err e;",
          "5636:  e = gf_isom_full_box_get_size(s);",
          "5637:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "5658:  u32 entry;",
          "5659:  GF_DegradationPriorityBox *ptr = (GF_DegradationPriorityBox *)s;",
          "5664:  if (!ptr->nb_entries) ptr->nb_entries = (u32) ptr->size / 2;",
          "5665:  else if (ptr->nb_entries > ptr->size / 2) return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "5661:  e = gf_isom_full_box_read(s, bs);",
          "5662:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "5676: GF_Box *stdp_New()",
          "5677: {",
          "5678:  ISOM_DECL_BOX_ALLOC(GF_DegradationPriorityBox, GF_ISOM_BOX_TYPE_STDP);",
          "5680:  return (GF_Box *)tmp;",
          "5681: }",
          "",
          "[Removed Lines]",
          "5679:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "5700: GF_Err stdp_Size(GF_Box *s)",
          "5701: {",
          "5703:  GF_DegradationPriorityBox *ptr = (GF_DegradationPriorityBox *)s;",
          "5706:  ptr->size += (2 * ptr->nb_entries);",
          "5707:  return GF_OK;",
          "5708: }",
          "",
          "[Removed Lines]",
          "5702:  GF_Err e;",
          "5704:  e = gf_isom_full_box_get_size(s);",
          "5705:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "5725:  u32 i;",
          "5726:  GF_SampleToChunkBox *ptr = (GF_SampleToChunkBox *)s;",
          "5730:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "5731:  ISOM_DECREASE_SIZE(ptr, 4);",
          "5732:  if (ptr->nb_entries > ptr->size / 12) {",
          "",
          "[Removed Lines]",
          "5728:  e = gf_isom_full_box_read(s, bs);",
          "5729:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "5762: GF_Box *stsc_New()",
          "5763: {",
          "5764:  ISOM_DECL_BOX_ALLOC(GF_SampleToChunkBox, GF_ISOM_BOX_TYPE_STSC);",
          "5766:  return (GF_Box *)tmp;",
          "5767: }",
          "",
          "[Removed Lines]",
          "5765:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "5789: GF_Err stsc_Size(GF_Box *s)",
          "5790: {",
          "5792:  GF_SampleToChunkBox *ptr = (GF_SampleToChunkBox *)s;",
          "5795:  ptr->size += 4 + (12 * ptr->nb_entries);",
          "5796:  return GF_OK;",
          "5797: }",
          "",
          "[Removed Lines]",
          "5791:  GF_Err e;",
          "5793:  e = gf_isom_full_box_get_size(s);",
          "5794:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "5882: GF_Err stsd_Read(GF_Box *s, GF_BitStream *bs)",
          "5883: {",
          "5886:  gf_bs_read_u32(bs);",
          "5887:  ISOM_DECREASE_SIZE(s, 4)",
          "",
          "[Removed Lines]",
          "5884:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "5885:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "5892: GF_Box *stsd_New()",
          "5893: {",
          "5894:  ISOM_DECL_BOX_ALLOC(GF_SampleDescriptionBox, GF_ISOM_BOX_TYPE_STSD);",
          "5896:  tmp->other_boxes = gf_list_new();",
          "5897:  return (GF_Box *)tmp;",
          "5898: }",
          "",
          "[Removed Lines]",
          "5895:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "5916: GF_Err stsd_Size(GF_Box *s)",
          "5917: {",
          "5919:  GF_SampleDescriptionBox *ptr = (GF_SampleDescriptionBox *)s;",
          "5922:  ptr->size += 4;",
          "5923:  return GF_OK;",
          "5924: }",
          "",
          "[Removed Lines]",
          "5918:  GF_Err e;",
          "5920:  e = gf_isom_full_box_get_size(s);",
          "5921:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "5958:  p = NULL;",
          "5959:  if (!ptr) return GF_BAD_PARAM;",
          "5962:  nb_entries = gf_bs_read_u32(bs);",
          "5964:  p = NULL;",
          "",
          "[Removed Lines]",
          "5960:  e = gf_isom_full_box_read(s, bs);",
          "5961:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "5984: {",
          "5985:  ISOM_DECL_BOX_ALLOC(GF_SampleFragmentBox, GF_ISOM_BOX_TYPE_STSF);",
          "5988:  tmp->entryList = gf_list_new();",
          "5989:  if (! tmp->entryList) {",
          "5990:   gf_free(tmp);",
          "",
          "[Removed Lines]",
          "5987:  gf_isom_full_box_init((GF_Box *) tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "6024: GF_Err stsf_Size(GF_Box *s)",
          "6025: {",
          "6027:  GF_StsfEntry *p;",
          "6028:  u32 nb_entries, i;",
          "6029:  GF_SampleFragmentBox *ptr = (GF_SampleFragmentBox *) s;",
          "6033:  nb_entries = gf_list_count(ptr->entryList);",
          "6034:  ptr->size += 4;",
          "6035:  for (i=0; i<nb_entries; i++) {",
          "",
          "[Removed Lines]",
          "6026:  GF_Err e;",
          "6031:  e = gf_isom_full_box_get_size(s);",
          "6032:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "6063:  GF_StshEntry *ent;",
          "6064:  GF_ShadowSyncBox *ptr = (GF_ShadowSyncBox *)s;",
          "6068:  count = gf_bs_read_u32(bs);",
          "6070:  for (i = 0; i < count; i++) {",
          "",
          "[Removed Lines]",
          "6066:  e = gf_isom_full_box_read(s, bs);",
          "6067:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "6081: GF_Box *stsh_New()",
          "6082: {",
          "6083:  ISOM_DECL_BOX_ALLOC(GF_ShadowSyncBox, GF_ISOM_BOX_TYPE_STSH);",
          "6085:  tmp->entries = gf_list_new();",
          "6086:  if (!tmp->entries) {",
          "6087:   gf_free(tmp);",
          "",
          "[Removed Lines]",
          "6084:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "6114: GF_Err stsh_Size(GF_Box *s)",
          "6115: {",
          "6117:  GF_ShadowSyncBox *ptr = (GF_ShadowSyncBox *)s;",
          "6120:  ptr->size += 4 + (8 * gf_list_count(ptr->entries));",
          "6121:  return GF_OK;",
          "6122: }",
          "",
          "[Removed Lines]",
          "6116:  GF_Err e;",
          "6118:  e = gf_isom_full_box_get_size(s);",
          "6119:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "6139:  u32 i;",
          "6140:  GF_SyncSampleBox *ptr = (GF_SyncSampleBox *)s;",
          "6144:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "6145:  ISOM_DECREASE_SIZE(ptr, 4);",
          "6146:  if (ptr->nb_entries > ptr->size / 4) {",
          "",
          "[Removed Lines]",
          "6142:  e = gf_isom_full_box_read(s, bs);",
          "6143:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "6161: GF_Box *stss_New()",
          "6162: {",
          "6163:  ISOM_DECL_BOX_ALLOC(GF_SyncSampleBox, GF_ISOM_BOX_TYPE_STSS);",
          "6165:  return (GF_Box*)tmp;",
          "6166: }",
          "",
          "[Removed Lines]",
          "6164:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "6186: GF_Err stss_Size(GF_Box *s)",
          "6187: {",
          "6189:  GF_SyncSampleBox *ptr = (GF_SyncSampleBox *)s;",
          "6192:  ptr->size += 4 + (4 * ptr->nb_entries);",
          "6193:  return GF_OK;",
          "6194: }",
          "",
          "[Removed Lines]",
          "6188:  GF_Err e;",
          "6190:  e = gf_isom_full_box_get_size(s);",
          "6191:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "6212:  GF_SampleSizeBox *ptr = (GF_SampleSizeBox *)s;",
          "6213:  if (ptr == NULL) return GF_BAD_PARAM;",
          "6218:  if (s->type == GF_ISOM_BOX_TYPE_STSZ) {",
          "6219:   ptr->sampleSize = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "6215:  e = gf_isom_full_box_read(s, bs);",
          "6216:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "6308: {",
          "6309:  ISOM_DECL_BOX_ALLOC(GF_SampleSizeBox, 0);",
          "6313:  return (GF_Box *)tmp;",
          "6314: }",
          "",
          "[Removed Lines]",
          "6311:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "6365: GF_Err stsz_Size(GF_Box *s)",
          "6366: {",
          "6368:  u32 i, fieldSize, size;",
          "6369:  GF_SampleSizeBox *ptr = (GF_SampleSizeBox *)s;",
          "6373:  ptr->size += 8;",
          "6374:  if (!ptr->sampleCount) return GF_OK;",
          "",
          "[Removed Lines]",
          "6367:  GF_Err e;",
          "6370:  e = gf_isom_full_box_get_size(s);",
          "6371:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "6445:  u32 i;",
          "6446:  GF_TimeToSampleBox *ptr = (GF_TimeToSampleBox *)s;",
          "6451: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "6452:  ptr->w_LastDTS = 0;",
          "6453: #endif",
          "",
          "[Removed Lines]",
          "6448:  e = gf_isom_full_box_read(s, bs);",
          "6449:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "6495: GF_Box *stts_New()",
          "6496: {",
          "6497:  ISOM_DECL_BOX_ALLOC(GF_TimeToSampleBox, GF_ISOM_BOX_TYPE_STTS);",
          "6499:  return (GF_Box *)tmp;",
          "6500: }",
          "",
          "[Removed Lines]",
          "6498:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "6521: GF_Err stts_Size(GF_Box *s)",
          "6522: {",
          "6524:  GF_TimeToSampleBox *ptr = (GF_TimeToSampleBox *)s;",
          "6527:  ptr->size += 4 + (8 * ptr->nb_entries);",
          "6528:  return GF_OK;",
          "6529: }",
          "",
          "[Removed Lines]",
          "6523:  GF_Err e;",
          "6525:  e = gf_isom_full_box_get_size(s);",
          "6526:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "6546:  GF_Err e;",
          "6547:  GF_TrackFragmentHeaderBox *ptr = (GF_TrackFragmentHeaderBox *)s;",
          "6552:  ptr->trackID = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "6549:  e = gf_isom_full_box_read(s, bs);",
          "6550:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "6614: GF_Err tfhd_Size(GF_Box *s)",
          "6615: {",
          "6617:  GF_TrackFragmentHeaderBox *ptr = (GF_TrackFragmentHeaderBox *)s;",
          "6620:  ptr->size += 4;",
          "",
          "[Removed Lines]",
          "6616:  GF_Err e;",
          "6618:  e = gf_isom_full_box_get_size(s);",
          "6619:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "6668: GF_Err tims_Size(GF_Box *s)",
          "6669: {",
          "6673:  s->size += 4;",
          "6674:  return GF_OK;",
          "6675: }",
          "",
          "[Removed Lines]",
          "6670:  GF_Err e;",
          "6671:  e = gf_isom_box_get_size(s);",
          "6672:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "6690: {",
          "6691:  GF_Err e;",
          "6692:  GF_TrackHeaderBox *ptr = (GF_TrackHeaderBox *)s;",
          "6695:  if (ptr->version == 1) {",
          "6696:   ptr->creationTime = gf_bs_read_u64(bs);",
          "6697:   ptr->modificationTime = gf_bs_read_u64(bs);",
          "",
          "[Removed Lines]",
          "6693:  e = gf_isom_full_box_read(s, bs);",
          "6694:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "6728: GF_Box *tkhd_New()",
          "6729: {",
          "6730:  ISOM_DECL_BOX_ALLOC(GF_TrackHeaderBox, GF_ISOM_BOX_TYPE_TKHD);",
          "6732:  tmp->matrix[0] = 0x00010000;",
          "6733:  tmp->matrix[4] = 0x00010000;",
          "6734:  tmp->matrix[8] = 0x40000000;",
          "",
          "[Removed Lines]",
          "6731:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "6782: GF_Err tkhd_Size(GF_Box *s)",
          "6783: {",
          "6785:  GF_TrackHeaderBox *ptr = (GF_TrackHeaderBox *)s;",
          "6788:  if (ptr->duration==(u64) -1) ptr->version = 0;",
          "6789:  else ptr->version = (ptr->duration>0xFFFFFFFF) ? 1 : 0;",
          "6790:  ptr->size += (ptr->version == 1) ? 32 : 20;",
          "",
          "[Removed Lines]",
          "6784:  GF_Err e;",
          "6786:  e = gf_isom_full_box_get_size(s);",
          "6787:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "6949: GF_Err tfxd_Size(GF_Box *s)",
          "6950: {",
          "6953:  s->size += 20;",
          "6954:  return GF_OK;",
          "6955: }",
          "",
          "[Removed Lines]",
          "6951:  GF_Err e = gf_isom_box_get_size(s);",
          "6952:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "7020:  GF_Err e;",
          "7021:  GF_TrackFragmentBox *ptr = (GF_TrackFragmentBox *)s;",
          "7025:  if (ptr->tfhd) {",
          "7026:   e = gf_isom_box_size((GF_Box *) ptr->tfhd);",
          "7027:   if (e) return e;",
          "",
          "[Removed Lines]",
          "7023:  e = gf_isom_box_get_size(s);",
          "7024:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "7443:  GF_Err e;",
          "7444:  GF_TrackBox *ptr = (GF_TrackBox *)s;",
          "7449:  if (ptr->Header) {",
          "7450:   e = gf_isom_box_size((GF_Box *) ptr->Header);",
          "7451:   if (e) return e;",
          "",
          "[Removed Lines]",
          "7446:  e = gf_isom_box_get_size(s);",
          "7447:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "7499:  GF_Err e;",
          "7500:  size_t i;",
          "7501:  GF_SubTrackInformationBox *ptr = (GF_SubTrackInformationBox *)s;",
          "7504:  ptr->switch_group = gf_bs_read_u16(bs);",
          "7505:  ptr->alternate_group = gf_bs_read_u16(bs);",
          "7506:  ptr->sub_track_id = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "7502:  e = gf_isom_full_box_read(s, bs);",
          "7503:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "7542: GF_Err stri_Size(GF_Box *s)",
          "7543: {",
          "7545:  GF_SubTrackInformationBox *ptr = (GF_SubTrackInformationBox *)s;",
          "7549:  ptr->size += 8 + 4 * ptr->attribute_count;",
          "7550:  return GF_OK;",
          "7551: }",
          "",
          "[Removed Lines]",
          "7544:  GF_Err e;",
          "7547:  e = gf_isom_full_box_get_size(s);",
          "7548:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "7565:  GF_Err e;",
          "7566:  u32 i;",
          "7567:  GF_SubTrackSampleGroupBox *ptr = (GF_SubTrackSampleGroupBox *)s;",
          "7570:  ISOM_DECREASE_SIZE(s, 6);",
          "7571:  ptr->grouping_type = gf_bs_read_u32(bs);",
          "7572:  ptr->nb_groups = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "7568:  e = gf_isom_full_box_read(s, bs);",
          "7569:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "7606: GF_Err stsg_Size(GF_Box *s)",
          "7607: {",
          "7609:  GF_SubTrackSampleGroupBox *ptr = (GF_SubTrackSampleGroupBox *)s;",
          "7612:  ptr->size += 6 + 4 * ptr->nb_groups;",
          "7613:  return GF_OK;",
          "7614: }",
          "",
          "[Removed Lines]",
          "7608:  GF_Err e;",
          "7610:  e = gf_isom_full_box_get_size(s);",
          "7611:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "7686:  GF_Err e;",
          "7687:  GF_SubTrackBox *ptr = (GF_SubTrackBox *)s;",
          "7692:  if (ptr->info) {",
          "7693:   e = gf_isom_box_size((GF_Box *)ptr->info);",
          "7694:   if (e) return e;",
          "",
          "[Removed Lines]",
          "7689:  e = gf_isom_box_get_size(s);",
          "7690:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "7734: GF_Err tref_Size(GF_Box *s)",
          "7735: {",
          "7738: }",
          "",
          "[Removed Lines]",
          "7737:  return gf_isom_box_get_size(s);",
          "",
          "[Added Lines]",
          "7387:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "7819: GF_Err reftype_Size(GF_Box *s)",
          "7820: {",
          "7822:  GF_TrackReferenceTypeBox *ptr = (GF_TrackReferenceTypeBox *)s;",
          "7825:  ptr->size += (ptr->trackIDCount * sizeof(u32));",
          "7826:  return GF_OK;",
          "7827: }",
          "",
          "[Removed Lines]",
          "7821:  GF_Err e;",
          "7823:  e = gf_isom_box_get_size(s);",
          "7824:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "7845:  GF_Err e;",
          "7846:  GF_TrackExtendsBox *ptr = (GF_TrackExtendsBox *)s;",
          "7851:  ptr->trackID = gf_bs_read_u32(bs);",
          "7852:  ptr->def_sample_desc_index = gf_bs_read_u32(bs);",
          "7853:  ptr->def_sample_duration = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "7848:  e = gf_isom_full_box_read(s, bs);",
          "7849:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "7891: GF_Err trex_Size(GF_Box *s)",
          "7892: {",
          "7894:  GF_TrackExtendsBox *ptr = (GF_TrackExtendsBox *)s;",
          "7897:  ptr->size += 20;",
          "7898:  return GF_OK;",
          "7899: }",
          "",
          "[Removed Lines]",
          "7893:  GF_Err e;",
          "7895:  e = gf_isom_full_box_get_size(s);",
          "7896:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "7917:  GF_Err e;",
          "7918:  GF_TrackExtensionPropertiesBox *ptr = (GF_TrackExtensionPropertiesBox *)s;",
          "7923:  ptr->trackID = gf_bs_read_u32(bs);",
          "7924:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "7920:  e = gf_isom_full_box_read(s, bs);",
          "7921:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "7953: GF_Err trep_Size(GF_Box *s)",
          "7954: {",
          "7956:  GF_TrackExtensionPropertiesBox *ptr = (GF_TrackExtensionPropertiesBox *)s;",
          "7959:  ptr->size += 4;",
          "7960:  return GF_OK;",
          "7961: }",
          "",
          "[Removed Lines]",
          "7955:  GF_Err e;",
          "7957:  e = gf_isom_full_box_get_size(s);",
          "7958:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "7993:  GF_TrunEntry *p;",
          "7994:  GF_TrackFragmentRunBox *ptr = (GF_TrackFragmentRunBox *)s;",
          "8000:  if ((ptr->flags & GF_ISOM_TRUN_FIRST_FLAG) && (ptr->flags & GF_ISOM_TRUN_FLAGS))",
          "8001:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "7996:  e = gf_isom_full_box_read(s, bs);",
          "7997:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "8108: GF_Err trun_Size(GF_Box *s)",
          "8109: {",
          "8111:  u32 i, count;",
          "8112:  GF_TrackFragmentRunBox *ptr = (GF_TrackFragmentRunBox *)s;",
          "8117:  ptr->size += 4;",
          "8119:  if (ptr->flags & GF_ISOM_TRUN_DATA_OFFSET) ptr->size += 4;",
          "",
          "[Removed Lines]",
          "8110:  GF_Err e;",
          "8114:  e = gf_isom_full_box_get_size(s);",
          "8115:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "8175: GF_Err tsro_Size(GF_Box *s)",
          "8176: {",
          "8180:  s->size += 4;",
          "8181:  return GF_OK;",
          "8182: }",
          "",
          "[Removed Lines]",
          "8177:  GF_Err e;",
          "8178:  e = gf_isom_box_get_size(s);",
          "8179:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "8287:  GF_UserDataMap *map;",
          "8288:  GF_UserDataBox *ptr = (GF_UserDataBox *)s;",
          "8292:  i=0;",
          "8293:  while ((map = (GF_UserDataMap *)gf_list_enum(ptr->recordList, &i))) {",
          "",
          "[Removed Lines]",
          "8290:  e = gf_isom_box_get_size(s);",
          "8291:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "8314: {",
          "8315:  GF_Err e;",
          "8316:  GF_VideoMediaHeaderBox *ptr = (GF_VideoMediaHeaderBox *)s;",
          "8319:  ptr->reserved = gf_bs_read_u64(bs);",
          "8320:  return GF_OK;",
          "8321: }",
          "",
          "[Removed Lines]",
          "8317:  e = gf_isom_full_box_read(s, bs);",
          "8318:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "8323: GF_Box *vmhd_New()",
          "8324: {",
          "8325:  ISOM_DECL_BOX_ALLOC(GF_VideoMediaHeaderBox, GF_ISOM_BOX_TYPE_VMHD);",
          "8327:  tmp->flags = 1;",
          "8328:  return (GF_Box *)tmp;",
          "8329: }",
          "",
          "[Removed Lines]",
          "8326:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "8346: GF_Err vmhd_Size(GF_Box *s)",
          "8347: {",
          "8349:  GF_VideoMediaHeaderBox *ptr = (GF_VideoMediaHeaderBox *)s;",
          "8352:  ptr->size += 8;",
          "8353:  return GF_OK;",
          "8354: }",
          "",
          "[Removed Lines]",
          "8348:  GF_Err e;",
          "8350:  e = gf_isom_full_box_get_size(s);",
          "8351:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "8396: GF_Box *pdin_New()",
          "8397: {",
          "8398:  ISOM_DECL_BOX_ALLOC(GF_ProgressiveDownloadBox, GF_ISOM_BOX_TYPE_PDIN);",
          "8400:  tmp->flags = 1;",
          "8401:  return (GF_Box *)tmp;",
          "8402: }",
          "",
          "[Removed Lines]",
          "8399:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "8418:  GF_Err e;",
          "8419:  GF_ProgressiveDownloadBox *ptr = (GF_ProgressiveDownloadBox*)s;",
          "8424:  ptr->count = (u32) (ptr->size) / 8;",
          "8425:  ptr->rates = (u32*)gf_malloc(sizeof(u32)*ptr->count);",
          "8426:  ptr->times = (u32*)gf_malloc(sizeof(u32)*ptr->count);",
          "",
          "[Removed Lines]",
          "8421:  e = gf_isom_full_box_read(s, bs);",
          "8422:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "8451: GF_Err pdin_Size(GF_Box *s)",
          "8452: {",
          "8454:  GF_ProgressiveDownloadBox *ptr = (GF_ProgressiveDownloadBox *)s;",
          "8457:  ptr->size += 8*ptr->count;",
          "8458:  return GF_OK;",
          "8459: }",
          "",
          "[Removed Lines]",
          "8453:  GF_Err e;",
          "8455:  e = gf_isom_full_box_get_size(s);",
          "8456:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "8466: GF_Box *sdtp_New()",
          "8467: {",
          "8468:  ISOM_DECL_BOX_ALLOC(GF_SampleDependencyTypeBox, GF_ISOM_BOX_TYPE_SDTP);",
          "8470:  tmp->flags = 1;",
          "8471:  return (GF_Box *)tmp;",
          "8472: }",
          "",
          "[Removed Lines]",
          "8469:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "8486:  GF_Err e;",
          "8487:  GF_SampleDependencyTypeBox *ptr = (GF_SampleDependencyTypeBox*)s;",
          "8492:  if (!ptr->sampleCount) ptr->sampleCount = (u32) ptr->size;",
          "8493:  else if (ptr->sampleCount > (u32) ptr->size) return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "8489:  e = gf_isom_full_box_read(s, bs);",
          "8490:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "8514: GF_Err sdtp_Size(GF_Box *s)",
          "8515: {",
          "8517:  GF_SampleDependencyTypeBox *ptr = (GF_SampleDependencyTypeBox *)s;",
          "8520:  ptr->size += ptr->sampleCount;",
          "8521:  return GF_OK;",
          "8522: }",
          "",
          "[Removed Lines]",
          "8516:  GF_Err e;",
          "8518:  e = gf_isom_full_box_get_size(s);",
          "8519:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "8564: GF_Err pasp_Size(GF_Box *s)",
          "8565: {",
          "8568:  s->size += 8;",
          "8569:  return GF_OK;",
          "8570: }",
          "",
          "[Removed Lines]",
          "8566:  GF_Err e = gf_isom_box_get_size(s);",
          "8567:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "8625: GF_Err clap_Size(GF_Box *s)",
          "8626: {",
          "8629:  s->size += 32;",
          "8630:  return GF_OK;",
          "8631: }",
          "",
          "[Removed Lines]",
          "8627:  GF_Err e = gf_isom_box_get_size(s);",
          "8628:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "8801: GF_Err metx_Size(GF_Box *s)",
          "8802: {",
          "8803:  GF_MetaDataSampleEntryBox *ptr = (GF_MetaDataSampleEntryBox *)s;",
          "8806:  ptr->size += 8;",
          "8808:  if (ptr->type!=GF_ISOM_BOX_TYPE_STPP) {",
          "",
          "[Removed Lines]",
          "8804:  GF_Err e = gf_isom_box_get_size(s);",
          "8805:  if (e) return e;",
          "",
          "[Added Lines]",
          "8404:  GF_Err e;",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "8850: GF_Box *txtc_New()",
          "8851: {",
          "8852:  ISOM_DECL_BOX_ALLOC(GF_TextConfigBox, GF_ISOM_BOX_TYPE_TXTC);",
          "8854:  return (GF_Box *)tmp;",
          "8855: }",
          "",
          "[Removed Lines]",
          "8853:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "8871:  char *str;",
          "8872:  GF_TextConfigBox *ptr = (GF_TextConfigBox*)s;",
          "8877:  size = (u32) ptr->size;",
          "8878:  str = (char *)gf_malloc(sizeof(char)*size);",
          "",
          "[Removed Lines]",
          "8874:  e = gf_isom_full_box_read(s, bs);",
          "8875:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "8910: GF_Err txtc_Size(GF_Box *s)",
          "8911: {",
          "8912:  GF_TextConfigBox *ptr = (GF_TextConfigBox *)s;",
          "8915:  if (ptr->config)",
          "8916:   ptr->size += strlen(ptr->config);",
          "8917:  ptr->size++;",
          "",
          "[Removed Lines]",
          "8913:  GF_Err e = gf_isom_full_box_get_size(s);",
          "8914:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "9023: {",
          "9024:  GF_AC3ConfigBox *ptr = (GF_AC3ConfigBox *)s;",
          "9025:  GF_Err e;",
          "9029:  if (ptr->cfg.is_ec3) {",
          "9030:   u32 i;",
          "",
          "[Removed Lines]",
          "9026:  e = gf_isom_box_get_size(s);",
          "9027:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "9084: GF_Err lsrc_Size(GF_Box *s)",
          "9085: {",
          "9087:  GF_LASERConfigurationBox *ptr = (GF_LASERConfigurationBox *)s;",
          "9090:  ptr->size += ptr->hdr_size;",
          "9091:  return GF_OK;",
          "9092: }",
          "",
          "[Removed Lines]",
          "9086:  GF_Err e;",
          "9088:  e = gf_isom_box_get_size(s);",
          "9089:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "9170: {",
          "9171:  GF_Err e;",
          "9172:  GF_LASeRSampleEntryBox *ptr = (GF_LASeRSampleEntryBox *)s;",
          "9175:  s->size += 8;",
          "9176:  if (ptr->lsr_config) {",
          "9177:   e = gf_isom_box_size((GF_Box *)ptr->lsr_config);",
          "",
          "[Removed Lines]",
          "9173:  e = gf_isom_box_get_size(s);",
          "9174:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "9202:  GF_Err e;",
          "9203:  u32 i;",
          "9204:  GF_SegmentIndexBox *ptr = (GF_SegmentIndexBox*) s;",
          "9207:  ptr->reference_ID = gf_bs_read_u32(bs);",
          "9208:  ptr->timescale = gf_bs_read_u32(bs);",
          "9209:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Removed Lines]",
          "9205:  e = gf_isom_full_box_read(s, bs);",
          "9206:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "9238: GF_Box *sidx_New()",
          "9239: {",
          "9240:  ISOM_DECL_BOX_ALLOC(GF_SegmentIndexBox, GF_ISOM_BOX_TYPE_SIDX);",
          "9242:  return (GF_Box *)tmp;",
          "9243: }",
          "",
          "[Removed Lines]",
          "9241:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "9279: GF_Err sidx_Size(GF_Box *s)",
          "9280: {",
          "9282:  GF_SegmentIndexBox *ptr = (GF_SegmentIndexBox*) s;",
          "9286:  ptr->size += 12;",
          "9287:  if (ptr->version==0) {",
          "",
          "[Removed Lines]",
          "9281:  GF_Err e;",
          "9283:  e = gf_isom_full_box_get_size(s);",
          "9284:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "9316:  GF_Err e;",
          "9317:  u32 i,j;",
          "9318:  GF_SubsegmentIndexBox *ptr = (GF_SubsegmentIndexBox*)s;",
          "9321:  if (ptr->size < 4) return GF_BAD_PARAM;",
          "9322:  ptr->subsegment_count = gf_bs_read_u32(bs);",
          "9323:  ptr->size -= 4;",
          "",
          "[Removed Lines]",
          "9319:  e = gf_isom_full_box_read(s, bs);",
          "9320:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "9342: GF_Box *ssix_New()",
          "9343: {",
          "9344:  ISOM_DECL_BOX_ALLOC(GF_SubsegmentIndexBox, GF_ISOM_BOX_TYPE_SSIX);",
          "9346:  return (GF_Box *)tmp;",
          "9347: }",
          "",
          "[Removed Lines]",
          "9345:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "9372: GF_Err ssix_Size(GF_Box *s)",
          "9373: {",
          "9375:  u32 i;",
          "9376:  GF_SubsegmentIndexBox *ptr = (GF_SubsegmentIndexBox*)s;",
          "9380:  ptr->size += 4;",
          "9381:  for (i = 0; i < ptr->subsegment_count; i++) {",
          "",
          "[Removed Lines]",
          "9374:  GF_Err e;",
          "9377:  e = gf_isom_full_box_get_size(s);",
          "9378:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "9399:  GF_Err e;",
          "9400:  u32 i;",
          "9401:  GF_LevelAssignmentBox *ptr = (GF_LevelAssignmentBox*)s;",
          "9404:  if (ptr->size < 4) return GF_BAD_PARAM;",
          "9405:  ptr->level_count = gf_bs_read_u8(bs);",
          "9406:  ptr->size -= 4;",
          "",
          "[Removed Lines]",
          "9402:  e = gf_isom_full_box_read(s, bs);",
          "9403:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "9430: GF_Box *leva_New()",
          "9431: {",
          "9432:  ISOM_DECL_BOX_ALLOC(GF_LevelAssignmentBox, GF_ISOM_BOX_TYPE_LEVA);",
          "9434:  return (GF_Box *)tmp;",
          "9435: }",
          "",
          "[Removed Lines]",
          "9433:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "9467: GF_Err leva_Size(GF_Box *s)",
          "9468: {",
          "9470:  u32 i;",
          "9471:  GF_LevelAssignmentBox *ptr = (GF_LevelAssignmentBox*)s;",
          "9475:  ptr->size += 1;",
          "9476:  for (i = 0; i < ptr->level_count; i++) {",
          "",
          "[Removed Lines]",
          "9469:  GF_Err e;",
          "9472:  e = gf_isom_full_box_get_size(s);",
          "9473:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "9546: {",
          "9547:  GF_Err e;",
          "9548:  GF_PcrInfoBox *ptr = (GF_PcrInfoBox*) s;",
          "9552:  ptr->size += 4;",
          "9553:  ptr->size += ptr->subsegment_count * 6;",
          "",
          "[Removed Lines]",
          "9549:  e = gf_isom_box_get_size(s);",
          "9550:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "9629: GF_Err subs_Size(GF_Box *s)",
          "9630: {",
          "9632:  GF_SubSampleInformationBox *ptr = (GF_SubSampleInformationBox *) s;",
          "9633:  GF_SubSampleInfoEntry *pSamp;",
          "9634:  u32 entry_count, i;",
          "9635:  u16 subsample_count;",
          "9642:  ptr->size += 4;",
          "9643:  entry_count = gf_list_count(ptr->Samples);",
          "",
          "[Removed Lines]",
          "9631:  GF_Err e;",
          "9638:  e = gf_isom_full_box_get_size(s);",
          "9639:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "9660:  u32 entry_count, i, j;",
          "9661:  u16 subsample_count;",
          "9666:  entry_count = gf_bs_read_u32(bs);",
          "9667:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "9663:  e = gf_isom_full_box_read(s, bs);",
          "9664:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "9721: {",
          "9722:  GF_Err e;",
          "9723:  GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;",
          "9727:  if (ptr->version==1) {",
          "9728:   ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);",
          "",
          "[Removed Lines]",
          "9724:  e = gf_isom_full_box_read(s, bs);",
          "9725:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "9754: GF_Err tfdt_Size(GF_Box *s)",
          "9755: {",
          "9757:  GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;",
          "9760:  if (ptr->baseMediaDecodeTime<=0xFFFFFFFF) {",
          "9761:   ptr->version = 0;",
          "9762:   ptr->size += 4;",
          "",
          "[Removed Lines]",
          "9756:  GF_Err e;",
          "9758:  e = gf_isom_full_box_get_size(s);",
          "9759:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "9815: GF_Err rvcc_Size(GF_Box *s)",
          "9816: {",
          "9818:  GF_RVCConfigurationBox *ptr = (GF_RVCConfigurationBox *)s;",
          "9821:  ptr->size += 2;",
          "9822:  if (! ptr->predefined_rvc_config) ptr->size += 2;",
          "9823:  return GF_OK;",
          "",
          "[Removed Lines]",
          "9817:  GF_Err e;",
          "9819:  e = gf_isom_box_get_size(s);",
          "9820:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "9843: {",
          "9844:  u32 i;",
          "9845:  GF_SampleGroupBox *ptr = (GF_SampleGroupBox *)s;",
          "9849:  ptr->grouping_type = gf_bs_read_u32(bs);",
          "9850:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Removed Lines]",
          "9846:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "9847:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "9891: GF_Err sbgp_Size(GF_Box *s)",
          "9892: {",
          "9894:  GF_SampleGroupBox *p = (GF_SampleGroupBox*)s;",
          "9897:  p->size += 8;",
          "9898:  if (p->grouping_type_parameter) p->version=1;",
          "",
          "[Removed Lines]",
          "9893:  GF_Err e;",
          "9895:  e = gf_isom_full_box_get_size(s);",
          "9896:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "10164: {",
          "10165:  u32 entry_count;",
          "10166:  GF_SampleGroupDescriptionBox *p = (GF_SampleGroupDescriptionBox *)s;",
          "10170:  p->grouping_type = gf_bs_read_u32(bs);",
          "10171:  ISOM_DECREASE_SIZE(p, 4);",
          "",
          "[Removed Lines]",
          "10167:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "10168:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "10232: {",
          "10233:  u32 i;",
          "10234:  GF_SampleGroupDescriptionBox *p = (GF_SampleGroupDescriptionBox *)s;",
          "10238:  p->size += 8;",
          "",
          "[Removed Lines]",
          "10235:  GF_Err e;",
          "10236:  e = gf_isom_full_box_get_size(s);",
          "10237:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "10276:  GF_Err e;",
          "10277:  GF_SampleAuxiliaryInfoSizeBox*ptr = (GF_SampleAuxiliaryInfoSizeBox*)s;",
          "10281:  if (ptr->flags & 1) {",
          "10282:   ptr->aux_info_type = gf_bs_read_u32(bs);",
          "10283:   ptr->aux_info_type_parameter = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "10279:  e = gf_isom_full_box_read(s, bs);",
          "10280:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "10327: GF_Err saiz_Size(GF_Box *s)",
          "10328: {",
          "10330:  GF_SampleAuxiliaryInfoSizeBox *ptr = (GF_SampleAuxiliaryInfoSizeBox*)s;",
          "10332:  if (ptr->aux_info_type || ptr->aux_info_type_parameter) {",
          "10333:   ptr->flags |= 1;",
          "10334:  }",
          "10338:  if (ptr->flags & 1) ptr->size += 8;",
          "10339:  ptr->size += 5;",
          "10340:  if (ptr->default_sample_info_size==0)  ptr->size += ptr->sample_count;",
          "",
          "[Removed Lines]",
          "10329:  GF_Err e;",
          "10336:  e = gf_isom_full_box_get_size(s);",
          "10337:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "10357:  GF_Err e;",
          "10358:  GF_SampleAuxiliaryInfoOffsetBox *ptr = (GF_SampleAuxiliaryInfoOffsetBox *)s;",
          "10362:  if (ptr->flags & 1) {",
          "10363:   ptr->aux_info_type = gf_bs_read_u32(bs);",
          "10364:   ptr->aux_info_type_parameter = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "10360:  e = gf_isom_full_box_read(s, bs);",
          "10361:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "10432: GF_Err saio_Size(GF_Box *s)",
          "10433: {",
          "10435:  GF_SampleAuxiliaryInfoOffsetBox *ptr = (GF_SampleAuxiliaryInfoOffsetBox*)s;",
          "10437:  if (ptr->aux_info_type || ptr->aux_info_type_parameter) {",
          "",
          "[Removed Lines]",
          "10434:  GF_Err e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "10441:   ptr->version = 1;",
          "10442:  }",
          "10446:  if (ptr->flags & 1) ptr->size += 8;",
          "10447:  ptr->size += 4;",
          "10448:  ptr->size += ((ptr->version==1) ? 8 : 4) * ptr->entry_count;",
          "",
          "[Removed Lines]",
          "10444:  e = gf_isom_full_box_get_size(s);",
          "10445:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "10460: {",
          "10461:  GF_Err e;",
          "10462:  GF_ProducerReferenceTimeBox *ptr = (GF_ProducerReferenceTimeBox *) s;",
          "10465:  ptr->refTrackID = gf_bs_read_u32(bs);",
          "10466:  ptr->ntp = gf_bs_read_u64(bs);",
          "10467:  if (ptr->version==0) {",
          "",
          "[Removed Lines]",
          "10463:  e = gf_isom_full_box_read(s, bs);",
          "10464:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "10475: GF_Box *prft_New()",
          "10476: {",
          "10477:  ISOM_DECL_BOX_ALLOC(GF_ProducerReferenceTimeBox, GF_ISOM_BOX_TYPE_PRFT);",
          "10479:  return (GF_Box *)tmp;",
          "10480: }",
          "",
          "[Removed Lines]",
          "10478:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "10502: GF_Err prft_Size(GF_Box *s)",
          "10503: {",
          "10505:  GF_ProducerReferenceTimeBox *ptr = (GF_ProducerReferenceTimeBox*)s;",
          "10510:  ptr->size += 4+8+ (ptr->version ? 8 : 4);",
          "10511:  return GF_OK;",
          "10512: }",
          "",
          "[Removed Lines]",
          "10504:  GF_Err e;",
          "10507:  e = gf_isom_full_box_get_size(s);",
          "10508:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "10561: GF_Err trgr_Size(GF_Box *s)",
          "10562: {",
          "10564:  GF_TrackGroupBox *ptr = (GF_TrackGroupBox *)s;",
          "10567:  return gf_isom_box_array_size(s, ptr->groups);",
          "10568: }",
          "",
          "[Removed Lines]",
          "10563:  GF_Err e;",
          "10565:  e = gf_isom_box_get_size(s);",
          "10566:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "10573: GF_Box *trgt_New()",
          "10574: {",
          "10575:  ISOM_DECL_BOX_ALLOC(GF_TrackGroupTypeBox, GF_ISOM_BOX_TYPE_TRGT);",
          "10577:  return (GF_Box *)tmp;",
          "10578: }",
          "",
          "[Removed Lines]",
          "10576:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "10587: GF_Err trgt_Read(GF_Box *s, GF_BitStream *bs)",
          "10588: {",
          "10589:  GF_TrackGroupTypeBox *ptr = (GF_TrackGroupTypeBox *)s;",
          "10591:  ptr->track_group_id = gf_bs_read_u32(bs);",
          "10592:  ISOM_DECREASE_SIZE(ptr, 4);",
          "10593:  return GF_OK;",
          "",
          "[Removed Lines]",
          "10590:  gf_isom_full_box_read(s, bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "10612: GF_Err trgt_Size(GF_Box *s)",
          "10613: {",
          "10615:  GF_TrackGroupBox *ptr = (GF_TrackGroupBox *)s;",
          "10618:  ptr->size+= 4;",
          "10619:  return GF_OK;",
          "10620: }",
          "",
          "[Removed Lines]",
          "10614:  GF_Err e;",
          "10616:  e = gf_isom_full_box_get_size(s);",
          "10617:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "10626: GF_Box *stvi_New()",
          "10627: {",
          "10628:  ISOM_DECL_BOX_ALLOC(GF_StereoVideoBox, GF_ISOM_BOX_TYPE_STVI);",
          "10630:  return (GF_Box *)tmp;",
          "10631: }",
          "",
          "[Removed Lines]",
          "10629:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "10641: GF_Err stvi_Read(GF_Box *s, GF_BitStream *bs)",
          "10642: {",
          "10643:  GF_StereoVideoBox *ptr = (GF_StereoVideoBox *)s;",
          "10645:  ISOM_DECREASE_SIZE(ptr, 12);",
          "10646:  gf_bs_read_int(bs, 30);",
          "10647:  ptr->single_view_allowed = gf_bs_read_int(bs, 2);",
          "",
          "[Removed Lines]",
          "10644:  gf_isom_full_box_read(s, bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "10676: GF_Err stvi_Size(GF_Box *s)",
          "10677: {",
          "10679:  GF_StereoVideoBox *ptr = (GF_StereoVideoBox *)s;",
          "10682:  ptr->size+= 12 + ptr->sit_len;",
          "10683:  return GF_OK;",
          "10684: }",
          "",
          "[Removed Lines]",
          "10678:  GF_Err e;",
          "10680:  e = gf_isom_full_box_get_size(s);",
          "10681:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "10690: GF_Box *fiin_New()",
          "10691: {",
          "10692:  ISOM_DECL_BOX_ALLOC(FDItemInformationBox, GF_ISOM_BOX_TYPE_FIIN);",
          "10694:  return (GF_Box *)tmp;",
          "10695: }",
          "",
          "[Removed Lines]",
          "10693:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "10729: GF_Err fiin_Read(GF_Box *s, GF_BitStream *bs)",
          "10730: {",
          "10731:  FDItemInformationBox *ptr = (FDItemInformationBox *)s;",
          "10733:  ISOM_DECREASE_SIZE(ptr, 2);",
          "10734:  gf_bs_read_u16(bs);",
          "10735:  return gf_isom_box_array_read(s, bs, fiin_AddBox);",
          "",
          "[Removed Lines]",
          "10732:  gf_isom_full_box_read(s, bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "10758: {",
          "10759:  GF_Err e;",
          "10760:  FDItemInformationBox *ptr = (FDItemInformationBox *)s;",
          "10763:  ptr->size+= 2;",
          "10764:  if (ptr->partition_entries) {",
          "10765:   e = gf_isom_box_array_size(s, ptr->partition_entries);",
          "",
          "[Removed Lines]",
          "10761:  e = gf_isom_full_box_get_size(s);",
          "10762:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "10853: {",
          "10854:  GF_Err e;",
          "10855:  FDPartitionEntryBox *ptr = (FDPartitionEntryBox *)s;",
          "10859:  if (ptr->blocks_and_symbols) {",
          "10860:   e = gf_isom_box_size((GF_Box *)ptr->blocks_and_symbols);",
          "",
          "[Removed Lines]",
          "10856:  e = gf_isom_box_get_size(s);",
          "10857:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "10883: GF_Box *fpar_New()",
          "10884: {",
          "10885:  ISOM_DECL_BOX_ALLOC(FilePartitionBox, GF_ISOM_BOX_TYPE_FPAR);",
          "10887:  return (GF_Box *)tmp;",
          "10888: }",
          "",
          "[Removed Lines]",
          "10886:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 226 ---",
          "[Context before]",
          "10920:  u32 i;",
          "10921:  GF_Err e;",
          "10922:  FilePartitionBox *ptr = (FilePartitionBox *)s;",
          "10924:  ISOM_DECREASE_SIZE(ptr, ((ptr->version ? 4 : 2) + 12) );",
          "10925:  ptr->itemID = gf_bs_read_int(bs, ptr->version ? 32 : 16);",
          "10926:  ptr->packet_payload_size = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "10923:  gf_isom_full_box_read(s, bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 227 ---",
          "[Context before]",
          "10983: GF_Err fpar_Size(GF_Box *s)",
          "10984: {",
          "10986:  FilePartitionBox *ptr = (FilePartitionBox *)s;",
          "10989:  ptr->size+= 13 + ptr->version ? 8 : 4;",
          "10990:  if (ptr->scheme_specific_info)",
          "10991:   ptr->size += strlen(ptr->scheme_specific_info);",
          "",
          "[Removed Lines]",
          "10985:  GF_Err e;",
          "10987:  e = gf_isom_full_box_get_size(s);",
          "10988:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 228 ---",
          "[Context before]",
          "11000: GF_Box *fecr_New()",
          "11001: {",
          "11002:  ISOM_DECL_BOX_ALLOC(FECReservoirBox, GF_ISOM_BOX_TYPE_FECR);",
          "11004:  return (GF_Box *)tmp;",
          "11005: }",
          "",
          "[Removed Lines]",
          "11003:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 229 ---",
          "[Context before]",
          "11016: {",
          "11017:  u32 i;",
          "11018:  FECReservoirBox *ptr = (FECReservoirBox *)s;",
          "11020:  ISOM_DECREASE_SIZE(ptr, (ptr->version ? 4 : 2) );",
          "11021:  ptr->nb_entries = gf_bs_read_int(bs, ptr->version ? 32 : 16);",
          "",
          "[Removed Lines]",
          "11019:  gf_isom_full_box_read(s, bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 230 ---",
          "[Context before]",
          "11052: GF_Err fecr_Size(GF_Box *s)",
          "11053: {",
          "11055:  FECReservoirBox *ptr = (FECReservoirBox *)s;",
          "11058:  ptr->size += (ptr->version ? 4 : 2) +  ptr->nb_entries * (ptr->version ? 8 : 6);",
          "11059:  return GF_OK;",
          "11060: }",
          "",
          "[Removed Lines]",
          "11054:  GF_Err e;",
          "11056:  e = gf_isom_full_box_get_size(s);",
          "11057:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 231 ---",
          "[Context before]",
          "11141: GF_Err segr_Size(GF_Box *s)",
          "11142: {",
          "11144:  u32 i;",
          "11145:  FDSessionGroupBox *ptr = (FDSessionGroupBox *)s;",
          "11148:  ptr->size += 2;",
          "11150:  for (i=0; i<ptr->num_session_groups; i++) {",
          "",
          "[Removed Lines]",
          "11143:  GF_Err e;",
          "11146:  e = gf_isom_box_get_size(s);",
          "11147:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 232 ---",
          "[Context before]",
          "11160: GF_Box *gitn_New()",
          "11161: {",
          "11162:  ISOM_DECL_BOX_ALLOC(GroupIdToNameBox, GF_ISOM_BOX_TYPE_GITN);",
          "11164:  return (GF_Box *)tmp;",
          "11165: }",
          "",
          "[Removed Lines]",
          "11163:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 233 ---",
          "[Context before]",
          "11181:  u32 i;",
          "11182:  GF_Err e;",
          "11183:  GroupIdToNameBox *ptr = (GroupIdToNameBox *)s;",
          "11185:  ISOM_DECREASE_SIZE(ptr, 2);",
          "11186:  ptr->nb_entries = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "11184:  gf_isom_full_box_read(s, bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 234 ---",
          "[Context before]",
          "11220: GF_Err gitn_Size(GF_Box *s)",
          "11221: {",
          "11223:  u32 i;",
          "11224:  GroupIdToNameBox *ptr = (GroupIdToNameBox *)s;",
          "11227:  ptr->size += 2;",
          "11229:  for (i=0; i<ptr->nb_entries; i++) {",
          "",
          "[Removed Lines]",
          "11222:  GF_Err e;",
          "11225:  e = gf_isom_full_box_get_size(s);",
          "11226:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 235 ---",
          "[Context before]",
          "11329: GF_Err fdpa_Size(GF_Box *s)",
          "11330: {",
          "11332:  u32 i;",
          "11333:  GF_FDpacketBox *ptr = (GF_FDpacketBox *)s;",
          "11336:  ptr->size += 5;",
          "11338:  for (i=0; i<ptr->header_ext_count; i++) {",
          "",
          "[Removed Lines]",
          "11331:  GF_Err e;",
          "11334:  e = gf_isom_box_get_size(s);",
          "11335:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 236 ---",
          "[Context before]",
          "11400: {",
          "11401:  GF_Err e;",
          "11402:  GF_ExtraDataBox *ptr = (GF_ExtraDataBox *) s;",
          "11405:  if (ptr->feci) {",
          "11406:   e = gf_isom_box_size((GF_Box *)ptr->feci);",
          "11407:   if (e) return e;",
          "",
          "[Removed Lines]",
          "11403:  e = gf_isom_box_get_size(s);",
          "11404:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 237 ---",
          "[Context before]",
          "11474: GF_Err fdsa_Size(GF_Box *s)",
          "11475: {",
          "11476:  GF_HintSample *ptr = (GF_HintSample*)s;",
          "11480:   e = gf_isom_box_size((GF_Box *)ptr->extra_data);",
          "11481:   if (e) return e;",
          "11482:   ptr->size += ptr->extra_data->size;",
          "",
          "[Removed Lines]",
          "11477:  GF_Err e = gf_isom_box_get_size(s);",
          "11478:  if (e) return e;",
          "11479:  if (ptr->extra_data) {",
          "",
          "[Added Lines]",
          "10978:  GF_Err e;",
          "10980:   if (ptr->extra_data) {",
          "",
          "---------------",
          "--- Hunk 238 ---",
          "[Context before]",
          "11501:  GF_Err e;",
          "11502:  u32 i;",
          "11503:  GF_TrickPlayBox *ptr = (GF_TrickPlayBox *) s;",
          "11506:  ptr->entry_count = (u32) ptr->size;",
          "11507:  ptr->entries = (GF_TrickPlayBoxEntry *) gf_malloc(ptr->entry_count * sizeof(GF_TrickPlayBoxEntry) );",
          "11508:  if (ptr->entries == NULL) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "11504:  e = gf_isom_full_box_read(s, bs);",
          "11505:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 239 ---",
          "[Context before]",
          "11517: GF_Box *trik_New()",
          "11518: {",
          "11519:  ISOM_DECL_BOX_ALLOC(GF_TrickPlayBox, GF_ISOM_BOX_TYPE_TRIK);",
          "11521:  return (GF_Box *)tmp;",
          "11522: }",
          "",
          "[Removed Lines]",
          "11520:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 240 ---",
          "[Context before]",
          "11542: GF_Err trik_Size(GF_Box *s)",
          "11543: {",
          "11545:  GF_TrickPlayBox *ptr = (GF_TrickPlayBox *) s;",
          "11548:  ptr->size += 8 * ptr->entry_count;",
          "11549:  return GF_OK;",
          "11550: }",
          "",
          "[Removed Lines]",
          "11544:  GF_Err e;",
          "11546:  e = gf_isom_full_box_get_size(s);",
          "11547:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 241 ---",
          "[Context before]",
          "11561: {",
          "11562:  GF_Err e;",
          "11563:  GF_BaseLocationBox *ptr = (GF_BaseLocationBox *) s;",
          "11566:  ISOM_DECREASE_SIZE(s, 256)",
          "11567:  gf_bs_read_data(bs, ptr->baseLocation, 256);",
          "11568:  ISOM_DECREASE_SIZE(s, 256)",
          "",
          "[Removed Lines]",
          "11564:  e = gf_isom_full_box_read(s, bs);",
          "11565:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 242 ---",
          "[Context before]",
          "11575: GF_Box *bloc_New()",
          "11576: {",
          "11577:  ISOM_DECL_BOX_ALLOC(GF_BaseLocationBox, GF_ISOM_BOX_TYPE_TRIK);",
          "11579:  return (GF_Box *)tmp;",
          "11580: }",
          "",
          "[Removed Lines]",
          "11578:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 243 ---",
          "[Context before]",
          "11600: GF_Err bloc_Size(GF_Box *s)",
          "11601: {",
          "11604:  s->size += 1024;",
          "11605:  return GF_OK;",
          "11606: }",
          "",
          "[Removed Lines]",
          "11602:  GF_Err e = gf_isom_full_box_get_size(s);",
          "11603:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 244 ---",
          "[Context before]",
          "11618: {",
          "11619:  GF_Err e;",
          "11620:  GF_AssetInformationBox *ptr = (GF_AssetInformationBox *) s;",
          "11623:  ISOM_DECREASE_SIZE(s, 4)",
          "11624:  ptr->profile_version = gf_bs_read_u32(bs);",
          "11625:  return gf_isom_read_null_terminated_string(s, bs, &ptr->APID);",
          "",
          "[Removed Lines]",
          "11621:  e = gf_isom_full_box_read(s, bs);",
          "11622:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 245 ---",
          "[Context before]",
          "11628: GF_Box *ainf_New()",
          "11629: {",
          "11630:  ISOM_DECL_BOX_ALLOC(GF_AssetInformationBox, GF_ISOM_BOX_TYPE_AINF);",
          "11632:  return (GF_Box *)tmp;",
          "11633: }",
          "",
          "[Removed Lines]",
          "11631:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 246 ---",
          "[Context before]",
          "11649: GF_Err ainf_Size(GF_Box *s)",
          "11650: {",
          "11651:  GF_AssetInformationBox *ptr = (GF_AssetInformationBox *) s;",
          "11654:  s->size += 4 +  strlen(ptr->APID) + 1;",
          "11655:  return GF_OK;",
          "11656: }",
          "",
          "[Removed Lines]",
          "11652:  GF_Err e = gf_isom_full_box_get_size(s);",
          "11653:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  GF_Err e;",
          "97:  GF_ProtectionSchemeInfoBox *ptr = (GF_ProtectionSchemeInfoBox *)s;",
          "98:  if (!s) return GF_BAD_PARAM;",
          "101:  e = gf_isom_box_size((GF_Box *) ptr->original_format);",
          "102:  if (e) return e;",
          "103:  ptr->size += ptr->original_format->size;",
          "",
          "[Removed Lines]",
          "99:  e = gf_isom_box_get_size(s);",
          "100:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: GF_Err frma_Size(GF_Box *s)",
          "148: {",
          "150:  GF_OriginalFormatBox *ptr = (GF_OriginalFormatBox *)s;",
          "154:  ptr->size += 4;",
          "155:  return GF_OK;",
          "156: }",
          "",
          "[Removed Lines]",
          "149:  GF_Err e;",
          "151:  if (!s) return GF_BAD_PARAM;",
          "152:  e = gf_isom_box_get_size(s);",
          "153:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: GF_Box *schm_New()",
          "161: {",
          "162:  ISOM_DECL_BOX_ALLOC(GF_SchemeTypeBox, GF_ISOM_BOX_TYPE_SCHM);",
          "164:  return (GF_Box *)tmp;",
          "165: }",
          "",
          "[Removed Lines]",
          "163:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176: {",
          "177:  GF_Err e;",
          "178:  GF_SchemeTypeBox *ptr = (GF_SchemeTypeBox *)s;",
          "181:  ptr->scheme_type = gf_bs_read_u32(bs);",
          "182:  ptr->scheme_version = gf_bs_read_u32(bs);",
          "183:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Removed Lines]",
          "179:  e = gf_isom_full_box_read(s, bs);",
          "180:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208: GF_Err schm_Size(GF_Box *s)",
          "209: {",
          "211:  GF_SchemeTypeBox *ptr = (GF_SchemeTypeBox *) s;",
          "212:  if (!s) return GF_BAD_PARAM;",
          "215:  ptr->size += 8;",
          "216:  if (ptr->flags & 0x000001) ptr->size += strlen(ptr->URI)+1;",
          "217:  return GF_OK;",
          "",
          "[Removed Lines]",
          "210:  GF_Err e;",
          "213:  e = gf_isom_full_box_get_size(s);",
          "214:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "330:  GF_Err e;",
          "331:  GF_SchemeInformationBox *ptr = (GF_SchemeInformationBox *)s;",
          "332:  if (!s) return GF_BAD_PARAM;",
          "336:  if (ptr->ikms) {",
          "337:   e = gf_isom_box_size((GF_Box *) ptr->ikms);",
          "",
          "[Removed Lines]",
          "333:  e = gf_isom_box_get_size(s);",
          "334:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "377: GF_Box *iKMS_New()",
          "378: {",
          "379:  ISOM_DECL_BOX_ALLOC(GF_ISMAKMSBox, GF_ISOM_BOX_TYPE_IKMS);",
          "381:  return (GF_Box *)tmp;",
          "382: }",
          "",
          "[Removed Lines]",
          "380:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "395:  u32 len;",
          "396:  GF_ISMAKMSBox *ptr = (GF_ISMAKMSBox *)s;",
          "400:  len = (u32) (ptr->size);",
          "401:  ptr->URI = (char*) gf_malloc(sizeof(char)*len);",
          "402:  if (!ptr->URI) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "398:  e = gf_isom_full_box_read(s, bs);",
          "399:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "419: GF_Err iKMS_Size(GF_Box *s)",
          "420: {",
          "422:  GF_ISMAKMSBox *ptr = (GF_ISMAKMSBox *)s;",
          "426:  ptr->size += strlen(ptr->URI)+1;",
          "427:  return GF_OK;",
          "428: }",
          "",
          "[Removed Lines]",
          "421:  GF_Err e;",
          "423:  if (!s) return GF_BAD_PARAM;",
          "424:  e = gf_isom_full_box_get_size(s);",
          "425:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "432: GF_Box *iSFM_New()",
          "433: {",
          "434:  ISOM_DECL_BOX_ALLOC(GF_ISMASampleFormatBox, GF_ISOM_BOX_TYPE_ISFM);",
          "436:  return (GF_Box *)tmp;",
          "437: }",
          "",
          "[Removed Lines]",
          "435:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "448: {",
          "449:  GF_Err e;",
          "450:  GF_ISMASampleFormatBox *ptr = (GF_ISMASampleFormatBox *)s;",
          "454:  ptr->selective_encryption = gf_bs_read_int(bs, 1);",
          "455:  gf_bs_read_int(bs, 7);",
          "456:  ptr->key_indicator_length = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "451:  if (ptr == NULL) return GF_BAD_PARAM;",
          "452:  e = gf_isom_full_box_read(s, bs);",
          "453:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "476: GF_Err iSFM_Size(GF_Box *s)",
          "477: {",
          "479:  GF_ISMASampleFormatBox *ptr = (GF_ISMASampleFormatBox *)s;",
          "483:  ptr->size += 3;",
          "484:  return GF_OK;",
          "485: }",
          "",
          "[Removed Lines]",
          "478:  GF_Err e;",
          "480:  if (!s) return GF_BAD_PARAM;",
          "481:  e = gf_isom_full_box_get_size(s);",
          "482:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "521: GF_Err iSLT_Size(GF_Box *s)",
          "522: {",
          "525:  s->size += 8;",
          "526:  return GF_OK;",
          "527: }",
          "",
          "[Removed Lines]",
          "523:  GF_Err e = gf_isom_box_get_size(s);",
          "524:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "533: GF_Box *ohdr_New()",
          "534: {",
          "535:  ISOM_DECL_BOX_ALLOC(GF_OMADRMCommonHeaderBox, GF_ISOM_BOX_TYPE_OHDR);",
          "537:  tmp->other_boxes = gf_list_new();",
          "538:  return (GF_Box *)tmp;",
          "539: }",
          "",
          "[Removed Lines]",
          "536:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "558:  u16 cid_len, ri_len;",
          "559:  GF_Err e;",
          "560:  GF_OMADRMCommonHeaderBox *ptr = (GF_OMADRMCommonHeaderBox*)s;",
          "564:  ptr->EncryptionMethod = gf_bs_read_u8(bs);",
          "565:  ptr->PaddingScheme = gf_bs_read_u8(bs);",
          "566:  ptr->PlaintextLength = gf_bs_read_u64(bs);",
          "",
          "[Removed Lines]",
          "561:  if (ptr == NULL) return GF_BAD_PARAM;",
          "562:  e = gf_isom_full_box_read(s, bs);",
          "563:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "624: GF_Err ohdr_Size(GF_Box *s)",
          "625: {",
          "627:  GF_OMADRMCommonHeaderBox *ptr = (GF_OMADRMCommonHeaderBox *)s;",
          "631:  ptr->size += 1+1+8+2+2+2;",
          "632:  if (ptr->ContentID) ptr->size += strlen(ptr->ContentID);",
          "633:  if (ptr->RightsIssuerURL) ptr->size += strlen(ptr->RightsIssuerURL);",
          "",
          "[Removed Lines]",
          "626:  GF_Err e;",
          "628:  if (!s) return GF_BAD_PARAM;",
          "629:  e = gf_isom_full_box_get_size(s);",
          "630:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "641: GF_Box *grpi_New()",
          "642: {",
          "643:  ISOM_DECL_BOX_ALLOC(GF_OMADRMGroupIDBox, GF_ISOM_BOX_TYPE_GRPI);",
          "645:  return (GF_Box *)tmp;",
          "646: }",
          "",
          "[Removed Lines]",
          "644:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "659:  u16 gid_len;",
          "660:  GF_Err e;",
          "661:  GF_OMADRMGroupIDBox *ptr = (GF_OMADRMGroupIDBox*)s;",
          "665:  gid_len = gf_bs_read_u16(bs);",
          "666:  ptr->GKEncryptionMethod = gf_bs_read_u8(bs);",
          "667:  ptr->GKLength = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "662:  if (ptr == NULL) return GF_BAD_PARAM;",
          "663:  e = gf_isom_full_box_read(s, bs);",
          "664:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "701: GF_Err grpi_Size(GF_Box *s)",
          "702: {",
          "704:  GF_OMADRMGroupIDBox *ptr = (GF_OMADRMGroupIDBox *)s;",
          "708:  ptr->size += 2+2+1 + ptr->GKLength;",
          "709:  if (ptr->GroupID) ptr->size += strlen(ptr->GroupID);",
          "710:  return GF_OK;",
          "",
          "[Removed Lines]",
          "703:  GF_Err e;",
          "705:  if (!s) return GF_BAD_PARAM;",
          "706:  e = gf_isom_full_box_get_size(s);",
          "707:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "745: GF_Err mdri_Size(GF_Box *s)",
          "746: {",
          "753:  return GF_OK;",
          "754: }",
          "",
          "[Removed Lines]",
          "747:  GF_Err e;",
          "749:  if (!s) return GF_BAD_PARAM;",
          "750:  e = gf_isom_box_get_size(s);",
          "751:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "759: GF_Box *odtt_New()",
          "760: {",
          "761:  ISOM_DECL_BOX_ALLOC(GF_OMADRMTransactionTrackingBox, GF_ISOM_BOX_TYPE_ODTT);",
          "763:  return (GF_Box *)tmp;",
          "764: }",
          "",
          "[Removed Lines]",
          "762:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "773: {",
          "774:  GF_Err e;",
          "775:  GF_OMADRMTransactionTrackingBox *ptr = (GF_OMADRMTransactionTrackingBox *)s;",
          "779:  gf_bs_read_data(bs, ptr->TransactionID, 16);",
          "780:  ISOM_DECREASE_SIZE(ptr, 16);",
          "781:  return GF_OK;",
          "",
          "[Removed Lines]",
          "776:  if (ptr == NULL) return GF_BAD_PARAM;",
          "777:  e = gf_isom_full_box_read(s, bs);",
          "778:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "796: GF_Err odtt_Size(GF_Box *s)",
          "797: {",
          "802:  s->size += 16;",
          "803:  return GF_OK;",
          "804: }",
          "",
          "[Removed Lines]",
          "798:  GF_Err e;",
          "799:  if (!s) return GF_BAD_PARAM;",
          "800:  e = gf_isom_full_box_get_size(s);",
          "801:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "810: GF_Box *odrb_New()",
          "811: {",
          "812:  ISOM_DECL_BOX_ALLOC(GF_OMADRMRightsObjectBox, GF_ISOM_BOX_TYPE_ODRB);",
          "814:  return (GF_Box *)tmp;",
          "815: }",
          "",
          "[Removed Lines]",
          "813:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "825: {",
          "826:  GF_Err e;",
          "827:  GF_OMADRMRightsObjectBox *ptr = (GF_OMADRMRightsObjectBox *)s;",
          "831:  ptr->oma_ro_size = (u32) ptr->size;",
          "832:  ptr->oma_ro = (char*) gf_malloc(sizeof(char)*ptr->oma_ro_size);",
          "833:  gf_bs_read_data(bs, ptr->oma_ro, ptr->oma_ro_size);",
          "",
          "[Removed Lines]",
          "828:  if (ptr == NULL) return GF_BAD_PARAM;",
          "829:  e = gf_isom_full_box_read(s, bs);",
          "830:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "850: GF_Err odrb_Size(GF_Box *s)",
          "851: {",
          "853:  GF_OMADRMRightsObjectBox *ptr = (GF_OMADRMRightsObjectBox *)s;",
          "857:  s->size += ptr->oma_ro_size;",
          "858:  return GF_OK;",
          "859: }",
          "",
          "[Removed Lines]",
          "852:  GF_Err e;",
          "854:  if (!s) return GF_BAD_PARAM;",
          "855:  e = gf_isom_full_box_get_size(s);",
          "856:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "866: GF_Box *odkm_New()",
          "867: {",
          "868:  ISOM_DECL_BOX_ALLOC(GF_OMADRMKMSBox, GF_ISOM_BOX_TYPE_ODKM);",
          "870:  return (GF_Box *)tmp;",
          "871: }",
          "",
          "[Removed Lines]",
          "869:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "899: GF_Err odkm_Read(GF_Box *s, GF_BitStream *bs)",
          "900: {",
          "905:  return gf_isom_box_array_read(s, bs, odkm_Add);",
          "906: }",
          "",
          "[Removed Lines]",
          "901:  GF_Err e;",
          "902:  if (s == NULL) return GF_BAD_PARAM;",
          "903:  e = gf_isom_full_box_read(s, bs);",
          "904:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "928: {",
          "929:  GF_Err e;",
          "930:  GF_OMADRMKMSBox *ptr = (GF_OMADRMKMSBox *)s;",
          "934:  if (ptr->hdr) {",
          "935:   e = gf_isom_box_size((GF_Box*)ptr->hdr);",
          "936:   if (e) return e;",
          "",
          "[Removed Lines]",
          "931:  if (!s) return GF_BAD_PARAM;",
          "932:  e = gf_isom_full_box_get_size(s);",
          "933:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "968:  GF_Err e;",
          "969:  GF_ProtectionSystemHeaderBox *ptr = (GF_ProtectionSystemHeaderBox *)s;",
          "974:  gf_bs_read_data(bs, (char *) ptr->SystemID, 16);",
          "975:  ISOM_DECREASE_SIZE(ptr, 16);",
          "976:  if (ptr->version > 0) {",
          "",
          "[Removed Lines]",
          "971:  e = gf_isom_full_box_read(s, bs);",
          "972:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1023: GF_Err pssh_Size(GF_Box *s)",
          "1024: {",
          "1026:  GF_ProtectionSystemHeaderBox *ptr = (GF_ProtectionSystemHeaderBox*)s;",
          "1028:  if (ptr->KID_count && !ptr->version) {",
          "1029:   ptr->version = 1;",
          "1030:  }",
          "1035:  ptr->size += 16;",
          "1036:  if (ptr->version) ptr->size += 4 + 16*ptr->KID_count;",
          "1037:  ptr->size += 4 + (ptr->private_data ? ptr->private_data_size : 0);",
          "",
          "[Removed Lines]",
          "1025:  GF_Err e;",
          "1032:  e = gf_isom_full_box_get_size(s);",
          "1033:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1056:  GF_Err e;",
          "1057:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;",
          "1062:  gf_bs_read_u8(bs); //reserved",
          "1063:  if (!ptr->version) {",
          "1064:   gf_bs_read_u8(bs); //reserved",
          "",
          "[Removed Lines]",
          "1059:  e = gf_isom_full_box_read(s, bs);",
          "1060:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1111: GF_Err tenc_Size(GF_Box *s)",
          "1112: {",
          "1114:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;",
          "1117:  ptr->size += 20;",
          "1118:  if ((ptr->isProtected == 1) && !ptr->Per_Sample_IV_Size) {",
          "1119:   ptr->size += 1 + ptr->constant_IV_size;",
          "",
          "[Removed Lines]",
          "1113:  GF_Err e;",
          "1115:  e = gf_isom_full_box_get_size(s);",
          "1116:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1172: GF_Err piff_tenc_Size(GF_Box *s)",
          "1173: {",
          "1175:  GF_PIFFTrackEncryptionBox *ptr = (GF_PIFFTrackEncryptionBox*)s;",
          "1178:  ptr->size += 24;",
          "1179:  return GF_OK;",
          "1180: }",
          "",
          "[Removed Lines]",
          "1174:  GF_Err e;",
          "1176:  e = gf_isom_box_get_size(s);",
          "1177:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1347: GF_Err piff_psec_Size(GF_Box *s)",
          "1348: {",
          "1349:  u32 i, sample_count;",
          "1351:  GF_PIFFSampleEncryptionBox *ptr = (GF_PIFFSampleEncryptionBox*)s;",
          "1354:  ptr->size += 4;",
          "1355:  if (ptr->flags & 1) {",
          "1356:   ptr->size += 20;",
          "",
          "[Removed Lines]",
          "1350:  GF_Err e;",
          "1352:  e = gf_isom_box_get_size(s);",
          "1353:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1386:  GF_Err e;",
          "1387:  GF_PIFFProtectionSystemHeaderBox *ptr = (GF_PIFFProtectionSystemHeaderBox*)s;",
          "1392:  gf_bs_read_data(bs, (char *) ptr->SystemID, 16);",
          "1393:  ptr->private_data_size = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "1389:  e = gf_isom_full_box_read(s, bs);",
          "1390:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1418: {",
          "1419:  GF_Err e;",
          "1420:  GF_PIFFProtectionSystemHeaderBox *ptr = (GF_PIFFProtectionSystemHeaderBox*)s;",
          "1423:  ptr->size += 24 + ptr->private_data_size;",
          "1424:  return GF_OK;",
          "1425: }",
          "",
          "[Removed Lines]",
          "1421:  e = gf_isom_box_get_size(s);",
          "1422:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1556:  u32 i;",
          "1557:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox*)s;",
          "1564:  sample_count = gf_list_count(ptr->samp_aux_info);",
          "1565:  if (sample_count) {",
          "1566:   for (i = 0; i < sample_count; i++) {",
          "",
          "[Removed Lines]",
          "1559:  e = gf_isom_box_get_size(s);",
          "1560:  if (e) return e;",
          "1561:  ptr->size += 4;",
          "1563:  ptr->size += 4;",
          "",
          "[Added Lines]",
          "1467:  ptr->size += 4; //version and flags",
          "1469:  ptr->size += 4; //sample count",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1614: GF_Err adkm_Read(GF_Box *s, GF_BitStream *bs)",
          "1615: {",
          "1619:  return gf_isom_box_array_read(s, bs, adkm_AddBox);",
          "1620: }",
          "",
          "[Removed Lines]",
          "1616:  GF_Err e;",
          "1617:  e = gf_isom_full_box_read(s, bs);",
          "1618:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1642:  GF_Err e;",
          "1643:  GF_AdobeDRMKeyManagementSystemBox *ptr = (GF_AdobeDRMKeyManagementSystemBox *)s;",
          "1644:  if (!s) return GF_BAD_PARAM;",
          "1647:  e = gf_isom_box_size((GF_Box *) ptr->header);",
          "1648:  if (e) return e;",
          "1649:  ptr->size += ptr->header->size;",
          "",
          "[Removed Lines]",
          "1645:  e = gf_isom_full_box_get_size(s);",
          "1646:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1689: GF_Err ahdr_Read(GF_Box *s, GF_BitStream *bs)",
          "1690: {",
          "1694:  return gf_isom_box_array_read(s, bs, ahdr_AddBox);",
          "1695: }",
          "",
          "[Removed Lines]",
          "1691:  GF_Err e;",
          "1692:  e = gf_isom_full_box_read(s, bs);",
          "1693:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1713:  GF_Err e;",
          "1714:  GF_AdobeDRMHeaderBox *ptr = (GF_AdobeDRMHeaderBox *)s;",
          "1715:  if (!s) return GF_BAD_PARAM;",
          "1718:  e = gf_isom_box_size((GF_Box *) ptr->std_enc_params);",
          "1719:  if (e) return e;",
          "1720:  ptr->size += ptr->std_enc_params->size;",
          "",
          "[Removed Lines]",
          "1716:  e = gf_isom_full_box_get_size(s);",
          "1717:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1761: GF_Err aprm_Read(GF_Box *s, GF_BitStream *bs)",
          "1762: {",
          "1766:  return gf_isom_box_array_read(s, bs, aprm_AddBox);",
          "1767: }",
          "",
          "[Removed Lines]",
          "1763:  GF_Err e;",
          "1764:  e = gf_isom_full_box_read(s, bs);",
          "1765:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1789:  GF_Err e;",
          "1790:  GF_AdobeStdEncryptionParamsBox *ptr = (GF_AdobeStdEncryptionParamsBox *)s;",
          "1791:  if (!s) return GF_BAD_PARAM;",
          "1794:  e = gf_isom_box_size((GF_Box *) ptr->enc_info);",
          "1795:  if (e) return e;",
          "1796:  ptr->size += ptr->enc_info->size;",
          "",
          "[Removed Lines]",
          "1792:  e = gf_isom_full_box_get_size(s);",
          "1793:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1823:  GF_AdobeEncryptionInfoBox *ptr = (GF_AdobeEncryptionInfoBox*)s;",
          "1824:  u32 len;",
          "1829:  len = (u32) ptr->size - 1;",
          "1830:  if (len) {",
          "1831:   if (ptr->enc_algo) return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "1826:  e = gf_isom_full_box_read(s, bs);",
          "1827:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1858: {",
          "1859:  GF_Err e;",
          "1860:  GF_AdobeEncryptionInfoBox *ptr = (GF_AdobeEncryptionInfoBox*)s;",
          "1863:  if (ptr->enc_algo)",
          "1864:   ptr->size += strlen(ptr->enc_algo) + 1;",
          "1865:  ptr->size += 1; //KeyLength",
          "",
          "[Removed Lines]",
          "1861:  e = gf_isom_full_box_get_size(s);",
          "1862:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1900: GF_Err akey_Read(GF_Box *s, GF_BitStream *bs)",
          "1901: {",
          "1906:  return gf_isom_box_array_read(s, bs, akey_AddBox);",
          "1907: }",
          "",
          "[Removed Lines]",
          "1902:  GF_Err e;",
          "1903:  e = gf_isom_full_box_read(s, bs);",
          "1904:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1925:  GF_Err e;",
          "1926:  GF_AdobeKeyInfoBox *ptr = (GF_AdobeKeyInfoBox *)s;",
          "1927:  if (!s) return GF_BAD_PARAM;",
          "1930:  e = gf_isom_box_size((GF_Box *) ptr->params);",
          "1931:  if (e) return e;",
          "1932:  ptr->size += ptr->params->size;",
          "",
          "[Removed Lines]",
          "1928:  e = gf_isom_full_box_get_size(s);",
          "1929:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1983: GF_Err flxs_Size(GF_Box *s)",
          "1984: {",
          "1986:  GF_AdobeFlashAccessParamsBox *ptr = (GF_AdobeFlashAccessParamsBox*)s;",
          "1989:  if (ptr->metadata)",
          "1990:   ptr->size += strlen(ptr->metadata) + 1;",
          "1991:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1985:  GF_Err e;",
          "1987:  e = gf_isom_box_get_size(s);",
          "1988:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2008:  GF_Err e;",
          "2009:  GF_AdobeDRMAUFormatBox *ptr = (GF_AdobeDRMAUFormatBox*)s;",
          "2014:  ptr->selective_enc = gf_bs_read_u8(bs);",
          "2015:  gf_bs_read_u8(bs);//resersed",
          "2016:  ptr->IV_length = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "2011:  e = gf_isom_full_box_read(s, bs);",
          "2012:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2038: {",
          "2039:  GF_Err e;",
          "2040:  GF_AdobeDRMAUFormatBox *ptr = (GF_AdobeDRMAUFormatBox*)s;",
          "2043:  ptr->size += 3;",
          "2044:  return GF_OK;",
          "2045: }",
          "",
          "[Removed Lines]",
          "2041:  e = gf_isom_full_box_get_size(s);",
          "2042:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c": [
          "File: src/isomedia/box_code_meta.c -> src/isomedia/box_code_meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: GF_Box *meta_New()",
          "31: {",
          "32:  ISOM_DECL_BOX_ALLOC(GF_MetaBox, GF_ISOM_BOX_TYPE_META);",
          "34:  tmp->other_boxes = gf_list_new();",
          "35:  return (GF_Box *)tmp;",
          "36: }",
          "39: {",
          "40:  GF_MetaBox *ptr = (GF_MetaBox *)s;",
          "41:  if (ptr == NULL) return;",
          "42:  gf_isom_box_del((GF_Box *)ptr->handler);",
          "43:  if (ptr->primary_resource) gf_isom_box_del((GF_Box *)ptr->primary_resource);",
          "44:  if (ptr->file_locations) gf_isom_box_del((GF_Box *)ptr->file_locations);",
          "45:  if (ptr->item_locations) gf_isom_box_del((GF_Box *)ptr->item_locations);",
          "46:  if (ptr->protections) gf_isom_box_del((GF_Box *)ptr->protections);",
          "47:  if (ptr->item_infos) gf_isom_box_del((GF_Box *)ptr->item_infos);",
          "48:  if (ptr->IPMP_control) gf_isom_box_del((GF_Box *)ptr->IPMP_control);",
          "49:  if (ptr->item_refs) gf_isom_box_del((GF_Box *)ptr->item_refs);",
          "50:  if (ptr->item_props) gf_isom_box_del((GF_Box *)ptr->item_props);",
          "52: }",
          "54: GF_Err meta_AddBox(GF_Box *s, GF_Box *a)",
          "55: {",
          "56:  GF_MetaBox *ptr = (GF_MetaBox *)s;",
          "",
          "[Removed Lines]",
          "33:  gf_isom_full_box_init((GF_Box *)tmp);",
          "38: void meta_del(GF_Box *s)",
          "51:  gf_free(ptr);",
          "",
          "[Added Lines]",
          "37: void meta_reset(GF_Box *s)",
          "43:  ptr->handler = NULL;",
          "45:  ptr->primary_resource = NULL;",
          "47:  ptr->file_locations = NULL;",
          "49:  ptr->item_locations = NULL;",
          "51:  ptr->protections = NULL;",
          "53:  ptr->item_infos = NULL;",
          "55:  ptr->IPMP_control = NULL;",
          "57:  ptr->item_refs = NULL;",
          "59:  ptr->item_props = NULL;",
          "60:  if (ptr->other_boxes) gf_isom_box_array_del(ptr->other_boxes);",
          "61:  ptr->other_boxes = NULL;",
          "62: }",
          "64: void meta_del(GF_Box *s)",
          "65: {",
          "66:  meta_reset(s);",
          "67:  gf_free(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: GF_Err meta_Read(GF_Box *s, GF_BitStream *bs)",
          "101: {",
          "108:  }",
          "110: }",
          "112: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "102:  u32 next_size = gf_bs_peek_bits(bs, 32, 4);",
          "103:  GF_Err e;",
          "105:  if (next_size<s->size) {",
          "106:   e = gf_isom_full_box_read(s, bs);",
          "107:   if (e) return e;",
          "109:  return gf_isom_box_array_read(s, bs, meta_AddBox);",
          "",
          "[Added Lines]",
          "119:  u64 pos = gf_bs_get_position(bs);",
          "120:  u32 size = s->size;",
          "121:  GF_Err e = gf_isom_box_array_read(s, bs, meta_AddBox);",
          "123:  if (e && (pos>4) ) {",
          "124:   gf_bs_seek(bs, pos-4);",
          "125:   meta_reset(s);",
          "126:   s->size = size+4;",
          "127:   e = gf_isom_box_array_read(s, bs, meta_AddBox);",
          "129:  return e;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:  GF_Err e;",
          "162:  GF_MetaBox *ptr = (GF_MetaBox *)s;",
          "163:  if (!s) return GF_BAD_PARAM;",
          "166:  if (ptr->handler) {",
          "167:   e = gf_isom_box_size((GF_Box *) ptr->handler);",
          "168:   if (e) return e;",
          "",
          "[Removed Lines]",
          "164:  e = gf_isom_full_box_get_size(s);",
          "165:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215: GF_Box *xml_New()",
          "216: {",
          "217:  ISOM_DECL_BOX_ALLOC(GF_XMLBox, GF_ISOM_BOX_TYPE_XML);",
          "219:  return (GF_Box *)tmp;",
          "220: }",
          "",
          "[Removed Lines]",
          "218:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230: GF_Err xml_Read(GF_Box *s, GF_BitStream *bs)",
          "231: {",
          "233:  GF_XMLBox *ptr = (GF_XMLBox *)s;",
          "237:  return gf_isom_read_null_terminated_string(s, bs, &ptr->xml);",
          "238: }",
          "",
          "[Removed Lines]",
          "232:  GF_Err e;",
          "234:  if (ptr == NULL) return GF_BAD_PARAM;",
          "235:  e = gf_isom_full_box_read(s, bs);",
          "236:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "255:  GF_Err e;",
          "256:  GF_XMLBox *ptr = (GF_XMLBox *)s;",
          "257:  if (!s) return GF_BAD_PARAM;",
          "260:  ptr->size += strlen(ptr->xml)+1;",
          "261:  return GF_OK;",
          "262: }",
          "",
          "[Removed Lines]",
          "258:  e = gf_isom_full_box_get_size(s);",
          "259:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265: GF_Box *bxml_New()",
          "266: {",
          "267:  ISOM_DECL_BOX_ALLOC(GF_BinaryXMLBox, GF_ISOM_BOX_TYPE_BXML);",
          "269:  return (GF_Box *)tmp;",
          "270: }",
          "",
          "[Removed Lines]",
          "268:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "281: {",
          "282:  GF_Err e;",
          "283:  GF_BinaryXMLBox *ptr = (GF_BinaryXMLBox *)s;",
          "286:  ptr->data_length = (u32)(ptr->size);",
          "287:  ptr->data = (char*)gf_malloc(sizeof(char)*ptr->data_length);",
          "288:  if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "284:  e = gf_isom_full_box_read(s, bs);",
          "285:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "307:  GF_Err e;",
          "308:  GF_BinaryXMLBox *ptr = (GF_BinaryXMLBox *)s;",
          "309:  if (!s) return GF_BAD_PARAM;",
          "312:  ptr->size += ptr->data_length;",
          "313:  return GF_OK;",
          "314: }",
          "",
          "[Removed Lines]",
          "310:  e = gf_isom_full_box_get_size(s);",
          "311:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "317: GF_Box *iloc_New()",
          "318: {",
          "319:  ISOM_DECL_BOX_ALLOC(GF_ItemLocationBox, GF_ISOM_BOX_TYPE_ILOC);",
          "321:  tmp->location_entries = gf_list_new();",
          "322:  return (GF_Box *)tmp;",
          "323: }",
          "",
          "[Removed Lines]",
          "320:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "353:  GF_Err e;",
          "354:  u32 item_count, extent_count, i, j;",
          "355:  GF_ItemLocationBox *ptr = (GF_ItemLocationBox *)s;",
          "358:  ptr->offset_size = gf_bs_read_int(bs, 4);",
          "359:  ptr->length_size = gf_bs_read_int(bs, 4);",
          "360:  ptr->base_offset_size = gf_bs_read_int(bs, 4);",
          "",
          "[Removed Lines]",
          "356:  e = gf_isom_full_box_read(s, bs);",
          "357:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "465:  u32 i, item_count, extent_count;",
          "466:  GF_ItemLocationBox *ptr = (GF_ItemLocationBox *)s;",
          "467:  if (!s) return GF_BAD_PARAM;",
          "470:  if (ptr->index_size) {",
          "471:   ptr->version = 1;",
          "472:  }",
          "",
          "[Removed Lines]",
          "468:  e = gf_isom_full_box_get_size(s);",
          "469:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "503: GF_Box *pitm_New()",
          "504: {",
          "505:  ISOM_DECL_BOX_ALLOC(GF_PrimaryItemBox, GF_ISOM_BOX_TYPE_PITM);",
          "507:  return (GF_Box *)tmp;",
          "508: }",
          "",
          "[Removed Lines]",
          "506:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "518: {",
          "519:  GF_Err e;",
          "520:  GF_PrimaryItemBox *ptr = (GF_PrimaryItemBox *)s;",
          "523:  ptr->item_ID = gf_bs_read_u16(bs);",
          "524:  return GF_OK;",
          "525: }",
          "",
          "[Removed Lines]",
          "521:  e = gf_isom_full_box_read(s, bs);",
          "522:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "541:  GF_Err e;",
          "542:  GF_ItemLocationBox *ptr = (GF_ItemLocationBox *)s;",
          "543:  if (!s) return GF_BAD_PARAM;",
          "546:  ptr->size += 2;",
          "547:  return GF_OK;",
          "548: }",
          "",
          "[Removed Lines]",
          "544:  e = gf_isom_full_box_get_size(s);",
          "545:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "551: GF_Box *ipro_New()",
          "552: {",
          "553:  ISOM_DECL_BOX_ALLOC(GF_ItemProtectionBox, GF_ISOM_BOX_TYPE_IPRO);",
          "555:  tmp->protection_information = gf_list_new();",
          "556:  return (GF_Box *)tmp;",
          "557: }",
          "",
          "[Removed Lines]",
          "554:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "580: }",
          "581: GF_Err ipro_Read(GF_Box *s, GF_BitStream *bs)",
          "582: {",
          "586:  return gf_isom_box_array_read(s, bs, ipro_AddBox);",
          "587: }",
          "",
          "[Removed Lines]",
          "583:  GF_Err e;",
          "584:  e = gf_isom_full_box_read(s, bs);",
          "585:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "613:  GF_Err e;",
          "614:  GF_ItemProtectionBox *ptr = (GF_ItemProtectionBox *)s;",
          "615:  if (!s) return GF_BAD_PARAM;",
          "618:  ptr->size += 2;",
          "619:  if ((count = gf_list_count(ptr->protection_information))) {",
          "620:   for (i = 0; i < count; i++) {",
          "",
          "[Removed Lines]",
          "616:  e = gf_isom_full_box_get_size(s);",
          "617:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "631: GF_Box *infe_New()",
          "632: {",
          "633:  ISOM_DECL_BOX_ALLOC(GF_ItemInfoEntryBox, GF_ISOM_BOX_TYPE_INFE);",
          "635:  return (GF_Box *)tmp;",
          "636: }",
          "",
          "[Removed Lines]",
          "634:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "652:  char *buf;",
          "653:  u32 buf_len, i, string_len, string_start;",
          "654:  GF_ItemInfoEntryBox *ptr = (GF_ItemInfoEntryBox *)s;",
          "659:  ptr->item_ID = gf_bs_read_u16(bs);",
          "660:  ptr->item_protection_index = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "655:  if (ptr == NULL) return GF_BAD_PARAM;",
          "656:  e = gf_isom_full_box_read(s, bs);",
          "657:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "745: GF_Err infe_Size(GF_Box *s)",
          "746: {",
          "748:  GF_ItemInfoEntryBox *ptr = (GF_ItemInfoEntryBox *)s;",
          "749:  if (!s) return GF_BAD_PARAM;",
          "752:  if (ptr->item_type) {",
          "753:   ptr->version = 2;",
          "754:   if (ptr->item_ID > 0xFFFF) {",
          "",
          "[Removed Lines]",
          "747:  GF_Err e;",
          "750:  e = gf_isom_full_box_get_size(s);",
          "751:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "782: GF_Box *iinf_New()",
          "783: {",
          "784:  ISOM_DECL_BOX_ALLOC(GF_ItemInfoBox, GF_ISOM_BOX_TYPE_IINF);",
          "786:  tmp->item_infos = gf_list_new();",
          "787:  return (GF_Box *)tmp;",
          "788: }",
          "",
          "[Removed Lines]",
          "785:  gf_isom_full_box_init((GF_Box *)tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "817:  GF_Err e;",
          "818:  GF_ItemInfoBox *ptr = (GF_ItemInfoBox *)s;",
          "822:  if (ptr->version == 0) {",
          "823:   ISOM_DECREASE_SIZE(s, 2)",
          "824:   gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "820:  e = gf_isom_full_box_read(s, bs);",
          "821:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "853:  GF_Err e;",
          "854:  GF_ItemInfoBox *ptr = (GF_ItemInfoBox *)s;",
          "855:  if (!s) return GF_BAD_PARAM;",
          "858:  ptr->size += 2;",
          "859:  if ((count = gf_list_count(ptr->item_infos))) {",
          "860:   gf_isom_box_array_size(s, ptr->item_infos);",
          "",
          "[Removed Lines]",
          "856:  e = gf_isom_full_box_get_size(s);",
          "857:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "887: GF_Err iref_Read(GF_Box *s, GF_BitStream *bs)",
          "888: {",
          "892:  return gf_isom_box_array_read_ex(s, bs, iref_AddBox, s->type);",
          "893: }",
          "",
          "[Removed Lines]",
          "889:  GF_Err e;",
          "890:  e = gf_isom_full_box_read(s, bs);",
          "891:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "924:  u32 count, i;",
          "925:  GF_ItemReferenceBox *ptr = (GF_ItemReferenceBox *)s;",
          "926:  if (!s) return GF_BAD_PARAM;",
          "929:  count = gf_list_count(ptr->references);",
          "930:  for (i = 0; i < count; i++) {",
          "931:   GF_Box *a = (GF_Box *)gf_list_get(ptr->references, i);",
          "",
          "[Removed Lines]",
          "927:  e = gf_isom_full_box_get_size(s);",
          "928:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "995: GF_Err ireftype_Size(GF_Box *s)",
          "996: {",
          "998:  GF_ItemReferenceTypeBox *ptr = (GF_ItemReferenceTypeBox *)s;",
          "1001:  ptr->size += 4 + (ptr->reference_count * sizeof(u16));",
          "1002:  return GF_OK;",
          "1003: }",
          "",
          "[Removed Lines]",
          "997:  GF_Err e;",
          "999:  e = gf_isom_box_get_size(s);",
          "1000:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:  return GF_OK;",
          "137: }",
          "150: GF_Err reftype_dump(GF_Box *a, FILE * trace)",
          "151: {",
          "152:  u32 i;",
          "",
          "[Removed Lines]",
          "141: GF_Err gf_full_box_dump(GF_Box *a, FILE * trace)",
          "142: {",
          "143:  GF_FullBox *p;",
          "144:  p = (GF_FullBox *)a;",
          "145:  fprintf(trace, \"Version=\\\"%d\\\" Flags=\\\"0x%X\\\" \", p->version, p->flags);",
          "146:  return GF_OK;",
          "147: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  p = (GF_MovieHeaderBox *) a;",
          "239:  gf_isom_box_dump_start(a, \"MovieHeaderBox\", trace);",
          "241:  fprintf(trace, \"CreationTime=\\\"\"LLD\"\\\" \", LLD_CAST p->creationTime);",
          "242:  fprintf(trace, \"ModificationTime=\\\"\"LLD\"\\\" \", LLD_CAST p->modificationTime);",
          "243:  fprintf(trace, \"TimeScale=\\\"%d\\\" \", p->timeScale);",
          "",
          "[Removed Lines]",
          "240:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:  p = (GF_MediaHeaderBox *)a;",
          "256:  gf_isom_box_dump_start(a, \"MediaHeaderBox\", trace);",
          "258:  fprintf(trace, \"CreationTime=\\\"\"LLD\"\\\" \", LLD_CAST p->creationTime);",
          "259:  fprintf(trace, \"ModificationTime=\\\"\"LLD\"\\\" \", LLD_CAST p->modificationTime);",
          "260:  fprintf(trace, \"TimeScale=\\\"%d\\\" \", p->timeScale);",
          "",
          "[Removed Lines]",
          "257:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267: GF_Err vmhd_dump(GF_Box *a, FILE * trace)",
          "268: {",
          "269:  gf_isom_box_dump_start(a, \"VideoMediaHeaderBox\", trace);",
          "271:  fprintf(trace, \">\\n\");",
          "272:  gf_isom_box_dump_done(\"VideoMediaHeaderBox\", a, trace);",
          "273:  return GF_OK;",
          "",
          "[Removed Lines]",
          "270:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276: GF_Err smhd_dump(GF_Box *a, FILE * trace)",
          "277: {",
          "278:  gf_isom_box_dump_start(a, \"SoundMediaHeaderBox\", trace);",
          "280:  fprintf(trace, \">\\n\");",
          "281:  gf_isom_box_dump_done(\"SoundMediaHeaderBox\", a, trace);",
          "282:  return GF_OK;",
          "",
          "[Removed Lines]",
          "279:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "289:  p = (GF_HintMediaHeaderBox *)a;",
          "291:  gf_isom_box_dump_start(a, \"HintMediaHeaderBox\", trace);",
          "293:  fprintf(trace, \"MaximumPDUSize=\\\"%d\\\" \", p->maxPDUSize);",
          "294:  fprintf(trace, \"AveragePDUSize=\\\"%d\\\" \", p->avgPDUSize);",
          "295:  fprintf(trace, \"MaxBitRate=\\\"%d\\\" \", p->maxBitrate);",
          "",
          "[Removed Lines]",
          "292:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "302: GF_Err nmhd_dump(GF_Box *a, FILE * trace)",
          "303: {",
          "304:  gf_isom_box_dump_start(a, \"MPEGMediaHeaderBox\", trace);",
          "306:  fprintf(trace, \">\\n\");",
          "307:  gf_isom_box_dump_done(\"MPEGMediaHeaderBox\", a, trace);",
          "308:  return GF_OK;",
          "",
          "[Removed Lines]",
          "305:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "379:  p = (GF_DataEntryURLBox *)a;",
          "380:  gf_isom_box_dump_start(a, \"URLDataEntryBox\", trace);",
          "382:  if (p->location) {",
          "383:   fprintf(trace, \" URL=\\\"%s\\\">\\n\", p->location);",
          "384:  } else {",
          "",
          "[Removed Lines]",
          "381:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "402:  p = (GF_DataEntryURNBox *)a;",
          "403:  gf_isom_box_dump_start(a, \"URNDataEntryBox\", trace);",
          "405:  if (p->nameURN) fprintf(trace, \" URN=\\\"%s\\\"\", p->nameURN);",
          "406:  if (p->location) fprintf(trace, \" URL=\\\"%s\\\"\", p->location);",
          "407:  fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "404:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "417:  p = (GF_CopyrightBox *)a;",
          "418:  gf_isom_box_dump_start(a, \"CopyrightBox\", trace);",
          "420:  fprintf(trace, \"LanguageCode=\\\"%s\\\" CopyrightNotice=\\\"%s\\\">\\n\", p->packedLanguageCode, p->notice);",
          "421:  gf_isom_box_dump_done(\"CopyrightBox\", a, trace);",
          "422:  return GF_OK;",
          "",
          "[Removed Lines]",
          "419:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "429:  p = (GF_KindBox *)a;",
          "430:  gf_isom_box_dump_start(a, \"KindBox\", trace);",
          "432:  fprintf(trace, \"schemeURI=\\\"%s\\\" value=\\\"%s\\\">\\n\", p->schemeURI, (p->value ? p->value : \"\"));",
          "433:  gf_isom_box_dump_done(\"KindBox\", a, trace);",
          "434:  return GF_OK;",
          "",
          "[Removed Lines]",
          "431:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "465:  char szDur[20];",
          "466:  GF_ChapterListBox *p = (GF_ChapterListBox *)a;",
          "467:  gf_isom_box_dump_start(a, \"ChapterListBox\", trace);",
          "469:  fprintf(trace, \">\\n\");",
          "471:  if (p->size) {",
          "",
          "[Removed Lines]",
          "468:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "489:  u32 i;",
          "490:  GF_ProgressiveDownloadBox *p = (GF_ProgressiveDownloadBox *)a;",
          "491:  gf_isom_box_dump_start(a, \"ProgressiveDownloadBox\", trace);",
          "493:  fprintf(trace, \">\\n\");",
          "495:  if (p->size) {",
          "",
          "[Removed Lines]",
          "492:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "507: {",
          "508:  GF_HandlerBox *p = (GF_HandlerBox *)a;",
          "509:  gf_isom_box_dump_start(a, \"HandlerBox\", trace);",
          "511:  if (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8+1)) {",
          "512:   fprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);",
          "513:  } else {",
          "",
          "[Removed Lines]",
          "510:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "529:  p = (GF_ObjectDescriptorBox *)a;",
          "530:  gf_isom_box_dump_start(a, \"ObjectDescriptorBox\", trace);",
          "532:  fprintf(trace, \">\\n\");",
          "534:  if (p->descriptor) {",
          "",
          "[Removed Lines]",
          "531:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "807: {",
          "809:  gf_isom_box_dump_start(a, \"DataReferenceBox\", trace);",
          "811:  fprintf(trace, \">\\n\");",
          "812:  gf_isom_box_dump_done(\"DataReferenceBox\", a, trace);",
          "813:  return GF_OK;",
          "",
          "[Removed Lines]",
          "810:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "817: {",
          "819:  gf_isom_box_dump_start(a, \"SampleDescriptionBox\", trace);",
          "821:  fprintf(trace, \">\\n\");",
          "822:  gf_isom_box_dump_done(\"SampleDescriptionBox\", a, trace);",
          "823:  return GF_OK;",
          "",
          "[Removed Lines]",
          "820:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "831:  p = (GF_TimeToSampleBox *)a;",
          "832:  gf_isom_box_dump_start(a, \"TimeToSampleBox\", trace);",
          "834:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "836:  nb_samples = 0;",
          "",
          "[Removed Lines]",
          "833:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "853:  u32 i, nb_samples;",
          "854:  p = (GF_CompositionOffsetBox *)a;",
          "855:  gf_isom_box_dump_start(a, \"CompositionOffsetBox\", trace);",
          "857:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "859:  nb_samples = 0;",
          "",
          "[Removed Lines]",
          "856:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "877:  p = (GF_CompositionToDecodeBox *)a;",
          "878:  gf_isom_box_dump_start(a, \"CompositionToDecodeBox\", trace);",
          "880:  fprintf(trace, \"compositionToDTSShift=\\\"%d\\\" leastDecodeToDisplayDelta=\\\"%d\\\" compositionStartTime=\\\"%d\\\" compositionEndTime=\\\"%d\\\">\\n\", p->leastDecodeToDisplayDelta, p->greatestDecodeToDisplayDelta, p->compositionStartTime, p->compositionEndTime);",
          "881:  gf_isom_box_dump_done(\"CompositionToDecodeBox\", a, trace);",
          "882:  return GF_OK;",
          "",
          "[Removed Lines]",
          "879:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "886: {",
          "887:  GF_CodingConstraintsBox *p = (GF_CodingConstraintsBox *)a;",
          "888:  gf_isom_box_dump_start(a, \"CodingConstraintsBox\", trace);",
          "890:  fprintf(trace, \"all_ref_pics_intra=\\\"%d\\\" intra_pred_used=\\\"%d\\\" max_ref_per_pic=\\\"%d\\\" reserved=\\\"%d\\\">\\n\", p->all_ref_pics_intra, p->intra_pred_used, p->max_ref_per_pic, p->reserved);",
          "891:  gf_isom_box_dump_done(\"CodingConstraintsBox\", a, trace);",
          "892:  return GF_OK;",
          "",
          "[Removed Lines]",
          "889:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "901:  p = (GF_ShadowSyncBox *)a;",
          "902:  gf_isom_box_dump_start(a, \"SyncShadowBox\", trace);",
          "904:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", gf_list_count(p->entries));",
          "905:  i=0;",
          "906:  while ((t = (GF_StshEntry *)gf_list_enum(p->entries, &i))) {",
          "",
          "[Removed Lines]",
          "903:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "922:  p = (GF_EditListBox *)a;",
          "923:  gf_isom_box_dump_start(a, \"EditListBox\", trace);",
          "925:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", gf_list_count(p->entryList));",
          "927:  i=0;",
          "",
          "[Removed Lines]",
          "924:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "943:  p = (GF_SampleToChunkBox *)a;",
          "944:  gf_isom_box_dump_start(a, \"SampleToChunkBox\", trace);",
          "946:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "948:  nb_samples = 0;",
          "",
          "[Removed Lines]",
          "945:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "975:  else {",
          "976:   gf_isom_box_dump_start(a, \"CompactSampleSizeBox\", trace);",
          "977:  }",
          "980:  fprintf(trace, \"SampleCount=\\\"%d\\\"\",  p->sampleCount);",
          "981:  if (a->type == GF_ISOM_BOX_TYPE_STSZ) {",
          "",
          "[Removed Lines]",
          "978:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1011:  p = (GF_ChunkOffsetBox *)a;",
          "1012:  gf_isom_box_dump_start(a, \"ChunkOffsetBox\", trace);",
          "1014:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "1016:  if (!p->offsets && p->size) {",
          "",
          "[Removed Lines]",
          "1013:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1035:  p = (GF_SyncSampleBox *)a;",
          "1036:  gf_isom_box_dump_start(a, \"SyncSampleBox\", trace);",
          "1038:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "1040:  if (!p->sampleNumbers && p->size) {",
          "",
          "[Removed Lines]",
          "1037:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1059:  p = (GF_DegradationPriorityBox *)a;",
          "1060:  gf_isom_box_dump_start(a, \"DegradationPriorityBox\", trace);",
          "1062:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "1064:  if (!p->priorities && p->size) {",
          "",
          "[Removed Lines]",
          "1061:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1083:  p = (GF_SampleDependencyTypeBox*)a;",
          "1084:  gf_isom_box_dump_start(a, \"SampleDependencyTypeBox\", trace);",
          "1086:  fprintf(trace, \"SampleCount=\\\"%d\\\">\\n\", p->sampleCount);",
          "1088:  if (!p->sample_info && p->size) {",
          "",
          "[Removed Lines]",
          "1085:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1151:  p = (GF_ChunkLargeOffsetBox *)a;",
          "1152:  gf_isom_box_dump_start(a, \"ChunkLargeOffsetBox\", trace);",
          "1154:  fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "1156:  if (!p->offsets && p->size) {",
          "",
          "[Removed Lines]",
          "1153:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1173:  p = (GF_ESDBox *)a;",
          "1174:  gf_isom_box_dump_start(a, \"MPEG4ESDescriptorBox\", trace);",
          "1176:  fprintf(trace, \">\\n\");",
          "1178:  if (p->desc) {",
          "",
          "[Removed Lines]",
          "1175:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1212:  GF_TrackHeaderBox *p;",
          "1213:  p = (GF_TrackHeaderBox *)a;",
          "1214:  gf_isom_box_dump_start(a, \"TrackHeaderBox\", trace);",
          "1217:  fprintf(trace, \"CreationTime=\\\"\"LLD\"\\\" ModificationTime=\\\"\"LLD\"\\\" TrackID=\\\"%u\\\" Duration=\\\"\"LLD\"\\\"\",",
          "1218:          LLD_CAST p->creationTime, LLD_CAST p->modificationTime, p->trackID, LLD_CAST p->duration);",
          "",
          "[Removed Lines]",
          "1215:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1281:  u32 i;",
          "1282:  GF_TrackFragmentRandomAccessBox *p = (GF_TrackFragmentRandomAccessBox *)a;",
          "1283:  gf_isom_box_dump_start(a, \"TrackFragmentRandomAccessBox\", trace);",
          "1285:  fprintf(trace, \"TrackId=\\\"%u\\\" number_of_entries=\\\"%u\\\">\\n\", p->track_id, p->nb_entries);",
          "1286:  for (i=0; i<p->nb_entries; i++) {",
          "1287:   fprintf(trace, \"<RandomAccessEntry time=\\\"\"LLU\"\\\" moof_offset=\\\"\"LLU\"\\\" traf=\\\"%u\\\" trun=\\\"%u\\\" sample=\\\"%u\\\"/>\\n\",",
          "",
          "[Removed Lines]",
          "1284:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1300:  GF_MovieFragmentRandomAccessOffsetBox *p = (GF_MovieFragmentRandomAccessOffsetBox *)a;",
          "1302:  gf_isom_box_dump_start(a, \"MovieFragmentRandomAccessOffsetBox\", trace);",
          "1305:  fprintf(trace, \"container_size=\\\"%d\\\" >\\n\", p->container_size);",
          "1306:  gf_isom_box_dump_done(\"MovieFragmentRandomAccessOffsetBox\", a, trace);",
          "",
          "[Removed Lines]",
          "1303:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1814:  GF_MetaBox *p;",
          "1815:  p = (GF_MetaBox *)a;",
          "1816:  gf_isom_box_dump_start(a, \"MetaBox\", trace);",
          "1818:  fprintf(trace, \">\\n\");",
          "1820:  if (p->handler) gf_isom_box_dump(p->handler, trace);",
          "",
          "[Removed Lines]",
          "1817:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1835: {",
          "1836:  GF_XMLBox *p = (GF_XMLBox *)a;",
          "1837:  gf_isom_box_dump_start(a, \"XMLBox\", trace);",
          "1839:  fprintf(trace, \">\\n\");",
          "1840:  fprintf(trace, \"<![CDATA[\\n\");",
          "1841:  if (p->xml)",
          "",
          "[Removed Lines]",
          "1838:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1850: {",
          "1851:  GF_BinaryXMLBox *p = (GF_BinaryXMLBox *)a;",
          "1852:  gf_isom_box_dump_start(a, \"BinaryXMLBox\", trace);",
          "1854:  fprintf(trace, \"binarySize=\\\"%d\\\">\\n\", p->data_length);",
          "1855:  gf_isom_box_dump_done(\"BinaryXMLBox\", a, trace);",
          "1856:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1853:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1861: {",
          "1862:  GF_PrimaryItemBox *p = (GF_PrimaryItemBox *)a;",
          "1863:  gf_isom_box_dump_start(a, \"PrimaryItemBox\", trace);",
          "1865:  fprintf(trace, \"item_ID=\\\"%d\\\">\\n\", p->item_ID);",
          "1866:  gf_isom_box_dump_done(\"PrimaryItemBox\", a, trace);",
          "1867:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1864:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1871: {",
          "1872:  GF_ItemProtectionBox *p = (GF_ItemProtectionBox *)a;",
          "1873:  gf_isom_box_dump_start(a, \"ItemProtectionBox\", trace);",
          "1875:  fprintf(trace, \">\\n\");",
          "1876:  gf_isom_box_array_dump(p->protection_information, trace);",
          "1877:  gf_isom_box_dump_done(\"ItemProtectionBox\", a, trace);",
          "",
          "[Removed Lines]",
          "1874:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1882: {",
          "1883:  GF_ItemInfoEntryBox *p = (GF_ItemInfoEntryBox *)a;",
          "1884:  gf_isom_box_dump_start(a, \"ItemInfoEntryBox\", trace);",
          "1886:  fprintf(trace, \"item_ID=\\\"%d\\\" item_protection_index=\\\"%d\\\" item_name=\\\"%s\\\" content_type=\\\"%s\\\" content_encoding=\\\"%s\\\" item_type=\\\"%s\\\">\\n\", p->item_ID, p->item_protection_index, p->item_name, p->content_type, p->content_encoding, gf_4cc_to_str(p->item_type));",
          "1887:  gf_isom_box_dump_done(\"ItemInfoEntryBox\", a, trace);",
          "1888:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1885:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1892: {",
          "1893:  GF_ItemInfoBox *p = (GF_ItemInfoBox *)a;",
          "1894:  gf_isom_box_dump_start(a, \"ItemInfoBox\", trace);",
          "1896:  fprintf(trace, \">\\n\");",
          "1897:  gf_isom_box_array_dump(p->item_infos, trace);",
          "1898:  gf_isom_box_dump_done(\"ItemInfoBox\", a, trace);",
          "",
          "[Removed Lines]",
          "1895:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1904:  u32 i, j, count, count2;",
          "1905:  GF_ItemLocationBox *p = (GF_ItemLocationBox*)a;",
          "1906:  gf_isom_box_dump_start(a, \"ItemLocationBox\", trace);",
          "1908:  fprintf(trace, \"offset_size=\\\"%d\\\" length_size=\\\"%d\\\" base_offset_size=\\\"%d\\\" index_size=\\\"%d\\\">\\n\", p->offset_size, p->length_size, p->base_offset_size, p->index_size);",
          "1909:  count = gf_list_count(p->location_entries);",
          "1910:  for (i=0; i<count; i++) {",
          "",
          "[Removed Lines]",
          "1907:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1930: {",
          "1931:  GF_ItemReferenceBox *p = (GF_ItemReferenceBox *)a;",
          "1932:  gf_isom_box_dump_start(a, \"ItemReferenceBox\", trace);",
          "1934:  fprintf(trace, \">\\n\");",
          "1935:  gf_isom_box_array_dump(p->references, trace);",
          "1936:  gf_isom_box_dump_done(\"ItemReferenceBox\", a, trace);",
          "",
          "[Removed Lines]",
          "1933:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2258: {",
          "2259:  GF_MovieExtendsHeaderBox *p = (GF_MovieExtendsHeaderBox*)a;",
          "2260:  gf_isom_box_dump_start(a, \"MovieExtendsHeaderBox\", trace);",
          "2262:  fprintf(trace, \"fragmentDuration=\\\"\"LLD\"\\\" >\\n\", LLD_CAST p->fragment_duration);",
          "2263:  gf_isom_box_dump_done(\"MovieExtendsHeaderBox\", a, trace);",
          "2264:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2261:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2282:  GF_TrackExtendsBox *p;",
          "2283:  p = (GF_TrackExtendsBox *)a;",
          "2284:  gf_isom_box_dump_start(a, \"TrackExtendsBox\", trace);",
          "2286:  fprintf(trace, \"TrackID=\\\"%d\\\"\", p->trackID);",
          "2287:  fprintf(trace, \" SampleDescriptionIndex=\\\"%d\\\" SampleDuration=\\\"%d\\\" SampleSize=\\\"%d\\\"\", p->def_sample_desc_index, p->def_sample_duration, p->def_sample_size);",
          "2288:  fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "2285:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2295: {",
          "2296:  GF_TrackExtensionPropertiesBox *p = (GF_TrackExtensionPropertiesBox*)a;",
          "2297:  gf_isom_box_dump_start(a, \"TrackExtensionPropertiesBox\", trace);",
          "2299:  fprintf(trace, \"TrackID=\\\"%d\\\">\\n\", p->trackID);",
          "2300:  gf_isom_box_dump_done(\"TrackExtensionPropertiesBox\", a, trace);",
          "2301:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2298:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2318:  GF_MovieFragmentHeaderBox *p;",
          "2319:  p = (GF_MovieFragmentHeaderBox *)a;",
          "2320:  gf_isom_box_dump_start(a, \"MovieFragmentHeaderBox\", trace);",
          "2322:  fprintf(trace, \"FragmentSequenceNumber=\\\"%d\\\">\\n\", p->sequence_number);",
          "2323:  gf_isom_box_dump_done(\"MovieFragmentHeaderBox\", a, trace);",
          "2324:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2321:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2357:  GF_TrackFragmentHeaderBox *p;",
          "2358:  p = (GF_TrackFragmentHeaderBox *)a;",
          "2359:  gf_isom_box_dump_start(a, \"TrackFragmentHeaderBox\", trace);",
          "2361:  fprintf(trace, \"TrackID=\\\"%u\\\"\", p->trackID);",
          "2363:  if (p->flags & GF_ISOM_TRAF_BASE_OFFSET) {",
          "",
          "[Removed Lines]",
          "2360:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2403:  p = (GF_TrackFragmentRunBox *)a;",
          "2404:  gf_isom_box_dump_start(a, \"TrackRunBox\", trace);",
          "2406:  fprintf(trace, \"SampleCount=\\\"%d\\\"\", p->sample_count);",
          "2408:  if (p->flags & GF_ISOM_TRUN_DATA_OFFSET)",
          "",
          "[Removed Lines]",
          "2405:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3293:  GF_SchemeTypeBox *p;",
          "3294:  p = (GF_SchemeTypeBox *)a;",
          "3295:  gf_isom_box_dump_start(a, \"SchemeTypeBox\", trace);",
          "3297:  fprintf(trace, \"scheme_type=\\\"%s\\\" scheme_version=\\\"%d\\\" \", gf_4cc_to_str(p->scheme_type), p->scheme_version);",
          "3298:  if (p->URI) fprintf(trace, \"scheme_uri=\\\"%s\\\"\", p->URI);",
          "3299:  fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "3296:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3323:  GF_ISMAKMSBox *p;",
          "3324:  p = (GF_ISMAKMSBox *)a;",
          "3325:  gf_isom_box_dump_start(a, \"KMSBox\", trace);",
          "3327:  fprintf(trace, \"kms_URI=\\\"%s\\\">\\n\", p->URI);",
          "3328:  gf_isom_box_dump_done(\"KMSBox\", a, trace);",
          "3329:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3326:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3336:  const char *name = (a->type==GF_ISOM_BOX_TYPE_ISFM) ? \"ISMASampleFormat\" : \"OMADRMAUFormatBox\";",
          "3337:  p = (GF_ISMASampleFormatBox *)a;",
          "3338:  gf_isom_box_dump_start(a, name, trace);",
          "3340:  fprintf(trace, \"selective_encryption=\\\"%d\\\" key_indicator_length=\\\"%d\\\" IV_length=\\\"%d\\\">\\n\", p->selective_encryption, p->key_indicator_length, p->IV_length);",
          "3341:  gf_isom_box_dump_done(name, a, trace);",
          "3342:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3339:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3346: {",
          "3347:  GF_ISMACrypSaltBox *p = (GF_ISMACrypSaltBox *)a;",
          "3348:  gf_isom_box_dump_start(a, \"ISMACrypSaltBox\", trace);",
          "3350:  fprintf(trace, \"salt=\\\"\"LLU\"\\\">\\n\", p->salt);",
          "3351:  gf_isom_box_dump_done(\"ISMACrypSaltBox\", a, trace);",
          "3352:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3349:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3500:   break;",
          "3501:  }",
          "3502:  gf_isom_box_dump_start(a, name, trace);",
          "3505:  if (!no_dump) {",
          "3506:   switch (itune->type) {",
          "3507:   case GF_ISOM_BOX_TYPE_DISK:",
          "",
          "[Removed Lines]",
          "3503:  if (strcmp(name, \"UnknownBox\") && itune->data)",
          "3504:   gf_full_box_dump((GF_Box *)itune->data, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3552:  u32 i;",
          "3553:  GF_AdobeBootstrapInfoBox *p = (GF_AdobeBootstrapInfoBox*)a;",
          "3554:  gf_isom_box_dump_start(a, \"AdobeBootstrapBox\", trace);",
          "3556:  fprintf(trace, \"BootstrapinfoVersion=\\\"%u\\\" Profile=\\\"%u\\\" Live=\\\"%u\\\" Update=\\\"%u\\\" TimeScale=\\\"%u\\\" CurrentMediaTime=\\\"\"LLU\"\\\" SmpteTimeCodeOffset=\\\"\"LLU\"\\\" \",",
          "3557:          p->bootstrapinfo_version, p->profile, p->live, p->update, p->time_scale, p->current_media_time, p->smpte_time_code_offset);",
          "3558:  if (p->movie_identifier)",
          "",
          "[Removed Lines]",
          "3555:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3588:  u32 i;",
          "3589:  GF_AdobeFragRandomAccessBox *p = (GF_AdobeFragRandomAccessBox*)a;",
          "3590:  gf_isom_box_dump_start(a, \"AdobeFragmentRandomAccessBox\", trace);",
          "3592:  fprintf(trace, \"LongIDs=\\\"%u\\\" LongOffsets=\\\"%u\\\" TimeScale=\\\"%u\\\">\\n\", p->long_ids, p->long_offsets, p->time_scale);",
          "3594:  for (i=0; i<p->entry_count; i++) {",
          "",
          "[Removed Lines]",
          "3591:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3611:  u32 i;",
          "3612:  GF_AdobeFragmentRunTableBox *p = (GF_AdobeFragmentRunTableBox*)a;",
          "3613:  gf_isom_box_dump_start(a, \"AdobeFragmentRunTableBox\", trace);",
          "3615:  fprintf(trace, \"TimeScale=\\\"%u\\\">\\n\", p->timescale);",
          "3617:  for (i=0; i<p->quality_entry_count; i++) {",
          "",
          "[Removed Lines]",
          "3614:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3636:  u32 i;",
          "3637:  GF_AdobeSegmentRunTableBox *p = (GF_AdobeSegmentRunTableBox*)a;",
          "3638:  gf_isom_box_dump_start(a, \"AdobeSegmentRunTableBox\", trace);",
          "3640:  fprintf(trace, \">\\n\");",
          "3642:  for (i=0; i<p->quality_entry_count; i++) {",
          "",
          "[Removed Lines]",
          "3639:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3677: GF_Err databox_dump(GF_Box *a, FILE * trace)",
          "3678: {",
          "3679:  gf_isom_box_dump_start(a, \"data\", trace);",
          "3681:  fprintf(trace, \">\\n\");",
          "3682:  gf_isom_box_dump_done(\"data\", a, trace);",
          "3683:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3680:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3687: {",
          "3688:  GF_OMADRMCommonHeaderBox *ptr = (GF_OMADRMCommonHeaderBox *)a;",
          "3689:  gf_isom_box_dump_start(a, \"OMADRMCommonHeaderBox\", trace);",
          "3691:  fprintf(trace, \"EncryptionMethod=\\\"%d\\\" PaddingScheme=\\\"%d\\\" PlaintextLength=\\\"\"LLD\"\\\" \",",
          "3692:          ptr->EncryptionMethod, ptr->PaddingScheme, ptr->PlaintextLength);",
          "3693:  if (ptr->RightsIssuerURL) fprintf(trace, \"RightsIssuerURL=\\\"%s\\\" \", ptr->RightsIssuerURL);",
          "",
          "[Removed Lines]",
          "3690:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3715: {",
          "3716:  GF_OMADRMGroupIDBox *ptr = (GF_OMADRMGroupIDBox *)a;",
          "3717:  gf_isom_box_dump_start(a, \"OMADRMGroupIDBox\", trace);",
          "3719:  fprintf(trace, \"GroupID=\\\"%s\\\" EncryptionMethod=\\\"%d\\\" GroupKey=\\\" \", ptr->GroupID, ptr->GKEncryptionMethod);",
          "3720:  if (ptr->GroupKey)",
          "3721:   dump_data(trace, ptr->GroupKey, ptr->GKLength);",
          "",
          "[Removed Lines]",
          "3718:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3735: {",
          "3736:  GF_OMADRMTransactionTrackingBox *ptr = (GF_OMADRMTransactionTrackingBox *)a;",
          "3737:  gf_isom_box_dump_start(a, \"OMADRMTransactionTrackingBox\", trace);",
          "3739:  fprintf(trace, \"TransactionID=\\\"\");",
          "3740:  dump_data(trace, ptr->TransactionID, 16);",
          "3741:  fprintf(trace, \"\\\">\\n\");",
          "",
          "[Removed Lines]",
          "3738:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3746: {",
          "3747:  GF_OMADRMRightsObjectBox*ptr = (GF_OMADRMRightsObjectBox*)a;",
          "3748:  gf_isom_box_dump_start(a, \"OMADRMRightsObjectBox\", trace);",
          "3750:  fprintf(trace, \"OMARightsObject=\\\"\");",
          "3751:  dump_data(trace, ptr->oma_ro, ptr->oma_ro_size);",
          "3752:  fprintf(trace, \"\\\">\\n\");",
          "",
          "[Removed Lines]",
          "3749:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3757: {",
          "3758:  GF_OMADRMKMSBox *ptr = (GF_OMADRMKMSBox*)a;",
          "3759:  gf_isom_box_dump_start(a, \"OMADRMKMSBox\", trace);",
          "3761:  fprintf(trace, \">\\n\");",
          "3762:  if (ptr->hdr) gf_isom_box_dump((GF_Box *)ptr->hdr, trace);",
          "3763:  if (ptr->fmt) gf_isom_box_dump((GF_Box *)ptr->fmt, trace);",
          "",
          "[Removed Lines]",
          "3760:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3794:  u32 i;",
          "3795:  GF_TrackSelectionBox *ptr = (GF_TrackSelectionBox *)a;",
          "3796:  gf_isom_box_dump_start(a, \"TrackSelectionBox\", trace);",
          "3798:  fprintf(trace, \"switchGroup=\\\"%d\\\" >\\n\", ptr->switchGroup);",
          "3799:  for (i=0; i<ptr->attributeListCount; i++) {",
          "3800:   fprintf(trace, \"<TrackSelectionCriteria value=\\\"%s\\\"/>\\n\", gf_4cc_to_str(ptr->attributeList[i]) );",
          "",
          "[Removed Lines]",
          "3797:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3956:  GF_SegmentIndexBox *p = (GF_SegmentIndexBox *)a;",
          "3957:  gf_isom_box_dump_start(a, \"SegmentIndexBox\", trace);",
          "3958:  fprintf(trace, \"reference_ID=\\\"%d\\\" timescale=\\\"%d\\\" earliest_presentation_time=\\\"\"LLD\"\\\" first_offset=\\\"\"LLD\"\\\" \", p->reference_ID, p->timescale, p->earliest_presentation_time, p->first_offset);",
          "3960:  fprintf(trace, \">\\n\");",
          "3961:  for (i=0; i<p->nb_refs; i++) {",
          "3962:   fprintf(trace, \"<Reference type=\\\"%d\\\" size=\\\"%d\\\" duration=\\\"%d\\\" startsWithSAP=\\\"%d\\\" SAP_type=\\\"%d\\\" SAPDeltaTime=\\\"%d\\\"/>\\n\", p->refs[i].reference_type, p->refs[i].reference_size, p->refs[i].subsegment_duration, p->refs[i].starts_with_SAP, p->refs[i].SAP_type, p->refs[i].SAP_delta_time);",
          "",
          "[Removed Lines]",
          "3959:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3973:  u32 i, j;",
          "3974:  GF_SubsegmentIndexBox *p = (GF_SubsegmentIndexBox *)a;",
          "3975:  gf_isom_box_dump_start(a, \"SubsegmentIndexBox\", trace);",
          "3977:  fprintf(trace, \"subsegment_count=\\\"%d\\\" >\\n\", p->subsegment_count);",
          "3978:  for (i = 0; i < p->subsegment_count; i++) {",
          "3979:   fprintf(trace, \"<Subsegment range_count=\\\"%d\\\">\\n\", p->subsegments[i].range_count);",
          "",
          "[Removed Lines]",
          "3976:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3997:  u32 i;",
          "3998:  GF_LevelAssignmentBox *p = (GF_LevelAssignmentBox *)a;",
          "3999:  gf_isom_box_dump_start(a, \"LevelAssignmentBox\", trace);",
          "4001:  fprintf(trace, \"level_count=\\\"%d\\\" >\\n\", p->level_count);",
          "4002:  for (i = 0; i < p->level_count; i++) {",
          "4004:  }",
          "4005:  if (!p->size) {",
          "4006:   fprintf(trace, \"<Assignement track_id=\\\"\\\" padding_flag=\\\"\\\" assignement_type=\\\"\\\" grouping_type=\\\"\\\" grouping_type_parameter=\\\"\\\" sub_track_id=\\\"\\\" />\\n\");",
          "",
          "[Removed Lines]",
          "4000:  gf_full_box_dump(a, trace);",
          "4003:   fprintf(trace, \"<Assignement track_id=\\\"%d\\\" padding_flag=\\\"%d\\\" assignement_type=\\\"%d\\\" grouping_type=\\\"%d\\\" grouping_type_parameter=\\\"%d\\\" sub_track_id=\\\"%d\\\" />\\n\", p->levels[i].track_id, p->levels[i].padding_flag, p->levels[i].type, p->levels[i].grouping_type, p->levels[i].grouping_type_parameter, p->levels[i].sub_track_id);",
          "",
          "[Added Lines]",
          "3939:   fprintf(trace, \"<Assignement track_id=\\\"%d\\\" padding_flag=\\\"%d\\\" assignement_type=\\\"%d\\\" grouping_type=\\\"%s\\\" grouping_type_parameter=\\\"%d\\\" sub_track_id=\\\"%d\\\" />\\n\", p->levels[i].track_id, p->levels[i].padding_flag, p->levels[i].type, gf_4cc_to_str(p->levels[i].grouping_type) , p->levels[i].grouping_type_parameter, p->levels[i].sub_track_id);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4026:  u32 i;",
          "4027:  GF_SubTrackInformationBox *p = (GF_SubTrackInformationBox *)a;",
          "4028:  gf_isom_box_dump_start(a, \"SubTrackInformationBox\", trace);",
          "4030:  fprintf(trace, \"switch_group=\\\"%d\\\" alternate_group=\\\"%d\\\" sub_track_id=\\\"%d\\\">\\n\", p->switch_group, p->alternate_group, p->sub_track_id);",
          "4032:  for (i = 0; i < p->attribute_count; i++) {",
          "",
          "[Removed Lines]",
          "4029:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4044:  u32 i;",
          "4045:  GF_SubTrackSampleGroupBox *p = (GF_SubTrackSampleGroupBox *)a;",
          "4046:  gf_isom_box_dump_start(a, \"SubTrackSampleGroupBox\", trace);",
          "4050:  for (i = 0; i < p->nb_groups; i++) {",
          "4051:   fprintf(trace, \"<SubTrackSampleGroupBoxEntry group_description_index=\\\"%d\\\"/>\\n\", p->group_description_index[i]);",
          "",
          "[Removed Lines]",
          "4047:  gf_full_box_dump(a, trace);",
          "4048:  fprintf(trace, \"grouping_type=\\\"%s\\\">\\n\", gf_4cc_to_str(p->grouping_type) );",
          "",
          "[Added Lines]",
          "3984:  if (p->grouping_type)",
          "3985:   fprintf(trace, \"grouping_type=\\\"%s\\\">\\n\", gf_4cc_to_str(p->grouping_type) );",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4117:  GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox*) a;",
          "4118:  if (!a) return GF_BAD_PARAM;",
          "4119:  gf_isom_box_dump_start(a, \"TrackFragmentBaseMediaDecodeTimeBox\", trace);",
          "4121:  fprintf(trace, \"baseMediaDecodeTime=\\\"\"LLD\"\\\">\\n\", ptr->baseMediaDecodeTime);",
          "4122:  gf_isom_box_dump_done(\"TrackFragmentBaseMediaDecodeTimeBox\", a, trace);",
          "4123:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4120:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "4144:  if (!a) return GF_BAD_PARAM;",
          "4146:  gf_isom_box_dump_start(a, \"SampleGroupBox\", trace);",
          "4149:  if (ptr->version==1) {",
          "4150:   if (isalnum(ptr->grouping_type_parameter&0xFF)) {",
          "4151:    fprintf(trace, \" grouping_type_parameter=\\\"%s\\\"\", gf_4cc_to_str(ptr->grouping_type_parameter) );",
          "",
          "[Removed Lines]",
          "4147:  gf_full_box_dump((GF_Box *)a, trace);",
          "4148:  fprintf(trace, \"grouping_type=\\\"%s\\\"\", gf_4cc_to_str(ptr->grouping_type) );",
          "",
          "[Added Lines]",
          "4086:  if (ptr->grouping_type)",
          "4087:   fprintf(trace, \"grouping_type=\\\"%s\\\"\", gf_4cc_to_str(ptr->grouping_type) );",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4353:  if (!a) return GF_BAD_PARAM;",
          "4355:  gf_isom_box_dump_start(a, \"SampleGroupDescriptionBox\", trace);",
          "4358:  if (ptr->version==1) fprintf(trace, \" default_length=\\\"%d\\\"\", ptr->default_length);",
          "4359:  if ((ptr->version>=2) && ptr->default_description_index) fprintf(trace, \" default_group_index=\\\"%d\\\"\", ptr->default_description_index);",
          "4360:  fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "4356:  gf_full_box_dump((GF_Box *)a, trace);",
          "4357:  fprintf(trace, \"grouping_type=\\\"%s\\\"\", gf_4cc_to_str(ptr->grouping_type) );",
          "",
          "[Added Lines]",
          "4297:  if (ptr->grouping_type)",
          "4298:   fprintf(trace, \"grouping_type=\\\"%s\\\"\", gf_4cc_to_str(ptr->grouping_type) );",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4455:  if (!a) return GF_BAD_PARAM;",
          "4457:  gf_isom_box_dump_start(a, \"SampleAuxiliaryInfoSizeBox\", trace);",
          "4459:  fprintf(trace, \"default_sample_info_size=\\\"%d\\\" sample_count=\\\"%d\\\"\", ptr->default_sample_info_size, ptr->sample_count);",
          "4460:  if (ptr->flags & 1) {",
          "4461:   if (isalnum(ptr->aux_info_type>>24)) {",
          "",
          "[Removed Lines]",
          "4458:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4484:  if (!a) return GF_BAD_PARAM;",
          "4486:  gf_isom_box_dump_start(a, \"SampleAuxiliaryInfoOffsetBox\", trace);",
          "4488:  fprintf(trace, \"entry_count=\\\"%d\\\"\", ptr->entry_count);",
          "4489:  if (ptr->flags & 1) {",
          "4490:   if (isalnum(ptr->aux_info_type>>24)) {",
          "",
          "[Removed Lines]",
          "4487:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4518:  if (!a) return GF_BAD_PARAM;",
          "4520:  gf_isom_box_dump_start(a, \"ProtectionSystemHeaderBox\", trace);",
          "4522:  fprintf(trace, \"SystemID=\\\"\");",
          "4523:  dump_data_hex(trace, (char *) ptr->SystemID, 16);",
          "4524:  fprintf(trace, \"\\\">\\n\");",
          "",
          "[Removed Lines]",
          "4521:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4550:  if (!a) return GF_BAD_PARAM;",
          "4552:  gf_isom_box_dump_start(a, \"TrackEncryptionBox\", trace);",
          "4554:  fprintf(trace, \"isEncrypted=\\\"%d\\\"\", ptr->isProtected);",
          "4555:  if (ptr->Per_Sample_IV_Size)",
          "4556:   fprintf(trace, \" IV_size=\\\"%d\\\" KID=\\\"\", ptr->Per_Sample_IV_Size);",
          "",
          "[Removed Lines]",
          "4553:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4573:  if (!a) return GF_BAD_PARAM;",
          "4575:  gf_isom_box_dump_start(a, \"PIFFProtectionSystemHeaderBox\", trace);",
          "4577:  fprintf(trace, \"SystemID=\\\"\");",
          "4578:  dump_data_hex(trace, (char *) ptr->SystemID, 16);",
          "4579:  fprintf(trace, \"\\\" PrivateData=\\\"\");",
          "",
          "[Removed Lines]",
          "4576:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4589:  if (!a) return GF_BAD_PARAM;",
          "4591:  gf_isom_box_dump_start(a, \"PIFFTrackEncryptionBox\", trace);",
          "4593:  fprintf(trace, \"AlgorithmID=\\\"%d\\\" IV_size=\\\"%d\\\" KID=\\\"\", ptr->AlgorithmID, ptr->IV_size);",
          "4594:  dump_data_hex(trace,(char *) ptr->KID, 16);",
          "4595:  fprintf(trace, \"\\\">\\n\");",
          "",
          "[Removed Lines]",
          "4592:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4700:  fracs /= 0xFFFFFFFF;",
          "4701:  fracs *= 1000;",
          "4702:  gf_isom_box_dump_start(a, \"ProducerReferenceTimeBox\", trace);",
          "4704:  fprintf(trace, \"referenceTrackID=\\\"%d\\\" timestamp=\\\"\"LLU\"\\\" NTP=\\\"\"LLU\"\\\" UTC=\\\"%d-%02d-%02dT%02d:%02d:%02d.%03dZ\\\">\\n\", ptr->refTrackID, ptr->timestamp, ptr->ntp, 1900+t.tm_year, t.tm_mon+1, t.tm_mday, t.tm_hour, t.tm_min, (u32) t.tm_sec, (u32) fracs);",
          "4705:  gf_isom_box_dump_done(\"ProducerReferenceTimeBox\", a, trace);",
          "",
          "[Removed Lines]",
          "4703:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "4712:  GF_AdobeDRMKeyManagementSystemBox *ptr = (GF_AdobeDRMKeyManagementSystemBox *)a;",
          "4713:  if (!a) return GF_BAD_PARAM;",
          "4714:  gf_isom_box_dump_start(a, \"AdobeDRMKeyManagementSystemBox\", trace);",
          "4716:  fprintf(trace, \">\\n\");",
          "4717:  if (ptr->header) gf_isom_box_dump((GF_Box *)ptr->header, trace);",
          "4718:  if (ptr->au_format) gf_isom_box_dump((GF_Box *)ptr->au_format, trace);",
          "",
          "[Removed Lines]",
          "4715:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "4725:  GF_AdobeDRMHeaderBox *ptr = (GF_AdobeDRMHeaderBox *)a;",
          "4726:  if (!a) return GF_BAD_PARAM;",
          "4727:  gf_isom_box_dump_start(a, \"AdobeDRMHeaderBox\", trace);",
          "4729:  fprintf(trace, \">\\n\");",
          "4730:  if (ptr->std_enc_params) gf_isom_box_dump((GF_Box *)ptr->std_enc_params, trace);",
          "4731:  gf_isom_box_dump_done(\"AdobeDRMHeaderBox\", a, trace);",
          "",
          "[Removed Lines]",
          "4728:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "4737:  GF_AdobeStdEncryptionParamsBox *ptr = (GF_AdobeStdEncryptionParamsBox *)a;",
          "4738:  if (!a) return GF_BAD_PARAM;",
          "4739:  gf_isom_box_dump_start(a, \"AdobeStdEncryptionParamsBox\", trace);",
          "4741:  fprintf(trace, \">\\n\");",
          "4742:  if (ptr->enc_info) gf_isom_box_dump((GF_Box *)ptr->enc_info, trace);",
          "4743:  if (ptr->key_info) gf_isom_box_dump((GF_Box *)ptr->key_info, trace);",
          "",
          "[Removed Lines]",
          "4740:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "4750:  GF_AdobeEncryptionInfoBox *ptr = (GF_AdobeEncryptionInfoBox *)a;",
          "4751:  if (!a) return GF_BAD_PARAM;",
          "4752:  gf_isom_box_dump_start(a, \"AdobeEncryptionInfoBox\", trace);",
          "4754:  fprintf(trace, \"EncryptionAlgorithm=\\\"%s\\\" KeyLength=\\\"%d\\\">\\n\", ptr->enc_algo, ptr->key_length);",
          "4755:  gf_isom_box_dump_done(\"AdobeEncryptionInfoBox\", a, trace);",
          "4756:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4753:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "4761:  GF_AdobeKeyInfoBox *ptr = (GF_AdobeKeyInfoBox *)a;",
          "4762:  if (!a) return GF_BAD_PARAM;",
          "4763:  gf_isom_box_dump_start(a, \"AdobeKeyInfoBox\", trace);",
          "4765:  fprintf(trace, \">\\n\");",
          "4766:  if (ptr->params) gf_isom_box_dump((GF_Box *)ptr->params, trace);",
          "4767:  gf_isom_box_dump_done(\"AdobeKeyInfoBox\", a, trace);",
          "",
          "[Removed Lines]",
          "4764:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4785:  GF_AdobeDRMAUFormatBox *ptr = (GF_AdobeDRMAUFormatBox *)a;",
          "4786:  if (!a) return GF_BAD_PARAM;",
          "4787:  gf_isom_box_dump_start(a, \"AdobeDRMAUFormatBox \", trace);",
          "4789:  fprintf(trace, \"SelectiveEncryption=\\\"%d\\\" IV_length=\\\"%d\\\">\\n\", ptr->selective_enc ? 1 : 0, ptr->IV_length);",
          "4790:  gf_isom_box_dump_done(\"AdobeDRMAUFormatBox\", a, trace);",
          "4791:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4788:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4797:  GF_ImageSpatialExtentsPropertyBox *ptr = (GF_ImageSpatialExtentsPropertyBox *)a;",
          "4798:  if (!a) return GF_BAD_PARAM;",
          "4799:  gf_isom_box_dump_start(a, \"ImageSpatialExtentsPropertyBox\", trace);",
          "4801:  fprintf(trace, \"image_width=\\\"%d\\\" image_height=\\\"%d\\\">\\n\", ptr->image_width, ptr->image_height);",
          "4802:  gf_isom_box_dump_done(\"ImageSpatialExtentsPropertyBox\", a, trace);",
          "4803:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4800:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4819:  GF_PixelInformationPropertyBox *ptr = (GF_PixelInformationPropertyBox *)a;",
          "4820:  if (!a) return GF_BAD_PARAM;",
          "4821:  gf_isom_box_dump_start(a, \"PixelInformationPropertyBox\", trace);",
          "4823:  fprintf(trace, \">\\n\");",
          "4824:  for (i = 0; i < ptr->num_channels; i++) {",
          "4825:   fprintf(trace, \"<BitPerChannel bits_per_channel=\\\"%d\\\"/>\\n\", ptr->bits_per_channel[i]);",
          "",
          "[Removed Lines]",
          "4822:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4836:  GF_RelativeLocationPropertyBox *ptr = (GF_RelativeLocationPropertyBox *)a;",
          "4837:  if (!a) return GF_BAD_PARAM;",
          "4838:  gf_isom_box_dump_start(a, \"RelativeLocationPropertyBox\", trace);",
          "4840:  fprintf(trace, \"horizontal_offset=\\\"%d\\\" vertical_offset=\\\"%d\\\">\\n\", ptr->horizontal_offset, ptr->vertical_offset);",
          "4841:  gf_isom_box_dump_done(\"RelativeLocationPropertyBox\", a, trace);",
          "4842:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4839:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4877:  u32 entry_count = gf_list_count(ptr->entries);",
          "4878:  if (!a) return GF_BAD_PARAM;",
          "4879:  gf_isom_box_dump_start(a, \"ItemPropertyAssociationBox\", trace);",
          "4881:  fprintf(trace, \"entry_count=\\\"%d\\\">\\n\", entry_count);",
          "4882:  for (i = 0; i < entry_count; i++) {",
          "4883:   GF_ItemPropertyAssociationEntry *entry = (GF_ItemPropertyAssociationEntry *)gf_list_get(ptr->entries, i);",
          "",
          "[Removed Lines]",
          "4880:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4904:  GF_AuxiliaryTypePropertyBox *ptr = (GF_AuxiliaryTypePropertyBox *)a;",
          "4906:  gf_isom_box_dump_start(a, \"AuxiliaryTypePropertyBox\", trace);",
          "4908:  fprintf(trace, \"aux_type=\\\"%s\\\" \", ptr->aux_urn);",
          "4909:  dump_data_attribute(trace, \"aux_subtype\", ptr->data, ptr->data_size);",
          "4910:  fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "4907:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4916: {",
          "4917:  GF_OINFPropertyBox *ptr = (GF_OINFPropertyBox *)a;",
          "4918:  gf_isom_box_dump_start(a, \"OperatingPointsInformationPropertyBox\", trace);",
          "4920:  fprintf(trace, \">\\n\");",
          "4922:  oinf_entry_dump(ptr->oinf, trace);",
          "",
          "[Removed Lines]",
          "4919:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4928: {",
          "4929:  GF_TargetOLSPropertyBox *ptr = (GF_TargetOLSPropertyBox *)a;",
          "4930:  gf_isom_box_dump_start(a, \"TargetOLSPropertyBox\", trace);",
          "4932:  fprintf(trace, \"target_ols_index=\\\"%d\\\">\\n\", ptr->target_ols_index);",
          "4934:  gf_isom_box_dump_done(\"TargetOLSPropertyBox\", a, trace);",
          "",
          "[Removed Lines]",
          "4931:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "4951:  a->type = ptr->group_type;",
          "4952:  gf_isom_box_dump_start(a, \"TrackGroupTypeBox\", trace);",
          "4953:  a->type = GF_ISOM_BOX_TYPE_TRGT;",
          "4955:  fprintf(trace, \"track_group_id=\\\"%d\\\">\\n\", ptr->track_group_id);",
          "4956:  gf_isom_box_dump_done(\"TrackGroupTypeBox\", a, trace);",
          "4957:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4954:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "4972:  a->type = ptr->grouping_type;",
          "4973:  gf_isom_box_dump_start(a, \"EntityToGroupTypeBox\", trace);",
          "4974:  a->type = GF_ISOM_BOX_TYPE_GRPT;",
          "4976:  fprintf(trace, \"group_id=\\\"%d\\\">\\n\", ptr->group_id);",
          "4978:  for (i=0; i<ptr->entity_id_count ; i++)",
          "",
          "[Removed Lines]",
          "4975:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4990:  GF_StereoVideoBox *ptr = (GF_StereoVideoBox *) a;",
          "4991:  gf_isom_box_dump_start(a, \"StereoVideoBox\", trace);",
          "4994:  fprintf(trace, \"single_view_allowed=\\\"%d\\\" stereo_scheme=\\\"%d\\\" \", ptr->single_view_allowed, ptr->stereo_scheme);",
          "4995:  dump_data_attribute(trace, \"stereo_indication_type\", ptr->stereo_indication_type, ptr->sit_len);",
          "4996:  fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "4993:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "5012:  FDItemInformationBox *ptr = (FDItemInformationBox *) a;",
          "5013:  gf_isom_box_dump_start(a, \"FDItemInformationBox\", trace);",
          "5016:  fprintf(trace, \">\\n\");",
          "5017:  if (ptr->partition_entries)",
          "5018:   gf_isom_box_array_dump(ptr->partition_entries, trace);",
          "",
          "[Removed Lines]",
          "5015:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "5038:   box_name = \"FECReservoirBox\";",
          "5039:  }",
          "5040:  gf_isom_box_dump_start(a, box_name, trace);",
          "5042:  fprintf(trace, \">\\n\");",
          "5044:  for (i=0; i<ptr->nb_entries; i++) {",
          "",
          "[Removed Lines]",
          "5041:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "5057:  GroupIdToNameBox *ptr = (GroupIdToNameBox *) a;",
          "5058:  gf_isom_box_dump_start(a, \"GroupIdToNameBox\", trace);",
          "5061:  fprintf(trace, \">\\n\");",
          "5063:  for (i=0; i<ptr->nb_entries; i++) {",
          "",
          "[Removed Lines]",
          "5060:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "5076:  FDPartitionEntryBox *ptr = (FDPartitionEntryBox *) a;",
          "5077:  gf_isom_box_dump_start(a, \"FDPartitionEntryBox\", trace);",
          "5080:  fprintf(trace, \">\\n\");",
          "5081:  if (ptr->blocks_and_symbols)",
          "5082:   gf_isom_box_dump(ptr->blocks_and_symbols, trace);",
          "",
          "[Removed Lines]",
          "5079:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "5097:  FilePartitionBox *ptr = (FilePartitionBox *) a;",
          "5098:  gf_isom_box_dump_start(a, \"FilePartitionBox\", trace);",
          "5102:  fprintf(trace, \"itemID=\\\"%d\\\" FEC_encoding_ID=\\\"%d\\\" FEC_instance_ID=\\\"%d\\\" max_source_block_length=\\\"%d\\\" encoding_symbol_length=\\\"%d\\\" max_number_of_encoding_symbols=\\\"%d\\\" \", ptr->itemID, ptr->FEC_encoding_ID, ptr->FEC_instance_ID, ptr->max_source_block_length, ptr->encoding_symbol_length, ptr->max_number_of_encoding_symbols);",
          "5104:  if (ptr->scheme_specific_info)",
          "",
          "[Removed Lines]",
          "5100:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "5148:  GF_SRTPProcessBox *ptr = (GF_SRTPProcessBox *) a;",
          "5149:  gf_isom_box_dump_start(a, \"SRTPProcessBox\", trace);",
          "5153:  fprintf(trace, \"encryption_algorithm_rtp=\\\"%d\\\" encryption_algorithm_rtcp=\\\"%d\\\" integrity_algorithm_rtp=\\\"%d\\\" integrity_algorithm_rtcp=\\\"%d\\\">\\n\", ptr->encryption_algorithm_rtp, ptr->encryption_algorithm_rtcp, ptr->integrity_algorithm_rtp, ptr->integrity_algorithm_rtcp);",
          "5155:  if (ptr->info) gf_isom_box_dump(ptr->info, trace);",
          "",
          "[Removed Lines]",
          "5151:  gf_full_box_dump((GF_Box *)a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "5223:  GF_TrickPlayBox *p = (GF_TrickPlayBox *) a;",
          "5225:  gf_isom_box_dump_start(a, \"TrickPlayBox\", trace);",
          "5227:  fprintf(trace, \">\\n\");",
          "5228:  for (i=0; i<p->entry_count; i++) {",
          "5229:   fprintf(trace, \"<TrickPlayBoxEntry pic_type=\\\"%d\\\" dependency_level=\\\"%d\\\"/>\\n\", p->entries[i].pic_type, p->entries[i].dependency_level);",
          "",
          "[Removed Lines]",
          "5226:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "5240:  GF_BaseLocationBox *p = (GF_BaseLocationBox *) a;",
          "5242:  gf_isom_box_dump_start(a, \"BaseLocationBox\", trace);",
          "5244:  fprintf(trace, \"baseLocation=\\\"%s\\\" basePurlLocation=\\\"%s\\\">\\n\", p->baseLocation, p->basePurlLocation);",
          "5245:  gf_isom_box_dump_done(\"BaseLocationBox\", a, trace);",
          "5246:  return GF_OK;",
          "",
          "[Removed Lines]",
          "5243:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "5251:  GF_AssetInformationBox *p = (GF_AssetInformationBox *) a;",
          "5253:  gf_isom_box_dump_start(a, \"AssetInformationBox\", trace);",
          "5255:  fprintf(trace, \"profile_version=\\\"%d\\\" APID=\\\"%s\\\">\\n\", p->profile_version, p->APID);",
          "5256:  gf_isom_box_dump_done(\"AssetInformationBox\", a, trace);",
          "5257:  return GF_OK;",
          "",
          "[Removed Lines]",
          "5254:  gf_full_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  return 0;",
          "84: }",
          "87: GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box)",
          "88: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: static GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:  }",
          "190:  newBox->size = size - hdr_size;",
          "191:  if (newBox->size) {",
          "193:   newBox->size = size;",
          "194:   end = gf_bs_get_position(bs);",
          "198:   e = GF_OK;",
          "199:   end = gf_bs_get_position(bs);",
          "",
          "[Removed Lines]",
          "192:   e = gf_isom_box_read(newBox, bs);",
          "195:  }",
          "196:  else {",
          "",
          "[Added Lines]",
          "194:   e = gf_isom_full_box_read(newBox, bs);",
          "195:   if (!e) e = gf_isom_box_read(newBox, bs);",
          "198:  } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:  return gf_isom_box_parse_ex(outBox, bs, 0, GF_FALSE);",
          "228: }",
          "250: void gf_isom_box_array_del(GF_List *other_boxes)",
          "251: {",
          "252:  u32 count, i;",
          "",
          "[Removed Lines]",
          "230: GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs)",
          "231: {",
          "232:  GF_FullBox *self = (GF_FullBox *) ptr;",
          "233:  if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "234:  self->version = gf_bs_read_u8(bs);",
          "235:  self->flags = gf_bs_read_u24(bs);",
          "236:  ptr->size -= 4;",
          "237:  return GF_OK;",
          "238: }",
          "241: void gf_isom_full_box_init(GF_Box *a)",
          "242: {",
          "243:  GF_FullBox *ptr = (GF_FullBox *)a;",
          "244:  if (! ptr) return;",
          "245:  ptr->flags = 0;",
          "246:  ptr->version = 0;",
          "247: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "291: GF_EXPORT",
          "292: GF_Err gf_isom_box_write_header(GF_Box *ptr, GF_BitStream *bs)",
          "293: {",
          "",
          "[Removed Lines]",
          "271: GF_Err gf_isom_box_get_size(GF_Box *ptr)",
          "272: {",
          "273:  ptr->size = 8;",
          "275:  if (ptr->type == GF_ISOM_BOX_TYPE_UUID) {",
          "276:   ptr->size += 16;",
          "277:  }",
          "279:  return GF_OK;",
          "280: }",
          "282: GF_Err gf_isom_full_box_get_size(GF_Box *ptr)",
          "283: {",
          "284:  GF_Err e;",
          "285:  e = gf_isom_box_get_size(ptr);",
          "286:  if (e) return e;",
          "287:  ptr->size += 4;",
          "288:  return GF_OK;",
          "289: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "717: #define BOX_DEFINE_S(__type, b_rad, __par, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 0, 0, __par, __spec }",
          "727: #define TREF_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 0, 0, __par, __spec }",
          "731: static const struct box_registry_entry {",
          "732:  u32 box_4cc;",
          "",
          "[Removed Lines]",
          "719: #define FBOX_DEFINE(__type, b_rad, __par, __max_v) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, __max_v, 0, __par, \"p12\" }",
          "721: #define FBOX_DEFINE_FLAGS(__type, b_rad, __par, __max_v, flags) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, __max_v, flags, __par, \"p12\" }",
          "723: #define FBOX_DEFINE_FLAGS_S(__type, b_rad, __par, __max_v, flags, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, __max_v, flags, __par, __spec }",
          "725: #define FBOX_DEFINE_S(__type, b_rad, __par, __max_v, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, __max_v, 0, __par, __spec }",
          "729: #define TRGT_DEFINE(__type, b_rad, __par, __4cc, max_version, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, max_version, 0, __par, __spec }",
          "",
          "[Added Lines]",
          "682: #define FBOX_DEFINE(__type, b_rad, __par, __max_v) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, 0, __par, \"p12\" }",
          "684: #define FBOX_DEFINE_FLAGS(__type, b_rad, __par, __max_v, flags) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, flags, __par, \"p12\" }",
          "686: #define FBOX_DEFINE_FLAGS_S(__type, b_rad, __par, __max_v, flags, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, flags, __par, __spec }",
          "688: #define FBOX_DEFINE_S(__type, b_rad, __par, __max_v, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, 0, __par, __spec }",
          "692: #define TRGT_DEFINE(__type, b_rad, __par, __4cc, max_version, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 1+max_version, 0, __par, __spec }",
          "694: #define SGPD_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 1, 0, __par, __spec }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "737:  GF_Err (*size_fn)(GF_Box *a);",
          "738:  GF_Err (*dump_fn)(GF_Box *a, FILE *trace);",
          "739:  u32 alt_4cc;//used for sample grouping type and track / item reference types",
          "741:  u32 flags;",
          "742:  const char *parents_4cc;",
          "743:  const char *spec;",
          "",
          "[Removed Lines]",
          "740:  u8 max_version;",
          "",
          "[Added Lines]",
          "705:  u8 max_version_plus_one;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "788:  TREF_DEFINE(GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_4CC('f','d','e','l'), \"p12\"),",
          "835:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRM, gnrm, \"stsd\", \"unknown\"),",
          "",
          "[Removed Lines]",
          "791:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RAP, \"p12\"),",
          "792:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ROLL, \"p12\"),",
          "793:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_PROL, \"p12\"),",
          "794:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TELE, \"p12\"),",
          "795:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SEIG, \"p15\"),",
          "796:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_OINF, \"p15\"),",
          "797:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_LINF, \"p15\"),",
          "798:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TRIF, \"p15\"),",
          "799:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_NALM, \"p15\"),",
          "801:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVLL, \"p15\"),",
          "802:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVSS, \"p15\"),",
          "803:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_DTRT, \"p15\"),",
          "804:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_MVIF, \"p15\"),",
          "805:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCIF, \"p15\"),",
          "806:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCNM, \"p15\"),",
          "807:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_STSA, \"p15\"),",
          "808:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSAS, \"p15\"),",
          "809:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SYNC, \"p15\"),",
          "810:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSCL, \"p15\"),",
          "811:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"p15\"),",
          "813:  TREF_DEFINE( GF_ISOM_SAMPLE_GROUP_3GAG, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"3gpp\"),",
          "814:  TREF_DEFINE( GF_ISOM_SAMPLE_GROUP_AVCB, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"3gpp\"),",
          "818:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RASH, \"p12\"),",
          "819:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ALST, \"p12\"),",
          "820:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVLL, \"p15\"),",
          "821:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVSS, \"p15\"),",
          "822:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_DTRT, \"p15\"),",
          "823:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_MVIF, \"p15\"),",
          "824:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCIF, \"p15\"),",
          "825:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCNM, \"p15\"),",
          "826:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_STSA, \"p15\"),",
          "827:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSAS, \"p15\"),",
          "828:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SYNC, \"p15\"),",
          "829:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSCL, \"p15\"),",
          "830:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"p15\"),",
          "831:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_3GAG, \"3gpp\"),",
          "832:  TREF_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVCB, \"3gpp\"),",
          "",
          "[Added Lines]",
          "756:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RAP, \"p12\"),",
          "757:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ROLL, \"p12\"),",
          "758:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_PROL, \"p12\"),",
          "759:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TELE, \"p12\"),",
          "760:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SEIG, \"p15\"),",
          "761:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_OINF, \"p15\"),",
          "762:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_LINF, \"p15\"),",
          "763:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TRIF, \"p15\"),",
          "764:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_NALM, \"p15\"),",
          "766:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVLL, \"p15\"),",
          "767:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVSS, \"p15\"),",
          "768:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_DTRT, \"p15\"),",
          "769:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_MVIF, \"p15\"),",
          "770:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCIF, \"p15\"),",
          "771:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCNM, \"p15\"),",
          "772:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_STSA, \"p15\"),",
          "773:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSAS, \"p15\"),",
          "774:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SYNC, \"p15\"),",
          "775:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSCL, \"p15\"),",
          "776:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"p15\"),",
          "777:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_3GAG, \"3gpp\"),",
          "778:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVCB, \"3gpp\"),",
          "782:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RASH, \"p12\"),",
          "783:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ALST, \"p12\"),",
          "784:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVLL, \"p15\"),",
          "785:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVSS, \"p15\"),",
          "786:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_DTRT, \"p15\"),",
          "787:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_MVIF, \"p15\"),",
          "788:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCIF, \"p15\"),",
          "789:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCNM, \"p15\"),",
          "790:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_STSA, \"p15\"),",
          "791:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSAS, \"p15\"),",
          "792:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SYNC, \"p15\"),",
          "793:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSCL, \"p15\"),",
          "794:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"p15\"),",
          "795:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_3GAG, \"3gpp\"),",
          "796:  SGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVCB, \"3gpp\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "857:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STHD, nmhd, \"minf\", 0),",
          "858:  BOX_DEFINE( GF_ISOM_BOX_TYPE_STBL, stbl, \"minf\"),",
          "859:  BOX_DEFINE( GF_ISOM_BOX_TYPE_DINF, dinf, \"minf meta\"),",
          "862:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CPRT, cprt, \"udta\", 0),",
          "863:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_KIND, kind, \"udta\", 0),",
          "864:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_HDLR, hdlr, \"mdia meta\", 0),",
          "",
          "[Removed Lines]",
          "860:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_URL, url, \"dref\", 0),",
          "861:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_URN, urn, \"dref\", 0),",
          "",
          "[Added Lines]",
          "824:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_URL, url, \"dref\", 0, 1),",
          "825:  FBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URN, urn, \"dref\", 0, 1),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "881:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_SDTP, sdtp, \"stbl\", 0),",
          "882:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CO64, co64, \"stbl\", 0),",
          "883:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MINF, minf, \"mdia\"),",
          "885:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TREF, tref, \"trak\"),",
          "886:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MDIA, mdia, \"trak\"),",
          "887:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MFRA, mfra, \"file\"),",
          "",
          "[Removed Lines]",
          "884:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_TKHD, tkhd, \"trak\", 1),",
          "",
          "[Added Lines]",
          "848:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TKHD, tkhd, \"trak\", 1, 0x000001 | 0x000002 | 0x000004 | 0x000008),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "895:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIZ, saiz, \"stbl traf\", 0, 1),",
          "896:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 0),",
          "897:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 1),",
          "899:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TRGR, trgr, \"trak\"),",
          "900:  BOX_DEFINE( GF_ISOM_BOX_TYPE_FTYP, ftyp, \"file\"),",
          "901:  BOX_DEFINE( GF_ISOM_BOX_TYPE_PADB, padb, \"stbl\"),",
          "",
          "[Removed Lines]",
          "898:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_SUBS, subs, \"stbl traf\", 1),",
          "",
          "[Added Lines]",
          "862:  FBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_SUBS, subs, \"stbl traf\", 0, 7), //warning flags are not used as a bit mask but as an enum!!",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "904:  BOX_DEFINE( GF_ISOM_BOX_TYPE_CLAP, clap, \"video_sample_entry ipco\"),",
          "905:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\", 0), //apple uses meta in moov->udta",
          "906:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_XML, xml, \"meta\", 0),",
          "908:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_ILOC, iloc, \"meta\", 2),",
          "909:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_PITM, pitm, \"meta\", 1),",
          "910:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_IPRO, ipro, \"meta\", 0),",
          "",
          "[Removed Lines]",
          "907:  BOX_DEFINE( GF_ISOM_BOX_TYPE_BXML, bxml, \"meta\"),",
          "",
          "[Added Lines]",
          "871:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_BXML, bxml, \"meta\", 0),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "996:  BOX_DEFINE( GF_ISOM_BOX_TYPE_NAME, name, \"udta\"),",
          "997:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TSSY, tssy, \"rrtp\"),",
          "998:  BOX_DEFINE( GF_ISOM_BOX_TYPE_RSSR, rssr, \"rrtp\"),",
          "1001: #endif",
          "",
          "[Removed Lines]",
          "999:  BOX_DEFINE( GF_ISOM_BOX_TYPE_SRPP, srpp, \"srtp\"),",
          "",
          "[Added Lines]",
          "962:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_SRPP, srpp, \"srtp\", 0),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1025:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4S, mp4s, \"stsd\", \"p14\"),",
          "1026:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4V, video_sample_entry, \"stsd\", \"p14\"),",
          "1027:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4A, audio_sample_entry, \"stsd\", \"p14\"),",
          "1028:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_M4DS, m4ds, \"stsd\", \"p14\"),",
          "1032:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVCC, avcc, \"avc1 avc2 avc3 avc4 encv resv ipco\", \"p15\"),",
          "",
          "[Removed Lines]",
          "1024:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IODS, iods, \"moov\", \"p14\"),",
          "1029:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ESDS, esds, \"mp4a mp4s mp4v encv enca encs resv\", \"p14\"),",
          "",
          "[Added Lines]",
          "987:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IODS, iods, \"moov\", 0, \"p14\"),",
          "992:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ESDS, esds, \"mp4a mp4s mp4v encv enca encs resv\", 0, \"p14\"),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1075:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPRP, iprp, \"meta\", \"iff\"),",
          "1076:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPCO, ipco, \"iprp\", \"iff\"),",
          "1078:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_COLR, colr, \"ipco\", \"iff\"),",
          "1081:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IROT, irot, \"ipco\", \"iff\"),",
          "1083:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPL, grpl, \"meta\", \"iff\"),",
          "1084:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CCST, ccst, \"sample_entry\", 0, \"iff\"),",
          "1085:  TRGT_DEFINE(GF_ISOM_BOX_TYPE_GRPT, grptype, \"grpl\", GF_ISOM_BOX_TYPE_ALTR, 0, \"iff\"),",
          "",
          "[Removed Lines]",
          "1077:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISPE, ispe, \"ipco\", \"iff\"),",
          "1079:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_PIXI, pixi, \"ipco\", \"iff\"),",
          "1080:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_RLOC, rloc, \"ipco\", \"iff\"),",
          "1082:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPMA, ipma, \"iprp\", \"iff\"),",
          "",
          "[Added Lines]",
          "1040:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISPE, ispe, \"ipco\", 0, \"iff\"),",
          "1042:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PIXI, pixi, \"ipco\", 0, \"iff\"),",
          "1043:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_RLOC, rloc, \"ipco\", 0, \"iff\"),",
          "1045:  FBOX_DEFINE_FLAGS_S( GF_ISOM_BOX_TYPE_IPMA, ipma, \"iprp\", 1, 1, \"iff\"),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1127:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_SENC, senc, \"trak traf\", \"cenc\"),",
          "1130:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IKMS, iKMS, \"schi\", 0, \"isma\"),",
          "1131:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISFM, iSFM, \"schi\", 0, \"isma\"),",
          "1138:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MDRI, mdri, \"file\", \"oma\"),",
          "1145:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VOID, void, \"\", \"apple\"),",
          "1146:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ILST, ilst, \"meta\", \"apple\"),",
          "1147:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DATA, databox, \"ilst\", 0, \"apple\"),",
          "",
          "[Removed Lines]",
          "1125:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_PSSH, pssh, \"moov moof\", \"cenc\"),",
          "1126:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_TENC, tenc, \"schi\", \"cenc\"),",
          "1132:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISLT, iSLT, \"schi\", \"isma\"),",
          "1135:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODKM, odkm, \"schi\", \"oma\"),",
          "1136:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_OHDR, ohdr, \"odkm\", \"oma\"),",
          "1137:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPI, grpi, \"ohdr\", \"oma\"),",
          "1139:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODTT, odtt, \"mdri\", \"oma\"),",
          "1140:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODRB, odrb, \"mdri\", \"oma\"),",
          "1141:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODAF, iSFM, \"schi\", \"oma\"),",
          "1144:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_CHPL, chpl, \"udta\", \"apple\"),",
          "",
          "[Added Lines]",
          "1088:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PSSH, pssh, \"moov moof\", 0, \"cenc\"),",
          "1089:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TENC, tenc, \"schi\", 1, \"cenc\"),",
          "1095:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISLT, iSLT, \"schi\", 0, \"isma\"),",
          "1098:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODKM, odkm, \"schi\", 0, \"oma\"),",
          "1099:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_OHDR, ohdr, \"odkm\", 0, \"oma\"),",
          "1100:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPI, grpi, \"ohdr\", 0, \"oma\"),",
          "1102:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODTT, odtt, \"mdri\", 0, \"oma\"),",
          "1103:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODRB, odrb, \"mdri\", 0, \"oma\"),",
          "1104:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODAF, iSFM, \"schi\", 0, \"oma\"),",
          "1107:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CHPL, chpl, \"udta\", 0, \"apple\"),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1176: #ifndef GPAC_DISABLE_ISOM_ADOBE",
          "1181: #endif",
          "1189:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_FLXS, flxs, \"akey\", \"adobe\"),",
          "1191:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TRIK, trik, \"traf\", 0, \"dece\"),",
          "",
          "[Removed Lines]",
          "1177:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ABST, abst, \"file\", \"adobe\"),",
          "1178:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRA, afra, \"file\", \"adobe\"),",
          "1179:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ASRT, asrt, \"abst\", \"adobe\"),",
          "1180:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRT, afrt, \"abst\", \"adobe\"),",
          "1183:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADKM, adkm, \"schi\", \"adobe\"),",
          "1184:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AHDR, ahdr, \"adkm\", \"adobe\"),",
          "1185:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADAF, adaf, \"adkm\", \"adobe\"),",
          "1186:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_APRM, aprm, \"ahdr\", \"adobe\"),",
          "1187:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AEIB, aeib, \"aprm\", \"adobe\"),",
          "1188:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AKEY, akey, \"aprm\", \"adobe\"),",
          "",
          "[Added Lines]",
          "1140:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ABST, abst, \"file\", 0, \"adobe\"),",
          "1141:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRA, afra, \"file\", 0, \"adobe\"),",
          "1142:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ASRT, asrt, \"abst\", 0, \"adobe\"),",
          "1143:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRT, afrt, \"abst\", 0, \"adobe\"),",
          "1146:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADKM, adkm, \"schi\", 0, \"adobe\"),",
          "1147:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AHDR, ahdr, \"adkm\", 0, \"adobe\"),",
          "1148:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADAF, adaf, \"adkm\", 0, \"adobe\"),",
          "1149:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_APRM, aprm, \"ahdr\", 0, \"adobe\"),",
          "1150:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AEIB, aeib, \"aprm\", 0, \"adobe\"),",
          "1151:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AKEY, akey, \"aprm\", 0, \"adobe\"),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1201:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_TFXD, tfxd, \"traf\", \"smooth\"),",
          "1202:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_MSSM, uuid, \"file\", \"smooth\"),",
          "1203:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_TFRF, uuid, \"traf\", \"smooth\")",
          "",
          "[Removed Lines]",
          "1198:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_TENC, piff_tenc, \"schi\", \"smooth\"),",
          "1199:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_PSEC, piff_psec, \"trak traf\", \"smooth\"),",
          "1200:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_PSSH, piff_pssh, \"moov moof\", \"smooth\"),",
          "",
          "[Added Lines]",
          "1161:  FBOX_DEFINE_S(GF_ISOM_BOX_UUID_TENC, piff_tenc, \"schi\", 0, \"smooth\"),",
          "1162:  FBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSEC, piff_psec, \"trak traf\", 0, \"smooth\"),",
          "1163:  FBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSSH, piff_pssh, \"moov moof\", 0, \"smooth\"),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1392:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Size invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));",
          "1393:   return GF_ISOM_INVALID_FILE;",
          "1394:  }",
          "1395:  return a->registry->size_fn(a);",
          "1396: }",
          "1398: GF_EXPORT",
          "1399: GF_Err gf_isom_box_size(GF_Box *a)",
          "1400: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358:  a->size = 8;",
          "1360:  if (a->type == GF_ISOM_BOX_TYPE_UUID) {",
          "1361:   a->size += 16;",
          "1362:  }",
          "1364:  if (a->registry->max_version_plus_one) {",
          "1365:   a->size += 4;",
          "1366:  }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1413: GF_EXPORT",
          "1414: GF_Err gf_isom_dump_supported_box(u32 idx, FILE * trace)",
          "1415: {",
          "1416:  u32 i;",
          "1417:  GF_Err e;",
          "1418:  GF_Box *a;",
          "1420:   a = gf_isom_box_new(box_registry[idx].box_4cc);",
          "1421:   a->registry = &box_registry[idx];",
          "",
          "[Removed Lines]",
          "1419:  for (i = 0; i <= box_registry[idx].max_version; i++) {",
          "",
          "[Added Lines]",
          "1385: static GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs)",
          "1386: {",
          "1387:  if (ptr->registry->max_version_plus_one) {",
          "1388:   GF_FullBox *self = (GF_FullBox *) ptr;",
          "1389:   if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "1390:   self->version = gf_bs_read_u8(bs);",
          "1391:   self->flags = gf_bs_read_u24(bs);",
          "1392:   ptr->size -= 4;",
          "1393:  }",
          "1394:  return GF_OK;",
          "1395: }",
          "1402:  u32 nb_versions=0;",
          "1406:  if (box_registry[idx].max_version_plus_one) {",
          "1407:   nb_versions = box_registry[idx].max_version_plus_one - 1;",
          "1408:  }",
          "1409:  for (i = 0; i <= nb_versions; i++) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1432:    else if (a->type==GF_ISOM_BOX_TYPE_GRPT)",
          "1433:     ((GF_EntityToGroupTypeBox*)a)->grouping_type = box_registry[idx].alt_4cc;",
          "1434:   }",
          "1436:    ((GF_FullBox *)a)->version = i;",
          "1437:   }",
          "1438:   if (box_registry[idx].flags) {",
          "1440:   }",
          "1442:   gf_isom_box_del(a);",
          "1443:  }",
          "1444:  return e;",
          "",
          "[Removed Lines]",
          "1435:   if (box_registry[idx].max_version) {",
          "1439:    ((GF_FullBox *)a)->flags = box_registry[idx].flags;",
          "1441:   e = gf_isom_box_dump(a, trace);",
          "",
          "[Added Lines]",
          "1425:   if (box_registry[idx].max_version_plus_one) {",
          "1429:    u32 flag_mask=1;",
          "1430:    u32 flags = box_registry[idx].flags;",
          "1431:    ((GF_FullBox *)a)->flags = 0;",
          "1432:    e = gf_isom_box_dump(a, trace);",
          "1435:    while (!e) {",
          "1436:     u32 flag = flags & flag_mask;",
          "1437:     flag_mask <<= 1;",
          "1438:     if (flag) {",
          "1439:      ((GF_FullBox *)a)->flags = flag;",
          "1440:      e = gf_isom_box_dump(a, trace);",
          "1441:     }",
          "1442:     if (flag_mask > flags) break;",
          "1443:     if (flag_mask == 0x80000000) break;",
          "1444:    }",
          "1446:   } else {",
          "1447:    e = gf_isom_box_dump(a, trace);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1470:   }",
          "1471:   fprintf(trace, \"}\\\" \");",
          "1472:  }",
          "1473:  fprintf(trace, \"Specification=\\\"%s\\\" \", a->registry->spec);",
          "1474:  fprintf(trace, \"Container=\\\"%s\\\" \", a->registry->parents_4cc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1482:  if (a->registry->max_version_plus_one) {",
          "1483:   fprintf(trace, \"Version=\\\"%d\\\" Flags=\\\"%d\\\" \", ((GF_FullBox*)a)->version,((GF_FullBox*)a)->flags);",
          "1484:  }",
          "",
          "---------------"
        ],
        "src/isomedia/hinting.c||src/isomedia/hinting.c": [
          "File: src/isomedia/hinting.c -> src/isomedia/hinting.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: GF_Err ghnt_Size(GF_Box *s)",
          "96: {",
          "98:  GF_HintSampleEntryBox *ptr = (GF_HintSampleEntryBox *)s;",
          "102:  ptr->size += 16;",
          "103:  return GF_OK;",
          "104: }",
          "",
          "[Removed Lines]",
          "97:  GF_Err e;",
          "100:  e = gf_isom_box_get_size(s);",
          "101:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/iff.c||src/isomedia/iff.c": [
          "File: src/isomedia/iff.c -> src/isomedia/iff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  GF_Err e;",
          "47:  GF_ImageSpatialExtentsPropertyBox *p = (GF_ImageSpatialExtentsPropertyBox *)s;",
          "52:  if (p->version == 0 && p->flags == 0) {",
          "53:   p->image_width = gf_bs_read_u32(bs);",
          "54:   p->image_height = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "49:  e = gf_isom_full_box_read(s, bs);",
          "50:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: GF_Err ispe_Size(GF_Box *s)",
          "79: {",
          "81:  GF_ImageSpatialExtentsPropertyBox *p = (GF_ImageSpatialExtentsPropertyBox*)s;",
          "84:  if (p->version == 0 && p->flags == 0) {",
          "85:   p->size += 8;",
          "86:   return GF_OK;",
          "",
          "[Removed Lines]",
          "80:  GF_Err e;",
          "82:  e = gf_isom_full_box_get_size(s);",
          "83:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149: GF_Err colr_Size(GF_Box *s)",
          "150: {",
          "152:  GF_ColourInformationBox *p = (GF_ColourInformationBox*)s;",
          "155:  if (p->colour_type != GF_4CC('n','c','l','x')) {",
          "156:   p->size += 4 + p->opaque_size;",
          "157:  } else {",
          "",
          "[Removed Lines]",
          "151:  GF_Err e;",
          "153:  e = gf_isom_box_get_size(s);",
          "154:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:  GF_Err e;",
          "182:  GF_PixelInformationPropertyBox *p = (GF_PixelInformationPropertyBox *)s;",
          "187:  if (p->version == 0 && p->flags == 0) {",
          "188:   p->num_channels = gf_bs_read_u8(bs);",
          "189:   p->bits_per_channel = (u8 *)gf_malloc(p->num_channels);",
          "",
          "[Removed Lines]",
          "184:  e = gf_isom_full_box_read(s, bs);",
          "185:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219: GF_Err pixi_Size(GF_Box *s)",
          "220: {",
          "222:  GF_PixelInformationPropertyBox *p = (GF_PixelInformationPropertyBox*)s;",
          "225:  if (p->version == 0 && p->flags == 0) {",
          "226:   p->size += 1 + p->num_channels;",
          "227:   return GF_OK;",
          "",
          "[Removed Lines]",
          "221:  GF_Err e;",
          "223:  e = gf_isom_full_box_get_size(s);",
          "224:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "250:  GF_Err e;",
          "251:  GF_RelativeLocationPropertyBox *p = (GF_RelativeLocationPropertyBox *)s;",
          "256:  if (p->version == 0 && p->flags == 0) {",
          "257:   p->horizontal_offset = gf_bs_read_u32(bs);",
          "258:   p->vertical_offset = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "253:  e = gf_isom_full_box_read(s, bs);",
          "254:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282: GF_Err rloc_Size(GF_Box *s)",
          "283: {",
          "285:  GF_RelativeLocationPropertyBox *p = (GF_RelativeLocationPropertyBox*)s;",
          "288:  if (p->version == 0 && p->flags == 0) {",
          "289:   p->size += 8;",
          "290:   return GF_OK;",
          "",
          "[Removed Lines]",
          "284:  GF_Err e;",
          "286:  e = gf_isom_full_box_get_size(s);",
          "287:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "329: GF_Err irot_Size(GF_Box *s)",
          "330: {",
          "332:  GF_ImageRotationBox *p = (GF_ImageRotationBox*)s;",
          "335:  p->size += 1;",
          "336:  return GF_OK;",
          "337: }",
          "",
          "[Removed Lines]",
          "331:  GF_Err e;",
          "333:  e = gf_isom_box_get_size(s);",
          "334:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "367: GF_Err ipco_Size(GF_Box *s)",
          "368: {",
          "370: }",
          "",
          "[Removed Lines]",
          "369:  return gf_isom_box_get_size(s);",
          "",
          "[Added Lines]",
          "346:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "426:  GF_Err e;",
          "427:  GF_ItemPropertiesBox *p = (GF_ItemPropertiesBox *)s;",
          "428:  if (!s) return GF_BAD_PARAM;",
          "431:  if (p->property_container) {",
          "432:   e = gf_isom_box_size((GF_Box *) p->property_container);",
          "433:   if (e) return e;",
          "",
          "[Removed Lines]",
          "429:  e = gf_isom_box_get_size(s);",
          "430:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "480:  GF_ItemPropertyAssociationBox *p = (GF_ItemPropertyAssociationBox *)s;",
          "481:  u32 entry_count, association_count;",
          "486:  entry_count = gf_bs_read_u32(bs);",
          "487:  for (i = 0; i < entry_count; i++) {",
          "488:   GF_ItemPropertyAssociationEntry *entry;",
          "",
          "[Removed Lines]",
          "483:  e = gf_isom_full_box_read(s, bs);",
          "484:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "553: GF_Err ipma_Size(GF_Box *s)",
          "554: {",
          "555:  u32 i;",
          "557:  u32 entry_count, association_count;",
          "558:  GF_ItemPropertyAssociationBox *p = (GF_ItemPropertyAssociationBox*)s;",
          "561:  entry_count = gf_list_count(p->entries);",
          "562:  p->size += 4;",
          "563:  if (p->version == 0) {",
          "",
          "[Removed Lines]",
          "556:  GF_Err e;",
          "559:  e = gf_isom_full_box_get_size(s);",
          "560:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "609: GF_Err grpl_Size(GF_Box *s)",
          "610: {",
          "612: }",
          "",
          "[Removed Lines]",
          "611:  return gf_isom_box_get_size(s);",
          "",
          "[Added Lines]",
          "581:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "629:  u32 i;",
          "630:  GF_EntityToGroupTypeBox *ptr = (GF_EntityToGroupTypeBox *)s;",
          "635:  bytesToRead = (u32) (ptr->size);",
          "636:  if (!bytesToRead) return GF_OK;",
          "637:  ptr->group_id = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "632:  e = gf_isom_full_box_read(s, bs);",
          "633:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "680: GF_Err grptype_Size(GF_Box *s)",
          "681: {",
          "683:  GF_EntityToGroupTypeBox *ptr = (GF_EntityToGroupTypeBox *)s;",
          "686:  ptr->size += 8 * (ptr->entity_id_count * sizeof(u32));",
          "687:  return GF_OK;",
          "688: }",
          "",
          "[Removed Lines]",
          "682:  GF_Err e;",
          "684:  e = gf_isom_full_box_get_size(s);",
          "685:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "709:  GF_AuxiliaryTypePropertyBox *p = (GF_AuxiliaryTypePropertyBox *)s;",
          "710:  GF_Err e;",
          "715:  e = gf_isom_read_null_terminated_string(s, bs, &p->aux_urn);",
          "716:  if (e) return e;",
          "717:  p->data_size = (u32) p->size;",
          "",
          "[Removed Lines]",
          "712:  e = gf_isom_full_box_read(s, bs);",
          "713:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "738: GF_Err auxc_Size(GF_Box *s)",
          "739: {",
          "741:  GF_AuxiliaryTypePropertyBox *p = (GF_AuxiliaryTypePropertyBox*)s;",
          "744:  p->size += 1;",
          "745:  return GF_OK;",
          "746: }",
          "",
          "[Removed Lines]",
          "740:  GF_Err e;",
          "742:  e = gf_isom_box_get_size(s);",
          "743:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "765: GF_Err oinf_Read(GF_Box *s, GF_BitStream *bs)",
          "766: {",
          "767:  GF_OINFPropertyBox *p = (GF_OINFPropertyBox *)s;",
          "770:  return gf_isom_oinf_read_entry(p->oinf, bs);",
          "771: }",
          "",
          "[Removed Lines]",
          "768:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "769:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "784: GF_Err oinf_Size(GF_Box *s)",
          "785: {",
          "787:  GF_OINFPropertyBox *p = (GF_OINFPropertyBox*)s;",
          "788:  if (!p->oinf) return GF_BAD_PARAM;",
          "791:  p->size += gf_isom_oinf_size_entry(p->oinf);",
          "792:  return GF_OK;",
          "793: }",
          "",
          "[Removed Lines]",
          "786:  GF_Err e;",
          "789:  e = gf_isom_full_box_get_size(s);",
          "790:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "808: GF_Err tols_Read(GF_Box *s, GF_BitStream *bs)",
          "809: {",
          "810:  GF_TargetOLSPropertyBox *p = (GF_TargetOLSPropertyBox *)s;",
          "813:  ISOM_DECREASE_SIZE(p, 2)",
          "814:  p->target_ols_index = gf_bs_read_u16(bs);",
          "815:  return GF_OK;",
          "",
          "[Removed Lines]",
          "811:  GF_Err e = gf_isom_full_box_read(s, bs);",
          "812:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "830: GF_Err tols_Size(GF_Box *s)",
          "831: {",
          "832:  GF_TargetOLSPropertyBox *p = (GF_TargetOLSPropertyBox*)s;",
          "835:  p->size += 2;",
          "836:  return GF_OK;",
          "837: }",
          "",
          "[Removed Lines]",
          "833:  GF_Err e = gf_isom_full_box_get_size(s);",
          "834:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/media_tools/webvtt.c||src/media_tools/webvtt.c": [
          "File: src/media_tools/webvtt.c -> src/media_tools/webvtt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: GF_Err boxstring_Size(GF_Box *s)",
          "247: {",
          "249:  GF_StringBox *box = (GF_StringBox *)s;",
          "253:  box->size += strlen(box->string);",
          "254:  return GF_OK;",
          "255: }",
          "",
          "[Removed Lines]",
          "248:  GF_Err e;",
          "250:  e = gf_isom_box_get_size(s);",
          "251:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258: {",
          "259:  GF_Err e;",
          "260:  GF_VTTCueBox *cuebox = (GF_VTTCueBox *)s;",
          "263:  if (cuebox->id) {",
          "264:   e = gf_isom_box_size((GF_Box *)cuebox->id);",
          "265:   if (e) return e;",
          "",
          "[Removed Lines]",
          "261:  e = gf_isom_box_get_size(s);",
          "262:  if (e) return e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286: GF_Err vtte_Size(GF_Box *s)",
          "287: {",
          "289: }",
          "291: GF_Err wvtt_Size(GF_Box *s)",
          "292: {",
          "293:  GF_Err e;",
          "294:  GF_WebVTTSampleEntryBox *wvtt = (GF_WebVTTSampleEntryBox *)s;",
          "297:  s->size += 8; // reserved and dataReferenceIndex",
          "298:  if (wvtt->config) {",
          "299:   e = gf_isom_box_size((GF_Box *)wvtt->config);",
          "",
          "[Removed Lines]",
          "288:  return gf_isom_box_get_size(s);",
          "295:  e = gf_isom_box_get_size(s);",
          "296:  if (e) return e;",
          "",
          "[Added Lines]",
          "282:  return GF_OK;",
          "",
          "---------------"
        ],
        "src/utils/error.c||src/utils/error.c": [
          "File: src/utils/error.c -> src/utils/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: {",
          "42:  u32 ch, i;",
          "43:  char *ptr, *name = (char *)szTYPE;",
          "44:  ptr = name;",
          "45:  for (i = 0; i < 4; i++, name++) {",
          "46:   ch = type >> (8 * (3-i) ) & 0xff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  if (!type) return \"\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbf947c4630fc6b67da3808d58f5e30fac138e41",
      "candidate_info": {
        "commit_hash": "dbf947c4630fc6b67da3808d58f5e30fac138e41",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/dbf947c4630fc6b67da3808d58f5e30fac138e41",
        "files": [
          "applications/mp4box/main.c",
          "include/gpac/internal/isomedia_dev.h",
          "include/gpac/tools.h",
          "src/filter_core/filter.c",
          "src/filters/mux_isom.c",
          "src/filters/reframe_nalu.c",
          "src/filters/write_generic.c",
          "src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/isom_intern.c",
          "src/isomedia/track.c",
          "src/media_tools/media_import.c",
          "src/utils/bitstream.c",
          "src/utils/error.c"
        ],
        "message": "fixed bugs from fuzzer",
        "before_after_code_files": [
          "applications/mp4box/main.c||applications/mp4box/main.c",
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "include/gpac/tools.h||include/gpac/tools.h",
          "src/filter_core/filter.c||src/filter_core/filter.c",
          "src/filters/mux_isom.c||src/filters/mux_isom.c",
          "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c",
          "src/filters/write_generic.c||src/filters/write_generic.c",
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c",
          "src/isomedia/track.c||src/isomedia/track.c",
          "src/media_tools/media_import.c||src/media_tools/media_import.c",
          "src/utils/bitstream.c||src/utils/bitstream.c",
          "src/utils/error.c||src/utils/error.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/main.c||applications/mp4box/main.c": [
          "File: applications/mp4box/main.c -> applications/mp4box/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4729:       gf_free(margs);",
          "4730:      }",
          "4738:      if (e) {",
          "4739:       fprintf(stderr, \"Error importing %s: %s\\n\", argv[i+1], gf_error_to_string(e));",
          "4740:       gf_isom_delete(file);",
          "",
          "[Removed Lines]",
          "4732:      if (sep) {",
          "4733:       sep[0] = '+';",
          "4734:       src = sep+1;",
          "4735:      } else {",
          "4736:       break;",
          "4737:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4742:        gf_fs_del(fs);",
          "4743:       return mp4box_cleanup(1);",
          "4744:      }",
          "4745:     }",
          "4746:     i++;",
          "4747:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4739:      if (sep) {",
          "4740:       sep[0] = '+';",
          "4741:       src = sep+1;",
          "4742:      } else {",
          "4743:       break;",
          "4744:      }",
          "",
          "---------------"
        ],
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4266: #define ERROR_ON_DUPLICATED_BOX(__abox, __parent) { \\",
          "4268:   strcpy(__ptype, gf_4cc_to_str(__parent->type) );\\",
          "4269:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] extra box %s found in %s, deleting\\n\", gf_4cc_to_str(__abox->type), __ptype)); \\",
          "4270:   gf_isom_box_del_parent(& (__parent->child_boxes), __abox);\\",
          "",
          "[Removed Lines]",
          "4267:   char __ptype[5];\\",
          "",
          "[Added Lines]",
          "4267:   char __ptype[GF_4CC_MSIZE];\\",
          "",
          "---------------"
        ],
        "include/gpac/tools.h||include/gpac/tools.h": [
          "File: include/gpac/tools.h -> include/gpac/tools.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #define GF_4CC(a,b,c,d) ((((u32)a)<<24)|(((u32)b)<<16)|(((u32)c)<<8)|((u32)d))",
          "74: #endif",
          "78: \\param type a four character code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #define GF_4CC_MSIZE 10",
          "",
          "---------------"
        ],
        "src/filter_core/filter.c||src/filter_core/filter.c": [
          "File: src/filter_core/filter.c -> src/filter_core/filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2985:      if (!(cap->flags & GF_CAPFLAG_INPUT)) continue;",
          "2986:      if (cap->code != GF_PROP_PID_FILE_EXT) continue;",
          "2987:      value = cap->val.value.string;",
          "2989:       const char *match = strstr(value, tmp_ext);",
          "2990:       if (!match) break;",
          "2991:       if (!match[ext_len] || (match[ext_len]=='|')) {",
          "",
          "[Removed Lines]",
          "2988:      while (value) {",
          "",
          "[Added Lines]",
          "2988:      while (value && ext_len) {",
          "",
          "---------------"
        ],
        "src/filters/mux_isom.c||src/filters/mux_isom.c": [
          "File: src/filters/mux_isom.c -> src/filters/mux_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3431:  if (!ctx->abs_offset) {",
          "3432:   u32 mval = ctx->dash_mode ? '6' : '5';",
          "3433:   u32 mbrand, mcount, found=0;",
          "3435:   gf_isom_set_fragment_option(ctx->file, 0, GF_ISOM_TFHD_FORCE_MOOF_BASE_OFFSET, 1);",
          "3437:   gf_isom_get_brand_info(ctx->file, &mbrand, NULL, &mcount);",
          "",
          "[Removed Lines]",
          "3434:   u8 szB[5];",
          "",
          "[Added Lines]",
          "3434:   u8 szB[GF_4CC_MSIZE];",
          "",
          "---------------"
        ],
        "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
          "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2919: static void naludmx_log_stats(GF_NALUDmxCtx *ctx)",
          "2920: {",
          "2921:  u32 i, count;",
          "2924:  if (ctx->nb_si || ctx->nb_sp) {",
          "2925:   GF_LOG(GF_LOG_INFO, GF_LOG_AUTHOR, (\"%s Import results: %d frames (%d NALUs) - Slices: %d I %d P %d B %d SP %d SI - %d SEI - %d IDR\\n\", ctx->log_name, nb_frames, ctx->nb_nalus, ctx->nb_i, ctx->nb_p, ctx->nb_b, ctx->nb_sp, ctx->nb_si, ctx->nb_sei, ctx->nb_idr ));",
          "",
          "[Removed Lines]",
          "2922:  u32 nb_frames = (u32) (ctx->dts / ctx->cur_fps.den);",
          "",
          "[Added Lines]",
          "2922:  u32 nb_frames = 0;",
          "2923:  if (ctx->cur_fps.den)",
          "2924:   nb_frames = (u32) (ctx->dts / ctx->cur_fps.den);",
          "",
          "---------------"
        ],
        "src/filters/write_generic.c||src/filters/write_generic.c": [
          "File: src/filters/write_generic.c -> src/filters/write_generic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: {",
          "76:  u32 cid, chan, sr, w, h, stype, pf, sfmt, av1mode, nb_bps;",
          "77:  const char *name, *mimetype;",
          "79:  const GF_PropertyValue *p;",
          "80:  GF_GenDumpCtx *ctx = gf_filter_get_udta(filter);",
          "",
          "[Removed Lines]",
          "78:  char szExt[10], szCodecExt[30], *sep;",
          "",
          "[Added Lines]",
          "78:  char szExt[GF_4CC_MSIZE], szCodecExt[30], *sep;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if (ptr->size<8) return GF_ISOM_INVALID_FILE;",
          "95:  strsize = tmp_strsize=(u32)ptr->size-8;",
          "96:  tmp_str = gf_malloc(sizeof(char)*tmp_strsize);",
          "98:  while (tmp_strsize) {",
          "99:   tmp_str[i] = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:  memset(tmp_str, 0, sizeof(char)*tmp_strsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   i++;",
          "104:  }",
          "105:  if (i) {",
          "107:   ptr->movie_identifier = gf_strdup(tmp_str);",
          "108:  }",
          "",
          "[Removed Lines]",
          "106:   tmp_str[strsize-1] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     break;",
          "119:    j++;",
          "120:   }",
          "123:  }",
          "125:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "121:   tmp_str[strsize-1] = 0;",
          "122:   gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "",
          "[Added Lines]",
          "121:   if (j) {",
          "122:    gf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);",
          "123:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     break;",
          "134:    j++;",
          "135:   }",
          "138:  }",
          "140:  i=0;",
          "",
          "[Removed Lines]",
          "136:   tmp_str[strsize-1] = 0;",
          "137:   gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "",
          "[Added Lines]",
          "138:   if (j) {",
          "139:    gf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);",
          "140:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:   i++;",
          "148:  }",
          "149:  if (i) {",
          "151:   ptr->drm_data = gf_strdup(tmp_str);",
          "152:  }",
          "",
          "[Removed Lines]",
          "150:   tmp_str[strsize-1] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:   i++;",
          "162:  }",
          "163:  if (i) {",
          "165:   ptr->meta_data = gf_strdup(tmp_str);",
          "166:  }",
          "",
          "[Removed Lines]",
          "164:   tmp_str[strsize-1] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  if (e) return e;",
          "165:  gf_bs_write_u32(bs, ptr->scheme_type);",
          "166:  gf_bs_write_u32(bs, ptr->scheme_version);",
          "168:  return GF_OK;",
          "169: }",
          "",
          "[Removed Lines]",
          "167:  if (ptr->flags & 0x000001) gf_bs_write_data(bs, ptr->URI, (u32) strlen(ptr->URI)+1);",
          "",
          "[Added Lines]",
          "167:  if (ptr->flags & 0x000001) {",
          "168:   if (ptr->URI)",
          "169:    gf_bs_write_data(bs, ptr->URI, (u32) strlen(ptr->URI)+1);",
          "170:   else",
          "171:    gf_bs_write_u8(bs, 0);",
          "172:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  GF_SchemeTypeBox *ptr = (GF_SchemeTypeBox *) s;",
          "174:  if (!s) return GF_BAD_PARAM;",
          "175:  ptr->size += 8;",
          "177:  return GF_OK;",
          "178: }",
          "",
          "[Removed Lines]",
          "176:  if (ptr->flags & 0x000001) ptr->size += strlen(ptr->URI)+1;",
          "",
          "[Added Lines]",
          "181:  if (ptr->flags & 0x000001) ptr->size += 1 + (ptr->URI ? strlen(ptr->URI) : 0);",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1516:     if (is_root_box) {",
          "1517:      GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown top-level box type %s\\n\", gf_4cc_to_str(boxType)));",
          "1518:     } else if (parentType) {",
          "1520:      strcpy(szName, gf_4cc_to_str(parentType));",
          "1521:      GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown box type %s in parent %s\\n\", gf_4cc_to_str(boxType), szName));",
          "1522:     } else {",
          "",
          "[Removed Lines]",
          "1519:      char szName[10];",
          "",
          "[Added Lines]",
          "1519:      char szName[GF_4CC_MSIZE];",
          "",
          "---------------"
        ],
        "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c": [
          "File: src/isomedia/isom_intern.c -> src/isomedia/isom_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   }",
          "116:  }",
          "120:  if (mov->moov->mvhd->duration < MaxDur) mov->moov->mvhd->duration = MaxDur;",
          "121:  return GF_OK;",
          "",
          "[Removed Lines]",
          "118:  mov->NextMoofNumber = moof->mfhd->sequence_number;",
          "",
          "[Added Lines]",
          "118:  mov->NextMoofNumber = moof->mfhd ? moof->mfhd->sequence_number : 0;",
          "",
          "---------------"
        ],
        "src/isomedia/track.c||src/isomedia/track.c": [
          "File: src/isomedia/track.c -> src/isomedia/track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:    ent->CTS_Offset = cts_offset;",
          "667:    stbl_AppendSize(trak->Media->information->sampleTable, size, ent->nb_pack);",
          "669:    stbl_AppendTime(trak->Media->information->sampleTable, duration, ent->nb_pack);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667:    if (!trak->Media->information->sampleTable->SampleSize) {",
          "668:     trak->Media->information->sampleTable->SampleSize = (GF_SampleSizeBox *) gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STSZ);",
          "669:     if (!trak->Media->information->sampleTable->SampleSize)",
          "670:      return GF_OUT_OF_MEM;",
          "671:    }",
          "675:    if (!trak->Media->information->sampleTable->TimeToSample) {",
          "676:     trak->Media->information->sampleTable->TimeToSample = (GF_TimeToSampleBox *) gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STTS);",
          "677:     if (!trak->Media->information->sampleTable->TimeToSample)",
          "678:      return GF_OUT_OF_MEM;",
          "679:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "706:     if (trak->moov->compressed_diff) {",
          "707:      final_offset += trak->moov->compressed_diff;",
          "708:     }",
          "709:     stbl_AppendChunk(trak->Media->information->sampleTable, final_offset);",
          "711:     stbl_AppendSampleToChunk(trak->Media->information->sampleTable,",
          "712:                              DescIndex, trun->sample_count);",
          "713:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721:     if (!trak->Media->information->sampleTable->ChunkOffset) {",
          "722:      trak->Media->information->sampleTable->ChunkOffset = gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STCO);",
          "723:      if (!trak->Media->information->sampleTable->ChunkOffset)",
          "724:       return GF_OUT_OF_MEM;",
          "725:     }",
          "728:     if (!trak->Media->information->sampleTable->SampleToChunk) {",
          "729:      trak->Media->information->sampleTable->SampleToChunk = (GF_SampleToChunkBox *) gf_isom_box_new_parent(&trak->Media->information->sampleTable->child_boxes, GF_ISOM_BOX_TYPE_STSC);",
          "730:      if (!trak->Media->information->sampleTable->SampleToChunk)",
          "731:       return GF_OUT_OF_MEM;",
          "732:     }",
          "",
          "---------------"
        ],
        "src/media_tools/media_import.c||src/media_tools/media_import.c": [
          "File: src/media_tools/media_import.c -> src/media_tools/media_import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   break;",
          "447:  default:",
          "448:  {",
          "450:   mstype = gf_isom_get_mpeg4_subtype(import->orig, track_in, di);",
          "451:   if (!mstype) mstype = gf_isom_get_media_subtype(import->orig, track_in, di);",
          "452:   strcpy(szT, gf_4cc_to_str(mtype));",
          "",
          "[Removed Lines]",
          "449:   char szT[5];",
          "",
          "[Added Lines]",
          "449:   char szT[GF_4CC_MSIZE];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1412:   if (esd) gf_odf_desc_del((GF_Descriptor *) esd);",
          "1413:  }",
          "1416:  if (importer->print_stats_graph & 1) gf_fs_print_stats(fsess);",
          "1417:  if (importer->print_stats_graph & 2) gf_fs_print_connections(fsess);",
          "1418:  gf_fs_del(fsess);",
          "1419:  return GF_OK;",
          "1420: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1419:  if (!importer->final_trackID) {",
          "1420:   return gf_import_message(importer, GF_NOT_SUPPORTED, \"[Importer] No valid track to import in input file \\\"%s\\\"\", importer->in_name);",
          "1421:  }",
          "",
          "---------------"
        ],
        "src/utils/bitstream.c||src/utils/bitstream.c": [
          "File: src/utils/bitstream.c -> src/utils/bitstream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:  default:",
          "1206:   if (bs->buffer_io)",
          "1207:    bs_flush_cache(bs);",
          "1212:   return bs->size;",
          "1213:  }",
          "1214: }",
          "",
          "[Removed Lines]",
          "1208:   offset = gf_ftell(bs->stream);",
          "1209:   gf_fseek(bs->stream, 0, SEEK_END);",
          "1210:   bs->size = gf_ftell(bs->stream);",
          "1211:   gf_fseek(bs->stream, offset, SEEK_SET);",
          "",
          "[Added Lines]",
          "1208:   if (bs->stream) {",
          "1209:    offset = gf_ftell(bs->stream);",
          "1210:    gf_fseek(bs->stream, 0, SEEK_END);",
          "1211:    bs->size = gf_ftell(bs->stream);",
          "1212:    gf_fseek(bs->stream, offset, SEEK_SET);",
          "1213:   }",
          "",
          "---------------"
        ],
        "src/utils/error.c||src/utils/error.c": [
          "File: src/utils/error.c -> src/utils/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define NB_4CC_BUF 10",
          "32: static u32 buf_4cc_idx=0;",
          "34: GF_EXPORT",
          "",
          "[Removed Lines]",
          "31: static char szTYPE_BUF[NB_4CC_BUF][9];",
          "",
          "[Added Lines]",
          "31: static char szTYPE_BUF[NB_4CC_BUF][GF_4CC_MSIZE];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "093283e727f396130651280609e687cd4778e0d1",
      "candidate_info": {
        "commit_hash": "093283e727f396130651280609e687cd4778e0d1",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/093283e727f396130651280609e687cd4778e0d1",
        "files": [
          "src/isomedia/box_code_adobe.c"
        ],
        "message": "fixed #1564",
        "before_after_code_files": [
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ],
          "candidate": [
            "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:  memset(tmp_str, 0, sizeof(char)*tmp_strsize);",
          "101:  while (tmp_strsize) {",
          "102:   tmp_str[i] = gf_bs_read_u8(bs);",
          "103:   tmp_strsize--;",
          "104:   if (!tmp_str[i])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:   ptr->movie_identifier = gf_strdup(tmp_str);",
          "110:  }",
          "112:  ptr->server_entry_count = gf_bs_read_u8(bs);",
          "113:  for (i=0; i<ptr->server_entry_count; i++) {",
          "114:   int j=0;",
          "116:   while (tmp_strsize) {",
          "117:    tmp_str[j] = gf_bs_read_u8(bs);",
          "118:    tmp_strsize--;",
          "119:    if (!tmp_str[j])",
          "",
          "[Removed Lines]",
          "115:   tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Added Lines]",
          "113:  ISOM_DECREASE_SIZE(ptr, 1)",
          "117:   tmp_strsize=(u32)ptr->size;",
          "119:    ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:   }",
          "126:  }",
          "128:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "129:  for (i=0; i<ptr->quality_entry_count; i++) {",
          "130:   int j=0;",
          "132:   while (tmp_strsize) {",
          "133:    tmp_str[j] = gf_bs_read_u8(bs);",
          "134:    tmp_strsize--;",
          "135:    if (!tmp_str[j])",
          "",
          "[Removed Lines]",
          "131:   tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Added Lines]",
          "131:  ISOM_DECREASE_SIZE(ptr, 1)",
          "135:   tmp_strsize=(u32)ptr->size;",
          "137:    ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:  }",
          "145:  i=0;",
          "147:  while (tmp_strsize) {",
          "148:   tmp_str[i] = gf_bs_read_u8(bs);",
          "149:   tmp_strsize--;",
          "150:   if (!tmp_str[i])",
          "",
          "[Removed Lines]",
          "146:  tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Added Lines]",
          "151:  tmp_strsize=(u32)ptr->size;",
          "153:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:  }",
          "158:  i=0;",
          "160:  while (tmp_strsize) {",
          "161:   tmp_str[i] = gf_bs_read_u8(bs);",
          "162:   tmp_strsize--;",
          "163:   if (!tmp_str[i])",
          "",
          "[Removed Lines]",
          "159:  tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Added Lines]",
          "165:  tmp_strsize=(u32)ptr->size;",
          "167:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "168:   ptr->meta_data = gf_strdup(tmp_str);",
          "169:  }",
          "171:  ptr->segment_run_table_count = gf_bs_read_u8(bs);",
          "172:  for (i=0; i<ptr->segment_run_table_count; i++) {",
          "173:   GF_AdobeSegmentRunTableBox *asrt = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:  ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:   gf_list_add(ptr->segment_run_table_entries, asrt);",
          "181:  }",
          "183:  ptr->fragment_run_table_count = gf_bs_read_u8(bs);",
          "184:  for (i=0; i<ptr->fragment_run_table_count; i++) {",
          "185:   GF_AdobeFragmentRunTableBox *afrt = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:  ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}