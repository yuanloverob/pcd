{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7887e68ff752260d061d8cdc68dfcece2f6a150d",
      "candidate_info": {
        "commit_hash": "7887e68ff752260d061d8cdc68dfcece2f6a150d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7887e68ff752260d061d8cdc68dfcece2f6a150d",
        "files": [
          "deps/uv/src/win/tcp.c"
        ],
        "message": "uv: upgrade to 6e8eb332",
        "before_after_code_files": [
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292: }",
          "1296:   int non_ifs_lsp;",
          "1297:   int close_socket = 1;",
          "1303:   if (tcp->flags & UV_HANDLE_READ_PENDING) {",
          "1305:     if (!(tcp->flags & UV_HANDLE_SHARED_TCP_SOCKET)) {",
          "1306:       shutdown(tcp->socket, SD_SEND);",
          "1307:       tcp->flags |= UV_HANDLE_SHUT;",
          "1308:     } else {",
          "1320:       }",
          "1321:     }",
          "1322:   }",
          "",
          "[Removed Lines]",
          "1295: void uv_tcp_close(uv_loop_t* loop, uv_tcp_t* tcp) {",
          "1310:       non_ifs_lsp = (tcp->flags & UV_HANDLE_IPV6) ? uv_tcp_non_ifs_lsp_ipv6 :",
          "1311:         uv_tcp_non_ifs_lsp_ipv4;",
          "1313:       if (!non_ifs_lsp) {",
          "1318:         CancelIo((HANDLE)tcp->socket);",
          "1319:         close_socket = 0;",
          "",
          "[Added Lines]",
          "1294: static int uv_tcp_try_cancel_io(uv_tcp_t* tcp) {",
          "1295:   SOCKET socket = tcp->socket;",
          "1299:   non_ifs_lsp = (tcp->flags & UV_HANDLE_IPV6) ? uv_tcp_non_ifs_lsp_ipv6 :",
          "1300:                                                 uv_tcp_non_ifs_lsp_ipv4;",
          "1304:   if (non_ifs_lsp) {",
          "1305:     DWORD bytes;",
          "1306:     if (WSAIoctl(socket,",
          "1307:                  SIO_BASE_HANDLE,",
          "1308:                  NULL,",
          "1309:                  0,",
          "1310:                  &socket,",
          "1311:                  sizeof socket,",
          "1312:                  &bytes,",
          "1313:                  NULL,",
          "1314:                  NULL) != 0) {",
          "1316:       return -1;",
          "1317:     }",
          "1318:   }",
          "1320:   assert(socket != 0 && socket != INVALID_SOCKET);",
          "1322:   if (!CancelIo((HANDLE) socket)) {",
          "1323:     return -1;",
          "1324:   }",
          "1327:   return 0;",
          "1328: }",
          "1331: void uv_tcp_close(uv_loop_t* loop, uv_tcp_t* tcp) {",
          "1342:     } else if (uv_tcp_try_cancel_io(tcp) == 0) {",
          "1346:       close_socket = 0;",
          "1353:     }",
          "1355:   } else if ((tcp->flags & UV_HANDLE_SHARED_TCP_SOCKET) &&",
          "1356:              tcp->accept_reqs != NULL) {",
          "1362:     if (uv_tcp_try_cancel_io(tcp) != 0) {",
          "1368:       unsigned int i;",
          "1369:       for (i = 0; i < uv_simultaneous_server_accepts; i++) {",
          "1370:         uv_tcp_accept_t* req = &tcp->accept_reqs[i];",
          "1371:         if (req->accept_socket != INVALID_SOCKET &&",
          "1372:             !HasOverlappedIoCompleted(&req->overlapped)) {",
          "1373:           closesocket(req->accept_socket);",
          "1374:           req->accept_socket = INVALID_SOCKET;",
          "1375:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25c2940a08453ec206268f5e86cc520b06194d88",
      "candidate_info": {
        "commit_hash": "25c2940a08453ec206268f5e86cc520b06194d88",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/25c2940a08453ec206268f5e86cc520b06194d88",
        "files": [
          "deps/v8/build/common.gypi",
          "deps/v8/src/arm/assembler-arm.cc",
          "deps/v8/src/arm/assembler-arm.h",
          "deps/v8/src/arm/builtins-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.h",
          "deps/v8/src/arm/codegen-arm.cc",
          "deps/v8/src/arm/full-codegen-arm.cc",
          "deps/v8/src/arm/macro-assembler-arm.cc",
          "deps/v8/src/arm/stub-cache-arm.cc",
          "deps/v8/src/flag-definitions.h",
          "deps/v8/src/platform-linux.cc",
          "deps/v8/src/v8globals.h",
          "deps/v8/test/cctest/test-assembler-arm.cc"
        ],
        "message": "v8: Relax requirement from VFP3 to VFP2 where possible.\n\nBUG=\nTEST=\n\nReview URL: https://chromiumcodereview.appspot.com/10818026\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@12194 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi",
          "deps/v8/src/arm/assembler-arm.cc||deps/v8/src/arm/assembler-arm.cc",
          "deps/v8/src/arm/assembler-arm.h||deps/v8/src/arm/assembler-arm.h",
          "deps/v8/src/arm/builtins-arm.cc||deps/v8/src/arm/builtins-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.cc||deps/v8/src/arm/code-stubs-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.h||deps/v8/src/arm/code-stubs-arm.h",
          "deps/v8/src/arm/codegen-arm.cc||deps/v8/src/arm/codegen-arm.cc",
          "deps/v8/src/arm/full-codegen-arm.cc||deps/v8/src/arm/full-codegen-arm.cc",
          "deps/v8/src/arm/macro-assembler-arm.cc||deps/v8/src/arm/macro-assembler-arm.cc",
          "deps/v8/src/arm/stub-cache-arm.cc||deps/v8/src/arm/stub-cache-arm.cc",
          "deps/v8/src/flag-definitions.h||deps/v8/src/flag-definitions.h",
          "deps/v8/src/platform-linux.cc||deps/v8/src/platform-linux.cc",
          "deps/v8/src/v8globals.h||deps/v8/src/v8globals.h",
          "deps/v8/test/cctest/test-assembler-arm.cc||deps/v8/test/cctest/test-assembler-arm.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     # both for the snapshot and for the ARM target. Leaving the default value",
          "49:     # of 'false' will avoid VFP instructions in the snapshot and use CPU feature",
          "50:     # probing when running on the target.",
          "53:     # Similar to vfp but on MIPS.",
          "54:     'v8_can_use_fpu_instructions%': 'true',",
          "",
          "[Removed Lines]",
          "51:     'v8_can_use_vfp_instructions%': 'false',",
          "",
          "[Added Lines]",
          "51:     'v8_can_use_vfp2_instructions%': 'false',",
          "52:     'v8_can_use_vfp3_instructions%': 'false',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:               'CAN_USE_UNALIGNED_ACCESSES=0',",
          "126:             ],",
          "127:           }],",
          "129:             'defines': [",
          "131:             ],",
          "132:           }],",
          "133:           [ 'v8_use_arm_eabi_hardfloat==\"true\"', {",
          "",
          "[Removed Lines]",
          "128:           [ 'v8_can_use_vfp_instructions==\"true\"', {",
          "130:               'CAN_USE_VFP_INSTRUCTIONS',",
          "",
          "[Added Lines]",
          "129:           [ 'v8_can_use_vfp2_instructions==\"true\"', {",
          "131:               'CAN_USE_VFP2_INSTRUCTIONS',",
          "132:             ],",
          "133:           }],",
          "134:           [ 'v8_can_use_vfp3_instructions==\"true\"', {",
          "135:             'defines': [",
          "136:               'CAN_USE_VFP3_INSTRUCTIONS',",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/assembler-arm.cc||deps/v8/src/arm/assembler-arm.cc": [
          "File: deps/v8/src/arm/assembler-arm.cc -> deps/v8/src/arm/assembler-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #ifdef CAN_USE_ARMV7_INSTRUCTIONS",
          "61:   answer |= 1u << ARMv7;",
          "67: #ifdef __arm__",
          "",
          "[Removed Lines]",
          "58: static uint64_t CpuFeaturesImpliedByCompiler() {",
          "59:   uint64_t answer = 0;",
          "62: #endif  // def CAN_USE_ARMV7_INSTRUCTIONS",
          "63: #ifdef CAN_USE_VFP_INSTRUCTIONS",
          "64:   answer |= 1u << VFP3 | 1u << ARMv7;",
          "65: #endif  // def CAN_USE_VFP_INSTRUCTIONS",
          "",
          "[Added Lines]",
          "58: static unsigned CpuFeaturesImpliedByCompiler() {",
          "59:   unsigned answer = 0;",
          "62: #endif  // CAN_USE_ARMV7_INSTRUCTIONS",
          "63: #ifdef CAN_USE_VFP3_INSTRUCTIONS",
          "64:   answer |= 1u << VFP3 | 1u << VFP2 | 1u << ARMv7;",
          "65: #endif  // CAN_USE_VFP3_INSTRUCTIONS",
          "66: #ifdef CAN_USE_VFP2_INSTRUCTIONS",
          "67:   answer |= 1u << VFP2;",
          "68: #endif  // CAN_USE_VFP2_INSTRUCTIONS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: #if defined(CAN_USE_ARMV7_INSTRUCTIONS) && defined(__VFP_FP__) \\",
          "72:     && !defined(__SOFTFP__)",
          "74: #endif  // defined(CAN_USE_ARMV7_INSTRUCTIONS) && defined(__VFP_FP__)",
          "78:   return answer;",
          "79: }",
          "",
          "[Removed Lines]",
          "73:   answer |= 1u << VFP3 | 1u << ARMv7;",
          "76: #endif  // def __arm__",
          "",
          "[Added Lines]",
          "76:   answer |= 1u << VFP3 | 1u << ARMv7 | 1u << VFP2;",
          "79: #endif  // _arm__",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   if (FLAG_enable_vfp3) {",
          "105:   }",
          "107:   if (FLAG_enable_armv7) {",
          "108:     supported_ |= 1u << ARMv7;",
          "109:   }",
          "112:   if (!IsSupported(VFP3) && OS::ArmCpuHasFeature(VFP3)) {",
          "118:   }",
          "120:   if (!IsSupported(ARMv7) && OS::ArmCpuHasFeature(ARMv7)) {",
          "122:     found_by_runtime_probing_ |= 1u << ARMv7;",
          "123:   }",
          "124: #endif",
          "125: }",
          "",
          "[Removed Lines]",
          "104:     supported_ |= 1u << VFP3 | 1u << ARMv7;",
          "110: #else  // def __arm__",
          "116:     supported_ |= 1u << VFP3 | 1u << ARMv7;",
          "117:     found_by_runtime_probing_ |= 1u << VFP3 | 1u << ARMv7;",
          "121:     supported_ |= 1u << ARMv7;",
          "",
          "[Added Lines]",
          "107:     supported_ |= 1u << VFP3 | 1u << ARMv7 | 1u << VFP2;",
          "113: #else  // __arm__",
          "119:     found_by_runtime_probing_ |= 1u << VFP3 | 1u << ARMv7 | 1u << VFP2;",
          "120:   } else if (!IsSupported(VFP2) && OS::ArmCpuHasFeature(VFP2)) {",
          "121:     found_by_runtime_probing_ |= 1u << VFP2;",
          "128:   supported_ |= found_by_runtime_probing_;",
          "132:   ASSERT(!IsSupported(VFP3) || (IsSupported(VFP2) && IsSupported(ARMv7)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1660:   int u = 1;",
          "1661:   if (offset < 0) {",
          "1662:     offset = -offset;",
          "",
          "[Removed Lines]",
          "1659:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1667:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1702:   int u = 1;",
          "1703:   if (offset < 0) {",
          "1704:     offset = -offset;",
          "",
          "[Removed Lines]",
          "1701:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1709:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1746:   int u = 1;",
          "1747:   if (offset < 0) {",
          "1748:     offset = -offset;",
          "",
          "[Removed Lines]",
          "1745:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1753:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1787:   int u = 1;",
          "1788:   if (offset < 0) {",
          "1789:     offset = -offset;",
          "",
          "[Removed Lines]",
          "1786:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1794:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1830:   ASSERT_LE(first.code(), last.code());",
          "1831:   ASSERT(am == ia || am == ia_w || am == db_w);",
          "1832:   ASSERT(!base.is(pc));",
          "",
          "[Removed Lines]",
          "1829:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1837:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1851:   ASSERT_LE(first.code(), last.code());",
          "1852:   ASSERT(am == ia || am == ia_w || am == db_w);",
          "1853:   ASSERT(!base.is(pc));",
          "",
          "[Removed Lines]",
          "1850:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1858:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1871:   ASSERT_LE(first.code(), last.code());",
          "1872:   ASSERT(am == ia || am == ia_w || am == db_w);",
          "1873:   ASSERT(!base.is(pc));",
          "",
          "[Removed Lines]",
          "1870:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1878:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1892:   ASSERT_LE(first.code(), last.code());",
          "1893:   ASSERT(am == ia || am == ia_w || am == db_w);",
          "1894:   ASSERT(!base.is(pc));",
          "",
          "[Removed Lines]",
          "1891:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1899:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1913: static bool FitsVMOVDoubleImmediate(double d, uint32_t *encoding) {",
          "",
          "[Removed Lines]",
          "1914:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "1922:   ASSERT(CpuFeatures::IsSupported(VFP3));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1964:                      const Condition cond) {",
          "1969:   uint32_t enc;",
          "1972:     emit(cond | 0xE*B24 | 0xB*B20 | dst.code()*B12 | 0xB*B8 | enc);",
          "1973:   } else {",
          "",
          "[Removed Lines]",
          "1967:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "1970:   if (FitsVMOVDoubleImmediate(imm, &enc)) {",
          "",
          "[Added Lines]",
          "1975:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "1978:   if (CpuFeatures::IsSupported(VFP3) && FitsVMOVDoubleImmediate(imm, &enc)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2001:                      const Condition cond) {",
          "2005:   int sd, d, sm, m;",
          "2006:   dst.split_code(&sd, &d);",
          "2007:   src.split_code(&sm, &m);",
          "",
          "[Removed Lines]",
          "2004:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2012:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2014:                      const Condition cond) {",
          "2018:   emit(cond | 0xE*B24 | 0xB*B20 |",
          "2019:        dst.code()*B12 | 0x5*B9 | B8 | B6 | src.code());",
          "2020: }",
          "",
          "[Removed Lines]",
          "2017:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2025:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2032:   ASSERT(!src1.is(pc) && !src2.is(pc));",
          "2033:   emit(cond | 0xC*B24 | B22 | src2.code()*B16 |",
          "2034:        src1.code()*B12 | 0xB*B8 | B4 | dst.code());",
          "",
          "[Removed Lines]",
          "2031:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2039:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2047:   ASSERT(!dst1.is(pc) && !dst2.is(pc));",
          "2048:   emit(cond | 0xC*B24 | B22 | B20 | dst2.code()*B16 |",
          "2049:        dst1.code()*B12 | 0xB*B8 | B4 | src.code());",
          "",
          "[Removed Lines]",
          "2046:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2054:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2061:   ASSERT(!src.is(pc));",
          "2062:   int sn, n;",
          "2063:   dst.split_code(&sn, &n);",
          "",
          "[Removed Lines]",
          "2060:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2068:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2076:   ASSERT(!dst.is(pc));",
          "2077:   int sn, n;",
          "2078:   src.split_code(&sn, &n);",
          "",
          "[Removed Lines]",
          "2075:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2083:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2197:                              const SwVfpRegister src,",
          "2198:                              VFPConversionMode mode,",
          "2199:                              const Condition cond) {",
          "2201:   emit(EncodeVCVT(F64, dst.code(), S32, src.code(), mode, cond));",
          "2202: }",
          "",
          "[Removed Lines]",
          "2200:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2208:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2206:                              const SwVfpRegister src,",
          "2207:                              VFPConversionMode mode,",
          "2208:                              const Condition cond) {",
          "2210:   emit(EncodeVCVT(F32, dst.code(), S32, src.code(), mode, cond));",
          "2211: }",
          "",
          "[Removed Lines]",
          "2209:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2217:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2215:                              const SwVfpRegister src,",
          "2216:                              VFPConversionMode mode,",
          "2217:                              const Condition cond) {",
          "2219:   emit(EncodeVCVT(F64, dst.code(), U32, src.code(), mode, cond));",
          "2220: }",
          "",
          "[Removed Lines]",
          "2218:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2226:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2224:                              const DwVfpRegister src,",
          "2225:                              VFPConversionMode mode,",
          "2226:                              const Condition cond) {",
          "2228:   emit(EncodeVCVT(S32, dst.code(), F64, src.code(), mode, cond));",
          "2229: }",
          "",
          "[Removed Lines]",
          "2227:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2235:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2233:                              const DwVfpRegister src,",
          "2234:                              VFPConversionMode mode,",
          "2235:                              const Condition cond) {",
          "2237:   emit(EncodeVCVT(U32, dst.code(), F64, src.code(), mode, cond));",
          "2238: }",
          "",
          "[Removed Lines]",
          "2236:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2244:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2242:                              const SwVfpRegister src,",
          "2243:                              VFPConversionMode mode,",
          "2244:                              const Condition cond) {",
          "2246:   emit(EncodeVCVT(F64, dst.code(), F32, src.code(), mode, cond));",
          "2247: }",
          "",
          "[Removed Lines]",
          "2245:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2253:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2251:                              const DwVfpRegister src,",
          "2252:                              VFPConversionMode mode,",
          "2253:                              const Condition cond) {",
          "2255:   emit(EncodeVCVT(F32, dst.code(), F64, src.code(), mode, cond));",
          "2256: }",
          "",
          "[Removed Lines]",
          "2254:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2262:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2259: void Assembler::vneg(const DwVfpRegister dst,",
          "2260:                      const DwVfpRegister src,",
          "2261:                      const Condition cond) {",
          "2262:   emit(cond | 0xE*B24 | 0xB*B20 | B16 | dst.code()*B12 |",
          "2263:        0x5*B9 | B8 | B6 | src.code());",
          "2264: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2270:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2267: void Assembler::vabs(const DwVfpRegister dst,",
          "2268:                      const DwVfpRegister src,",
          "2269:                      const Condition cond) {",
          "2270:   emit(cond | 0xE*B24 | 0xB*B20 | dst.code()*B12 |",
          "2271:        0x5*B9 | B8 | 0x3*B6 | src.code());",
          "2272: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2279:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2285:   emit(cond | 0xE*B24 | 0x3*B20 | src1.code()*B16 |",
          "2286:        dst.code()*B12 | 0x5*B9 | B8 | src2.code());",
          "2287: }",
          "",
          "[Removed Lines]",
          "2284:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2294:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2300:   emit(cond | 0xE*B24 | 0x3*B20 | src1.code()*B16 |",
          "2301:        dst.code()*B12 | 0x5*B9 | B8 | B6 | src2.code());",
          "2302: }",
          "",
          "[Removed Lines]",
          "2299:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2309:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2315:   emit(cond | 0xE*B24 | 0x2*B20 | src1.code()*B16 |",
          "2316:        dst.code()*B12 | 0x5*B9 | B8 | src2.code());",
          "2317: }",
          "",
          "[Removed Lines]",
          "2314:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2324:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2330:   emit(cond | 0xE*B24 | B23 | src1.code()*B16 |",
          "2331:        dst.code()*B12 | 0x5*B9 | B8 | src2.code());",
          "2332: }",
          "",
          "[Removed Lines]",
          "2329:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2339:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2343:   emit(cond | 0xE*B24 |B23 | 0x3*B20 | B18 |",
          "2344:        src1.code()*B12 | 0x5*B9 | B8 | B6 | src2.code());",
          "2345: }",
          "",
          "[Removed Lines]",
          "2342:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2352:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2356:   ASSERT(src2 == 0.0);",
          "2357:   emit(cond | 0xE*B24 |B23 | 0x3*B20 | B18 | B16 |",
          "2358:        src1.code()*B12 | 0x5*B9 | B8 | B6);",
          "",
          "[Removed Lines]",
          "2355:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2365:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2367:   emit(cond | 0xE*B24 | 0xE*B20 |  B16 |",
          "2368:        dst.code()*B12 | 0xA*B8 | B4);",
          "2369: }",
          "",
          "[Removed Lines]",
          "2366:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2376:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2377:   emit(cond | 0xE*B24 | 0xF*B20 |  B16 |",
          "2378:        dst.code()*B12 | 0xA*B8 | B4);",
          "2379: }",
          "",
          "[Removed Lines]",
          "2376:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2386:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2384:                       const Condition cond) {",
          "2388:   emit(cond | 0xE*B24 | B23 | 0x3*B20 | B16 |",
          "2389:        dst.code()*B12 | 0x5*B9 | B8 | 3*B6 | src.code());",
          "2390: }",
          "",
          "[Removed Lines]",
          "2387:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "2397:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/assembler-arm.h||deps/v8/src/arm/assembler-arm.h": [
          "File: deps/v8/src/arm/assembler-arm.h -> deps/v8/src/arm/assembler-arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   static bool IsSupported(CpuFeature f) {",
          "511:     ASSERT(initialized_);",
          "512:     if (f == VFP3 && !FLAG_enable_vfp3) return false;",
          "513:     return (supported_ & (1u << f)) != 0;",
          "514:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:     if (f == VFP2 && !FLAG_enable_vfp2) return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535:    public:",
          "536:     explicit Scope(CpuFeature f) {",
          "537:       unsigned mask = 1u << f;",
          "538:       ASSERT(CpuFeatures::IsSupported(f));",
          "539:       ASSERT(!Serializer::enabled() ||",
          "540:              (CpuFeatures::found_by_runtime_probing_ & mask) == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540:       if (f == VFP3) mask |= 1u << VFP2 | 1u << ARMv7;",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/builtins-arm.cc||deps/v8/src/arm/builtins-arm.cc": [
          "File: deps/v8/src/arm/builtins-arm.cc -> deps/v8/src/arm/builtins-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1247: void Builtins::Generate_OnStackReplacement(MacroAssembler* masm) {",
          "1248:   CpuFeatures::TryForceFeatureScope scope(VFP3);",
          "",
          "[Removed Lines]",
          "1249:   if (!CpuFeatures::IsSupported(VFP3)) {",
          "1250:     __ Abort(\"Unreachable code: Cannot optimize without VFP3 support.\");",
          "1251:     return;",
          "1252:   }",
          "",
          "[Added Lines]",
          "1249:   ASSERT(CPU::SupportsCrankshaft());",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/code-stubs-arm.cc||deps/v8/src/arm/code-stubs-arm.cc": [
          "File: deps/v8/src/arm/code-stubs-arm.cc -> deps/v8/src/arm/code-stubs-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:                                    FloatingPointHelper::Destination destination,",
          "520:                                    Register scratch1,",
          "521:                                    Register scratch2) {",
          "524:     __ mov(scratch1, Operand(r0, ASR, kSmiTagSize));",
          "525:     __ vmov(d7.high(), scratch1);",
          "526:     __ vcvt_f64_s32(d7, d7.high());",
          "",
          "[Removed Lines]",
          "522:   if (CpuFeatures::IsSupported(VFP3)) {",
          "523:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "522:   if (CpuFeatures::IsSupported(VFP2)) {",
          "523:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:   __ JumpIfNotHeapNumber(object, heap_number_map, scratch1, not_number);",
          "593:       destination == kVFPRegisters) {",
          "596:     __ sub(scratch1, object, Operand(kHeapObjectTag));",
          "597:     __ vldr(dst, scratch1, HeapNumber::kValueOffset);",
          "",
          "[Removed Lines]",
          "592:   if (CpuFeatures::IsSupported(VFP3) &&",
          "594:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "592:   if (CpuFeatures::IsSupported(VFP2) &&",
          "594:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "606:   __ bind(&is_smi);",
          "610:     __ vmov(dst.high(), scratch1);",
          "611:     __ vcvt_f64_s32(dst, dst.high());",
          "",
          "[Removed Lines]",
          "607:   if (CpuFeatures::IsSupported(VFP3)) {",
          "608:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "607:   if (CpuFeatures::IsSupported(VFP2)) {",
          "608:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "683:   Label done;",
          "687:     __ vmov(single_scratch, int_scratch);",
          "688:     __ vcvt_f64_s32(double_dst, single_scratch);",
          "689:     if (destination == kCoreRegisters) {",
          "",
          "[Removed Lines]",
          "685:   if (CpuFeatures::IsSupported(VFP3)) {",
          "686:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "685:   if (CpuFeatures::IsSupported(VFP2)) {",
          "686:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "776:   __ JumpIfNotHeapNumber(object, heap_number_map, scratch1, not_int32);",
          "782:     __ sub(scratch1, object, Operand(kHeapObjectTag));",
          "783:     __ vldr(double_dst, scratch1, HeapNumber::kValueOffset);",
          "",
          "[Removed Lines]",
          "779:   if (CpuFeatures::IsSupported(VFP3)) {",
          "780:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "779:   if (CpuFeatures::IsSupported(VFP2)) {",
          "780:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "852:     SwVfpRegister single_scratch = double_scratch.low();",
          "854:     __ sub(scratch1, object, Operand(kHeapObjectTag));",
          "",
          "[Removed Lines]",
          "850:   if (CpuFeatures::IsSupported(VFP3)) {",
          "851:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "850:   if (CpuFeatures::IsSupported(VFP2)) {",
          "851:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "978:   __ push(lr);",
          "979:   __ PrepareCallCFunction(0, 2, scratch);",
          "980:   if (masm->use_eabi_hardfloat()) {",
          "982:     __ vmov(d0, r0, r1);",
          "983:     __ vmov(d1, r2, r3);",
          "984:   }",
          "",
          "[Removed Lines]",
          "981:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "981:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "992:   if (masm->use_eabi_hardfloat()) {",
          "994:     __ vstr(d0,",
          "995:             FieldMemOperand(heap_number_result, HeapNumber::kValueOffset));",
          "996:   } else {",
          "",
          "[Removed Lines]",
          "993:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "993:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1209:   }",
          "1215:     __ SmiToDoubleVFPRegister(lhs, d7, r7, s15);",
          "1217:     __ sub(r7, rhs, Operand(kHeapObjectTag));",
          "",
          "[Removed Lines]",
          "1212:   if (CpuFeatures::IsSupported(VFP3)) {",
          "1214:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1212:   if (CpuFeatures::IsSupported(VFP2)) {",
          "1214:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1249:   }",
          "1255:     __ sub(r7, lhs, Operand(kHeapObjectTag));",
          "1256:     __ vldr(d7, r7, HeapNumber::kValueOffset);",
          "",
          "[Removed Lines]",
          "1252:   if (CpuFeatures::IsSupported(VFP3)) {",
          "1253:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1252:   if (CpuFeatures::IsSupported(VFP2)) {",
          "1253:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1362:     __ push(lr);",
          "1363:     __ PrepareCallCFunction(0, 2, r5);",
          "1364:     if (masm->use_eabi_hardfloat()) {",
          "1366:       __ vmov(d0, r0, r1);",
          "1367:       __ vmov(d1, r2, r3);",
          "1368:     }",
          "",
          "[Removed Lines]",
          "1365:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1365:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1442:     __ sub(r7, rhs, Operand(kHeapObjectTag));",
          "1443:     __ vldr(d6, r7, HeapNumber::kValueOffset);",
          "1444:     __ sub(r7, lhs, Operand(kHeapObjectTag));",
          "",
          "[Removed Lines]",
          "1440:   if (CpuFeatures::IsSupported(VFP3)) {",
          "1441:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1440:   if (CpuFeatures::IsSupported(VFP2)) {",
          "1441:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1527:   Label load_result_from_cache;",
          "1528:   if (!object_is_smi) {",
          "1529:     __ JumpIfSmi(object, &is_smi);",
          "1532:       __ CheckMap(object,",
          "1533:                   scratch1,",
          "1534:                   Heap::kHeapNumberMapRootIndex,",
          "",
          "[Removed Lines]",
          "1530:     if (CpuFeatures::IsSupported(VFP3)) {",
          "1531:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1530:     if (CpuFeatures::IsSupported(VFP2)) {",
          "1531:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1661:   Isolate* isolate = masm->isolate();",
          "1663:     __ bind(&lhs_not_nan);",
          "1665:     Label no_nan;",
          "1667:     __ VFPCompareAndSetFlags(d7, d6);",
          "",
          "[Removed Lines]",
          "1662:   if (CpuFeatures::IsSupported(VFP3)) {",
          "1664:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1662:   if (CpuFeatures::IsSupported(VFP2)) {",
          "1664:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1785:   Label patch;",
          "1786:   const Register map = r9.is(tos_) ? r7 : r9;",
          "",
          "[Removed Lines]",
          "1783:   CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1783:   CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1893:   __ stm(db_w, sp, kCallerSaved | lr.bit());",
          "1894:   if (save_doubles_ == kSaveFPRegs) {",
          "1896:     __ sub(sp, sp, Operand(kDoubleSize * DwVfpRegister::kNumRegisters));",
          "1897:     for (int i = 0; i < DwVfpRegister::kNumRegisters; i++) {",
          "1898:       DwVfpRegister reg = DwVfpRegister::from_code(i);",
          "",
          "[Removed Lines]",
          "1895:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1895:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1910:       ExternalReference::store_buffer_overflow_function(masm->isolate()),",
          "1911:       argument_count);",
          "1912:   if (save_doubles_ == kSaveFPRegs) {",
          "1914:     for (int i = 0; i < DwVfpRegister::kNumRegisters; i++) {",
          "1915:       DwVfpRegister reg = DwVfpRegister::from_code(i);",
          "1916:       __ vldr(reg, MemOperand(sp, i * kDoubleSize));",
          "",
          "[Removed Lines]",
          "1913:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1913:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2140:     __ mov(r0, r2);  // Move newly allocated heap number to r0.",
          "2141:   }",
          "2146:     __ vmov(s0, r1);",
          "2147:     __ vcvt_f64_s32(d0, s0);",
          "2148:     __ sub(r2, r0, Operand(kHeapObjectTag));",
          "",
          "[Removed Lines]",
          "2143:   if (CpuFeatures::IsSupported(VFP3)) {",
          "2145:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2143:   if (CpuFeatures::IsSupported(VFP2)) {",
          "2145:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2444:       FloatingPointHelper::Destination destination =",
          "2446:           op_ != Token::MOD ?",
          "2447:           FloatingPointHelper::kVFPRegisters :",
          "2448:           FloatingPointHelper::kCoreRegisters;",
          "",
          "[Removed Lines]",
          "2445:           CpuFeatures::IsSupported(VFP3) &&",
          "",
          "[Added Lines]",
          "2445:           CpuFeatures::IsSupported(VFP2) &&",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2473:         switch (op_) {",
          "2474:           case Token::ADD:",
          "2475:             __ vadd(d5, d6, d7);",
          "",
          "[Removed Lines]",
          "2472:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2472:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2562:             __ b(mi, &result_not_a_smi);",
          "2563:           } else {",
          "2564:             __ b(mi, not_numbers);",
          "",
          "[Removed Lines]",
          "2561:           if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "2561:           if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2598:       __ mov(r0, Operand(r5));",
          "2604:         __ vmov(s0, r2);",
          "2605:         if (op_ == Token::SHR) {",
          "2606:           __ vcvt_f64_u32(d0, s0);",
          "",
          "[Removed Lines]",
          "2600:       if (CpuFeatures::IsSupported(VFP3)) {",
          "2603:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2600:       if (CpuFeatures::IsSupported(VFP2)) {",
          "2603:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2761:       FloatingPointHelper::Destination destination =",
          "2763:               ? FloatingPointHelper::kVFPRegisters",
          "2764:               : FloatingPointHelper::kCoreRegisters;",
          "",
          "[Removed Lines]",
          "2762:           (CpuFeatures::IsSupported(VFP3) && op_ != Token::MOD)",
          "",
          "[Added Lines]",
          "2762:           (CpuFeatures::IsSupported(VFP2) && op_ != Token::MOD)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2787:                                                    &transition);",
          "2789:       if (destination == FloatingPointHelper::kVFPRegisters) {",
          "2791:         Label return_heap_number;",
          "2792:         switch (op_) {",
          "2793:           case Token::ADD:",
          "",
          "[Removed Lines]",
          "2790:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2790:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2960:             __ b(mi, (result_type_ <= BinaryOpIC::INT32)",
          "2961:                       ? &transition",
          "2962:                       : &return_heap_number);",
          "",
          "[Removed Lines]",
          "2959:           if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "2959:           if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2991:                                    scratch2,",
          "2992:                                    &call_runtime);",
          "2996:         if (op_ != Token::SHR) {",
          "2998:           __ vmov(double_scratch.low(), r2);",
          "",
          "[Removed Lines]",
          "2994:       if (CpuFeatures::IsSupported(VFP3)) {",
          "2995:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2994:       if (CpuFeatures::IsSupported(VFP2)) {",
          "2995:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3221:   const Register cache_entry = r0;",
          "3222:   const bool tagged = (argument_type_ == TAGGED);",
          "3226:     if (tagged) {",
          "",
          "[Removed Lines]",
          "3224:   if (CpuFeatures::IsSupported(VFP3)) {",
          "3225:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3224:   if (CpuFeatures::IsSupported(VFP2)) {",
          "3225:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3386: void TranscendentalCacheStub::GenerateCallCFunction(MacroAssembler* masm,",
          "3387:                                                     Register scratch) {",
          "3388:   Isolate* isolate = masm->isolate();",
          "3390:   __ push(lr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3388:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3447: void MathPowStub::Generate(MacroAssembler* masm) {",
          "3449:   const Register base = r1;",
          "3450:   const Register exponent = r2;",
          "3451:   const Register heapnumbermap = r5;",
          "",
          "[Removed Lines]",
          "3448:   CpuFeatures::Scope vfp3_scope(VFP3);",
          "",
          "[Added Lines]",
          "3449:   CpuFeatures::Scope vfp2_scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3546:       __ vadd(double_scratch, double_base, kDoubleRegZero);",
          "3548:       __ vsqrt(double_scratch, double_scratch);",
          "3549:       __ vdiv(double_result, double_result, double_scratch);",
          "3550:       __ jmp(&done);",
          "",
          "[Removed Lines]",
          "3547:       __ vmov(double_result, 1);",
          "",
          "[Added Lines]",
          "3548:       __ vmov(double_result, 1.0);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3902:   __ stm(db_w, sp, kCalleeSaved | lr.bit());",
          "3907:     __ vstm(db_w, sp, kFirstCalleeSavedDoubleReg, kLastCalleeSavedDoubleReg);",
          "",
          "[Removed Lines]",
          "3904:   if (CpuFeatures::IsSupported(VFP3)) {",
          "3905:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3905:   if (CpuFeatures::IsSupported(VFP2)) {",
          "3906:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3919:   int offset_to_argv = (kNumCalleeSaved + 1) * kPointerSize;",
          "3921:     offset_to_argv += kNumDoubleCalleeSaved * kDoubleSize;",
          "3922:   }",
          "3923:   __ ldr(r4, MemOperand(sp, offset_to_argv));",
          "",
          "[Removed Lines]",
          "3920:   if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "3921:   if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4055:   }",
          "4056: #endif",
          "4061:     __ vldm(ia_w, sp, kFirstCalleeSavedDoubleReg, kLastCalleeSavedDoubleReg);",
          "4062:   }",
          "",
          "[Removed Lines]",
          "4058:   if (CpuFeatures::IsSupported(VFP3)) {",
          "4059:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "4059:   if (CpuFeatures::IsSupported(VFP2)) {",
          "4060:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6590:     __ sub(r2, r1, Operand(kHeapObjectTag));",
          "",
          "[Removed Lines]",
          "6586:   if (CpuFeatures::IsSupported(VFP3)) {",
          "6587:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "6587:   if (CpuFeatures::IsSupported(VFP2)) {",
          "6588:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/code-stubs-arm.h||deps/v8/src/arm/code-stubs-arm.h": [
          "File: deps/v8/src/arm/code-stubs-arm.h -> deps/v8/src/arm/code-stubs-arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         mode_(mode),",
          "150:         operands_type_(BinaryOpIC::UNINITIALIZED),",
          "151:         result_type_(BinaryOpIC::UNINITIALIZED) {",
          "153:     ASSERT(OpBits::is_valid(Token::NUM_TOKENS));",
          "154:   }",
          "",
          "[Removed Lines]",
          "152:     use_vfp3_ = CpuFeatures::IsSupported(VFP3);",
          "",
          "[Added Lines]",
          "152:     use_vfp2_ = CpuFeatures::IsSupported(VFP2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:       BinaryOpIC::TypeInfo result_type = BinaryOpIC::UNINITIALIZED)",
          "160:       : op_(OpBits::decode(key)),",
          "161:         mode_(ModeBits::decode(key)),",
          "163:         operands_type_(operands_type),",
          "164:         result_type_(result_type) { }",
          "",
          "[Removed Lines]",
          "162:         use_vfp3_(VFP3Bits::decode(key)),",
          "",
          "[Added Lines]",
          "162:         use_vfp2_(VFP2Bits::decode(key)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   Token::Value op_;",
          "173:   OverwriteMode mode_;",
          "177:   BinaryOpIC::TypeInfo operands_type_;",
          "",
          "[Removed Lines]",
          "174:   bool use_vfp3_;",
          "",
          "[Added Lines]",
          "174:   bool use_vfp2_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:   class ModeBits: public BitField<OverwriteMode, 0, 2> {};",
          "184:   class OpBits: public BitField<Token::Value, 2, 7> {};",
          "186:   class OperandTypeInfoBits: public BitField<BinaryOpIC::TypeInfo, 10, 3> {};",
          "187:   class ResultTypeInfoBits: public BitField<BinaryOpIC::TypeInfo, 13, 3> {};",
          "",
          "[Removed Lines]",
          "185:   class VFP3Bits: public BitField<bool, 9, 1> {};",
          "",
          "[Added Lines]",
          "185:   class VFP2Bits: public BitField<bool, 9, 1> {};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:   int MinorKey() {",
          "191:     return OpBits::encode(op_)",
          "192:            | ModeBits::encode(mode_)",
          "194:            | OperandTypeInfoBits::encode(operands_type_)",
          "195:            | ResultTypeInfoBits::encode(result_type_);",
          "196:   }",
          "",
          "[Removed Lines]",
          "193:            | VFP3Bits::encode(use_vfp3_)",
          "",
          "[Added Lines]",
          "193:            | VFP2Bits::encode(use_vfp2_)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:     void SaveCallerSaveRegisters(MacroAssembler* masm, SaveFPRegsMode mode) {",
          "572:       masm->stm(db_w, sp, (kCallerSaved | lr.bit()) & ~scratch1_.bit());",
          "573:       if (mode == kSaveFPRegs) {",
          "575:         masm->sub(sp,",
          "576:                   sp,",
          "577:                   Operand(kDoubleSize * (DwVfpRegister::kNumRegisters - 1)));",
          "",
          "[Removed Lines]",
          "574:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "574:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "586:     inline void RestoreCallerSaveRegisters(MacroAssembler*masm,",
          "587:                                            SaveFPRegsMode mode) {",
          "588:       if (mode == kSaveFPRegs) {",
          "591:         for (int i = DwVfpRegister::kNumRegisters - 1; i > 0; i--) {",
          "592:           DwVfpRegister reg = DwVfpRegister::from_code(i);",
          "",
          "[Removed Lines]",
          "589:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "589:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/codegen-arm.cc||deps/v8/src/arm/codegen-arm.cc": [
          "File: deps/v8/src/arm/codegen-arm.cc -> deps/v8/src/arm/codegen-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   Label loop, entry, convert_hole, gc_required, only_change_map, done;",
          "",
          "[Removed Lines]",
          "110:   bool vfp3_supported = CpuFeatures::IsSupported(VFP3);",
          "",
          "[Added Lines]",
          "110:   bool vfp2_supported = CpuFeatures::IsSupported(VFP2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:   __ b(&entry);",
          "",
          "[Removed Lines]",
          "166:   if (!vfp3_supported) __ Push(r1, r0);",
          "",
          "[Added Lines]",
          "166:   if (!vfp2_supported) __ Push(r1, r0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:   __ UntagAndJumpIfNotSmi(r9, r9, &convert_hole);",
          "196:     __ vmov(s0, r9);",
          "197:     __ vcvt_f64_s32(d0, s0);",
          "198:     __ vstr(d0, r7, 0);",
          "",
          "[Removed Lines]",
          "194:   if (vfp3_supported) {",
          "195:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "194:   if (vfp2_supported) {",
          "195:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:   __ cmp(r7, r6);",
          "226:   __ b(lt, &loop);",
          "229:   __ pop(lr);",
          "230:   __ bind(&done);",
          "231: }",
          "",
          "[Removed Lines]",
          "228:   if (!vfp3_supported) __ Pop(r1, r0);",
          "",
          "[Added Lines]",
          "228:   if (!vfp2_supported) __ Pop(r1, r0);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/full-codegen-arm.cc||deps/v8/src/arm/full-codegen-arm.cc": [
          "File: deps/v8/src/arm/full-codegen-arm.cc -> deps/v8/src/arm/full-codegen-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "675:                                Label* if_true,",
          "676:                                Label* if_false,",
          "677:                                Label* fall_through) {",
          "679:     ToBooleanStub stub(result_register());",
          "680:     __ CallStub(&stub);",
          "681:     __ tst(result_register(), result_register());",
          "",
          "[Removed Lines]",
          "678:   if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "678:   if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3056:     __ PrepareCallCFunction(1, r0);",
          "3057:     __ ldr(r0, ContextOperand(context_register(), Context::GLOBAL_INDEX));",
          "3058:     __ ldr(r0, FieldMemOperand(r0, GlobalObject::kGlobalContextOffset));",
          "3059:     __ CallCFunction(ExternalReference::random_uint32_function(isolate()), 1);",
          "3064:     __ mov(r1, Operand(0x41000000));",
          "",
          "[Removed Lines]",
          "3055:   if (CpuFeatures::IsSupported(VFP3)) {",
          "3061:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3055:   if (CpuFeatures::IsSupported(VFP2)) {",
          "3061:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3181:   ASSERT(args->length() == 2);",
          "3182:   VisitForStackValue(args->at(0));",
          "3183:   VisitForStackValue(args->at(1));",
          "3185:     MathPowStub stub(MathPowStub::ON_STACK);",
          "3186:     __ CallStub(&stub);",
          "3187:   } else {",
          "",
          "[Removed Lines]",
          "3184:   if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "3184:   if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/macro-assembler-arm.cc||deps/v8/src/arm/macro-assembler-arm.cc": [
          "File: deps/v8/src/arm/macro-assembler-arm.cc -> deps/v8/src/arm/macro-assembler-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: void MacroAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
          "270:   if (!dst.is(src)) {",
          "271:     vmov(dst, src);",
          "272:   }",
          "",
          "[Removed Lines]",
          "268:   ASSERT(CpuFeatures::IsSupported(VFP3));",
          "269:   CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "268:   ASSERT(CpuFeatures::IsSupported(VFP2));",
          "269:   CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "778: void MacroAssembler::Vmov(const DwVfpRegister dst,",
          "779:                           const double imm,",
          "780:                           const Condition cond) {",
          "782:   static const DoubleRepresentation minus_zero(-0.0);",
          "783:   static const DoubleRepresentation zero(0.0);",
          "784:   DoubleRepresentation value(imm);",
          "",
          "[Removed Lines]",
          "781:   ASSERT(CpuFeatures::IsEnabled(VFP3));",
          "",
          "[Added Lines]",
          "781:   ASSERT(CpuFeatures::IsEnabled(VFP2));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930: }",
          "932: void MacroAssembler::GetCFunctionDoubleResult(const DoubleRegister dst) {",
          "933:   if (use_eabi_hardfloat()) {",
          "934:     Move(dst, d0);",
          "935:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:   ASSERT(CpuFeatures::IsSupported(VFP2));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1969:   FloatingPointHelper::Destination destination;",
          "1971:     destination = FloatingPointHelper::kVFPRegisters;",
          "1972:   } else {",
          "1973:     destination = FloatingPointHelper::kCoreRegisters;",
          "",
          "[Removed Lines]",
          "1970:   if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "1971:   if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1984:                                           scratch4,",
          "1985:                                           s2);",
          "1986:   if (destination == FloatingPointHelper::kVFPRegisters) {",
          "1988:     vstr(d0, scratch1, 0);",
          "1989:   } else {",
          "1990:     str(mantissa_reg, MemOperand(scratch1, 0));",
          "",
          "[Removed Lines]",
          "1987:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "1988:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2331:                                     Register scratch2,",
          "2332:                                     DwVfpRegister double_scratch,",
          "2333:                                     Label *not_int32) {",
          "2336:     sub(scratch, source, Operand(kHeapObjectTag));",
          "2337:     vldr(double_scratch, scratch, HeapNumber::kValueOffset);",
          "2338:     vcvt_s32_f64(double_scratch.low(), double_scratch);",
          "",
          "[Removed Lines]",
          "2334:   if (CpuFeatures::IsSupported(VFP3)) {",
          "2335:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2335:   if (CpuFeatures::IsSupported(VFP2)) {",
          "2336:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2427:                                      Register scratch1,",
          "2428:                                      Register scratch2,",
          "2429:                                      CheckForInexactConversion check_inexact) {",
          "2432:   Register prev_fpscr = scratch1;",
          "2433:   Register scratch = scratch2;",
          "",
          "[Removed Lines]",
          "2430:   ASSERT(CpuFeatures::IsSupported(VFP3));",
          "2431:   CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2431:   ASSERT(CpuFeatures::IsSupported(VFP2));",
          "2432:   CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2546:                                       Register scratch,",
          "2547:                                       Register input_high,",
          "2548:                                       Register input_low) {",
          "2550:   ASSERT(!input_high.is(result));",
          "2551:   ASSERT(!input_low.is(result));",
          "2552:   ASSERT(!input_low.is(input_high));",
          "",
          "[Removed Lines]",
          "2549:   CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "2550:   CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3334: void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg) {",
          "3335:   if (use_eabi_hardfloat()) {",
          "3336:     Move(d0, dreg);",
          "3337:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3336:   ASSERT(CpuFeatures::IsSupported(VFP2));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3343: void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg1,",
          "3344:                                              DoubleRegister dreg2) {",
          "3345:   if (use_eabi_hardfloat()) {",
          "3346:     if (dreg2.is(d0)) {",
          "3347:       ASSERT(!dreg1.is(d1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3347:   ASSERT(CpuFeatures::IsSupported(VFP2));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3361: void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg,",
          "3362:                                              Register reg) {",
          "3363:   if (use_eabi_hardfloat()) {",
          "3364:     Move(d0, dreg);",
          "3365:     Move(r0, reg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3366:   ASSERT(CpuFeatures::IsSupported(VFP2));",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/stub-cache-arm.cc||deps/v8/src/arm/stub-cache-arm.cc": [
          "File: deps/v8/src/arm/stub-cache-arm.cc -> deps/v8/src/arm/stub-cache-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "986:                             Register fval,",
          "987:                             Register scratch1,",
          "988:                             Register scratch2) {",
          "991:     __ vmov(s0, ival);",
          "992:     __ add(scratch1, dst, Operand(wordoffset, LSL, 2));",
          "993:     __ vcvt_f32_s32(s0, s0);",
          "",
          "[Removed Lines]",
          "989:   if (CpuFeatures::IsSupported(VFP3)) {",
          "990:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "989:   if (CpuFeatures::IsSupported(VFP2)) {",
          "990:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2093:     return Handle<Code>::null();",
          "2094:   }",
          "2097:   const int argc = arguments().immediate();",
          "",
          "[Removed Lines]",
          "2092:   if (!CpuFeatures::IsSupported(VFP3)) {",
          "2096:   CpuFeatures::Scope scope_vfp3(VFP3);",
          "",
          "[Added Lines]",
          "2092:   if (!CpuFeatures::IsSupported(VFP2)) {",
          "2096:   CpuFeatures::Scope scope_vfp2(VFP2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3549:                                 Register scratch1,",
          "3550:                                 DwVfpRegister double_scratch0,",
          "3551:                                 Label* fail) {",
          "3554:     Label key_ok;",
          "",
          "[Removed Lines]",
          "3552:   if (CpuFeatures::IsSupported(VFP3)) {",
          "3553:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3552:   if (CpuFeatures::IsSupported(VFP2)) {",
          "3553:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3636:       __ ldr(value, MemOperand(r3, key, LSL, 1));",
          "3637:       break;",
          "3638:     case EXTERNAL_FLOAT_ELEMENTS:",
          "3641:         __ add(r2, r3, Operand(key, LSL, 1));",
          "3642:         __ vldr(s0, r2, 0);",
          "3643:       } else {",
          "",
          "[Removed Lines]",
          "3639:       if (CpuFeatures::IsSupported(VFP3)) {",
          "3640:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3639:       if (CpuFeatures::IsSupported(VFP2)) {",
          "3640:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3645:       }",
          "3646:       break;",
          "3647:     case EXTERNAL_DOUBLE_ELEMENTS:",
          "3650:         __ add(r2, r3, Operand(key, LSL, 2));",
          "3651:         __ vldr(d0, r2, 0);",
          "3652:       } else {",
          "",
          "[Removed Lines]",
          "3648:       if (CpuFeatures::IsSupported(VFP3)) {",
          "3649:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3648:       if (CpuFeatures::IsSupported(VFP2)) {",
          "3649:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3698:     __ mov(r0, r5);",
          "3702:       __ vmov(s0, value);",
          "3703:       __ vcvt_f64_s32(d0, s0);",
          "3704:       __ sub(r3, r0, Operand(kHeapObjectTag));",
          "",
          "[Removed Lines]",
          "3700:     if (CpuFeatures::IsSupported(VFP3)) {",
          "3701:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3700:     if (CpuFeatures::IsSupported(VFP2)) {",
          "3701:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3730:       Label box_int, done;",
          "3731:       __ tst(value, Operand(0xC0000000));",
          "3732:       __ b(ne, &box_int);",
          "",
          "[Removed Lines]",
          "3728:     if (CpuFeatures::IsSupported(VFP3)) {",
          "3729:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3728:     if (CpuFeatures::IsSupported(VFP2)) {",
          "3729:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3789:   } else if (elements_kind == EXTERNAL_FLOAT_ELEMENTS) {",
          "",
          "[Removed Lines]",
          "3792:     if (CpuFeatures::IsSupported(VFP3)) {",
          "3793:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3792:     if (CpuFeatures::IsSupported(VFP2)) {",
          "3793:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3857:       __ Ret();",
          "3858:     }",
          "3859:   } else if (elements_kind == EXTERNAL_DOUBLE_ELEMENTS) {",
          "",
          "[Removed Lines]",
          "3860:     if (CpuFeatures::IsSupported(VFP3)) {",
          "3861:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3860:     if (CpuFeatures::IsSupported(VFP2)) {",
          "3861:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3983:       __ add(r3, r3, Operand(key, LSL, 2));",
          "3985:       FloatingPointHelper::Destination destination;",
          "3987:         destination = FloatingPointHelper::kVFPRegisters;",
          "3988:       } else {",
          "3989:         destination = FloatingPointHelper::kCoreRegisters;",
          "",
          "[Removed Lines]",
          "3986:       if (CpuFeatures::IsSupported(VFP3)) {",
          "",
          "[Added Lines]",
          "3986:       if (CpuFeatures::IsSupported(VFP2)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3993:           d0, r6, r7,  // These are: double_dst, dst1, dst2.",
          "3994:           r4, s2);  // These are: scratch2, single_scratch.",
          "3995:       if (destination == FloatingPointHelper::kVFPRegisters) {",
          "3997:         __ vstr(d0, r3, 0);",
          "3998:       } else {",
          "3999:         __ str(r6, MemOperand(r3, 0));",
          "",
          "[Removed Lines]",
          "3996:         CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "3996:         CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4034:       if (elements_kind == EXTERNAL_FLOAT_ELEMENTS) {",
          "",
          "[Removed Lines]",
          "4031:     if (CpuFeatures::IsSupported(VFP3)) {",
          "4032:       CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "4031:     if (CpuFeatures::IsSupported(VFP2)) {",
          "4032:       CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------"
        ],
        "deps/v8/src/flag-definitions.h||deps/v8/src/flag-definitions.h": [
          "File: deps/v8/src/flag-definitions.h -> deps/v8/src/flag-definitions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             \"enable use of SAHF instruction if available (X64 only)\")",
          "264: DEFINE_bool(enable_vfp3, true,",
          "265:             \"enable use of VFP3 instructions if available - this implies \"",
          "267: DEFINE_bool(enable_armv7, true,",
          "268:             \"enable use of ARMv7 instructions if available (ARM only)\")",
          "269: DEFINE_bool(enable_fpu, true,",
          "",
          "[Removed Lines]",
          "266:             \"enabling ARMv7 instructions (ARM only)\")",
          "",
          "[Added Lines]",
          "266:             \"enabling ARMv7 and VFP2 instructions (ARM only)\")",
          "267: DEFINE_bool(enable_vfp2, true,",
          "268:             \"enable use of VFP2 instructions if available\")",
          "",
          "---------------"
        ],
        "deps/v8/src/platform-linux.cc||deps/v8/src/platform-linux.cc": [
          "File: deps/v8/src/platform-linux.cc -> deps/v8/src/platform-linux.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   switch (feature) {",
          "135:     case VFP3:",
          "136:       search_string = \"vfpv3\";",
          "137:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     case VFP2:",
          "136:       search_string = \"vfp\";",
          "137:       break;",
          "",
          "---------------"
        ],
        "deps/v8/src/v8globals.h||deps/v8/src/v8globals.h": [
          "File: deps/v8/src/v8globals.h -> deps/v8/src/v8globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:                   CPUID = 10,  // x86",
          "443:                   VFP3 = 1,    // ARM",
          "444:                   ARMv7 = 2,   // ARM",
          "445:                   SAHF = 0,    // x86",
          "446:                   FPU = 1};    // MIPS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:                   VFP2 = 3,    // ARM",
          "",
          "---------------"
        ],
        "deps/v8/test/cctest/test-assembler-arm.cc||deps/v8/test/cctest/test-assembler-arm.cc": [
          "File: deps/v8/test/cctest/test-assembler-arm.cc -> deps/v8/test/cctest/test-assembler-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:   Assembler assm(Isolate::Current(), NULL, 0);",
          "648:     __ mov(ip, Operand(sp));",
          "649:     __ stm(db_w, sp, r4.bit() | fp.bit() | lr.bit());",
          "",
          "[Removed Lines]",
          "645:   if (CpuFeatures::IsSupported(VFP3)) {",
          "646:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "645:   if (CpuFeatures::IsSupported(VFP2)) {",
          "646:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "754:   Assembler assm(Isolate::Current(), NULL, 0);",
          "759:     __ mov(ip, Operand(sp));",
          "760:     __ stm(db_w, sp, r4.bit() | fp.bit() | lr.bit());",
          "",
          "[Removed Lines]",
          "756:   if (CpuFeatures::IsSupported(VFP3)) {",
          "757:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "756:   if (CpuFeatures::IsSupported(VFP2)) {",
          "757:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "869:   Assembler assm(Isolate::Current(), NULL, 0);",
          "874:     __ mov(ip, Operand(sp));",
          "875:     __ stm(db_w, sp, r4.bit() | fp.bit() | lr.bit());",
          "",
          "[Removed Lines]",
          "871:   if (CpuFeatures::IsSupported(VFP3)) {",
          "872:     CpuFeatures::Scope scope(VFP3);",
          "",
          "[Added Lines]",
          "871:   if (CpuFeatures::IsSupported(VFP2)) {",
          "872:     CpuFeatures::Scope scope(VFP2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ea5a4c468fe290f00b6ebc78c33c2a60cc53625",
      "candidate_info": {
        "commit_hash": "9ea5a4c468fe290f00b6ebc78c33c2a60cc53625",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9ea5a4c468fe290f00b6ebc78c33c2a60cc53625",
        "files": [
          "test/simple/test-process-argv-0.js"
        ],
        "message": "fix simple/test-process-argv-0 on windows",
        "before_after_code_files": [
          "test/simple/test-process-argv-0.js||test/simple/test-process-argv-0.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-process-argv-0.js||test/simple/test-process-argv-0.js": [
          "File: test/simple/test-process-argv-0.js -> test/simple/test-process-argv-0.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   });",
          "43:   child.on('exit', function () {",
          "44:     console.error('CHILD: %s', childErr.trim().split('\\n').join('\\nCHILD: '));",
          "46:   });",
          "47: }",
          "48: else {",
          "",
          "[Removed Lines]",
          "45:     assert.equal(childArgv0, process.execPath);",
          "",
          "[Added Lines]",
          "45:     if (process.platform === 'win32') {",
          "47:       assert.equal(childArgv0, './node');",
          "48:     } else {",
          "49:       assert.equal(childArgv0, process.execPath);",
          "50:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac1aaddc00103e7a2130d642fca90e0a5be18e16",
      "candidate_info": {
        "commit_hash": "ac1aaddc00103e7a2130d642fca90e0a5be18e16",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ac1aaddc00103e7a2130d642fca90e0a5be18e16",
        "files": [
          "src/node.cc",
          "src/node.h"
        ],
        "message": "MakeCallback: Return the callback return value",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "976: MakeCallback(const Handle<Object> object,",
          "977:              const char* method,",
          "978:              int argc,",
          "",
          "[Removed Lines]",
          "975: void",
          "",
          "[Added Lines]",
          "975: Handle<Value>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "981:   return scope.Close(MakeCallback(object, String::NewSymbol(method), argc, argv));",
          "982: }",
          "985: MakeCallback(const Handle<Object> object,",
          "986:              const Handle<String> symbol,",
          "987:              int argc,",
          "",
          "[Removed Lines]",
          "984: void",
          "",
          "[Added Lines]",
          "984: Handle<Value>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "996:   assert(callback_v->IsFunction());",
          "997:   Local<Function> callback = Local<Function>::Cast(callback_v);",
          "999: }",
          "1002: MakeCallback(const Handle<Object> object,",
          "1003:              const Handle<Function> callback,",
          "1004:              int argc,",
          "",
          "[Removed Lines]",
          "1001: void",
          "",
          "[Added Lines]",
          "999:   return scope.Close(MakeCallback(object, callback, argc, argv));",
          "1002: Handle<Value>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1010:   TryCatch try_catch;",
          "1014:   if (try_catch.HasCaught()) {",
          "1015:     FatalException(try_catch);",
          "1016:   }",
          "1017: }",
          "",
          "[Removed Lines]",
          "1012:   callback->Call(object, argc, argv);",
          "",
          "[Added Lines]",
          "1013:   Local<Value> ret = callback->Call(object, argc, argv);",
          "1019:   return scope.Close(ret);",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   extern \"C\" node::node_module_struct modname ## _module;",
          "245: NODE_EXTERN void SetErrno(uv_err_t err);",
          "260: }  // namespace node",
          "261: #endif  // SRC_NODE_H_",
          "",
          "[Removed Lines]",
          "246: NODE_EXTERN void MakeCallback(const v8::Handle<v8::Object> object,",
          "247:                               const char* method,",
          "248:                               int argc,",
          "249:                               v8::Handle<v8::Value> argv[]);",
          "251: NODE_EXTERN void MakeCallback(const v8::Handle<v8::Object> object,",
          "252:                               const v8::Handle<v8::String> symbol,",
          "253:                               int argc,",
          "254:                               v8::Handle<v8::Value> argv[]);",
          "256: NODE_EXTERN void MakeCallback(const v8::Handle<v8::Object> object,",
          "257:                               const v8::Handle<v8::Function> callback,",
          "258:                               int argc,",
          "259:                               v8::Handle<v8::Value> argv[]);",
          "",
          "[Added Lines]",
          "246: NODE_EXTERN v8::Handle<v8::Value>",
          "247: MakeCallback(const v8::Handle<v8::Object> object,",
          "248:              const char* method,",
          "249:              int argc,",
          "250:              v8::Handle<v8::Value> argv[]);",
          "252: NODE_EXTERN v8::Handle<v8::Value>",
          "253: MakeCallback(const v8::Handle<v8::Object> object,",
          "254:              const v8::Handle<v8::String> symbol,",
          "255:              int argc,",
          "256:              v8::Handle<v8::Value> argv[]);",
          "258: NODE_EXTERN v8::Handle<v8::Value>",
          "259: MakeCallback(const v8::Handle<v8::Object> object,",
          "260:              const v8::Handle<v8::Function> callback,",
          "261:              int argc,",
          "262:              v8::Handle<v8::Value> argv[]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e5217d3208f6792a500fc408b4dcef0a17c5412",
      "candidate_info": {
        "commit_hash": "6e5217d3208f6792a500fc408b4dcef0a17c5412",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6e5217d3208f6792a500fc408b4dcef0a17c5412",
        "files": [
          "benchmark/io.js"
        ],
        "message": "Fix bug in io benchmark",
        "before_after_code_files": [
          "benchmark/io.js||benchmark/io.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/io.js||benchmark/io.js": [
          "File: benchmark/io.js -> benchmark/io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: function wt(tsize, bsize, done) {",
          "64:   var start = Date.now();",
          "66:   s.addListener('close', function() {",
          "67:     var end = Date.now();",
          "68:     var diff = end - start;",
          "",
          "[Removed Lines]",
          "65:   s = writetest(tsize, bsizes[0]);",
          "",
          "[Added Lines]",
          "65:   s = writetest(tsize, bsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: function rt(tsize, bsize, done) {",
          "75:   var start = Date.now();",
          "77:   s.addListener('close', function() {",
          "78:     var end = Date.now();",
          "79:     var diff = end - start;",
          "",
          "[Removed Lines]",
          "76:   s = readtest(tsize, bsizes[0]);",
          "",
          "[Added Lines]",
          "76:   s = readtest(tsize, bsize);",
          "",
          "---------------"
        ]
      }
    }
  ]
}