{
  "cve_id": "CVE-2021-30500",
  "cve_desc": "Null pointer dereference was found in upx PackLinuxElf::canUnpack() in p_lx_elf.cpp,in version UPX 4.0.0. That allow attackers to execute arbitrary code and cause a denial of service via a crafted file.",
  "repo": "upx/upx",
  "patch_hash": "90279abdfcd235172eab99651043051188938dcc",
  "patch_info": {
    "commit_hash": "90279abdfcd235172eab99651043051188938dcc",
    "repo": "upx/upx",
    "commit_url": "https://github.com/upx/upx/commit/90279abdfcd235172eab99651043051188938dcc",
    "files": [
      "src/p_lx_elf.cpp"
    ],
    "message": "PackLinuxElf::canUnpack must checkEhdr() for ELF input\n\nhttps://github.com/upx/upx/issues/485\n\tmodified:   p_lx_elf.cpp",
    "before_after_code_files": [
      "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
    ]
  },
  "patch_diff": {
    "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
      "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1972: int PackLinuxElf32::canUnpack()",
      "1973: {",
      "1976:     }",
      "1977:     if (Elf32_Ehdr::ET_DYN==get_te16(&ehdri.e_type)) {",
      "1978:         PackLinuxElf32help1(fi);",
      "1979:     }",
      "1980:     return false;",
      "1981: }",
      "",
      "[Removed Lines]",
      "1974:     if (super::canUnpack()) {",
      "1975:         return true;",
      "",
      "[Added Lines]",
      "1974:     if (checkEhdr(&ehdri)) {",
      "1975:         return false;",
      "1981:     if (super::canUnpack()) {",
      "1982:         return true;",
      "1983:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2397: int PackLinuxElf64::canUnpack()",
      "2398: {",
      "2401:     }",
      "2402:     if (Elf64_Ehdr::ET_DYN==get_te16(&ehdri.e_type)) {",
      "2403:         PackLinuxElf64help1(fi);",
      "",
      "[Removed Lines]",
      "2399:     if (super::canUnpack()) {",
      "2400:         return true;",
      "",
      "[Added Lines]",
      "2403:     if (checkEhdr(&ehdri)) {",
      "2404:         return false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2413:         fi->seek(filesz+offset, SEEK_SET);",
      "2414:         MemBuffer buf(32 + sizeof(overlay_offset));",
      "2415:         fi->readx(buf, buf.getSize());",
      "2417:     }",
      "2418:     return false;",
      "2419: }",
      "",
      "[Removed Lines]",
      "2416:         return PackUnix::find_overlay_offset(buf);",
      "",
      "[Added Lines]",
      "2420:         unsigned x = PackUnix::find_overlay_offset(buf);",
      "2421:         if (x) {",
      "2422:             return x;",
      "2423:         }",
      "2424:     }",
      "2425:     if (super::canUnpack()) {",
      "2426:         return true;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be050693f229d629f56650f67f612fc68e285600",
      "candidate_info": {
        "commit_hash": "be050693f229d629f56650f67f612fc68e285600",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/be050693f229d629f56650f67f612fc68e285600",
        "files": [
          "src/p_lx_elf.cpp"
        ],
        "message": "PackLinuxElf::canUnpack must checkEhdr() for ELF input\n\nhttps://github.com/upx/upx/issues/485\n\tmodified:   p_lx_elf.cpp",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1972: int PackLinuxElf32::canUnpack()",
          "1973: {",
          "1976:     }",
          "1977:     if (Elf32_Ehdr::ET_DYN==get_te16(&ehdri.e_type)) {",
          "1978:         PackLinuxElf32help1(fi);",
          "1979:     }",
          "1980:     return false;",
          "1981: }",
          "",
          "[Removed Lines]",
          "1974:     if (super::canUnpack()) {",
          "1975:         return true;",
          "",
          "[Added Lines]",
          "1974:     if (checkEhdr(&ehdri)) {",
          "1975:         return false;",
          "1981:     if (super::canUnpack()) {",
          "1982:         return true;",
          "1983:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2397: int PackLinuxElf64::canUnpack()",
          "2398: {",
          "2401:     }",
          "2402:     if (Elf64_Ehdr::ET_DYN==get_te16(&ehdri.e_type)) {",
          "2403:         PackLinuxElf64help1(fi);",
          "",
          "[Removed Lines]",
          "2399:     if (super::canUnpack()) {",
          "2400:         return true;",
          "",
          "[Added Lines]",
          "2403:     if (checkEhdr(&ehdri)) {",
          "2404:         return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2413:         fi->seek(filesz+offset, SEEK_SET);",
          "2414:         MemBuffer buf(32 + sizeof(overlay_offset));",
          "2415:         fi->readx(buf, buf.getSize());",
          "2417:     }",
          "2418:     return false;",
          "2419: }",
          "",
          "[Removed Lines]",
          "2416:         return PackUnix::find_overlay_offset(buf);",
          "",
          "[Added Lines]",
          "2420:         unsigned x = PackUnix::find_overlay_offset(buf);",
          "2421:         if (x) {",
          "2422:             return x;",
          "2423:         }",
          "2424:     }",
          "2425:     if (super::canUnpack()) {",
          "2426:         return true;",
          "",
          "---------------"
        ]
      }
    }
  ]
}